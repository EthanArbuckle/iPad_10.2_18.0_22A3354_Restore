uint64_t sub_10018A454(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 280);
  v5 = *v1;
  *(_QWORD *)(*v1 + 288) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 296) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalMessagingService();
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100261EC8, 255, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC17C);
  *v6 = v5;
  v6[1] = sub_10018A544;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10018A544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 296);
  v4[38] = a1;
  v4[39] = v1;
  swift_task_dealloc(v5);
  swift_release(v4[36]);
  if (v1)
  {
    v6 = sub_10018AC44;
    v7 = 0;
  }
  else
  {
    v6 = sub_10018A5C0;
    v7 = a1;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_10018A5C0()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to LocalMessaging.send(message:messageOptions:)[1]);
  v0[40] = v1;
  *v1 = v0;
  v1[1] = sub_10018A620;
  return LocalMessaging.send(message:messageOptions:)(v0[28], v0[20], v0[17]);
}

uint64_t sub_10018A620()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  *(_QWORD *)(*(_QWORD *)v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10018A698;
  }
  else
  {
    v5 = v2[28];
    v6 = v2[24];
    v7 = *(void (**)(uint64_t, uint64_t))(v2[25] + 8);
    v2[42] = v7;
    v7(v5, v6);
    v4 = sub_10018A93C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10018A698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 304));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v10 = *(_QWORD *)(v0 + 328);
  swift_errorRetain(v10);
  v11 = swift_errorRetain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v30 = v15;
    *(_DWORD *)v14 = 136446466;
    *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD000000000000023, 0x8000000100201640, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2082;
    *(_QWORD *)(v0 + 56) = v10;
    swift_errorRetain(v10);
    v16 = sub_100037A5C(&qword_100265260);
    v17 = String.init<A>(describing:)(v0 + 56, v16);
    v19 = v18;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v17, v18, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v19);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s error: %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v10);
  }
  else
  {
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v20 = *(_QWORD *)(v0 + 240);
  v22 = *(_QWORD *)(v0 + 224);
  v21 = *(_QWORD *)(v0 + 232);
  v24 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 216);
  v25 = *(_QWORD *)(v0 + 184);
  v26 = *(_QWORD *)(v0 + 160);
  v27 = *(_QWORD *)(v0 + 136);
  v28 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018A93C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 272))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 192));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v4 = *(_QWORD *)(v0 + 216);
    v5 = *(_QWORD *)(v0 + 192);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    v13(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully sent finding capability over local IDS to device: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 336))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
  }

  return swift_task_switch(sub_10018AAF0, *(_QWORD *)(v0 + 104), 0);
}

uint64_t sub_10018AAF0()
{
  uint64_t v0;

  sub_10018E7E8(*(_QWORD *)(v0 + 248), &qword_10025FB50, (uint64_t)qword_100265F28, (char *)sub_100183CBC);
  return swift_task_switch(sub_10018AB44, 0, 0);
}

uint64_t sub_10018AB44()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 304));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  v10 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 224);
  v11 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 136);
  v18 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018AC44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 144);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v7 = *(_QWORD *)(v0 + 312);
  swift_errorRetain(v7);
  v8 = swift_errorRetain(v7);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v27 = v12;
    *(_DWORD *)v11 = 136446466;
    *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD000000000000023, 0x8000000100201640, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2082;
    *(_QWORD *)(v0 + 56) = v7;
    swift_errorRetain(v7);
    v13 = sub_100037A5C(&qword_100265260);
    v14 = String.init<A>(describing:)(v0 + 56, v13);
    v16 = v15;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v14, v15, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s error: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v17 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 232);
  v21 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 160);
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018AED8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B2E8);
  sub_100037A9C(v0, (uint64_t)qword_10027B2E8);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0xD00000000000001DLL, 0x80000001001F9E00);
}

uint64_t sub_10018AF58(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for MessagingCapability(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100018A7C(&qword_100266158, 255, v12, (uint64_t)&protocol conformance descriptor for MessagingCapability);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100018A7C(&qword_100266160, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MessagingCapability, (uint64_t)&protocol conformance descriptor for MessagingCapability);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_10018B1BC((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_10018B1BC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for MessagingCapability(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 <= v10)
  {
    v12 = v10 + 1;
    if ((a3 & 1) != 0)
      sub_10018B938(v12);
    else
      sub_10018B5F4(v12);
    v13 = *v3;
    v14 = *(_QWORD *)(*v3 + 40);
    v15 = sub_100018A7C(&qword_100266158, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MessagingCapability, (uint64_t)&protocol conformance descriptor for MessagingCapability);
    v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
    v17 = -1 << *(_BYTE *)(v13 + 32);
    a2 = v16 & ~v17;
    if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v18 = ~v17;
      v19 = *(_QWORD *)(v7 + 72);
      v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
      do
      {
        v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
        v21 = sub_100018A7C(&qword_100266160, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MessagingCapability, (uint64_t)&protocol conformance descriptor for MessagingCapability);
        v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        if ((v22 & 1) != 0)
          goto LABEL_14;
        a2 = (a2 + 1) & v18;
      }
      while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
  else if ((a3 & 1) == 0)
  {
    sub_10018B3C0();
  }
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_14:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void *sub_10018B3C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for MessagingCapability(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037A5C(&qword_100266168);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_31:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v21 >= v17)
      goto LABEL_29;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_29;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_29;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
        {
          v13 = v21 + 3;
          if (v21 + 3 >= v17)
            goto LABEL_29;
          v22 = *(_QWORD *)(v10 + 8 * v13);
          if (!v22)
          {
            v13 = v21 + 4;
            if (v21 + 4 >= v17)
            {
LABEL_29:
              result = (void *)swift_release(v6);
              v1 = v25;
              goto LABEL_31;
            }
            v22 = *(_QWORD *)(v10 + 8 * v13);
            v23 = v21 + 4;
            if (!v22)
              break;
          }
        }
      }
    }
LABEL_28:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_29;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_28;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10018B5F4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;

  v2 = v1;
  v4 = type metadata accessor for MessagingCapability(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_100266168);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_38:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v35 = v2;
  v36 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_27;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v21 >= v37)
      goto LABEL_36;
    v22 = *(_QWORD *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_36;
      v22 = *(_QWORD *)(v36 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v37)
          goto LABEL_36;
        v22 = *(_QWORD *)(v36 + 8 * v17);
        if (!v22)
        {
          v17 = v21 + 3;
          if (v21 + 3 >= v37)
            goto LABEL_36;
          v22 = *(_QWORD *)(v36 + 8 * v17);
          if (!v22)
          {
            v17 = v21 + 4;
            if (v21 + 4 >= v37)
            {
LABEL_36:
              result = swift_release_n(v8, 2);
              v2 = v35;
              goto LABEL_38;
            }
            v22 = *(_QWORD *)(v36 + 8 * v17);
            v23 = v21 + 4;
            if (!v22)
              break;
          }
        }
      }
    }
LABEL_26:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_27:
    v24 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v24 * v20, v4);
    v25 = *(_QWORD *)(v10 + 40);
    v26 = sub_100018A7C(&qword_100266158, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MessagingCapability, (uint64_t)&protocol conformance descriptor for MessagingCapability);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    v27 = -1 << *(_BYTE *)(v10 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v18 * v24, v7, v4);
    ++*(_QWORD *)(v10 + 16);
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v37)
      goto LABEL_36;
    v22 = *(_QWORD *)(v36 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10018B938(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for MessagingCapability(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_100266168);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_40;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v39 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = v2;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_27;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v20 >= v38)
      goto LABEL_36;
    v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v38)
        goto LABEL_36;
      v21 = v39[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v38)
          goto LABEL_36;
        v21 = v39[v16];
        if (!v21)
        {
          v16 = v20 + 3;
          if (v20 + 3 >= v38)
            goto LABEL_36;
          v21 = v39[v16];
          if (!v21)
            break;
        }
      }
    }
LABEL_26:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_27:
    v23 = v7;
    v24 = *(_QWORD *)(v7 + 48);
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v26(v6, v24 + v25 * v19, v4);
    v27 = *(_QWORD *)(v9 + 40);
    v28 = sub_100018A7C(&qword_100266158, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MessagingCapability, (uint64_t)&protocol conformance descriptor for MessagingCapability);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v14 + 8 * v31);
      }
      while (v35 == -1);
      v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v23;
  }
  v16 = v20 + 4;
  if (v20 + 4 < v38)
  {
    v21 = v39[v16];
    v22 = v20 + 4;
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_42;
        if (v16 >= v38)
          goto LABEL_36;
        v21 = v39[v16];
        ++v22;
        if (v21)
          goto LABEL_26;
      }
    }
    goto LABEL_26;
  }
LABEL_36:
  swift_release(v7);
  v2 = v37;
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 >= 64)
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_40:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

uint64_t sub_10018BCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for Device(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = *(_BYTE *)(v0 + v4);
  v6 = v0 + v3;
  v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + v0 + 8);
  v8 = *(_QWORD *)(v0 + (((v4 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc(dword_1002660F4);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_1000087DC;
  return sub_100186D0C(v6, v5, v7, v8);
}

uint64_t sub_10018BD60@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = type metadata accessor for Device(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10018BDF4@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = type metadata accessor for Handle(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10018BE88(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 25) = a2;
  *(_QWORD *)(v2 + 48) = a1;
  return swift_task_switch(sub_10018BEA4, 0, 0);
}

uint64_t sub_10018BEA4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_BYTE *)(v0 + 25) & 1;
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027B2B8);
  sub_1000CECA0(v1, v2);
  v4 = sub_1000CECA0(v1, v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_BYTE *)(v0 + 25);
  v9 = *(_QWORD *)(v0 + 48);
  if (v7)
  {
    v10 = v8 & 1;
    v11 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v25 = v24;
    *(_DWORD *)v11 = 136446466;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(0xD000000000000021, 0x80000001002014A0, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v9;
    *(_BYTE *)(v0 + 24) = v10;
    sub_1000CECA0(v9, v10);
    v12 = sub_100037A5C(&qword_100266118);
    v13 = String.init<A>(describing:)(v0 + 16, v12);
    v15 = v14;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v13, v14, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v15);
    sub_10007E9BC(v9, v10);
    sub_10007E9BC(v9, v10);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s completed with %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    v16 = v8 & 1;
    sub_10007E9BC(*(_QWORD *)(v0 + 48), v8 & 1);
    sub_10007E9BC(v9, v16);
  }

  if ((*(_BYTE *)(v0 + 25) & 1) == 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v18 = *(_QWORD *)(v0 + 48);
  type metadata accessor for NITokenService(0);
  v19 = sub_10018C274();
  v20 = swift_allocError(&type metadata for NITokenService_LocalMessaging.Error, v19, 0, 0);
  *(_QWORD *)(v0 + 56) = v20;
  *v21 = v18;
  swift_errorRetain(v18);
  swift_errorRetain(v18);
  v22 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 64) = v22;
  v23 = (_QWORD *)swift_task_alloc(dword_100264B54);
  *(_QWORD *)(v0 + 72) = v23;
  *v23 = v0;
  v23[1] = sub_10018C1D8;
  return sub_100140EB8(0xD00000000000003DLL, 0x8000000100200160, v20, v22);
}

uint64_t sub_10018C1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  return swift_task_switch(sub_10018C240, 0, 0);
}

uint64_t sub_10018C240()
{
  uint64_t v0;

  sub_10007E9BC(*(_QWORD *)(v0 + 48), 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10018C274()
{
  unint64_t result;

  result = qword_100266110;
  if (!qword_100266110)
  {
    result = swift_getWitnessTable(&unk_1001F9F3C, &type metadata for NITokenService_LocalMessaging.Error);
    atomic_store(result, (unint64_t *)&qword_100266110);
  }
  return result;
}

uint64_t sub_10018C2BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for Device(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(_BYTE *)(v1 + v6);
  v8 = v1 + v5;
  v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + v1 + 8);
  v10 = (_QWORD *)swift_task_alloc(dword_100266124);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_1001870B8(a1, v8, v7, v9);
}

uint64_t sub_10018C36C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for MessagingCapability(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_100018A7C(&qword_100266158, 255, v10, (uint64_t)&protocol conformance descriptor for MessagingCapability);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v17 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v15(v6, v13, v2);
      sub_10018AF58((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

void *sub_10018C498(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for MessagingCapability(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100037A5C(&qword_100266168);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100018A7C(&qword_100266158, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MessagingCapability, (uint64_t)&protocol conformance descriptor for MessagingCapability);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100018A7C(&qword_100266160, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MessagingCapability, (uint64_t)&protocol conformance descriptor for MessagingCapability);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

void *sub_10018C708(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36[24];

  v34 = a3;
  v5 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v33 - v13;
  v15 = sub_100037A5C(&qword_100266148);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 != -1)
    swift_once(a1, v34);
  v19 = sub_100037A9C(v15, a2);
  v20 = swift_beginAccess(v19, v36, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))(v18, v19, v15, v20);
  ManagedDefault.wrappedValue.getter(v15);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v21 = v35;
  if (!v35)
    return &_swiftEmptySetSingleton;
  v22 = *(_QWORD *)(v35 + 16);
  if (v22)
  {
    swift_bridgeObjectRetain(v35);
    v33 = v21;
    v23 = (_QWORD *)(v21 + 40);
    v24 = _swiftEmptyArrayStorage;
    v34 = v12;
    do
    {
      v25 = *(v23 - 1);
      v26 = *v23;
      swift_bridgeObjectRetain(*v23);
      UUID.init(uuidString:)(v25, v26);
      swift_bridgeObjectRelease(v26);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        sub_1000087A0((uint64_t)v7, (uint64_t *)&unk_1002675F0);
      }
      else
      {
        v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v27(v14, v7, v8);
        v27(v12, v14, v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
          v24 = (_QWORD *)sub_100161464(0, v24[2] + 1, 1, (unint64_t)v24);
        v29 = v24[2];
        v28 = v24[3];
        if (v29 >= v28 >> 1)
          v24 = (_QWORD *)sub_100161464(v28 > 1, v29 + 1, 1, (unint64_t)v24);
        v24[2] = v29 + 1;
        v30 = (unint64_t)v24
            + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
            + *(_QWORD *)(v9 + 72) * v29;
        v12 = v34;
        v27((char *)v30, v34, v8);
      }
      v23 += 2;
      --v22;
    }
    while (v22);
    v21 = v33;
    swift_bridgeObjectRelease(v33);
  }
  else
  {
    v24 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v21);
  v31 = sub_10016B648((uint64_t)v24);
  swift_bridgeObjectRelease(v24);
  return (void *)v31;
}

uint64_t sub_10018CA0C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16[3];
  uint64_t v17;
  _BYTE v18[16];

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027B2B8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v16[0] = v5;
    *(_DWORD *)v4 = 136446210;
    v17 = sub_10002BA84(0xD000000000000014, 0x80000001002014F0, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  v6 = sub_10018C708(&qword_10025FB48, (uint64_t)qword_100265F10, (char *)sub_100183C98);
  swift_bridgeObjectRelease(v6);
  v7 = sub_1001677B4((uint64_t)&_swiftEmptySetSingleton);
  v8 = sub_100183128((uint64_t)v7);
  swift_release(v7);
  if (qword_10025FB48 != -1)
    swift_once(&qword_10025FB48, sub_100183C98);
  v9 = sub_100037A5C(&qword_100266148);
  v10 = sub_100037A9C(v9, (uint64_t)qword_100265F10);
  v17 = (uint64_t)v8;
  swift_beginAccess(v10, v16, 33, 0);
  ManagedDefault.wrappedValue.setter(&v17, v9);
  swift_endAccess(v16);
  v11 = sub_10018C708(&qword_10025FB50, (uint64_t)qword_100265F28, (char *)sub_100183CBC);
  swift_bridgeObjectRelease(v11);
  v12 = sub_1001677B4((uint64_t)&_swiftEmptySetSingleton);
  v13 = sub_100183128((uint64_t)v12);
  swift_release(v12);
  if (qword_10025FB50 != -1)
    swift_once(&qword_10025FB50, sub_100183CBC);
  v14 = sub_100037A9C(v9, (uint64_t)qword_100265F28);
  v17 = (uint64_t)v13;
  swift_beginAccess(v14, v16, 33, 0);
  ManagedDefault.wrappedValue.setter(&v17, v9);
  return swift_endAccess(v16);
}

uint64_t sub_10018CCDC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[13] = a1;
  v2[14] = v1;
  v3 = type metadata accessor for Destination(0);
  v2[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[16] = v4;
  v2[17] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_1002660D8);
  v2[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Device(0);
  v2[19] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[20] = v7;
  v2[21] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10018CD88, v1, 0);
}

uint64_t sub_10018CD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t My;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B2B8);
  *(_QWORD *)(v0 + 176) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(32, -1);
    v21 = v6;
    *(_DWORD *)v5 = 141558275;
    *(_QWORD *)(v0 + 88) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2081;
    *(_QWORD *)(v0 + 96) = sub_10002BA84(0xD00000000000001BLL, 0x80000001002015E0, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v5 + 14, v5 + 22);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Extracted OwnerTokenEnvelopeRequestV1: %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100018A7C(&qword_100261A08, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v8 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v8, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  v9 = sub_10002BB90((_QWORD *)(v0 + 16));
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  if ((My & 1) != 0)
  {
    if (v12)
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v21 = v14;
      *(_DWORD *)v13 = 136446210;
      *(_QWORD *)(v0 + 80) = sub_10002BA84(0xD000000000000029, 0x80000001002015B0, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v13 + 4, v13 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s Watch requested owner token. Sending now.", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }

    v15 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 184) = v15;
    *v15 = v0;
    v15[1] = sub_10018D1E8;
    return daemon.getter();
  }
  else
  {
    if (v12)
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v21 = v18;
      *(_DWORD *)v17 = 136446210;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD000000000000029, 0x80000001002015B0, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v17 + 4, v17 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s Feature.FindMy.redStripe FF disabled.", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    v19 = *(_QWORD *)(v0 + 136);
    v20 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v20);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10018D1E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 184);
  v5 = *v1;
  *(_QWORD *)(*v1 + 192) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 200) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalMessagingService();
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100261EC8, 255, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC17C);
  *v6 = v5;
  v6[1] = sub_10018D2D8;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10018D2D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 200);
  v3[26] = a1;
  v3[27] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[14];
    v6 = sub_10018D7E8;
  }
  else
  {
    v7 = v3[14];
    swift_release(v3[24]);
    v6 = sub_10018D354;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10018D354()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[26];
  v0[28] = Destination.destination.getter();
  v0[29] = v2;
  return swift_task_switch(sub_10018D398, v1, 0);
}

uint64_t sub_10018D398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 240) = *(_QWORD *)(*(_QWORD *)(v0 + 208) + 128);
  v1 = sub_100037A5C(&qword_100261EC0);
  v2 = sub_10001013C(&qword_1002660E0, &qword_100261EC0, (uint64_t)&protocol conformance descriptor for LocalMessaging<A>);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_10018D420, v3, v4);
}

uint64_t sub_10018D420()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[29];
  v2 = v0[14];
  dispatch thunk of LocalMessaging.device(fromID:)(v0[28], v1);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10018D47C, v2, 0);
}

uint64_t sub_10018D47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v5 = *(_QWORD *)(v0 + 128);
    v4 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 104);
    sub_1000087A0(v3, &qword_1002660D8);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v13 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 120);
    if (v11)
    {
      v25 = *(_QWORD *)(v0 + 208);
      v15 = swift_slowAlloc(22, -1);
      v16 = swift_slowAlloc(32, -1);
      v26 = v16;
      *(_DWORD *)v15 = 141558275;
      *(_QWORD *)(v0 + 64) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2081;
      v17 = sub_100018A7C(&qword_100261998, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
      v20 = v19;
      *(_QWORD *)(v0 + 72) = sub_10002BA84(v18, v19, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease(v20);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No IDSDevice for %{private,mask.hash}s!", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
      swift_release(v25);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 208));
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }

    v23 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v24);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 168), v3, v1);
    v21 = (_QWORD *)swift_task_alloc(dword_1002660EC);
    *(_QWORD *)(v0 + 248) = v21;
    *v21 = v0;
    v21[1] = sub_10018D720;
    return sub_1001868E0(*(_QWORD *)(v0 + 168), 1);
  }
}

uint64_t sub_10018D720()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  return swift_task_switch(sub_10018D778, v1, 0);
}

uint64_t sub_10018D778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 208));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018D7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018D844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  v5 = sub_100037A5C(&qword_100266130);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v4[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Destination(0);
  v4[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[18] = v8;
  v4[19] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Account(0);
  v4[20] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[21] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v11);
  v4[23] = swift_task_alloc(v11);
  return swift_task_switch(sub_10018D90C, v3, 0);
}

void sub_10018D90C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[14];

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = v0[10];
  v2 = v0[23];
  v3 = v0[20];
  v4 = v0[21];
  v5 = v0[18];
  v40 = v0[19];
  v6 = v0[17];
  v47 = v0[16];
  v45 = v0[14];
  v7 = v0[11];
  v42 = v0[15];
  v43 = v0[12];
  v8 = type metadata accessor for Logger(0);
  v0[24] = sub_100037A9C(v8, (uint64_t)qword_10027B2B8);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9(v2, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v40, v7, v6);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v47, v43, v45);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = v0[23];
  if (v13)
  {
    v15 = v0[22];
    v35 = v0[21];
    v44 = v12;
    v16 = v0[20];
    v37 = v0[19];
    v36 = v0[17];
    v41 = v0[16];
    v46 = v0[15];
    v38 = v0[18];
    v39 = v0[14];
    v17 = swift_slowAlloc(72, -1);
    v48 = swift_slowAlloc(128, -1);
    v49[0] = v48;
    *(_DWORD *)v17 = 136447747;
    v0[4] = sub_10002BA84(0xD00000000000003ELL, 0x80000001001FD940, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2160;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v17 + 14, v17 + 22);
    *(_WORD *)(v17 + 22) = 2081;
    v9(v15, v14, v16);
    v18 = String.init<A>(describing:)(v15, v16);
    v20 = v19;
    v0[2] = sub_10002BA84(v18, v19, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v14, v16);
    *(_WORD *)(v17 + 32) = 2160;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v17 + 34, v17 + 42);
    *(_WORD *)(v17 + 42) = 2081;
    v21 = sub_100018A7C(&qword_100261998, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v36, v21);
    v24 = v23;
    v0[8] = sub_10002BA84(v22, v23, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v17 + 44, v17 + 52);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v36);
    *(_WORD *)(v17 + 52) = 2160;
    v0[9] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v17 + 54, v17 + 62);
    *(_WORD *)(v17 + 62) = 2081;
    v25 = sub_10001013C(&qword_1002661C0, &qword_100266130, (uint64_t)&protocol conformance descriptor for Message<A>);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v39, v25);
    v28 = v27;
    v0[6] = sub_10002BA84(v26, v27, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v17 + 64, v17 + 72);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v41, v39);
    _os_log_impl((void *)&_mh_execute_header, v11, v44, "Local IDS %{public}s\naccount: %{private,mask.hash}s\ndestination %{private,mask.hash}s\nmessage: %{private,mask.hash}s", (uint8_t *)v17, 0x48u);
    swift_arrayDestroy(v48, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v30 = v0[18];
    v29 = v0[19];
    v32 = v0[16];
    v31 = v0[17];
    v33 = v0[14];
    v34 = v0[15];
    (*(void (**)(uint64_t, _QWORD))(v0[21] + 8))(v14, v0[20]);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);

  }
  Message.type.getter(v0[14]);
  __asm { BR              X10 }
}

uint64_t sub_10018E038()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10018E0F4;
  else
    v4 = sub_10018E09C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 104), 0);
}

uint64_t sub_10018E09C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018E0F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 208);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "messageReceived handler error: %{public}@", v5, 0xCu);
    v8 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018E298()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10018E2FC;
  else
    v4 = sub_10018EB1C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 104), 0);
}

uint64_t sub_10018E2FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 224);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "messageReceived handler error: %{public}@", v5, 0xCu);
    v8 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10018E4A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100266150;
  if (!qword_100266150)
  {
    v1 = sub_10003C1FC(&qword_1002625F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100266150);
  }
  return result;
}

unint64_t sub_10018E4FC()
{
  unint64_t result;

  result = qword_100266190;
  if (!qword_100266190)
  {
    result = swift_getWitnessTable(&unk_1001FAC3C, &type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1);
    atomic_store(result, (unint64_t *)&qword_100266190);
  }
  return result;
}

unint64_t sub_10018E540()
{
  unint64_t result;

  result = qword_100266198;
  if (!qword_100266198)
  {
    result = swift_getWitnessTable(&unk_1001FAC14, &type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1);
    atomic_store(result, &qword_100266198);
  }
  return result;
}

unint64_t sub_10018E584()
{
  unint64_t result;

  result = qword_1002661A8;
  if (!qword_1002661A8)
  {
    result = swift_getWitnessTable(&unk_1001FB0D0, &type metadata for OwnerTokenEnvelopeRequestV1);
    atomic_store(result, (unint64_t *)&qword_1002661A8);
  }
  return result;
}

unint64_t sub_10018E5C8()
{
  unint64_t result;

  result = qword_1002661B0;
  if (!qword_1002661B0)
  {
    result = swift_getWitnessTable(&unk_1001FB0A8, &type metadata for OwnerTokenEnvelopeRequestV1);
    atomic_store(result, &qword_1002661B0);
  }
  return result;
}

unint64_t sub_10018E60C()
{
  unint64_t result;

  result = qword_1002661D0;
  if (!qword_1002661D0)
  {
    result = swift_getWitnessTable(&unk_1001FABEC, &type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1);
    atomic_store(result, &qword_1002661D0);
  }
  return result;
}

uint64_t sub_10018E650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Device(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_10018E6CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(type metadata accessor for Device(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc(dword_1002661DC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10003BF7C;
  return sub_1001897D0(v4, v5);
}

unint64_t sub_10018E760()
{
  unint64_t result;

  result = qword_1002661F0;
  if (!qword_1002661F0)
  {
    result = swift_getWitnessTable(&unk_1001FABC4, &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1);
    atomic_store(result, (unint64_t *)&qword_1002661F0);
  }
  return result;
}

unint64_t sub_10018E7A4()
{
  unint64_t result;

  result = qword_1002661F8;
  if (!qword_1002661F8)
  {
    result = swift_getWitnessTable(&unk_1001FAB9C, &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1);
    atomic_store(result, &qword_1002661F8);
  }
  return result;
}

uint64_t sub_10018E7E8(uint64_t a1, _QWORD *a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v22[24];
  _QWORD *v23;
  void *v24;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v10);
  v14 = &v22[-v13 - 8];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  v24 = sub_10018C708(a2, a3, a4);
  sub_100164FF0((uint64_t)v14, v12);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v14, v8);
  v15 = v24;
  v16 = sub_1001677B4((uint64_t)v24);
  swift_bridgeObjectRelease(v15);
  v17 = sub_100183128((uint64_t)v16);
  swift_release(v16);
  if (*a2 != -1)
    swift_once(a2, a4);
  v18 = sub_100037A5C(&qword_100266148);
  v19 = sub_100037A9C(v18, a3);
  v23 = v17;
  swift_beginAccess(v19, v22, 33, 0);
  ManagedDefault.wrappedValue.setter(&v23, v18);
  return swift_endAccess(v22);
}

uint64_t sub_10018E964()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10026620C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_10026621C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10005D184;
  return sub_100184550();
}

_QWORD *initializeBufferWithCopyOfBuffer for NITokenService_LocalMessaging.Error(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

uint64_t destroy for NITokenService_LocalMessaging.Error(_QWORD *a1)
{
  return swift_errorRelease(*a1);
}

uint64_t *assignWithCopy for NITokenService_LocalMessaging.Error(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  swift_errorRetain(*a2);
  v4 = *a1;
  *a1 = v3;
  swift_errorRelease(v4);
  return a1;
}

uint64_t *assignWithTake for NITokenService_LocalMessaging.Error(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for NITokenService_LocalMessaging.Error(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NITokenService_LocalMessaging.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NITokenService_LocalMessaging.Error()
{
  return &type metadata for NITokenService_LocalMessaging.Error;
}

uint64_t sub_10018EB24(char a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;

  if ((a1 & 1) == 0)
  {
    v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_10003C33C(0, 1, 1, _swiftEmptyArrayStorage);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_10003C33C((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v2[2] = v4 + 1;
  v5 = &v2[2 * v4];
  v5[4] = 0x65776F6C6C6F662ELL;
  v5[5] = 0xE900000000000072;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10003C33C(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = sub_10003C33C((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = &v2[2 * v7];
    v8[4] = 0x69776F6C6C6F662ELL;
    v8[5] = 0xEA0000000000676ELL;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10003C33C(0, v2[2] + 1, 1, v2);
    v10 = v2[2];
    v9 = v2[3];
    if (v10 >= v9 >> 1)
      v2 = sub_10003C33C((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
    v2[2] = v10 + 1;
    v11 = &v2[2 * v10];
    v11[4] = 0x466572757475662ELL;
    v11[5] = 0xEF7265776F6C6C6FLL;
  }
  if ((a1 & 8) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10003C33C(0, v2[2] + 1, 1, v2);
    v13 = v2[2];
    v12 = v2[3];
    if (v13 >= v12 >> 1)
      v2 = sub_10003C33C((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
    v2[2] = v13 + 1;
    v14 = &v2[2 * v13];
    v14[4] = 0x466572757475662ELL;
    v14[5] = 0xEF7265776F6C6C6FLL;
  }
  v15 = sub_100037A5C(&qword_1002625F8);
  v16 = sub_10017ED40();
  v17 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v15, v16);
  v19 = v18;
  swift_bridgeObjectRelease(v2);
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  v21._countAndFlagsBits = 93;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return 91;
}

_QWORD *sub_10018EDD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v17 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v14 = v1;
    v18 = _swiftEmptyArrayStorage;
    sub_1001E7930(0, v6, 0);
    v7 = v18;
    v8 = type metadata accessor for DiscoveryToken(0);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v15 = *(_QWORD *)(v9 + 72);
    v16 = v8;
    type metadata accessor for DiscoveryToken.Bucket(0);
    do
    {
      DateInterval.end.getter();
      v18 = v7;
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
      {
        sub_1001E7930(v11 > 1, v12 + 1, 1);
        v7 = v18;
      }
      v7[2] = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v12, v5, v17);
      v10 += v15;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_10018EF4C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1[10] = v0;
  v2 = type metadata accessor for XPCAlarm.Criteria.Options(0);
  v1[11] = v2;
  v1[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for XPCAlarm.Criteria(0);
  v1[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for XPCAlarm(0);
  v1[14] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[15] = v5;
  v1[16] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C((uint64_t *)&unk_100262930);
  v1[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v1[18] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[19] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[20] = swift_task_alloc(v9);
  v1[21] = swift_task_alloc(v9);
  v1[22] = swift_task_alloc(v9);
  v1[23] = swift_task_alloc(v9);
  return swift_task_switch(sub_10018F064, v0, 0);
}

uint64_t sub_10018F064()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v0[24] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[9] = sub_10002BA84(0xD000000000000010, 0x80000001002016A0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  static XPCAlarm.unregister(identifier:)(0xD000000000000036, 0x80000001001FC5B0);
  v7 = (_QWORD *)swift_task_alloc(dword_100266384);
  v0[25] = v7;
  *v7 = v0;
  v7[1] = sub_10018F228;
  return sub_10019CA44();
}

uint64_t sub_10018F228(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_BYTE *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10018F288, v3, 0);
}

uint64_t sub_10018F288(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(v1 + 240) == 1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_100263DDC);
    *(_QWORD *)(v1 + 208) = v2;
    *v2 = v1;
    v2[1] = sub_10018F45C;
    return sub_1001144F4();
  }
  else
  {
    v4 = Logger.logObject.getter(a1);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v15 = v7;
      *(_DWORD *)v6 = 136446210;
      *(_QWORD *)(v1 + 16) = sub_10002BA84(0xD000000000000010, 0x80000001002016A0, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v6 + 4, v6 + 12);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s not eligible.", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    v8 = *(_QWORD *)(v1 + 176);
    v10 = *(_QWORD *)(v1 + 160);
    v9 = *(_QWORD *)(v1 + 168);
    v12 = *(_QWORD *)(v1 + 128);
    v11 = *(_QWORD *)(v1 + 136);
    v14 = *(_QWORD *)(v1 + 96);
    v13 = *(_QWORD *)(v1 + 104);
    swift_task_dealloc(*(_QWORD *)(v1 + 184));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10018F45C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10018F4BC, v3, 0);
}

uint64_t sub_10018F4BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[2];

  v1 = *(_QWORD *)(v0 + 216);
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = *(_QWORD *)(v0 + 144);
    v2 = *(_QWORD *)(v0 + 152);
    v4 = *(char **)(v0 + 136);
    v5 = sub_10018EDD0(*(_QWORD *)(v0 + 216));
    swift_bridgeObjectRelease(v1);
    sub_10018FBB8((uint64_t)v5, v4);
    swift_bridgeObjectRelease(v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) == 1)
    {
      v6 = *(_QWORD *)(v0 + 80);
      sub_100190D48(*(_QWORD *)(v0 + 136));
      v7 = swift_retain(v6);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.default.getter(v8);
      v10 = os_log_type_enabled(v8, v9);
      v11 = *(_QWORD *)(v0 + 80);
      if (v10)
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v12 = 134217984;
        *(_QWORD *)(v0 + 40) = sub_10019DE84();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v12 + 4, v12 + 12);
        swift_release(v11);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Default end date to: now + %lld seconds", v12, 0xCu);
        swift_slowDealloc(v12, -1, -1);
      }
      else
      {
        swift_release(*(_QWORD *)(v0 + 80));
      }

      v44 = *(_QWORD *)(v0 + 152);
      v43 = *(_QWORD *)(v0 + 160);
      v45 = *(_QWORD *)(v0 + 144);
      static Date.trustedNow.getter(v43);
      v46 = sub_10019DE84();
      Date.addingTimeInterval(_:)(v46, (double)v46);
      v42 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v42(v43, v45);
      v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
    }
    else
    {
      v27 = *(_QWORD *)(v0 + 168);
      v26 = *(_QWORD *)(v0 + 176);
      v29 = *(_QWORD *)(v0 + 144);
      v28 = *(_QWORD *)(v0 + 152);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 32))(v26, *(_QWORD *)(v0 + 136), v29);
      v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
      v31 = v30(v27, v26, v29);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      v34 = os_log_type_enabled(v32, v33);
      v35 = *(_QWORD *)(v0 + 168);
      v36 = *(_QWORD *)(v0 + 144);
      if (v34)
      {
        v57 = *(_QWORD *)(v0 + 152);
        v37 = swift_slowAlloc(22, -1);
        v58 = swift_slowAlloc(64, -1);
        v59[0] = v58;
        *(_DWORD *)v37 = 136446466;
        *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD000000000000010, 0x80000001002016A0, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v37 + 4, v37 + 12);
        *(_WORD *)(v37 + 12) = 2082;
        v38 = sub_100004EA8(&qword_100260AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v39 = dispatch thunk of CustomStringConvertible.description.getter(v36, v38);
        v41 = v40;
        *(_QWORD *)(v0 + 56) = sub_10002BA84(v39, v40, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v37 + 14, v37 + 22);
        swift_bridgeObjectRelease(v41);
        v42 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
        v42(v35, v36);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "%{public}s Nearest token end date %{public}s", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1, -1);
        swift_slowDealloc(v37, -1, -1);
      }
      else
      {
        v42 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 152) + 8);
        v42(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
      }

      v47 = *(_QWORD *)(v0 + 176);
      v48 = *(_QWORD *)(v0 + 144);
      Date.addingTimeInterval(_:)(v49, 2.0);
      v42(v47, v48);
    }
    *(_QWORD *)(v0 + 224) = v42;
    v50 = *(_QWORD *)(v0 + 160);
    v51 = *(_QWORD *)(v0 + 96);
    v52 = *(_QWORD *)(v0 + 88);
    v30(v50, *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 144));
    *(_QWORD *)(v0 + 32) = _swiftEmptyArrayStorage;
    v53 = sub_100004EA8(&qword_100266228, (uint64_t (*)(uint64_t))&type metadata accessor for XPCAlarm.Criteria.Options, (uint64_t)&protocol conformance descriptor for XPCAlarm.Criteria.Options);
    v54 = sub_100037A5C(&qword_100266230);
    v55 = sub_100190D88();
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 32, v54, v55, v52, v53);
    XPCAlarm.Criteria.init(date:options:)(v50, v51);
    v56 = (_QWORD *)swift_task_alloc(async function pointer to XPCAlarm.init(identifier:criteria:)[1]);
    *(_QWORD *)(v0 + 232) = v56;
    *v56 = v0;
    v56[1] = sub_10018FAA4;
    return XPCAlarm.init(identifier:criteria:)(*(_QWORD *)(v0 + 128), 0xD000000000000036, 0x80000001001FC5B0, *(_QWORD *)(v0 + 104));
  }
  else
  {
    v13 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 216));
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v59[0] = v17;
      *(_DWORD *)v16 = 136446210;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000010, 0x80000001002016A0, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v16 + 4, v16 + 12);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s no friend token to rotate.", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }

    v18 = *(_QWORD *)(v0 + 176);
    v20 = *(_QWORD *)(v0 + 160);
    v19 = *(_QWORD *)(v0 + 168);
    v22 = *(_QWORD *)(v0 + 128);
    v21 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 96);
    v23 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10018FAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_10018FB1C, v4, 0);
}

uint64_t sub_10018FB1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(_QWORD, _QWORD))(v0 + 224))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 144));
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018FBB8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  __n128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);

  v4 = sub_100037A5C((uint64_t *)&unk_100262930);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v31 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v18(v9, 1, 1, v10);
    goto LABEL_7;
  }
  v33 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v36 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  v36(v9, a1 + v33, v10);
  v34 = a1;
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v18(v9, 0, 1, v10);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v19(v9, 1, v10) == 1)
  {
LABEL_7:
    sub_100190D48((uint64_t)v9);
    v24 = a2;
    v25 = 1;
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v24, v25, 1, v10);
  }
  v32 = a2;
  v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v16, v9, v10);
  v21 = swift_bridgeObjectRetain(v34);
  v22 = v17 - 1;
  if (v22)
  {
    v35 = *(_QWORD *)(v11 + 72);
    v27 = v34 + v35 + v33;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t, __n128))v36)(v7, v27, v10, v21);
      v18(v7, 0, 1, v10);
      if (v19(v7, 1, v10) == 1)
        break;
      v20(v14, v7, v10);
      v28 = sub_100004EA8(&qword_100266240, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v29 = dispatch thunk of static Comparable.< infix(_:_:)(v14, v16, v10, v28);
      v30 = *(void (**)(char *, uint64_t))(v11 + 8);
      if ((v29 & 1) != 0)
      {
        v30(v16, v10);
        v20(v16, v14, v10);
      }
      else
      {
        v30(v14, v10);
      }
      v27 += v35;
      if (!--v22)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v18)(v7, 1, 1, v10, v21);
  }
  swift_bridgeObjectRelease(v34);
  sub_100190D48((uint64_t)v7);
  v23 = v32;
  v20(v32, v16, v10);
  v24 = v23;
  v25 = 0;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v24, v25, 1, v10);
}

uint64_t sub_10018FE90()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[94] = v0;
  v1[95] = *v0;
  v2 = sub_100037A5C((uint64_t *)&unk_100265180);
  v1[96] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10018FEF4, v0, 0);
}

uint64_t sub_10018FEF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  *(_QWORD *)(v0 + 776) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v14 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 744) = sub_10002BA84(0xD000000000000017, 0x80000001002016C0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = sub_1001C30A4();
  if ((v7 & 1) != 0)
  {
    v8 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 784) = v8;
    *v8 = v0;
    v8[1] = sub_1001901C4;
    return daemon.getter();
  }
  else
  {
    v10 = Logger.logObject.getter(v7);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v14 = v13;
      *(_DWORD *)v12 = 136446210;
      *(_QWORD *)(v0 + 696) = sub_10002BA84(0xD000000000000017, 0x80000001002016C0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 696, v0 + 704, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s isFindingCapable == false.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 768));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001901C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 784);
  *(_QWORD *)(*(_QWORD *)v1 + 792) = a1;
  swift_task_dealloc(v3);
  v4 = type metadata accessor for Daemon(0);
  v5 = sub_100004EA8((unint64_t *)&qword_100261630, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_100190258, v6, v7);
}

uint64_t sub_100190258()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[99];
  v2 = v0[94];
  v0[100] = Daemon.xpcAlarmEventHandler.getter();
  swift_release(v1);
  return swift_task_switch(sub_1001902A4, v2, 0);
}

uint64_t sub_1001902A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint8_t *v15;
  __int128 v16;

  v2 = *(_QWORD *)(v1 + 800);
  v3 = Logger.logObject.getter(a1);
  v4 = v3;
  if (v2)
  {
    v5 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Registering listener for XPC Alarms", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v7 = *(_QWORD *)(v1 + 768);
    v16 = *(_OWORD *)(v1 + 752);

    v8 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
    v9 = sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
    v10 = swift_allocObject(&unk_100257030, 56, 7);
    *(_QWORD *)(v10 + 16) = v16;
    *(_QWORD *)(v10 + 24) = v9;
    *(_QWORD *)(v10 + 32) = v2;
    *(_OWORD *)(v10 + 40) = v16;
    swift_retain_n(v16, 2);
    swift_retain(v2);
    v11 = sub_10005582C(v7, (uint64_t)&unk_100266258, v10);
    swift_release(v11);
    swift_asyncLet_begin(v1 + 16, 0, (char *)&type metadata for () + 8, &unk_100266268, v2);
    return swift_asyncLet_get(v1 + 16, v12, sub_1001904CC, v1 + 656);
  }
  else
  {
    v14 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v4, (os_log_type_t)v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, (os_log_type_t)v14, "Daemon not registered XPC Alarm event handler", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    swift_task_dealloc(*(_QWORD *)(v1 + 768));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1001904CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 16, a2, sub_1001904E0, v2 + 704);
}

uint64_t sub_1001904E0()
{
  uint64_t v0;

  return swift_task_switch(sub_1001904F4, *(_QWORD *)(v0 + 752), 0);
}

uint64_t sub_1001904F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 800));
  swift_task_dealloc(*(_QWORD *)(v0 + 768));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019052C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, unint64_t, unint64_t);

  v5[4] = a5;
  v6 = sub_100037A5C(&qword_100266270);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[7] = v8;
  v9 = sub_100037A5C(&qword_100266278);
  v5[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[9] = v10;
  v5[10] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t (*)(uint64_t, unint64_t, unint64_t))((char *)&async function pointer to dispatch thunk of XPCAlarmEventHandler.asyncStream(name:)
                                                                            + async function pointer to dispatch thunk of XPCAlarmEventHandler.asyncStream(name:));
  v11 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of XPCAlarmEventHandler.asyncStream(name:)
                                   + 1));
  v5[11] = v11;
  *v11 = v5;
  v11[1] = sub_10019060C;
  return v13(v8, 0xD000000000000036, 0x80000001001FC5B0);
}

uint64_t sub_10019060C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_100190664, v1, 0);
}

uint64_t sub_100190664()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[5];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
  v0[12] = v4;
  v5 = v0[4];
  v6 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[13] = v6;
  *v6 = v0;
  v6[1] = sub_10019071C;
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, v5, v4, v0[8]);
}

uint64_t sub_10019071C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_100190774, v1, 0);
}

uint64_t sub_100190774()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v3 = type metadata accessor for Logger(0);
    sub_100037A9C(v3, (uint64_t)qword_10027B330);
    swift_bridgeObjectRetain(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v14 = v8;
      *(_DWORD *)v7 = 136446210;
      swift_bridgeObjectRetain(v1);
      *(_QWORD *)(v7 + 4) = sub_10002BA84(v2, v1, &v14);
      swift_bridgeObjectRelease_n(v1, 3);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "XPC Alarm key rotation triggered: %{public}s", (uint8_t *)v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v1, 2);
    }

    v12 = (_QWORD *)swift_task_alloc(dword_100266284);
    *(_QWORD *)(v0 + 112) = v12;
    *v12 = v0;
    v12[1] = sub_100190970;
    v13 = *(_QWORD **)(v0 + 32);
    v12[3] = v13;
    v12[4] = *v13;
    return swift_task_switch(sub_100190A24, v13, 0);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v9, *(_QWORD *)(v0 + 64));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100190970()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  v3 = v1[12];
  v4 = v1[4];
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v1[13] = v5;
  *v5 = v2;
  v5[1] = sub_10019071C;
  return AsyncStream.Iterator.next(isolation:)(v1 + 2, v4, v3, v1[8]);
}

uint64_t sub_100190A04()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100190A24, v0, 0);
}

uint64_t sub_100190A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000017, 0x80000001002016E0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_100263DA4);
  *(_QWORD *)(v0 + 40) = v7;
  *v7 = v0;
  v7[1] = sub_100190BBC;
  return sub_10010A454();
}

uint64_t sub_100190BBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_100190C14, v1, 0);
}

uint64_t sub_100190C14()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;

  v1 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 48) = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_100264B54);
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = sub_100190C90;
  return sub_100140EB8(0xD000000000000039, 0x80000001002001A0, 0, v1);
}

uint64_t sub_100190C90()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 48);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100190CE0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_UNKNOWN **);

  v3 = (uint64_t (*)(_UNKNOWN **))((char *)&async function pointer to dispatch thunk of XPCAlarmEventHandler.processEvents(with:)
                                           + async function pointer to dispatch thunk of XPCAlarmEventHandler.processEvents(with:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of XPCAlarmEventHandler.processEvents(with:)
                                  + 1));
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10005D184;
  return v3(&off_10024F330);
}

uint64_t sub_100190D48(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100037A5C((uint64_t *)&unk_100262930);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100190D88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100266238;
  if (!qword_100266238)
  {
    v1 = sub_10003C1FC(&qword_100266230);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100266238);
  }
  return result;
}

uint64_t sub_100190DD4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100190E08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100266254);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000087DC;
  return sub_10019052C(a1, v4, v5, v6, v7);
}

uint64_t sub_100190E88()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v4)(_UNKNOWN **);

  v1 = (_QWORD *)swift_task_alloc(dword_100266264);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000087DC;
  v4 = (uint64_t (*)(_UNKNOWN **))((char *)&async function pointer to dispatch thunk of XPCAlarmEventHandler.processEvents(with:)
                                           + async function pointer to dispatch thunk of XPCAlarmEventHandler.processEvents(with:));
  v2 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of XPCAlarmEventHandler.processEvents(with:)
                                  + 1));
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10005D184;
  return v4(&off_10024F330);
}

void sub_100190F10(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  char *v35;
  unsigned int *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;

  v43 = a2;
  v3 = type metadata accessor for MotionActivityState(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocationType(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_100261818);
  __chkstk_darwin(v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, "latitude");
  v18 = v17;
  objc_msgSend(a1, "longitude");
  v20 = v19;
  objc_msgSend(a1, "horizontalAccuracy");
  v22 = v21;
  objc_msgSend(a1, "verticalAccuracy");
  v24 = v23;
  objc_msgSend(a1, "speed");
  v26 = v25;
  objc_msgSend(a1, "altitude");
  v28 = v27;
  v29 = objc_msgSend(a1, "floor");
  if (v29)
  {
    v30 = v29;
    v42 = objc_msgSend(v29, "integerValue");

  }
  else
  {
    v42 = 0;
  }
  v31 = objc_msgSend(a1, "timestamp", v42, v43);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v31);

  v32 = type metadata accessor for PlaceMark(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v13, 1, 1, v32);
  v33 = (uint64_t)objc_msgSend(a1, "publishReason");
  if (v33 <= 7)
  {
    if (v33 == 7)
    {
      v34 = (unsigned int *)&enum case for LocationType.live(_:);
      goto LABEL_12;
    }
LABEL_10:
    v34 = (unsigned int *)&enum case for LocationType.proactiveOrShallow(_:);
    goto LABEL_12;
  }
  if (v33 != 8)
  {
    if (v33 == 100)
    {
      v34 = (unsigned int *)&enum case for LocationType.legacy(_:);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  v34 = (unsigned int *)&enum case for LocationType.satellite(_:);
LABEL_12:
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *v34, v7);
  v35 = (char *)objc_msgSend(a1, "motionActivityState");
  if ((unint64_t)(v35 - 1) > 4)
    v36 = (unsigned int *)&enum case for MotionActivityState.unknown(_:);
  else
    v36 = (unsigned int *)*(&off_100257048 + (_QWORD)(v35 - 1));
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *v36, v3);
  v37 = objc_msgSend(a1, "locationLabel");
  if (v37)
  {
    v38 = v37;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v41 = v40;

  }
  else
  {
    v39 = 0;
    v41 = 0;
  }
  Location.init(latitude:longitude:horizontalAccuracy:verticalAccuracy:speed:altitude:floor:timestamp:placemark:locationType:motionActivityState:customLabel:)(v42, v16, v13, v10, v6, v39, v41, v18, v20, v22, v24, v26, v28);

}

uint64_t sub_100191284(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;

  v3[100] = v2;
  v3[99] = a2;
  v3[98] = a1;
  v4 = type metadata accessor for FriendshipRequestStatus(0);
  v3[101] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[102] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[103] = swift_task_alloc(v6);
  v3[104] = swift_task_alloc(v6);
  v7 = type metadata accessor for Handle(0);
  v3[105] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[106] = v8;
  v3[107] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FriendshipRequestResult(0);
  v3[108] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[109] = v10;
  v3[110] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C((uint64_t *)&unk_100265180);
  v3[111] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FriendshipRequest(0);
  v3[112] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[113] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v3[114] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[115] = swift_task_alloc(v15);
  v3[116] = swift_task_alloc(v15);
  v16 = type metadata accessor for URLComponents(0);
  v3[117] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v3[118] = v17;
  v3[119] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for FriendshipEndpoint(0);
  v3[120] = v18;
  v3[121] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100037A5C(&qword_1002662B0);
  v3[122] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for FriendshipRequestType(0);
  v3[123] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v3[124] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[125] = swift_task_alloc(v22);
  v3[126] = swift_task_alloc(v22);
  v3[127] = swift_task_alloc(v22);
  v23 = sub_100037A5C(&qword_100260580);
  v3[128] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v23 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Account(0);
  v3[129] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v3[130] = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[131] = swift_task_alloc(v26);
  v3[132] = swift_task_alloc(v26);
  v3[133] = swift_task_alloc(v26);
  v27 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v3[134] = v27;
  *v27 = v3;
  v27[1] = sub_1001914DC;
  return daemon.getter();
}

uint64_t sub_1001914DC(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1072);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1080) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[136] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[137] = v7;
  v8 = type metadata accessor for AccountService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[138] = v9;
  v10 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_1001915D4;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001915D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1088);
  v5 = *(_QWORD **)v2;
  v5[139] = a1;
  v5[140] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100192FA0, v5[100], 0);
  swift_release(v5[135]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002612E4);
  v5[141] = v7;
  *v7 = v5;
  v7[1] = sub_100191684;
  return sub_1000069E8(v5[128]);
}

uint64_t sub_100191684()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 800);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1128));
  return swift_task_switch(sub_1001916DC, v1, 0);
}

uint64_t sub_1001916DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(uint64_t, uint64_t);
  BOOL v55;
  uint64_t v56;
  void *v57;
  void (*v58)(uint64_t, _QWORD);
  Swift::String v59;
  void (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t, uint64_t, uint64_t);
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;

  v1 = *(_QWORD *)(v0 + 1040);
  v2 = *(_QWORD *)(v0 + 1032);
  v3 = *(_QWORD *)(v0 + 1024);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_1000087A0(v3, &qword_100260580);
    if (qword_10025F8C0 != -1)
      swift_once(&qword_10025F8C0, sub_100098E4C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100037A9C(v4, (uint64_t)qword_10027AB38);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing primary account to send friendship offer!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 1112);

    v10 = sub_10019C714();
    v11 = swift_allocError(&type metadata for CommandManagerError, v10, 0, 0);
    *v12 = 1;
    swift_willThrow(v11);
    swift_release(v9);
LABEL_13:
    v29 = *(_QWORD *)(v0 + 1056);
    v30 = *(_QWORD *)(v0 + 1048);
    v31 = *(_QWORD *)(v0 + 1024);
    v32 = *(_QWORD *)(v0 + 1016);
    v33 = *(_QWORD *)(v0 + 1008);
    v34 = *(_QWORD *)(v0 + 1000);
    v35 = *(_QWORD *)(v0 + 976);
    v36 = *(_QWORD *)(v0 + 968);
    v37 = *(_QWORD *)(v0 + 952);
    v68 = *(_QWORD *)(v0 + 928);
    v70 = *(_QWORD *)(v0 + 920);
    v72 = *(_QWORD *)(v0 + 888);
    v74 = *(_QWORD *)(v0 + 880);
    v76 = *(_QWORD *)(v0 + 856);
    v78 = *(_QWORD *)(v0 + 832);
    v80 = *(_QWORD *)(v0 + 824);
    swift_task_dealloc(*(_QWORD *)(v0 + 1064));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = *(_QWORD *)(v0 + 992);
  v14 = *(_QWORD *)(v0 + 984);
  v15 = *(_QWORD *)(v0 + 976);
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 1064), v3, v2);
  FriendshipRequest.requestType.getter(v16);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v14) == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 976), &qword_1002662B0);
    if (qword_10025F8C0 != -1)
      swift_once(&qword_10025F8C0, sub_100098E4C);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100037A9C(v17, (uint64_t)qword_10027AB38);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Missing request Type (invite or offer)", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }
    v22 = *(_QWORD *)(v0 + 1112);
    v23 = *(_QWORD *)(v0 + 1064);
    v24 = *(_QWORD *)(v0 + 1040);
    v25 = *(_QWORD *)(v0 + 1032);

    v26 = sub_10019C714();
    v27 = swift_allocError(&type metadata for CommandManagerError, v26, 0, 0);
    *v28 = 1;
    swift_willThrow(v27);
    swift_release(v22);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    goto LABEL_13;
  }
  v39 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 992) + 32))(*(_QWORD *)(v0 + 1016), *(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 984));
  v40 = FriendshipRequest.toHandles.getter(v39);
  v41 = v40;
  v42 = *(_QWORD *)(v40 + 16);
  if (v42)
  {
    v43 = *(_QWORD *)(v0 + 848);
    v44 = v40 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
    v45 = *(_QWORD *)(v43 + 72);
    do
    {
      sub_10019C36C(v44, *(_QWORD *)(v0 + 792));
      v44 += v45;
      --v42;
    }
    while (v42);
  }
  swift_bridgeObjectRelease(v41);
  v65 = *(_QWORD *)(v0 + 1064);
  v46 = *(_QWORD *)(v0 + 1056);
  v81 = *(_QWORD *)(v0 + 1048);
  v63 = *(_QWORD *)(v0 + 1040);
  v47 = *(_QWORD *)(v0 + 1032);
  v48 = *(_QWORD *)(v0 + 1016);
  v67 = v48;
  v49 = *(_QWORD *)(v0 + 1008);
  v82 = *(_QWORD *)(v0 + 1000);
  v50 = *(_QWORD *)(v0 + 992);
  v51 = *(_QWORD *)(v0 + 984);
  v52 = *(_QWORD *)(v0 + 952);
  v66 = *(_QWORD *)(v0 + 944);
  v69 = *(_QWORD *)(v0 + 936);
  v71 = *(_QWORD *)(v0 + 968);
  v77 = *(_QWORD *)(v0 + 896);
  v79 = *(_QWORD *)(v0 + 928);
  v73 = *(_QWORD *)(v0 + 904);
  v75 = *(_QWORD *)(v0 + 792);
  v64 = *(void (**)(uint64_t))(v63 + 16);
  v64(v46);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v50 + 104))(v49, enum case for FriendshipRequestType.offer(_:), v51);
  v53 = static FriendshipRequestType.== infix(_:_:)(v48, v49);
  v54 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  *(_QWORD *)(v0 + 1136) = v54;
  v54(v49, v51);
  sub_10003CD40(v46);
  v55 = (v53 & 1) == 0;
  if ((v53 & 1) != 0)
    v56 = 0x636F4C726566666FLL;
  else
    v56 = 0x657469766E69;
  if (v55)
    v57 = (void *)0xE600000000000000;
  else
    v57 = (void *)0xED00006E6F697461;
  v58 = (void (*)(uint64_t, _QWORD))URLComponents.path.modify(v0 + 712);
  v59._countAndFlagsBits = v56;
  v59._object = v57;
  String.append(_:)(v59);
  swift_bridgeObjectRelease(v57);
  v58(v0 + 712, 0);
  v60 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  *(_QWORD *)(v0 + 1144) = v60;
  v60(v46, v47);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v71, v52, v69);
  ((void (*)(uint64_t, uint64_t, uint64_t))v64)(v81, v65, v47);
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
  *(_QWORD *)(v0 + 1152) = v61;
  v61(v79, v75, v77);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v82, v67, v51);
  v83 = (char *)&dword_100264B78 + dword_100264B78;
  v62 = (_QWORD *)swift_task_alloc(unk_100264B7C);
  *(_QWORD *)(v0 + 1160) = v62;
  *v62 = v0;
  v62[1] = sub_100191CF4;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v83)(*(_QWORD *)(v0 + 1048), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 1000));
}

uint64_t sub_100191CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 1160);
  v6 = *(_QWORD **)v4;
  v6[146] = a1;
  v6[147] = a2;
  v6[148] = a3;
  v6[149] = v3;
  swift_task_dealloc(v5);
  if (v3)
    return swift_task_switch(sub_100191EBC, v6[100], 0);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v6[150] = v8;
  *v8 = v6;
  v8[1] = sub_100191D94;
  return daemon.getter();
}

uint64_t sub_100191D94(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1200);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1208) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[152] = v6;
  v7 = type metadata accessor for DataManager(0);
  v8 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100191E40;
  return ActorServiceDaemon.getService<A>()(v3[137], v7, v3[138], v8);
}

uint64_t sub_100191E40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1216);
  v3[153] = a1;
  v3[154] = v1;
  swift_task_dealloc(v4);
  v5 = v3[151];
  v6 = v3[100];
  swift_release(v5);
  if (v1)
    v7 = sub_1001930D4;
  else
    v7 = sub_100192034;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100191EBC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1144);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 1136);
  v3 = *(_QWORD *)(v0 + 1064);
  v4 = *(_QWORD *)(v0 + 1032);
  v5 = *(_QWORD *)(v0 + 1016);
  v6 = *(_QWORD *)(v0 + 984);
  v7 = *(_QWORD *)(v0 + 968);
  swift_release(*(_QWORD *)(v0 + 1112));
  sub_100024990(v7, type metadata accessor for FriendshipEndpoint);
  v2(v5, v6);
  v1(v3, v4);
  v8 = *(_QWORD *)(v0 + 1056);
  v9 = *(_QWORD *)(v0 + 1048);
  v10 = *(_QWORD *)(v0 + 1024);
  v11 = *(_QWORD *)(v0 + 1016);
  v12 = *(_QWORD *)(v0 + 1008);
  v13 = *(_QWORD *)(v0 + 1000);
  v14 = *(_QWORD *)(v0 + 976);
  v15 = *(_QWORD *)(v0 + 968);
  v16 = *(_QWORD *)(v0 + 952);
  v18 = *(_QWORD *)(v0 + 928);
  v19 = *(_QWORD *)(v0 + 920);
  v20 = *(_QWORD *)(v0 + 888);
  v21 = *(_QWORD *)(v0 + 880);
  v22 = *(_QWORD *)(v0 + 856);
  v23 = *(_QWORD *)(v0 + 832);
  v24 = *(_QWORD *)(v0 + 824);
  swift_task_dealloc(*(_QWORD *)(v0 + 1064));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100192034()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[148];
  v2 = v0[147];
  v3 = v0[146];
  v4 = v0[121];
  v0[77] = v0[120];
  v0[78] = sub_100004EA8(&qword_100266290, type metadata accessor for FriendshipEndpoint, (uint64_t)&unk_1001F9FC4);
  v5 = sub_10003276C(v0 + 74);
  sub_100025C70(v4, (uint64_t)v5, type metadata accessor for FriendshipEndpoint);
  v0[82] = &type metadata for FriendshipServerRequest;
  v0[83] = sub_100149420();
  v0[79] = v3;
  v0[80] = v2;
  v0[81] = v1;
  swift_bridgeObjectRetain(v3);
  v6 = sub_10001F728(v2, v1);
  v7 = Account.dsid.getter(v6);
  v9 = v8;
  v10 = Account.appToken.getter();
  v12 = v11;
  v0[87] = type metadata accessor for BasicCredential(0);
  v0[88] = &protocol witness table for BasicCredential;
  sub_10003276C(v0 + 84);
  BasicCredential.init(username:password:)(v7, v9, v10, v12);
  v13 = (_QWORD *)swift_task_alloc(dword_100263274);
  v0[155] = v13;
  *v13 = v0;
  v13[1] = sub_1001921A0;
  return sub_1000DE6C4((uint64_t)(v0 + 2), (uint64_t)(v0 + 74), (uint64_t)(v0 + 79), (uint64_t)(v0 + 84));
}

uint64_t sub_1001921A0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)v1 + 672;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 1240);
  *(_QWORD *)(*(_QWORD *)v1 + 1248) = v0;
  swift_task_dealloc(v4);
  if (v0)
  {
    v5 = v2[100];
    sub_1000087A0((uint64_t)(v2 + 84), &qword_100260598);
    v6 = sub_100193274;
    v7 = v5;
  }
  else
  {
    v8 = v2 + 79;
    v9 = v2 + 74;
    v10 = v2[100];
    sub_1000087A0(v3, &qword_100260598);
    sub_10002BB90(v8);
    sub_10002BB90(v9);
    v6 = sub_100192254;
    v7 = v10;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100192254()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __n128 v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  int v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t isUniquelyReferenced_nonNull_native;
  char v70;
  unint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  BOOL v102;
  void (*v103)(uint64_t, uint64_t);
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  void *__src;
  void (*__srca)(uint64_t, uint64_t);
  _QWORD *v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  void (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t);
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void (*v175)(unint64_t, uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179[2];

  v1 = (uint64_t)(v0 + 2);
  v2 = v0 + 96;
  if (qword_10025F8C0 != -1)
    goto LABEL_49;
  while (1)
  {
    v3 = type metadata accessor for Logger(0);
    sub_100037A9C(v3, (uint64_t)qword_10027AB38);
    sub_10002B630(v1);
    v4 = sub_10002B630(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    v139 = v2;
    if (os_log_type_enabled(v5, v6))
    {
      v7 = swift_slowAlloc(22, -1);
      v8 = swift_slowAlloc(64, -1);
      v179[0] = v8;
      *(_DWORD *)v7 = 136446466;
      v0[96] = sub_10002BA84(0xD00000000000001ALL, 0x8000000100201720, v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v0 + 97, v7 + 4, v7 + 12);
      *(_WORD *)(v7 + 12) = 2080;
      sub_10002B630(v1);
      v9 = sub_1000282A0();
      v10 = v1;
      v12 = v11;
      sub_10002B3D4(v10);
      v0[97] = sub_10002BA84(v9, v12, v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 97, v0 + 98, v7 + 14, v7 + 22);
      v13 = v12;
      v1 = v10;
      swift_bridgeObjectRelease(v13);
      sub_10002B3D4(v10);
      sub_10002B3D4(v10);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "CommandManager %{public}s response: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }
    else
    {
      sub_10002B3D4(v1);
      sub_10002B3D4(v1);
    }

    v14 = v0[24];
    if (v14 == 1)
    {
      v15 = sub_10002B3D4(v1);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v19 = swift_slowAlloc(32, -1);
        v179[0] = v19;
        *(_DWORD *)v18 = 136446210;
        v0[93] = sub_10002BA84(0xD00000000000001ALL, 0x8000000100201720, v179);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 93, v0 + 94, v18 + 4, v18 + 12);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "CommandManager %{public}s with invalidResponse", v18, 0xCu);
        swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);
      }

      v20 = v0[153];
      v21 = v0[148];
      v22 = v0[147];
      v23 = v0[146];
      v168 = (void (*)(uint64_t, uint64_t))v0[143];
      v24 = v0[139];
      v163 = v0[133];
      v151 = (void (*)(uint64_t, uint64_t))v0[142];
      v157 = v0[129];
      v25 = v0[127];
      v26 = v0[123];
      v27 = v0[121];
      v28 = sub_10006F520();
      v174 = swift_allocError(&type metadata for FriendshipServiceError, v28, 0, 0);
      *v29 = 5;
      swift_willThrow(v174);
      swift_release(v20);
      swift_release(v24);
      swift_bridgeObjectRelease(v23);
      sub_100037AF8(v22, v21);
      sub_100024990(v27, type metadata accessor for FriendshipEndpoint);
      v151(v25, v26);
      v168(v163, v157);
      v30 = v0[132];
      v31 = v0[131];
      v32 = v0[128];
      v33 = v0[127];
      v34 = v0[126];
      v35 = v0[125];
      v36 = v0[122];
      v37 = v0[121];
      v38 = v0[119];
      v140 = v0[116];
      v143 = v0[115];
      v146 = v0[111];
      v152 = v0[110];
      v158 = v0[107];
      v164 = v0[104];
      v169 = v0[103];
      swift_task_dealloc(v0[133]);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v140);
      swift_task_dealloc(v143);
      swift_task_dealloc(v146);
      swift_task_dealloc(v152);
      swift_task_dealloc(v158);
      swift_task_dealloc(v164);
      swift_task_dealloc(v169);
      v39 = (uint64_t (*)(void))v0[1];
      return v39();
    }
    v127 = v0 + 94;
    __src = (void *)v1;
    v40 = v0[28];
    v41 = v0[25];
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v14);
    v135 = v41;
    swift_bridgeObjectRetain(v41);
    v43 = FriendshipRequest.toHandles.getter(v42);
    v44 = v43;
    v2 = *(_QWORD **)(v43 + 16);
    v165 = v14;
    if (!v2)
      break;
    v128 = v40;
    v45 = v0[106];
    v1 = v0[102];
    v46 = v43 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    v170 = *(_QWORD *)(v45 + 72);
    v159 = v45;
    v175 = *(void (**)(unint64_t, uint64_t, uint64_t))(v45 + 16);
    v134 = enum case for FriendshipRequestStatus.pending(_:);
    v131 = enum case for FriendshipRequestStatus.success(_:);
    v141 = enum case for FriendshipRequestError.commandFailed(_:);
    v153 = enum case for FriendshipRequestStatus.failure(_:);
    v147 = enum case for FriendshipRequestError.invalidResponse(_:);
    v126 = v43;
    v47 = swift_bridgeObjectRetain(v43);
    v48 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      v51 = ((uint64_t (*)(_QWORD, unint64_t, _QWORD, __n128))v175)(v0[107], v46, v0[105], v47);
      if (!v14)
        goto LABEL_23;
      v52 = Handle.identifier.getter(v51);
      v54 = v53;
      if (!*(_QWORD *)(v14 + 16) || (v55 = sub_10002FF38(v52, v53), (v56 & 1) == 0))
      {
        swift_bridgeObjectRelease(v54);
LABEL_23:
        v61 = v0[104];
        v62 = type metadata accessor for FriendshipRequestError(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v62 - 8) + 104))(v61, v147, v62);
LABEL_24:
        v63 = v153;
        goto LABEL_25;
      }
      v57 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 56) + v55);
      swift_bridgeObjectRelease(v54);
      if ((v57 - 3) < 8 || v57 == 0)
      {
        v59 = v0[104];
        v60 = type metadata accessor for FriendshipRequestError(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v60 - 8) + 104))(v59, v141, v60);
        goto LABEL_24;
      }
      v63 = v57 == 1 ? v131 : v134;
LABEL_25:
      v64 = v0[107];
      v65 = v0[104];
      v66 = v0[103];
      v67 = v0[101];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104))(v65, v63, v67);
      v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
      v68(v66, v65, v67);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v48);
      v179[0] = (uint64_t)v48;
      v71 = sub_10001CBC8(v64);
      v72 = v48[2];
      v73 = (v70 & 1) == 0;
      v74 = v72 + v73;
      if (__OFADD__(v72, v73))
        break;
      v75 = v70;
      if (v48[3] >= v74)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v70 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          sub_1000F6410();
          v48 = (_QWORD *)v179[0];
          if ((v75 & 1) != 0)
            goto LABEL_11;
        }
      }
      else
      {
        v76 = v0[107];
        sub_1001614A0(v74, isUniquelyReferenced_nonNull_native);
        v48 = (_QWORD *)v179[0];
        v77 = sub_10001CBC8(v76);
        if ((v75 & 1) != (v78 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v0[105]);
        v71 = v77;
        if ((v75 & 1) != 0)
        {
LABEL_11:
          (*(void (**)(unint64_t, _QWORD, _QWORD))(v1 + 40))(v48[7] + *(_QWORD *)(v1 + 72) * v71, v0[103], v0[101]);
          goto LABEL_12;
        }
      }
      v79 = v0[107];
      v80 = v0[105];
      v81 = v0[103];
      v82 = v0[101];
      v48[(v71 >> 6) + 8] |= 1 << v71;
      v175(v48[6] + v71 * v170, v79, v80);
      v68(v48[7] + *(_QWORD *)(v1 + 72) * v71, v81, v82);
      v83 = v48[2];
      v84 = __OFADD__(v83, 1);
      v85 = v83 + 1;
      if (v84)
        goto LABEL_48;
      v48[2] = v85;
LABEL_12:
      v49 = v0[107];
      v50 = v0[105];
      swift_bridgeObjectRelease(0x8000000000000000);
      (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v49, v50);
      v46 += v170;
      v2 = (_QWORD *)((char *)v2 - 1);
      v14 = v165;
      if (!v2)
      {
        v44 = v126;
        swift_bridgeObjectRelease(v126);
        v40 = v128;
        goto LABEL_41;
      }
    }
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    swift_once(&qword_10025F8C0, sub_100098E4C);
  }
  v48 = _swiftEmptyDictionarySingleton;
LABEL_41:
  v86 = (void (*)(uint64_t, uint64_t, uint64_t))v0[144];
  v148 = v86;
  v87 = v0[115];
  v129 = v0[113];
  v132 = v0[114];
  v88 = v0[112];
  v89 = v0[111];
  v176 = v0[110];
  v160 = v0[109];
  v171 = v0[108];
  v90 = v0[100];
  v91 = v0[99];
  v142 = v91;
  v154 = v0[98];
  swift_bridgeObjectRelease(v44);
  swift_bridgeObjectRelease(v165);
  swift_bridgeObjectRelease(v135);
  swift_bridgeObjectRelease(v40);
  v92 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v89, 1, 1, v92);
  v86(v87, v91, v88);
  v93 = sub_100004EA8(&qword_100261848, type metadata accessor for CommandManager, (uint64_t)&unk_1001F49B0);
  v94 = *(unsigned __int8 *)(v129 + 80);
  v95 = (v94 + 40) & ~v94;
  v96 = (v132 + v95 + 7) & 0xFFFFFFFFFFFFFFF8;
  v97 = (char *)swift_allocObject(&unk_1002570A8, v96 + 576, v94 | 7);
  *((_QWORD *)v97 + 2) = v90;
  *((_QWORD *)v97 + 3) = v93;
  *((_QWORD *)v97 + 4) = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v129 + 32))(&v97[v95], v87, v88);
  memcpy(&v97[v96], __src, 0x240uLL);
  swift_retain_n(v90, 2);
  v98 = sub_10005582C(v89, (uint64_t)&unk_1002662C8, (uint64_t)v97);
  swift_release(v98);
  v148(v87, v142, v88);
  FriendshipRequestResult.init(request:result:requestIds:)(v87, v48, _swiftEmptyDictionarySingleton);
  v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 16))(v176, v154, v171);
  v100 = Logger.logObject.getter(v99);
  v101 = static os_log_type_t.default.getter();
  v102 = os_log_type_enabled(v100, v101);
  v172 = v0[148];
  v166 = v0[147];
  v103 = (void (*)(uint64_t, uint64_t))v0[143];
  v104 = (void (*)(uint64_t, uint64_t))v0[142];
  v149 = v0[139];
  v155 = v0[146];
  v105 = v0[133];
  v106 = v0[129];
  v107 = v0[127];
  v177 = v0[123];
  v161 = v0[121];
  v108 = v0[110];
  v144 = v0[109];
  v109 = v0[108];
  if (v102)
  {
    v133 = v0[153];
    __srca = (void (*)(uint64_t, uint64_t))v0[142];
    v110 = swift_slowAlloc(22, -1);
    v136 = v107;
    v111 = swift_slowAlloc(64, -1);
    v179[0] = v111;
    *(_DWORD *)v110 = 136446466;
    *v127 = sub_10002BA84(0xD00000000000001ALL, 0x8000000100201720, v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v127, v0 + 95, v110 + 4, v110 + 12);
    *(_WORD *)(v110 + 12) = 2080;
    v112 = sub_100004EA8(&qword_100261030, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipRequestResult, (uint64_t)&protocol conformance descriptor for FriendshipRequestResult);
    v113 = dispatch thunk of CustomStringConvertible.description.getter(v109, v112);
    v130 = v106;
    v115 = v114;
    v0[95] = sub_10002BA84(v113, v114, v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 95, v139, v110 + 14, v110 + 22);
    swift_bridgeObjectRelease(v115);
    (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v108, v109);
    _os_log_impl((void *)&_mh_execute_header, v100, v101, "CommandManager %{public}s result: %s", (uint8_t *)v110, 0x16u);
    swift_arrayDestroy(v111, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v111, -1, -1);
    swift_slowDealloc(v110, -1, -1);
    swift_release(v133);
    swift_release(v149);

    swift_bridgeObjectRelease(v155);
    sub_100037AF8(v166, v172);
    sub_100024990(v161, type metadata accessor for FriendshipEndpoint);
    __srca(v136, v177);
    v103(v105, v130);
  }
  else
  {
    swift_release(v0[153]);
    swift_release(v149);

    (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v108, v109);
    swift_bridgeObjectRelease(v155);
    sub_100037AF8(v166, v172);
    sub_100024990(v161, type metadata accessor for FriendshipEndpoint);
    v104(v107, v177);
    v103(v105, v106);
  }
  v116 = v0[132];
  v117 = v0[131];
  v118 = v0[128];
  v119 = v0[127];
  v120 = v0[126];
  v121 = v0[125];
  v122 = v0[122];
  v123 = v0[121];
  v124 = v0[119];
  v145 = v0[116];
  v150 = v0[115];
  v156 = v0[111];
  v162 = v0[110];
  v167 = v0[107];
  v173 = v0[104];
  v178 = v0[103];
  swift_task_dealloc(v0[133]);
  swift_task_dealloc(v116);
  swift_task_dealloc(v117);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v120);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v145);
  swift_task_dealloc(v150);
  swift_task_dealloc(v156);
  swift_task_dealloc(v162);
  swift_task_dealloc(v167);
  swift_task_dealloc(v173);
  swift_task_dealloc(v178);
  v39 = (uint64_t (*)(void))v0[1];
  return v39();
}

uint64_t sub_100192FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_release(*(_QWORD *)(v0 + 1080));
  v1 = *(_QWORD *)(v0 + 1056);
  v2 = *(_QWORD *)(v0 + 1048);
  v3 = *(_QWORD *)(v0 + 1024);
  v4 = *(_QWORD *)(v0 + 1016);
  v5 = *(_QWORD *)(v0 + 1008);
  v6 = *(_QWORD *)(v0 + 1000);
  v7 = *(_QWORD *)(v0 + 976);
  v8 = *(_QWORD *)(v0 + 968);
  v9 = *(_QWORD *)(v0 + 952);
  v11 = *(_QWORD *)(v0 + 928);
  v12 = *(_QWORD *)(v0 + 920);
  v13 = *(_QWORD *)(v0 + 888);
  v14 = *(_QWORD *)(v0 + 880);
  v15 = *(_QWORD *)(v0 + 856);
  v16 = *(_QWORD *)(v0 + 832);
  v17 = *(_QWORD *)(v0 + 824);
  swift_task_dealloc(*(_QWORD *)(v0 + 1064));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001930D4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 1184);
  v2 = *(_QWORD *)(v0 + 1176);
  v3 = *(_QWORD *)(v0 + 1168);
  v27 = *(void (**)(uint64_t, uint64_t))(v0 + 1144);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 1136);
  v5 = *(_QWORD *)(v0 + 1064);
  v6 = *(_QWORD *)(v0 + 1032);
  v7 = *(_QWORD *)(v0 + 1016);
  v8 = *(_QWORD *)(v0 + 984);
  v9 = *(_QWORD *)(v0 + 968);
  swift_release(*(_QWORD *)(v0 + 1112));
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v9, type metadata accessor for FriendshipEndpoint);
  v4(v7, v8);
  v27(v5, v6);
  v10 = *(_QWORD *)(v0 + 1056);
  v11 = *(_QWORD *)(v0 + 1048);
  v12 = *(_QWORD *)(v0 + 1024);
  v13 = *(_QWORD *)(v0 + 1016);
  v14 = *(_QWORD *)(v0 + 1008);
  v15 = *(_QWORD *)(v0 + 1000);
  v16 = *(_QWORD *)(v0 + 976);
  v17 = *(_QWORD *)(v0 + 968);
  v18 = *(_QWORD *)(v0 + 952);
  v20 = *(_QWORD *)(v0 + 928);
  v21 = *(_QWORD *)(v0 + 920);
  v22 = *(_QWORD *)(v0 + 888);
  v23 = *(_QWORD *)(v0 + 880);
  v24 = *(_QWORD *)(v0 + 856);
  v25 = *(_QWORD *)(v0 + 832);
  v26 = *(_QWORD *)(v0 + 824);
  swift_task_dealloc(*(_QWORD *)(v0 + 1064));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100193274()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 1184);
  v2 = *(_QWORD *)(v0 + 1176);
  v3 = *(_QWORD *)(v0 + 1168);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 1136);
  v5 = *(_QWORD *)(v0 + 1112);
  v24 = *(_QWORD *)(v0 + 1064);
  v26 = *(void (**)(uint64_t, uint64_t))(v0 + 1144);
  v6 = *(_QWORD *)(v0 + 1032);
  v7 = *(_QWORD *)(v0 + 1016);
  v8 = *(_QWORD *)(v0 + 984);
  v9 = *(_QWORD *)(v0 + 968);
  swift_release(*(_QWORD *)(v0 + 1224));
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v9, type metadata accessor for FriendshipEndpoint);
  v4(v7, v8);
  v26(v24, v6);
  sub_10002BB90((_QWORD *)(v0 + 632));
  sub_10002BB90((_QWORD *)(v0 + 592));
  v10 = *(_QWORD *)(v0 + 1056);
  v11 = *(_QWORD *)(v0 + 1048);
  v12 = *(_QWORD *)(v0 + 1024);
  v13 = *(_QWORD *)(v0 + 1016);
  v14 = *(_QWORD *)(v0 + 1008);
  v15 = *(_QWORD *)(v0 + 1000);
  v16 = *(_QWORD *)(v0 + 976);
  v17 = *(_QWORD *)(v0 + 968);
  v18 = *(_QWORD *)(v0 + 952);
  v20 = *(_QWORD *)(v0 + 928);
  v21 = *(_QWORD *)(v0 + 920);
  v22 = *(_QWORD *)(v0 + 888);
  v23 = *(_QWORD *)(v0 + 880);
  v25 = *(_QWORD *)(v0 + 856);
  v27 = *(_QWORD *)(v0 + 832);
  v28 = *(_QWORD *)(v0 + 824);
  swift_task_dealloc(*(_QWORD *)(v0 + 1064));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100193438(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v3[97] = v2;
  v3[96] = a2;
  v3[95] = a1;
  v4 = type metadata accessor for FriendshipRequest(0);
  v3[98] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[99] = v5;
  v3[100] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RequestOrigin(0);
  v3[101] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100261960) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[102] = swift_task_alloc(v7);
  v3[103] = swift_task_alloc(v7);
  v8 = type metadata accessor for FriendshipRequestStatus(0);
  v3[104] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[105] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[106] = swift_task_alloc(v10);
  v3[107] = swift_task_alloc(v10);
  v3[108] = swift_task_alloc(v10);
  v11 = type metadata accessor for HandleType(0);
  v3[109] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[110] = v12;
  v3[111] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[112] = swift_task_alloc(v13);
  v3[113] = swift_task_alloc(v13);
  v3[114] = swift_task_alloc(v13);
  v14 = type metadata accessor for Handle(0);
  v3[115] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[116] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[117] = swift_task_alloc(v16);
  v3[118] = swift_task_alloc(v16);
  v3[119] = swift_task_alloc(v16);
  v3[120] = swift_task_alloc(v16);
  v3[121] = swift_task_alloc(v16);
  v3[122] = swift_task_alloc(v16);
  v3[123] = swift_task_alloc(v16);
  v3[124] = swift_task_alloc(v16);
  v17 = type metadata accessor for RespondToInviteEndpoint(0);
  v3[125] = v17;
  v3[126] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100037A5C(&qword_1002662D8);
  v3[127] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for FriendshipResponseToInviteType(0);
  v3[128] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v3[129] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[130] = swift_task_alloc(v21);
  v3[131] = swift_task_alloc(v21);
  v22 = sub_100037A5C(&qword_100260580);
  v3[132] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Account(0);
  v3[133] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v3[134] = v24;
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[135] = swift_task_alloc(v25);
  v3[136] = swift_task_alloc(v25);
  v3[137] = swift_task_alloc(v25);
  v26 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v3[138] = v26;
  *v26 = v3;
  v26[1] = sub_10019371C;
  return daemon.getter();
}

uint64_t sub_10019371C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1104);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1112) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[140] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[141] = v7;
  v8 = type metadata accessor for AccountService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[142] = v9;
  v10 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_100193814;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100193814(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1120);
  v5 = *(_QWORD **)v2;
  v5[143] = a1;
  v5[144] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10019701C, v5[97], 0);
  swift_release(v5[139]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002612E4);
  v5[145] = v7;
  *v7 = v5;
  v7[1] = sub_1001938C4;
  return sub_1000069E8(v5[132]);
}

uint64_t sub_1001938C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 776);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1160));
  return swift_task_switch(sub_10019391C, v1, 0);
}

uint64_t sub_10019391C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 1072);
  v2 = *(_QWORD *)(v0 + 1064);
  v3 = *(_QWORD *)(v0 + 1056);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_1000087A0(v3, &qword_100260580);
    if (qword_10025F8C0 != -1)
      swift_once(&qword_10025F8C0, sub_100098E4C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100037A9C(v4, (uint64_t)qword_10027AB38);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing primary account to respond to invite request!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 1144);

    v10 = sub_100051194();
    v40 = swift_allocError(&type metadata for SettingsService.Error, v10, 0, 0);
    *v11 = 3;
    swift_willThrow(v40);
    swift_release(v9);
    v12 = *(_QWORD *)(v0 + 1088);
    v13 = *(_QWORD *)(v0 + 1080);
    v14 = *(_QWORD *)(v0 + 1056);
    v15 = *(_QWORD *)(v0 + 1048);
    v16 = *(_QWORD *)(v0 + 1040);
    v17 = *(_QWORD *)(v0 + 1016);
    v18 = *(_QWORD *)(v0 + 1008);
    v19 = *(_QWORD *)(v0 + 992);
    v20 = *(_QWORD *)(v0 + 984);
    v23 = *(_QWORD *)(v0 + 976);
    v24 = *(_QWORD *)(v0 + 968);
    v25 = *(_QWORD *)(v0 + 960);
    v26 = *(_QWORD *)(v0 + 952);
    v27 = *(_QWORD *)(v0 + 944);
    v28 = *(_QWORD *)(v0 + 936);
    v29 = *(_QWORD *)(v0 + 912);
    v30 = *(_QWORD *)(v0 + 904);
    v31 = *(_QWORD *)(v0 + 896);
    v32 = *(_QWORD *)(v0 + 888);
    v33 = *(_QWORD *)(v0 + 864);
    v34 = *(_QWORD *)(v0 + 856);
    v35 = *(_QWORD *)(v0 + 848);
    v36 = *(_QWORD *)(v0 + 824);
    v37 = *(_QWORD *)(v0 + 816);
    v38 = *(_QWORD *)(v0 + 808);
    v39 = *(_QWORD *)(v0 + 800);
    swift_task_dealloc(*(_QWORD *)(v0 + 1096));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 1096), v3, v2);
    v22 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 1168) = v22;
    *v22 = v0;
    v22[1] = sub_100193C44;
    return daemon.getter();
  }
}

uint64_t sub_100193C44(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1168);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1176) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[148] = v6;
  v7 = type metadata accessor for DataManager(0);
  v3[149] = v7;
  v8 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  v3[150] = v8;
  *v6 = v5;
  v6[1] = sub_100193CF8;
  return ActorServiceDaemon.getService<A>()(v3[141], v7, v3[142], v8);
}

uint64_t sub_100193CF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1184);
  v3[151] = a1;
  v3[152] = v1;
  swift_task_dealloc(v4);
  v5 = v3[147];
  v6 = v3[97];
  swift_release(v5);
  if (v1)
    v7 = sub_1001971DC;
  else
    v7 = sub_100193D74;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100193D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD, unint64_t, _QWORD);
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t isUniquelyReferenced_nonNull_native;
  char *v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(_QWORD, _QWORD);
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  _QWORD *v78;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;

  v1 = *(_QWORD *)(v0 + 1032);
  v2 = *(_QWORD *)(v0 + 1024);
  v3 = *(_QWORD *)(v0 + 1016);
  FriendshipRequest.respondType.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 1016), &qword_1002662D8);
    if (qword_10025F8C0 != -1)
      swift_once(&qword_10025F8C0, sub_100098E4C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100037A9C(v4, (uint64_t)qword_10027AB38);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing respond Type (accept or decline or notNow)", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 1208);
    v10 = *(_QWORD *)(v0 + 1144);
    v11 = *(_QWORD *)(v0 + 1096);
    v12 = *(_QWORD *)(v0 + 1072);
    v13 = *(_QWORD *)(v0 + 1064);

    v14 = sub_10019C714();
    v174 = swift_allocError(&type metadata for CommandManagerError, v14, 0, 0);
    *v15 = 2;
    swift_willThrow(v174);
    swift_release(v9);
    swift_release(v10);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    v16 = *(_QWORD *)(v0 + 1088);
    v17 = *(_QWORD *)(v0 + 1080);
    v18 = *(_QWORD *)(v0 + 1056);
    v19 = *(_QWORD *)(v0 + 1048);
    v20 = *(_QWORD *)(v0 + 1040);
    v21 = *(_QWORD *)(v0 + 1016);
    v22 = *(_QWORD *)(v0 + 1008);
    v23 = *(_QWORD *)(v0 + 992);
    v24 = *(_QWORD *)(v0 + 984);
    v136 = *(_QWORD *)(v0 + 976);
    v138 = *(_QWORD *)(v0 + 968);
    v140 = *(_QWORD *)(v0 + 960);
    v142 = *(_QWORD *)(v0 + 952);
    v144 = *(_QWORD *)(v0 + 944);
    v146 = *(_QWORD *)(v0 + 936);
    v148 = *(_QWORD *)(v0 + 912);
    v150 = *(_QWORD *)(v0 + 904);
    v152 = *(_QWORD *)(v0 + 896);
    v154 = *(_QWORD *)(v0 + 888);
    v156 = *(_QWORD *)(v0 + 864);
    v158 = *(_QWORD *)(v0 + 856);
    v160 = *(_QWORD *)(v0 + 848);
    v163 = *(_QWORD *)(v0 + 824);
    v166 = *(_QWORD *)(v0 + 816);
    v169 = *(_QWORD *)(v0 + 808);
    v171 = *(_QWORD *)(v0 + 800);
    swift_task_dealloc(*(_QWORD *)(v0 + 1096));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v136);
    swift_task_dealloc(v138);
    swift_task_dealloc(v140);
    swift_task_dealloc(v142);
    swift_task_dealloc(v144);
    swift_task_dealloc(v146);
    swift_task_dealloc(v148);
    swift_task_dealloc(v150);
    swift_task_dealloc(v152);
    swift_task_dealloc(v154);
    swift_task_dealloc(v156);
    swift_task_dealloc(v158);
    swift_task_dealloc(v160);
    swift_task_dealloc(v163);
    swift_task_dealloc(v166);
    swift_task_dealloc(v169);
    swift_task_dealloc(v171);
    v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  v26 = *(_QWORD *)(v0 + 1096);
  v27 = *(_QWORD *)(v0 + 1088);
  v28 = *(_QWORD *)(v0 + 1072);
  v29 = *(_QWORD *)(v0 + 1064);
  v30 = *(_QWORD *)(v0 + 1048);
  v31 = *(_QWORD *)(v0 + 1040);
  v32 = *(_QWORD *)(v0 + 1032);
  v33 = *(_QWORD *)(v0 + 1024);
  v34 = *(_QWORD *)(v0 + 1008);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 32))(v30, *(_QWORD *)(v0 + 1016), v33);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  *(_QWORD *)(v0 + 1224) = v35;
  v35(v27, v26, v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v30, v33);
  v36 = sub_1001C7D14(v27, v31, v34);
  v37 = FriendshipRequest.toHandles.getter(v36);
  *(_QWORD *)(v0 + 1232) = v37;
  v38 = *(_QWORD *)(v37 + 16);
  *(_QWORD *)(v0 + 1240) = v38;
  if (!v38)
  {
    swift_bridgeObjectRelease(v37);
    v44 = _swiftEmptyDictionarySingleton;
    v73 = (int *)&enum case for FriendshipRequestStatus.failure(_:);
LABEL_25:
    v80 = *v73;
    *(_QWORD *)(v0 + 1328) = v44;
    *(_DWORD *)(v0 + 1500) = v80;
    v54 = *(_QWORD *)(v0 + 928);
    v51 = *(char **)(v0 + 816);
    LOBYTE(v80) = *((_BYTE *)v44 + 32);
    *(_BYTE *)(v0 + 1524) = v80;
    v81 = -1;
    v82 = -1 << v80;
    v83 = v44[8];
    if (-v82 < 64)
      v81 = ~(-1 << -(char)v82);
    *(_DWORD *)(v0 + 1504) = enum case for FriendshipResponseToInviteType.decline(_:);
    *(_DWORD *)(v0 + 1508) = enum case for FriendshipRequestStatus.pending(_:);
    *(_DWORD *)(v0 + 1512) = enum case for FriendshipRequestStatus.success(_:);
    *(_DWORD *)(v0 + 1516) = enum case for FriendshipRequestError.commandFailed(_:);
    *(_DWORD *)(v0 + 1520) = enum case for FriendshipRequestError.invalidResponse(_:);
    *(_QWORD *)(v0 + 1336) = _swiftEmptyDictionarySingleton;
    v84 = v81 & v83;
    if (v84)
    {
      v85 = 0;
      v86 = __clz(__rbit64(v84));
      v87 = (v84 - 1) & v84;
LABEL_29:
      v88 = *(_QWORD *)(v0 + 920);
      v89 = (_QWORD *)(v44[6] + 16 * v86);
      v90 = v89[1];
      *(_QWORD *)v51 = *v89;
      *((_QWORD *)v51 + 1) = v90;
      v91 = v44[7] + *(_QWORD *)(v54 + 72) * v86;
      v92 = sub_100037A5C(&qword_100261968);
      (*(void (**)(char *, unint64_t, uint64_t))(v54 + 16))(&v51[*(int *)(v92 + 48)], v91, v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v51, 0, 1, v92);
      swift_bridgeObjectRetain(v90);
      goto LABEL_37;
    }
    v53 = 63 - v82;
    if ((unint64_t)(63 - v82) <= 0x7F)
    {
      v85 = 0;
      goto LABEL_36;
    }
    v93 = v44[9];
    if (v93)
    {
      v85 = 1;
    }
    else
    {
      if (v53 < 0xC0)
      {
        v85 = 1;
        goto LABEL_36;
      }
      v93 = v44[10];
      if (v93)
      {
        v85 = 2;
      }
      else
      {
        if (v53 < 0x100)
        {
          v85 = 2;
          goto LABEL_36;
        }
        v93 = v44[11];
        if (!v93)
          goto LABEL_51;
        v85 = 3;
      }
    }
LABEL_33:
    v87 = (v93 - 1) & v93;
    v86 = __clz(__rbit64(v93)) + (v85 << 6);
    goto LABEL_29;
  }
  v39 = 0;
  v40 = *(_QWORD *)(v0 + 928);
  v41 = *(_DWORD *)(v40 + 80);
  *(_DWORD *)(v0 + 1480) = v41;
  v42 = *(_QWORD *)(v40 + 72);
  *(_QWORD *)(v0 + 1248) = v42;
  *(_DWORD *)(v0 + 1484) = enum case for HandleType.futureFollower(_:);
  *(_DWORD *)(v0 + 1488) = enum case for HandleType.following(_:);
  *(_DWORD *)(v0 + 1492) = enum case for FriendshipRequestError.missingServerId(_:);
  *(_DWORD *)(v0 + 1496) = enum case for FriendshipRequestStatus.failure(_:);
  v43 = *(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v40 + 16);
  *(_QWORD *)(v0 + 1256) = v43;
  v44 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    *(_QWORD *)(v0 + 1280) = v39;
    *(_QWORD *)(v0 + 1272) = v44;
    *(_QWORD *)(v0 + 1264) = _swiftEmptyDictionarySingleton;
    v45 = v43(*(_QWORD *)(v0 + 992), v37 + ((v41 + 32) & ~(unint64_t)v41) + v42 * v39, *(_QWORD *)(v0 + 920));
    v46 = Handle.serverID.getter(v45);
    if (!v47)
    {
      v74 = *(unsigned int *)(v0 + 1484);
      v75 = *(_QWORD *)(v0 + 888);
      v76 = *(_QWORD *)(v0 + 872);
      v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 880) + 104);
      *(_QWORD *)(v0 + 1288) = v77;
      v77(v75, v74, v76);
      v78 = (_QWORD *)swift_task_alloc(dword_100262DDC);
      *(_QWORD *)(v0 + 1296) = v78;
      *v78 = v0;
      v78[1] = sub_1001949EC;
      return sub_1000E7320(*(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 888), 0);
    }
    v48 = v46;
    v49 = v47;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1256))(*(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 920));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
    *(_QWORD *)(v0 + 752) = v44;
    v51 = (char *)v44;
    v54 = sub_10002FF38(v48, v49);
    v55 = v44[2];
    v56 = (v52 & 1) == 0;
    v57 = v55 + v56;
    if (__OFADD__(v55, v56))
      break;
    v58 = v52;
    if (v44[3] >= v57)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v51 = (char *)(v0 + 752);
        sub_1000F642C();
      }
    }
    else
    {
      sub_1001618AC(v57, isUniquelyReferenced_nonNull_native);
      v51 = *(char **)(v0 + 752);
      v59 = sub_10002FF38(v48, v49);
      if ((v58 & 1) != (v60 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v54 = v59;
    }
    v44 = *(_QWORD **)(v0 + 752);
    v61 = *(_QWORD *)(v0 + 1248);
    v62 = *(_QWORD *)(v0 + 984);
    v63 = *(_QWORD *)(v0 + 928);
    v64 = *(_QWORD *)(v0 + 920);
    if ((v58 & 1) != 0)
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v63 + 40))(v44[7] + v61 * v54, v62, v64);
    }
    else
    {
      v44[(v54 >> 6) + 8] |= 1 << v54;
      v65 = (uint64_t *)(v44[6] + 16 * v54);
      *v65 = v48;
      v65[1] = v49;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v63 + 32))(v44[7] + v61 * v54, v62, v64);
      v66 = v44[2];
      v67 = __OFADD__(v66, 1);
      v68 = v66 + 1;
      if (v67)
        goto LABEL_50;
      v44[2] = v68;
      swift_bridgeObjectRetain(v49);
    }
    v69 = *(_QWORD *)(v0 + 928);
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRelease(v49);
    v70 = *(void (**)(_QWORD, _QWORD))(v69 + 8);
    v71 = *(_QWORD *)(v0 + 1240);
    v72 = *(_QWORD *)(v0 + 1280) + 1;
    v70(*(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 920));
    if (v72 == v71)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1232));
      v73 = (int *)(v0 + 1496);
      goto LABEL_25;
    }
    v39 = *(_QWORD *)(v0 + 1280) + 1;
    v43 = *(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v0 + 1256);
    v42 = *(_QWORD *)(v0 + 1248);
    LOBYTE(v41) = *(_BYTE *)(v0 + 1480);
    v37 = *(_QWORD *)(v0 + 1232);
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  if (v53 < 0x140)
  {
    v85 = 3;
  }
  else
  {
    v93 = v44[12];
    if (v93)
    {
      v85 = 4;
      goto LABEL_33;
    }
    v122 = 0;
    v123 = v53 >> 6;
    v124 = 5;
    if (v123 > 5)
      v124 = v123;
    v125 = v124 - 5;
    while (v125 != v122)
    {
      v93 = v44[v122++ + 13];
      if (v93)
      {
        v85 = v122 + 4;
        goto LABEL_33;
      }
    }
    v85 = v123 - 1;
  }
LABEL_36:
  v94 = sub_100037A5C(&qword_100261968);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56))(v51, 1, 1, v94);
  v87 = 0;
LABEL_37:
  *(_QWORD *)(v0 + 1352) = v87;
  *(_QWORD *)(v0 + 1344) = v85;
  v95 = *(_QWORD *)(v0 + 824);
  sub_10000EF6C(*(_QWORD *)(v0 + 816), v95, &qword_100261960);
  v96 = sub_100037A5C(&qword_100261968);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 48))(v95, 1, v96) == 1)
  {
    v97 = *(_QWORD *)(v0 + 1208);
    v98 = *(_QWORD *)(v0 + 1096);
    v131 = *(_QWORD *)(v0 + 1088);
    v132 = *(_QWORD *)(v0 + 1080);
    v129 = *(_QWORD *)(v0 + 1072);
    v130 = *(_QWORD *)(v0 + 1064);
    v99 = *(_QWORD *)(v0 + 1048);
    v133 = *(_QWORD *)(v0 + 1056);
    v134 = *(_QWORD *)(v0 + 1040);
    v126 = *(_QWORD *)(v0 + 1032);
    v127 = *(_QWORD *)(v0 + 1144);
    v128 = *(_QWORD *)(v0 + 1024);
    v100 = *(_QWORD *)(v0 + 1008);
    v135 = *(_QWORD *)(v0 + 1016);
    v137 = *(_QWORD *)(v0 + 992);
    v139 = *(_QWORD *)(v0 + 984);
    v141 = *(_QWORD *)(v0 + 976);
    v143 = *(_QWORD *)(v0 + 968);
    v145 = *(_QWORD *)(v0 + 960);
    v147 = *(_QWORD *)(v0 + 952);
    v149 = *(_QWORD *)(v0 + 944);
    v151 = *(_QWORD *)(v0 + 936);
    v153 = *(_QWORD *)(v0 + 912);
    v155 = *(_QWORD *)(v0 + 904);
    v157 = *(_QWORD *)(v0 + 896);
    v159 = *(_QWORD *)(v0 + 888);
    v161 = *(_QWORD *)(v0 + 864);
    v164 = *(_QWORD *)(v0 + 856);
    v167 = *(_QWORD *)(v0 + 848);
    v170 = *(_QWORD *)(v0 + 824);
    v172 = *(_QWORD *)(v0 + 816);
    v175 = *(_QWORD *)(v0 + 808);
    v101 = *(_QWORD *)(v0 + 800);
    v102 = *(_QWORD *)(v0 + 792);
    v103 = *(_QWORD *)(v0 + 784);
    v104 = *(_QWORD *)(v0 + 768);
    swift_release(*(_QWORD *)(v0 + 1328));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16))(v101, v104, v103);
    v105 = sub_10019BCE8((uint64_t)_swiftEmptyArrayStorage);
    FriendshipRequestResult.init(request:result:requestIds:)(v101, _swiftEmptyDictionarySingleton, v105);
    swift_release(v97);
    swift_release(v127);
    sub_100024990(v100, type metadata accessor for RespondToInviteEndpoint);
    (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v99, v128);
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v98, v130);
    swift_task_dealloc(v98);
    swift_task_dealloc(v131);
    swift_task_dealloc(v132);
    swift_task_dealloc(v133);
    swift_task_dealloc(v99);
    swift_task_dealloc(v134);
    swift_task_dealloc(v135);
    swift_task_dealloc(v100);
    swift_task_dealloc(v137);
    swift_task_dealloc(v139);
    swift_task_dealloc(v141);
    swift_task_dealloc(v143);
    swift_task_dealloc(v145);
    swift_task_dealloc(v147);
    swift_task_dealloc(v149);
    swift_task_dealloc(v151);
    swift_task_dealloc(v153);
    swift_task_dealloc(v155);
    swift_task_dealloc(v157);
    swift_task_dealloc(v159);
    swift_task_dealloc(v161);
    swift_task_dealloc(v164);
    swift_task_dealloc(v167);
    swift_task_dealloc(v170);
    swift_task_dealloc(v172);
    swift_task_dealloc(v175);
    swift_task_dealloc(v101);
    v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  v168 = *(_DWORD *)(v0 + 1504);
  v106 = *(_QWORD *)(v0 + 1096);
  v107 = *(_QWORD *)(v0 + 1080);
  v108 = *(_QWORD *)(v0 + 1064);
  v162 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1224);
  v165 = *(_QWORD *)(v0 + 1048);
  v109 = *(_QWORD *)(v0 + 1040);
  v110 = *(_QWORD *)(v0 + 1032);
  v111 = *(_QWORD *)(v0 + 1024);
  v112 = *(_QWORD *)(v0 + 944);
  v113 = *(_QWORD *)(v0 + 928);
  v114 = *(_QWORD *)(v0 + 920);
  v115 = *(char **)(v0 + 824);
  v176 = *(_QWORD *)v115;
  *(_QWORD *)(v0 + 1360) = *(_QWORD *)v115;
  v116 = *((_QWORD *)v115 + 1);
  *(_QWORD *)(v0 + 1368) = v116;
  (*(void (**)(uint64_t, char *, uint64_t))(v113 + 32))(v112, &v115[*(int *)(v96 + 48)], v114);
  v162(v107, v106, v108);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v110 + 104))(v109, v168, v111);
  LOBYTE(v106) = static FriendshipResponseToInviteType.== infix(_:_:)(v165, v109);
  v117 = *(uint64_t (**)(uint64_t, uint64_t))(v110 + 8);
  *(_QWORD *)(v0 + 1376) = v117;
  v118 = v117(v109, v111);
  v119 = FriendshipRequest.callerHandle.getter(v118);
  FriendshipRequest.origin.getter(v119);
  v120 = unk_1002603A4;
  v173 = (char *)&dword_1002603A0 + dword_1002603A0;
  swift_bridgeObjectRetain(v116);
  v121 = (_QWORD *)swift_task_alloc(v120);
  *(_QWORD *)(v0 + 1384) = v121;
  *v121 = v0;
  v121[1] = sub_10019600C;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, BOOL, _QWORD, _QWORD))v173)(*(_QWORD *)(v0 + 1080), v176, v116, (v106 & 1) == 0, *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 808));
}

uint64_t sub_1001949EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 888);
  v3 = *(_QWORD *)(*v0 + 880);
  v4 = *(_QWORD *)(*v0 + 872);
  v5 = *(_QWORD *)(*v0 + 776);
  swift_task_dealloc(*(_QWORD *)(*v0 + 1296));
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v1 + 1304) = v6;
  v6(v2, v4);
  return swift_task_switch(sub_100194A70, v5, 0);
}

uint64_t sub_100194A70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;

  v1 = *(_QWORD *)(v0 + 928);
  v2 = *(_QWORD *)(v0 + 920);
  v3 = *(_QWORD *)(v0 + 912);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  *(_QWORD *)(v0 + 1312) = v4;
  if (v4(v3, 1, v2) == 1)
  {
    sub_1000087A0(v3, &qword_1002650A0);
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(v1 + 32);
  v6 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v5)(*(_QWORD *)(v0 + 976), v3, v2);
  v7 = Handle.serverID.getter(v6);
  if (!v8)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 928) + 8))(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 920));
LABEL_9:
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1288))(*(_QWORD *)(v0 + 888), *(unsigned int *)(v0 + 1488), *(_QWORD *)(v0 + 872));
    v23 = (_QWORD *)swift_task_alloc(dword_100262DDC);
    *(_QWORD *)(v0 + 1320) = v23;
    *v23 = v0;
    v23[1] = sub_10019552C;
    v24 = *(_QWORD *)(v0 + 992);
    v25 = *(_QWORD *)(v0 + 904);
    return sub_1000E7320(v25, v24, *(_QWORD *)(v0 + 888), 0);
  }
  v9 = v7;
  v10 = v8;
  v11 = *(char **)(v0 + 1272);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1256))(*(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 920));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  *(_QWORD *)(v0 + 744) = v11;
  v15 = sub_10002FF38(v9, v10);
  v16 = *((_QWORD *)v11 + 2);
  v17 = (v13 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
LABEL_62:
    v111 = 0;
    v30 = v14 >> 6;
    v112 = 5;
    if (v30 > 5)
      v112 = v30;
    v113 = v112 - 5;
    while (v113 != v111)
    {
      v78 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 104 + 8 * v111++);
      if (v78)
      {
        v45 = v111 + 4;
        goto LABEL_40;
      }
    }
    goto LABEL_69;
  }
  v19 = v13;
  v11 = (char *)(v0 + 744);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 1272) + 24) >= v18)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1000F642C();
  }
  else
  {
    sub_1001618AC(v18, isUniquelyReferenced_nonNull_native);
    v11 = *(char **)v11;
    v20 = sub_10002FF38(v9, v10);
    if ((v19 & 1) != (v21 & 1))
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    v15 = v20;
  }
  isUniquelyReferenced_nonNull_native = *(_QWORD *)(v0 + 744);
  v26 = *(_QWORD *)(v0 + 1248);
  v27 = *(_QWORD *)(v0 + 968);
  if ((v19 & 1) != 0)
  {
    (*(void (**)(unint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 928) + 40))(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + v26 * v15, v27, *(_QWORD *)(v0 + 920));
  }
  else
  {
    v28 = *(_QWORD *)(v0 + 920);
    *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * (v15 >> 6) + 64) |= 1 << v15;
    v29 = (uint64_t *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v15);
    *v29 = v9;
    v29[1] = v10;
    ((void (*)(unint64_t, uint64_t, uint64_t))v5)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + v26 * v15, v27, v28);
    v31 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
    {
      __break(1u);
LABEL_69:
      v45 = v30 - 1;
      goto LABEL_43;
    }
    *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v33;
    swift_bridgeObjectRetain(v10);
  }
  v34 = *(_QWORD *)(v0 + 976);
  v35 = *(_QWORD *)(v0 + 928);
  v36 = *(_QWORD *)(v0 + 920);
  swift_bridgeObjectRelease(0x8000000000000000);
  swift_bridgeObjectRelease(v10);
  v37 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
  v37(v34, v36);
  v10 = *(_QWORD *)(v0 + 1264);
  v38 = *(_QWORD *)(v0 + 1240);
  v39 = *(_QWORD *)(v0 + 1280) + 1;
  v37(*(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 920));
  if (v39 == v38)
  {
LABEL_19:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1232));
    v40 = *(_DWORD *)(v0 + 1496);
    *(_QWORD *)(v0 + 1328) = isUniquelyReferenced_nonNull_native;
    *(_DWORD *)(v0 + 1500) = v40;
    v5 = *(_QWORD *)(v0 + 928);
    v11 = *(char **)(v0 + 816);
    LOBYTE(v40) = *(_BYTE *)(isUniquelyReferenced_nonNull_native + 32);
    *(_BYTE *)(v0 + 1524) = v40;
    v41 = -1;
    v42 = -1 << v40;
    v43 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 64);
    if (-v42 < 64)
      v41 = ~(-1 << -(char)v42);
    *(_DWORD *)(v0 + 1504) = enum case for FriendshipResponseToInviteType.decline(_:);
    *(_DWORD *)(v0 + 1508) = enum case for FriendshipRequestStatus.pending(_:);
    *(_DWORD *)(v0 + 1512) = enum case for FriendshipRequestStatus.success(_:);
    *(_DWORD *)(v0 + 1516) = enum case for FriendshipRequestError.commandFailed(_:);
    *(_DWORD *)(v0 + 1520) = enum case for FriendshipRequestError.invalidResponse(_:);
    *(_QWORD *)(v0 + 1336) = v10;
    v44 = v41 & v43;
    if (v44)
    {
      v45 = 0;
      v46 = __clz(__rbit64(v44));
      v47 = (v44 - 1) & v44;
LABEL_23:
      v48 = *(_QWORD *)(v0 + 920);
      v49 = (_QWORD *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v46);
      v50 = v49[1];
      *(_QWORD *)v11 = *v49;
      *((_QWORD *)v11 + 1) = v50;
      v51 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + *(_QWORD *)(v5 + 72) * v46;
      v52 = sub_100037A5C(&qword_100261968);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v11[*(int *)(v52 + 48)], v51, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v11, 0, 1, v52);
      swift_bridgeObjectRetain(v50);
      goto LABEL_44;
    }
    v14 = 63 - v42;
    if ((unint64_t)(63 - v42) <= 0x7F)
    {
      v45 = 0;
      goto LABEL_43;
    }
    v78 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 72);
    if (v78)
    {
      v45 = 1;
LABEL_40:
      v47 = (v78 - 1) & v78;
      v46 = __clz(__rbit64(v78)) + (v45 << 6);
      goto LABEL_23;
    }
    if (v14 < 0xC0)
    {
      v45 = 1;
      goto LABEL_43;
    }
    v78 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 80);
    if (v78)
    {
      v45 = 2;
      goto LABEL_40;
    }
    if (v14 < 0x100)
    {
      v45 = 2;
      goto LABEL_43;
    }
    v78 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 88);
    if (v78)
    {
      v45 = 3;
      goto LABEL_40;
    }
LABEL_56:
    if (v14 < 0x140)
      goto LABEL_60;
    v78 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 96);
    if (v78)
    {
      v45 = 4;
      goto LABEL_40;
    }
    goto LABEL_62;
  }
  while (1)
  {
    v57 = *(_QWORD *)(v0 + 1280) + 1;
    *(_QWORD *)(v0 + 1280) = v57;
    *(_QWORD *)(v0 + 1272) = isUniquelyReferenced_nonNull_native;
    *(_QWORD *)(v0 + 1264) = v10;
    v58 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v0 + 1256))(*(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 1232)+ ((*(unsigned __int8 *)(v0 + 1480) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1480))+ *(_QWORD *)(v0 + 1248) * v57, *(_QWORD *)(v0 + 920));
    v59 = Handle.serverID.getter(v58);
    if (!v60)
    {
      v79 = *(unsigned int *)(v0 + 1484);
      v80 = *(_QWORD *)(v0 + 888);
      v81 = *(_QWORD *)(v0 + 872);
      v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 880) + 104);
      *(_QWORD *)(v0 + 1288) = v82;
      v82(v80, v79, v81);
      v83 = (_QWORD *)swift_task_alloc(dword_100262DDC);
      *(_QWORD *)(v0 + 1296) = v83;
      *v83 = v0;
      v83[1] = sub_1001949EC;
      v24 = *(_QWORD *)(v0 + 992);
      v25 = *(_QWORD *)(v0 + 912);
      return sub_1000E7320(v25, v24, *(_QWORD *)(v0 + 888), 0);
    }
    v61 = v59;
    v62 = v60;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1256))(*(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 920));
    v63 = swift_isUniquelyReferenced_nonNull_native(isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v0 + 752) = isUniquelyReferenced_nonNull_native;
    v11 = (char *)isUniquelyReferenced_nonNull_native;
    v5 = sub_10002FF38(v61, v62);
    v65 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
    v66 = (v64 & 1) == 0;
    v67 = v65 + v66;
    if (__OFADD__(v65, v66))
    {
      __break(1u);
      goto LABEL_56;
    }
    v68 = v64;
    if (*(_QWORD *)(isUniquelyReferenced_nonNull_native + 24) >= v67)
    {
      if ((v63 & 1) == 0)
      {
        v11 = (char *)(v0 + 752);
        sub_1000F642C();
      }
    }
    else
    {
      sub_1001618AC(v67, v63);
      v11 = *(char **)(v0 + 752);
      v69 = sub_10002FF38(v61, v62);
      if ((v68 & 1) != (v70 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v5 = v69;
    }
    isUniquelyReferenced_nonNull_native = *(_QWORD *)(v0 + 752);
    v71 = *(_QWORD *)(v0 + 1248);
    v72 = *(_QWORD *)(v0 + 984);
    v73 = *(_QWORD *)(v0 + 928);
    v74 = *(_QWORD *)(v0 + 920);
    if ((v68 & 1) == 0)
      break;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v73 + 40))(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + v71 * v5, v72, v74);
LABEL_26:
    v53 = *(_QWORD *)(v0 + 928);
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRelease(v62);
    v54 = *(void (**)(_QWORD, _QWORD))(v53 + 8);
    v55 = *(_QWORD *)(v0 + 1240);
    v56 = *(_QWORD *)(v0 + 1280) + 1;
    v54(*(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 920));
    if (v56 == v55)
      goto LABEL_19;
  }
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * (v5 >> 6) + 64) |= 1 << v5;
  v75 = (uint64_t *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v5);
  *v75 = v61;
  v75[1] = v62;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v73 + 32))(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + v71 * v5, v72, v74);
  v76 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
  v32 = __OFADD__(v76, 1);
  v77 = v76 + 1;
  if (!v32)
  {
    *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v77;
    swift_bridgeObjectRetain(v62);
    goto LABEL_26;
  }
  __break(1u);
LABEL_60:
  v45 = 3;
LABEL_43:
  v84 = sub_100037A5C(&qword_100261968);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v11, 1, 1, v84);
  v47 = 0;
LABEL_44:
  *(_QWORD *)(v0 + 1352) = v47;
  *(_QWORD *)(v0 + 1344) = v45;
  v85 = *(_QWORD *)(v0 + 824);
  sub_10000EF6C(*(_QWORD *)(v0 + 816), v85, &qword_100261960);
  v86 = sub_100037A5C(&qword_100261968);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 48))(v85, 1, v86) == 1)
  {
    v87 = *(_QWORD *)(v0 + 1096);
    v120 = *(_QWORD *)(v0 + 1088);
    v121 = *(_QWORD *)(v0 + 1080);
    v118 = *(_QWORD *)(v0 + 1072);
    v119 = *(_QWORD *)(v0 + 1064);
    v88 = *(_QWORD *)(v0 + 1048);
    v122 = *(_QWORD *)(v0 + 1056);
    v123 = *(_QWORD *)(v0 + 1040);
    v114 = *(_QWORD *)(v0 + 1208);
    v115 = *(_QWORD *)(v0 + 1032);
    v116 = *(_QWORD *)(v0 + 1144);
    v117 = *(_QWORD *)(v0 + 1024);
    v89 = *(_QWORD *)(v0 + 1008);
    v124 = *(_QWORD *)(v0 + 1016);
    v125 = *(_QWORD *)(v0 + 992);
    v126 = *(_QWORD *)(v0 + 984);
    v127 = *(_QWORD *)(v0 + 976);
    v128 = *(_QWORD *)(v0 + 968);
    v129 = *(_QWORD *)(v0 + 960);
    v130 = *(_QWORD *)(v0 + 952);
    v131 = *(_QWORD *)(v0 + 944);
    v132 = *(_QWORD *)(v0 + 936);
    v133 = *(_QWORD *)(v0 + 912);
    v134 = *(_QWORD *)(v0 + 904);
    v135 = *(_QWORD *)(v0 + 896);
    v136 = *(_QWORD *)(v0 + 888);
    v137 = *(_QWORD *)(v0 + 864);
    v139 = *(_QWORD *)(v0 + 856);
    v141 = *(_QWORD *)(v0 + 848);
    v143 = *(_QWORD *)(v0 + 824);
    v144 = *(_QWORD *)(v0 + 816);
    v146 = *(_QWORD *)(v0 + 808);
    v90 = *(_QWORD *)(v0 + 800);
    v91 = *(_QWORD *)(v0 + 792);
    v92 = *(_QWORD *)(v0 + 784);
    v93 = *(_QWORD *)(v0 + 768);
    swift_release(*(_QWORD *)(v0 + 1328));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16))(v90, v93, v92);
    v94 = sub_10019BCE8((uint64_t)_swiftEmptyArrayStorage);
    FriendshipRequestResult.init(request:result:requestIds:)(v90, v10, v94);
    swift_release(v114);
    swift_release(v116);
    sub_100024990(v89, type metadata accessor for RespondToInviteEndpoint);
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v88, v117);
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v87, v119);
    swift_task_dealloc(v87);
    swift_task_dealloc(v120);
    swift_task_dealloc(v121);
    swift_task_dealloc(v122);
    swift_task_dealloc(v88);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v89);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    swift_task_dealloc(v131);
    swift_task_dealloc(v132);
    swift_task_dealloc(v133);
    swift_task_dealloc(v134);
    swift_task_dealloc(v135);
    swift_task_dealloc(v136);
    swift_task_dealloc(v137);
    swift_task_dealloc(v139);
    swift_task_dealloc(v141);
    swift_task_dealloc(v143);
    swift_task_dealloc(v144);
    swift_task_dealloc(v146);
    swift_task_dealloc(v90);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v142 = *(_DWORD *)(v0 + 1504);
    v95 = *(_QWORD *)(v0 + 1096);
    v96 = *(_QWORD *)(v0 + 1080);
    v97 = *(_QWORD *)(v0 + 1064);
    v138 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1224);
    v140 = *(_QWORD *)(v0 + 1048);
    v98 = *(_QWORD *)(v0 + 1040);
    v99 = *(_QWORD *)(v0 + 1032);
    v100 = *(_QWORD *)(v0 + 1024);
    v101 = *(_QWORD *)(v0 + 944);
    v102 = *(_QWORD *)(v0 + 928);
    v103 = *(_QWORD *)(v0 + 920);
    v104 = *(char **)(v0 + 824);
    v147 = *(_QWORD *)v104;
    *(_QWORD *)(v0 + 1360) = *(_QWORD *)v104;
    v105 = *((_QWORD *)v104 + 1);
    *(_QWORD *)(v0 + 1368) = v105;
    (*(void (**)(uint64_t, char *, uint64_t))(v102 + 32))(v101, &v104[*(int *)(v86 + 48)], v103);
    v138(v96, v95, v97);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v99 + 104))(v98, v142, v100);
    LOBYTE(v95) = static FriendshipResponseToInviteType.== infix(_:_:)(v140, v98);
    v106 = *(uint64_t (**)(uint64_t, uint64_t))(v99 + 8);
    *(_QWORD *)(v0 + 1376) = v106;
    v107 = v106(v98, v100);
    v108 = FriendshipRequest.callerHandle.getter(v107);
    FriendshipRequest.origin.getter(v108);
    v109 = unk_1002603A4;
    v145 = (char *)&dword_1002603A0 + dword_1002603A0;
    swift_bridgeObjectRetain(v105);
    v110 = (_QWORD *)swift_task_alloc(v109);
    *(_QWORD *)(v0 + 1384) = v110;
    *v110 = v0;
    v110[1] = sub_10019600C;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, BOOL, _QWORD, _QWORD))v145)(*(_QWORD *)(v0 + 1080), v147, v105, (v95 & 1) == 0, *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 808));
  }
}

uint64_t sub_10019552C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 1304);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 888);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 872);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 776);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1320));
  v1(v2, v3);
  return swift_task_switch(sub_1001955A4, v4, 0);
}

uint64_t sub_1001955A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD, _QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  _QWORD *v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v1 = *(_QWORD *)(v0 + 920);
  v2 = *(_QWORD *)(v0 + 904);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1312))(v2, 1, v1) == 1)
  {
    sub_1000087A0(v2, &qword_1002650A0);
  }
  else
  {
    v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 928) + 32))(*(_QWORD *)(v0 + 960), v2, v1);
    v4 = Handle.serverID.getter(v3);
    if (v5)
    {
      v6 = v4;
      v7 = v5;
      v8 = *(_QWORD *)(v0 + 1272);
      v9 = *(_QWORD *)(v0 + 960);
      v10 = *(_QWORD *)(v0 + 952);
      v11 = *(_QWORD *)(v0 + 928);
      v12 = *(_QWORD *)(v0 + 920);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1256))(v10, v9, v12);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
      sub_100163CF4(v10, v6, v7, isUniquelyReferenced_nonNull_native);
      v14 = v8;
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_bridgeObjectRelease(v7);
      v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v15(v9, v12);
      v16 = *(_QWORD *)(v0 + 1264);
      goto LABEL_7;
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 928) + 8))(*(_QWORD *)(v0 + 960), *(_QWORD *)(v0 + 920));
  }
  v17 = *(_QWORD *)(v0 + 1264);
  v18 = *(unsigned int *)(v0 + 1496);
  v19 = *(unsigned int *)(v0 + 1492);
  v20 = *(_QWORD *)(v0 + 952);
  v142 = *(_QWORD *)(v0 + 928);
  v21 = *(_QWORD *)(v0 + 920);
  v22 = *(_QWORD *)(v0 + 864);
  v23 = *(_QWORD *)(v0 + 856);
  v24 = *(_QWORD *)(v0 + 840);
  v25 = *(_QWORD *)(v0 + 832);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1256))(v20, *(_QWORD *)(v0 + 992), v21);
  v26 = type metadata accessor for FriendshipRequestError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v22, v19, v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 104))(v22, v18, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v23, v22, v25);
  v27 = swift_isUniquelyReferenced_nonNull_native(v17);
  sub_100163B24(v23, v20, v27);
  v16 = v17;
  swift_bridgeObjectRelease(0x8000000000000000);
  v15 = *(void (**)(uint64_t, uint64_t))(v142 + 8);
  v15(v20, v21);
  v14 = *(_QWORD *)(v0 + 1272);
LABEL_7:
  v28 = *(_QWORD *)(v0 + 1240);
  v29 = *(_QWORD *)(v0 + 1280) + 1;
  v15(*(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 920));
  if (v29 != v28)
  {
    do
    {
      v49 = *(_QWORD *)(v0 + 1280) + 1;
      *(_QWORD *)(v0 + 1280) = v49;
      *(_QWORD *)(v0 + 1272) = v14;
      *(_QWORD *)(v0 + 1264) = v16;
      v50 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v0 + 1256))(*(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 1232)+ ((*(unsigned __int8 *)(v0 + 1480) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1480))+ *(_QWORD *)(v0 + 1248) * v49, *(_QWORD *)(v0 + 920));
      v51 = Handle.serverID.getter(v50);
      if (!v52)
      {
        v73 = *(unsigned int *)(v0 + 1484);
        v74 = *(_QWORD *)(v0 + 888);
        v75 = *(_QWORD *)(v0 + 872);
        v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 880) + 104);
        *(_QWORD *)(v0 + 1288) = v76;
        v76(v74, v73, v75);
        v77 = (_QWORD *)swift_task_alloc(dword_100262DDC);
        *(_QWORD *)(v0 + 1296) = v77;
        *v77 = v0;
        v77[1] = sub_1001949EC;
        return sub_1000E7320(*(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 888), 0);
      }
      v53 = v51;
      v54 = v52;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1256))(*(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 920));
      v55 = swift_isUniquelyReferenced_nonNull_native(v14);
      *(_QWORD *)(v0 + 752) = v14;
      v32 = (char *)v14;
      v31 = sub_10002FF38(v53, v54);
      v58 = *(_QWORD *)(v14 + 16);
      v59 = (v56 & 1) == 0;
      v60 = v58 + v59;
      if (__OFADD__(v58, v59))
      {
        __break(1u);
        goto LABEL_46;
      }
      v61 = v56;
      if (*(_QWORD *)(v14 + 24) >= v60)
      {
        if ((v55 & 1) == 0)
        {
          v32 = (char *)(v0 + 752);
          sub_1000F642C();
        }
      }
      else
      {
        sub_1001618AC(v60, v55);
        v32 = *(char **)(v0 + 752);
        v62 = sub_10002FF38(v53, v54);
        if ((v61 & 1) != (v63 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        v31 = v62;
      }
      v14 = *(_QWORD *)(v0 + 752);
      v64 = *(_QWORD *)(v0 + 1248);
      v65 = *(_QWORD *)(v0 + 984);
      v66 = *(_QWORD *)(v0 + 928);
      v67 = *(_QWORD *)(v0 + 920);
      if ((v61 & 1) != 0)
      {
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v66 + 40))(*(_QWORD *)(v14 + 56) + v64 * v31, v65, v67);
      }
      else
      {
        *(_QWORD *)(v14 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        v68 = (uint64_t *)(*(_QWORD *)(v14 + 48) + 16 * v31);
        *v68 = v53;
        v68[1] = v54;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v66 + 32))(*(_QWORD *)(v14 + 56) + v64 * v31, v65, v67);
        v69 = *(_QWORD *)(v14 + 16);
        v70 = __OFADD__(v69, 1);
        v71 = v69 + 1;
        if (v70)
        {
          __break(1u);
LABEL_50:
          v37 = 3;
LABEL_32:
          v79 = sub_100037A5C(&qword_100261968);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v32, 1, 1, v79);
          v39 = 0;
          goto LABEL_33;
        }
        *(_QWORD *)(v14 + 16) = v71;
        swift_bridgeObjectRetain(v54);
      }
      v45 = *(_QWORD *)(v0 + 928);
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_bridgeObjectRelease(v54);
      v46 = *(void (**)(_QWORD, _QWORD))(v45 + 8);
      v47 = *(_QWORD *)(v0 + 1240);
      v48 = *(_QWORD *)(v0 + 1280) + 1;
      v46(*(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 920));
    }
    while (v48 != v47);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1232));
  v30 = *(_DWORD *)(v0 + 1496);
  *(_QWORD *)(v0 + 1328) = v14;
  *(_DWORD *)(v0 + 1500) = v30;
  v31 = *(_QWORD *)(v0 + 928);
  v32 = *(char **)(v0 + 816);
  LOBYTE(v30) = *(_BYTE *)(v14 + 32);
  *(_BYTE *)(v0 + 1524) = v30;
  v33 = -1;
  v34 = -1 << v30;
  v35 = *(_QWORD *)(v14 + 64);
  if (-v34 < 64)
    v33 = ~(-1 << -(char)v34);
  *(_DWORD *)(v0 + 1504) = enum case for FriendshipResponseToInviteType.decline(_:);
  *(_DWORD *)(v0 + 1508) = enum case for FriendshipRequestStatus.pending(_:);
  *(_DWORD *)(v0 + 1512) = enum case for FriendshipRequestStatus.success(_:);
  *(_DWORD *)(v0 + 1516) = enum case for FriendshipRequestError.commandFailed(_:);
  *(_DWORD *)(v0 + 1520) = enum case for FriendshipRequestError.invalidResponse(_:);
  *(_QWORD *)(v0 + 1336) = v16;
  v36 = v33 & v35;
  if (v36)
  {
    v37 = 0;
    v38 = __clz(__rbit64(v36));
    v39 = (v36 - 1) & v36;
  }
  else
  {
    v57 = 63 - v34;
    if ((unint64_t)(63 - v34) <= 0x7F)
    {
      v37 = 0;
      goto LABEL_32;
    }
    v72 = *(_QWORD *)(v14 + 72);
    if (v72)
    {
      v37 = 1;
    }
    else
    {
      if (v57 < 0xC0)
      {
        v37 = 1;
        goto LABEL_32;
      }
      v72 = *(_QWORD *)(v14 + 80);
      if (v72)
      {
        v37 = 2;
      }
      else
      {
        if (v57 < 0x100)
        {
          v37 = 2;
          goto LABEL_32;
        }
        v72 = *(_QWORD *)(v14 + 88);
        if (v72)
        {
          v37 = 3;
        }
        else
        {
LABEL_46:
          if (v57 < 0x140)
            goto LABEL_50;
          v72 = *(_QWORD *)(v14 + 96);
          if (!v72)
          {
            v106 = 0;
            v107 = v57 >> 6;
            v108 = 5;
            if (v107 > 5)
              v108 = v107;
            v109 = v108 - 5;
            while (v109 != v106)
            {
              v72 = *(_QWORD *)(v14 + 104 + 8 * v106++);
              if (v72)
              {
                v37 = v106 + 4;
                goto LABEL_29;
              }
            }
            v37 = v107 - 1;
            goto LABEL_32;
          }
          v37 = 4;
        }
      }
    }
LABEL_29:
    v39 = (v72 - 1) & v72;
    v38 = __clz(__rbit64(v72)) + (v37 << 6);
  }
  v40 = *(_QWORD *)(v0 + 920);
  v41 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v38);
  v42 = v41[1];
  *(_QWORD *)v32 = *v41;
  *((_QWORD *)v32 + 1) = v42;
  v43 = *(_QWORD *)(v14 + 56) + *(_QWORD *)(v31 + 72) * v38;
  v44 = sub_100037A5C(&qword_100261968);
  (*(void (**)(char *, unint64_t, uint64_t))(v31 + 16))(&v32[*(int *)(v44 + 48)], v43, v40);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v32, 0, 1, v44);
  swift_bridgeObjectRetain(v42);
LABEL_33:
  *(_QWORD *)(v0 + 1352) = v39;
  *(_QWORD *)(v0 + 1344) = v37;
  v80 = *(_QWORD *)(v0 + 824);
  sub_10000EF6C(*(_QWORD *)(v0 + 816), v80, &qword_100261960);
  v81 = sub_100037A5C(&qword_100261968);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 48))(v80, 1, v81) == 1)
  {
    v82 = *(_QWORD *)(v0 + 1096);
    v116 = *(_QWORD *)(v0 + 1088);
    v117 = *(_QWORD *)(v0 + 1080);
    v114 = *(_QWORD *)(v0 + 1072);
    v115 = *(_QWORD *)(v0 + 1064);
    v83 = *(_QWORD *)(v0 + 1048);
    v118 = *(_QWORD *)(v0 + 1056);
    v119 = *(_QWORD *)(v0 + 1040);
    v110 = *(_QWORD *)(v0 + 1208);
    v111 = *(_QWORD *)(v0 + 1032);
    v112 = *(_QWORD *)(v0 + 1144);
    v113 = *(_QWORD *)(v0 + 1024);
    v84 = *(_QWORD *)(v0 + 1008);
    v120 = *(_QWORD *)(v0 + 1016);
    v121 = *(_QWORD *)(v0 + 992);
    v122 = *(_QWORD *)(v0 + 984);
    v123 = *(_QWORD *)(v0 + 976);
    v124 = *(_QWORD *)(v0 + 968);
    v125 = *(_QWORD *)(v0 + 960);
    v126 = *(_QWORD *)(v0 + 952);
    v127 = *(_QWORD *)(v0 + 944);
    v128 = *(_QWORD *)(v0 + 936);
    v129 = *(_QWORD *)(v0 + 912);
    v130 = *(_QWORD *)(v0 + 904);
    v131 = *(_QWORD *)(v0 + 896);
    v132 = *(_QWORD *)(v0 + 888);
    v133 = *(_QWORD *)(v0 + 864);
    v135 = *(_QWORD *)(v0 + 856);
    v137 = *(_QWORD *)(v0 + 848);
    v139 = *(_QWORD *)(v0 + 824);
    v140 = *(_QWORD *)(v0 + 816);
    v143 = *(_QWORD *)(v0 + 808);
    v85 = *(_QWORD *)(v0 + 800);
    v86 = *(_QWORD *)(v0 + 792);
    v87 = *(_QWORD *)(v0 + 784);
    v88 = *(_QWORD *)(v0 + 768);
    swift_release(*(_QWORD *)(v0 + 1328));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v85, v88, v87);
    v89 = sub_10019BCE8((uint64_t)_swiftEmptyArrayStorage);
    FriendshipRequestResult.init(request:result:requestIds:)(v85, v16, v89);
    swift_release(v110);
    swift_release(v112);
    sub_100024990(v84, type metadata accessor for RespondToInviteEndpoint);
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v83, v113);
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v82, v115);
    swift_task_dealloc(v82);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v83);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v84);
    swift_task_dealloc(v121);
    swift_task_dealloc(v122);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    swift_task_dealloc(v131);
    swift_task_dealloc(v132);
    swift_task_dealloc(v133);
    swift_task_dealloc(v135);
    swift_task_dealloc(v137);
    swift_task_dealloc(v139);
    swift_task_dealloc(v140);
    swift_task_dealloc(v143);
    swift_task_dealloc(v85);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v138 = *(_DWORD *)(v0 + 1504);
    v90 = *(_QWORD *)(v0 + 1096);
    v91 = *(_QWORD *)(v0 + 1080);
    v92 = *(_QWORD *)(v0 + 1064);
    v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1224);
    v136 = *(_QWORD *)(v0 + 1048);
    v93 = *(_QWORD *)(v0 + 1040);
    v94 = *(_QWORD *)(v0 + 1032);
    v95 = *(_QWORD *)(v0 + 1024);
    v96 = *(_QWORD *)(v0 + 944);
    v97 = *(_QWORD *)(v0 + 928);
    v98 = *(_QWORD *)(v0 + 920);
    v99 = *(char **)(v0 + 824);
    v144 = *(_QWORD *)v99;
    *(_QWORD *)(v0 + 1360) = *(_QWORD *)v99;
    v100 = *((_QWORD *)v99 + 1);
    *(_QWORD *)(v0 + 1368) = v100;
    (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v96, &v99[*(int *)(v81 + 48)], v98);
    v134(v91, v90, v92);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v94 + 104))(v93, v138, v95);
    LOBYTE(v90) = static FriendshipResponseToInviteType.== infix(_:_:)(v136, v93);
    v101 = *(uint64_t (**)(uint64_t, uint64_t))(v94 + 8);
    *(_QWORD *)(v0 + 1376) = v101;
    v102 = v101(v93, v95);
    v103 = FriendshipRequest.callerHandle.getter(v102);
    FriendshipRequest.origin.getter(v103);
    v104 = unk_1002603A4;
    v141 = (char *)&dword_1002603A0 + dword_1002603A0;
    swift_bridgeObjectRetain(v100);
    v105 = (_QWORD *)swift_task_alloc(v104);
    *(_QWORD *)(v0 + 1384) = v105;
    *v105 = v0;
    v105[1] = sub_10019600C;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, BOOL, _QWORD, _QWORD))v141)(*(_QWORD *)(v0 + 1080), v144, v100, (v90 & 1) == 0, *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 808));
  }
}

uint64_t sub_10019600C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 1384);
  v6 = *(_QWORD **)v4;
  v6[174] = a1;
  v6[175] = a2;
  v6[176] = a3;
  v6[177] = v3;
  swift_task_dealloc(v5);
  if (v3)
  {
    v7 = v6[171];
    v8 = v6[97];
    swift_bridgeObjectRelease(v6[167]);
    swift_bridgeObjectRelease(v7);
    return swift_task_switch(sub_1001961F0, v8, 0);
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    v6[178] = v10;
    *v10 = v6;
    v10[1] = sub_1001960C4;
    return daemon.getter();
  }
}

uint64_t sub_1001960C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1424);
  v6 = *(_QWORD **)v1;
  v6[179] = a1;
  swift_task_dealloc(v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v6[180] = v4;
  *v4 = v6;
  v4[1] = sub_100196144;
  return ActorServiceDaemon.getService<A>()(v6[141], v6[149], v6[142], v6[150]);
}

uint64_t sub_100196144(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1440);
  v3[181] = a1;
  v3[182] = v1;
  swift_task_dealloc(v4);
  v5 = v3[179];
  if (v1)
  {
    v6 = v3[171];
    v7 = v3[167];
    v8 = v3[97];
    swift_bridgeObjectRelease(v7);
    swift_release(v5);
    swift_bridgeObjectRelease(v6);
    v9 = sub_1001973B8;
    v10 = v8;
  }
  else
  {
    v11 = v3[97];
    swift_release(v3[179]);
    v9 = sub_100196434;
    v10 = v11;
  }
  return swift_task_switch(v9, v10, 0);
}

uint64_t sub_1001961F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 1328);
  v2 = *(_QWORD *)(v0 + 1144);
  v37 = *(_QWORD *)(v0 + 1096);
  v39 = *(void (**)(uint64_t, uint64_t))(v0 + 1376);
  v3 = *(_QWORD *)(v0 + 1072);
  v35 = *(_QWORD *)(v0 + 1064);
  v4 = *(_QWORD *)(v0 + 1048);
  v5 = *(_QWORD *)(v0 + 1024);
  v6 = *(_QWORD *)(v0 + 1008);
  v7 = *(_QWORD *)(v0 + 944);
  v8 = *(_QWORD *)(v0 + 928);
  v9 = *(_QWORD *)(v0 + 920);
  swift_release(*(_QWORD *)(v0 + 1208));
  swift_release(v2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_release(v1);
  sub_100024990(v6, type metadata accessor for RespondToInviteEndpoint);
  v39(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v37, v35);
  v10 = *(_QWORD *)(v0 + 1088);
  v11 = *(_QWORD *)(v0 + 1080);
  v12 = *(_QWORD *)(v0 + 1056);
  v13 = *(_QWORD *)(v0 + 1048);
  v14 = *(_QWORD *)(v0 + 1040);
  v15 = *(_QWORD *)(v0 + 1016);
  v16 = *(_QWORD *)(v0 + 1008);
  v17 = *(_QWORD *)(v0 + 992);
  v18 = *(_QWORD *)(v0 + 984);
  v20 = *(_QWORD *)(v0 + 976);
  v21 = *(_QWORD *)(v0 + 968);
  v22 = *(_QWORD *)(v0 + 960);
  v23 = *(_QWORD *)(v0 + 952);
  v24 = *(_QWORD *)(v0 + 944);
  v25 = *(_QWORD *)(v0 + 936);
  v26 = *(_QWORD *)(v0 + 912);
  v27 = *(_QWORD *)(v0 + 904);
  v28 = *(_QWORD *)(v0 + 896);
  v29 = *(_QWORD *)(v0 + 888);
  v30 = *(_QWORD *)(v0 + 864);
  v31 = *(_QWORD *)(v0 + 856);
  v32 = *(_QWORD *)(v0 + 848);
  v33 = *(_QWORD *)(v0 + 824);
  v34 = *(_QWORD *)(v0 + 816);
  v36 = *(_QWORD *)(v0 + 808);
  v38 = *(_QWORD *)(v0 + 800);
  swift_task_dealloc(*(_QWORD *)(v0 + 1096));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100196434()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[176];
  v2 = v0[175];
  v3 = v0[174];
  v4 = v0[126];
  v0[77] = v0[125];
  v0[78] = sub_100004EA8(&qword_1002662E0, type metadata accessor for RespondToInviteEndpoint, (uint64_t)&unk_1001FAAC8);
  v5 = sub_10003276C(v0 + 74);
  sub_100025C70(v4, (uint64_t)v5, type metadata accessor for RespondToInviteEndpoint);
  v0[82] = &type metadata for RespondToInviteRequest;
  v0[83] = sub_10004AC40();
  v0[79] = v3;
  v0[80] = v2;
  v0[81] = v1;
  swift_bridgeObjectRetain(v3);
  v6 = sub_10001F728(v2, v1);
  v7 = Account.dsid.getter(v6);
  v9 = v8;
  v10 = Account.appToken.getter();
  v12 = v11;
  v0[87] = type metadata accessor for BasicCredential(0);
  v0[88] = &protocol witness table for BasicCredential;
  sub_10003276C(v0 + 84);
  BasicCredential.init(username:password:)(v7, v9, v10, v12);
  v13 = (_QWORD *)swift_task_alloc(dword_100263274);
  v0[183] = v13;
  *v13 = v0;
  v13[1] = sub_1001965A0;
  return sub_1000DE6C4((uint64_t)(v0 + 2), (uint64_t)(v0 + 74), (uint64_t)(v0 + 79), (uint64_t)(v0 + 84));
}

uint64_t sub_1001965A0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)v1 + 672;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 1464);
  *(_QWORD *)(*(_QWORD *)v1 + 1472) = v0;
  swift_task_dealloc(v4);
  if (v0)
  {
    v5 = v2[167];
    v6 = v2[97];
    swift_bridgeObjectRelease(v2[171]);
    sub_1000087A0((uint64_t)(v2 + 84), &qword_100260598);
    swift_bridgeObjectRelease(v5);
    v7 = sub_100197620;
    v8 = v6;
  }
  else
  {
    v9 = v2 + 79;
    v10 = v2 + 74;
    v11 = v2[97];
    sub_1000087A0(v3, &qword_100260598);
    sub_10002BB90(v9);
    sub_10002BB90(v10);
    v7 = sub_100196668;
    v8 = v11;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100196668()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121[2];

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 928) + 16))(*(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 920));
  if (*(_QWORD *)(v0 + 192) == 1)
  {
    v1 = *(unsigned int *)(v0 + 1520);
LABEL_9:
    v4 = *(_QWORD *)(v0 + 848);
    v5 = type metadata accessor for FriendshipRequestError(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v4, v1, v5);
    v6 = 1500;
    goto LABEL_10;
  }
  v2 = *(unsigned __int8 *)(v0 + 208);
  v3 = (v2 - 3) < 8 || v2 == 0;
  if (v3)
  {
    v1 = *(unsigned int *)(v0 + 1516);
    goto LABEL_9;
  }
  v3 = v2 == 1;
  v6 = 1512;
  if (!v3)
    v6 = 1508;
LABEL_10:
  v7 = *(_QWORD *)(v0 + 1336);
  v8 = *(_QWORD *)(v0 + 936);
  v9 = *(_QWORD *)(v0 + 928);
  v10 = *(_QWORD *)(v0 + 920);
  v11 = *(_QWORD *)(v0 + 864);
  v12 = *(_QWORD *)(v0 + 848);
  v13 = *(_QWORD *)(v0 + 840);
  v14 = *(_QWORD *)(v0 + 832);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v12, *(unsigned int *)(v0 + v6), v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v12, v14);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  v121[0] = v7;
  sub_100163B24(v11, v8, isUniquelyReferenced_nonNull_native);
  v16 = v7;
  swift_bridgeObjectRelease(0x8000000000000000);
  v17 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v17(v8, v10);
  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v18 = *(_QWORD *)(v0 + 1368);
  v19 = type metadata accessor for Logger(0);
  sub_100037A9C(v19, (uint64_t)qword_10027AB38);
  swift_bridgeObjectRetain(v18);
  v20 = sub_10002B630(v0 + 16);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(_QWORD *)(v0 + 1408);
  v115 = *(_QWORD *)(v0 + 1392);
  v118 = *(_QWORD *)(v0 + 1400);
  v25 = *(_QWORD *)(v0 + 1368);
  v114 = v16;
  if (v23)
  {
    v97 = *(_QWORD *)(v0 + 1360);
    v107 = *(_QWORD *)(v0 + 944);
    v103 = *(_QWORD *)(v0 + 1448);
    v105 = *(_QWORD *)(v0 + 920);
    v26 = swift_slowAlloc(42, -1);
    v101 = swift_slowAlloc(96, -1);
    v121[0] = v101;
    *(_DWORD *)v26 = 136446979;
    *(_QWORD *)(v0 + 712) = sub_10002BA84(0xD00000000000001DLL, 0x8000000100201740, v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 712, v0 + 720, v26 + 4, v26 + 12);
    *(_WORD *)(v26 + 12) = 2160;
    *(_QWORD *)(v0 + 720) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 720, v0 + 728, v26 + 14, v26 + 22);
    *(_WORD *)(v26 + 22) = 2081;
    swift_bridgeObjectRetain(v25);
    *(_QWORD *)(v0 + 728) = sub_10002BA84(v97, v25, v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 728, v0 + 736, v26 + 24, v26 + 32);
    swift_bridgeObjectRelease_n(v25, 3);
    *(_WORD *)(v26 + 32) = 2080;
    sub_10002B630(v0 + 16);
    v27 = sub_1000282A0();
    v29 = v28;
    sub_10002B3D4(v0 + 16);
    *(_QWORD *)(v0 + 736) = sub_10002BA84(v27, v29, v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 736, v0 + 744, v26 + 34, v26 + 42);
    v30 = v29;
    v16 = v114;
    swift_bridgeObjectRelease(v30);
    sub_10002B3D4(v0 + 16);
    sub_10002B3D4(v0 + 16);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "CommandManager %{public}s with\nserverId:%{private,mask.hash}s\nresponse: %s", (uint8_t *)v26, 0x2Au);
    swift_arrayDestroy(v101, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v101, -1, -1);
    swift_slowDealloc(v26, -1, -1);
    swift_release(v103);

    swift_bridgeObjectRelease(v115);
    sub_100037AF8(v118, v24);
    result = ((uint64_t (*)(uint64_t, uint64_t))v17)(v107, v105);
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 944);
    v33 = *(_QWORD *)(v0 + 920);
    swift_release(*(_QWORD *)(v0 + 1448));

    sub_10002B3D4(v0 + 16);
    sub_10002B3D4(v0 + 16);
    swift_bridgeObjectRelease_n(v25, 2);
    swift_bridgeObjectRelease(v115);
    sub_100037AF8(v118, v24);
    result = ((uint64_t (*)(uint64_t, uint64_t))v17)(v32, v33);
  }
  v34 = *(_QWORD *)(v0 + 1352);
  v35 = *(_QWORD *)(v0 + 1344);
  *(_QWORD *)(v0 + 1336) = v16;
  if (v34)
  {
    v36 = (v34 - 1) & v34;
    v37 = __clz(__rbit64(v34)) | (v35 << 6);
    v38 = *(_QWORD *)(v0 + 1328);
LABEL_17:
    v39 = *(_QWORD *)(v0 + 928);
    v40 = *(_QWORD *)(v0 + 920);
    v41 = *(char **)(v0 + 816);
    v42 = (_QWORD *)(*(_QWORD *)(v38 + 48) + 16 * v37);
    v43 = v42[1];
    *(_QWORD *)v41 = *v42;
    *((_QWORD *)v41 + 1) = v43;
    v44 = *(_QWORD *)(v38 + 56) + *(_QWORD *)(v39 + 72) * v37;
    v45 = sub_100037A5C(&qword_100261968);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(&v41[*(int *)(v45 + 48)], v44, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v41, 0, 1, v45);
    swift_bridgeObjectRetain(v43);
    goto LABEL_39;
  }
  v46 = v35 + 1;
  if (__OFADD__(v35, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  v47 = (unint64_t)((1 << *(_BYTE *)(v0 + 1524)) + 63) >> 6;
  if (v46 < v47)
  {
    v38 = *(_QWORD *)(v0 + 1328);
    v48 = v38 + 64;
    v49 = *(_QWORD *)(v38 + 64 + 8 * v46);
    if (v49)
    {
LABEL_21:
      v36 = (v49 - 1) & v49;
      v37 = __clz(__rbit64(v49)) + (v46 << 6);
      v35 = v46;
      goto LABEL_17;
    }
    v50 = v35 + 2;
    ++v35;
    if (v46 + 1 < v47)
    {
      v49 = *(_QWORD *)(v48 + 8 * v50);
      if (v49)
      {
LABEL_27:
        v46 = v50;
        goto LABEL_21;
      }
      v35 = v46 + 1;
      if (v46 + 2 < v47)
      {
        v49 = *(_QWORD *)(v48 + 8 * (v46 + 2));
        if (v49)
        {
          v46 += 2;
          goto LABEL_21;
        }
        v50 = v46 + 3;
        v35 = v46 + 2;
        if (v46 + 3 < v47)
        {
          v49 = *(_QWORD *)(v48 + 8 * v50);
          if (v49)
            goto LABEL_27;
          while (1)
          {
            v46 = v50 + 1;
            if (__OFADD__(v50, 1))
              break;
            if (v46 >= v47)
            {
              v35 = v47 - 1;
              goto LABEL_38;
            }
            v49 = *(_QWORD *)(v48 + 8 * v46);
            ++v50;
            if (v49)
              goto LABEL_21;
          }
LABEL_43:
          __break(1u);
          return result;
        }
      }
    }
  }
LABEL_38:
  v51 = *(_QWORD *)(v0 + 816);
  v52 = sub_100037A5C(&qword_100261968);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 1, 1, v52);
  v36 = 0;
LABEL_39:
  *(_QWORD *)(v0 + 1352) = v36;
  *(_QWORD *)(v0 + 1344) = v35;
  v53 = *(_QWORD *)(v0 + 824);
  sub_10000EF6C(*(_QWORD *)(v0 + 816), v53, &qword_100261960);
  v54 = sub_100037A5C(&qword_100261968);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v53, 1, v54) == 1)
  {
    v55 = *(_QWORD *)(v0 + 1208);
    v56 = *(_QWORD *)(v0 + 1096);
    v85 = *(_QWORD *)(v0 + 1088);
    v86 = *(_QWORD *)(v0 + 1080);
    v83 = *(_QWORD *)(v0 + 1072);
    v84 = *(_QWORD *)(v0 + 1064);
    v57 = *(_QWORD *)(v0 + 1048);
    v87 = *(_QWORD *)(v0 + 1056);
    v88 = *(_QWORD *)(v0 + 1040);
    v80 = *(_QWORD *)(v0 + 1032);
    v81 = *(_QWORD *)(v0 + 1144);
    v82 = *(_QWORD *)(v0 + 1024);
    v58 = *(_QWORD *)(v0 + 1008);
    v89 = *(_QWORD *)(v0 + 1016);
    v90 = *(_QWORD *)(v0 + 992);
    v91 = *(_QWORD *)(v0 + 984);
    v92 = *(_QWORD *)(v0 + 976);
    v93 = *(_QWORD *)(v0 + 968);
    v94 = *(_QWORD *)(v0 + 960);
    v95 = *(_QWORD *)(v0 + 952);
    v96 = *(_QWORD *)(v0 + 944);
    v98 = *(_QWORD *)(v0 + 936);
    v99 = *(_QWORD *)(v0 + 912);
    v100 = *(_QWORD *)(v0 + 904);
    v102 = *(_QWORD *)(v0 + 896);
    v104 = *(_QWORD *)(v0 + 888);
    v106 = *(_QWORD *)(v0 + 864);
    v108 = *(_QWORD *)(v0 + 856);
    v110 = *(_QWORD *)(v0 + 848);
    v112 = *(_QWORD *)(v0 + 824);
    v116 = *(_QWORD *)(v0 + 816);
    v119 = *(_QWORD *)(v0 + 808);
    v59 = *(_QWORD *)(v0 + 800);
    v60 = *(_QWORD *)(v0 + 792);
    v61 = *(_QWORD *)(v0 + 784);
    v62 = *(_QWORD *)(v0 + 768);
    swift_release(*(_QWORD *)(v0 + 1328));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v59, v62, v61);
    v63 = sub_10019BCE8((uint64_t)_swiftEmptyArrayStorage);
    FriendshipRequestResult.init(request:result:requestIds:)(v59, v114, v63);
    swift_release(v55);
    swift_release(v81);
    sub_100024990(v58, type metadata accessor for RespondToInviteEndpoint);
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v57, v82);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v56, v84);
    swift_task_dealloc(v56);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v57);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v58);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v116);
    swift_task_dealloc(v119);
    swift_task_dealloc(v59);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v113 = *(_DWORD *)(v0 + 1504);
    v64 = *(_QWORD *)(v0 + 1096);
    v65 = *(_QWORD *)(v0 + 1080);
    v66 = *(_QWORD *)(v0 + 1064);
    v109 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1224);
    v111 = *(_QWORD *)(v0 + 1048);
    v67 = *(_QWORD *)(v0 + 1040);
    v68 = *(_QWORD *)(v0 + 1032);
    v69 = *(_QWORD *)(v0 + 1024);
    v70 = *(_QWORD *)(v0 + 944);
    v71 = *(_QWORD *)(v0 + 928);
    v72 = *(_QWORD *)(v0 + 920);
    v73 = *(char **)(v0 + 824);
    v120 = *(_QWORD *)v73;
    *(_QWORD *)(v0 + 1360) = *(_QWORD *)v73;
    v74 = *((_QWORD *)v73 + 1);
    *(_QWORD *)(v0 + 1368) = v74;
    (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v70, &v73[*(int *)(v54 + 48)], v72);
    v109(v65, v64, v66);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v68 + 104))(v67, v113, v69);
    LOBYTE(v64) = static FriendshipResponseToInviteType.== infix(_:_:)(v111, v67);
    v75 = *(uint64_t (**)(uint64_t, uint64_t))(v68 + 8);
    *(_QWORD *)(v0 + 1376) = v75;
    v76 = v75(v67, v69);
    v77 = FriendshipRequest.callerHandle.getter(v76);
    FriendshipRequest.origin.getter(v77);
    v78 = unk_1002603A4;
    v117 = (char *)&dword_1002603A0 + dword_1002603A0;
    swift_bridgeObjectRetain(v74);
    v79 = (_QWORD *)swift_task_alloc(v78);
    *(_QWORD *)(v0 + 1384) = v79;
    *v79 = v0;
    v79[1] = sub_10019600C;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, BOOL, _QWORD, _QWORD))v117)(*(_QWORD *)(v0 + 1080), v120, v74, (v64 & 1) == 0, *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 808));
  }
}

uint64_t sub_10019701C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  swift_release(*(_QWORD *)(v0 + 1112));
  v1 = *(_QWORD *)(v0 + 1088);
  v2 = *(_QWORD *)(v0 + 1080);
  v3 = *(_QWORD *)(v0 + 1056);
  v4 = *(_QWORD *)(v0 + 1048);
  v5 = *(_QWORD *)(v0 + 1040);
  v6 = *(_QWORD *)(v0 + 1016);
  v7 = *(_QWORD *)(v0 + 1008);
  v8 = *(_QWORD *)(v0 + 992);
  v9 = *(_QWORD *)(v0 + 984);
  v11 = *(_QWORD *)(v0 + 976);
  v12 = *(_QWORD *)(v0 + 968);
  v13 = *(_QWORD *)(v0 + 960);
  v14 = *(_QWORD *)(v0 + 952);
  v15 = *(_QWORD *)(v0 + 944);
  v16 = *(_QWORD *)(v0 + 936);
  v17 = *(_QWORD *)(v0 + 912);
  v18 = *(_QWORD *)(v0 + 904);
  v19 = *(_QWORD *)(v0 + 896);
  v20 = *(_QWORD *)(v0 + 888);
  v21 = *(_QWORD *)(v0 + 864);
  v22 = *(_QWORD *)(v0 + 856);
  v23 = *(_QWORD *)(v0 + 848);
  v24 = *(_QWORD *)(v0 + 824);
  v25 = *(_QWORD *)(v0 + 816);
  v26 = *(_QWORD *)(v0 + 808);
  v27 = *(_QWORD *)(v0 + 800);
  swift_task_dealloc(*(_QWORD *)(v0 + 1096));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001971DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 1096);
  v2 = *(_QWORD *)(v0 + 1072);
  v3 = *(_QWORD *)(v0 + 1064);
  swift_release(*(_QWORD *)(v0 + 1144));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 1088);
  v5 = *(_QWORD *)(v0 + 1080);
  v6 = *(_QWORD *)(v0 + 1056);
  v7 = *(_QWORD *)(v0 + 1048);
  v8 = *(_QWORD *)(v0 + 1040);
  v9 = *(_QWORD *)(v0 + 1016);
  v10 = *(_QWORD *)(v0 + 1008);
  v11 = *(_QWORD *)(v0 + 992);
  v12 = *(_QWORD *)(v0 + 984);
  v14 = *(_QWORD *)(v0 + 976);
  v15 = *(_QWORD *)(v0 + 968);
  v16 = *(_QWORD *)(v0 + 960);
  v17 = *(_QWORD *)(v0 + 952);
  v18 = *(_QWORD *)(v0 + 944);
  v19 = *(_QWORD *)(v0 + 936);
  v20 = *(_QWORD *)(v0 + 912);
  v21 = *(_QWORD *)(v0 + 904);
  v22 = *(_QWORD *)(v0 + 896);
  v23 = *(_QWORD *)(v0 + 888);
  v24 = *(_QWORD *)(v0 + 864);
  v25 = *(_QWORD *)(v0 + 856);
  v26 = *(_QWORD *)(v0 + 848);
  v27 = *(_QWORD *)(v0 + 824);
  v28 = *(_QWORD *)(v0 + 816);
  v29 = *(_QWORD *)(v0 + 808);
  v30 = *(_QWORD *)(v0 + 800);
  swift_task_dealloc(*(_QWORD *)(v0 + 1096));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001973B8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 1408);
  v2 = *(_QWORD *)(v0 + 1400);
  v3 = *(_QWORD *)(v0 + 1392);
  v4 = *(_QWORD *)(v0 + 1328);
  v5 = *(_QWORD *)(v0 + 1144);
  v40 = *(_QWORD *)(v0 + 1096);
  v42 = *(void (**)(uint64_t, uint64_t))(v0 + 1376);
  v36 = *(_QWORD *)(v0 + 1072);
  v38 = *(_QWORD *)(v0 + 1064);
  v32 = *(_QWORD *)(v0 + 1024);
  v34 = *(_QWORD *)(v0 + 1048);
  v6 = *(_QWORD *)(v0 + 1008);
  v7 = *(_QWORD *)(v0 + 944);
  v8 = *(_QWORD *)(v0 + 928);
  v9 = *(_QWORD *)(v0 + 920);
  swift_release(*(_QWORD *)(v0 + 1208));
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_release(v4);
  sub_100024990(v6, type metadata accessor for RespondToInviteEndpoint);
  v42(v34, v32);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v40, v38);
  v10 = *(_QWORD *)(v0 + 1088);
  v11 = *(_QWORD *)(v0 + 1080);
  v12 = *(_QWORD *)(v0 + 1056);
  v13 = *(_QWORD *)(v0 + 1048);
  v14 = *(_QWORD *)(v0 + 1040);
  v15 = *(_QWORD *)(v0 + 1016);
  v16 = *(_QWORD *)(v0 + 1008);
  v17 = *(_QWORD *)(v0 + 992);
  v18 = *(_QWORD *)(v0 + 984);
  v20 = *(_QWORD *)(v0 + 976);
  v21 = *(_QWORD *)(v0 + 968);
  v22 = *(_QWORD *)(v0 + 960);
  v23 = *(_QWORD *)(v0 + 952);
  v24 = *(_QWORD *)(v0 + 944);
  v25 = *(_QWORD *)(v0 + 936);
  v26 = *(_QWORD *)(v0 + 912);
  v27 = *(_QWORD *)(v0 + 904);
  v28 = *(_QWORD *)(v0 + 896);
  v29 = *(_QWORD *)(v0 + 888);
  v30 = *(_QWORD *)(v0 + 864);
  v31 = *(_QWORD *)(v0 + 856);
  v33 = *(_QWORD *)(v0 + 848);
  v35 = *(_QWORD *)(v0 + 824);
  v37 = *(_QWORD *)(v0 + 816);
  v39 = *(_QWORD *)(v0 + 808);
  v41 = *(_QWORD *)(v0 + 800);
  swift_task_dealloc(*(_QWORD *)(v0 + 1096));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100197620()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 1408);
  v2 = *(_QWORD *)(v0 + 1400);
  v3 = *(_QWORD *)(v0 + 1392);
  v41 = *(void (**)(uint64_t, uint64_t))(v0 + 1376);
  v29 = *(_QWORD *)(v0 + 1328);
  v4 = *(_QWORD *)(v0 + 1208);
  v5 = *(_QWORD *)(v0 + 1144);
  v39 = *(_QWORD *)(v0 + 1096);
  v35 = *(_QWORD *)(v0 + 1072);
  v37 = *(_QWORD *)(v0 + 1064);
  v31 = *(_QWORD *)(v0 + 1024);
  v33 = *(_QWORD *)(v0 + 1048);
  v6 = *(_QWORD *)(v0 + 1008);
  v7 = *(_QWORD *)(v0 + 944);
  v8 = *(_QWORD *)(v0 + 928);
  v9 = *(_QWORD *)(v0 + 920);
  swift_release(*(_QWORD *)(v0 + 1448));
  swift_release(v4);
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_release(v29);
  sub_100024990(v6, type metadata accessor for RespondToInviteEndpoint);
  v41(v33, v31);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v39, v37);
  sub_10002BB90((_QWORD *)(v0 + 632));
  sub_10002BB90((_QWORD *)(v0 + 592));
  v10 = *(_QWORD *)(v0 + 1088);
  v11 = *(_QWORD *)(v0 + 1080);
  v12 = *(_QWORD *)(v0 + 1056);
  v13 = *(_QWORD *)(v0 + 1048);
  v14 = *(_QWORD *)(v0 + 1040);
  v15 = *(_QWORD *)(v0 + 1016);
  v16 = *(_QWORD *)(v0 + 1008);
  v17 = *(_QWORD *)(v0 + 992);
  v18 = *(_QWORD *)(v0 + 984);
  v20 = *(_QWORD *)(v0 + 976);
  v21 = *(_QWORD *)(v0 + 968);
  v22 = *(_QWORD *)(v0 + 960);
  v23 = *(_QWORD *)(v0 + 952);
  v24 = *(_QWORD *)(v0 + 944);
  v25 = *(_QWORD *)(v0 + 936);
  v26 = *(_QWORD *)(v0 + 912);
  v27 = *(_QWORD *)(v0 + 904);
  v28 = *(_QWORD *)(v0 + 896);
  v30 = *(_QWORD *)(v0 + 888);
  v32 = *(_QWORD *)(v0 + 864);
  v34 = *(_QWORD *)(v0 + 856);
  v36 = *(_QWORD *)(v0 + 848);
  v38 = *(_QWORD *)(v0 + 824);
  v40 = *(_QWORD *)(v0 + 816);
  v42 = *(_QWORD *)(v0 + 808);
  v43 = *(_QWORD *)(v0 + 800);
  swift_task_dealloc(*(_QWORD *)(v0 + 1096));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001978B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;

  v3[109] = v2;
  v3[108] = a2;
  v3[107] = a1;
  v4 = type metadata accessor for FriendshipRequest(0);
  v3[110] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[111] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[112] = swift_task_alloc(v6);
  v3[113] = swift_task_alloc(v6);
  v7 = type metadata accessor for URLComponents(0);
  v3[114] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[115] = v8;
  v3[116] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FriendshipEndpoint(0);
  v3[117] = v9;
  v3[118] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FriendshipRequestStatus(0);
  v3[119] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[120] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[121] = swift_task_alloc(v12);
  v3[122] = swift_task_alloc(v12);
  v3[123] = swift_task_alloc(v12);
  v3[124] = swift_task_alloc(v12);
  v13 = type metadata accessor for HandleType(0);
  v3[125] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[126] = v14;
  v3[127] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[128] = swift_task_alloc(v15);
  v3[129] = swift_task_alloc(v15);
  v16 = type metadata accessor for Handle(0);
  v3[130] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v3[131] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[132] = swift_task_alloc(v18);
  v3[133] = swift_task_alloc(v18);
  v3[134] = swift_task_alloc(v18);
  v3[135] = swift_task_alloc(v18);
  v3[136] = swift_task_alloc(v18);
  v3[137] = swift_task_alloc(v18);
  v3[138] = swift_task_alloc(v18);
  v3[139] = swift_task_alloc(v18);
  v19 = sub_100037A5C(&qword_100260580);
  v3[140] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Account(0);
  v3[141] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v3[142] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[143] = swift_task_alloc(v22);
  v3[144] = swift_task_alloc(v22);
  v3[145] = swift_task_alloc(v22);
  v23 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v3[146] = v23;
  *v23 = v3;
  v23[1] = sub_100197B24;
  return daemon.getter();
}

uint64_t sub_100197B24(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1168);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1176) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[148] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[149] = v7;
  v8 = type metadata accessor for AccountService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[150] = v9;
  v10 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_100197C1C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100197C1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1184);
  v5 = *(_QWORD **)v2;
  v5[151] = a1;
  v5[152] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10019A334, v5[109], 0);
  swift_release(v5[147]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002612E4);
  v5[153] = v7;
  *v7 = v5;
  v7[1] = sub_100197CCC;
  return sub_1000069E8(v5[140]);
}

uint64_t sub_100197CCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 872);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1224));
  return swift_task_switch(sub_100197D24, v1, 0);
}

uint64_t sub_100197D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 1136);
  v2 = *(_QWORD *)(v0 + 1128);
  v3 = *(_QWORD *)(v0 + 1120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_1000087A0(v3, &qword_100260580);
    if (qword_10025F8C0 != -1)
      swift_once(&qword_10025F8C0, sub_100098E4C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100037A9C(v4, (uint64_t)qword_10027AB38);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing primary account to stop sharing!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 1208);

    v10 = sub_100051194();
    v36 = swift_allocError(&type metadata for SettingsService.Error, v10, 0, 0);
    *v11 = 3;
    swift_willThrow(v36);
    swift_release(v9);
    v12 = *(_QWORD *)(v0 + 1152);
    v13 = *(_QWORD *)(v0 + 1144);
    v14 = *(_QWORD *)(v0 + 1120);
    v15 = *(_QWORD *)(v0 + 1112);
    v16 = *(_QWORD *)(v0 + 1104);
    v17 = *(_QWORD *)(v0 + 1096);
    v18 = *(_QWORD *)(v0 + 1088);
    v19 = *(_QWORD *)(v0 + 1080);
    v20 = *(_QWORD *)(v0 + 1072);
    v23 = *(_QWORD *)(v0 + 1064);
    v24 = *(_QWORD *)(v0 + 1056);
    v25 = *(_QWORD *)(v0 + 1032);
    v26 = *(_QWORD *)(v0 + 1024);
    v27 = *(_QWORD *)(v0 + 1016);
    v28 = *(_QWORD *)(v0 + 992);
    v29 = *(_QWORD *)(v0 + 984);
    v30 = *(_QWORD *)(v0 + 976);
    v31 = *(_QWORD *)(v0 + 968);
    v32 = *(_QWORD *)(v0 + 944);
    v33 = *(_QWORD *)(v0 + 928);
    v34 = *(_QWORD *)(v0 + 904);
    v35 = *(_QWORD *)(v0 + 896);
    swift_task_dealloc(*(_QWORD *)(v0 + 1160));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 1160), v3, v2);
    v22 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 1232) = v22;
    *v22 = v0;
    v22[1] = sub_100198014;
    return daemon.getter();
  }
}

uint64_t sub_100198014(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1232);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1240) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[156] = v6;
  v7 = type metadata accessor for DataManager(0);
  v8 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1001980C0;
  return ActorServiceDaemon.getService<A>()(v3[149], v7, v3[150], v8);
}

uint64_t sub_1001980C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1248);
  v3[157] = a1;
  v3[158] = v1;
  swift_task_dealloc(v4);
  v5 = v3[155];
  v6 = v3[109];
  swift_release(v5);
  if (v1)
    v7 = sub_10019A4BC;
  else
    v7 = sub_10019813C;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10019813C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t isUniquelyReferenced_nonNull_native;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  void (*v63)(uint64_t, _QWORD);
  Swift::String v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, char *, uint64_t);
  uint64_t v118;
  char *v119;
  uint64_t v120;
  _QWORD *v121;

  *(_QWORD *)(v1 + 824) = _swiftEmptyArrayStorage;
  v2 = FriendshipRequest.toHandles.getter(a1);
  *(_QWORD *)(v1 + 1272) = v2;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 + 1280) = v3;
  if (v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v1 + 1048);
    *(_DWORD *)(v1 + 1448) = *(_DWORD *)(v5 + 80);
    *(_QWORD *)(v1 + 1288) = *(_QWORD *)(v5 + 72);
    *(_QWORD *)(v1 + 1296) = *(_QWORD *)(v5 + 16);
    *(_DWORD *)(v1 + 1452) = enum case for HandleType.follower(_:);
    *(_DWORD *)(v1 + 1456) = enum case for HandleType.pendingOffer(_:);
    v6 = _swiftEmptyArrayStorage;
    do
    {
      *(_QWORD *)(v1 + 1312) = v4;
      *(_QWORD *)(v1 + 1304) = v6;
      v7 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v1 + 1296))(*(_QWORD *)(v1 + 1112), *(_QWORD *)(v1 + 1272)+ ((*(unsigned __int8 *)(v1 + 1448) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 1448))+ *(_QWORD *)(v1 + 1288) * v4, *(_QWORD *)(v1 + 1040));
      Handle.serverID.getter(v7);
      v9 = v8;
      swift_bridgeObjectRelease(v8);
      if (!v9)
      {
        v18 = *(unsigned int *)(v1 + 1452);
        v19 = *(_QWORD *)(v1 + 1016);
        v20 = *(_QWORD *)(v1 + 1000);
        v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 1008) + 104);
        *(_QWORD *)(v1 + 1320) = v21;
        v21(v19, v18, v20);
        v22 = (_QWORD *)swift_task_alloc(dword_100262DDC);
        *(_QWORD *)(v1 + 1328) = v22;
        *v22 = v1;
        v22[1] = sub_100198A9C;
        return sub_1000E7320(*(_QWORD *)(v1 + 1032), *(_QWORD *)(v1 + 1112), *(_QWORD *)(v1 + 1016), 0);
      }
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 1296))(*(_QWORD *)(v1 + 1104), *(_QWORD *)(v1 + 1112), *(_QWORD *)(v1 + 1040));
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = (_QWORD *)sub_100161120(0, v6[2] + 1, 1, (unint64_t)v6);
      v11 = v6[2];
      v10 = v6[3];
      if (v11 >= v10 >> 1)
        v6 = (_QWORD *)sub_100161120(v10 > 1, v11 + 1, 1, (unint64_t)v6);
      v12 = *(_QWORD *)(v1 + 1288);
      v13 = *(unsigned __int8 *)(v1 + 1448);
      v14 = *(_QWORD *)(v1 + 1112);
      v15 = *(_QWORD *)(v1 + 1104);
      v16 = *(_QWORD *)(v1 + 1048);
      v17 = *(_QWORD *)(v1 + 1040);
      v6[2] = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))((unint64_t)v6 + ((v13 + 32) & ~v13) + v12 * v11, v15, v17);
      *(_QWORD *)(v1 + 824) = v6;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v17);
      v4 = *(_QWORD *)(v1 + 1312) + 1;
    }
    while (v4 != *(_QWORD *)(v1 + 1280));
    v2 = *(_QWORD *)(v1 + 1272);
  }
  v24 = swift_bridgeObjectRelease(v2);
  v25 = FriendshipRequest.toHandles.getter(v24);
  v26 = sub_10019C028(v25, (uint64_t *)(v1 + 824));
  swift_bridgeObjectRelease(v25);
  v27 = *((_QWORD *)v26 + 2);
  if (v27)
  {
    v28 = *(_QWORD *)(v1 + 1048);
    v29 = *(_QWORD *)(v1 + 960);
    v102 = v26;
    v105 = v28;
    v30 = &v26[(*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)];
    v114 = *(_QWORD *)(v28 + 72);
    v117 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 16);
    v111 = enum case for FriendshipRequestError.missingServerId(_:);
    v108 = enum case for FriendshipRequestStatus.failure(_:);
    v31 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      v34 = *(_QWORD *)(v1 + 1064);
      v35 = *(_QWORD *)(v1 + 992);
      v36 = *(_QWORD *)(v1 + 984);
      v37 = *(_QWORD *)(v1 + 952);
      v117(v34, v30, *(_QWORD *)(v1 + 1040));
      v38 = type metadata accessor for FriendshipRequestError(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v35, v111, v38);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v35, v108, v37);
      v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
      v39(v36, v35, v37);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
      v121 = v31;
      v42 = sub_10001CBC8(v34);
      v43 = v31[2];
      v44 = (v41 & 1) == 0;
      v45 = v43 + v44;
      if (__OFADD__(v43, v44))
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        swift_once(&qword_10025F8C0, sub_100098E4C);
LABEL_31:
        v70 = type metadata accessor for Logger(0);
        v71 = sub_100037A9C(v70, (uint64_t)qword_10027AB38);
        v72 = Logger.logObject.getter(v71);
        v73 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v72, v73))
        {
          v74 = (uint8_t *)swift_slowAlloc(12, -1);
          v75 = swift_slowAlloc(32, -1);
          v121 = (_QWORD *)v75;
          *(_DWORD *)v74 = 136446210;
          *(_QWORD *)(v1 + 848) = sub_10002BA84(0xD00000000000001CLL, 0x8000000100201700, (uint64_t *)&v121);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 848, v1 + 856, v74 + 4, v74 + 12);
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "%{public}s no handle with serverID!", v74, 0xCu);
          swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v75, -1, -1);
          swift_slowDealloc(v74, -1, -1);
        }

        v76 = *(_QWORD *)(v1 + 1256);
        v77 = *(_QWORD *)(v1 + 1208);
        v78 = *(_QWORD *)(v1 + 1160);
        v79 = *(_QWORD *)(v1 + 1136);
        v80 = *(_QWORD *)(v1 + 1128);
        v81 = *(_QWORD *)(v1 + 896);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 888) + 16))(v81, *(_QWORD *)(v1 + 864), *(_QWORD *)(v1 + 880));
        swift_bridgeObjectRetain(v31);
        v82 = sub_10019BCE8((uint64_t)_swiftEmptyArrayStorage);
        FriendshipRequestResult.init(request:result:requestIds:)(v81, v31, v82);
        swift_release(v76);
        swift_release(v77);
        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
        swift_bridgeObjectRelease(v31);
        v83 = *(_QWORD *)(v1 + 1160);
        v84 = *(_QWORD *)(v1 + 1152);
        v85 = *(_QWORD *)(v1 + 1144);
        v86 = *(_QWORD *)(v1 + 1120);
        v87 = *(_QWORD *)(v1 + 1112);
        v88 = *(_QWORD *)(v1 + 1104);
        v89 = *(_QWORD *)(v1 + 1096);
        v90 = *(_QWORD *)(v1 + 1088);
        v91 = *(_QWORD *)(v1 + 1080);
        v92 = *(_QWORD *)(v1 + 1072);
        v93 = *(_QWORD *)(v1 + 1064);
        v94 = *(_QWORD *)(v1 + 1056);
        v95 = *(_QWORD *)(v1 + 1032);
        v96 = *(_QWORD *)(v1 + 1024);
        v97 = *(_QWORD *)(v1 + 1016);
        v99 = *(_QWORD *)(v1 + 992);
        v101 = *(_QWORD *)(v1 + 984);
        v104 = *(_QWORD *)(v1 + 976);
        v107 = *(_QWORD *)(v1 + 968);
        v110 = *(_QWORD *)(v1 + 944);
        v113 = *(_QWORD *)(v1 + 928);
        v116 = *(_QWORD *)(v1 + 904);
        v120 = *(_QWORD *)(v1 + 896);
        swift_bridgeObjectRelease(*(_QWORD *)(v1 + 824));
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v90);
        swift_task_dealloc(v91);
        swift_task_dealloc(v92);
        swift_task_dealloc(v93);
        swift_task_dealloc(v94);
        swift_task_dealloc(v95);
        swift_task_dealloc(v96);
        swift_task_dealloc(v97);
        swift_task_dealloc(v99);
        swift_task_dealloc(v101);
        swift_task_dealloc(v104);
        swift_task_dealloc(v107);
        swift_task_dealloc(v110);
        swift_task_dealloc(v113);
        swift_task_dealloc(v116);
        swift_task_dealloc(v120);
        return (*(uint64_t (**)(void))(v1 + 8))();
      }
      v46 = v41;
      if (v31[3] >= v45)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v41 & 1) != 0)
            goto LABEL_13;
        }
        else
        {
          sub_1000F6410();
          v31 = v121;
          if ((v46 & 1) != 0)
            goto LABEL_13;
        }
      }
      else
      {
        v47 = *(_QWORD *)(v1 + 1064);
        sub_1001614A0(v45, isUniquelyReferenced_nonNull_native);
        v31 = v121;
        v48 = sub_10001CBC8(v47);
        if ((v46 & 1) != (v49 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v1 + 1040));
        v42 = v48;
        if ((v46 & 1) != 0)
        {
LABEL_13:
          (*(void (**)(unint64_t, _QWORD, _QWORD))(v29 + 40))(v31[7] + *(_QWORD *)(v29 + 72) * v42, *(_QWORD *)(v1 + 984), *(_QWORD *)(v1 + 952));
          goto LABEL_14;
        }
      }
      v50 = *(char **)(v1 + 1064);
      v51 = *(_QWORD *)(v1 + 1040);
      v52 = *(_QWORD *)(v1 + 984);
      v53 = *(_QWORD *)(v1 + 952);
      v31[(v42 >> 6) + 8] |= 1 << v42;
      v117(v31[6] + v42 * v114, v50, v51);
      v39(v31[7] + *(_QWORD *)(v29 + 72) * v42, v52, v53);
      v54 = v31[2];
      v55 = __OFADD__(v54, 1);
      v56 = v54 + 1;
      if (v55)
        goto LABEL_36;
      v31[2] = v56;
LABEL_14:
      v32 = *(_QWORD *)(v1 + 1064);
      v33 = *(_QWORD *)(v1 + 1040);
      swift_bridgeObjectRelease(0x8000000000000000);
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v32, v33);
      v30 += v114;
      if (!--v27)
      {
        swift_bridgeObjectRelease(v102);
        goto LABEL_28;
      }
    }
  }
  swift_bridgeObjectRelease(v26);
  v31 = _swiftEmptyDictionarySingleton;
LABEL_28:
  *(_QWORD *)(v1 + 1368) = v31;
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 824) + 16))
  {
    if (qword_10025F8C0 != -1)
      goto LABEL_37;
    goto LABEL_31;
  }
  v57 = *(_QWORD *)(v1 + 1160);
  v58 = *(_QWORD *)(v1 + 1152);
  v112 = *(_QWORD *)(v1 + 1144);
  v59 = *(_QWORD *)(v1 + 1136);
  v60 = *(_QWORD *)(v1 + 1128);
  v61 = *(_QWORD *)(v1 + 928);
  v98 = *(_QWORD *)(v1 + 920);
  v100 = *(_QWORD *)(v1 + 912);
  v103 = *(_QWORD *)(v1 + 944);
  v118 = *(_QWORD *)(v1 + 904);
  v115 = *(_QWORD *)(v1 + 880);
  v106 = *(_QWORD *)(v1 + 888);
  v109 = *(_QWORD *)(v1 + 864);
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
  v62(v58, v57, v60);
  sub_10003CD40(v58);
  v63 = (void (*)(uint64_t, _QWORD))URLComponents.path.modify(v1 + 792);
  v64._countAndFlagsBits = 0x6566664F706F7473;
  v64._object = (void *)0xE900000000000072;
  String.append(_:)(v64);
  v63(v1 + 792, 0);
  v65 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
  *(_QWORD *)(v1 + 1376) = v65;
  v65(v58, v60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 32))(v103, v61, v100);
  v62(v112, v57, v60);
  v66 = *(_QWORD *)(v1 + 824);
  v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 16);
  *(_QWORD *)(v1 + 1384) = v67;
  v67(v118, v109, v115);
  v68 = unk_100263B84;
  v119 = (char *)&dword_100263B80 + dword_100263B80;
  swift_bridgeObjectRetain(v66);
  v69 = (_QWORD *)swift_task_alloc(v68);
  *(_QWORD *)(v1 + 1392) = v69;
  *v69 = v1;
  v69[1] = sub_100199778;
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v119)(*(_QWORD *)(v1 + 1144), v66, *(_QWORD *)(v1 + 904));
}

uint64_t sub_100198A9C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 1016);
  v3 = *(_QWORD *)(*v0 + 1008);
  v4 = *(_QWORD *)(*v0 + 1000);
  v5 = *(_QWORD *)(*v0 + 872);
  swift_task_dealloc(*(_QWORD *)(*v0 + 1328));
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v1 + 1336) = v6;
  v6(v2, v4);
  return swift_task_switch(sub_100198B20, v5, 0);
}

uint64_t sub_100198B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  unint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = *(_QWORD *)(v0 + 1048);
  v2 = *(_QWORD *)(v0 + 1040);
  v3 = *(_QWORD *)(v0 + 1032);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  *(_QWORD *)(v0 + 1344) = v4;
  if (v4(v3, 1, v2) == 1)
  {
    sub_1000087A0(v3, &qword_1002650A0);
    v5 = *(_QWORD *)(v0 + 1304);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 1304);
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1296);
    v8 = *(_QWORD *)(v0 + 1096);
    v9 = *(_QWORD *)(v0 + 1088);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
    v10(v8, v3, v2);
    v7(v9, v8, v2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v5 = *(_QWORD *)(v0 + 1304);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v5 = sub_100161120(0, *(_QWORD *)(v5 + 16) + 1, 1, *(_QWORD *)(v0 + 1304));
    v13 = *(_QWORD *)(v5 + 16);
    v12 = *(_QWORD *)(v5 + 24);
    if (v13 >= v12 >> 1)
      v5 = sub_100161120(v12 > 1, v13 + 1, 1, v5);
    v14 = *(_QWORD *)(v0 + 1288);
    v15 = *(unsigned __int8 *)(v0 + 1448);
    v16 = *(_QWORD *)(v0 + 1096);
    v17 = *(_QWORD *)(v0 + 1088);
    v18 = *(_QWORD *)(v0 + 1048);
    v19 = *(_QWORD *)(v0 + 1040);
    *(_QWORD *)(v5 + 16) = v13 + 1;
    v10(v5 + ((v15 + 32) & ~v15) + v14 * v13, v17, v19);
    *(_QWORD *)(v0 + 824) = v5;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v19);
  }
  *(_QWORD *)(v0 + 1352) = v5;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1320))(*(_QWORD *)(v0 + 1016), *(unsigned int *)(v0 + 1456), *(_QWORD *)(v0 + 1000));
  v20 = (_QWORD *)swift_task_alloc(dword_100262DDC);
  *(_QWORD *)(v0 + 1360) = v20;
  *v20 = v0;
  v20[1] = sub_100198CCC;
  return sub_1000E7320(*(_QWORD *)(v0 + 1024), *(_QWORD *)(v0 + 1112), *(_QWORD *)(v0 + 1016), 0);
}

uint64_t sub_100198CCC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 1336);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1016);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 1000);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 872);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1360));
  v1(v2, v3);
  return swift_task_switch(sub_100198D44, v4, 0);
}

uint64_t sub_100198D44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  void (*v69)(uint64_t, _QWORD);
  Swift::String v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  _QWORD *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, char *, uint64_t);
  uint64_t v130;
  char *v131;
  uint64_t v132;
  _QWORD *v133;

  v1 = *(_QWORD *)(v0 + 1040);
  v2 = *(_QWORD *)(v0 + 1024);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1344))(v2, 1, v1) != 1)
  {
    v4 = *(_QWORD *)(v0 + 1352);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1296);
    v6 = *(_QWORD *)(v0 + 1080);
    v7 = *(_QWORD *)(v0 + 1072);
    v8 = *(_QWORD *)(*(_QWORD *)(v0 + 1048) + 32);
    ((void (*)(uint64_t, uint64_t, uint64_t))v8)(v6, v2, v1);
    v5(v7, v6, v1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    v3 = *(_QWORD **)(v0 + 1352);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_42;
    goto LABEL_4;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1048) + 8))(*(_QWORD *)(v0 + 1112), v1);
  sub_1000087A0(v2, &qword_1002650A0);
  v3 = *(_QWORD **)(v0 + 1352);
LABEL_7:
  while (2)
  {
    v20 = *(_QWORD *)(v0 + 1312) + 1;
    if (v20 == *(_QWORD *)(v0 + 1280))
    {
      v32 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1272));
      v33 = FriendshipRequest.toHandles.getter(v32);
      v34 = sub_10019C028(v33, (uint64_t *)(v0 + 824));
      swift_bridgeObjectRelease(v33);
      v35 = *((_QWORD *)v34 + 2);
      if (!v35)
      {
        swift_bridgeObjectRelease(v34);
        v3 = _swiftEmptyDictionarySingleton;
LABEL_31:
        *(_QWORD *)(v0 + 1368) = v3;
        if (*(_QWORD *)(*(_QWORD *)(v0 + 824) + 16))
        {
          v63 = *(_QWORD *)(v0 + 1160);
          v64 = *(_QWORD *)(v0 + 1152);
          v124 = *(_QWORD *)(v0 + 1144);
          v65 = *(_QWORD *)(v0 + 1136);
          v66 = *(_QWORD *)(v0 + 1128);
          v67 = *(_QWORD *)(v0 + 928);
          v110 = *(_QWORD *)(v0 + 920);
          v112 = *(_QWORD *)(v0 + 912);
          v115 = *(_QWORD *)(v0 + 944);
          v130 = *(_QWORD *)(v0 + 904);
          v127 = *(_QWORD *)(v0 + 880);
          v118 = *(_QWORD *)(v0 + 888);
          v121 = *(_QWORD *)(v0 + 864);
          v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16);
          v68(v64, v63, v66);
          sub_10003CD40(v64);
          v69 = (void (*)(uint64_t, _QWORD))URLComponents.path.modify(v0 + 792);
          v70._countAndFlagsBits = 0x6566664F706F7473;
          v70._object = (void *)0xE900000000000072;
          String.append(_:)(v70);
          v69(v0 + 792, 0);
          v71 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
          *(_QWORD *)(v0 + 1376) = v71;
          v71(v64, v66);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 32))(v115, v67, v112);
          v68(v124, v63, v66);
          v72 = *(_QWORD *)(v0 + 824);
          v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v118 + 16);
          *(_QWORD *)(v0 + 1384) = v73;
          v73(v130, v121, v127);
          v74 = unk_100263B84;
          v131 = (char *)&dword_100263B80 + dword_100263B80;
          swift_bridgeObjectRetain(v72);
          v75 = (_QWORD *)swift_task_alloc(v74);
          *(_QWORD *)(v0 + 1392) = v75;
          *v75 = v0;
          v75[1] = sub_100199778;
          return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v131)(*(_QWORD *)(v0 + 1144), v72, *(_QWORD *)(v0 + 904));
        }
        else
        {
          if (qword_10025F8C0 != -1)
            swift_once(&qword_10025F8C0, sub_100098E4C);
          v82 = type metadata accessor for Logger(0);
          v83 = sub_100037A9C(v82, (uint64_t)qword_10027AB38);
          v84 = Logger.logObject.getter(v83);
          v85 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v84, v85))
          {
            v86 = (uint8_t *)swift_slowAlloc(12, -1);
            v87 = swift_slowAlloc(32, -1);
            v133 = (_QWORD *)v87;
            *(_DWORD *)v86 = 136446210;
            *(_QWORD *)(v0 + 848) = sub_10002BA84(0xD00000000000001CLL, 0x8000000100201700, (uint64_t *)&v133);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v86 + 4, v86 + 12);
            _os_log_impl((void *)&_mh_execute_header, v84, v85, "%{public}s no handle with serverID!", v86, 0xCu);
            swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v87, -1, -1);
            swift_slowDealloc(v86, -1, -1);
          }

          v88 = *(_QWORD *)(v0 + 1256);
          v89 = *(_QWORD *)(v0 + 1208);
          v90 = *(_QWORD *)(v0 + 1160);
          v91 = *(_QWORD *)(v0 + 1136);
          v92 = *(_QWORD *)(v0 + 1128);
          v93 = *(_QWORD *)(v0 + 896);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 888) + 16))(v93, *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 880));
          swift_bridgeObjectRetain(v3);
          v94 = sub_10019BCE8((uint64_t)_swiftEmptyArrayStorage);
          FriendshipRequestResult.init(request:result:requestIds:)(v93, v3, v94);
          swift_release(v88);
          swift_release(v89);
          (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
          swift_bridgeObjectRelease(v3);
          v95 = *(_QWORD *)(v0 + 1160);
          v96 = *(_QWORD *)(v0 + 1152);
          v97 = *(_QWORD *)(v0 + 1144);
          v98 = *(_QWORD *)(v0 + 1120);
          v99 = *(_QWORD *)(v0 + 1112);
          v100 = *(_QWORD *)(v0 + 1104);
          v101 = *(_QWORD *)(v0 + 1096);
          v102 = *(_QWORD *)(v0 + 1088);
          v103 = *(_QWORD *)(v0 + 1080);
          v104 = *(_QWORD *)(v0 + 1072);
          v105 = *(_QWORD *)(v0 + 1064);
          v106 = *(_QWORD *)(v0 + 1056);
          v107 = *(_QWORD *)(v0 + 1032);
          v108 = *(_QWORD *)(v0 + 1024);
          v109 = *(_QWORD *)(v0 + 1016);
          v111 = *(_QWORD *)(v0 + 992);
          v113 = *(_QWORD *)(v0 + 984);
          v116 = *(_QWORD *)(v0 + 976);
          v119 = *(_QWORD *)(v0 + 968);
          v122 = *(_QWORD *)(v0 + 944);
          v125 = *(_QWORD *)(v0 + 928);
          v128 = *(_QWORD *)(v0 + 904);
          v132 = *(_QWORD *)(v0 + 896);
          swift_bridgeObjectRelease(*(_QWORD *)(v0 + 824));
          swift_task_dealloc(v95);
          swift_task_dealloc(v96);
          swift_task_dealloc(v97);
          swift_task_dealloc(v98);
          swift_task_dealloc(v99);
          swift_task_dealloc(v100);
          swift_task_dealloc(v101);
          swift_task_dealloc(v102);
          swift_task_dealloc(v103);
          swift_task_dealloc(v104);
          swift_task_dealloc(v105);
          swift_task_dealloc(v106);
          swift_task_dealloc(v107);
          swift_task_dealloc(v108);
          swift_task_dealloc(v109);
          swift_task_dealloc(v111);
          swift_task_dealloc(v113);
          swift_task_dealloc(v116);
          swift_task_dealloc(v119);
          swift_task_dealloc(v122);
          swift_task_dealloc(v125);
          swift_task_dealloc(v128);
          swift_task_dealloc(v132);
          return (*(uint64_t (**)(void))(v0 + 8))();
        }
      }
      v36 = *(_QWORD *)(v0 + 1048);
      v8 = *(_QWORD *)(v0 + 960);
      v114 = v34;
      v117 = v36;
      v37 = &v34[(*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80)];
      v126 = *(_QWORD *)(v36 + 72);
      v129 = *(void (**)(uint64_t, char *, uint64_t))(v36 + 16);
      v123 = enum case for FriendshipRequestError.missingServerId(_:);
      v120 = enum case for FriendshipRequestStatus.failure(_:);
      v3 = _swiftEmptyDictionarySingleton;
      while (1)
      {
        v40 = *(_QWORD *)(v0 + 1064);
        v41 = *(_QWORD *)(v0 + 992);
        v42 = *(_QWORD *)(v0 + 984);
        v43 = *(_QWORD *)(v0 + 952);
        v129(v40, v37, *(_QWORD *)(v0 + 1040));
        v44 = type metadata accessor for FriendshipRequestError(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v41, v123, v44);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v41, v120, v43);
        v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
        v45(v42, v41, v43);
        v46 = swift_isUniquelyReferenced_nonNull_native(v3);
        v133 = v3;
        v48 = sub_10001CBC8(v40);
        v49 = v3[2];
        v50 = (v47 & 1) == 0;
        v51 = v49 + v50;
        if (__OFADD__(v49, v50))
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          v3 = (_QWORD *)sub_100161120(0, v3[2] + 1, 1, (unint64_t)v3);
LABEL_4:
          v11 = v3[2];
          v10 = v3[3];
          if (v11 >= v10 >> 1)
            v3 = (_QWORD *)sub_100161120(v10 > 1, v11 + 1, 1, (unint64_t)v3);
          v12 = *(_QWORD *)(v0 + 1288);
          v13 = *(unsigned __int8 *)(v0 + 1448);
          v14 = *(_QWORD *)(v0 + 1112);
          v15 = *(_QWORD *)(v0 + 1080);
          v16 = *(_QWORD *)(v0 + 1072);
          v17 = *(_QWORD *)(v0 + 1048);
          v18 = *(_QWORD *)(v0 + 1040);
          v3[2] = v11 + 1;
          ((void (*)(char *, uint64_t, uint64_t))v8)((char *)v3 + ((v13 + 32) & ~v13) + v12 * v11, v16, v18);
          *(_QWORD *)(v0 + 824) = v3;
          v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
          v19(v15, v18);
          v19(v14, v18);
          goto LABEL_7;
        }
        v52 = v47;
        if (v3[3] >= v51)
        {
          if ((v46 & 1) != 0)
          {
            if ((v47 & 1) != 0)
              goto LABEL_16;
          }
          else
          {
            sub_1000F6410();
            v3 = v133;
            if ((v52 & 1) != 0)
              goto LABEL_16;
          }
        }
        else
        {
          v53 = *(_QWORD *)(v0 + 1064);
          sub_1001614A0(v51, v46);
          v3 = v133;
          v54 = sub_10001CBC8(v53);
          if ((v52 & 1) != (v55 & 1))
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 1040));
          v48 = v54;
          if ((v52 & 1) != 0)
          {
LABEL_16:
            (*(void (**)(unint64_t, _QWORD, _QWORD))(v8 + 40))(v3[7] + *(_QWORD *)(v8 + 72) * v48, *(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 952));
            goto LABEL_17;
          }
        }
        v56 = *(char **)(v0 + 1064);
        v57 = *(_QWORD *)(v0 + 1040);
        v58 = *(_QWORD *)(v0 + 984);
        v59 = *(_QWORD *)(v0 + 952);
        v3[(v48 >> 6) + 8] |= 1 << v48;
        v129(v3[6] + v48 * v126, v56, v57);
        v45(v3[7] + *(_QWORD *)(v8 + 72) * v48, v58, v59);
        v60 = v3[2];
        v61 = __OFADD__(v60, 1);
        v62 = v60 + 1;
        if (v61)
          goto LABEL_41;
        v3[2] = v62;
LABEL_17:
        v38 = *(_QWORD *)(v0 + 1064);
        v39 = *(_QWORD *)(v0 + 1040);
        swift_bridgeObjectRelease(0x8000000000000000);
        (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v38, v39);
        v37 += v126;
        if (!--v35)
        {
          swift_bridgeObjectRelease(v114);
          goto LABEL_31;
        }
      }
    }
    *(_QWORD *)(v0 + 1312) = v20;
    *(_QWORD *)(v0 + 1304) = v3;
    v21 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v0 + 1296))(*(_QWORD *)(v0 + 1112), *(_QWORD *)(v0 + 1272)+ ((*(unsigned __int8 *)(v0 + 1448) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1448))+ *(_QWORD *)(v0 + 1288) * v20, *(_QWORD *)(v0 + 1040));
    Handle.serverID.getter(v21);
    v23 = v22;
    swift_bridgeObjectRelease(v22);
    if (v23)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1296))(*(_QWORD *)(v0 + 1104), *(_QWORD *)(v0 + 1112), *(_QWORD *)(v0 + 1040));
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        v3 = (_QWORD *)sub_100161120(0, v3[2] + 1, 1, (unint64_t)v3);
      v25 = v3[2];
      v24 = v3[3];
      if (v25 >= v24 >> 1)
        v3 = (_QWORD *)sub_100161120(v24 > 1, v25 + 1, 1, (unint64_t)v3);
      v26 = *(_QWORD *)(v0 + 1288);
      v27 = *(unsigned __int8 *)(v0 + 1448);
      v28 = *(_QWORD *)(v0 + 1112);
      v29 = *(_QWORD *)(v0 + 1104);
      v30 = *(_QWORD *)(v0 + 1048);
      v31 = *(_QWORD *)(v0 + 1040);
      v3[2] = v25 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v30 + 32))((unint64_t)v3 + ((v27 + 32) & ~v27) + v26 * v25, v29, v31);
      *(_QWORD *)(v0 + 824) = v3;
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v31);
      continue;
    }
    break;
  }
  v77 = *(unsigned int *)(v0 + 1452);
  v78 = *(_QWORD *)(v0 + 1016);
  v79 = *(_QWORD *)(v0 + 1000);
  v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1008) + 104);
  *(_QWORD *)(v0 + 1320) = v80;
  v80(v78, v77, v79);
  v81 = (_QWORD *)swift_task_alloc(dword_100262DDC);
  *(_QWORD *)(v0 + 1328) = v81;
  *v81 = v0;
  v81[1] = sub_100198A9C;
  return sub_1000E7320(*(_QWORD *)(v0 + 1032), *(_QWORD *)(v0 + 1112), *(_QWORD *)(v0 + 1016), 0);
}

uint64_t sub_100199778(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v7 = *v5;
  v8 = *(_QWORD *)(*v5 + 1392);
  *(_QWORD *)(v7 + 1400) = a1;
  *(_QWORD *)(v7 + 1408) = a2;
  *(_QWORD *)(v7 + 1416) = a3;
  *(_QWORD *)(v7 + 1424) = v4;
  swift_task_dealloc(v8);
  v9 = *(_QWORD *)(v7 + 872);
  if (v4)
  {
    v10 = sub_100199A3C;
  }
  else
  {
    *(_BYTE *)(v7 + 1460) = a4 & 1;
    v10 = sub_100199804;
  }
  return swift_task_switch(v10, v9, 0);
}

uint64_t sub_100199804()
{
  uint64_t v0;
  char v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_BYTE *)(v0 + 1460);
  v2 = *(_QWORD *)(v0 + 1416);
  v3 = *(_QWORD *)(v0 + 1408);
  v4 = *(_QWORD *)(v0 + 1400);
  v5 = *(_QWORD *)(v0 + 944);
  *(_QWORD *)(v0 + 776) = *(_QWORD *)(v0 + 936);
  *(_QWORD *)(v0 + 784) = sub_100004EA8(&qword_100266290, type metadata accessor for FriendshipEndpoint, (uint64_t)&unk_1001F9FC4);
  v6 = sub_10003276C((_QWORD *)(v0 + 752));
  sub_100025C70(v5, (uint64_t)v6, type metadata accessor for FriendshipEndpoint);
  *(_QWORD *)(v0 + 736) = &type metadata for FriendshipStopOfferRequest;
  *(_QWORD *)(v0 + 744) = sub_100107FAC();
  v7 = swift_allocObject(&unk_100257080, 41, 7);
  *(_QWORD *)(v0 + 712) = v7;
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v3;
  *(_QWORD *)(v7 + 32) = v2;
  *(_BYTE *)(v7 + 40) = v1;
  swift_bridgeObjectRetain(v4);
  v8 = sub_10001F728(v3, v2);
  v9 = Account.dsid.getter(v8);
  v11 = v10;
  v12 = Account.appToken.getter();
  v14 = v13;
  *(_QWORD *)(v0 + 696) = type metadata accessor for BasicCredential(0);
  *(_QWORD *)(v0 + 704) = &protocol witness table for BasicCredential;
  sub_10003276C((_QWORD *)(v0 + 672));
  BasicCredential.init(username:password:)(v9, v11, v12, v14);
  v15 = (_QWORD *)swift_task_alloc(dword_100263274);
  *(_QWORD *)(v0 + 1432) = v15;
  *v15 = v0;
  v15[1] = sub_100199988;
  return sub_1000DE6C4(v0 + 16, v0 + 752, v0 + 712, v0 + 672);
}

uint64_t sub_100199988()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)v1 + 672;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 1432);
  *(_QWORD *)(*(_QWORD *)v1 + 1440) = v0;
  swift_task_dealloc(v4);
  if (v0)
  {
    v5 = v2[109];
    sub_1000087A0((uint64_t)(v2 + 84), &qword_100260598);
    v6 = sub_10019A660;
    v7 = v5;
  }
  else
  {
    v8 = v2 + 94;
    v9 = v2 + 89;
    v10 = v2[109];
    sub_1000087A0(v3, &qword_100260598);
    sub_10002BB90(v9);
    sub_10002BB90(v8);
    v6 = sub_100199C10;
    v7 = v10;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100199A3C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1376);
  v2 = *(_QWORD *)(v0 + 1368);
  v3 = *(_QWORD *)(v0 + 1208);
  v4 = *(_QWORD *)(v0 + 1160);
  v5 = *(_QWORD *)(v0 + 1128);
  v6 = *(_QWORD *)(v0 + 944);
  swift_release(*(_QWORD *)(v0 + 1256));
  swift_release(v3);
  sub_100024990(v6, type metadata accessor for FriendshipEndpoint);
  v1(v4, v5);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 824));
  v7 = *(_QWORD *)(v0 + 1152);
  v8 = *(_QWORD *)(v0 + 1144);
  v9 = *(_QWORD *)(v0 + 1120);
  v10 = *(_QWORD *)(v0 + 1112);
  v11 = *(_QWORD *)(v0 + 1104);
  v12 = *(_QWORD *)(v0 + 1096);
  v13 = *(_QWORD *)(v0 + 1088);
  v14 = *(_QWORD *)(v0 + 1080);
  v15 = *(_QWORD *)(v0 + 1072);
  v17 = *(_QWORD *)(v0 + 1064);
  v18 = *(_QWORD *)(v0 + 1056);
  v19 = *(_QWORD *)(v0 + 1032);
  v20 = *(_QWORD *)(v0 + 1024);
  v21 = *(_QWORD *)(v0 + 1016);
  v22 = *(_QWORD *)(v0 + 992);
  v23 = *(_QWORD *)(v0 + 984);
  v24 = *(_QWORD *)(v0 + 976);
  v25 = *(_QWORD *)(v0 + 968);
  v26 = *(_QWORD *)(v0 + 944);
  v27 = *(_QWORD *)(v0 + 928);
  v28 = *(_QWORD *)(v0 + 904);
  v29 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1160));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100199C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(unint64_t, uint64_t, uint64_t);
  uint64_t isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(unint64_t, _QWORD, _QWORD);
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  _QWORD *v92;

  v1 = *(_QWORD *)(v0 + 824);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v6 = *(_QWORD **)(v0 + 1368);
LABEL_29:
    v4 = v0 + 16;
    if (qword_10025F980 != -1)
      goto LABEL_37;
    goto LABEL_30;
  }
  v3 = *(_QWORD *)(v0 + 1048);
  v4 = *(_QWORD *)(v0 + 960);
  v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  sub_10000EF6C(v0 + 192, v0 + 592, &qword_100261940);
  v85 = *(_QWORD *)(v3 + 72);
  v80 = v3;
  v88 = *(void (**)(unint64_t, _QWORD, _QWORD))(v3 + 16);
  v70 = enum case for FriendshipRequestStatus.pending(_:);
  v72 = enum case for FriendshipRequestStatus.success(_:);
  v74 = enum case for FriendshipRequestError.commandFailed(_:);
  v78 = enum case for FriendshipRequestStatus.failure(_:);
  v76 = enum case for FriendshipRequestError.invalidResponse(_:);
  v6 = *(_QWORD **)(v0 + 1368);
  v68 = v1;
  v7 = swift_bridgeObjectRetain(v1);
  while (1)
  {
    ((void (*)(_QWORD, uint64_t, _QWORD, __n128))v88)(*(_QWORD *)(v0 + 1056), v5, *(_QWORD *)(v0 + 1040), v7);
    sub_10000EF6C(v0 + 592, v0 + 632, &qword_100261940);
    if (*(_QWORD *)(v0 + 632) == 1)
    {
      v10 = *(_QWORD *)(v0 + 976);
      v11 = type metadata accessor for FriendshipRequestError(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v10, v76, v11);
LABEL_13:
      v16 = v78;
      goto LABEL_14;
    }
    v12 = *(unsigned __int8 *)(v0 + 648);
    if ((v12 - 3) < 8 || v12 == 0)
    {
      v14 = *(_QWORD *)(v0 + 976);
      v15 = type metadata accessor for FriendshipRequestError(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v14, v74, v15);
      goto LABEL_13;
    }
    v16 = v72;
    if (v12 != 1)
      v16 = v70;
LABEL_14:
    v17 = *(_QWORD *)(v0 + 1056);
    v18 = *(_QWORD *)(v0 + 976);
    v19 = *(_QWORD *)(v0 + 968);
    v20 = *(_QWORD *)(v0 + 952);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v18, v16, v20);
    v21 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
    v21(v19, v18, v20);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v92 = v6;
    v24 = sub_10001CBC8(v17);
    v25 = v6[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      break;
    v28 = v23;
    if (v6[3] >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v23 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_1000F6410();
        v6 = v92;
        if ((v28 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      v29 = *(_QWORD *)(v0 + 1056);
      sub_1001614A0(v27, isUniquelyReferenced_nonNull_native);
      v6 = v92;
      v30 = sub_10001CBC8(v29);
      if ((v28 & 1) != (v31 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 1040));
      v24 = v30;
      if ((v28 & 1) != 0)
      {
LABEL_3:
        (*(void (**)(unint64_t, _QWORD, _QWORD))(v4 + 40))(v6[7] + *(_QWORD *)(v4 + 72) * v24, *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 952));
        goto LABEL_4;
      }
    }
    v32 = *(_QWORD *)(v0 + 1056);
    v33 = *(_QWORD *)(v0 + 1040);
    v34 = *(_QWORD *)(v0 + 968);
    v35 = *(_QWORD *)(v0 + 952);
    v6[(v24 >> 6) + 8] |= 1 << v24;
    v88(v6[6] + v24 * v85, v32, v33);
    v21(v6[7] + *(_QWORD *)(v4 + 72) * v24, v34, v35);
    v36 = v6[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_36;
    v6[2] = v38;
LABEL_4:
    v8 = *(_QWORD *)(v0 + 1056);
    v9 = *(_QWORD *)(v0 + 1040);
    swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v8, v9);
    v5 += v85;
    if (!--v2)
    {
      swift_bridgeObjectRelease(v68);
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  swift_once(&qword_10025F980, sub_10013818C);
LABEL_30:
  v39 = type metadata accessor for Logger(0);
  sub_100037A9C(v39, (uint64_t)qword_10027ADA8);
  v40 = sub_10002B630(v4);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc(22, -1);
    v89 = swift_slowAlloc(64, -1);
    v92 = (_QWORD *)v89;
    *(_DWORD *)v43 = 136446466;
    *(_QWORD *)(v0 + 832) = sub_10002BA84(0xD00000000000001CLL, 0x8000000100201700, (uint64_t *)&v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 832, v0 + 840, v43 + 4, v43 + 12);
    *(_WORD *)(v43 + 12) = 2080;
    sub_10002B630(v4);
    v44 = sub_1000282A0();
    v46 = v45;
    sub_10002B3D4(v4);
    *(_QWORD *)(v0 + 840) = sub_10002BA84(v44, v46, (uint64_t *)&v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 840, v0 + 848, v43 + 14, v43 + 22);
    swift_bridgeObjectRelease(v46);
    sub_10002B3D4(v4);
    sub_10002B3D4(v4);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "CommandManager %{public}s\nresponse: %s", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {
    sub_10002B3D4(v4);
    sub_10002B3D4(v4);
  }

  v47 = *(_QWORD *)(v0 + 1416);
  v48 = *(_QWORD *)(v0 + 1408);
  v49 = *(_QWORD *)(v0 + 1400);
  v90 = *(void (**)(uint64_t, uint64_t))(v0 + 1376);
  v50 = *(_QWORD *)(v0 + 1256);
  v51 = *(_QWORD *)(v0 + 1208);
  v83 = *(_QWORD *)(v0 + 1128);
  v86 = *(_QWORD *)(v0 + 1160);
  v52 = *(_QWORD *)(v0 + 944);
  v53 = *(_QWORD *)(v0 + 896);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 1384))(v53, *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 880));
  swift_bridgeObjectRetain(v6);
  v54 = sub_10019BCE8((uint64_t)_swiftEmptyArrayStorage);
  FriendshipRequestResult.init(request:result:requestIds:)(v53, v6, v54);
  swift_release(v50);
  swift_release(v51);
  swift_bridgeObjectRelease(v49);
  sub_100037AF8(v48, v47);
  sub_100024990(v52, type metadata accessor for FriendshipEndpoint);
  v90(v86, v83);
  swift_bridgeObjectRelease(v6);
  v55 = *(_QWORD *)(v0 + 1160);
  v56 = *(_QWORD *)(v0 + 1152);
  v57 = *(_QWORD *)(v0 + 1144);
  v58 = *(_QWORD *)(v0 + 1120);
  v59 = *(_QWORD *)(v0 + 1112);
  v60 = *(_QWORD *)(v0 + 1104);
  v61 = *(_QWORD *)(v0 + 1096);
  v62 = *(_QWORD *)(v0 + 1088);
  v63 = *(_QWORD *)(v0 + 1080);
  v65 = *(_QWORD *)(v0 + 1072);
  v66 = *(_QWORD *)(v0 + 1064);
  v67 = *(_QWORD *)(v0 + 1056);
  v69 = *(_QWORD *)(v0 + 1032);
  v71 = *(_QWORD *)(v0 + 1024);
  v73 = *(_QWORD *)(v0 + 1016);
  v75 = *(_QWORD *)(v0 + 992);
  v77 = *(_QWORD *)(v0 + 984);
  v79 = *(_QWORD *)(v0 + 976);
  v81 = *(_QWORD *)(v0 + 968);
  v82 = *(_QWORD *)(v0 + 944);
  v84 = *(_QWORD *)(v0 + 928);
  v87 = *(_QWORD *)(v0 + 904);
  v91 = *(_QWORD *)(v0 + 896);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 824));
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v69);
  swift_task_dealloc(v71);
  swift_task_dealloc(v73);
  swift_task_dealloc(v75);
  swift_task_dealloc(v77);
  swift_task_dealloc(v79);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  swift_task_dealloc(v87);
  swift_task_dealloc(v91);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019A334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  swift_release(*(_QWORD *)(v0 + 1176));
  v1 = *(_QWORD *)(v0 + 1152);
  v2 = *(_QWORD *)(v0 + 1144);
  v3 = *(_QWORD *)(v0 + 1120);
  v4 = *(_QWORD *)(v0 + 1112);
  v5 = *(_QWORD *)(v0 + 1104);
  v6 = *(_QWORD *)(v0 + 1096);
  v7 = *(_QWORD *)(v0 + 1088);
  v8 = *(_QWORD *)(v0 + 1080);
  v9 = *(_QWORD *)(v0 + 1072);
  v11 = *(_QWORD *)(v0 + 1064);
  v12 = *(_QWORD *)(v0 + 1056);
  v13 = *(_QWORD *)(v0 + 1032);
  v14 = *(_QWORD *)(v0 + 1024);
  v15 = *(_QWORD *)(v0 + 1016);
  v16 = *(_QWORD *)(v0 + 992);
  v17 = *(_QWORD *)(v0 + 984);
  v18 = *(_QWORD *)(v0 + 976);
  v19 = *(_QWORD *)(v0 + 968);
  v20 = *(_QWORD *)(v0 + 944);
  v21 = *(_QWORD *)(v0 + 928);
  v22 = *(_QWORD *)(v0 + 904);
  v23 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019A4BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 1160);
  v2 = *(_QWORD *)(v0 + 1136);
  v3 = *(_QWORD *)(v0 + 1128);
  swift_release(*(_QWORD *)(v0 + 1208));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 1152);
  v5 = *(_QWORD *)(v0 + 1144);
  v6 = *(_QWORD *)(v0 + 1120);
  v7 = *(_QWORD *)(v0 + 1112);
  v8 = *(_QWORD *)(v0 + 1104);
  v9 = *(_QWORD *)(v0 + 1096);
  v10 = *(_QWORD *)(v0 + 1088);
  v11 = *(_QWORD *)(v0 + 1080);
  v12 = *(_QWORD *)(v0 + 1072);
  v14 = *(_QWORD *)(v0 + 1064);
  v15 = *(_QWORD *)(v0 + 1056);
  v16 = *(_QWORD *)(v0 + 1032);
  v17 = *(_QWORD *)(v0 + 1024);
  v18 = *(_QWORD *)(v0 + 1016);
  v19 = *(_QWORD *)(v0 + 992);
  v20 = *(_QWORD *)(v0 + 984);
  v21 = *(_QWORD *)(v0 + 976);
  v22 = *(_QWORD *)(v0 + 968);
  v23 = *(_QWORD *)(v0 + 944);
  v24 = *(_QWORD *)(v0 + 928);
  v25 = *(_QWORD *)(v0 + 904);
  v26 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1160));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019A660()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 1416);
  v2 = *(_QWORD *)(v0 + 1408);
  v3 = *(_QWORD *)(v0 + 1400);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 1376);
  v32 = *(_QWORD *)(v0 + 1368);
  v5 = *(_QWORD *)(v0 + 1208);
  v6 = *(_QWORD *)(v0 + 1160);
  v7 = *(_QWORD *)(v0 + 1128);
  v8 = *(_QWORD *)(v0 + 944);
  swift_release(*(_QWORD *)(v0 + 1256));
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v8, type metadata accessor for FriendshipEndpoint);
  v4(v6, v7);
  sub_10002BB90((_QWORD *)(v0 + 712));
  sub_10002BB90((_QWORD *)(v0 + 752));
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 824));
  v9 = *(_QWORD *)(v0 + 1152);
  v10 = *(_QWORD *)(v0 + 1144);
  v11 = *(_QWORD *)(v0 + 1120);
  v12 = *(_QWORD *)(v0 + 1112);
  v13 = *(_QWORD *)(v0 + 1104);
  v14 = *(_QWORD *)(v0 + 1096);
  v15 = *(_QWORD *)(v0 + 1088);
  v16 = *(_QWORD *)(v0 + 1080);
  v17 = *(_QWORD *)(v0 + 1072);
  v19 = *(_QWORD *)(v0 + 1064);
  v20 = *(_QWORD *)(v0 + 1056);
  v21 = *(_QWORD *)(v0 + 1032);
  v22 = *(_QWORD *)(v0 + 1024);
  v23 = *(_QWORD *)(v0 + 1016);
  v24 = *(_QWORD *)(v0 + 992);
  v25 = *(_QWORD *)(v0 + 984);
  v26 = *(_QWORD *)(v0 + 976);
  v27 = *(_QWORD *)(v0 + 968);
  v28 = *(_QWORD *)(v0 + 944);
  v29 = *(_QWORD *)(v0 + 928);
  v30 = *(_QWORD *)(v0 + 904);
  v31 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1160));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019A870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v3[105] = v2;
  v3[104] = a2;
  v3[103] = a1;
  v4 = type metadata accessor for URLComponents(0);
  v3[106] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[107] = v5;
  v3[108] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FriendshipEndpoint(0);
  v3[109] = v6;
  v3[110] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100260580);
  v3[111] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Account(0);
  v3[112] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[113] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[114] = swift_task_alloc(v10);
  v3[115] = swift_task_alloc(v10);
  v3[116] = swift_task_alloc(v10);
  v11 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v3[117] = v11;
  *v11 = v3;
  v11[1] = sub_10019A978;
  return daemon.getter();
}

uint64_t sub_10019A978(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 936);
  v5 = *v1;
  *(_QWORD *)(*v1 + 944) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[119] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[120] = v7;
  v8 = type metadata accessor for AccountService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[121] = v9;
  v10 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_10019AA70;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10019AA70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 952);
  v5 = *(_QWORD **)v2;
  v5[122] = a1;
  v5[123] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10019B810, v5[105], 0);
  swift_release(v5[118]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002612E4);
  v5[124] = v7;
  *v7 = v5;
  v7[1] = sub_10019AB20;
  return sub_1000069E8(v5[111]);
}

uint64_t sub_10019AB20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 840);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 992));
  return swift_task_switch(sub_10019AB78, v1, 0);
}

uint64_t sub_10019AB78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  void (*v23)(uint64_t, _QWORD);
  Swift::String v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 904);
  v2 = *(_QWORD *)(v0 + 896);
  v3 = *(_QWORD *)(v0 + 888);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_1000087A0(v3, &qword_100260580);
    if (qword_10025F8C8 != -1)
      swift_once(&qword_10025F8C8, sub_1000A27C4);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100037A9C(v4, (uint64_t)qword_10027AB78);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing primary account to stop sharing!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 976);

    v10 = sub_100051194();
    v11 = swift_allocError(&type metadata for SettingsService.Error, v10, 0, 0);
    *v12 = 3;
    swift_willThrow(v11);
    swift_release(v9);
    v13 = *(_QWORD *)(v0 + 920);
    v14 = *(_QWORD *)(v0 + 912);
    v15 = *(_QWORD *)(v0 + 888);
    v16 = *(_QWORD *)(v0 + 880);
    v17 = *(_QWORD *)(v0 + 864);
    swift_task_dealloc(*(_QWORD *)(v0 + 928));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 928);
    v20 = *(_QWORD *)(v0 + 920);
    v30 = *(_QWORD *)(v0 + 880);
    v31 = *(_QWORD *)(v0 + 912);
    v21 = *(_QWORD *)(v0 + 864);
    v28 = *(_QWORD *)(v0 + 856);
    v29 = *(_QWORD *)(v0 + 848);
    v33 = *(_QWORD *)(v0 + 832);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v19, v3, v2);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    v22(v20, v19, v2);
    sub_10003CD40(v20);
    v23 = (void (*)(uint64_t, _QWORD))URLComponents.path.modify(v0 + 712);
    v24._countAndFlagsBits = 0x74726F706D69;
    v24._object = (void *)0xE600000000000000;
    String.append(_:)(v24);
    v23(v0 + 712, 0);
    v25 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    *(_QWORD *)(v0 + 1000) = v25;
    v25(v20, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v30, v21, v29);
    v22(v31, v19, v2);
    v26 = unk_100263A5C;
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100263A58 + dword_100263A58);
    swift_bridgeObjectRetain(v33);
    v27 = (_QWORD *)swift_task_alloc(v26);
    *(_QWORD *)(v0 + 1008) = v27;
    *v27 = v0;
    v27[1] = sub_10019AE64;
    return v32(*(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 824), *(_QWORD *)(v0 + 832));
  }
}

uint64_t sub_10019AE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 1008);
  v6 = *(_QWORD **)v4;
  v6[127] = a1;
  v6[128] = a2;
  v6[129] = a3;
  v6[130] = v3;
  swift_task_dealloc(v5);
  if (v3)
    return swift_task_switch(sub_10019B02C, v6[105], 0);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v6[131] = v8;
  *v8 = v6;
  v8[1] = sub_10019AF04;
  return daemon.getter();
}

uint64_t sub_10019AF04(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1048);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1056) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[133] = v6;
  v7 = type metadata accessor for DataManager(0);
  v8 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10019AFB0;
  return ActorServiceDaemon.getService<A>()(v3[120], v7, v3[121], v8);
}

uint64_t sub_10019AFB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1064);
  v3[134] = a1;
  v3[135] = v1;
  swift_task_dealloc(v4);
  v5 = v3[132];
  v6 = v3[105];
  swift_release(v5);
  if (v1)
    v7 = sub_10019B898;
  else
    v7 = sub_10019B0E0;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10019B02C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1000);
  v2 = *(_QWORD *)(v0 + 928);
  v3 = *(_QWORD *)(v0 + 896);
  v4 = *(_QWORD *)(v0 + 880);
  swift_release(*(_QWORD *)(v0 + 976));
  sub_100024990(v4, type metadata accessor for FriendshipEndpoint);
  v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 920);
  v6 = *(_QWORD *)(v0 + 912);
  v7 = *(_QWORD *)(v0 + 888);
  v8 = *(_QWORD *)(v0 + 880);
  v9 = *(_QWORD *)(v0 + 864);
  swift_task_dealloc(*(_QWORD *)(v0 + 928));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019B0E0()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[129];
  v2 = v0[128];
  v3 = v0[127];
  v4 = v0[110];
  v0[77] = v0[109];
  v0[78] = sub_100004EA8(&qword_100266290, type metadata accessor for FriendshipEndpoint, (uint64_t)&unk_1001F9FC4);
  v5 = sub_10003276C(v0 + 74);
  sub_100025C70(v4, (uint64_t)v5, type metadata accessor for FriendshipEndpoint);
  v0[82] = &type metadata for FriendshipImportRequest;
  v0[83] = sub_100103B6C();
  v0[79] = v3;
  v0[80] = v2;
  v0[81] = v1;
  swift_bridgeObjectRetain(v3);
  v6 = sub_10001F728(v2, v1);
  v7 = Account.dsid.getter(v6);
  v9 = v8;
  v10 = Account.appToken.getter();
  v12 = v11;
  v0[87] = type metadata accessor for BasicCredential(0);
  v0[88] = &protocol witness table for BasicCredential;
  sub_10003276C(v0 + 84);
  BasicCredential.init(username:password:)(v7, v9, v10, v12);
  v13 = (_QWORD *)swift_task_alloc(dword_100263274);
  v0[136] = v13;
  *v13 = v0;
  v13[1] = sub_10019B24C;
  return sub_1000DE6C4((uint64_t)(v0 + 2), (uint64_t)(v0 + 74), (uint64_t)(v0 + 79), (uint64_t)(v0 + 84));
}

uint64_t sub_10019B24C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)v1 + 672;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 1088);
  *(_QWORD *)(*(_QWORD *)v1 + 1096) = v0;
  swift_task_dealloc(v4);
  if (v0)
  {
    v5 = v2[105];
    sub_1000087A0((uint64_t)(v2 + 84), &qword_100260598);
    v6 = sub_10019B974;
    v7 = v5;
  }
  else
  {
    v8 = v2 + 79;
    v9 = v2 + 74;
    v10 = v2[105];
    sub_1000087A0(v3, &qword_100260598);
    sub_10002BB90(v8);
    sub_10002BB90(v9);
    v6 = sub_10019B300;
    v7 = v10;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_10019B300()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  NSObject *loga;
  os_log_t log;
  uint64_t v55;

  if (qword_10025F980 != -1)
    swift_once(&qword_10025F980, sub_10013818C);
  v1 = *(_QWORD *)(v0 + 1032);
  v2 = *(_QWORD *)(v0 + 1024);
  v3 = *(_QWORD *)(v0 + 1016);
  v4 = type metadata accessor for Logger(0);
  sub_100037A9C(v4, (uint64_t)qword_10027ADA8);
  swift_bridgeObjectRetain(v3);
  sub_10001F728(v2, v1);
  sub_10002B630(v0 + 16);
  swift_bridgeObjectRetain(v3);
  sub_10001F728(v2, v1);
  v5 = sub_10002B630(v0 + 16);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 1032);
  v10 = *(_QWORD *)(v0 + 1024);
  v11 = *(_QWORD *)(v0 + 1016);
  if (v8)
  {
    loga = v6;
    v12 = swift_slowAlloc(32, -1);
    v52 = swift_slowAlloc(96, -1);
    v55 = v52;
    *(_DWORD *)v12 = 136446722;
    *(_QWORD *)(v0 + 800) = sub_10002BA84(0xD000000000000014, 0x8000000100201760, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 800, v0 + 808, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2082;
    *(_QWORD *)(v0 + 744) = v11;
    *(_QWORD *)(v0 + 752) = v10;
    *(_QWORD *)(v0 + 760) = v9;
    v13 = sub_100103A84();
    v14 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for FriendshipImportRequest, v13);
    v16 = v15;
    *(_QWORD *)(v0 + 808) = sub_10002BA84(v14, v15, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 808, v0 + 816, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v11);
    sub_100037AF8(v10, v9);
    swift_bridgeObjectRelease(v11);
    sub_100037AF8(v10, v9);
    *(_WORD *)(v12 + 22) = 2080;
    sub_10002B630(v0 + 16);
    v17 = sub_1000282A0();
    v19 = v18;
    sub_10002B3D4(v0 + 16);
    *(_QWORD *)(v0 + 816) = sub_10002BA84(v17, v19, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 816, v0 + 824, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v19);
    sub_10002B3D4(v0 + 16);
    sub_10002B3D4(v0 + 16);
    v6 = loga;
    _os_log_impl((void *)&_mh_execute_header, loga, v7, "CommandManager %{public}s\nrequest: %{public}s\nresponse: %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v52, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1016));
    sub_100037AF8(v10, v9);
    swift_bridgeObjectRelease(v11);
    sub_100037AF8(v10, v9);
    sub_10002B3D4(v0 + 16);
    sub_10002B3D4(v0 + 16);
  }

  v20 = *(_QWORD *)(v0 + 192);
  if (v20 == 1)
  {
    v21 = *(_QWORD *)(v0 + 1032);
    v22 = *(_QWORD *)(v0 + 1024);
    v23 = *(_QWORD *)(v0 + 1016);
    v24 = *(_QWORD *)(v0 + 976);
    swift_release(*(_QWORD *)(v0 + 1072));
    swift_release(v24);
    swift_bridgeObjectRelease(v23);
    sub_100037AF8(v22, v21);
    sub_10002B3D4(v0 + 16);
LABEL_12:
    log = 0;
    v38 = 0;
    goto LABEL_15;
  }
  v26 = *(_QWORD *)(v0 + 216);
  v25 = *(_QWORD *)(v0 + 224);
  v27 = *(_QWORD *)(v0 + 200);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v27);
  sub_10002B3D4(v0 + 16);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v27);
  if (!v25)
  {
    v34 = *(_QWORD *)(v0 + 1032);
    v35 = *(_QWORD *)(v0 + 1024);
    v36 = *(_QWORD *)(v0 + 1016);
    v37 = *(_QWORD *)(v0 + 976);
    swift_release(*(_QWORD *)(v0 + 1072));
    swift_release(v37);
    swift_bridgeObjectRelease(v36);
    sub_100037AF8(v35, v34);
    goto LABEL_12;
  }
  *(_QWORD *)(v0 + 784) = v26;
  *(_QWORD *)(v0 + 792) = v25;
  *(_QWORD *)(v0 + 768) = 47;
  *(_QWORD *)(v0 + 776) = 0xE100000000000000;
  v28 = sub_1000394E4();
  v29 = StringProtocol.components<A>(separatedBy:)(v0 + 768, &type metadata for String, &type metadata for String, v28, v28);
  swift_bridgeObjectRelease(v25);
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    v31 = v29 + 16 * v30;
    v32 = *(NSObject **)(v31 + 16);
    v33 = *(_QWORD *)(v31 + 24);
    swift_bridgeObjectRetain(v33);
  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  log = v32;
  v39 = *(_QWORD *)(v0 + 1072);
  v40 = *(_QWORD *)(v0 + 1032);
  v41 = *(_QWORD *)(v0 + 1024);
  v42 = *(_QWORD *)(v0 + 976);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1016));
  sub_100037AF8(v41, v40);
  swift_release(v42);
  swift_bridgeObjectRelease(v29);
  swift_release(v39);
  v38 = v33;
LABEL_15:
  v43 = *(void (**)(uint64_t, uint64_t))(v0 + 1000);
  v44 = *(_QWORD *)(v0 + 928);
  v45 = *(_QWORD *)(v0 + 920);
  v46 = *(_QWORD *)(v0 + 912);
  v47 = *(_QWORD *)(v0 + 896);
  v48 = *(_QWORD *)(v0 + 888);
  v49 = *(_QWORD *)(v0 + 880);
  v50 = *(_QWORD *)(v0 + 864);
  sub_100024990(v49, type metadata accessor for FriendshipEndpoint);
  v43(v44, v47);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(os_log_t, uint64_t))(v0 + 8))(log, v38);
}

uint64_t sub_10019B810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 944));
  v1 = *(_QWORD *)(v0 + 920);
  v2 = *(_QWORD *)(v0 + 912);
  v3 = *(_QWORD *)(v0 + 888);
  v4 = *(_QWORD *)(v0 + 880);
  v5 = *(_QWORD *)(v0 + 864);
  swift_task_dealloc(*(_QWORD *)(v0 + 928));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019B898()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 1032);
  v2 = *(_QWORD *)(v0 + 1024);
  v3 = *(_QWORD *)(v0 + 1016);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 1000);
  v5 = *(_QWORD *)(v0 + 928);
  v6 = *(_QWORD *)(v0 + 896);
  v7 = *(_QWORD *)(v0 + 880);
  swift_release(*(_QWORD *)(v0 + 976));
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v7, type metadata accessor for FriendshipEndpoint);
  v4(v5, v6);
  v8 = *(_QWORD *)(v0 + 920);
  v9 = *(_QWORD *)(v0 + 912);
  v10 = *(_QWORD *)(v0 + 888);
  v11 = *(_QWORD *)(v0 + 880);
  v12 = *(_QWORD *)(v0 + 864);
  swift_task_dealloc(*(_QWORD *)(v0 + 928));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019B974()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 1032);
  v2 = *(_QWORD *)(v0 + 1024);
  v3 = *(_QWORD *)(v0 + 1016);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 1000);
  v5 = *(_QWORD *)(v0 + 976);
  v6 = *(_QWORD *)(v0 + 928);
  v7 = *(_QWORD *)(v0 + 896);
  v8 = *(_QWORD *)(v0 + 880);
  swift_release(*(_QWORD *)(v0 + 1072));
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v8, type metadata accessor for FriendshipEndpoint);
  v4(v6, v7);
  sub_10002BB90((_QWORD *)(v0 + 632));
  sub_10002BB90((_QWORD *)(v0 + 592));
  v9 = *(_QWORD *)(v0 + 920);
  v10 = *(_QWORD *)(v0 + 912);
  v11 = *(_QWORD *)(v0 + 888);
  v12 = *(_QWORD *)(v0 + 880);
  v13 = *(_QWORD *)(v0 + 864);
  swift_task_dealloc(*(_QWORD *)(v0 + 928));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019BA80(int a1, int a2, int a3, uint64_t a4, uint64_t a5, void *__src)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v6[219] = a5;
  v6[218] = a4;
  memcpy(v6 + 2, __src, 0x240uLL);
  v8 = type metadata accessor for Date(0);
  v6[220] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[221] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[222] = swift_task_alloc(v10);
  v6[223] = swift_task_alloc(v10);
  v11 = sub_100037A5C((uint64_t *)&unk_100262930);
  v6[224] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10019BB2C, a4, 0);
}

uint64_t sub_10019BB2C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  _QWORD *v12;

  v2 = v1[224];
  v3 = v1[221];
  v4 = v1[220];
  v5 = FriendshipRequest.toHandles.getter(a1);
  v1[225] = v5;
  FriendshipRequest.endDate.getter(v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v4) == 1)
  {
    v6 = 2592000.0;
  }
  else
  {
    v7 = v1[223];
    v8 = v1[222];
    v9 = v1[221];
    v10 = v1[220];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 32))(v7, v1[224], v10);
    static Date.trustedNow.getter(v8);
    v6 = Date.timeIntervalSince(_:)(v8);
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v11(v8, v10);
    v11(v7, v10);
  }
  memcpy(v1 + 146, v1 + 2, 0x240uLL);
  nullsub_1(v1 + 146);
  sub_10000EF6C((uint64_t)(v1 + 146), (uint64_t)(v1 + 74), &qword_100261938);
  v12 = (_QWORD *)swift_task_alloc(dword_100261934);
  v1[226] = v12;
  *v12 = v1;
  v12[1] = sub_10019BC68;
  return sub_100082F78(v5, (uint64_t)(v1 + 74), v6);
}

uint64_t sub_10019BC68()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *(_QWORD *)(*v0 + 1800);
  v2 = *(_QWORD *)(*v0 + 1792);
  v3 = *(_QWORD *)(*v0 + 1784);
  v4 = *(_QWORD *)(*v0 + 1776);
  v6 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1808));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

unint64_t sub_10019BCE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_100037A5C(&qword_100266298);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_100037A5C(&qword_1002662A0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10019C6CC(v13, (uint64_t)v5);
    result = sub_10019BE7C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for Handle(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = (_QWORD *)(v8[7] + 16 * v17);
    v21 = *((_QWORD *)v10 + 1);
    *v20 = *(_QWORD *)v10;
    v20[1] = v21;
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10019BE7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for Handle(0);
  v6 = sub_100004EA8(&qword_1002605F8, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10019BEE8(a1, v7);
}

unint64_t sub_10019BEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for Handle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100004EA8(&qword_1002605F0, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

char *sub_10019C028(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, unint64_t, uint64_t);
  char *v45;

  v39 = a2;
  v3 = type metadata accessor for Handle(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v32 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  result = (char *)_swiftEmptyArrayStorage;
  v45 = (char *)_swiftEmptyArrayStorage;
  v38 = *(_QWORD *)(a1 + 16);
  if (!v38)
    return result;
  v14 = 0;
  v15 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v16 = *(_QWORD *)(v4 + 72);
  v37 = a1 + v15;
  v17 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  v43 = v16;
  v44 = v17;
  v41 = v15;
  v42 = (char *)&v32 - v11;
  v33 = v16 + v15;
  v40 = v4;
  v35 = v7;
  v17(v12, a1 + v15, v3);
  while (1)
  {
    v18 = *v39;
    v19 = *(_QWORD *)(*v39 + 16);
    if (!v19)
      goto LABEL_16;
    v44(v10, v18 + v41, v3);
    v20 = sub_100004EA8(&qword_1002605F0, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    swift_bridgeObjectRetain(v18);
    v21 = v18;
    v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v12, v3, v20);
    v23 = *(void (**)(char *, uint64_t))(v4 + 8);
    v23(v10, v3);
    if ((v22 & 1) == 0)
      break;
    swift_bridgeObjectRelease(v21);
    v7 = v35;
LABEL_4:
    v23(v12, v3);
LABEL_5:
    v4 = v40;
    if (++v14 == v38)
      return v45;
    v44(v12, v37 + v43 * v14, v3);
  }
  v36 = v21;
  if (v19 == 1)
  {
    swift_bridgeObjectRelease(v36);
    v4 = v40;
    v7 = v35;
LABEL_16:
    v28 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v28(v7, v12, v3);
    v29 = v45;
    if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
    {
      sub_100018EBC(0, *((_QWORD *)v29 + 2) + 1, 1);
      v29 = v45;
    }
    v31 = *((_QWORD *)v29 + 2);
    v30 = *((_QWORD *)v29 + 3);
    if (v31 >= v30 >> 1)
    {
      sub_100018EBC(v30 > 1, v31 + 1, 1);
      v29 = v45;
    }
    *((_QWORD *)v29 + 2) = v31 + 1;
    v28(&v29[v41 + v31 * v43], v7, v3);
    v45 = v29;
    v12 = v42;
    goto LABEL_5;
  }
  v34 = v14;
  v24 = v36 + v33;
  v25 = 1;
  while (1)
  {
    result = (char *)((uint64_t (*)(char *, uint64_t, uint64_t))v44)(v10, v24, v3);
    v26 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v42, v3, v20);
    v23(v10, v3);
    if ((v27 & 1) != 0)
    {
      swift_bridgeObjectRelease(v36);
      v14 = v34;
      v7 = v35;
      v12 = v42;
      goto LABEL_4;
    }
    ++v25;
    v24 += v43;
    if (v26 == v19)
    {
      swift_bridgeObjectRelease(v36);
      v4 = v40;
      v14 = v34;
      v7 = v35;
      v12 = v42;
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

void sub_10019C36C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE v29[12];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v33 = sub_100037A5C(&qword_1002662B0);
  __chkstk_darwin(v33);
  v6 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Handle(0);
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  __chkstk_darwin(v7);
  v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for FriendshipRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v14 = type metadata accessor for Logger(0);
  sub_100037A9C(v14, (uint64_t)qword_10027AB38);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v34 + 16))(v9, a1, v35);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(32, -1);
    v32 = v2;
    v20 = v19;
    v31 = swift_slowAlloc(64, -1);
    v38 = v31;
    *(_DWORD *)v20 = 136446723;
    v30 = v18;
    FriendshipRequest.requestType.getter();
    v21 = String.init<A>(describing:)(v6, v33);
    v23 = v22;
    v36 = sub_10002BA84(v21, v22, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    *(_WORD *)(v20 + 12) = 2160;
    v36 = 1752392040;
    v24 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2081;
    v25 = Handle.identifier.getter(v24);
    v27 = v26;
    v36 = sub_10002BA84(v25, v26, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v9, v35);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v30, "sendFriendshipOffer type: %{public}s\nto handle: %{private,mask.hash}s", (uint8_t *)v20, 0x20u);
    v28 = v31;
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v9, v35);
  }

}

uint64_t sub_10019C690()
{
  _QWORD *v0;
  unint64_t v1;

  swift_bridgeObjectRelease(v0[2]);
  v1 = v0[4];
  if (v1 >> 60 != 15)
    sub_100037AB4(v0[3], v1);
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10019C6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_100266298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10019C714()
{
  unint64_t result;

  result = qword_1002662B8;
  if (!qword_1002662B8)
  {
    result = swift_getWitnessTable(&unk_1001F49F4, &type metadata for CommandManagerError);
    atomic_store(result, &qword_1002662B8);
  }
  return result;
}

uint64_t sub_10019C758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for FriendshipRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v6 = (_QWORD *)(v0 + v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 96));
  v7 = *(_QWORD *)(v0 + v5 + 112);
  if (v7)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6[16]);
  }
  swift_bridgeObjectRelease(v6[17]);
  swift_bridgeObjectRelease(v6[18]);
  swift_bridgeObjectRelease(v6[19]);
  swift_bridgeObjectRelease(v6[20]);
  swift_bridgeObjectRelease(v6[21]);
  v8 = v6[22];
  if (v8 != 1)
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v6[23]);
    swift_bridgeObjectRelease(v6[26]);
  }
  swift_bridgeObjectRelease(v6[27]);
  swift_bridgeObjectRelease(v6[28]);
  if (v6[35])
  {
    swift_bridgeObjectRelease(v6[32]);
    swift_bridgeObjectRelease(v6[35]);
    swift_bridgeObjectRelease(v6[47]);
    swift_bridgeObjectRelease(v6[49]);
  }
  swift_bridgeObjectRelease(v6[68]);
  swift_bridgeObjectRelease(v6[69]);
  swift_bridgeObjectRelease(v6[70]);
  swift_bridgeObjectRelease(v6[71]);
  return swift_deallocObject(v0, v5 + 576, v3 | 7);
}

uint64_t sub_10019C8C8(int a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for FriendshipRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)swift_task_alloc(dword_1002662C4);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000087DC;
  return sub_10019BA80(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_10019C974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019C980);
}

uint64_t sub_10019C980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10019C9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019C9C8);
}

uint64_t sub_10019C9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for FriendshipEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_100266348;
  if (!qword_100266348)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FriendshipEndpoint);
  return result;
}

uint64_t sub_10019CA44()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 48) = v0;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 56) = v2;
  *v2 = v1;
  v2[1] = sub_10019CA90;
  return daemon.getter();
}

uint64_t sub_10019CA90(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = *v1;
  *(_QWORD *)(*v1 + 64) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 72) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10019CB78;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10019CB78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 72);
  v4 = *(_QWORD **)v2;
  v4[10] = a1;
  v4[11] = v1;
  swift_task_dealloc(v3);
  if (v1)
    return swift_task_switch(sub_10019D140, v4[6], 0);
  swift_release(v4[8]);
  v6 = (_QWORD *)swift_task_alloc(dword_100261B0C);
  v4[12] = v6;
  *v6 = v4;
  v6[1] = sub_10019CC14;
  return sub_100087F94();
}

uint64_t sub_10019CC14(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 48);
  if (v1)
  {
    v7 = sub_10019D38C;
  }
  else
  {
    *(_BYTE *)(v4 + 136) = a1 & 1;
    v7 = sub_10019CC8C;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10019CC8C()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v0 + 136) == 1)
    return swift_task_switch(sub_10019CE58, *(_QWORD *)(v0 + 80), 0);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100037A9C(v2, (uint64_t)qword_10027B330);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 80);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v10 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(0xD000000000000011, 0x80000001002017A0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s not eligible to generate tokens.", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  swift_release(v7);

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10019CE58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 112) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.follower(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 120) = v7;
  *v7 = v0;
  v7[1] = sub_10019CF28;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_10019CF28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10019CF90, v4, 0);
}

uint64_t sub_10019CF90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease(v1);
  if (v2)
  {
    swift_release(*(_QWORD *)(v0 + 80));
  }
  else
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100037A9C(v3, (uint64_t)qword_10027B330);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v0 + 80);
    if (v7)
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v12 = v10;
      *(_DWORD *)v9 = 136446210;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(0xD000000000000011, 0x80000001002017A0, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 4, v9 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s no followers.", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    swift_release(v8);

  }
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v2 != 0);
}

uint64_t sub_10019D140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 64));
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v8 = swift_slowAlloc(32, -1);
    v12 = v8;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000011, 0x80000001002017A0, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain(v1);
    v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 14, v6 + 22);
    *v7 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}@", (uint8_t *)v6, 0x16u);
    v10 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v10);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10019D38C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 80));
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v8 = swift_slowAlloc(32, -1);
    v12 = v8;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000011, 0x80000001002017A0, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain(v1);
    v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 14, v6 + 22);
    *v7 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}@", (uint8_t *)v6, 0x16u);
    v10 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v10);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10019D5D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10026639C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000087DC;
  return sub_10019D63C(a1);
}

uint64_t sub_10019D63C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for XPCActivity.Criteria.Options(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for XPCActivity.Priority(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10019D6C4, v1, 0);
}

uint64_t sub_10019D6C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v0[13] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[4] = sub_10002BA84(0xD000000000000018, 0x80000001002017C0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_100266384);
  v0[14] = v7;
  *v7 = v0;
  v7[1] = sub_10019D888;
  v7[6] = v0[6];
  v8 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v7[7] = v8;
  *v8 = v7;
  v8[1] = sub_10019CA90;
  return daemon.getter();
}

uint64_t sub_10019D888(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_BYTE *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10019D8E8, v3, 0);
}

uint64_t sub_10019D8E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (*(_BYTE *)(v1 + 120) == 1)
  {
    v2 = *(_QWORD *)(v1 + 96);
    v3 = *(_QWORD *)(v1 + 72);
    v4 = *(_QWORD *)(v1 + 56);
    v5 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 88) + 104))(v2, enum case for XPCActivity.Priority.utility(_:), *(_QWORD *)(v1 + 80));
    v6 = sub_10019DE84();
    if (v6 >= 0)
      v7 = v6;
    else
      v7 = v6 + 1;
    v8 = v7 >> 1;
    v9 = sub_10019DE84();
    v10 = sub_100037A5C(&qword_100264B28);
    v11 = swift_allocObject(v10, ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ 2 * *(_QWORD *)(v5 + 72), *(unsigned __int8 *)(v5 + 80) | 7);
    *(_OWORD *)(v11 + 16) = xmmword_1001F7110;
    v12 = static XPCActivity.Criteria.Options.requiresClassC.getter();
    static XPCActivity.Criteria.Options.requiresNetwork.getter(v12);
    *(_QWORD *)(v1 + 24) = v11;
    v13 = sub_100004EA8(&qword_100264B30, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options, (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
    v14 = sub_100037A5C(&qword_100264B38);
    v15 = sub_100140D54();
    dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 24, v14, v15, v4, v13);
    XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)(v2, 1, 0, v8, v9, v3);
    v16 = 0;
  }
  else
  {
    v17 = Logger.logObject.getter(a1);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v26 = v20;
      *(_DWORD *)v19 = 136446210;
      *(_QWORD *)(v1 + 16) = sub_10002BA84(0xD000000000000018, 0x80000001002017C0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v19 + 4, v19 + 12);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s not eligible.", v19, 0xCu);
      v16 = 1;
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      v16 = 1;
    }
  }
  v21 = *(_QWORD *)(v1 + 96);
  v22 = *(_QWORD *)(v1 + 72);
  v23 = *(_QWORD *)(v1 + 40);
  v24 = type metadata accessor for XPCActivity.Criteria(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, v16, 1, v24);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10019DB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v5 = type metadata accessor for XPCActivity.State(0);
  v3[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[6] = v6;
  v3[7] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10019DBFC, a3, 0);
}

uint64_t sub_10019DBFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 24), v3);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for XPCActivity.State.run(_:))
  {
    v5 = (_QWORD *)swift_task_alloc(dword_100263D2C);
    *(_QWORD *)(v0 + 64) = v5;
    *v5 = v0;
    v5[1] = sub_10019DD40;
    return sub_10011529C(86400.0);
  }
  else if (v4 == enum case for XPCActivity.State.defer(_:))
  {
    v7 = type metadata accessor for XPCActivity(0);
    v8 = sub_100004EA8(&qword_100263620, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
    v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
    return swift_task_switch(sub_10019DE44, v9, v10);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10019DD40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  v1 = type metadata accessor for XPCActivity(0);
  v2 = sub_100004EA8(&qword_100263620, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_10019DDD4, v3, v4);
}

uint64_t sub_10019DDD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  dispatch thunk of XPCActivity.done()();
  return swift_task_switch(sub_10019DE14, v1, 0);
}

uint64_t sub_10019DE14()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019DE44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  dispatch thunk of XPCActivity.defer()();
  return swift_task_switch(sub_10019DFB8, v1, 0);
}

uint64_t sub_10019DE84()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_1001EFBE4(0xD00000000000001CLL);
  if ((v1 & 1) != 0)
    return 43200;
  v2 = v0;
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100037A9C(v3, (uint64_t)qword_10027B330);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134217984;
    v9 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Using XPCActivity interval from defaults: %ld seconds", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }

  return v2;
}

uint64_t sub_10019DFBC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B300);
  sub_100037A9C(v0, (uint64_t)qword_10027B300);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0x73676E6974746573, 0xEF65636976726553);
}

uint64_t type metadata accessor for SettingsServiceClient()
{
  return objc_opt_self(_TtC13findmylocated21SettingsServiceClient);
}

uint64_t sub_10019E05C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for SettingsServiceClient();
  v4 = swift_allocObject(v3, 120, 15);
  swift_defaultActor_initialize(v4);
  *(_QWORD *)(v4 + 112) = a1;
  return sub_1000C9F7C(*(uint64_t (**)(uint64_t))(v1 + 8), v1, v4);
}

Swift::Int sub_10019E0B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD v6[10];

  v6[9] = *v2;
  Hasher.init(_seed:)(v6, 0);
  v4 = type metadata accessor for SettingsServiceClient();
  dispatch thunk of Hashable.hash(into:)(v6, v4, a2);
  return Hasher._finalize()();
}

uint64_t sub_10019E108(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for SettingsServiceClient();
  v4 = sub_100018A7C(&qword_100266678, v3, (uint64_t (*)(uint64_t))type metadata accessor for SettingsServiceClient, (uint64_t)&unk_1001FA1F8);
  return XPCAcceptedClient.hash(into:)(a1, v2, v4);
}

Swift::Int sub_10019E164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  v5 = type metadata accessor for SettingsServiceClient();
  dispatch thunk of Hashable.hash(into:)(v7, v5, a3);
  return Hasher._finalize()();
}

uint64_t sub_10019E1B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  v4 = type metadata accessor for SettingsServiceClient();
  v6 = sub_100018A7C(&qword_100266678, v5, (uint64_t (*)(uint64_t))type metadata accessor for SettingsServiceClient, (uint64_t)&unk_1001FA1F8);
  return static XPCAcceptedClient.== infix(_:_:)(v2, v3, v4, v6);
}

uint64_t sub_10019E214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v6 = type metadata accessor for PreferenceStreamChange(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 48) & ~v13;
  v15 = (char *)swift_allocObject(&unk_1002570F8, v14 + v8, v13 | 7);
  *((_QWORD *)v15 + 2) = 0;
  *((_QWORD *)v15 + 3) = 0;
  *((_QWORD *)v15 + 4) = a2;
  *((_QWORD *)v15 + 5) = a1;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v15[v14], (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  swift_retain(a2);
  swift_retain(a1);
  v16 = sub_10005582C((uint64_t)v11, (uint64_t)&unk_100266688, (uint64_t)v15);
  return swift_release(v16);
}

uint64_t sub_10019E36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  v7 = type metadata accessor for PreferenceStreamChange(0);
  v6[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[9] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[10] = v9;
  v6[11] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10019E3D4, 0, 0);
}

uint64_t sub_10019E3D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[8];
  v4 = v0[9];
  v5 = v0[6];
  v6 = v0[5];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[7], v3);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(&unk_100257120, v8 + v2, v7 | 7);
  v0[12] = v9;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v8, v1, v3);
  v10 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v6);
  swift_retain(v5);
  v11 = (_QWORD *)swift_task_alloc(v10);
  v0[13] = v11;
  *v11 = v0;
  v11[1] = sub_10019E4D0;
  return withTimeout<A>(_:block:)(v11, 0x8AC7230489E80000, 0, &unk_100266698, v9, (char *)&type metadata for () + 8);
}

uint64_t sub_10019E4D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10019E53C;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 96));
    v4 = sub_100115F7C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10019E53C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 96));
  *(_QWORD *)(v0 + 16) = v1;
  OnceCheckedContinuation.resume(throwing:)(v0 + 16);
  if (qword_10025FB60 != -1)
    swift_once(&qword_10025FB60, sub_10019DFBC);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027B300);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 112);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD000000000000016, 0x8000000100201860, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2114;
    v12 = _convertErrorToNSError(_:)(v8);
    *(_QWORD *)(v0 + 32) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
    *v10 = v12;
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Uncaught error in %{public}s: %{public}@", (uint8_t *)v9, 0x16u);
    v13 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v10, 1, v13);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 112));
    swift_errorRelease(v8);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019E78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  return swift_task_switch(sub_10019E7A8, 0, 0);
}

uint64_t sub_10019E7A8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = *((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:) + 1);
  v4 = (char *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:)
     + async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:);
  swift_retain(*(_QWORD *)(v0 + 80));
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 96) = v2;
  *v2 = v0;
  v2[1] = sub_10019E830;
  return ((uint64_t (*)(uint64_t, uint64_t (*)(uint64_t), _QWORD))v4)(v0 + 64, sub_1001A3EEC, *(_QWORD *)(v0 + 80));
}

uint64_t sub_10019E830()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10013F9D0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 80));
    v4 = sub_10019E89C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10019E89C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Class isa;
  void *v14;
  uint64_t v15;

  v1 = v0[13];
  v2 = v0[11];
  v3 = (void *)v0[8];
  v4 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListEncoder.init()();
  v6 = type metadata accessor for PreferenceStreamChange(0);
  v7 = sub_100018A7C(&qword_1002666A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for PreferenceStreamChange, (uint64_t)&protocol conformance descriptor for PreferenceStreamChange);
  v8 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v2, v6, v7);
  if (v1)
  {
    swift_release(v5);
  }
  else
  {
    v10 = v8;
    v11 = v9;
    v12 = v0[10];
    swift_release(v5);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_10013E850;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1000A5E54;
    v0[5] = &unk_100257138;
    v14 = _Block_copy(v0 + 2);
    v15 = v0[7];
    swift_retain(v12);
    swift_release(v15);
    objc_msgSend(v3, "preferencesUpdatedWithChange:completion:", isa, v14);
    _Block_release(v14);

    sub_100037AB4(v10, v11);
  }
  swift_unknownObjectRelease(v3);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_10019EA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v6 = sub_100037A5C(&qword_100260538);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  sub_10000E37C(a3, (uint64_t)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100260538);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 48) & ~v13;
  v15 = (_QWORD *)swift_allocObject(&unk_100257170, v14 + v8, v13 | 7);
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = a2;
  v15[5] = a1;
  sub_10000EF6C((uint64_t)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v15 + v14, &qword_100260538);
  swift_retain(a2);
  swift_retain(a1);
  v16 = sub_10005582C((uint64_t)v11, (uint64_t)&unk_1002666B0, (uint64_t)v15);
  return swift_release(v16);
}

uint64_t sub_10019EB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  v7 = *(_QWORD *)(sub_100037A5C(&qword_100260538) - 8);
  v6[8] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v6[9] = v8;
  v6[10] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10019EBD4, 0, 0);
}

uint64_t sub_10019EBD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  v5 = v0[5];
  v4 = v0[6];
  sub_10000E37C(v0[7], v1, &qword_100260538);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(&unk_100257198, v7 + v2, v6 | 7);
  v0[11] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v4;
  sub_10000EF6C(v1, v8 + v7, &qword_100260538);
  v9 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v5);
  swift_retain(v4);
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[12] = v10;
  *v10 = v0;
  v10[1] = sub_10019ECC4;
  return withTimeout<A>(_:block:)(v10, 0x8AC7230489E80000, 0, &unk_1002666C0, v8, (char *)&type metadata for () + 8);
}

uint64_t sub_10019ECC4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10019ED60;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 88));
    v4 = sub_10019ED30;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10019ED30()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019ED60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 88));
  *(_QWORD *)(v0 + 16) = v1;
  OnceCheckedContinuation.resume(throwing:)(v0 + 16);
  if (qword_10025FB60 != -1)
    swift_once(&qword_10025FB60, sub_10019DFBC);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027B300);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 104);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD00000000000001ALL, 0x8000000100201880, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2114;
    v12 = _convertErrorToNSError(_:)(v8);
    *(_QWORD *)(v0 + 32) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
    *v10 = v12;
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Uncaught error in %{public}s: %{public}@", (uint8_t *)v9, 0x16u);
    v13 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v10, 1, v13);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v8);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019EFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  return swift_task_switch(sub_10019EFCC, 0, 0);
}

uint64_t sub_10019EFCC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = *((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:) + 1);
  v4 = (char *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:)
     + async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:);
  swift_retain(*(_QWORD *)(v0 + 80));
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 96) = v2;
  *v2 = v0;
  v2[1] = sub_10019F054;
  return ((uint64_t (*)(uint64_t, uint64_t (*)(uint64_t), _QWORD))v4)(v0 + 64, sub_1001A3EEC, *(_QWORD *)(v0 + 80));
}

uint64_t sub_10019F054()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100138874;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 80));
    v4 = sub_10019F0C0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10019F0C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Class isa;
  void *v14;
  uint64_t v15;

  v1 = v0[13];
  v2 = v0[11];
  v3 = (void *)v0[8];
  v4 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListEncoder.init()();
  v6 = sub_100037A5C(&qword_100260538);
  v7 = sub_1001A419C();
  v8 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v2, v6, v7);
  if (v1)
  {
    swift_release(v5);
  }
  else
  {
    v10 = v8;
    v11 = v9;
    v12 = v0[10];
    swift_release(v5);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_10013E850;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1000A5E54;
    v0[5] = &unk_1002571B0;
    v14 = _Block_copy(v0 + 2);
    v15 = v0[7];
    swift_retain(v12);
    swift_release(v15);
    objc_msgSend(v3, "meDeviceUpdatedWithMeDevice:completion:", isa, v14);
    _Block_release(v14);

    sub_100037AB4(v10, v11);
  }
  swift_unknownObjectRelease(v3);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_10019F22C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (qword_10025FB60 != -1)
    swift_once(&qword_10025FB60, sub_10019DFBC);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B300);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(a1);
    v8 = _swift_stdlib_bridgeErrorToNSError(a1);
    v11 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SettingsServiceClient proxy error: %{public}@", v6, 0xCu);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v11 = a1;
  return OnceCheckedContinuation.resume(throwing:)(&v11);
}

uint64_t sub_10019F3E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_10019F400, v1, 0);
}

uint64_t sub_10019F400()
{
  int8x16_t *v0;
  int8x16_t *v1;
  int8x16_t **v2;

  v1 = (int8x16_t *)swift_task_alloc(32);
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  v2 = (int8x16_t **)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  v0[2].i64[1] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (int8x16_t *)sub_1000A6A6C;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_10019F494(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_10019F4AC, v1, 0);
}

uint64_t sub_10019F4AC()
{
  int8x16_t *v0;
  int8x16_t *v1;
  int8x16_t **v2;

  v1 = (int8x16_t *)swift_task_alloc(32);
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  v2 = (int8x16_t **)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  v0[2].i64[1] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (int8x16_t *)sub_1000A6BBC;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_10019F540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B318);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027B318);
  if (qword_10025FB60 != -1)
    swift_once(&qword_10025FB60, sub_10019DFBC);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027B300);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

unint64_t sub_10019F5D0(unint64_t a1)
{
  unint64_t result;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  unint64_t v8;
  _QWORD v9[2];

  result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 0x74756F656D69742ELL;
      break;
    case 2uLL:
      result = 0x6F707075736E752ELL;
      break;
    case 3uLL:
      result = 0xD000000000000013;
      break;
    case 4uLL:
      result = 0xD000000000000013;
      break;
    case 5uLL:
      result = 0xD000000000000016;
      break;
    case 6uLL:
    case 9uLL:
      result = 0xD000000000000012;
      break;
    case 7uLL:
      result = 0xD000000000000016;
      break;
    case 8uLL:
      result = 0xD000000000000010;
      break;
    case 0xAuLL:
      result = 0xD00000000000001ELL;
      break;
    case 0xBuLL:
      result = 0x64616552746F6E2ELL;
      break;
    default:
      strcpy((char *)v9, ".underlying(");
      BYTE5(v9[1]) = 0;
      HIWORD(v9[1]) = -5120;
      v8 = a1;
      sub_1000CFAE4(a1);
      swift_errorRetain(a1);
      v4 = sub_100037A5C(&qword_100265260);
      v5._countAndFlagsBits = String.init<A>(describing:)(&v8, v4);
      object = v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease(object);
      v7._countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      sub_1000CFAF4(a1);
      result = v9[0];
      break;
  }
  return result;
}

unint64_t sub_10019F7BC()
{
  unint64_t *v0;

  return sub_10019F5D0(*v0);
}

uint64_t sub_10019F7C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = v0;
  v1[2] = v0;
  v3 = type metadata accessor for UUID(0);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[3] = v4;
  swift_defaultActor_initialize(v0);
  *(_QWORD *)(v0 + 112) = 0x73676E6974746553;
  *(_QWORD *)(v0 + 120) = 0xEF65636976726553;
  v5 = v0 + OBJC_IVAR____TtC13findmylocated15SettingsService_serviceDescription;
  v6 = type metadata accessor for XPCServiceDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13findmylocated15SettingsService_trampoline) = 0;
  v7 = OBJC_IVAR____TtC13findmylocated15SettingsService_connectionPool;
  sub_100037A5C(&qword_100266708);
  *(_QWORD *)(v2 + v7) = XPCClientConnectionPool.__allocating_init()();
  v8 = OBJC_IVAR____TtC13findmylocated15SettingsService_preferencesUpdateQueue;
  v9 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v9);
  *(_QWORD *)(v2 + v8) = WorkItemQueue.__allocating_init(name:identifier:)(0xD000000000000026, 0x80000001002018F0, v4);
  v10 = v2 + OBJC_IVAR____TtC13findmylocated15SettingsService_dataManagerStateStream;
  v11 = sub_100037A5C((uint64_t *)&unk_100262140);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  type metadata accessor for XPCSessionManager(0);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to XPCSessionManager.__allocating_init(name:)[1]);
  v1[4] = v12;
  *v12 = v1;
  v12[1] = sub_10019F968;
  return XPCSessionManager.__allocating_init(name:)(0x73676E6974746553, 0xEF65636976726553);
}

uint64_t sub_10019F968(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 24);
  v5 = *(_QWORD *)(*v1 + 16);
  v7 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 32));
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13findmylocated15SettingsService_xpcSessionManager) = a1;
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v7 + 8))(*(_QWORD *)(v3 + 16));
}

uint64_t sub_10019F9D4()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[12] = v0;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002626D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[13] = swift_task_alloc(v2);
  v1[14] = swift_task_alloc(v2);
  v3 = type metadata accessor for MachServiceName(0);
  v1[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[16] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[17] = swift_task_alloc(v5);
  v1[18] = swift_task_alloc(v5);
  return swift_task_switch(sub_10019FA78, v0, 0);
}

uint64_t sub_10019FA78()
{
  objc_super *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id receiver;
  void (**v7)(Class, id, Class);
  uint64_t v8;
  char *v9;
  void *v10;
  objc_class *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  objc_class *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Class super_class;
  Class v31;
  uint64_t v32;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B318);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SettingsService: startup", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  receiver = v0[9].receiver;
  super_class = v0[8].super_class;
  v7 = (void (**)(Class, id, Class))v0[8].receiver;
  v31 = v0[7].super_class;
  v8 = (uint64_t)v0[7].receiver;
  v32 = (uint64_t)v0[6].super_class;
  v9 = (char *)v0[6].receiver;

  MachServiceName.init(_:)(0xD000000000000026, 0x80000001002018C0);
  v10 = (void *)objc_opt_self(NSXPCInterface);
  v11 = (objc_class *)objc_msgSend(v10, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP12FindMyLocate18SettingsXPCService_);
  v0[9].super_class = v11;
  v12 = sub_100037A5C(&qword_100266778);
  v13 = swift_allocObject(v12, 120, 15);
  swift_retain(v9);
  swift_defaultActor_initialize(v13);
  v14 = swift_weakInit(v13 + 112, 0);
  swift_weakAssign(v14, v9);
  v0[5].receiver = (id)v13;
  v0[5].super_class = (Class)v12;
  v15 = objc_msgSendSuper2(v0 + 5, "init");
  v0[10].receiver = v15;
  swift_release(v9);
  v16 = (objc_class *)objc_msgSend(v10, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP12FindMyLocate24SettingsServiceClientXPC_);
  v0[10].super_class = v16;
  v7[2](super_class, receiver, v31);
  v17 = type metadata accessor for ServiceEntitlements(0);
  v0[2].super_class = (Class)v17;
  v0[3].receiver = (id)sub_100018A7C(&qword_1002626F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ServiceEntitlements, (uint64_t)&protocol conformance descriptor for ServiceEntitlements);
  v18 = sub_10003276C(&v0[1].receiver);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v18, enum case for ServiceEntitlements.settingService(_:), v17);
  v19 = swift_allocObject(&unk_100257328, 24, 7);
  swift_weakInit(v19 + 16, v9);
  v20 = v15;
  XPCServiceDescription.init(name:exportedObject:exportedInterface:remoteObjectInterface:options:requiredEntitlement:shouldAccept:)(super_class, v20, v11, v16, 0, &v0[1], &unk_100266788, v19);
  v21 = type metadata accessor for XPCServiceDescription(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 0, 1, v21);
  sub_10000EF6C(v8, v32, &qword_1002626D0);
  v22 = (uint64_t)&v9[OBJC_IVAR____TtC13findmylocated15SettingsService_serviceDescription];
  swift_beginAccess(&v9[OBJC_IVAR____TtC13findmylocated15SettingsService_serviceDescription], &v0[3].super_class, 33, 0);
  sub_10007E710(v32, v22, &qword_1002626D0);
  swift_endAccess(&v0[3].super_class);
  v23 = *(_QWORD *)&v9[OBJC_IVAR____TtC13findmylocated15SettingsService_trampoline];
  *(_QWORD *)&v9[OBJC_IVAR____TtC13findmylocated15SettingsService_trampoline] = v20;
  v24 = v20;
  swift_release(v23);
  v0[11].receiver = *(id *)&v9[OBJC_IVAR____TtC13findmylocated15SettingsService_connectionPool];
  v25 = sub_100037A5C(&qword_100266708);
  v26 = sub_10001013C(&qword_100266710, &qword_100266708, (uint64_t)&protocol conformance descriptor for XPCClientConnectionPool<A>);
  v27 = dispatch thunk of Actor.unownedExecutor.getter(v25, v26);
  return swift_task_switch(sub_10019FE40, v27, v28);
}

uint64_t sub_10019FE40()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  dispatch thunk of XPCClientConnectionPool.setRemoveHandler(_:)(&unk_100266790, 0);
  return swift_task_switch(sub_10019FE8C, v1, 0);
}

uint64_t sub_10019FE8C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(void **)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 104);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v6);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019FF20(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[5] = a1;
  v2[6] = a2;
  v3 = sub_100037A5C((uint64_t *)&unk_100265180);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10019FF7C, 0, 0);
}

uint64_t sub_10019FF7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(_QWORD *)(v0 + 56);
    v5 = *(void **)(v0 + 40);
    v6 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
    v7 = (_QWORD *)swift_allocObject(&unk_100257350, 48, 7);
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = v3;
    v7[5] = v5;
    swift_retain(v3);
    v8 = v5;
    v9 = sub_10005582C(v4, (uint64_t)&unk_1002667A0, (uint64_t)v7);
    swift_release(v3);
    swift_release(v9);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_1001A0064()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1[103] = v0;
  v2 = sub_100037A5C(&qword_1002626C8);
  v1[104] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[105] = v3;
  v1[106] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002626C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[107] = swift_task_alloc(v4);
  v1[108] = swift_task_alloc(v4);
  v5 = sub_100037A5C(&qword_1002626D0);
  v1[109] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001A0120, v0, 0);
}

uint64_t sub_1001A0120()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0[109];
  v2 = v0[103];
  v0[110] = *(_QWORD *)(v2 + OBJC_IVAR____TtC13findmylocated15SettingsService_xpcSessionManager);
  v3 = v2 + OBJC_IVAR____TtC13findmylocated15SettingsService_serviceDescription;
  swift_beginAccess(v2 + OBJC_IVAR____TtC13findmylocated15SettingsService_serviceDescription, v0 + 87, 0, 0);
  sub_10000E37C(v3, v1, &qword_1002626D0);
  v4 = type metadata accessor for XPCServiceDescription(0);
  v0[111] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[112] = v5;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v1, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v7 = type metadata accessor for XPCSessionManager(0);
    v8 = sub_100018A7C(&qword_1002626D8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCSessionManager, (uint64_t)&protocol conformance descriptor for XPCSessionManager);
    v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
    return swift_task_switch(sub_1001A021C, v9, v10);
  }
  return result;
}

uint64_t sub_1001A021C()
{
  _QWORD *v0;
  _QWORD *v1;

  dispatch thunk of XPCSessionManager.register(service:)(v0[109]);
  v0[113] = 0;
  (*(void (**)(_QWORD, _QWORD))(v0[112] + 8))(v0[109], v0[111]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[114] = v1;
  *v1 = v0;
  v1[1] = sub_1001A02BC;
  return daemon.getter();
}

uint64_t sub_1001A02BC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 912);
  v5 = *v1;
  *(_QWORD *)(*v1 + 920) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 928) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100260248, 255, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1001A03AC;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001A03AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 928);
  v4[117] = a1;
  v4[118] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[103];
    v7 = sub_1000A9BC0;
  }
  else
  {
    swift_release(v4[115]);
    v7 = sub_1001A042C;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001A042C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[117];
  v2 = v0[106];
  v3 = v0[105];
  v4 = v0[104];
  v5 = v0[103];
  v6 = swift_allocObject(&unk_100257300, 24, 7);
  swift_weakInit(v6 + 16, v1);
  v7 = type metadata accessor for DataManager.State(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  AsyncStream.init(_:bufferingPolicy:_:)(v7, v2, sub_1000CF604, v6, v7);
  swift_release(v6);
  return swift_task_switch(sub_1001A0504, v5, 0);
}

uint64_t sub_1001A0504()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[108];
  v2 = v0[107];
  v3 = v0[103];
  v4 = sub_100037A5C((uint64_t *)&unk_100262140);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_10000EF6C(v1, v2, &qword_1002626C0);
  v5 = v3 + OBJC_IVAR____TtC13findmylocated15SettingsService_dataManagerStateStream;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13findmylocated15SettingsService_dataManagerStateStream, v0 + 95, 33, 0);
  sub_10007E710(v2, v5, &qword_1002626C0);
  swift_endAccess(v0 + 95);
  swift_retain_n(v3, 2);
  swift_asyncLet_begin(v0 + 2, 0, (char *)&type metadata for () + 8, &unk_100266770, v3);
  return swift_asyncLet_get_throwing(v0 + 2, v6, sub_1000A9A88, v0 + 82);
}

uint64_t sub_1001A0610()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1002664D4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1001A0C14();
}

uint64_t sub_1001A0658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1002664CC);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_10003BF7C;
  return sub_1001A06AC(a5);
}

uint64_t sub_1001A06AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for ServiceEntitlements(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001A070C, v1, 0);
}

uint64_t sub_1001A070C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  os_log_t log;
  NSObject *loga;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ServiceEntitlements.settingService(_:), v3);
  v4 = sub_100018A7C(&qword_1002626F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ServiceEntitlements, (uint64_t)&protocol conformance descriptor for ServiceEntitlements);
  v5 = NSXPCConnection.hasEntitlement<A>(_:)(v1, v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v5 & 1) != 0)
  {
    log = (os_log_t)((char *)&async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:)
                   + async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:));
    v6 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:)
                                    + 1));
    *(_QWORD *)(v0 + 64) = v6;
    *v6 = v0;
    v6[1] = sub_1001A09DC;
    return ((uint64_t (*)(_QWORD))log)(*(_QWORD *)(v0 + 24));
  }
  else
  {
    objc_msgSend(*(id *)(v0 + 24), "invalidate");
    v8 = sub_100082560();
    v9 = swift_allocError(&type metadata for LocationServiceError, v8, 0, 0);
    *v10 = 11;
    swift_willThrow(v9);
    if (qword_10025FB68 != -1)
      swift_once(&qword_10025FB68, sub_10019F540);
    v11 = type metadata accessor for Logger(0);
    sub_100037A9C(v11, (uint64_t)qword_10027B318);
    v12 = swift_errorRetain(v9);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      loga = v13;
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 138543362;
      v17 = _convertErrorToNSError(_:)(v9);
      *(_QWORD *)(v0 + 16) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
      *v16 = v17;
      swift_errorRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, loga, v14, "Error adding connection: %{public}@", v15, 0xCu);
      v18 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v16, 1, v18);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      swift_errorRelease(v9);
    }
    else
    {
      swift_errorRelease(v9);
      swift_errorRelease(v9);

    }
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A09DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 64);
  v5 = *v2;
  *(_QWORD *)(v5 + 72) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1001A0A68, *(_QWORD *)(v5 + 32), 0);
  swift_release(a1);
  swift_task_dealloc(*(_QWORD *)(v5 + 56));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1001A0A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 72);
  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B318);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    v8 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error adding connection: %{public}@", v6, 0xCu);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A0C14()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1[5] = v0;
  v1[6] = *v0;
  v2 = sub_100037A5C(&qword_100260538);
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v1[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PreferenceStreamChange(0);
  v1[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[10] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v1[11] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[12] = swift_task_alloc(v7);
  v1[13] = swift_task_alloc(v7);
  v8 = type metadata accessor for DataManager.State(0);
  v1[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[15] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[16] = swift_task_alloc(v10);
  v1[17] = swift_task_alloc(v10);
  v1[18] = swift_task_alloc(v10);
  v1[19] = swift_task_alloc(v10);
  v11 = sub_100037A5C(&qword_1002626B0);
  v1[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C(&qword_1002626B8);
  v1[21] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[22] = v13;
  v1[23] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100037A5C(&qword_1002626C0);
  v1[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100037A5C((uint64_t *)&unk_100262140);
  v1[25] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v1[26] = v16;
  v1[27] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001A0DC4, v0, 0);
}

uint64_t sub_1001A0DC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 184);
    v3 = *(_QWORD *)(v1 + 192);
    v5 = *(_QWORD *)(v1 + 152);
    v4 = *(_QWORD *)(v1 + 160);
    v7 = *(_QWORD *)(v1 + 136);
    v6 = *(_QWORD *)(v1 + 144);
    v8 = *(_QWORD *)(v1 + 128);
    v10 = *(_QWORD *)(v1 + 96);
    v9 = *(_QWORD *)(v1 + 104);
    v44 = *(_QWORD *)(v1 + 64);
    v46 = *(_QWORD *)(v1 + 56);
    swift_task_dealloc(*(_QWORD *)(v1 + 216));
    swift_task_dealloc(v3);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    v11 = *(uint64_t (**)(void))(v1 + 8);
    return v11();
  }
  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100037A9C(v12, (uint64_t)qword_10027B318);
  *(_QWORD *)(v1 + 224) = v13;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Monitoring DataManager stream", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
  v17 = *(_QWORD *)(v1 + 200);
  v18 = *(_QWORD *)(v1 + 208);
  v19 = *(_QWORD *)(v1 + 192);
  v20 = *(_QWORD *)(v1 + 40);

  v21 = v20 + OBJC_IVAR____TtC13findmylocated15SettingsService_dataManagerStateStream;
  swift_beginAccess(v20 + OBJC_IVAR____TtC13findmylocated15SettingsService_dataManagerStateStream, v1 + 16, 0, 0);
  sub_10000E37C(v21, v19, &qword_1002626C0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1, v17) == 1)
  {
    v22 = sub_1000087A0(*(_QWORD *)(v1 + 192), &qword_1002626C0);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "dataManagerStateStream should be available by now!", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = sub_100051194();
    v47 = swift_allocError(&type metadata for SettingsService.Error, v26, 0, 0);
    *v27 = 10;
    swift_willThrow(v47);
    v29 = *(_QWORD *)(v1 + 184);
    v28 = *(_QWORD *)(v1 + 192);
    v31 = *(_QWORD *)(v1 + 152);
    v30 = *(_QWORD *)(v1 + 160);
    v33 = *(_QWORD *)(v1 + 136);
    v32 = *(_QWORD *)(v1 + 144);
    v34 = *(_QWORD *)(v1 + 128);
    v35 = *(_QWORD *)(v1 + 96);
    v36 = *(_QWORD *)(v1 + 104);
    v43 = *(_QWORD *)(v1 + 64);
    v45 = *(_QWORD *)(v1 + 56);
    swift_task_dealloc(*(_QWORD *)(v1 + 216));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v35);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    v11 = *(uint64_t (**)(void))(v1 + 8);
    return v11();
  }
  v38 = *(_QWORD *)(v1 + 200);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v1 + 208) + 32))(*(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 192), v38);
  AsyncStream.makeAsyncIterator()(v38);
  v39 = sub_100018A7C(qword_100266620, 255, type metadata accessor for SettingsService, (uint64_t)&unk_1001FA138);
  v40 = OBJC_IVAR____TtC13findmylocated15SettingsService_preferencesUpdateQueue;
  *(_QWORD *)(v1 + 232) = v39;
  *(_QWORD *)(v1 + 240) = v40;
  *(_DWORD *)(v1 + 264) = enum case for PreferenceStreamChange.initialized(_:);
  *(_DWORD *)(v1 + 268) = enum case for PreferenceStreamChange.friendRequests(_:);
  *(_DWORD *)(v1 + 272) = enum case for PreferenceStreamChange.myLocation(_:);
  *(_DWORD *)(v1 + 276) = enum case for PreferenceStreamChange.meDevice(_:);
  *(_QWORD *)(v1 + 248) = 0;
  v41 = *(_QWORD *)(v1 + 40);
  v42 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v1 + 256) = v42;
  *v42 = v1;
  v42[1] = sub_1001A11D8;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v1 + 160), v41, v39, *(_QWORD *)(v1 + 168));
}

uint64_t sub_1001A11D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  return swift_task_switch(sub_1001A1230, v1, 0);
}

uint64_t sub_1001A1230()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = v0[20];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[15] + 48))(v1, 1, v0[14]) == 1)
  {
    v3 = v0[26];
    v2 = v0[27];
    v4 = v0[25];
    (*(void (**)(_QWORD, _QWORD))(v0[22] + 8))(v0[23], v0[21]);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    v5 = v0[23];
    v6 = v0[24];
    v8 = v0[19];
    v7 = v0[20];
    v10 = v0[17];
    v9 = v0[18];
    v11 = v0[16];
    v13 = v0[12];
    v12 = v0[13];
    v46 = v0[8];
    v48 = v0[7];
    swift_task_dealloc(v0[27]);
    swift_task_dealloc(v6);
    swift_task_dealloc(v5);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    v14 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v15 = v0[31];
    v16 = sub_1000CF278(v1, v0[19]);
    static Task<>.checkCancellation()(v16);
    if (!v15)
    {
      v32 = sub_10003E7A8(v0[19], v0[18]);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.default.getter(v33);
      v35 = os_log_type_enabled(v33, v34);
      v36 = v0[18];
      if (v35)
      {
        v37 = swift_slowAlloc(12, -1);
        v38 = swift_slowAlloc(32, -1);
        v50 = v38;
        *(_DWORD *)v37 = 136315138;
        sub_1000DF70C();
        v40 = v39;
        *(_QWORD *)(v37 + 4) = sub_10002BA84(v41, v39, &v50);
        swift_bridgeObjectRelease(v40);
        sub_10003E76C(v36);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "dataManagerStateStream event: %s", (uint8_t *)v37, 0xCu);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);
      }
      else
      {
        sub_10003E76C(v0[18]);
      }

      v42 = v0[17];
      v43 = v0[14];
      sub_10003E7A8(v0[19], v42);
      v44 = (char *)sub_1001A1550 + 4 * word_1001FA00C[swift_getEnumCaseMultiPayload(v42, v43)];
      __asm { BR              X10 }
    }
    v18 = v0[26];
    v17 = v0[27];
    v19 = v0[25];
    v21 = v0[22];
    v20 = v0[23];
    v22 = v0[21];
    sub_10003E76C(v0[19]);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    v23 = v0[23];
    v24 = v0[24];
    v26 = v0[19];
    v25 = v0[20];
    v28 = v0[17];
    v27 = v0[18];
    v29 = v0[16];
    v30 = v0[13];
    v45 = v0[12];
    v47 = v0[8];
    v49 = v0[7];
    swift_task_dealloc(v0[27]);
    swift_task_dealloc(v24);
    swift_task_dealloc(v23);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    v14 = (uint64_t (*)(void))v0[1];
  }
  return v14();
}

uint64_t sub_1001A1550()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v1 = v0[17];
  v2 = type metadata accessor for Friend(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = sub_10003E7A8(v0[19], v0[16]);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[19];
  v8 = v0[16];
  if (v6)
  {
    v9 = swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v18 = v10;
    *(_DWORD *)v9 = 136315138;
    sub_1000DF70C();
    v12 = v11;
    *(_QWORD *)(v9 + 4) = sub_10002BA84(v13, v11, &v18);
    swift_bridgeObjectRelease(v12);
    sub_10003E76C(v8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Ignoring %s", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    sub_10003E76C(v8);
  }
  sub_10003E76C(v7);
  v0[31] = 0;
  v14 = v0[29];
  v15 = v0[5];
  v16 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[32] = v16;
  *v16 = v0;
  v16[1] = sub_1001A11D8;
  return AsyncStream.Iterator.next(isolation:)(v0[20], v15, v14, v0[21]);
}

uint64_t sub_1001A1AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for PreferenceStreamChange(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001A1B64, 0, 0);
}

uint64_t sub_1001A1B64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[4];
  v6 = v0[2];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v3);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = (v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_100257288, v9 + 8, v7 | 7);
  v0[9] = v10;
  *(_QWORD *)(v10 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v8, v1, v3);
  *(_QWORD *)(v10 + v9) = v5;
  v11 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v6);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[10] = v12;
  *v12 = v0;
  v12[1] = sub_1000EC0D4;
  return withTimeout<A>(_:block:)(v12, 0x40AAD21B3B700000, 3, &unk_100266700, v10, (char *)&type metadata for () + 8);
}

uint64_t sub_1001A1C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[8] = a3;
  v4[9] = a4;
  v4[7] = a2;
  v5 = type metadata accessor for PreferenceStreamChange(0);
  v4[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[11] = v6;
  v4[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001A1CCC, 0, 0);
}

uint64_t sub_1001A1CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 104) = *(_QWORD *)(*(_QWORD *)(v0 + 56)
                                    + OBJC_IVAR____TtC13findmylocated15SettingsService_connectionPool);
  v1 = sub_100037A5C(&qword_100266708);
  v2 = sub_10001013C(&qword_100266710, &qword_100266708, (uint64_t)&protocol conformance descriptor for XPCClientConnectionPool<A>);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_1001A1D5C, v3, v4);
}

uint64_t sub_1001A1D5C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = dispatch thunk of XPCClientConnectionPool.sessions.getter();
  v0[14] = v1;
  v0[2] = v1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  v0[15] = v2;
  v3 = sub_100037A5C(&qword_100266720);
  v4 = type metadata accessor for UUID(0);
  v0[16] = v4;
  v5 = sub_10001013C(&qword_100266728, &qword_100266720, (uint64_t)&protocol conformance descriptor for Set<A>);
  *v2 = v0;
  v2[1] = sub_1001A1E20;
  return Sequence.asyncMap<A>(_:)(&unk_100266718, 0, v3, v4, v5);
}

uint64_t sub_1001A1E20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001A1E7C, 0, 0);
}

uint64_t sub_1001A1E7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = v0[17];
  v2 = v0[14];
  v4 = v0[11];
  v3 = v0[12];
  v5 = v0[10];
  v6 = v0[8];
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027B318);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_bridgeObjectRetain_n(v2, 2);
  swift_bridgeObjectRetain(v1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = v0[14];
    v12 = swift_slowAlloc(42, -1);
    v13 = swift_slowAlloc(64, -1);
    v41 = v13;
    *(_DWORD *)v12 = 134218755;
    v14 = v0[14];
    v39 = v0 + 6;
    v40 = v13;
    v38 = v0 + 5;
    if ((v11 & 0xC000000000000001) != 0)
    {
      if (v14 < 0)
        v15 = v0[14];
      else
        v15 = v11 & 0xFFFFFFFFFFFFFF8;
      v16 = __CocoaSet.count.getter(v15);
      v14 = v0[14];
    }
    else
    {
      v16 = *(_QWORD *)(v14 + 16);
    }
    v21 = v0[17];
    v36 = v0[12];
    v37 = v0[11];
    v35 = v0[10];
    swift_bridgeObjectRelease(v14);
    v0[3] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v12 + 12) = 2082;
    v22 = swift_bridgeObjectRetain(v21);
    v23 = Array.description.getter(v22);
    v25 = v24;
    swift_bridgeObjectRelease(v21);
    v0[4] = sub_10002BA84(v23, v25, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v38, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v12 + 22) = 2160;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, v39, v12 + 24, v12 + 32);
    *(_WORD *)(v12 + 32) = 2081;
    v26 = sub_100018A7C(&qword_100266740, 255, (uint64_t (*)(uint64_t))&type metadata accessor for PreferenceStreamChange, (uint64_t)&protocol conformance descriptor for PreferenceStreamChange);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v35, v26);
    v29 = v28;
    v0[6] = sub_10002BA84(v27, v28, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v39, v0 + 7, v12 + 34, v12 + 42);
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v35);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SettingsService: send meDevice Update to all clients:\nclients[%ld]: %{public}s\nupdates:%{private,mask.hash}s", (uint8_t *)v12, 0x2Au);
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    v17 = v0[14];
    v19 = v0[11];
    v18 = v0[12];
    v20 = v0[10];
    swift_bridgeObjectRelease_n(v0[17], 2);
    swift_bridgeObjectRelease_n(v17, 2);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }

  v30 = v0[14];
  v31 = swift_task_alloc(48);
  v0[18] = v31;
  v32 = *((_OWORD *)v0 + 4);
  *(_QWORD *)(v31 + 16) = v30;
  *(_OWORD *)(v31 + 24) = v32;
  v33 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[19] = v33;
  *v33 = v0;
  v33[1] = sub_1001A2238;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1001A2238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001A22A0, 0, 0);
}

uint64_t sub_1001A22A0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A22D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  v6 = type metadata accessor for PreferenceStreamChange(0);
  v5[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[21] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[22] = v8;
  v5[23] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[24] = swift_task_alloc(v9);
  v5[25] = swift_task_alloc(v9);
  return swift_task_switch(sub_1001A2370, 0, 0);
}

void sub_1001A2370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ObjectType;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  int64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;

  v61 = v0 + 88;
  v1 = *(_QWORD *)(v0 + 136);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 136);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 136));
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for SettingsServiceClient();
    v6 = sub_100018A7C((unint64_t *)&unk_100266668, v5, (uint64_t (*)(uint64_t))type metadata accessor for SettingsServiceClient, (uint64_t)&unk_1001FA1B8);
    v7 = Set.Iterator.init(_cocoa:)(v3, v4, v6);
    v1 = *(_QWORD *)(v0 + 16);
    v56 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v11 = -1 << *(_BYTE *)(v1 + 32);
    v56 = v1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain(v1);
    v9 = 0;
  }
  v57 = (_QWORD *)(v0 + 56);
  v53 = (uint64_t *)(v0 + 120);
  v54 = (uint64_t *)(v0 + 112);
  v55 = (unint64_t)(v8 + 64) >> 6;
  v59 = *(_QWORD *)(v0 + 176) + 7;
  v60 = *(_QWORD *)(v0 + 168);
  v58 = v1;
  while (v1 < 0)
  {
    v19 = __CocoaSet.Iterator.next()(v7);
    if (!v19)
      goto LABEL_40;
    v20 = v19;
    *v53 = v19;
    v21 = type metadata accessor for SettingsServiceClient();
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(v54, v53, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = *v54;
    swift_unknownObjectRelease(v20);
    v18 = v9;
    v16 = v10;
    if (!v22)
      goto LABEL_40;
LABEL_33:
    v66 = v16;
    v62 = v18;
    v26 = *(_QWORD *)(v0 + 200);
    v63 = v26;
    v27 = *(_QWORD *)(v0 + 184);
    v67 = v22;
    v28 = *(_QWORD *)(v0 + 160);
    v64 = *(_QWORD *)(v0 + 152);
    v65 = *(_QWORD *)(v0 + 192);
    v29 = *(_QWORD *)(v0 + 144);
    v30 = type metadata accessor for TaskPriority(0);
    v31 = *(_QWORD *)(v30 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v26, 1, 1, v30);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v27, v29, v28);
    v32 = *(unsigned __int8 *)(v60 + 80);
    v33 = (v32 + 40) & ~v32;
    v34 = v0;
    v35 = (v59 + v33) & 0xFFFFFFFFFFFFFFF8;
    v36 = (_QWORD *)swift_allocObject(&unk_1002572B0, v35 + 8, v32 | 7);
    v36[2] = 0;
    v37 = v36 + 2;
    v36[3] = 0;
    v36[4] = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))((char *)v36 + v33, v27, v28);
    *(_QWORD *)((char *)v36 + v35) = v64;
    v0 = v34;
    sub_10000E37C(v63, v65, (uint64_t *)&unk_100265180);
    LODWORD(v27) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v65, 1, v30);
    swift_retain(v67);
    v39 = *(_QWORD *)(v34 + 192);
    if ((_DWORD)v27 == 1)
    {
      sub_1000087A0(*(_QWORD *)(v0 + 192), (uint64_t *)&unk_100265180);
      v40 = 0;
      v41 = *v37;
      if (*v37)
        goto LABEL_35;
    }
    else
    {
      v47 = TaskPriority.rawValue.getter(v38);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v39, v30);
      v40 = v47;
      v41 = *v37;
      if (*v37)
      {
LABEL_35:
        v42 = v36[3];
        ObjectType = swift_getObjectType(v41);
        swift_unknownObjectRetain(v41);
        v44 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v42);
        v46 = v45;
        swift_unknownObjectRelease(v41);
        goto LABEL_38;
      }
    }
    v44 = 0;
    v46 = 0;
LABEL_38:
    v48 = **(_QWORD **)(v0 + 128);
    v49 = (_QWORD *)(v46 | v44);
    if (v46 | v44)
    {
      v49 = v57;
      *v57 = 0;
      v57[1] = 0;
      *(_QWORD *)(v0 + 72) = v44;
      *(_QWORD *)(v0 + 80) = v46;
    }
    v1 = v58;
    v14 = *(_QWORD *)(v0 + 200);
    *(_QWORD *)(v0 + 88) = 1;
    *(_QWORD *)(v0 + 96) = v49;
    *(_QWORD *)(v0 + 104) = v48;
    v15 = swift_task_create(v40 | 0x3100, v61, (char *)&type metadata for () + 8, &unk_100266750, v36);
    swift_release(v67);
    swift_release(v15);
    v7 = sub_1000087A0(v14, (uint64_t *)&unk_100265180);
    v9 = v62;
    v10 = v66;
  }
  if (v10)
  {
    v16 = (v10 - 1) & v10;
    v17 = __clz(__rbit64(v10)) | (v9 << 6);
    v18 = v9;
LABEL_32:
    v22 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v17);
    swift_retain(v22);
    if (!v22)
      goto LABEL_40;
    goto LABEL_33;
  }
  v23 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v23 >= v55)
      goto LABEL_40;
    v24 = *(_QWORD *)(v56 + 8 * v23);
    v18 = v9 + 1;
    if (!v24)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v55)
        goto LABEL_40;
      v24 = *(_QWORD *)(v56 + 8 * v18);
      if (!v24)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v55)
          goto LABEL_40;
        v24 = *(_QWORD *)(v56 + 8 * v18);
        if (!v24)
        {
          v18 = v9 + 4;
          if (v9 + 4 >= v55)
            goto LABEL_40;
          v24 = *(_QWORD *)(v56 + 8 * v18);
          if (!v24)
          {
            v25 = v9 + 5;
            while (v55 != v25)
            {
              v24 = *(_QWORD *)(v56 + 8 * v25++);
              if (v24)
              {
                v18 = v25 - 1;
                goto LABEL_31;
              }
            }
LABEL_40:
            v51 = *(_QWORD *)(v0 + 192);
            v50 = *(_QWORD *)(v0 + 200);
            v52 = *(_QWORD *)(v0 + 184);
            sub_100086D50(v1);
            swift_task_dealloc(v50);
            swift_task_dealloc(v51);
            swift_task_dealloc(v52);
            (*(void (**)(void))(v0 + 8))();
            return;
          }
        }
      }
    }
LABEL_31:
    v16 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v18 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_1001A2870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  v7 = type metadata accessor for PreferenceStreamChange(0);
  v6[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[8] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[9] = v9;
  v6[10] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v6[11] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[12] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v6[13] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[14] = swift_task_alloc(v13);
  v6[15] = swift_task_alloc(v13);
  v6[16] = swift_task_alloc(v13);
  return swift_task_switch(sub_1001A2920, 0, 0);
}

uint64_t sub_1001A2920(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  static Task<>.checkCancellation()(a1);
  v4 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                      + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
  v2 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                  + 1));
  *(_QWORD *)(v1 + 136) = v2;
  *v2 = v1;
  v2[1] = sub_1001A29EC;
  return v4(*(_QWORD *)(v1 + 128));
}

uint64_t sub_1001A29EC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_task_switch(sub_1001A2A40, 0, 0);
}

uint64_t sub_1001A2A40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v0[15];
  v1 = v0[16];
  v4 = v0[12];
  v3 = v0[13];
  v5 = v0[10];
  v6 = v0[11];
  v8 = v0[8];
  v7 = v0[9];
  v9 = v0[7];
  v22 = v9;
  v23 = v5;
  v10 = v0[5];
  v24 = v0[4];
  v25 = v0[6];
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[18] = v11;
  v11(v2, v1, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v10, v9);
  v12 = *(unsigned __int8 *)(v4 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v3 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = (v15 + v14 + 8) & ~v15;
  v17 = (v7 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_1002572D8, v17 + 8, v12 | v15 | 7);
  v0[19] = v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v18 + v13, v2, v6);
  *(_QWORD *)(v18 + v14) = v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v18 + v16, v23, v22);
  *(_QWORD *)(v18 + v17) = v25;
  v19 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v24);
  v20 = (_QWORD *)swift_task_alloc(v19);
  v0[20] = v20;
  *v20 = v0;
  v20[1] = sub_1001A2BAC;
  return withTimeout<A>(_:block:)(v20, 0x8AC7230489E80000, 0, &unk_100266760, v18, (char *)&type metadata for () + 8);
}

uint64_t sub_1001A2BAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001A2C84;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 152));
    v4 = sub_1001A2C18;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001A2C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A2C84()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t type;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  swift_release(*(_QWORD *)(v0 + 152));
  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027B318);
  v2(v4, v3, v5);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 96);
  if (v10)
  {
    v32 = *(_QWORD *)(v0 + 128);
    v16 = swift_slowAlloc(22, -1);
    v30 = (uint64_t *)swift_slowAlloc(8, -1);
    v31 = swift_slowAlloc(32, -1);
    v33 = v31;
    *(_DWORD *)v16 = 136446466;
    type = v9;
    v17 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    v20 = v19;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v18, v19, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v20);
    v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v21(v13, v15);
    *(_WORD *)(v16 + 12) = 2114;
    swift_errorRetain(v11);
    v22 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 24) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v16 + 14, v16 + 22);
    *v30 = v22;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Error from client %{public}s error: %{public}@", (uint8_t *)v16, 0x16u);
    v23 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v30, 1, v23);
    swift_slowDealloc(v30, -1, -1);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease(v11);
    v21(v32, v15);
  }
  else
  {

    swift_errorRelease(v11);
    swift_errorRelease(v11);
    v24 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v24(v13, v15);
    swift_errorRelease(v11);
    v24(v12, v15);
  }
  v25 = *(_QWORD *)(v0 + 120);
  v26 = *(_QWORD *)(v0 + 112);
  v27 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A2F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[9] = swift_task_alloc(v7);
  v4[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_1001A300C, 0, 0);
}

uint64_t sub_1001A300C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = v0[4];
  v2 = v0[10];
  v3 = v0[7];
  v4 = v0[8];
  v5 = type metadata accessor for Logger(0);
  v0[11] = sub_100037A9C(v5, (uint64_t)qword_10027B318);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[12] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[10];
  v12 = v0[7];
  v13 = v0[8];
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v22 = v21;
    *(_DWORD *)v14 = 136446210;
    v15 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v18 = v17;
    v0[3] = sub_10002BA84(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sending preferences update to client %{public}s", v14, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
  }

  v0[13] = v19;
  return swift_task_switch(sub_1001A3220, v0[5], 0);
}

uint64_t sub_1001A3220()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 112) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  *(_QWORD *)(v0 + 120) = v2;
  *v2 = v0;
  v2[1] = sub_1001A32B0;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_1001A32B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 40);
    v5 = sub_1000C9020;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 40);
    swift_task_dealloc(*(_QWORD *)(v2 + 112));
    v5 = sub_1001A3324;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001A3324()
{
  return swift_task_switch(sub_1001A3338, 0, 0);
}

uint64_t sub_1001A3338()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 96))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    v14(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully sent preferences update to client %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 104))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  }

  v12 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A34F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[4] = a1;
  v3[5] = a2;
  v4 = type metadata accessor for SystemVersionNumber(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[8] = swift_task_alloc(v6);
  v3[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_1001A3564, v2, 0);
}

uint64_t sub_1001A3564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  NSObject *log;
  uint64_t v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027B318);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v2, v1, v4);
  v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v3, v6, v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  v12 = os_log_type_enabled(v10, v11);
  v14 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 48);
  v15 = *(_QWORD *)(v0 + 56);
  if (v12)
  {
    v30 = *(_QWORD *)(v0 + 64);
    type = v11;
    v17 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v33 = v32;
    *(_DWORD *)v17 = 136315394;
    log = v10;
    v18 = sub_100018A7C(&qword_100260108, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v21 = v20;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v19, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v13, v16);
    *(_WORD *)(v17 + 12) = 2080;
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v25 = v24;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v23, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v25);
    v22(v30, v16);
    _os_log_impl((void *)&_mh_execute_header, log, type, "STUB: migrate from %s to %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v26 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v26(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48));
    v26(v14, v16);

  }
  v27 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A37F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated15SettingsService_serviceDescription, &qword_1002626D0);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15SettingsService_trampoline));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15SettingsService_connectionPool));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15SettingsService_preferencesUpdateQueue));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated15SettingsService_xpcSessionManager));
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated15SettingsService_dataManagerStateStream, &qword_1002626C0);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1001A388C()
{
  return type metadata accessor for SettingsService(0);
}

uint64_t type metadata accessor for SettingsService(uint64_t a1)
{
  uint64_t result;

  result = qword_1002664A8;
  if (!qword_1002664A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsService);
  return result;
}

void sub_1001A38D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[1] = &unk_1001FA080;
  sub_1000C926C(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_1001FA098;
    v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_1000C92C0(319);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 8, v6, a1 + 80);
    }
  }
}

uint64_t sub_1001A3988()
{
  uint64_t v0;

  return swift_task_switch(sub_1001A399C, v0, 0);
}

uint64_t sub_1001A399C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B318);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "STUB: initialLaunchProcessing", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A3A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1002664DC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_1001A34F4(a1, a2);
}

uint64_t sub_1001A3AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for SettingsService(0);
  *v4 = v2;
  v4[1] = sub_1000087DC;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_1001A3B38()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1002664BC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_10019F9D4();
}

uint64_t sub_1001A3B7C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1002664C4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000087DC;
  return sub_1001A0064();
}

uint64_t sub_1001A3BC0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for SettingsService(0);
  v1 = sub_100018A7C(&qword_100261ED0, 255, type metadata accessor for SettingsService, (uint64_t)&unk_1001FA0D8);
  return ActorServiceProtocol.description.getter(v0, v1);
}

uint64_t sub_1001A3C14()
{
  return sub_100018A7C(&qword_100266618, 255, type metadata accessor for SettingsService, (uint64_t)&unk_1001FA0B0);
}

uint64_t sub_1001A3C44()
{
  return sub_100018A7C(qword_100266620, 255, type metadata accessor for SettingsService, (uint64_t)&unk_1001FA138);
}

uint64_t sub_1001A3C74(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(&qword_100266660, a2, (uint64_t (*)(uint64_t))type metadata accessor for SettingsServiceClient, (uint64_t)&unk_1001FA190);
}

uint64_t sub_1001A3CA0(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C((unint64_t *)&unk_100266668, a2, (uint64_t (*)(uint64_t))type metadata accessor for SettingsServiceClient, (uint64_t)&unk_1001FA1B8);
}

uint64_t sub_1001A3CCC(uint64_t a1)
{
  uint64_t v1;

  return sub_10019E214(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001A3CD4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PreferenceStreamChange(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001A3D58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PreferenceStreamChange(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = (uint64_t)v1 + ((v4 + 48) & ~v4);
  v10 = (_QWORD *)swift_task_alloc(dword_100266684);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_10019E36C(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_1001A3DF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PreferenceStreamChange(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001A3E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PreferenceStreamChange(0) - 8) + 80);
  v3 = v0 + ((v2 + 32) & ~v2);
  v4 = swift_task_alloc(dword_100266694);
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10003BF7C;
  *(_QWORD *)(v4 + 88) = v3;
  *(_OWORD *)(v4 + 72) = v5;
  return swift_task_switch(sub_10019E7A8, 0, 0);
}

uint64_t sub_1001A3EEC(uint64_t a1)
{
  return sub_10019F22C(a1);
}

uint64_t sub_1001A3F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001A3F14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001A3F1C(uint64_t a1)
{
  uint64_t v1;

  return sub_10019EA20(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001A3F24()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_100037A5C(&qword_100260538) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 5));
  v5 = type metadata accessor for Device(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(&v0[v3], 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(&v0[v3], v5);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1001A3FD4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_100260538) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = (uint64_t)v1 + ((v4 + 48) & ~v4);
  v10 = (_QWORD *)swift_task_alloc(dword_1002666AC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_10019EB6C(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_1001A4070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_100037A5C(&qword_100260538) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  v5 = type metadata accessor for Device(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1001A4118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_100260538) - 8) + 80);
  v3 = v0 + ((v2 + 32) & ~v2);
  v4 = swift_task_alloc(dword_1002666BC);
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10003BF7C;
  *(_QWORD *)(v4 + 88) = v3;
  *(_OWORD *)(v4 + 72) = v5;
  return swift_task_switch(sub_10019EFCC, 0, 0);
}

unint64_t sub_1001A419C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002654F0;
  if (!qword_1002654F0)
  {
    v1 = sub_10003C1FC(&qword_100260538);
    sub_100018A7C(&qword_100265480, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, &qword_1002654F0);
  }
  return result;
}

uint64_t sub_1001A4220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for PreferenceStreamChange(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v7 = (_QWORD *)swift_task_alloc(dword_1002666CC);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_1001A1AFC(v4, v5, v6);
}

uint64_t sub_1001A42AC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_task_switch(sub_1001A42C4, 0, 0);
}

uint64_t sub_1001A42C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B318);
  v3 = swift_retain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_DWORD *)v8 = 136315138;
    v15 = v9;
    *(_QWORD *)(v0 + 16) = v7;
    v10 = type metadata accessor for SettingsServiceClient();
    swift_retain(v7);
    v11 = String.init<A>(describing:)(v0 + 16, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_release_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Settings Service: removed connection: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_release_n(*(_QWORD *)(v0 + 24), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A4490(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 32) = a2;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_1001A44AC, 0, 0);
}

uint64_t sub_1001A44AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 24);
    swift_errorRetain(v1);
    if (qword_10025FB68 != -1)
      swift_once(&qword_10025FB68, sub_10019F540);
    v2 = type metadata accessor for Logger(0);
    sub_100037A9C(v2, (uint64_t)qword_10027B318);
    swift_errorRetain(v1);
    v3 = swift_errorRetain(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 24);
    if (v6)
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      v13 = swift_slowAlloc(32, -1);
      v14 = v13;
      *(_DWORD *)v8 = 136446466;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000016, 0x80000001002018A0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2114;
      swift_errorRetain(v1);
      v10 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(_QWORD *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 14, v8 + 22);
      *v9 = v10;
      sub_10007E9BC(v7, 1);
      sub_10007E9BC(v7, 1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error: %{public}@", (uint8_t *)v8, 0x16u);
      v11 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      sub_10007E9BC(v7, 1);
    }
    else
    {
      sub_10007E9BC(*(_QWORD *)(v0 + 24), 1);
      sub_10007E9BC(v7, 1);
      swift_errorRelease(v1);

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A4718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for PreferenceStreamChange(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v7 = (_QWORD *)swift_task_alloc(dword_1002666CC);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_1000087DC;
  return sub_1001A1AFC(v4, v5, v6);
}

uint64_t sub_1001A47B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for PreferenceStreamChange(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001A4830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for PreferenceStreamChange(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc(dword_1002666FC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003BF7C;
  return sub_1001A1C68(a1, v6, v7, v8);
}

uint64_t sub_1001A48C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_100266734);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_10003BF7C;
  return sub_1001A22D4(a1, a2, v6, v7, v8);
}

uint64_t sub_1001A4944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for PreferenceStreamChange(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001A49CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for PreferenceStreamChange(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_10026674C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10003BF7C;
  return sub_1001A2870(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_1001A4A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for PreferenceStreamChange(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v5));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_1001A4B4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for PreferenceStreamChange(0) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v1 + v6);
  v10 = v1 + v8;
  v11 = (_QWORD *)swift_task_alloc(dword_10026675C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10003BF7C;
  return sub_1001A2F98(a1, v1 + v5, v9, v10);
}

uint64_t sub_1001A4C20()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A4C44()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10026676C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_1002664D4);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_1001A0C14();
}

uint64_t sub_1001A4CA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100266784);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003D330;
  return sub_10019FF20(a1, v1);
}

uint64_t sub_1001A4CF8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001A4D2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(dword_10026679C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_1002664CC);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10003BF7C;
  return sub_1001A06AC(v2);
}

ValueMetadata *type metadata accessor for SettingsService.Error()
{
  return &type metadata for SettingsService.Error;
}

uint64_t sub_1001A4DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4[6] = a2;
  v4[7] = a3;
  v4[5] = a1;
  v5 = type metadata accessor for Destination(0);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v4[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v4[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[12] = v8;
  v4[13] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Account(0);
  v4[14] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[15] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[16] = swift_task_alloc(v11);
  v4[17] = swift_task_alloc(v11);
  return swift_task_switch(sub_1001A4E88, v3, 0);
}

uint64_t sub_1001A4E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)type = *(_QWORD *)(v0 + 104);
  v46 = *(_QWORD *)(v0 + 72);
  v50 = *(_QWORD *)(v0 + 64);
  v52 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 48);
  v48 = *(_QWORD *)(v0 + 56);
  v8 = type metadata accessor for Logger(0);
  sub_100037A9C(v8, (uint64_t)qword_10027B330);
  v9 = v1;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v10(v2, v9, v3);
  (*(void (**)(os_log_type_t *, uint64_t, uint64_t))(v5 + 16))(*(os_log_type_t **)type, v7, v6);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v52, v48, v50);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 136);
  if (v14)
  {
    v16 = *(_QWORD *)(v0 + 128);
    v41 = *(_QWORD *)(v0 + 120);
    v17 = *(_QWORD *)(v0 + 112);
    v42 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 88);
    v43 = *(_QWORD *)(v0 + 96);
    v49 = *(_QWORD *)(v0 + 80);
    v51 = *(_QWORD *)(v0 + 72);
    v47 = *(_QWORD *)(v0 + 64);
    v19 = swift_slowAlloc(32, -1);
    v53 = swift_slowAlloc(96, -1);
    v54 = v53;
    *(_DWORD *)v19 = 136315650;
    typea = v13;
    v10(v16, v15, v17);
    v20 = String.init<A>(describing:)(v16, v17);
    v22 = v21;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v20, v21, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v15, v17);
    *(_WORD *)(v19 + 12) = 2080;
    v23 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v18, v23);
    v26 = v25;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v24, v25, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v18);
    *(_WORD *)(v19 + 22) = 2080;
    v27 = sub_100004EA8(&qword_100261998, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v47, v27);
    v30 = v29;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v28, v29, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v19 + 24, v19 + 32);
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v47);
    _os_log_impl((void *)&_mh_execute_header, v12, typea, "messageDelivered: %s id %s from: %s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy(v53, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 96);
    v31 = *(_QWORD *)(v0 + 104);
    v34 = *(_QWORD *)(v0 + 80);
    v33 = *(_QWORD *)(v0 + 88);
    v35 = *(_QWORD *)(v0 + 64);
    v36 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112));
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
  }

  v37 = *(_QWORD *)(v0 + 128);
  v38 = *(_QWORD *)(v0 + 104);
  v39 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A5238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1002668B4);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return sub_1001A528C(a2);
}

uint64_t sub_1001A528C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v2[28] = a1;
  v2[29] = v1;
  v3 = type metadata accessor for HashAlgorithm(0);
  v2[30] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[31] = v4;
  v2[32] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100262930) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[33] = swift_task_alloc(v5);
  v2[34] = swift_task_alloc(v5);
  v6 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v2[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Handle(0);
  v2[36] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[37] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[38] = swift_task_alloc(v9);
  v2[39] = swift_task_alloc(v9);
  v10 = type metadata accessor for UUID(0);
  v2[40] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[41] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[42] = swift_task_alloc(v12);
  v2[43] = swift_task_alloc(v12);
  v13 = type metadata accessor for HandleType(0);
  v2[44] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[45] = v14;
  v2[46] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100037A5C(&qword_100260950);
  v2[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Friend(0);
  v2[48] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[49] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[50] = swift_task_alloc(v18);
  v2[51] = swift_task_alloc(v18);
  v2[52] = swift_task_alloc(v18);
  v2[53] = swift_task_alloc(v18);
  v19 = type metadata accessor for FindingTokenEnvelopeV1(0);
  v2[54] = v19;
  v20 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[55] = swift_task_alloc(v20);
  v2[56] = swift_task_alloc(v20);
  v2[57] = swift_task_alloc(v20);
  v2[58] = swift_task_alloc(v20);
  v2[59] = swift_task_alloc(v20);
  return swift_task_switch(sub_1001A54A8, v1, 0);
}

uint64_t sub_1001A54A8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t My;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = (_QWORD *)(v0 + 16);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 472);
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 480) = sub_100037A9C(v4, (uint64_t)qword_10027B330);
  v5 = sub_100025C70(v2, v3, type metadata accessor for FindingTokenEnvelopeV1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 472);
  if (v8)
  {
    v10 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    *(_DWORD *)v10 = 136446466;
    v42 = v38;
    *(_QWORD *)(v0 + 208) = sub_10002BA84(0xD000000000000017, 0x8000000100201950, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2080;
    v11 = sub_10005F014();
    v13 = v12;
    *(_QWORD *)(v0 + 216) = sub_10002BA84(v11, v12, &v42);
    v1 = (_QWORD *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v13);
    sub_100024990(v9, type metadata accessor for FindingTokenEnvelopeV1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s payload: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_100024990(*(_QWORD *)(v0 + 472), type metadata accessor for FindingTokenEnvelopeV1);
  }

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v15 = sub_10003276C(v1);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v15, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v1);
  v16 = sub_10002BB90(v1);
  if ((My & 1) != 0)
  {
    v17 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 488) = v17;
    *v17 = v0;
    v17[1] = sub_1001A5950;
    return daemon.getter();
  }
  else
  {
    v19 = Logger.logObject.getter(v16);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v42 = v22;
      *(_DWORD *)v21 = 136446210;
      *(_QWORD *)(v0 + 112) = sub_10002BA84(0xD000000000000017, 0x8000000100201950, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v21 + 4, v21 + 12);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s Feature.FindMy.redStripe FF disabled.", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }

    v23 = *(_QWORD *)(v0 + 464);
    v25 = *(_QWORD *)(v0 + 448);
    v24 = *(_QWORD *)(v0 + 456);
    v26 = *(_QWORD *)(v0 + 440);
    v28 = *(_QWORD *)(v0 + 416);
    v27 = *(_QWORD *)(v0 + 424);
    v30 = *(_QWORD *)(v0 + 400);
    v29 = *(_QWORD *)(v0 + 408);
    v31 = *(_QWORD *)(v0 + 376);
    v32 = *(_QWORD *)(v0 + 368);
    v33 = *(_QWORD *)(v0 + 344);
    v34 = *(_QWORD *)(v0 + 336);
    v35 = *(_QWORD *)(v0 + 312);
    v36 = *(_QWORD *)(v0 + 304);
    v37 = *(_QWORD *)(v0 + 280);
    v39 = *(_QWORD *)(v0 + 272);
    v40 = *(_QWORD *)(v0 + 264);
    v41 = *(_QWORD *)(v0 + 256);
    swift_task_dealloc(*(_QWORD *)(v0 + 472));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A5950(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 488);
  v5 = *v1;
  *(_QWORD *)(*v1 + 496) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 504) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1001A5A38;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001A5A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 504);
  v3[64] = a1;
  v3[65] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[29];
    v6 = sub_1001A6C60;
  }
  else
  {
    v7 = v3[29];
    swift_release(v3[62]);
    v6 = sub_1001A5AB8;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001A5AB8()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (uint64_t *)v0[28];
  v3 = *v1;
  v2 = v1[1];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[45] + 104))(v0[46], enum case for HandleType.following(_:), v0[44]);
  v4 = (_QWORD *)swift_task_alloc(dword_100262DD4);
  v0[66] = v4;
  *v4 = v0;
  v4[1] = sub_1001A5B40;
  return sub_1000E6660(v0[47], v3, v2, v0[46], 1);
}

uint64_t sub_1001A5B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 360);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 368);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 352);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 528));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1001A5BB8, v4, 0);
}

uint64_t sub_1001A5BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75[2];

  v1 = v0 + 104;
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 376);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_1000087A0(v4, &qword_100260950);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 328);
    v71 = *(_QWORD *)(v0 + 320);
    v6 = *(_QWORD *)(v0 + 312);
    v8 = *(_QWORD *)(v0 + 288);
    v7 = *(_QWORD *)(v0 + 296);
    v9 = *(_QWORD *)(v0 + 280);
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 424), v4, v2);
    v11 = Friend.handle.getter(v10);
    Handle.peerID.getter(v11);
    v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v12(v6, v8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v71) != 1)
    {
      v73 = v12;
      v34 = *(_QWORD *)(v0 + 464);
      v36 = *(_QWORD *)(v0 + 416);
      v35 = *(_QWORD *)(v0 + 424);
      v37 = *(_QWORD *)(v0 + 384);
      v38 = *(_QWORD *)(v0 + 392);
      v39 = *(_QWORD *)(v0 + 224);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 32))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 320));
      sub_100025C70(v39, v34, type metadata accessor for FindingTokenEnvelopeV1);
      v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v36, v35, v37);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.error.getter(v41);
      v43 = os_log_type_enabled(v41, v42);
      v44 = *(uint64_t **)(v0 + 464);
      v45 = *(_QWORD *)(v0 + 416);
      v47 = *(_QWORD *)(v0 + 384);
      v46 = *(_QWORD *)(v0 + 392);
      if (v43)
      {
        v68 = v42;
        v61 = *(_QWORD *)(v0 + 392);
        v48 = *(_QWORD *)(v0 + 304);
        v60 = *(_QWORD *)(v0 + 288);
        v49 = swift_slowAlloc(42, -1);
        v62 = swift_slowAlloc(64, -1);
        v75[0] = v62;
        *(_DWORD *)v49 = 141558787;
        *(_QWORD *)(v0 + 176) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v49 + 4, v49 + 12);
        *(_WORD *)(v49 + 12) = 2081;
        v59 = v47;
        v51 = *v44;
        v50 = v44[1];
        swift_bridgeObjectRetain(v50);
        *(_QWORD *)(v0 + 184) = sub_10002BA84(v51, v50, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v49 + 14, v49 + 22);
        swift_bridgeObjectRelease(v50);
        sub_100024990((uint64_t)v44, type metadata accessor for FindingTokenEnvelopeV1);
        *(_WORD *)(v49 + 22) = 2160;
        *(_QWORD *)(v0 + 192) = 1752392040;
        v52 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v49 + 24, v49 + 32);
        *(_WORD *)(v49 + 32) = 2081;
        v53 = Friend.handle.getter(v52);
        v54 = Handle.identifier.getter(v53);
        v56 = v55;
        v73(v48, v60);
        *(_QWORD *)(v0 + 200) = sub_10002BA84(v54, v56, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v49 + 34, v49 + 42);
        swift_bridgeObjectRelease(v56);
        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v45, v59);
        _os_log_impl((void *)&_mh_execute_header, v41, v68, "Found following with serverID: %{private,mask.hash}s\nhandle.identifier: %{private,mask.hash}s", (uint8_t *)v49, 0x2Au);
        swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v49, -1, -1);
      }
      else
      {
        sub_100024990((uint64_t)v44, type metadata accessor for FindingTokenEnvelopeV1);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
      }

      v57 = (_QWORD *)(*(_QWORD *)(v0 + 224) + *(int *)(*(_QWORD *)(v0 + 432) + 24));
      *(_QWORD *)(v0 + 536) = *v57;
      v58 = v57[1];
      *(_QWORD *)(v0 + 544) = v58;
      __asm { BR              X10 }
    }
    v13 = *(_QWORD *)(v0 + 280);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 392) + 8))(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 384));
    sub_1000087A0(v13, (uint64_t *)&unk_1002675F0);
    v1 = v0 + 104;
  }
  v14 = sub_100025C70(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 440), type metadata accessor for FindingTokenEnvelopeV1);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(_QWORD *)(v0 + 512);
  v19 = *(uint64_t **)(v0 + 440);
  if (v17)
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(32, -1);
    v75[0] = v21;
    *(_DWORD *)v20 = 141558275;
    *(_QWORD *)(v0 + 104) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v0 + 112, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v23 = *v19;
    v22 = v19[1];
    swift_bridgeObjectRetain(v22);
    *(_QWORD *)(v0 + 88) = sub_10002BA84(v23, v22, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease(v22);
    sub_100024990((uint64_t)v19, type metadata accessor for FindingTokenEnvelopeV1);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "No such following with serverID: %{private,mask.hash}s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
    swift_release(v18);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 512));
    sub_100024990((uint64_t)v19, type metadata accessor for FindingTokenEnvelopeV1);
  }

  v24 = *(_QWORD *)(v0 + 464);
  v26 = *(_QWORD *)(v0 + 448);
  v25 = *(_QWORD *)(v0 + 456);
  v27 = *(_QWORD *)(v0 + 440);
  v29 = *(_QWORD *)(v0 + 416);
  v28 = *(_QWORD *)(v0 + 424);
  v31 = *(_QWORD *)(v0 + 400);
  v30 = *(_QWORD *)(v0 + 408);
  v32 = *(_QWORD *)(v0 + 376);
  v63 = *(_QWORD *)(v0 + 368);
  v64 = *(_QWORD *)(v0 + 344);
  v65 = *(_QWORD *)(v0 + 336);
  v66 = *(_QWORD *)(v0 + 312);
  v67 = *(_QWORD *)(v0 + 304);
  v69 = *(_QWORD *)(v0 + 280);
  v70 = *(_QWORD *)(v0 + 272);
  v72 = *(_QWORD *)(v0 + 264);
  v74 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v74);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A623C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_log_t log, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  int v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  int v89;
  _BOOL4 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v130;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v49 = v45[28];
  if (BYTE6(v47) != 32)
  {
    v82 = v45[56];
    v83 = v45[53];
    v84 = v45[50];
    v85 = v45[48];
    sub_100037AB4(v44, v47);
    sub_100025C70(v49, v82, type metadata accessor for FindingTokenEnvelopeV1);
    v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 - 120))(v84, v83, v85);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.error.getter(v87);
    v89 = v88;
    v90 = os_log_type_enabled(v87, v88);
    v91 = v45[64];
    v92 = v45[56];
    v93 = v45[53];
    v94 = v45[50];
    if (v90)
    {
      v140 = v45[49];
      v141 = v45[48];
      *(_QWORD *)(v48 - 120) = v45[43];
      v143 = v45[41];
      *(_QWORD *)(v48 - 128) = v45[40];
      v135 = v45[38];
      v137 = v45[36];
      v133 = v94;
      v96 = v45[31];
      v95 = v45[32];
      v97 = v45[30];
      v142 = v91;
      v98 = v92;
      v132 = v92;
      v99 = swift_slowAlloc(42, -1);
      v139 = swift_slowAlloc(64, -1);
      *(_QWORD *)(v48 - 88) = v139;
      *(_DWORD *)v99 = 141558787;
      v45[12] = 1752392040;
      ((void (*)(uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v99 + 4, v99 + 12);
      *(_WORD *)(v99 + 12) = 2081;
      v100 = (uint64_t *)(v98 + *(int *)(v46 + 24));
      *(_DWORD *)(v48 - 112) = v89;
      v134 = v87;
      v101 = *v100;
      v102 = v100[1];
      v45[9] = *v100;
      v45[10] = v102;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v96 + 104))(v95, enum case for HashAlgorithm.sha256(_:), v97);
      sub_10001A484(v101, v102);
      v103 = sub_10003EC14();
      v104 = DataProtocol.hash(algorithm:)(v95, &type metadata for Data, v103);
      *(_QWORD *)(v48 - 96) = v93;
      v106 = v105;
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v97);
      sub_100037AB4(v45[9], v45[10]);
      v45[7] = v104;
      v45[8] = v106;
      v107 = DataProtocol.hexString.getter(&type metadata for Data, v103);
      v109 = v108;
      sub_100037AB4(v104, v106);
      v45[15] = sub_10002BA84(v107, v109, (uint64_t *)(v48 - 88));
      ((void (*)(uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v99 + 14, v99 + 22);
      swift_bridgeObjectRelease(v109);
      sub_100024990(v132, type metadata accessor for FindingTokenEnvelopeV1);
      *(_WORD *)(v99 + 22) = 2160;
      v45[16] = 1752392040;
      v110 = ((uint64_t (*)(uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v99 + 24, v99 + 32);
      *(_WORD *)(v99 + 32) = 2081;
      v111 = Friend.handle.getter(v110);
      v112 = Handle.identifier.getter(v111);
      v114 = v113;
      (*(void (**)(uint64_t, uint64_t))(v48 - 104))(v135, v137);
      v45[17] = sub_10002BA84(v112, v114, (uint64_t *)(v48 - 88));
      ((void (*)(uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v99 + 34, v99 + 42);
      swift_bridgeObjectRelease(v114);
      v115 = *(void (**)(uint64_t, uint64_t))(v140 + 8);
      v115(v133, v141);
      _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)*(_DWORD *)(v48 - 112), "Invalid shared secret %{private,mask.hash}s for handle: %{private,mask.hash}s", (uint8_t *)v99, 0x2Au);
      swift_arrayDestroy(v139, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v139, -1, -1);
      swift_slowDealloc(v99, -1, -1);
      swift_release(v142);

      (*(void (**)(_QWORD, _QWORD))(v143 + 8))(*(_QWORD *)(v48 - 120), *(_QWORD *)(v48 - 128));
      v115(*(_QWORD *)(v48 - 96), v141);
    }
    else
    {
      v116 = v45[48];
      v117 = v45[43];
      v118 = v45[40];
      v119 = v45[41];
      swift_release(v45[64]);

      v120 = *(void (**)(uint64_t, uint64_t))(v48 - 128);
      v120(v94, v116);
      sub_100024990(v92, type metadata accessor for FindingTokenEnvelopeV1);
      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v117, v118);
      v120(v93, v116);
    }
    JUMPOUT(0x1001A5E28);
  }
  v50 = v45[57];
  v52 = v45[42];
  v51 = v45[43];
  v53 = v45[40];
  v54 = v45[41];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v48 - 120))(v45[51], v45[53], v45[48]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v52, v51, v53);
  v55 = sub_100025C70(v49, v50, type metadata accessor for FindingTokenEnvelopeV1);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.default.getter(v56);
  v58 = v57;
  v59 = os_log_type_enabled(v56, v57);
  v60 = v45[57];
  if (v59)
  {
    v147 = v45[57];
    v61 = v45[51];
    v138 = v45[48];
    v145 = v45[42];
    v146 = v45[41];
    v144 = v45[40];
    *(_QWORD *)(v48 - 96) = v56;
    v62 = v45[38];
    v136 = v45[36];
    v63 = swift_slowAlloc(42, -1);
    v64 = swift_slowAlloc(96, -1);
    *(_QWORD *)(v48 - 112) = v64;
    *(_QWORD *)(v48 - 88) = v64;
    *(_DWORD *)v63 = 141558787;
    v45[18] = 1752392040;
    v65 = ((uint64_t (*)(uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v63 + 4, v63 + 12);
    *(_WORD *)(v63 + 12) = 2081;
    *(_DWORD *)(v48 - 120) = v58;
    v66 = Friend.handle.getter(v65);
    v67 = ((uint64_t (*)(uint64_t))Handle.debugDescription.getter)(v66);
    v69 = v68;
    (*(void (**)(uint64_t, uint64_t))(v48 - 104))(v62, v136);
    v45[19] = sub_10002BA84(v67, v69, (uint64_t *)(v48 - 88));
    ((void (*)(uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v63 + 14, v63 + 22);
    swift_bridgeObjectRelease(v69);
    (*(void (**)(uint64_t, uint64_t))(v48 - 128))(v61, v138);
    *(_WORD *)(v63 + 22) = 2082;
    v70 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v71 = dispatch thunk of CustomStringConvertible.description.getter(v144, v70);
    v73 = v72;
    v45[20] = sub_10002BA84(v71, v72, (uint64_t *)(v48 - 88));
    ((void (*)(uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v63 + 24, v63 + 32);
    swift_bridgeObjectRelease(v73);
    v74 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
    v74(v145, v144);
    *(_WORD *)(v63 + 32) = 2080;
    v75 = type metadata accessor for Date(0);
    v76 = sub_100004EA8(&qword_100260AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v77 = dispatch thunk of CustomStringConvertible.description.getter(v75, v76);
    v79 = v78;
    v45[21] = sub_10002BA84(v77, v78, (uint64_t *)(v48 - 88));
    ((void (*)(uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v63 + 34, v63 + 42);
    swift_bridgeObjectRelease(v79);
    sub_100024990(v147, type metadata accessor for FindingTokenEnvelopeV1);
    v80 = *(NSObject **)(v48 - 96);
    _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)*(_DWORD *)(v48 - 120), "Adding %{private,mask.hash}s peer info %{public}s baseDate: %s", (uint8_t *)v63, 0x2Au);
    v81 = *(_QWORD *)(v48 - 112);
    swift_arrayDestroy(v81, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v63, -1, -1);

  }
  else
  {
    v122 = v45[41];
    v121 = v45[42];
    v123 = v45[40];
    (*(void (**)(_QWORD, _QWORD))(v48 - 128))(v45[51], v45[48]);
    v74 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
    v74(v121, v123);
    sub_100024990(v60, type metadata accessor for FindingTokenEnvelopeV1);

  }
  v45[69] = v74;
  v125 = v45[33];
  v124 = v45[34];
  v126 = v45[28] + *(int *)(v45[54] + 20);
  v127 = type metadata accessor for Date(0);
  v128 = *(_QWORD *)(v127 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 16))(v124, v126, v127);
  v129 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56);
  v129(v124, 0, 1, v127);
  v129(v125, 1, 1, v127);
  sub_10001A484(v44, v47);
  v130 = (_QWORD *)swift_task_alloc(dword_100261AAC);
  v45[70] = v130;
  *v130 = v45;
  v130[1] = sub_1001A6A3C;
  return sub_10008DE18(v45[43], v44, v47, v45[34], 0, 0xF000000000000000, v45[33]);
}

uint64_t sub_1001A6A3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 560);
  v4 = *(_QWORD *)(*v1 + 544);
  v5 = *(_QWORD *)(*v1 + 536);
  v7 = *(_QWORD *)(*v1 + 264);
  v6 = *(_QWORD *)(*v1 + 272);
  *(_QWORD *)(*v1 + 568) = v0;
  swift_task_dealloc(v3);
  sub_100037AB4(v5, v4);
  sub_1000087A0(v7, (uint64_t *)&unk_100262930);
  sub_1000087A0(v6, (uint64_t *)&unk_100262930);
  if (v0)
    v8 = sub_1001A6D9C;
  else
    v8 = sub_1001A6AE8;
  return swift_task_switch(v8, *(_QWORD *)(v2 + 232), 0);
}

uint64_t sub_1001A6AE8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
  v2 = *(_QWORD *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 536);
  v4 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 320);
  swift_release(*(_QWORD *)(v0 + 512));
  sub_100037AB4(v3, v2);
  v1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v9 = *(_QWORD *)(v0 + 464);
  v11 = *(_QWORD *)(v0 + 448);
  v10 = *(_QWORD *)(v0 + 456);
  v12 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 416);
  v13 = *(_QWORD *)(v0 + 424);
  v16 = *(_QWORD *)(v0 + 400);
  v15 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 376);
  v19 = *(_QWORD *)(v0 + 368);
  v20 = *(_QWORD *)(v0 + 344);
  v21 = *(_QWORD *)(v0 + 336);
  v22 = *(_QWORD *)(v0 + 312);
  v23 = *(_QWORD *)(v0 + 304);
  v24 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD *)(v0 + 272);
  v26 = *(_QWORD *)(v0 + 264);
  v27 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A6C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_release(*(_QWORD *)(v0 + 496));
  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 456);
  v4 = *(_QWORD *)(v0 + 440);
  v6 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 424);
  v8 = *(_QWORD *)(v0 + 400);
  v7 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 376);
  v11 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 304);
  v16 = *(_QWORD *)(v0 + 280);
  v17 = *(_QWORD *)(v0 + 272);
  v18 = *(_QWORD *)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A6D9C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
  v2 = *(_QWORD *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 536);
  v4 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 320);
  swift_release(*(_QWORD *)(v0 + 512));
  sub_100037AB4(v3, v2);
  v1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v9 = *(_QWORD *)(v0 + 464);
  v10 = *(_QWORD *)(v0 + 448);
  v11 = *(_QWORD *)(v0 + 456);
  v12 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 416);
  v13 = *(_QWORD *)(v0 + 424);
  v16 = *(_QWORD *)(v0 + 400);
  v15 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 376);
  v19 = *(_QWORD *)(v0 + 368);
  v20 = *(_QWORD *)(v0 + 344);
  v21 = *(_QWORD *)(v0 + 336);
  v22 = *(_QWORD *)(v0 + 312);
  v23 = *(_QWORD *)(v0 + 304);
  v24 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD *)(v0 + 272);
  v26 = *(_QWORD *)(v0 + 264);
  v27 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A6F1C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 80) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a3;
  return swift_task_switch(sub_1001A6F38, 0, 0);
}

uint64_t sub_1001A6F38()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v20;
  NSObject *v21;

  if ((*(_BYTE *)(v0 + 80) & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 24);
    swift_errorRetain(v4);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v5 = type metadata accessor for Logger(0);
    sub_100037A9C(v5, (uint64_t)qword_10027B330);
    swift_errorRetain(v4);
    v6 = swift_errorRetain(v4);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 24);
    if (v9)
    {
      v21 = v7;
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138543362;
      swift_errorRetain(v4);
      v12 = _swift_stdlib_bridgeErrorToNSError(v4);
      *(_QWORD *)(v0 + 16) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
      *v20 = v12;
      v7 = v21;
      sub_10007E9BC(v10, 1);
      sub_10007E9BC(v10, 1);
      _os_log_impl((void *)&_mh_execute_header, v21, v8, "receiveFindingToken error: %{public}@", v11, 0xCu);
      v13 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v20, 1, v13);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      sub_10007E9BC(*(_QWORD *)(v0 + 24), 1);
      sub_10007E9BC(v10, 1);
    }

    v14 = *(_QWORD *)(v0 + 24);
    v15 = sub_100097FB4();
    v16 = swift_allocError(&type metadata for NITokenService.Error, v15, 0, 0);
    *(_QWORD *)(v0 + 56) = v16;
    *v17 = v14;
    swift_errorRetain(v4);
    v1 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 64) = v1;
    v18 = (_QWORD *)swift_task_alloc(dword_100264B54);
    *(_QWORD *)(v0 + 72) = v18;
    *v18 = v0;
    v18[1] = sub_1001A71FC;
    v3 = v16;
  }
  else
  {
    v1 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 40) = v1;
    v2 = (_QWORD *)swift_task_alloc(dword_100264B54);
    *(_QWORD *)(v0 + 48) = v2;
    *v2 = v0;
    v2[1] = sub_1000A8B6C;
    v3 = 0;
  }
  return sub_100140EB8(0xD000000000000039, 0x80000001002001E0, v3, v1);
}

uint64_t sub_1001A71FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  return swift_task_switch(sub_1001A7264, 0, 0);
}

uint64_t sub_1001A7264()
{
  uint64_t v0;

  sub_10007E9BC(*(_QWORD *)(v0 + 24), 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A7298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1002668BC);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000087DC;
  return sub_1001A72FC(a2, a3);
}

uint64_t sub_1001A72FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v3[34] = a2;
  v3[35] = v2;
  v3[33] = a1;
  v3[36] = *v2;
  v4 = sub_100037A5C((uint64_t *)&unk_100265180);
  v3[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MessagingOptions(0);
  v3[38] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[39] = v6;
  v3[40] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_1002601E8);
  v3[41] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[42] = v8;
  v3[43] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FindingTokenEnvelopeV1(0);
  v3[44] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[45] = swift_task_alloc(v10);
  v3[46] = swift_task_alloc(v10);
  v11 = sub_100037A5C(&qword_100260580);
  v3[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Account(0);
  v3[48] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[49] = v13;
  v3[50] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100262930) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[51] = swift_task_alloc(v14);
  v3[52] = swift_task_alloc(v14);
  v3[53] = swift_task_alloc(v14);
  v15 = type metadata accessor for Date(0);
  v3[54] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v3[55] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[56] = swift_task_alloc(v17);
  v3[57] = swift_task_alloc(v17);
  v3[58] = swift_task_alloc(v17);
  v18 = sub_100037A5C(&qword_100260F80);
  v3[59] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for FriendSharedSecretsRecord(0);
  v3[60] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v3[61] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[62] = swift_task_alloc(v21);
  v3[63] = swift_task_alloc(v21);
  v22 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_1002675F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[64] = swift_task_alloc(v22);
  v3[65] = swift_task_alloc(v22);
  v23 = type metadata accessor for Handle(0);
  v3[66] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v3[67] = v24;
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[68] = swift_task_alloc(v25);
  v3[69] = swift_task_alloc(v25);
  v3[70] = swift_task_alloc(v25);
  v26 = type metadata accessor for UUID(0);
  v3[71] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v3[72] = v27;
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[73] = swift_task_alloc(v28);
  v3[74] = swift_task_alloc(v28);
  v29 = type metadata accessor for HandleType(0);
  v3[75] = v29;
  v30 = *(_QWORD *)(v29 - 8);
  v3[76] = v30;
  v3[77] = swift_task_alloc((*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100037A5C(&qword_100260950);
  v3[78] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v31 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Friend(0);
  v3[79] = v32;
  v33 = *(_QWORD *)(v32 - 8);
  v3[80] = v33;
  v34 = *(_QWORD *)(v33 + 64);
  v3[81] = v34;
  v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[82] = swift_task_alloc(v35);
  v3[83] = swift_task_alloc(v35);
  v3[84] = swift_task_alloc(v35);
  v3[85] = swift_task_alloc(v35);
  v3[86] = swift_task_alloc(v35);
  v3[87] = swift_task_alloc(v35);
  v3[88] = swift_task_alloc(v35);
  return swift_task_switch(sub_1001A768C, v2, 0);
}

uint64_t sub_1001A768C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t My;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[2];

  v1 = *(_QWORD *)(v0 + 272);
  v2 = qword_10025FB70;
  swift_bridgeObjectRetain(v1);
  if (v2 != -1)
  {
    swift_once(&qword_10025FB70, sub_1001B4288);
    v1 = *(_QWORD *)(v0 + 272);
  }
  v3 = v0 + 64;
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 712) = sub_100037A9C(v4, (uint64_t)qword_10027B330);
  v5 = swift_bridgeObjectRetain_n(v1, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 272);
  if (v8)
  {
    v53 = *(_QWORD *)(v0 + 264);
    v10 = swift_slowAlloc(32, -1);
    v58[0] = swift_slowAlloc(64, -1);
    v11 = v58[0];
    *(_DWORD *)v10 = 136446723;
    *(_QWORD *)(v0 + 248) = sub_10002BA84(0xD000000000000020, 0x8000000100201970, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2160;
    *(_QWORD *)(v0 + 256) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v10 + 14, v10 + 22);
    *(_WORD *)(v10 + 22) = 2081;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 200) = sub_10002BA84(v53, v9, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s from friendServerId: %{private,mask.hash}s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    v12 = v11;
    v3 = v0 + 64;
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 272), 2);
  }

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v14 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v14, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) != 0)
  {
    if ((sub_1001C30A4() & 1) != 0)
    {
      v15 = (_QWORD *)swift_task_alloc(dword_100261B0C);
      *(_QWORD *)(v0 + 720) = v15;
      *v15 = v0;
      v15[1] = sub_1001A7D20;
      return sub_100087F94();
    }
    v23 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
    v18 = Logger.logObject.getter(v23);
    v24 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v24))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v58[0] = v25;
      *(_DWORD *)v20 = 136446210;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000020, 0x8000000100201970, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v0 + 72, v20 + 4, v20 + 12);
      _os_log_impl((void *)&_mh_execute_header, v18, v24, "%{public}s isFindingCapable == false.", v20, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      v22 = v25;
      goto LABEL_13;
    }
  }
  else
  {
    v17 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v58[0] = v21;
      *(_DWORD *)v20 = 136446210;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD000000000000020, 0x8000000100201970, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v3, v20 + 4, v20 + 12);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Feature.FindMy.redStripe FF disabled.", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      v22 = v21;
LABEL_13:
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
  }

  v26 = *(_QWORD *)(v0 + 696);
  v27 = *(_QWORD *)(v0 + 688);
  v28 = *(_QWORD *)(v0 + 680);
  v29 = *(_QWORD *)(v0 + 672);
  v30 = *(_QWORD *)(v0 + 664);
  v31 = *(_QWORD *)(v0 + 656);
  v32 = *(_QWORD *)(v0 + 624);
  v33 = *(_QWORD *)(v0 + 616);
  v34 = *(_QWORD *)(v0 + 592);
  v35 = *(_QWORD *)(v0 + 584);
  v36 = *(_QWORD *)(v0 + 560);
  v37 = *(_QWORD *)(v0 + 552);
  v38 = *(_QWORD *)(v0 + 544);
  v39 = *(_QWORD *)(v0 + 520);
  v40 = *(_QWORD *)(v0 + 512);
  v41 = *(_QWORD *)(v0 + 504);
  v42 = *(_QWORD *)(v0 + 496);
  v43 = *(_QWORD *)(v0 + 472);
  v44 = *(_QWORD *)(v0 + 464);
  v45 = *(_QWORD *)(v0 + 456);
  v46 = *(_QWORD *)(v0 + 448);
  v47 = *(_QWORD *)(v0 + 424);
  v48 = *(_QWORD *)(v0 + 416);
  v49 = *(_QWORD *)(v0 + 408);
  v50 = *(_QWORD *)(v0 + 400);
  v51 = *(_QWORD *)(v0 + 376);
  v52 = *(_QWORD *)(v0 + 368);
  v54 = *(_QWORD *)(v0 + 360);
  v55 = *(_QWORD *)(v0 + 344);
  v56 = *(_QWORD *)(v0 + 320);
  v57 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 704));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A7D20(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 720);
  *(_QWORD *)(*v2 + 728) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 280);
  if (v1)
  {
    v7 = sub_1001AB410;
  }
  else
  {
    *(_BYTE *)(v4 + 1049) = a1 & 1;
    v7 = sub_1001A7D98;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001A7D98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (*(_BYTE *)(v0 + 1049) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 736) = v1;
    *v1 = v0;
    v1[1] = sub_1001A80E4;
    return daemon.getter();
  }
  else
  {
    v3 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v39 = v7;
      *(_DWORD *)v6 = 136446210;
      *(_QWORD *)(v0 + 72) = sub_10002BA84(0xD000000000000020, 0x8000000100201970, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v6 + 4, v6 + 12);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s this device is NOT eligible to respond to finding tokens request.", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    v8 = *(_QWORD *)(v0 + 696);
    v9 = *(_QWORD *)(v0 + 688);
    v10 = *(_QWORD *)(v0 + 680);
    v11 = *(_QWORD *)(v0 + 672);
    v12 = *(_QWORD *)(v0 + 664);
    v13 = *(_QWORD *)(v0 + 656);
    v14 = *(_QWORD *)(v0 + 624);
    v15 = *(_QWORD *)(v0 + 616);
    v16 = *(_QWORD *)(v0 + 592);
    v17 = *(_QWORD *)(v0 + 584);
    v18 = *(_QWORD *)(v0 + 560);
    v19 = *(_QWORD *)(v0 + 552);
    v20 = *(_QWORD *)(v0 + 544);
    v21 = *(_QWORD *)(v0 + 520);
    v22 = *(_QWORD *)(v0 + 512);
    v23 = *(_QWORD *)(v0 + 504);
    v24 = *(_QWORD *)(v0 + 496);
    v25 = *(_QWORD *)(v0 + 472);
    v26 = *(_QWORD *)(v0 + 464);
    v27 = *(_QWORD *)(v0 + 456);
    v28 = *(_QWORD *)(v0 + 448);
    v29 = *(_QWORD *)(v0 + 424);
    v30 = *(_QWORD *)(v0 + 416);
    v31 = *(_QWORD *)(v0 + 408);
    v32 = *(_QWORD *)(v0 + 400);
    v33 = *(_QWORD *)(v0 + 376);
    v34 = *(_QWORD *)(v0 + 368);
    v35 = *(_QWORD *)(v0 + 360);
    v36 = *(_QWORD *)(v0 + 344);
    v37 = *(_QWORD *)(v0 + 320);
    v38 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 704));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A80E4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 736);
  v5 = *v1;
  *(_QWORD *)(*v1 + 744) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[94] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[95] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[96] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1001A81DC;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001A81DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 752);
  v3[97] = a1;
  v3[98] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[35];
    v6 = sub_1001AB618;
  }
  else
  {
    v7 = v3[35];
    swift_release(v3[93]);
    v6 = sub_1001A825C;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001A825C()
{
  uint64_t *v0;
  uint64_t **v1;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[76] + 104))(v0[77], enum case for HandleType.follower(_:), v0[75]);
  v1 = (uint64_t **)swift_task_alloc(dword_100262DD4);
  v0[99] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1001A82D8;
  return sub_1000E6660(v0[78], v0[33], v0[34], v0[77], 1);
}

uint64_t sub_1001A82D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 616);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 608);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 600);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 280);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 792));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1001A8354, v4, 0);
}

uint64_t sub_1001A8354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_type_t v86;
  uint64_t v87[2];

  v1 = *(_QWORD *)(v0 + 640);
  v2 = *(_QWORD *)(v0 + 632);
  v3 = *(_QWORD *)(v0 + 624);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = &qword_100260950;
LABEL_5:
    sub_1000087A0(v3, v4);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 272));
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 776);
    v20 = *(_QWORD *)(v0 + 272);
    if (v18)
    {
      v21 = *(_QWORD *)(v0 + 264);
      v22 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(32, -1);
      v87[0] = v23;
      *(_DWORD *)v22 = 141558275;
      *(_QWORD *)(v0 + 80) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2081;
      swift_bridgeObjectRetain(v20);
      *(_QWORD *)(v0 + 88) = sub_10002BA84(v21, v20, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease_n(v20, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No follower with serverID for handle: %{private,mask.hash}s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
      swift_release(v19);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 776));
      swift_bridgeObjectRelease_n(v20, 2);
    }

    v24 = *(_QWORD *)(v0 + 696);
    v25 = *(_QWORD *)(v0 + 688);
    v26 = *(_QWORD *)(v0 + 680);
    v27 = *(_QWORD *)(v0 + 672);
    v28 = *(_QWORD *)(v0 + 664);
    v29 = *(_QWORD *)(v0 + 656);
    v30 = *(_QWORD *)(v0 + 624);
    v31 = *(_QWORD *)(v0 + 616);
    v32 = *(_QWORD *)(v0 + 592);
    v58 = *(_QWORD *)(v0 + 584);
    v59 = *(_QWORD *)(v0 + 560);
    v60 = *(_QWORD *)(v0 + 552);
    v61 = *(_QWORD *)(v0 + 544);
    v62 = *(_QWORD *)(v0 + 520);
    v63 = *(_QWORD *)(v0 + 512);
    v64 = *(_QWORD *)(v0 + 504);
    v65 = *(_QWORD *)(v0 + 496);
    v66 = *(_QWORD *)(v0 + 472);
    v67 = *(_QWORD *)(v0 + 464);
    v68 = *(_QWORD *)(v0 + 456);
    v69 = *(_QWORD *)(v0 + 448);
    v70 = *(_QWORD *)(v0 + 424);
    v71 = *(_QWORD *)(v0 + 416);
    v72 = *(_QWORD *)(v0 + 408);
    v73 = *(_QWORD *)(v0 + 400);
    v74 = *(_QWORD *)(v0 + 376);
    v76 = *(_QWORD *)(v0 + 368);
    v78 = *(_QWORD *)(v0 + 360);
    v80 = *(_QWORD *)(v0 + 344);
    v82 = *(_QWORD *)(v0 + 320);
    v85 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 704));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v85);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD *)(v0 + 704);
  v6 = *(_QWORD *)(v0 + 576);
  v84 = *(_QWORD *)(v0 + 568);
  v7 = *(_QWORD *)(v0 + 560);
  v8 = *(_QWORD *)(v0 + 536);
  v9 = *(_QWORD *)(v0 + 528);
  v10 = *(_QWORD *)(v0 + 520);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
  *(_QWORD *)(v0 + 800) = v11;
  v12 = v11(v5, v3, v2);
  v13 = Friend.handle.getter(v12);
  Handle.peerID.getter(v13);
  v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v0 + 808) = v14;
  v14(v7, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v84) == 1)
  {
    v3 = *(_QWORD *)(v0 + 520);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 640) + 8))(*(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 632));
    v4 = (uint64_t *)&unk_1002675F0;
    goto LABEL_5;
  }
  v34 = *(_QWORD *)(v0 + 704);
  v35 = *(_QWORD *)(v0 + 696);
  v36 = *(_QWORD *)(v0 + 640);
  v37 = *(_QWORD *)(v0 + 632);
  v38 = *(_QWORD *)(v0 + 272);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 576) + 32))(*(_QWORD *)(v0 + 592), *(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 568));
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  *(_QWORD *)(v0 + 816) = v39;
  v39(v35, v34, v37);
  v40 = swift_bridgeObjectRetain_n(v38, 2);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.error.getter(v41);
  v43 = os_log_type_enabled(v41, v42);
  v44 = *(_QWORD *)(v0 + 696);
  v45 = *(_QWORD *)(v0 + 640);
  v46 = *(_QWORD *)(v0 + 632);
  if (v43)
  {
    v86 = v42;
    v83 = *(_QWORD *)(v0 + 632);
    v47 = *(_QWORD *)(v0 + 552);
    v77 = *(_QWORD *)(v0 + 528);
    v79 = *(_QWORD *)(v0 + 640);
    v75 = *(_QWORD *)(v0 + 696);
    v48 = *(_QWORD *)(v0 + 264);
    v49 = *(_QWORD *)(v0 + 272);
    v50 = swift_slowAlloc(42, -1);
    v81 = swift_slowAlloc(64, -1);
    v87[0] = v81;
    *(_DWORD *)v50 = 141558787;
    *(_QWORD *)(v0 + 216) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v50 + 4, v50 + 12);
    *(_WORD *)(v50 + 12) = 2081;
    swift_bridgeObjectRetain(v49);
    *(_QWORD *)(v0 + 224) = sub_10002BA84(v48, v49, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v50 + 14, v50 + 22);
    swift_bridgeObjectRelease_n(v49, 3);
    *(_WORD *)(v50 + 22) = 2160;
    *(_QWORD *)(v0 + 232) = 1752392040;
    v51 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v50 + 24, v50 + 32);
    *(_WORD *)(v50 + 32) = 2081;
    v52 = Friend.handle.getter(v51);
    v53 = Handle.identifier.getter(v52);
    v55 = v54;
    v14(v47, v77);
    *(_QWORD *)(v0 + 240) = sub_10002BA84(v53, v55, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v50 + 34, v50 + 42);
    swift_bridgeObjectRelease(v55);
    v56 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
    v56(v75, v83);
    _os_log_impl((void *)&_mh_execute_header, v41, v86, "Found follower with serverID: %{private,mask.hash}s\nfor handle: %{private,mask.hash}s", (uint8_t *)v50, 0x2Au);
    swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 272), 2);
    v56 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v56(v44, v46);
  }

  *(_QWORD *)(v0 + 824) = v56;
  v57 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 832) = v57;
  *v57 = v0;
  v57[1] = sub_1001A8A3C;
  return daemon.getter();
}

uint64_t sub_1001A8A3C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 832);
  v5 = *v1;
  *(_QWORD *)(*v1 + 840) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[106] = v6;
  v7 = type metadata accessor for CloudStorageService();
  v8 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_1001A8AE8;
  return ActorServiceDaemon.getService<A>()(v3[95], v7, v3[96], v8);
}

uint64_t sub_1001A8AE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)();
  uint64_t v10;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 848);
  v3[107] = a1;
  v3[108] = v1;
  swift_task_dealloc(v4);
  v5 = v3[105];
  if (v1)
  {
    v8 = v3 + 34;
    v6 = v3[34];
    v7 = v8[1];
    swift_release(v5);
    swift_bridgeObjectRelease(v6);
    v9 = sub_1001AB82C;
    v10 = v7;
  }
  else
  {
    swift_release(v5);
    v9 = sub_1001A8B74;
    v10 = 0;
  }
  return swift_task_switch(v9, v10, 0);
}

uint64_t sub_1001A8B74()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_1002670BC);
  v0[109] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1001A8BCC;
  return sub_1001CA618(v0[59], v0[74]);
}

uint64_t sub_1001A8BCC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 872);
  *(_QWORD *)(*v1 + 880) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001A95A0;
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 280);
    v4 = sub_1001A8C34;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_1001A8C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130[2];

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 472);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 488) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 816);
    v4 = *(_QWORD *)(v0 + 704);
    v5 = *(_QWORD *)(v0 + 656);
    v6 = *(_QWORD *)(v0 + 632);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
    sub_1000087A0(v2, &qword_100260F80);
    v7 = v3(v5, v4, v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v112 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
      v10 = *(_QWORD *)(v0 + 656);
      v124 = *(_QWORD *)(v0 + 632);
      v11 = *(_QWORD *)(v0 + 552);
      v108 = *(_QWORD *)(v0 + 528);
      v120 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
      v12 = swift_slowAlloc(32, -1);
      v116 = swift_slowAlloc(64, -1);
      v130[0] = v116;
      *(_DWORD *)v12 = 136446723;
      *(_QWORD *)(v0 + 96) = sub_10002BA84(0xD000000000000020, 0x8000000100201970, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2160;
      *(_QWORD *)(v0 + 104) = 1752392040;
      v13 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v12 + 14, v12 + 22);
      *(_WORD *)(v12 + 22) = 2081;
      v14 = Friend.handle.getter(v13);
      v15 = Handle.identifier.getter(v14);
      v17 = v16;
      v112(v11, v108);
      *(_QWORD *)(v0 + 112) = sub_10002BA84(v15, v17, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease(v17);
      v120(v10, v124);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s Missing friendSharedSecretsRecord for %{private,mask.hash}s.", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v116, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 824))(*(_QWORD *)(v0 + 656), *(_QWORD *)(v0 + 632));
    }

    v117 = *(_QWORD *)(v0 + 856);
    v128 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 816);
    v102 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 800);
    v113 = *(_QWORD *)(v0 + 776);
    v23 = *(_QWORD *)(v0 + 704);
    v105 = v23;
    v24 = *(_QWORD *)(v0 + 664);
    v25 = *(_QWORD *)(v0 + 648);
    v26 = *(_QWORD *)(v0 + 640);
    v27 = *(_QWORD *)(v0 + 632);
    v125 = *(_QWORD *)(v0 + 592);
    v109 = *(_QWORD *)(v0 + 576);
    v121 = *(_QWORD *)(v0 + 568);
    v28 = *(_QWORD *)(v0 + 296);
    v99 = *(_QWORD *)(v0 + 288);
    v29 = *(_QWORD *)(v0 + 280);
    v30 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v28, 1, 1, v30);
    v22(v24, v23, v27);
    v31 = sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
    v32 = *(unsigned __int8 *)(v26 + 80);
    v33 = (v32 + 32) & ~v32;
    v34 = (v25 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
    v36 = swift_allocObject(&unk_1002575E0, v35 + 8, v32 | 7);
    *(_QWORD *)(v36 + 16) = v29;
    *(_QWORD *)(v36 + 24) = v31;
    v102(v36 + v33, v24, v27);
    *(_QWORD *)(v36 + v34) = v29;
    *(_QWORD *)(v36 + v35) = v99;
    swift_retain_n(v29, 2);
    v37 = sub_10005582C(v28, (uint64_t)&unk_1002668C8, v36);
    swift_release(v117);
    swift_release(v113);
    swift_release(v37);
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v125, v121);
    v38 = v105;
LABEL_14:
    v128(v38, v27);
    v70 = *(_QWORD *)(v0 + 696);
    v71 = *(_QWORD *)(v0 + 688);
    v72 = *(_QWORD *)(v0 + 680);
    v73 = *(_QWORD *)(v0 + 672);
    v74 = *(_QWORD *)(v0 + 664);
    v75 = *(_QWORD *)(v0 + 656);
    v76 = *(_QWORD *)(v0 + 624);
    v77 = *(_QWORD *)(v0 + 616);
    v78 = *(_QWORD *)(v0 + 592);
    v85 = *(_QWORD *)(v0 + 584);
    v86 = *(_QWORD *)(v0 + 560);
    v87 = *(_QWORD *)(v0 + 552);
    v88 = *(_QWORD *)(v0 + 544);
    v89 = *(_QWORD *)(v0 + 520);
    v90 = *(_QWORD *)(v0 + 512);
    v91 = *(_QWORD *)(v0 + 504);
    v92 = *(_QWORD *)(v0 + 496);
    v93 = *(_QWORD *)(v0 + 472);
    v94 = *(_QWORD *)(v0 + 464);
    v95 = *(_QWORD *)(v0 + 456);
    v96 = *(_QWORD *)(v0 + 448);
    v98 = *(_QWORD *)(v0 + 424);
    v101 = *(_QWORD *)(v0 + 416);
    v104 = *(_QWORD *)(v0 + 408);
    v107 = *(_QWORD *)(v0 + 400);
    v111 = *(_QWORD *)(v0 + 376);
    v115 = *(_QWORD *)(v0 + 368);
    v119 = *(_QWORD *)(v0 + 360);
    v123 = *(_QWORD *)(v0 + 344);
    v127 = *(_QWORD *)(v0 + 320);
    v129 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 704));
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v101);
    swift_task_dealloc(v104);
    swift_task_dealloc(v107);
    swift_task_dealloc(v111);
    swift_task_dealloc(v115);
    swift_task_dealloc(v119);
    swift_task_dealloc(v123);
    swift_task_dealloc(v127);
    swift_task_dealloc(v129);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v18 = *(_QWORD *)(v0 + 504);
  sub_1000321F4(v2, v18, type metadata accessor for FriendSharedSecretsRecord);
  v19 = (uint64_t *)(v18 + *(int *)(v1 + 32));
  v20 = *v19;
  *(_QWORD *)(v0 + 888) = *v19;
  v21 = v19[1];
  *(_QWORD *)(v0 + 896) = v21;
  if (v21 >> 60 == 15)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
LABEL_10:
    v44 = sub_100025C70(*(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 496), type metadata accessor for FriendSharedSecretsRecord);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = *(_QWORD *)(v0 + 568);
      v48 = *(_QWORD *)(v0 + 496);
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v130[0] = v50;
      *(_DWORD *)v49 = 136446210;
      v51 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v47, v51);
      v54 = v53;
      *(_QWORD *)(v0 + 120) = sub_10002BA84(v52, v53, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease(v54);
      sub_100024990(v48, type metadata accessor for FriendSharedSecretsRecord);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "No incomingSharedSecret for %{public}s", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      sub_100024990(*(_QWORD *)(v0 + 496), type metadata accessor for FriendSharedSecretsRecord);
    }

    v114 = *(_QWORD *)(v0 + 856);
    v128 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
    v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 816);
    v110 = *(_QWORD *)(v0 + 776);
    v56 = *(_QWORD *)(v0 + 704);
    v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 800);
    v103 = v56;
    v57 = *(_QWORD *)(v0 + 664);
    v58 = *(_QWORD *)(v0 + 648);
    v59 = *(_QWORD *)(v0 + 640);
    v27 = *(_QWORD *)(v0 + 632);
    v118 = *(_QWORD *)(v0 + 576);
    v122 = *(_QWORD *)(v0 + 568);
    v126 = *(_QWORD *)(v0 + 592);
    v106 = *(_QWORD *)(v0 + 504);
    v60 = *(_QWORD *)(v0 + 296);
    v97 = *(_QWORD *)(v0 + 288);
    v61 = *(_QWORD *)(v0 + 280);
    v62 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v60, 1, 1, v62);
    v55(v57, v56, v27);
    v63 = sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
    v64 = *(unsigned __int8 *)(v59 + 80);
    v65 = (v64 + 32) & ~v64;
    v66 = (v58 + v65 + 7) & 0xFFFFFFFFFFFFFFF8;
    v67 = (v66 + 15) & 0xFFFFFFFFFFFFFFF8;
    v68 = swift_allocObject(&unk_100257608, v67 + 8, v64 | 7);
    *(_QWORD *)(v68 + 16) = v61;
    *(_QWORD *)(v68 + 24) = v63;
    v100(v68 + v65, v57, v27);
    *(_QWORD *)(v68 + v66) = v61;
    *(_QWORD *)(v68 + v67) = v97;
    swift_retain_n(v61, 2);
    v69 = sub_10005582C(v60, (uint64_t)&unk_1002668D8, v68);
    swift_release(v114);
    swift_release(v110);
    swift_release(v69);
    sub_100024990(v106, type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v126, v122);
    v38 = v103;
    goto LABEL_14;
  }
  v39 = *(_QWORD *)(v0 + 432);
  v40 = *(_QWORD *)(v0 + 440);
  v41 = *(_QWORD *)(v0 + 424);
  sub_1000D6A78(*(_QWORD *)(v0 + 504) + *(int *)(*(_QWORD *)(v0 + 480) + 36), v41);
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  *(_QWORD *)(v0 + 904) = v42;
  if (v42(v41, 1, v39) == 1)
  {
    v43 = *(_QWORD *)(v0 + 424);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
    sub_1000087A0(v43, (uint64_t *)&unk_100262930);
    goto LABEL_10;
  }
  v80 = *(_QWORD *)(v0 + 464);
  v81 = *(_QWORD *)(v0 + 432);
  v82 = *(_QWORD *)(v0 + 424);
  v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 32);
  *(_QWORD *)(v0 + 912) = v83;
  v83(v80, v82, v81);
  sub_10001A484(v20, v21);
  v84 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 920) = v84;
  *v84 = v0;
  v84[1] = sub_1001A9824;
  return daemon.getter();
}

uint64_t sub_1001A95A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 280);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
  return swift_task_switch(sub_1001A95DC, v1, 0);
}

uint64_t sub_1001A95DC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
  v2 = *(_QWORD *)(v0 + 776);
  v3 = *(_QWORD *)(v0 + 704);
  v4 = *(_QWORD *)(v0 + 632);
  v5 = *(_QWORD *)(v0 + 592);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  swift_release(*(_QWORD *)(v0 + 856));
  swift_release(v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v1(v3, v4);
  v8 = *(_QWORD *)(v0 + 696);
  v9 = *(_QWORD *)(v0 + 688);
  v10 = *(_QWORD *)(v0 + 680);
  v11 = *(_QWORD *)(v0 + 672);
  v12 = *(_QWORD *)(v0 + 664);
  v13 = *(_QWORD *)(v0 + 656);
  v14 = *(_QWORD *)(v0 + 624);
  v15 = *(_QWORD *)(v0 + 616);
  v16 = *(_QWORD *)(v0 + 592);
  v18 = *(_QWORD *)(v0 + 584);
  v19 = *(_QWORD *)(v0 + 560);
  v20 = *(_QWORD *)(v0 + 552);
  v21 = *(_QWORD *)(v0 + 544);
  v22 = *(_QWORD *)(v0 + 520);
  v23 = *(_QWORD *)(v0 + 512);
  v24 = *(_QWORD *)(v0 + 504);
  v25 = *(_QWORD *)(v0 + 496);
  v26 = *(_QWORD *)(v0 + 472);
  v27 = *(_QWORD *)(v0 + 464);
  v28 = *(_QWORD *)(v0 + 456);
  v29 = *(_QWORD *)(v0 + 448);
  v30 = *(_QWORD *)(v0 + 424);
  v31 = *(_QWORD *)(v0 + 416);
  v32 = *(_QWORD *)(v0 + 408);
  v33 = *(_QWORD *)(v0 + 400);
  v34 = *(_QWORD *)(v0 + 376);
  v35 = *(_QWORD *)(v0 + 368);
  v36 = *(_QWORD *)(v0 + 360);
  v37 = *(_QWORD *)(v0 + 344);
  v38 = *(_QWORD *)(v0 + 320);
  v39 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 704));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A9824(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 920);
  v5 = *v1;
  *(_QWORD *)(*v1 + 928) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[117] = v6;
  v7 = type metadata accessor for AccountService(0);
  v8 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_1001A98D0;
  return ActorServiceDaemon.getService<A>()(v3[95], v7, v3[96], v8);
}

uint64_t sub_1001A98D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 936);
  v5 = *(_QWORD **)v2;
  v5[118] = a1;
  v5[119] = v1;
  swift_task_dealloc(v4);
  v6 = v5[116];
  if (v1)
  {
    v7 = v5[34];
    v8 = v5[35];
    swift_release(v6);
    swift_bridgeObjectRelease(v7);
    return swift_task_switch(sub_1001ABA68, v8, 0);
  }
  else
  {
    swift_release(v6);
    v10 = (_QWORD *)swift_task_alloc(dword_1002612E4);
    v5[120] = v10;
    *v10 = v5;
    v10[1] = sub_1001A9990;
    return sub_1000069E8(v5[47]);
  }
}

uint64_t sub_1001A9990()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 280);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 960));
  return swift_task_switch(sub_1001A99E8, v1, 0);
}

uint64_t sub_1001A99E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[3];

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 376);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
    v4 = sub_1000087A0(v3, &qword_100260580);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v60[0] = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v0 + 128) = sub_10002BA84(0xD000000000000020, 0x8000000100201970, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Missing primary account to send FindingTokenRequestEnvelopeV1 with my dsid!", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v9 = *(_QWORD *)(v0 + 944);
    v10 = *(_QWORD *)(v0 + 896);
    v11 = *(_QWORD *)(v0 + 888);
    v12 = *(_QWORD *)(v0 + 856);
    v13 = *(_QWORD *)(v0 + 776);
    v55 = *(_QWORD *)(v0 + 704);
    v57 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
    v51 = *(_QWORD *)(v0 + 592);
    v53 = *(_QWORD *)(v0 + 632);
    v47 = *(_QWORD *)(v0 + 576);
    v49 = *(_QWORD *)(v0 + 568);
    v45 = *(_QWORD *)(v0 + 504);
    v14 = *(_QWORD *)(v0 + 464);
    v16 = *(_QWORD *)(v0 + 432);
    v15 = *(_QWORD *)(v0 + 440);
    v17 = sub_100097FB4();
    v59 = swift_allocError(&type metadata for NITokenService.Error, v17, 0, 0);
    *v18 = 16;
    swift_willThrow(v59);
    swift_release(v12);
    swift_release(v9);
    swift_release(v13);
    sub_100037AF8(v11, v10);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    sub_100024990(v45, type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v51, v49);
    v57(v55, v53);
    v19 = *(_QWORD *)(v0 + 696);
    v20 = *(_QWORD *)(v0 + 688);
    v21 = *(_QWORD *)(v0 + 680);
    v22 = *(_QWORD *)(v0 + 672);
    v23 = *(_QWORD *)(v0 + 664);
    v24 = *(_QWORD *)(v0 + 656);
    v25 = *(_QWORD *)(v0 + 624);
    v26 = *(_QWORD *)(v0 + 616);
    v27 = *(_QWORD *)(v0 + 592);
    v30 = *(_QWORD *)(v0 + 584);
    v31 = *(_QWORD *)(v0 + 560);
    v32 = *(_QWORD *)(v0 + 552);
    v33 = *(_QWORD *)(v0 + 544);
    v34 = *(_QWORD *)(v0 + 520);
    v35 = *(_QWORD *)(v0 + 512);
    v36 = *(_QWORD *)(v0 + 504);
    v37 = *(_QWORD *)(v0 + 496);
    v38 = *(_QWORD *)(v0 + 472);
    v39 = *(_QWORD *)(v0 + 464);
    v40 = *(_QWORD *)(v0 + 456);
    v41 = *(_QWORD *)(v0 + 448);
    v42 = *(_QWORD *)(v0 + 424);
    v43 = *(_QWORD *)(v0 + 416);
    v44 = *(_QWORD *)(v0 + 408);
    v46 = *(_QWORD *)(v0 + 400);
    v48 = *(_QWORD *)(v0 + 376);
    v50 = *(_QWORD *)(v0 + 368);
    v52 = *(_QWORD *)(v0 + 360);
    v54 = *(_QWORD *)(v0 + 344);
    v56 = *(_QWORD *)(v0 + 320);
    v58 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 704));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 400), v3, v1);
    *(Swift::String *)(v0 + 968) = Account.dsidBase64EncodedString()();
    v29 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 984) = v29;
    *v29 = v0;
    v29[1] = sub_1001A9E58;
    return daemon.getter();
  }
}

uint64_t sub_1001A9E58(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 984);
  v5 = *v1;
  *(_QWORD *)(*v1 + 992) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[125] = v6;
  v7 = type metadata accessor for IDSTransportServiceFMF();
  v8 = sub_100004EA8(&qword_1002600F0, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F2FD8);
  *v6 = v5;
  v6[1] = sub_1001A9F04;
  return ActorServiceDaemon.getService<A>()(v3[95], v7, v3[96], v8);
}

uint64_t sub_1001A9F04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1000);
  v3[126] = a1;
  v3[127] = v1;
  swift_task_dealloc(v4);
  v5 = v3[124];
  if (v1)
  {
    v6 = v3[122];
    v9 = v3 + 34;
    v8 = v3[34];
    v7 = v9[1];
    swift_release(v5);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    v10 = sub_1001ABCF8;
    v11 = v7;
  }
  else
  {
    v12 = v3[35];
    swift_release(v5);
    v10 = sub_1001A9FA8;
    v11 = v12;
  }
  return swift_task_switch(v10, v11, 0);
}

uint64_t sub_1001A9FA8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  os_log_type_t v140;
  void (*v141)(uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143[3];

  v1 = *(_QWORD *)(v0 + 976);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 816);
  v3 = *(_QWORD *)(v0 + 704);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 632);
  v6 = *(_QWORD *)(v0 + 272);
  v2(*(_QWORD *)(v0 + 688), v3, v5);
  v2(v4, v3, v5);
  swift_bridgeObjectRetain_n(v1, 2);
  swift_bridgeObjectRetain(v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v140 = v9;
    v129 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 904);
    v132 = v0 + 192;
    v10 = *(_QWORD *)(v0 + 688);
    v110 = *(_QWORD *)(v0 + 632);
    v11 = *(_QWORD *)(v0 + 552);
    v105 = *(_QWORD *)(v0 + 528);
    v107 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
    v126 = *(_QWORD *)(v0 + 432);
    v121 = *(_QWORD *)(v0 + 416);
    v112 = *(_QWORD *)(v0 + 272);
    v115 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
    v118 = *(_QWORD *)(v0 + 264);
    v12 = swift_slowAlloc(72, -1);
    v13 = swift_slowAlloc(96, -1);
    *(_QWORD *)(v0 + 152) = 1752392040;
    v137 = v13;
    v143[0] = v13;
    *(_DWORD *)v12 = 141559555;
    v14 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v15 = Friend.handle.getter(v14);
    v16 = Handle.identifier.getter(v15);
    v18 = v17;
    v107(v11, v105);
    *(_QWORD *)(v0 + 160) = sub_10002BA84(v16, v18, v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v18);
    v115(v10, v110);
    *(_WORD *)(v12 + 22) = 2160;
    *(_QWORD *)(v0 + 168) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v12 + 24, v12 + 32);
    *(_WORD *)(v12 + 32) = 2081;
    swift_bridgeObjectRetain(v112);
    *(_QWORD *)(v0 + 176) = sub_10002BA84(v118, v112, v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v12 + 34, v12 + 42);
    v19 = swift_bridgeObjectRelease_n(v112, 3);
    *(_WORD *)(v12 + 42) = 2050;
    Friend.expiry.getter(v19);
    if (v129(v121, 1, v126) == 1)
    {
      v20 = 2592000.0;
    }
    else
    {
      v26 = *(_QWORD *)(v0 + 448);
      v27 = *(_QWORD *)(v0 + 456);
      v28 = *(_QWORD *)(v0 + 432);
      v29 = *(_QWORD *)(v0 + 440);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 912))(v27, *(_QWORD *)(v0 + 416), v28);
      static Date.trustedNow.getter(v26);
      v20 = Date.timeIntervalSince(_:)(v26);
      v30 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v30(v26, v28);
      v30(v27, v28);
    }
    v31 = *(_QWORD *)(v0 + 976);
    v32 = *(_QWORD *)(v0 + 968);
    v33 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
    v34 = *(_QWORD *)(v0 + 680);
    v35 = *(_QWORD *)(v0 + 632);
    *(double *)(v0 + 184) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v132, v12 + 44, v12 + 52);
    v33(v34, v35);
    *(_WORD *)(v12 + 52) = 2160;
    *(_QWORD *)(v0 + 192) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v132, v0 + 200, v12 + 54, v12 + 62);
    *(_WORD *)(v12 + 62) = 2081;
    swift_bridgeObjectRetain(v31);
    *(_QWORD *)(v0 + 208) = sub_10002BA84(v32, v31, v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v12 + 64, v12 + 72);
    swift_bridgeObjectRelease_n(v31, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v140, "Sending shared secret to %{private,mask.hash}s.\nfriend ServerId: %{private,mask.hash}s\nTTL: %{public}f\nfrom my serverId: %{private,mask.hash}s over IDS.", (uint8_t *)v12, 0x48u);
    swift_arrayDestroy(v137, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v137, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {
    v21 = *(_QWORD *)(v0 + 976);
    v22 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
    v23 = *(_QWORD *)(v0 + 680);
    v24 = *(_QWORD *)(v0 + 632);
    v25 = *(_QWORD *)(v0 + 272);
    v22(*(_QWORD *)(v0 + 688), v24);
    swift_bridgeObjectRelease_n(v25, 2);
    v22(v23, v24);
    swift_bridgeObjectRelease_n(v21, 2);

  }
  v36 = *(_QWORD *)(v0 + 1016);
  v37 = *(_QWORD *)(v0 + 976);
  v38 = *(_QWORD *)(v0 + 968);
  v39 = *(_QWORD *)(v0 + 896);
  v40 = *(_QWORD *)(v0 + 888);
  v41 = *(_QWORD *)(v0 + 360);
  v42 = *(char **)(v0 + 368);
  v43 = *(_QWORD *)(v0 + 352);
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 16))(&v42[*(int *)(v43 + 20)], *(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 432));
  *(_QWORD *)v42 = v38;
  *((_QWORD *)v42 + 1) = v37;
  v44 = (uint64_t *)&v42[*(int *)(v43 + 24)];
  *v44 = v40;
  v44[1] = v39;
  *(_BYTE *)(v0 + 1048) = 1;
  sub_100025C70((uint64_t)v42, v41, type metadata accessor for FindingTokenEnvelopeV1);
  sub_10001A484(v40, v39);
  v45 = sub_10008277C();
  v46 = sub_100004EA8(&qword_100261B20, type metadata accessor for FindingTokenEnvelopeV1, (uint64_t)&unk_1001F3820);
  v47 = sub_100004EA8(&qword_100261B28, type metadata accessor for FindingTokenEnvelopeV1, (uint64_t)&unk_1001F37F8);
  Message.init<A>(type:version:payload:)(v0 + 1048, 1, v41, &type metadata for FriendSharingMessageType, v43, v45, v46, v47);
  if (v36)
  {
    v48 = *(_QWORD *)(v0 + 1008);
    v49 = *(_QWORD *)(v0 + 944);
    v50 = *(_QWORD *)(v0 + 896);
    v51 = *(_QWORD *)(v0 + 888);
    v52 = *(_QWORD *)(v0 + 776);
    v138 = *(_QWORD *)(v0 + 704);
    v141 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
    v135 = *(_QWORD *)(v0 + 632);
    v130 = *(_QWORD *)(v0 + 568);
    v133 = *(_QWORD *)(v0 + 592);
    v124 = *(_QWORD *)(v0 + 504);
    v127 = *(_QWORD *)(v0 + 576);
    v116 = *(_QWORD *)(v0 + 440);
    v119 = *(_QWORD *)(v0 + 432);
    v122 = *(_QWORD *)(v0 + 464);
    v53 = *(_QWORD *)(v0 + 392);
    v54 = *(_QWORD *)(v0 + 400);
    v55 = *(_QWORD *)(v0 + 384);
    v56 = *(_QWORD *)(v0 + 368);
    swift_release(*(_QWORD *)(v0 + 856));
    swift_release(v48);
    swift_release(v49);
    swift_release(v52);
    sub_100037AF8(v51, v50);
    sub_100024990(v56, type metadata accessor for FindingTokenEnvelopeV1);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v122, v119);
    sub_100024990(v124, type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v133, v130);
    v141(v138, v135);
    v57 = *(_QWORD *)(v0 + 696);
    v58 = *(_QWORD *)(v0 + 688);
    v59 = *(_QWORD *)(v0 + 680);
    v60 = *(_QWORD *)(v0 + 672);
    v61 = *(_QWORD *)(v0 + 664);
    v62 = *(_QWORD *)(v0 + 656);
    v63 = *(_QWORD *)(v0 + 624);
    v64 = *(_QWORD *)(v0 + 616);
    v65 = *(_QWORD *)(v0 + 592);
    v99 = *(_QWORD *)(v0 + 584);
    v100 = *(_QWORD *)(v0 + 560);
    v101 = *(_QWORD *)(v0 + 552);
    v102 = *(_QWORD *)(v0 + 544);
    v103 = *(_QWORD *)(v0 + 520);
    v104 = *(_QWORD *)(v0 + 512);
    v106 = *(_QWORD *)(v0 + 504);
    v108 = *(_QWORD *)(v0 + 496);
    v109 = *(_QWORD *)(v0 + 472);
    v111 = *(_QWORD *)(v0 + 464);
    v113 = *(_QWORD *)(v0 + 456);
    v114 = *(_QWORD *)(v0 + 448);
    v117 = *(_QWORD *)(v0 + 424);
    v120 = *(_QWORD *)(v0 + 416);
    v123 = *(_QWORD *)(v0 + 408);
    v125 = *(_QWORD *)(v0 + 400);
    v128 = *(_QWORD *)(v0 + 376);
    v131 = *(_QWORD *)(v0 + 368);
    v134 = *(_QWORD *)(v0 + 360);
    v136 = *(_QWORD *)(v0 + 344);
    v139 = *(_QWORD *)(v0 + 320);
    v142 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 704));
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v117);
    swift_task_dealloc(v120);
    swift_task_dealloc(v123);
    swift_task_dealloc(v125);
    swift_task_dealloc(v128);
    swift_task_dealloc(v131);
    swift_task_dealloc(v134);
    swift_task_dealloc(v136);
    swift_task_dealloc(v139);
    swift_task_dealloc(v142);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v67 = sub_100037A5C(&qword_100261990);
    v68 = *(_QWORD *)(type metadata accessor for Destination(0) - 8);
    v69 = swift_allocObject(v67, ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(_QWORD *)(v68 + 72), *(unsigned __int8 *)(v68 + 80) | 7);
    *(_OWORD *)(v69 + 16) = xmmword_1001F35F0;
    v70 = Friend.handle.getter(v69);
    v71 = Handle.isPhoneNumber.getter(v70);
    v72 = v71;
    v73 = Handle.identifier.getter(v71);
    if ((v72 & 1) != 0)
      Destination.init(phoneNumber:)(v73);
    else
      Destination.init(email:)(v73);
    v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 904);
    v75 = *(_QWORD *)(v0 + 576);
    v76 = *(_QWORD *)(v0 + 568);
    v77 = *(_QWORD *)(v0 + 512);
    v78 = *(_QWORD *)(v0 + 432);
    v79 = *(_QWORD *)(v0 + 408);
    (*(void (**)(_QWORD, _QWORD))(v0 + 808))(*(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 528));
    v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v77, 1, 1, v76);
    Friend.expiry.getter(v80);
    if (v74(v79, 1, v78) == 1)
    {
      v81 = 0x4143C68000000000;
    }
    else
    {
      v83 = *(_QWORD *)(v0 + 448);
      v82 = *(_QWORD *)(v0 + 456);
      v84 = *(_QWORD *)(v0 + 432);
      v85 = *(_QWORD *)(v0 + 440);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 912))(v82, *(_QWORD *)(v0 + 408), v84);
      static Date.trustedNow.getter(v83);
      v86 = Date.timeIntervalSince(_:)(v83);
      v87 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
      v87(v83, v84);
      v87(v82, v84);
      v81 = *(_QWORD *)&v86;
    }
    v88 = *(_QWORD *)(v0 + 1008);
    v89 = *(_QWORD *)(v0 + 512);
    v90 = sub_100037A5C(&qword_100261B30);
    v91 = type metadata accessor for MessagingCapability(0);
    v92 = *(_QWORD *)(v91 - 8);
    v93 = *(unsigned __int8 *)(v92 + 80);
    v94 = (v93 + 32) & ~v93;
    v95 = swift_allocObject(v90, v94 + *(_QWORD *)(v92 + 72), v93 | 7);
    *(_OWORD *)(v95 + 16) = xmmword_1001F35F0;
    v96 = v95 + v94;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v92 + 104))(v96, enum case for MessagingCapability.supportsPeopleFindingV1(_:), v91);
    v97 = sub_10018C498(v95);
    swift_setDeallocating(v95);
    swift_arrayDestroy(v96, 1, v91);
    swift_deallocClassInstance(v95, 32, 7);
    v98 = sub_10018C36C((uint64_t)_swiftEmptyArrayStorage);
    MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)(v69, 0, v89, v81, 0, 0, v97, v98, 0, 0);
    return swift_task_switch(sub_1001AA9F0, v88, 0);
  }
}

uint64_t sub_1001AA9F0()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to InternetMessaging.send(message:messageOptions:)[1]);
  v0[128] = v1;
  *v1 = v0;
  v1[1] = sub_1001AAA50;
  return InternetMessaging.send(message:messageOptions:)(v0[73], v0[43], v0[40]);
}

uint64_t sub_1001AAA50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1024);
  *(_QWORD *)(*(_QWORD *)v1 + 1032) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[35];
    v5 = sub_1001AB0E8;
  }
  else
  {
    v6 = v2[73];
    v7 = v2[71];
    v8 = v2[35];
    v9 = *(void (**)(uint64_t, uint64_t))(v2[72] + 8);
    v2[130] = v9;
    v9(v6, v7);
    v5 = sub_1001AAAD4;
    v4 = v8;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001AAAD4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 816))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 632));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  v98 = v2;
  if (os_log_type_enabled(v2, v3))
  {
    v95 = *(void (**)(uint64_t, uint64_t))(v0 + 1040);
    v47 = *(_QWORD *)(v0 + 944);
    v59 = *(_QWORD *)(v0 + 888);
    v62 = *(_QWORD *)(v0 + 896);
    v35 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
    v36 = *(_QWORD *)(v0 + 856);
    v33 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
    v41 = *(_QWORD *)(v0 + 1008);
    v43 = *(_QWORD *)(v0 + 776);
    v92 = *(_QWORD *)(v0 + 704);
    v31 = *(_QWORD *)(v0 + 672);
    v34 = *(_QWORD *)(v0 + 632);
    v86 = *(_QWORD *)(v0 + 568);
    v89 = *(_QWORD *)(v0 + 592);
    v4 = *(_QWORD *)(v0 + 552);
    v32 = *(_QWORD *)(v0 + 528);
    v80 = *(_QWORD *)(v0 + 464);
    v83 = *(_QWORD *)(v0 + 504);
    v74 = *(_QWORD *)(v0 + 440);
    v77 = *(_QWORD *)(v0 + 432);
    v65 = *(_QWORD *)(v0 + 392);
    v68 = *(_QWORD *)(v0 + 384);
    v71 = *(_QWORD *)(v0 + 400);
    v53 = *(_QWORD *)(v0 + 344);
    v56 = *(_QWORD *)(v0 + 368);
    v45 = *(_QWORD *)(v0 + 336);
    v50 = *(_QWORD *)(v0 + 328);
    v37 = *(_QWORD *)(v0 + 312);
    v38 = *(_QWORD *)(v0 + 304);
    v39 = *(_QWORD *)(v0 + 320);
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 136) = 1752392040;
    v100 = v6;
    *(_DWORD *)v5 = 141558275;
    v7 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2081;
    v8 = Friend.handle.getter(v7);
    v9 = Handle.identifier.getter(v8);
    v11 = v10;
    v33(v4, v32);
    *(_QWORD *)(v0 + 144) = sub_10002BA84(v9, v11, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v11);
    v35(v31, v34);
    _os_log_impl((void *)&_mh_execute_header, v98, v3, "Successfully sent finding token over IDS for %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
    swift_release(v36);
    swift_release(v41);
    swift_release(v47);
    swift_release(v43);

    sub_100037AF8(v59, v62);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v53, v50);
    sub_100024990(v56, type metadata accessor for FindingTokenEnvelopeV1);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v71, v68);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v80, v77);
    sub_100024990(v83, type metadata accessor for FriendSharedSecretsRecord);
    v95(v89, v86);
    v35(v92, v34);
  }
  else
  {
    v96 = *(void (**)(uint64_t, uint64_t))(v0 + 1040);
    v12 = *(_QWORD *)(v0 + 1008);
    v13 = *(_QWORD *)(v0 + 944);
    v63 = *(_QWORD *)(v0 + 896);
    v57 = *(_QWORD *)(v0 + 888);
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
    v15 = *(_QWORD *)(v0 + 776);
    v16 = *(_QWORD *)(v0 + 672);
    v17 = *(_QWORD *)(v0 + 632);
    v90 = *(_QWORD *)(v0 + 592);
    v93 = *(_QWORD *)(v0 + 704);
    v84 = *(_QWORD *)(v0 + 504);
    v87 = *(_QWORD *)(v0 + 568);
    v75 = *(_QWORD *)(v0 + 440);
    v78 = *(_QWORD *)(v0 + 432);
    v81 = *(_QWORD *)(v0 + 464);
    v66 = *(_QWORD *)(v0 + 392);
    v69 = *(_QWORD *)(v0 + 384);
    v72 = *(_QWORD *)(v0 + 400);
    v60 = *(_QWORD *)(v0 + 368);
    v48 = *(_QWORD *)(v0 + 336);
    v18 = *(_QWORD *)(v0 + 320);
    v51 = *(_QWORD *)(v0 + 328);
    v54 = *(_QWORD *)(v0 + 344);
    v20 = *(_QWORD *)(v0 + 304);
    v19 = *(_QWORD *)(v0 + 312);
    swift_release(*(_QWORD *)(v0 + 856));
    swift_release(v12);
    swift_release(v13);
    swift_release(v15);

    v14(v16, v17);
    sub_100037AF8(v57, v63);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v54, v51);
    sub_100024990(v60, type metadata accessor for FindingTokenEnvelopeV1);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v72, v69);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v81, v78);
    sub_100024990(v84, type metadata accessor for FriendSharedSecretsRecord);
    v96(v90, v87);
    v14(v93, v17);
  }
  v21 = *(_QWORD *)(v0 + 696);
  v22 = *(_QWORD *)(v0 + 688);
  v23 = *(_QWORD *)(v0 + 680);
  v24 = *(_QWORD *)(v0 + 672);
  v25 = *(_QWORD *)(v0 + 664);
  v26 = *(_QWORD *)(v0 + 656);
  v27 = *(_QWORD *)(v0 + 624);
  v28 = *(_QWORD *)(v0 + 616);
  v29 = *(_QWORD *)(v0 + 592);
  v40 = *(_QWORD *)(v0 + 584);
  v42 = *(_QWORD *)(v0 + 560);
  v44 = *(_QWORD *)(v0 + 552);
  v46 = *(_QWORD *)(v0 + 544);
  v49 = *(_QWORD *)(v0 + 520);
  v52 = *(_QWORD *)(v0 + 512);
  v55 = *(_QWORD *)(v0 + 504);
  v58 = *(_QWORD *)(v0 + 496);
  v61 = *(_QWORD *)(v0 + 472);
  v64 = *(_QWORD *)(v0 + 464);
  v67 = *(_QWORD *)(v0 + 456);
  v70 = *(_QWORD *)(v0 + 448);
  v73 = *(_QWORD *)(v0 + 424);
  v76 = *(_QWORD *)(v0 + 416);
  v79 = *(_QWORD *)(v0 + 408);
  v82 = *(_QWORD *)(v0 + 400);
  v85 = *(_QWORD *)(v0 + 376);
  v88 = *(_QWORD *)(v0 + 368);
  v91 = *(_QWORD *)(v0 + 360);
  v94 = *(_QWORD *)(v0 + 344);
  v97 = *(_QWORD *)(v0 + 320);
  v99 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 704));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v49);
  swift_task_dealloc(v52);
  swift_task_dealloc(v55);
  swift_task_dealloc(v58);
  swift_task_dealloc(v61);
  swift_task_dealloc(v64);
  swift_task_dealloc(v67);
  swift_task_dealloc(v70);
  swift_task_dealloc(v73);
  swift_task_dealloc(v76);
  swift_task_dealloc(v79);
  swift_task_dealloc(v82);
  swift_task_dealloc(v85);
  swift_task_dealloc(v88);
  swift_task_dealloc(v91);
  swift_task_dealloc(v94);
  swift_task_dealloc(v97);
  swift_task_dealloc(v99);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AB0E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 1008);
  v2 = *(_QWORD *)(v0 + 944);
  v31 = *(_QWORD *)(v0 + 896);
  v27 = *(_QWORD *)(v0 + 888);
  v3 = *(_QWORD *)(v0 + 776);
  v55 = *(_QWORD *)(v0 + 704);
  v57 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
  v51 = *(_QWORD *)(v0 + 592);
  v53 = *(_QWORD *)(v0 + 632);
  v47 = *(_QWORD *)(v0 + 576);
  v49 = *(_QWORD *)(v0 + 568);
  v43 = *(_QWORD *)(v0 + 464);
  v45 = *(_QWORD *)(v0 + 504);
  v39 = *(_QWORD *)(v0 + 440);
  v41 = *(_QWORD *)(v0 + 432);
  v33 = *(_QWORD *)(v0 + 392);
  v35 = *(_QWORD *)(v0 + 384);
  v37 = *(_QWORD *)(v0 + 400);
  v29 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 328);
  v9 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 312);
  swift_release(*(_QWORD *)(v0 + 856));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  sub_100037AF8(v27, v31);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  sub_100024990(v29, type metadata accessor for FindingTokenEnvelopeV1);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v37, v35);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v41);
  sub_100024990(v45, type metadata accessor for FriendSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v51, v49);
  v57(v55, v53);
  v10 = *(_QWORD *)(v0 + 696);
  v11 = *(_QWORD *)(v0 + 688);
  v12 = *(_QWORD *)(v0 + 680);
  v13 = *(_QWORD *)(v0 + 672);
  v14 = *(_QWORD *)(v0 + 664);
  v15 = *(_QWORD *)(v0 + 656);
  v16 = *(_QWORD *)(v0 + 624);
  v17 = *(_QWORD *)(v0 + 616);
  v18 = *(_QWORD *)(v0 + 592);
  v20 = *(_QWORD *)(v0 + 584);
  v21 = *(_QWORD *)(v0 + 560);
  v22 = *(_QWORD *)(v0 + 552);
  v23 = *(_QWORD *)(v0 + 544);
  v24 = *(_QWORD *)(v0 + 520);
  v25 = *(_QWORD *)(v0 + 512);
  v26 = *(_QWORD *)(v0 + 504);
  v28 = *(_QWORD *)(v0 + 496);
  v30 = *(_QWORD *)(v0 + 472);
  v32 = *(_QWORD *)(v0 + 464);
  v34 = *(_QWORD *)(v0 + 456);
  v36 = *(_QWORD *)(v0 + 448);
  v38 = *(_QWORD *)(v0 + 424);
  v40 = *(_QWORD *)(v0 + 416);
  v42 = *(_QWORD *)(v0 + 408);
  v44 = *(_QWORD *)(v0 + 400);
  v46 = *(_QWORD *)(v0 + 376);
  v48 = *(_QWORD *)(v0 + 368);
  v50 = *(_QWORD *)(v0 + 360);
  v52 = *(_QWORD *)(v0 + 344);
  v54 = *(_QWORD *)(v0 + 320);
  v56 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 704));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AB410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
  v1 = *(_QWORD *)(v0 + 696);
  v2 = *(_QWORD *)(v0 + 688);
  v3 = *(_QWORD *)(v0 + 680);
  v4 = *(_QWORD *)(v0 + 672);
  v5 = *(_QWORD *)(v0 + 664);
  v6 = *(_QWORD *)(v0 + 656);
  v7 = *(_QWORD *)(v0 + 624);
  v8 = *(_QWORD *)(v0 + 616);
  v9 = *(_QWORD *)(v0 + 592);
  v11 = *(_QWORD *)(v0 + 584);
  v12 = *(_QWORD *)(v0 + 560);
  v13 = *(_QWORD *)(v0 + 552);
  v14 = *(_QWORD *)(v0 + 544);
  v15 = *(_QWORD *)(v0 + 520);
  v16 = *(_QWORD *)(v0 + 512);
  v17 = *(_QWORD *)(v0 + 504);
  v18 = *(_QWORD *)(v0 + 496);
  v19 = *(_QWORD *)(v0 + 472);
  v20 = *(_QWORD *)(v0 + 464);
  v21 = *(_QWORD *)(v0 + 456);
  v22 = *(_QWORD *)(v0 + 448);
  v23 = *(_QWORD *)(v0 + 424);
  v24 = *(_QWORD *)(v0 + 416);
  v25 = *(_QWORD *)(v0 + 408);
  v26 = *(_QWORD *)(v0 + 400);
  v27 = *(_QWORD *)(v0 + 376);
  v28 = *(_QWORD *)(v0 + 368);
  v29 = *(_QWORD *)(v0 + 360);
  v30 = *(_QWORD *)(v0 + 344);
  v31 = *(_QWORD *)(v0 + 320);
  v32 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 704));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AB618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 272);
  swift_release(*(_QWORD *)(v0 + 744));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 696);
  v3 = *(_QWORD *)(v0 + 688);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 664);
  v7 = *(_QWORD *)(v0 + 656);
  v8 = *(_QWORD *)(v0 + 624);
  v9 = *(_QWORD *)(v0 + 616);
  v10 = *(_QWORD *)(v0 + 592);
  v12 = *(_QWORD *)(v0 + 584);
  v13 = *(_QWORD *)(v0 + 560);
  v14 = *(_QWORD *)(v0 + 552);
  v15 = *(_QWORD *)(v0 + 544);
  v16 = *(_QWORD *)(v0 + 520);
  v17 = *(_QWORD *)(v0 + 512);
  v18 = *(_QWORD *)(v0 + 504);
  v19 = *(_QWORD *)(v0 + 496);
  v20 = *(_QWORD *)(v0 + 472);
  v21 = *(_QWORD *)(v0 + 464);
  v22 = *(_QWORD *)(v0 + 456);
  v23 = *(_QWORD *)(v0 + 448);
  v24 = *(_QWORD *)(v0 + 424);
  v25 = *(_QWORD *)(v0 + 416);
  v26 = *(_QWORD *)(v0 + 408);
  v27 = *(_QWORD *)(v0 + 400);
  v28 = *(_QWORD *)(v0 + 376);
  v29 = *(_QWORD *)(v0 + 368);
  v30 = *(_QWORD *)(v0 + 360);
  v31 = *(_QWORD *)(v0 + 344);
  v32 = *(_QWORD *)(v0 + 320);
  v33 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 704));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AB82C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
  v2 = *(_QWORD *)(v0 + 704);
  v3 = *(_QWORD *)(v0 + 632);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 576);
  v6 = *(_QWORD *)(v0 + 568);
  swift_release(*(_QWORD *)(v0 + 776));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  v7 = *(_QWORD *)(v0 + 696);
  v8 = *(_QWORD *)(v0 + 688);
  v9 = *(_QWORD *)(v0 + 680);
  v10 = *(_QWORD *)(v0 + 672);
  v11 = *(_QWORD *)(v0 + 664);
  v12 = *(_QWORD *)(v0 + 656);
  v13 = *(_QWORD *)(v0 + 624);
  v14 = *(_QWORD *)(v0 + 616);
  v15 = *(_QWORD *)(v0 + 592);
  v17 = *(_QWORD *)(v0 + 584);
  v18 = *(_QWORD *)(v0 + 560);
  v19 = *(_QWORD *)(v0 + 552);
  v20 = *(_QWORD *)(v0 + 544);
  v21 = *(_QWORD *)(v0 + 520);
  v22 = *(_QWORD *)(v0 + 512);
  v23 = *(_QWORD *)(v0 + 504);
  v24 = *(_QWORD *)(v0 + 496);
  v25 = *(_QWORD *)(v0 + 472);
  v26 = *(_QWORD *)(v0 + 464);
  v27 = *(_QWORD *)(v0 + 456);
  v28 = *(_QWORD *)(v0 + 448);
  v29 = *(_QWORD *)(v0 + 424);
  v30 = *(_QWORD *)(v0 + 416);
  v31 = *(_QWORD *)(v0 + 408);
  v32 = *(_QWORD *)(v0 + 400);
  v33 = *(_QWORD *)(v0 + 376);
  v34 = *(_QWORD *)(v0 + 368);
  v35 = *(_QWORD *)(v0 + 360);
  v36 = *(_QWORD *)(v0 + 344);
  v37 = *(_QWORD *)(v0 + 320);
  v38 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 704));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ABA68()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 896);
  v2 = *(_QWORD *)(v0 + 888);
  v3 = *(_QWORD *)(v0 + 776);
  v43 = *(_QWORD *)(v0 + 704);
  v45 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
  v39 = *(_QWORD *)(v0 + 592);
  v41 = *(_QWORD *)(v0 + 632);
  v4 = *(_QWORD *)(v0 + 576);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 504);
  v7 = *(_QWORD *)(v0 + 464);
  v8 = *(_QWORD *)(v0 + 432);
  v9 = *(_QWORD *)(v0 + 440);
  swift_release(*(_QWORD *)(v0 + 856));
  swift_release(v3);
  sub_100037AF8(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  sub_100024990(v6, type metadata accessor for FriendSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v39, v5);
  v45(v43, v41);
  v10 = *(_QWORD *)(v0 + 696);
  v11 = *(_QWORD *)(v0 + 688);
  v12 = *(_QWORD *)(v0 + 680);
  v13 = *(_QWORD *)(v0 + 672);
  v14 = *(_QWORD *)(v0 + 664);
  v15 = *(_QWORD *)(v0 + 656);
  v16 = *(_QWORD *)(v0 + 624);
  v17 = *(_QWORD *)(v0 + 616);
  v18 = *(_QWORD *)(v0 + 592);
  v20 = *(_QWORD *)(v0 + 584);
  v21 = *(_QWORD *)(v0 + 560);
  v22 = *(_QWORD *)(v0 + 552);
  v23 = *(_QWORD *)(v0 + 544);
  v24 = *(_QWORD *)(v0 + 520);
  v25 = *(_QWORD *)(v0 + 512);
  v26 = *(_QWORD *)(v0 + 504);
  v27 = *(_QWORD *)(v0 + 496);
  v28 = *(_QWORD *)(v0 + 472);
  v29 = *(_QWORD *)(v0 + 464);
  v30 = *(_QWORD *)(v0 + 456);
  v31 = *(_QWORD *)(v0 + 448);
  v32 = *(_QWORD *)(v0 + 424);
  v33 = *(_QWORD *)(v0 + 416);
  v34 = *(_QWORD *)(v0 + 408);
  v35 = *(_QWORD *)(v0 + 400);
  v36 = *(_QWORD *)(v0 + 376);
  v37 = *(_QWORD *)(v0 + 368);
  v38 = *(_QWORD *)(v0 + 360);
  v40 = *(_QWORD *)(v0 + 344);
  v42 = *(_QWORD *)(v0 + 320);
  v44 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 704));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ABCF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 944);
  v35 = *(_QWORD *)(v0 + 896);
  v2 = *(_QWORD *)(v0 + 888);
  v3 = *(_QWORD *)(v0 + 776);
  v47 = *(_QWORD *)(v0 + 704);
  v49 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
  v43 = *(_QWORD *)(v0 + 592);
  v45 = *(_QWORD *)(v0 + 632);
  v39 = *(_QWORD *)(v0 + 576);
  v41 = *(_QWORD *)(v0 + 568);
  v37 = *(_QWORD *)(v0 + 504);
  v4 = *(_QWORD *)(v0 + 464);
  v5 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 440);
  v7 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 384);
  swift_release(*(_QWORD *)(v0 + 856));
  swift_release(v1);
  swift_release(v3);
  sub_100037AF8(v2, v35);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_100024990(v37, type metadata accessor for FriendSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v41);
  v49(v47, v45);
  v10 = *(_QWORD *)(v0 + 696);
  v11 = *(_QWORD *)(v0 + 688);
  v12 = *(_QWORD *)(v0 + 680);
  v13 = *(_QWORD *)(v0 + 672);
  v14 = *(_QWORD *)(v0 + 664);
  v15 = *(_QWORD *)(v0 + 656);
  v16 = *(_QWORD *)(v0 + 624);
  v17 = *(_QWORD *)(v0 + 616);
  v18 = *(_QWORD *)(v0 + 592);
  v20 = *(_QWORD *)(v0 + 584);
  v21 = *(_QWORD *)(v0 + 560);
  v22 = *(_QWORD *)(v0 + 552);
  v23 = *(_QWORD *)(v0 + 544);
  v24 = *(_QWORD *)(v0 + 520);
  v25 = *(_QWORD *)(v0 + 512);
  v26 = *(_QWORD *)(v0 + 504);
  v27 = *(_QWORD *)(v0 + 496);
  v28 = *(_QWORD *)(v0 + 472);
  v29 = *(_QWORD *)(v0 + 464);
  v30 = *(_QWORD *)(v0 + 456);
  v31 = *(_QWORD *)(v0 + 448);
  v32 = *(_QWORD *)(v0 + 424);
  v33 = *(_QWORD *)(v0 + 416);
  v34 = *(_QWORD *)(v0 + 408);
  v36 = *(_QWORD *)(v0 + 400);
  v38 = *(_QWORD *)(v0 + 376);
  v40 = *(_QWORD *)(v0 + 368);
  v42 = *(_QWORD *)(v0 + 360);
  v44 = *(_QWORD *)(v0 + 344);
  v46 = *(_QWORD *)(v0 + 320);
  v48 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 704));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ABFB8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 80) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a3;
  return swift_task_switch(sub_1001ABFD4, 0, 0);
}

uint64_t sub_1001ABFD4()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v20;
  NSObject *v21;

  if ((*(_BYTE *)(v0 + 80) & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 24);
    swift_errorRetain(v4);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v5 = type metadata accessor for Logger(0);
    sub_100037A9C(v5, (uint64_t)qword_10027B330);
    swift_errorRetain(v4);
    v6 = swift_errorRetain(v4);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 24);
    if (v9)
    {
      v21 = v7;
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138543362;
      swift_errorRetain(v4);
      v12 = _swift_stdlib_bridgeErrorToNSError(v4);
      *(_QWORD *)(v0 + 16) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
      *v20 = v12;
      v7 = v21;
      sub_10007E9BC(v10, 1);
      sub_10007E9BC(v10, 1);
      _os_log_impl((void *)&_mh_execute_header, v21, v8, "respondToFindingTokenRequest error: %{public}@", v11, 0xCu);
      v13 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v20, 1, v13);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      sub_10007E9BC(*(_QWORD *)(v0 + 24), 1);
      sub_10007E9BC(v10, 1);
    }

    v14 = *(_QWORD *)(v0 + 24);
    v15 = sub_100097FB4();
    v16 = swift_allocError(&type metadata for NITokenService.Error, v15, 0, 0);
    *(_QWORD *)(v0 + 56) = v16;
    *v17 = v14;
    swift_errorRetain(v4);
    v1 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 64) = v1;
    v18 = (_QWORD *)swift_task_alloc(dword_100264B54);
    *(_QWORD *)(v0 + 72) = v18;
    *v18 = v0;
    v18[1] = sub_1001AC298;
    v3 = v16;
  }
  else
  {
    v1 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 40) = v1;
    v2 = (_QWORD *)swift_task_alloc(dword_100264B54);
    *(_QWORD *)(v0 + 48) = v2;
    *v2 = v0;
    v2[1] = sub_1001B4278;
    v3 = 0;
  }
  return sub_100140EB8(0xD00000000000003DLL, 0x8000000100200220, v3, v1);
}

uint64_t sub_1001AC298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  return swift_task_switch(sub_1001B4280, 0, 0);
}

uint64_t sub_1001AC300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1002668E4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10003BF7C;
  return sub_1001AC364(a2, a3);
}

uint64_t sub_1001AC364(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  v3[20] = *v2;
  v4 = type metadata accessor for CloudKitCoordinator.Database(0);
  v3[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[22] = v5;
  v3[23] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_100260F78);
  v3[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100260F80);
  v3[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FriendSharedSecretsRecord(0);
  v3[26] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[27] = v9;
  v3[28] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v3[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Handle(0);
  v3[30] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[31] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[32] = swift_task_alloc(v13);
  v3[33] = swift_task_alloc(v13);
  v14 = type metadata accessor for UUID(0);
  v3[34] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[35] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[36] = swift_task_alloc(v16);
  v3[37] = swift_task_alloc(v16);
  v17 = type metadata accessor for HandleType(0);
  v3[38] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[39] = v18;
  v3[40] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100037A5C(&qword_100260950);
  v3[41] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Friend(0);
  v3[42] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v3[43] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[44] = swift_task_alloc(v22);
  v3[45] = swift_task_alloc(v22);
  v3[46] = swift_task_alloc(v22);
  v3[47] = swift_task_alloc(v22);
  return swift_task_switch(sub_1001AC570, v2, 0);
}

uint64_t sub_1001AC570()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[18];
  v2 = qword_10025FB70;
  swift_bridgeObjectRetain(v1);
  if (v2 != -1)
  {
    swift_once(&qword_10025FB70, sub_1001B4288);
    v1 = v0[18];
  }
  v3 = type metadata accessor for Logger(0);
  v0[48] = sub_100037A9C(v3, (uint64_t)qword_10027B330);
  v4 = swift_bridgeObjectRetain_n(v1, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[18];
  if (v7)
  {
    v13 = v0[17];
    v9 = swift_slowAlloc(32, -1);
    v10 = swift_slowAlloc(64, -1);
    v14 = v10;
    *(_DWORD *)v9 = 136446723;
    v0[14] = sub_10002BA84(0xD000000000000016, 0x80000001002019A0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2160;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v9 + 14, v9 + 22);
    *(_WORD *)(v9 + 22) = 2081;
    swift_bridgeObjectRetain(v8);
    v0[16] = sub_10002BA84(v13, v8, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s for handle.serverId: %{private,mask.hash}s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[18], 2);
  }

  v11 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[49] = v11;
  *v11 = v0;
  v11[1] = sub_1001AC7C4;
  return daemon.getter();
}

uint64_t sub_1001AC7C4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 392);
  v5 = *v1;
  *(_QWORD *)(*v1 + 400) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[51] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[52] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[53] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1001AC8BC;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001AC8BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 408);
  v3[54] = a1;
  v3[55] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[19];
    v6 = sub_1001AE044;
  }
  else
  {
    v7 = v3[19];
    swift_release(v3[50]);
    v6 = sub_1001AC938;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001AC938()
{
  uint64_t *v0;
  uint64_t **v1;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[39] + 104))(v0[40], enum case for HandleType.following(_:), v0[38]);
  v1 = (uint64_t **)swift_task_alloc(dword_100262DD4);
  v0[56] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1001AC9AC;
  return sub_1000E6660(v0[41], v0[17], v0[18], v0[40], 1);
}

uint64_t sub_1001AC9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 320);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 304);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 448));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1001ACA24, v4, 0);
}

uint64_t sub_1001ACA24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  os_log_type_t typeb;
  uint64_t v68;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 328);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = &qword_100260950;
LABEL_5:
    sub_1000087A0(v3, v4);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 144));
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(_QWORD *)(v0 + 432);
    v18 = *(_QWORD *)(v0 + 144);
    if (v16)
    {
      v19 = *(_QWORD *)(v0 + 136);
      v20 = swift_slowAlloc(22, -1);
      v21 = swift_slowAlloc(32, -1);
      v68 = v21;
      *(_DWORD *)v20 = 141558275;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v20 + 4, v20 + 12);
      *(_WORD *)(v20 + 12) = 2081;
      swift_bridgeObjectRetain(v18);
      *(_QWORD *)(v0 + 24) = sub_10002BA84(v19, v18, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease_n(v18, 3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "No following with serverID: %{private,mask.hash}s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
      swift_release(v17);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 432));
      swift_bridgeObjectRelease_n(v18, 2);
    }

    v22 = *(_QWORD *)(v0 + 368);
    v24 = *(_QWORD *)(v0 + 352);
    v23 = *(_QWORD *)(v0 + 360);
    v26 = *(_QWORD *)(v0 + 320);
    v25 = *(_QWORD *)(v0 + 328);
    v28 = *(_QWORD *)(v0 + 288);
    v27 = *(_QWORD *)(v0 + 296);
    v30 = *(_QWORD *)(v0 + 256);
    v29 = *(_QWORD *)(v0 + 264);
    v57 = *(_QWORD *)(v0 + 232);
    v59 = *(_QWORD *)(v0 + 224);
    v61 = *(_QWORD *)(v0 + 200);
    v63 = *(_QWORD *)(v0 + 192);
    *(_QWORD *)typea = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 376));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(*(_QWORD *)typea);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD *)(v0 + 280);
  *(_QWORD *)type = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 248);
  v9 = *(_QWORD *)(v0 + 232);
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 376), v3, v1);
  v11 = Friend.handle.getter(v10);
  Handle.peerID.getter(v11);
  v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(_QWORD *)(v0 + 456) = v12;
  v12(v6, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, os_log_type_t *))(v5 + 48))(v9, 1, *(os_log_type_t **)type) == 1)
  {
    v3 = *(_QWORD *)(v0 + 232);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 336));
    v4 = (uint64_t *)&unk_1002675F0;
    goto LABEL_5;
  }
  v32 = *(_QWORD *)(v0 + 376);
  v33 = *(_QWORD *)(v0 + 368);
  v34 = *(_QWORD *)(v0 + 336);
  v35 = *(_QWORD *)(v0 + 344);
  v36 = *(_QWORD *)(v0 + 144);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 32))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 272));
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
  *(_QWORD *)(v0 + 464) = v37;
  v37(v33, v32, v34);
  swift_bridgeObjectRetain(v36);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter(v39);
  v41 = os_log_type_enabled(v39, v40);
  v42 = *(_QWORD *)(v0 + 368);
  v43 = *(_QWORD *)(v0 + 336);
  v44 = *(_QWORD *)(v0 + 344);
  if (v41)
  {
    typeb = v40;
    v56 = *(_QWORD *)(v0 + 368);
    v64 = *(_QWORD *)(v0 + 336);
    v45 = *(_QWORD *)(v0 + 256);
    v58 = *(_QWORD *)(v0 + 240);
    v60 = *(_QWORD *)(v0 + 344);
    v46 = *(_QWORD *)(v0 + 136);
    v47 = *(_QWORD *)(v0 + 144);
    v48 = swift_slowAlloc(42, -1);
    v62 = swift_slowAlloc(64, -1);
    v68 = v62;
    *(_DWORD *)v48 = 141558787;
    *(_QWORD *)(v0 + 80) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v48 + 4, v48 + 12);
    *(_WORD *)(v48 + 12) = 2081;
    swift_bridgeObjectRetain(v47);
    *(_QWORD *)(v0 + 88) = sub_10002BA84(v46, v47, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v48 + 14, v48 + 22);
    swift_bridgeObjectRelease_n(v47, 3);
    *(_WORD *)(v48 + 22) = 2160;
    *(_QWORD *)(v0 + 96) = 1752392040;
    v49 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v48 + 24, v48 + 32);
    *(_WORD *)(v48 + 32) = 2081;
    v50 = Friend.handle.getter(v49);
    v51 = Handle.identifier.getter(v50);
    v53 = v52;
    v12(v45, v58);
    *(_QWORD *)(v0 + 104) = sub_10002BA84(v51, v53, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v48 + 34, v48 + 42);
    swift_bridgeObjectRelease(v53);
    v54 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v54(v56, v64);
    _os_log_impl((void *)&_mh_execute_header, v39, typeb, "Found following with serverID: %{private,mask.hash}s\nhandleId: %{private,mask.hash}s", (uint8_t *)v48, 0x2Au);
    swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 144), 2);
    v54 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v54(v42, v43);
  }

  *(_QWORD *)(v0 + 472) = v54;
  v55 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 480) = v55;
  *v55 = v0;
  v55[1] = sub_1001ACFDC;
  return daemon.getter();
}

uint64_t sub_1001ACFDC(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 480);
  v5 = *v1;
  *(_QWORD *)(*v1 + 488) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[62] = v6;
  v7 = type metadata accessor for CloudStorageService();
  v8 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_1001AD084;
  return ActorServiceDaemon.getService<A>()(v3[52], v7, v3[53], v8);
}

uint64_t sub_1001AD084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 488);
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 496);
  v3[63] = a1;
  v3[64] = v1;
  swift_task_dealloc(v4);
  swift_release(v5);
  if (v1)
  {
    v6 = v3[19];
    v7 = sub_1001AE150;
  }
  else
  {
    v7 = sub_1001AD104;
    v6 = 0;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001AD104()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_1002670BC);
  v0[65] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1001AD15C;
  return sub_1001CA618(v0[25], v0[37]);
}

uint64_t sub_1001AD15C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 520);
  *(_QWORD *)(*v1 + 528) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001AD5A4;
  else
    v4 = sub_1001AD1C0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 152), 0);
}

uint64_t sub_1001AD1C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 48))(v1, 1, *(_QWORD *)(v0 + 208)) == 1)
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
    v3 = *(_QWORD *)(v0 + 376);
    v4 = *(_QWORD *)(v0 + 352);
    v5 = *(_QWORD *)(v0 + 336);
    sub_1000087A0(v1, &qword_100260F80);
    v6 = v2(v4, v3, v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
    if (v9)
    {
      v47 = *(_QWORD *)(v0 + 432);
      v49 = *(_QWORD *)(v0 + 376);
      v43 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
      v45 = *(_QWORD *)(v0 + 504);
      v11 = *(_QWORD *)(v0 + 352);
      v41 = *(_QWORD *)(v0 + 336);
      v12 = *(_QWORD *)(v0 + 256);
      v38 = *(_QWORD *)(v0 + 240);
      v39 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
      v13 = swift_slowAlloc(32, -1);
      v40 = swift_slowAlloc(64, -1);
      v51 = v40;
      *(_DWORD *)v13 = 136446723;
      *(_QWORD *)(v0 + 32) = sub_10002BA84(0xD000000000000016, 0x80000001002019A0, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2160;
      *(_QWORD *)(v0 + 40) = 1752392040;
      v14 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 14, v13 + 22);
      *(_WORD *)(v13 + 22) = 2081;
      v15 = Friend.handle.getter(v14);
      v16 = Handle.identifier.getter(v15);
      v18 = v17;
      v39(v12, v38);
      *(_QWORD *)(v0 + 48) = sub_10002BA84(v16, v18, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v13 + 24, v13 + 32);
      swift_bridgeObjectRelease(v18);
      v43(v11, v41);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Missing friendSharedSecretsRecord for %{private,mask.hash}s.", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v13, -1, -1);
      swift_release(v45);
      swift_release(v47);

      v43(v49, v41);
    }
    else
    {
      v25 = *(_QWORD *)(v0 + 432);
      v26 = *(_QWORD *)(v0 + 376);
      v27 = *(_QWORD *)(v0 + 352);
      v28 = *(_QWORD *)(v0 + 336);
      swift_release(*(_QWORD *)(v0 + 504));
      swift_release(v25);

      v10(v27, v28);
      v10(v26, v28);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 272));
    v29 = *(_QWORD *)(v0 + 368);
    v31 = *(_QWORD *)(v0 + 352);
    v30 = *(_QWORD *)(v0 + 360);
    v33 = *(_QWORD *)(v0 + 320);
    v32 = *(_QWORD *)(v0 + 328);
    v35 = *(_QWORD *)(v0 + 288);
    v34 = *(_QWORD *)(v0 + 296);
    v37 = *(_QWORD *)(v0 + 256);
    v36 = *(_QWORD *)(v0 + 264);
    v42 = *(_QWORD *)(v0 + 232);
    v44 = *(_QWORD *)(v0 + 224);
    v46 = *(_QWORD *)(v0 + 200);
    v48 = *(_QWORD *)(v0 + 192);
    v50 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 376));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 504);
    v20 = *(_QWORD *)(v0 + 296);
    v21 = *(_QWORD *)(v0 + 224);
    v22 = *(_QWORD *)(v0 + 160);
    sub_1000321F4(v1, v21, type metadata accessor for FriendSharedSecretsRecord);
    v23 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 536) = v23;
    v23[2] = v21;
    v23[3] = v20;
    v23[4] = v22;
    return swift_task_switch(sub_1001AD6E0, v19, 0);
  }
}

uint64_t sub_1001AD5A4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 280);
  swift_release(*(_QWORD *)(v0 + 504));
  swift_release(v2);
  v1(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = *(_QWORD *)(v0 + 368);
  v10 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 328);
  v14 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 232);
  v19 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AD6E0()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
     + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                  + 1));
  v0[68] = v1;
  *v1 = v0;
  v1[1] = sub_1001AD754;
  return ((uint64_t (*)(_QWORD, void *, _QWORD))v3)(v0[24], &unk_1002668F0, v0[67]);
}

uint64_t sub_1001AD754()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[63];
    v5 = sub_1001AD900;
  }
  else
  {
    v6 = v2[19];
    swift_task_dealloc(v2[67]);
    v5 = sub_1001AD7C8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001AD7C8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[63];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[22] + 104))(v0[23], enum case for CloudKitCoordinator.Database.private(_:), v0[21]);
  return swift_task_switch(sub_1001AD81C, v1, 0);
}

uint64_t sub_1001AD81C()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
     + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                  + 1));
  v0[70] = v1;
  *v1 = v0;
  v1[1] = sub_1001AD884;
  return ((uint64_t (*)(_QWORD, _QWORD))v3)(v0[24], v0[23]);
}

uint64_t sub_1001AD884()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  *(_QWORD *)(*(_QWORD *)v1 + 568) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[63];
    v5 = sub_1001ADA90;
  }
  else
  {
    v6 = v2[19];
    (*(void (**)(_QWORD, _QWORD))(v2[22] + 8))(v2[23], v2[21]);
    v5 = sub_1001ADC3C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001AD900()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 536));
  return swift_task_switch(sub_1001AD940, v1, 0);
}

uint64_t sub_1001AD940()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 504));
  swift_release(v2);
  v1(v3, v4);
  sub_100024990(v8, type metadata accessor for FriendSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 352);
  v10 = *(_QWORD *)(v0 + 360);
  v13 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 328);
  v15 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 224);
  v21 = *(_QWORD *)(v0 + 200);
  v22 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ADA90()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[19];
  (*(void (**)(_QWORD, _QWORD))(v0[22] + 8))(v0[23], v0[21]);
  return swift_task_switch(sub_1001ADAD8, v1, 0);
}

uint64_t sub_1001ADAD8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 504));
  swift_release(v2);
  sub_1000087A0(v9, &qword_100260F78);
  v1(v3, v4);
  sub_100024990(v8, type metadata accessor for FriendSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v10 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 352);
  v11 = *(_QWORD *)(v0 + 360);
  v14 = *(_QWORD *)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 296);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 264);
  v20 = *(_QWORD *)(v0 + 232);
  v21 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 192);
  v24 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ADC3C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 336);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 16))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 272));
  v5 = v1(v3, v2, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v52 = *(_QWORD *)(v0 + 504);
    v56 = *(_QWORD *)(v0 + 432);
    v58 = *(_QWORD *)(v0 + 376);
    v48 = *(_QWORD *)(v0 + 336);
    v49 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
    type = v7;
    v8 = *(_QWORD *)(v0 + 288);
    v44 = *(_QWORD *)(v0 + 280);
    v46 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
    v9 = *(_QWORD *)(v0 + 272);
    v10 = *(_QWORD *)(v0 + 256);
    v42 = *(_QWORD *)(v0 + 360);
    v43 = *(_QWORD *)(v0 + 240);
    v54 = *(_QWORD *)(v0 + 192);
    v11 = swift_slowAlloc(32, -1);
    v47 = swift_slowAlloc(64, -1);
    v61 = v47;
    *(_DWORD *)v11 = 136446723;
    v12 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v9, v12);
    v15 = v14;
    *(_QWORD *)(v0 + 56) = sub_10002BA84(v13, v14, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    v45 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v45(v8, v9);
    *(_WORD *)(v11 + 12) = 2160;
    *(_QWORD *)(v0 + 64) = 1752392040;
    v16 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v11 + 14, v11 + 22);
    *(_WORD *)(v11 + 22) = 2081;
    v17 = Friend.handle.getter(v16);
    v18 = Handle.identifier.getter(v17);
    v20 = v19;
    v46(v10, v43);
    *(_QWORD *)(v0 + 72) = sub_10002BA84(v18, v20, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease(v20);
    v49(v42, v48);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Successfully removed outgoingSharedSecret for %{public}s %{private,mask.hash}s\")", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v11, -1, -1);
    swift_release(v52);
    swift_release(v56);

    sub_1000087A0(v54, &qword_100260F78);
    v21 = v45;
    v49(v58, v48);
  }
  else
  {
    v22 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
    v23 = *(_QWORD *)(v0 + 432);
    v59 = *(_QWORD *)(v0 + 376);
    v24 = *(_QWORD *)(v0 + 360);
    v25 = *(_QWORD *)(v0 + 336);
    v26 = *(_QWORD *)(v0 + 280);
    v27 = *(_QWORD *)(v0 + 288);
    v28 = *(_QWORD *)(v0 + 272);
    v29 = *(_QWORD *)(v0 + 192);
    swift_release(*(_QWORD *)(v0 + 504));
    swift_release(v23);

    v22(v24, v25);
    v21 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v21(v27, v28);
    sub_1000087A0(v29, &qword_100260F78);
    v22(v59, v25);
  }
  v30 = *(_QWORD *)(v0 + 296);
  v31 = *(_QWORD *)(v0 + 272);
  sub_100024990(*(_QWORD *)(v0 + 224), type metadata accessor for FriendSharedSecretsRecord);
  v21(v30, v31);
  v32 = *(_QWORD *)(v0 + 368);
  v34 = *(_QWORD *)(v0 + 352);
  v33 = *(_QWORD *)(v0 + 360);
  v36 = *(_QWORD *)(v0 + 320);
  v35 = *(_QWORD *)(v0 + 328);
  v38 = *(_QWORD *)(v0 + 288);
  v37 = *(_QWORD *)(v0 + 296);
  v40 = *(_QWORD *)(v0 + 256);
  v39 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 232);
  v53 = *(_QWORD *)(v0 + 224);
  v55 = *(_QWORD *)(v0 + 200);
  v57 = *(_QWORD *)(v0 + 192);
  v60 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(v60);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AE044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 400));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 328);
  v8 = *(_QWORD *)(v0 + 288);
  v7 = *(_QWORD *)(v0 + 296);
  v9 = *(_QWORD *)(v0 + 256);
  v10 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 232);
  v13 = *(_QWORD *)(v0 + 224);
  v14 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AE150()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 280);
  swift_release(*(_QWORD *)(v0 + 432));
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = *(_QWORD *)(v0 + 368);
  v9 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 360);
  v11 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 232);
  v18 = *(_QWORD *)(v0 + 224);
  v19 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 192);
  v21 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AE280(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_100263DC4);
  v2[5] = v3;
  *v3 = v2;
  v3[1] = sub_1001AE2C8;
  return sub_100112F64();
}

uint64_t sub_1001AE2C8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_BYTE *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001AE324, v3, 0);
}

void sub_1001AE324()
{
  __asm { BR              X10 }
}

uint64_t sub_1001AE388()
{
  uint64_t v0;
  _QWORD *v1;

  swift_bridgeObjectRelease(0xE800000000000000);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1001AE5A4;
  return daemon.getter();
}

uint64_t sub_1001AE5A4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  *(_QWORD *)(*v1 + 56) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for NIRangingService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260FE0, type metadata accessor for NIRangingService, (uint64_t)&unk_1001F6C08);
  *v6 = v5;
  v6[1] = sub_1001AE68C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001AE68C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 64);
  *(_QWORD *)(*(_QWORD *)v2 + 72) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[4];
    v7 = sub_100064E9C;
  }
  else
  {
    v8 = v4[4];
    swift_release(v4[7]);
    v4[10] = a1;
    v7 = sub_1001AE710;
    v6 = v8;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001AE710()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(uint64_t **)(v0 + 24);
  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)v1 + *(int *)(type metadata accessor for FindingConfigEnvelopeV1(0) + 24);
  v7 = (_QWORD *)swift_task_alloc(dword_1002643FC);
  *(_QWORD *)(v0 + 88) = v7;
  *v7 = v0;
  v7[1] = sub_1001AE798;
  return sub_10012D6E8(v3, v2, v4, v5, v6);
}

uint64_t sub_1001AE798()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_1001AE7F0, v1, 0);
}

uint64_t sub_1001AE7F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AE824(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_100263DC4);
  v2[5] = v3;
  *v3 = v2;
  v3[1] = sub_1001AE86C;
  return sub_100112F64();
}

uint64_t sub_1001AE86C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_BYTE *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001AE8C8, v3, 0);
}

void sub_1001AE8C8()
{
  __asm { BR              X10 }
}

uint64_t sub_1001AE92C()
{
  uint64_t v0;
  _QWORD *v1;

  swift_bridgeObjectRelease(0xE800000000000000);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1001AEB48;
  return daemon.getter();
}

uint64_t sub_1001AEB48(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  *(_QWORD *)(*v1 + 56) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for NIRangingService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260FE0, type metadata accessor for NIRangingService, (uint64_t)&unk_1001F6C08);
  *v6 = v5;
  v6[1] = sub_1001AEC30;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001AEC30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 64);
  *(_QWORD *)(*(_QWORD *)v2 + 72) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[4];
    v7 = sub_1001B4274;
  }
  else
  {
    v8 = v4[4];
    swift_release(v4[7]);
    v4[10] = a1;
    v7 = sub_1001AECB4;
    v6 = v8;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001AECB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(uint64_t **)(v0 + 24);
  v2 = (uint64_t)v1 + *(int *)(type metadata accessor for FindingConfigSessionStopEnvelopeV1(0) + 20);
  v3 = *v1;
  v4 = v1[1];
  v5 = (_QWORD *)swift_task_alloc(dword_100264444);
  *(_QWORD *)(v0 + 88) = v5;
  *v5 = v0;
  v5[1] = sub_1001AED28;
  return sub_10012CF9C(v2, v3, v4);
}

uint64_t sub_1001AED28()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_1001B4284, v1, 0);
}

uint64_t sub_1001AED80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_1001AED98, v1, 0);
}

uint64_t sub_1001AED98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = type metadata accessor for Account(0);
    v11 = sub_100004EA8(&qword_1002619B8, (uint64_t (*)(uint64_t))&type metadata accessor for Account, (uint64_t)&protocol conformance descriptor for Account);
    swift_bridgeObjectRetain(v7);
    v13 = Set.description.getter(v12, v10, v11);
    v15 = v14;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v13, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Messaging accounts changed. Accounts: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 24), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AEFA0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for Device(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  v2[12] = swift_task_alloc(v5);
  return swift_task_switch(sub_1001AF01C, v1, 0);
}

uint64_t sub_1001AF01C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = v0[6];
  v2 = type metadata accessor for Logger(0);
  v0[13] = sub_100037A9C(v2, (uint64_t)qword_10027B330);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v16 = v0[8];
    v6 = v0[6];
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v17 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = sub_100004EA8(&qword_1002619A8, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    swift_bridgeObjectRetain(v6);
    v11 = Set.description.getter(v10, v16, v9);
    v13 = v12;
    swift_bridgeObjectRelease(v6);
    v0[5] = sub_10002BA84(v11, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Messaging devices changed. Devices: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[6], 2);
  }

  v14 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[14] = v14;
  *v14 = v0;
  v14[1] = sub_1001AF240;
  return daemon.getter();
}

uint64_t sub_1001AF240(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 112);
  v5 = *v1;
  *(_QWORD *)(*v1 + 120) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 128) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for NITokenService_LocalMessaging();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260F68, (uint64_t (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging, (uint64_t)&unk_1001F9E84);
  *v6 = v5;
  v6[1] = sub_1001AF328;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001AF328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 128);
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[7];
    v6 = sub_1001AF8C0;
  }
  else
  {
    v7 = v3[7];
    swift_release(v3[15]);
    v6 = sub_1001AF3A4;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

void sub_1001AF3A4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  int64_t v7;
  void (*v8)(uint64_t, uint64_t);
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, unint64_t, uint64_t, __n128);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 184) = v2;
  v3 = 1 << v2;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 56);
  v6 = swift_bridgeObjectRetain(v1);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      v11 = *(_QWORD *)(v0 + 48);
      goto LABEL_23;
    }
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    v13 = (unint64_t)((1 << *(_BYTE *)(v0 + 184)) + 63) >> 6;
    v11 = *(_QWORD *)(v0 + 48);
    if (v12 >= v13)
      goto LABEL_26;
    v14 = v11 + 56;
    v15 = *(_QWORD *)(v11 + 56 + 8 * v12);
    ++v7;
    if (!v15)
    {
      v7 = v12 + 1;
      if (v12 + 1 >= v13)
        goto LABEL_26;
      v15 = *(_QWORD *)(v14 + 8 * v7);
      if (!v15)
      {
        v7 = v12 + 2;
        if (v12 + 2 >= v13)
          goto LABEL_26;
        v15 = *(_QWORD *)(v14 + 8 * v7);
        if (!v15)
          break;
      }
    }
LABEL_22:
    v5 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_23:
    *(_QWORD *)(v0 + 152) = v7;
    *(_QWORD *)(v0 + 160) = v5;
    v17 = *(_QWORD *)(v0 + 88);
    v18 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 72);
    v19 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 64);
    v22 = *(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v20 + 16);
    v22(v18, *(_QWORD *)(v11 + 48) + *(_QWORD *)(v20 + 72) * v10, v21, v6);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v17, v18, v21);
    LOBYTE(v20) = Device.isLocallyPaired.getter(v23);
    v24 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v22)(v19, v17, v21);
    v26 = *(_QWORD *)(v0 + 72);
    v25 = *(_QWORD *)(v0 + 80);
    v27 = *(_QWORD *)(v0 + 64);
    if ((v20 & 1) != 0)
    {
      v28 = Device.isConnected.getter(v24);
      v8 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      *(_QWORD *)(v0 + 168) = v8;
      v8(v25, v27);
      if ((v28 & 1) != 0)
      {
        v29 = (_QWORD *)swift_task_alloc(dword_1002660EC);
        *(_QWORD *)(v0 + 176) = v29;
        *v29 = v0;
        v29[1] = sub_1001AF614;
        sub_1001868E0(*(_QWORD *)(v0 + 88), 0);
        return;
      }
    }
    else
    {
      v8 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v8(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    }
    v8(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
  }
  v16 = v12 + 3;
  if (v16 >= v13)
  {
LABEL_26:
    v30 = *(_QWORD *)(v0 + 136);
    swift_release(v11);
    swift_release(v30);
    v31 = *(_QWORD *)(v0 + 88);
    v32 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v15 = *(_QWORD *)(v14 + 8 * v16);
  if (v15)
  {
    v7 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v7 >= v13)
      goto LABEL_26;
    v15 = *(_QWORD *)(v14 + 8 * v7);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1001AF614()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  return swift_task_switch(sub_1001AF66C, v1, 0);
}

uint64_t sub_1001AF66C()
{
  uint64_t v0;
  uint64_t result;
  int64_t v2;
  unint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 168))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  while (1)
  {
    if (v3)
    {
      v5 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      v6 = v5 | (v2 << 6);
      result = *(_QWORD *)(v0 + 48);
      goto LABEL_20;
    }
    v7 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    v8 = (unint64_t)((1 << *(_BYTE *)(v0 + 184)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 48);
    if (v7 >= v8)
      goto LABEL_23;
    v9 = result + 56;
    v10 = *(_QWORD *)(result + 56 + 8 * v7);
    ++v2;
    if (!v10)
    {
      v2 = v7 + 1;
      if (v7 + 1 >= v8)
        goto LABEL_23;
      v10 = *(_QWORD *)(v9 + 8 * v2);
      if (!v10)
      {
        v2 = v7 + 2;
        if (v7 + 2 >= v8)
          goto LABEL_23;
        v10 = *(_QWORD *)(v9 + 8 * v2);
        if (!v10)
          break;
      }
    }
LABEL_19:
    v3 = (v10 - 1) & v10;
    v6 = __clz(__rbit64(v10)) + (v2 << 6);
LABEL_20:
    *(_QWORD *)(v0 + 152) = v2;
    *(_QWORD *)(v0 + 160) = v3;
    v12 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 64);
    v17 = *(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16);
    v17(v13, *(_QWORD *)(result + 48) + *(_QWORD *)(v15 + 72) * v6, v16);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v12, v13, v16);
    LOBYTE(v15) = Device.isLocallyPaired.getter(v18);
    v19 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v17)(v14, v12, v16);
    v21 = *(_QWORD *)(v0 + 72);
    v20 = *(_QWORD *)(v0 + 80);
    v22 = *(_QWORD *)(v0 + 64);
    if ((v15 & 1) != 0)
    {
      v23 = Device.isConnected.getter(v19);
      v4 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      *(_QWORD *)(v0 + 168) = v4;
      v4(v20, v22);
      if ((v23 & 1) != 0)
      {
        v24 = (_QWORD *)swift_task_alloc(dword_1002660EC);
        *(_QWORD *)(v0 + 176) = v24;
        *v24 = v0;
        v24[1] = sub_1001AF614;
        return sub_1001868E0(*(_QWORD *)(v0 + 88), 0);
      }
    }
    else
    {
      v4 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v4(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    }
    result = ((uint64_t (*)(_QWORD, _QWORD))v4)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
  }
  v11 = v7 + 3;
  if (v11 >= v8)
  {
LABEL_23:
    v25 = *(_QWORD *)(v0 + 136);
    swift_release(result);
    swift_release(v25);
    v26 = *(_QWORD *)(v0 + 88);
    v27 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v10 = *(_QWORD *)(v9 + 8 * v11);
  if (v10)
  {
    v2 = v11;
    goto LABEL_19;
  }
  while (1)
  {
    v2 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v2 >= v8)
      goto LABEL_23;
    v10 = *(_QWORD *)(v9 + 8 * v2);
    ++v11;
    if (v10)
      goto LABEL_19;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1001AF8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 144);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000018, 0x8000000100201570, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 144);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AFAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1002668FC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10003BF7C;
  return sub_1001A4DC4(a1, a2, a3);
}

uint64_t sub_1001AFB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100266820 + dword_100266820);
  v7 = (_QWORD *)swift_task_alloc(unk_100266824);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10003BF7C;
  return v9(a1, a2, a3);
}

uint64_t sub_1001AFBC4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_10026681C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  v5[3] = a1;
  return swift_task_switch(sub_1001AED98, v4, 0);
}

uint64_t sub_1001AFC28(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100266814);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  return sub_1001AEFA0(a1);
}

uint64_t sub_1001AFC78(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v2[17] = a1;
  v2[18] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[19] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[20] = v4;
  v2[21] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v2[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MessagingOptions(0);
  v2[23] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[24] = v7;
  v2[25] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_1002601E8);
  v2[26] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[27] = v9;
  v2[28] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100260580);
  v2[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Account(0);
  v2[30] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[31] = v12;
  v2[32] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MessagingCapability(0);
  v2[33] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[34] = v14;
  v2[35] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Destination(0);
  v2[36] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[37] = v16;
  v2[38] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Handle(0);
  v2[39] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v2[40] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[41] = swift_task_alloc(v19);
  v2[42] = swift_task_alloc(v19);
  v2[43] = swift_task_alloc(v19);
  v2[44] = swift_task_alloc(v19);
  v2[45] = swift_task_alloc(v19);
  return swift_task_switch(sub_1001AFE48, v1, 0);
}

uint64_t sub_1001AFE48(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;

  Friend.handle.getter(a1);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = v1[44];
  v3 = v1[45];
  v4 = v1[39];
  v5 = v1[40];
  v6 = type metadata accessor for Logger(0);
  v1[46] = sub_100037A9C(v6, (uint64_t)qword_10027B330);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v1[47] = v7;
  v8 = v7(v2, v3, v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v1[44];
  v13 = v1[40];
  if (v11)
  {
    v23 = v1[39];
    v14 = swift_slowAlloc(32, -1);
    v15 = swift_slowAlloc(64, -1);
    v24 = v15;
    *(_DWORD *)v14 = 136446723;
    v1[15] = sub_10002BA84(0xD000000000000012, 0x8000000100201A00, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 15, v1 + 16, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2160;
    v1[16] = 1752392040;
    v16 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 17, v14 + 14, v14 + 22);
    *(_WORD *)(v14 + 22) = 2081;
    v17 = Handle.identifier.getter(v16);
    v19 = v18;
    v1[7] = sub_10002BA84(v17, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 7, v1 + 8, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease(v19);
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v12, v23);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s from: %{private,mask.hash}s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v1[44], v1[39]);
  }

  v1[48] = v20;
  v21 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v1[49] = v21;
  *v21 = v1;
  v21[1] = sub_1001B00B8;
  return daemon.getter();
}

uint64_t sub_1001B00B8(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 392);
  v5 = *v1;
  *(_QWORD *)(*v1 + 400) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[51] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[52] = v7;
  v8 = type metadata accessor for IDSTransportServiceFMF();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[53] = v9;
  v10 = sub_100004EA8(&qword_1002600F0, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F2FD8);
  *v6 = v5;
  v6[1] = sub_1001B01B0;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001B01B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 408);
  v3[54] = a1;
  v3[55] = v1;
  swift_task_dealloc(v4);
  v5 = v3[50];
  v6 = v3[18];
  swift_release(v5);
  if (v1)
    v7 = sub_10011C480;
  else
    v7 = sub_1001B0228;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001B0228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);

  v2 = Handle.isPhoneNumber.getter(a1);
  v3 = v2;
  v4 = Handle.identifier.getter(v2);
  if ((v3 & 1) != 0)
    Destination.init(phoneNumber:)(v4);
  else
    Destination.init(email:)(v4);
  v5 = *(_QWORD *)(v1 + 432);
  v7 = *(_QWORD *)(v1 + 272);
  v6 = *(_QWORD *)(v1 + 280);
  *(_DWORD *)(v1 + 536) = enum case for MessagingCapability.supportsPeopleFindingV1(_:);
  v8 = *(void (**)(uint64_t))(v7 + 104);
  *(_QWORD *)(v1 + 448) = v8;
  v8(v6);
  return swift_task_switch(sub_1001B02A8, v5, 0);
}

uint64_t sub_1001B02A8()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of QueryController.destinationHasCapability(destination:capability:)
     + async function pointer to dispatch thunk of QueryController.destinationHasCapability(destination:capability:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of QueryController.destinationHasCapability(destination:capability:)
                                  + 1));
  v0[57] = v1;
  *v1 = v0;
  v1[1] = sub_1001B0314;
  return ((uint64_t (*)(_QWORD, _QWORD))v3)(v0[38], v0[35]);
}

uint64_t sub_1001B0314(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 456);
  *(_QWORD *)(*v2 + 464) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 432);
    v7 = sub_10011B4FC;
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 296);
    v8 = *(_QWORD *)(v4 + 304);
    v10 = *(_QWORD *)(v4 + 280);
    v11 = *(_QWORD *)(v4 + 288);
    v12 = *(_QWORD *)(v4 + 264);
    v13 = *(_QWORD *)(v4 + 272);
    v14 = *(_QWORD *)(v4 + 144);
    *(_BYTE *)(v4 + 541) = a1 & 1;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v11);
    v7 = sub_1001B03C0;
    v6 = v14;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001B03C0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35[2];

  if (*(_BYTE *)(v0 + 541) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 472) = v1;
    *v1 = v0;
    v1[1] = sub_1001B06E4;
    return daemon.getter();
  }
  else
  {
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 312));
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 328);
    v8 = *(_QWORD *)(v0 + 312);
    if (v6)
    {
      v33 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
      v9 = swift_slowAlloc(32, -1);
      v10 = swift_slowAlloc(64, -1);
      v35[0] = v10;
      *(_DWORD *)v9 = 136446723;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000012, 0x8000000100201A00, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v9 + 4, v9 + 12);
      *(_WORD *)(v9 + 12) = 2160;
      *(_QWORD *)(v0 + 32) = 1752392040;
      v11 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
      *(_WORD *)(v9 + 22) = 2081;
      v12 = Handle.identifier.getter(v11);
      v14 = v13;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(v12, v13, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 24, v9 + 32);
      swift_bridgeObjectRelease(v14);
      v33(v7, v8);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s %{private,mask.hash}s missing required capability", (uint8_t *)v9, 0x20u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 312));
    }

    v15 = *(_QWORD *)(v0 + 432);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v17 = *(_QWORD *)(v0 + 360);
    v18 = *(_QWORD *)(v0 + 312);
    v19 = sub_100097FB4();
    v34 = swift_allocError(&type metadata for NITokenService.Error, v19, 0, 0);
    *v20 = 3;
    swift_willThrow(v34);
    swift_release(v15);
    v16(v17, v18);
    v21 = *(_QWORD *)(v0 + 352);
    v23 = *(_QWORD *)(v0 + 336);
    v22 = *(_QWORD *)(v0 + 344);
    v24 = *(_QWORD *)(v0 + 328);
    v25 = *(_QWORD *)(v0 + 304);
    v26 = *(_QWORD *)(v0 + 280);
    v27 = *(_QWORD *)(v0 + 256);
    v28 = *(_QWORD *)(v0 + 224);
    v29 = *(_QWORD *)(v0 + 232);
    v30 = *(_QWORD *)(v0 + 200);
    v31 = *(_QWORD *)(v0 + 176);
    v32 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 360));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v29);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001B06E4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 472);
  v5 = *v1;
  *(_QWORD *)(*v1 + 480) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[61] = v6;
  v7 = type metadata accessor for AccountService(0);
  v8 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_1001B078C;
  return ActorServiceDaemon.getService<A>()(v3[52], v7, v3[53], v8);
}

uint64_t sub_1001B078C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 488);
  v5 = *(_QWORD **)v2;
  v5[62] = a1;
  v5[63] = v1;
  swift_task_dealloc(v4);
  v6 = v5[60];
  if (v1)
  {
    v7 = v5[18];
    swift_release(v6);
    return swift_task_switch(sub_10011C574, v7, 0);
  }
  else
  {
    swift_release(v6);
    v9 = (_QWORD *)swift_task_alloc(dword_1002612E4);
    v5[64] = v9;
    *v9 = v5;
    v9[1] = sub_1001B0840;
    return sub_1000069E8(v5[29]);
  }
}

uint64_t sub_1001B0840()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 512));
  return swift_task_switch(sub_1001B0898, v1, 0);
}

uint64_t sub_1001B0898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  os_log_type_t type;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[2];

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = sub_1000087A0(v3, &qword_100260580);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v80[0] = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD000000000000012, 0x8000000100201A00, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Missing primary account to send revoke token with my dsid!", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v9 = *(_QWORD *)(v0 + 496);
    v10 = *(_QWORD *)(v0 + 432);
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v12 = *(_QWORD *)(v0 + 360);
    v13 = *(_QWORD *)(v0 + 312);
    v14 = sub_100097FB4();
    v15 = swift_allocError(&type metadata for NITokenService.Error, v14, 0, 0);
    *v16 = 16;
    swift_willThrow(v15);
    swift_release(v9);
    swift_release(v10);
    v17 = v12;
    v18 = v13;
    goto LABEL_10;
  }
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 376);
  v20 = *(_QWORD *)(v0 + 360);
  v21 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 312);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 256), v3, v1);
  v23 = Account.dsidBase64EncodedString()();
  v19(v21, v20, v22);
  v24 = swift_bridgeObjectRetain_n(v23._object, 2);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  v27 = os_log_type_enabled(v25, v26);
  v28 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
  v29 = *(_QWORD *)(v0 + 344);
  v30 = *(_QWORD *)(v0 + 312);
  if (v27)
  {
    v31 = swift_slowAlloc(42, -1);
    v76 = swift_slowAlloc(64, -1);
    v80[0] = v76;
    *(_DWORD *)v31 = 141558787;
    *(_QWORD *)(v0 + 88) = 1752392040;
    v32 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2081;
    v33 = Handle.identifier.getter(v32);
    type = v26;
    v35 = v34;
    *(_QWORD *)(v0 + 96) = sub_10002BA84(v33, v34, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease(v35);
    v28(v29, v30);
    *(_WORD *)(v31 + 22) = 2160;
    *(_QWORD *)(v0 + 104) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v31 + 24, v31 + 32);
    *(_WORD *)(v31 + 32) = 2081;
    swift_bridgeObjectRetain(v23._object);
    *(_QWORD *)(v0 + 112) = sub_10002BA84(v23._countAndFlagsBits, (unint64_t)v23._object, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v31 + 34, v31 + 42);
    swift_bridgeObjectRelease_n(v23._object, 3);
    _os_log_impl((void *)&_mh_execute_header, v25, type, "Revoking shared secret from %{private,mask.hash}s.\nserverId: %{private,mask.hash}s over IDS.", (uint8_t *)v31, 0x2Au);
    swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {
    v28(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 312));
    swift_bridgeObjectRelease_n(v23._object, 2);

  }
  v36 = *(_QWORD *)(v0 + 504);
  *(_BYTE *)(v0 + 540) = 6;
  *(Swift::String *)(v0 + 16) = v23;
  v37 = sub_10008277C();
  v38 = sub_1001B3C1C();
  v39 = sub_1001B3C60();
  Message.init<A>(type:version:payload:)(v0 + 540, 1, v0 + 16, &type metadata for FriendSharingMessageType, &type metadata for FindingTokenRevokeEnvelopeV1, v37, v38, v39);
  if (v36)
  {
    v40 = *(_QWORD *)(v0 + 432);
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v41 = *(_QWORD *)(v0 + 360);
    v42 = *(_QWORD *)(v0 + 312);
    v44 = *(_QWORD *)(v0 + 248);
    v43 = *(_QWORD *)(v0 + 256);
    v45 = *(_QWORD *)(v0 + 240);
    swift_release(*(_QWORD *)(v0 + 496));
    swift_release(v40);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    v17 = v41;
    v18 = v42;
LABEL_10:
    v11(v17, v18);
    v46 = *(_QWORD *)(v0 + 352);
    v48 = *(_QWORD *)(v0 + 336);
    v47 = *(_QWORD *)(v0 + 344);
    v49 = *(_QWORD *)(v0 + 328);
    v50 = *(_QWORD *)(v0 + 304);
    v51 = *(_QWORD *)(v0 + 280);
    v52 = *(_QWORD *)(v0 + 256);
    v53 = *(_QWORD *)(v0 + 224);
    v54 = *(_QWORD *)(v0 + 232);
    v77 = *(_QWORD *)(v0 + 200);
    v78 = *(_QWORD *)(v0 + 176);
    v79 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 360));
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v53);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v56 = *(_QWORD *)(v0 + 296);
  v57 = sub_100037A5C(&qword_100261990);
  v58 = swift_allocObject(v57, ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72), *(unsigned __int8 *)(v56 + 80) | 7);
  *(_OWORD *)(v58 + 16) = xmmword_1001F35F0;
  v59 = Handle.isPhoneNumber.getter(v58);
  v60 = v59;
  v61 = Handle.identifier.getter(v59);
  if ((v60 & 1) != 0)
    Destination.init(phoneNumber:)(v61);
  else
    Destination.init(email:)(v61);
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
  v63 = *(unsigned int *)(v0 + 536);
  v64 = *(_QWORD *)(v0 + 432);
  v65 = *(_QWORD *)(v0 + 264);
  v66 = *(_QWORD *)(v0 + 272);
  v67 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 56))(v67, 1, 1, *(_QWORD *)(v0 + 152));
  v68 = sub_100037A5C(&qword_100261B30);
  v69 = *(unsigned __int8 *)(v66 + 80);
  v70 = (v69 + 32) & ~v69;
  v71 = swift_allocObject(v68, v70 + *(_QWORD *)(v66 + 72), v69 | 7);
  *(_OWORD *)(v71 + 16) = xmmword_1001F35F0;
  v72 = v71 + v70;
  v62(v72, v63, v65);
  v73 = sub_10018C498(v71);
  swift_setDeallocating(v71);
  swift_arrayDestroy(v72, 1, v65);
  swift_deallocClassInstance(v71, 32, 7);
  v74 = sub_10018C36C((uint64_t)_swiftEmptyArrayStorage);
  MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)(v58, 0, v67, 0, 1, 0, v73, v74, 0, 0);
  return swift_task_switch(sub_1001B0F6C, v64, 0);
}

uint64_t sub_1001B0F6C()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to InternetMessaging.send(message:messageOptions:)[1]);
  v0[65] = v1;
  *v1 = v0;
  v1[1] = sub_1001B0FCC;
  return InternetMessaging.send(message:messageOptions:)(v0[21], v0[28], v0[25]);
}

uint64_t sub_1001B0FCC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  *(_QWORD *)(*(_QWORD *)v1 + 528) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[18];
    v5 = sub_10011BFC4;
  }
  else
  {
    v6 = v2[18];
    (*(void (**)(_QWORD, _QWORD))(v2[20] + 8))(v2[21], v2[19]);
    v5 = sub_1001B1044;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001B1044()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 312));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v33 = *(_QWORD *)(v0 + 496);
    v35 = *(_QWORD *)(v0 + 432);
    v30 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v49 = *(_QWORD *)(v0 + 360);
    v4 = *(_QWORD *)(v0 + 336);
    v29 = *(_QWORD *)(v0 + 312);
    v43 = *(_QWORD *)(v0 + 240);
    v46 = *(_QWORD *)(v0 + 256);
    v39 = *(_QWORD *)(v0 + 224);
    v41 = *(_QWORD *)(v0 + 248);
    v36 = *(_QWORD *)(v0 + 216);
    v37 = *(_QWORD *)(v0 + 208);
    v34 = *(_QWORD *)(v0 + 200);
    v31 = *(_QWORD *)(v0 + 192);
    v32 = *(_QWORD *)(v0 + 184);
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 72) = 1752392040;
    v52 = v6;
    *(_DWORD *)v5 = 141558275;
    v7 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2081;
    v8 = Handle.identifier.getter(v7);
    v10 = v9;
    *(_QWORD *)(v0 + 80) = sub_10002BA84(v8, v9, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v10);
    v30(v4, v29);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully revoked finding token from %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
    swift_release(v33);
    swift_release(v35);

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v34, v32);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v39, v37);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v46, v43);
    v30(v49, v29);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 432);
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v50 = *(_QWORD *)(v0 + 360);
    v13 = *(_QWORD *)(v0 + 336);
    v14 = *(_QWORD *)(v0 + 312);
    v44 = *(_QWORD *)(v0 + 240);
    v47 = *(_QWORD *)(v0 + 256);
    v15 = *(_QWORD *)(v0 + 216);
    v40 = *(_QWORD *)(v0 + 224);
    v42 = *(_QWORD *)(v0 + 248);
    v16 = *(_QWORD *)(v0 + 200);
    v38 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 184);
    v18 = *(_QWORD *)(v0 + 192);
    swift_release(*(_QWORD *)(v0 + 496));
    swift_release(v11);

    v12(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v40, v38);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v47, v44);
    v12(v50, v14);
  }
  v19 = *(_QWORD *)(v0 + 352);
  v21 = *(_QWORD *)(v0 + 336);
  v20 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 328);
  v23 = *(_QWORD *)(v0 + 304);
  v24 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD *)(v0 + 256);
  v27 = *(_QWORD *)(v0 + 224);
  v26 = *(_QWORD *)(v0 + 232);
  v45 = *(_QWORD *)(v0 + 200);
  v48 = *(_QWORD *)(v0 + 176);
  v51 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v45);
  swift_task_dealloc(v48);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B13A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[5] = a4;
  v5[6] = a5;
  v7 = type metadata accessor for Handle(0);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Friend(0);
  v5[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001B1430, a5, 0);
}

uint64_t sub_1001B1430()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t type;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = v0[5];
  v3 = v0[11];
  v2 = v0[12];
  v4 = v0[10];
  v5 = type metadata accessor for Logger(0);
  sub_100037A9C(v5, (uint64_t)qword_10027B330);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[12];
  if (v9)
  {
    type = v8;
    v11 = v0[9];
    v20 = v0[8];
    v21 = v0[7];
    v24 = v0[10];
    v22 = v0[11];
    v12 = swift_slowAlloc(32, -1);
    v25 = swift_slowAlloc(64, -1);
    v26 = v25;
    *(_DWORD *)v12 = 136446723;
    v0[2] = sub_10002BA84(0xD000000000000020, 0x8000000100201970, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2160;
    v0[3] = 1752392040;
    v13 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2081;
    v14 = Friend.handle.getter(v13);
    v15 = Handle.identifier.getter(v14);
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v11, v21);
    v0[4] = sub_10002BA84(v15, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v10, v24);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "%{public}s Generating tokens for: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[11] + 8))(v0[12], v0[10]);
  }

  v18 = (_QWORD *)swift_task_alloc(dword_100261AE4);
  v0[13] = v18;
  *v18 = v0;
  v18[1] = sub_1001B427C;
  return sub_10008862C(v0[5]);
}

uint64_t sub_1001B16D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[5] = a4;
  v5[6] = a5;
  v7 = type metadata accessor for Handle(0);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Friend(0);
  v5[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001B1760, a5, 0);
}

uint64_t sub_1001B1760()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t type;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = v0[5];
  v3 = v0[11];
  v2 = v0[12];
  v4 = v0[10];
  v5 = type metadata accessor for Logger(0);
  sub_100037A9C(v5, (uint64_t)qword_10027B330);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[12];
  if (v9)
  {
    type = v8;
    v11 = v0[9];
    v20 = v0[8];
    v21 = v0[7];
    v24 = v0[10];
    v22 = v0[11];
    v12 = swift_slowAlloc(32, -1);
    v25 = swift_slowAlloc(64, -1);
    v26 = v25;
    *(_DWORD *)v12 = 136446723;
    v0[2] = sub_10002BA84(0xD000000000000020, 0x8000000100201970, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2160;
    v0[3] = 1752392040;
    v13 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2081;
    v14 = Friend.handle.getter(v13);
    v15 = Handle.identifier.getter(v14);
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v11, v21);
    v0[4] = sub_10002BA84(v15, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v10, v24);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "%{public}s Generating tokens for: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[11] + 8))(v0[12], v0[10]);
  }

  v18 = (_QWORD *)swift_task_alloc(dword_100261AE4);
  v0[13] = v18;
  *v18 = v0;
  v18[1] = sub_1001B1A04;
  return sub_10008862C(v0[5]);
}

uint64_t sub_1001B1A04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*v0 + 96);
  v2 = *(_QWORD *)(*v0 + 72);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1001B1A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_1001B1A7C, 0, 0);
}

uint64_t sub_1001B1A7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)[1]);
  *(_QWORD *)(v0 + 56) = v2;
  v3 = type metadata accessor for FriendSharedSecretsRecord(0);
  v4 = sub_100004EA8(&qword_100260FB8, type metadata accessor for FriendSharedSecretsRecord, (uint64_t)&unk_1001F5398);
  *v2 = v0;
  v2[1] = sub_1001B1B28;
  return CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)(*(_QWORD *)(v0 + 24), sub_1001B426C, v1, v3, v4);
}

uint64_t sub_1001B1B28()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1001B1B9C, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 48));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1001B1B9C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B1BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v8 = type metadata accessor for Logger(0);
  sub_100037A9C(v8, (uint64_t)qword_10027B330);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(12, -1);
    v26 = a1;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    v28 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v4, v15);
    v18 = v17;
    v27 = sub_10002BA84(v16, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Removing outgoingSharedSecret for %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    v19 = v13;
    a1 = v26;
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  v20 = type metadata accessor for FriendSharedSecretsRecord(0);
  v21 = a1 + *(int *)(v20 + 24);
  sub_100037AF8(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
  *(_OWORD *)v21 = xmmword_1001F48A0;
  v22 = a1 + *(int *)(v20 + 28);
  sub_1000087A0(v22, (uint64_t *)&unk_100262930);
  v23 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
}

uint64_t sub_1001B1E50(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 32) = a2;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_1001B1E6C, 0, 0);
}

uint64_t sub_1001B1E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 24);
    swift_errorRetain(v1);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v2 = type metadata accessor for Logger(0);
    sub_100037A9C(v2, (uint64_t)qword_10027B330);
    swift_errorRetain(v1);
    v3 = swift_errorRetain(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 24);
    if (v6)
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v8 = 138543362;
      swift_errorRetain(v1);
      v10 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(_QWORD *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
      *v9 = v10;
      sub_10007E9BC(v7, 1);
      sub_10007E9BC(v7, 1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "revokeFindingToken error: %{public}@", v8, 0xCu);
      v11 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      sub_10007E9BC(v7, 1);
    }
    else
    {
      sub_10007E9BC(*(_QWORD *)(v0 + 24), 1);
      sub_10007E9BC(v7, 1);
      swift_errorRelease(v1);

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B2064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4[31] = a3;
  v4[32] = v3;
  v4[29] = a1;
  v4[30] = a2;
  v4[33] = *v3;
  v5 = type metadata accessor for FindingConfigSessionStopEnvelopeV1(0);
  v4[34] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[35] = swift_task_alloc(v6);
  v4[36] = swift_task_alloc(v6);
  v7 = type metadata accessor for FindingConfigEnvelopeV1(0);
  v4[37] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[38] = swift_task_alloc(v8);
  v4[39] = swift_task_alloc(v8);
  v9 = type metadata accessor for UUID(0);
  v4[40] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FindingTokenEnvelopeV1(0);
  v4[41] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[42] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v4[43] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[44] = swift_task_alloc(v13);
  v4[45] = swift_task_alloc(v13);
  v4[46] = swift_task_alloc(v13);
  v14 = sub_100037A5C(&qword_1002601E8);
  v4[47] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[48] = v15;
  v4[49] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Destination(0);
  v4[50] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[51] = v17;
  v4[52] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Account(0);
  v4[53] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v4[54] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[55] = swift_task_alloc(v20);
  v4[56] = swift_task_alloc(v20);
  return swift_task_switch(sub_1001B2204, v3, 0);
}

void sub_1001B2204()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50[4];

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = v0[29];
  v2 = v0[56];
  v3 = v0[53];
  v4 = v0[54];
  v6 = v0[51];
  v5 = v0[52];
  v42 = v0[50];
  v47 = v0[47];
  v49 = v0[49];
  v7 = v0[30];
  v44 = v0[48];
  v46 = v0[31];
  v8 = type metadata accessor for Logger(0);
  v0[57] = sub_100037A9C(v8, (uint64_t)qword_10027B330);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9(v2, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v7, v42);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v49, v46, v47);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = v0[56];
  if (v13)
  {
    v48 = v12;
    v15 = v0[55];
    v36 = v0[54];
    v35 = v9;
    v16 = v0[53];
    v38 = v0[52];
    v37 = v0[50];
    v41 = v0[49];
    v43 = v0[48];
    v39 = v0[51];
    v40 = v0[47];
    v17 = swift_slowAlloc(72, -1);
    v45 = swift_slowAlloc(128, -1);
    v50[0] = v45;
    *(_DWORD *)v17 = 136447747;
    v0[23] = sub_10002BA84(0xD00000000000003ELL, 0x80000001001FD940, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2160;
    v0[24] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 25, v17 + 14, v17 + 22);
    *(_WORD *)(v17 + 22) = 2081;
    v35(v15, v14, v16);
    v18 = String.init<A>(describing:)(v15, v16);
    v20 = v19;
    v0[25] = sub_10002BA84(v18, v19, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v14, v16);
    *(_WORD *)(v17 + 32) = 2160;
    v0[26] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v17 + 34, v17 + 42);
    *(_WORD *)(v17 + 42) = 2081;
    v21 = sub_100004EA8(&qword_100261998, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v37, v21);
    v24 = v23;
    v0[27] = sub_10002BA84(v22, v23, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 27, v0 + 28, v17 + 44, v17 + 52);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v37);
    *(_WORD *)(v17 + 52) = 2160;
    v0[28] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 28, v0 + 29, v17 + 54, v17 + 62);
    *(_WORD *)(v17 + 62) = 2081;
    v25 = sub_100086D58();
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v40, v25);
    v28 = v27;
    v0[18] = sub_10002BA84(v26, v27, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v17 + 64, v17 + 72);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v40);
    _os_log_impl((void *)&_mh_execute_header, v11, v48, "%{public}s\naccount: %{private,mask.hash}s\ndestination %{private,mask.hash}s\nmessage: %{private,mask.hash}s", (uint8_t *)v17, 0x48u);
    swift_arrayDestroy(v45, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v30 = v0[51];
    v29 = v0[52];
    v31 = v0[49];
    v32 = v0[50];
    v33 = v0[47];
    v34 = v0[48];
    (*(void (**)(uint64_t, _QWORD))(v0[54] + 8))(v14, v0[53]);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v32);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v31, v33);

  }
  Message.type.getter(v0[47]);
  __asm { BR              X10 }
}

uint64_t sub_1001B351C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 464);
  *(_QWORD *)(*v1 + 472) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001B379C;
  else
    v4 = sub_1001B3580;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 256), 0);
}

uint64_t sub_1001B3580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_100024990(*(_QWORD *)(v0 + 312), type metadata accessor for FindingConfigEnvelopeV1);
  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B365C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 480);
  *(_QWORD *)(*v1 + 488) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001B39DC;
  else
    v4 = sub_1001B36C0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 256), 0);
}

uint64_t sub_1001B36C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_100024990(*(_QWORD *)(v0 + 288), type metadata accessor for FindingConfigSessionStopEnvelopeV1);
  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B379C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_100024990(*(_QWORD *)(v0 + 312), type metadata accessor for FindingConfigEnvelopeV1);
  v1 = *(_QWORD *)(v0 + 472);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136446210;
    v23 = v6;
    *(_QWORD *)(v0 + 136) = v1;
    swift_errorRetain(v1);
    v7 = sub_100037A5C(&qword_100265260);
    v8 = String.init<A>(describing:)(v0 + 136, v7);
    v10 = v9;
    *(_QWORD *)(v0 + 120) = sub_10002BA84(v8, v9, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "messageReceived handler error: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v11 = *(_QWORD *)(v0 + 440);
  v12 = *(_QWORD *)(v0 + 416);
  v13 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 360);
  v14 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 352);
  v18 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 304);
  v21 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B39DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_100024990(*(_QWORD *)(v0 + 288), type metadata accessor for FindingConfigSessionStopEnvelopeV1);
  v1 = *(_QWORD *)(v0 + 488);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136446210;
    v23 = v6;
    *(_QWORD *)(v0 + 136) = v1;
    swift_errorRetain(v1);
    v7 = sub_100037A5C(&qword_100265260);
    v8 = String.init<A>(describing:)(v0 + 136, v7);
    v10 = v9;
    *(_QWORD *)(v0 + 120) = sub_10002BA84(v8, v9, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "messageReceived handler error: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v11 = *(_QWORD *)(v0 + 440);
  v12 = *(_QWORD *)(v0 + 416);
  v13 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 360);
  v14 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 352);
  v18 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 304);
  v21 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1001B3C1C()
{
  unint64_t result;

  result = qword_100266848;
  if (!qword_100266848)
  {
    result = swift_getWitnessTable(&unk_1001F38C0, &type metadata for FindingTokenRevokeEnvelopeV1);
    atomic_store(result, (unint64_t *)&qword_100266848);
  }
  return result;
}

unint64_t sub_1001B3C60()
{
  unint64_t result;

  result = qword_100266850;
  if (!qword_100266850)
  {
    result = swift_getWitnessTable(&unk_1001F3898, &type metadata for FindingTokenRevokeEnvelopeV1);
    atomic_store(result, &qword_100266850);
  }
  return result;
}

uint64_t sub_1001B3CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = (_QWORD *)swift_task_alloc(dword_10026685C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10003BF7C;
  v5 = (_QWORD *)swift_task_alloc(dword_1002668E4);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_10003BF7C;
  return sub_1001AC364(v2, v3);
}

uint64_t sub_1001B3D2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = (_QWORD *)swift_task_alloc(dword_100266874);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000087DC;
  v5 = (_QWORD *)swift_task_alloc(dword_1002668BC);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_1000087DC;
  return sub_1001A72FC(v2, v3);
}

uint64_t sub_1001B3DAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001B3DBC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = swift_task_alloc(dword_100266884);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = sub_10003BF7C;
  *(_BYTE *)(v7 + 80) = v5;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = v6;
  return swift_task_switch(sub_1001ABFD4, 0, 0);
}

uint64_t sub_1001B3E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for FindingTokenEnvelopeV1(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  sub_100037AB4(*(_QWORD *)(v7 + *(int *)(v1 + 24)), *(_QWORD *)(v7 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001B3ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FindingTokenEnvelopeV1(0) - 8) + 80);
  v3 = v0 + ((v2 + 24) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_100266894);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10003BF7C;
  v5 = (_QWORD *)swift_task_alloc(dword_1002668B4);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_10003BF7C;
  return sub_1001A528C(v3);
}

uint64_t sub_1001B3F68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001B3F78(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = swift_task_alloc(dword_1002668A4);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = sub_1000087DC;
  *(_BYTE *)(v7 + 80) = v5;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = v6;
  return swift_task_switch(sub_1001A6F38, 0, 0);
}

uint64_t sub_1001B3FF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for Friend(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_1002668C4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_1001B13A4(a1, v6, v7, v8, v9);
}

uint64_t sub_1001B40A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Friend(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1001B4140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for Friend(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_1002668D4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_1001B16D4(a1, v6, v7, v8, v9);
}

uint64_t sub_1001B41F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_1002668EC);
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_10003BF7C;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_1001B1A7C, 0, 0);
}

uint64_t sub_1001B426C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001B1BD0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1001B4288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B330);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027B330);
  if (qword_10025FB98 != -1)
    swift_once(&qword_10025FB98, sub_1001C3028);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027B360);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001B4318()
{
  uint64_t v0;

  v0 = type metadata accessor for PrefixedDefaults(0);
  sub_100043F10(v0, qword_100266908);
  sub_100037A9C(v0, (uint64_t)qword_100266908);
  return PrefixedDefaults.init(prefix:)(0x536E656B6F54494ELL, 0xEE00656369767265);
}

uint64_t sub_1001B4380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for PrefixedDefaults(0);
  sub_100043F10(v0, qword_10027B348);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027B348);
  if (qword_10025FB78 != -1)
    swift_once(&qword_10025FB78, sub_1001B4318);
  v2 = sub_100037A9C(v0, (uint64_t)qword_100266908);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001B4410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for PrefixedDefaults(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100037A5C(&qword_1002632F8);
  sub_100043F10(v4, qword_100266920);
  sub_100037A9C(v4, (uint64_t)qword_100266920);
  if (qword_10025FB80 != -1)
    swift_once(&qword_10025FB80, sub_1001B4380);
  v5 = sub_100037A9C(v0, (uint64_t)qword_10027B348);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return ManagedDefault.init(prefixedDefaults:key:)(v3, 0xD000000000000016, 0x8000000100201AF0, &type metadata for Bool, &protocol witness table for Bool);
}

uint64_t sub_1001B4524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for PrefixedDefaults(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100037A5C(&qword_1002634F8);
  sub_100043F10(v4, qword_100266938);
  sub_100037A9C(v4, (uint64_t)qword_100266938);
  if (qword_10025FB80 != -1)
    swift_once(&qword_10025FB80, sub_1001B4380);
  v5 = sub_100037A9C(v0, (uint64_t)qword_10027B348);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  v6 = type metadata accessor for Date(0);
  return ManagedDefault.init(prefixedDefaults:key:)(v3, 0xD00000000000001BLL, 0x8000000100201AD0, v6, &protocol witness table for Date);
}

uint64_t sub_1001B463C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1[549] = v0;
  v2 = sub_100037A5C(&qword_1002635F0);
  v1[555] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[561] = v3;
  v1[567] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100263510) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[573] = swift_task_alloc(v4);
  v1[579] = swift_task_alloc(v4);
  v5 = sub_100037A5C(&qword_100266B80);
  v1[585] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[591] = v6;
  v1[597] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100266B88) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[603] = swift_task_alloc(v7);
  v1[609] = swift_task_alloc(v7);
  v8 = sub_100037A5C(&qword_100266B90);
  v1[615] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[621] = v9;
  v1[627] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100266B98) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[633] = swift_task_alloc(v10);
  v1[639] = swift_task_alloc(v10);
  v11 = sub_100037A5C(&qword_1002626C8);
  v1[645] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[651] = v12;
  v1[657] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002626C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[663] = swift_task_alloc(v13);
  v1[669] = swift_task_alloc(v13);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002615D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[675] = swift_task_alloc(v14);
  v1[681] = swift_task_alloc(v14);
  v15 = sub_100037A5C(&qword_100260A48);
  v1[687] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v1[693] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v1[699] = v17;
  v1[705] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v1[711] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v1[717] = v19;
  *v19 = v1;
  v19[1] = sub_1001B48A8;
  return daemon.getter();
}

uint64_t sub_1001B48A8(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 5736);
  v5 = *v1;
  *(_QWORD *)(*v1 + 5784) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[729] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[735] = v7;
  v8 = type metadata accessor for IDSTransportServiceFMF();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[741] = v9;
  v10 = sub_100004EA8(&qword_1002600F0, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F2FD8);
  *v6 = v5;
  v6[1] = sub_1001B49A0;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001B49A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 5832);
  v3[747] = a1;
  v3[748] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[549];
    v6 = sub_1001B61D4;
  }
  else
  {
    v7 = v3[549];
    swift_release(v3[723]);
    v6 = sub_1001B4A20;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001B4A20()
{
  _QWORD *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_1001C30A4();
  v2 = v0[549];
  if ((v1 & 1) != 0)
  {
    type metadata accessor for XPCActivity(0);
    static DispatchQoS.utility.getter();
    v3 = async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1];
    swift_retain_n(v2, 2);
    v4 = (_QWORD *)swift_task_alloc(v3);
    v0[749] = v4;
    *v4 = v0;
    v4[1] = sub_1001B4B60;
    return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD00000000000002ALL, 0x8000000100201B30, v0[711], &unk_100266C08, v0[549], &unk_100266C10, v0[549]);
  }
  else
  {
    v0[490] = type metadata accessor for NITokenService(0);
    v0[491] = sub_100004EA8(&qword_100266BA0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA2F4);
    v0[487] = v2;
    v6 = dword_10025FF8C;
    swift_retain(v2);
    v7 = (_QWORD *)swift_task_alloc(v6);
    v0[751] = v7;
    *v7 = v0;
    v7[1] = sub_1001B4C7C;
    return sub_1000417FC(v0[705], (uint64_t)(v0 + 487));
  }
}

uint64_t sub_1001B4B60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 5992);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 4392);
  *(_QWORD *)(*(_QWORD *)v1 + 6000) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001B4BC0, v3, 0);
}

uint64_t sub_1001B4BC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[549];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13findmylocated14NITokenService_tokenRequestActivity);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13findmylocated14NITokenService_tokenRequestActivity) = v0[750];
  swift_release(v2);
  v3 = v0[549];
  v0[490] = type metadata accessor for NITokenService(0);
  v0[491] = sub_100004EA8(&qword_100266BA0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA2F4);
  v0[487] = v3;
  v4 = dword_10025FF8C;
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[751] = v5;
  *v5 = v0;
  v5[1] = sub_1001B4C7C;
  return sub_1000417FC(v0[705], (uint64_t)(v0 + 487));
}

uint64_t sub_1001B4C7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 6008);
  *(_QWORD *)(*(_QWORD *)v1 + 6016) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[549];
    v5 = sub_1001B6308;
  }
  else
  {
    v6 = v2 + 487;
    v7 = v2[705];
    v8 = v2[699];
    v9 = v2[693];
    v10 = v2[549];
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    sub_10002BB90(v6);
    v5 = sub_1001B4D08;
    v4 = v10;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001B4D08()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100263CEC);
  *(_QWORD *)(v0 + 6024) = v1;
  *v1 = v0;
  v1[1] = sub_1001B4D58;
  return sub_10010F758(*(_QWORD *)(v0 + 5496));
}

uint64_t sub_1001B4D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 5496);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 4392);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 6024));
  sub_1000087A0(v1, &qword_100260A48);
  return swift_task_switch(sub_1001B4DC4, v2, 0);
}

uint64_t sub_1001B4DC4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 6032) = v1;
  *v1 = v0;
  v1[1] = sub_1001B4E0C;
  return daemon.getter();
}

uint64_t sub_1001B4E0C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 6032);
  v5 = *v1;
  *(_QWORD *)(*v1 + 6040) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[756] = v6;
  v7 = type metadata accessor for CloudStorageService();
  v8 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_1001B4EB8;
  return ActorServiceDaemon.getService<A>()(v3[735], v7, v3[741], v8);
}

uint64_t sub_1001B4EB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 6048);
  v4[757] = a1;
  v4[758] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[549];
    v7 = sub_1001B6534;
  }
  else
  {
    swift_release(v4[755]);
    v7 = sub_1001B4F38;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001B4F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 6072) = *(_QWORD *)(*(_QWORD *)(v0 + 6056) + 136);
  v1 = type metadata accessor for CloudKitStorage(0);
  v2 = sub_100004EA8(&qword_1002615E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudKitStorage, (uint64_t)&protocol conformance descriptor for CloudKitStorage);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_1001B4FB4, v3, v4);
}

uint64_t sub_1001B4FB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 4392);
  dispatch thunk of CloudKitStorage.stateStream()();
  return swift_task_switch(sub_1001B4FF8, v1, 0);
}

uint64_t sub_1001B4FF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[681];
  v2 = v0[675];
  v3 = v0[549];
  v4 = sub_100037A5C((uint64_t *)&unk_100261318);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_10000EF6C(v1, v2, &qword_1002615D0);
  v5 = v3 + OBJC_IVAR____TtC13findmylocated14NITokenService_cloudKitAccountStateStream;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13findmylocated14NITokenService_cloudKitAccountStateStream, v0 + 513, 33, 0);
  sub_10007E710(v2, v5, &qword_1002615D0);
  swift_endAccess(v0 + 513);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[760] = v6;
  *v6 = v0;
  v6[1] = sub_1001B50DC;
  return daemon.getter();
}

uint64_t sub_1001B50DC(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 6080);
  v5 = *v1;
  *(_QWORD *)(*v1 + 6088) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[762] = v6;
  v7 = type metadata accessor for DataManager(0);
  v8 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1001B5188;
  return ActorServiceDaemon.getService<A>()(v3[735], v7, v3[741], v8);
}

uint64_t sub_1001B5188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 6096);
  v4[763] = a1;
  v4[764] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[549];
    v7 = sub_1001B6674;
  }
  else
  {
    swift_release(v4[761]);
    v7 = sub_1001B5208;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001B5208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 6104);
  v2 = *(_QWORD *)(v0 + 5256);
  v3 = *(_QWORD *)(v0 + 5208);
  v4 = *(_QWORD *)(v0 + 4392);
  v5 = swift_allocObject(&unk_100257638, 24, 7);
  swift_weakInit(v5 + 16, v1);
  v6 = type metadata accessor for DataManager.State(0);
  *(_DWORD *)(v0 + 6280) = enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:);
  (*(void (**)(uint64_t))(v3 + 104))(v2);
  AsyncStream.init(_:bufferingPolicy:_:)(v6, v2, sub_1000CF604, v5, v6);
  swift_release(v5);
  return swift_task_switch(sub_1001B52E4, v4, 0);
}

uint64_t sub_1001B52E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[669];
  v2 = v0[663];
  v3 = v0[549];
  v4 = sub_100037A5C((uint64_t *)&unk_100262140);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_10000EF6C(v1, v2, &qword_1002626C0);
  v5 = v3 + OBJC_IVAR____TtC13findmylocated14NITokenService_dataManagerStateStream;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13findmylocated14NITokenService_dataManagerStateStream, v0 + 521, 33, 0);
  sub_10007E710(v2, v5, &qword_1002626C0);
  swift_endAccess(v0 + 521);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[765] = v6;
  *v6 = v0;
  v6[1] = sub_1001B53C8;
  return daemon.getter();
}

uint64_t sub_1001B53C8(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 6120);
  v5 = *v1;
  *(_QWORD *)(*v1 + 6128) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[767] = v6;
  v7 = type metadata accessor for LocationMonitor();
  v8 = sub_100004EA8(&qword_100261EE8, (uint64_t (*)(uint64_t))type metadata accessor for LocationMonitor, (uint64_t)&unk_1001F9D6C);
  *v6 = v5;
  v6[1] = sub_1001B5474;
  return ActorServiceDaemon.getService<A>()(v3[735], v7, v3[741], v8);
}

uint64_t sub_1001B5474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 6136);
  v4[768] = a1;
  v4[769] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[549];
    v7 = sub_1001B67C0;
  }
  else
  {
    swift_release(v4[766]);
    v7 = sub_1001B54F4;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001B54F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 6144);
  v2 = *(unsigned int *)(v0 + 6280);
  v3 = *(_QWORD *)(v0 + 5016);
  v4 = *(_QWORD *)(v0 + 4968);
  v5 = *(_QWORD *)(v0 + 4920);
  v6 = *(_QWORD *)(v0 + 4392);
  v7 = swift_allocObject(&unk_100257660, 24, 7);
  swift_weakInit(v7 + 16, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, v2, v5);
  AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for LocationMonitor.State, v3, sub_1001C32E8, v7, &type metadata for LocationMonitor.State);
  swift_release(v7);
  return swift_task_switch(sub_1001B55C0, v6, 0);
}

uint64_t sub_1001B55C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[639];
  v2 = v0[633];
  v3 = v0[549];
  v4 = sub_100037A5C(&qword_1002669C8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_10000EF6C(v1, v2, &qword_100266B98);
  v5 = v3 + OBJC_IVAR____TtC13findmylocated14NITokenService_locationServicesToggleStream;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13findmylocated14NITokenService_locationServicesToggleStream, v0 + 529, 33, 0);
  sub_10007E710(v2, v5, &qword_100266B98);
  swift_endAccess(v0 + 529);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[770] = v6;
  *v6 = v0;
  v6[1] = sub_1001B56A4;
  return daemon.getter();
}

uint64_t sub_1001B56A4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 6160);
  v5 = *v1;
  *(_QWORD *)(*v1 + 6168) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[772] = v6;
  v7 = type metadata accessor for AppDeletionService();
  v8 = sub_100004EA8(&qword_100261EF0, (uint64_t (*)(uint64_t))type metadata accessor for AppDeletionService, (uint64_t)&unk_1001FC2D4);
  *v6 = v5;
  v6[1] = sub_1001B5750;
  return ActorServiceDaemon.getService<A>()(v3[735], v7, v3[741], v8);
}

uint64_t sub_1001B5750(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 6176);
  v4[773] = a1;
  v4[774] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[549];
    v7 = sub_1001B6918;
  }
  else
  {
    swift_release(v4[771]);
    v7 = sub_1001B57D0;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001B57D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 6184);
  v2 = *(unsigned int *)(v0 + 6280);
  v3 = *(_QWORD *)(v0 + 4776);
  v4 = *(_QWORD *)(v0 + 4728);
  v5 = *(_QWORD *)(v0 + 4680);
  v6 = *(_QWORD *)(v0 + 4392);
  v7 = swift_allocObject(&unk_100257688, 24, 7);
  swift_weakInit(v7 + 16, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, v2, v5);
  AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for AppDeletionService.State, v3, sub_1001C32F0, v7, &type metadata for AppDeletionService.State);
  swift_release(v7);
  return swift_task_switch(sub_1001B589C, v6, 0);
}

uint64_t sub_1001B589C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[609];
  v2 = v0[603];
  v3 = v0[549];
  v4 = sub_100037A5C((uint64_t *)&unk_1002669D8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_10000EF6C(v1, v2, &qword_100266B88);
  v5 = v3 + OBJC_IVAR____TtC13findmylocated14NITokenService_appDeletionStream;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13findmylocated14NITokenService_appDeletionStream, v0 + 497, 33, 0);
  sub_10007E710(v2, v5, &qword_100266B88);
  swift_endAccess(v0 + 497);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[775] = v6;
  *v6 = v0;
  v6[1] = sub_1001B597C;
  return daemon.getter();
}

uint64_t sub_1001B597C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 6200);
  v5 = *v1;
  *(_QWORD *)(*v1 + 6208) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[777] = v6;
  v7 = type metadata accessor for AccountService(0);
  v8 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_1001B5A28;
  return ActorServiceDaemon.getService<A>()(v3[735], v7, v3[741], v8);
}

uint64_t sub_1001B5A28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 6216);
  v4[778] = a1;
  v4[779] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[549];
    v7 = sub_1001B6A7C;
  }
  else
  {
    swift_release(v4[776]);
    v7 = sub_1001B5AA8;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001B5AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 6224);
  v2 = *(unsigned int *)(v0 + 6280);
  v3 = *(_QWORD *)(v0 + 4536);
  v4 = *(_QWORD *)(v0 + 4488);
  v5 = *(_QWORD *)(v0 + 4440);
  v6 = *(_QWORD *)(v0 + 4392);
  v7 = swift_allocObject(&unk_1002576B0, 24, 7);
  swift_weakInit(v7 + 16, v1);
  v8 = type metadata accessor for AccountService.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, v2, v5);
  AsyncStream.init(_:bufferingPolicy:_:)(v8, v3, sub_1000F9D14, v7, v8);
  swift_release(v7);
  return swift_task_switch(sub_1001B5B7C, v6, 0);
}

uint64_t sub_1001B5B7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[579];
  v2 = v0[573];
  v3 = v0[549];
  v4 = sub_100037A5C(&qword_100261F00);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_10000EF6C(v1, v2, &qword_100263510);
  v5 = v3 + OBJC_IVAR____TtC13findmylocated14NITokenService_accountStateStream;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13findmylocated14NITokenService_accountStateStream, v0 + 505, 33, 0);
  sub_10007E710(v2, v5, &qword_100263510);
  swift_endAccess(v0 + 505);
  swift_retain_n(v3, 2);
  swift_asyncLet_begin(v0 + 402, 0, (char *)&type metadata for () + 8, &unk_100266BB0, v3);
  swift_retain_n(v3, 2);
  swift_asyncLet_begin(v0 + 322, 0, (char *)&type metadata for () + 8, &unk_100266BC0, v3);
  swift_retain_n(v3, 2);
  swift_asyncLet_begin(v0 + 242, 0, (char *)&type metadata for () + 8, &unk_100266BD0, v3);
  swift_retain_n(v3, 2);
  swift_asyncLet_begin(v0 + 162, 0, (char *)&type metadata for () + 8, &unk_100266BE0, v3);
  swift_retain_n(v3, 2);
  swift_asyncLet_begin(v0 + 82, 0, (char *)&type metadata for () + 8, &unk_100266BF0, v3);
  swift_retain(v3);
  swift_asyncLet_begin(v0 + 2, 0, (char *)&type metadata for () + 8, &unk_100266C00, v3);
  return swift_asyncLet_get_throwing(v0 + 402, v6, sub_1001B5D78, v0 + 524);
}

uint64_t sub_1001B5D78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 6240) = v2;
  if (v2)
    return swift_asyncLet_finish(v3 + 16, a2, sub_1001B6BEC, v3 + 4256);
  else
    return swift_asyncLet_get_throwing(v3 + 2576, a2, sub_1001B5DB0, v3 + 4544);
}

uint64_t sub_1001B5DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 6248) = v2;
  if (v2)
    return swift_asyncLet_finish(v3 + 16, a2, sub_1001B6F1C, v3 + 4592);
  else
    return swift_asyncLet_get_throwing(v3 + 1936, a2, sub_1001B5DE8, v3 + 4880);
}

uint64_t sub_1001B5DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 6256) = v2;
  if (v2)
    return swift_asyncLet_finish(v3 + 16, a2, sub_1001B724C, v3 + 4928);
  else
    return swift_asyncLet_get_throwing(v3 + 1296, a2, sub_1001B5E20, v3 + 5216);
}

uint64_t sub_1001B5E20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 6264) = v2;
  if (v2)
    return swift_asyncLet_finish(v3 + 16, a2, sub_1001B7574, v3 + 5264);
  else
    return swift_asyncLet_get(v3 + 656, a2, sub_1001B5E58, v3 + 5552);
}

uint64_t sub_1001B5E58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get_throwing(v2 + 16, a2, sub_1001B5E70, v2 + 5600);
}

uint64_t sub_1001B5E70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  *(_QWORD *)(v3 + 6272) = v2;
  if (v2)
  {
    v4 = v3 + 5648;
    v5 = sub_1001B78A4;
  }
  else
  {
    v4 = v3 + 5936;
    v5 = sub_1001B5EA4;
  }
  return swift_asyncLet_finish(v3 + 16, a2, v5, v4);
}

uint64_t sub_1001B5EA4()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B5EB8, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B5EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_1001B5ED0, v2 + 5120);
}

uint64_t sub_1001B5ED0()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B5EE4, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B5EE4()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 1296, v1, sub_1001B5F2C, v0 + 4976);
}

uint64_t sub_1001B5F2C()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B5F40, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B5F40()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 1936, v1, sub_1001B5F88, v0 + 4128);
}

uint64_t sub_1001B5F88()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B5F9C, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B5F9C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 2576, v1, sub_1001B5FE0, v0 + 4064);
}

uint64_t sub_1001B5FE0()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B5FF4, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B5FF4()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 3216, v1, sub_1001B6038, v0 + 4000);
}

uint64_t sub_1001B6038()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B604C, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B604C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 6224);
  v2 = *(_QWORD *)(v0 + 6184);
  v3 = *(_QWORD *)(v0 + 6144);
  v4 = *(_QWORD *)(v0 + 6056);
  v5 = *(_QWORD *)(v0 + 5976);
  v6 = *(_QWORD *)(v0 + 5688);
  v7 = *(_QWORD *)(v0 + 5640);
  v8 = *(_QWORD *)(v0 + 5496);
  v11 = *(_QWORD *)(v0 + 5448);
  v12 = *(_QWORD *)(v0 + 5400);
  v13 = *(_QWORD *)(v0 + 5352);
  v14 = *(_QWORD *)(v0 + 5304);
  v15 = *(_QWORD *)(v0 + 5256);
  v16 = *(_QWORD *)(v0 + 5112);
  v17 = *(_QWORD *)(v0 + 5064);
  v18 = *(_QWORD *)(v0 + 5016);
  v19 = *(_QWORD *)(v0 + 4872);
  v20 = *(_QWORD *)(v0 + 4824);
  v21 = *(_QWORD *)(v0 + 4776);
  v22 = *(_QWORD *)(v0 + 4632);
  v23 = *(_QWORD *)(v0 + 4584);
  v24 = *(_QWORD *)(v0 + 4536);
  v9 = *(_QWORD *)(v0 + 4392);
  swift_release(*(_QWORD *)(v0 + 6104));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release_n(v9, 7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B61D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_release(*(_QWORD *)(v0 + 5784));
  v1 = *(_QWORD *)(v0 + 5640);
  v2 = *(_QWORD *)(v0 + 5496);
  v3 = *(_QWORD *)(v0 + 5448);
  v4 = *(_QWORD *)(v0 + 5400);
  v5 = *(_QWORD *)(v0 + 5352);
  v6 = *(_QWORD *)(v0 + 5304);
  v7 = *(_QWORD *)(v0 + 5256);
  v8 = *(_QWORD *)(v0 + 5112);
  v9 = *(_QWORD *)(v0 + 5064);
  v11 = *(_QWORD *)(v0 + 5016);
  v12 = *(_QWORD *)(v0 + 4872);
  v13 = *(_QWORD *)(v0 + 4824);
  v14 = *(_QWORD *)(v0 + 4776);
  v15 = *(_QWORD *)(v0 + 4632);
  v16 = *(_QWORD *)(v0 + 4584);
  v17 = *(_QWORD *)(v0 + 4536);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B6308()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  sub_10002BB90(v0 + 487);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = v0[752];
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[752];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    v0[537] = v7;
    swift_errorRetain(v7);
    v10 = sub_100037A5C(&qword_100265260);
    v11 = String.init<A>(describing:)(v0 + 537, v10);
    v13 = v12;
    v0[543] = sub_10002BA84(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 543, v0 + 544, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "IDSTransportServiceFMF subscription up error: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(v0[752]);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v14 = (_QWORD *)swift_task_alloc(dword_100263CEC);
  v0[753] = v14;
  *v14 = v0;
  v14[1] = sub_1001B4D58;
  return sub_10010F758(v0[687]);
}

uint64_t sub_1001B6534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 5976);
  swift_release(*(_QWORD *)(v0 + 6040));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 5640);
  v3 = *(_QWORD *)(v0 + 5496);
  v4 = *(_QWORD *)(v0 + 5448);
  v5 = *(_QWORD *)(v0 + 5400);
  v6 = *(_QWORD *)(v0 + 5352);
  v7 = *(_QWORD *)(v0 + 5304);
  v8 = *(_QWORD *)(v0 + 5256);
  v9 = *(_QWORD *)(v0 + 5112);
  v10 = *(_QWORD *)(v0 + 5064);
  v12 = *(_QWORD *)(v0 + 5016);
  v13 = *(_QWORD *)(v0 + 4872);
  v14 = *(_QWORD *)(v0 + 4824);
  v15 = *(_QWORD *)(v0 + 4776);
  v16 = *(_QWORD *)(v0 + 4632);
  v17 = *(_QWORD *)(v0 + 4584);
  v18 = *(_QWORD *)(v0 + 4536);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B6674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 6056);
  v2 = *(_QWORD *)(v0 + 5976);
  swift_release(*(_QWORD *)(v0 + 6088));
  swift_release(v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 5640);
  v4 = *(_QWORD *)(v0 + 5496);
  v5 = *(_QWORD *)(v0 + 5448);
  v6 = *(_QWORD *)(v0 + 5400);
  v7 = *(_QWORD *)(v0 + 5352);
  v8 = *(_QWORD *)(v0 + 5304);
  v9 = *(_QWORD *)(v0 + 5256);
  v10 = *(_QWORD *)(v0 + 5112);
  v11 = *(_QWORD *)(v0 + 5064);
  v13 = *(_QWORD *)(v0 + 5016);
  v14 = *(_QWORD *)(v0 + 4872);
  v15 = *(_QWORD *)(v0 + 4824);
  v16 = *(_QWORD *)(v0 + 4776);
  v17 = *(_QWORD *)(v0 + 4632);
  v18 = *(_QWORD *)(v0 + 4584);
  v19 = *(_QWORD *)(v0 + 4536);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B67C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 6104);
  v2 = *(_QWORD *)(v0 + 6056);
  v3 = *(_QWORD *)(v0 + 5976);
  swift_release(*(_QWORD *)(v0 + 6128));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  v4 = *(_QWORD *)(v0 + 5640);
  v5 = *(_QWORD *)(v0 + 5496);
  v6 = *(_QWORD *)(v0 + 5448);
  v7 = *(_QWORD *)(v0 + 5400);
  v8 = *(_QWORD *)(v0 + 5352);
  v9 = *(_QWORD *)(v0 + 5304);
  v10 = *(_QWORD *)(v0 + 5256);
  v11 = *(_QWORD *)(v0 + 5112);
  v12 = *(_QWORD *)(v0 + 5064);
  v14 = *(_QWORD *)(v0 + 5016);
  v15 = *(_QWORD *)(v0 + 4872);
  v16 = *(_QWORD *)(v0 + 4824);
  v17 = *(_QWORD *)(v0 + 4776);
  v18 = *(_QWORD *)(v0 + 4632);
  v19 = *(_QWORD *)(v0 + 4584);
  v20 = *(_QWORD *)(v0 + 4536);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B6918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 6144);
  v2 = *(_QWORD *)(v0 + 6104);
  v3 = *(_QWORD *)(v0 + 6056);
  v4 = *(_QWORD *)(v0 + 5976);
  swift_release(*(_QWORD *)(v0 + 6168));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  v5 = *(_QWORD *)(v0 + 5640);
  v6 = *(_QWORD *)(v0 + 5496);
  v7 = *(_QWORD *)(v0 + 5448);
  v8 = *(_QWORD *)(v0 + 5400);
  v9 = *(_QWORD *)(v0 + 5352);
  v10 = *(_QWORD *)(v0 + 5304);
  v11 = *(_QWORD *)(v0 + 5256);
  v12 = *(_QWORD *)(v0 + 5112);
  v13 = *(_QWORD *)(v0 + 5064);
  v15 = *(_QWORD *)(v0 + 5016);
  v16 = *(_QWORD *)(v0 + 4872);
  v17 = *(_QWORD *)(v0 + 4824);
  v18 = *(_QWORD *)(v0 + 4776);
  v19 = *(_QWORD *)(v0 + 4632);
  v20 = *(_QWORD *)(v0 + 4584);
  v21 = *(_QWORD *)(v0 + 4536);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B6A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 6184);
  v2 = *(_QWORD *)(v0 + 6144);
  v3 = *(_QWORD *)(v0 + 6104);
  v4 = *(_QWORD *)(v0 + 6056);
  v5 = *(_QWORD *)(v0 + 5976);
  swift_release(*(_QWORD *)(v0 + 6208));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(v0 + 5640);
  v7 = *(_QWORD *)(v0 + 5496);
  v8 = *(_QWORD *)(v0 + 5448);
  v9 = *(_QWORD *)(v0 + 5400);
  v10 = *(_QWORD *)(v0 + 5352);
  v11 = *(_QWORD *)(v0 + 5304);
  v12 = *(_QWORD *)(v0 + 5256);
  v13 = *(_QWORD *)(v0 + 5112);
  v14 = *(_QWORD *)(v0 + 5064);
  v16 = *(_QWORD *)(v0 + 5016);
  v17 = *(_QWORD *)(v0 + 4872);
  v18 = *(_QWORD *)(v0 + 4824);
  v19 = *(_QWORD *)(v0 + 4776);
  v20 = *(_QWORD *)(v0 + 4632);
  v21 = *(_QWORD *)(v0 + 4584);
  v22 = *(_QWORD *)(v0 + 4536);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B6BEC()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B6C00, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B6C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_1001B6C18, v2 + 4304);
}

uint64_t sub_1001B6C18()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B6C2C, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B6C2C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 1296, v1, sub_1001B6C74, v0 + 4352);
}

uint64_t sub_1001B6C74()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B6C88, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B6C88()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 1936, v1, sub_1001B6CD0, v0 + 4400);
}

uint64_t sub_1001B6CD0()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B6CE4, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B6CE4()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 2576, v1, sub_1001B6D2C, v0 + 4448);
}

uint64_t sub_1001B6D2C()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B6D40, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B6D40()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 3216, v1, sub_1001B6D88, v0 + 4496);
}

uint64_t sub_1001B6D88()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B6D9C, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B6D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 6224);
  v2 = *(_QWORD *)(v0 + 6184);
  v3 = *(_QWORD *)(v0 + 6144);
  v4 = *(_QWORD *)(v0 + 6056);
  v5 = *(_QWORD *)(v0 + 5976);
  v6 = *(_QWORD *)(v0 + 4392);
  swift_release(*(_QWORD *)(v0 + 6104));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release_n(v6, 7);
  v7 = *(_QWORD *)(v0 + 5640);
  v8 = *(_QWORD *)(v0 + 5496);
  v9 = *(_QWORD *)(v0 + 5448);
  v10 = *(_QWORD *)(v0 + 5400);
  v11 = *(_QWORD *)(v0 + 5352);
  v12 = *(_QWORD *)(v0 + 5304);
  v13 = *(_QWORD *)(v0 + 5256);
  v14 = *(_QWORD *)(v0 + 5112);
  v15 = *(_QWORD *)(v0 + 5064);
  v17 = *(_QWORD *)(v0 + 5016);
  v18 = *(_QWORD *)(v0 + 4872);
  v19 = *(_QWORD *)(v0 + 4824);
  v20 = *(_QWORD *)(v0 + 4776);
  v21 = *(_QWORD *)(v0 + 4632);
  v22 = *(_QWORD *)(v0 + 4584);
  v23 = *(_QWORD *)(v0 + 4536);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B6F1C()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B6F30, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B6F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_1001B6F48, v2 + 4640);
}

uint64_t sub_1001B6F48()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B6F5C, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B6F5C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 1296, v1, sub_1001B6FA4, v0 + 4688);
}

uint64_t sub_1001B6FA4()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B6FB8, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B6FB8()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 1936, v1, sub_1001B7000, v0 + 4736);
}

uint64_t sub_1001B7000()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B7014, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B7014()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 2576, v1, sub_1001B705C, v0 + 4784);
}

uint64_t sub_1001B705C()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B7070, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B7070()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 3216, v1, sub_1001B70B8, v0 + 4832);
}

uint64_t sub_1001B70B8()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B70CC, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B70CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 6224);
  v2 = *(_QWORD *)(v0 + 6184);
  v3 = *(_QWORD *)(v0 + 6144);
  v4 = *(_QWORD *)(v0 + 6056);
  v5 = *(_QWORD *)(v0 + 5976);
  v6 = *(_QWORD *)(v0 + 4392);
  swift_release(*(_QWORD *)(v0 + 6104));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release_n(v6, 7);
  v7 = *(_QWORD *)(v0 + 5640);
  v8 = *(_QWORD *)(v0 + 5496);
  v9 = *(_QWORD *)(v0 + 5448);
  v10 = *(_QWORD *)(v0 + 5400);
  v11 = *(_QWORD *)(v0 + 5352);
  v12 = *(_QWORD *)(v0 + 5304);
  v13 = *(_QWORD *)(v0 + 5256);
  v14 = *(_QWORD *)(v0 + 5112);
  v15 = *(_QWORD *)(v0 + 5064);
  v17 = *(_QWORD *)(v0 + 5016);
  v18 = *(_QWORD *)(v0 + 4872);
  v19 = *(_QWORD *)(v0 + 4824);
  v20 = *(_QWORD *)(v0 + 4776);
  v21 = *(_QWORD *)(v0 + 4632);
  v22 = *(_QWORD *)(v0 + 4584);
  v23 = *(_QWORD *)(v0 + 4536);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B724C()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B7260, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B7260(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_1001B7274, v2 + 3856);
}

uint64_t sub_1001B7274()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B7288, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B7288()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 1296, v1, sub_1001B72D0, v0 + 5024);
}

uint64_t sub_1001B72D0()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B72E4, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B72E4()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 1936, v1, sub_1001B732C, v0 + 5072);
}

uint64_t sub_1001B732C()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B7340, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B7340()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 2576, v1, sub_1001B7384, v0 + 3936);
}

uint64_t sub_1001B7384()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B7398, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B7398()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 3216, v1, sub_1001B73E0, v0 + 5168);
}

uint64_t sub_1001B73E0()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B73F4, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B73F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 6224);
  v2 = *(_QWORD *)(v0 + 6184);
  v3 = *(_QWORD *)(v0 + 6144);
  v4 = *(_QWORD *)(v0 + 6056);
  v5 = *(_QWORD *)(v0 + 5976);
  v6 = *(_QWORD *)(v0 + 4392);
  swift_release(*(_QWORD *)(v0 + 6104));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release_n(v6, 7);
  v7 = *(_QWORD *)(v0 + 5640);
  v8 = *(_QWORD *)(v0 + 5496);
  v9 = *(_QWORD *)(v0 + 5448);
  v10 = *(_QWORD *)(v0 + 5400);
  v11 = *(_QWORD *)(v0 + 5352);
  v12 = *(_QWORD *)(v0 + 5304);
  v13 = *(_QWORD *)(v0 + 5256);
  v14 = *(_QWORD *)(v0 + 5112);
  v15 = *(_QWORD *)(v0 + 5064);
  v17 = *(_QWORD *)(v0 + 5016);
  v18 = *(_QWORD *)(v0 + 4872);
  v19 = *(_QWORD *)(v0 + 4824);
  v20 = *(_QWORD *)(v0 + 4776);
  v21 = *(_QWORD *)(v0 + 4632);
  v22 = *(_QWORD *)(v0 + 4584);
  v23 = *(_QWORD *)(v0 + 4536);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B7574()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B7588, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B7588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_1001B75A0, v2 + 5312);
}

uint64_t sub_1001B75A0()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B75B4, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B75B4()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 1296, v1, sub_1001B75FC, v0 + 5360);
}

uint64_t sub_1001B75FC()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B7610, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B7610()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 1936, v1, sub_1001B7658, v0 + 5408);
}

uint64_t sub_1001B7658()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B766C, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B766C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 2576, v1, sub_1001B76B4, v0 + 5456);
}

uint64_t sub_1001B76B4()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B76C8, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B76C8()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 3216, v1, sub_1001B7710, v0 + 5504);
}

uint64_t sub_1001B7710()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B7724, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B7724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 6224);
  v2 = *(_QWORD *)(v0 + 6184);
  v3 = *(_QWORD *)(v0 + 6144);
  v4 = *(_QWORD *)(v0 + 6056);
  v5 = *(_QWORD *)(v0 + 5976);
  v6 = *(_QWORD *)(v0 + 4392);
  swift_release(*(_QWORD *)(v0 + 6104));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release_n(v6, 7);
  v7 = *(_QWORD *)(v0 + 5640);
  v8 = *(_QWORD *)(v0 + 5496);
  v9 = *(_QWORD *)(v0 + 5448);
  v10 = *(_QWORD *)(v0 + 5400);
  v11 = *(_QWORD *)(v0 + 5352);
  v12 = *(_QWORD *)(v0 + 5304);
  v13 = *(_QWORD *)(v0 + 5256);
  v14 = *(_QWORD *)(v0 + 5112);
  v15 = *(_QWORD *)(v0 + 5064);
  v17 = *(_QWORD *)(v0 + 5016);
  v18 = *(_QWORD *)(v0 + 4872);
  v19 = *(_QWORD *)(v0 + 4824);
  v20 = *(_QWORD *)(v0 + 4776);
  v21 = *(_QWORD *)(v0 + 4632);
  v22 = *(_QWORD *)(v0 + 4584);
  v23 = *(_QWORD *)(v0 + 4536);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B78A4()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B78B8, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B78B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_1001B78D0, v2 + 5696);
}

uint64_t sub_1001B78D0()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B78E4, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B78E4()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 1296, v1, sub_1001B792C, v0 + 5744);
}

uint64_t sub_1001B792C()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B7940, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B7940()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 1936, v1, sub_1001B7988, v0 + 5792);
}

uint64_t sub_1001B7988()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B799C, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B799C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 2576, v1, sub_1001B79E4, v0 + 5840);
}

uint64_t sub_1001B79E4()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B79F8, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B79F8()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 4392));
  return swift_asyncLet_finish(v0 + 3216, v1, sub_1001B7A40, v0 + 5888);
}

uint64_t sub_1001B7A40()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B7A54, *(_QWORD *)(v0 + 4392), 0);
}

uint64_t sub_1001B7A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 6224);
  v2 = *(_QWORD *)(v0 + 6184);
  v3 = *(_QWORD *)(v0 + 6144);
  v4 = *(_QWORD *)(v0 + 6056);
  v5 = *(_QWORD *)(v0 + 5976);
  v6 = *(_QWORD *)(v0 + 4392);
  swift_release(*(_QWORD *)(v0 + 6104));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release_n(v6, 7);
  v7 = *(_QWORD *)(v0 + 5640);
  v8 = *(_QWORD *)(v0 + 5496);
  v9 = *(_QWORD *)(v0 + 5448);
  v10 = *(_QWORD *)(v0 + 5400);
  v11 = *(_QWORD *)(v0 + 5352);
  v12 = *(_QWORD *)(v0 + 5304);
  v13 = *(_QWORD *)(v0 + 5256);
  v14 = *(_QWORD *)(v0 + 5112);
  v15 = *(_QWORD *)(v0 + 5064);
  v17 = *(_QWORD *)(v0 + 5016);
  v18 = *(_QWORD *)(v0 + 4872);
  v19 = *(_QWORD *)(v0 + 4824);
  v20 = *(_QWORD *)(v0 + 4776);
  v21 = *(_QWORD *)(v0 + 4632);
  v22 = *(_QWORD *)(v0 + 4584);
  v23 = *(_QWORD *)(v0 + 4536);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B7BD4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100266CFC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1001B7C1C();
}

uint64_t sub_1001B7C1C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1[263] = v0;
  v2 = sub_100037A5C(&qword_1002632F8);
  v1[269] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[275] = v3;
  v1[281] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100037A5C(&qword_100260A48);
  v1[287] = v4;
  v1[293] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CloudKitStorage.State(0);
  v1[299] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[300] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[301] = swift_task_alloc(v7);
  v1[302] = swift_task_alloc(v7);
  v1[303] = swift_task_alloc(v7);
  v1[304] = swift_task_alloc(v7);
  v8 = sub_100037A5C(&qword_100261668);
  v1[305] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_100261670);
  v1[306] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[307] = v10;
  v1[308] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_1002615D0);
  v1[309] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C((uint64_t *)&unk_100261318);
  v1[310] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[311] = v13;
  v1[312] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001B7D98, v0, 0);
}

uint64_t sub_1001B7D98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 2472);
    v3 = *(_QWORD *)(v1 + 2464);
    v4 = *(_QWORD *)(v1 + 2440);
    v5 = *(_QWORD *)(v1 + 2432);
    v6 = *(_QWORD *)(v1 + 2424);
    v7 = *(_QWORD *)(v1 + 2416);
    v8 = *(_QWORD *)(v1 + 2408);
    v9 = *(_QWORD *)(v1 + 2344);
    v10 = *(_QWORD *)(v1 + 2248);
    swift_task_dealloc(*(_QWORD *)(v1 + 2496));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    v11 = *(uint64_t (**)(void))(v1 + 8);
    return v11();
  }
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100037A9C(v12, (uint64_t)qword_10027B330);
  *(_QWORD *)(v1 + 2504) = v13;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Monitoring CloudKit AccountState stream", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
  v17 = *(_QWORD *)(v1 + 2488);
  v18 = *(_QWORD *)(v1 + 2480);
  v19 = *(_QWORD *)(v1 + 2472);
  v20 = *(_QWORD *)(v1 + 2104);

  v21 = v20 + OBJC_IVAR____TtC13findmylocated14NITokenService_cloudKitAccountStateStream;
  swift_beginAccess(v20 + OBJC_IVAR____TtC13findmylocated14NITokenService_cloudKitAccountStateStream, v1 + 1976, 0, 0);
  sub_10000E37C(v21, v19, &qword_1002615D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1, v18) == 1)
  {
    v22 = sub_1000087A0(*(_QWORD *)(v1 + 2472), &qword_1002615D0);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "cloudKitAccountStateStream should be available by now!", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = sub_100097FB4();
    v27 = swift_allocError(&type metadata for NITokenService.Error, v26, 0, 0);
    *v28 = 5;
    swift_willThrow(v27);
    v29 = *(_QWORD *)(v1 + 2472);
    v30 = *(_QWORD *)(v1 + 2464);
    v31 = *(_QWORD *)(v1 + 2440);
    v32 = *(_QWORD *)(v1 + 2432);
    v33 = *(_QWORD *)(v1 + 2424);
    v34 = *(_QWORD *)(v1 + 2416);
    v35 = *(_QWORD *)(v1 + 2408);
    v36 = *(_QWORD *)(v1 + 2344);
    v42 = *(_QWORD *)(v1 + 2248);
    swift_task_dealloc(*(_QWORD *)(v1 + 2496));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v42);
    v11 = *(uint64_t (**)(void))(v1 + 8);
    return v11();
  }
  v38 = *(_QWORD *)(v1 + 2480);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v1 + 2488) + 32))(*(_QWORD *)(v1 + 2496), *(_QWORD *)(v1 + 2472), v38);
  AsyncStream.makeAsyncIterator()(v38);
  v39 = sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
  *(_QWORD *)(v1 + 2512) = v39;
  *(_DWORD *)(v1 + 2608) = enum case for CloudKitStorage.State.unknown(_:);
  *(_DWORD *)(v1 + 2612) = enum case for CloudKitStorage.State.unavailable(_:);
  *(_DWORD *)(v1 + 2616) = enum case for CloudKitStorage.State.noAccount(_:);
  *(_DWORD *)(v1 + 2620) = enum case for CloudKitStorage.State.loading(_:);
  *(_DWORD *)(v1 + 2624) = enum case for CloudKitStorage.State.rebuilding(_:);
  *(_DWORD *)(v1 + 2628) = enum case for CloudKitStorage.State.available(_:);
  *(_DWORD *)(v1 + 2632) = enum case for CloudKitStorage.State.apnsConnected(_:);
  *(_OWORD *)(v1 + 2520) = 0u;
  *(_OWORD *)(v1 + 2536) = 0u;
  *(_OWORD *)(v1 + 2552) = 0u;
  *(_QWORD *)(v1 + 2568) = 0;
  v40 = *(_QWORD *)(v1 + 2104);
  v41 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v1 + 2576) = v41;
  *v41 = v1;
  v41[1] = sub_1001B81D8;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v1 + 2440), v40, v39, *(_QWORD *)(v1 + 2448));
}

uint64_t sub_1001B81D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2576));
  return swift_task_switch(sub_1001B8230, v1, 0);
}

uint64_t sub_1001B8230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v42)(uint64_t, _QWORD, uint64_t);
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  _BOOL4 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int32x4_t v100;
  uint64_t v101[2];

  v1 = *(_QWORD *)(v0 + 2440);
  v2 = *(_QWORD *)(v0 + 2400);
  v3 = *(_QWORD *)(v0 + 2392);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(_QWORD *)(v0 + 2568);
    v5 = *(_QWORD *)(v0 + 2560);
    v6 = *(_QWORD *)(v0 + 2552);
    v7 = *(_QWORD *)(v0 + 2544);
    v8 = *(_QWORD *)(v0 + 2536);
    v9 = *(_QWORD *)(v0 + 2528);
    v10 = *(_QWORD *)(v0 + 2496);
    v11 = *(_QWORD *)(v0 + 2488);
    v12 = *(_QWORD *)(v0 + 2480);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 2456) + 8))(*(_QWORD *)(v0 + 2464), *(_QWORD *)(v0 + 2448));
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    sub_10007EF20(v9, v8);
    sub_10007EF20(v7, v6);
    sub_10007EF20(v5, v4);
    v13 = *(_QWORD *)(v0 + 2472);
    v14 = *(_QWORD *)(v0 + 2464);
    v15 = *(_QWORD *)(v0 + 2440);
    v16 = *(_QWORD *)(v0 + 2432);
    v17 = *(_QWORD *)(v0 + 2424);
    v18 = *(_QWORD *)(v0 + 2416);
    v19 = *(_QWORD *)(v0 + 2408);
    v20 = *(_QWORD *)(v0 + 2344);
    v21 = *(_QWORD *)(v0 + 2248);
    swift_task_dealloc(*(_QWORD *)(v0 + 2496));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  v23 = *(_QWORD *)(v0 + 2520);
  v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 2432), v1, v3);
  static Task<>.checkCancellation()(v24);
  *(_QWORD *)(v0 + 2584) = v23;
  if (v23)
  {
    v97 = *(_QWORD *)(v0 + 2560);
    v98 = *(_QWORD *)(v0 + 2568);
    v93 = *(_QWORD *)(v0 + 2544);
    v95 = *(_QWORD *)(v0 + 2552);
    v25 = *(_QWORD *)(v0 + 2536);
    v26 = *(_QWORD *)(v0 + 2528);
    v27 = *(_QWORD *)(v0 + 2496);
    v28 = *(_QWORD *)(v0 + 2488);
    v29 = *(_QWORD *)(v0 + 2480);
    v30 = *(_QWORD *)(v0 + 2464);
    v31 = *(_QWORD *)(v0 + 2456);
    v32 = *(_QWORD *)(v0 + 2448);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 2400) + 8))(*(_QWORD *)(v0 + 2432), *(_QWORD *)(v0 + 2392));
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    sub_10007EF20(v26, v25);
    sub_10007EF20(v93, v95);
    sub_10007EF20(v97, v98);
    v33 = *(_QWORD *)(v0 + 2472);
    v34 = *(_QWORD *)(v0 + 2464);
    v35 = *(_QWORD *)(v0 + 2440);
    v36 = *(_QWORD *)(v0 + 2432);
    v37 = *(_QWORD *)(v0 + 2424);
    v38 = *(_QWORD *)(v0 + 2416);
    v39 = *(_QWORD *)(v0 + 2408);
    v40 = *(_QWORD *)(v0 + 2344);
    v99 = *(_QWORD *)(v0 + 2248);
    swift_task_dealloc(*(_QWORD *)(v0 + 2496));
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v99);
    v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  v42 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 2400) + 16);
  v43 = v42(*(_QWORD *)(v0 + 2424), *(_QWORD *)(v0 + 2432), *(_QWORD *)(v0 + 2392));
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter(v44);
  v46 = os_log_type_enabled(v44, (os_log_type_t)v45);
  v47 = *(_QWORD *)(v0 + 2424);
  v48 = *(_QWORD *)(v0 + 2400);
  v49 = *(_QWORD *)(v0 + 2392);
  if (v46)
  {
    v50 = swift_slowAlloc(12, -1);
    v51 = swift_slowAlloc(32, -1);
    v101[0] = v51;
    *(_DWORD *)v50 = 136315138;
    v52 = sub_100004EA8(&qword_100261678, (uint64_t (*)(uint64_t))&type metadata accessor for CloudKitStorage.State, (uint64_t)&protocol conformance descriptor for CloudKitStorage.State);
    v53 = dispatch thunk of CustomStringConvertible.description.getter(v49, v52);
    v55 = v54;
    *(_QWORD *)(v50 + 4) = sub_10002BA84(v53, v54, v101);
    swift_bridgeObjectRelease(v55);
    v56 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v56(v47, v49);
    _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v45, "cloudKitAccountStateStream event: %s", (uint8_t *)v50, 0xCu);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    v56 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v56(*(_QWORD *)(v0 + 2424), *(_QWORD *)(v0 + 2392));
  }

  *(_QWORD *)(v0 + 2592) = v56;
  v57 = *(_DWORD *)(v0 + 2624);
  v58 = *(_QWORD *)(v0 + 2416);
  v59 = *(_QWORD *)(v0 + 2400);
  v60 = *(_QWORD *)(v0 + 2392);
  v100 = *(int32x4_t *)(v0 + 2608);
  v42(v58, *(_QWORD *)(v0 + 2432), v60);
  v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 88))(v58, v60);
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(vdupq_n_s32(v61), v100)), 0xFuLL))) & 1) != 0
    || (_DWORD)v61 == v57)
  {
    goto LABEL_16;
  }
  if ((_DWORD)v61 != *(_DWORD *)(v0 + 2628))
  {
    if ((_DWORD)v61 != *(_DWORD *)(v0 + 2632))
    {
      v86 = Logger.logObject.getter(v61);
      v87 = static os_log_type_t.error.getter(v86);
      if (os_log_type_enabled(v86, v87))
      {
        v88 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v88 = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "Unknown CloudKitStorage.State!", v88, 2u);
        swift_slowDealloc(v88, -1, -1);
      }
      v89 = *(_QWORD *)(v0 + 2432);
      v76 = *(_QWORD *)(v0 + 2416);
      v78 = *(_QWORD *)(v0 + 2392);

      v85 = v89;
      goto LABEL_22;
    }
LABEL_16:
    v72 = v42(*(_QWORD *)(v0 + 2408), *(_QWORD *)(v0 + 2432), *(_QWORD *)(v0 + 2392));
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.info.getter();
    v75 = os_log_type_enabled(v73, v74);
    v76 = *(_QWORD *)(v0 + 2432);
    v77 = *(_QWORD *)(v0 + 2408);
    v78 = *(_QWORD *)(v0 + 2392);
    if (v75)
    {
      v79 = swift_slowAlloc(12, -1);
      v80 = swift_slowAlloc(32, -1);
      v101[0] = v80;
      *(_DWORD *)v79 = 136315138;
      v81 = sub_100004EA8(&qword_100261678, (uint64_t (*)(uint64_t))&type metadata accessor for CloudKitStorage.State, (uint64_t)&protocol conformance descriptor for CloudKitStorage.State);
      v82 = dispatch thunk of CustomStringConvertible.description.getter(v78, v81);
      v84 = v83;
      *(_QWORD *)(v79 + 4) = sub_10002BA84(v82, v83, v101);
      swift_bridgeObjectRelease(v84);
      v56(v77, v78);
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Ignoring %s", (uint8_t *)v79, 0xCu);
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v79, -1, -1);

LABEL_23:
      v56(v76, v78);
      *(_QWORD *)(v0 + 2520) = *(_QWORD *)(v0 + 2584);
      v90 = *(_QWORD *)(v0 + 2512);
      v91 = *(_QWORD *)(v0 + 2104);
      v92 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
      *(_QWORD *)(v0 + 2576) = v92;
      *v92 = v0;
      v92[1] = sub_1001B81D8;
      return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 2440), v91, v90, *(_QWORD *)(v0 + 2448));
    }

    v85 = v77;
LABEL_22:
    v56(v85, v78);
    goto LABEL_23;
  }
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.default.getter(v62);
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "CK account is available", v64, 2u);
    swift_slowDealloc(v64, -1, -1);
  }
  v96 = *(_QWORD *)(v0 + 2568);
  v65 = *(_QWORD *)(v0 + 2552);
  v66 = *(_QWORD *)(v0 + 2544);
  v67 = *(_QWORD *)(v0 + 2536);
  v68 = *(_QWORD *)(v0 + 2528);
  v94 = *(_QWORD *)(v0 + 2560);
  v69 = *(_QWORD *)(v0 + 2296);
  v70 = *(_QWORD *)(v0 + 2104);

  swift_retain_n(v70, 2);
  sub_10007EF20(v68, v67);
  swift_asyncLet_begin(v0 + 656, 0, (char *)&type metadata for () + 8, &unk_100266D08, v70);
  swift_retain_n(v70, 2);
  sub_10007EF20(v66, v65);
  swift_asyncLet_begin(v0 + 1296, 0, v69, &unk_100266D18, v70);
  swift_retain_n(v70, 2);
  sub_10007EF20(v94, v96);
  swift_asyncLet_begin(v0 + 16, 0, (char *)&type metadata for () + 8, &unk_100266D28, v70);
  return swift_asyncLet_get(v0 + 656, v71, sub_1001B8A24, v0 + 2000);
}

uint64_t sub_1001B8A24()
{
  uint64_t v0;

  return swift_asyncLet_get(v0 + 1296, *(_QWORD *)(v0 + 2344), sub_1001B8A3C, v0 + 2064);
}

uint64_t sub_1001B8A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 16, a2, sub_1001B8A50, v2 + 2112);
}

uint64_t sub_1001B8A50()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B8A64, *(_QWORD *)(v0 + 2104), 0);
}

uint64_t sub_1001B8A64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;

  if (qword_10025FB88 != -1)
    swift_once(&qword_10025FB88, sub_1001B4410);
  v1 = *(_QWORD *)(v0 + 2248);
  v2 = *(_QWORD *)(v0 + 2200);
  v3 = *(_QWORD *)(v0 + 2152);
  v4 = sub_100037A9C(v3, (uint64_t)qword_100266920);
  v5 = swift_beginAccess(v4, v0 + 2040, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v2 + 16))(v1, v4, v3, v5);
  ManagedDefault.wrappedValue.getter(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(unsigned __int8 *)(v0 + 2636);
  if (v7 == 2 || (v7 & 1) != 0)
    return swift_asyncLet_finish(v0 + 16, v6, sub_1001B8D70, v0 + 2256);
  v8 = (_QWORD *)swift_task_alloc(dword_100263DA4);
  *(_QWORD *)(v0 + 2600) = v8;
  *v8 = v0;
  v8[1] = sub_1001B8B88;
  return sub_10010A454();
}

uint64_t sub_1001B8B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)v0 + 16;
  v2 = *(_QWORD *)v0 + 2208;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2600));
  return swift_asyncLet_finish(v1, v3, sub_1001B8BE4, v2);
}

uint64_t sub_1001B8BE4()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B8BF8, *(_QWORD *)(v0 + 2104), 0);
}

uint64_t sub_1001B8BF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2104));
  return swift_asyncLet_finish(v0 + 1296, *(_QWORD *)(v0 + 2344), sub_1001B8C40, v0 + 2160);
}

uint64_t sub_1001B8C40()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B8C54, *(_QWORD *)(v0 + 2104), 0);
}

uint64_t sub_1001B8C54()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 2104));
  return swift_asyncLet_finish(v0 + 656, v1, sub_1001B8C98, v0 + 1936);
}

uint64_t sub_1001B8C98()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B8CAC, *(_QWORD *)(v0 + 2104), 0);
}

uint64_t sub_1001B8CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 2104);
  (*(void (**)(_QWORD, _QWORD))(v0 + 2592))(*(_QWORD *)(v0 + 2432), *(_QWORD *)(v0 + 2392));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 2104);
  v3 = *(_QWORD *)(v0 + 2584);
  *(_QWORD *)(v0 + 2568) = v2;
  *(_QWORD *)(v0 + 2560) = &unk_100266D28;
  *(_QWORD *)(v0 + 2552) = v2;
  *(_QWORD *)(v0 + 2544) = &unk_100266D18;
  *(_QWORD *)(v0 + 2536) = v2;
  *(_QWORD *)(v0 + 2528) = &unk_100266D08;
  *(_QWORD *)(v0 + 2520) = v3;
  v4 = *(_QWORD *)(v0 + 2512);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 2576) = v5;
  *v5 = v0;
  v5[1] = sub_1001B81D8;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 2440), v2, v4, *(_QWORD *)(v0 + 2448));
}

uint64_t sub_1001B8D70()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B8D84, *(_QWORD *)(v0 + 2104), 0);
}

uint64_t sub_1001B8D84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2104));
  return swift_asyncLet_finish(v0 + 1296, *(_QWORD *)(v0 + 2344), sub_1001B8DCC, v0 + 2304);
}

uint64_t sub_1001B8DCC()
{
  uint64_t v0;

  return swift_task_switch(sub_1001B8DE0, *(_QWORD *)(v0 + 2104), 0);
}

uint64_t sub_1001B8DE0()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 2104));
  return swift_asyncLet_finish(v0 + 656, v1, sub_1001B8E24, v0 + 2352);
}

uint64_t sub_1001B8E24()
{
  uint64_t v0;

  return swift_task_switch(sub_1001C4280, *(_QWORD *)(v0 + 2104), 0);
}

uint64_t sub_1001B8E38()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100266C74);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1001B8E80();
}

uint64_t sub_1001B8E80()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1[13] = v0;
  v1[14] = *v0;
  v2 = sub_100037A5C(&qword_100260A48);
  v1[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Handle(0);
  v1[16] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[17] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v1[18] = v5;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[19] = swift_task_alloc(v6);
  v1[20] = swift_task_alloc(v6);
  v1[21] = swift_task_alloc(v6);
  v7 = type metadata accessor for UUID(0);
  v1[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for HandleType(0);
  v1[23] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[24] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[25] = swift_task_alloc(v10);
  v1[26] = swift_task_alloc(v10);
  v1[27] = swift_task_alloc(v10);
  v11 = type metadata accessor for Friend(0);
  v1[28] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[29] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v1[30] = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[31] = swift_task_alloc(v14);
  v1[32] = swift_task_alloc(v14);
  v1[33] = swift_task_alloc(v14);
  v1[34] = swift_task_alloc(v14);
  v1[35] = swift_task_alloc(v14);
  v1[36] = swift_task_alloc(v14);
  v1[37] = swift_task_alloc(v14);
  v1[38] = swift_task_alloc(v14);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100266C78) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[39] = swift_task_alloc(v15);
  v1[40] = swift_task_alloc(v15);
  v1[41] = swift_task_alloc(v15);
  v16 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260538) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[42] = swift_task_alloc(v16);
  v1[43] = swift_task_alloc(v16);
  v1[44] = swift_task_alloc(v16);
  v17 = type metadata accessor for DataManager.State(0);
  v1[45] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v1[46] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[47] = swift_task_alloc(v19);
  v1[48] = swift_task_alloc(v19);
  v1[49] = swift_task_alloc(v19);
  v1[50] = swift_task_alloc(v19);
  v20 = sub_100037A5C(&qword_1002626B0);
  v1[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100037A5C(&qword_1002626B8);
  v1[52] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v1[53] = v22;
  v1[54] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100037A5C(&qword_1002626C0);
  v1[55] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v23 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100037A5C((uint64_t *)&unk_100262140);
  v1[56] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v1[57] = v25;
  v1[58] = swift_task_alloc((*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001B9184, v0, 0);
}

uint64_t sub_1001B9184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
    v3 = *(_QWORD *)(v1 + 432);
    v2 = *(_QWORD *)(v1 + 440);
    v5 = *(_QWORD *)(v1 + 400);
    v4 = *(_QWORD *)(v1 + 408);
    v7 = *(_QWORD *)(v1 + 384);
    v6 = *(_QWORD *)(v1 + 392);
    v8 = *(_QWORD *)(v1 + 376);
    v9 = *(_QWORD *)(v1 + 344);
    v10 = *(_QWORD *)(v1 + 352);
    v44 = *(_QWORD *)(v1 + 336);
    v46 = *(_QWORD *)(v1 + 328);
    v48 = *(_QWORD *)(v1 + 320);
    v50 = *(_QWORD *)(v1 + 312);
    v52 = *(_QWORD *)(v1 + 304);
    v54 = *(_QWORD *)(v1 + 296);
    v56 = *(_QWORD *)(v1 + 288);
    v58 = *(_QWORD *)(v1 + 280);
    v60 = *(_QWORD *)(v1 + 272);
    v62 = *(_QWORD *)(v1 + 264);
    v64 = *(_QWORD *)(v1 + 256);
    v66 = *(_QWORD *)(v1 + 248);
    v68 = *(_QWORD *)(v1 + 216);
    v70 = *(_QWORD *)(v1 + 208);
    v72 = *(_QWORD *)(v1 + 200);
    v74 = *(_QWORD *)(v1 + 176);
    v76 = *(_QWORD *)(v1 + 168);
    v78 = *(_QWORD *)(v1 + 160);
    v80 = *(_QWORD *)(v1 + 152);
    v82 = *(_QWORD *)(v1 + 120);
    swift_task_dealloc(*(_QWORD *)(v1 + 464));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    swift_task_dealloc(v9);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    v11 = *(uint64_t (**)(void))(v1 + 8);
    return v11();
  }
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100037A9C(v12, (uint64_t)qword_10027B330);
  *(_QWORD *)(v1 + 472) = v13;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Monitoring DataManager stream", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
  v17 = *(_QWORD *)(v1 + 448);
  v18 = *(_QWORD *)(v1 + 456);
  v19 = *(_QWORD *)(v1 + 440);
  v20 = *(_QWORD *)(v1 + 104);

  v21 = v20 + OBJC_IVAR____TtC13findmylocated14NITokenService_dataManagerStateStream;
  swift_beginAccess(v20 + OBJC_IVAR____TtC13findmylocated14NITokenService_dataManagerStateStream, v1 + 16, 0, 0);
  sub_10000E37C(v21, v19, &qword_1002626C0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1, v17) == 1)
  {
    v22 = sub_1000087A0(*(_QWORD *)(v1 + 440), &qword_1002626C0);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "dataManagerStateStream should be available by now!", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = sub_100097FB4();
    v83 = swift_allocError(&type metadata for NITokenService.Error, v26, 0, 0);
    *v27 = 7;
    swift_willThrow(v83);
    v29 = *(_QWORD *)(v1 + 432);
    v28 = *(_QWORD *)(v1 + 440);
    v30 = *(_QWORD *)(v1 + 400);
    v31 = *(_QWORD *)(v1 + 408);
    v33 = *(_QWORD *)(v1 + 384);
    v32 = *(_QWORD *)(v1 + 392);
    v34 = *(_QWORD *)(v1 + 376);
    v36 = *(_QWORD *)(v1 + 344);
    v35 = *(_QWORD *)(v1 + 352);
    v43 = *(_QWORD *)(v1 + 336);
    v45 = *(_QWORD *)(v1 + 328);
    v47 = *(_QWORD *)(v1 + 320);
    v49 = *(_QWORD *)(v1 + 312);
    v51 = *(_QWORD *)(v1 + 304);
    v53 = *(_QWORD *)(v1 + 296);
    v55 = *(_QWORD *)(v1 + 288);
    v57 = *(_QWORD *)(v1 + 280);
    v59 = *(_QWORD *)(v1 + 272);
    v61 = *(_QWORD *)(v1 + 264);
    v63 = *(_QWORD *)(v1 + 256);
    v65 = *(_QWORD *)(v1 + 248);
    v67 = *(_QWORD *)(v1 + 216);
    v69 = *(_QWORD *)(v1 + 208);
    v71 = *(_QWORD *)(v1 + 200);
    v73 = *(_QWORD *)(v1 + 176);
    v75 = *(_QWORD *)(v1 + 168);
    v77 = *(_QWORD *)(v1 + 160);
    v79 = *(_QWORD *)(v1 + 152);
    v81 = *(_QWORD *)(v1 + 120);
    swift_task_dealloc(*(_QWORD *)(v1 + 464));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    v11 = *(uint64_t (**)(void))(v1 + 8);
    return v11();
  }
  v38 = *(_QWORD *)(v1 + 448);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v1 + 456) + 32))(*(_QWORD *)(v1 + 464), *(_QWORD *)(v1 + 440), v38);
  AsyncStream.makeAsyncIterator()(v38);
  v39 = sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
  v40 = OBJC_IVAR____TtC13findmylocated14NITokenService_tokenRequestActivity;
  *(_QWORD *)(v1 + 480) = v39;
  *(_QWORD *)(v1 + 488) = v40;
  *(_DWORD *)(v1 + 624) = enum case for HandleType.follower(_:);
  *(_DWORD *)(v1 + 628) = enum case for HandleType.following(_:);
  *(_QWORD *)(v1 + 496) = 0;
  v41 = *(_QWORD *)(v1 + 104);
  v42 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v1 + 504) = v42;
  *v42 = v1;
  v42[1] = sub_1001B9770;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v1 + 408), v41, v39, *(_QWORD *)(v1 + 416));
}

uint64_t sub_1001B9770()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 504));
  return swift_task_switch(sub_1001B97C8, v1, 0);
}

uint64_t sub_1001B97C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[3];

  v1 = v0[51];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[46] + 48))(v1, 1, v0[45]) == 1)
  {
    v3 = v0[57];
    v2 = v0[58];
    v4 = v0[56];
    (*(void (**)(_QWORD, _QWORD))(v0[53] + 8))(v0[54], v0[52]);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    v6 = v0[54];
    v5 = v0[55];
    v8 = v0[50];
    v7 = v0[51];
    v10 = v0[48];
    v9 = v0[49];
    v11 = v0[47];
    v12 = v0[43];
    v13 = v0[44];
    v46 = v0[42];
    v48 = v0[41];
    v50 = v0[40];
    v52 = v0[39];
    v54 = v0[38];
    v56 = v0[37];
    v58 = v0[36];
    v60 = v0[35];
    v62 = v0[34];
    v64 = v0[33];
    v66 = v0[32];
    v68 = v0[31];
    v70 = v0[27];
    v72 = v0[26];
    v74 = v0[25];
    v76 = v0[22];
    v78 = v0[21];
    v80 = v0[20];
    v82 = v0[19];
    v84 = v0[15];
    swift_task_dealloc(v0[58]);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    v14 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v15 = v0[62];
    v16 = sub_1000321F4(v1, v0[50], type metadata accessor for DataManager.State);
    static Task<>.checkCancellation()(v16);
    v0[64] = v15;
    if (!v15)
    {
      v32 = sub_100025C70(v0[50], v0[49], type metadata accessor for DataManager.State);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.default.getter(v33);
      v35 = os_log_type_enabled(v33, v34);
      v36 = v0[49];
      if (v35)
      {
        v37 = swift_slowAlloc(12, -1);
        v38 = swift_slowAlloc(32, -1);
        v86[0] = v38;
        *(_DWORD *)v37 = 136315138;
        sub_1000DF70C();
        v40 = v39;
        *(_QWORD *)(v37 + 4) = sub_10002BA84(v41, v39, v86);
        swift_bridgeObjectRelease(v40);
        sub_100024990(v36, type metadata accessor for DataManager.State);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "dataManagerStateStream event: %s", (uint8_t *)v37, 0xCu);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);
      }
      else
      {
        sub_100024990(v0[49], type metadata accessor for DataManager.State);
      }

      v42 = v0[48];
      v43 = v0[45];
      sub_100025C70(v0[50], v42, type metadata accessor for DataManager.State);
      v44 = (char *)sub_1001B9D1C + 4 * word_1001FA318[swift_getEnumCaseMultiPayload(v42, v43)];
      __asm { BR              X10 }
    }
    v18 = v0[57];
    v17 = v0[58];
    v19 = v0[56];
    v21 = v0[53];
    v20 = v0[54];
    v22 = v0[52];
    sub_100024990(v0[50], type metadata accessor for DataManager.State);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    v24 = v0[54];
    v23 = v0[55];
    v26 = v0[50];
    v25 = v0[51];
    v27 = v0[48];
    v28 = v0[49];
    v29 = v0[47];
    v30 = v0[44];
    v45 = v0[43];
    v47 = v0[42];
    v49 = v0[41];
    v51 = v0[40];
    v53 = v0[39];
    v55 = v0[38];
    v57 = v0[37];
    v59 = v0[36];
    v61 = v0[35];
    v63 = v0[34];
    v65 = v0[33];
    v67 = v0[32];
    v69 = v0[31];
    v71 = v0[27];
    v73 = v0[26];
    v75 = v0[25];
    v77 = v0[22];
    v79 = v0[21];
    v81 = v0[20];
    v83 = v0[19];
    v85 = v0[15];
    swift_task_dealloc(v0[58]);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v28);
    swift_task_dealloc(v27);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    v14 = (uint64_t (*)(void))v0[1];
  }
  return v14();
}

uint64_t sub_1001B9D1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = sub_100025C70(v0[50], v0[47], type metadata accessor for DataManager.State);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[50];
  v7 = v0[47];
  if (v5)
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v1 - 96) = v9;
    *(_DWORD *)v8 = 136315138;
    sub_1000DF70C();
    v11 = v10;
    *(_QWORD *)(v8 + 4) = sub_10002BA84(v12, v10, (uint64_t *)(v1 - 96));
    swift_bridgeObjectRelease(v11);
    sub_100024990(v7, type metadata accessor for DataManager.State);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Ignoring %s", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    sub_100024990(v7, type metadata accessor for DataManager.State);
  }
  sub_100024990(v6, type metadata accessor for DataManager.State);
  v0[62] = v0[64];
  v13 = v0[60];
  v14 = v0[13];
  v15 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[63] = v15;
  *v15 = v0;
  v15[1] = sub_1001B9770;
  return AsyncStream.Iterator.next(isolation:)(v0[51], v14, v13, v0[52]);
}

uint64_t sub_1001BAFF0()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 520));
  v2 = (_QWORD *)swift_task_alloc(dword_100266CA4);
  *(_QWORD *)(v1 + 528) = v2;
  *v2 = v4;
  v2[1] = sub_1001BB05C;
  return sub_1001BEBA0(*(_QWORD *)(v1 + 352));
}

uint64_t sub_1001BB05C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 528));
  return swift_task_switch(sub_1001BB0B4, v1, 0);
}

uint64_t sub_1001BB0B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);

  v1 = *(_QWORD *)(v0[13] + v0[61]);
  v0[67] = v1;
  if (v1)
  {
    v2 = *((unsigned int *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria() + 1);
    v12 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                         + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
    swift_retain(v1);
    v3 = (_QWORD *)swift_task_alloc(v2);
    v0[68] = v3;
    *v3 = v0;
    v3[1] = sub_1001BB1F8;
    return v12(v0[41]);
  }
  else
  {
    v5 = v0[41];
    v6 = type metadata accessor for XPCActivity.State(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
    v7 = v0[50];
    v8 = v0[44];
    sub_1000087A0(v0[41], &qword_100266C78);
    sub_1000087A0(v8, &qword_100260538);
    sub_100024990(v7, type metadata accessor for DataManager.State);
    v0[62] = v0[64];
    v9 = v0[60];
    v10 = v0[13];
    v11 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[63] = v11;
    *v11 = v0;
    v11[1] = sub_1001B9770;
    return AsyncStream.Iterator.next(isolation:)(v0[51], v10, v9, v0[52]);
  }
}

uint64_t sub_1001BB1F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 536);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 544));
  swift_release(v1);
  return swift_task_switch(sub_1001BB25C, v2, 0);
}

uint64_t sub_1001BB25C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[41];
  v2 = type metadata accessor for XPCActivity.State(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  v3 = v0[50];
  v4 = v0[44];
  sub_1000087A0(v0[41], &qword_100266C78);
  sub_1000087A0(v4, &qword_100260538);
  sub_100024990(v3, type metadata accessor for DataManager.State);
  v0[62] = v0[64];
  v5 = v0[60];
  v6 = v0[13];
  v7 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[63] = v7;
  *v7 = v0;
  v7[1] = sub_1001B9770;
  return AsyncStream.Iterator.next(isolation:)(v0[51], v6, v5, v0[52]);
}

uint64_t sub_1001BB330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 560);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 568));
  swift_release(v1);
  return swift_task_switch(sub_1001BB394, v2, 0);
}

uint64_t sub_1001BB394()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[40];
  v2 = type metadata accessor for XPCActivity.State(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  v3 = (void (*)(uint64_t, uint64_t))v0[69];
  v4 = v0[50];
  v5 = v0[38];
  v6 = v0[28];
  sub_1000087A0(v0[40], &qword_100266C78);
  v3(v5, v6);
  sub_100024990(v4, type metadata accessor for DataManager.State);
  v0[62] = v0[64];
  v7 = v0[60];
  v8 = v0[13];
  v9 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[63] = v9;
  *v9 = v0;
  v9[1] = sub_1001B9770;
  return AsyncStream.Iterator.next(isolation:)(v0[51], v8, v7, v0[52]);
}

uint64_t sub_1001BB46C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 584);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 592));
  swift_release(v1);
  return swift_task_switch(sub_1001BB4D0, v2, 0);
}

uint64_t sub_1001BB4D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[39];
  v2 = type metadata accessor for XPCActivity.State(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  v3 = (void (*)(uint64_t, uint64_t))v0[72];
  v4 = v0[50];
  v5 = v0[34];
  v6 = v0[28];
  sub_1000087A0(v0[39], &qword_100266C78);
  v3(v5, v6);
  sub_100024990(v4, type metadata accessor for DataManager.State);
  v0[62] = v0[64];
  v7 = v0[60];
  v8 = v0[13];
  v9 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[63] = v9;
  *v9 = v0;
  v9[1] = sub_1001B9770;
  return AsyncStream.Iterator.next(isolation:)(v0[51], v8, v7, v0[52]);
}

uint64_t sub_1001BB5A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 600));
  sub_1000087A0(v1, &qword_100260A48);
  return swift_task_switch(sub_1001BB614, v2, 0);
}

uint64_t sub_1001BB614()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100263DA4);
  *(_QWORD *)(v0 + 608) = v1;
  *v1 = v0;
  v1[1] = sub_1001BB65C;
  return sub_10010A454();
}

uint64_t sub_1001BB65C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 608));
  return swift_task_switch(sub_1001BB6B4, v1, 0);
}

uint64_t sub_1001BB6B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_100024990(v0[50], type metadata accessor for DataManager.State);
  v0[62] = v0[64];
  v1 = v0[60];
  v2 = v0[13];
  v3 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[63] = v3;
  *v3 = v0;
  v3[1] = sub_1001B9770;
  return AsyncStream.Iterator.next(isolation:)(v0[51], v2, v1, v0[52]);
}

uint64_t sub_1001BB738()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 616));
  return swift_task_switch(sub_1001C4278, v1, 0);
}

uint64_t sub_1001BB790()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100266C64);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1001BB7D8();
}

uint64_t sub_1001BB7D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[18] = v0;
  v2 = sub_100037A5C(&qword_100260A48);
  v1[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100037A5C(&qword_100266C68);
  v1[20] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[21] = v4;
  v1[22] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100266B98);
  v1[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_1002669C8);
  v1[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[25] = v7;
  v1[26] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001BB8B0, v0, 0);
}

uint64_t sub_1001BB8B0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
    v2 = v1[22];
    v3 = v1[23];
    v4 = v1[19];
    swift_task_dealloc(v1[26]);
    swift_task_dealloc(v3);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    v5 = (uint64_t (*)(void))v1[1];
    return v5();
  }
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100037A9C(v6, (uint64_t)qword_10027B330);
  v1[27] = v7;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Monitoring LocationServicesToggle stream", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = v1[24];
  v12 = v1[25];
  v13 = v1[23];
  v14 = v1[18];

  v15 = v14 + OBJC_IVAR____TtC13findmylocated14NITokenService_locationServicesToggleStream;
  swift_beginAccess(v14 + OBJC_IVAR____TtC13findmylocated14NITokenService_locationServicesToggleStream, v1 + 2, 0, 0);
  sub_10000E37C(v15, v13, &qword_100266B98);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11) == 1)
  {
    v16 = sub_1000087A0(v1[23], &qword_100266B98);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "locationServicesToggleStream should be available by now!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v20 = sub_100097FB4();
    v21 = swift_allocError(&type metadata for NITokenService.Error, v20, 0, 0);
    *v22 = 8;
    swift_willThrow(v21);
    v24 = v1[22];
    v23 = v1[23];
    v25 = v1[19];
    swift_task_dealloc(v1[26]);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    v5 = (uint64_t (*)(void))v1[1];
    return v5();
  }
  v27 = v1[24];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v1[25] + 32))(v1[26], v1[23], v27);
  AsyncStream.makeAsyncIterator()(v27);
  v28 = sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
  v1[28] = v28;
  v1[29] = 0;
  v29 = v1[18];
  v30 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v1[30] = v30;
  *v30 = v1;
  v30[1] = sub_1001BBBBC;
  return AsyncStream.Iterator.next(isolation:)(v1 + 35, v29, v28, v1[20]);
}

uint64_t sub_1001BBBBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  return swift_task_switch(sub_1001BBC14, v1, 0);
}

uint64_t sub_1001BBC14(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;

  v2 = *(unsigned __int8 *)(v1 + 280);
  if (v2 == 4)
  {
    v4 = *(_QWORD *)(v1 + 200);
    v3 = *(_QWORD *)(v1 + 208);
    v5 = *(_QWORD *)(v1 + 192);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 168) + 8))(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 160));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = *(_QWORD *)(v1 + 176);
    v7 = *(_QWORD *)(v1 + 184);
    v8 = *(_QWORD *)(v1 + 152);
    swift_task_dealloc(*(_QWORD *)(v1 + 208));
    swift_task_dealloc(v7);
    swift_task_dealloc(v6);
    swift_task_dealloc(v8);
    v9 = *(uint64_t (**)(void))(v1 + 8);
    return v9();
  }
  v10 = *(_QWORD *)(v1 + 232);
  v11 = static Task<>.checkCancellation()(a1);
  *(_QWORD *)(v1 + 248) = v10;
  if (v10)
  {
    v13 = *(_QWORD *)(v1 + 200);
    v12 = *(_QWORD *)(v1 + 208);
    v14 = *(_QWORD *)(v1 + 192);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 168) + 8))(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 160));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    v15 = *(_QWORD *)(v1 + 176);
    v16 = *(_QWORD *)(v1 + 184);
    v17 = *(_QWORD *)(v1 + 152);
    swift_task_dealloc(*(_QWORD *)(v1 + 208));
    swift_task_dealloc(v16);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    v9 = *(uint64_t (**)(void))(v1 + 8);
    return v9();
  }
  v19 = Logger.logObject.getter(v11);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v1 + 136) = v22;
    *(_DWORD *)v21 = 136315138;
    if (v2 == 2)
    {
      v23 = 0x6E776F6E6B6E752ELL;
      v24 = 0xE800000000000000;
    }
    else if (v2 == 3)
    {
      v23 = 0x6C616974696E692ELL;
      v24 = 0xEC00000064657A69;
    }
    else
    {
      *(_QWORD *)(v1 + 64) = 0;
      *(_QWORD *)(v1 + 72) = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 72));
      *(_QWORD *)(v1 + 112) = 0xD000000000000012;
      *(_QWORD *)(v1 + 120) = 0x8000000100201410;
      if ((v2 & 1) != 0)
        v25 = 1702195828;
      else
        v25 = 0x65736C6166;
      if ((v2 & 1) != 0)
        v26 = 0xE400000000000000;
      else
        v26 = 0xE500000000000000;
      v27 = v26;
      String.append(_:)(*(Swift::String *)&v25);
      swift_bridgeObjectRelease(v26);
      v28._countAndFlagsBits = 41;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      v23 = *(_QWORD *)(v1 + 112);
      v24 = *(_QWORD *)(v1 + 120);
    }
    *(_QWORD *)(v21 + 4) = sub_10002BA84(v23, v24, (uint64_t *)(v1 + 136));
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "locationServicesToggleStream event: %s", (uint8_t *)v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }

  if ((v2 & 0xFE) == 2)
  {
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v1 + 128) = v33;
      *(_DWORD *)v32 = 136315138;
      if (v2 == 2)
      {
        v34 = 0x6E776F6E6B6E752ELL;
        v35 = 0xE800000000000000;
      }
      else if (v2 == 3)
      {
        v34 = 0x6C616974696E692ELL;
        v35 = 0xEC00000064657A69;
      }
      else
      {
        *(_QWORD *)(v1 + 96) = 0;
        *(_QWORD *)(v1 + 104) = 0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease(*(_QWORD *)(v1 + 104));
        *(_QWORD *)(v1 + 80) = 0xD000000000000012;
        *(_QWORD *)(v1 + 88) = 0x8000000100201410;
        if ((v2 & 1) != 0)
          v46 = 1702195828;
        else
          v46 = 0x65736C6166;
        if ((v2 & 1) != 0)
          v47 = 0xE400000000000000;
        else
          v47 = 0xE500000000000000;
        v48 = v47;
        String.append(_:)(*(Swift::String *)&v46);
        swift_bridgeObjectRelease(v47);
        v49._countAndFlagsBits = 41;
        v49._object = (void *)0xE100000000000000;
        String.append(_:)(v49);
        v34 = *(_QWORD *)(v1 + 80);
        v35 = *(_QWORD *)(v1 + 88);
      }
      *(_QWORD *)(v32 + 4) = sub_10002BA84(v34, v35, (uint64_t *)(v1 + 128));
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Ignoring %s", (uint8_t *)v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }

    *(_QWORD *)(v1 + 232) = *(_QWORD *)(v1 + 248);
    v50 = *(_QWORD *)(v1 + 224);
    v51 = *(_QWORD *)(v1 + 144);
    v52 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v1 + 240) = v52;
    *v52 = v1;
    v52[1] = sub_1001BBBBC;
    return AsyncStream.Iterator.next(isolation:)(v1 + 280, v51, v50, *(_QWORD *)(v1 + 160));
  }
  else
  {
    v36 = Logger.logObject.getter(v29);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v53 = v39;
      *(_DWORD *)v38 = 136315138;
      if ((v2 & 1) != 0)
        v40 = 0x64656C62616E65;
      else
        v40 = 0x64656C6261736964;
      if ((v2 & 1) != 0)
        v41 = 0xE700000000000000;
      else
        v41 = 0xE800000000000000;
      *(_QWORD *)(v38 + 4) = sub_10002BA84(v40, v41, &v53);
      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Location services is %s", (uint8_t *)v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }

    if ((v2 & 1) != 0)
    {
      if (qword_10025FB88 != -1)
        swift_once(&qword_10025FB88, sub_1001B4410);
      v43 = sub_100037A5C(&qword_1002632F8);
      v44 = sub_100037A9C(v43, (uint64_t)qword_100266920);
      *(_BYTE *)(v1 + 281) = 0;
      swift_beginAccess(v44, v1 + 40, 33, 0);
      ManagedDefault.wrappedValue.setter(v1 + 281, v43);
      swift_endAccess(v1 + 40);
      v45 = (_QWORD *)swift_task_alloc(dword_100263CEC);
      *(_QWORD *)(v1 + 256) = v45;
      *v45 = v1;
      v45[1] = sub_1001BC2EC;
      return sub_10010F758(*(_QWORD *)(v1 + 152));
    }
    else
    {
      v42 = (_QWORD *)swift_task_alloc(dword_100263E0C);
      *(_QWORD *)(v1 + 272) = v42;
      *v42 = v1;
      v42[1] = sub_1001BC438;
      return sub_100115A30();
    }
  }
}

uint64_t sub_1001BC2EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  sub_1000087A0(v2, &qword_100260A48);
  return swift_task_switch(sub_1001BC354, v1, 0);
}

uint64_t sub_1001BC354()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100263DA4);
  *(_QWORD *)(v0 + 264) = v1;
  *v1 = v0;
  v1[1] = sub_1001BC39C;
  return sub_10010A454();
}

uint64_t sub_1001BC39C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  v1[29] = v1[31];
  v3 = v1[28];
  v4 = v1[18];
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v1[30] = v5;
  *v5 = v2;
  v5[1] = sub_1001BBBBC;
  return AsyncStream.Iterator.next(isolation:)(v1 + 35, v4, v3, v1[20]);
}

uint64_t sub_1001BC438()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  v1[29] = v1[31];
  v3 = v1[28];
  v4 = v1[18];
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v1[30] = v5;
  *v5 = v2;
  v5[1] = sub_1001BBBBC;
  return AsyncStream.Iterator.next(isolation:)(v1 + 35, v4, v3, v1[20]);
}

uint64_t sub_1001BC4D4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100266C54);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1001BC51C();
}

uint64_t sub_1001BC51C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[18] = v0;
  v2 = sub_100037A5C(&qword_100260A48);
  v1[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100037A5C(&qword_100266C58);
  v1[20] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[21] = v4;
  v1[22] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100266B88);
  v1[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C((uint64_t *)&unk_1002669D8);
  v1[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[25] = v7;
  v1[26] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001BC5F4, v0, 0);
}

uint64_t sub_1001BC5F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
    v2 = v1[22];
    v3 = v1[23];
    v4 = v1[19];
    swift_task_dealloc(v1[26]);
    swift_task_dealloc(v3);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    v5 = (uint64_t (*)(void))v1[1];
    return v5();
  }
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100037A9C(v6, (uint64_t)qword_10027B330);
  v1[27] = v7;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Monitoring AppDeletionService stream", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = v1[24];
  v12 = v1[25];
  v13 = v1[23];
  v14 = v1[18];

  v15 = v14 + OBJC_IVAR____TtC13findmylocated14NITokenService_appDeletionStream;
  swift_beginAccess(v14 + OBJC_IVAR____TtC13findmylocated14NITokenService_appDeletionStream, v1 + 2, 0, 0);
  sub_10000E37C(v15, v13, &qword_100266B88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11) == 1)
  {
    v16 = sub_1000087A0(v1[23], &qword_100266B88);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "appDeletionStream should be available by now!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v20 = sub_100097FB4();
    v21 = swift_allocError(&type metadata for NITokenService.Error, v20, 0, 0);
    *v22 = 9;
    swift_willThrow(v21);
    v24 = v1[22];
    v23 = v1[23];
    v25 = v1[19];
    swift_task_dealloc(v1[26]);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    v5 = (uint64_t (*)(void))v1[1];
    return v5();
  }
  v27 = v1[24];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v1[25] + 32))(v1[26], v1[23], v27);
  AsyncStream.makeAsyncIterator()(v27);
  v28 = sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
  v1[28] = v28;
  v1[29] = 0;
  v29 = v1[18];
  v30 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v1[30] = v30;
  *v30 = v1;
  v30[1] = sub_1001BC900;
  return AsyncStream.Iterator.next(isolation:)(v1 + 35, v29, v28, v1[20]);
}

uint64_t sub_1001BC900()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  return swift_task_switch(sub_1001BC958, v1, 0);
}

uint64_t sub_1001BC958(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;

  v2 = *(unsigned __int8 *)(v1 + 280);
  if (v2 == 4)
  {
    v4 = *(_QWORD *)(v1 + 200);
    v3 = *(_QWORD *)(v1 + 208);
    v5 = *(_QWORD *)(v1 + 192);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 168) + 8))(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 160));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = *(_QWORD *)(v1 + 176);
    v7 = *(_QWORD *)(v1 + 184);
    v8 = *(_QWORD *)(v1 + 152);
    swift_task_dealloc(*(_QWORD *)(v1 + 208));
    swift_task_dealloc(v7);
    swift_task_dealloc(v6);
    swift_task_dealloc(v8);
    v9 = *(uint64_t (**)(void))(v1 + 8);
    return v9();
  }
  v10 = *(_QWORD *)(v1 + 232);
  v11 = static Task<>.checkCancellation()(a1);
  *(_QWORD *)(v1 + 248) = v10;
  if (v10)
  {
    v13 = *(_QWORD *)(v1 + 200);
    v12 = *(_QWORD *)(v1 + 208);
    v14 = *(_QWORD *)(v1 + 192);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 168) + 8))(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 160));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    v15 = *(_QWORD *)(v1 + 176);
    v16 = *(_QWORD *)(v1 + 184);
    v17 = *(_QWORD *)(v1 + 152);
    swift_task_dealloc(*(_QWORD *)(v1 + 208));
    swift_task_dealloc(v16);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    v9 = *(uint64_t (**)(void))(v1 + 8);
    return v9();
  }
  v19 = Logger.logObject.getter(v11);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v1 + 136) = v22;
    *(_DWORD *)v21 = 136315138;
    if (v2 == 2)
    {
      v23 = 0x6E776F6E6B6E752ELL;
      v24 = 0xE800000000000000;
    }
    else if (v2 == 3)
    {
      v23 = 0x6C616974696E692ELL;
      v24 = 0xEC00000064657A69;
    }
    else
    {
      *(_QWORD *)(v1 + 64) = 0;
      *(_QWORD *)(v1 + 72) = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 72));
      *(_QWORD *)(v1 + 112) = 0xD000000000000018;
      *(_QWORD *)(v1 + 120) = 0x8000000100201B60;
      if ((v2 & 1) != 0)
        v25 = 1702195828;
      else
        v25 = 0x65736C6166;
      if ((v2 & 1) != 0)
        v26 = 0xE400000000000000;
      else
        v26 = 0xE500000000000000;
      v27 = v26;
      String.append(_:)(*(Swift::String *)&v25);
      swift_bridgeObjectRelease(v26);
      v28._countAndFlagsBits = 41;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      v23 = *(_QWORD *)(v1 + 112);
      v24 = *(_QWORD *)(v1 + 120);
    }
    *(_QWORD *)(v21 + 4) = sub_10002BA84(v23, v24, (uint64_t *)(v1 + 136));
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "appDeletionStream event: %s", (uint8_t *)v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }

  if ((v2 & 0xFE) == 2)
  {
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v1 + 128) = v33;
      *(_DWORD *)v32 = 136315138;
      if (v2 == 2)
      {
        v34 = 0x6E776F6E6B6E752ELL;
        v35 = 0xE800000000000000;
      }
      else if (v2 == 3)
      {
        v34 = 0x6C616974696E692ELL;
        v35 = 0xEC00000064657A69;
      }
      else
      {
        *(_QWORD *)(v1 + 96) = 0;
        *(_QWORD *)(v1 + 104) = 0xE000000000000000;
        _StringGuts.grow(_:)(27);
        swift_bridgeObjectRelease(*(_QWORD *)(v1 + 104));
        *(_QWORD *)(v1 + 80) = 0xD000000000000018;
        *(_QWORD *)(v1 + 88) = 0x8000000100201B60;
        if ((v2 & 1) != 0)
          v46 = 1702195828;
        else
          v46 = 0x65736C6166;
        if ((v2 & 1) != 0)
          v47 = 0xE400000000000000;
        else
          v47 = 0xE500000000000000;
        v48 = v47;
        String.append(_:)(*(Swift::String *)&v46);
        swift_bridgeObjectRelease(v47);
        v49._countAndFlagsBits = 41;
        v49._object = (void *)0xE100000000000000;
        String.append(_:)(v49);
        v34 = *(_QWORD *)(v1 + 80);
        v35 = *(_QWORD *)(v1 + 88);
      }
      *(_QWORD *)(v32 + 4) = sub_10002BA84(v34, v35, (uint64_t *)(v1 + 128));
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Ignoring %s", (uint8_t *)v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }

    *(_QWORD *)(v1 + 232) = *(_QWORD *)(v1 + 248);
    v50 = *(_QWORD *)(v1 + 224);
    v51 = *(_QWORD *)(v1 + 144);
    v52 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v1 + 240) = v52;
    *v52 = v1;
    v52[1] = sub_1001BC900;
    return AsyncStream.Iterator.next(isolation:)(v1 + 280, v51, v50, *(_QWORD *)(v1 + 160));
  }
  else
  {
    v36 = Logger.logObject.getter(v29);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v53 = v39;
      *(_DWORD *)v38 = 136315138;
      if ((v2 & 1) != 0)
        v40 = 7562585;
      else
        v40 = 28494;
      if ((v2 & 1) != 0)
        v41 = 0xE300000000000000;
      else
        v41 = 0xE200000000000000;
      *(_QWORD *)(v38 + 4) = sub_10002BA84(v40, v41, &v53);
      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "isFindMyAppInstalled:%s", (uint8_t *)v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }

    if ((v2 & 1) != 0)
    {
      if (qword_10025FB88 != -1)
        swift_once(&qword_10025FB88, sub_1001B4410);
      v43 = sub_100037A5C(&qword_1002632F8);
      v44 = sub_100037A9C(v43, (uint64_t)qword_100266920);
      *(_BYTE *)(v1 + 281) = 0;
      swift_beginAccess(v44, v1 + 40, 33, 0);
      ManagedDefault.wrappedValue.setter(v1 + 281, v43);
      swift_endAccess(v1 + 40);
      v45 = (_QWORD *)swift_task_alloc(dword_100263CEC);
      *(_QWORD *)(v1 + 256) = v45;
      *v45 = v1;
      v45[1] = sub_1001BD01C;
      return sub_10010F758(*(_QWORD *)(v1 + 152));
    }
    else
    {
      v42 = (_QWORD *)swift_task_alloc(dword_100263E0C);
      *(_QWORD *)(v1 + 272) = v42;
      *v42 = v1;
      v42[1] = sub_1001BD168;
      return sub_100115A30();
    }
  }
}

uint64_t sub_1001BD01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  sub_1000087A0(v2, &qword_100260A48);
  return swift_task_switch(sub_1001BD084, v1, 0);
}

uint64_t sub_1001BD084()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100263DA4);
  *(_QWORD *)(v0 + 264) = v1;
  *v1 = v0;
  v1[1] = sub_1001BD0CC;
  return sub_10010A454();
}

uint64_t sub_1001BD0CC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  v1[29] = v1[31];
  v3 = v1[28];
  v4 = v1[18];
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v1[30] = v5;
  *v5 = v2;
  v5[1] = sub_1001BC900;
  return AsyncStream.Iterator.next(isolation:)(v1 + 35, v4, v3, v1[20]);
}

uint64_t sub_1001BD168()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  v1[29] = v1[31];
  v3 = v1[28];
  v4 = v1[18];
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v1[30] = v5;
  *v5 = v2;
  v5[1] = sub_1001BC900;
  return AsyncStream.Iterator.next(isolation:)(v1 + 35, v4, v3, v1[20]);
}

uint64_t sub_1001BD204()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10026624C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10005F000;
  return sub_10018FE90();
}

uint64_t sub_1001BD24C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100266C1C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1001BD294();
}

uint64_t sub_1001BD294()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1[275] = v0;
  v2 = sub_100037A5C(&qword_100260A48);
  v1[281] = v2;
  v1[287] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Account(0);
  v1[288] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[289] = v4;
  v1[290] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccountService.State(0);
  v1[291] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[292] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[293] = swift_task_alloc(v7);
  v1[294] = swift_task_alloc(v7);
  v1[295] = swift_task_alloc(v7);
  v1[296] = swift_task_alloc(v7);
  v1[297] = swift_task_alloc(v7);
  v1[298] = swift_task_alloc(v7);
  v1[299] = swift_task_alloc(v7);
  v1[300] = swift_task_alloc(v7);
  v8 = sub_100037A5C(&qword_100263500);
  v1[301] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_100263508);
  v1[302] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[303] = v10;
  v1[304] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_100263510);
  v1[305] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C(&qword_100261F00);
  v1[306] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[307] = v13;
  v1[308] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001BD43C, v0, 0);
}

uint64_t sub_1001BD43C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
LABEL_10:
    v16 = *(_QWORD *)(v1 + 2440);
    v17 = *(_QWORD *)(v1 + 2432);
    v18 = *(_QWORD *)(v1 + 2408);
    v19 = *(_QWORD *)(v1 + 2400);
    v20 = *(_QWORD *)(v1 + 2392);
    v21 = *(_QWORD *)(v1 + 2384);
    v22 = *(_QWORD *)(v1 + 2376);
    v23 = *(_QWORD *)(v1 + 2368);
    v24 = *(_QWORD *)(v1 + 2360);
    v30 = *(_QWORD *)(v1 + 2352);
    v31 = *(_QWORD *)(v1 + 2344);
    v32 = *(_QWORD *)(v1 + 2320);
    v33 = *(_QWORD *)(v1 + 2296);
    swift_task_dealloc(*(_QWORD *)(v1 + 2464));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100037A9C(v2, (uint64_t)qword_10027B330);
  *(_QWORD *)(v1 + 2472) = v3;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Monitoring AccountState stream", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 2456);
  v8 = *(_QWORD *)(v1 + 2448);
  v9 = *(_QWORD *)(v1 + 2440);
  v10 = *(_QWORD *)(v1 + 2200);

  v11 = v10 + OBJC_IVAR____TtC13findmylocated14NITokenService_accountStateStream;
  swift_beginAccess(v10 + OBJC_IVAR____TtC13findmylocated14NITokenService_accountStateStream, v1 + 1976, 0, 0);
  sub_10000E37C(v11, v9, &qword_100263510);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v8) == 1)
  {
    v12 = sub_1000087A0(*(_QWORD *)(v1 + 2440), &qword_100263510);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "accountStateStream should be available by now!", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    goto LABEL_10;
  }
  v26 = *(_QWORD *)(v1 + 2448);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v1 + 2456) + 32))(*(_QWORD *)(v1 + 2464), *(_QWORD *)(v1 + 2440), v26);
  AsyncStream.makeAsyncIterator()(v26);
  v27 = sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
  *(_QWORD *)(v1 + 2480) = v27;
  *(_QWORD *)(v1 + 2488) = 0;
  v28 = *(_QWORD *)(v1 + 2200);
  v29 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v1 + 2496) = v29;
  *v29 = v1;
  v29[1] = sub_1001BD784;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v1 + 2408), v28, v27, *(_QWORD *)(v1 + 2416));
}

uint64_t sub_1001BD784()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2200);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2496));
  return swift_task_switch(sub_1001BD7DC, v1, 0);
}

uint64_t sub_1001BD7DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v1 = v0[301];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[292] + 48))(v1, 1, v0[291]) == 1)
  {
    v2 = v0[308];
    v3 = v0[307];
    v4 = v0[306];
    (*(void (**)(_QWORD, _QWORD))(v0[303] + 8))(v0[304], v0[302]);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    v5 = v0[305];
    v6 = v0[304];
    v7 = v0[301];
    v8 = v0[300];
    v9 = v0[299];
    v10 = v0[298];
    v11 = v0[297];
    v12 = v0[296];
    v13 = v0[295];
    v60 = v0[294];
    v62 = v0[293];
    v64 = v0[290];
    v66 = v0[287];
    swift_task_dealloc(v0[308]);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  v15 = v0[311];
  v16 = sub_1000321F4(v1, v0[300], type metadata accessor for AccountService.State);
  static Task<>.checkCancellation()(v16);
  v0[313] = v15;
  if (v15)
  {
    v17 = v0[308];
    v18 = v0[307];
    v19 = v0[306];
    v20 = v0[305];
    v21 = v0[304];
    v22 = v0[303];
    v23 = v0[302];
    v24 = v0[300];
    v54 = v0[301];
    v55 = v0[299];
    v56 = v0[298];
    v57 = v0[297];
    v58 = v0[296];
    v59 = v0[295];
    v61 = v0[294];
    v63 = v0[293];
    v65 = v0[290];
    v67 = v0[287];
    sub_100024990(v24, type metadata accessor for AccountService.State);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    swift_task_dealloc(v17);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v54);
    swift_task_dealloc(v24);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  v26 = sub_100025C70(v0[300], v0[299], type metadata accessor for AccountService.State);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = os_log_type_enabled(v27, v28);
  v30 = v0[299];
  if (v29)
  {
    v31 = v0[298];
    v32 = v0[297];
    v33 = (_DWORD *)swift_slowAlloc(12, -1);
    v0[269] = swift_slowAlloc(32, -1);
    *v33 = 136315138;
    sub_100025C70(v30, v31, type metadata accessor for AccountService.State);
    sub_100025C70(v31, v32, type metadata accessor for AccountService.State);
    v34 = sub_100037A5C(&qword_1002614A8);
    v35 = (char *)&loc_1001BDB54
        + 4
        * byte_1001FA328[(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v32, 3, v34)];
    __asm { BR              X10 }
  }
  sub_100024990(v0[299], type metadata accessor for AccountService.State);

  v36 = v0[296];
  sub_100025C70(v0[300], v36, type metadata accessor for AccountService.State);
  v37 = sub_100037A5C(&qword_1002614A8);
  v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48);
  v39 = v38(v36, 3, v37);
  if ((v39 - 1) >= 2)
  {
    if (v39)
    {
      v50 = v0[275];
      swift_asyncLet_begin(v0 + 2, 0, v0[281], &unk_100266C28, v50);
      swift_asyncLet_begin(v0 + 162, 0, (char *)&type metadata for () + 8, &unk_100266C38, v50);
      swift_asyncLet_begin(v0 + 82, 0, (char *)&type metadata for () + 8, &unk_100266C48, v50);
      return swift_asyncLet_get(v0 + 2, v0[287], sub_1001BE12C, v0 + 276);
    }
    (*(void (**)(_QWORD, _QWORD))(v0[289] + 8))(v0[296], v0[288]);
  }
  v40 = sub_100025C70(v0[300], v0[295], type metadata accessor for AccountService.State);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = v0[295];
    v44 = v0[294];
    v45 = v0[293];
    v46 = (_DWORD *)swift_slowAlloc(12, -1);
    v0[263] = swift_slowAlloc(32, -1);
    *v46 = 136315138;
    sub_100025C70(v43, v44, type metadata accessor for AccountService.State);
    sub_100025C70(v44, v45, type metadata accessor for AccountService.State);
    v47 = (char *)&loc_1001BDE48 + 4 * byte_1001FA32C[v38(v45, 3, v37)];
    __asm { BR              X10 }
  }
  v48 = v0[300];
  v49 = v0[295];

  sub_100024990(v49, type metadata accessor for AccountService.State);
  sub_100024990(v48, type metadata accessor for AccountService.State);
  v0[311] = v0[313];
  v51 = v0[310];
  v52 = v0[275];
  v53 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[312] = v53;
  *v53 = v0;
  v53[1] = sub_1001BD784;
  return AsyncStream.Iterator.next(isolation:)(v0[301], v52, v51, v0[302]);
}

uint64_t sub_1001BE12C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 1296, a2, sub_1001BE140, v2 + 2000);
}

uint64_t sub_1001BE140(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 656, a2, sub_1001BE154, v2 + 2256);
}

uint64_t sub_1001BE154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_1001BE168, v2 + 1936);
}

uint64_t sub_1001BE168()
{
  uint64_t v0;

  return swift_task_switch(sub_1001BE17C, *(_QWORD *)(v0 + 2200), 0);
}

uint64_t sub_1001BE17C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 1296, a2, sub_1001BE190, v2 + 2112);
}

uint64_t sub_1001BE190()
{
  uint64_t v0;

  return swift_task_switch(sub_1001BE1A4, *(_QWORD *)(v0 + 2200), 0);
}

uint64_t sub_1001BE1A4()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 16, *(_QWORD *)(v0 + 2296), sub_1001BE1BC, v0 + 2160);
}

uint64_t sub_1001BE1BC()
{
  uint64_t v0;

  return swift_task_switch(sub_1001BE1D0, *(_QWORD *)(v0 + 2200), 0);
}

uint64_t sub_1001BE1D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_100024990(v0[300], type metadata accessor for AccountService.State);
  v0[311] = v0[313];
  v1 = v0[310];
  v2 = v0[275];
  v3 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[312] = v3;
  *v3 = v0;
  v3[1] = sub_1001BD784;
  return AsyncStream.Iterator.next(isolation:)(v0[301], v2, v1, v0[302]);
}

uint64_t sub_1001BE258()
{
  uint64_t v0;

  return swift_task_switch(sub_1001BE26C, v0, 0);
}

uint64_t sub_1001BE26C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000018, 0x8000000100201B10, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  if (qword_10025FB88 != -1)
    swift_once(&qword_10025FB88, sub_1001B4410);
  v7 = sub_100037A5C(&qword_1002632F8);
  v8 = sub_100037A9C(v7, (uint64_t)qword_100266920);
  *(_BYTE *)(v0 + 40) = 0;
  swift_beginAccess(v8, v0 + 16, 33, 0);
  ManagedDefault.wrappedValue.setter(v0 + 40, v7);
  swift_endAccess(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BE45C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated14NITokenService_accountStateStream, &qword_100263510);
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated14NITokenService_cloudKitAccountStateStream, &qword_1002615D0);
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated14NITokenService_dataManagerStateStream, &qword_1002626C0);
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated14NITokenService_locationServicesToggleStream, &qword_100266B98);
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated14NITokenService_appDeletionStream, &qword_100266B88);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated14NITokenService_tokenRequestActivity));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1001BE510()
{
  return type metadata accessor for NITokenService(0);
}

uint64_t type metadata accessor for NITokenService(uint64_t a1)
{
  uint64_t result;

  result = qword_1002669A0;
  if (!qword_1002669A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NITokenService);
  return result;
}

void sub_1001BE554(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[9];

  v12[1] = &unk_1001FA390;
  v12[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1001BE6A8(319, (unint64_t *)&qword_100262DE0, &qword_100261F00);
  if (v3 <= 0x3F)
  {
    v12[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001BE6A8(319, (unint64_t *)&qword_100261310, (uint64_t *)&unk_100261318);
    if (v5 <= 0x3F)
    {
      v12[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_1001BE6A8(319, (unint64_t *)&qword_100262138, (uint64_t *)&unk_100262140);
      if (v7 <= 0x3F)
      {
        v12[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_1001BE6A8(319, &qword_1002669C0, &qword_1002669C8);
        if (v9 <= 0x3F)
        {
          v12[6] = *(_QWORD *)(v8 - 8) + 64;
          sub_1001BE6A8(319, &qword_1002669D0, (uint64_t *)&unk_1002669D8);
          if (v11 <= 0x3F)
          {
            v12[7] = *(_QWORD *)(v10 - 8) + 64;
            v12[8] = &unk_1001FA3A8;
            swift_updateClassMetadata2(a1, 256, 9, v12, a1 + 80);
          }
        }
      }
    }
  }
}

void sub_1001BE6A8(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_10003C1FC(a3);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1001BE6F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v1);
  strcpy((char *)(v1 + 112), "NITokenService");
  *(_BYTE *)(v1 + 127) = -18;
  v5 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v5);
  *(_QWORD *)(v1 + 128) = WorkItemQueue.__allocating_init(identifier:)(v4);
  v6 = v1 + OBJC_IVAR____TtC13findmylocated14NITokenService_accountStateStream;
  v7 = sub_100037A5C(&qword_100261F00);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v1 + OBJC_IVAR____TtC13findmylocated14NITokenService_cloudKitAccountStateStream;
  v9 = sub_100037A5C((uint64_t *)&unk_100261318);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v1 + OBJC_IVAR____TtC13findmylocated14NITokenService_dataManagerStateStream;
  v11 = sub_100037A5C((uint64_t *)&unk_100262140);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = v1 + OBJC_IVAR____TtC13findmylocated14NITokenService_locationServicesToggleStream;
  v13 = sub_100037A5C(&qword_1002669C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = v1 + OBJC_IVAR____TtC13findmylocated14NITokenService_appDeletionStream;
  v15 = sub_100037A5C((uint64_t *)&unk_1002669D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13findmylocated14NITokenService_tokenRequestActivity) = 0;
  return v1;
}

uint64_t sub_1001BE8B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1002669BC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return swift_task_switch(sub_1001BE26C, v0, 0);
}

uint64_t sub_1001BE90C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.startup()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for NITokenService(0);
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_1001BE970()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1002669B4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000087DC;
  return sub_1001B463C();
}

uint64_t sub_1001BE9B4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for NITokenService(0);
  v1 = sub_100004EA8(&qword_100261000, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA3E8);
  return ActorServiceProtocol.description.getter(v0, v1);
}

uint64_t sub_1001BEA04()
{
  return sub_100004EA8(qword_100266B50, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA3C0);
}

uint64_t sub_1001BEA30()
{
  return sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
}

uint64_t sub_1001BEA5C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100263CEC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10005D184;
  return sub_10010F758(a1);
}

uint64_t sub_1001BEAB0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100263E0C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10005F000;
  return sub_100115A30();
}

uint64_t sub_1001BEAF8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100263D2C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10005F000;
  return sub_10011529C(86400.0);
}

uint64_t sub_1001BEB4C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100263CEC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10005F000;
  return sub_10010F758(a1);
}

uint64_t sub_1001BEBA0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2[6] = a1;
  v2[7] = v1;
  v2[8] = *v1;
  v3 = sub_100037A5C(&qword_100260A48);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260538) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v4);
  v2[11] = swift_task_alloc(v4);
  return swift_task_switch(sub_1001BEC38, v1, 0);
}

uint64_t sub_1001BEC38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = v0[6];
  v2 = v0[11];
  v3 = type metadata accessor for Logger(0);
  v0[12] = sub_100037A9C(v3, (uint64_t)qword_10027B330);
  v4 = sub_10000E37C(v1, v2, &qword_100260538);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[11];
  if (v7)
  {
    v9 = v0[10];
    v10 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(64, -1);
    v22 = v21;
    *(_DWORD *)v10 = 136446466;
    v0[4] = sub_10002BA84(0xD000000000000019, 0x8000000100201B80, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2080;
    sub_10000E37C(v8, v9, &qword_100260538);
    v11 = type metadata accessor for Device(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11);
    v14 = v0[10];
    if ((_DWORD)v13 == 1)
    {
      sub_1000087A0(v0[10], &qword_100260538);
      v15 = 0;
      v16 = 0xE000000000000000;
    }
    else
    {
      v15 = Device.description.getter(v13);
      v16 = v17;
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v11);
    }
    v18 = v0[11];
    v0[5] = sub_10002BA84(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v16);
    sub_1000087A0(v18, &qword_100260538);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s meDevice: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_1000087A0(v0[11], &qword_100260538);
  }

  v19 = (_QWORD *)swift_task_alloc(dword_100261B0C);
  v0[13] = v19;
  *v19 = v0;
  v19[1] = sub_1001BEEE8;
  return sub_100087F94();
}

uint64_t sub_1001BEEE8(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*v2 + 104);
  v5 = *v2;
  *(_QWORD *)(v5 + 112) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1001BF728, *(_QWORD *)(v5 + 56), 0);
  if ((a1 & 1) != 0)
  {
    v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v5 + 120) = v7;
    *v7 = v5;
    v7[1] = sub_1001BEFBC;
    return daemon.getter();
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 80);
    v9 = *(_QWORD *)(v5 + 72);
    swift_task_dealloc(*(_QWORD *)(v5 + 88));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
}

uint64_t sub_1001BEFBC(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 120);
  v5 = *v1;
  *(_QWORD *)(*v1 + 128) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[17] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[18] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[19] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1001BF0B4;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001BF0B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 136);
  v3[20] = a1;
  v3[21] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[7];
    v6 = sub_1001BF944;
  }
  else
  {
    v7 = v3[7];
    swift_release(v3[16]);
    v6 = sub_1001BF130;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001BF130()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint8_t *v6;
  uint64_t **v7;
  uint8_t *v9;
  uint64_t **v10;

  v1 = sub_1001C30A4();
  v2 = v1;
  v3 = Logger.logObject.getter(v1);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  if ((v2 & 1) != 0)
  {
    if (v5)
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Eligible to generate token and is finding capable. Checking if we need to generate tokens.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = (uint64_t **)swift_task_alloc(dword_100263CEC);
    v0[30] = (uint64_t)v7;
    *v7 = v0;
    v7[1] = (uint64_t *)sub_1001BF54C;
    return sub_10010F758(v0[9]);
  }
  else
  {
    if (v5)
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Eligible to generate token, but not finding capable. Revoking all tokens.", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = (uint64_t **)swift_task_alloc(async function pointer to daemon.getter[1]);
    v0[22] = (uint64_t)v10;
    *v10 = v0;
    v10[1] = (uint64_t *)sub_1001BF28C;
    return daemon.getter();
  }
}

uint64_t sub_1001BF28C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 176);
  v5 = *v1;
  *(_QWORD *)(*v1 + 184) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[24] = v6;
  v7 = type metadata accessor for CloudStorageService();
  v8 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_1001BF334;
  return ActorServiceDaemon.getService<A>()(v3[18], v7, v3[19], v8);
}

uint64_t sub_1001BF334(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  v3[25] = a1;
  v3[26] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[7];
    v6 = sub_1001BFB68;
  }
  else
  {
    v7 = v3[7];
    swift_release(v3[23]);
    v6 = sub_1001BF3B0;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001BF3B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 160);
  sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 216) = v3;
  v4 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  *(_OWORD *)(v3 + 32) = v4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 224) = v5;
  *v5 = v0;
  v5[1] = sub_1001BF480;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1001BF480()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 56);
    v5 = sub_1001BFD98;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 56);
    swift_task_dealloc(*(_QWORD *)(v2 + 216));
    v5 = sub_1001BF4F4;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001BF4F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BF54C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  sub_1000087A0(v1, &qword_100260A48);
  return swift_task_switch(sub_1001BF5B8, v2, 0);
}

uint64_t sub_1001BF5B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 248) = v3;
  v6 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v6;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 256) = v4;
  *v4 = v0;
  v4[1] = sub_1001BF67C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v4, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v6, v2, &unk_100266CC0, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1001BF67C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001BF6DC, v2, 0);
}

uint64_t sub_1001BF6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 160));
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BF728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 112);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v13 = v12;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000019, 0x8000000100201B80, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 14, v5 + 22);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}@", (uint8_t *)v5, 0x16u);
    v8 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BF944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 128));
  v1 = *(_QWORD *)(v0 + 168);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v13 = v12;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000019, 0x8000000100201B80, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 14, v5 + 22);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}@", (uint8_t *)v5, 0x16u);
    v8 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BFB68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 184));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 208);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v13 = swift_slowAlloc(32, -1);
    v14 = v13;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000019, 0x8000000100201B80, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain(v2);
    v8 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 24) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 14, v6 + 22);
    *v7 = v8;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}@", (uint8_t *)v6, 0x16u);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v10 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BFD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(v2);
  swift_task_dealloc(v1);
  v3 = *(_QWORD *)(v0 + 232);
  swift_errorRetain(v3);
  v4 = swift_errorRetain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    v14 = swift_slowAlloc(32, -1);
    v15 = v14;
    *(_DWORD *)v7 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000019, 0x8000000100201B80, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2114;
    swift_errorRetain(v3);
    v9 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(_QWORD *)(v0 + 24) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v7 + 14, v7 + 22);
    *v8 = v9;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s error %{public}@", (uint8_t *)v7, 0x16u);
    v10 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BFFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v6[15] = a5;
  v6[16] = a6;
  v6[13] = a3;
  v6[14] = a4;
  v6[12] = a2;
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[17] = swift_task_alloc(v8);
  v6[18] = swift_task_alloc(v8);
  v9 = *(_QWORD *)(sub_100037A5C(&qword_100260F78) - 8);
  v6[19] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v6[20] = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[21] = swift_task_alloc(v11);
  v6[22] = swift_task_alloc(v11);
  v12 = sub_100037A5C(&qword_100260F80);
  v6[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FriendSharedSecretsRecord(0);
  v6[24] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[25] = v14;
  v6[26] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v6[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Handle(0);
  v6[28] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v6[29] = v17;
  v6[30] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v6[31] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v6[32] = v19;
  v20 = *(_QWORD *)(v19 + 64);
  v6[33] = v20;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[34] = swift_task_alloc(v21);
  v6[35] = swift_task_alloc(v21);
  v22 = type metadata accessor for Friend(0);
  v6[36] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v6[37] = v23;
  v24 = *(_QWORD *)(v23 + 64);
  v6[38] = v24;
  v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[39] = swift_task_alloc(v25);
  v6[40] = swift_task_alloc(v25);
  v6[41] = swift_task_alloc(v25);
  v6[42] = swift_task_alloc(v25);
  v6[43] = swift_task_alloc(v25);
  return swift_task_switch(sub_1001C01BC, a3, 0);
}

uint64_t sub_1001C01BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 352) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.follower(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 360) = v7;
  *v7 = v0;
  v7[1] = sub_1001C028C;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_1001C028C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1001C02F4, v4, 0);
}

uint64_t sub_1001C02F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 376) = v2;
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v0 + 296);
    *(_DWORD *)(v0 + 472) = *(_DWORD *)(v4 + 80);
    *(_QWORD *)(v0 + 384) = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v0 + 392) = *(_QWORD *)(v4 + 16);
    while (1)
    {
      *(_QWORD *)(v0 + 400) = v3;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 392))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 368)+ ((*(unsigned __int8 *)(v0 + 472) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 472))+ *(_QWORD *)(v0 + 384) * v3, *(_QWORD *)(v0 + 288));
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 392);
      v7 = *(_QWORD *)(v0 + 336);
      v6 = *(_QWORD *)(v0 + 344);
      v8 = *(_QWORD *)(v0 + 288);
      v9 = type metadata accessor for Logger(0);
      *(_QWORD *)(v0 + 408) = sub_100037A9C(v9, (uint64_t)qword_10027B330);
      v10 = v5(v7, v6, v8);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      v13 = os_log_type_enabled(v11, v12);
      v14 = *(_QWORD *)(v0 + 336);
      v15 = *(_QWORD *)(v0 + 288);
      v16 = *(_QWORD *)(v0 + 296);
      if (v13)
      {
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(32, -1);
        v69 = v18;
        *(_DWORD *)v17 = 141558275;
        *(_QWORD *)(v17 + 4) = 1752392040;
        *(_WORD *)(v17 + 12) = 2081;
        v19 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
        v20 = dispatch thunk of CustomStringConvertible.description.getter(v15, v19);
        v22 = v21;
        *(_QWORD *)(v17 + 14) = sub_10002BA84(v20, v21, &v69);
        swift_bridgeObjectRelease(v22);
        v23 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
        v23(v14, v15);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Revoking token from %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);
      }
      else
      {
        v23 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
        v23(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 288));
      }

      *(_QWORD *)(v0 + 416) = v23;
      v24 = *(_QWORD *)(v0 + 248);
      v25 = *(_QWORD *)(v0 + 256);
      v27 = *(_QWORD *)(v0 + 232);
      v26 = *(_QWORD *)(v0 + 240);
      v29 = *(_QWORD *)(v0 + 216);
      v28 = *(_QWORD *)(v0 + 224);
      v31 = Friend.handle.getter(v30);
      Handle.peerID.getter(v31);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
      v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v29, 1, v24);
      v33 = *(_QWORD *)(v0 + 216);
      if (v32 != 1)
        break;
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 392);
      v35 = *(_QWORD *)(v0 + 344);
      v36 = *(_QWORD *)(v0 + 328);
      v37 = *(_QWORD *)(v0 + 288);
      sub_1000087A0(*(_QWORD *)(v0 + 216), (uint64_t *)&unk_1002675F0);
      v38 = v34(v36, v35, v37);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter(v39);
      v41 = os_log_type_enabled(v39, v40);
      v42 = *(_QWORD *)(v0 + 344);
      v43 = *(_QWORD *)(v0 + 328);
      v44 = *(_QWORD *)(v0 + 288);
      if (v41)
      {
        v45 = swift_slowAlloc(32, -1);
        v46 = swift_slowAlloc(64, -1);
        v69 = v46;
        *(_DWORD *)v45 = 136446723;
        *(_QWORD *)(v45 + 4) = sub_10002BA84(0xD000000000000019, 0x8000000100201B80, &v69);
        *(_WORD *)(v45 + 12) = 2160;
        *(_QWORD *)(v45 + 14) = 1752392040;
        *(_WORD *)(v45 + 22) = 2081;
        v47 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
        v48 = dispatch thunk of CustomStringConvertible.description.getter(v44, v47);
        v50 = v49;
        *(_QWORD *)(v45 + 24) = sub_10002BA84(v48, v49, &v69);
        swift_bridgeObjectRelease(v50);
        v23(v43, v44);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "%{public}s No peerID for follower %{private,mask.hash}s", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);

      }
      else
      {

        v23(v43, v44);
      }
      v23(v42, v44);
      v3 = *(_QWORD *)(v0 + 400) + 1;
      if (v3 == *(_QWORD *)(v0 + 376))
      {
        v1 = *(_QWORD *)(v0 + 368);
        goto LABEL_15;
      }
    }
    v51 = *(_QWORD *)(v0 + 280);
    v52 = *(_QWORD *)(v0 + 248);
    v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 256) + 32);
    *(_QWORD *)(v0 + 424) = v53;
    v53(v51, v33, v52);
    return swift_task_switch(sub_1001C0854, 0, 0);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(v1);
    v55 = *(_QWORD *)(v0 + 336);
    v57 = *(_QWORD *)(v0 + 320);
    v56 = *(_QWORD *)(v0 + 328);
    v58 = *(_QWORD *)(v0 + 312);
    v60 = *(_QWORD *)(v0 + 272);
    v59 = *(_QWORD *)(v0 + 280);
    v61 = *(_QWORD *)(v0 + 240);
    v63 = *(_QWORD *)(v0 + 208);
    v62 = *(_QWORD *)(v0 + 216);
    v64 = *(_QWORD *)(v0 + 184);
    v65 = *(_QWORD *)(v0 + 176);
    v66 = *(_QWORD *)(v0 + 168);
    v67 = *(_QWORD *)(v0 + 144);
    v68 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 344));
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001C0854()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_1002670BC);
  v0[54] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1001C08AC;
  return sub_1001CA618(v0[23], v0[35]);
}

uint64_t sub_1001C08AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 432);
  *(_QWORD *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001C10D4;
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 120);
    v4 = sub_1001C0914;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_1001C0914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t (*v25)();
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v1 = *(_QWORD *)(v0 + 184);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 200) + 48))(v1, 1, *(_QWORD *)(v0 + 192)) == 1)
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 392);
    v3 = *(_QWORD *)(v0 + 344);
    v4 = *(_QWORD *)(v0 + 320);
    v5 = *(_QWORD *)(v0 + 288);
    sub_1000087A0(v1, &qword_100260F80);
    v6 = v2(v4, v3, v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v11 = *(_QWORD *)(v0 + 344);
    v12 = *(_QWORD *)(v0 + 320);
    v13 = *(_QWORD *)(v0 + 288);
    if (v9)
    {
      v91 = *(_QWORD *)(v0 + 344);
      v14 = swift_slowAlloc(32, -1);
      v89 = swift_slowAlloc(64, -1);
      v93 = v89;
      *(_DWORD *)v14 = 136446723;
      *(_QWORD *)(v0 + 72) = sub_10002BA84(0xD000000000000019, 0x8000000100201B80, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2160;
      *(_QWORD *)(v0 + 80) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v14 + 14, v14 + 22);
      *(_WORD *)(v14 + 22) = 2081;
      v15 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
      v18 = v17;
      *(_QWORD *)(v0 + 88) = sub_10002BA84(v16, v17, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v14 + 24, v14 + 32);
      swift_bridgeObjectRelease(v18);
      v10(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Missing friendSharedSecretsRecord for %{private,mask.hash}s.", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      v19 = v91;
    }
    else
    {

      v10(v12, v13);
      v19 = v11;
    }
    v10(v19, v13);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 248));
    v27 = *(_QWORD *)(v0 + 400) + 1;
    if (v27 == *(_QWORD *)(v0 + 376))
    {
LABEL_7:
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 368));
      v28 = *(_QWORD *)(v0 + 336);
      v30 = *(_QWORD *)(v0 + 320);
      v29 = *(_QWORD *)(v0 + 328);
      v31 = *(_QWORD *)(v0 + 312);
      v33 = *(_QWORD *)(v0 + 272);
      v32 = *(_QWORD *)(v0 + 280);
      v34 = *(_QWORD *)(v0 + 240);
      v36 = *(_QWORD *)(v0 + 208);
      v35 = *(_QWORD *)(v0 + 216);
      v86 = *(_QWORD *)(v0 + 184);
      v87 = *(_QWORD *)(v0 + 176);
      v88 = *(_QWORD *)(v0 + 168);
      v90 = *(_QWORD *)(v0 + 144);
      v92 = *(_QWORD *)(v0 + 136);
      swift_task_dealloc(*(_QWORD *)(v0 + 344));
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v88);
      swift_task_dealloc(v90);
      swift_task_dealloc(v92);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    while (1)
    {
      *(_QWORD *)(v0 + 400) = v27;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 392))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 368)+ ((*(unsigned __int8 *)(v0 + 472) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 472))+ *(_QWORD *)(v0 + 384) * v27, *(_QWORD *)(v0 + 288));
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 392);
      v46 = *(_QWORD *)(v0 + 336);
      v45 = *(_QWORD *)(v0 + 344);
      v47 = *(_QWORD *)(v0 + 288);
      v48 = type metadata accessor for Logger(0);
      *(_QWORD *)(v0 + 408) = sub_100037A9C(v48, (uint64_t)qword_10027B330);
      v49 = v44(v46, v45, v47);
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.default.getter(v50);
      v52 = os_log_type_enabled(v50, v51);
      v53 = *(_QWORD *)(v0 + 336);
      v54 = *(_QWORD *)(v0 + 288);
      v55 = *(_QWORD *)(v0 + 296);
      if (v52)
      {
        v56 = swift_slowAlloc(22, -1);
        v57 = swift_slowAlloc(32, -1);
        v93 = v57;
        *(_DWORD *)v56 = 141558275;
        *(_QWORD *)(v56 + 4) = 1752392040;
        *(_WORD *)(v56 + 12) = 2081;
        v58 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
        v59 = dispatch thunk of CustomStringConvertible.description.getter(v54, v58);
        v61 = v60;
        *(_QWORD *)(v56 + 14) = sub_10002BA84(v59, v60, &v93);
        swift_bridgeObjectRelease(v61);
        v62 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
        v62(v53, v54);
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Revoking token from %{private,mask.hash}s", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v56, -1, -1);
      }
      else
      {
        v62 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
        v62(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 288));
      }

      *(_QWORD *)(v0 + 416) = v62;
      v63 = *(_QWORD *)(v0 + 248);
      v64 = *(_QWORD *)(v0 + 256);
      v66 = *(_QWORD *)(v0 + 232);
      v65 = *(_QWORD *)(v0 + 240);
      v68 = *(_QWORD *)(v0 + 216);
      v67 = *(_QWORD *)(v0 + 224);
      v70 = Friend.handle.getter(v69);
      Handle.peerID.getter(v70);
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v68, 1, v63) != 1)
        break;
      v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 392);
      v72 = *(_QWORD *)(v0 + 344);
      v73 = *(_QWORD *)(v0 + 328);
      v74 = *(_QWORD *)(v0 + 288);
      sub_1000087A0(*(_QWORD *)(v0 + 216), (uint64_t *)&unk_1002675F0);
      v75 = v71(v73, v72, v74);
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.error.getter(v76);
      v78 = os_log_type_enabled(v76, v77);
      v79 = *(_QWORD *)(v0 + 344);
      v80 = *(_QWORD *)(v0 + 328);
      v81 = *(_QWORD *)(v0 + 288);
      if (v78)
      {
        v38 = swift_slowAlloc(32, -1);
        v39 = swift_slowAlloc(64, -1);
        v93 = v39;
        *(_DWORD *)v38 = 136446723;
        *(_QWORD *)(v38 + 4) = sub_10002BA84(0xD000000000000019, 0x8000000100201B80, &v93);
        *(_WORD *)(v38 + 12) = 2160;
        *(_QWORD *)(v38 + 14) = 1752392040;
        *(_WORD *)(v38 + 22) = 2081;
        v40 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
        v41 = dispatch thunk of CustomStringConvertible.description.getter(v81, v40);
        v43 = v42;
        *(_QWORD *)(v38 + 24) = sub_10002BA84(v41, v42, &v93);
        swift_bridgeObjectRelease(v43);
        v62(v80, v81);
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "%{public}s No peerID for follower %{private,mask.hash}s", (uint8_t *)v38, 0x20u);
        swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

        v62(v80, v81);
      }
      v62(v79, v81);
      v27 = *(_QWORD *)(v0 + 400) + 1;
      if (v27 == *(_QWORD *)(v0 + 376))
        goto LABEL_7;
    }
    v82 = *(_QWORD *)(v0 + 280);
    v83 = *(_QWORD *)(v0 + 248);
    v84 = *(_QWORD *)(v0 + 216);
    v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 256) + 32);
    *(_QWORD *)(v0 + 424) = v85;
    v85(v82, v84, v83);
    v25 = sub_1001C0854;
    v26 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 280);
    v21 = *(_QWORD *)(v0 + 208);
    v22 = *(_QWORD *)(v0 + 128);
    v23 = *(_QWORD *)(v0 + 112);
    sub_1000321F4(v1, v21, type metadata accessor for FriendSharedSecretsRecord);
    v24 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 448) = v24;
    v24[2] = v21;
    v24[3] = v20;
    v24[4] = v22;
    v25 = sub_1001C1238;
    v26 = v23;
  }
  return swift_task_switch(v25, v26, 0);
}

uint64_t sub_1001C10D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 368));
  return swift_task_switch(sub_1001C1114, v1, 0);
}

uint64_t sub_1001C1114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(_QWORD, _QWORD))(v0 + 416))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 288));
  v2 = *(_QWORD *)(v0 + 336);
  v1 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(v7, *(_QWORD *)(v0 + 248));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C1238()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
     + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                  + 1));
  v0[57] = v1;
  *v1 = v0;
  v1[1] = sub_1001C12AC;
  return ((uint64_t (*)(_QWORD, void *, _QWORD))v3)(v0[22], &unk_100266CE0, v0[56]);
}

uint64_t sub_1001C12AC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[14];
    v5 = sub_1001C1BA0;
  }
  else
  {
    v6 = v2[15];
    swift_task_dealloc(v2[56]);
    v5 = sub_1001C1320;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001C1320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125[2];

  v123 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 424);
  v1 = *(unsigned __int8 *)(v0 + 472);
  v104 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 312);
  v107 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 392);
  v109 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 288);
  v120 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 272);
  v105 = v4;
  v106 = v3;
  v5 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 144);
  v100 = *(_QWORD *)(v0 + 280);
  v101 = *(_QWORD *)(v0 + 152);
  v116 = *(_QWORD *)(v0 + 128);
  v118 = *(_QWORD *)(v0 + 136);
  v102 = *(_QWORD *)(v0 + 264) + v1;
  v103 = *(_QWORD *)(v0 + 160);
  v113 = v9;
  v114 = *(_QWORD *)(v0 + 120);
  v111 = *(_QWORD *)(v0 + 112);
  v112 = type metadata accessor for TaskPriority(0);
  v108 = *(_QWORD *)(v112 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56))(v9, 1, 1, v112);
  sub_10000E37C(v8, v7, &qword_100260F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v100, v6);
  v107(v2, v104, v3);
  v10 = *(unsigned __int8 *)(v101 + 80);
  v11 = (v10 + 40) & ~v10;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = (v103 + v12 + v11) & ~v12;
  v14 = (v102 + v13) & ~v1;
  v15 = v1 | v10 | v12 | 7;
  v16 = (v109 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = (_QWORD *)swift_allocObject(&unk_100257818, v17 + 8, v15);
  v18[2] = 0;
  v110 = v18 + 2;
  v18[3] = 0;
  v18[4] = v111;
  sub_10000EF6C(v7, (uint64_t)v18 + v11, &qword_100260F78);
  v123((char *)v18 + v13, v105, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v120 + 32))((char *)v18 + v14, v2, v106);
  *(_QWORD *)((char *)v18 + v16) = v114;
  *(_QWORD *)((char *)v18 + v17) = v116;
  sub_10000E37C(v113, v118, (uint64_t *)&unk_100265180);
  LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v118, 1, v112);
  swift_retain(v111);
  swift_retain(v114);
  v20 = *(_QWORD *)(v0 + 136);
  if ((_DWORD)v6 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 136), (uint64_t *)&unk_100265180);
    v21 = 12544;
  }
  else
  {
    v22 = TaskPriority.rawValue.getter(v19);
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v20, v112);
    v21 = v22 | 0x3100;
  }
  v23 = *v110;
  if (*v110)
  {
    v24 = v18[3];
    v25 = v21;
    ObjectType = swift_getObjectType(*v110);
    swift_unknownObjectRetain(v23);
    v27 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v24);
    v29 = v28;
    swift_unknownObjectRelease(v23);
    v21 = v25;
  }
  else
  {
    v27 = 0;
    v29 = 0;
  }
  v30 = **(_QWORD **)(v0 + 96);
  v31 = v29 | v27;
  if (v29 | v27)
  {
    v31 = v0 + 16;
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = v27;
    *(_QWORD *)(v0 + 40) = v29;
  }
  v32 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
  v33 = *(_QWORD *)(v0 + 344);
  v34 = *(_QWORD *)(v0 + 288);
  v121 = *(_QWORD *)(v0 + 280);
  v36 = *(_QWORD *)(v0 + 248);
  v35 = *(_QWORD *)(v0 + 256);
  v37 = *(_QWORD *)(v0 + 208);
  v38 = *(_QWORD *)(v0 + 176);
  v39 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 48) = 1;
  *(_QWORD *)(v0 + 56) = v31;
  *(_QWORD *)(v0 + 64) = v30;
  v40 = swift_task_create(v21, v0 + 48, (char *)&type metadata for () + 8, &unk_100266CF0, v18);
  swift_release(v40);
  sub_1000087A0(v39, (uint64_t *)&unk_100265180);
  sub_1000087A0(v38, &qword_100260F78);
  v32(v33, v34);
  sub_100024990(v37, type metadata accessor for FriendSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v121, v36);
  v41 = *(_QWORD *)(v0 + 400) + 1;
  if (v41 == *(_QWORD *)(v0 + 376))
  {
LABEL_10:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 368));
    v42 = *(_QWORD *)(v0 + 336);
    v44 = *(_QWORD *)(v0 + 320);
    v43 = *(_QWORD *)(v0 + 328);
    v45 = *(_QWORD *)(v0 + 312);
    v47 = *(_QWORD *)(v0 + 272);
    v46 = *(_QWORD *)(v0 + 280);
    v48 = *(_QWORD *)(v0 + 240);
    v50 = *(_QWORD *)(v0 + 208);
    v49 = *(_QWORD *)(v0 + 216);
    v115 = *(_QWORD *)(v0 + 184);
    v117 = *(_QWORD *)(v0 + 176);
    v119 = *(_QWORD *)(v0 + 168);
    v122 = *(_QWORD *)(v0 + 144);
    v124 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 344));
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v122);
    swift_task_dealloc(v124);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 400) = v41;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 392))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 368)+ ((*(unsigned __int8 *)(v0 + 472) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 472))+ *(_QWORD *)(v0 + 384) * v41, *(_QWORD *)(v0 + 288));
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 392);
      v60 = *(_QWORD *)(v0 + 336);
      v59 = *(_QWORD *)(v0 + 344);
      v61 = *(_QWORD *)(v0 + 288);
      v62 = type metadata accessor for Logger(0);
      *(_QWORD *)(v0 + 408) = sub_100037A9C(v62, (uint64_t)qword_10027B330);
      v63 = v58(v60, v59, v61);
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.default.getter(v64);
      v66 = os_log_type_enabled(v64, v65);
      v67 = *(_QWORD *)(v0 + 336);
      v68 = *(_QWORD *)(v0 + 288);
      v69 = *(_QWORD *)(v0 + 296);
      if (v66)
      {
        v70 = swift_slowAlloc(22, -1);
        v71 = swift_slowAlloc(32, -1);
        v125[0] = v71;
        *(_DWORD *)v70 = 141558275;
        *(_QWORD *)(v70 + 4) = 1752392040;
        *(_WORD *)(v70 + 12) = 2081;
        v72 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
        v73 = dispatch thunk of CustomStringConvertible.description.getter(v68, v72);
        v75 = v74;
        *(_QWORD *)(v70 + 14) = sub_10002BA84(v73, v74, v125);
        swift_bridgeObjectRelease(v75);
        v76 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
        v76(v67, v68);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Revoking token from %{private,mask.hash}s", (uint8_t *)v70, 0x16u);
        swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v70, -1, -1);
      }
      else
      {
        v76 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
        v76(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 288));
      }

      *(_QWORD *)(v0 + 416) = v76;
      v77 = *(_QWORD *)(v0 + 248);
      v78 = *(_QWORD *)(v0 + 256);
      v80 = *(_QWORD *)(v0 + 232);
      v79 = *(_QWORD *)(v0 + 240);
      v82 = *(_QWORD *)(v0 + 216);
      v81 = *(_QWORD *)(v0 + 224);
      v84 = Friend.handle.getter(v83);
      Handle.peerID.getter(v84);
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v82, 1, v77) != 1)
        break;
      v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 392);
      v86 = *(_QWORD *)(v0 + 344);
      v87 = *(_QWORD *)(v0 + 328);
      v88 = *(_QWORD *)(v0 + 288);
      sub_1000087A0(*(_QWORD *)(v0 + 216), (uint64_t *)&unk_1002675F0);
      v89 = v85(v87, v86, v88);
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.error.getter(v90);
      v92 = os_log_type_enabled(v90, v91);
      v93 = *(_QWORD *)(v0 + 344);
      v94 = *(_QWORD *)(v0 + 328);
      v95 = *(_QWORD *)(v0 + 288);
      if (v92)
      {
        v52 = swift_slowAlloc(32, -1);
        v53 = swift_slowAlloc(64, -1);
        v125[0] = v53;
        *(_DWORD *)v52 = 136446723;
        *(_QWORD *)(v52 + 4) = sub_10002BA84(0xD000000000000019, 0x8000000100201B80, v125);
        *(_WORD *)(v52 + 12) = 2160;
        *(_QWORD *)(v52 + 14) = 1752392040;
        *(_WORD *)(v52 + 22) = 2081;
        v54 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
        v55 = dispatch thunk of CustomStringConvertible.description.getter(v95, v54);
        v57 = v56;
        *(_QWORD *)(v52 + 24) = sub_10002BA84(v55, v56, v125);
        swift_bridgeObjectRelease(v57);
        v76(v94, v95);
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "%{public}s No peerID for follower %{private,mask.hash}s", (uint8_t *)v52, 0x20u);
        swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v52, -1, -1);

      }
      else
      {

        v76(v94, v95);
      }
      v76(v93, v95);
      v41 = *(_QWORD *)(v0 + 400) + 1;
      if (v41 == *(_QWORD *)(v0 + 376))
        goto LABEL_10;
    }
    v96 = *(_QWORD *)(v0 + 280);
    v97 = *(_QWORD *)(v0 + 248);
    v98 = *(_QWORD *)(v0 + 216);
    v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 256) + 32);
    *(_QWORD *)(v0 + 424) = v99;
    v99(v96, v98, v97);
    return swift_task_switch(sub_1001C0854, 0, 0);
  }
}

uint64_t sub_1001C1BA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[56];
  v2 = v0[15];
  swift_bridgeObjectRelease(v0[46]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001C1BEC, v2, 0);
}

uint64_t sub_1001C1BEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 208);
  (*(void (**)(_QWORD, _QWORD))(v0 + 416))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 288));
  sub_100024990(v1, type metadata accessor for FriendSharedSecretsRecord);
  v3 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 168);
  v16 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(v8, *(_QWORD *)(v0 + 248));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C1D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_1001C1D40, 0, 0);
}

uint64_t sub_1001C1D40()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)[1]);
  *(_QWORD *)(v0 + 56) = v2;
  v3 = type metadata accessor for FriendSharedSecretsRecord(0);
  v4 = sub_100004EA8(&qword_100260FB8, type metadata accessor for FriendSharedSecretsRecord, (uint64_t)&unk_1001F5398);
  *v2 = v0;
  v2[1] = sub_1001B1B28;
  return CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)(*(_QWORD *)(v0 + 24), sub_1001C406C, v1, v3, v4);
}

uint64_t sub_1001C1DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v8 = type metadata accessor for Logger(0);
  sub_100037A9C(v8, (uint64_t)qword_10027B330);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(12, -1);
    v26 = a1;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    v28 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v4, v15);
    v18 = v17;
    v27 = sub_10002BA84(v16, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Removing incomingSharedSecret for %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    v19 = v13;
    a1 = v26;
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  v20 = type metadata accessor for FriendSharedSecretsRecord(0);
  v21 = a1 + *(int *)(v20 + 32);
  sub_100037AF8(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
  *(_OWORD *)v21 = xmmword_1001F48A0;
  v22 = a1 + *(int *)(v20 + 36);
  sub_1000087A0(v22, (uint64_t *)&unk_100262930);
  v23 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
}

uint64_t sub_1001C206C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  v9 = type metadata accessor for Handle(0);
  v8[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[11] = v10;
  v8[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Friend(0);
  v8[13] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[14] = v12;
  v8[15] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v8[16] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[17] = v14;
  v8[18] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CloudKitCoordinator.Database(0);
  v8[19] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v8[20] = v16;
  v8[21] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001C214C, 0, 0);
}

uint64_t sub_1001C214C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[20] + 104))(v0[21], enum case for CloudKitCoordinator.Database.private(_:), v0[19]);
  return swift_task_switch(sub_1001C21A0, v1, 0);
}

uint64_t sub_1001C21A0()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
     + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                  + 1));
  v0[22] = v1;
  *v1 = v0;
  v1[1] = sub_1001C220C;
  return ((uint64_t (*)(_QWORD, _QWORD))v3)(v0[6], v0[21]);
}

uint64_t sub_1001C220C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[5];
    v5 = sub_1001C2284;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[20] + 8))(v2[21], v2[19]);
    v5 = sub_1001C2328;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001C2284()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD))(v0[20] + 8))(v0[21], v0[19]);
  return swift_task_switch(sub_1001C22C8, 0, 0);
}

uint64_t sub_1001C22C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C2328()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  os_log_type_t type;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = v0[17];
  v1 = v0[18];
  v4 = v0[15];
  v3 = v0[16];
  v5 = v0[13];
  v6 = v0[14];
  v8 = v0[7];
  v7 = v0[8];
  v9 = type metadata accessor for Logger(0);
  sub_100037A9C(v9, (uint64_t)qword_10027B330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v8, v3);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v7, v5);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v15 = v0[17];
  v14 = v0[18];
  v16 = v0[15];
  v17 = v0[16];
  v18 = v0[13];
  v19 = v0[14];
  if (v13)
  {
    v33 = v0[15];
    v20 = v0[12];
    v35 = v0[11];
    v36 = v0[10];
    v37 = v0[13];
    v21 = swift_slowAlloc(32, -1);
    v38 = swift_slowAlloc(64, -1);
    v39 = v38;
    *(_DWORD *)v21 = 136446723;
    v22 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v17, v22);
    type = v12;
    v25 = v24;
    v0[2] = sub_10002BA84(v23, v24, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v17);
    *(_WORD *)(v21 + 12) = 2160;
    v0[3] = 1752392040;
    v26 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v21 + 14, v21 + 22);
    *(_WORD *)(v21 + 22) = 2081;
    v27 = Friend.handle.getter(v26);
    v28 = Handle.identifier.getter(v27);
    v30 = v29;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v20, v36);
    v0[4] = sub_10002BA84(v28, v30, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v33, v37);
    _os_log_impl((void *)&_mh_execute_header, v11, type, "Successfully removed incomingSharedSecret for %{public}s %{private,mask.hash}s\")", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v15 + 8))(v0[18], v0[16]);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
  }

  v31 = (_QWORD *)swift_task_alloc(dword_100266904);
  v0[24] = v31;
  *v31 = v0;
  v31[1] = sub_1001C262C;
  return sub_1001AFC78(v0[8]);
}

uint64_t sub_1001C262C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v1 = *(_QWORD **)v0;
  v7 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  v2 = v1[21];
  v3 = v1[18];
  v4 = v1[15];
  v5 = v1[12];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v7[1])();
}

uint64_t sub_1001C26A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[12] = swift_task_alloc(v6);
  v4[13] = swift_task_alloc(v6);
  v7 = type metadata accessor for Friend(0);
  v4[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[15] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v4[16] = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v10);
  v4[18] = swift_task_alloc(v10);
  v4[19] = swift_task_alloc(v10);
  return swift_task_switch(sub_1001C2760, a3, 0);
}

uint64_t sub_1001C2760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 160) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.follower(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 168) = v7;
  *v7 = v0;
  v7[1] = sub_1001C2830;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_1001C2830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1001C2898, v4, 0);
}

uint64_t sub_1001C2898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v55)(_QWORD);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 120);
    v4 = *(unsigned __int8 *)(v3 + 80);
    v5 = v1 + ((v4 + 32) & ~v4);
    v58 = ((v4 + 40) & ~v4) + *(_QWORD *)(v0 + 128);
    v59 = (v4 + 40) & ~v4;
    v57 = v4 | 7;
    v56 = *(_QWORD *)(v3 + 72);
    v6 = *(void (**)(_QWORD))(v3 + 16);
    v55 = v6;
    v60 = v3;
    while (1)
    {
      v63 = v5;
      v64 = v2;
      v6(*(_QWORD *)(v0 + 152));
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v11 = *(_QWORD *)(v0 + 144);
      v12 = *(_QWORD *)(v0 + 152);
      v13 = *(_QWORD *)(v0 + 112);
      v14 = type metadata accessor for Logger(0);
      sub_100037A9C(v14, (uint64_t)qword_10027B330);
      v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v11, v12, v13);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter(v16);
      v18 = os_log_type_enabled(v16, v17);
      v19 = *(_QWORD *)(v0 + 144);
      v20 = *(_QWORD *)(v0 + 112);
      if (v18)
      {
        v21 = swift_slowAlloc(22, -1);
        v22 = swift_slowAlloc(32, -1);
        v65 = v22;
        *(_DWORD *)v21 = 141558275;
        *(_QWORD *)(v21 + 4) = 1752392040;
        *(_WORD *)(v21 + 12) = 2081;
        v23 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
        v24 = dispatch thunk of CustomStringConvertible.description.getter(v20, v23);
        v26 = v25;
        *(_QWORD *)(v21 + 14) = sub_10002BA84(v24, v25, &v65);
        swift_bridgeObjectRelease(v26);
        v62 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
        v62(v19, v20);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Generate token for %{private,mask.hash}s", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        swift_slowDealloc(v21, -1, -1);
      }
      else
      {
        v62 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
        v62(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 112));
      }

      v27 = v3;
      v28 = *(_QWORD *)(v0 + 152);
      v29 = *(_QWORD *)(v0 + 136);
      v31 = *(_QWORD *)(v0 + 104);
      v30 = *(_QWORD *)(v0 + 112);
      v32 = *(_QWORD *)(v0 + 88);
      v61 = *(_QWORD *)(v0 + 96);
      v33 = type metadata accessor for TaskPriority(0);
      v34 = *(_QWORD *)(v33 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v31, 1, 1, v33);
      ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v29, v28, v30);
      v35 = (_QWORD *)swift_allocObject(&unk_1002577C8, v58, v57);
      v35[2] = 0;
      v36 = v35 + 2;
      v35[3] = 0;
      v35[4] = v32;
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))((char *)v35 + v59, v29, v30);
      sub_10000E37C(v31, v61, (uint64_t *)&unk_100265180);
      LODWORD(v29) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v61, 1, v33);
      swift_retain(v32);
      v38 = *(_QWORD *)(v0 + 96);
      if ((_DWORD)v29 == 1)
      {
        sub_1000087A0(*(_QWORD *)(v0 + 96), (uint64_t *)&unk_100265180);
        v39 = 0;
        v40 = *v36;
        if (!*v36)
          goto LABEL_13;
      }
      else
      {
        v46 = TaskPriority.rawValue.getter(v37);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v38, v33);
        v39 = v46;
        v40 = *v36;
        if (!*v36)
        {
LABEL_13:
          v43 = 0;
          v45 = 0;
          goto LABEL_14;
        }
      }
      v41 = v35[3];
      ObjectType = swift_getObjectType(v40);
      swift_unknownObjectRetain(v40);
      v43 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v41);
      v45 = v44;
      swift_unknownObjectRelease(v40);
LABEL_14:
      v6 = v55;
      v47 = **(_QWORD **)(v0 + 72);
      v48 = swift_allocObject(&unk_1002577F0, 32, 7);
      *(_QWORD *)(v48 + 16) = &unk_100266CD0;
      *(_QWORD *)(v48 + 24) = v35;
      v49 = v45 | v43;
      if (v45 | v43)
      {
        v49 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v43;
        *(_QWORD *)(v0 + 40) = v45;
      }
      v7 = *(_QWORD *)(v0 + 152);
      v9 = *(_QWORD *)(v0 + 104);
      v8 = *(_QWORD *)(v0 + 112);
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v49;
      *(_QWORD *)(v0 + 64) = v47;
      v10 = swift_task_create(v39 | 0x3100, v0 + 48, (char *)&type metadata for () + 8, &unk_100260180, v48);
      swift_release(v10);
      sub_1000087A0(v9, (uint64_t *)&unk_100265180);
      v62(v7, v8);
      v5 = v63 + v56;
      v2 = v64 - 1;
      v3 = v60;
      if (v64 == 1)
      {
        v1 = *(_QWORD *)(v0 + 176);
        break;
      }
    }
  }
  swift_bridgeObjectRelease(v1);
  v50 = *(_QWORD *)(v0 + 144);
  v51 = *(_QWORD *)(v0 + 136);
  v53 = *(_QWORD *)(v0 + 96);
  v52 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C2D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_100261AE4);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_10003BF7C;
  return sub_10008862C(a5);
}

unint64_t sub_1001C2D94(unint64_t a1)
{
  unint64_t result;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  unint64_t v8;
  _QWORD v9[2];

  result = 0xD000000000000012;
  switch(a1)
  {
    case 0uLL:
    case 3uLL:
    case 0xAuLL:
      return result;
    case 1uLL:
      result = 0xD000000000000014;
      break;
    case 2uLL:
      result = 0x64696C61766E692ELL;
      break;
    case 4uLL:
      result = 0xD000000000000013;
      break;
    case 5uLL:
      result = 0xD00000000000001BLL;
      break;
    case 6uLL:
      result = 0xD00000000000001FLL;
      break;
    case 7uLL:
      result = 0xD00000000000001ELL;
      break;
    case 8uLL:
      result = 0xD000000000000024;
      break;
    case 9uLL:
      result = 0xD000000000000019;
      break;
    case 0xBuLL:
      result = 0xD000000000000015;
      break;
    case 0xCuLL:
      result = 0xD000000000000014;
      break;
    case 0xDuLL:
      result = 0xD000000000000013;
      break;
    case 0xEuLL:
      result = 0xD00000000000001BLL;
      break;
    case 0xFuLL:
      result = 0xD000000000000010;
      break;
    case 0x10uLL:
      result = 0xD000000000000011;
      break;
    case 0x11uLL:
      result = 0xD000000000000019;
      break;
    case 0x12uLL:
      result = 0xD000000000000016;
      break;
    case 0x13uLL:
      result = 0xD00000000000001ALL;
      break;
    case 0x14uLL:
      result = 0x67696C45746F6E2ELL;
      break;
    case 0x15uLL:
      result = 0xD000000000000020;
      break;
    case 0x16uLL:
      result = 0xD000000000000016;
      break;
    case 0x17uLL:
      result = 0xD000000000000017;
      break;
    case 0x18uLL:
      result = 0x6E776F6E6B6E752ELL;
      break;
    default:
      strcpy((char *)v9, ".underlying(");
      BYTE5(v9[1]) = 0;
      HIWORD(v9[1]) = -5120;
      v8 = a1;
      sub_1001C4258(a1);
      swift_errorRetain(a1);
      v4 = sub_100037A5C(&qword_100265260);
      v5._countAndFlagsBits = String.init<A>(describing:)(&v8, v4);
      object = v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease(object);
      v7._countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      sub_1001C4268(a1);
      result = v9[0];
      break;
  }
  return result;
}

unint64_t sub_1001C3020()
{
  unint64_t *v0;

  return sub_1001C2D94(*v0);
}

uint64_t sub_1001C3028()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B360);
  sub_100037A9C(v0, (uint64_t)qword_10027B360);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0x7265536E656B6F54, 0xEC00000065636976);
}

uint64_t sub_1001C30A4()
{
  id v0;
  unsigned __int8 v1;
  uint64_t v2;
  id v4;
  NSString v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v0 = objc_msgSend((id)objc_opt_self(NISession), "deviceCapabilities");
  v1 = objc_msgSend(v0, "supportsExtendedDistanceMeasurement");
  v2 = swift_unknownObjectRelease(v0);
  if ((v1 & 1) != 0)
    return 1;
  if ((static SystemInfo.isInternalBuild.getter(v2) & 1) != 0)
  {
    v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend(v4, "BOOLForKey:", v5);

  }
  else
  {
    v6 = 0;
  }
  v7 = static SystemInfo.arrowChipID.getter();
  if ((v8 & 1) != 0)
    v9 = -1;
  else
    v9 = v7;
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100037A9C(v10, (uint64_t)qword_10027B330);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(24, -1);
    *(_DWORD *)v14 = 67109632;
    LODWORD(v15) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, (char *)&v15 + 4, v14 + 4, v14 + 8);
    *(_WORD *)(v14 + 8) = 2048;
    v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v14 + 10, v14 + 18);
    *(_WORD *)(v14 + 18) = 1024;
    LODWORD(v15) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, (char *)&v15 + 4, v14 + 20, v14 + 24);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "isFindingCapable supportsExtendedDistanceMeasurement: %{BOOL}d. arrowChipID: %ld. AllowPeopleFindingOnR1Devices: %{BOOL}d", (uint8_t *)v14, 0x18u);
    swift_slowDealloc(v14, -1, -1);
  }

  if (v9 == 8198)
    return v6;
  else
    return 0;
}

uint64_t sub_1001C32C4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C32E8(uint64_t a1)
{
  uint64_t v1;

  return sub_100180DC8(a1, v1);
}

uint64_t sub_1001C32F0(uint64_t a1)
{
  uint64_t v1;

  return sub_1001EC920(a1, v1);
}

uint64_t sub_1001C32F8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100266BAC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_100266CFC);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_1001B7C1C();
}

uint64_t sub_1001C335C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100266BBC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_100266C74);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_1001B8E80();
}

uint64_t sub_1001C33C0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100266BCC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_100266C64);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_1001BB7D8();
}

uint64_t sub_1001C3424()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100266BDC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_100266C54);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_1001BC51C();
}

uint64_t sub_1001C3488()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100266BEC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_10026624C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10005F000;
  return sub_10018FE90();
}

uint64_t sub_1001C34EC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100266BFC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_100266C1C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_1001BD294();
}

uint64_t sub_1001C3550(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100266394);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  return sub_10019D5D8(a1);
}

uint64_t sub_1001C35B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10026638C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10003BF7C;
  return sub_10019DB94(a1, a2, v2);
}

uint64_t sub_1001C3614(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc(dword_100266C24);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_100263CEC);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10005D184;
  return sub_10010F758(a1);
}

uint64_t sub_1001C3688()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100266C34);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1000087DC();
}

uint64_t sub_1001C36D0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100266C44);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_100263E0C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10005F000;
  return sub_100115A30();
}

uint64_t sub_1001C3738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  v7 = *(_QWORD *)(v0 + v4);
  v8 = *(_QWORD *)(v0 + v5);
  v9 = *(_QWORD *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_100261B44);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_10003BF7C;
  return sub_10008FDAC(v6, v7, v8, v9);
}

uint64_t sub_1001C37DC()
{
  return sub_1001C3AD4((uint64_t (*)(_QWORD))&type metadata accessor for Handle);
}

uint64_t sub_1001C37E8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v8 = (_QWORD *)swift_task_alloc(dword_100261B3C);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_10003BF7C;
  return sub_100091FF0(a1, v5, v7);
}

uint64_t sub_1001C3880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Handle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1001C3904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  v7 = *(_QWORD *)(v0 + v4);
  v8 = *(_QWORD *)(v0 + v5);
  v9 = *(_QWORD *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_100261B44);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_1000087DC;
  return sub_10008FDAC(v6, v7, v8, v9);
}

uint64_t sub_1001C39A8()
{
  return sub_1001C3AD4((uint64_t (*)(_QWORD))&type metadata accessor for Handle);
}

uint64_t sub_1001C39B4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v8 = (_QWORD *)swift_task_alloc(dword_100261B3C);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_1000087DC;
  return sub_100091FF0(a1, v5, v7);
}

uint64_t sub_1001C3A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Friend(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001C3AC8()
{
  return sub_1001C3AD4((uint64_t (*)(_QWORD))&type metadata accessor for Friend);
}

uint64_t sub_1001C3AD4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v4 | 7;
  v7 = ((*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v7, v6);
}

uint64_t sub_1001C3B44(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_100266CAC);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10003BF7C;
  return sub_1001BFFD4(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1001C3BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_100266CBC);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_10003BF7C;
  return sub_1001C26A4(a1, a2, v6, v7);
}

uint64_t sub_1001C3C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Friend(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001C3CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Friend(0) - 8) + 80);
  v3 = v0 + ((v2 + 40) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_100266CCC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10003BF7C;
  v5 = (_QWORD *)swift_task_alloc(dword_100261AE4);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_10003BF7C;
  return sub_10008862C(v3);
}

uint64_t sub_1001C3D50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C3D74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_100266CDC);
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_10003BF7C;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_1001C1D40, 0, 0);
}

uint64_t sub_1001C3DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(sub_100037A5C(&qword_100260F78) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v16 = *(_QWORD *)(v1 + 64);
  v18 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v18 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v15 = *(_QWORD *)(v4 + 64);
  v17 = type metadata accessor for Friend(0);
  v6 = *(_QWORD *)(v17 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v14 = *(_QWORD *)(v6 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v8 = type metadata accessor for CloudKitChangeSet(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v3, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v3, v8);
  v10 = (v3 + v16 + v5) & ~v5;
  v11 = (v10 + v15 + v7) & ~v7;
  v12 = (v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v10, v18);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v11, v17);
  swift_release(*(_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | v5 | v7 | 7);
}

uint64_t sub_1001C3F4C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100260F78) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(type metadata accessor for Friend(0) - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = v1[2];
  v13 = v1[3];
  v14 = v1[4];
  v15 = (uint64_t)v1 + v11;
  v16 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  v17 = (_QWORD *)swift_task_alloc(dword_100266CEC);
  *(_QWORD *)(v2 + 16) = v17;
  *v17 = v2;
  v17[1] = sub_10003BF7C;
  return sub_1001C206C(a1, v12, v13, v14, (uint64_t)v1 + v5, (uint64_t)v1 + v8, v15, v16);
}

uint64_t sub_1001C406C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C1DEC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1001C4074()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100266D04);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_100263D2C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10005F000;
  return sub_10011529C(86400.0);
}

uint64_t sub_1001C40E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc(dword_100266D14);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_100263CEC);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10005F000;
  return sub_10010F758(a1);
}

uint64_t sub_1001C4158()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100266D24);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1000087DC();
}

uint64_t getEnumTagSinglePayload for NITokenService.Error(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFE6 && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483623);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 24;
  if (v4 >= 0x1A)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NITokenService.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFE7)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483623;
    if (a3 >= 0x7FFFFFE7)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFE7)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 24;
  }
  return result;
}

ValueMetadata *type metadata accessor for NITokenService.Error()
{
  return &type metadata for NITokenService.Error;
}

unint64_t sub_1001C4258(unint64_t result)
{
  if (result >= 0x19)
    return swift_errorRetain(result);
  return result;
}

unint64_t sub_1001C4268(unint64_t result)
{
  if (result >= 0x19)
    return swift_errorRelease(result);
  return result;
}

uint64_t ServerHandleType.rawValue.getter(char a1)
{
  if (!a1)
    return 0x7265776F6C6C6F66;
  if (a1 == 1)
    return 0x6E69776F6C6C6F66;
  return 0x4F676E69646E6570;
}

uint64_t sub_1001C42FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100109E80(*a1, *a2);
}

Swift::Int sub_1001C4308()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE900000000000067;
  v3 = 0x6E69776F6C6C6F66;
  if (v1 != 1)
  {
    v3 = 0x4F676E69646E6570;
    v2 = 0xED00007372656666;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x7265776F6C6C6F66;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1001C43B8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE900000000000067;
  v3 = 0x6E69776F6C6C6F66;
  if (*v1 != 1)
  {
    v3 = 0x4F676E69646E6570;
    v2 = 0xED00007372656666;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x7265776F6C6C6F66;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001C4444(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE900000000000067;
  v4 = 0x6E69776F6C6C6F66;
  if (v2 != 1)
  {
    v4 = 0x4F676E69646E6570;
    v3 = 0xED00007372656666;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x7265776F6C6C6F66;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE800000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1001C44F0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s13findmylocated16ServerHandleTypeO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1001C451C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE900000000000067;
  v5 = 0x6E69776F6C6C6F66;
  if (v2 != 1)
  {
    v5 = 0x4F676E69646E6570;
    v4 = 0xED00007372656666;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7265776F6C6C6F66;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1001C458C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001C5584();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001C45E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001C5584();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001C4634(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _BYTE v38[8];

  v3 = v1;
  v5 = sub_100037A5C(&qword_100266D88);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_100027210();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerFriend.CodingKeys, &type metadata for ServerFriend.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((unsigned __int8 *)v3 + 8);
  LOBYTE(v37) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(*(_QWORD *)&v12, v13, &v37, v5);
  if (!v2)
  {
    v14 = v3[2];
    LOBYTE(v37) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v14);
    sub_10000EF6C((uint64_t)(v3 + 3), (uint64_t)v38, &qword_100266D90);
    sub_10000EF6C((uint64_t)v38, (uint64_t)&v37, &qword_100266D90);
    v36 = 2;
    v15 = sub_100037A5C(&qword_100260360);
    v16 = sub_100027310(&qword_100260380, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v37, &v36, v5, v15, v16);
    v17 = *((_QWORD *)v3 + 4);
    v18 = *((_QWORD *)v3 + 5);
    LOBYTE(v37) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v37, v5);
    v19 = *((_QWORD *)v3 + 6);
    v20 = *((_QWORD *)v3 + 7);
    LOBYTE(v37) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v37, v5);
    v37 = *((_QWORD *)v3 + 8);
    v36 = 5;
    v21 = sub_100037A5C(&qword_1002625F8);
    v22 = sub_100027254(&qword_100263A00, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v5, v21, v22);
    v37 = *((_QWORD *)v3 + 9);
    v36 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v5, v21, v22);
    v23 = *((_QWORD *)v3 + 10);
    v24 = *((_QWORD *)v3 + 11);
    LOBYTE(v37) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v37, v5);
    v25 = *((unsigned __int8 *)v3 + 96);
    LOBYTE(v37) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v37, v5);
    v26 = *((unsigned __int8 *)v3 + 97);
    LOBYTE(v37) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v26, &v37, v5);
    v27 = *((_QWORD *)v3 + 13);
    v28 = *((_QWORD *)v3 + 14);
    LOBYTE(v37) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v27, v28, &v37, v5);
    v29 = *((_QWORD *)v3 + 15);
    v30 = *((unsigned __int8 *)v3 + 128);
    LOBYTE(v37) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v37, v5);
    v37 = *((_QWORD *)v3 + 17);
    v36 = 12;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v5, v21, v22);
    v31 = *((unsigned __int8 *)v3 + 144);
    LOBYTE(v37) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, &v37, v5);
    v32 = *((unsigned __int8 *)v3 + 145);
    LOBYTE(v37) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, &v37, v5);
    v33 = *((unsigned __int8 *)v3 + 146);
    LOBYTE(v37) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, &v37, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001C4A44@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001C5F1C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001C4A68(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_1001C4A74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100027210();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C4A9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100027210();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C4AC4(_QWORD *a1)
{
  return sub_1001C4634(a1);
}

uint64_t sub_1001C4B1C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001C4B44 + 4 * byte_1001FA4F0[a1]))(25705, 0xE200000000000000);
}

unint64_t sub_1001C4B44()
{
  return 0xD000000000000014;
}

unint64_t sub_1001C4B60()
{
  return 0xD000000000000016;
}

uint64_t sub_1001C4B80()
{
  return 0x6449726566666FLL;
}

uint64_t sub_1001C4B98()
{
  return 0x6954657461647075;
}

uint64_t sub_1001C4BBC()
{
  return 0x73657269707865;
}

uint64_t sub_1001C4BD4()
{
  return 0x644970756F7267;
}

uint64_t sub_1001C4BEC()
{
  return 0x654D6D6F72467369;
}

uint64_t sub_1001C4C10(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100266D50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1001C6DA0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerPendingOfferFriend.CodingKeys, &type metadata for ServerPendingOfferFriend.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((_QWORD *)v3 + 1);
  v34 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)&v12, v13, &v34, v5);
  if (!v2)
  {
    v14 = *((_QWORD *)v3 + 2);
    v15 = *((_QWORD *)v3 + 3);
    v33 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v33, v5);
    v16 = *((_QWORD *)v3 + 4);
    v17 = *((_QWORD *)v3 + 5);
    v32 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v32, v5);
    v18 = *((_QWORD *)v3 + 6);
    v19 = *((_QWORD *)v3 + 7);
    v31 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v31, v5);
    v20 = v3[8];
    v30 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v30, v5, v20);
    v21 = v3[9];
    v29 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v21);
    v22 = *((_QWORD *)v3 + 10);
    v23 = *((_QWORD *)v3 + 11);
    v28 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v28, v5);
    v24 = *((unsigned __int8 *)v3 + 96);
    v27 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, &v27, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001C4E14()
{
  unsigned __int8 *v0;

  return sub_1001C4B1C(*v0);
}

uint64_t sub_1001C4E1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001C65D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C4E40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001C6DA0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C4E68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001C6DA0();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1001C4E90@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  char v8;

  sub_1001C6940(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_BYTE *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1001C4EEC(_QWORD *a1)
{
  return sub_1001C4C10(a1);
}

uint64_t sub_1001C4F00(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001C4F28 + 4 * byte_1001FA4F8[a1]))(25705, 0xE200000000000000);
}

unint64_t sub_1001C4F28()
{
  return 0xD000000000000014;
}

void sub_1001C5014()
{
  JUMPOUT(0x1001C5028);
}

uint64_t sub_1001C5034(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28[8];
  _BYTE v29[8];
  _BYTE v30[8];

  v3 = v1;
  v5 = sub_100037A5C(&qword_100266D68);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1001C7810();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerFutureFriend.CodingKeys, &type metadata for ServerFutureFriend.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((_QWORD *)v3 + 1);
  v28[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)&v12, v13, v28, v5);
  if (!v2)
  {
    v14 = *((_QWORD *)v3 + 2);
    v15 = *((_QWORD *)v3 + 3);
    v28[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v28, v5);
    v16 = *((_QWORD *)v3 + 4);
    v17 = *((_QWORD *)v3 + 5);
    v28[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v28, v5);
    v18 = *((_QWORD *)v3 + 6);
    v19 = *((_QWORD *)v3 + 7);
    v28[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, v28, v5);
    v20 = v3[8];
    v28[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v5, v20);
    v21 = *((unsigned __int8 *)v3 + 72);
    v28[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v28, v5);
    v22 = *((unsigned __int8 *)v3 + 73);
    v28[0] = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v28, v5);
    v23 = *((unsigned __int8 *)v3 + 74);
    v28[0] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v28, v5);
    sub_10000EF6C((uint64_t)(v3 + 10), (uint64_t)v30, &qword_100266D70);
    sub_10000EF6C((uint64_t)v30, (uint64_t)v28, &qword_100266D70);
    HIBYTE(v27) = 8;
    v24 = sub_100037A5C(&qword_1002625F8);
    v25 = sub_100027254(&qword_100263A00, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, (char *)&v27 + 7, v5, v24, v25);
    sub_10000EF6C((uint64_t)(v3 + 11), (uint64_t)v29, &qword_100266D70);
    sub_10000EF6C((uint64_t)v29, (uint64_t)v28, &qword_100266D70);
    HIBYTE(v27) = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, (char *)&v27 + 7, v5, v24, v25);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001C5318()
{
  unsigned __int8 *v0;

  return sub_1001C4F00(*v0);
}

uint64_t sub_1001C5320@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001C6DE4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001C5344(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1001C5350(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001C7810();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C5378(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001C7810();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001C53A0@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[6];

  sub_1001C7248(a1, (uint64_t)v8);
  if (!v2)
  {
    v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    result = *(double *)v8;
    v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_1001C53E8(_QWORD *a1)
{
  return sub_1001C5034(a1);
}

unint64_t _s13findmylocated16ServerHandleTypeO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10024F360, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_1001C5474()
{
  unint64_t result;

  result = qword_100266D30;
  if (!qword_100266D30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ServerHandleType, &type metadata for ServerHandleType);
    atomic_store(result, (unint64_t *)&qword_100266D30);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ServerHandleType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001C5504 + 4 * byte_1001FA507[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001C5538 + 4 * byte_1001FA502[v4]))();
}

uint64_t sub_1001C5538(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C5540(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C5548);
  return result;
}

uint64_t sub_1001C5554(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C555CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001C5560(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C5568(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerHandleType()
{
  return &type metadata for ServerHandleType;
}

unint64_t sub_1001C5584()
{
  unint64_t result;

  result = qword_100266D38;
  if (!qword_100266D38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ServerHandleType, &type metadata for ServerHandleType);
    atomic_store(result, (unint64_t *)&qword_100266D38);
  }
  return result;
}

uint64_t destroy for ServerPendingOfferFriend(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for ServerPendingOfferFriend(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for ServerPendingOfferFriend(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

__n128 initializeWithTake for ServerPendingOfferFriend(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ServerPendingOfferFriend(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerPendingOfferFriend(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 97))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerPendingOfferFriend(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 97) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerPendingOfferFriend()
{
  return &type metadata for ServerPendingOfferFriend;
}

uint64_t destroy for ServerFutureFriend(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[10]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for ServerFutureFriend(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for ServerFutureFriend(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t assignWithTake for ServerFutureFriend(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  v12 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerFutureFriend(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerFutureFriend(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFutureFriend()
{
  return &type metadata for ServerFutureFriend;
}

uint64_t assignWithCopy for ServerFriend(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = a2[3];
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 32) = a2[4];
  v7 = a2[5];
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 48) = a2[6];
  v9 = a2[7];
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = a2[8];
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = a2[9];
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a1 + 80) = a2[10];
  v15 = a2[11];
  v16 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_BYTE *)(a1 + 97) = *((_BYTE *)a2 + 97);
  *(_QWORD *)(a1 + 104) = a2[13];
  v17 = a2[14];
  v18 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a2[15];
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_QWORD *)(a1 + 120) = v19;
  v20 = a2[17];
  v21 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  *(_BYTE *)(a1 + 145) = *((_BYTE *)a2 + 145);
  *(_BYTE *)(a1 + 146) = *((_BYTE *)a2 + 146);
  return a1;
}

uint64_t assignWithTake for ServerFriend(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v7 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  v11 = *(_QWORD *)(a2 + 112);
  v12 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v13 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerFriend(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 147))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerFriend(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 146) = 0;
    *(_WORD *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 147) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 147) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFriend()
{
  return &type metadata for ServerFriend;
}

uint64_t sub_1001C5F1C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  if (a1 == 0x6954657461657263 && a2 == 0xEF706D617473656DLL)
  {
    v5 = 0xEF706D617473656DLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6954657461657263, 0xEF706D617473656DLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x73657269707865 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73657269707865, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000001001FEE20;
    if (a2 == 0x80000001001FEE20)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001FEE20, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x7250646E65697266 && a2 == 0xEB00000000736665)
  {
    v9 = 0xEB00000000736665;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7250646E65697266, 0xEB00000000736665, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v10 = 0xE200000000000000;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x8000000100201E80)
  {
    v11 = 0x8000000100201E80;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100201E80, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100201EA0)
  {
    v12 = 0x8000000100201EA0;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100201EA0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x656369766544656DLL && a2 == 0xEF736C6961746544)
  {
    v13 = 0xEF736C6961746544;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656369766544656DLL, 0xEF736C6961746544, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000001001FEE70)
  {
    v14 = 0x80000001001FEE70;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001001FEE70, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD000000000000023 && a2 == 0x80000001001FEE40)
  {
    v15 = 0x80000001001FEE40;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x80000001001FEE40, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v16 = 0xE600000000000000;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x6954657461647075 && a2 == 0xEF706D617473656DLL)
  {
    v17 = 0xEF706D617473656DLL;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6954657461647075, 0xEF706D617473656DLL, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0x6E65644968737570 && a2 == 0xEF73726569666974)
  {
    v18 = 0xEF73726569666974;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644968737570, 0xEF73726569666974, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x80000001001FEEB0)
  {
    v19 = 0x80000001001FEEB0;
LABEL_85:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001001FEEB0, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_85;
  }
  if (a1 == 0xD000000000000010)
  {
    v20 = 0x80000001001FEE90;
    if (a2 == 0x80000001001FEE90)
      goto LABEL_90;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001FEE90, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_90:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if (a1 == 0x654D6D6F72467369 && a2 == 0xEE00736567617373)
  {
    swift_bridgeObjectRelease(0xEE00736567617373);
    return 15;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x654D6D6F72467369, 0xEE00736567617373, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

uint64_t sub_1001C65D4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000014)
  {
    v7 = 0x8000000100201E00;
    if (a2 == 0x8000000100201E00)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100201E00, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100201E20)
  {
    v8 = 0x8000000100201E20;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100201E20, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x6449726566666FLL && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449726566666FLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x6954657461647075 && a2 == 0xEF706D617473656DLL)
  {
    v10 = 0xEF706D617473656DLL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6954657461647075, 0xEF706D617473656DLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x73657269707865 && a2 == 0xE700000000000000)
  {
    v11 = 0xE700000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73657269707865, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x644970756F7267 && a2 == 0xE700000000000000)
  {
    v12 = 0xE700000000000000;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970756F7267, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x654D6D6F72467369 && a2 == 0xEE00736567617373)
  {
    swift_bridgeObjectRelease(0xEE00736567617373);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x654D6D6F72467369, 0xEE00736567617373, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_1001C6940@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v5 = sub_100037A5C(&qword_100266D40);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1001C6DA0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerPendingOfferFriend.CodingKeys, &type metadata for ServerPendingOfferFriend.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_10002BB90(a1);
    return v6;
  }
  else
  {
    v48 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v5);
    v14 = v13;
    v47 = 1;
    swift_bridgeObjectRetain(v13);
    v38 = KeyedDecodingContainer.decode(_:forKey:)(&v47, v5);
    v39 = v12;
    v46 = 2;
    v16 = v15;
    swift_bridgeObjectRetain(v15);
    v17 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
    v40 = v16;
    v37 = v17;
    v45 = 3;
    v19 = v18;
    swift_bridgeObjectRetain(v18);
    v34 = KeyedDecodingContainer.decode(_:forKey:)(&v45, v5);
    v36 = v19;
    v44 = 4;
    v21 = v20;
    v22 = swift_bridgeObjectRetain(v20);
    v23.n128_f64[0] = KeyedDecodingContainer.decode(_:forKey:)(&v44, v5, v22);
    v24 = v23.n128_u64[0];
    v43 = 5;
    v25 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v5, v23);
    v42 = 6;
    v33 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v5);
    v41 = 7;
    v35 = v26;
    swift_bridgeObjectRetain(v26);
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_10002BB90(a1);
    v28 = v35;
    swift_bridgeObjectRelease(v35);
    v29 = v21;
    swift_bridgeObjectRelease(v21);
    v30 = v36;
    swift_bridgeObjectRelease(v36);
    v31 = v40;
    swift_bridgeObjectRelease(v40);
    result = swift_bridgeObjectRelease(v14);
    *(_QWORD *)a2 = v39;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 16) = v38;
    *(_QWORD *)(a2 + 24) = v31;
    *(_QWORD *)(a2 + 32) = v37;
    *(_QWORD *)(a2 + 40) = v30;
    *(_QWORD *)(a2 + 48) = v34;
    *(_QWORD *)(a2 + 56) = v29;
    *(_QWORD *)(a2 + 64) = v24;
    *(double *)(a2 + 72) = v25;
    *(_QWORD *)(a2 + 80) = v33;
    *(_QWORD *)(a2 + 88) = v28;
    *(_BYTE *)(a2 + 96) = v27;
  }
  return result;
}

unint64_t sub_1001C6DA0()
{
  unint64_t result;

  result = qword_100266D48;
  if (!qword_100266D48)
  {
    result = swift_getWitnessTable(&unk_1001FAA44, &type metadata for ServerPendingOfferFriend.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266D48);
  }
  return result;
}

uint64_t sub_1001C6DE4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000014)
  {
    v7 = 0x8000000100201E00;
    if (a2 == 0x8000000100201E00)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100201E00, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000016)
  {
    v8 = 0x8000000100201E20;
    if (a2 == 0x8000000100201E20)
      goto LABEL_18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100201E20, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6974617469766E69 && a2 == 0xEE00747865546E6FLL)
  {
    v9 = 0xEE00747865546E6FLL;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974617469766E69, 0xEE00747865546E6FLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_24;
  }
  if (a1 == 0x6954657461647075 && a2 == 0xEF706D617473656DLL)
  {
    v10 = 0xEF706D617473656DLL;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6954657461647075, 0xEF706D617473656DLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0x76456E49796C6E6FLL && a2 == 0xEB00000000746E65)
  {
    v11 = 0xEB00000000746E65;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x76456E49796C6E6FLL, 0xEB00000000746E65, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0x73696D7265506B74 && a2 == 0xEC0000006E6F6973)
  {
    v12 = 0xEC0000006E6F6973;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73696D7265506B74, 0xEC0000006E6F6973, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0x654D6D6F72467369 && a2 == 0xEE00736567617373)
  {
    v13 = 0xEE00736567617373;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654D6D6F72467369, 0xEE00736567617373, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0xD000000000000014)
  {
    v14 = 0x8000000100201E40;
    if (a2 == 0x8000000100201E40)
      goto LABEL_53;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100201E40, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_53:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100201E60)
  {
    swift_bridgeObjectRelease(0x8000000100201E60);
    return 9;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100201E60, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_1001C7248@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v5 = sub_100037A5C(&qword_100266D58);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1001C7810();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerFutureFriend.CodingKeys, &type metadata for ServerFutureFriend.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_10002BB90(a1);
  LOBYTE(v50) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v50, v5);
  LOBYTE(v50) = 1;
  v14 = v13;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v50, v5);
  v48 = v14;
  v44 = v15;
  v45 = v12;
  LOBYTE(v50) = 2;
  v17 = v16;
  swift_bridgeObjectRetain(v16);
  v18 = KeyedDecodingContainer.decode(_:forKey:)(&v50, v5);
  v47 = v17;
  v19 = v18;
  LOBYTE(v50) = 3;
  v21 = v20;
  swift_bridgeObjectRetain(v20);
  v22 = KeyedDecodingContainer.decode(_:forKey:)(&v50, v5);
  v46 = v21;
  v43 = v22;
  LOBYTE(v50) = 4;
  v24 = v23;
  v25 = swift_bridgeObjectRetain(v23);
  v26 = KeyedDecodingContainer.decode(_:forKey:)(&v50, v5, v25);
  v42 = v19;
  v27 = v24;
  LOBYTE(v50) = 5;
  LODWORD(v24) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v5);
  LOBYTE(v50) = 6;
  v41 = KeyedDecodingContainer.decode(_:forKey:)(&v50, v5);
  LOBYTE(v50) = 7;
  v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v5);
  v28 = sub_100037A5C(&qword_1002625F8);
  v49 = 8;
  v39 = sub_100027254(&qword_1002639C8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v40 = v28;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v50, v28, &v49, v5, v28, v39);
  v36 = v24;
  v49 = 9;
  v37 = v50;
  swift_bridgeObjectRetain(v50);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v50, v40, &v49, v5, v40, v39);
  v41 &= 1u;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v29 = v50;
  swift_bridgeObjectRetain(v50);
  sub_10002BB90(a1);
  swift_bridgeObjectRelease(v29);
  v30 = v37;
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v27);
  v31 = v46;
  swift_bridgeObjectRelease(v46);
  v32 = v47;
  swift_bridgeObjectRelease(v47);
  v33 = v48;
  result = swift_bridgeObjectRelease(v48);
  *(_QWORD *)a2 = v45;
  *(_QWORD *)(a2 + 8) = v33;
  *(_QWORD *)(a2 + 16) = v44;
  *(_QWORD *)(a2 + 24) = v32;
  *(_QWORD *)(a2 + 32) = v42;
  *(_QWORD *)(a2 + 40) = v31;
  *(_QWORD *)(a2 + 48) = v43;
  *(_QWORD *)(a2 + 56) = v27;
  *(double *)(a2 + 64) = v26;
  *(_BYTE *)(a2 + 72) = v36;
  *(_BYTE *)(a2 + 73) = v41;
  *(_BYTE *)(a2 + 74) = v38;
  *(_QWORD *)(a2 + 80) = v30;
  *(_QWORD *)(a2 + 88) = v29;
  return result;
}

unint64_t sub_1001C7810()
{
  unint64_t result;

  result = qword_100266D60;
  if (!qword_100266D60)
  {
    result = swift_getWitnessTable(&unk_1001FA9F4, &type metadata for ServerFutureFriend.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266D60);
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFriend.CodingKeys()
{
  return &type metadata for ServerFriend.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ServerFutureFriend.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerFutureFriend.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1001C7940 + 4 * byte_1001FA51B[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1001C7974 + 4 * byte_1001FA516[v4]))();
}

uint64_t sub_1001C7974(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C797C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C7984);
  return result;
}

uint64_t sub_1001C7990(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C7998);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1001C799C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C79A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerFutureFriend.CodingKeys()
{
  return &type metadata for ServerFutureFriend.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ServerPendingOfferFriend.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1001C7A0C + 4 * byte_1001FA525[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1001C7A40 + 4 * byte_1001FA520[v4]))();
}

uint64_t sub_1001C7A40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C7A48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C7A50);
  return result;
}

uint64_t sub_1001C7A5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C7A64);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1001C7A68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C7A70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerPendingOfferFriend.CodingKeys()
{
  return &type metadata for ServerPendingOfferFriend.CodingKeys;
}

unint64_t sub_1001C7A90()
{
  unint64_t result;

  result = qword_100266D98;
  if (!qword_100266D98)
  {
    result = swift_getWitnessTable(&unk_1001FA80C, &type metadata for ServerPendingOfferFriend.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266D98);
  }
  return result;
}

unint64_t sub_1001C7AD8()
{
  unint64_t result;

  result = qword_100266DA0;
  if (!qword_100266DA0)
  {
    result = swift_getWitnessTable(&unk_1001FA8C4, &type metadata for ServerFutureFriend.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266DA0);
  }
  return result;
}

unint64_t sub_1001C7B20()
{
  unint64_t result;

  result = qword_100266DA8;
  if (!qword_100266DA8)
  {
    result = swift_getWitnessTable(&unk_1001FA97C, &type metadata for ServerFriend.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266DA8);
  }
  return result;
}

unint64_t sub_1001C7B68()
{
  unint64_t result;

  result = qword_100266DB0;
  if (!qword_100266DB0)
  {
    result = swift_getWitnessTable(&unk_1001FA8EC, &type metadata for ServerFriend.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266DB0);
  }
  return result;
}

unint64_t sub_1001C7BB0()
{
  unint64_t result;

  result = qword_100266DB8;
  if (!qword_100266DB8)
  {
    result = swift_getWitnessTable(&unk_1001FA914, &type metadata for ServerFriend.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266DB8);
  }
  return result;
}

unint64_t sub_1001C7BF8()
{
  unint64_t result;

  result = qword_100266DC0;
  if (!qword_100266DC0)
  {
    result = swift_getWitnessTable(&unk_1001FA834, &type metadata for ServerFutureFriend.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266DC0);
  }
  return result;
}

unint64_t sub_1001C7C40()
{
  unint64_t result;

  result = qword_100266DC8;
  if (!qword_100266DC8)
  {
    result = swift_getWitnessTable(&unk_1001FA85C, &type metadata for ServerFutureFriend.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266DC8);
  }
  return result;
}

unint64_t sub_1001C7C88()
{
  unint64_t result;

  result = qword_100266DD0;
  if (!qword_100266DD0)
  {
    result = swift_getWitnessTable(&unk_1001FA77C, &type metadata for ServerPendingOfferFriend.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266DD0);
  }
  return result;
}

unint64_t sub_1001C7CD0()
{
  unint64_t result;

  result = qword_100266DD8;
  if (!qword_100266DD8)
  {
    result = swift_getWitnessTable(&unk_1001FA7A4, &type metadata for ServerPendingOfferFriend.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266DD8);
  }
  return result;
}

uint64_t sub_1001C7D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _QWORD);
  Swift::String v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[32];

  v6 = type metadata accessor for FriendshipResponseToInviteType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URLComponents(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003CD40(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  v15 = v14 == enum case for FriendshipResponseToInviteType.accept(_:)
     || v14 == enum case for FriendshipResponseToInviteType.decline(_:);
  v23 = v10;
  v24 = a3;
  if (v15)
  {
    v16 = a1;
    v17 = (void *)0xEF65736E6F707365;
    v18 = 0x52657469766E692FLL;
LABEL_9:
    v19 = (void (*)(_BYTE *, _QWORD))URLComponents.path.modify(v25);
    v20._countAndFlagsBits = v18;
    v20._object = v17;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v17);
    v19(v25, 0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
    v21 = type metadata accessor for Account(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v16, v21);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v24, v13, v23);
  }
  if (v14 == enum case for FriendshipResponseToInviteType.notNow(_:))
  {
    v16 = a1;
    v17 = (void *)0xE700000000000000;
    v18 = 0x776F4E746F6E2FLL;
    goto LABEL_9;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x8000000100201EF0, "findmylocated/RespondToInviteEndpoint.swift", 43, 2, 23, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C7F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C7F4C);
}

uint64_t sub_1001C7F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001C7F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C7F94);
}

uint64_t sub_1001C7F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RespondToInviteEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_100266E38;
  if (!qword_100266E38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RespondToInviteEndpoint);
  return result;
}

uint64_t sub_1001C8010(char a1)
{
  unint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  _StringGuts.grow(_:)(23);
  v2 = sub_1001C8704();
  v3 = CustomStringConvertible.typeDescription.getter(&type metadata for CompanionPeopleFindingCapabilityEnvelopeV1, v2);
  swift_bridgeObjectRelease(0xE000000000000000);
  v4._object = (void *)0x8000000100201F10;
  v4._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v4);
  if ((a1 & 1) != 0)
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v6);
  return v3;
}

unint64_t sub_1001C80E4()
{
  return 0xD000000000000010;
}

uint64_t sub_1001C8100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001C895C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1001C8128(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001C86C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C8150(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001C86C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C8178@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_100037A5C(&qword_100266E80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1001C86C0();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys, &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_10002BB90(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_10002BB90(a1);
  *a2 = v13 & 1;
  return result;
}

uint64_t sub_1001C828C(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_100037A5C(&qword_100266E90);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_100036228(a1, v8);
  v10 = sub_1001C86C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys, &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001C8374()
{
  char *v0;

  return sub_1001C8010(*v0);
}

uint64_t sub_1001C837C()
{
  return 0;
}

uint64_t sub_1001C8388@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_1001C83B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001C867C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C83DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001C867C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C8404(_QWORD *a1)
{
  return sub_10002BB90(a1);
}

uint64_t sub_1001C8428(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v2 = sub_100037A5C(&qword_100266E70);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_100036228(a1, v6);
  v8 = sub_1001C867C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1.CodingKeys, &type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1.CodingKeys, v8, v6, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1001C84EC(uint64_t a1, uint64_t a2)
{
  return CustomStringConvertible.typeDescription.getter(a1, a2);
}

uint64_t getEnumTagSinglePayload for CompanionPeopleFindingCapabilityEnvelopeV1(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CompanionPeopleFindingCapabilityEnvelopeV1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001C85EC + 4 * byte_1001FAAF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001C8620 + 4 * byte_1001FAAF0[v4]))();
}

uint64_t sub_1001C8620(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C8628(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C8630);
  return result;
}

uint64_t sub_1001C863C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C8644);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001C8648(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C8650(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CompanionPeopleFindingCapabilityEnvelopeV1()
{
  return &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1;
}

ValueMetadata *type metadata accessor for CompanionPeopleFindingCapabilityRequestEnvelopeV1()
{
  return &type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1;
}

unint64_t sub_1001C867C()
{
  unint64_t result;

  result = qword_100266E78;
  if (!qword_100266E78)
  {
    result = swift_getWitnessTable(&unk_1001FADC8, &type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266E78);
  }
  return result;
}

unint64_t sub_1001C86C0()
{
  unint64_t result;

  result = qword_100266E88;
  if (!qword_100266E88)
  {
    result = swift_getWitnessTable(&unk_1001FAD78, &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266E88);
  }
  return result;
}

unint64_t sub_1001C8704()
{
  unint64_t result;

  result = qword_100266E98;
  if (!qword_100266E98)
  {
    result = swift_getWitnessTable(&unk_1001FAB74, &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1);
    atomic_store(result, (unint64_t *)&qword_100266E98);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001C8788 + 4 * byte_1001FAAFA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001C87A8 + 4 * byte_1001FAAFF[v4]))();
}

_BYTE *sub_1001C8788(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001C87A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001C87B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001C87B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001C87C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001C87C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys()
{
  return &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for CompanionPeopleFindingCapabilityRequestEnvelopeV1.CodingKeys()
{
  return &type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1.CodingKeys;
}

unint64_t sub_1001C87F8()
{
  unint64_t result;

  result = qword_100266EA0;
  if (!qword_100266EA0)
  {
    result = swift_getWitnessTable(&unk_1001FAD50, &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266EA0);
  }
  return result;
}

unint64_t sub_1001C8840()
{
  unint64_t result;

  result = qword_100266EA8;
  if (!qword_100266EA8)
  {
    result = swift_getWitnessTable(&unk_1001FACC0, &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266EA8);
  }
  return result;
}

unint64_t sub_1001C8888()
{
  unint64_t result;

  result = qword_100266EB0;
  if (!qword_100266EB0)
  {
    result = swift_getWitnessTable(&unk_1001FACE8, &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266EB0);
  }
  return result;
}

unint64_t sub_1001C88D0()
{
  unint64_t result;

  result = qword_100266EB8;
  if (!qword_100266EB8)
  {
    result = swift_getWitnessTable(&unk_1001FAC70, &type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266EB8);
  }
  return result;
}

unint64_t sub_1001C8918()
{
  unint64_t result;

  result = qword_100266EC0;
  if (!qword_100266EC0)
  {
    result = swift_getWitnessTable(&unk_1001FAC98, &type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266EC0);
  }
  return result;
}

uint64_t sub_1001C895C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000100201F30)
  {
    swift_bridgeObjectRelease(0x8000000100201F30);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100201F30, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_1001C89E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void **v31;
  id v32;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v57 = sub_100037A5C(&qword_100267180);
  v3 = __chkstk_darwin(v57);
  v56 = (void **)((char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __chkstk_darwin(v3);
  v55 = (_QWORD *)((char *)v45 - v6);
  __chkstk_darwin(v5);
  v54 = (char *)v45 - v7;
  v8 = type metadata accessor for CloudKitCoordinator.Deletion(0);
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  if (!v11)
    return (uint64_t)v12;
  v45[1] = v1;
  v60 = _swiftEmptyArrayStorage;
  sub_1001E7988(0, v11, 0);
  result = sub_1000CA3A0(a1);
  v15 = result;
  v16 = 0;
  v17 = a1 + 64;
  v46 = a1 + 80;
  v47 = v11;
  v50 = v10;
  v51 = a1;
  v48 = v14;
  v49 = a1 + 64;
  v18 = v54;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(_BYTE *)(a1 + 32))
  {
    v21 = (unint64_t)v15 >> 6;
    if ((*(_QWORD *)(v17 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v14)
      goto LABEL_26;
    v58 = v16;
    v59 = 1 << v15;
    v22 = v57;
    v23 = (char *)v18 + *(int *)(v57 + 48);
    v24 = *(_QWORD *)(a1 + 56);
    v25 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v15);
    v26 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = v24 + *(_QWORD *)(v27 + 72) * v15;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    v29(v23, v28, v26);
    *v18 = v25;
    v30 = (uint64_t)v55;
    *v55 = v25;
    v29((char *)(v30 + *(int *)(v22 + 48)), (uint64_t)v23, v26);
    v31 = v56;
    sub_10000EF6C(v30, (uint64_t)v56, &qword_100267180);
    v32 = v25;
    v33 = sub_1000087A0((uint64_t)v18, &qword_100267180);
    v34 = *v31;
    v35 = v50;
    v36 = CloudKitChangeSet.TombstoneInfo.recordType.getter(v33);
    CloudKitCoordinator.Deletion.init(recordType:recordID:)(v36, v37, v34);
    sub_1000087A0((uint64_t)v31, &qword_100267180);
    v12 = v60;
    if ((swift_isUniquelyReferenced_nonNull_native(v60) & 1) == 0)
    {
      sub_1001E7988(0, v12[2] + 1, 1);
      v12 = v60;
    }
    v39 = v12[2];
    v38 = v12[3];
    a1 = v51;
    if (v39 >= v38 >> 1)
    {
      sub_1001E7988(v38 > 1, v39 + 1, 1);
      v12 = v60;
    }
    v12[2] = v39 + 1;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v52 + 32))((unint64_t)v12+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v39, v35, v53);
    v60 = v12;
    v19 = 1 << *(_BYTE *)(a1 + 32);
    if (v15 >= v19)
      goto LABEL_27;
    v17 = v49;
    v40 = *(_QWORD *)(v49 + 8 * v21);
    if ((v40 & v59) == 0)
      goto LABEL_28;
    LODWORD(v14) = v48;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v48)
      goto LABEL_29;
    v41 = v40 & (-2 << (v15 & 0x3F));
    if (v41)
    {
      v19 = __clz(__rbit64(v41)) | v15 & 0xFFFFFFFFFFFFFFC0;
      v20 = v47;
    }
    else
    {
      v42 = v21 + 1;
      v43 = (unint64_t)(v19 + 63) >> 6;
      v20 = v47;
      if (v21 + 1 < v43)
      {
        v44 = *(_QWORD *)(v49 + 8 * v42);
        if (v44)
        {
LABEL_22:
          v19 = __clz(__rbit64(v44)) + (v42 << 6);
        }
        else
        {
          while (v43 - 2 != v21)
          {
            v44 = *(_QWORD *)(v46 + 8 * v21++);
            if (v44)
            {
              v42 = v21 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v16 = v58 + 1;
    v15 = v19;
    if (v58 + 1 == v20)
      return (uint64_t)v12;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *sub_1001C8DB8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    v26 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    result = (_QWORD *)sub_1000CA3A0(a1);
    v4 = (uint64_t)result;
    v6 = v5;
    v7 = 0;
    v8 = a1 + 64;
    v23 = v2;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      v11 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_24;
      if (*(_DWORD *)(a1 + 36) != v6)
        goto LABEL_25;
      v12 = *(_QWORD *)(a1 + 56) + 16 * v4;
      v13 = *(void **)v12;
      if ((*(_BYTE *)(v12 + 8) & 1) != 0)
      {
        v25 = *(void **)v12;
        sub_1001D0404(v13, 1);
        v22 = sub_100037A5C(&qword_100265260);
        swift_willThrowTypedImpl(&v25, v22, &protocol self-conformance witness table for Error);
        return (_QWORD *)swift_release(v26);
      }
      v24 = v7;
      v14 = sub_1001D0404(v13, 0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      v15 = v26[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
      v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v16);
      v9 = 1 << *(_BYTE *)(a1 + 32);
      if (v4 >= v9)
        goto LABEL_26;
      v17 = *(_QWORD *)(v8 + 8 * v11);
      if ((v17 & (1 << v4)) == 0)
        goto LABEL_27;
      if (*(_DWORD *)(a1 + 36) != v6)
        goto LABEL_28;
      v18 = v17 & (-2 << (v4 & 0x3F));
      if (v18)
      {
        v9 = __clz(__rbit64(v18)) | v4 & 0xFFFFFFFFFFFFFFC0;
        v10 = v23;
      }
      else
      {
        v19 = v11 + 1;
        v20 = (unint64_t)(v9 + 63) >> 6;
        v10 = v23;
        if (v11 + 1 < v20)
        {
          v21 = *(_QWORD *)(v8 + 8 * v19);
          if (v21)
          {
LABEL_19:
            v9 = __clz(__rbit64(v21)) + (v19 << 6);
          }
          else
          {
            while (v20 - 2 != v11)
            {
              v21 = *(_QWORD *)(a1 + 80 + 8 * v11++);
              if (v21)
              {
                v19 = v11 + 1;
                goto LABEL_19;
              }
            }
          }
        }
      }
      v7 = v24 + 1;
      v4 = v9;
      if (v24 + 1 == v10)
        return v26;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  return result;
}

uint64_t sub_1001C8FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B380);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027B380);
  if (qword_10025FBA8 != -1)
    swift_once(&qword_10025FBA8, sub_1001CED84);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027B398);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001C907C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  int EnumCaseMultiPayload;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  _QWORD v25[2];
  uint64_t v26;
  unint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CloudStorageStore.State(0);
  __chkstk_darwin(v6);
  v8 = (__int128 *)((char *)&v25[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001CF964(v1, (uint64_t)v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v10 = *(unsigned __int8 *)v8;
      v11 = sub_100037A5C(&qword_100266FD8);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      v26 = 0;
      v27 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease(v27);
      v26 = 0x646574656C65642ELL;
      v27 = 0xEF203A6570797428;
      if (v10)
        v12 = 0xD000000000000014;
      else
        v12 = 0x65636E65662ELL;
      if (v10)
        v13 = 0x8000000100200B00;
      else
        v13 = 0xE600000000000000;
      v14 = v13;
      String.append(_:)(*(Swift::String *)&v12);
      swift_bridgeObjectRelease(v13);
      v15._countAndFlagsBits = 0x203A6469202CLL;
      v15._object = (void *)0xE600000000000000;
      String.append(_:)(v15);
      v16 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v16);
      object = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object);
      v19 = v26;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      return 0x6E776F6E6B6E752ELL;
    }
  }
  else
  {
    sub_10001A4CC(v8, (uint64_t)&v26);
    v25[0] = 0;
    v25[1] = 0xE000000000000000;
    v20._countAndFlagsBits = 0x65696669646F6D2ELL;
    v20._object = (void *)0xEA00000000002864;
    String.append(_:)(v20);
    v21 = sub_100037A5C(&qword_100267140);
    _print_unlocked<A, B>(_:_:)(&v26, v25, v21, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v22._countAndFlagsBits = 41;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v19 = v25[0];
    sub_10002BB90(&v26);
  }
  return v19;
}

uint64_t sub_1001C92FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  sub_100024990(v0 + OBJC_IVAR____TtC13findmylocated17CloudStorageStore_state, type metadata accessor for CloudStorageStore.State);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated17CloudStorageStore_stateContinuations));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1001C9350()
{
  return type metadata accessor for CloudStorageStore(0);
}

uint64_t type metadata accessor for CloudStorageStore(uint64_t a1)
{
  return sub_100025C3C(a1, qword_100266F00, (uint64_t)&nominal type descriptor for CloudStorageStore);
}

uint64_t sub_1001C936C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_1001FAE70;
  result = type metadata accessor for CloudStorageStore.State(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CloudStorageStore.State(uint64_t a1)
{
  return sub_100025C3C(a1, qword_100267050, (uint64_t)&nominal type descriptor for CloudStorageStore.State);
}

uint64_t *sub_1001C941C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v11 = *(int *)(sub_100037A5C(&qword_100266FD8) + 48);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 3) = v9;
      (**(void (***)(uint64_t *, uint64_t *))(v9 - 8))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_1001C9528(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    v4 = (char *)a1 + *(int *)(sub_100037A5C(&qword_100266FD8) + 48);
    v5 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else if (!(_DWORD)result)
  {
    return sub_10002BB90(a1);
  }
  return result;
}

_BYTE *sub_1001C959C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v8 = *(int *)(sub_100037A5C(&qword_100266FD8) + 48);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(_BYTE *, _BYTE *))(v7 - 8))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_QWORD *sub_1001C9680(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_100024990((uint64_t)a1, type metadata accessor for CloudStorageStore.State);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v8 = *(int *)(sub_100037A5C(&qword_100266FD8) + 48);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = a2[3];
      a1[3] = v7;
      a1[4] = a2[4];
      (**(void (***)(_QWORD *, _QWORD *))(v7 - 8))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

_BYTE *sub_1001C9780(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    v6 = *(int *)(sub_100037A5C(&qword_100266FD8) + 48);
    v7 = &a1[v6];
    v8 = &a2[v6];
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_1001C982C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_100024990((uint64_t)a1, type metadata accessor for CloudStorageStore.State);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v6 = *(int *)(sub_100037A5C(&qword_100266FD8) + 48);
      v7 = &a1[v6];
      v8 = &a2[v6];
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001C98F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[2];

  v5[0] = "(";
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, &unk_1001FAEA8, *(_QWORD *)(result - 8) + 64);
    v5[1] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
    return 0;
  }
  return result;
}

uint64_t sub_1001C9974(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2[11] = a1;
  v2[12] = v1;
  v3 = sub_100037A5C(&qword_100267130);
  v2[13] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[14] = v4;
  v2[15] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100267138);
  v2[16] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[17] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v7);
  v2[19] = swift_task_alloc(v7);
  v8 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CloudStorageStore.State(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v8);
  v2[21] = swift_task_alloc(v8);
  return swift_task_switch(sub_1001C9A44, v1, 0);
}

uint64_t sub_1001C9A44()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  NSObject *log;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  os_log_type_t typea;
  os_log_type_t type[8];
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;

  v1 = v0 + 11;
  v2 = v0[11];
  v3 = v0[21];
  v4 = v0[12] + OBJC_IVAR____TtC13findmylocated17CloudStorageStore_state;
  swift_beginAccess(v4, v0 + 2, 0, 0);
  sub_1001CF964(v4, v3);
  LOBYTE(v2) = sub_1001CEE04(v3, v2);
  sub_100024990(v3, type metadata accessor for CloudStorageStore.State);
  if ((v2 & 1) == 0)
  {
    v5 = v0 + 5;
    v55 = v0 + 9;
    if (qword_10025FBA0 != -1)
LABEL_36:
      swift_once(&qword_10025FBA0, sub_1001C8FEC);
    v6 = v0[20];
    v8 = v0[11];
    v7 = v0[12];
    v9 = type metadata accessor for Logger(0);
    sub_100037A9C(v9, (uint64_t)qword_10027B380);
    sub_1001CF964(v8, v6);
    v10 = swift_retain_n(v7, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      typea = v12;
      v13 = v0[21];
      v49 = v0[20];
      v47 = v0[12];
      v14 = swift_slowAlloc(22, -1);
      v51 = swift_slowAlloc(64, -1);
      *(_DWORD *)v14 = 136315394;
      v57 = v51;
      sub_1001CF964(v4, v13);
      v15 = sub_1001C907C();
      log = v11;
      v17 = v16;
      sub_100024990(v13, type metadata accessor for CloudStorageStore.State);
      v0[9] = sub_10002BA84(v15, v17, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v1 - 1, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v17);
      swift_release_n(v47, 2);
      *(_WORD *)(v14 + 12) = 2080;
      v18 = sub_1001C907C();
      v20 = v19;
      v0[10] = sub_10002BA84(v18, v19, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 1, v1, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease(v20);
      sub_100024990(v49, type metadata accessor for CloudStorageStore.State);
      v11 = log;
      _os_log_impl((void *)&_mh_execute_header, log, typea, "State: %s -> %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      v21 = v0[20];
      swift_release_n(v0[12], 2);
      sub_100024990(v21, type metadata accessor for CloudStorageStore.State);
    }

    v22 = v0[11];
    v23 = v0[12];
    v56 = v0;
    swift_beginAccess(v4, v5, 33, 0);
    sub_1001CF9A8(v22, v4);
    swift_endAccess(v5);
    v24 = OBJC_IVAR____TtC13findmylocated17CloudStorageStore_stateContinuations;
    v25 = *(_QWORD *)(v23 + OBJC_IVAR____TtC13findmylocated17CloudStorageStore_stateContinuations);
    v5 = *(_QWORD **)(v25 + 16);
    if (v5)
    {
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v28 = 134217984;
        *(v1 - 3) = v5;
        v1 -= 3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v55, v28 + 4, v28 + 12);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Publishing State change event to %ld subscribers", v28, 0xCu);
        swift_slowDealloc(v28, -1, -1);
      }

      v25 = *(_QWORD *)(v23 + v24);
    }
    v0 = (_QWORD *)v56[17];
    v50 = v25 + 64;
    *(_QWORD *)type = v56[14];
    v55 = (_QWORD *)v25;
    v29 = -1;
    v30 = -1 << *(_BYTE *)(v25 + 32);
    if (-v30 < 64)
      v29 = ~(-1 << -(char)v30);
    v31 = v29 & *(_QWORD *)(v25 + 64);
    v52 = (unint64_t)(63 - v30) >> 6;
    swift_bridgeObjectRetain(v25);
    v4 = 0;
    while (1)
    {
      if (v31)
      {
        v32 = __clz(__rbit64(v31));
        v31 &= v31 - 1;
        v33 = v32 | (v4 << 6);
      }
      else
      {
        v39 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        if (v39 >= v52)
          goto LABEL_32;
        v40 = *(_QWORD *)(v50 + 8 * v39);
        ++v4;
        if (!v40)
        {
          v4 = v39 + 1;
          if (v39 + 1 >= v52)
            goto LABEL_32;
          v40 = *(_QWORD *)(v50 + 8 * v4);
          if (!v40)
          {
            v4 = v39 + 2;
            if (v39 + 2 >= v52)
              goto LABEL_32;
            v40 = *(_QWORD *)(v50 + 8 * v4);
            if (!v40)
            {
              v4 = v39 + 3;
              if (v39 + 3 >= v52)
                goto LABEL_32;
              v40 = *(_QWORD *)(v50 + 8 * v4);
              if (!v40)
              {
                v41 = v39 + 4;
                if (v41 >= v52)
                {
LABEL_32:
                  swift_release(v55);
                  v0 = v56;
                  break;
                }
                v40 = *(_QWORD *)(v50 + 8 * v41);
                if (!v40)
                {
                  while (1)
                  {
                    v4 = v41 + 1;
                    if (__OFADD__(v41, 1))
                      goto LABEL_35;
                    if (v4 >= v52)
                      goto LABEL_32;
                    v40 = *(_QWORD *)(v50 + 8 * v4);
                    ++v41;
                    if (v40)
                      goto LABEL_31;
                  }
                }
                v4 = v41;
              }
            }
          }
        }
LABEL_31:
        v31 = (v40 - 1) & v40;
        v33 = __clz(__rbit64(v40)) + (v4 << 6);
      }
      v34 = v56[21];
      v35 = v56[18];
      v1 = (_QWORD *)v56[19];
      v5 = (_QWORD *)v56[15];
      v36 = v56[16];
      v37 = v56[13];
      v38 = v56[11];
      ((void (*)(_QWORD *, unint64_t, uint64_t))v0[2])(v1, v55[7] + v0[9] * v33, v36);
      ((void (*)(uint64_t, _QWORD *, uint64_t))v0[4])(v35, v1, v36);
      sub_1001CF964(v38, v34);
      AsyncStream.Continuation.yield(_:)(v34, v36);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)type + 8))(v5, v37);
      ((void (*)(uint64_t, uint64_t))v0[1])(v35, v36);
    }
  }
  v42 = v0[20];
  v44 = v0[18];
  v43 = v0[19];
  v45 = v0[15];
  swift_task_dealloc(v0[21]);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1001CA010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = sub_100037A5C(&qword_100260D48);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v3[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Table(0);
  v3[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[14] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v8);
  v3[16] = swift_task_alloc(v8);
  return swift_task_switch(sub_1001CA0B0, 0, 0);
}

uint64_t sub_1001CA0B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 112);
  *(_QWORD *)(v0 + 136) = v1;
  return swift_task_switch(sub_1001CA0CC, v1, 0);
}

uint64_t sub_1001CA0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for CloudStorageDatabase(0);
  v2 = sub_100004EA8(&qword_100260DD0, type metadata accessor for CloudStorageDatabase, (uint64_t)&unk_1001F3D28);
  *(_QWORD *)(v0 + 144) = Database.readConnection.getter(v1, v2);
  return swift_task_switch(sub_1001CA13C, 0, 0);
}

uint64_t sub_1001CA13C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  void (*v36)(uint64_t, uint64_t, uint64_t);
  _QWORD *v37;
  uint64_t v38;

  v1 = v0[18];
  if (v1)
  {
    v37 = v0 + 2;
    if (qword_10025F848 != -1)
      swift_once(&qword_10025F848, sub_100060C38);
    v38 = v1;
    v3 = v0[14];
    v2 = v0[15];
    v4 = v0[13];
    v5 = sub_100037A9C(v4, (uint64_t)qword_10027A9A0);
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v36(v2, v5, v4);
    if (qword_10025F858 != -1)
      swift_once(&qword_10025F858, sub_1000621E4);
    v6 = v0[15];
    v7 = v0[16];
    v9 = v0[13];
    v8 = v0[14];
    v10 = v0[11];
    v11 = v0[12];
    v12 = v0[10];
    v13 = v0[8];
    v14 = sub_100037A5C(&qword_100260D40);
    v15 = sub_100037A9C(v14, (uint64_t)qword_10027A9D0);
    v16 = type metadata accessor for UUID(0);
    == infix<A>(_:_:)(v15, v13, v16, &protocol witness table for UUID, &protocol witness table for String);
    QueryType.filter(_:)(v11, v9, &protocol witness table for Table);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    v17 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v17(v6, v9);
    v0[5] = v9;
    v0[6] = &protocol witness table for Table;
    v18 = sub_10003276C(v37);
    v36((uint64_t)v18, v7, v9);
    v19 = sub_1001CFA34((uint64_t)v37);
    v20 = v0[16];
    v27 = v19;
    v28 = v0[15];
    v30 = v0[12];
    v29 = v0[13];
    v31 = sub_10002BB90(v37);
    v32 = dispatch thunk of _AnySequenceBox._makeIterator()(v31);
    v33 = swift_release(v27);
    dispatch thunk of _AnyIteratorBoxBase.next()(v33);
    swift_release(v32);
    swift_release(v38);
    v17(v20, v29);
    swift_task_dealloc(v20);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    v34 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v21 = type metadata accessor for DatabaseError(0);
    v22 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v21, v22, 0, 0);
    v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, enum case for DatabaseError.notConnected(_:), v21);
    swift_willThrow(v24);
    v25 = v0[15];
    v26 = v0[12];
    swift_task_dealloc(v0[16]);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    v34 = (uint64_t (*)(void))v0[1];
  }
  return v34();
}

uint64_t sub_1001CA408()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_1001CA420, 0, 0);
}

uint64_t sub_1001CA420()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 112);
  *(_QWORD *)(v0 + 64) = v1;
  return swift_task_switch(sub_1001CA43C, v1, 0);
}

uint64_t sub_1001CA43C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for CloudStorageDatabase(0);
  v2 = sub_100004EA8(&qword_100260DD0, type metadata accessor for CloudStorageDatabase, (uint64_t)&unk_1001F3D28);
  *(_QWORD *)(v0 + 72) = Database.readConnection.getter(v1, v2);
  return swift_task_switch(sub_1001CA4AC, 0, 0);
}

uint64_t sub_1001CA4AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 72);
  if (v1)
  {
    if (qword_10025F850 != -1)
      swift_once(&qword_10025F850, sub_100060C54);
    v2 = type metadata accessor for Table(0);
    v3 = sub_100037A9C(v2, (uint64_t)qword_10027A9B8);
    *(_QWORD *)(v0 + 40) = v2;
    *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
    v4 = sub_10003276C((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v4, v3, v2);
    v5 = sub_1001CF204(v0 + 16);
    swift_release(v1);
    sub_10002BB90((_QWORD *)(v0 + 16));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
  }
  else
  {
    v7 = type metadata accessor for DatabaseError(0);
    v8 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v7, v8, 0, 0);
    v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, enum case for DatabaseError.notConnected(_:), v7);
    swift_willThrow(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001CA618(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = sub_100037A5C(&qword_100260D48);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v3[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Table(0);
  v3[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[14] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v8);
  v3[16] = swift_task_alloc(v8);
  return swift_task_switch(sub_1001CA6B8, 0, 0);
}

uint64_t sub_1001CA6B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 112);
  *(_QWORD *)(v0 + 136) = v1;
  return swift_task_switch(sub_1001CA6D4, v1, 0);
}

uint64_t sub_1001CA6D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for CloudStorageDatabase(0);
  v2 = sub_100004EA8(&qword_100260DD0, type metadata accessor for CloudStorageDatabase, (uint64_t)&unk_1001F3D28);
  *(_QWORD *)(v0 + 144) = Database.readConnection.getter(v1, v2);
  return swift_task_switch(sub_1001CA744, 0, 0);
}

uint64_t sub_1001CA744()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  void (*v36)(uint64_t, uint64_t, uint64_t);
  _QWORD *v37;
  uint64_t v38;

  v1 = v0[18];
  if (v1)
  {
    v37 = v0 + 2;
    if (qword_10025F850 != -1)
      swift_once(&qword_10025F850, sub_100060C54);
    v38 = v1;
    v3 = v0[14];
    v2 = v0[15];
    v4 = v0[13];
    v5 = sub_100037A9C(v4, (uint64_t)qword_10027A9B8);
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v36(v2, v5, v4);
    if (qword_10025F858 != -1)
      swift_once(&qword_10025F858, sub_1000621E4);
    v6 = v0[15];
    v7 = v0[16];
    v9 = v0[13];
    v8 = v0[14];
    v10 = v0[11];
    v11 = v0[12];
    v12 = v0[10];
    v13 = v0[8];
    v14 = sub_100037A5C(&qword_100260D40);
    v15 = sub_100037A9C(v14, (uint64_t)qword_10027A9D0);
    v16 = type metadata accessor for UUID(0);
    == infix<A>(_:_:)(v15, v13, v16, &protocol witness table for UUID, &protocol witness table for String);
    QueryType.filter(_:)(v11, v9, &protocol witness table for Table);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    v17 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v17(v6, v9);
    v0[5] = v9;
    v0[6] = &protocol witness table for Table;
    v18 = sub_10003276C(v37);
    v36((uint64_t)v18, v7, v9);
    v19 = sub_1001CF204((uint64_t)v37);
    v20 = v0[16];
    v27 = v19;
    v28 = v0[15];
    v30 = v0[12];
    v29 = v0[13];
    v31 = sub_10002BB90(v37);
    v32 = dispatch thunk of _AnySequenceBox._makeIterator()(v31);
    v33 = swift_release(v27);
    dispatch thunk of _AnyIteratorBoxBase.next()(v33);
    swift_release(v32);
    swift_release(v38);
    v17(v20, v29);
    swift_task_dealloc(v20);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    v34 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v21 = type metadata accessor for DatabaseError(0);
    v22 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v21, v22, 0, 0);
    v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, enum case for DatabaseError.notConnected(_:), v21);
    swift_willThrow(v24);
    v25 = v0[15];
    v26 = v0[12];
    swift_task_dealloc(v0[16]);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    v34 = (uint64_t (*)(void))v0[1];
  }
  return v34();
}

uint64_t sub_1001CAA10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;

  v4 = sub_100037A5C((uint64_t *)&unk_100262930);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for FriendSharedSecretsRecord(0);
  v8 = (char *)a2 + v7[6];
  v30 = xmmword_1001F48A0;
  *(_OWORD *)v8 = xmmword_1001F48A0;
  v9 = (uint64_t)a2 + v7[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 56);
  v28 = v9;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11)(v9, 1, 1, v10);
  v12 = (char *)a2 + v7[8];
  *(_OWORD *)v12 = v30;
  v29 = (uint64_t)a2 + v7[9];
  v11();
  if (qword_10025F878 != -1)
    swift_once(&qword_10025F878, sub_100062418);
  *(_QWORD *)&v30 = v6;
  v13 = sub_100037A5C(&qword_100260D60);
  v14 = sub_100037A9C(v13, (uint64_t)qword_10027AA30);
  Row.subscript.getter(&v31, v14, &type metadata for Data, &protocol witness table for Data);
  if (v32 >> 60 != 15)
    __asm { BR              X10 }
  sub_100037AF8(*(_QWORD *)v8, *((_QWORD *)v8 + 1));
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0xF000000000000000;
  if (qword_10025F888 != -1)
    swift_once(&qword_10025F888, sub_100062540);
  v15 = sub_100037A9C(v13, (uint64_t)qword_10027AA60);
  Row.subscript.getter(&v31, v15, &type metadata for Data, &protocol witness table for Data);
  if (v32 >> 60 != 15)
    __asm { BR              X10 }
  sub_100037AF8(*(_QWORD *)v12, *((_QWORD *)v12 + 1));
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0xF000000000000000;
  if (qword_10025F858 != -1)
    swift_once(&qword_10025F858, sub_1000621E4);
  v16 = sub_100037A5C(&qword_100260D40);
  v17 = sub_100037A9C(v16, (uint64_t)qword_10027A9D0);
  v18 = type metadata accessor for UUID(0);
  Row.subscript.getter(a2, v17, v18, &protocol witness table for UUID);
  v19 = (_QWORD *)v30;
  if (qword_10025F870 != -1)
    swift_once(&qword_10025F870, sub_100062384);
  v20 = sub_100037A5C(&qword_100260D50);
  v21 = sub_100037A9C(v20, (uint64_t)qword_10027AA18);
  v22 = sub_100062668();
  Row.subscript.getter(&v31, v21, &type metadata for UInt8, v22);
  *((_BYTE *)a2 + v7[5]) = v31 == 1;
  if (qword_10025F880 != -1)
    swift_once(&qword_10025F880, sub_1000624AC);
  v23 = sub_100037A5C(&qword_100260D70);
  v24 = sub_100037A9C(v23, (uint64_t)qword_10027AA48);
  Row.subscript.getter(v19, v24, v10, &protocol witness table for Date);
  sub_1000D5B50((uint64_t)v19, v28);
  if (qword_10025F890 != -1)
    swift_once(&qword_10025F890, sub_1000625D4);
  v25 = sub_100037A9C(v23, (uint64_t)qword_10027AA78);
  Row.subscript.getter(v19, v25, v10, &protocol witness table for Date);
  v26 = type metadata accessor for Row(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(a1, v26);
  return sub_1000D5B50((uint64_t)v19, v29);
}

uint64_t sub_1001CAEB0()
{
  uint64_t v0;

  return swift_task_switch(sub_1001CAEC4, v0, 0);
}

uint64_t sub_1001CAEC4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;

  sub_1000312EC(0, 2, 0);
  v2 = _swiftEmptyArrayStorage[2];
  v1 = _swiftEmptyArrayStorage[3];
  v3 = v1 >> 1;
  v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    sub_1000312EC(v1 > 1, v2 + 1, 1);
    v1 = _swiftEmptyArrayStorage[3];
    v3 = v1 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v4;
  v5 = &_swiftEmptyArrayStorage[2 * v2];
  v5[4] = 0xD000000000000016;
  v5[5] = 0x8000000100201FC0;
  v6 = v2 + 2;
  if (v3 <= v4)
    sub_1000312EC(v1 > 1, v6, 1);
  _swiftEmptyArrayStorage[2] = v6;
  v7 = (char *)&_swiftEmptyArrayStorage[2 * v4];
  strcpy(v7 + 32, "SharedSecrets");
  *((_WORD *)v7 + 23) = -4864;
  v8 = sub_10016B5B4((uint64_t)_swiftEmptyArrayStorage);
  swift_release(_swiftEmptyArrayStorage);
  v9 = sub_100009E04(v8);
  swift_bridgeObjectRelease(v8);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v9);
}

uint64_t sub_1001CAFFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for CloudKitCoordinator.Deletion(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  v6 = type metadata accessor for CloudKitStateChange(0);
  v2[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[10] = v7;
  v2[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001CB094, v1, 0);
}

uint64_t sub_1001CB094()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, unint64_t, uint64_t);
  uint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;

  if (qword_10025FBA0 != -1)
    swift_once(&qword_10025FBA0, sub_1001C8FEC);
  v1 = v0 + 3;
  v2 = v0[3];
  v4 = v0[10];
  v3 = v0[11];
  v5 = v0[9];
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027B380);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v12 = v0[10];
  v11 = v0[11];
  v13 = v0[9];
  v49 = v0;
  if (v10)
  {
    v47 = v0 + 2;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = (char *)swift_slowAlloc(32, -1);
    v50 = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = sub_100004EA8(&qword_100267190, (uint64_t (*)(uint64_t))&type metadata accessor for CloudKitStateChange, (uint64_t)&protocol conformance descriptor for CloudKitStateChange);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    v19 = v18;
    *v47 = sub_10002BA84(v17, v18, (uint64_t *)&v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v47, v1, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "ingest:stateChange %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  v20 = CloudKitStateChange.deleted.getter();
  v21 = v20;
  v22 = *(_QWORD *)(v20 + 16);
  if (v22)
  {
    v23 = v49;
    v24 = v49[6];
    v50 = (char *)_swiftEmptyArrayStorage;
    sub_1001E7988(0, v22, 0);
    v48 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    v25 = v21 + v48;
    v26 = *(_QWORD *)(v24 + 72);
    v45 = v21;
    v46 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v24 + 16);
    v27 = v50;
    do
    {
      v28 = v23[7];
      v29 = v23[5];
      v30 = v46(v28, v25, v29);
      v31 = v24;
      v32 = CloudKitCoordinator.Deletion.recordType.getter(v30);
      v34 = v33;
      v35 = CloudKitCoordinator.Deletion.recordID.getter(v32);
      v36 = v32;
      v24 = v31;
      CloudKitCoordinator.Deletion.init(recordType:recordID:)(v36, v34, v35);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v28, v29);
      if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      {
        sub_1001E7988(0, *((_QWORD *)v27 + 2) + 1, 1);
        v27 = v50;
      }
      v38 = *((_QWORD *)v27 + 2);
      v37 = *((_QWORD *)v27 + 3);
      v23 = v49;
      if (v38 >= v37 >> 1)
      {
        sub_1001E7988(v37 > 1, v38 + 1, 1);
        v27 = v50;
      }
      v39 = v49[8];
      v40 = v49[5];
      *((_QWORD *)v27 + 2) = v38 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(&v27[v48 + v38 * v26], v39, v40);
      v50 = v27;
      v25 += v26;
      --v22;
    }
    while (v22);
    v41 = swift_bridgeObjectRelease(v45);
  }
  else
  {
    v41 = swift_bridgeObjectRelease(v20);
    v27 = (char *)_swiftEmptyArrayStorage;
    v23 = v49;
  }
  v23[12] = v27;
  v42 = CloudKitStateChange.modified.getter(v41);
  v23[13] = v42;
  v43 = (_QWORD *)swift_task_alloc(dword_1002670EC);
  v23[14] = v43;
  *v43 = v23;
  v43[1] = sub_1001CB434;
  return sub_1001CB560((uint64_t)v27, v42);
}

uint64_t sub_1001CB434()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001CB4FC;
  else
    v4 = sub_1001CB498;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 32), 0);
}

uint64_t sub_1001CB498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CB4FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CB560(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  v4 = type metadata accessor for UUID(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001CB5CC, v2, 0);
}

uint64_t sub_1001CB5CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 112);
  *(_QWORD *)(v0 + 72) = v1;
  return swift_task_switch(sub_1001CB5E8, v1, 0);
}

uint64_t sub_1001CB5E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for CloudStorageDatabase(0);
  v3 = sub_100004EA8(&qword_100260DD0, type metadata accessor for CloudStorageDatabase, (uint64_t)&unk_1001F3D28);
  *(_QWORD *)(v0 + 80) = Database.writeConnection.getter(v2, v3);
  return swift_task_switch(sub_1001CB664, v1, 0);
}

uint64_t sub_1001CB664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 80);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 56);
    v2 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 40);
    v19 = *(_QWORD *)(v0 + 48);
    v6 = *(_QWORD *)(v0 + 24);
    v5 = *(_QWORD *)(v0 + 32);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = sub_10016B5B4((uint64_t)&off_10024F3C8);
    swift_arrayDestroy(&unk_10024F3E8, 1, &type metadata for String);
    v9 = (_QWORD *)swift_task_alloc(64);
    v9[2] = v7;
    v9[3] = v5;
    v9[4] = v8;
    v9[5] = v1;
    v9[6] = v6;
    v9[7] = v4;
    v10 = UUID.init()(v9);
    v11 = UUID.uuidString.getter(v10);
    v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v19);
    Connection.savepoint(_:block:)(v11, v13, sub_1001CF700, v9);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v8);
    swift_release(v1);
    swift_task_dealloc(v9);
  }
  else
  {
    v14 = type metadata accessor for DatabaseError(0);
    v15 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v14, v15, 0, 0);
    v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, enum case for DatabaseError.notConnected(_:), v14);
    swift_willThrow(v17);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CB7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __n128 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  BOOL v84;
  _DWORD *v85;
  uint64_t v86;
  void *v87;
  char *v88;
  id v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint8_t *v94;
  unint64_t v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  os_log_type_t v98;
  uint8_t *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t (*v107)(char *, uint64_t);
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  char *v113;
  void (*v114)(uint64_t, uint64_t);
  char *v115;
  void (*v116)(char *, uint64_t);
  char v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  __n128 v134;
  uint64_t v135;
  unsigned __int8 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __n128 v150;
  uint64_t v151;
  id v152;
  void *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char v167;
  unint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  id v178;
  __n128 v179;
  uint64_t v180;
  unsigned __int8 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t ObjectType;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  id v197;
  NSObject *v198;
  os_log_type_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  __n128 v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  void (*v243)(char *, uint64_t);
  _DWORD *v244;
  unint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  __n128 v254;
  unint64_t v255;
  unint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t (*v262)(char *, uint64_t, uint64_t);
  uint64_t v263;
  _QWORD v264[4];
  _QWORD v265[4];
  uint64_t v266;
  uint64_t v267;

  v234 = a6;
  v245 = a5;
  v248 = a4;
  v247 = a3;
  v253 = a2;
  v236 = type metadata accessor for Insert(0);
  v235 = *(_QWORD *)(v236 - 8);
  __chkstk_darwin(v236);
  v8 = (char *)&v217 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C((uint64_t *)&unk_100265180);
  v10 = __chkstk_darwin(v9);
  v233 = (char *)&v217 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v246 = (char *)&v217 - v12;
  v231 = sub_100037A5C(&qword_100260D48);
  v230 = *(_QWORD *)(v231 - 8);
  __chkstk_darwin(v231);
  v229 = (char *)&v217 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = type metadata accessor for Delete(0);
  v225 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v251 = (char *)&v217 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  __chkstk_darwin(v15);
  v258 = (char *)&v217 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v256 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v223 = (char *)&v217 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = v19;
  __chkstk_darwin(v18);
  v250 = (char *)&v217 - v20;
  v21 = sub_100037A5C(&qword_1002670F0);
  v22 = __chkstk_darwin(v21);
  v239 = (char *)&v217 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v257 = (char *)&v217 - v24;
  v25 = type metadata accessor for Table(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v240 = (char *)&v217 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v228 = (char *)&v217 - v30;
  __chkstk_darwin(v29);
  v260 = (char *)&v217 - v31;
  v232 = type metadata accessor for CloudKitCoordinator.Deletion(0);
  v32 = *(_QWORD *)(v232 - 8);
  v33 = __chkstk_darwin(v232);
  v34 = __chkstk_darwin(v33);
  v227 = (char *)&v217 - v35;
  __chkstk_darwin(v34);
  v241 = (char *)&v217 - v37;
  v38 = *(char **)(a1 + 16);
  v238 = v8;
  v259 = v25;
  v263 = v26;
  if (!v38)
  {
LABEL_57:
    v147 = v245;
    v148 = (uint64_t)v240;
    if (v245 >> 62)
      goto LABEL_118;
    v149 = *(_QWORD *)((v245 & 0xFFFFFFFFFFFFF8) + 0x10);
    v150 = swift_bridgeObjectRetain(v245);
LABEL_59:
    if (!v149)
    {
LABEL_109:
      v207 = v147;
      return swift_bridgeObjectRelease(v207);
    }
    v260 = (char *)(v147 & 0xC000000000000001);
    v151 = 4;
    v257 = (char *)&type metadata for () + 8;
    v256 = (unint64_t)"";
    v255 = 0x8000000100201FA0;
    v150.n128_u64[0] = 136315138;
    v254 = v150;
    v252 = (char *)&type metadata for Any + 8;
    v258 = (char *)v149;
    while (1)
    {
      if (v260)
        v152 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v151 - 4, v147, v150);
      else
        v152 = *(id *)(v147 + 8 * v151);
      v153 = v152;
      if (__OFADD__(v151 - 4, 1))
      {
        __break(1u);
LABEL_118:
        if (v147 < 0)
          v216 = v147;
        else
          v216 = v147 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v147);
        v149 = _CocoaArrayWrapper.endIndex.getter(v216);
        goto LABEL_59;
      }
      v262 = (uint64_t (*)(char *, uint64_t, uint64_t))(v151 - 3);
      v155 = CKRecord.recordType.getter(v152);
      v156 = v154;
      if (v155 == 0x65636E6546 && v154 == 0xE500000000000000)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6546, 0xE500000000000000, v155, v154, 0) & 1) != 0)
      {
        v157 = v156;
LABEL_70:
        swift_bridgeObjectRelease(v157);
        v158 = qword_10027A9A0;
        if (qword_10025F848 != -1)
        {
          swift_once(&qword_10025F848, sub_100060C38);
          v158 = qword_10027A9A0;
        }
        goto LABEL_72;
      }
      if (v155 == 0xD000000000000019 && v156 == (v256 | 0x8000000000000000))
      {
        swift_bridgeObjectRelease(v256 | 0x8000000000000000);
      }
      else
      {
        v169 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, v256 | 0x8000000000000000, v155, v156, 0);
        swift_bridgeObjectRelease(v156);
        if ((v169 & 1) == 0)
        {
          v190 = (uint64_t)v239;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v263 + 56))(v239, 1, 1, v25);
          v191 = sub_1000087A0(v190, &qword_1002670F0);
          v192 = CKRecord.recordType.getter(v191);
          v194 = v193;
          v195 = sub_10001A808(v192, v193, v247);
          swift_bridgeObjectRelease(v194);
          if ((v195 & 1) != 0)
          {

          }
          else
          {
            if (qword_10025FBA0 != -1)
              swift_once(&qword_10025FBA0, sub_1001C8FEC);
            v196 = type metadata accessor for Logger(0);
            sub_100037A9C(v196, (uint64_t)qword_10027B380);
            v197 = v153;
            v198 = Logger.logObject.getter(v197);
            v199 = static os_log_type_t.error.getter(v198);
            if (os_log_type_enabled(v198, v199))
            {
              v200 = swift_slowAlloc(12, -1);
              v201 = swift_slowAlloc(32, -1);
              v251 = (char *)v201;
              v266 = v201;
              *(_DWORD *)v200 = v254.n128_u32[0];
              v202 = CKRecord.recordType.getter(v201);
              v204 = v203;
              *(_QWORD *)(v200 + 4) = sub_10002BA84(v202, v203, &v266);

              swift_bridgeObjectRelease(v204);
              _os_log_impl((void *)&_mh_execute_header, v198, v199, "Unable to find table for %s", (uint8_t *)v200, 0xCu);
              v205 = v251;
              swift_arrayDestroy(v251, 1, v252);
              swift_slowDealloc(v205, -1, -1);
              v206 = v200;
              v149 = (uint64_t)v258;
              swift_slowDealloc(v206, -1, -1);

            }
            else
            {

            }
            v25 = v259;
          }
          goto LABEL_99;
        }
      }
      v158 = qword_10027A9B8;
      if (qword_10025F850 != -1)
      {
        swift_once(&qword_10025F850, sub_100060C54);
        v158 = qword_10027A9B8;
      }
LABEL_72:
      v159 = sub_100037A9C(v25, (uint64_t)v158);
      v160 = v263;
      v161 = v239;
      (*(void (**)(char *, uint64_t, uint64_t))(v263 + 16))(v239, v159, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v160 + 56))(v161, 0, 1, v25);
      v162 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v160 + 32))(v148, v161, v25);
      v164 = CKRecord.recordType.getter(v162);
      v165 = v163;
      if (v164 == 0x65636E6546 && v163 == 0xE500000000000000)
      {
        v166 = 0xE500000000000000;
      }
      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6546, 0xE500000000000000, v164, v163, 0) & 1) == 0)
        {
          if (v164 == 0xD000000000000019 && v165 == v255)
          {
            v168 = v256 | 0x8000000000000000;
          }
          else
          {
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, v256 | 0x8000000000000000, v164, v165, 0) & 1) == 0)
            {
              v209 = sub_1001CF720();
              v210 = swift_allocError(&type metadata for CloudStorageStore.Error, v209, 0, 0);
              *v211 = v164;
              v211[1] = v165;
              v261 = v210;
              swift_willThrow(v210);

              goto LABEL_111;
            }
            v168 = v165;
          }
          swift_bridgeObjectRelease(v168);
          v167 = 1;
          goto LABEL_90;
        }
        v166 = v165;
      }
      swift_bridgeObjectRelease(v166);
      v167 = 0;
LABEL_90:
      v170 = v261;
      sub_1001CD0B4(v167, v148, v153, (uint64_t)v8);
      if (v170)
      {
        v261 = v170;

LABEL_111:
        (*(void (**)(uint64_t, uint64_t))(v263 + 8))(v148, v25);
        v208 = &v267;
        goto LABEL_115;
      }
      Connection.run(_:)(v8);
      v261 = 0;
      v171 = type metadata accessor for TaskPriority(0);
      v172 = *(_QWORD *)(v171 - 8);
      v173 = (uint64_t)v233;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56))(v233, 1, 1, v171);
      v174 = sub_100004EA8(&qword_100267108, type metadata accessor for CloudStorageStore, (uint64_t)&unk_1001FAF70);
      v175 = swift_allocObject(&unk_100258090, 64, 7);
      v176 = v253;
      *(_QWORD *)(v175 + 16) = v253;
      *(_QWORD *)(v175 + 24) = v174;
      *(_BYTE *)(v175 + 32) = v167;
      *(_QWORD *)(v175 + 40) = v153;
      *(_QWORD *)(v175 + 48) = v176;
      *(_QWORD *)(v175 + 56) = v234;
      v177 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v172 + 48))(v173, 1, v171);
      swift_retain_n(v176, 2);
      v178 = v153;
      if (v177 == 1)
      {
        sub_1000087A0(v173, (uint64_t *)&unk_100265180);
        v180 = 0;
      }
      else
      {
        v181 = TaskPriority.rawValue.getter(v179);
        (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v173, v171);
        v180 = v181;
      }
      v182 = *(_QWORD *)(v175 + 16);
      v8 = v238;
      v148 = (uint64_t)v240;
      if (v182
        && (v183 = *(_QWORD *)(v175 + 24),
            ObjectType = swift_getObjectType(*(_QWORD *)(v175 + 16)),
            swift_unknownObjectRetain(v182),
            v185 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v183),
            v187 = v186,
            swift_unknownObjectRelease(v182),
            v187 | v185))
      {
        v265[0] = 0;
        v265[1] = 0;
        v188 = v265;
        v265[2] = v185;
        v265[3] = v187;
      }
      else
      {
        v188 = 0;
      }
      v149 = (uint64_t)v258;
      v189 = swift_task_create(v180 | 0x1C00, v188, v257, &unk_100267110, v175);

      swift_release(v189);
      (*(void (**)(char *, uint64_t))(v235 + 8))(v8, v236);
      v25 = v259;
      (*(void (**)(uint64_t, uint64_t))(v263 + 8))(v148, v259);
LABEL_99:
      ++v151;
      v147 = v245;
      if (v262 == (uint64_t (*)(char *, uint64_t, uint64_t))v149)
        goto LABEL_109;
    }
    v157 = 0xE500000000000000;
    goto LABEL_70;
  }
  v222 = v36;
  v39 = a1 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
  v255 = *(_QWORD *)(v32 + 72);
  v262 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 16);
  v217 = a1;
  v40 = swift_bridgeObjectRetain(a1);
  v40.n128_u64[0] = 136315138;
  v221 = v40;
  v219 = (char *)&type metadata for Any + 8;
  v220 = (char *)&type metadata for () + 8;
  v237 = (unint64_t)"";
  v218 = 0x8000000100201FA0;
  v254.n128_u64[0] = v17;
  v249 = v32;
  v41 = v241;
  v42 = v232;
  while (1)
  {
    v43 = v42;
    v44 = v262(v41, v39, v42);
    v46 = CloudKitCoordinator.Deletion.recordType.getter(v44);
    v47 = v45;
    if (v46 == 0x65636E6546 && v45 == 0xE500000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6546, 0xE500000000000000, v46, v45, 0) & 1) != 0)
    {
      v48 = qword_10027A9A0;
      if (qword_10025F848 != -1)
      {
        swift_once(&qword_10025F848, sub_100060C38);
        v48 = qword_10027A9A0;
      }
LABEL_10:
      v49 = sub_100037A9C(v25, (uint64_t)v48);
      v50 = (uint64_t)v257;
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v257, v49, v25);
      v51 = 0;
      goto LABEL_11;
    }
    if (v46 == 0xD000000000000019 && v47 == (v237 | 0x8000000000000000)
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, v237 | 0x8000000000000000, v46, v47, 0) & 1) != 0)
    {
      v48 = qword_10027A9B8;
      if (qword_10025F850 != -1)
      {
        swift_once(&qword_10025F850, sub_100060C54);
        v48 = qword_10027A9B8;
      }
      goto LABEL_10;
    }
    v51 = 1;
    v50 = (uint64_t)v257;
LABEL_11:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v50, v51, 1, v25);
    swift_bridgeObjectRelease(v47);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v50, 1, v25) != 1)
      break;
    v52 = sub_1000087A0(v50, &qword_1002670F0);
    v53 = CloudKitCoordinator.Deletion.recordType.getter(v52);
    v55 = v54;
    v56 = sub_10001A808(v53, v54, v247);
    swift_bridgeObjectRelease(v55);
    if ((v56 & 1) != 0)
    {
      v42 = v43;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v41, v43);
    }
    else
    {
      v252 = v38;
      if (qword_10025FBA0 != -1)
        swift_once(&qword_10025FBA0, sub_1001C8FEC);
      v57 = type metadata accessor for Logger(0);
      sub_100037A9C(v57, (uint64_t)qword_10027B380);
      v58 = v222;
      v59 = v262(v222, (uint64_t)v41, v43);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.error.getter(v60);
      if (os_log_type_enabled(v60, v61))
      {
        v62 = swift_slowAlloc(12, -1);
        v63 = swift_slowAlloc(32, -1);
        v266 = v63;
        *(_DWORD *)v62 = v221.n128_u32[0];
        v64 = CloudKitCoordinator.Deletion.recordType.getter(v63);
        v66 = v65;
        *(_QWORD *)(v62 + 4) = sub_10002BA84(v64, v65, &v266);
        swift_bridgeObjectRelease(v66);
        v67 = *(void (**)(uint64_t, uint64_t))(v249 + 8);
        v67((uint64_t)v58, v43);
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Unable to find table for %s", (uint8_t *)v62, 0xCu);
        swift_arrayDestroy(v63, 1, v219);
        v68 = v63;
        v26 = v263;
        swift_slowDealloc(v68, -1, -1);
        v69 = v62;
        v32 = v249;
        swift_slowDealloc(v69, -1, -1);

        v67((uint64_t)v41, v43);
      }
      else
      {

        v114 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v114((uint64_t)v58, v43);
        v114((uint64_t)v41, v43);
      }
      v25 = v259;
      v38 = v252;
      v42 = v43;
    }
LABEL_4:
    v39 += v255;
    if (!--v38)
    {
      swift_bridgeObjectRelease(v217);
      v8 = v238;
      goto LABEL_57;
    }
  }
  v70 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 32))(v260, v50, v25);
  v71 = (void *)CloudKitCoordinator.Deletion.recordID.getter(v70);
  v72 = objc_msgSend(v71, "recordName");

  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
  v75 = v74;

  UUID.init(uuidString:)(v73, v75);
  v76 = (uint64_t)v258;
  swift_bridgeObjectRelease(v75);
  v77 = v256;
  v78 = v254.n128_u64[0];
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v256 + 48))(v76, 1, v254.n128_u64[0]) == 1)
  {
    sub_1000087A0(v76, (uint64_t *)&unk_1002675F0);
    if (qword_10025FBA0 != -1)
      swift_once(&qword_10025FBA0, sub_1001C8FEC);
    v79 = type metadata accessor for Logger(0);
    sub_100037A9C(v79, (uint64_t)qword_10027B380);
    v80 = v227;
    v81 = v262(v227, (uint64_t)v41, v43);
    v82 = Logger.logObject.getter(v81);
    v83 = static os_log_type_t.error.getter(v82);
    v84 = os_log_type_enabled(v82, v83);
    v26 = v263;
    if (v84)
    {
      v85 = (_DWORD *)swift_slowAlloc(12, -1);
      v244 = v85;
      v86 = swift_slowAlloc(32, -1);
      v252 = (char *)v86;
      v266 = v86;
      *v85 = v221.n128_u32[0];
      v87 = (void *)CloudKitCoordinator.Deletion.recordID.getter(v86);
      v88 = v38;
      v89 = objc_msgSend(v87, "recordName");

      v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
      v92 = v91;

      v38 = v88;
      v93 = sub_10002BA84(v90, v92, &v266);
      v94 = (uint8_t *)v244;
      *(_QWORD *)(v244 + 1) = v93;
      v95 = v92;
      v26 = v263;
      swift_bridgeObjectRelease(v95);
      v96 = v80;
      v32 = v249;
      v97 = *(void (**)(char *, uint64_t))(v249 + 8);
      v97(v96, v43);
      v98 = v83;
      v99 = v94;
      _os_log_impl((void *)&_mh_execute_header, v82, v98, "Record name is not a UUID: %s", v94, 0xCu);
      v100 = v252;
      swift_arrayDestroy(v252, 1, (char *)&type metadata for Any + 8);
      v101 = v100;
      v41 = v241;
      swift_slowDealloc(v101, -1, -1);
      swift_slowDealloc(v99, -1, -1);

      v25 = v259;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v260, v259);
      v97(v41, v43);
    }
    else
    {

      v115 = v80;
      v32 = v249;
      v116 = *(void (**)(char *, uint64_t))(v249 + 8);
      v116(v115, v43);
      v25 = v259;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v260, v259);
      v116(v41, v43);
    }
    v42 = v43;
    goto LABEL_4;
  }
  v102 = v250;
  v244 = *(_DWORD **)(v77 + 32);
  ((void (*)(char *, uint64_t, unint64_t))v244)(v250, v76, v78);
  if (qword_10025F858 != -1)
    swift_once(&qword_10025F858, sub_1000621E4);
  v103 = sub_100037A5C(&qword_100260D40);
  v104 = sub_100037A9C(v103, (uint64_t)qword_10027A9D0);
  v105 = v229;
  == infix<A>(_:_:)(v104, v102, v78, &protocol witness table for UUID, &protocol witness table for String);
  v106 = v228;
  QueryType.filter(_:)(v105, v25, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v230 + 8))(v105, v231);
  QueryType.delete()(v25, &protocol witness table for Table);
  v107 = *(uint64_t (**)(char *, uint64_t))(v263 + 8);
  v108 = v107(v106, v25);
  v110 = CloudKitCoordinator.Deletion.recordType.getter(v108);
  v111 = v109;
  if (v110 == 0x65636E6546 && v109 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    v112 = 0;
    v113 = v246;
LABEL_45:
    v119 = v261;
    Connection.run(_:)(v251);
    v261 = v119;
    if (v119)
      goto LABEL_114;
    v242 = v39;
    v243 = (void (*)(char *, uint64_t))v107;
    v252 = v38;
    v120 = v112;
    v121 = type metadata accessor for TaskPriority(0);
    v122 = *(_QWORD *)(v121 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v122 + 56))(v113, 1, 1, v121);
    v123 = v256;
    v124 = v223;
    v125 = v254.n128_u64[0];
    (*(void (**)(char *, char *, unint64_t))(v256 + 16))(v223, v250, v254.n128_u64[0]);
    v126 = sub_100004EA8(&qword_100267108, type metadata accessor for CloudStorageStore, (uint64_t)&unk_1001FAF70);
    v127 = *(unsigned __int8 *)(v123 + 80);
    v128 = (v127 + 41) & ~v127;
    v129 = swift_allocObject(&unk_1002580B8, v128 + v224, v127 | 7);
    v130 = v253;
    *(_QWORD *)(v129 + 16) = v253;
    *(_QWORD *)(v129 + 24) = v126;
    *(_QWORD *)(v129 + 32) = v130;
    *(_BYTE *)(v129 + 40) = v120;
    v131 = v129 + v128;
    v132 = (uint64_t)v246;
    ((void (*)(uint64_t, char *, unint64_t))v244)(v131, v124, v125);
    v133 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v132, 1, v121);
    swift_retain_n(v130, 2);
    if (v133 == 1)
    {
      sub_1000087A0(v132, (uint64_t *)&unk_100265180);
      v135 = 0;
    }
    else
    {
      v136 = TaskPriority.rawValue.getter(v134);
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v132, v121);
      v135 = v136;
    }
    v39 = v242;
    v137 = *(_QWORD *)(v129 + 16);
    v26 = v263;
    v138 = v232;
    v41 = v241;
    if (v137)
    {
      v139 = *(_QWORD *)(v129 + 24);
      v140 = swift_getObjectType(*(_QWORD *)(v129 + 16));
      swift_unknownObjectRetain(v137);
      v141 = dispatch thunk of Actor.unownedExecutor.getter(v140, v139);
      v143 = v142;
      swift_unknownObjectRelease(v137);
    }
    else
    {
      v141 = 0;
      v143 = 0;
    }
    v32 = v249;
    v144 = swift_allocObject(&unk_1002580E0, 32, 7);
    *(_QWORD *)(v144 + 16) = &unk_100267120;
    *(_QWORD *)(v144 + 24) = v129;
    if (v143 | v141)
    {
      v264[0] = 0;
      v264[1] = 0;
      v145 = v264;
      v264[2] = v141;
      v264[3] = v143;
    }
    else
    {
      v145 = 0;
    }
    v25 = v259;
    v146 = swift_task_create(v135 | 0x1C00, v145, v220, &unk_100260800, v144);
    swift_release(v146);
    (*(void (**)(char *, uint64_t))(v225 + 8))(v251, v226);
    (*(void (**)(char *, unint64_t))(v256 + 8))(v250, v254.n128_u64[0]);
    v243(v260, v25);
    v42 = v138;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v41, v138);
    v38 = v252;
    goto LABEL_4;
  }
  v117 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6546, 0xE500000000000000, v110, v109, 0);
  v113 = v246;
  if ((v117 & 1) != 0)
  {
    swift_bridgeObjectRelease(v111);
    v112 = 0;
    goto LABEL_45;
  }
  if (v110 == 0xD000000000000019 && v111 == v218)
  {
    v118 = v237 | 0x8000000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v118);
    v112 = 1;
    goto LABEL_45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, v237 | 0x8000000000000000, v110, v111, 0) & 1) != 0)
  {
    v118 = v111;
    goto LABEL_44;
  }
  v212 = sub_1001CF720();
  v213 = swift_allocError(&type metadata for CloudStorageStore.Error, v212, 0, 0);
  *v214 = v110;
  v214[1] = v111;
  v261 = v213;
  swift_willThrow(v213);
LABEL_114:
  (*(void (**)(char *, uint64_t))(v225 + 8))(v251, v226);
  (*(void (**)(char *, unint64_t))(v256 + 8))(v250, v254.n128_u64[0]);
  v107(v260, v25);
  (*(void (**)(char *, uint64_t))(v249 + 8))(v41, v43);
  v208 = &v248;
LABEL_115:
  v207 = *(v208 - 32);
  return swift_bridgeObjectRelease(v207);
}

uint64_t sub_1001CCF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;

  *(_BYTE *)(v6 + 56) = a5;
  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(v6 + 24) = a6;
  v8 = type metadata accessor for CloudStorageStore.State(0);
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001CCF9C, a4, 0);
}

uint64_t sub_1001CCF9C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  char v4;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_BYTE **)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 56) & 1;
  v5 = &v2[*(int *)(sub_100037A5C(&qword_100266FD8) + 48)];
  *v2 = v4;
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5, v3, v6);
  swift_storeEnumTagMultiPayload(v2, v1, 1);
  v7 = (_QWORD *)swift_task_alloc(dword_10026712C);
  *(_QWORD *)(v0 + 48) = v7;
  *v7 = v0;
  v7[1] = sub_1001CD054;
  return sub_1001C9974(*(_QWORD *)(v0 + 40));
}

uint64_t sub_1001CD054()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 40);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  sub_100024990(v1, type metadata accessor for CloudStorageStore.State);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_1001CD0B4(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  unint64_t v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  void *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  unint64_t v96;

  v89 = a4;
  v90 = a2;
  v91 = sub_100037A5C(&qword_100260D60);
  v7 = *(_QWORD *)(v91 - 8);
  v8 = __chkstk_darwin(v91);
  v87 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v82 - v10;
  v88 = type metadata accessor for FriendSharedSecretsRecord(0);
  __chkstk_darwin(v88);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OnConflict(0);
  v93 = *(_QWORD *)(v14 - 8);
  v94 = v14;
  v15 = __chkstk_darwin(v14);
  v92 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v82 - v17;
  v19 = type metadata accessor for Fence(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a3;
  if ((a1 & 1) != 0)
  {
    sub_1000D5254(v22, (uint64_t)v13);
    if (v4)
      return;
    (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v92, enum case for OnConflict.replace(_:), v94);
    v44 = sub_100037A5C(&qword_100267178);
    v45 = *(_QWORD *)(type metadata accessor for Setter(0) - 8);
    v46 = *(_QWORD *)(v45 + 72);
    v47 = swift_allocObject(v44, ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80)) + 6 * v46, *(unsigned __int8 *)(v45 + 80) | 7);
    *(_OWORD *)(v47 + 16) = xmmword_1001FAE20;
    v85 = v47;
    if (qword_10025F858 != -1)
      swift_once(&qword_10025F858, sub_1000621E4);
    v86 = 0;
    v48 = sub_100037A5C(&qword_100260D40);
    v49 = sub_100037A9C(v48, (uint64_t)qword_10027A9D0);
    v50 = type metadata accessor for UUID(0);
    <- infix<A>(_:_:)(v49, v13, v50, &protocol witness table for UUID);
    v51 = (int *)v88;
    if (qword_10025F870 != -1)
      swift_once(&qword_10025F870, sub_100062384);
    v52 = sub_100037A5C(&qword_100260D50);
    v53 = sub_100037A9C(v52, (uint64_t)qword_10027AA18);
    LOBYTE(v95) = v13[v51[5]];
    v54 = sub_100062668();
    <- infix<A>(_:_:)(v53, &v95, &type metadata for UInt8, v54);
    if (qword_10025F878 != -1)
      swift_once(&qword_10025F878, sub_100062418);
    v55 = v91;
    v56 = sub_100037A9C(v91, (uint64_t)qword_10027AA30);
    v57 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v57(v11, v56, v55);
    v58 = &v13[v51[6]];
    v60 = *(void **)v58;
    v59 = *((_QWORD *)v58 + 1);
    if (v59 >> 60 == 15)
      v60 = 0;
    v61 = 0xF000000000000000;
    if (v59 >> 60 != 15)
      v61 = v59;
    v95 = v60;
    v96 = v61;
    <- infix<A>(_:_:)(v11, &v95, &type metadata for Data, &protocol witness table for Data);
    v83 = *(void (**)(char *, uint64_t))(v7 + 8);
    v83(v11, v55);
    v84 = v46;
    if (qword_10025F880 != -1)
      swift_once(&qword_10025F880, sub_1000624AC);
    v62 = sub_100037A5C(&qword_100260D70);
    v63 = sub_100037A9C(v62, (uint64_t)qword_10027AA48);
    v64 = v51;
    v65 = &v13[v51[7]];
    v66 = type metadata accessor for Date(0);
    <- infix<A>(_:_:)(v63, v65, v66, &protocol witness table for Date);
    if (qword_10025F888 != -1)
      swift_once(&qword_10025F888, sub_100062540);
    v67 = v91;
    v68 = sub_100037A9C(v91, (uint64_t)qword_10027AA60);
    v69 = v87;
    v57(v87, v68, v67);
    v70 = &v13[v64[8]];
    v72 = *(void **)v70;
    v71 = *((_QWORD *)v70 + 1);
    if (v71 >> 60 == 15)
      v72 = 0;
    v73 = 0xF000000000000000;
    if (v71 >> 60 != 15)
      v73 = v71;
    v95 = v72;
    v96 = v73;
    <- infix<A>(_:_:)(v69, &v95, &type metadata for Data, &protocol witness table for Data);
    v83(v69, v67);
    if (qword_10025F890 != -1)
      swift_once(&qword_10025F890, sub_1000625D4);
    v74 = sub_100037A9C(v62, (uint64_t)qword_10027AA78);
    <- infix<A>(_:_:)(v74, &v13[v64[9]], v66, &protocol witness table for Date);
    v75 = type metadata accessor for Table(0);
    v76 = v92;
    v77 = v85;
    QueryType.insert(or:_:)(v92, v85, v75, &protocol witness table for Table);
    swift_bridgeObjectRelease(v77);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v76, v94);
    v78 = type metadata accessor for FriendSharedSecretsRecord;
    v79 = (uint64_t)v13;
    goto LABEL_34;
  }
  sub_1001D6B58(v22, v21);
  if (v4)
    return;
  v23 = (void *)objc_opt_self(NSKeyedArchiver);
  v24 = *(_QWORD *)&v21[*(int *)(v19 + 24)];
  v95 = 0;
  v25 = objc_msgSend(v23, "archivedDataWithRootObject:requiringSecureCoding:error:", v24, 1, &v95);
  v26 = v95;
  if (!v25)
  {
    v80 = v26;
    _convertNSErrorToError(_:)(v26);

    swift_willThrow(v81);
    v78 = type metadata accessor for Fence;
    v79 = (uint64_t)v21;
LABEL_34:
    sub_100024990(v79, v78);
    return;
  }
  v86 = 0;
  v27 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v29 = v28;

  (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v18, enum case for OnConflict.replace(_:), v94);
  v30 = sub_100037A5C(&qword_100267178);
  v31 = *(_QWORD *)(type metadata accessor for Setter(0) - 8);
  v32 = swift_allocObject(v30, ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ 3 * *(_QWORD *)(v31 + 72), *(unsigned __int8 *)(v31 + 80) | 7);
  *(_OWORD *)(v32 + 16) = xmmword_1001F7CB0;
  if (qword_10025F858 != -1)
    swift_once(&qword_10025F858, sub_1000621E4);
  v33 = sub_100037A5C(&qword_100260D40);
  v34 = sub_100037A9C(v33, (uint64_t)qword_10027A9D0);
  v35 = type metadata accessor for UUID(0);
  <- infix<A>(_:_:)(v34, v21, v35, &protocol witness table for UUID);
  if (qword_10025F860 != -1)
    swift_once(&qword_10025F860, sub_100062268);
  v36 = sub_100037A5C(&qword_100260DB8);
  v37 = sub_100037A9C(v36, (uint64_t)qword_10027A9E8);
  v38 = &v21[*(int *)(v19 + 20)];
  v40 = *(void **)v38;
  v39 = *((_QWORD *)v38 + 1);
  v95 = v40;
  v96 = v39;
  <- infix<A>(_:_:)(v37, &v95, &type metadata for String, &protocol witness table for String);
  if (qword_10025F868 != -1)
    swift_once(&qword_10025F868, sub_1000622F4);
  v41 = sub_100037A5C(&qword_100260D68);
  v42 = sub_100037A9C(v41, (uint64_t)qword_10027AA00);
  v95 = v27;
  v96 = v29;
  <- infix<A>(_:_:)(v42, &v95, &type metadata for Data, &protocol witness table for Data);
  v43 = type metadata accessor for Table(0);
  QueryType.insert(or:_:)(v18, v32, v43, &protocol witness table for Table);
  swift_bridgeObjectRelease(v32);
  sub_100037AB4((uint64_t)v27, v29);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v18, v94);
  sub_100024990((uint64_t)v21, type metadata accessor for Fence);
}

uint64_t sub_1001CD900(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v6 + 224) = a5;
  *(_QWORD *)(v6 + 232) = a6;
  *(_BYTE *)(v6 + 360) = a4;
  v8 = type metadata accessor for CloudStorageStore.State(0);
  *(_QWORD *)(v6 + 240) = v8;
  *(_QWORD *)(v6 + 248) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_100260F80);
  *(_QWORD *)(v6 + 256) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FriendSharedSecretsRecord(0);
  *(_QWORD *)(v6 + 264) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v6 + 272) = v11;
  *(_QWORD *)(v6 + 280) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C(&qword_100267150);
  *(_QWORD *)(v6 + 288) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Fence(0);
  *(_QWORD *)(v6 + 296) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v6 + 304) = v14;
  *(_QWORD *)(v6 + 312) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001CD9FC, a6, 0);
}

uint64_t sub_1001CD9FC()
{
  uint64_t v0;
  char v1;
  id v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = *(_BYTE *)(v0 + 360);
  v2 = *(id *)(v0 + 224);
  if ((v1 & 1) != 0)
  {
    sub_1000D5254(v2, *(_QWORD *)(v0 + 280));
    v5 = (_QWORD *)swift_task_alloc(dword_1002670BC);
    *(_QWORD *)(v0 + 336) = v5;
    *v5 = v0;
    v5[1] = sub_1001CDEE0;
    return sub_1001CA618(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 280));
  }
  else
  {
    sub_1001D6B58(v2, *(char **)(v0 + 312));
    v3 = (_QWORD *)swift_task_alloc(dword_100267164);
    *(_QWORD *)(v0 + 320) = v3;
    *v3 = v0;
    v3[1] = sub_1001CDB28;
    return sub_1001CA010(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 312));
  }
}

uint64_t sub_1001CDB28()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 320);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001CE384;
  else
    v4 = sub_1001CDB8C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 232), 0);
}

uint64_t sub_1001CDB8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  char v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 304) + 48))(v2, 1, v1);
  v4 = *(_QWORD *)(v0 + 312);
  if (v3 == 1)
  {
    sub_100024990(*(_QWORD *)(v0 + 312), type metadata accessor for Fence);
    sub_1000087A0(v2, &qword_100267150);
    *(_OWORD *)(v0 + 176) = 0u;
    *(_OWORD *)(v0 + 192) = 0u;
    *(_QWORD *)(v0 + 208) = 0;
  }
  else
  {
    *(_QWORD *)(v0 + 200) = v1;
    *(_QWORD *)(v0 + 208) = sub_100004EA8(&qword_1002670D8, type metadata accessor for Fence, (uint64_t)&unk_1001FBAA0);
    v5 = sub_10003276C((_QWORD *)(v0 + 176));
    sub_1000321F4(v2, (uint64_t)v5, type metadata accessor for Fence);
    sub_100024990(v4, type metadata accessor for Fence);
  }
  sub_10000EF6C(v0 + 176, v0 + 16, &qword_100267158);
  sub_1001CF9EC(v0 + 16, v0 + 136);
  if (*(_QWORD *)(v0 + 160))
  {
    v7 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 248);
    sub_10001A4CC((__int128 *)(v0 + 136), v0 + 96);
    sub_100043ECC(v0 + 96, v6);
    swift_storeEnumTagMultiPayload(v6, v7, 0);
    v8 = (_QWORD *)swift_task_alloc(dword_10026712C);
    *(_QWORD *)(v0 + 352) = v8;
    *v8 = v0;
    v8[1] = sub_1001CE298;
    return sub_1001C9974(*(_QWORD *)(v0 + 248));
  }
  else
  {
    sub_1000087A0(v0 + 136, &qword_100267158);
    if (qword_10025FBA0 != -1)
      swift_once(&qword_10025FBA0, sub_1001C8FEC);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100037A9C(v10, (uint64_t)qword_10027B380);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = *(_BYTE *)(v0 + 360);
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      *(_DWORD *)v15 = 136315138;
      v23 = v16;
      if ((v14 & 1) != 0)
        v17 = 0xD000000000000014;
      else
        v17 = 0x65636E65662ELL;
      if ((v14 & 1) != 0)
        v18 = 0x8000000100200B00;
      else
        v18 = 0xE600000000000000;
      *(_QWORD *)(v0 + 216) = sub_10002BA84(v17, v18, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to convert %s to CloudBacked!", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    sub_1000087A0(v0 + 16, &qword_100267158);
    v19 = *(_QWORD *)(v0 + 280);
    v20 = *(_QWORD *)(v0 + 288);
    v22 = *(_QWORD *)(v0 + 248);
    v21 = *(_QWORD *)(v0 + 256);
    swift_task_dealloc(*(_QWORD *)(v0 + 312));
    swift_task_dealloc(v20);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001CDEE0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 336);
  *(_QWORD *)(*v1 + 344) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001CE400;
  else
    v4 = sub_1001CDF44;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 232), 0);
}

uint64_t sub_1001CDF44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  char v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 272) + 48))(v2, 1, v1);
  v4 = *(_QWORD *)(v0 + 280);
  if (v3 == 1)
  {
    sub_100024990(*(_QWORD *)(v0 + 280), type metadata accessor for FriendSharedSecretsRecord);
    sub_1000087A0(v2, &qword_100260F80);
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_QWORD *)(v0 + 88) = 0;
  }
  else
  {
    *(_QWORD *)(v0 + 80) = v1;
    *(_QWORD *)(v0 + 88) = sub_100004EA8(&qword_100260FB8, type metadata accessor for FriendSharedSecretsRecord, (uint64_t)&unk_1001F5398);
    v5 = sub_10003276C((_QWORD *)(v0 + 56));
    sub_1000321F4(v2, (uint64_t)v5, type metadata accessor for FriendSharedSecretsRecord);
    sub_100024990(v4, type metadata accessor for FriendSharedSecretsRecord);
  }
  sub_10000EF6C(v0 + 56, v0 + 16, &qword_100267158);
  sub_1001CF9EC(v0 + 16, v0 + 136);
  if (*(_QWORD *)(v0 + 160))
  {
    v7 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 248);
    sub_10001A4CC((__int128 *)(v0 + 136), v0 + 96);
    sub_100043ECC(v0 + 96, v6);
    swift_storeEnumTagMultiPayload(v6, v7, 0);
    v8 = (_QWORD *)swift_task_alloc(dword_10026712C);
    *(_QWORD *)(v0 + 352) = v8;
    *v8 = v0;
    v8[1] = sub_1001CE298;
    return sub_1001C9974(*(_QWORD *)(v0 + 248));
  }
  else
  {
    sub_1000087A0(v0 + 136, &qword_100267158);
    if (qword_10025FBA0 != -1)
      swift_once(&qword_10025FBA0, sub_1001C8FEC);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100037A9C(v10, (uint64_t)qword_10027B380);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = *(_BYTE *)(v0 + 360);
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      *(_DWORD *)v15 = 136315138;
      v23 = v16;
      if ((v14 & 1) != 0)
        v17 = 0xD000000000000014;
      else
        v17 = 0x65636E65662ELL;
      if ((v14 & 1) != 0)
        v18 = 0x8000000100200B00;
      else
        v18 = 0xE600000000000000;
      *(_QWORD *)(v0 + 216) = sub_10002BA84(v17, v18, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to convert %s to CloudBacked!", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    sub_1000087A0(v0 + 16, &qword_100267158);
    v19 = *(_QWORD *)(v0 + 280);
    v20 = *(_QWORD *)(v0 + 288);
    v22 = *(_QWORD *)(v0 + 248);
    v21 = *(_QWORD *)(v0 + 256);
    swift_task_dealloc(*(_QWORD *)(v0 + 312));
    swift_task_dealloc(v20);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001CE298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 352));
  sub_100024990(v1, type metadata accessor for CloudStorageStore.State);
  return swift_task_switch(sub_1001CE304, v2, 0);
}

uint64_t sub_1001CE304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10002BB90((_QWORD *)(v0 + 96));
  sub_1000087A0(v0 + 16, &qword_100267158);
  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CE384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100024990(*(_QWORD *)(v0 + 312), type metadata accessor for Fence);
  v2 = *(_QWORD *)(v0 + 280);
  v1 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CE400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100024990(*(_QWORD *)(v0 + 280), type metadata accessor for FriendSharedSecretsRecord);
  v2 = *(_QWORD *)(v0 + 280);
  v1 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CE47C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1001CE494, v0, 0);
}

uint64_t sub_1001CE494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_10025FBA0 != -1)
    swift_once(&qword_10025FBA0, sub_1001C8FEC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B380);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Purging DB", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 16);

  v7 = *(_QWORD *)(v6 + 112);
  *(_QWORD *)(v0 + 24) = v7;
  return swift_task_switch(sub_1001CE584, v7, 0);
}

uint64_t sub_1001CE584()
{
  uint64_t v0;

  type metadata accessor for CloudStorageDatabase(0);
  sub_100004EA8(&qword_100260DD0, type metadata accessor for CloudStorageDatabase, (uint64_t)&unk_1001F3D28);
  Database.purge()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001CE600(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  char *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v6 = CKRecord.recordType.getter(a1);
  v7 = v5;
  v8 = 0;
  if (v6 == 0x65636E6546 && v5 == 0xE500000000000000)
  {
LABEL_9:
    v11 = (_QWORD *)a2;
    swift_bridgeObjectRelease_n(v7, 2);
    if ((v8 & 1) != 0)
      goto LABEL_10;
    goto LABEL_14;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6546, 0xE500000000000000, v6, v5, 0);
  swift_bridgeObjectRelease(0xE500000000000000);
  if ((v10 & 1) != 0)
    goto LABEL_13;
  v8 = 1;
  if (v6 == 0xD000000000000019 && 0x8000000100201FA0 == v7)
  {
    v3 = v2;
    goto LABEL_9;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100201FA0, v6, v7, 0);
  swift_bridgeObjectRelease(0x8000000100201FA0);
  if ((v13 & 1) != 0)
  {
LABEL_13:
    swift_bridgeObjectRelease(v7);
    v3 = v2;
    v11 = (_QWORD *)a2;
    if ((v8 & 1) != 0)
    {
LABEL_10:
      v11[3] = type metadata accessor for FriendSharedSecretsRecord(0);
      v11[4] = sub_100004EA8(&qword_100260FB8, type metadata accessor for FriendSharedSecretsRecord, (uint64_t)&unk_1001F5398);
      v12 = sub_10003276C(v11);
      sub_1000D5254(a1, (uint64_t)v12);
      if (!v3)
        return;
LABEL_15:
      sub_100146170(v11);
      return;
    }
LABEL_14:
    v11[3] = type metadata accessor for Fence(0);
    v11[4] = sub_100004EA8(&qword_1002670D8, type metadata accessor for Fence, (uint64_t)&unk_1001FBAA0);
    v14 = (char *)sub_10003276C(v11);
    sub_1001D6B58(a1, v14);
    if (!v3)
      return;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease(v7);
  if (qword_10025FBA0 != -1)
    swift_once(&qword_10025FBA0, sub_1001C8FEC);
  v15 = type metadata accessor for Logger(0);
  sub_100037A9C(v15, (uint64_t)qword_10027B380);
  v16 = a1;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v27 = v20;
    *(_DWORD *)v19 = 136446210;
    v21 = CKRecord.recordType.getter(v20);
    v23 = v22;
    v25 = sub_10002BA84(v21, v22, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v19 + 4, v19 + 12);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unexpected recordType: %{public}s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

  }
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
}

uint64_t sub_1001CE96C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10026719C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10003D330;
  return swift_task_switch(sub_1001CAEC4, v0, 0);
}

uint64_t sub_1001CE9C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 128));
  return v1;
}

uint64_t sub_1001CE9F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10026718C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  return sub_1001CAFFC(a1);
}

uint64_t sub_1001CEA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch(sub_1001CEA58, v2, 0);
}

uint64_t sub_1001CEA58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[4];
  v2 = CloudKitChangeSet.recordIDsToDelete.getter();
  v3 = sub_1001C89E0(v2);
  v0[6] = v3;
  swift_bridgeObjectRelease(v2);
  v4 = sub_1001C8DB8(v1);
  v0[7] = v4;
  v5 = (uint64_t)v4;
  v6 = (_QWORD *)swift_task_alloc(dword_1002670EC);
  v0[8] = v6;
  *v6 = v0;
  v6[1] = sub_1001CEB2C;
  return sub_1001CB560(v3, v5);
}

uint64_t sub_1001CEB2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001CEBCC;
  else
    v4 = sub_1001CEB90;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), 0);
}

uint64_t sub_1001CEB90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CEBCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CEC08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1002670EC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_1001CB560(a1, a2);
}

uint64_t sub_1001CEC64()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1001CEC7C, v0, 0);
}

uint64_t sub_1001CEC7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 112);
  *(_QWORD *)(v0 + 24) = v1;
  return swift_task_switch(sub_1001CEC98, v1, 0);
}

uint64_t sub_1001CEC98()
{
  uint64_t v0;

  type metadata accessor for CloudStorageDatabase(0);
  sub_100004EA8(&qword_100260DD0, type metadata accessor for CloudStorageDatabase, (uint64_t)&unk_1001F3D28);
  Database.startup()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CED14()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1002670E4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1000087DC;
  v2[2] = v0;
  return swift_task_switch(sub_1001CE494, v0, 0);
}

void sub_1001CED70(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1001CE600(a1, a2);
}

uint64_t sub_1001CED84()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B398);
  sub_100037A9C(v0, (uint64_t)qword_10027B398);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0xD000000000000011, 0x80000001001FAE20);
}

uint64_t sub_1001CEE04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 *v29;
  int EnumCaseMultiPayload;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, unsigned __int8 *, uint64_t);
  unsigned __int8 *v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;

  v4 = type metadata accessor for UUID(0);
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  v5 = __chkstk_darwin(v4);
  v56 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v55 = (char *)&v53 - v8;
  v9 = __chkstk_darwin(v7);
  v54 = (char *)&v53 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v53 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v53 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v53 - v17;
  v19 = type metadata accessor for CloudStorageStore.State(0);
  v20 = __chkstk_darwin(v19);
  v22 = (unsigned __int8 *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (__int128 *)((char *)&v53 - v23);
  v25 = sub_100037A5C(&qword_100267148);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v53 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = (__int128 *)&v28[*(int *)(v26 + 48)];
  sub_1001CF964(a1, (uint64_t)v28);
  sub_1001CF964(a2, (uint64_t)v29);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v19);
  if (!EnumCaseMultiPayload)
  {
    sub_1001CF964((uint64_t)v28, (uint64_t)v24);
    if (!swift_getEnumCaseMultiPayload(v29, v19))
    {
      sub_10001A4CC(v24, (uint64_t)v62);
      sub_10001A4CC(v29, (uint64_t)v59);
      v45 = v63;
      v46 = v64;
      sub_100036228(v62, v63);
      dispatch thunk of CloudBacked.id.getter(v45, v46);
      v47 = v60;
      v48 = v61;
      sub_100036228(v59, v60);
      dispatch thunk of CloudBacked.id.getter(v47, v48);
      v44 = static UUID.== infix(_:_:)(v18, v16);
      v49 = v58;
      v50 = *(void (**)(char *, uint64_t))(v57 + 8);
      v50(v16, v58);
      v50(v18, v49);
      sub_10002BB90(v59);
      sub_10002BB90(v62);
LABEL_15:
      sub_100024990((uint64_t)v28, type metadata accessor for CloudStorageStore.State);
      return v44 & 1;
    }
    sub_10002BB90(v24);
    goto LABEL_11;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_1001CF964((uint64_t)v28, (uint64_t)v22);
    v31 = *(int *)(sub_100037A5C(&qword_100266FD8) + 48);
    v32 = &v22[v31];
    if (swift_getEnumCaseMultiPayload(v29, v19) == 1)
    {
      v33 = *v22;
      v34 = *(unsigned __int8 *)v29;
      v35 = (char *)v29 + v31;
      v36 = v57;
      v37 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v57 + 32);
      v38 = v32;
      v39 = v58;
      v37(v13, v38, v58);
      v40 = v54;
      v37(v54, (unsigned __int8 *)v35, v39);
      v41 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
      v42 = v55;
      v41(v55, v13, v39);
      v43 = v56;
      v41(v56, v40, v39);
      if (v33 == v34)
        v44 = static UUID.== infix(_:_:)(v42, v43);
      else
        v44 = 0;
      v51 = *(void (**)(char *, uint64_t))(v36 + 8);
      v51(v43, v39);
      v51(v42, v39);
      v51(v40, v39);
      v51(v13, v39);
      goto LABEL_15;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v57 + 8))(&v22[v31], v58);
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload(v29, v19) != 2)
  {
LABEL_11:
    sub_1000087A0((uint64_t)v28, &qword_100267148);
    v44 = 0;
    return v44 & 1;
  }
  sub_100024990((uint64_t)v28, type metadata accessor for CloudStorageStore.State);
  v44 = 1;
  return v44 & 1;
}

uint64_t sub_1001CF204(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  _QWORD *v34;
  uint64_t v35;
  void (*v36)(void);
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  v3 = type metadata accessor for FriendSharedSecretsRecord(0);
  v52 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v51 = (uint64_t *)((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v48 = (uint64_t *)((char *)&v44 - v6);
  v7 = sub_100037A5C(&qword_1002670C8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v49 = (char *)&v44 - v11;
  v12 = type metadata accessor for Row(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v44 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v44 - v20;
  result = Connection.prepare(_:)(a1);
  if (!v1)
  {
    v23 = result;
    v50 = v16;
    v46 = v21;
    v47 = v19;
    swift_retain(result);
    v24 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
    v54 = _swiftEmptyArrayStorage;
    sub_1001E7890(0, v24 & ~(v24 >> 63), 0);
    v25 = swift_retain(v23);
    v53 = dispatch thunk of _AnySequenceBox._makeIterator()(v25);
    v45 = v23;
    result = swift_release(v23);
    if (v24 < 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      return result;
    }
    if (v24)
    {
      v26 = v51;
      do
      {
        dispatch thunk of _AnyIteratorBoxBase.next()(result);
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12);
        if ((_DWORD)result == 1)
          goto LABEL_22;
        v27 = (uint64_t)v50;
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v10, v12);
        sub_1001CAA10(v27, v26);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
        v28 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_1001E7890(0, v28[2] + 1, 1);
          v28 = v54;
        }
        v30 = v28[2];
        v29 = v28[3];
        if (v30 >= v29 >> 1)
        {
          sub_1001E7890(v29 > 1, v30 + 1, 1);
          v28 = v54;
        }
        v28[2] = v30 + 1;
        v31 = (uint64_t)v28
            + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))
            + *(_QWORD *)(v52 + 72) * v30;
        v26 = v51;
        result = sub_1000321F4((uint64_t)v51, v31, type metadata accessor for FriendSharedSecretsRecord);
      }
      while (--v24);
    }
    v32 = (uint64_t)v49;
    dispatch thunk of _AnyIteratorBoxBase.next()(result);
    v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (v33(v32, 1, v12) != 1)
    {
      v36 = *(void (**)(void))(v13 + 32);
      v37 = v48;
      do
      {
        v38 = v46;
        v36();
        v39 = (uint64_t)v47;
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v47, v38, v12);
        sub_1001CAA10(v39, v37);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
        v40 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_1001E7890(0, v40[2] + 1, 1);
          v40 = v54;
        }
        v42 = v40[2];
        v41 = v40[3];
        if (v42 >= v41 >> 1)
        {
          sub_1001E7890(v41 > 1, v42 + 1, 1);
          v40 = v54;
        }
        v40[2] = v42 + 1;
        v37 = v48;
        v43 = sub_1000321F4((uint64_t)v48, (uint64_t)v40+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v42, type metadata accessor for FriendSharedSecretsRecord);
        v32 = (uint64_t)v49;
        dispatch thunk of _AnyIteratorBoxBase.next()(v43);
      }
      while (v33(v32, 1, v12) != 1);
    }
    swift_release(v53);
    sub_1000087A0(v32, &qword_1002670C8);
    swift_release_n(v45, 2);
    v34 = v54;
    v35 = sub_100037A5C(&qword_1002670D0);
    result = swift_allocObject(v35, 24, 7);
    *(_QWORD *)(result + 16) = v34;
  }
  return result;
}

uint64_t sub_1001CF700()
{
  uint64_t v0;

  return sub_1001CB7E4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

unint64_t sub_1001CF720()
{
  unint64_t result;

  result = qword_1002670F8;
  if (!qword_1002670F8)
  {
    result = swift_getWitnessTable(&unk_1001FAFA0, &type metadata for CloudStorageStore.Error);
    atomic_store(result, &qword_1002670F8);
  }
  return result;
}

uint64_t sub_1001CF764()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001CF798(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = (_QWORD *)swift_task_alloc(dword_100267104);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000087DC;
  return sub_1001CD900(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1001CF828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 41) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001CF8A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(_BYTE *)(v1 + 40);
  v9 = v1 + ((v4 + 41) & ~v4);
  v10 = (_QWORD *)swift_task_alloc(dword_10026711C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1000087DC;
  return sub_1001CCF38(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_1001CF940()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001CF964(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudStorageStore.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CF9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudStorageStore.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CF9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_100267158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CFA34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  _QWORD *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  id v89;
  NSString v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  id v97;
  NSString v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;

  v2 = type metadata accessor for Fence(0);
  v3 = *(_QWORD *)(v2 - 8);
  v110 = v2;
  v111 = v3;
  v4 = __chkstk_darwin(v2);
  v104 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v108 = (uint64_t *)((char *)&v102 - v6);
  v7 = sub_100037A5C(&qword_1002670C8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v102 - v11;
  v13 = type metadata accessor for Row(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v102 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v102 - v21;
  v23 = v115;
  result = Connection.prepare(_:)(a1);
  if (!v23)
  {
    v25 = result;
    v113 = v10;
    v114 = v14;
    v106 = v12;
    v107 = v20;
    v105 = v22;
    v115 = 0;
    v26 = swift_retain(result);
    v27 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v26);
    v118 = _swiftEmptyArrayStorage;
    sub_1001E795C(0, v27 & ~(v27 >> 63), 0);
    v28 = v118;
    v29 = swift_retain(v25);
    v112 = dispatch thunk of _AnySequenceBox._makeIterator()(v29);
    v103 = (_QWORD *)v25;
    result = swift_release(v25);
    if (v27 < 0)
    {
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    v109 = v13;
    if (v27)
    {
      v30 = v114;
      v31 = v104;
      while (1)
      {
        v32 = v113;
        dispatch thunk of _AnyIteratorBoxBase.next()(result);
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v32, 1, v13);
        if ((_DWORD)result == 1)
          goto LABEL_45;
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v17, v32, v13);
        sub_1000DD514(0, &qword_100267168, NSKeyedUnarchiver_ptr);
        v33 = sub_1000DD514(0, &qword_1002676E0, CLLocation_ptr);
        if (qword_10025F868 != -1)
          swift_once(&qword_10025F868, sub_1000622F4);
        v34 = sub_100037A5C(&qword_100260D68);
        v35 = sub_100037A9C(v34, (uint64_t)qword_10027AA00);
        Row.subscript.getter(&v116, v35, &type metadata for Data, &protocol witness table for Data);
        v37 = v116;
        v36 = v117;
        v38 = v115;
        v39 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v33, v116, v117, v33);
        v115 = v38;
        if (v38)
        {
          v84 = *(void (**)(char *, uint64_t))(v114 + 8);
          v85 = v17;
          v86 = v109;
          v84(v85, v109);
          sub_100037AB4(v37, v36);
          swift_release(v28);
          swift_release(v112);
          v84(v113, v86);
          v87 = v103;
          v88 = v103;
          goto LABEL_42;
        }
        v40 = v39;
        sub_100037AB4(v37, v36);
        if (!v40)
        {
          v89 = objc_allocWithZone((Class)NSError);
          v90 = String._bridgeToObjectiveC()();
          objc_msgSend(v89, "initWithDomain:code:userInfo:", v90, 0, 0);

          swift_willThrow(v91);
          v92 = *(void (**)(char *, uint64_t))(v114 + 8);
          v93 = v17;
          v94 = v109;
          v92(v93, v109);
          swift_release(v28);
          swift_release(v112);
          v92(v113, v94);
          v87 = v103;
          v88 = v103;
          goto LABEL_42;
        }
        v13 = v109;
        if (qword_10025F858 != -1)
          swift_once(&qword_10025F858, sub_1000621E4);
        v41 = sub_100037A5C(&qword_100260D40);
        v42 = sub_100037A9C(v41, (uint64_t)qword_10027A9D0);
        v43 = type metadata accessor for UUID(0);
        Row.subscript.getter(v31, v42, v43, &protocol witness table for UUID);
        v44 = v110;
        if (qword_10025F860 != -1)
          swift_once(&qword_10025F860, sub_100062268);
        v45 = sub_100037A5C(&qword_100260DB8);
        v46 = sub_100037A9C(v45, (uint64_t)qword_10027A9E8);
        Row.subscript.getter(&v116, v46, &type metadata for String, &protocol witness table for String);
        v47 = *(void (**)(char *, uint64_t))(v114 + 8);
        v47(v17, v13);
        v48 = v117;
        v49 = (_QWORD *)((char *)v31 + *(int *)(v44 + 20));
        *v49 = v116;
        v49[1] = v48;
        *(_QWORD *)((char *)v31 + *(int *)(v44 + 24)) = v40;
        v47(v113, v13);
        v28 = v118;
        if ((swift_isUniquelyReferenced_nonNull_native(v118) & 1) == 0)
        {
          sub_1001E795C(0, v28[2] + 1, 1);
          v28 = v118;
        }
        v50 = v111;
        v52 = v28[2];
        v51 = v28[3];
        v30 = v114;
        if (v52 >= v51 >> 1)
        {
          sub_1001E795C(v51 > 1, v52 + 1, 1);
          v50 = v111;
          v28 = v118;
        }
        v28[2] = v52 + 1;
        result = sub_1000321F4((uint64_t)v31, (uint64_t)v28+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v52, type metadata accessor for Fence);
        if (!--v27)
          goto LABEL_21;
      }
    }
    v30 = v114;
LABEL_21:
    v53 = (uint64_t)v106;
    dispatch thunk of _AnyIteratorBoxBase.next()(result);
    v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
    if (v54(v53, 1, v13) == 1)
    {
LABEL_22:
      swift_release(v112);
      sub_1000087A0(v53, &qword_1002670C8);
      swift_release_n(v103, 2);
      v55 = v118;
      v56 = sub_100037A5C(&qword_100267170);
      result = swift_allocObject(v56, 24, 7);
      *(_QWORD *)(result + 16) = v55;
    }
    else
    {
      v57 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 32);
      v58 = v105;
      while (1)
      {
        v57(v58, v53, v13);
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v107, v58, v13);
        sub_1000DD514(0, &qword_100267168, NSKeyedUnarchiver_ptr);
        v59 = sub_1000DD514(0, &qword_1002676E0, CLLocation_ptr);
        if (qword_10025F868 != -1)
          swift_once(&qword_10025F868, sub_1000622F4);
        v60 = sub_100037A5C(&qword_100260D68);
        v61 = sub_100037A9C(v60, (uint64_t)qword_10027AA00);
        Row.subscript.getter(&v116, v61, &type metadata for Data, &protocol witness table for Data);
        v62 = v116;
        v63 = v117;
        v64 = v115;
        v65 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v59, v116, v117, v59);
        v115 = v64;
        if (v64)
        {
          v95 = *(void (**)(char *, uint64_t))(v114 + 8);
          v96 = v109;
          v95(v107, v109);
          sub_100037AB4(v62, v63);
          v95(v105, v96);
          swift_release(v112);
          v88 = v118;
          v87 = v103;
          swift_release(v103);
          goto LABEL_42;
        }
        v66 = v65;
        sub_100037AB4(v62, v63);
        v30 = v114;
        if (!v66)
          break;
        v13 = v109;
        if (qword_10025F858 != -1)
          swift_once(&qword_10025F858, sub_1000621E4);
        v67 = sub_100037A5C(&qword_100260D40);
        v68 = sub_100037A9C(v67, (uint64_t)qword_10027A9D0);
        v69 = type metadata accessor for UUID(0);
        v70 = v107;
        v71 = v108;
        Row.subscript.getter(v108, v68, v69, &protocol witness table for UUID);
        if (qword_10025F860 != -1)
          swift_once(&qword_10025F860, sub_100062268);
        v72 = sub_100037A5C(&qword_100260DB8);
        v73 = sub_100037A9C(v72, (uint64_t)qword_10027A9E8);
        Row.subscript.getter(&v116, v73, &type metadata for String, &protocol witness table for String);
        v74 = *(void (**)(char *, uint64_t))(v30 + 8);
        v74(v70, v13);
        v75 = v117;
        v76 = v110;
        v77 = (_QWORD *)((char *)v71 + *(int *)(v110 + 20));
        *v77 = v116;
        v77[1] = v75;
        *(_QWORD *)((char *)v71 + *(int *)(v76 + 24)) = v66;
        v58 = v105;
        v74(v105, v13);
        v78 = v118;
        if ((swift_isUniquelyReferenced_nonNull_native(v118) & 1) == 0)
        {
          sub_1001E795C(0, v78[2] + 1, 1);
          v78 = v118;
        }
        v79 = v111;
        v81 = v78[2];
        v80 = v78[3];
        v82 = v108;
        if (v81 >= v80 >> 1)
        {
          sub_1001E795C(v80 > 1, v81 + 1, 1);
          v82 = v108;
          v79 = v111;
          v78 = v118;
        }
        v78[2] = v81 + 1;
        v83 = sub_1000321F4((uint64_t)v82, (uint64_t)v78+ ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))+ *(_QWORD *)(v79 + 72) * v81, type metadata accessor for Fence);
        v53 = (uint64_t)v106;
        dispatch thunk of _AnyIteratorBoxBase.next()(v83);
        if (v54(v53, 1, v13) == 1)
          goto LABEL_22;
      }
      v97 = objc_allocWithZone((Class)NSError);
      v98 = String._bridgeToObjectiveC()();
      objc_msgSend(v97, "initWithDomain:code:userInfo:", v98, 0, 0);

      swift_willThrow(v99);
      v100 = *(void (**)(char *, uint64_t))(v30 + 8);
      v101 = v109;
      v100(v107, v109);
      v100(v105, v101);
      swift_release(v112);
      v88 = v118;
      v87 = v103;
      swift_release(v103);
LABEL_42:
      swift_release(v87);
      return swift_release(v88);
    }
  }
  return result;
}

id sub_1001D0404(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

ValueMetadata *type metadata accessor for CloudStorageStore.Error()
{
  return &type metadata for CloudStorageStore.Error;
}

unint64_t sub_1001D0420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v1 = type metadata accessor for HashAlgorithm(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = 0;
  v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease(v29);
  v28 = 0xD00000000000001FLL;
  v29 = 0x8000000100201FE0;
  v5 = type metadata accessor for OwnerTokenEnvelopeV1(0);
  v6 = type metadata accessor for Date(0);
  v7 = sub_100004EA8(&qword_100260AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits = 0x7954657261687320;
  v10._object = (void *)0xEC000000203A6570;
  String.append(_:)(v10);
  LOBYTE(v26) = *(_BYTE *)(v0 + *(int *)(v5 + 20));
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 0x5364657261687320;
  v13._object = (void *)0xEF203A7465726365;
  String.append(_:)(v13);
  v14 = (uint64_t *)(v0 + *(int *)(v5 + 28));
  v16 = v14[1];
  v26 = *v14;
  v15 = v26;
  v27 = v16;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for HashAlgorithm.sha256(_:), v1);
  sub_10001A484(v15, v16);
  v17 = sub_10003EC14();
  v18 = DataProtocol.hash(algorithm:)(v4, &type metadata for Data, v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_100037AB4(v26, v27);
  v26 = v18;
  v27 = v20;
  v21 = DataProtocol.hexString.getter(&type metadata for Data, v17);
  v23 = v22;
  sub_100037AB4(v18, v20);
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  return v28;
}

uint64_t sub_1001D0660(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v21;
  char v22;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100267260);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1001D1474();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnerTokenEnvelopeV1.CodingKeys, &type metadata for OwnerTokenEnvelopeV1.CodingKeys, v11, v9, v10);
  LOBYTE(v21) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100004EA8(&qword_100267268, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v21, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for OwnerTokenEnvelopeV1(0);
    LOBYTE(v21) = *(_BYTE *)(v3 + v14[5]);
    v22 = 1;
    v15 = sub_1001D157C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v22, v5, &type metadata for SharedSecretType, v15);
    v16 = v3 + v14[6];
    LOBYTE(v21) = 2;
    v17 = type metadata accessor for Date(0);
    v18 = sub_100004EA8(&qword_100260BA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v21, v5, v17, v18);
    v21 = *(_OWORD *)(v3 + v14[7]);
    v22 = 3;
    v19 = sub_10003F9B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v22, v5, &type metadata for Data, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001D0870@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD *, uint64_t);
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  char v40;

  v30 = a2;
  v3 = type metadata accessor for Date(0);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  __chkstk_darwin(v3);
  v31 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v35 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = sub_100037A5C(&qword_100267240);
  v7 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for OwnerTokenEnvelopeV1(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_100036228(a1, v14);
  v15 = sub_1001D1474();
  v36 = v9;
  v16 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnerTokenEnvelopeV1.CodingKeys, &type metadata for OwnerTokenEnvelopeV1.CodingKeys, v15, v14, v13);
  if (v16)
    return sub_10002BB90(a1);
  v17 = v7;
  v18 = v12;
  v19 = v33;
  LOBYTE(v39) = 0;
  v20 = sub_100004EA8(&qword_100267250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v21 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v35, v34, &v39, v37, v34, v20);
  v38 = v5;
  v22 = *(void (**)(char *, _QWORD *, uint64_t))(v5 + 32);
  v23 = (uint64_t)v18;
  v22(v18, v35, v21);
  v40 = 1;
  v24 = sub_1001D14B8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, &type metadata for SharedSecretType, &v40, v37, &type metadata for SharedSecretType, v24);
  v18[v10[5]] = v39;
  LOBYTE(v39) = 2;
  v25 = sub_100004EA8(&qword_100260B90, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v26 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v19, &v39, v37, v19, v25);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v32 + 32))(v23 + v10[6], v26, v19);
  v40 = 3;
  v27 = sub_10003F974();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, &type metadata for Data, &v40, v37, &type metadata for Data, v27);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v36, v37);
  *(_OWORD *)(v23 + v10[7]) = v39;
  sub_1001D14FC(v23, v30);
  sub_10002BB90(a1);
  return sub_1001D1540(v23);
}

uint64_t sub_1001D0BF8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001D0C2C + 4 * byte_1001FAFE0[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1001D0C2C()
{
  return 0x7079546572616873;
}

uint64_t sub_1001D0C48()
{
  return 0x6574614465736162;
}

uint64_t sub_1001D0C60()
{
  return 0x6553646572616873;
}

uint64_t sub_1001D0C80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001D1848(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001D0CA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D1474();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D0CCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D1474();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D0CF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D0870(a1, a2);
}

uint64_t sub_1001D0D08(_QWORD *a1)
{
  return sub_1001D0660(a1);
}

uint64_t sub_1001D0D20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D15C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D0D48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D15C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D0D70(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v2 = sub_100037A5C(&qword_100267278);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_100036228(a1, v6);
  v8 = sub_1001D15C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnerTokenEnvelopeRequestV1.CodingKeys, &type metadata for OwnerTokenEnvelopeRequestV1.CodingKeys, v8, v6, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1001D0E34()
{
  return 0xD00000000000001BLL;
}

ValueMetadata *type metadata accessor for OwnerTokenEnvelopeRequestV1()
{
  return &type metadata for OwnerTokenEnvelopeRequestV1;
}

_QWORD *sub_1001D0E60(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = *v14;
    v16 = v14[1];
    sub_10001A484(*v14, v16);
    *v13 = v15;
    v13[1] = v16;
  }
  return a1;
}

uint64_t sub_1001D0F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return sub_100037AB4(*(_QWORD *)(a1 + *(int *)(a2 + 28)), *(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t sub_1001D0FAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  sub_10001A484(*v13, v15);
  *v12 = v14;
  v12[1] = v15;
  return a1;
}

uint64_t sub_1001D1058(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[7];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  sub_10001A484(*v13, v15);
  v16 = *v12;
  v17 = v12[1];
  *v12 = v14;
  v12[1] = v15;
  sub_100037AB4(v16, v17);
  return a1;
}

uint64_t sub_1001D1110(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1001D11A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  sub_100037AB4(v12, v13);
  return a1;
}

uint64_t sub_1001D124C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D1258);
}

uint64_t sub_1001D1258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 2)
      return v9 - 1;
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v10);
  }
}

uint64_t sub_1001D12F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D1304);
}

uint64_t sub_1001D1304(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for OwnerTokenEnvelopeV1(uint64_t a1)
{
  uint64_t result;

  result = qword_100267200;
  if (!qword_100267200)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OwnerTokenEnvelopeV1);
  return result;
}

uint64_t sub_1001D13E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_1001FB028;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_1001FB040;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_1001D1474()
{
  unint64_t result;

  result = qword_100267248;
  if (!qword_100267248)
  {
    result = swift_getWitnessTable(&unk_1001FB2AC, &type metadata for OwnerTokenEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267248);
  }
  return result;
}

unint64_t sub_1001D14B8()
{
  unint64_t result;

  result = qword_100267258;
  if (!qword_100267258)
  {
    result = swift_getWitnessTable(&unk_1001FB5E4, &type metadata for SharedSecretType);
    atomic_store(result, (unint64_t *)&qword_100267258);
  }
  return result;
}

uint64_t sub_1001D14FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OwnerTokenEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D1540(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OwnerTokenEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001D157C()
{
  unint64_t result;

  result = qword_100267270;
  if (!qword_100267270)
  {
    result = swift_getWitnessTable(&unk_1001FB5BC, &type metadata for SharedSecretType);
    atomic_store(result, (unint64_t *)&qword_100267270);
  }
  return result;
}

unint64_t sub_1001D15C0()
{
  unint64_t result;

  result = qword_100267280;
  if (!qword_100267280)
  {
    result = swift_getWitnessTable(&unk_1001FB25C, &type metadata for OwnerTokenEnvelopeRequestV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267280);
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnerTokenEnvelopeRequestV1.CodingKeys()
{
  return &type metadata for OwnerTokenEnvelopeRequestV1.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for OwnerTokenEnvelopeV1.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001D1660 + 4 * byte_1001FAFE9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001D1694 + 4 * byte_1001FAFE4[v4]))();
}

uint64_t sub_1001D1694(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D169C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001D16A4);
  return result;
}

uint64_t sub_1001D16B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001D16B8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001D16BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D16C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnerTokenEnvelopeV1.CodingKeys()
{
  return &type metadata for OwnerTokenEnvelopeV1.CodingKeys;
}

unint64_t sub_1001D16E4()
{
  unint64_t result;

  result = qword_100267288;
  if (!qword_100267288)
  {
    result = swift_getWitnessTable(&unk_1001FB1E4, &type metadata for OwnerTokenEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267288);
  }
  return result;
}

unint64_t sub_1001D172C()
{
  unint64_t result;

  result = qword_100267290;
  if (!qword_100267290)
  {
    result = swift_getWitnessTable(&unk_1001FB20C, &type metadata for OwnerTokenEnvelopeRequestV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267290);
  }
  return result;
}

unint64_t sub_1001D1774()
{
  unint64_t result;

  result = qword_100267298;
  if (!qword_100267298)
  {
    result = swift_getWitnessTable(&unk_1001FB234, &type metadata for OwnerTokenEnvelopeRequestV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267298);
  }
  return result;
}

unint64_t sub_1001D17BC()
{
  unint64_t result;

  result = qword_1002672A0;
  if (!qword_1002672A0)
  {
    result = swift_getWitnessTable(&unk_1001FB154, &type metadata for OwnerTokenEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002672A0);
  }
  return result;
}

unint64_t sub_1001D1804()
{
  unint64_t result;

  result = qword_1002672A8;
  if (!qword_1002672A8)
  {
    result = swift_getWitnessTable(&unk_1001FB17C, &type metadata for OwnerTokenEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002672A8);
  }
  return result;
}

uint64_t sub_1001D1848(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7079546572616873 && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7079546572616873, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6574614465736162 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574614465736162, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263)
  {
    swift_bridgeObjectRelease(0xEC00000074657263);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6553646572616873, 0xEC00000074657263, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

_QWORD *sub_1001D1A30(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = *(_QWORD *)((char *)a2 + v8);
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    sub_10001A484(v10, v11);
    *v9 = v10;
    v9[1] = v11;
    v12 = a3[7];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_1001D1B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_100037AB4(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
  v5 = a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_1001D1B74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = (uint64_t *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  sub_10001A484(v9, v10);
  *v8 = v9;
  v8[1] = v10;
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_1001D1C20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_10001A484(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_100037AB4(v12, v13);
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_1001D1CD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_1001D1D68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100037AB4(v8, v9);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1001D1E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D1E10);
}

uint64_t sub_1001D1E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 2)
      return v9 - 1;
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v10);
  }
}

uint64_t sub_1001D1EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D1EBC);
}

uint64_t sub_1001D1EBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for OwnerSharedSecretsRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100267308;
  if (!qword_100267308)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OwnerSharedSecretsRecord);
  return result;
}

uint64_t sub_1001D1F98(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_1001FB340;
    v5[2] = &unk_1001FB358;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

Swift::Int sub_1001D2030()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1001D2074()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1001D209C(uint64_t a1)
{
  Swift::UInt8 *v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_BYTE *sub_1001D20DC@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_1001D20FC(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_1001D2108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001D2CFC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001D2164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001D2CFC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001D21B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  char v22;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100267358);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1001D2980();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnerSharedSecretsRecord.CodingKeys, &type metadata for OwnerSharedSecretsRecord.CodingKeys, v11, v9, v10);
  LOBYTE(v21) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100004EA8(&qword_100267268, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v21, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for OwnerSharedSecretsRecord(0);
    LOBYTE(v21) = *(_BYTE *)(v3 + v14[5]);
    v22 = 1;
    v15 = sub_1001D157C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v22, v5, &type metadata for SharedSecretType, v15);
    v21 = *(_OWORD *)(v3 + v14[6]);
    v22 = 2;
    v16 = sub_10003F864();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v22, v5, &type metadata for SharedSecretKey, v16);
    v17 = v3 + v14[7];
    LOBYTE(v21) = 3;
    v18 = type metadata accessor for Date(0);
    v19 = sub_100004EA8(&qword_100260BA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v21, v5, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001D23C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  _QWORD *v39;
  __int128 v40;
  char v41;

  v32 = a2;
  v33 = type metadata accessor for Date(0);
  v31 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v34 = (uint64_t *)((char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v37 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = sub_100037A5C(&qword_100267348);
  v6 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnerSharedSecretsRecord(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_100036228(a1, v13);
  v14 = sub_1001D2980();
  v38 = v8;
  v15 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnerSharedSecretsRecord.CodingKeys, &type metadata for OwnerSharedSecretsRecord.CodingKeys, v14, v13, v12);
  if (v15)
    return sub_10002BB90(a1);
  v39 = a1;
  v16 = v11;
  LOBYTE(v40) = 0;
  v17 = sub_100004EA8(&qword_100267250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = v36;
  v19 = v35;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v35, &v40, v36, v35, v17);
  v20 = *(void (**)(char *, _QWORD *, uint64_t))(v4 + 32);
  v21 = (uint64_t)v16;
  v20(v16, v37, v19);
  v41 = 1;
  v22 = sub_1001D14B8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for SharedSecretType, &v41, v18, &type metadata for SharedSecretType, v22);
  v23 = v9;
  *(_BYTE *)(v21 + *(int *)(v9 + 20)) = v40;
  v41 = 2;
  v24 = sub_10003F820();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for SharedSecretKey, &v41, v18, &type metadata for SharedSecretKey, v24);
  *(_OWORD *)(v21 + *(int *)(v9 + 24)) = v40;
  LOBYTE(v40) = 3;
  v25 = sub_100004EA8(&qword_100260B90, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v26 = v18;
  v28 = v33;
  v27 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v33, &v40, v26, v33, v25);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v38, v36);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v31 + 32))(v21 + *(int *)(v23 + 28), v27, v28);
  sub_1001D29C4(v21, v32);
  sub_10002BB90(v39);
  return sub_1001D2A08(v21);
}

uint64_t sub_1001D278C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001D27B0 + 4 * byte_1001FB300[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_1001D27B0()
{
  return 1701869940;
}

uint64_t sub_1001D27C0()
{
  return 0x6553646572616873;
}

uint64_t sub_1001D27E0()
{
  return 0x6574614465736162;
}

uint64_t sub_1001D27F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001D2D40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001D281C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D2980();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D2844(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D2980();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D2870@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D23C0(a1, a2);
}

uint64_t sub_1001D2884(_QWORD *a1)
{
  return sub_1001D21B0(a1);
}

uint64_t sub_1001D2898(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = type metadata accessor for OwnerSharedSecretsRecord(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v4 + 20)))
    return 0;
  v5 = v4;
  v6 = *(int *)(v4 + 24);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (uint64_t *)(a2 + v6);
  v10 = *v9;
  v11 = v9[1];
  sub_10001A484(v7, v8);
  sub_10001A484(v10, v11);
  sub_10010961C(v7, v8);
  v13 = v12;
  sub_100037AB4(v10, v11);
  sub_100037AB4(v7, v8);
  if ((v13 & 1) != 0)
    return static Date.== infix(_:_:)(a1 + *(int *)(v5 + 28), a2 + *(int *)(v5 + 28));
  else
    return 0;
}

unint64_t sub_1001D2980()
{
  unint64_t result;

  result = qword_100267350;
  if (!qword_100267350)
  {
    result = swift_getWitnessTable(&unk_1001FB56C, &type metadata for OwnerSharedSecretsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267350);
  }
  return result;
}

uint64_t sub_1001D29C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OwnerSharedSecretsRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D2A08(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OwnerSharedSecretsRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for OwnerSharedSecretsRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001D2A90 + 4 * byte_1001FB309[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001D2AC4 + 4 * byte_1001FB304[v4]))();
}

uint64_t sub_1001D2AC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D2ACC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001D2AD4);
  return result;
}

uint64_t sub_1001D2AE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001D2AE8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001D2AEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D2AF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnerSharedSecretsRecord.CodingKeys()
{
  return &type metadata for OwnerSharedSecretsRecord.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SharedSecretType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001D2B5C + 4 * byte_1001FB313[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001D2B90 + 4 * byte_1001FB30E[v4]))();
}

uint64_t sub_1001D2B90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D2B98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001D2BA0);
  return result;
}

uint64_t sub_1001D2BAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001D2BB4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001D2BB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D2BC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharedSecretType()
{
  return &type metadata for SharedSecretType;
}

unint64_t sub_1001D2BE0()
{
  unint64_t result;

  result = qword_100267360;
  if (!qword_100267360)
  {
    result = swift_getWitnessTable(&unk_1001FB48C, &type metadata for SharedSecretType);
    atomic_store(result, (unint64_t *)&qword_100267360);
  }
  return result;
}

unint64_t sub_1001D2C28()
{
  unint64_t result;

  result = qword_100267368;
  if (!qword_100267368)
  {
    result = swift_getWitnessTable(&unk_1001FB544, &type metadata for OwnerSharedSecretsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267368);
  }
  return result;
}

unint64_t sub_1001D2C70()
{
  unint64_t result;

  result = qword_100267370;
  if (!qword_100267370)
  {
    result = swift_getWitnessTable(&unk_1001FB4B4, &type metadata for OwnerSharedSecretsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267370);
  }
  return result;
}

unint64_t sub_1001D2CB8()
{
  unint64_t result;

  result = qword_100267378;
  if (!qword_100267378)
  {
    result = swift_getWitnessTable(&unk_1001FB4DC, &type metadata for OwnerSharedSecretsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267378);
  }
  return result;
}

unint64_t sub_1001D2CFC()
{
  unint64_t result;

  result = qword_100267380;
  if (!qword_100267380)
  {
    result = swift_getWitnessTable(&unk_1001FB414, &type metadata for SharedSecretType);
    atomic_store(result, (unint64_t *)&qword_100267380);
  }
  return result;
}

uint64_t sub_1001D2D40(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263)
  {
    v8 = 0xEC00000074657263;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6553646572616873, 0xEC00000074657263, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6574614465736162 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574614465736162, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1001D2EE8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v10 = type metadata accessor for DiscoveryToken.Bucket(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1001D3B1C();
  sub_1001D3274(a3, a4, v13, (uint64_t)v12);
  v14 = sub_1001D3C50(a1, a2, *(_QWORD *)&v12[*(int *)(v10 + 20)], 0);
  if (v14)
  {
    v15 = v14;
    v16 = type metadata accessor for DiscoveryToken(0);
    sub_1001D4180((uint64_t)v12, (uint64_t)a5 + *(int *)(v16 + 20));
    *a5 = v15;
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a5, 0, 1, v16);
  }
  else
  {
    sub_1001D4144((uint64_t)v12);
    v18 = type metadata accessor for DiscoveryToken(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a5, 1, 1, v18);
  }
}

uint64_t sub_1001D3010()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void *v24;

  _StringGuts.grow(_:)(54);
  v1 = type metadata accessor for DiscoveryToken(0);
  v2 = sub_100004EA8(&qword_100267398, type metadata accessor for DiscoveryToken, (uint64_t)&unk_1001FB630);
  v3._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v1, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0x6E656B6F54696E20;
  v5._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v5);
  v6 = *v0;
  v7 = objc_msgSend(v6, "description");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);

  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0x7461446573616220;
  v12._object = (void *)0xEB00000000203A65;
  String.append(_:)(v12);
  v13 = type metadata accessor for Date(0);
  v14 = sub_100004EA8(&qword_100260AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
  v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  v17._countAndFlagsBits = 0x203A7865646E6920;
  v17._object = (void *)0xE800000000000000;
  String.append(_:)(v17);
  type metadata accessor for DiscoveryToken.Bucket(0);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v19);
  v20._countAndFlagsBits = 0x746E496574616420;
  v20._object = (void *)0xEF203A6C61767265;
  String.append(_:)(v20);
  v21 = type metadata accessor for DateInterval(0);
  v22 = sub_100004EA8(&qword_1002673A0, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
  v24 = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v24);
  return 0;
}

uint64_t sub_1001D3274@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (**v36)(char *, char *, uint64_t);
  double v37;
  double v38;
  uint64_t v39;
  char v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  double v44;
  double v45;
  char *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  double v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(_QWORD, _QWORD, _QWORD);
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  os_log_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  os_log_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t (**v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t (**v97)(char *, char *, uint64_t);
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  _BYTE v102[24];
  uint64_t v103[3];
  _QWORD v104[2];

  v89 = a4;
  v7 = type metadata accessor for Logger(0);
  v90 = *(_QWORD *)(v7 - 8);
  v91 = (char *)v7;
  __chkstk_darwin(v7);
  v98 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DateInterval(0);
  v93 = *(uint64_t (***)(char *, char *, uint64_t))(v9 - 8);
  v94 = v9;
  v10 = __chkstk_darwin(v9);
  v95 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v92 = (char *)&v82 - v12;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v88 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v87 = (char *)&v82 - v18;
  v19 = __chkstk_darwin(v17);
  v85 = (char *)&v82 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v82 - v22;
  v24 = __chkstk_darwin(v21);
  v96 = (char *)&v82 - v25;
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v82 - v27;
  v29 = __chkstk_darwin(v26);
  v100 = (char *)&v82 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v82 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (uint64_t (**)(char *, char *, uint64_t))((char *)&v82 - v35);
  v37 = (double)a3 * 60.0;
  v38 = Date.timeIntervalSinceReferenceDate.getter(v34);
  Date.init(timeIntervalSinceReferenceDate:)(v37 * floor(v38 / v37));
  v39 = sub_100004EA8(&qword_100266240, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v40 = dispatch thunk of static Comparable.>= infix(_:_:)(a1, a2, v13, v39);
  v41 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v99 = a1;
  v86 = (void (*)(_QWORD, _QWORD, _QWORD))a2;
  if ((v40 & 1) != 0)
    v42 = a1;
  else
    v42 = a2;
  v41(v33, v42, v13);
  v97 = v36;
  v43 = v33;
  v44 = Date.timeIntervalSince(_:)(v36) / v37;
  if ((~*(_QWORD *)&v44 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v44 <= -1.0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v44 >= 1.84467441e19)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v44 == -1)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    swift_once(&qword_10025FB70, sub_1001B4288);
    goto LABEL_11;
  }
  v104[0] = (unint64_t)v44 + 1;
  v45 = v37 * (double)(unint64_t)v44;
  v41(v28, (char *)v97, v13);
  v46 = v100;
  Date.init(timeInterval:since:)(v28, v45);
  v41(v28, v46, v13);
  v47 = Date.init(timeInterval:since:)(v28, v37);
  v48 = Date.timeIntervalSince1970.getter(v47);
  v14 = *(_QWORD *)(v14 + 8);
  v49 = ((uint64_t (*)(char *, uint64_t))v14)(v23, v13);
  v50 = 0.0 - v48;
  v84 = v33;
  if (0.0 - v48 < INFINITY)
    *(_QWORD *)&v50 += (*(uint64_t *)&v50 >> 63) | 1;
  a1 = v92;
  v36 = v93;
  v23 = v91;
  v43 = v98;
  v51 = v96;
  Date.init(timeIntervalSince1970:)(v49, -v50);
  v41(v28, v100, v13);
  v52 = v85;
  v41(v85, v51, v13);
  DateInterval.init(start:end:)(v28, v52);
  v28 = (char *)v41;
  if (qword_10025FB70 != -1)
    goto LABEL_19;
LABEL_11:
  v53 = sub_100037A9C((uint64_t)v23, (uint64_t)qword_10027B330);
  v54 = v90;
  (*(void (**)(char *, uint64_t, char *))(v90 + 16))(v43, v53, v23);
  v55 = v87;
  ((void (*)(char *, char *, uint64_t))v28)(v87, v99, v13);
  v56 = v88;
  v57 = v86;
  v86 = (void (*)(_QWORD, _QWORD, _QWORD))v28;
  ((void (*)(char *, _QWORD, uint64_t))v28)(v88, v57, v13);
  v58 = v94;
  v59 = v36[2](v95, a1, v94);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.default.getter(v60);
  LODWORD(v85) = v61;
  if (os_log_type_enabled(v60, v61))
  {
    v62 = swift_slowAlloc(42, -1);
    v83 = swift_slowAlloc(96, -1);
    v103[0] = v83;
    *(_DWORD *)v62 = 134218754;
    v82 = v60;
    swift_beginAccess(v104, v102, 0, 0);
    v101 = v104[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v62 + 4, v62 + 12);
    *(_WORD *)(v62 + 12) = 2082;
    v63 = sub_100004EA8(&qword_100260AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v64 = dispatch thunk of CustomStringConvertible.description.getter(v13, v63);
    v66 = v65;
    v101 = sub_10002BA84(v64, v65, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v62 + 14, v62 + 22);
    swift_bridgeObjectRelease(v66);
    ((void (*)(char *, uint64_t))v14)(v55, v13);
    *(_WORD *)(v62 + 22) = 2082;
    v67 = v63;
    a1 = v92;
    v58 = v94;
    v68 = dispatch thunk of CustomStringConvertible.description.getter(v13, v67);
    v70 = v69;
    v101 = sub_10002BA84(v68, v69, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v62 + 24, v62 + 32);
    swift_bridgeObjectRelease(v70);
    ((void (*)(char *, uint64_t))v14)(v56, v13);
    *(_WORD *)(v62 + 32) = 2082;
    v71 = sub_100004EA8(&qword_1002673A0, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
    v72 = v95;
    v73 = dispatch thunk of CustomStringConvertible.description.getter(v58, v71);
    v75 = v74;
    v101 = sub_10002BA84(v73, v74, v103);
    v36 = v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v62 + 34, v62 + 42);
    swift_bridgeObjectRelease(v75);
    ((void (*)(char *, uint64_t))v36[1])(v72, v58);
    v76 = v82;
    _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v85, "Bucket calculated to ‣%llu baseTime: %{public}s date: %{public}s .\ndateInterval: %{public}s", (uint8_t *)v62, 0x2Au);
    v77 = v83;
    swift_arrayDestroy(v83, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v62, -1, -1);

    (*(void (**)(char *, char *))(v90 + 8))(v98, v91);
  }
  else
  {

    ((void (*)(char *, uint64_t))v36[1])(v95, v58);
    ((void (*)(char *, uint64_t))v14)(v56, v13);
    ((void (*)(char *, uint64_t))v14)(v55, v13);
    (*(void (**)(char *, char *))(v54 + 8))(v98, v23);
  }
  ((void (*)(char *, uint64_t))v14)(v96, v13);
  ((void (*)(char *, uint64_t))v14)(v100, v13);
  ((void (*)(char *, uint64_t))v14)(v84, v13);
  ((void (*)(uint64_t (**)(char *, char *, uint64_t), uint64_t))v14)(v97, v13);
  v78 = v89;
  v86(v89, v99, v13);
  swift_beginAccess(v104, v103, 0, 0);
  v79 = v104[0];
  v80 = type metadata accessor for DiscoveryToken.Bucket(0);
  *(_QWORD *)(v78 + *(int *)(v80 + 20)) = v79;
  return v36[4]((char *)(v78 + *(int *)(v80 + 24)), a1, v58);
}

uint64_t sub_1001D3A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = &type metadata for UnsafeRawBufferPointer;
  v14[4] = &protocol witness table for UnsafeRawBufferPointer;
  v14[0] = a1;
  v14[1] = a2;
  v4 = sub_100036228(v14, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_1001D3F64(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_1001D40A4((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_1001D4024((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = sub_10002BB90(v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t sub_1001D3B1C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_1001EFBE4(0xD000000000000018);
  if ((v1 & 1) != 0)
    return 10080;
  v2 = v0;
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100037A9C(v3, (uint64_t)qword_10027B330);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134217984;
    v9 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Using keyroll interval from defaults: %ld minutes", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }

  return v2;
}

id sub_1001D3C50(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  void *v31;
  Class isa;
  id v33;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  unint64_t v38;

  v8 = type metadata accessor for SymmetricKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v36[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v36[-1] - v13;
  v15 = String.utf8Data.getter(0xD000000000000013);
  v17 = v16;
  v37 = a1;
  v38 = a2;
  sub_10001A484(a1, a2);
  SymmetricKey.init<A>(data:)(&v37, &type metadata for Data, &protocol witness table for Data);
  v37 = v15;
  v38 = v17;
  if ((a4 & 1) != 0)
  {
    v25 = type metadata accessor for SHA256(0);
    v26 = sub_100004EA8(&qword_100267388, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
    v27 = sub_10003EC14();
    static HKDF.deriveKey<A>(inputKeyMaterial:salt:outputByteCount:)(v14, &v37, 16, v25, &type metadata for Data, v26, v27);
  }
  else
  {
    v36[0] = a3;
    v18 = sub_1001D3F20();
    v19 = FixedWidthInteger.data.getter(&type metadata for UInt64, v18);
    v21 = v20;
    v36[0] = v19;
    v36[1] = v20;
    v22 = type metadata accessor for SHA256(0);
    v23 = sub_100004EA8(&qword_100267388, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
    v24 = sub_10003EC14();
    v35 = v8;
    static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)(v14, &v37, v36, 16, v22, &type metadata for Data, &type metadata for Data, v23, v24, v24);
    sub_100037AB4(v19, v21);
    v8 = v35;
  }
  SymmetricKey.withUnsafeBytes<A>(_:)(&v37, sub_1001D3A54, 0, &type metadata for Data);
  v28 = v37;
  v29 = v38;
  v30 = *(void (**)(char *, uint64_t))(v9 + 8);
  v30(v12, v8);
  v31 = (void *)objc_opt_self(NISession);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v33 = objc_msgSend(v31, "generateFindingDiscoveryTokenWithSharedSecret:", isa);

  sub_100037AB4(v15, v17);
  sub_100037AB4(v28, v29);
  v30(v14, v8);
  return v33;
}

unint64_t sub_1001D3F20()
{
  unint64_t result;

  result = qword_100267390;
  if (!qword_100267390)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_100267390);
  }
  return result;
}

uint64_t sub_1001D3F64(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1001D4024(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1001D40A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t type metadata accessor for DiscoveryToken(uint64_t a1)
{
  return sub_100025C3C(a1, qword_100267498, (uint64_t)&nominal type descriptor for DiscoveryToken);
}

uint64_t type metadata accessor for DiscoveryToken.Bucket(uint64_t a1)
{
  return sub_100025C3C(a1, qword_100267400, (uint64_t)&nominal type descriptor for DiscoveryToken.Bucket);
}

uint64_t sub_1001D4144(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DiscoveryToken.Bucket(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001D4180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DiscoveryToken.Bucket(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1001D41C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DateInterval(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_1001D4274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for DateInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_1001D42D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_1001D4354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_1001D43DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_1001D4460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1001D44E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D44F0);
}

uint64_t sub_1001D44F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for DateInterval(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1001D4564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D4570);
}

uint64_t sub_1001D4570(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for DateInterval(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1001D45EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for DateInterval(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void **sub_1001D467C(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v11 = v4;
    v10(v7, v8, v9);
    v12 = type metadata accessor for DiscoveryToken.Bucket(0);
    *(_QWORD *)&v7[*(int *)(v12 + 20)] = *(_QWORD *)&v8[*(int *)(v12 + 20)];
    v13 = *(int *)(v12 + 24);
    v14 = &v7[v13];
    v15 = &v8[v13];
    v16 = type metadata accessor for DateInterval(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v5;
}

uint64_t sub_1001D4750(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = &v4[*(int *)(type metadata accessor for DiscoveryToken.Bucket(0) + 24)];
  v7 = type metadata accessor for DateInterval(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

void **sub_1001D47C4(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  id v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v10 = v4;
  v9(v6, v7, v8);
  v11 = type metadata accessor for DiscoveryToken.Bucket(0);
  *(_QWORD *)&v6[*(int *)(v11 + 20)] = *(_QWORD *)&v7[*(int *)(v11 + 20)];
  v12 = *(int *)(v11 + 24);
  v13 = &v6[v12];
  v14 = &v7[v12];
  v15 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

void **sub_1001D4870(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = type metadata accessor for DiscoveryToken.Bucket(0);
  *(_QWORD *)&v10[*(int *)(v13 + 20)] = *(_QWORD *)&v11[*(int *)(v13 + 20)];
  v14 = *(int *)(v13 + 24);
  v15 = &v10[v14];
  v16 = &v11[v14];
  v17 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_QWORD *sub_1001D4920(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  v8 = type metadata accessor for DiscoveryToken.Bucket(0);
  *(_QWORD *)&v5[*(int *)(v8 + 20)] = *(_QWORD *)&v6[*(int *)(v8 + 20)];
  v9 = *(int *)(v8 + 24);
  v10 = &v5[v9];
  v11 = &v6[v9];
  v12 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

void **sub_1001D49BC(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = type metadata accessor for DiscoveryToken.Bucket(0);
  *(_QWORD *)&v8[*(int *)(v11 + 20)] = *(_QWORD *)&v9[*(int *)(v11 + 20)];
  v12 = *(int *)(v11 + 24);
  v13 = &v8[v12];
  v14 = &v9[v12];
  v15 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_1001D4A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D4A74);
}

uint64_t sub_1001D4A74(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DiscoveryToken.Bucket(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1001D4AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D4AFC);
}

char *sub_1001D4AFC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DiscoveryToken.Bucket(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1001D4B70(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for DiscoveryToken.Bucket(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FriendSharingMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1001D4C34 + 4 * byte_1001FB665[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1001D4C68 + 4 * byte_1001FB660[v4]))();
}

uint64_t sub_1001D4C68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D4C70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001D4C78);
  return result;
}

uint64_t sub_1001D4C84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001D4C8CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1001D4C90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D4C98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FriendSharingMessageType()
{
  return &type metadata for FriendSharingMessageType;
}

uint64_t sub_1001D4CB4@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001D4F04(*a1);
  *a2 = result;
  return result;
}

void sub_1001D4CDC(_QWORD *a1@<X8>)
{
  *a1 = &off_10024F420;
}

uint64_t sub_1001D4CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001D4E28();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001D4D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001D4E28();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_1001D4D98()
{
  unint64_t result;

  result = qword_1002674D0;
  if (!qword_1002674D0)
  {
    result = swift_getWitnessTable(&unk_1001FB6B4, &type metadata for FriendSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_1002674D0);
  }
  return result;
}

unint64_t sub_1001D4DE0()
{
  unint64_t result;

  result = qword_1002674D8;
  if (!qword_1002674D8)
  {
    result = swift_getWitnessTable(&unk_1001FB68C, &type metadata for FriendSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_1002674D8);
  }
  return result;
}

unint64_t sub_1001D4E28()
{
  unint64_t result;

  result = qword_1002674E0;
  if (!qword_1002674E0)
  {
    result = swift_getWitnessTable(&unk_1001FB74C, &type metadata for FriendSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_1002674E0);
  }
  return result;
}

unint64_t sub_1001D4E70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002674E8;
  if (!qword_1002674E8)
  {
    v1 = sub_10003C1FC(&qword_1002674F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002674E8);
  }
  return result;
}

unint64_t sub_1001D4EC0()
{
  unint64_t result;

  result = qword_1002674F8;
  if (!qword_1002674F8)
  {
    result = swift_getWitnessTable(&unk_1001FB7C4, &type metadata for FriendSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_1002674F8);
  }
  return result;
}

uint64_t sub_1001D4F04(uint64_t result)
{
  if (result >= 7)
    return 7;
  else
    return result;
}

uint64_t sub_1001D4F14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100037A5C((uint64_t *)&unk_100262930);
  sub_100043F10(v0, qword_100267500);
  v1 = sub_100037A9C(v0, (uint64_t)qword_100267500);
  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t static Date.testSetNow(date:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
    if (qword_10025FBB0 != -1)
      swift_once(&qword_10025FBB0, sub_1001D4F14);
    v2 = sub_100037A5C((uint64_t *)&unk_100262930);
    v3 = sub_100037A9C(v2, (uint64_t)qword_100267500);
    swift_beginAccess(v3, v5, 33, 0);
    sub_1001D50C8(a1, v3);
    return swift_endAccess(v5);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000047, 0x8000000100202070, "findmylocated/DateExtensions.swift", 34, 2, 20, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001D505C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B3B0);
  sub_100037A9C(v0, (uint64_t)qword_10027B3B0);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 1702125892, 0xE400000000000000);
}

uint64_t sub_1001D50C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C((uint64_t *)&unk_100262930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D5110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D511C);
}

uint64_t sub_1001D511C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001D5158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D5164);
}

uint64_t sub_1001D5164(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t assignWithCopy for ServerSettingsRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = (_OWORD *)(a1 + 96);
  v15 = (_OWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v16)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      v17 = *(_QWORD *)(a2 + 112);
      v18 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v18);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v19 = *(_QWORD *)(a2 + 136);
      v20 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v20);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      v21 = *(_QWORD *)(a2 + 232);
      v22 = *(_QWORD *)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v21;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v22);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      v23 = *(_QWORD *)(a2 + 248);
      v24 = *(_QWORD *)(a1 + 248);
      *(_QWORD *)(a1 + 248) = v23;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      sub_10004A1B8((_QWORD *)(a1 + 96));
      v29 = *(_OWORD *)(a2 + 112);
      *v14 = *v15;
      *(_OWORD *)(a1 + 112) = v29;
      v30 = *(_OWORD *)(a2 + 176);
      v32 = *(_OWORD *)(a2 + 128);
      v31 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v30;
      *(_OWORD *)(a1 + 128) = v32;
      *(_OWORD *)(a1 + 144) = v31;
      v33 = *(_OWORD *)(a2 + 240);
      v35 = *(_OWORD *)(a2 + 192);
      v34 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v33;
      *(_OWORD *)(a1 + 192) = v35;
      *(_OWORD *)(a1 + 208) = v34;
    }
  }
  else if (v16)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v25 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v25;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v26 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v26;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v27 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v27;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v28 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 248) = v28;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
  }
  else
  {
    v36 = *(_OWORD *)(a2 + 112);
    *v14 = *v15;
    *(_OWORD *)(a1 + 112) = v36;
    v37 = *(_OWORD *)(a2 + 128);
    v38 = *(_OWORD *)(a2 + 144);
    v39 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v39;
    *(_OWORD *)(a1 + 128) = v37;
    *(_OWORD *)(a1 + 144) = v38;
    v40 = *(_OWORD *)(a2 + 192);
    v41 = *(_OWORD *)(a2 + 208);
    v42 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v42;
    *(_OWORD *)(a1 + 192) = v40;
    *(_OWORD *)(a1 + 208) = v41;
  }
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  v43 = *(_OWORD *)(a2 + 272);
  v44 = *(_OWORD *)(a2 + 288);
  v45 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v45;
  *(_OWORD *)(a1 + 272) = v43;
  *(_OWORD *)(a1 + 288) = v44;
  v46 = *(_OWORD *)(a2 + 336);
  v47 = *(_OWORD *)(a2 + 352);
  v48 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v48;
  *(_OWORD *)(a1 + 336) = v46;
  *(_OWORD *)(a1 + 352) = v47;
  v49 = (_OWORD *)(a1 + 400);
  v50 = (_OWORD *)(a2 + 400);
  v51 = *(_QWORD *)(a1 + 408);
  v52 = *(_QWORD *)(a2 + 408);
  if (v51)
  {
    if (v52)
    {
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      v53 = *(_QWORD *)(a2 + 408);
      *(_QWORD *)(a1 + 408) = v53;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRelease(v51);
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
      v54 = *(_QWORD *)(a2 + 424);
      v55 = *(_QWORD *)(a1 + 424);
      *(_QWORD *)(a1 + 424) = v54;
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRelease(v55);
    }
    else
    {
      sub_100178C44(a1 + 400);
      v58 = *(_OWORD *)(a2 + 416);
      *v49 = *v50;
      *(_OWORD *)(a1 + 416) = v58;
    }
  }
  else if (v52)
  {
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    v56 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 408) = v56;
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    v57 = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 424) = v57;
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v57);
  }
  else
  {
    v59 = *(_OWORD *)(a2 + 416);
    *v49 = *v50;
    *(_OWORD *)(a1 + 416) = v59;
  }
  return a1;
}

uint64_t assignWithTake for ServerSettingsRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease(v12);
  if (*(_QWORD *)(a1 + 136))
  {
    v13 = *(_QWORD *)(a2 + 136);
    if (v13)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v14 = *(_QWORD *)(a2 + 112);
      v15 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v14;
      swift_bridgeObjectRelease(v15);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v16 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v13;
      swift_bridgeObjectRelease(v16);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v17 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v17;
      v18 = *(_QWORD *)(a2 + 232);
      v19 = *(_QWORD *)(a1 + 232);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = v18;
      swift_bridgeObjectRelease(v19);
      v20 = *(_QWORD *)(a2 + 248);
      v21 = *(_QWORD *)(a1 + 248);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = v20;
      swift_bridgeObjectRelease(v21);
      goto LABEL_6;
    }
    sub_10004A1B8((_QWORD *)(a1 + 96));
  }
  v22 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v22;
  v23 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v23;
  v24 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v24;
  v25 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v25;
  v26 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v26;
LABEL_6:
  v27 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v27;
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  v28 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v28;
  v29 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v29;
  v30 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v30;
  v31 = *(_QWORD *)(a1 + 408);
  if (!v31)
  {
LABEL_10:
    v35 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v35;
    return a1;
  }
  v32 = *(_QWORD *)(a2 + 408);
  if (!v32)
  {
    sub_100178C44(a1 + 400);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v32;
  swift_bridgeObjectRelease(v31);
  v33 = *(_QWORD *)(a2 + 424);
  v34 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v33;
  swift_bridgeObjectRelease(v34);
  return a1;
}

ValueMetadata *type metadata accessor for ServerSettingsRecord()
{
  return &type metadata for ServerSettingsRecord;
}

uint64_t sub_1001D5754(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD v20[10];
  _BYTE v21[32];
  _BYTE v22[144];
  _BYTE v23[168];
  char v24;

  v3 = v1;
  v5 = sub_100037A5C(&qword_1002675B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1001D67E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerSettingsRecord.CodingKeys, &type metadata for ServerSettingsRecord.CodingKeys, v11, v9, v10);
  v12 = v3[3];
  v20[2] = v3[2];
  v20[3] = v12;
  v13 = v3[5];
  v20[4] = v3[4];
  v20[5] = v13;
  v14 = v3[1];
  v20[0] = *v3;
  v20[1] = v14;
  v24 = 0;
  v15 = sub_10003E600();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v24, v5, &type metadata for ServerMyInfo, v15);
  if (!v2)
  {
    sub_10000EF6C((uint64_t)(v3 + 6), (uint64_t)v23, &qword_1002603B0);
    sub_10000EF6C((uint64_t)v23, (uint64_t)v20, &qword_1002603B0);
    v24 = 1;
    v16 = sub_10003E3B0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v24, v5, &type metadata for ServerContext, v16);
    sub_10000EF6C((uint64_t)(v3 + 16), (uint64_t)v22, &qword_100260858);
    sub_10000EF6C((uint64_t)v22, (uint64_t)v20, &qword_100260858);
    v24 = 2;
    v17 = sub_1001D6828();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v24, v5, &type metadata for ServerConfig, v17);
    sub_10000EF6C((uint64_t)(v3 + 25), (uint64_t)v21, &qword_100260550);
    sub_10000EF6C((uint64_t)v21, (uint64_t)v20, &qword_100260550);
    v24 = 3;
    v18 = sub_1001D686C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v24, v5, &type metadata for ServerPreferences, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001D5994()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001D59C0 + 4 * byte_1001FB840[*v0]))(0x6F666E49796DLL, 0xE600000000000000);
}

uint64_t sub_1001D59C0()
{
  return 0x747865746E6F63;
}

uint64_t sub_1001D59D8()
{
  return 0x6769666E6F63;
}

uint64_t sub_1001D59E8()
{
  return 0x7366657270;
}

uint64_t sub_1001D59FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001D60B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001D5A20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D67E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D5A48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D67E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1001D5A70@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[432];

  result = sub_1001D6254(a1, v5);
  if (!v2)
    return memcpy(a2, v5, 0x1B0uLL);
  return result;
}

uint64_t sub_1001D5AC0(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[432];

  memcpy(v4, v1, sizeof(v4));
  return sub_1001D5754(a1);
}

BOOL sub_1001D5B10(void *__src, const void *a2)
{
  _BYTE v4[432];
  _BYTE __dst[432];

  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return sub_1001D5B64((uint64_t)v4, (uint64_t)__dst);
}

BOOL sub_1001D5B64(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _OWORD v20[10];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[10];
  _OWORD v32[9];
  _OWORD v33[9];
  _BYTE v34[144];
  _BYTE v35[144];
  _BYTE v36[144];
  _OWORD v37[10];
  uint64_t v38;
  _QWORD v39[20];
  _QWORD v40[20];
  _BYTE v41[160];
  _OWORD v42[6];
  _OWORD v43[6];
  _OWORD v44[10];

  v4 = *(_OWORD *)(a1 + 48);
  v43[2] = *(_OWORD *)(a1 + 32);
  v43[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v43[4] = *(_OWORD *)(a1 + 64);
  v43[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v43[0] = *(_OWORD *)a1;
  v43[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v42[2] = *(_OWORD *)(a2 + 32);
  v42[3] = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v42[4] = *(_OWORD *)(a2 + 64);
  v42[5] = v8;
  v9 = *(_OWORD *)(a2 + 16);
  v42[0] = *(_OWORD *)a2;
  v42[1] = v9;
  if ((sub_1001798B0((double *)v43, (uint64_t)v42) & 1) == 0)
    return 0;
  sub_10000EF6C(a1 + 96, (uint64_t)v39, &qword_1002603B0);
  sub_10000EF6C(a2 + 96, (uint64_t)v40, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v39, (uint64_t)v41, &qword_1002603B0);
  if (sub_10005EFE0((uint64_t)v41) == 1)
  {
    sub_10000EF6C((uint64_t)v40, (uint64_t)v37, &qword_1002603B0);
    if (sub_10005EFE0((uint64_t)v37) == 1)
      goto LABEL_9;
LABEL_6:
    sub_10000EF6C((uint64_t)v39, (uint64_t)v37, &qword_1002603B0);
    sub_10000EF6C((uint64_t)v40, (uint64_t)&v38, &qword_1002603B0);
    sub_10000EFB0(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_10000EFB0(v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_1001D68B0((uint64_t)v37);
    return 0;
  }
  sub_10000EF6C((uint64_t)v40, (uint64_t)v31, &qword_1002603B0);
  if (sub_10005EFE0((uint64_t)v31) == 1)
    goto LABEL_6;
  sub_10000EF6C((uint64_t)v39, (uint64_t)v20, &qword_1002603B0);
  v44[6] = v20[6];
  v44[7] = v20[7];
  v44[8] = v20[8];
  v44[9] = v20[9];
  v44[2] = v20[2];
  v44[3] = v20[3];
  v44[4] = v20[4];
  v44[5] = v20[5];
  v44[0] = v20[0];
  v44[1] = v20[1];
  sub_10000EF6C((uint64_t)v40, (uint64_t)&v21, &qword_1002603B0);
  v37[6] = v27;
  v37[7] = v28;
  v37[8] = v29;
  v37[9] = v30;
  v37[2] = v23;
  v37[3] = v24;
  v37[4] = v25;
  v37[5] = v26;
  v37[0] = v21;
  v37[1] = v22;
  if ((sub_1000401DC((uint64_t)v44, (uint64_t)v37) & 1) == 0)
    return 0;
LABEL_9:
  sub_10000EF6C(a1 + 256, (uint64_t)v35, &qword_100260858);
  sub_10000EF6C(a2 + 256, (uint64_t)v36, &qword_100260858);
  sub_10000EF6C((uint64_t)v35, (uint64_t)v20, &qword_100260858);
  if (sub_10005EFC4((uint64_t)v20) == 1)
  {
    sub_10000EF6C((uint64_t)v36, (uint64_t)v31, &qword_100260858);
    if (sub_10005EFC4((uint64_t)v31) != 1)
      return 0;
  }
  else
  {
    sub_10000EF6C((uint64_t)v36, (uint64_t)v34, &qword_100260858);
    if (sub_10005EFC4((uint64_t)v34) == 1)
      return 0;
    sub_10000EF6C((uint64_t)v35, (uint64_t)v32, &qword_100260858);
    v27 = v32[6];
    v28 = v32[7];
    v29 = v32[8];
    v23 = v32[2];
    v24 = v32[3];
    v25 = v32[4];
    v26 = v32[5];
    v21 = v32[0];
    v22 = v32[1];
    sub_10000EF6C((uint64_t)v36, (uint64_t)v33, &qword_100260858);
    v31[6] = v33[6];
    v31[7] = v33[7];
    v31[8] = v33[8];
    v31[2] = v33[2];
    v31[3] = v33[3];
    v31[4] = v33[4];
    v31[5] = v33[5];
    v31[0] = v33[0];
    v31[1] = v33[1];
    if (!sub_100179728((uint64_t)&v21, (uint64_t)v31))
      return 0;
  }
  v12 = *(_QWORD *)(a1 + 400);
  v11 = *(_QWORD *)(a1 + 408);
  v14 = *(_QWORD *)(a1 + 416);
  v13 = *(_QWORD *)(a1 + 424);
  v16 = *(_QWORD *)(a2 + 400);
  v15 = *(_QWORD *)(a2 + 408);
  v18 = *(_QWORD *)(a2 + 416);
  v17 = *(_QWORD *)(a2 + 424);
  if (!v11)
  {
    if (!v15)
      return 1;
    goto LABEL_23;
  }
  if (!v15)
  {
LABEL_23:
    sub_10002BD68(v12, v11, v14, v13);
    sub_10002BD68(v16, v15, v18, v17);
    sub_10002BD98(v12, v11, v14, v13);
    sub_10002BD98(v16, v15, v18, v17);
    return 0;
  }
  if ((v12 != v16 || v11 != v15) && (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v16, v15, 0) & 1) == 0)
  {
    sub_10002BD68(v12, v11, v14, v13);
    sub_10002BD68(v12, v11, v14, v13);
    sub_10002BD68(v16, v15, v18, v17);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v15);
    sub_10002BD98(v12, v11, v14, v13);
    return 0;
  }
  if (v14 != v18 || v13 != v17)
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, v18, v17, 0);
    sub_10002BD68(v12, v11, v14, v13);
    sub_10002BD68(v12, v11, v14, v13);
    sub_10002BD68(v16, v15, v18, v17);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v15);
    sub_10002BD98(v12, v11, v14, v13);
    return (v19 & 1) != 0;
  }
  sub_10002BD68(v12, v11, v14, v13);
  sub_10002BD68(v12, v11, v14, v13);
  sub_10002BD68(v16, v15, v14, v13);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v15);
  sub_10002BD98(v12, v11, v14, v13);
  return 1;
}

uint64_t sub_1001D60B4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6F666E49796DLL && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F666E49796DLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747865746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6769666E6F63 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6769666E6F63, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x7366657270 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7366657270, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void *sub_1001D6254@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD v47[54];
  _QWORD v48[54];
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[151];
  char v55;
  _QWORD v56[18];
  _QWORD v57[20];
  char v58;
  _QWORD v59[20];
  _QWORD v60[55];

  v5 = sub_100037A5C(&qword_1002675A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v46 = a1;
  sub_100036228(a1, v9);
  v11 = sub_1001D67E4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerSettingsRecord.CodingKeys, &type metadata for ServerSettingsRecord.CodingKeys, v11, v9, v10);
  if (v2)
    return (void *)sub_10002BB90(v46);
  v44 = a2;
  v45 = v6;
  LOBYTE(v47[0]) = 0;
  v12 = sub_100033428();
  v13 = v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v48, &type metadata for ServerMyInfo, v47, v5, &type metadata for ServerMyInfo, v12);
  v14 = v48[1];
  v15 = v48[3];
  v16 = v48[4];
  v17 = v48[6];
  v18 = v48[8];
  v19 = v48[11];
  v40 = v48[10];
  v41 = v48[0];
  v60[0] = v48[0];
  v60[1] = v48[1];
  v39 = v48[2];
  v60[2] = v48[2];
  v60[3] = v48[3];
  v60[4] = v48[4];
  v38 = LOBYTE(v48[5]);
  LOBYTE(v60[5]) = v48[5];
  v60[6] = v48[6];
  v37 = v48[7];
  v60[7] = v48[7];
  v60[8] = v48[8];
  v36 = LOBYTE(v48[9]);
  LOBYTE(v60[9]) = v48[9];
  v60[10] = v48[10];
  v60[11] = v48[11];
  v58 = 1;
  v20 = sub_10002B9FC();
  v42 = v14;
  swift_bridgeObjectRetain(v14);
  v43 = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v59, &type metadata for ServerContext, &v58, v13, &type metadata for ServerContext, v20);
  v33 = v19;
  v34 = v18;
  v35 = v17;
  sub_10000EF6C((uint64_t)v59, (uint64_t)v57, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v57, (uint64_t)&v60[12], &qword_1002603B0);
  v55 = 2;
  sub_10000EFB0(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
  v21 = sub_10002BA40();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v56, &type metadata for ServerConfig, &v55, v13, &type metadata for ServerConfig, v21);
  sub_10000EF6C((uint64_t)v56, (uint64_t)v54, &qword_100260858);
  sub_10000EF6C((uint64_t)v54, (uint64_t)&v60[32], &qword_100260858);
  v49 = 3;
  v22 = sub_10002B910();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v50, &type metadata for ServerPreferences, &v49, v13, &type metadata for ServerPreferences, v22);
  v23 = v34;
  v24 = v35;
  v25 = v33;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v8, v13);
  v26 = v50;
  v27 = v42;
  v28 = v23;
  v29 = v51;
  v30 = v52;
  v31 = v53;
  v60[50] = v50;
  v60[51] = v51;
  v60[52] = v52;
  v60[53] = v53;
  v47[0] = v41;
  v47[1] = v42;
  v47[2] = v39;
  v47[3] = v43;
  v47[4] = v16;
  LOBYTE(v47[5]) = v38;
  v47[6] = v24;
  v47[7] = v37;
  v47[8] = v28;
  LOBYTE(v47[9]) = v36;
  v47[10] = v40;
  v47[11] = v25;
  sub_10000EF6C((uint64_t)v57, (uint64_t)&v47[12], &qword_1002603B0);
  sub_10000EF6C((uint64_t)v54, (uint64_t)&v47[32], &qword_100260858);
  v47[50] = v26;
  v47[51] = v29;
  v47[52] = v30;
  v47[53] = v31;
  sub_10002A0C4((uint64_t)v47);
  sub_10000EFB0(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v27);
  sub_10002BB90(v46);
  memcpy(v48, v60, sizeof(v48));
  sub_100029F9C((uint64_t)v48);
  return memcpy(v44, v47, 0x1B0uLL);
}

unint64_t sub_1001D67E4()
{
  unint64_t result;

  result = qword_1002675B0;
  if (!qword_1002675B0)
  {
    result = swift_getWitnessTable(&unk_1001FB9CC, &type metadata for ServerSettingsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002675B0);
  }
  return result;
}

unint64_t sub_1001D6828()
{
  unint64_t result;

  result = qword_1002675C8;
  if (!qword_1002675C8)
  {
    result = swift_getWitnessTable(&unk_1001F8F0C, &type metadata for ServerConfig);
    atomic_store(result, (unint64_t *)&qword_1002675C8);
  }
  return result;
}

unint64_t sub_1001D686C()
{
  unint64_t result;

  result = qword_1002675D0;
  if (!qword_1002675D0)
  {
    result = swift_getWitnessTable(&unk_1001F8EE4, &type metadata for ServerPreferences);
    atomic_store(result, (unint64_t *)&qword_1002675D0);
  }
  return result;
}

uint64_t sub_1001D68B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 168);
  v17 = *(_QWORD *)(a1 + 160);
  v3 = *(_QWORD *)(a1 + 176);
  v4 = *(_QWORD *)(a1 + 184);
  v5 = *(_QWORD *)(a1 + 192);
  v6 = *(_QWORD *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 208);
  v8 = *(_QWORD *)(a1 + 216);
  v15 = *(_OWORD *)(a1 + 240);
  v16 = *(_OWORD *)(a1 + 224);
  v13 = *(_OWORD *)(a1 + 272);
  v14 = *(_OWORD *)(a1 + 256);
  v12 = *(_OWORD *)(a1 + 288);
  v10 = *(_QWORD *)(a1 + 304);
  v9 = *(_QWORD *)(a1 + 312);
  sub_10002BF40(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152));
  sub_10002BF40(v17, v2, v3, v4, v5, v6, v7, v8, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10,
    v9);
  return a1;
}

uint64_t storeEnumTagSinglePayload for ServerSettingsRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001D6A00 + 4 * byte_1001FB849[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001D6A34 + 4 * byte_1001FB844[v4]))();
}

uint64_t sub_1001D6A34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D6A3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001D6A44);
  return result;
}

uint64_t sub_1001D6A50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001D6A58);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001D6A5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D6A64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerSettingsRecord.CodingKeys()
{
  return &type metadata for ServerSettingsRecord.CodingKeys;
}

unint64_t sub_1001D6A84()
{
  unint64_t result;

  result = qword_1002675D8;
  if (!qword_1002675D8)
  {
    result = swift_getWitnessTable(&unk_1001FB9A4, &type metadata for ServerSettingsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002675D8);
  }
  return result;
}

unint64_t sub_1001D6ACC()
{
  unint64_t result;

  result = qword_1002675E0;
  if (!qword_1002675E0)
  {
    result = swift_getWitnessTable(&unk_1001FB914, &type metadata for ServerSettingsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002675E0);
  }
  return result;
}

unint64_t sub_1001D6B14()
{
  unint64_t result;

  result = qword_1002675E8;
  if (!qword_1002675E8)
  {
    result = swift_getWitnessTable(&unk_1001FB93C, &type metadata for ServerSettingsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002675E8);
  }
  return result;
}

void sub_1001D6B58(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  _QWORD v46[2];
  id v47;

  v4 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = CKRecord.recordType.getter(v9);
  v14 = v13;
  if (v12 == 0x65636E6546 && v13 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, 0x65636E6546, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v14);
    if ((v15 & 1) == 0)
    {
      v37 = sub_1000D5B0C();
      v22 = swift_allocError(&type metadata for ConversionError, v37, 0, 0);
      *v38 = 0;
      goto LABEL_13;
    }
  }
  v45 = a2;
  v16 = objc_msgSend(a1, "recordID");
  v17 = objc_msgSend(v16, "recordName");

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  UUID.init(uuidString:)(v18, v20);
  swift_bridgeObjectRelease(v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000087A0((uint64_t)v6, (uint64_t *)&unk_1002675F0);
    v21 = sub_1000D5B0C();
    v22 = swift_allocError(&type metadata for ConversionError, v21, 0, 0);
    *v23 = 1;
LABEL_13:
    swift_willThrow(v22);

    return;
  }
  v44 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v44(v11, v6, v7);
  v24 = objc_msgSend(a1, "encryptedValues");
  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend(v24, "objectForKeyedSubscript:", v25);

  if (v26)
  {
    v47 = v26;
    v27 = sub_100037A5C(&qword_100267600);
    if ((swift_dynamicCast(v46, &v47, v27, &type metadata for String, 6) & 1) != 0)
    {
      v28 = v46[1];
      v43 = v46[0];
      v29 = String._bridgeToObjectiveC()();
      v30 = objc_msgSend(v24, "objectForKeyedSubscript:", v29);

      if (v30)
      {
        v31 = objc_opt_self(CLLocation);
        v32 = swift_dynamicCastObjCClass(v30, v31);
        if (v32)
        {
          v33 = v32;
          swift_unknownObjectRelease(v24);

          v34 = v45;
          v44(v45, v11, v7);
          v35 = type metadata accessor for Fence(0);
          v36 = &v34[*(int *)(v35 + 20)];
          *(_QWORD *)v36 = v43;
          *((_QWORD *)v36 + 1) = v28;
          *(_QWORD *)&v34[*(int *)(v35 + 24)] = v33;
          return;
        }
        swift_unknownObjectRelease(v30);
      }
      swift_bridgeObjectRelease(v28);
    }
  }
  v39 = sub_1000D5B0C();
  v40 = swift_allocError(&type metadata for ConversionError, v39, 0, 0);
  *v41 = 0;
  swift_willThrow(v40);
  swift_unknownObjectRelease(v24);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t type metadata accessor for Fence(uint64_t a1)
{
  uint64_t result;

  result = qword_100267660;
  if (!qword_100267660)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Fence);
  return result;
}

void sub_1001D6F50(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  _QWORD v11[5];

  v2 = v1;
  v3 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v3);
  v5 = type metadata accessor for Fence(0);
  v6 = (uint64_t *)(v2 + *(int *)(v5 + 20));
  v8 = *v6;
  v7 = v6[1];
  v11[3] = &type metadata for String;
  v11[4] = &protocol witness table for String;
  v11[0] = v8;
  v11[1] = v7;
  swift_bridgeObjectRetain(v7);
  CKRecordKeyValueSetting.subscript.setter(v11, 0x6C6562616CLL, 0xE500000000000000, ObjectType);
  v9 = *(_QWORD *)(v2 + *(int *)(v5 + 24));
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v9, v10);
  swift_unknownObjectRelease(v3);

}

uint64_t sub_1001D7038(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  id v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  char v35;
  uint64_t result;
  id v37;
  NSString v38;
  _QWORD v40[5];

  v4 = v3;
  v8 = sub_100037A5C(&qword_100267150);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v40[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v9);
  v14 = (char *)&v40[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Fence(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v40[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, a3);
  v19 = swift_dynamicCast(v11, v14, a3, v15, 6);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v19)
  {
    v20(v11, 0, 1, v15);
    sub_1001D78FC((uint64_t)v11, (uint64_t)v18);
    v21 = objc_msgSend(*a1, "encryptedValues");
    ObjectType = swift_getObjectType(v21);
    v23 = *(int *)(v15 + 20);
    v24 = *(_QWORD *)(v4 + v23);
    v25 = *(_QWORD *)(v4 + v23 + 8);
    v26 = &v18[v23];
    v28 = *(_QWORD *)v26;
    v27 = *((_QWORD *)v26 + 1);
    v29 = v24 == *(_QWORD *)v26 && v25 == v27;
    if (!v29
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *(_QWORD *)v26, *((_QWORD *)v26 + 1), 0) & 1) == 0)
    {
      v40[3] = &type metadata for String;
      v40[4] = &protocol witness table for String;
      v40[0] = v28;
      v40[1] = v27;
      swift_bridgeObjectRetain(v27);
      CKRecordKeyValueSetting.subscript.setter(v40, 0x6C6562616CLL, 0xE500000000000000, ObjectType);
    }
    v30 = *(int *)(v15 + 24);
    v31 = *(void **)(v4 + v30);
    v32 = *(void **)&v18[v30];
    sub_1000DD514(0, &qword_1002676E0, CLLocation_ptr);
    v33 = v31;
    v34 = v32;
    v35 = static NSObject.== infix(_:_:)(v33, v34);

    if ((v35 & 1) != 0)
    {
      sub_1001D7940((uint64_t)v18);
      return swift_unknownObjectRelease(v21);
    }
    else
    {
      v37 = v34;
      v38 = String._bridgeToObjectiveC()();
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v37, v38);
      swift_unknownObjectRelease(v21);

      return sub_1001D7940((uint64_t)v18);
    }
  }
  else
  {
    v20(v11, 1, 1, v15);
    sub_1000087A0((uint64_t)v11, &qword_100267150);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000023, 0x8000000100202100, "findmylocated/Fence.swift", 25, 2, 32, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001D7344()
{
  return 0x65636E6546;
}

unint64_t sub_1001D7358()
{
  return 0xD000000000000016;
}

uint64_t *sub_1001D7374(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v13;
    swift_bridgeObjectRetain(v12);
    v14 = v13;
  }
  return a1;
}

void sub_1001D7414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));

}

uint64_t sub_1001D7468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  id v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  swift_bridgeObjectRetain(v11);
  v13 = v12;
  return a1;
}

uint64_t sub_1001D74DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = *(void **)(a2 + v12);
  v14 = *(void **)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  v15 = v13;

  return a1;
}

uint64_t sub_1001D7570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1001D75D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);

  return a1;
}

uint64_t sub_1001D7654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D7660);
}

uint64_t sub_1001D7660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001D76E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D76EC);
}

uint64_t sub_1001D76EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1001D7768(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1001FBA28;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

CKRecordZoneID sub_1001D77E8()
{
  uint64_t v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  void *v4;
  Swift::String v5;

  v0 = sub_1000DD514(0, &qword_1002676E8, CKRecordZoneID_ptr);
  v1._countAndFlagsBits = UUID.uuidString.getter(v0);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v3._object = v4;
  v5._countAndFlagsBits = 0x2D65636E6546;
  v5._object = (void *)0xE600000000000000;
  return CKRecordZoneID.init(zoneName:ownerName:)(v5, v3);
}

void sub_1001D7884(void *a1@<X0>, char *a2@<X8>)
{
  sub_1001D6B58(a1, a2);
}

uint64_t sub_1001D78A4()
{
  return sub_100004EA8(&qword_1002676A8, type metadata accessor for Fence, (uint64_t)&unk_1001FBA40);
}

uint64_t sub_1001D78D0()
{
  return sub_100004EA8(qword_1002676B0, type metadata accessor for Fence, (uint64_t)&unk_1001FBA68);
}

uint64_t sub_1001D78FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Fence(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D7940(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Fence(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001D797C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = type metadata accessor for Fence(0);
  v5 = *(int *)(v4 + 20);
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v8[1];
  v10 = v6 == *v8 && v7 == v9;
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v8, v9, 0) & 1) == 0)
    return 0;
  sub_1000DD514(0, (unint64_t *)&unk_1002676F0, NSObject_ptr);
  return static NSObject.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v4 + 24)), *(_QWORD *)(a2 + *(int *)(v4 + 24))) & 1;
}

uint64_t sub_1001D7A20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch(sub_1001D7A3C, v2, 0);
}

uint64_t sub_1001D7A3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v13;
  uint64_t v14;

  if (qword_10025FBC0 != -1)
    swift_once(&qword_10025FBC0, sub_1001D8BDC);
  v1 = v0[4];
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B3C8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[4];
  if (v6)
  {
    v8 = v0[3];
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v14 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    v0[2] = sub_10002BA84(v8, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Deleting zones: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[4], 2);
  }

  v13 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
      + async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:);
  v11 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                   + 1));
  v0[6] = v11;
  *v11 = v0;
  v11[1] = sub_100042504;
  return ((uint64_t (*)(_QWORD, _QWORD))v13)(v0[3], v0[4]);
}

uint64_t sub_1001D7C34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_1001D7C4C, v1, 0);
}

uint64_t sub_1001D7C4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v26;
  uint64_t (*v27)(void);
  uint64_t (*v28)(uint64_t, unint64_t);
  uint64_t v29;

  if (qword_10025FBC0 != -1)
    swift_once(&qword_10025FBC0, sub_1001D8BDC);
  v1 = v0[3];
  v2 = type metadata accessor for Logger(0);
  v0[5] = sub_100037A9C(v2, (uint64_t)qword_10027B3C8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[3];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v29 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = swift_bridgeObjectRetain(v7);
    v11 = Array.description.getter(v10);
    v13 = v12;
    swift_bridgeObjectRelease(v7);
    v0[2] = sub_10002BA84(v11, v13, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Purging zones: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[3], 2);
  }

  v15 = (_QWORD *)v0[3];
  v14 = v0[4];
  v16 = v15[2];
  v0[6] = v16;
  if (v16)
  {
    v0[7] = *(_QWORD *)(v14 + 136);
    v0[8] = 0;
    v17 = v15[4];
    v0[9] = v17;
    v18 = v15[5];
    v0[10] = v18;
    swift_bridgeObjectRetain_n(v18, 3);
    swift_bridgeObjectRetain(v15);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v29 = v23;
      *(_DWORD *)v22 = 136315138;
      swift_bridgeObjectRetain(v18);
      *(_QWORD *)(v22 + 4) = sub_10002BA84(v17, v18, &v29);
      swift_bridgeObjectRelease_n(v18, 3);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Deleting zone %s", (uint8_t *)v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v18, 2);
    }

    v28 = (uint64_t (*)(uint64_t, unint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                                            + async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:));
    v26 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                     + 1));
    v0[11] = v26;
    *v26 = v0;
    v26[1] = sub_1001D7FE4;
    return v28(v17, v18);
  }
  else
  {
    v27 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.resetDataStore()
                            + async function pointer to dispatch thunk of CloudKitStorage.resetDataStore());
    v24 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.resetDataStore()
                                     + 1));
    v0[15] = v24;
    *v24 = v0;
    v24[1] = sub_1001D843C;
    return v27();
  }
}

uint64_t sub_1001D7FE4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001D8484;
  else
    v4 = sub_1001D8048;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 32), 0);
}

uint64_t sub_1001D8048()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v11;
  uint64_t v12;

  v1 = swift_bridgeObjectRetain_n(v0[10], 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[10];
  if (v4)
  {
    v6 = v0[9];
    v7 = swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v12 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain(v5);
    *(_QWORD *)(v7 + 4) = sub_10002BA84(v6, v5, &v12);
    swift_bridgeObjectRelease_n(v5, 3);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Recreating zone: %s", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[10], 2);
  }

  v11 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.create(zoneName:)
      + async function pointer to dispatch thunk of CloudKitStorage.create(zoneName:);
  v9 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.create(zoneName:)
                                  + 1));
  v0[13] = v9;
  *v9 = v0;
  v9[1] = sub_1001D81C4;
  return ((uint64_t (*)(_QWORD, _QWORD))v11)(v0[9], v0[10]);
}

uint64_t sub_1001D81C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 32);
    v5 = sub_1001D8830;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 32);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 80));
    v5 = sub_1001D8238;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001D8238()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  uint64_t (*v14)(uint64_t, unint64_t);
  uint64_t v15;

  v1 = v0[8] + 1;
  if (v1 == v0[6])
  {
    swift_bridgeObjectRelease(v0[3]);
    v13 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.resetDataStore()
                            + async function pointer to dispatch thunk of CloudKitStorage.resetDataStore());
    v2 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.resetDataStore()
                                    + 1));
    v0[15] = v2;
    *v2 = v0;
    v2[1] = sub_1001D843C;
    return v13();
  }
  else
  {
    v0[8] = v1;
    v4 = v0[3] + 16 * v1;
    v5 = *(_QWORD *)(v4 + 32);
    v0[9] = v5;
    v6 = *(_QWORD *)(v4 + 40);
    v0[10] = v6;
    v7 = swift_bridgeObjectRetain_n(v6, 3);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v15 = v11;
      *(_DWORD *)v10 = 136315138;
      swift_bridgeObjectRetain(v6);
      *(_QWORD *)(v10 + 4) = sub_10002BA84(v5, v6, &v15);
      swift_bridgeObjectRelease_n(v6, 3);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Deleting zone %s", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v6, 2);
    }

    v14 = (uint64_t (*)(uint64_t, unint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                                            + async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:));
    v12 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                     + 1));
    v0[11] = v12;
    *v12 = v0;
    v12[1] = sub_1001D7FE4;
    return v14(v5, v6);
  }
}

uint64_t sub_1001D843C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1001D8484()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v26)(void);
  uint64_t (*v27)(uint64_t, unint64_t);
  uint64_t v28;

  v1 = v0[12];
  v2 = v0[10];
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[10];
  if (v6)
  {
    v8 = v0[9];
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v28 = v11;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v9 + 4) = sub_10002BA84(v8, v7, &v28);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v9 + 12) = 2114;
    v12 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v9 + 14) = v12;
    *v10 = v12;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error purging zone %{public}s: %{public}@", (uint8_t *)v9, 0x16u);
    v13 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v10, 1, v13);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v14 = v0[8] + 1;
  if (v14 == v0[6])
  {
    swift_bridgeObjectRelease(v0[3]);
    v26 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.resetDataStore()
                            + async function pointer to dispatch thunk of CloudKitStorage.resetDataStore());
    v15 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.resetDataStore()
                                     + 1));
    v0[15] = v15;
    *v15 = v0;
    v15[1] = sub_1001D843C;
    return v26();
  }
  else
  {
    v0[8] = v14;
    v17 = v0[3] + 16 * v14;
    v18 = *(_QWORD *)(v17 + 32);
    v0[9] = v18;
    v19 = *(_QWORD *)(v17 + 40);
    v0[10] = v19;
    v20 = swift_bridgeObjectRetain_n(v19, 3);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v28 = v24;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(v23 + 4) = sub_10002BA84(v18, v19, &v28);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Deleting zone %s", (uint8_t *)v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v19, 2);
    }

    v27 = (uint64_t (*)(uint64_t, unint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                                            + async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:));
    v25 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                     + 1));
    v0[11] = v25;
    *v25 = v0;
    v25[1] = sub_1001D7FE4;
    return v27(v18, v19);
  }
}

uint64_t sub_1001D8830()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v26)(void);
  uint64_t (*v27)(uint64_t, unint64_t);
  uint64_t v28;

  v1 = v0[14];
  v2 = v0[10];
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[10];
  if (v6)
  {
    v8 = v0[9];
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v28 = v11;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v9 + 4) = sub_10002BA84(v8, v7, &v28);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v9 + 12) = 2114;
    v12 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v9 + 14) = v12;
    *v10 = v12;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error purging zone %{public}s: %{public}@", (uint8_t *)v9, 0x16u);
    v13 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v10, 1, v13);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v14 = v0[8] + 1;
  if (v14 == v0[6])
  {
    swift_bridgeObjectRelease(v0[3]);
    v26 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.resetDataStore()
                            + async function pointer to dispatch thunk of CloudKitStorage.resetDataStore());
    v15 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.resetDataStore()
                                     + 1));
    v0[15] = v15;
    *v15 = v0;
    v15[1] = sub_1001D843C;
    return v26();
  }
  else
  {
    v0[8] = v14;
    v17 = v0[3] + 16 * v14;
    v18 = *(_QWORD *)(v17 + 32);
    v0[9] = v18;
    v19 = *(_QWORD *)(v17 + 40);
    v0[10] = v19;
    v20 = swift_bridgeObjectRetain_n(v19, 3);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v28 = v24;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(v23 + 4) = sub_10002BA84(v18, v19, &v28);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Deleting zone %s", (uint8_t *)v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v19, 2);
    }

    v27 = (uint64_t (*)(uint64_t, unint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                                            + async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:));
    v25 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.delete(zoneName:)
                                     + 1));
    v0[11] = v25;
    *v25 = v0;
    v25[1] = sub_1001D7FE4;
    return v27(v18, v19);
  }
}

uint64_t sub_1001D8BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B3C8);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027B3C8);
  if (qword_10025FBC8 != -1)
    swift_once(&qword_10025FBC8, sub_1001D9A10);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027B3E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001D8C6C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v0;
  v1[2] = v0;
  v3 = type metadata accessor for URL(0);
  v1[3] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[4] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[5] = swift_task_alloc(v5);
  v6 = swift_task_alloc(v5);
  v1[6] = v6;
  swift_defaultActor_initialize(v2);
  *(_QWORD *)(v2 + 112) = 0xD000000000000013;
  *(_QWORD *)(v2 + 120) = 0x80000001001FBB30;
  if (qword_10025F978 != -1)
    swift_once(&qword_10025F978, sub_1001377B0);
  v7 = sub_100037A9C(v3, (uint64_t)qword_10027AD90);
  v1[7] = v7;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v1[8] = v8;
  v8(v6, v7, v3);
  v9 = type metadata accessor for CloudStorageDatabase(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v1[9] = v10;
  swift_defaultActor_initialize(v10);
  v11 = OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_logger;
  if (qword_10025FBA8 != -1)
    swift_once(&qword_10025FBA8, sub_1001CED84);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100037A9C(v12, (uint64_t)qword_10027B398);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10 + v11, v13, v12);
  *(_QWORD *)(v10 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_connectionPair) = 0;
  *(_DWORD *)(v10 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_currentVersion) = 1;
  v8(v10 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_baseContainerURL, v6, v3);
  *(_BYTE *)(v10 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_temporary) = 0;
  return swift_task_switch(sub_1001D8E48, v10, 0);
}

uint64_t sub_1001D8E48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[9];
  (*(void (**)(_QWORD, _QWORD))(v0[4] + 8))(v0[6], v0[3]);
  v2 = type metadata accessor for CloudStorageStore(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v0[10] = v3;
  swift_defaultActor_initialize(v3);
  strcpy((char *)(v3 + 120), "CloudStorage");
  *(_BYTE *)(v3 + 133) = 0;
  *(_WORD *)(v3 + 134) = -5120;
  v4 = v3 + OBJC_IVAR____TtC13findmylocated17CloudStorageStore_state;
  v5 = type metadata accessor for CloudStorageStore.State(0);
  swift_storeEnumTagMultiPayload(v4, v5, 2);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC13findmylocated17CloudStorageStore_stateContinuations) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v3 + 112) = v1;
  return swift_task_switch(sub_1001D8F14, v3, 0);
}

uint64_t sub_1001D8F14()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[7];
  v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[8];
  v3 = v0[5];
  v4 = v0[3];
  *(_QWORD *)(v0[2] + 128) = v0[10];
  v0[11] = type metadata accessor for CloudKitStorage(0);
  v2(v3, v1, v4);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[12] = v5;
  *v5 = v0;
  v5[1] = sub_1001D8F94;
  return daemon.getter();
}

uint64_t sub_1001D8F94(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 96));
  v6 = type metadata accessor for Daemon(0);
  v7 = sub_100018A7C(&qword_100265538, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v23 = ActorDaemon.bundleIdentifier.getter(v6, v7);
  v22 = v8;
  swift_release(a1);
  v9 = *(_QWORD *)(v4 + 128);
  v10 = sub_100018A7C(&qword_100267840, 255, type metadata accessor for CloudStorageStore, (uint64_t)&unk_1001FAF10);
  v11 = sub_100037A5C(&qword_100267848);
  v12 = type metadata accessor for CloudKitCoordinator.Database(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = *(unsigned __int8 *)(v13 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(v11, v16 + 2 * v14, v15 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_1001F7110;
  v18 = *(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104);
  v18(v17 + v16, enum case for CloudKitCoordinator.Database.private(_:), v12);
  v18(v17 + v16 + v14, enum case for CloudKitCoordinator.Database.shared(_:), v12);
  v19 = async function pointer to CloudKitStorage.__allocating_init(containerURL:containerIdentifier:bundleIdentifier:dataStore:databases:containerEnvironment:)[1];
  swift_retain(v9);
  v20 = (_QWORD *)swift_task_alloc(v19);
  *(_QWORD *)(v3 + 104) = v20;
  *v20 = v5;
  v20[1] = sub_1001D9168;
  return CloudKitStorage.__allocating_init(containerURL:containerIdentifier:bundleIdentifier:dataStore:databases:containerEnvironment:)(*(_QWORD *)(v3 + 40), 0xD00000000000001ALL, 0x8000000100202170, v23, v22, v9, v10, v17);
}

uint64_t sub_1001D9168(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*v2 + 104);
  v5 = *v2;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 40);
  v7 = *(_QWORD *)(v5 + 48);
  v8 = *(_QWORD **)(v5 + 16);
  if (v1)
  {
    swift_bridgeObjectRelease(v8[15]);
    swift_release(v8[16]);
    v9 = type metadata accessor for CloudStorageService();
    swift_defaultActor_destroy(v8);
    swift_deallocPartialClassInstance(v8, v9, 144, 15);
    swift_task_dealloc(v7);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  else
  {
    v8[17] = a1;
    swift_task_dealloc(v7);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(_QWORD))(v5 + 8))(*(_QWORD *)(v5 + 16));
  }
}

uint64_t sub_1001D9244()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1001D925C, v0, 0);
}

uint64_t sub_1001D925C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.isManateeAvailable()
                         + async function pointer to dispatch thunk of CloudKitStorage.isManateeAvailable());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.isManateeAvailable()
                                  + 1));
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_1001D92BC;
  return v3();
}

uint64_t sub_1001D92BC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_BYTE *)(*(_QWORD *)v1 + 36) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001D9318, v3, 0);
}

uint64_t sub_1001D9318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;

  if (qword_10025FBC0 != -1)
    swift_once(&qword_10025FBC0, sub_1001D8BDC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B3C8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 36);
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67240192;
    *(_DWORD *)(v0 + 32) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 36, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Current isManateeAvailable: %{BOOL,public}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 36));
}

uint64_t sub_1001D9438()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for CloudStorageService()
{
  return objc_opt_self(_TtC13findmylocated19CloudStorageService);
}

uint64_t sub_1001D948C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.initialLaunchProcessing()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for CloudStorageService();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_1001D94EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.migrate(from:to:)[1]);
  *(_QWORD *)(v4 + 16) = v8;
  v9 = type metadata accessor for CloudStorageService();
  *v8 = v4;
  v8[1] = sub_10003BF7C;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_1001D9568(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for CloudStorageService();
  *v4 = v2;
  v4[1] = sub_1000087DC;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_1001D95C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.startup()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for CloudStorageService();
  *v4 = v2;
  v4[1] = sub_1000087DC;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_1001D9628()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1001D9674;
  return daemon.getter();
}

uint64_t sub_1001D9674(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t UnlockService;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 24);
  v5 = *v1;
  *(_QWORD *)(*v1 + 32) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 40) = v6;
  v7 = type metadata accessor for Daemon(0);
  UnlockService = type metadata accessor for FirstUnlockService(0);
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100260A88, 255, (uint64_t (*)(uint64_t))&type metadata accessor for FirstUnlockService, (uint64_t)&protocol conformance descriptor for FirstUnlockService);
  *v6 = v5;
  v6[1] = sub_1001D9764;
  return ActorServiceDaemon.getService<A>()(v7, UnlockService, v9, v10);
}

uint64_t sub_1001D9764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v8)(void);

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  v5 = *(_QWORD **)v2;
  v5[6] = a1;
  v5[7] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000564D4, v5[2], 0);
  swift_release(v5[4]);
  v8 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock()
                         + async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock());
  v7 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock()
                                  + 1));
  v5[8] = v7;
  *v7 = v5;
  v7[1] = sub_1001D981C;
  return v8();
}

uint64_t sub_1001D981C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_1001D9874, v1, 0);
}

uint64_t sub_1001D9874()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.startup()
                         + async function pointer to dispatch thunk of CloudKitStorage.startup());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.startup()
                                  + 1));
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_1001D98D4;
  return v3();
}

uint64_t sub_1001D98D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001D9938;
  else
    v4 = sub_1000564A0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 16), 0);
}

uint64_t sub_1001D9938()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D996C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CloudStorageService();
  v2 = sub_100018A7C(&qword_100260F88, v1, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  return ActorServiceProtocol.description.getter(v0, v2);
}

uint64_t sub_1001D99B8(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(&qword_1002677F0, a2, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB64);
}

uint64_t sub_1001D99E4(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(qword_1002677F8, a2, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBBEC);
}

uint64_t sub_1001D9A10()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B3E0);
  sub_100037A9C(v0, (uint64_t)qword_10027B3E0);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x80000001001FC370, 0xD000000000000013, 0x80000001001FBB30);
}

ValueMetadata *type metadata accessor for UserNotificationDestination()
{
  return &type metadata for UserNotificationDestination;
}

uint64_t sub_1001D9AA0(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  char v33;

  v30 = a2;
  v3 = sub_100037A5C(&qword_1002678A0);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  __chkstk_darwin(v3);
  v26 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_1002678A8);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_1002678B0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C(&qword_1002678B8);
  v29 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v15 = a1[4];
  sub_100036228(a1, v16);
  v17 = sub_1001DA460();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UserNotificationDestination.CodingKeys, &type metadata for UserNotificationDestination.CodingKeys, v17, v16, v15);
  if ((_BYTE)v30)
  {
    if (v30 == 1)
    {
      v32 = 1;
      v18 = sub_1001DA4E8();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for UserNotificationDestination.DevicesCodingKeys, &v32, v12, &type metadata for UserNotificationDestination.DevicesCodingKeys, v18);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
    }
    else
    {
      v33 = 2;
      v20 = sub_1001DA4A4();
      v21 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for UserNotificationDestination.ItemsCodingKeys, &v33, v12, &type metadata for UserNotificationDestination.ItemsCodingKeys, v20);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v28);
    }
  }
  else
  {
    v31 = 0;
    v19 = sub_1001DA52C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for UserNotificationDestination.PeopleCodingKeys, &v31, v12, &type metadata for UserNotificationDestination.PeopleCodingKeys, v19);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v14, v12);
}

uint64_t sub_1001D9D04()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x73656369766564;
  if (*v0 != 1)
    v1 = 0x736D657469;
  if (*v0)
    return v1;
  else
    return 0x656C706F6570;
}

uint64_t sub_1001D9D58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001D9F44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001D9D7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA460();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D9DA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA460();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D9DCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA4E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D9DF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA4E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D9E1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA4A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D9E44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA4A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D9E6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA52C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D9E94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA52C();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_1001D9EBC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1001DA088(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_1001D9EE4(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_1001D9AA0(a1, *v1);
}

unint64_t sub_1001D9F00()
{
  unint64_t result;

  result = qword_100267850;
  if (!qword_100267850)
  {
    result = swift_getWitnessTable(&unk_1001FBCFC, &type metadata for UserNotificationDestination);
    atomic_store(result, (unint64_t *)&qword_100267850);
  }
  return result;
}

uint64_t sub_1001D9F44(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x656C706F6570 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C706F6570, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x73656369766564 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656369766564, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736D657469, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

_QWORD *sub_1001DA088(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  char v41;
  char v42;
  char v43;

  v37 = sub_100037A5C(&qword_100267858);
  v35 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100037A5C(&qword_100267860);
  v33 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v38 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100037A5C(&qword_100267868);
  v4 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100267870);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = a1[3];
  v12 = a1[4];
  sub_100036228(a1, v11);
  v13 = sub_1001DA460();
  v14 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UserNotificationDestination.CodingKeys, &type metadata for UserNotificationDestination.CodingKeys, v13, v11, v12);
  if (v14)
    goto LABEL_7;
  v31 = v4;
  v32 = v8;
  v15 = v39;
  v40 = a1;
  v16 = v10;
  v17 = KeyedDecodingContainer.allKeys.getter(v7);
  v18 = v17;
  v19 = v7;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = v17;
    v24 = type metadata accessor for DecodingError(0);
    swift_allocError(v24, &protocol witness table for DecodingError, 0, 0);
    v10 = v25;
    sub_100037A5C(&qword_100267880);
    *v10 = &type metadata for UserNotificationDestination;
    v26 = KeyedDecodingContainer.codingPath.getter(v19);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD00000000000002BLL, 0x8000000100202190, 0);
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v10, enum case for DecodingError.typeMismatch(_:), v24);
    swift_willThrow(v27);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v16, v19);
    a1 = v40;
LABEL_7:
    sub_10002BB90(a1);
    return v10;
  }
  v10 = (_QWORD *)*(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if ((_DWORD)v10 == 1)
    {
      v42 = 1;
      v20 = sub_1001DA4E8();
      v21 = v38;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for UserNotificationDestination.DevicesCodingKeys, &v42, v7, &type metadata for UserNotificationDestination.DevicesCodingKeys, v20);
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v36);
    }
    else
    {
      v43 = 2;
      v30 = sub_1001DA4A4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for UserNotificationDestination.ItemsCodingKeys, &v43, v7, &type metadata for UserNotificationDestination.ItemsCodingKeys, v30);
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v37);
    }
    swift_bridgeObjectRelease(v18);
    (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v16, v19);
  }
  else
  {
    v41 = 0;
    v29 = sub_1001DA52C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for UserNotificationDestination.PeopleCodingKeys, &v41, v7, &type metadata for UserNotificationDestination.PeopleCodingKeys, v29);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v34);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v16, v7);
  }
  sub_10002BB90(v40);
  return v10;
}

unint64_t sub_1001DA460()
{
  unint64_t result;

  result = qword_100267878;
  if (!qword_100267878)
  {
    result = swift_getWitnessTable(&unk_1001FC00C, &type metadata for UserNotificationDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267878);
  }
  return result;
}

unint64_t sub_1001DA4A4()
{
  unint64_t result;

  result = qword_100267888;
  if (!qword_100267888)
  {
    result = swift_getWitnessTable(&unk_1001FBFBC, &type metadata for UserNotificationDestination.ItemsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267888);
  }
  return result;
}

unint64_t sub_1001DA4E8()
{
  unint64_t result;

  result = qword_100267890;
  if (!qword_100267890)
  {
    result = swift_getWitnessTable(&unk_1001FBF6C, &type metadata for UserNotificationDestination.DevicesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267890);
  }
  return result;
}

unint64_t sub_1001DA52C()
{
  unint64_t result;

  result = qword_100267898;
  if (!qword_100267898)
  {
    result = swift_getWitnessTable(&unk_1001FBF1C, &type metadata for UserNotificationDestination.PeopleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267898);
  }
  return result;
}

uint64_t _s13findmylocated27UserNotificationDestinationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001DA5BC + 4 * byte_1001FBC25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001DA5F0 + 4 * byte_1001FBC20[v4]))();
}

uint64_t sub_1001DA5F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DA5F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DA600);
  return result;
}

uint64_t sub_1001DA60C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DA614);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001DA618(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DA620(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationDestination.CodingKeys()
{
  return &type metadata for UserNotificationDestination.CodingKeys;
}

ValueMetadata *type metadata accessor for UserNotificationDestination.PeopleCodingKeys()
{
  return &type metadata for UserNotificationDestination.PeopleCodingKeys;
}

ValueMetadata *type metadata accessor for UserNotificationDestination.DevicesCodingKeys()
{
  return &type metadata for UserNotificationDestination.DevicesCodingKeys;
}

ValueMetadata *type metadata accessor for UserNotificationDestination.ItemsCodingKeys()
{
  return &type metadata for UserNotificationDestination.ItemsCodingKeys;
}

unint64_t sub_1001DA670()
{
  unint64_t result;

  result = qword_1002678C0;
  if (!qword_1002678C0)
  {
    result = swift_getWitnessTable(&unk_1001FBEF4, &type metadata for UserNotificationDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002678C0);
  }
  return result;
}

unint64_t sub_1001DA6B8()
{
  unint64_t result;

  result = qword_1002678C8;
  if (!qword_1002678C8)
  {
    result = swift_getWitnessTable(&unk_1001FBE14, &type metadata for UserNotificationDestination.PeopleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002678C8);
  }
  return result;
}

unint64_t sub_1001DA700()
{
  unint64_t result;

  result = qword_1002678D0;
  if (!qword_1002678D0)
  {
    result = swift_getWitnessTable(&unk_1001FBE3C, &type metadata for UserNotificationDestination.PeopleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002678D0);
  }
  return result;
}

unint64_t sub_1001DA748()
{
  unint64_t result;

  result = qword_1002678D8;
  if (!qword_1002678D8)
  {
    result = swift_getWitnessTable(&unk_1001FBDC4, &type metadata for UserNotificationDestination.DevicesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002678D8);
  }
  return result;
}

unint64_t sub_1001DA790()
{
  unint64_t result;

  result = qword_1002678E0;
  if (!qword_1002678E0)
  {
    result = swift_getWitnessTable(&unk_1001FBDEC, &type metadata for UserNotificationDestination.DevicesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002678E0);
  }
  return result;
}

unint64_t sub_1001DA7D8()
{
  unint64_t result;

  result = qword_1002678E8;
  if (!qword_1002678E8)
  {
    result = swift_getWitnessTable(&unk_1001FBD74, &type metadata for UserNotificationDestination.ItemsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002678E8);
  }
  return result;
}

unint64_t sub_1001DA820()
{
  unint64_t result;

  result = qword_1002678F0;
  if (!qword_1002678F0)
  {
    result = swift_getWitnessTable(&unk_1001FBD9C, &type metadata for UserNotificationDestination.ItemsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002678F0);
  }
  return result;
}

unint64_t sub_1001DA868()
{
  unint64_t result;

  result = qword_1002678F8;
  if (!qword_1002678F8)
  {
    result = swift_getWitnessTable(&unk_1001FBE64, &type metadata for UserNotificationDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002678F8);
  }
  return result;
}

unint64_t sub_1001DA8B0()
{
  unint64_t result;

  result = qword_100267900;
  if (!qword_100267900)
  {
    result = swift_getWitnessTable(&unk_1001FBE8C, &type metadata for UserNotificationDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267900);
  }
  return result;
}

uint64_t sub_1001DA8F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[7] = a1;
  v2[8] = v1;
  v3 = sub_100037A5C(&qword_1002670C8);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Row(0);
  v2[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[11] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v6);
  v2[13] = swift_task_alloc(v6);
  v7 = type metadata accessor for Table(0);
  v2[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[15] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v9);
  v2[17] = swift_task_alloc(v9);
  v2[18] = swift_task_alloc(v9);
  return swift_task_switch(sub_1001DA9D0, v1, 0);
}

uint64_t sub_1001DA9D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 112);
  *(_QWORD *)(v0 + 152) = v1;
  return swift_task_switch(sub_1001DA9EC, v1, 0);
}

uint64_t sub_1001DA9EC()
{
  uint64_t v0;

  sub_1000D0754();
  *(_QWORD *)(v0 + 160) = 0;
  return swift_task_switch(sub_1001DAAAC, *(_QWORD *)(v0 + 152), 0);
}

uint64_t sub_1001DAAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = type metadata accessor for LocalStorageDatabase(0);
  v3 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  *(_QWORD *)(v0 + 168) = Database.readConnection.getter(v2, v3);
  return swift_task_switch(sub_1001DAB28, v1, 0);
}

uint64_t sub_1001DAB28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(uint64_t, uint64_t);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;

  v1 = v0[21];
  if (!v1)
  {
    v29 = type metadata accessor for DatabaseError(0);
    v30 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v29, v30, 0, 0);
    v32 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, enum case for DatabaseError.notConnected(_:), v29);
    swift_willThrow(v32);
    goto LABEL_15;
  }
  if (qword_10025F8E8 != -1)
    swift_once(&qword_10025F8E8, sub_1000CFD84);
  v2 = v0[18];
  v4 = v0[14];
  v3 = v0[15];
  v5 = sub_100037A9C(v4, (uint64_t)qword_10027ABD8);
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v73(v2, v5, v4);
  v6 = sub_100037A5C(&qword_100260D80);
  v7 = swift_allocObject(v6, 192, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001FC060;
  if (qword_10025F998 != -1)
    swift_once(&qword_10025F998, sub_10014BF08);
  v8 = sub_100037A5C(&qword_100260D40);
  v9 = sub_100037A9C(v8, (uint64_t)qword_10027ADF0);
  *(_QWORD *)(v7 + 56) = v8;
  *(_QWORD *)(v7 + 64) = sub_10001013C(&qword_100260D88, &qword_100260D40, (uint64_t)&protocol conformance descriptor for Expression<A>);
  v10 = sub_10003276C((_QWORD *)(v7 + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v10, v9, v8);
  if (qword_10025F9B8 != -1)
    swift_once(&qword_10025F9B8, sub_10014C124);
  v11 = sub_100037A5C(&qword_100260D78);
  v12 = sub_100037A9C(v11, (uint64_t)qword_10027AE50);
  *(_QWORD *)(v7 + 96) = v11;
  *(_QWORD *)(v7 + 104) = sub_10001013C(&qword_100267B08, &qword_100260D78, (uint64_t)&protocol conformance descriptor for Expression<A>);
  v13 = sub_10003276C((_QWORD *)(v7 + 72));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v13, v12, v11);
  if (qword_10025F9A8 != -1)
    swift_once(&qword_10025F9A8, sub_10014C00C);
  v72 = v0 + 2;
  v74 = v1;
  v14 = sub_100037A5C(&qword_100260D50);
  v15 = sub_100037A9C(v14, (uint64_t)qword_10027AE20);
  *(_QWORD *)(v7 + 136) = v14;
  *(_QWORD *)(v7 + 144) = sub_10001013C(&qword_100267B10, &qword_100260D50, (uint64_t)&protocol conformance descriptor for Expression<A>);
  v16 = sub_10003276C((_QWORD *)(v7 + 112));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v16, v15, v14);
  if (qword_10025F9B0 != -1)
    swift_once(&qword_10025F9B0, sub_10014C098);
  v17 = v0[17];
  v18 = v0[16];
  v70 = v0[15];
  v71 = v0[20];
  v19 = v0[14];
  v20 = sub_100037A5C(&qword_100260D68);
  v21 = sub_100037A9C(v20, (uint64_t)qword_10027AE38);
  *(_QWORD *)(v7 + 176) = v20;
  *(_QWORD *)(v7 + 184) = sub_10001013C(&qword_100267B18, &qword_100260D68, (uint64_t)&protocol conformance descriptor for Expression<A>);
  v22 = sub_10003276C((_QWORD *)(v7 + 152));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v22, v21, v20);
  SchemaType.select(_:)(v7, v19, &protocol witness table for Table);
  swift_bridgeObjectRelease(v7);
  QueryType.limit(_:)(1, 0, v19, &protocol witness table for Table);
  v23 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
  v23(v18, v19);
  v0[5] = v19;
  v0[6] = &protocol witness table for Table;
  v24 = sub_10003276C(v72);
  v73((uint64_t)v24, v17, v19);
  v25 = Connection.prepare(_:)(v72);
  if (v71)
  {
    v26 = v0[17];
    v27 = v0[18];
    v28 = v0[14];
    swift_release(v74);
    v23(v26, v28);
    v23(v27, v28);
    sub_10002BB90(v72);
LABEL_15:
    v33 = v0[17];
    v34 = v0[16];
    v36 = v0[12];
    v35 = v0[13];
    v37 = v0[9];
    swift_task_dealloc(v0[18]);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    v38 = (uint64_t (*)(void))v0[1];
    return v38();
  }
  v40 = v25;
  v41 = sub_10002BB90(v72);
  v42 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v41);
  swift_release(v40);
  if (*(_QWORD *)(v42 + 16))
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0[11] + 16))(v0[9], v42 + ((*(unsigned __int8 *)(v0[11] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[11] + 80)), v0[10]);
    v43 = 0;
  }
  else
  {
    v43 = 1;
  }
  v44 = v0[10];
  v45 = v0[11];
  v46 = v0[9];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v46, v43, 1, v44);
  swift_release(v42);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v46, 1, v44) == 1)
  {
    v47 = v0[17];
    v48 = v0[18];
    v49 = v0[14];
    v50 = v0[9];
    swift_release(v74);
    v23(v47, v49);
    v23(v48, v49);
    sub_1000087A0(v50, &qword_1002670C8);
    v51 = 1;
  }
  else
  {
    v52 = v0[12];
    v53 = v0[13];
    v54 = v0[10];
    v55 = v0[11];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v55 + 32))(v53, v0[9], v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v52, v53, v54);
    sub_1001E425C();
    v56 = v0[17];
    v57 = v0[18];
    v59 = v0[13];
    v58 = v0[14];
    v60 = v0[10];
    v61 = v0[11];
    swift_release(v74);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v59, v60);
    v23(v56, v58);
    v23(v57, v58);
    v51 = 0;
  }
  v63 = v0[17];
  v62 = v0[18];
  v64 = v0[16];
  v66 = v0[12];
  v65 = v0[13];
  v67 = v0[9];
  v68 = v0[7];
  v69 = type metadata accessor for OwnerSharedSecretsRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, v51, 1, v69);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  v38 = (uint64_t (*)(void))v0[1];
  return v38();
}

uint64_t sub_1001DB190(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for Insert(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001DB1F0, v1, 0);
}

uint64_t sub_1001DB1F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  *(_QWORD *)(v0 + 56) = v1;
  return swift_task_switch(sub_1001DB20C, v1, 0);
}

uint64_t sub_1001DB20C()
{
  uint64_t v0;

  sub_1000D0754();
  *(_QWORD *)(v0 + 64) = 0;
  return swift_task_switch(sub_1001DB280, *(_QWORD *)(v0 + 56), 0);
}

uint64_t sub_1001DB280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for LocalStorageDatabase(0);
  v3 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  *(_QWORD *)(v0 + 72) = Database.writeConnection.getter(v2, v3);
  return swift_task_switch(sub_1001DB2FC, v1, 0);
}

uint64_t sub_1001DB2FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 72))
  {
    v1 = (_QWORD *)swift_task_alloc(dword_100267AFC);
    *(_QWORD *)(v0 + 80) = v1;
    *v1 = v0;
    v1[1] = sub_1001DB3E8;
    return sub_1001E455C(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
  }
  else
  {
    v3 = type metadata accessor for DatabaseError(0);
    v4 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v3, v4, 0, 0);
    v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v5, enum case for DatabaseError.notConnected(_:), v3);
    swift_willThrow(v6);
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001DB3E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  return swift_task_switch(sub_1001DB440, v1, 0);
}

uint64_t sub_1001DB440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  Connection.run(_:)(v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001DB4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v5 = sub_100037A5C(&qword_100260D48);
  v4[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[14] = v6;
  v4[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Table(0);
  v4[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[17] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[18] = swift_task_alloc(v9);
  v4[19] = swift_task_alloc(v9);
  return swift_task_switch(sub_1001DB55C, 0, 0);
}

uint64_t sub_1001DB55C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 96) + 112);
  *(_QWORD *)(v0 + 160) = v1;
  return swift_task_switch(sub_1001DB578, v1, 0);
}

uint64_t sub_1001DB578()
{
  uint64_t v0;

  sub_1000D0754();
  *(_QWORD *)(v0 + 168) = 0;
  return swift_task_switch(sub_1001DB600, *(_QWORD *)(v0 + 160), 0);
}

uint64_t sub_1001DB600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for LocalStorageDatabase(0);
  v2 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  *(_QWORD *)(v0 + 176) = Database.readConnection.getter(v1, v2);
  return swift_task_switch(sub_1001DB670, 0, 0);
}

uint64_t sub_1001DB670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  void (*v15)(uint64_t, uint64_t);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  _QWORD *v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 176);
  if (v1)
  {
    if (qword_10025F8F0 != -1)
      swift_once(&qword_10025F8F0, sub_1000CFDA8);
    v37 = (_QWORD *)(v0 + 16);
    v38 = v1;
    v2 = *(_QWORD *)(v0 + 136);
    v3 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = sub_100037A9C(v4, (uint64_t)qword_10027ABF0);
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
    v36(v3, v5, v4);
    if (qword_10025F9C0 != -1)
      swift_once(&qword_10025F9C0, sub_10014C1AC);
    v7 = *(_QWORD *)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 128);
    v34 = *(_QWORD *)(v0 + 136);
    v35 = *(_QWORD *)(v0 + 168);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = sub_100037A5C(&qword_100260DB8);
    v13 = sub_100037A9C(v12, (uint64_t)qword_10027AE68);
    v14 = String.lowercased()();
    *(Swift::String *)(v0 + 56) = v14;
    == infix<A>(_:_:)(v13, v0 + 56, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    swift_bridgeObjectRelease(v14._object);
    QueryType.filter(_:)(v10, v8, &protocol witness table for Table);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    v15 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v15(v7, v8);
    *(_QWORD *)(v0 + 40) = v8;
    *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
    v16 = sub_10003276C(v37);
    v36((uint64_t)v16, v6, v8);
    v17 = sub_100031CF8((uint64_t)v37);
    v18 = *(_QWORD *)(v0 + 152);
    if (!v35)
    {
      v26 = v17;
      v27 = *(_QWORD *)(v0 + 144);
      v29 = *(_QWORD *)(v0 + 120);
      v28 = *(_QWORD *)(v0 + 128);
      v30 = sub_10002BB90(v37);
      v31 = dispatch thunk of _AnySequenceBox._makeIterator()(v30);
      v32 = swift_release(v26);
      dispatch thunk of _AnyIteratorBoxBase.next()(v32);
      swift_release(v31);
      swift_release(v38);
      v15(v18, v28);
      swift_task_dealloc(v18);
      swift_task_dealloc(v27);
      swift_task_dealloc(v29);
      v25 = *(uint64_t (**)(void))(v0 + 8);
      return v25();
    }
    v15(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 128));
    swift_release(v38);
    sub_10002BB90(v37);
  }
  else
  {
    v19 = type metadata accessor for DatabaseError(0);
    v20 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v19, v20, 0, 0);
    v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, enum case for DatabaseError.notConnected(_:), v19);
    swift_willThrow(v22);
  }
  v23 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_1001DB968(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for Insert(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FriendRecord(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Delete(0);
  v2[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001DBA18, v1, 0);
}

uint64_t sub_1001DBA18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 112);
  *(_QWORD *)(v0 + 120) = v1;
  return swift_task_switch(sub_1001DBA34, v1, 0);
}

uint64_t sub_1001DBA34()
{
  uint64_t v0;

  sub_1000D0754();
  *(_QWORD *)(v0 + 128) = 0;
  return swift_task_switch(sub_1001DBAC0, *(_QWORD *)(v0 + 120), 0);
}

uint64_t sub_1001DBAC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for LocalStorageDatabase(0);
  v3 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  *(_QWORD *)(v0 + 136) = Database.writeConnection.getter(v2, v3);
  return swift_task_switch(sub_1001DBB3C, v1, 0);
}

uint64_t sub_1001DBB3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 136);
  if (!v1)
  {
    v8 = type metadata accessor for DatabaseError(0);
    v9 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v8, v9, 0, 0);
    v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DatabaseError.notConnected(_:), v8);
    swift_willThrow(v11);
    goto LABEL_7;
  }
  if (qword_10025F8F0 != -1)
    swift_once(&qword_10025F8F0, sub_1000CFDA8);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = type metadata accessor for Table(0);
  sub_100037A9C(v4, (uint64_t)qword_10027ABF0);
  QueryType.delete()(v4, &protocol witness table for Table);
  Connection.run(_:)(v3);
  if (v2)
  {
    v6 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 96);
    swift_release(v1);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
LABEL_7:
    v12 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
  v16 = sub_1001E8408(*(_QWORD *)(v0 + 32));
  *(_QWORD *)(v0 + 144) = v16;
  if (qword_10025FBD0 != -1)
    swift_once(&qword_10025FBD0, sub_1001E4180);
  v17 = type metadata accessor for Logger(0);
  sub_100037A9C(v17, (uint64_t)qword_10027B3F8);
  v18 = swift_bridgeObjectRetain_n(v16, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(32, -1);
    v37 = v22;
    *(_DWORD *)v21 = 141558275;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    v23 = swift_bridgeObjectRetain(v16);
    v24 = Array.description.getter(v23);
    v26 = v25;
    swift_bridgeObjectRelease(v16);
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v24, v26, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease_n(v16, 2);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "LocalStorageSerivice write friendRecords: %{private,mask.hash}s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v16, 2);
  }

  v27 = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(v0 + 152) = v27;
  if (!v27)
  {
    swift_bridgeObjectRelease(v16);
    v33 = *(_QWORD *)(v0 + 104);
    v32 = *(_QWORD *)(v0 + 112);
    v35 = *(_QWORD *)(v0 + 88);
    v34 = *(_QWORD *)(v0 + 96);
    v36 = *(_QWORD *)(v0 + 64);
    swift_release(*(_QWORD *)(v0 + 136));
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    swift_task_dealloc(v32);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
  v29 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v0 + 88);
  v30 = *(_DWORD *)(v29 + 80);
  *(_DWORD *)(v0 + 192) = v30;
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v29 + 72);
  *(_QWORD *)(v0 + 168) = 0;
  sub_100025C70(*(_QWORD *)(v0 + 144) + ((v30 + 32) & ~(unint64_t)v30), v28, type metadata accessor for FriendRecord);
  v31 = (_QWORD *)swift_task_alloc(dword_100267A4C);
  *(_QWORD *)(v0 + 176) = v31;
  *v31 = v0;
  v31[1] = sub_1001DBF48;
  return sub_1001E5620(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
}

uint64_t sub_1001DBF48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 40);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 144));
    v5 = sub_1001DC198;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 40);
    v5 = sub_1001DBFBC;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_1001DBFBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = *(_QWORD *)(v0 + 184);
  Connection.run(_:)(*(_QWORD *)(v0 + 64));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 56);
    v7 = *(_QWORD *)(v0 + 64);
    v9 = *(_QWORD *)(v0 + 48);
    swift_release(*(_QWORD *)(v0 + 136));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    sub_100024990(v6, type metadata accessor for FriendRecord);
    swift_bridgeObjectRelease(v2);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v10 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 168) + 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  sub_100024990(v14, type metadata accessor for FriendRecord);
  if (v15 == v13)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
    v17 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 88);
    v18 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 64);
    swift_release(*(_QWORD *)(v0 + 136));
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    swift_task_dealloc(v16);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  v22 = *(_QWORD *)(v0 + 160);
  v23 = *(_QWORD *)(v0 + 168) + 1;
  *(_QWORD *)(v0 + 168) = v23;
  sub_100025C70(*(_QWORD *)(v0 + 144)+ ((*(unsigned __int8 *)(v0 + 192) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 192))+ v22 * v23, *(_QWORD *)(v0 + 88), type metadata accessor for FriendRecord);
  v24 = (_QWORD *)swift_task_alloc(dword_100267A4C);
  *(_QWORD *)(v0 + 176) = v24;
  *v24 = v0;
  v24[1] = sub_1001DBF48;
  return sub_1001E5620(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
}

uint64_t sub_1001DC198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 136));
  sub_100024990(v4, type metadata accessor for FriendRecord);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001DC21C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v2[50] = a1;
  v2[51] = v1;
  v3 = type metadata accessor for Insert(0);
  v2[52] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[53] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[54] = swift_task_alloc(v5);
  v2[55] = swift_task_alloc(v5);
  v2[56] = swift_task_alloc(v5);
  v2[57] = swift_task_alloc(v5);
  v6 = type metadata accessor for Logger(0);
  v2[58] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[59] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[60] = swift_task_alloc(v8);
  v2[61] = swift_task_alloc(v8);
  v9 = sub_100037A5C(&qword_100260DB8);
  v2[62] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[63] = v10;
  v2[64] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_100260D48);
  v2[65] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[66] = v12;
  v2[67] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Delete(0);
  v2[68] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[69] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[70] = swift_task_alloc(v15);
  v2[71] = swift_task_alloc(v15);
  v2[72] = swift_task_alloc(v15);
  v16 = type metadata accessor for HandleType(0);
  v2[73] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[74] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[75] = swift_task_alloc(v18);
  v2[76] = swift_task_alloc(v18);
  v2[77] = swift_task_alloc(v18);
  v19 = type metadata accessor for Handle(0);
  v2[78] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v2[79] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[80] = swift_task_alloc(v21);
  v2[81] = swift_task_alloc(v21);
  v22 = sub_100037A5C(&qword_100260940);
  v2[82] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for FriendRecord(0);
  v2[83] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v2[84] = v24;
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[85] = swift_task_alloc(v25);
  v2[86] = swift_task_alloc(v25);
  v2[87] = swift_task_alloc(v25);
  v2[88] = swift_task_alloc(v25);
  v2[89] = swift_task_alloc(v25);
  v2[90] = swift_task_alloc(v25);
  v2[91] = swift_task_alloc(v25);
  v26 = type metadata accessor for FriendshipAction(0);
  v2[92] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v2[93] = v27;
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[94] = swift_task_alloc(v28);
  v2[95] = swift_task_alloc(v28);
  v2[96] = swift_task_alloc(v28);
  v2[97] = swift_task_alloc(v28);
  v2[98] = swift_task_alloc(v28);
  v2[99] = swift_task_alloc(v28);
  v2[100] = swift_task_alloc(v28);
  v29 = type metadata accessor for Friend(0);
  v2[101] = v29;
  v30 = *(_QWORD *)(v29 - 8);
  v2[102] = v30;
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[103] = swift_task_alloc(v31);
  v2[104] = swift_task_alloc(v31);
  v2[105] = swift_task_alloc(v31);
  v2[106] = swift_task_alloc(v31);
  v2[107] = swift_task_alloc(v31);
  v32 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100263338) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[108] = swift_task_alloc(v32);
  v2[109] = swift_task_alloc(v32);
  v33 = type metadata accessor for Table(0);
  v2[110] = v33;
  v34 = *(_QWORD *)(v33 - 8);
  v2[111] = v34;
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[112] = swift_task_alloc(v35);
  v2[113] = swift_task_alloc(v35);
  return swift_task_switch(sub_1001DC5C8, v1, 0);
}

uint64_t sub_1001DC5C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 408) + 112);
  *(_QWORD *)(v0 + 912) = v1;
  return swift_task_switch(sub_1001DC5E4, v1, 0);
}

uint64_t sub_1001DC5E4()
{
  uint64_t v0;

  sub_1000D0754();
  return swift_task_switch(sub_1001DC88C, *(_QWORD *)(v0 + 912), 0);
}

uint64_t sub_1001DC88C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = type metadata accessor for LocalStorageDatabase(0);
  v3 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  *(_QWORD *)(v0 + 920) = Database.writeConnection.getter(v2, v3);
  return swift_task_switch(sub_1001DC908, v1, 0);
}

uint64_t sub_1001DC908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  if (!*(_QWORD *)(v0 + 920))
  {
    v20 = type metadata accessor for DatabaseError(0);
    v21 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v20, v21, 0, 0);
    v23 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, enum case for DatabaseError.notConnected(_:), v20);
    swift_willThrow(v23);
    v24 = *(_QWORD *)(v0 + 896);
    v25 = *(_QWORD *)(v0 + 872);
    v26 = *(_QWORD *)(v0 + 864);
    v27 = *(_QWORD *)(v0 + 856);
    v28 = *(_QWORD *)(v0 + 848);
    v29 = *(_QWORD *)(v0 + 840);
    v30 = *(_QWORD *)(v0 + 832);
    v31 = *(_QWORD *)(v0 + 824);
    v32 = *(_QWORD *)(v0 + 800);
    v68 = *(_QWORD *)(v0 + 792);
    v70 = *(_QWORD *)(v0 + 784);
    v72 = *(_QWORD *)(v0 + 776);
    v74 = *(_QWORD *)(v0 + 768);
    v76 = *(_QWORD *)(v0 + 760);
    v78 = *(_QWORD *)(v0 + 752);
    v80 = *(_QWORD *)(v0 + 728);
    v82 = *(_QWORD *)(v0 + 720);
    v84 = *(_QWORD *)(v0 + 712);
    v86 = *(_QWORD *)(v0 + 704);
    v88 = *(_QWORD *)(v0 + 696);
    v90 = *(_QWORD *)(v0 + 688);
    v92 = *(_QWORD *)(v0 + 680);
    v94 = *(_QWORD *)(v0 + 656);
    v96 = *(_QWORD *)(v0 + 648);
    v98 = *(_QWORD *)(v0 + 640);
    v100 = *(_QWORD *)(v0 + 616);
    v102 = *(_QWORD *)(v0 + 608);
    v104 = *(_QWORD *)(v0 + 600);
    v106 = *(_QWORD *)(v0 + 576);
    v108 = *(_QWORD *)(v0 + 568);
    v110 = *(_QWORD *)(v0 + 560);
    v112 = *(_QWORD *)(v0 + 536);
    v114 = *(_QWORD *)(v0 + 512);
    v116 = *(_QWORD *)(v0 + 488);
    v118 = *(_QWORD *)(v0 + 480);
    v120 = *(_QWORD *)(v0 + 456);
    v122 = *(_QWORD *)(v0 + 448);
    v124 = *(_QWORD *)(v0 + 440);
    v126 = *(_QWORD *)(v0 + 432);
    swift_task_dealloc(*(_QWORD *)(v0 + 904));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v124);
    swift_task_dealloc(v126);
    v33 = *(uint64_t (**)(void))(v0 + 8);
    return v33();
  }
  if (qword_10025F8F0 != -1)
    swift_once(&qword_10025F8F0, sub_1000CFDA8);
  v1 = *(_QWORD *)(v0 + 904);
  v2 = *(_QWORD *)(v0 + 888);
  v3 = *(_QWORD *)(v0 + 880);
  v4 = *(_QWORD *)(v0 + 400);
  v5 = sub_100037A9C(v3, (uint64_t)qword_10027ABF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  v6 = *(_BYTE *)(v4 + 32);
  *(_BYTE *)(v0 + 1120) = v6;
  v7 = -1;
  v8 = -1 << v6;
  if (-(-1 << v6) < 64)
    v7 = ~(-1 << -(char)(-1 << v6));
  v9 = v7 & *(_QWORD *)(v4 + 64);
  *(_DWORD *)(v0 + 1088) = enum case for HandleType.follower(_:);
  *(_DWORD *)(v0 + 1092) = enum case for HandleType.following(_:);
  *(_DWORD *)(v0 + 1096) = enum case for HandleType.futureFollower(_:);
  *(_DWORD *)(v0 + 1100) = enum case for HandleType.futureFollowing(_:);
  *(_DWORD *)(v0 + 1104) = enum case for HandleType.pendingOffer(_:);
  *(_DWORD *)(v0 + 1108) = enum case for FriendshipAction.remove(_:);
  *(_DWORD *)(v0 + 1112) = enum case for FriendshipAction.add(_:);
  *(_DWORD *)(v0 + 1116) = enum case for FriendshipAction.modify(_:);
  v10 = swift_bridgeObjectRetain(v4);
  if (v9)
  {
    v11 = 0;
    v12 = __clz(__rbit64(v9));
    v13 = (v9 - 1) & v9;
    v14 = *(_QWORD **)(v0 + 400);
LABEL_8:
    v15 = *(_QWORD *)(v0 + 864);
    v16 = *(_QWORD *)(v0 + 744);
    v17 = *(_QWORD *)(v0 + 736);
    (*(void (**)(uint64_t, unint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 816) + 16))(v15, v14[6] + *(_QWORD *)(*(_QWORD *)(v0 + 816) + 72) * v12, *(_QWORD *)(v0 + 808), v10);
    v18 = v14[7] + *(_QWORD *)(v16 + 72) * v12;
    v19 = sub_100037A5C(&qword_100263340);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16))(v15 + *(int *)(v19 + 48), v18, v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v15, 0, 1, v19);
    goto LABEL_16;
  }
  v34 = 63 - v8;
  if ((unint64_t)(63 - v8) <= 0x7F)
  {
    v11 = 0;
  }
  else
  {
    v14 = *(_QWORD **)(v0 + 400);
    v35 = v14[9];
    if (v35)
    {
      v11 = 1;
LABEL_13:
      v13 = (v35 - 1) & v35;
      v12 = __clz(__rbit64(v35)) + (v11 << 6);
      goto LABEL_8;
    }
    if (v34 < 0xC0)
    {
      v11 = 1;
    }
    else
    {
      v35 = v14[10];
      if (v35)
      {
        v11 = 2;
        goto LABEL_13;
      }
      if (v34 < 0x100)
      {
        v11 = 2;
      }
      else
      {
        v35 = v14[11];
        if (v35)
        {
          v11 = 3;
          goto LABEL_13;
        }
        if (v34 < 0x140)
        {
          v11 = 3;
        }
        else
        {
          v35 = v14[12];
          if (v35)
          {
            v11 = 4;
            goto LABEL_13;
          }
          v64 = 0;
          v11 = (v34 >> 6) - 1;
          while ((v34 >> 6) - 5 != v64)
          {
            v35 = v14[v64++ + 13];
            if (v35)
            {
              v11 = v64 + 4;
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
  v36 = *(_QWORD *)(v0 + 864);
  v37 = sub_100037A5C(&qword_100263340);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  v13 = 0;
LABEL_16:
  *(_QWORD *)(v0 + 936) = v13;
  *(_QWORD *)(v0 + 928) = v11;
  v38 = *(_QWORD *)(v0 + 872);
  sub_10000EF6C(*(_QWORD *)(v0 + 864), v38, &qword_100263338);
  v39 = sub_100037A5C(&qword_100263340);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v38, 1, v39) == 1)
  {
    v40 = *(_QWORD *)(v0 + 920);
    v41 = *(_QWORD *)(v0 + 904);
    v42 = *(_QWORD *)(v0 + 896);
    v43 = *(_QWORD *)(v0 + 888);
    v44 = *(_QWORD *)(v0 + 880);
    v45 = *(_QWORD *)(v0 + 872);
    v46 = *(_QWORD *)(v0 + 864);
    v47 = *(_QWORD *)(v0 + 856);
    v48 = *(_QWORD *)(v0 + 848);
    v65 = *(_QWORD *)(v0 + 840);
    v66 = *(_QWORD *)(v0 + 832);
    v67 = *(_QWORD *)(v0 + 824);
    v69 = *(_QWORD *)(v0 + 800);
    v71 = *(_QWORD *)(v0 + 792);
    v73 = *(_QWORD *)(v0 + 784);
    v75 = *(_QWORD *)(v0 + 776);
    v77 = *(_QWORD *)(v0 + 768);
    v79 = *(_QWORD *)(v0 + 760);
    v81 = *(_QWORD *)(v0 + 752);
    v83 = *(_QWORD *)(v0 + 728);
    v85 = *(_QWORD *)(v0 + 720);
    v87 = *(_QWORD *)(v0 + 712);
    v89 = *(_QWORD *)(v0 + 704);
    v91 = *(_QWORD *)(v0 + 696);
    v93 = *(_QWORD *)(v0 + 688);
    v95 = *(_QWORD *)(v0 + 680);
    v97 = *(_QWORD *)(v0 + 656);
    v99 = *(_QWORD *)(v0 + 648);
    v101 = *(_QWORD *)(v0 + 640);
    v103 = *(_QWORD *)(v0 + 616);
    v105 = *(_QWORD *)(v0 + 608);
    v107 = *(_QWORD *)(v0 + 600);
    v109 = *(_QWORD *)(v0 + 576);
    v111 = *(_QWORD *)(v0 + 568);
    v113 = *(_QWORD *)(v0 + 560);
    v115 = *(_QWORD *)(v0 + 536);
    v117 = *(_QWORD *)(v0 + 512);
    v119 = *(_QWORD *)(v0 + 488);
    v121 = *(_QWORD *)(v0 + 480);
    v123 = *(_QWORD *)(v0 + 456);
    v125 = *(_QWORD *)(v0 + 448);
    v127 = *(_QWORD *)(v0 + 440);
    v128 = *(_QWORD *)(v0 + 432);
    swift_release(*(_QWORD *)(v0 + 400));
    swift_release(v40);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v44);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v125);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    v33 = *(uint64_t (**)(void))(v0 + 8);
    return v33();
  }
  v50 = *(_QWORD *)(v0 + 800);
  v51 = *(_QWORD *)(v0 + 744);
  v52 = *(_QWORD *)(v0 + 736);
  v53 = *(_QWORD *)(v0 + 648);
  v54 = *(_QWORD *)(v0 + 632);
  v55 = *(_QWORD *)(v0 + 624);
  v56 = *(_QWORD *)(v0 + 872) + *(int *)(v39 + 48);
  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 816) + 32))(*(_QWORD *)(v0 + 856));
  v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v50, v56, v52);
  v58 = Friend.handle.getter(v57);
  v59 = Handle.identifier.getter(v58);
  v61 = v60;
  *(_QWORD *)(v0 + 944) = v60;
  v62 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  *(_QWORD *)(v0 + 952) = v62;
  v62(v53, v55);
  v63 = (_QWORD *)swift_task_alloc(dword_100267A74);
  *(_QWORD *)(v0 + 960) = v63;
  *v63 = v0;
  v63[1] = sub_1001DD208;
  return sub_1001DB4BC(*(_QWORD *)(v0 + 656), v59, v61);
}

uint64_t sub_1001DD208()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 960);
  *(_QWORD *)(*v1 + 968) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 944);
  v5 = *(_QWORD *)(v2 + 408);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v6 = sub_1001E1BE4;
  else
    v6 = sub_1001DD278;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001DD278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  const char *v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(void);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  _QWORD *v85;
  char v87;
  uint64_t v88;
  Swift::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t);
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  Swift::Int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  NSObject *v150;
  os_log_type_t v151;
  _BOOL4 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  void (*v168)(uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  Swift::String v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (*v186)(uint64_t, uint64_t, uint64_t);
  uint64_t v187;
  NSObject *v188;
  os_log_type_t v189;
  _BOOL4 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint8_t *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  void (*v199)(uint64_t, uint64_t);
  void (*v200)(uint64_t, uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  NSObject *v238;
  os_log_type_t v239;
  _BOOL4 v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t (*v255)(uint64_t, uint64_t);
  void (*v256)(uint64_t, uint64_t);
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  NSObject *v273;
  os_log_type_t v274;
  uint64_t v275;
  uint64_t v276;
  uint8_t *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  _BOOL4 v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  NSObject *v303;
  os_log_type_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  void (*v313)(uint64_t, uint64_t);
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  NSObject *v320;
  os_log_type_t v321;
  uint64_t v322;
  uint64_t v323;
  uint8_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  void (*v392)(uint64_t, uint64_t);
  uint64_t v393;
  os_log_type_t v394;
  void (*v395)(uint64_t, uint64_t);
  uint64_t v396;
  os_log_type_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint8_t *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  void (*v422)(uint64_t, uint64_t);
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  void (*v432)(uint64_t, uint64_t);
  uint64_t v433;
  void (*v434)(uint64_t, uint64_t);
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443[3];

  v1 = *(_QWORD *)(v0 + 656);
  v436 = v0 + 392;
  v441 = v0 + 384;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 672) + 48))(v1, 1, *(_QWORD *)(v0 + 664)) == 1)
  {
    v2 = *(unsigned int *)(v0 + 1108);
    v3 = *(_QWORD *)(v0 + 768);
    v4 = *(_QWORD *)(v0 + 744);
    v5 = *(_QWORD *)(v0 + 736);
    sub_1000087A0(v1, &qword_100260940);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
    v6(v3, v2, v5);
    v7 = sub_100004EA8(&qword_1002655C0, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipAction, (uint64_t)&protocol conformance descriptor for FriendshipAction);
    dispatch thunk of RawRepresentable.rawValue.getter(v5, v7);
    dispatch thunk of RawRepresentable.rawValue.getter(v5, v7);
    v8 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 264);
    v10 = *(_QWORD *)(v0 + 272);
    v11 = *(_QWORD *)(v0 + 280);
    v12 = *(_QWORD *)(v0 + 768);
    v13 = *(_QWORD *)(v0 + 744);
    v14 = *(_QWORD *)(v0 + 736);
    if (v8 == v10 && v9 == v11)
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 264), 2);
      v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v15(v12, v14);
LABEL_8:
      if (qword_10025FBD0 != -1)
        swift_once(&qword_10025FBD0, sub_1001E4180);
      v25 = sub_100037A9C(*(_QWORD *)(v0 + 464), (uint64_t)qword_10027B3F8);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.error.getter();
      v28 = os_log_type_enabled(v26, v27);
      v29 = *(_QWORD *)(v0 + 856);
      v30 = *(_QWORD *)(v0 + 816);
      v31 = *(_QWORD *)(v0 + 808);
      v32 = *(_QWORD *)(v0 + 800);
      v33 = *(_QWORD *)(v0 + 736);
      if (!v28)
        goto LABEL_13;
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      v35 = "Local storage try to remove friend record that not exist";
      goto LABEL_12;
    }
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, *(_QWORD *)(v0 + 264), v10, *(_QWORD *)(v0 + 280), 0);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v9);
    v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    *(_QWORD *)(v0 + 1064) = v15;
    v15(v12, v14);
    if ((v24 & 1) != 0)
      goto LABEL_8;
    v51 = *(_QWORD *)(v0 + 736);
    v6(*(_QWORD *)(v0 + 760), *(unsigned int *)(v0 + 1112), v51);
    dispatch thunk of RawRepresentable.rawValue.getter(v51, v7);
    dispatch thunk of RawRepresentable.rawValue.getter(v51, v7);
    v52 = *(_QWORD *)(v0 + 288);
    v53 = *(_QWORD *)(v0 + 296);
    v54 = *(_QWORD *)(v0 + 304);
    v55 = *(_QWORD *)(v0 + 312);
    v56 = *(_QWORD *)(v0 + 760);
    v57 = *(_QWORD *)(v0 + 736);
    if (v52 == v54 && v53 == v55)
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 296), 2);
      v15(v56, v57);
    }
    else
    {
      v87 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, *(_QWORD *)(v0 + 296), v54, *(_QWORD *)(v0 + 312), 0);
      swift_bridgeObjectRelease(v55);
      swift_bridgeObjectRelease(v53);
      v15(v56, v57);
      if ((v87 & 1) == 0)
      {
        v106 = *(_QWORD *)(v0 + 736);
        v6(*(_QWORD *)(v0 + 752), *(unsigned int *)(v0 + 1116), v106);
        dispatch thunk of RawRepresentable.rawValue.getter(v106, v7);
        dispatch thunk of RawRepresentable.rawValue.getter(v106, v7);
        v107 = *(_QWORD *)(v0 + 112);
        v108 = *(_QWORD *)(v0 + 120);
        v109 = *(_QWORD *)(v0 + 128);
        v110 = *(_QWORD *)(v0 + 136);
        v111 = *(_QWORD *)(v0 + 752);
        v112 = *(_QWORD *)(v0 + 736);
        if (v107 == v109 && v108 == v110)
        {
          swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 120), 2);
          v15(v111, v112);
        }
        else
        {
          v294 = _stringCompareWithSmolCheck(_:_:expecting:)(v107, *(_QWORD *)(v0 + 120), v109, *(_QWORD *)(v0 + 136), 0);
          swift_bridgeObjectRelease(v110);
          swift_bridgeObjectRelease(v108);
          v15(v111, v112);
          if ((v294 & 1) == 0)
          {
            v334 = *(_QWORD *)(v0 + 856);
            v335 = *(_QWORD *)(v0 + 816);
            v336 = *(_QWORD *)(v0 + 808);
            v15(*(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 736));
            (*(void (**)(uint64_t, uint64_t))(v335 + 8))(v334, v336);
            goto LABEL_14;
          }
        }
        if (qword_10025FBD0 != -1)
          swift_once(&qword_10025FBD0, sub_1001E4180);
        v295 = sub_100037A9C(*(_QWORD *)(v0 + 464), (uint64_t)qword_10027B3F8);
        v26 = Logger.logObject.getter(v295);
        v27 = static os_log_type_t.error.getter();
        v296 = os_log_type_enabled(v26, v27);
        v29 = *(_QWORD *)(v0 + 856);
        v30 = *(_QWORD *)(v0 + 816);
        v31 = *(_QWORD *)(v0 + 808);
        v32 = *(_QWORD *)(v0 + 800);
        v33 = *(_QWORD *)(v0 + 736);
        if (!v296)
        {
LABEL_13:

          v15(v32, v33);
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
          goto LABEL_14;
        }
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        v35 = "Local storage try to modified friend record that not exist";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v26, v27, v35, v34, 2u);
        swift_slowDealloc(v34, -1, -1);
        goto LABEL_13;
      }
    }
    v88 = *(_QWORD *)(v0 + 824);
    v89 = *(Swift::String **)(v0 + 688);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 816) + 16))(v88, *(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 808));
    sub_1000FB9E8(v88, v89);
    if (qword_10025FBD0 != -1)
      swift_once(&qword_10025FBD0, sub_1001E4180);
    v90 = *(_QWORD *)(v0 + 688);
    v91 = *(_QWORD *)(v0 + 680);
    sub_100037A9C(*(_QWORD *)(v0 + 464), (uint64_t)qword_10027B3F8);
    v92 = sub_100025C70(v90, v91, type metadata accessor for FriendRecord);
    v93 = Logger.logObject.getter(v92);
    v94 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v93, v94))
    {
      v95 = *(_QWORD *)(v0 + 720);
      v96 = *(_QWORD *)(v0 + 680);
      v97 = *(_QWORD *)(v0 + 664);
      v98 = (uint8_t *)swift_slowAlloc(12, -1);
      v99 = swift_slowAlloc(32, -1);
      v443[0] = v99;
      *(_DWORD *)v98 = 136315138;
      sub_100025C70(v96, v95, type metadata accessor for FriendRecord);
      v100 = String.init<A>(describing:)(v95, v97);
      v102 = v101;
      *(_QWORD *)(v0 + 384) = sub_10002BA84(v100, v101, v443);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v441, v436, v98 + 4, v98 + 12);
      swift_bridgeObjectRelease(v102);
      sub_100024990(v96, type metadata accessor for FriendRecord);
      _os_log_impl((void *)&_mh_execute_header, v93, v94, "LocalStorage add a new record: %s", v98, 0xCu);
      swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(v98, -1, -1);
    }
    else
    {
      sub_100024990(*(_QWORD *)(v0 + 680), type metadata accessor for FriendRecord);
    }

    v103 = (_QWORD *)swift_task_alloc(dword_100267A4C);
    *(_QWORD *)(v0 + 1072) = v103;
    *v103 = v0;
    v103[1] = sub_1001E0FF8;
    v104 = *(_QWORD *)(v0 + 688);
    v105 = *(_QWORD *)(v0 + 432);
    return sub_1001E5620(v105, v104);
  }
  v16 = *(_DWORD *)(v0 + 1088);
  v17 = *(_QWORD *)(v0 + 616);
  v18 = *(_QWORD *)(v0 + 608);
  v19 = *(_QWORD *)(v0 + 592);
  v20 = *(_QWORD *)(v0 + 584);
  v21 = sub_1000321F4(v1, *(_QWORD *)(v0 + 728), type metadata accessor for FriendRecord);
  Friend.type.getter(v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v17, v20);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 88))(v18, v20);
  if (v22 == v16)
  {
    v23 = 2;
  }
  else if (v22 == *(_DWORD *)(v0 + 1092))
  {
    v23 = 4;
  }
  else if (v22 == *(_DWORD *)(v0 + 1096))
  {
    v23 = 8;
  }
  else if (v22 == *(_DWORD *)(v0 + 1100))
  {
    v23 = 16;
  }
  else
  {
    if (v22 != *(_DWORD *)(v0 + 1104))
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000011, 0x80000001001FEF00, "findmylocated/FriendRecord.swift", 32, 2, 58, 0);
    v23 = 32;
  }
  v113 = *(unsigned int *)(v0 + 1108);
  v114 = *(_QWORD *)(v0 + 792);
  v115 = *(_QWORD *)(v0 + 744);
  v116 = *(_QWORD *)(v0 + 736);
  v427 = v0 + 368;
  v432 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 592) + 8);
  v432(*(_QWORD *)(v0 + 616), *(_QWORD *)(v0 + 584));
  v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 104);
  v117(v114, v113, v116);
  v118 = sub_100004EA8(&qword_1002655C0, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipAction, (uint64_t)&protocol conformance descriptor for FriendshipAction);
  dispatch thunk of RawRepresentable.rawValue.getter(v116, v118);
  dispatch thunk of RawRepresentable.rawValue.getter(v116, v118);
  v119 = *(_QWORD *)(v0 + 160);
  v120 = *(_QWORD *)(v0 + 168);
  v121 = *(_QWORD *)(v0 + 176);
  v122 = *(_QWORD *)(v0 + 184);
  v123 = *(_QWORD *)(v0 + 792);
  v124 = *(_QWORD *)(v0 + 744);
  v125 = *(_QWORD *)(v0 + 736);
  if (v119 == v121 && v120 == v122)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 168), 2);
    v126 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
    v126(v123, v125);
LABEL_54:
    v422 = v126;
    *(_QWORD *)(v0 + 984) = v126;
    v128 = *(_QWORD *)(v0 + 728);
    v129 = *(_QWORD *)(v0 + 664);
    swift_beginAccess(v128, v0 + 40, 33, 0);
    v130 = *(int *)(v129 + 140);
    v131 = *(_QWORD *)(v128 + v130);
    if ((v131 & v23) != 0)
      *(_QWORD *)(v128 + v130) = v131 & ~v23;
    v132 = *(_QWORD *)(v0 + 968);
    v133 = *(_QWORD *)(v0 + 856);
    v134 = *(_QWORD *)(v0 + 728);
    v135 = *(_QWORD *)(v0 + 664);
    v136 = *(int *)(v135 + 136);
    v137 = *(_QWORD *)(v134 + v136);
    v138 = swift_task_alloc(32);
    *(_QWORD *)(v138 + 16) = v133;
    swift_bridgeObjectRetain(v137);
    v139 = sub_1001E7CF4((uint64_t)sub_1001E89F4, v138, v137);
    swift_task_dealloc(v138);
    v140 = *(_QWORD *)(v134 + v136);
    *(_QWORD *)(v134 + v136) = v139;
    swift_endAccess(v0 + 40);
    swift_bridgeObjectRelease(v140);
    if (!*(_QWORD *)(v134 + *(int *)(v135 + 140)))
    {
      v441 = v132;
      v413 = (uint8_t *)(v0 + 144);
      if (qword_10025F9C0 == -1)
        goto LABEL_62;
      goto LABEL_116;
    }
    if (qword_10025FBD0 != -1)
      swift_once(&qword_10025FBD0, sub_1001E4180);
    v141 = *(_QWORD *)(v0 + 856);
    v142 = *(_QWORD *)(v0 + 848);
    v143 = *(_QWORD *)(v0 + 816);
    v144 = *(_QWORD *)(v0 + 808);
    v145 = *(_QWORD *)(v0 + 488);
    v146 = *(_QWORD *)(v0 + 464);
    v147 = *(_QWORD *)(v0 + 472);
    v148 = sub_100037A9C(v146, (uint64_t)qword_10027B3F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v147 + 16))(v145, v148, v146);
    v149 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v143 + 16))(v142, v141, v144);
    v150 = Logger.logObject.getter(v149);
    v151 = static os_log_type_t.default.getter();
    v152 = os_log_type_enabled(v150, v151);
    v153 = *(_QWORD *)(v0 + 848);
    if (v152)
    {
      v397 = v151;
      v154 = *(_QWORD *)(v0 + 728);
      v155 = *(_QWORD *)(v0 + 720);
      v156 = *(_QWORD *)(v0 + 664);
      v157 = *(_QWORD *)(v0 + 600);
      v158 = *(_QWORD *)(v0 + 584);
      v402 = *(_QWORD *)(v0 + 808);
      v408 = *(_QWORD *)(v0 + 816);
      v438 = *(_QWORD *)(v0 + 488);
      v418 = *(_QWORD *)(v0 + 472);
      v424 = *(_QWORD *)(v0 + 464);
      v159 = swift_slowAlloc(22, -1);
      v415 = swift_slowAlloc(64, -1);
      v443[0] = v415;
      *(_DWORD *)v159 = 136315394;
      sub_100025C70(v154, v155, type metadata accessor for FriendRecord);
      v160 = String.init<A>(describing:)(v155, v156);
      v162 = v161;
      *(_QWORD *)(v0 + 368) = sub_10002BA84(v160, v161, v443);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v427, v0 + 376, v159 + 4, v159 + 12);
      v163 = swift_bridgeObjectRelease(v162);
      *(_WORD *)(v159 + 12) = 2080;
      Friend.type.getter(v163);
      v164 = sub_100004EA8(&qword_100261D30, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
      v165 = dispatch thunk of CustomStringConvertible.description.getter(v158, v164);
      v167 = v166;
      v432(v157, v158);
      *(_QWORD *)(v0 + 376) = sub_10002BA84(v165, v167, v443);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v441, v159 + 14, v159 + 22);
      swift_bridgeObjectRelease(v167);
      v168 = *(void (**)(uint64_t, uint64_t))(v408 + 8);
      v168(v153, v402);
      _os_log_impl((void *)&_mh_execute_header, v150, v397, "LocalStorage update a record: %s by removing type: %s", (uint8_t *)v159, 0x16u);
      swift_arrayDestroy(v415, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v415, -1, -1);
      swift_slowDealloc(v159, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v418 + 8))(v438, v424);
    }
    else
    {
      v208 = *(_QWORD *)(v0 + 488);
      v209 = *(_QWORD *)(v0 + 464);
      v210 = *(_QWORD *)(v0 + 472);
      v168 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 816) + 8);
      v168(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 808));

      (*(void (**)(uint64_t, uint64_t))(v210 + 8))(v208, v209);
    }
    *(_QWORD *)(v0 + 992) = v168;
    sub_100025C70(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 712), type metadata accessor for FriendRecord);
    v211 = (_QWORD *)swift_task_alloc(dword_100267A4C);
    *(_QWORD *)(v0 + 1000) = v211;
    *v211 = v0;
    v211[1] = sub_1001DF4BC;
    v104 = *(_QWORD *)(v0 + 712);
    v105 = *(_QWORD *)(v0 + 456);
    return sub_1001E5620(v105, v104);
  }
  v127 = _stringCompareWithSmolCheck(_:_:expecting:)(v119, *(_QWORD *)(v0 + 168), v121, *(_QWORD *)(v0 + 184), 0);
  swift_bridgeObjectRelease(v122);
  swift_bridgeObjectRelease(v120);
  v126 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
  *(_QWORD *)(v0 + 976) = v126;
  v126(v123, v125);
  if ((v127 & 1) != 0)
    goto LABEL_54;
  v200 = v126;
  v419 = v0 + 344;
  v422 = (void (*)(uint64_t, uint64_t))(v0 + 336);
  v436 = v0 + 360;
  v201 = *(_QWORD *)(v0 + 736);
  v117(*(_QWORD *)(v0 + 784), *(unsigned int *)(v0 + 1112), v201);
  dispatch thunk of RawRepresentable.rawValue.getter(v201, v118);
  dispatch thunk of RawRepresentable.rawValue.getter(v201, v118);
  v202 = *(_QWORD *)(v0 + 192);
  v203 = *(_QWORD *)(v0 + 200);
  v204 = *(_QWORD *)(v0 + 208);
  v205 = *(_QWORD *)(v0 + 216);
  v206 = *(_QWORD *)(v0 + 784);
  v207 = *(_QWORD *)(v0 + 736);
  if (v202 == v204 && v203 == v205)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 200), 2);
    v200(v206, v207);
LABEL_76:
    v230 = v0 + 88;
    if (qword_10025FBD0 != -1)
      swift_once(&qword_10025FBD0, sub_1001E4180);
    v231 = *(_QWORD *)(v0 + 856);
    v232 = *(_QWORD *)(v0 + 840);
    v233 = *(_QWORD *)(v0 + 816);
    v234 = *(_QWORD *)(v0 + 808);
    v236 = *(_QWORD *)(v0 + 472);
    v235 = *(_QWORD *)(v0 + 480);
    sub_100037A9C(*(_QWORD *)(v0 + 464), (uint64_t)qword_10027B3F8);
    (*(void (**)(uint64_t))(v236 + 16))(v235);
    v237 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v233 + 16))(v232, v231, v234);
    v238 = Logger.logObject.getter(v237);
    v239 = static os_log_type_t.default.getter();
    v240 = os_log_type_enabled(v238, v239);
    v241 = *(_QWORD *)(v0 + 840);
    if (v240)
    {
      v394 = v239;
      v242 = *(_QWORD *)(v0 + 728);
      v243 = *(_QWORD *)(v0 + 720);
      v244 = *(_QWORD *)(v0 + 664);
      v245 = *(_QWORD *)(v0 + 600);
      v379 = *(_QWORD *)(v0 + 584);
      v385 = *(_QWORD *)(v0 + 816);
      v400 = *(_QWORD *)(v0 + 472);
      v405 = *(_QWORD *)(v0 + 464);
      v411 = *(_QWORD *)(v0 + 480);
      v382 = *(_QWORD *)(v0 + 808);
      v246 = swift_slowAlloc(22, -1);
      v389 = swift_slowAlloc(64, -1);
      v443[0] = v389;
      *(_DWORD *)v246 = 136315394;
      swift_beginAccess(v242, v0 + 64, 0, 0);
      sub_100025C70(v242, v243, type metadata accessor for FriendRecord);
      v247 = String.init<A>(describing:)(v243, v244);
      v249 = v248;
      *(_QWORD *)(v0 + 344) = sub_10002BA84(v247, v248, v443);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v419, v0 + 352, v246 + 4, v246 + 12);
      v250 = swift_bridgeObjectRelease(v249);
      *(_WORD *)(v246 + 12) = 2080;
      Friend.type.getter(v250);
      v251 = sub_100004EA8(&qword_100261D30, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
      v252 = dispatch thunk of CustomStringConvertible.description.getter(v379, v251);
      v254 = v253;
      v255 = (uint64_t (*)(uint64_t, uint64_t))v432;
      v432(v245, v379);
      *(_QWORD *)(v0 + 352) = sub_10002BA84(v252, v254, v443);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v436, v246 + 14, v246 + 22);
      swift_bridgeObjectRelease(v254);
      v256 = *(void (**)(uint64_t, uint64_t))(v385 + 8);
      v256(v241, v382);
      _os_log_impl((void *)&_mh_execute_header, v238, v394, "LocalStorage update a record: %s by adding type: %s", (uint8_t *)v246, 0x16u);
      swift_arrayDestroy(v389, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v389, -1, -1);
      v257 = v246;
      v230 = v0 + 88;
      swift_slowDealloc(v257, -1, -1);

      v258 = (*(uint64_t (**)(uint64_t, uint64_t))(v400 + 8))(v411, v405);
    }
    else
    {
      v266 = *(_QWORD *)(v0 + 472);
      v265 = *(_QWORD *)(v0 + 480);
      v267 = *(_QWORD *)(v0 + 464);
      v256 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 816) + 8);
      v256(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 808));

      v258 = (*(uint64_t (**)(uint64_t, uint64_t))(v266 + 8))(v265, v267);
      v255 = (uint64_t (*)(uint64_t, uint64_t))v432;
    }
    *(_QWORD *)(v0 + 1016) = v256;
    v268 = *(_QWORD *)(v0 + 856);
    v269 = *(_QWORD *)(v0 + 728);
    v270 = *(_QWORD *)(v0 + 600);
    v271 = *(_QWORD *)(v0 + 584);
    Friend.type.getter(v258);
    swift_beginAccess(v269, v230, 33, 0);
    sub_1000FCB88(v268, v270);
    swift_endAccess(v230);
    v272 = v255(v270, v271);
    v273 = Logger.logObject.getter(v272);
    v274 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v273, v274))
    {
      v275 = *(_QWORD *)(v0 + 728);
      v276 = *(_QWORD *)(v0 + 664);
      v277 = (uint8_t *)swift_slowAlloc(12, -1);
      v278 = swift_slowAlloc(32, -1);
      *(_DWORD *)v277 = 136315138;
      v443[0] = v278;
      v279 = *(_QWORD *)(v275 + *(int *)(v276 + 136));
      v280 = type metadata accessor for FriendInfoOption(0);
      v281 = sub_100004EA8(&qword_100260948, type metadata accessor for FriendInfoOption, (uint64_t)&protocol conformance descriptor for FriendInfoOption);
      swift_bridgeObjectRetain(v279);
      v283 = Set.description.getter(v282, v280, v281);
      v285 = v284;
      swift_bridgeObjectRelease(v279);
      *(_QWORD *)(v0 + 328) = sub_10002BA84(v283, v285, v443);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v422, v277 + 4, v277 + 12);
      swift_bridgeObjectRelease(v285);
      _os_log_impl((void *)&_mh_execute_header, v273, v274, "LocalStorage record info : %s", v277, 0xCu);
      swift_arrayDestroy(v278, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v278, -1, -1);
      swift_slowDealloc(v277, -1, -1);
    }

    sub_100025C70(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704), type metadata accessor for FriendRecord);
    v286 = (_QWORD *)swift_task_alloc(dword_100267A4C);
    *(_QWORD *)(v0 + 1024) = v286;
    *v286 = v0;
    v286[1] = sub_1001DFDD0;
    v104 = *(_QWORD *)(v0 + 704);
    v105 = *(_QWORD *)(v0 + 448);
    return sub_1001E5620(v105, v104);
  }
  v229 = _stringCompareWithSmolCheck(_:_:expecting:)(v202, *(_QWORD *)(v0 + 200), v204, *(_QWORD *)(v0 + 216), 0);
  swift_bridgeObjectRelease(v205);
  swift_bridgeObjectRelease(v203);
  v200(v206, v207);
  if ((v229 & 1) != 0)
    goto LABEL_76;
  v287 = *(_QWORD *)(v0 + 736);
  v117(*(_QWORD *)(v0 + 776), *(unsigned int *)(v0 + 1116), v287);
  dispatch thunk of RawRepresentable.rawValue.getter(v287, v118);
  dispatch thunk of RawRepresentable.rawValue.getter(v287, v118);
  v288 = *(_QWORD *)(v0 + 224);
  v289 = *(_QWORD *)(v0 + 232);
  v290 = *(_QWORD *)(v0 + 240);
  v291 = *(_QWORD *)(v0 + 248);
  v292 = *(_QWORD *)(v0 + 776);
  v293 = *(_QWORD *)(v0 + 736);
  if (v288 == v290 && v289 == v291)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 232), 2);
    v200(v292, v293);
LABEL_95:
    if (qword_10025FBD0 != -1)
      swift_once(&qword_10025FBD0, sub_1001E4180);
    v298 = *(_QWORD *)(v0 + 856);
    v299 = *(_QWORD *)(v0 + 832);
    v300 = *(_QWORD *)(v0 + 816);
    v301 = *(_QWORD *)(v0 + 808);
    sub_100037A9C(*(_QWORD *)(v0 + 464), (uint64_t)qword_10027B3F8);
    v302 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v300 + 16))(v299, v298, v301);
    v303 = Logger.logObject.getter(v302);
    v304 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v303, v304))
    {
      v395 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
      v386 = *(_QWORD *)(v0 + 832);
      v406 = *(_QWORD *)(v0 + 816);
      v412 = *(_QWORD *)(v0 + 808);
      v305 = *(_QWORD *)(v0 + 640);
      v390 = *(_QWORD *)(v0 + 624);
      v306 = swift_slowAlloc(22, -1);
      v307 = swift_slowAlloc(32, -1);
      v443[0] = v307;
      *(_DWORD *)v306 = 141558275;
      *(_QWORD *)(v0 + 336) = 1752392040;
      v308 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v422, v419, v306 + 4, v306 + 12);
      *(_WORD *)(v306 + 12) = 2081;
      v309 = Friend.handle.getter(v308);
      v310 = Handle.identifier.getter(v309);
      v312 = v311;
      v395(v305, v390);
      *(_QWORD *)(v0 + 320) = sub_10002BA84(v310, v312, v443);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v306 + 14, v306 + 22);
      swift_bridgeObjectRelease(v312);
      v313 = *(void (**)(uint64_t, uint64_t))(v406 + 8);
      v313(v386, v412);
      _os_log_impl((void *)&_mh_execute_header, v303, v304, "Local storage modify friend %{private,mask.hash}s", (uint8_t *)v306, 0x16u);
      swift_arrayDestroy(v307, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v307, -1, -1);
      swift_slowDealloc(v306, -1, -1);
    }
    else
    {
      v313 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 816) + 8);
      v313(*(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 808));
    }

    *(_QWORD *)(v0 + 1040) = v313;
    v314 = *(_QWORD *)(v0 + 856);
    v315 = *(_QWORD *)(v0 + 728);
    v316 = *(_QWORD *)(v0 + 600);
    v317 = *(_QWORD *)(v0 + 584);
    Friend.type.getter(v318);
    swift_beginAccess(v315, v0 + 16, 33, 0);
    sub_1000FCB88(v314, v316);
    swift_endAccess(v0 + 16);
    v319 = ((uint64_t (*)(uint64_t, uint64_t))v432)(v316, v317);
    v320 = Logger.logObject.getter(v319);
    v321 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v320, v321))
    {
      v322 = *(_QWORD *)(v0 + 728);
      v323 = *(_QWORD *)(v0 + 664);
      v324 = (uint8_t *)swift_slowAlloc(12, -1);
      v325 = swift_slowAlloc(32, -1);
      *(_DWORD *)v324 = 136315138;
      v443[0] = v325;
      v326 = *(_QWORD *)(v322 + *(int *)(v323 + 136));
      v327 = type metadata accessor for FriendInfoOption(0);
      v328 = sub_100004EA8(&qword_100260948, type metadata accessor for FriendInfoOption, (uint64_t)&protocol conformance descriptor for FriendInfoOption);
      swift_bridgeObjectRetain(v326);
      v330 = Set.description.getter(v329, v327, v328);
      v332 = v331;
      swift_bridgeObjectRelease(v326);
      *(_QWORD *)(v0 + 360) = sub_10002BA84(v330, v332, v443);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v436, v427, v324 + 4, v324 + 12);
      swift_bridgeObjectRelease(v332);
      _os_log_impl((void *)&_mh_execute_header, v320, v321, "LocalStorage record info : %s", v324, 0xCu);
      swift_arrayDestroy(v325, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v325, -1, -1);
      swift_slowDealloc(v324, -1, -1);
    }

    sub_100025C70(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 696), type metadata accessor for FriendRecord);
    v333 = (_QWORD *)swift_task_alloc(dword_100267A4C);
    *(_QWORD *)(v0 + 1048) = v333;
    *v333 = v0;
    v333[1] = sub_1001E06E4;
    v104 = *(_QWORD *)(v0 + 696);
    v105 = *(_QWORD *)(v0 + 440);
    return sub_1001E5620(v105, v104);
  }
  v297 = _stringCompareWithSmolCheck(_:_:expecting:)(v288, *(_QWORD *)(v0 + 232), v290, *(_QWORD *)(v0 + 248), 0);
  swift_bridgeObjectRelease(v291);
  swift_bridgeObjectRelease(v289);
  v200(v292, v293);
  if ((v297 & 1) != 0)
    goto LABEL_95;
  v337 = *(_QWORD *)(v0 + 856);
  v338 = *(_QWORD *)(v0 + 816);
  v339 = *(_QWORD *)(v0 + 808);
  v340 = *(_QWORD *)(v0 + 728);
  v200(*(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 736));
  (*(void (**)(uint64_t, uint64_t))(v338 + 8))(v337, v339);
  sub_100024990(v340, type metadata accessor for FriendRecord);
  while (1)
  {
LABEL_14:
    v36 = *(_QWORD *)(v0 + 936);
    v37 = *(_QWORD *)(v0 + 928);
    if (v36)
    {
      v38 = (v36 - 1) & v36;
      v39 = __clz(__rbit64(v36)) | (v37 << 6);
      v40 = *(_QWORD *)(v0 + 400);
      goto LABEL_16;
    }
    v47 = v37 + 1;
    if (!__OFADD__(v37, 1))
      break;
    __break(1u);
LABEL_116:
    swift_once(&qword_10025F9C0, sub_10014C1AC);
LABEL_62:
    v169 = *(_QWORD *)(v0 + 880);
    v170 = *(_QWORD *)(v0 + 640);
    v171 = *(_QWORD *)(v0 + 624);
    v433 = *(_QWORD *)(v0 + 888);
    v172 = *(_QWORD *)(v0 + 536);
    v392 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
    v398 = *(_QWORD *)(v0 + 528);
    v403 = *(_QWORD *)(v0 + 896);
    v409 = *(_QWORD *)(v0 + 520);
    v173 = *(_QWORD *)(v0 + 504);
    v174 = *(_QWORD *)(v0 + 512);
    v175 = *(_QWORD *)(v0 + 496);
    v176 = sub_100037A9C(v175, (uint64_t)qword_10027AE68);
    v177 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v173 + 16))(v174, v176, v175);
    v178 = Friend.handle.getter(v177);
    Handle.identifier.getter(v178);
    v180 = v179;
    v392(v170, v171);
    v181 = String.lowercased()();
    swift_bridgeObjectRelease(v180);
    *(Swift::String *)(v0 + 144) = v181;
    == infix<A>(_:_:)(v174, v413, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    swift_bridgeObjectRelease(v181._object);
    (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v174, v175);
    QueryType.filter(_:)(v172, v169, &protocol witness table for Table);
    (*(void (**)(uint64_t, uint64_t))(v398 + 8))(v172, v409);
    QueryType.delete()(v169, &protocol witness table for Table);
    v434 = *(void (**)(uint64_t, uint64_t))(v433 + 8);
    v434(v403, v169);
    if (qword_10025FBD0 != -1)
      swift_once(&qword_10025FBD0, sub_1001E4180);
    v182 = *(_QWORD *)(v0 + 576);
    v183 = *(_QWORD *)(v0 + 568);
    v184 = *(_QWORD *)(v0 + 552);
    v185 = *(_QWORD *)(v0 + 544);
    sub_100037A9C(*(_QWORD *)(v0 + 464), (uint64_t)qword_10027B3F8);
    v186 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v184 + 16);
    v187 = v186(v183, v182, v185);
    v188 = Logger.logObject.getter(v187);
    v189 = static os_log_type_t.default.getter();
    v190 = os_log_type_enabled(v188, v189);
    v191 = *(_QWORD *)(v0 + 568);
    if (v190)
    {
      v192 = *(_QWORD *)(v0 + 560);
      v428 = *(_QWORD *)(v0 + 552);
      v193 = *(_QWORD *)(v0 + 544);
      v194 = (uint8_t *)swift_slowAlloc(12, -1);
      v195 = swift_slowAlloc(32, -1);
      v443[0] = v195;
      *(_DWORD *)v194 = 136315138;
      v413 = v194 + 4;
      v186(v192, v191, v193);
      v196 = String.init<A>(describing:)(v192, v193);
      v198 = v197;
      *(_QWORD *)(v0 + 392) = sub_10002BA84(v196, v197, v443);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v436, v0 + 400, v194 + 4, v194 + 12);
      swift_bridgeObjectRelease(v198);
      v199 = *(void (**)(uint64_t, uint64_t))(v428 + 8);
      v199(v191, v193);
      _os_log_impl((void *)&_mh_execute_header, v188, v189, "LocalStorage delete a record: %s", v194, 0xCu);
      swift_arrayDestroy(v195, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v195, -1, -1);
      swift_slowDealloc(v194, -1, -1);
    }
    else
    {
      v199 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 552) + 8);
      v199(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 544));
    }

    Connection.run(_:)(*(_QWORD *)(v0 + 576));
    if (v441)
    {
      v439 = *(_QWORD *)(v0 + 904);
      v429 = *(_QWORD *)(v0 + 880);
      v212 = *(_QWORD *)(v0 + 856);
      v213 = *(_QWORD *)(v0 + 816);
      v214 = *(_QWORD *)(v0 + 808);
      v215 = *(_QWORD *)(v0 + 800);
      v216 = *(_QWORD *)(v0 + 736);
      v420 = *(_QWORD *)(v0 + 728);
      v217 = *(_QWORD *)(v0 + 576);
      v218 = *(_QWORD *)(v0 + 544);
      v219 = *(_QWORD *)(v0 + 400);
      swift_release(*(_QWORD *)(v0 + 920));
      v199(v217, v218);
      v422(v215, v216);
      (*(void (**)(uint64_t, uint64_t))(v213 + 8))(v212, v214);
      swift_release(v219);
      v434(v439, v429);
      sub_100024990(v420, type metadata accessor for FriendRecord);
      v220 = *(_QWORD *)(v0 + 896);
      v221 = *(_QWORD *)(v0 + 872);
      v222 = *(_QWORD *)(v0 + 864);
      v223 = *(_QWORD *)(v0 + 856);
      v224 = *(_QWORD *)(v0 + 848);
      v225 = *(_QWORD *)(v0 + 840);
      v226 = *(_QWORD *)(v0 + 832);
      v227 = *(_QWORD *)(v0 + 824);
      v228 = *(_QWORD *)(v0 + 800);
      v346 = *(_QWORD *)(v0 + 792);
      v348 = *(_QWORD *)(v0 + 784);
      v350 = *(_QWORD *)(v0 + 776);
      v352 = *(_QWORD *)(v0 + 768);
      v354 = *(_QWORD *)(v0 + 760);
      v356 = *(_QWORD *)(v0 + 752);
      v358 = *(_QWORD *)(v0 + 728);
      v360 = *(_QWORD *)(v0 + 720);
      v362 = *(_QWORD *)(v0 + 712);
      v364 = *(_QWORD *)(v0 + 704);
      v366 = *(_QWORD *)(v0 + 696);
      v368 = *(_QWORD *)(v0 + 688);
      v370 = *(_QWORD *)(v0 + 680);
      v372 = *(_QWORD *)(v0 + 656);
      v374 = *(_QWORD *)(v0 + 648);
      v376 = *(_QWORD *)(v0 + 640);
      v378 = *(_QWORD *)(v0 + 616);
      v381 = *(_QWORD *)(v0 + 608);
      v384 = *(_QWORD *)(v0 + 600);
      v388 = *(_QWORD *)(v0 + 576);
      v393 = *(_QWORD *)(v0 + 568);
      v399 = *(_QWORD *)(v0 + 560);
      v404 = *(_QWORD *)(v0 + 536);
      v410 = *(_QWORD *)(v0 + 512);
      v416 = *(_QWORD *)(v0 + 488);
      v421 = *(_QWORD *)(v0 + 480);
      v425 = *(_QWORD *)(v0 + 456);
      v430 = *(_QWORD *)(v0 + 448);
      v435 = *(_QWORD *)(v0 + 440);
      v440 = *(_QWORD *)(v0 + 432);
      swift_task_dealloc(*(_QWORD *)(v0 + 904));
      swift_task_dealloc(v220);
      swift_task_dealloc(v221);
      swift_task_dealloc(v222);
      swift_task_dealloc(v223);
      swift_task_dealloc(v224);
      swift_task_dealloc(v225);
      swift_task_dealloc(v226);
      swift_task_dealloc(v227);
      swift_task_dealloc(v228);
      swift_task_dealloc(v346);
      swift_task_dealloc(v348);
      swift_task_dealloc(v350);
      swift_task_dealloc(v352);
      swift_task_dealloc(v354);
      swift_task_dealloc(v356);
      swift_task_dealloc(v358);
      swift_task_dealloc(v360);
      swift_task_dealloc(v362);
      swift_task_dealloc(v364);
      swift_task_dealloc(v366);
      swift_task_dealloc(v368);
      swift_task_dealloc(v370);
      swift_task_dealloc(v372);
      swift_task_dealloc(v374);
      swift_task_dealloc(v376);
      swift_task_dealloc(v378);
      swift_task_dealloc(v381);
      swift_task_dealloc(v384);
      swift_task_dealloc(v388);
      swift_task_dealloc(v393);
      swift_task_dealloc(v399);
      swift_task_dealloc(v404);
      swift_task_dealloc(v410);
      swift_task_dealloc(v416);
      swift_task_dealloc(v421);
      swift_task_dealloc(v425);
      swift_task_dealloc(v430);
      swift_task_dealloc(v435);
      swift_task_dealloc(v440);
      v71 = *(uint64_t (**)(void))(v0 + 8);
      return v71();
    }
    v259 = *(_QWORD *)(v0 + 856);
    v260 = *(_QWORD *)(v0 + 816);
    v261 = *(_QWORD *)(v0 + 808);
    v262 = *(_QWORD *)(v0 + 800);
    v263 = *(_QWORD *)(v0 + 736);
    v264 = *(_QWORD *)(v0 + 728);
    v199(*(_QWORD *)(v0 + 576), *(_QWORD *)(v0 + 544));
    v422(v262, v263);
    (*(void (**)(uint64_t, uint64_t))(v260 + 8))(v259, v261);
    sub_100024990(v264, type metadata accessor for FriendRecord);
  }
  v48 = (unint64_t)((1 << *(_BYTE *)(v0 + 1120)) + 63) >> 6;
  if (v47 >= v48)
  {
    v46 = *(_QWORD *)(v0 + 928);
  }
  else
  {
    v40 = *(_QWORD *)(v0 + 400);
    v49 = v40 + 64;
    v50 = *(_QWORD *)(v40 + 64 + 8 * v47);
    if (v50)
      goto LABEL_22;
    v46 = v37 + 1;
    if (v37 + 2 < v48)
    {
      v50 = *(_QWORD *)(v49 + 8 * (v37 + 2));
      if (v50)
      {
        v47 = v37 + 2;
        goto LABEL_22;
      }
      v46 = v37 + 2;
      if (v37 + 3 < v48)
      {
        v50 = *(_QWORD *)(v49 + 8 * (v37 + 3));
        if (v50)
        {
          v47 = v37 + 3;
          goto LABEL_22;
        }
        v47 = v37 + 4;
        v46 = v37 + 3;
        if (v37 + 4 < v48)
        {
          v50 = *(_QWORD *)(v49 + 8 * v47);
          if (!v50)
          {
            v46 = v48 - 1;
            v341 = v48 - 5;
            while (v341 != v37)
            {
              v50 = *(_QWORD *)(v40 + 104 + 8 * v37++);
              if (v50)
              {
                v47 = v37 + 4;
                goto LABEL_22;
              }
            }
            goto LABEL_29;
          }
LABEL_22:
          v38 = (v50 - 1) & v50;
          v39 = __clz(__rbit64(v50)) + (v47 << 6);
          v37 = v47;
LABEL_16:
          v41 = *(_QWORD *)(v0 + 864);
          v42 = *(_QWORD *)(v0 + 744);
          v43 = *(_QWORD *)(v0 + 736);
          (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 816) + 16))(v41, *(_QWORD *)(v40 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 816) + 72) * v39, *(_QWORD *)(v0 + 808));
          v44 = *(_QWORD *)(v40 + 56) + *(_QWORD *)(v42 + 72) * v39;
          v45 = sub_100037A5C(&qword_100263340);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v42 + 16))(v41 + *(int *)(v45 + 48), v44, v43);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v41, 0, 1, v45);
          v46 = v37;
          goto LABEL_30;
        }
      }
    }
  }
LABEL_29:
  v58 = *(_QWORD *)(v0 + 864);
  v59 = sub_100037A5C(&qword_100263340);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v58, 1, 1, v59);
  v38 = 0;
LABEL_30:
  *(_QWORD *)(v0 + 936) = v38;
  *(_QWORD *)(v0 + 928) = v46;
  v60 = *(_QWORD *)(v0 + 872);
  sub_10000EF6C(*(_QWORD *)(v0 + 864), v60, &qword_100263338);
  v61 = sub_100037A5C(&qword_100263340);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 48))(v60, 1, v61) != 1)
  {
    v72 = *(_QWORD *)(v0 + 800);
    v73 = *(_QWORD *)(v0 + 744);
    v74 = *(_QWORD *)(v0 + 736);
    v75 = *(_QWORD *)(v0 + 648);
    v76 = *(_QWORD *)(v0 + 632);
    v77 = *(_QWORD *)(v0 + 624);
    v78 = *(_QWORD *)(v0 + 872) + *(int *)(v61 + 48);
    (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 816) + 32))(*(_QWORD *)(v0 + 856));
    v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 32))(v72, v78, v74);
    v80 = Friend.handle.getter(v79);
    v81 = Handle.identifier.getter(v80);
    v83 = v82;
    *(_QWORD *)(v0 + 944) = v82;
    v84 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
    *(_QWORD *)(v0 + 952) = v84;
    v84(v75, v77);
    v85 = (_QWORD *)swift_task_alloc(dword_100267A74);
    *(_QWORD *)(v0 + 960) = v85;
    *v85 = v0;
    v85[1] = sub_1001DD208;
    return sub_1001DB4BC(*(_QWORD *)(v0 + 656), v81, v83);
  }
  v62 = *(_QWORD *)(v0 + 920);
  v63 = *(_QWORD *)(v0 + 904);
  v64 = *(_QWORD *)(v0 + 896);
  v65 = *(_QWORD *)(v0 + 888);
  v66 = *(_QWORD *)(v0 + 880);
  v67 = *(_QWORD *)(v0 + 872);
  v68 = *(_QWORD *)(v0 + 864);
  v69 = *(_QWORD *)(v0 + 856);
  v70 = *(_QWORD *)(v0 + 848);
  v342 = *(_QWORD *)(v0 + 840);
  v343 = *(_QWORD *)(v0 + 832);
  v344 = *(_QWORD *)(v0 + 824);
  v345 = *(_QWORD *)(v0 + 800);
  v347 = *(_QWORD *)(v0 + 792);
  v349 = *(_QWORD *)(v0 + 784);
  v351 = *(_QWORD *)(v0 + 776);
  v353 = *(_QWORD *)(v0 + 768);
  v355 = *(_QWORD *)(v0 + 760);
  v357 = *(_QWORD *)(v0 + 752);
  v359 = *(_QWORD *)(v0 + 728);
  v361 = *(_QWORD *)(v0 + 720);
  v363 = *(_QWORD *)(v0 + 712);
  v365 = *(_QWORD *)(v0 + 704);
  v367 = *(_QWORD *)(v0 + 696);
  v369 = *(_QWORD *)(v0 + 688);
  v371 = *(_QWORD *)(v0 + 680);
  v373 = *(_QWORD *)(v0 + 656);
  v375 = *(_QWORD *)(v0 + 648);
  v377 = *(_QWORD *)(v0 + 640);
  v380 = *(_QWORD *)(v0 + 616);
  v383 = *(_QWORD *)(v0 + 608);
  v387 = *(_QWORD *)(v0 + 600);
  v391 = *(_QWORD *)(v0 + 576);
  v396 = *(_QWORD *)(v0 + 568);
  v401 = *(_QWORD *)(v0 + 560);
  v407 = *(_QWORD *)(v0 + 536);
  v414 = *(_QWORD *)(v0 + 512);
  v417 = *(_QWORD *)(v0 + 488);
  v423 = *(_QWORD *)(v0 + 480);
  v426 = *(_QWORD *)(v0 + 456);
  v431 = *(_QWORD *)(v0 + 448);
  v437 = *(_QWORD *)(v0 + 440);
  v442 = *(_QWORD *)(v0 + 432);
  swift_release(*(_QWORD *)(v0 + 400));
  swift_release(v62);
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v66);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v342);
  swift_task_dealloc(v343);
  swift_task_dealloc(v344);
  swift_task_dealloc(v345);
  swift_task_dealloc(v347);
  swift_task_dealloc(v349);
  swift_task_dealloc(v351);
  swift_task_dealloc(v353);
  swift_task_dealloc(v355);
  swift_task_dealloc(v357);
  swift_task_dealloc(v359);
  swift_task_dealloc(v361);
  swift_task_dealloc(v363);
  swift_task_dealloc(v365);
  swift_task_dealloc(v367);
  swift_task_dealloc(v369);
  swift_task_dealloc(v371);
  swift_task_dealloc(v373);
  swift_task_dealloc(v375);
  swift_task_dealloc(v377);
  swift_task_dealloc(v380);
  swift_task_dealloc(v383);
  swift_task_dealloc(v387);
  swift_task_dealloc(v391);
  swift_task_dealloc(v396);
  swift_task_dealloc(v401);
  swift_task_dealloc(v407);
  swift_task_dealloc(v414);
  swift_task_dealloc(v417);
  swift_task_dealloc(v423);
  swift_task_dealloc(v426);
  swift_task_dealloc(v431);
  swift_task_dealloc(v437);
  swift_task_dealloc(v442);
  v71 = *(uint64_t (**)(void))(v0 + 8);
  return v71();
}

uint64_t sub_1001DF4BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1000);
  *(_QWORD *)(*v1 + 1008) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 712);
  v5 = *(_QWORD *)(v2 + 408);
  sub_100024990(v4, type metadata accessor for FriendRecord);
  if (v0)
    v6 = sub_1001E1EC0;
  else
    v6 = sub_1001DF534;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001DF534()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  _QWORD *v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v1 = *(_QWORD *)(v0 + 1008);
  Connection.run(_:)(*(_QWORD *)(v0 + 456));
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 992);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 984);
  if (v1)
  {
    v133 = *(_QWORD *)(v0 + 880);
    v136 = *(_QWORD *)(v0 + 904);
    v124 = *(_QWORD *)(v0 + 856);
    v127 = *(_QWORD *)(v0 + 888);
    v4 = *(_QWORD *)(v0 + 808);
    v5 = *(_QWORD *)(v0 + 800);
    v6 = *(_QWORD *)(v0 + 736);
    v130 = *(_QWORD *)(v0 + 728);
    v7 = *(_QWORD *)(v0 + 456);
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 992);
    v10 = *(_QWORD *)(v0 + 416);
    v9 = *(_QWORD *)(v0 + 424);
    v11 = *(_QWORD *)(v0 + 400);
    swift_release(*(_QWORD *)(v0 + 920));
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v10);
    v3(v5, v6);
    v8(v124, v4);
    swift_release(v11);
    (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v136, v133);
    sub_100024990(v130, type metadata accessor for FriendRecord);
    v12 = *(_QWORD *)(v0 + 896);
    v13 = *(_QWORD *)(v0 + 872);
    v14 = *(_QWORD *)(v0 + 864);
    v15 = *(_QWORD *)(v0 + 856);
    v16 = *(_QWORD *)(v0 + 848);
    v17 = *(_QWORD *)(v0 + 840);
    v18 = *(_QWORD *)(v0 + 832);
    v19 = *(_QWORD *)(v0 + 824);
    v20 = *(_QWORD *)(v0 + 800);
    v74 = *(_QWORD *)(v0 + 792);
    v76 = *(_QWORD *)(v0 + 784);
    v78 = *(_QWORD *)(v0 + 776);
    v80 = *(_QWORD *)(v0 + 768);
    v82 = *(_QWORD *)(v0 + 760);
    v84 = *(_QWORD *)(v0 + 752);
    v86 = *(_QWORD *)(v0 + 728);
    v88 = *(_QWORD *)(v0 + 720);
    v90 = *(_QWORD *)(v0 + 712);
    v92 = *(_QWORD *)(v0 + 704);
    v94 = *(_QWORD *)(v0 + 696);
    v96 = *(_QWORD *)(v0 + 688);
    v98 = *(_QWORD *)(v0 + 680);
    v100 = *(_QWORD *)(v0 + 656);
    v102 = *(_QWORD *)(v0 + 648);
    v104 = *(_QWORD *)(v0 + 640);
    v106 = *(_QWORD *)(v0 + 616);
    v108 = *(_QWORD *)(v0 + 608);
    v110 = *(_QWORD *)(v0 + 600);
    v112 = *(_QWORD *)(v0 + 576);
    v114 = *(_QWORD *)(v0 + 568);
    v116 = *(_QWORD *)(v0 + 560);
    v118 = *(_QWORD *)(v0 + 536);
    v120 = *(_QWORD *)(v0 + 512);
    v122 = *(_QWORD *)(v0 + 488);
    v125 = *(_QWORD *)(v0 + 480);
    v128 = *(_QWORD *)(v0 + 456);
    v131 = *(_QWORD *)(v0 + 448);
    v134 = *(_QWORD *)(v0 + 440);
    v137 = *(_QWORD *)(v0 + 432);
    swift_task_dealloc(*(_QWORD *)(v0 + 904));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v128);
    swift_task_dealloc(v131);
    swift_task_dealloc(v134);
    swift_task_dealloc(v137);
    v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  v22 = *(_QWORD *)(v0 + 856);
  v23 = *(_QWORD *)(v0 + 808);
  v24 = *(_QWORD *)(v0 + 800);
  v25 = *(_QWORD *)(v0 + 736);
  v26 = *(_QWORD *)(v0 + 728);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 8))(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 416));
  v3(v24, v25);
  v2(v22, v23);
  result = sub_100024990(v26, type metadata accessor for FriendRecord);
  v28 = *(_QWORD *)(v0 + 936);
  v29 = *(_QWORD *)(v0 + 928);
  if (!v28)
  {
    v39 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      return result;
    }
    v40 = (unint64_t)((1 << *(_BYTE *)(v0 + 1120)) + 63) >> 6;
    if (v39 >= v40)
    {
      v38 = *(_QWORD *)(v0 + 928);
    }
    else
    {
      v32 = *(_QWORD *)(v0 + 400);
      v41 = v32 + 64;
      v42 = *(_QWORD *)(v32 + 64 + 8 * v39);
      if (v42)
      {
LABEL_9:
        v30 = (v42 - 1) & v42;
        v31 = __clz(__rbit64(v42)) + (v39 << 6);
        v29 = v39;
        goto LABEL_5;
      }
      v38 = v29 + 1;
      if (v29 + 2 < v40)
      {
        v42 = *(_QWORD *)(v41 + 8 * (v29 + 2));
        if (v42)
        {
          v39 = v29 + 2;
          goto LABEL_9;
        }
        v38 = v29 + 2;
        if (v29 + 3 < v40)
        {
          v42 = *(_QWORD *)(v41 + 8 * (v29 + 3));
          if (v42)
          {
            v39 = v29 + 3;
            goto LABEL_9;
          }
          v39 = v29 + 4;
          v38 = v29 + 3;
          if (v29 + 4 < v40)
          {
            v42 = *(_QWORD *)(v41 + 8 * v39);
            if (v42)
              goto LABEL_9;
            v38 = v40 - 1;
            v70 = v40 - 5;
            while (v70 != v29)
            {
              v42 = *(_QWORD *)(v32 + 104 + 8 * v29++);
              if (v42)
              {
                v39 = v29 + 4;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    v43 = *(_QWORD *)(v0 + 864);
    v44 = sub_100037A5C(&qword_100263340);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 1, 1, v44);
    v30 = 0;
    goto LABEL_12;
  }
  v30 = (v28 - 1) & v28;
  v31 = __clz(__rbit64(v28)) | (v29 << 6);
  v32 = *(_QWORD *)(v0 + 400);
LABEL_5:
  v33 = *(_QWORD *)(v0 + 864);
  v34 = *(_QWORD *)(v0 + 744);
  v35 = *(_QWORD *)(v0 + 736);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 816) + 16))(v33, *(_QWORD *)(v32 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 816) + 72) * v31, *(_QWORD *)(v0 + 808));
  v36 = *(_QWORD *)(v32 + 56) + *(_QWORD *)(v34 + 72) * v31;
  v37 = sub_100037A5C(&qword_100263340);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16))(v33 + *(int *)(v37 + 48), v36, v35);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v33, 0, 1, v37);
  v38 = v29;
LABEL_12:
  *(_QWORD *)(v0 + 936) = v30;
  *(_QWORD *)(v0 + 928) = v38;
  v45 = *(_QWORD *)(v0 + 872);
  sub_10000EF6C(*(_QWORD *)(v0 + 864), v45, &qword_100263338);
  v46 = sub_100037A5C(&qword_100263340);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46) == 1)
  {
    v47 = *(_QWORD *)(v0 + 920);
    v48 = *(_QWORD *)(v0 + 904);
    v49 = *(_QWORD *)(v0 + 896);
    v50 = *(_QWORD *)(v0 + 888);
    v51 = *(_QWORD *)(v0 + 880);
    v52 = *(_QWORD *)(v0 + 872);
    v53 = *(_QWORD *)(v0 + 864);
    v54 = *(_QWORD *)(v0 + 856);
    v55 = *(_QWORD *)(v0 + 848);
    v71 = *(_QWORD *)(v0 + 840);
    v72 = *(_QWORD *)(v0 + 832);
    v73 = *(_QWORD *)(v0 + 824);
    v75 = *(_QWORD *)(v0 + 800);
    v77 = *(_QWORD *)(v0 + 792);
    v79 = *(_QWORD *)(v0 + 784);
    v81 = *(_QWORD *)(v0 + 776);
    v83 = *(_QWORD *)(v0 + 768);
    v85 = *(_QWORD *)(v0 + 760);
    v87 = *(_QWORD *)(v0 + 752);
    v89 = *(_QWORD *)(v0 + 728);
    v91 = *(_QWORD *)(v0 + 720);
    v93 = *(_QWORD *)(v0 + 712);
    v95 = *(_QWORD *)(v0 + 704);
    v97 = *(_QWORD *)(v0 + 696);
    v99 = *(_QWORD *)(v0 + 688);
    v101 = *(_QWORD *)(v0 + 680);
    v103 = *(_QWORD *)(v0 + 656);
    v105 = *(_QWORD *)(v0 + 648);
    v107 = *(_QWORD *)(v0 + 640);
    v109 = *(_QWORD *)(v0 + 616);
    v111 = *(_QWORD *)(v0 + 608);
    v113 = *(_QWORD *)(v0 + 600);
    v115 = *(_QWORD *)(v0 + 576);
    v117 = *(_QWORD *)(v0 + 568);
    v119 = *(_QWORD *)(v0 + 560);
    v121 = *(_QWORD *)(v0 + 536);
    v123 = *(_QWORD *)(v0 + 512);
    v126 = *(_QWORD *)(v0 + 488);
    v129 = *(_QWORD *)(v0 + 480);
    v132 = *(_QWORD *)(v0 + 456);
    v135 = *(_QWORD *)(v0 + 448);
    v138 = *(_QWORD *)(v0 + 440);
    v139 = *(_QWORD *)(v0 + 432);
    swift_release(*(_QWORD *)(v0 + 400));
    swift_release(v47);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v51);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v126);
    swift_task_dealloc(v129);
    swift_task_dealloc(v132);
    swift_task_dealloc(v135);
    swift_task_dealloc(v138);
    swift_task_dealloc(v139);
    v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  v56 = *(_QWORD *)(v0 + 800);
  v57 = *(_QWORD *)(v0 + 744);
  v58 = *(_QWORD *)(v0 + 736);
  v59 = *(_QWORD *)(v0 + 648);
  v60 = *(_QWORD *)(v0 + 632);
  v61 = *(_QWORD *)(v0 + 624);
  v62 = *(_QWORD *)(v0 + 872) + *(int *)(v46 + 48);
  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 816) + 32))(*(_QWORD *)(v0 + 856));
  v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v56, v62, v58);
  v64 = Friend.handle.getter(v63);
  v65 = Handle.identifier.getter(v64);
  v67 = v66;
  *(_QWORD *)(v0 + 944) = v66;
  v68 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  *(_QWORD *)(v0 + 952) = v68;
  v68(v59, v61);
  v69 = (_QWORD *)swift_task_alloc(dword_100267A74);
  *(_QWORD *)(v0 + 960) = v69;
  *v69 = v0;
  v69[1] = sub_1001DD208;
  return sub_1001DB4BC(*(_QWORD *)(v0 + 656), v65, v67);
}

uint64_t sub_1001DFDD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1024);
  *(_QWORD *)(*v1 + 1032) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 704);
  v5 = *(_QWORD *)(v2 + 408);
  sub_100024990(v4, type metadata accessor for FriendRecord);
  if (v0)
    v6 = sub_1001E21A4;
  else
    v6 = sub_1001DFE48;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001DFE48()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  _QWORD *v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v1 = *(_QWORD *)(v0 + 1032);
  Connection.run(_:)(*(_QWORD *)(v0 + 448));
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 1016);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 976);
  if (v1)
  {
    v133 = *(_QWORD *)(v0 + 880);
    v136 = *(_QWORD *)(v0 + 904);
    v124 = *(_QWORD *)(v0 + 856);
    v127 = *(_QWORD *)(v0 + 888);
    v4 = *(_QWORD *)(v0 + 808);
    v5 = *(_QWORD *)(v0 + 800);
    v6 = *(_QWORD *)(v0 + 736);
    v130 = *(_QWORD *)(v0 + 728);
    v7 = *(_QWORD *)(v0 + 448);
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 1016);
    v10 = *(_QWORD *)(v0 + 416);
    v9 = *(_QWORD *)(v0 + 424);
    v11 = *(_QWORD *)(v0 + 400);
    swift_release(*(_QWORD *)(v0 + 920));
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v10);
    v3(v5, v6);
    v8(v124, v4);
    swift_release(v11);
    (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v136, v133);
    sub_100024990(v130, type metadata accessor for FriendRecord);
    v12 = *(_QWORD *)(v0 + 896);
    v13 = *(_QWORD *)(v0 + 872);
    v14 = *(_QWORD *)(v0 + 864);
    v15 = *(_QWORD *)(v0 + 856);
    v16 = *(_QWORD *)(v0 + 848);
    v17 = *(_QWORD *)(v0 + 840);
    v18 = *(_QWORD *)(v0 + 832);
    v19 = *(_QWORD *)(v0 + 824);
    v20 = *(_QWORD *)(v0 + 800);
    v74 = *(_QWORD *)(v0 + 792);
    v76 = *(_QWORD *)(v0 + 784);
    v78 = *(_QWORD *)(v0 + 776);
    v80 = *(_QWORD *)(v0 + 768);
    v82 = *(_QWORD *)(v0 + 760);
    v84 = *(_QWORD *)(v0 + 752);
    v86 = *(_QWORD *)(v0 + 728);
    v88 = *(_QWORD *)(v0 + 720);
    v90 = *(_QWORD *)(v0 + 712);
    v92 = *(_QWORD *)(v0 + 704);
    v94 = *(_QWORD *)(v0 + 696);
    v96 = *(_QWORD *)(v0 + 688);
    v98 = *(_QWORD *)(v0 + 680);
    v100 = *(_QWORD *)(v0 + 656);
    v102 = *(_QWORD *)(v0 + 648);
    v104 = *(_QWORD *)(v0 + 640);
    v106 = *(_QWORD *)(v0 + 616);
    v108 = *(_QWORD *)(v0 + 608);
    v110 = *(_QWORD *)(v0 + 600);
    v112 = *(_QWORD *)(v0 + 576);
    v114 = *(_QWORD *)(v0 + 568);
    v116 = *(_QWORD *)(v0 + 560);
    v118 = *(_QWORD *)(v0 + 536);
    v120 = *(_QWORD *)(v0 + 512);
    v122 = *(_QWORD *)(v0 + 488);
    v125 = *(_QWORD *)(v0 + 480);
    v128 = *(_QWORD *)(v0 + 456);
    v131 = *(_QWORD *)(v0 + 448);
    v134 = *(_QWORD *)(v0 + 440);
    v137 = *(_QWORD *)(v0 + 432);
    swift_task_dealloc(*(_QWORD *)(v0 + 904));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v128);
    swift_task_dealloc(v131);
    swift_task_dealloc(v134);
    swift_task_dealloc(v137);
    v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  v22 = *(_QWORD *)(v0 + 856);
  v23 = *(_QWORD *)(v0 + 808);
  v24 = *(_QWORD *)(v0 + 800);
  v25 = *(_QWORD *)(v0 + 736);
  v26 = *(_QWORD *)(v0 + 728);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 8))(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 416));
  v3(v24, v25);
  v2(v22, v23);
  result = sub_100024990(v26, type metadata accessor for FriendRecord);
  v28 = *(_QWORD *)(v0 + 936);
  v29 = *(_QWORD *)(v0 + 928);
  if (!v28)
  {
    v39 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      return result;
    }
    v40 = (unint64_t)((1 << *(_BYTE *)(v0 + 1120)) + 63) >> 6;
    if (v39 >= v40)
    {
      v38 = *(_QWORD *)(v0 + 928);
    }
    else
    {
      v32 = *(_QWORD *)(v0 + 400);
      v41 = v32 + 64;
      v42 = *(_QWORD *)(v32 + 64 + 8 * v39);
      if (v42)
      {
LABEL_9:
        v30 = (v42 - 1) & v42;
        v31 = __clz(__rbit64(v42)) + (v39 << 6);
        v29 = v39;
        goto LABEL_5;
      }
      v38 = v29 + 1;
      if (v29 + 2 < v40)
      {
        v42 = *(_QWORD *)(v41 + 8 * (v29 + 2));
        if (v42)
        {
          v39 = v29 + 2;
          goto LABEL_9;
        }
        v38 = v29 + 2;
        if (v29 + 3 < v40)
        {
          v42 = *(_QWORD *)(v41 + 8 * (v29 + 3));
          if (v42)
          {
            v39 = v29 + 3;
            goto LABEL_9;
          }
          v39 = v29 + 4;
          v38 = v29 + 3;
          if (v29 + 4 < v40)
          {
            v42 = *(_QWORD *)(v41 + 8 * v39);
            if (v42)
              goto LABEL_9;
            v38 = v40 - 1;
            v70 = v40 - 5;
            while (v70 != v29)
            {
              v42 = *(_QWORD *)(v32 + 104 + 8 * v29++);
              if (v42)
              {
                v39 = v29 + 4;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    v43 = *(_QWORD *)(v0 + 864);
    v44 = sub_100037A5C(&qword_100263340);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 1, 1, v44);
    v30 = 0;
    goto LABEL_12;
  }
  v30 = (v28 - 1) & v28;
  v31 = __clz(__rbit64(v28)) | (v29 << 6);
  v32 = *(_QWORD *)(v0 + 400);
LABEL_5:
  v33 = *(_QWORD *)(v0 + 864);
  v34 = *(_QWORD *)(v0 + 744);
  v35 = *(_QWORD *)(v0 + 736);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 816) + 16))(v33, *(_QWORD *)(v32 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 816) + 72) * v31, *(_QWORD *)(v0 + 808));
  v36 = *(_QWORD *)(v32 + 56) + *(_QWORD *)(v34 + 72) * v31;
  v37 = sub_100037A5C(&qword_100263340);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16))(v33 + *(int *)(v37 + 48), v36, v35);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v33, 0, 1, v37);
  v38 = v29;
LABEL_12:
  *(_QWORD *)(v0 + 936) = v30;
  *(_QWORD *)(v0 + 928) = v38;
  v45 = *(_QWORD *)(v0 + 872);
  sub_10000EF6C(*(_QWORD *)(v0 + 864), v45, &qword_100263338);
  v46 = sub_100037A5C(&qword_100263340);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46) == 1)
  {
    v47 = *(_QWORD *)(v0 + 920);
    v48 = *(_QWORD *)(v0 + 904);
    v49 = *(_QWORD *)(v0 + 896);
    v50 = *(_QWORD *)(v0 + 888);
    v51 = *(_QWORD *)(v0 + 880);
    v52 = *(_QWORD *)(v0 + 872);
    v53 = *(_QWORD *)(v0 + 864);
    v54 = *(_QWORD *)(v0 + 856);
    v55 = *(_QWORD *)(v0 + 848);
    v71 = *(_QWORD *)(v0 + 840);
    v72 = *(_QWORD *)(v0 + 832);
    v73 = *(_QWORD *)(v0 + 824);
    v75 = *(_QWORD *)(v0 + 800);
    v77 = *(_QWORD *)(v0 + 792);
    v79 = *(_QWORD *)(v0 + 784);
    v81 = *(_QWORD *)(v0 + 776);
    v83 = *(_QWORD *)(v0 + 768);
    v85 = *(_QWORD *)(v0 + 760);
    v87 = *(_QWORD *)(v0 + 752);
    v89 = *(_QWORD *)(v0 + 728);
    v91 = *(_QWORD *)(v0 + 720);
    v93 = *(_QWORD *)(v0 + 712);
    v95 = *(_QWORD *)(v0 + 704);
    v97 = *(_QWORD *)(v0 + 696);
    v99 = *(_QWORD *)(v0 + 688);
    v101 = *(_QWORD *)(v0 + 680);
    v103 = *(_QWORD *)(v0 + 656);
    v105 = *(_QWORD *)(v0 + 648);
    v107 = *(_QWORD *)(v0 + 640);
    v109 = *(_QWORD *)(v0 + 616);
    v111 = *(_QWORD *)(v0 + 608);
    v113 = *(_QWORD *)(v0 + 600);
    v115 = *(_QWORD *)(v0 + 576);
    v117 = *(_QWORD *)(v0 + 568);
    v119 = *(_QWORD *)(v0 + 560);
    v121 = *(_QWORD *)(v0 + 536);
    v123 = *(_QWORD *)(v0 + 512);
    v126 = *(_QWORD *)(v0 + 488);
    v129 = *(_QWORD *)(v0 + 480);
    v132 = *(_QWORD *)(v0 + 456);
    v135 = *(_QWORD *)(v0 + 448);
    v138 = *(_QWORD *)(v0 + 440);
    v139 = *(_QWORD *)(v0 + 432);
    swift_release(*(_QWORD *)(v0 + 400));
    swift_release(v47);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v51);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v126);
    swift_task_dealloc(v129);
    swift_task_dealloc(v132);
    swift_task_dealloc(v135);
    swift_task_dealloc(v138);
    swift_task_dealloc(v139);
    v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  v56 = *(_QWORD *)(v0 + 800);
  v57 = *(_QWORD *)(v0 + 744);
  v58 = *(_QWORD *)(v0 + 736);
  v59 = *(_QWORD *)(v0 + 648);
  v60 = *(_QWORD *)(v0 + 632);
  v61 = *(_QWORD *)(v0 + 624);
  v62 = *(_QWORD *)(v0 + 872) + *(int *)(v46 + 48);
  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 816) + 32))(*(_QWORD *)(v0 + 856));
  v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v56, v62, v58);
  v64 = Friend.handle.getter(v63);
  v65 = Handle.identifier.getter(v64);
  v67 = v66;
  *(_QWORD *)(v0 + 944) = v66;
  v68 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  *(_QWORD *)(v0 + 952) = v68;
  v68(v59, v61);
  v69 = (_QWORD *)swift_task_alloc(dword_100267A74);
  *(_QWORD *)(v0 + 960) = v69;
  *v69 = v0;
  v69[1] = sub_1001DD208;
  return sub_1001DB4BC(*(_QWORD *)(v0 + 656), v65, v67);
}

uint64_t sub_1001E06E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1048);
  *(_QWORD *)(*v1 + 1056) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 696);
  v5 = *(_QWORD *)(v2 + 408);
  sub_100024990(v4, type metadata accessor for FriendRecord);
  if (v0)
    v6 = sub_1001E2488;
  else
    v6 = sub_1001E075C;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001E075C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  _QWORD *v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v1 = *(_QWORD *)(v0 + 1056);
  Connection.run(_:)(*(_QWORD *)(v0 + 440));
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 1040);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 976);
  if (v1)
  {
    v133 = *(_QWORD *)(v0 + 880);
    v136 = *(_QWORD *)(v0 + 904);
    v124 = *(_QWORD *)(v0 + 856);
    v127 = *(_QWORD *)(v0 + 888);
    v4 = *(_QWORD *)(v0 + 808);
    v5 = *(_QWORD *)(v0 + 800);
    v6 = *(_QWORD *)(v0 + 736);
    v130 = *(_QWORD *)(v0 + 728);
    v7 = *(_QWORD *)(v0 + 440);
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 1040);
    v10 = *(_QWORD *)(v0 + 416);
    v9 = *(_QWORD *)(v0 + 424);
    v11 = *(_QWORD *)(v0 + 400);
    swift_release(*(_QWORD *)(v0 + 920));
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v10);
    v3(v5, v6);
    v8(v124, v4);
    swift_release(v11);
    (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v136, v133);
    sub_100024990(v130, type metadata accessor for FriendRecord);
    v12 = *(_QWORD *)(v0 + 896);
    v13 = *(_QWORD *)(v0 + 872);
    v14 = *(_QWORD *)(v0 + 864);
    v15 = *(_QWORD *)(v0 + 856);
    v16 = *(_QWORD *)(v0 + 848);
    v17 = *(_QWORD *)(v0 + 840);
    v18 = *(_QWORD *)(v0 + 832);
    v19 = *(_QWORD *)(v0 + 824);
    v20 = *(_QWORD *)(v0 + 800);
    v74 = *(_QWORD *)(v0 + 792);
    v76 = *(_QWORD *)(v0 + 784);
    v78 = *(_QWORD *)(v0 + 776);
    v80 = *(_QWORD *)(v0 + 768);
    v82 = *(_QWORD *)(v0 + 760);
    v84 = *(_QWORD *)(v0 + 752);
    v86 = *(_QWORD *)(v0 + 728);
    v88 = *(_QWORD *)(v0 + 720);
    v90 = *(_QWORD *)(v0 + 712);
    v92 = *(_QWORD *)(v0 + 704);
    v94 = *(_QWORD *)(v0 + 696);
    v96 = *(_QWORD *)(v0 + 688);
    v98 = *(_QWORD *)(v0 + 680);
    v100 = *(_QWORD *)(v0 + 656);
    v102 = *(_QWORD *)(v0 + 648);
    v104 = *(_QWORD *)(v0 + 640);
    v106 = *(_QWORD *)(v0 + 616);
    v108 = *(_QWORD *)(v0 + 608);
    v110 = *(_QWORD *)(v0 + 600);
    v112 = *(_QWORD *)(v0 + 576);
    v114 = *(_QWORD *)(v0 + 568);
    v116 = *(_QWORD *)(v0 + 560);
    v118 = *(_QWORD *)(v0 + 536);
    v120 = *(_QWORD *)(v0 + 512);
    v122 = *(_QWORD *)(v0 + 488);
    v125 = *(_QWORD *)(v0 + 480);
    v128 = *(_QWORD *)(v0 + 456);
    v131 = *(_QWORD *)(v0 + 448);
    v134 = *(_QWORD *)(v0 + 440);
    v137 = *(_QWORD *)(v0 + 432);
    swift_task_dealloc(*(_QWORD *)(v0 + 904));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v128);
    swift_task_dealloc(v131);
    swift_task_dealloc(v134);
    swift_task_dealloc(v137);
    v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  v22 = *(_QWORD *)(v0 + 856);
  v23 = *(_QWORD *)(v0 + 808);
  v24 = *(_QWORD *)(v0 + 800);
  v25 = *(_QWORD *)(v0 + 736);
  v26 = *(_QWORD *)(v0 + 728);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 8))(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 416));
  v3(v24, v25);
  v2(v22, v23);
  result = sub_100024990(v26, type metadata accessor for FriendRecord);
  v28 = *(_QWORD *)(v0 + 936);
  v29 = *(_QWORD *)(v0 + 928);
  if (!v28)
  {
    v39 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      return result;
    }
    v40 = (unint64_t)((1 << *(_BYTE *)(v0 + 1120)) + 63) >> 6;
    if (v39 >= v40)
    {
      v38 = *(_QWORD *)(v0 + 928);
    }
    else
    {
      v32 = *(_QWORD *)(v0 + 400);
      v41 = v32 + 64;
      v42 = *(_QWORD *)(v32 + 64 + 8 * v39);
      if (v42)
      {
LABEL_9:
        v30 = (v42 - 1) & v42;
        v31 = __clz(__rbit64(v42)) + (v39 << 6);
        v29 = v39;
        goto LABEL_5;
      }
      v38 = v29 + 1;
      if (v29 + 2 < v40)
      {
        v42 = *(_QWORD *)(v41 + 8 * (v29 + 2));
        if (v42)
        {
          v39 = v29 + 2;
          goto LABEL_9;
        }
        v38 = v29 + 2;
        if (v29 + 3 < v40)
        {
          v42 = *(_QWORD *)(v41 + 8 * (v29 + 3));
          if (v42)
          {
            v39 = v29 + 3;
            goto LABEL_9;
          }
          v39 = v29 + 4;
          v38 = v29 + 3;
          if (v29 + 4 < v40)
          {
            v42 = *(_QWORD *)(v41 + 8 * v39);
            if (v42)
              goto LABEL_9;
            v38 = v40 - 1;
            v70 = v40 - 5;
            while (v70 != v29)
            {
              v42 = *(_QWORD *)(v32 + 104 + 8 * v29++);
              if (v42)
              {
                v39 = v29 + 4;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    v43 = *(_QWORD *)(v0 + 864);
    v44 = sub_100037A5C(&qword_100263340);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 1, 1, v44);
    v30 = 0;
    goto LABEL_12;
  }
  v30 = (v28 - 1) & v28;
  v31 = __clz(__rbit64(v28)) | (v29 << 6);
  v32 = *(_QWORD *)(v0 + 400);
LABEL_5:
  v33 = *(_QWORD *)(v0 + 864);
  v34 = *(_QWORD *)(v0 + 744);
  v35 = *(_QWORD *)(v0 + 736);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 816) + 16))(v33, *(_QWORD *)(v32 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 816) + 72) * v31, *(_QWORD *)(v0 + 808));
  v36 = *(_QWORD *)(v32 + 56) + *(_QWORD *)(v34 + 72) * v31;
  v37 = sub_100037A5C(&qword_100263340);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16))(v33 + *(int *)(v37 + 48), v36, v35);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v33, 0, 1, v37);
  v38 = v29;
LABEL_12:
  *(_QWORD *)(v0 + 936) = v30;
  *(_QWORD *)(v0 + 928) = v38;
  v45 = *(_QWORD *)(v0 + 872);
  sub_10000EF6C(*(_QWORD *)(v0 + 864), v45, &qword_100263338);
  v46 = sub_100037A5C(&qword_100263340);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46) == 1)
  {
    v47 = *(_QWORD *)(v0 + 920);
    v48 = *(_QWORD *)(v0 + 904);
    v49 = *(_QWORD *)(v0 + 896);
    v50 = *(_QWORD *)(v0 + 888);
    v51 = *(_QWORD *)(v0 + 880);
    v52 = *(_QWORD *)(v0 + 872);
    v53 = *(_QWORD *)(v0 + 864);
    v54 = *(_QWORD *)(v0 + 856);
    v55 = *(_QWORD *)(v0 + 848);
    v71 = *(_QWORD *)(v0 + 840);
    v72 = *(_QWORD *)(v0 + 832);
    v73 = *(_QWORD *)(v0 + 824);
    v75 = *(_QWORD *)(v0 + 800);
    v77 = *(_QWORD *)(v0 + 792);
    v79 = *(_QWORD *)(v0 + 784);
    v81 = *(_QWORD *)(v0 + 776);
    v83 = *(_QWORD *)(v0 + 768);
    v85 = *(_QWORD *)(v0 + 760);
    v87 = *(_QWORD *)(v0 + 752);
    v89 = *(_QWORD *)(v0 + 728);
    v91 = *(_QWORD *)(v0 + 720);
    v93 = *(_QWORD *)(v0 + 712);
    v95 = *(_QWORD *)(v0 + 704);
    v97 = *(_QWORD *)(v0 + 696);
    v99 = *(_QWORD *)(v0 + 688);
    v101 = *(_QWORD *)(v0 + 680);
    v103 = *(_QWORD *)(v0 + 656);
    v105 = *(_QWORD *)(v0 + 648);
    v107 = *(_QWORD *)(v0 + 640);
    v109 = *(_QWORD *)(v0 + 616);
    v111 = *(_QWORD *)(v0 + 608);
    v113 = *(_QWORD *)(v0 + 600);
    v115 = *(_QWORD *)(v0 + 576);
    v117 = *(_QWORD *)(v0 + 568);
    v119 = *(_QWORD *)(v0 + 560);
    v121 = *(_QWORD *)(v0 + 536);
    v123 = *(_QWORD *)(v0 + 512);
    v126 = *(_QWORD *)(v0 + 488);
    v129 = *(_QWORD *)(v0 + 480);
    v132 = *(_QWORD *)(v0 + 456);
    v135 = *(_QWORD *)(v0 + 448);
    v138 = *(_QWORD *)(v0 + 440);
    v139 = *(_QWORD *)(v0 + 432);
    swift_release(*(_QWORD *)(v0 + 400));
    swift_release(v47);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v51);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v126);
    swift_task_dealloc(v129);
    swift_task_dealloc(v132);
    swift_task_dealloc(v135);
    swift_task_dealloc(v138);
    swift_task_dealloc(v139);
    v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  v56 = *(_QWORD *)(v0 + 800);
  v57 = *(_QWORD *)(v0 + 744);
  v58 = *(_QWORD *)(v0 + 736);
  v59 = *(_QWORD *)(v0 + 648);
  v60 = *(_QWORD *)(v0 + 632);
  v61 = *(_QWORD *)(v0 + 624);
  v62 = *(_QWORD *)(v0 + 872) + *(int *)(v46 + 48);
  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 816) + 32))(*(_QWORD *)(v0 + 856));
  v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v56, v62, v58);
  v64 = Friend.handle.getter(v63);
  v65 = Handle.identifier.getter(v64);
  v67 = v66;
  *(_QWORD *)(v0 + 944) = v66;
  v68 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  *(_QWORD *)(v0 + 952) = v68;
  v68(v59, v61);
  v69 = (_QWORD *)swift_task_alloc(dword_100267A74);
  *(_QWORD *)(v0 + 960) = v69;
  *v69 = v0;
  v69[1] = sub_1001DD208;
  return sub_1001DB4BC(*(_QWORD *)(v0 + 656), v65, v67);
}

uint64_t sub_1001E0FF8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1072);
  *(_QWORD *)(*v1 + 1080) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001E18FC;
  else
    v4 = sub_1001E105C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 408), 0);
}

uint64_t sub_1001E105C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  _QWORD *v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v1 = *(_QWORD *)(v0 + 1080);
  Connection.run(_:)(*(_QWORD *)(v0 + 432));
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
  if (v1)
  {
    v133 = *(_QWORD *)(v0 + 880);
    v136 = *(_QWORD *)(v0 + 904);
    v127 = *(_QWORD *)(v0 + 856);
    v130 = *(_QWORD *)(v0 + 888);
    v3 = *(_QWORD *)(v0 + 816);
    v124 = *(_QWORD *)(v0 + 808);
    v4 = *(_QWORD *)(v0 + 800);
    v5 = *(_QWORD *)(v0 + 736);
    v6 = *(_QWORD *)(v0 + 688);
    v7 = *(_QWORD *)(v0 + 424);
    v8 = *(_QWORD *)(v0 + 432);
    v9 = *(_QWORD *)(v0 + 416);
    v10 = *(_QWORD *)(v0 + 400);
    swift_release(*(_QWORD *)(v0 + 920));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
    sub_100024990(v6, type metadata accessor for FriendRecord);
    v2(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v127, v124);
    swift_release(v10);
    (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v136, v133);
    v11 = *(_QWORD *)(v0 + 896);
    v12 = *(_QWORD *)(v0 + 872);
    v13 = *(_QWORD *)(v0 + 864);
    v14 = *(_QWORD *)(v0 + 856);
    v15 = *(_QWORD *)(v0 + 848);
    v16 = *(_QWORD *)(v0 + 840);
    v17 = *(_QWORD *)(v0 + 832);
    v18 = *(_QWORD *)(v0 + 824);
    v19 = *(_QWORD *)(v0 + 800);
    v74 = *(_QWORD *)(v0 + 792);
    v76 = *(_QWORD *)(v0 + 784);
    v78 = *(_QWORD *)(v0 + 776);
    v80 = *(_QWORD *)(v0 + 768);
    v82 = *(_QWORD *)(v0 + 760);
    v84 = *(_QWORD *)(v0 + 752);
    v86 = *(_QWORD *)(v0 + 728);
    v88 = *(_QWORD *)(v0 + 720);
    v90 = *(_QWORD *)(v0 + 712);
    v92 = *(_QWORD *)(v0 + 704);
    v94 = *(_QWORD *)(v0 + 696);
    v96 = *(_QWORD *)(v0 + 688);
    v98 = *(_QWORD *)(v0 + 680);
    v100 = *(_QWORD *)(v0 + 656);
    v102 = *(_QWORD *)(v0 + 648);
    v104 = *(_QWORD *)(v0 + 640);
    v106 = *(_QWORD *)(v0 + 616);
    v108 = *(_QWORD *)(v0 + 608);
    v110 = *(_QWORD *)(v0 + 600);
    v112 = *(_QWORD *)(v0 + 576);
    v114 = *(_QWORD *)(v0 + 568);
    v116 = *(_QWORD *)(v0 + 560);
    v118 = *(_QWORD *)(v0 + 536);
    v120 = *(_QWORD *)(v0 + 512);
    v122 = *(_QWORD *)(v0 + 488);
    v125 = *(_QWORD *)(v0 + 480);
    v128 = *(_QWORD *)(v0 + 456);
    v131 = *(_QWORD *)(v0 + 448);
    v134 = *(_QWORD *)(v0 + 440);
    v137 = *(_QWORD *)(v0 + 432);
    swift_task_dealloc(*(_QWORD *)(v0 + 904));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v128);
    swift_task_dealloc(v131);
    swift_task_dealloc(v134);
    swift_task_dealloc(v137);
    v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  v21 = *(_QWORD *)(v0 + 856);
  v22 = *(_QWORD *)(v0 + 816);
  v23 = *(_QWORD *)(v0 + 808);
  v24 = *(_QWORD *)(v0 + 800);
  v25 = *(_QWORD *)(v0 + 736);
  v26 = *(_QWORD *)(v0 + 688);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 8))(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 416));
  sub_100024990(v26, type metadata accessor for FriendRecord);
  v2(v24, v25);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  v28 = *(_QWORD *)(v0 + 936);
  v29 = *(_QWORD *)(v0 + 928);
  if (!v28)
  {
    v39 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      return result;
    }
    v40 = (unint64_t)((1 << *(_BYTE *)(v0 + 1120)) + 63) >> 6;
    if (v39 >= v40)
    {
      v38 = *(_QWORD *)(v0 + 928);
    }
    else
    {
      v32 = *(_QWORD *)(v0 + 400);
      v41 = v32 + 64;
      v42 = *(_QWORD *)(v32 + 64 + 8 * v39);
      if (v42)
      {
LABEL_9:
        v30 = (v42 - 1) & v42;
        v31 = __clz(__rbit64(v42)) + (v39 << 6);
        v29 = v39;
        goto LABEL_5;
      }
      v38 = v29 + 1;
      if (v29 + 2 < v40)
      {
        v42 = *(_QWORD *)(v41 + 8 * (v29 + 2));
        if (v42)
        {
          v39 = v29 + 2;
          goto LABEL_9;
        }
        v38 = v29 + 2;
        if (v29 + 3 < v40)
        {
          v42 = *(_QWORD *)(v41 + 8 * (v29 + 3));
          if (v42)
          {
            v39 = v29 + 3;
            goto LABEL_9;
          }
          v39 = v29 + 4;
          v38 = v29 + 3;
          if (v29 + 4 < v40)
          {
            v42 = *(_QWORD *)(v41 + 8 * v39);
            if (v42)
              goto LABEL_9;
            v38 = v40 - 1;
            v70 = v40 - 5;
            while (v70 != v29)
            {
              v42 = *(_QWORD *)(v32 + 104 + 8 * v29++);
              if (v42)
              {
                v39 = v29 + 4;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    v43 = *(_QWORD *)(v0 + 864);
    v44 = sub_100037A5C(&qword_100263340);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 1, 1, v44);
    v30 = 0;
    goto LABEL_12;
  }
  v30 = (v28 - 1) & v28;
  v31 = __clz(__rbit64(v28)) | (v29 << 6);
  v32 = *(_QWORD *)(v0 + 400);
LABEL_5:
  v33 = *(_QWORD *)(v0 + 864);
  v34 = *(_QWORD *)(v0 + 744);
  v35 = *(_QWORD *)(v0 + 736);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 816) + 16))(v33, *(_QWORD *)(v32 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 816) + 72) * v31, *(_QWORD *)(v0 + 808));
  v36 = *(_QWORD *)(v32 + 56) + *(_QWORD *)(v34 + 72) * v31;
  v37 = sub_100037A5C(&qword_100263340);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16))(v33 + *(int *)(v37 + 48), v36, v35);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v33, 0, 1, v37);
  v38 = v29;
LABEL_12:
  *(_QWORD *)(v0 + 936) = v30;
  *(_QWORD *)(v0 + 928) = v38;
  v45 = *(_QWORD *)(v0 + 872);
  sub_10000EF6C(*(_QWORD *)(v0 + 864), v45, &qword_100263338);
  v46 = sub_100037A5C(&qword_100263340);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46) == 1)
  {
    v47 = *(_QWORD *)(v0 + 920);
    v48 = *(_QWORD *)(v0 + 904);
    v49 = *(_QWORD *)(v0 + 896);
    v50 = *(_QWORD *)(v0 + 888);
    v51 = *(_QWORD *)(v0 + 880);
    v52 = *(_QWORD *)(v0 + 872);
    v53 = *(_QWORD *)(v0 + 864);
    v54 = *(_QWORD *)(v0 + 856);
    v55 = *(_QWORD *)(v0 + 848);
    v71 = *(_QWORD *)(v0 + 840);
    v72 = *(_QWORD *)(v0 + 832);
    v73 = *(_QWORD *)(v0 + 824);
    v75 = *(_QWORD *)(v0 + 800);
    v77 = *(_QWORD *)(v0 + 792);
    v79 = *(_QWORD *)(v0 + 784);
    v81 = *(_QWORD *)(v0 + 776);
    v83 = *(_QWORD *)(v0 + 768);
    v85 = *(_QWORD *)(v0 + 760);
    v87 = *(_QWORD *)(v0 + 752);
    v89 = *(_QWORD *)(v0 + 728);
    v91 = *(_QWORD *)(v0 + 720);
    v93 = *(_QWORD *)(v0 + 712);
    v95 = *(_QWORD *)(v0 + 704);
    v97 = *(_QWORD *)(v0 + 696);
    v99 = *(_QWORD *)(v0 + 688);
    v101 = *(_QWORD *)(v0 + 680);
    v103 = *(_QWORD *)(v0 + 656);
    v105 = *(_QWORD *)(v0 + 648);
    v107 = *(_QWORD *)(v0 + 640);
    v109 = *(_QWORD *)(v0 + 616);
    v111 = *(_QWORD *)(v0 + 608);
    v113 = *(_QWORD *)(v0 + 600);
    v115 = *(_QWORD *)(v0 + 576);
    v117 = *(_QWORD *)(v0 + 568);
    v119 = *(_QWORD *)(v0 + 560);
    v121 = *(_QWORD *)(v0 + 536);
    v123 = *(_QWORD *)(v0 + 512);
    v126 = *(_QWORD *)(v0 + 488);
    v129 = *(_QWORD *)(v0 + 480);
    v132 = *(_QWORD *)(v0 + 456);
    v135 = *(_QWORD *)(v0 + 448);
    v138 = *(_QWORD *)(v0 + 440);
    v139 = *(_QWORD *)(v0 + 432);
    swift_release(*(_QWORD *)(v0 + 400));
    swift_release(v47);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v51);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v126);
    swift_task_dealloc(v129);
    swift_task_dealloc(v132);
    swift_task_dealloc(v135);
    swift_task_dealloc(v138);
    swift_task_dealloc(v139);
    v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  v56 = *(_QWORD *)(v0 + 800);
  v57 = *(_QWORD *)(v0 + 744);
  v58 = *(_QWORD *)(v0 + 736);
  v59 = *(_QWORD *)(v0 + 648);
  v60 = *(_QWORD *)(v0 + 632);
  v61 = *(_QWORD *)(v0 + 624);
  v62 = *(_QWORD *)(v0 + 872) + *(int *)(v46 + 48);
  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 816) + 32))(*(_QWORD *)(v0 + 856));
  v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v56, v62, v58);
  v64 = Friend.handle.getter(v63);
  v65 = Handle.identifier.getter(v64);
  v67 = v66;
  *(_QWORD *)(v0 + 944) = v66;
  v68 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  *(_QWORD *)(v0 + 952) = v68;
  v68(v59, v61);
  v69 = (_QWORD *)swift_task_alloc(dword_100267A74);
  *(_QWORD *)(v0 + 960) = v69;
  *v69 = v0;
  v69[1] = sub_1001DD208;
  return sub_1001DB4BC(*(_QWORD *)(v0 + 656), v65, v67);
}

uint64_t sub_1001E18FC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
  v2 = *(_QWORD *)(v0 + 888);
  v49 = *(_QWORD *)(v0 + 880);
  v51 = *(_QWORD *)(v0 + 904);
  v3 = *(_QWORD *)(v0 + 856);
  v4 = *(_QWORD *)(v0 + 816);
  v5 = *(_QWORD *)(v0 + 808);
  v6 = *(_QWORD *)(v0 + 800);
  v7 = *(_QWORD *)(v0 + 736);
  v8 = *(_QWORD *)(v0 + 688);
  v9 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 920));
  sub_100024990(v8, type metadata accessor for FriendRecord);
  v1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release(v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v51, v49);
  v10 = *(_QWORD *)(v0 + 896);
  v11 = *(_QWORD *)(v0 + 872);
  v12 = *(_QWORD *)(v0 + 864);
  v13 = *(_QWORD *)(v0 + 856);
  v14 = *(_QWORD *)(v0 + 848);
  v15 = *(_QWORD *)(v0 + 840);
  v16 = *(_QWORD *)(v0 + 832);
  v17 = *(_QWORD *)(v0 + 824);
  v18 = *(_QWORD *)(v0 + 800);
  v20 = *(_QWORD *)(v0 + 792);
  v21 = *(_QWORD *)(v0 + 784);
  v22 = *(_QWORD *)(v0 + 776);
  v23 = *(_QWORD *)(v0 + 768);
  v24 = *(_QWORD *)(v0 + 760);
  v25 = *(_QWORD *)(v0 + 752);
  v26 = *(_QWORD *)(v0 + 728);
  v27 = *(_QWORD *)(v0 + 720);
  v28 = *(_QWORD *)(v0 + 712);
  v29 = *(_QWORD *)(v0 + 704);
  v30 = *(_QWORD *)(v0 + 696);
  v31 = *(_QWORD *)(v0 + 688);
  v32 = *(_QWORD *)(v0 + 680);
  v33 = *(_QWORD *)(v0 + 656);
  v34 = *(_QWORD *)(v0 + 648);
  v35 = *(_QWORD *)(v0 + 640);
  v36 = *(_QWORD *)(v0 + 616);
  v37 = *(_QWORD *)(v0 + 608);
  v38 = *(_QWORD *)(v0 + 600);
  v39 = *(_QWORD *)(v0 + 576);
  v40 = *(_QWORD *)(v0 + 568);
  v41 = *(_QWORD *)(v0 + 560);
  v42 = *(_QWORD *)(v0 + 536);
  v43 = *(_QWORD *)(v0 + 512);
  v44 = *(_QWORD *)(v0 + 488);
  v45 = *(_QWORD *)(v0 + 480);
  v46 = *(_QWORD *)(v0 + 456);
  v47 = *(_QWORD *)(v0 + 448);
  v48 = *(_QWORD *)(v0 + 440);
  v50 = *(_QWORD *)(v0 + 432);
  swift_task_dealloc(*(_QWORD *)(v0 + 904));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E1BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *(_QWORD *)(v0 + 904);
  v1 = *(_QWORD *)(v0 + 888);
  v2 = *(_QWORD *)(v0 + 880);
  v3 = *(_QWORD *)(v0 + 856);
  v4 = *(_QWORD *)(v0 + 816);
  v5 = *(_QWORD *)(v0 + 808);
  v6 = *(_QWORD *)(v0 + 800);
  v7 = *(_QWORD *)(v0 + 744);
  v8 = *(_QWORD *)(v0 + 736);
  v9 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 920));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release(v9);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v50, v2);
  v10 = *(_QWORD *)(v0 + 896);
  v11 = *(_QWORD *)(v0 + 872);
  v12 = *(_QWORD *)(v0 + 864);
  v13 = *(_QWORD *)(v0 + 856);
  v14 = *(_QWORD *)(v0 + 848);
  v15 = *(_QWORD *)(v0 + 840);
  v16 = *(_QWORD *)(v0 + 832);
  v17 = *(_QWORD *)(v0 + 824);
  v18 = *(_QWORD *)(v0 + 800);
  v20 = *(_QWORD *)(v0 + 792);
  v21 = *(_QWORD *)(v0 + 784);
  v22 = *(_QWORD *)(v0 + 776);
  v23 = *(_QWORD *)(v0 + 768);
  v24 = *(_QWORD *)(v0 + 760);
  v25 = *(_QWORD *)(v0 + 752);
  v26 = *(_QWORD *)(v0 + 728);
  v27 = *(_QWORD *)(v0 + 720);
  v28 = *(_QWORD *)(v0 + 712);
  v29 = *(_QWORD *)(v0 + 704);
  v30 = *(_QWORD *)(v0 + 696);
  v31 = *(_QWORD *)(v0 + 688);
  v32 = *(_QWORD *)(v0 + 680);
  v33 = *(_QWORD *)(v0 + 656);
  v34 = *(_QWORD *)(v0 + 648);
  v35 = *(_QWORD *)(v0 + 640);
  v36 = *(_QWORD *)(v0 + 616);
  v37 = *(_QWORD *)(v0 + 608);
  v38 = *(_QWORD *)(v0 + 600);
  v39 = *(_QWORD *)(v0 + 576);
  v40 = *(_QWORD *)(v0 + 568);
  v41 = *(_QWORD *)(v0 + 560);
  v42 = *(_QWORD *)(v0 + 536);
  v43 = *(_QWORD *)(v0 + 512);
  v44 = *(_QWORD *)(v0 + 488);
  v45 = *(_QWORD *)(v0 + 480);
  v46 = *(_QWORD *)(v0 + 456);
  v47 = *(_QWORD *)(v0 + 448);
  v48 = *(_QWORD *)(v0 + 440);
  v49 = *(_QWORD *)(v0 + 432);
  swift_task_dealloc(*(_QWORD *)(v0 + 904));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E1EC0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 992);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 984);
  v3 = *(_QWORD *)(v0 + 888);
  v49 = *(_QWORD *)(v0 + 880);
  v51 = *(_QWORD *)(v0 + 904);
  v4 = *(_QWORD *)(v0 + 856);
  v5 = *(_QWORD *)(v0 + 808);
  v6 = *(_QWORD *)(v0 + 800);
  v7 = *(_QWORD *)(v0 + 736);
  v8 = *(_QWORD *)(v0 + 728);
  v9 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 920));
  v2(v6, v7);
  v1(v4, v5);
  swift_release(v9);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v51, v49);
  sub_100024990(v8, type metadata accessor for FriendRecord);
  v10 = *(_QWORD *)(v0 + 896);
  v11 = *(_QWORD *)(v0 + 872);
  v12 = *(_QWORD *)(v0 + 864);
  v13 = *(_QWORD *)(v0 + 856);
  v14 = *(_QWORD *)(v0 + 848);
  v15 = *(_QWORD *)(v0 + 840);
  v16 = *(_QWORD *)(v0 + 832);
  v17 = *(_QWORD *)(v0 + 824);
  v18 = *(_QWORD *)(v0 + 800);
  v20 = *(_QWORD *)(v0 + 792);
  v21 = *(_QWORD *)(v0 + 784);
  v22 = *(_QWORD *)(v0 + 776);
  v23 = *(_QWORD *)(v0 + 768);
  v24 = *(_QWORD *)(v0 + 760);
  v25 = *(_QWORD *)(v0 + 752);
  v26 = *(_QWORD *)(v0 + 728);
  v27 = *(_QWORD *)(v0 + 720);
  v28 = *(_QWORD *)(v0 + 712);
  v29 = *(_QWORD *)(v0 + 704);
  v30 = *(_QWORD *)(v0 + 696);
  v31 = *(_QWORD *)(v0 + 688);
  v32 = *(_QWORD *)(v0 + 680);
  v33 = *(_QWORD *)(v0 + 656);
  v34 = *(_QWORD *)(v0 + 648);
  v35 = *(_QWORD *)(v0 + 640);
  v36 = *(_QWORD *)(v0 + 616);
  v37 = *(_QWORD *)(v0 + 608);
  v38 = *(_QWORD *)(v0 + 600);
  v39 = *(_QWORD *)(v0 + 576);
  v40 = *(_QWORD *)(v0 + 568);
  v41 = *(_QWORD *)(v0 + 560);
  v42 = *(_QWORD *)(v0 + 536);
  v43 = *(_QWORD *)(v0 + 512);
  v44 = *(_QWORD *)(v0 + 488);
  v45 = *(_QWORD *)(v0 + 480);
  v46 = *(_QWORD *)(v0 + 456);
  v47 = *(_QWORD *)(v0 + 448);
  v48 = *(_QWORD *)(v0 + 440);
  v50 = *(_QWORD *)(v0 + 432);
  swift_task_dealloc(*(_QWORD *)(v0 + 904));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E21A4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1016);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 976);
  v3 = *(_QWORD *)(v0 + 888);
  v49 = *(_QWORD *)(v0 + 880);
  v51 = *(_QWORD *)(v0 + 904);
  v4 = *(_QWORD *)(v0 + 856);
  v5 = *(_QWORD *)(v0 + 808);
  v6 = *(_QWORD *)(v0 + 800);
  v7 = *(_QWORD *)(v0 + 736);
  v8 = *(_QWORD *)(v0 + 728);
  v9 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 920));
  v2(v6, v7);
  v1(v4, v5);
  swift_release(v9);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v51, v49);
  sub_100024990(v8, type metadata accessor for FriendRecord);
  v10 = *(_QWORD *)(v0 + 896);
  v11 = *(_QWORD *)(v0 + 872);
  v12 = *(_QWORD *)(v0 + 864);
  v13 = *(_QWORD *)(v0 + 856);
  v14 = *(_QWORD *)(v0 + 848);
  v15 = *(_QWORD *)(v0 + 840);
  v16 = *(_QWORD *)(v0 + 832);
  v17 = *(_QWORD *)(v0 + 824);
  v18 = *(_QWORD *)(v0 + 800);
  v20 = *(_QWORD *)(v0 + 792);
  v21 = *(_QWORD *)(v0 + 784);
  v22 = *(_QWORD *)(v0 + 776);
  v23 = *(_QWORD *)(v0 + 768);
  v24 = *(_QWORD *)(v0 + 760);
  v25 = *(_QWORD *)(v0 + 752);
  v26 = *(_QWORD *)(v0 + 728);
  v27 = *(_QWORD *)(v0 + 720);
  v28 = *(_QWORD *)(v0 + 712);
  v29 = *(_QWORD *)(v0 + 704);
  v30 = *(_QWORD *)(v0 + 696);
  v31 = *(_QWORD *)(v0 + 688);
  v32 = *(_QWORD *)(v0 + 680);
  v33 = *(_QWORD *)(v0 + 656);
  v34 = *(_QWORD *)(v0 + 648);
  v35 = *(_QWORD *)(v0 + 640);
  v36 = *(_QWORD *)(v0 + 616);
  v37 = *(_QWORD *)(v0 + 608);
  v38 = *(_QWORD *)(v0 + 600);
  v39 = *(_QWORD *)(v0 + 576);
  v40 = *(_QWORD *)(v0 + 568);
  v41 = *(_QWORD *)(v0 + 560);
  v42 = *(_QWORD *)(v0 + 536);
  v43 = *(_QWORD *)(v0 + 512);
  v44 = *(_QWORD *)(v0 + 488);
  v45 = *(_QWORD *)(v0 + 480);
  v46 = *(_QWORD *)(v0 + 456);
  v47 = *(_QWORD *)(v0 + 448);
  v48 = *(_QWORD *)(v0 + 440);
  v50 = *(_QWORD *)(v0 + 432);
  swift_task_dealloc(*(_QWORD *)(v0 + 904));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E2488()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1040);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 976);
  v3 = *(_QWORD *)(v0 + 888);
  v49 = *(_QWORD *)(v0 + 880);
  v51 = *(_QWORD *)(v0 + 904);
  v4 = *(_QWORD *)(v0 + 856);
  v5 = *(_QWORD *)(v0 + 808);
  v6 = *(_QWORD *)(v0 + 800);
  v7 = *(_QWORD *)(v0 + 736);
  v8 = *(_QWORD *)(v0 + 728);
  v9 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 920));
  v2(v6, v7);
  v1(v4, v5);
  swift_release(v9);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v51, v49);
  sub_100024990(v8, type metadata accessor for FriendRecord);
  v10 = *(_QWORD *)(v0 + 896);
  v11 = *(_QWORD *)(v0 + 872);
  v12 = *(_QWORD *)(v0 + 864);
  v13 = *(_QWORD *)(v0 + 856);
  v14 = *(_QWORD *)(v0 + 848);
  v15 = *(_QWORD *)(v0 + 840);
  v16 = *(_QWORD *)(v0 + 832);
  v17 = *(_QWORD *)(v0 + 824);
  v18 = *(_QWORD *)(v0 + 800);
  v20 = *(_QWORD *)(v0 + 792);
  v21 = *(_QWORD *)(v0 + 784);
  v22 = *(_QWORD *)(v0 + 776);
  v23 = *(_QWORD *)(v0 + 768);
  v24 = *(_QWORD *)(v0 + 760);
  v25 = *(_QWORD *)(v0 + 752);
  v26 = *(_QWORD *)(v0 + 728);
  v27 = *(_QWORD *)(v0 + 720);
  v28 = *(_QWORD *)(v0 + 712);
  v29 = *(_QWORD *)(v0 + 704);
  v30 = *(_QWORD *)(v0 + 696);
  v31 = *(_QWORD *)(v0 + 688);
  v32 = *(_QWORD *)(v0 + 680);
  v33 = *(_QWORD *)(v0 + 656);
  v34 = *(_QWORD *)(v0 + 648);
  v35 = *(_QWORD *)(v0 + 640);
  v36 = *(_QWORD *)(v0 + 616);
  v37 = *(_QWORD *)(v0 + 608);
  v38 = *(_QWORD *)(v0 + 600);
  v39 = *(_QWORD *)(v0 + 576);
  v40 = *(_QWORD *)(v0 + 568);
  v41 = *(_QWORD *)(v0 + 560);
  v42 = *(_QWORD *)(v0 + 536);
  v43 = *(_QWORD *)(v0 + 512);
  v44 = *(_QWORD *)(v0 + 488);
  v45 = *(_QWORD *)(v0 + 480);
  v46 = *(_QWORD *)(v0 + 456);
  v47 = *(_QWORD *)(v0 + 448);
  v48 = *(_QWORD *)(v0 + 440);
  v50 = *(_QWORD *)(v0 + 432);
  swift_task_dealloc(*(_QWORD *)(v0 + 904));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E276C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 112);
  *(_QWORD *)(v0 + 304) = v1;
  return swift_task_switch(sub_10003D1F8, v1, 0);
}

uint64_t sub_1001E2788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for LocalStorageDatabase(0);
  v2 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  *(_QWORD *)(v0 + 312) = Database.writeConnection.getter(v1, v2);
  return swift_task_switch(sub_10003CFC8, 0, 0);
}

uint64_t sub_1001E27F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 328);
  v3[42] = a1;
  v3[43] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[40]);
    v5 = sub_1001E3F18;
  }
  else
  {
    v5 = sub_1001E286C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001E286C()
{
  Swift::String *v0;
  uint64_t countAndFlagsBits;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  int64_t v17;
  int v18;
  int v19;
  char v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void *object;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  int64_t v48;
  int v49;
  int v50;
  char v51;
  char v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t i;
  unint64_t v82;
  int64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  Swift::String v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t (*v100)(void *, uint64_t, uint64_t);
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  _BOOL4 v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  void (*v113)(void *, uint64_t);
  uint64_t v114;
  void *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  void *v129;
  uint64_t (*v130)(void);
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  void *v144;
  void (*v145)(void *, unint64_t, void *);
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  _BOOL4 v149;
  void *v150;
  uint64_t v151;
  void *v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  void (*v159)(void *, void *);
  Swift::String **v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  void (**v170)(void *, uint64_t);
  void *v171;
  uint64_t v172;
  void *v173;
  uint64_t *p_countAndFlagsBits;
  void **p_object;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int64_t v179;
  void (**v180)(uint64_t, uint64_t);
  uint64_t v181;
  _QWORD *v182;
  Swift::String *v183;
  _QWORD *v184;
  uint64_t v185;
  Swift::String *v186;
  uint64_t v187;
  os_log_type_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  Swift::String *v199;
  int64_t v200;
  void *v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  void *v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  void *v220;
  void *v221;
  Swift::String *v222;
  uint64_t v223;
  uint64_t v224[3];

  p_object = &v0[2]._object;
  countAndFlagsBits = v0[21]._countAndFlagsBits;
  v2 = swift_retain(countAndFlagsBits);
  v3 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v2);
  swift_release(countAndFlagsBits);
  v4 = sub_10001F73C(v3);
  swift_release(v3);
  if (qword_10025FBD0 != -1)
    swift_once(&qword_10025FBD0, sub_1001E4180);
  v5 = v0[20]._countAndFlagsBits;
  v6 = type metadata accessor for Logger(0);
  v0[22]._countAndFlagsBits = sub_100037A9C(v6, (uint64_t)qword_10027B3F8);
  swift_bridgeObjectRetain_n(v4, 2);
  v7 = swift_bridgeObjectRetain_n(v5, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v222 = v0;
  if (!os_log_type_enabled(v8, v9))
  {
    v36 = v0[20]._countAndFlagsBits;
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease_n(v36, 2);

    object = v0[21]._object;
    goto LABEL_32;
  }
  v188 = v9;
  log = v8;
  v10 = v0[21]._object;
  v11 = swift_slowAlloc(42, -1);
  v185 = swift_slowAlloc(64, -1);
  v223 = v185;
  *(_DWORD *)v11 = 141558787;
  v0[2]._object = (void *)1752392040;
  v199 = v0 + 3;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(p_object, &v0[3], v11 + 4, v11 + 12);
  v206 = v11;
  *(_WORD *)(v11 + 12) = 2081;
  swift_bridgeObjectRetain(v4);
  v13 = sub_1000351DC(v12);
  v14 = v13;
  v195 = v10;
  v15 = *(_QWORD *)(v13 + 16);
  v203 = v4;
  if (!v15)
  {
    swift_release(v13);
    v30 = _swiftEmptyArrayStorage;
LABEL_18:
    v39 = v0[20]._countAndFlagsBits;
    v40 = v206;
    v41 = Array.description.getter(v38);
    v43 = v42;
    swift_bridgeObjectRelease(v30);
    v0[3]._countAndFlagsBits = sub_10002BA84(v41, v43, &v223);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v199, &v0[3]._object, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease_n(v4, 2);
    *(_WORD *)(v206 + 22) = 2160;
    v0[3]._object = (void *)1752392040;
    v183 = v0 + 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v0[3]._object, &v0[4], v40 + 24, v40 + 32);
    *(_WORD *)(v206 + 32) = 2081;
    swift_bridgeObjectRetain(v39);
    v45 = sub_1000351DC(v44);
    v46 = v45;
    v47 = *(_QWORD *)(v45 + 16);
    if (v47)
    {
      v0 = (Swift::String *)v0[13]._countAndFlagsBits;
      v224[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000312EC(0, v47, 0);
      v16 = (_QWORD *)sub_100035A18(v46);
      v48 = (int64_t)v16;
      v50 = v49;
      v52 = v51 & 1;
      v22 = v46 + 56;
      v211 = v46;
      v217 = v46 + 56;
      while ((v48 & 0x8000000000000000) == 0)
      {
        v22 = 1 << *(_BYTE *)(v46 + 32);
        if (v48 >= (uint64_t)v22)
          break;
        v22 = *(_QWORD *)(v217 + (((unint64_t)v48 >> 3) & 0xFFFFFFFFFFFFF8)) >> v48;
        if ((v22 & 1) == 0)
          goto LABEL_83;
        v22 = *(unsigned int *)(v46 + 36);
        if ((_DWORD)v22 != v50)
          goto LABEL_84;
        v54 = v222[16]._countAndFlagsBits;
        v53 = v222[16]._object;
        v55 = v222[12]._object;
        ((void (*)(void *, int64_t, void *))v0[1]._countAndFlagsBits)(v53, *(_QWORD *)(v46 + 48) + (int64_t)v0[4]._object * v48, v55);
        v56 = ((uint64_t (*)(uint64_t, void *, void *))v0[2]._countAndFlagsBits)(v54, v53, v55);
        v57 = Device.identifier.getter(v56);
        v59 = v58;
        ((void (*)(uint64_t, void *))v0->_object)(v54, v55);
        v60 = (_QWORD *)v224[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v224[0]) & 1) == 0)
        {
          sub_1000312EC(0, v60[2] + 1, 1);
          v60 = (_QWORD *)v224[0];
        }
        v62 = v60[2];
        v61 = v60[3];
        if (v62 >= v61 >> 1)
        {
          sub_1000312EC(v61 > 1, v62 + 1, 1);
          v60 = (_QWORD *)v224[0];
        }
        v60[2] = v62 + 1;
        v63 = &v60[2 * v62];
        v63[4] = v57;
        v63[5] = v59;
        v46 = v211;
        v16 = (_QWORD *)sub_100035714(v48, v50, v52 & 1, v211);
        v48 = (int64_t)v16;
        v50 = v64;
        v52 = v65 & 1;
        if (!--v47)
        {
          sub_10016CEA0((uint64_t)v16, v64, v65 & 1);
          swift_release(v211);
          v0 = v222;
          v4 = v203;
          goto LABEL_31;
        }
      }
      goto LABEL_82;
    }
    swift_release(v45);
    v60 = _swiftEmptyArrayStorage;
LABEL_31:
    v67 = v0[20]._countAndFlagsBits;
    v68 = Array.description.getter(v66);
    v70 = v69;
    swift_bridgeObjectRelease(v60);
    v0[4]._countAndFlagsBits = sub_10002BA84(v68, v70, &v223);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v183, &v0[4]._object, v206 + 34, v206 + 42);
    swift_bridgeObjectRelease(v70);
    swift_bridgeObjectRelease_n(v67, 2);
    _os_log_impl((void *)&_mh_execute_header, log, v188, "cached active Devices: %{private,mask.hash}s\ncurrent active Devices: %{private,mask.hash}s", (uint8_t *)v206, 0x2Au);
    swift_arrayDestroy(v185, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v185, -1, -1);
    swift_slowDealloc(v206, -1, -1);

    object = v195;
LABEL_32:
    p_countAndFlagsBits = &v0[2]._countAndFlagsBits;
    v71 = v0[20]._countAndFlagsBits;
    v184 = v0[17]._object;
    v186 = v0 + 1;
    v72 = v0[13]._countAndFlagsBits;
    v181 = v0[9]._countAndFlagsBits;
    v182 = v0[10]._object;
    v180 = (void (**)(uint64_t, uint64_t))v0[7]._object;
    v224[0] = v71;
    swift_bridgeObjectRetain(v71);
    sub_100023514(v4);
    v73 = v224[0];
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v73);
    v75 = sub_10003554C(v74, v71, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_10000821C);
    swift_bridgeObjectRelease(v71);
    v176 = sub_10003554C(v73, v71, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1000079E0);
    v0[22]._object = (void *)v176;
    v16 = (_QWORD *)swift_bridgeObjectRelease(v71);
    v76 = 0;
    v77 = *(_QWORD *)(v75 + 56);
    v178 = v75 + 56;
    v78 = -1;
    loga = (os_log_t)v75;
    v79 = -1 << *(_BYTE *)(v75 + 32);
    if (-v79 < 64)
      v78 = ~(-1 << -(char)v79);
    v80 = v78 & v77;
    v179 = (unint64_t)(63 - v79) >> 6;
    v177 = 136315138;
    v218 = (uint64_t)object;
    v189 = v72;
    if ((v78 & v77) == 0)
      goto LABEL_36;
LABEL_35:
    v196 = (v80 - 1) & v80;
    v200 = v76;
    for (i = __clz(__rbit64(v80)) | (v76 << 6); ; i = __clz(__rbit64(v82)) + (v83 << 6))
    {
      v84 = v0[15]._countAndFlagsBits;
      v85 = v0[15]._object;
      v86 = v0[12]._object;
      (*(void (**)(void *, char *, void *))(v72 + 16))(v85, (char *)loga[6].isa + *(_QWORD *)(v72 + 72) * i, v86);
      (*(void (**)(uint64_t, void *, void *))(v72 + 32))(v84, v85, v86);
      if (qword_10025FAC0 != -1)
        swift_once(&qword_10025FAC0, sub_10014D33C);
      v87 = v222[18]._countAndFlagsBits;
      v88 = v222[17]._countAndFlagsBits;
      v89 = v222[12]._countAndFlagsBits;
      v207 = v222[11]._object;
      v212 = v222[10]._countAndFlagsBits;
      v90 = v222[9]._object;
      v91 = v222[8]._object;
      v92 = v222[8]._countAndFlagsBits;
      v93 = v222[7]._countAndFlagsBits;
      sub_100037A9C(v93, (uint64_t)qword_10027B168);
      v94 = sub_10001013C(&qword_100260DC8, &qword_100260DB8, (uint64_t)&protocol conformance descriptor for Expression<A>);
      v95 = ExpressionType<>.lowercaseString.getter(v93, v94);
      Device.identifier.getter(v95);
      v97 = v96;
      v98 = String.lowercased()();
      swift_bridgeObjectRelease(v97);
      v222[1] = v98;
      == infix<A>(_:_:)(v92, v186, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      swift_bridgeObjectRelease(v98._object);
      v180[1](v92, v93);
      QueryType.filter(_:)(v90, v88, &protocol witness table for Table);
      (*(void (**)(void *, void *))(v181 + 8))(v90, v91);
      QueryType.delete()(v88, &protocol witness table for Table);
      v99 = (void (*)(uint64_t, uint64_t))v184[1];
      v0 = v222;
      v99(v87, v88);
      v100 = (uint64_t (*)(void *, uint64_t, uint64_t))v182[2];
      v101 = v100(v207, v89, v212);
      v102 = Logger.logObject.getter(v101);
      v103 = static os_log_type_t.default.getter();
      v104 = os_log_type_enabled(v102, v103);
      v105 = v222[11]._object;
      if (v104)
      {
        v106 = v222[11]._countAndFlagsBits;
        v107 = v222[10]._countAndFlagsBits;
        v108 = swift_slowAlloc(12, -1);
        v109 = swift_slowAlloc(32, -1);
        v224[0] = v109;
        *(_DWORD *)v108 = 136315138;
        v100((void *)v106, (uint64_t)v105, v107);
        v110 = String.init<A>(describing:)(v106, v107);
        v112 = v111;
        *(_QWORD *)(v108 + 4) = sub_10002BA84(v110, v111, v224);
        swift_bridgeObjectRelease(v112);
        v113 = (void (*)(void *, uint64_t))v182[1];
        v0 = v222;
        v113(v105, v107);
        _os_log_impl((void *)&_mh_execute_header, v102, v103, "LocalStorage delete a device record: %s", (uint8_t *)v108, 0xCu);
        swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v109, -1, -1);
        swift_slowDealloc(v108, -1, -1);
      }
      else
      {
        v113 = (void (*)(void *, uint64_t))v182[1];
        v113(v222[11]._object, v222[10]._countAndFlagsBits);
      }

      Connection.run(_:)(v0[12]._countAndFlagsBits);
      if (v218)
      {
        v116 = v0[21]._countAndFlagsBits;
        v117 = v0[19]._object;
        v213 = v0[17]._countAndFlagsBits;
        v219 = v0[18]._object;
        v118 = v0[15]._countAndFlagsBits;
        v119 = v0[12]._countAndFlagsBits;
        v120 = v0[12]._object;
        v121 = v0[10]._countAndFlagsBits;
        swift_release(v176);
        swift_release(v116);
        swift_release(v117);
        v113((void *)v119, v121);
        (*(void (**)(uint64_t, void *))(v189 + 8))(v118, v120);
        swift_release(loga);
        v99((uint64_t)v219, v213);
        v122 = v0[18]._countAndFlagsBits;
        v124 = v0[16]._countAndFlagsBits;
        v123 = v0[16]._object;
        v126 = v0[15]._countAndFlagsBits;
        v125 = v0[15]._object;
        v128 = v0[14]._countAndFlagsBits;
        v127 = v0[14]._object;
        v129 = v0[13]._object;
        v197 = v0[12]._countAndFlagsBits;
        v201 = v0[11]._object;
        v204 = v0[11]._countAndFlagsBits;
        v208 = v0[9]._object;
        v214 = v0[8]._countAndFlagsBits;
        v220 = v0[6]._object;
        swift_task_dealloc(v0[18]._object);
        swift_task_dealloc(v122);
        swift_task_dealloc(v123);
        swift_task_dealloc(v124);
        swift_task_dealloc(v125);
        swift_task_dealloc(v126);
        swift_task_dealloc(v127);
        swift_task_dealloc(v128);
        swift_task_dealloc(v129);
        swift_task_dealloc(v197);
        swift_task_dealloc(v201);
        swift_task_dealloc(v204);
        swift_task_dealloc(v208);
        swift_task_dealloc(v214);
        swift_task_dealloc(v220);
        v130 = (uint64_t (*)(void))v0->_object;
        return v130();
      }
      v114 = v0[15]._countAndFlagsBits;
      v115 = v0[12]._object;
      v113((void *)v0[12]._countAndFlagsBits, v0[10]._countAndFlagsBits);
      v72 = v189;
      v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, void *))(v189 + 8))(v114, v115);
      v218 = 0;
      v80 = v196;
      v76 = v200;
      if (v196)
        goto LABEL_35;
LABEL_36:
      v22 = v76 + 1;
      if (__OFADD__(v76, 1))
        goto LABEL_85;
      if ((uint64_t)v22 >= v179)
        break;
      v82 = *(_QWORD *)(v178 + 8 * v22);
      v83 = v76 + 1;
      if (!v82)
      {
        v83 = v76 + 2;
        if (v76 + 2 >= v179)
          break;
        v82 = *(_QWORD *)(v178 + 8 * v83);
        if (!v82)
        {
          v83 = v76 + 3;
          if (v76 + 3 >= v179)
            break;
          v82 = *(_QWORD *)(v178 + 8 * v83);
          if (!v82)
          {
            v22 = v76 + 4;
            if (v76 + 4 >= v179)
              break;
            v82 = *(_QWORD *)(v178 + 8 * v22);
            if (!v82)
            {
              while (1)
              {
                v83 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_86;
                if (v83 >= v179)
                  goto LABEL_60;
                v82 = *(_QWORD *)(v178 + 8 * v83);
                ++v22;
                if (v82)
                  goto LABEL_49;
              }
            }
            v83 = v76 + 4;
          }
        }
      }
LABEL_49:
      v196 = (v82 - 1) & v82;
      v200 = v83;
    }
LABEL_60:
    swift_release(loga);
    v132 = *(_BYTE *)(v176 + 32);
    LOBYTE(v0[25]._object) = v132;
    v133 = -1 << v132;
    v134 = *(_QWORD *)(v176 + 56);
    if (-v133 < 64)
      v135 = ~(-1 << -(char)v133);
    else
      v135 = -1;
    v0[23]._countAndFlagsBits = v218;
    v136 = v135 & v134;
    if (v136)
    {
      v137 = 0;
      v138 = __clz(__rbit64(v136));
      v139 = (v136 - 1) & v136;
      v16 = v0[22]._object;
      goto LABEL_65;
    }
    v22 = 63 - v133;
    v16 = v0[22]._object;
    if (v22 > 0x7F)
    {
      v161 = v16[8];
      if (v161)
      {
        v137 = 1;
        goto LABEL_72;
      }
      if (v22 >= 0xC0)
      {
        v161 = v16[9];
        if (v161)
        {
          v137 = 2;
          goto LABEL_72;
        }
        if (v22 >= 0x100)
        {
          v161 = v16[10];
          if (!v161)
            goto LABEL_87;
          v137 = 3;
          goto LABEL_72;
        }
      }
    }
LABEL_96:
    v165 = v0[21]._countAndFlagsBits;
    v166 = v0[19]._object;
    v168 = v0[18]._countAndFlagsBits;
    v167 = v0[18]._object;
    v169 = v0[17]._countAndFlagsBits;
    v170 = (void (**)(void *, uint64_t))v0[17]._object;
    v172 = v0[16]._countAndFlagsBits;
    v171 = v0[16]._object;
    v173 = v0[15]._object;
    v187 = v0[15]._countAndFlagsBits;
    v190 = v0[14]._object;
    v191 = v0[14]._countAndFlagsBits;
    logb = (os_log_t)v0[13]._object;
    v198 = v0[12]._countAndFlagsBits;
    v202 = v0[11]._object;
    v205 = v0[11]._countAndFlagsBits;
    v209 = v0[9]._object;
    v215 = v0[8]._countAndFlagsBits;
    v221 = v0[6]._object;
    swift_release(v16);
    swift_release(v165);
    swift_release(v166);
    v170[1](v167, v169);
    swift_task_dealloc(v167);
    swift_task_dealloc(v168);
    swift_task_dealloc(v171);
    swift_task_dealloc(v172);
    swift_task_dealloc(v173);
    swift_task_dealloc(v187);
    swift_task_dealloc(v190);
    swift_task_dealloc(v191);
    swift_task_dealloc(logb);
    swift_task_dealloc(v198);
    swift_task_dealloc(v202);
    swift_task_dealloc(v205);
    swift_task_dealloc(v209);
    swift_task_dealloc(v215);
    swift_task_dealloc(v221);
    v130 = (uint64_t (*)(void))v0->_object;
    return v130();
  }
  v0 = (Swift::String *)v0[13]._countAndFlagsBits;
  v224[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000312EC(0, v15, 0);
  v16 = (_QWORD *)sub_100035A18(v14);
  v17 = (int64_t)v16;
  v19 = v18;
  v21 = v20 & 1;
  v22 = v14 + 56;
  v210 = v14;
  v216 = v14 + 56;
  while ((v17 & 0x8000000000000000) == 0)
  {
    v22 = 1 << *(_BYTE *)(v14 + 32);
    if (v17 >= (uint64_t)v22)
      break;
    v22 = *(_QWORD *)(v216 + (((unint64_t)v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17;
    if ((v22 & 1) == 0)
      goto LABEL_80;
    v22 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v22 != v19)
      goto LABEL_81;
    v23 = v222[16]._countAndFlagsBits;
    v24 = v222[16]._object;
    v25 = v222[12]._object;
    ((void (*)(void *, int64_t, void *))v0[1]._countAndFlagsBits)(v24, *(_QWORD *)(v14 + 48) + (int64_t)v0[4]._object * v17, v25);
    v26 = ((uint64_t (*)(uint64_t, void *, void *))v0[2]._countAndFlagsBits)(v23, v24, v25);
    v27 = Device.identifier.getter(v26);
    v29 = v28;
    ((void (*)(uint64_t, void *))v0->_object)(v23, v25);
    v30 = (_QWORD *)v224[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v224[0]) & 1) == 0)
    {
      sub_1000312EC(0, *(_QWORD *)(v224[0] + 16) + 1, 1);
      v30 = (_QWORD *)v224[0];
    }
    v32 = v30[2];
    v31 = v30[3];
    if (v32 >= v31 >> 1)
    {
      sub_1000312EC(v31 > 1, v32 + 1, 1);
      v30 = (_QWORD *)v224[0];
    }
    v30[2] = v32 + 1;
    v33 = &v30[2 * v32];
    v33[4] = v27;
    v33[5] = v29;
    v14 = v210;
    v16 = (_QWORD *)sub_100035714(v17, v19, v21 & 1, v210);
    v17 = (int64_t)v16;
    v19 = v34;
    v21 = v35 & 1;
    if (!--v15)
    {
      sub_10016CEA0((uint64_t)v16, v34, v35 & 1);
      swift_release(v210);
      v0 = v222;
      v4 = v203;
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  if (v22 < 0x140)
    goto LABEL_96;
  v161 = v16[11];
  if (!v161)
  {
    v162 = 0;
    v163 = v22 >> 6;
    if (v163 <= 5)
      v163 = 5;
    v164 = v163 - 5;
    while (v164 != v162)
    {
      v161 = v16[v162++ + 12];
      if (v161)
      {
        v137 = v162 + 4;
        goto LABEL_72;
      }
    }
    goto LABEL_96;
  }
  v137 = 4;
LABEL_72:
  v139 = (v161 - 1) & v161;
  v138 = __clz(__rbit64(v161)) + (v137 << 6);
LABEL_65:
  v0[23]._object = (void *)v137;
  v0[24]._countAndFlagsBits = v139;
  v140 = v0[14]._countAndFlagsBits;
  v141 = v0[14]._object;
  v143 = v0[13]._countAndFlagsBits;
  v142 = v0[13]._object;
  v144 = v0[12]._object;
  v145 = *(void (**)(void *, unint64_t, void *))(v143 + 16);
  v145(v141, v16[6] + *(_QWORD *)(v143 + 72) * v138, v144);
  (*(void (**)(uint64_t, void *, void *))(v143 + 32))(v140, v141, v144);
  v146 = ((uint64_t (*)(void *, uint64_t, void *))v145)(v142, v140, v144);
  v147 = Logger.logObject.getter(v146);
  v148 = static os_log_type_t.default.getter();
  v149 = os_log_type_enabled(v147, v148);
  v151 = v0[13]._countAndFlagsBits;
  v150 = v0[13]._object;
  v152 = v0[12]._object;
  if (v149)
  {
    v153 = (uint8_t *)swift_slowAlloc(12, -1);
    v154 = swift_slowAlloc(32, -1);
    v224[0] = v154;
    *(_DWORD *)v153 = v177;
    v155 = sub_100004EA8(&qword_100260570, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    v156 = dispatch thunk of CustomStringConvertible.description.getter(v152, v155);
    v158 = v157;
    *p_countAndFlagsBits = sub_10002BA84(v156, v157, v224);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(p_countAndFlagsBits, p_object, v153 + 4, v153 + 12);
    v0 = v222;
    swift_bridgeObjectRelease(v158);
    v159 = *(void (**)(void *, void *))(v151 + 8);
    v159(v150, v152);
    _os_log_impl((void *)&_mh_execute_header, v147, v148, "LocalStorage added a device: %s", v153, 0xCu);
    swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v154, -1, -1);
    swift_slowDealloc(v153, -1, -1);
  }
  else
  {
    v159 = *(void (**)(void *, void *))(v151 + 8);
    v159(v0[13]._object, v0[12]._object);
  }

  v0[24]._object = v159;
  v160 = (Swift::String **)swift_task_alloc(dword_100267AA4);
  v0[25]._countAndFlagsBits = (uint64_t)v160;
  *v160 = v0;
  v160[1] = (Swift::String *)sub_1001E396C;
  return sub_1001E4E40((uint64_t)v0[6]._object, v0[14]._countAndFlagsBits);
}

uint64_t sub_1001E396C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 400));
  return swift_task_switch(sub_1001E39C0, 0, 0);
}

uint64_t sub_1001E39C0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, unint64_t, uint64_t);
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  _QWORD *v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v1 = *(_QWORD *)(v0 + 368);
  Connection.run(_:)(*(_QWORD *)(v0 + 104));
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 360);
    v4 = *(_QWORD *)(v0 + 312);
    v5 = *(_QWORD *)(v0 + 280);
    v73 = *(_QWORD *)(v0 + 272);
    v76 = *(_QWORD *)(v0 + 296);
    v6 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 200);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 88);
    swift_release(*(_QWORD *)(v0 + 336));
    swift_release(v4);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    v2(v6, v7);
    swift_release(v3);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v76, v73);
    v11 = *(_QWORD *)(v0 + 288);
    v13 = *(_QWORD *)(v0 + 256);
    v12 = *(_QWORD *)(v0 + 264);
    v15 = *(_QWORD *)(v0 + 240);
    v14 = *(_QWORD *)(v0 + 248);
    v17 = *(_QWORD *)(v0 + 224);
    v16 = *(_QWORD *)(v0 + 232);
    v18 = *(_QWORD *)(v0 + 216);
    v19 = *(_QWORD *)(v0 + 192);
    v67 = *(_QWORD *)(v0 + 184);
    v69 = *(_QWORD *)(v0 + 176);
    v71 = *(_QWORD *)(v0 + 152);
    v74 = *(_QWORD *)(v0 + 128);
    v77 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v74);
    swift_task_dealloc(v77);
    v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  v22 = *(_QWORD *)(v0 + 224);
  v23 = *(_QWORD *)(v0 + 200);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
  result = ((uint64_t (*)(uint64_t, uint64_t))v2)(v22, v23);
  v24 = *(_QWORD *)(v0 + 376);
  v25 = *(_QWORD *)(v0 + 384);
  *(_QWORD *)(v0 + 368) = 0;
  if (!v25)
  {
    v49 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
    }
    else
    {
      v50 = (unint64_t)((1 << *(_BYTE *)(v0 + 408)) + 63) >> 6;
      result = *(_QWORD *)(v0 + 360);
      if (v49 >= v50)
        goto LABEL_24;
      v51 = result + 56;
      v52 = *(_QWORD *)(result + 56 + 8 * v49);
      ++v24;
      if (v52)
      {
LABEL_13:
        v26 = (v52 - 1) & v52;
        v27 = __clz(__rbit64(v52)) + (v24 << 6);
        goto LABEL_6;
      }
      v24 = v49 + 1;
      if (v49 + 1 >= v50)
        goto LABEL_24;
      v52 = *(_QWORD *)(v51 + 8 * v24);
      if (v52)
        goto LABEL_13;
      v24 = v49 + 2;
      if (v49 + 2 >= v50)
        goto LABEL_24;
      v52 = *(_QWORD *)(v51 + 8 * v24);
      if (v52)
        goto LABEL_13;
      v53 = v49 + 3;
      if (v53 >= v50)
      {
LABEL_24:
        v54 = *(_QWORD *)(v0 + 336);
        v55 = *(_QWORD *)(v0 + 312);
        v56 = *(_QWORD *)(v0 + 288);
        v57 = *(_QWORD *)(v0 + 296);
        v58 = *(_QWORD *)(v0 + 272);
        v59 = *(_QWORD *)(v0 + 280);
        v61 = *(_QWORD *)(v0 + 256);
        v60 = *(_QWORD *)(v0 + 264);
        v62 = *(_QWORD *)(v0 + 248);
        v63 = *(_QWORD *)(v0 + 240);
        v64 = *(_QWORD *)(v0 + 232);
        v65 = *(_QWORD *)(v0 + 224);
        v66 = *(_QWORD *)(v0 + 216);
        v68 = *(_QWORD *)(v0 + 192);
        v70 = *(_QWORD *)(v0 + 184);
        v72 = *(_QWORD *)(v0 + 176);
        v75 = *(_QWORD *)(v0 + 152);
        v78 = *(_QWORD *)(v0 + 128);
        v79 = *(_QWORD *)(v0 + 104);
        swift_release(result);
        swift_release(v54);
        swift_release(v55);
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
        swift_task_dealloc(v57);
        swift_task_dealloc(v56);
        swift_task_dealloc(v60);
        swift_task_dealloc(v61);
        swift_task_dealloc(v62);
        swift_task_dealloc(v63);
        swift_task_dealloc(v64);
        swift_task_dealloc(v65);
        swift_task_dealloc(v66);
        swift_task_dealloc(v68);
        swift_task_dealloc(v70);
        swift_task_dealloc(v72);
        swift_task_dealloc(v75);
        swift_task_dealloc(v78);
        swift_task_dealloc(v79);
        v20 = *(uint64_t (**)(void))(v0 + 8);
        return v20();
      }
      v52 = *(_QWORD *)(v51 + 8 * v53);
      if (v52)
      {
        v24 = v53;
        goto LABEL_13;
      }
      while (1)
      {
        v24 = v53 + 1;
        if (__OFADD__(v53, 1))
          break;
        if (v24 >= v50)
          goto LABEL_24;
        v52 = *(_QWORD *)(v51 + 8 * v24);
        ++v53;
        if (v52)
          goto LABEL_13;
      }
    }
    __break(1u);
    return result;
  }
  v26 = (v25 - 1) & v25;
  v27 = __clz(__rbit64(v25)) | (v24 << 6);
  result = *(_QWORD *)(v0 + 360);
LABEL_6:
  *(_QWORD *)(v0 + 376) = v24;
  *(_QWORD *)(v0 + 384) = v26;
  v29 = *(_QWORD *)(v0 + 224);
  v28 = *(_QWORD *)(v0 + 232);
  v31 = *(_QWORD *)(v0 + 208);
  v30 = *(_QWORD *)(v0 + 216);
  v32 = *(_QWORD *)(v0 + 200);
  v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v31 + 16);
  v33(v28, *(_QWORD *)(result + 48) + *(_QWORD *)(v31 + 72) * v27, v32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v29, v28, v32);
  v34 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v33)(v30, v29, v32);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  v37 = os_log_type_enabled(v35, v36);
  v39 = *(_QWORD *)(v0 + 208);
  v38 = *(_QWORD *)(v0 + 216);
  v40 = *(_QWORD *)(v0 + 200);
  if (v37)
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v80 = v42;
    *(_DWORD *)v41 = 136315138;
    v43 = sub_100004EA8(&qword_100260570, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v40, v43);
    v46 = v45;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v44, v45, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease(v46);
    v47 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v47(v38, v40);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "LocalStorage added a device: %s", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    v47 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v47(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
  }

  *(_QWORD *)(v0 + 392) = v47;
  v48 = (_QWORD *)swift_task_alloc(dword_100267AA4);
  *(_QWORD *)(v0 + 400) = v48;
  *v48 = v0;
  v48[1] = sub_1001E396C;
  return sub_1001E4E40(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 224));
}

uint64_t sub_1001E3F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 280);
  swift_release(*(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 152);
  v17 = *(_QWORD *)(v0 + 128);
  v18 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E4030()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_1001E4084, 0, 0);
}

uint64_t sub_1001E4084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v5 = *(_QWORD *)(v0 + 80);
  if (v4 == 1)
  {
    swift_release(*(_QWORD *)(v0 + 80));
    sub_1000087A0(v3, &qword_100267A10);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v3, v1);
    Connection.run(_:)(v6);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v1);
    swift_release(v5);
  }
  v7 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E4180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B3F8);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027B3F8);
  if (qword_10025FBD8 != -1)
    swift_once(&qword_10025FBD8, sub_1001E7810);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027B410);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001E4210()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LocalStorageStore()
{
  return objc_opt_self(_TtC13findmylocated17LocalStorageStore);
}

void sub_1001E425C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[2];

  if (qword_10025F9B0 != -1)
    swift_once(&qword_10025F9B0, sub_10014C098);
  v0 = sub_100037A5C(&qword_100260D68);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027AE38);
  Row.subscript.getter(v2, v1, &type metadata for Data, &protocol witness table for Data);
  __asm { BR              X10 }
}

uint64_t sub_1001E455C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[5] = a1;
  v3[6] = a2;
  v4 = type metadata accessor for OnConflict(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Table(0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001E45E4, v2, 0);
}

uint64_t sub_1001E45E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  if (qword_10025F8E8 != -1)
    swift_once(&qword_10025F8E8, sub_1000CFD84);
  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = sub_100037A9C(v3, (uint64_t)qword_10027ABD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v7, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v4, enum case for OnConflict.replace(_:), v5);
  v8 = sub_100037A5C(&qword_100267178);
  v9 = *(_QWORD *)(type metadata accessor for Setter(0) - 8);
  v10 = swift_allocObject(v8, ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ 5 * *(_QWORD *)(v9 + 72), *(unsigned __int8 *)(v9 + 80) | 7);
  *(_OWORD *)(v10 + 16) = xmmword_1001FC070;
  v37 = v10;
  if (qword_10025F998 != -1)
    swift_once(&qword_10025F998, sub_10014BF08);
  v11 = *(_QWORD *)(v0 + 48);
  v12 = sub_100037A5C(&qword_100260D40);
  v13 = sub_100037A9C(v12, (uint64_t)qword_10027ADF0);
  v14 = type metadata accessor for UUID(0);
  <- infix<A>(_:_:)(v13, v11, v14, &protocol witness table for UUID);
  if (qword_10025F9A0 != -1)
    swift_once(&qword_10025F9A0, sub_10014BF84);
  v15 = sub_100037A5C(&qword_1002628F0);
  v16 = sub_100037A9C(v15, (uint64_t)qword_10027AE08);
  *(_QWORD *)(v0 + 32) = 1;
  <- infix<A>(_:_:)(v16, v0 + 32, &type metadata for Int, &protocol witness table for Int);
  if (qword_10025F9B8 != -1)
    swift_once(&qword_10025F9B8, sub_10014C124);
  v17 = *(_QWORD *)(v0 + 48);
  v18 = sub_100037A5C(&qword_100260D78);
  v19 = sub_100037A9C(v18, (uint64_t)qword_10027AE50);
  v20 = (int *)type metadata accessor for OwnerSharedSecretsRecord(0);
  v21 = v17 + v20[7];
  v22 = type metadata accessor for Date(0);
  <- infix<A>(_:_:)(v19, v21, v22, &protocol witness table for Date);
  if (qword_10025F9A8 != -1)
    swift_once(&qword_10025F9A8, sub_10014C00C);
  v23 = *(_QWORD *)(v0 + 48);
  v24 = sub_100037A5C(&qword_100260D50);
  v25 = sub_100037A9C(v24, (uint64_t)qword_10027AE20);
  *(_BYTE *)(v0 + 104) = *(_BYTE *)(v23 + v20[5]);
  v26 = sub_100062668();
  <- infix<A>(_:_:)(v25, v0 + 104, &type metadata for UInt8, v26);
  if (qword_10025F9B0 != -1)
    swift_once(&qword_10025F9B0, sub_10014C098);
  v27 = *(_QWORD *)(v0 + 96);
  v36 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 72);
  v29 = *(_QWORD *)(v0 + 80);
  v31 = *(_QWORD *)(v0 + 56);
  v30 = *(_QWORD *)(v0 + 64);
  v32 = *(_QWORD *)(v0 + 48);
  v33 = sub_100037A5C(&qword_100260D68);
  v34 = sub_100037A9C(v33, (uint64_t)qword_10027AE38);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v32 + v20[6]);
  <- infix<A>(_:_:)(v34, v0 + 16, &type metadata for Data, &protocol witness table for Data);
  QueryType.insert(or:_:)(v28, v37, v29, &protocol witness table for Table);
  swift_bridgeObjectRelease(v37);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v31);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v27, v29);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E49B0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1001E49C8, v0, 0);
}

uint64_t sub_1001E49C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 112);
  *(_QWORD *)(v0 + 24) = v1;
  return swift_task_switch(sub_1001E49E4, v1, 0);
}

uint64_t sub_1001E49E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = type metadata accessor for LocalStorageDatabase(0);
  v0[4] = v2;
  v3 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  v0[5] = v3;
  v0[6] = Database.readConnection.getter(v2, v3);
  return swift_task_switch(sub_1001E4A64, v1, 0);
}

uint64_t sub_1001E4A64()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(v0 + 48))
    return swift_task_switch(sub_1001E4B2C, *(_QWORD *)(v0 + 24), 0);
  v2 = type metadata accessor for DatabaseError(0);
  v3 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
  swift_allocError(v2, v3, 0, 0);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DatabaseError.notConnected(_:), v2);
  swift_willThrow(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E4B2C()
{
  _QWORD *v0;

  v0[7] = Database.columnNames(connection:tableName:)(v0[6], 0x73646E65697266, 0xE700000000000000, v0[4], v0[5]);
  v0[8] = 0;
  return swift_task_switch(sub_1001E4BA0, v0[2], 0);
}

uint64_t sub_1001E4BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = sub_10016B5B4(v1);
  swift_bridgeObjectRelease(v1);
  LOBYTE(v1) = sub_10001A808(0xD000000000000018, 0x80000001001FF020, v2);
  swift_bridgeObjectRelease(v2);
  if ((v1 & 1) != 0)
  {
    if (qword_10025FBD0 != -1)
      swift_once(&qword_10025FBD0, sub_1001E4180);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100037A9C(v3, (uint64_t)qword_10027B3F8);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v0 + 48);
    if (v7)
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "LocalStorage.db is good", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
      swift_release(v8);

    }
    else
    {

      swift_release(v8);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_10025FBD0 != -1)
      swift_once(&qword_10025FBD0, sub_1001E4180);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100037A9C(v10, (uint64_t)qword_10027B3F8);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "LocalStorage.db is missing handleSiblingIdentifiers -- needs to be reset", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }
    v15 = *(_QWORD *)(v0 + 24);

    return swift_task_switch(sub_1001E4DAC, v15, 0);
  }
}

uint64_t sub_1001E4DAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  Database.reset()();
  *(_QWORD *)(v0 + 72) = v1;
  if (v1)
    v2 = sub_1001E4E0C;
  else
    v2 = sub_1000564A0;
  return swift_task_switch(v2, *(_QWORD *)(v0 + 16), 0);
}

uint64_t sub_1001E4E0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E4E40(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[8] = a1;
  v2[9] = a2;
  v3 = type metadata accessor for OnConflict(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Table(0);
  v2[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[14] = v6;
  v2[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001E4EC8, 0, 0);
}

uint64_t sub_1001E4EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  if (qword_10025F8F8 != -1)
    swift_once(&qword_10025F8F8, sub_1000CFDC8);
  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = sub_100037A9C(v3, (uint64_t)qword_10027AC08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v7, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v4, enum case for OnConflict.replace(_:), v5);
  v8 = sub_100037A5C(&qword_100267178);
  v9 = *(_QWORD *)(type metadata accessor for Setter(0) - 8);
  v10 = swift_allocObject(v8, ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))- *(_QWORD *)(v9 + 72)+ 8 * *(_QWORD *)(v9 + 72), *(unsigned __int8 *)(v9 + 80) | 7);
  *(_OWORD *)(v10 + 16) = xmmword_1001FC080;
  v36 = v10;
  if (qword_10025FAC0 != -1)
    swift_once(&qword_10025FAC0, sub_10014D33C);
  v11 = sub_100037A5C(&qword_100260DB8);
  v12 = sub_100037A9C(v11, (uint64_t)qword_10027B168);
  v13 = Device.identifier.getter();
  v15 = v14;
  *(_QWORD *)(v0 + 16) = v13;
  *(_QWORD *)(v0 + 24) = v14;
  <- infix<A>(_:_:)(v12, v0 + 16, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v15);
  if (qword_10025FAC8 != -1)
    swift_once(&qword_10025FAC8, sub_10014D3C8);
  v16 = sub_100037A9C(v11, (uint64_t)qword_10027B180);
  v17 = Device.deviceName.getter();
  v19 = v18;
  *(_QWORD *)(v0 + 32) = v17;
  *(_QWORD *)(v0 + 40) = v18;
  <- infix<A>(_:_:)(v16, v0 + 32, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v19);
  if (qword_10025FAD0 != -1)
    swift_once(&qword_10025FAD0, sub_10014D454);
  v20 = sub_100037A9C(v11, (uint64_t)qword_10027B198);
  v21 = Device.idsDeviceId.getter();
  v23 = v22;
  *(_QWORD *)(v0 + 48) = v21;
  *(_QWORD *)(v0 + 56) = v22;
  <- infix<A>(_:_:)(v20, v0 + 48, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v23);
  if (qword_10025FAD8 != -1)
    swift_once(&qword_10025FAD8, sub_10014D4E4);
  v24 = sub_100037A5C(&qword_100260D48);
  v25 = sub_100037A9C(v24, (uint64_t)qword_10027B1B0);
  *(_BYTE *)(v0 + 128) = Device.isActive.getter(v25) & 1;
  <- infix<A>(_:_:)(v25, v0 + 128, &type metadata for Bool, &protocol witness table for Bool);
  if (qword_10025FAE0 != -1)
    swift_once(&qword_10025FAE0, sub_10014D578);
  v26 = sub_100037A9C(v24, (uint64_t)qword_10027B1C8);
  *(_BYTE *)(v0 + 129) = Device.isThisDevice.getter(v26) & 1;
  <- infix<A>(_:_:)(v26, v0 + 129, &type metadata for Bool, &protocol witness table for Bool);
  if (qword_10025FAE8 != -1)
    swift_once(&qword_10025FAE8, sub_10014D608);
  v27 = sub_100037A9C(v24, (uint64_t)qword_10027B1E0);
  *(_BYTE *)(v0 + 130) = Device.isCompanion.getter(v27) & 1;
  <- infix<A>(_:_:)(v27, v0 + 130, &type metadata for Bool, &protocol witness table for Bool);
  if (qword_10025FAF0 != -1)
    swift_once(&qword_10025FAF0, sub_10014D694);
  v28 = *(_QWORD *)(v0 + 120);
  v35 = *(_QWORD *)(v0 + 112);
  v29 = *(_QWORD *)(v0 + 96);
  v30 = *(_QWORD *)(v0 + 104);
  v32 = *(_QWORD *)(v0 + 80);
  v31 = *(_QWORD *)(v0 + 88);
  v33 = sub_100037A9C(v24, (uint64_t)qword_10027B1F8);
  *(_BYTE *)(v0 + 131) = Device.isAutoMeCapable.getter() & 1;
  <- infix<A>(_:_:)(v33, v0 + 131, &type metadata for Bool, &protocol witness table for Bool);
  QueryType.insert(or:_:)(v29, v36, v30, &protocol witness table for Table);
  swift_bridgeObjectRelease(v36);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v32);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v28, v30);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E53AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 5312);
  if (qword_10025FBD0 != -1)
    swift_once(&qword_10025FBD0, sub_1001E4180);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B3F8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 5232) = sub_10002BA84(0xD000000000000017, 0x80000001002021F0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5232, v0 + 5240, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 5208) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 5208, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 5224) = sub_10002BA84(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5224, v0 + 5232, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v12 = *(_QWORD *)(v0 + 5240);
  v13 = type metadata accessor for Insert(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = *(_QWORD *)(v0 + 5272);
  swift_task_dealloc(*(_QWORD *)(v0 + 5296));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E5620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3[56] = a1;
  v3[57] = a2;
  v4 = sub_100037A5C(&qword_100262900);
  v3[58] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[59] = v5;
  v3[60] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_100262908);
  v3[61] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[62] = v7;
  v3[63] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_1002628E0);
  v3[64] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[65] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[66] = swift_task_alloc(v10);
  v3[67] = swift_task_alloc(v10);
  v3[68] = swift_task_alloc(v10);
  v3[69] = swift_task_alloc(v10);
  v3[70] = swift_task_alloc(v10);
  v3[71] = swift_task_alloc(v10);
  v3[72] = swift_task_alloc(v10);
  v3[73] = swift_task_alloc(v10);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100263870) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[74] = swift_task_alloc(v11);
  v3[75] = swift_task_alloc(v11);
  v12 = sub_100037A5C(&qword_1002628E8);
  v3[76] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[77] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[78] = swift_task_alloc(v14);
  v3[79] = swift_task_alloc(v14);
  v15 = type metadata accessor for OnConflict(0);
  v3[80] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v3[81] = v16;
  v3[82] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[83] = swift_task_alloc(v17);
  v3[84] = swift_task_alloc(v17);
  v3[85] = swift_task_alloc(v17);
  v3[86] = swift_task_alloc(v17);
  v3[87] = swift_task_alloc(v17);
  v3[88] = swift_task_alloc(v17);
  v3[89] = swift_task_alloc(v17);
  v3[90] = swift_task_alloc(v17);
  v3[91] = swift_task_alloc(v17);
  v3[92] = swift_task_alloc(v17);
  v3[93] = swift_task_alloc(v17);
  v3[94] = swift_task_alloc(v17);
  v3[95] = swift_task_alloc(v17);
  v18 = type metadata accessor for Table(0);
  v3[96] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v3[97] = v19;
  v3[98] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001E58AC, v2, 0);
}

uint64_t sub_1001E58AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  double v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t (*v255)(uint64_t, uint64_t, uint64_t);
  uint64_t v256;
  void (*v257)(uint64_t, uint64_t, uint64_t);
  uint64_t v258;
  void (*v259)(uint64_t, uint64_t);
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  void (*v277)(uint64_t, uint64_t);
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  void (*v281)(uint64_t, uint64_t, uint64_t);
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int *v285;
  uint64_t (*v286)(uint64_t, uint64_t, uint64_t);
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;

  if (qword_10025F8F0 != -1)
    swift_once(&qword_10025F8F0, sub_1000CFDA8);
  v1 = *(_QWORD *)(v0 + 784);
  v2 = *(_QWORD *)(v0 + 776);
  v3 = *(_QWORD *)(v0 + 768);
  v4 = *(_QWORD *)(v0 + 456);
  v5 = sub_100037A9C(v3, (uint64_t)qword_10027ABF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  v6 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = PropertyListEncoder.init()();
  v285 = (int *)type metadata accessor for FriendRecord(0);
  v8 = *(_QWORD *)(v4 + v285[12]);
  *(_QWORD *)(v0 + 400) = v8;
  swift_bridgeObjectRetain(v8);
  v9 = sub_100037A5C(&qword_100266D70);
  v10 = sub_1001E88B8();
  v279 = v9;
  v275 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 400, v9, v10);
  v276 = v11;
  swift_bridgeObjectRelease(v8);
  swift_release(v7);
  v12 = *(_QWORD *)(v0 + 760);
  v13 = *(_QWORD *)(v0 + 456);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v14 = PropertyListEncoder.init()();
  v288 = v13 + v285[36];
  sub_10000E37C(v288, v12, &qword_1002650A0);
  v15 = type metadata accessor for Handle(0);
  v16 = *(_QWORD *)(v15 - 8);
  v286 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v17 = v286(v12, 1, v15);
  v18 = *(_QWORD *)(v0 + 760);
  v283 = v16;
  if (v17 == 1)
  {
    sub_1000087A0(v18, &qword_1002650A0);
    v19 = 0;
  }
  else
  {
    v19 = Handle.pushIdentifiers.getter();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
  }
  v20 = v15;
  *(_QWORD *)(v0 + 408) = v19;
  v21 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 408, v279, v10);
  v23 = v22;
  swift_release(v14);
  v273 = v21;
  v274 = v23;
  v24 = *(_QWORD *)(v0 + 752);
  swift_bridgeObjectRelease(v19);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v25 = PropertyListEncoder.init()();
  sub_10000E37C(v288, v24, &qword_1002650A0);
  v26 = v286(v24, 1, v20);
  v27 = *(_QWORD *)(v0 + 752);
  if ((_DWORD)v26 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 752), &qword_1002650A0);
    v28 = 0;
  }
  else
  {
    v28 = Handle.expiresByGroupId.getter(v26);
    (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v27, v20);
  }
  *(_QWORD *)(v0 + 440) = v28;
  v29 = sub_100037A5C(&qword_100267A58);
  v30 = sub_10002B370(&qword_100267A60, &qword_100267A58, (void (*)(void))sub_1000FA858, (uint64_t)&protocol conformance descriptor for <A> A?);
  v31 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 440, v29, v30);
  v33 = v32;
  swift_release(v25);
  v271 = v31;
  v272 = v33;
  v34 = *(_QWORD *)(v0 + 456);
  swift_bridgeObjectRelease(v28);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v35 = PropertyListEncoder.init()();
  v36 = *(_QWORD *)(v34 + v285[34]);
  *(_QWORD *)(v0 + 432) = v36;
  swift_bridgeObjectRetain(v36);
  v37 = sub_100037A5C(&qword_1002639D0);
  v38 = sub_1001E8934();
  v39 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 432, v37, v38);
  v264 = v40;
  v265 = v39;
  v41 = *(_QWORD *)(v0 + 656);
  v42 = *(_QWORD *)(v0 + 648);
  v43 = *(_QWORD *)(v0 + 640);
  swift_bridgeObjectRelease(v36);
  swift_release(v35);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v42 + 104))(v41, enum case for OnConflict.replace(_:), v43);
  v44 = sub_100037A5C(&qword_100267178);
  v45 = *(_QWORD *)(type metadata accessor for Setter(0) - 8);
  v46 = swift_allocObject(v44, ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ 32 * *(_QWORD *)(v45 + 72), *(unsigned __int8 *)(v45 + 80) | 7);
  *(_OWORD *)(v46 + 16) = xmmword_1001FC090;
  v263 = v46;
  if (qword_10025F9C0 != -1)
    swift_once(&qword_10025F9C0, sub_10014C1AC);
  v280 = sub_100037A5C(&qword_100260DB8);
  v47 = sub_100037A9C(v280, (uint64_t)qword_10027AE68);
  v48 = String.lowercased()();
  *(Swift::String *)(v0 + 80) = v48;
  <- infix<A>(_:_:)(v47, v0 + 80, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v48._object);
  if (qword_10025F9C8 != -1)
    swift_once(&qword_10025F9C8, sub_10014C238);
  v49 = *(_QWORD *)(v0 + 456);
  v50 = sub_100037A9C(*(_QWORD *)(v0 + 512), (uint64_t)qword_10027AE80);
  *(_OWORD *)(v0 + 96) = *(_OWORD *)(v49 + 16);
  <- infix<A>(_:_:)(v50, v0 + 96, &type metadata for String, &protocol witness table for String);
  if (qword_10025F9D0 != -1)
    swift_once(&qword_10025F9D0, sub_10014C2C4);
  v51 = *(_QWORD *)(v0 + 632);
  v52 = *(_QWORD *)(v0 + 616);
  v53 = *(_QWORD *)(v0 + 608);
  v54 = *(_QWORD *)(v0 + 600);
  v55 = *(_QWORD *)(v0 + 456);
  v56 = sub_100037A9C(v53, (uint64_t)qword_10027AE98);
  v257 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16);
  v257(v51, v56, v53);
  sub_10000E37C(v55 + v285[6], v54, &qword_100263870);
  v57 = type metadata accessor for IDSStatus(0);
  v58 = *(_QWORD *)(v57 - 8);
  v255 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  v59 = v255(v54, 1, v57);
  v60 = *(_QWORD *)(v0 + 600);
  v261 = v57;
  v253 = v58;
  if (v59 == 1)
  {
    sub_1000087A0(v60, &qword_100263870);
    v61 = 0;
  }
  else
  {
    v61 = IDSStatus.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v60, v57);
  }
  v62 = v59 == 1;
  v63 = *(_QWORD *)(v0 + 632);
  v64 = *(_QWORD *)(v0 + 616);
  v65 = *(_QWORD *)(v0 + 608);
  *(_QWORD *)(v0 + 384) = v61;
  *(_BYTE *)(v0 + 392) = v62;
  <- infix<A>(_:_:)(v63, v0 + 384, &type metadata for Int, &protocol witness table for Int);
  v259 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
  v259(v63, v65);
  if (qword_10025F9D8 != -1)
    swift_once(&qword_10025F9D8, sub_10014C358);
  v66 = *(_QWORD *)(v0 + 456);
  v67 = sub_100037A9C(*(_QWORD *)(v0 + 512), (uint64_t)qword_10027AEB0);
  *(_OWORD *)(v0 + 128) = *(_OWORD *)(v66 + v285[7]);
  <- infix<A>(_:_:)(v67, v0 + 128, &type metadata for String, &protocol witness table for String);
  if (qword_10025F9E0 != -1)
    swift_once(&qword_10025F9E0, sub_10014C3E4);
  v68 = *(_QWORD *)(v0 + 456);
  v69 = sub_100037A5C(&qword_1002628F8);
  v70 = sub_100037A9C(v69, (uint64_t)qword_10027AEC8);
  *(_QWORD *)(v0 + 424) = *(_QWORD *)(v68 + v285[8]);
  <- infix<A>(_:_:)(v70, v0 + 424, &type metadata for Double, &protocol witness table for Double);
  if (qword_10025F9E8 != -1)
    swift_once(&qword_10025F9E8, sub_10014C470);
  v71 = *(_QWORD *)(v0 + 456);
  v72 = sub_100037A9C(*(_QWORD *)(v0 + 512), (uint64_t)qword_10027AEE0);
  *(_OWORD *)(v0 + 160) = *(_OWORD *)(v71 + v285[9]);
  <- infix<A>(_:_:)(v72, v0 + 160, &type metadata for String, &protocol witness table for String);
  if (qword_10025F9F0 != -1)
    swift_once(&qword_10025F9F0, sub_10014C4FC);
  v73 = *(_QWORD *)(v0 + 456);
  v74 = sub_100037A9C(*(_QWORD *)(v0 + 512), (uint64_t)qword_10027AEF8);
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v73 + v285[10]);
  <- infix<A>(_:_:)(v74, v0 + 176, &type metadata for String, &protocol witness table for String);
  if (qword_10025F9F8 != -1)
    swift_once(&qword_10025F9F8, sub_10014C588);
  v75 = *(_QWORD *)(v0 + 456);
  v76 = sub_100037A9C(*(_QWORD *)(v0 + 464), (uint64_t)qword_10027AF10);
  *(_BYTE *)(v0 + 364) = *(_BYTE *)(v75 + v285[11]);
  <- infix<A>(_:_:)(v76, v0 + 364, &type metadata for Bool, &protocol witness table for Bool);
  if (qword_10025FA00 != -1)
    swift_once(&qword_10025FA00, sub_10014C61C);
  v266 = sub_100037A5C(&qword_100260D60);
  v77 = sub_100037A9C(v266, (uint64_t)qword_10027AF28);
  *(_QWORD *)(v0 + 208) = v275;
  *(_QWORD *)(v0 + 216) = v276;
  <- infix<A>(_:_:)(v77, v0 + 208, &type metadata for Data, &protocol witness table for Data);
  if (qword_10025FA08 != -1)
    swift_once(&qword_10025FA08, sub_10014C6A8);
  v78 = *(_QWORD *)(v0 + 456);
  v79 = sub_100037A9C(*(_QWORD *)(v0 + 512), (uint64_t)qword_10027AF40);
  *(_OWORD *)(v0 + 224) = *(_OWORD *)(v78 + v285[13]);
  <- infix<A>(_:_:)(v79, v0 + 224, &type metadata for String, &protocol witness table for String);
  if (qword_10025FA10 != -1)
    swift_once(&qword_10025FA10, sub_10014C734);
  v80 = *(_QWORD *)(v0 + 456);
  v81 = sub_100037A9C(*(_QWORD *)(v0 + 512), (uint64_t)qword_10027AF58);
  *(_OWORD *)(v0 + 240) = *(_OWORD *)(v80 + v285[14]);
  <- infix<A>(_:_:)(v81, v0 + 240, &type metadata for String, &protocol witness table for String);
  if (qword_10025FA20 != -1)
    swift_once(&qword_10025FA20, sub_10014C84C);
  v82 = *(_QWORD *)(v0 + 456);
  v83 = sub_100037A9C(*(_QWORD *)(v0 + 512), (uint64_t)qword_10027AF88);
  *(_OWORD *)(v0 + 256) = *(_OWORD *)(v82 + v285[16]);
  <- infix<A>(_:_:)(v83, v0 + 256, &type metadata for String, &protocol witness table for String);
  if (qword_10025FA18 != -1)
    swift_once(&qword_10025FA18, sub_10014C7C0);
  v84 = *(_QWORD *)(v0 + 456);
  v85 = sub_100037A9C(v280, (uint64_t)qword_10027AF70);
  v86 = (uint64_t *)(v84 + v285[15]);
  v88 = *v86;
  v87 = v86[1];
  *(_QWORD *)(v0 + 272) = v88;
  *(_QWORD *)(v0 + 280) = v87;
  <- infix<A>(_:_:)(v85, v0 + 272, &type metadata for String, &protocol witness table for String);
  if (qword_10025FA28 != -1)
    swift_once(&qword_10025FA28, sub_10014C8D8);
  v89 = *(_QWORD *)(v0 + 744);
  v90 = *(_QWORD *)(v0 + 584);
  v91 = *(_QWORD *)(v0 + 520);
  v92 = *(_QWORD *)(v0 + 512);
  v93 = sub_100037A9C(v92, (uint64_t)qword_10027AFA0);
  v281 = *(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16);
  v281(v90, v93, v92);
  sub_10000E37C(v288, v89, &qword_1002650A0);
  v94 = v286(v89, 1, v20);
  v95 = *(_QWORD *)(v0 + 744);
  if ((_DWORD)v94 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 744), &qword_1002650A0);
    v96 = 0;
    v97 = 0;
  }
  else
  {
    v96 = Handle.identifier.getter(v94);
    v97 = v98;
    (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v95, v20);
  }
  v99 = *(_QWORD *)(v0 + 584);
  v100 = *(_QWORD *)(v0 + 520);
  v101 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 288) = v96;
  *(_QWORD *)(v0 + 296) = v97;
  <- infix<A>(_:_:)(v99, v0 + 288, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v97);
  v277 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
  v277(v99, v101);
  if (qword_10025FA30 != -1)
    swift_once(&qword_10025FA30, sub_10014C964);
  v102 = *(_QWORD *)(v0 + 736);
  v103 = *(_QWORD *)(v0 + 576);
  v104 = *(_QWORD *)(v0 + 512);
  v105 = sub_100037A9C(v104, (uint64_t)qword_10027AFB8);
  v281(v103, v105, v104);
  sub_10000E37C(v288, v102, &qword_1002650A0);
  v106 = v286(v102, 1, v20);
  v107 = *(_QWORD *)(v0 + 736);
  if (v106 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 736), &qword_1002650A0);
    v108 = 0;
    v109 = 0;
  }
  else
  {
    v108 = Handle.qualifiedIdentifier.getter();
    v109 = v110;
    (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v107, v20);
  }
  v111 = *(_QWORD *)(v0 + 576);
  v112 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 16) = v108;
  *(_QWORD *)(v0 + 24) = v109;
  <- infix<A>(_:_:)(v111, v0 + 16, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v109);
  v277(v111, v112);
  if (qword_10025FA38 != -1)
    swift_once(&qword_10025FA38, sub_10014C9F0);
  v113 = *(_QWORD *)(v0 + 728);
  v114 = *(_QWORD *)(v0 + 624);
  v115 = *(_QWORD *)(v0 + 608);
  v116 = sub_100037A9C(v115, (uint64_t)qword_10027AFD0);
  v257(v114, v116, v115);
  sub_10000E37C(v288, v113, &qword_1002650A0);
  v117 = v286(v113, 1, v20);
  v118 = *(_QWORD *)(v0 + 728);
  if (v117 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 728), &qword_1002650A0);
    v119 = 0;
    v120 = 1;
  }
  else
  {
    v121 = *(_QWORD *)(v0 + 592);
    Handle.idsStatus.getter();
    (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v118, v20);
    v122 = v255(v121, 1, v261);
    v123 = *(_QWORD *)(v0 + 592);
    if (v122 == 1)
    {
      sub_1000087A0(*(_QWORD *)(v0 + 592), &qword_100263870);
      v119 = 0;
      v120 = 1;
    }
    else
    {
      v119 = IDSStatus.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v253 + 8))(v123, v261);
      v120 = 0;
    }
  }
  v124 = *(_QWORD *)(v0 + 624);
  v125 = *(_QWORD *)(v0 + 608);
  *(_QWORD *)(v0 + 368) = v119;
  *(_BYTE *)(v0 + 376) = v120;
  <- infix<A>(_:_:)(v124, v0 + 368, &type metadata for Int, &protocol witness table for Int);
  v259(v124, v125);
  if (qword_10025FA40 != -1)
    swift_once(&qword_10025FA40, sub_10014CA7C);
  v126 = *(_QWORD *)(v0 + 720);
  v127 = *(_QWORD *)(v0 + 568);
  v128 = *(_QWORD *)(v0 + 512);
  v129 = sub_100037A9C(v128, (uint64_t)qword_10027AFE8);
  v281(v127, v129, v128);
  sub_10000E37C(v288, v126, &qword_1002650A0);
  v130 = v286(v126, 1, v20);
  v131 = *(_QWORD *)(v0 + 720);
  if (v130 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 720), &qword_1002650A0);
    v132 = 0;
    v133 = 0;
  }
  else
  {
    v132 = Handle.dsid.getter();
    v133 = v134;
    (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v131, v20);
  }
  v135 = *(_QWORD *)(v0 + 568);
  v136 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 336) = v132;
  *(_QWORD *)(v0 + 344) = v133;
  <- infix<A>(_:_:)(v135, v0 + 336, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v133);
  v277(v135, v136);
  if (qword_10025FA50 != -1)
    swift_once(&qword_10025FA50, sub_10014CB9C);
  v137 = *(_QWORD *)(v0 + 712);
  v139 = *(_QWORD *)(v0 + 496);
  v138 = *(_QWORD *)(v0 + 504);
  v140 = *(_QWORD *)(v0 + 488);
  v141 = sub_100037A9C(v140, (uint64_t)qword_10027B018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 16))(v138, v141, v140);
  sub_10000E37C(v288, v137, &qword_1002650A0);
  v142 = v286(v137, 1, v20);
  v143 = *(_QWORD *)(v0 + 712);
  if (v142 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 712), &qword_1002650A0);
    v144 = 0.0;
  }
  else
  {
    v144 = Handle.trackingTimestamp.getter();
    (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v143, v20);
  }
  v145 = v142 == 1;
  v147 = *(_QWORD *)(v0 + 496);
  v146 = *(_QWORD *)(v0 + 504);
  v148 = *(_QWORD *)(v0 + 488);
  *(double *)(v0 + 352) = v144;
  *(_BYTE *)(v0 + 360) = v145;
  <- infix<A>(_:_:)(v146, v0 + 352, &type metadata for Double, &protocol witness table for Double);
  (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v146, v148);
  if (qword_10025FA58 != -1)
    swift_once(&qword_10025FA58, sub_10014CC28);
  v149 = *(_QWORD *)(v0 + 704);
  v150 = *(_QWORD *)(v0 + 560);
  v151 = *(_QWORD *)(v0 + 512);
  v152 = sub_100037A9C(v151, (uint64_t)qword_10027B030);
  v281(v150, v152, v151);
  sub_10000E37C(v288, v149, &qword_1002650A0);
  v153 = v286(v149, 1, v20);
  v154 = *(_QWORD *)(v0 + 704);
  if (v153 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 704), &qword_1002650A0);
    v155 = 0;
    v156 = 0;
  }
  else
  {
    v155 = Handle.hashedDSID.getter();
    v156 = v157;
    (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v154, v20);
  }
  v158 = *(_QWORD *)(v0 + 560);
  v159 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 320) = v155;
  *(_QWORD *)(v0 + 328) = v156;
  <- infix<A>(_:_:)(v158, v0 + 320, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v156);
  v277(v158, v159);
  if (qword_10025FA60 != -1)
    swift_once(&qword_10025FA60, sub_10014CCB4);
  v160 = *(_QWORD *)(v0 + 696);
  v161 = *(_QWORD *)(v0 + 552);
  v162 = *(_QWORD *)(v0 + 512);
  v163 = sub_100037A9C(v162, (uint64_t)qword_10027B048);
  v281(v161, v163, v162);
  sub_10000E37C(v288, v160, &qword_1002650A0);
  v164 = v286(v160, 1, v20);
  v165 = *(_QWORD *)(v0 + 696);
  if (v164 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 696), &qword_1002650A0);
    v166 = 0;
    v167 = 0;
  }
  else
  {
    v166 = Handle.favoriteOrder.getter();
    v167 = v168;
    (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v165, v20);
  }
  v169 = *(_QWORD *)(v0 + 552);
  v170 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 112) = v166;
  *(_QWORD *)(v0 + 120) = v167;
  <- infix<A>(_:_:)(v169, v0 + 112, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v167);
  v277(v169, v170);
  if (qword_10025FA48 != -1)
    swift_once(&qword_10025FA48, sub_10014CB10);
  v171 = sub_100037A9C(v266, (uint64_t)qword_10027B000);
  *(_QWORD *)(v0 + 304) = v271;
  *(_QWORD *)(v0 + 312) = v272;
  <- infix<A>(_:_:)(v171, v0 + 304, &type metadata for Data, &protocol witness table for Data);
  if (qword_10025FA68 != -1)
    swift_once(&qword_10025FA68, sub_10014CD40);
  v172 = *(_QWORD *)(v0 + 688);
  v174 = *(_QWORD *)(v0 + 472);
  v173 = *(_QWORD *)(v0 + 480);
  v175 = *(_QWORD *)(v0 + 464);
  v176 = sub_100037A9C(v175, (uint64_t)qword_10027B060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v174 + 16))(v173, v176, v175);
  sub_10000E37C(v288, v172, &qword_1002650A0);
  v177 = v286(v172, 1, v20);
  v178 = *(_QWORD *)(v0 + 688);
  if (v177 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 688), &qword_1002650A0);
    v179 = 2;
  }
  else
  {
    v179 = Handle.reachable.getter();
    (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v178, v20);
  }
  v181 = *(_QWORD *)(v0 + 472);
  v180 = *(_QWORD *)(v0 + 480);
  v182 = *(_QWORD *)(v0 + 464);
  *(_BYTE *)(v0 + 365) = v179;
  <- infix<A>(_:_:)(v180, v0 + 365, &type metadata for Bool, &protocol witness table for Bool);
  (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v180, v182);
  if (qword_10025FA70 != -1)
    swift_once(&qword_10025FA70, sub_10014CDCC);
  v183 = sub_100037A9C(v266, (uint64_t)qword_10027B078);
  *(_QWORD *)(v0 + 192) = v273;
  *(_QWORD *)(v0 + 200) = v274;
  <- infix<A>(_:_:)(v183, v0 + 192, &type metadata for Data, &protocol witness table for Data);
  if (qword_10025FA78 != -1)
    swift_once(&qword_10025FA78, sub_10014CE58);
  v184 = *(_QWORD *)(v0 + 680);
  v185 = *(_QWORD *)(v0 + 544);
  v186 = *(_QWORD *)(v0 + 512);
  v187 = sub_100037A9C(v186, (uint64_t)qword_10027B090);
  v281(v185, v187, v186);
  sub_10000E37C(v288, v184, &qword_1002650A0);
  v188 = v286(v184, 1, v20);
  v189 = *(_QWORD *)(v0 + 680);
  if (v188 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 680), &qword_1002650A0);
    v190 = 0;
    v191 = 0;
  }
  else
  {
    v190 = Handle.prettyName.getter();
    v191 = v192;
    (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v189, v20);
  }
  v193 = *(_QWORD *)(v0 + 544);
  v194 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 144) = v190;
  *(_QWORD *)(v0 + 152) = v191;
  <- infix<A>(_:_:)(v193, v0 + 144, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v191);
  v277(v193, v194);
  if (qword_10025FA80 != -1)
    swift_once(&qword_10025FA80, sub_10014CEE4);
  v195 = *(_QWORD *)(v0 + 672);
  v196 = *(_QWORD *)(v0 + 536);
  v197 = *(_QWORD *)(v0 + 512);
  v198 = sub_100037A9C(v197, (uint64_t)qword_10027B0A8);
  v281(v196, v198, v197);
  sub_10000E37C(v288, v195, &qword_1002650A0);
  v199 = v286(v195, 1, v20);
  v200 = *(_QWORD *)(v0 + 672);
  if (v199 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 672), &qword_1002650A0);
    v201 = 0;
    v202 = 0;
  }
  else
  {
    v201 = Handle.contactIdentifier.getter();
    v202 = v203;
    (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v200, v20);
  }
  v204 = *(_QWORD *)(v0 + 536);
  v205 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 64) = v201;
  *(_QWORD *)(v0 + 72) = v202;
  <- infix<A>(_:_:)(v204, v0 + 64, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v202);
  v277(v204, v205);
  if (qword_10025FA88 != -1)
    swift_once(&qword_10025FA88, sub_10014CF70);
  v206 = *(_QWORD *)(v0 + 664);
  v207 = *(_QWORD *)(v0 + 528);
  v208 = *(_QWORD *)(v0 + 512);
  v209 = sub_100037A9C(v208, (uint64_t)qword_10027B0C0);
  v281(v207, v209, v208);
  sub_10000E37C(v288, v206, &qword_1002650A0);
  v210 = v286(v206, 1, v20);
  v211 = *(_QWORD *)(v0 + 664);
  if ((_DWORD)v210 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 664), &qword_1002650A0);
    v212 = 0;
    v213 = 0;
  }
  else
  {
    v212 = Handle.serverID.getter(v210);
    v213 = v214;
    (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v211, v20);
  }
  v215 = *(_QWORD *)(v0 + 528);
  v216 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 48) = v212;
  *(_QWORD *)(v0 + 56) = v213;
  <- infix<A>(_:_:)(v215, v0 + 48, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v213);
  v277(v215, v216);
  if (qword_10025FA98 != -1)
    swift_once(&qword_10025FA98, sub_10014D088);
  v217 = *(_QWORD *)(v0 + 456);
  v218 = sub_100037A5C(&qword_100260D48);
  v219 = sub_100037A9C(v218, (uint64_t)qword_10027B0F0);
  *(_BYTE *)(v0 + 361) = *(_BYTE *)(v217 + v285[31]);
  <- infix<A>(_:_:)(v219, v0 + 361, &type metadata for Bool, &protocol witness table for Bool);
  if (qword_10025FAA0 != -1)
    swift_once(&qword_10025FAA0, sub_10014D114);
  v220 = *(_QWORD *)(v0 + 456);
  v221 = sub_100037A9C(v218, (uint64_t)qword_10027B108);
  *(_BYTE *)(v0 + 362) = *(_BYTE *)(v220 + v285[32]);
  <- infix<A>(_:_:)(v221, v0 + 362, &type metadata for Bool, &protocol witness table for Bool);
  if (qword_10025FAA8 != -1)
    swift_once(&qword_10025FAA8, sub_10014D1A0);
  v222 = *(_QWORD *)(v0 + 456);
  v289 = v218;
  v223 = sub_100037A9C(v218, (uint64_t)qword_10027B120);
  *(_BYTE *)(v0 + 363) = *(_BYTE *)(v222 + v285[33]);
  <- infix<A>(_:_:)(v223, v0 + 363, &type metadata for Bool, &protocol witness table for Bool);
  if (qword_10025FAB8 != -1)
    swift_once(&qword_10025FAB8, sub_10014D2B8);
  v224 = *(_QWORD *)(v0 + 456);
  v225 = sub_100037A5C(&qword_100262910);
  v226 = sub_100037A9C(v225, (uint64_t)qword_10027B150);
  *(_QWORD *)(v0 + 416) = *(_QWORD *)(v224 + v285[35]);
  v227 = sub_100039528();
  <- infix<A>(_:_:)(v226, v0 + 416, &type metadata for UInt64, v227);
  if (qword_10025FAB0 != -1)
    swift_once(&qword_10025FAB0, sub_10014D22C);
  v228 = sub_100037A5C(&qword_100260D68);
  v229 = sub_100037A9C(v228, (uint64_t)qword_10027B138);
  *(_QWORD *)(v0 + 32) = v265;
  *(_QWORD *)(v0 + 40) = v264;
  <- infix<A>(_:_:)(v229, v0 + 32, &type metadata for Data, &protocol witness table for Data);
  if (qword_10025FA90 != -1)
    swift_once(&qword_10025FA90, sub_10014CFFC);
  v230 = *(_QWORD *)(v0 + 784);
  v231 = *(_QWORD *)(v0 + 768);
  v238 = *(_QWORD *)(v0 + 776);
  v239 = *(_QWORD *)(v0 + 760);
  v240 = *(_QWORD *)(v0 + 752);
  v241 = *(_QWORD *)(v0 + 744);
  v242 = *(_QWORD *)(v0 + 736);
  v243 = *(_QWORD *)(v0 + 728);
  v244 = *(_QWORD *)(v0 + 720);
  v245 = *(_QWORD *)(v0 + 712);
  v246 = *(_QWORD *)(v0 + 704);
  v247 = *(_QWORD *)(v0 + 696);
  v248 = *(_QWORD *)(v0 + 688);
  v249 = *(_QWORD *)(v0 + 680);
  v250 = *(_QWORD *)(v0 + 672);
  v251 = *(_QWORD *)(v0 + 664);
  v232 = *(_QWORD *)(v0 + 656);
  v236 = *(_QWORD *)(v0 + 648);
  v237 = *(_QWORD *)(v0 + 640);
  v252 = *(_QWORD *)(v0 + 632);
  v254 = *(_QWORD *)(v0 + 624);
  v256 = *(_QWORD *)(v0 + 600);
  v258 = *(_QWORD *)(v0 + 592);
  v260 = *(_QWORD *)(v0 + 584);
  v262 = *(_QWORD *)(v0 + 576);
  v267 = *(_QWORD *)(v0 + 568);
  v269 = *(_QWORD *)(v0 + 560);
  v278 = *(_QWORD *)(v0 + 552);
  v268 = *(_QWORD *)(v0 + 544);
  v270 = *(_QWORD *)(v0 + 536);
  v282 = *(_QWORD *)(v0 + 528);
  v284 = *(_QWORD *)(v0 + 504);
  v287 = *(_QWORD *)(v0 + 480);
  v233 = *(_QWORD *)(v0 + 456);
  v234 = sub_100037A9C(v289, (uint64_t)qword_10027B0D8);
  *(_BYTE *)(v0 + 366) = *(_BYTE *)(v233 + v285[30]);
  <- infix<A>(_:_:)(v234, v0 + 366, &type metadata for Bool, &protocol witness table for Bool);
  QueryType.insert(or:_:)(v232, v263, v231, &protocol witness table for Table);
  swift_bridgeObjectRelease(v263);
  sub_100037AB4(v265, v264);
  sub_100037AF8(v271, v272);
  sub_100037AF8(v273, v274);
  sub_100037AF8(v275, v276);
  (*(void (**)(uint64_t, uint64_t))(v236 + 8))(v232, v237);
  (*(void (**)(uint64_t, uint64_t))(v238 + 8))(v230, v231);
  swift_task_dealloc(v230);
  swift_task_dealloc(v239);
  swift_task_dealloc(v240);
  swift_task_dealloc(v241);
  swift_task_dealloc(v242);
  swift_task_dealloc(v243);
  swift_task_dealloc(v244);
  swift_task_dealloc(v245);
  swift_task_dealloc(v246);
  swift_task_dealloc(v247);
  swift_task_dealloc(v248);
  swift_task_dealloc(v249);
  swift_task_dealloc(v250);
  swift_task_dealloc(v251);
  swift_task_dealloc(v232);
  swift_task_dealloc(v252);
  swift_task_dealloc(v254);
  swift_task_dealloc(v256);
  swift_task_dealloc(v258);
  swift_task_dealloc(v260);
  swift_task_dealloc(v262);
  swift_task_dealloc(v267);
  swift_task_dealloc(v269);
  swift_task_dealloc(v278);
  swift_task_dealloc(v268);
  swift_task_dealloc(v270);
  swift_task_dealloc(v282);
  swift_task_dealloc(v284);
  swift_task_dealloc(v287);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E7810()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B410);
  sub_100037A9C(v0, (uint64_t)qword_10027B410);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0xD000000000000011, 0x80000001001FC090);
}

uint64_t sub_1001E7890(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100032470(a1, a2, a3, (_QWORD *)*v3, &qword_100267AB0, type metadata accessor for FriendSharedSecretsRecord);
  *v3 = result;
  return result;
}

uint64_t sub_1001E78BC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001E79B4(a1, a2, a3, (_QWORD *)*v3, &qword_100267AE0, &qword_100267AE8);
  *v3 = result;
  return result;
}

uint64_t sub_1001E78E8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001E79B4(a1, a2, a3, (_QWORD *)*v3, &qword_100267AD0, &qword_100267AD8);
  *v3 = result;
  return result;
}

uint64_t sub_1001E7914(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001E7B54(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001E7930(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100032470(a1, a2, a3, (_QWORD *)*v3, &qword_100265640, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
  *v3 = result;
  return result;
}

uint64_t sub_1001E795C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100032470(a1, a2, a3, (_QWORD *)*v3, &qword_100267AB8, type metadata accessor for Fence);
  *v3 = result;
  return result;
}

uint64_t sub_1001E7988(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100032470(a1, a2, a3, (_QWORD *)*v3, &qword_100267AC0, (uint64_t (*)(_QWORD))&type metadata accessor for CloudKitCoordinator.Deletion);
  *v3 = result;
  return result;
}

uint64_t sub_1001E79B4(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100037A5C(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = &_swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11)
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    sub_100037A5C(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001E7B40(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100034F5C(a1, a2, a3, a4, &qword_100265548, &qword_100263340);
}

uint64_t sub_1001E7B54(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100037A5C(&qword_100262CD8);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_100037A5C(&qword_100267AC8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

Swift::Int sub_1001E7CF4(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(char *);
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  Swift::Int v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v5 = (uint64_t (*)(char *))isStackAllocationSafe;
  v6 = *(_BYTE *)(a3 + 32);
  v7 = v6 & 0x3F;
  v8 = (1 << v6) + 63;
  v9 = v8 >> 6;
  v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    v11 = sub_1001E7E70((unint64_t *)((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a3, v5);
    v12 = swift_release(a3);
    if (v3)
      swift_willThrow(v12);
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v10, -1);
    bzero(v13, v10);
    v11 = sub_1001E7E70((unint64_t *)v13, v9, a3, v5);
    swift_release(a3);
    swift_slowDealloc(v13, -1, -1);
  }
  return v11;
}

Swift::Int sub_1001E7E70(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  Swift::Int result;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t (*v30)(char *);
  uint64_t v31;

  v30 = a4;
  v25 = a2;
  v26 = a1;
  v6 = type metadata accessor for FriendInfoOption(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v31 = a3;
  v12 = *(_QWORD *)(a3 + 56);
  v27 = 0;
  v28 = a3 + 56;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v29 = (unint64_t)(v13 + 63) >> 6;
  while (v15)
  {
    v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v17 = v16 | (v11 << 6);
LABEL_17:
    sub_100025C70(*(_QWORD *)(v31 + 48) + *(_QWORD *)(v7 + 72) * v17, (uint64_t)v10, type metadata accessor for FriendInfoOption);
    v21 = v30(v10);
    result = sub_100024990((uint64_t)v10, type metadata accessor for FriendInfoOption);
    if (v4)
      return result;
    if ((v21 & 1) != 0)
    {
      *(unint64_t *)((char *)v26 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = __OFADD__(v27++, 1);
      if (v18)
        goto LABEL_30;
    }
  }
  v18 = __OFADD__(v11++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v11 >= v29)
    goto LABEL_27;
  v19 = *(_QWORD *)(v28 + 8 * v11);
  if (v19)
  {
LABEL_16:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v11 << 6);
    goto LABEL_17;
  }
  v20 = v11 + 1;
  if (v11 + 1 >= v29)
    goto LABEL_27;
  v19 = *(_QWORD *)(v28 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 2;
  if (v11 + 2 >= v29)
    goto LABEL_27;
  v19 = *(_QWORD *)(v28 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 3;
  if (v11 + 3 >= v29)
  {
LABEL_27:
    v22 = v25;
    v23 = v27;
    v24 = v31;
    swift_retain(v31);
    return sub_1001E80C4(v26, v22, v23, v24);
  }
  v19 = *(_QWORD *)(v28 + 8 * v20);
  if (v19)
  {
LABEL_15:
    v11 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v29)
      goto LABEL_27;
    v19 = *(_QWORD *)(v28 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_1001E80C4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int result;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v37 = a1;
  v7 = type metadata accessor for FriendInfoOption(0);
  v38 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v39 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_100037A5C(&qword_1002655B0);
  result = static _SetStorage.allocate(capacity:)(a3);
  v9 = result;
  v36 = a2;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *v37;
  v12 = 0;
  v13 = type metadata accessor for FriendInfoOption;
  v14 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v12 << 6);
    }
    else
    {
      v17 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_40;
      if (v17 >= v36)
      {
LABEL_37:
        swift_release(a4);
        return v9;
      }
      v18 = v37[v17];
      ++v12;
      if (!v18)
      {
        v12 = v17 + 1;
        if (v17 + 1 >= v36)
          goto LABEL_37;
        v18 = v37[v12];
        if (!v18)
        {
          v12 = v17 + 2;
          if (v17 + 2 >= v36)
            goto LABEL_37;
          v18 = v37[v12];
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v36)
              goto LABEL_37;
            v18 = v37[v19];
            if (!v18)
            {
              while (1)
              {
                v12 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_41;
                if (v12 >= v36)
                  goto LABEL_37;
                v18 = v37[v12];
                ++v19;
                if (v18)
                  goto LABEL_24;
              }
            }
            v12 = v19;
          }
        }
      }
LABEL_24:
      v11 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v12 << 6);
    }
    v20 = a4;
    v21 = *(_QWORD *)(v38 + 72);
    v22 = *(_QWORD *)(a4 + 48) + v21 * v16;
    v23 = v13;
    sub_100025C70(v22, v39, v13);
    Hasher.init(_seed:)(v40, *(_QWORD *)(v9 + 40));
    v24 = type metadata accessor for HandleType(0);
    v25 = sub_100004EA8(&qword_100263710, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
    dispatch thunk of Hashable.hash(into:)(v40, v24, v25);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v9 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      v13 = v23;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      v13 = v23;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v14 + 8 * v28);
      }
      while (v33 == -1);
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(_QWORD *)(v14 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    result = sub_1000321F4(v39, *(_QWORD *)(v9 + 48) + v29 * v21, v13);
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v20;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001E83F4(unint64_t a1)
{
  return sub_10016110C(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1001E8408(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(_QWORD, _QWORD, _QWORD, __n128);
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  char v36;
  uint64_t v37;
  Swift::String *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(_QWORD, _QWORD, _QWORD, __n128);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v2 = type metadata accessor for HandleType(0);
  v47 = *(_QWORD *)(v2 - 8);
  v48 = v2;
  __chkstk_darwin(v2);
  v46 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FriendRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v59 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v58 = (Swift::String *)((char *)&v45 - v9);
  __chkstk_darwin(v8);
  v54 = (uint64_t)&v45 - v10;
  v11 = type metadata accessor for Handle(0);
  v62 = *(_QWORD *)(v11 - 8);
  v63 = v11;
  __chkstk_darwin(v11);
  v61 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Friend(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v49 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v45 - v17;
  v57 = *(_QWORD *)(a1 + 16);
  if (!v57)
    return (uint64_t)_swiftEmptyArrayStorage;
  v56 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v55 = *(_QWORD *)(v14 + 72);
  v19 = *(void (**)(_QWORD, _QWORD, _QWORD, __n128))(v14 + 16);
  v45 = a1;
  v20 = swift_bridgeObjectRetain(a1);
  v21 = 0;
  v22 = _swiftEmptyArrayStorage;
  v52 = v13;
  v53 = v5;
  v50 = v19;
  v51 = v14;
  while (1)
  {
    v19(v18, v56 + v55 * v21, v13, v20);
    v65 = v22[2];
    if (!v65)
    {
LABEL_14:
      v37 = (uint64_t)v49;
      ((void (*)(char *, char *, uint64_t))v19)(v49, v18, v13);
      v38 = v58;
      sub_1000FB9E8(v37, v58);
      sub_100025C70((uint64_t)v38, v59, type metadata accessor for FriendRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
        v22 = (_QWORD *)sub_10016110C(0, v22[2] + 1, 1, (unint64_t)v22);
      v40 = v22[2];
      v39 = v22[3];
      if (v40 >= v39 >> 1)
        v22 = (_QWORD *)sub_10016110C(v39 > 1, v40 + 1, 1, (unint64_t)v22);
      v22[2] = v40 + 1;
      sub_1000321F4(v59, (uint64_t)v22+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v40, type metadata accessor for FriendRecord);
      sub_100024990((uint64_t)v58, type metadata accessor for FriendRecord);
      goto LABEL_4;
    }
    v60 = v21;
    v23 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    swift_bridgeObjectRetain(v22);
    v25 = 0;
    v64 = *(_QWORD *)(v5 + 72);
    while (1)
    {
      v26 = (unint64_t)v22;
      v27 = (char *)v22 + v23;
      v28 = *(_QWORD *)((char *)v22 + v23);
      v29 = (void *)*((_QWORD *)v27 + 1);
      v30 = v61;
      v31 = Friend.handle.getter(v24);
      Handle.identifier.getter(v31);
      v33 = v32;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v30, v63);
      v34 = String.lowercased()();
      swift_bridgeObjectRelease(v33);
      if (v28 == v34._countAndFlagsBits && v29 == v34._object)
      {
        swift_bridgeObjectRelease(v26);
        v41 = (unint64_t)v29;
        goto LABEL_20;
      }
      v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v34._countAndFlagsBits, v34._object, 0);
      v24 = swift_bridgeObjectRelease(v34._object);
      if ((v36 & 1) != 0)
        break;
      ++v25;
      v23 += v64;
      v22 = (_QWORD *)v26;
      if (v65 == v25)
      {
        swift_bridgeObjectRelease(v26);
        v13 = v52;
        v5 = v53;
        v19 = v50;
        v14 = v51;
        v21 = v60;
        goto LABEL_14;
      }
    }
    v41 = v26;
LABEL_20:
    result = swift_bridgeObjectRelease(v41);
    v22 = (_QWORD *)v26;
    if (v25 >= *(_QWORD *)(v26 + 16))
      break;
    v43 = sub_100025C70(v26 + v23, v54, type metadata accessor for FriendRecord);
    v44 = (uint64_t)v46;
    Friend.type.getter(v43);
    sub_1000FCB88((uint64_t)v18, v44);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v44, v48);
    result = swift_isUniquelyReferenced_nonNull_native(v26);
    if ((result & 1) == 0)
    {
      result = sub_1001E83F4(v26);
      v22 = (_QWORD *)result;
    }
    v5 = v53;
    if (v25 >= v22[2])
      goto LABEL_29;
    sub_1001E89B0(v54, (uint64_t)v22 + v23);
    v14 = v51;
    v13 = v52;
    v19 = v50;
    v21 = v60;
LABEL_4:
    ++v21;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
    if (v21 == v57)
    {
      swift_bridgeObjectRelease(v45);
      return (uint64_t)v22;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_1001E88B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100267A50;
  if (!qword_100267A50)
  {
    v1 = sub_10003C1FC(&qword_100266D70);
    sub_100027254(&qword_100263A00, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100267A50);
  }
  return result;
}

unint64_t sub_1001E8934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100263A08;
  if (!qword_100263A08)
  {
    v1 = sub_10003C1FC(&qword_1002639D0);
    sub_100004EA8(&qword_100263A10, type metadata accessor for FriendInfoOption, (uint64_t)&protocol conformance descriptor for FriendInfoOption);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100263A08);
  }
  return result;
}

uint64_t sub_1001E89B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FriendRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

BOOL sub_1001E89F4(uint64_t a1)
{
  return sub_1000FD51C(a1);
}

uint64_t sub_1001E8A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B428);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027B428);
  if (qword_10025FBE8 != -1)
    swift_once(&qword_10025FBE8, sub_1001EB718);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027B440);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001E8AA0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1001E8AB8, v0, 0);
}

uint64_t sub_1001E8AB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[2];
  v0[3] = *(_QWORD *)(v1 + 128);
  swift_retain(v1);
  v2 = sub_100037A5C(&qword_100261EC0);
  v3 = sub_1001E9AE4();
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  v0[4] = v4;
  v0[5] = v5;
  return swift_task_switch(sub_1001E8B24, v4, v5);
}

uint64_t sub_1001E8B24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  dispatch thunk of LocalMessaging.set(didDeliverCallback:)(&unk_100267CB0, v1);
  swift_release(v1);
  return swift_task_switch(sub_1001E8B74, v1, 0);
}

uint64_t sub_1001E8B74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  swift_retain(v0[2]);
  return swift_task_switch(sub_1001E8BB4, v1, v2);
}

uint64_t sub_1001E8BB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  dispatch thunk of LocalMessaging.set(messageReceivedCallback:)(&unk_100267CC0, v1);
  swift_release(v1);
  return swift_task_switch(sub_1001E8C04, v1, 0);
}

uint64_t sub_1001E8C04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  swift_retain(v0[2]);
  return swift_task_switch(sub_1001E8C44, v1, v2);
}

uint64_t sub_1001E8C44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  dispatch thunk of LocalMessaging.set(accountChangedCallback:)(&unk_100267CD0, v1);
  swift_release(v1);
  return swift_task_switch(sub_1001E8C94, v1, 0);
}

uint64_t sub_1001E8C94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  swift_retain(v0[2]);
  return swift_task_switch(sub_1001E8CD4, v1, v2);
}

uint64_t sub_1001E8CD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  dispatch thunk of LocalMessaging.set(devicesChangedCallback:)(&unk_100267CE0, v1);
  swift_release(v1);
  return swift_task_switch(sub_1001E8D24, v1, 0);
}

uint64_t sub_1001E8D24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  swift_retain(v0[2]);
  return swift_task_switch(sub_1001E8D64, v1, v2);
}

uint64_t sub_1001E8D64()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  dispatch thunk of LocalMessaging.set(connectedDevicesChangedCallback:)(&unk_100267CF0, v1);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E8DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_1001E8DC8, a4, 0);
}

uint64_t sub_1001E8DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v2 + 32);
  v3 = *(_QWORD *)(v2 + 40);
  v5 = sub_100018A7C(qword_100267C78, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC1DC);
  v6 = swift_task_alloc(48);
  *(_QWORD *)(v2 + 48) = v6;
  v7 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v6 + 16) = v3;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 40) = v4;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v2 + 56) = v8;
  *v8 = v2;
  v8[1] = sub_100040FBC;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v8, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v3, v5, &unk_100267D80, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1001E8E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch(sub_1001E8EA8, a6, 0);
}

uint64_t sub_1001E8EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v2 + 48);
  v3 = *(_QWORD *)(v2 + 56);
  v5 = sub_100018A7C(qword_100267C78, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC1DC);
  v6 = swift_task_alloc(64);
  *(_QWORD *)(v2 + 64) = v6;
  v7 = *(_OWORD *)(v2 + 16);
  v8 = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v6 + 16) = v3;
  *(_OWORD *)(v6 + 24) = v7;
  *(_OWORD *)(v6 + 40) = v8;
  *(_QWORD *)(v6 + 56) = v4;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v2 + 72) = v9;
  *v9 = v2;
  v9[1] = sub_100041108;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v9, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v3, v5, &unk_100267D60, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1001E8F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1001E8F80, a2, 0);
}

uint64_t sub_1001E8F80(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v2[2];
  v3 = v2[3];
  v5 = sub_100018A7C(qword_100267C78, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC1DC);
  v6 = swift_task_alloc(32);
  v2[4] = v6;
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v2[5] = v7;
  *v7 = v2;
  v7[1] = sub_100041370;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v7, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v3, v5, &unk_100267D40, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1001E9034(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1001E9048, a2, 0);
}

uint64_t sub_1001E9048(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v2[2];
  v3 = v2[3];
  v5 = sub_100018A7C(qword_100267C78, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC1DC);
  v6 = swift_task_alloc(32);
  v2[4] = v6;
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v2[5] = v7;
  *v7 = v2;
  v7[1] = sub_100041498;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v7, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v3, v5, &unk_100267D20, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1001E90FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1001E9110, a2, 0);
}

uint64_t sub_1001E9110(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v2[2];
  v3 = v2[3];
  v5 = sub_100018A7C(qword_100267C78, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC1DC);
  v6 = swift_task_alloc(32);
  v2[4] = v6;
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v2[5] = v7;
  *v7 = v2;
  v7[1] = sub_100041370;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v7, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v3, v5, &unk_100267D00, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1001E91C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[4] = a1;
  v3[5] = a2;
  v4 = type metadata accessor for SystemVersionNumber(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[8] = swift_task_alloc(v6);
  v3[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_1001E9234, v2, 0);
}

uint64_t sub_1001E9234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  NSObject *log;
  uint64_t v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;

  if (qword_10025FBE0 != -1)
    swift_once(&qword_10025FBE0, sub_1001E8A10);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027B428);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v2, v1, v4);
  v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v3, v6, v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  v12 = os_log_type_enabled(v10, v11);
  v14 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 48);
  v15 = *(_QWORD *)(v0 + 56);
  if (v12)
  {
    v30 = *(_QWORD *)(v0 + 64);
    type = v11;
    v17 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v33 = v32;
    *(_DWORD *)v17 = 136315394;
    log = v10;
    v18 = sub_100018A7C(&qword_100260108, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v21 = v20;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v19, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v13, v16);
    *(_WORD *)(v17 + 12) = 2080;
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v25 = v24;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v23, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v25);
    v22(v30, v16);
    _os_log_impl((void *)&_mh_execute_header, log, type, "STUB: migrate from %s to %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v26 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v26(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48));
    v26(v14, v16);

  }
  v27 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E94C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[14] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[15] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v6);
  v3[17] = swift_task_alloc(v6);
  return swift_task_switch(sub_1001E953C, v2, 0);
}

uint64_t sub_1001E953C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(v1 + 88);
  v3 = *(_QWORD *)(v1 + 136);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 96);
  v7 = *(_QWORD *)(v1 + 104);
  UUID.init()(a1);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v3, v2, v4);
  sub_100043ECC(v6, v1 + 16);
  swift_beginAccess(v7 + 136, v1 + 56, 33, 0);
  sub_1000DE554(v1 + 16, v3);
  swift_endAccess(v1 + 56);
  if (qword_10025FBE0 != -1)
    swift_once(&qword_10025FBE0, sub_1001E8A10);
  v9 = *(_QWORD *)(v1 + 128);
  v10 = *(_QWORD *)(v1 + 112);
  v11 = *(_QWORD *)(v1 + 88);
  v12 = type metadata accessor for Logger(0);
  sub_100037A9C(v12, (uint64_t)qword_10027B428);
  v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, v11, v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v1 + 128);
  v18 = *(_QWORD *)(v1 + 112);
  if (v16)
  {
    v27 = *(_QWORD *)(v1 + 120);
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v28 = v20;
    *(_DWORD *)v19 = 136446210;
    v21 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v18, v21);
    v24 = v23;
    *(_QWORD *)(v1 + 80) = sub_10002BA84(v22, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v17, v18);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Added client: %{public}s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 120) + 8))(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 112));
  }

  v25 = *(_QWORD *)(v1 + 128);
  swift_task_dealloc(*(_QWORD *)(v1 + 136));
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001E97B8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[15]);
  swift_release(v0[16]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[18]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LocalMessagingService()
{
  return objc_opt_self(_TtC13findmylocated21LocalMessagingService);
}

uint64_t sub_1001E9814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.initialLaunchProcessing()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for LocalMessagingService();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_1001E9874(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100267B5C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_1001E91C4(a1, a2);
}

uint64_t sub_1001E98D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for LocalMessagingService();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_1001E9930()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100267B54);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1000087DC;
  v2[2] = v0;
  return swift_task_switch(sub_1001E8AB8, v0, 0);
}

uint64_t sub_1001E998C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1001E99A4, v0, 0);
}

uint64_t sub_1001E99A4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 128);
  v1 = sub_100037A5C(&qword_100261EC0);
  v2 = sub_1001E9AE4();
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_1001E9A0C, v3, v4);
}

uint64_t sub_1001E9A0C()
{
  uint64_t v0;

  dispatch thunk of LocalMessaging.start()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E9A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for LocalMessagingService();
  v2 = sub_100018A7C(&qword_100261EC8, v1, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC17C);
  return ActorServiceProtocol.description.getter(v0, v2);
}

uint64_t sub_1001E9A8C(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(&qword_100267C70, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC154);
}

uint64_t sub_1001E9AB8(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(qword_100267C78, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC1DC);
}

unint64_t sub_1001E9AE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002660E0;
  if (!qword_1002660E0)
  {
    v1 = sub_10003C1FC(&qword_100261EC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for LocalMessaging<A>, v1);
    atomic_store(result, &qword_1002660E0);
  }
  return result;
}

uint64_t sub_1001E9B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v6[25] = a5;
  v6[26] = a6;
  v6[23] = a3;
  v6[24] = a4;
  v6[22] = a2;
  v8 = type metadata accessor for Destination(0);
  v6[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[28] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v6[29] = v10;
  v6[30] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v6[31] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[32] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v6[33] = v13;
  v6[34] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Account(0);
  v6[35] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v6[36] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v6[37] = v16;
  v6[38] = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[39] = swift_task_alloc(v17);
  v6[40] = swift_task_alloc(v17);
  return swift_task_switch(sub_1001E9C2C, a3, 0);
}

void sub_1001E9C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;

  v53 = (__int128 *)(v0 + 16);
  v69 = (__int128 *)(v0 + 56);
  v52 = *(_QWORD *)(v0 + 288);
  v50 = *(_QWORD *)(v0 + 224);
  v51 = *(_QWORD *)(v0 + 256);
  v1 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v1 + 136, v0 + 128, 0, 0);
  v2 = *(_QWORD *)(v1 + 136);
  v48 = v2 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v2 + 64);
  v49 = (unint64_t)(63 - v4) >> 6;
  v54 = *(_QWORD *)(v1 + 136);
  swift_bridgeObjectRetain(v2);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v55 = (v5 - 1) & v5;
      v56 = v6;
      v9 = __clz(__rbit64(v5)) | (v6 << 6);
      goto LABEL_23;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v10 >= v49)
      goto LABEL_31;
    v11 = *(_QWORD *)(v48 + 8 * v10);
    v12 = v6 + 1;
    if (!v11)
    {
      v12 = v6 + 2;
      if (v6 + 2 >= v49)
        goto LABEL_31;
      v11 = *(_QWORD *)(v48 + 8 * v12);
      if (!v11)
      {
        v12 = v6 + 3;
        if (v6 + 3 >= v49)
          goto LABEL_31;
        v11 = *(_QWORD *)(v48 + 8 * v12);
        if (!v11)
        {
          v12 = v6 + 4;
          if (v6 + 4 >= v49)
            goto LABEL_31;
          v11 = *(_QWORD *)(v48 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v55 = (v11 - 1) & v11;
    v56 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
    v14 = *(_QWORD *)(v0 + 320);
    v68 = *(_QWORD *)(v0 + 312);
    v15 = *(_QWORD *)(v0 + 304);
    v63 = *(_QWORD *)(v0 + 296);
    v17 = *(_QWORD *)(v0 + 272);
    v16 = *(_QWORD *)(v0 + 280);
    v65 = *(_QWORD *)(v0 + 264);
    v18 = *(_QWORD *)(v0 + 240);
    v19 = *(_QWORD *)(v0 + 248);
    v60 = v19;
    v62 = v18;
    v64 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 216);
    v61 = v20;
    v58 = *(_QWORD *)(v0 + 200);
    v59 = *(_QWORD *)(v0 + 208);
    v57 = *(_QWORD *)(v0 + 192);
    sub_100043ECC(*(_QWORD *)(v54 + 56) + 40 * v9, (uint64_t)v53);
    v21 = type metadata accessor for TaskPriority(0);
    v67 = *(_QWORD *)(v21 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v14, 1, 1, v21);
    sub_10001A4CC(v53, (uint64_t)v69);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v15, v57, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v17, v58, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v18, v59, v20);
    v22 = *(unsigned __int8 *)(v52 + 80);
    v23 = (v22 + 72) & ~v22;
    v24 = *(unsigned __int8 *)(v51 + 80);
    v25 = (v63 + v24 + v23) & ~v24;
    v26 = *(unsigned __int8 *)(v50 + 80);
    v27 = (v65 + v26 + v25) & ~v26;
    v28 = swift_allocObject(&unk_100258D90, v27 + v64, v22 | v24 | v26 | 7);
    *(_QWORD *)(v28 + 16) = 0;
    v66 = (_QWORD *)(v28 + 16);
    *(_QWORD *)(v28 + 24) = 0;
    sub_10001A4CC(v69, v28 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v28 + v23, v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v28 + v25, v17, v60);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v28 + v27, v62, v61);
    sub_100044264(v14, v68);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v68, 1, v21);
    v31 = *(_QWORD *)(v0 + 312);
    if (v29 == 1)
    {
      sub_1000442AC(*(_QWORD *)(v0 + 312));
      v32 = 0;
    }
    else
    {
      v33 = TaskPriority.rawValue.getter(v30);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v31, v21);
      v32 = v33;
    }
    v5 = v55;
    v6 = v56;
    v34 = *v66;
    if (*v66)
    {
      v35 = *(_QWORD *)(v28 + 24);
      ObjectType = swift_getObjectType(*v66);
      swift_unknownObjectRetain(v34);
      v37 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v35);
      v39 = v38;
      swift_unknownObjectRelease(v34);
    }
    else
    {
      v37 = 0;
      v39 = 0;
    }
    v40 = **(_QWORD **)(v0 + 176);
    v41 = swift_allocObject(&unk_100258DB8, 32, 7);
    *(_QWORD *)(v41 + 16) = &unk_100267D90;
    *(_QWORD *)(v41 + 24) = v28;
    v42 = v39 | v37;
    if (v39 | v37)
    {
      v42 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v37;
      *(_QWORD *)(v0 + 120) = v39;
    }
    v7 = *(_QWORD *)(v0 + 320);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v42;
    *(_QWORD *)(v0 + 168) = v40;
    v8 = swift_task_create(v32 | 0x3100, v0 + 152, (char *)&type metadata for () + 8, &unk_100260228, v41);
    swift_release(v8);
    sub_1000442AC(v7);
  }
  v13 = v6 + 5;
  if (v6 + 5 >= v49)
  {
LABEL_31:
    v43 = *(_QWORD *)(v0 + 312);
    v44 = *(_QWORD *)(v0 + 320);
    v45 = *(_QWORD *)(v0 + 304);
    v46 = *(_QWORD *)(v0 + 272);
    v47 = *(_QWORD *)(v0 + 240);
    swift_release(v54);
    swift_task_dealloc(v44);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v11 = *(_QWORD *)(v48 + 8 * v13);
  if (v11)
  {
    v12 = v6 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v49)
      goto LABEL_31;
    v11 = *(_QWORD *)(v48 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1001EA11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_1001EA138, 0, 0);
}

uint64_t sub_1001EA138()
{
  uint64_t v0;
  _QWORD *v1;

  sub_100036228(*(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_100266204);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_100042504;
  return sub_100184F3C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1001EA198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v8[27] = a7;
  v8[28] = a8;
  v8[25] = a5;
  v8[26] = a6;
  v8[23] = a3;
  v8[24] = a4;
  v8[22] = a2;
  v10 = type metadata accessor for MessageContext(0);
  v8[29] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[30] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v8[31] = v12;
  v8[32] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100037A5C(&qword_100266130);
  v8[33] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[34] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v8[35] = v15;
  v8[36] = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Destination(0);
  v8[37] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v8[38] = v17;
  v18 = *(_QWORD *)(v17 + 64);
  v8[39] = v18;
  v8[40] = swift_task_alloc((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Account(0);
  v8[41] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v8[42] = v20;
  v21 = *(_QWORD *)(v20 + 64);
  v8[43] = v21;
  v8[44] = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[45] = swift_task_alloc(v22);
  v8[46] = swift_task_alloc(v22);
  return swift_task_switch(sub_1001EA2C8, a3, 0);
}

void sub_1001EA2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;

  v58 = (__int128 *)(v0 + 16);
  v79 = (__int128 *)(v0 + 56);
  v57 = *(_QWORD *)(v0 + 336);
  v1 = *(_QWORD *)(v0 + 280);
  v55 = *(_QWORD *)(v0 + 272);
  v56 = *(_QWORD *)(v0 + 304);
  v54 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v2 + 136, v0 + 128, 0, 0);
  v3 = *(_QWORD *)(v2 + 136);
  v51 = v3 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v3 + 64);
  v52 = (unint64_t)(63 - v5) >> 6;
  v53 = v1 + 7;
  v59 = *(_QWORD *)(v2 + 136);
  swift_bridgeObjectRetain(v3);
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v60 = (v6 - 1) & v6;
      v61 = v7;
      v10 = __clz(__rbit64(v6)) | (v7 << 6);
      goto LABEL_23;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v52)
      goto LABEL_31;
    v12 = *(_QWORD *)(v51 + 8 * v11);
    v13 = v7 + 1;
    if (!v12)
    {
      v13 = v7 + 2;
      if (v7 + 2 >= v52)
        goto LABEL_31;
      v12 = *(_QWORD *)(v51 + 8 * v13);
      if (!v12)
      {
        v13 = v7 + 3;
        if (v7 + 3 >= v52)
          goto LABEL_31;
        v12 = *(_QWORD *)(v51 + 8 * v13);
        if (!v12)
        {
          v13 = v7 + 4;
          if (v7 + 4 >= v52)
            goto LABEL_31;
          v12 = *(_QWORD *)(v51 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v60 = (v12 - 1) & v12;
    v61 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    v15 = *(_QWORD *)(v0 + 368);
    v78 = *(_QWORD *)(v0 + 360);
    v16 = *(_QWORD *)(v0 + 352);
    v66 = v16;
    v70 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 320);
    v18 = *(_QWORD *)(v0 + 328);
    v68 = v17;
    v71 = *(_QWORD *)(v0 + 312);
    v20 = *(_QWORD *)(v0 + 288);
    v19 = *(_QWORD *)(v0 + 296);
    v67 = v19;
    v21 = *(_QWORD *)(v0 + 264);
    v69 = v21;
    v73 = *(_QWORD *)(v0 + 248);
    v80 = *(_QWORD *)(v0 + 256);
    v81 = *(_QWORD *)(v0 + 232);
    v65 = *(_QWORD *)(v0 + 224);
    v77 = *(_QWORD *)(v0 + 216);
    v63 = *(_QWORD *)(v0 + 200);
    v64 = *(_QWORD *)(v0 + 208);
    v62 = *(_QWORD *)(v0 + 192);
    sub_100043ECC(*(_QWORD *)(v59 + 56) + 40 * v10, (uint64_t)v58);
    v22 = type metadata accessor for TaskPriority(0);
    v75 = *(_QWORD *)(v22 - 8);
    v76 = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v15, 1, 1, v22);
    sub_10001A4CC(v58, (uint64_t)v79);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v16, v62, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v17, v63, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v20, v64, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v80, v65, v81);
    v23 = *(unsigned __int8 *)(v57 + 80);
    v24 = (v23 + 72) & ~v23;
    v25 = *(unsigned __int8 *)(v56 + 80);
    v26 = (v70 + v25 + v24) & ~v25;
    v27 = *(unsigned __int8 *)(v55 + 80);
    v28 = (v71 + v27 + v26) & ~v27;
    v72 = (v53 + v28) & 0xFFFFFFFFFFFFFFF8;
    v29 = *(unsigned __int8 *)(v54 + 80);
    v30 = (v29 + v72 + 8) & ~v29;
    v31 = swift_allocObject(&unk_100258D40, v30 + v73, v23 | v25 | v27 | v29 | 7);
    *(_QWORD *)(v31 + 16) = 0;
    v74 = (_QWORD *)(v31 + 16);
    *(_QWORD *)(v31 + 24) = 0;
    sub_10001A4CC(v79, v31 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v31 + v24, v66, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v31 + v26, v68, v67);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v31 + v28, v20, v69);
    *(_QWORD *)(v31 + v72) = v77;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v31 + v30, v80, v81);
    sub_100044264(v15, v78);
    LODWORD(v24) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v78, 1, v76);
    v32 = swift_bridgeObjectRetain(v77);
    v33 = *(_QWORD *)(v0 + 360);
    if ((_DWORD)v24 == 1)
    {
      sub_1000442AC(*(_QWORD *)(v0 + 360));
      v34 = 0;
    }
    else
    {
      v35 = TaskPriority.rawValue.getter(v32);
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v33, v76);
      v34 = v35;
    }
    v6 = v60;
    v7 = v61;
    v36 = *v74;
    if (*v74)
    {
      v37 = *(_QWORD *)(v31 + 24);
      ObjectType = swift_getObjectType(*v74);
      swift_unknownObjectRetain(v36);
      v39 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v37);
      v41 = v40;
      swift_unknownObjectRelease(v36);
    }
    else
    {
      v39 = 0;
      v41 = 0;
    }
    v42 = **(_QWORD **)(v0 + 176);
    v43 = swift_allocObject(&unk_100258D68, 32, 7);
    *(_QWORD *)(v43 + 16) = &unk_100267D70;
    *(_QWORD *)(v43 + 24) = v31;
    v44 = v41 | v39;
    if (v41 | v39)
    {
      v44 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v39;
      *(_QWORD *)(v0 + 120) = v41;
    }
    v8 = *(_QWORD *)(v0 + 368);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v44;
    *(_QWORD *)(v0 + 168) = v42;
    v9 = swift_task_create(v34 | 0x3100, v0 + 152, (char *)&type metadata for () + 8, &unk_100260200, v43);
    swift_release(v9);
    sub_1000442AC(v8);
  }
  v14 = v7 + 5;
  if (v7 + 5 >= v52)
  {
LABEL_31:
    v45 = *(_QWORD *)(v0 + 360);
    v46 = *(_QWORD *)(v0 + 368);
    v47 = *(_QWORD *)(v0 + 352);
    v48 = *(_QWORD *)(v0 + 320);
    v49 = *(_QWORD *)(v0 + 288);
    v50 = *(_QWORD *)(v0 + 256);
    swift_release(v59);
    swift_task_dealloc(v46);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v12 = *(_QWORD *)(v51 + 8 * v14);
  if (v12)
  {
    v13 = v7 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v52)
      goto LABEL_31;
    v12 = *(_QWORD *)(v51 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1001EA854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;

  v7[5] = a7;
  v7[6] = v9;
  v7[3] = a5;
  v7[4] = a6;
  v7[2] = a4;
  return swift_task_switch(sub_1001EA87C, 0, 0);
}

uint64_t sub_1001EA87C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  sub_100036228(*(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24));
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100266188 + dword_100266188);
  v1 = (_QWORD *)swift_task_alloc(unk_10026618C);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_1000433AC;
  return v3(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1001EA8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v6;

  v4[23] = a3;
  v4[24] = a4;
  v4[22] = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[25] = swift_task_alloc(v6);
  v4[26] = swift_task_alloc(v6);
  return swift_task_switch(sub_1001EA964, a3, 0);
}

void sub_1001EA964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;

  v40 = (__int128 *)(v0 + 56);
  v41 = (__int128 *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v1 + 136, v0 + 128, 0, 0);
  v2 = *(_QWORD *)(v1 + 136);
  v38 = v2 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v2 + 64);
  v39 = (unint64_t)(63 - v4) >> 6;
  v42 = *(_QWORD *)(v1 + 136);
  swift_bridgeObjectRetain(v2);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v43 = (v5 - 1) & v5;
      v10 = v6;
      v11 = v9 | (v6 << 6);
      goto LABEL_23;
    }
    v12 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v12 >= v39)
      goto LABEL_31;
    v13 = *(_QWORD *)(v38 + 8 * v12);
    v14 = v6 + 1;
    if (!v13)
    {
      v14 = v6 + 2;
      if (v6 + 2 >= v39)
        goto LABEL_31;
      v13 = *(_QWORD *)(v38 + 8 * v14);
      if (!v13)
      {
        v14 = v6 + 3;
        if (v6 + 3 >= v39)
          goto LABEL_31;
        v13 = *(_QWORD *)(v38 + 8 * v14);
        if (!v13)
        {
          v14 = v6 + 4;
          if (v6 + 4 >= v39)
            goto LABEL_31;
          v13 = *(_QWORD *)(v38 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v43 = (v13 - 1) & v13;
    v10 = v14;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_23:
    v16 = *(_QWORD *)(v0 + 200);
    v17 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 192);
    sub_100043ECC(*(_QWORD *)(v42 + 56) + 40 * v11, (uint64_t)v41);
    v19 = type metadata accessor for TaskPriority(0);
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v17, 1, 1, v19);
    sub_10001A4CC(v41, (uint64_t)v40);
    v21 = (_QWORD *)swift_allocObject(&unk_100258CF0, 80, 7);
    v21[2] = 0;
    v22 = v21 + 2;
    v21[3] = 0;
    sub_10001A4CC(v40, (uint64_t)(v21 + 4));
    v21[9] = v18;
    sub_100044264(v17, v16);
    LODWORD(v16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v16, 1, v19);
    v23 = swift_bridgeObjectRetain(v18);
    v24 = *(_QWORD *)(v0 + 200);
    if ((_DWORD)v16 == 1)
    {
      sub_1000442AC(*(_QWORD *)(v0 + 200));
      v25 = 0;
    }
    else
    {
      v26 = TaskPriority.rawValue.getter(v23);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v19);
      v25 = v26;
    }
    v6 = v10;
    v5 = v43;
    v27 = *v22;
    if (*v22)
    {
      v28 = v21[3];
      ObjectType = swift_getObjectType(*v22);
      swift_unknownObjectRetain(v27);
      v30 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v28);
      v32 = v31;
      swift_unknownObjectRelease(v27);
    }
    else
    {
      v30 = 0;
      v32 = 0;
    }
    v33 = **(_QWORD **)(v0 + 176);
    v34 = swift_allocObject(&unk_100258D18, 32, 7);
    *(_QWORD *)(v34 + 16) = &unk_100267D50;
    *(_QWORD *)(v34 + 24) = v21;
    v35 = v32 | v30;
    if (v32 | v30)
    {
      v35 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v30;
      *(_QWORD *)(v0 + 120) = v32;
    }
    v7 = *(_QWORD *)(v0 + 208);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v35;
    *(_QWORD *)(v0 + 168) = v33;
    v8 = swift_task_create(v25 | 0x3100, v0 + 152, (char *)&type metadata for () + 8, &unk_1002601D0, v34);
    swift_release(v8);
    sub_1000442AC(v7);
  }
  v15 = v6 + 5;
  if (v6 + 5 >= v39)
  {
LABEL_31:
    v36 = *(_QWORD *)(v0 + 200);
    v37 = *(_QWORD *)(v0 + 208);
    swift_release(v42);
    swift_task_dealloc(v37);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v13 = *(_QWORD *)(v38 + 8 * v15);
  if (v13)
  {
    v14 = v6 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v39)
      goto LABEL_31;
    v13 = *(_QWORD *)(v38 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1001EAD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1001EAD34, 0, 0);
}

uint64_t sub_1001EAD34()
{
  uint64_t v0;
  _QWORD *v1;

  sub_100036228(*(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_100266184);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1000438B8;
  return sub_100185FD4(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1001EAD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v6;

  v4[23] = a3;
  v4[24] = a4;
  v4[22] = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[25] = swift_task_alloc(v6);
  v4[26] = swift_task_alloc(v6);
  return swift_task_switch(sub_1001EAE04, a3, 0);
}

void sub_1001EAE04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;

  v40 = (__int128 *)(v0 + 56);
  v41 = (__int128 *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v1 + 136, v0 + 128, 0, 0);
  v2 = *(_QWORD *)(v1 + 136);
  v38 = v2 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v2 + 64);
  v39 = (unint64_t)(63 - v4) >> 6;
  v42 = *(_QWORD *)(v1 + 136);
  swift_bridgeObjectRetain(v2);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v43 = (v5 - 1) & v5;
      v10 = v6;
      v11 = v9 | (v6 << 6);
      goto LABEL_23;
    }
    v12 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v12 >= v39)
      goto LABEL_31;
    v13 = *(_QWORD *)(v38 + 8 * v12);
    v14 = v6 + 1;
    if (!v13)
    {
      v14 = v6 + 2;
      if (v6 + 2 >= v39)
        goto LABEL_31;
      v13 = *(_QWORD *)(v38 + 8 * v14);
      if (!v13)
      {
        v14 = v6 + 3;
        if (v6 + 3 >= v39)
          goto LABEL_31;
        v13 = *(_QWORD *)(v38 + 8 * v14);
        if (!v13)
        {
          v14 = v6 + 4;
          if (v6 + 4 >= v39)
            goto LABEL_31;
          v13 = *(_QWORD *)(v38 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v43 = (v13 - 1) & v13;
    v10 = v14;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_23:
    v16 = *(_QWORD *)(v0 + 200);
    v17 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 192);
    sub_100043ECC(*(_QWORD *)(v42 + 56) + 40 * v11, (uint64_t)v41);
    v19 = type metadata accessor for TaskPriority(0);
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v17, 1, 1, v19);
    sub_10001A4CC(v41, (uint64_t)v40);
    v21 = (_QWORD *)swift_allocObject(&unk_100258CA0, 80, 7);
    v21[2] = 0;
    v22 = v21 + 2;
    v21[3] = 0;
    sub_10001A4CC(v40, (uint64_t)(v21 + 4));
    v21[9] = v18;
    sub_100044264(v17, v16);
    LODWORD(v16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v16, 1, v19);
    v23 = swift_bridgeObjectRetain(v18);
    v24 = *(_QWORD *)(v0 + 200);
    if ((_DWORD)v16 == 1)
    {
      sub_1000442AC(*(_QWORD *)(v0 + 200));
      v25 = 0;
    }
    else
    {
      v26 = TaskPriority.rawValue.getter(v23);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v19);
      v25 = v26;
    }
    v6 = v10;
    v5 = v43;
    v27 = *v22;
    if (*v22)
    {
      v28 = v21[3];
      ObjectType = swift_getObjectType(*v22);
      swift_unknownObjectRetain(v27);
      v30 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v28);
      v32 = v31;
      swift_unknownObjectRelease(v27);
    }
    else
    {
      v30 = 0;
      v32 = 0;
    }
    v33 = **(_QWORD **)(v0 + 176);
    v34 = swift_allocObject(&unk_100258CC8, 32, 7);
    *(_QWORD *)(v34 + 16) = &unk_100267D30;
    *(_QWORD *)(v34 + 24) = v21;
    v35 = v32 | v30;
    if (v32 | v30)
    {
      v35 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v30;
      *(_QWORD *)(v0 + 120) = v32;
    }
    v7 = *(_QWORD *)(v0 + 208);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v35;
    *(_QWORD *)(v0 + 168) = v33;
    v8 = swift_task_create(v25 | 0x3100, v0 + 152, (char *)&type metadata for () + 8, &unk_1002601A8, v34);
    swift_release(v8);
    sub_1000442AC(v7);
  }
  v15 = v6 + 5;
  if (v6 + 5 >= v39)
  {
LABEL_31:
    v36 = *(_QWORD *)(v0 + 200);
    v37 = *(_QWORD *)(v0 + 208);
    swift_release(v42);
    swift_task_dealloc(v37);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v13 = *(_QWORD *)(v38 + 8 * v15);
  if (v13)
  {
    v14 = v6 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v39)
      goto LABEL_31;
    v13 = *(_QWORD *)(v38 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1001EB1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1001EB1D4, 0, 0);
}

uint64_t sub_1001EB1D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 24);
  sub_100036228(*(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24));
  swift_bridgeObjectRetain(v1);
  v3 = sub_10016B590(v2);
  *(_QWORD *)(v0 + 32) = v3;
  swift_bridgeObjectRelease(v1);
  v4 = (_QWORD *)swift_task_alloc(dword_10026617C);
  *(_QWORD *)(v0 + 40) = v4;
  *v4 = v0;
  v4[1] = sub_100043DE8;
  return sub_100186230(v3);
}

uint64_t sub_1001EB254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v6;

  v4[23] = a3;
  v4[24] = a4;
  v4[22] = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[25] = swift_task_alloc(v6);
  v4[26] = swift_task_alloc(v6);
  return swift_task_switch(sub_1001EB2C8, a3, 0);
}

void sub_1001EB2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;

  v40 = (__int128 *)(v0 + 56);
  v41 = (__int128 *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v1 + 136, v0 + 128, 0, 0);
  v2 = *(_QWORD *)(v1 + 136);
  v38 = v2 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v2 + 64);
  v39 = (unint64_t)(63 - v4) >> 6;
  v42 = *(_QWORD *)(v1 + 136);
  swift_bridgeObjectRetain(v2);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v43 = (v5 - 1) & v5;
      v10 = v6;
      v11 = v9 | (v6 << 6);
      goto LABEL_23;
    }
    v12 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v12 >= v39)
      goto LABEL_31;
    v13 = *(_QWORD *)(v38 + 8 * v12);
    v14 = v6 + 1;
    if (!v13)
    {
      v14 = v6 + 2;
      if (v6 + 2 >= v39)
        goto LABEL_31;
      v13 = *(_QWORD *)(v38 + 8 * v14);
      if (!v13)
      {
        v14 = v6 + 3;
        if (v6 + 3 >= v39)
          goto LABEL_31;
        v13 = *(_QWORD *)(v38 + 8 * v14);
        if (!v13)
        {
          v14 = v6 + 4;
          if (v6 + 4 >= v39)
            goto LABEL_31;
          v13 = *(_QWORD *)(v38 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v43 = (v13 - 1) & v13;
    v10 = v14;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_23:
    v16 = *(_QWORD *)(v0 + 200);
    v17 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 192);
    sub_100043ECC(*(_QWORD *)(v42 + 56) + 40 * v11, (uint64_t)v41);
    v19 = type metadata accessor for TaskPriority(0);
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v17, 1, 1, v19);
    sub_10001A4CC(v41, (uint64_t)v40);
    v21 = (_QWORD *)swift_allocObject(&unk_100258C50, 80, 7);
    v21[2] = 0;
    v22 = v21 + 2;
    v21[3] = 0;
    sub_10001A4CC(v40, (uint64_t)(v21 + 4));
    v21[9] = v18;
    sub_100044264(v17, v16);
    LODWORD(v16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v16, 1, v19);
    v23 = swift_bridgeObjectRetain(v18);
    v24 = *(_QWORD *)(v0 + 200);
    if ((_DWORD)v16 == 1)
    {
      sub_1000442AC(*(_QWORD *)(v0 + 200));
      v25 = 0;
    }
    else
    {
      v26 = TaskPriority.rawValue.getter(v23);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v19);
      v25 = v26;
    }
    v6 = v10;
    v5 = v43;
    v27 = *v22;
    if (*v22)
    {
      v28 = v21[3];
      ObjectType = swift_getObjectType(*v22);
      swift_unknownObjectRetain(v27);
      v30 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v28);
      v32 = v31;
      swift_unknownObjectRelease(v27);
    }
    else
    {
      v30 = 0;
      v32 = 0;
    }
    v33 = **(_QWORD **)(v0 + 176);
    v34 = swift_allocObject(&unk_100258C78, 32, 7);
    *(_QWORD *)(v34 + 16) = &unk_100267D10;
    *(_QWORD *)(v34 + 24) = v21;
    v35 = v32 | v30;
    if (v32 | v30)
    {
      v35 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v30;
      *(_QWORD *)(v0 + 120) = v32;
    }
    v7 = *(_QWORD *)(v0 + 208);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v35;
    *(_QWORD *)(v0 + 168) = v33;
    v8 = swift_task_create(v25 | 0x3100, v0 + 152, (char *)&type metadata for () + 8, &unk_100260180, v34);
    swift_release(v8);
    sub_1000442AC(v7);
  }
  v15 = v6 + 5;
  if (v6 + 5 >= v39)
  {
LABEL_31:
    v36 = *(_QWORD *)(v0 + 200);
    v37 = *(_QWORD *)(v0 + 208);
    swift_release(v42);
    swift_task_dealloc(v37);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v13 = *(_QWORD *)(v38 + 8 * v15);
  if (v13)
  {
    v14 = v6 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v39)
      goto LABEL_31;
    v13 = *(_QWORD *)(v38 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1001EB680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1001EB698, 0, 0);
}

uint64_t sub_1001EB698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 24);
  sub_100036228(*(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24));
  swift_bridgeObjectRetain(v1);
  v3 = sub_10016B590(v2);
  *(_QWORD *)(v0 + 32) = v3;
  swift_bridgeObjectRelease(v1);
  v4 = (_QWORD *)swift_task_alloc(dword_100266174);
  *(_QWORD *)(v0 + 40) = v4;
  *v4 = v0;
  v4[1] = sub_1001EC1BC;
  return sub_1001864AC(v3);
}

uint64_t sub_1001EB718()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B440);
  sub_100037A9C(v0, (uint64_t)qword_10027B440);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0xD000000000000015, 0x8000000100202240);
}

uint64_t sub_1001EB798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc(dword_100267CAC);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_10003BF7C;
  v8[4] = a3;
  v8[5] = v3;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch(sub_1001E8DC8, v3, 0);
}

uint64_t sub_1001EB80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;

  v12 = (_QWORD *)swift_task_alloc(dword_100267CBC);
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_10003BF7C;
  v12[6] = a5;
  v12[7] = v5;
  v12[4] = a3;
  v12[5] = a4;
  v12[2] = a1;
  v12[3] = a2;
  return swift_task_switch(sub_1001E8EA8, v5, 0);
}

uint64_t sub_1001EB894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100267CCC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_1001E8F80, v1, 0);
}

uint64_t sub_1001EB8F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100267CDC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_1001E9048, v1, 0);
}

uint64_t sub_1001EB954(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100267CEC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_1001E9110, v1, 0);
}

uint64_t sub_1001EB9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_100267CFC);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_10003BF7C;
  return sub_1001EB254(a1, a2, v7, v6);
}

uint64_t sub_1001EBA24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 32;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = (_QWORD *)swift_task_alloc(dword_100267D0C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10003BF7C;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_1001EB698, 0, 0);
}

uint64_t sub_1001EBA88()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EBAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_100267D1C);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_10003BF7C;
  return sub_1001EAD90(a1, a2, v7, v6);
}

uint64_t sub_1001EBB1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 32;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = (_QWORD *)swift_task_alloc(dword_100267D2C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10003BF7C;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_1001EB1D4, 0, 0);
}

uint64_t sub_1001EBB80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_100267D3C);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_1000087DC;
  return sub_1001EA8F0(a1, a2, v7, v6);
}

uint64_t sub_1001EBBF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 32;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = (_QWORD *)swift_task_alloc(dword_100267D4C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10003BF7C;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_1001EAD34, 0, 0);
}

uint64_t sub_1001EBC54(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v11 = v2[6];
  v10 = v2[7];
  v12 = (_QWORD *)swift_task_alloc(dword_100267D5C);
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_10003BF7C;
  return sub_1001EA198(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_1001EBCE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = type metadata accessor for Account(0);
  v1 = *(_QWORD *)(v24 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v19 = (v2 + 72) & ~v2;
  v3 = *(_QWORD *)(v1 + 64);
  v23 = type metadata accessor for Destination(0);
  v4 = *(_QWORD *)(v23 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v18 = (v19 + v3 + v5) & ~v5;
  v6 = *(_QWORD *)(v4 + 64);
  v22 = sub_100037A5C(&qword_100266130);
  v7 = *(_QWORD *)(v22 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v18 + v6 + v8) & ~v8;
  v10 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = v10;
  v11 = type metadata accessor for MessageContext(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v10 + v13 + 8) & ~v13;
  v20 = v14 + *(_QWORD *)(v12 + 64);
  v21 = v11;
  v15 = v2 | v5 | v13 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10002BB90((_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v19, v24);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v18, v23);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v22);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v17));
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0 + v14, v21);
  return swift_deallocObject(v0, v20, v15);
}

uint64_t sub_1001EBE54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v2 = *(_QWORD *)(type metadata accessor for Account(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for Destination(0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_100037A5C(&qword_100266130) - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessageContext(0) - 8) + 80);
  v12 = v10 + v11 + 8;
  v13 = v0 + 32;
  v14 = v0 + v3;
  v15 = v0 + v6;
  v16 = v0 + v9;
  v17 = v0 + (v12 & ~v11);
  v18 = (_QWORD *)swift_task_alloc(dword_100267D6C);
  *(_QWORD *)(v1 + 16) = v18;
  *v18 = v1;
  v18[1] = sub_10003BF7C;
  v18[5] = v16;
  v18[6] = v17;
  v18[3] = v14;
  v18[4] = v15;
  v18[2] = v13;
  return swift_task_switch(sub_1001EA87C, 0, 0);
}

uint64_t sub_1001EBF64(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_100267D7C);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10003BF7C;
  return sub_1001E9B30(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1001EBFE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = type metadata accessor for Account(0);
  v1 = *(_QWORD *)(v17 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 72) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v16 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v16 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = type metadata accessor for Destination(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + v11) & ~v11;
  v15 = v12 + *(_QWORD *)(v10 + 64);
  v13 = v2 | v6 | v11 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10002BB90((_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_1001EC0EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v2 = *(_QWORD *)(type metadata accessor for Account(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Destination(0) - 8) + 80);
  v9 = v6 + v7 + v8;
  v10 = v0 + 32;
  v11 = v0 + v3;
  v12 = v0 + v6;
  v13 = v0 + (v9 & ~v8);
  v14 = (_QWORD *)swift_task_alloc(dword_100267D8C);
  *(_QWORD *)(v1 + 16) = v14;
  *v14 = v1;
  v14[1] = sub_10003BF7C;
  v14[4] = v12;
  v14[5] = v13;
  v14[2] = v10;
  v14[3] = v11;
  return swift_task_switch(sub_1001EA138, 0, 0);
}

uint64_t sub_1001EC1D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_100267D98);
  v1 = sub_100037A9C(v0, (uint64_t)qword_100267D98);
  if (qword_10025FBF8 != -1)
    swift_once(&qword_10025FBF8, sub_1001EF000);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027B458);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001EC260(char a1)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  if (a1 == 2)
    return 0x6E776F6E6B6E752ELL;
  if (a1 == 3)
    return 0x6C616974696E692ELL;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  if ((a1 & 1) != 0)
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000018;
}

uint64_t sub_1001EC354()
{
  char *v0;

  return sub_1001EC260(*v0);
}

uint64_t sub_1001EC35C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1001EC374, v0, 0);
}

id sub_1001EC374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id result;
  void *v7;
  uint64_t v8;
  NSString v9;
  unsigned __int8 v10;

  if (qword_10025FBF0 != -1)
    swift_once(&qword_10025FBF0, sub_1001EC1D0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_100267D98);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AppDeletionService startup", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(v0 + 16);
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v7, "applicationIsInstalled:", v9);

    *(_BYTE *)(v8 + 137) = v10;
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001EC4C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *v0;
  v2 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v8 = sub_100018A7C(qword_100267F18, v7, (uint64_t (*)(uint64_t))type metadata accessor for AppDeletionService, (uint64_t)&unk_1001FC334);
  v9 = (_QWORD *)swift_allocObject(&unk_100258EE8, 48, 7);
  v9[2] = v0;
  v9[3] = v8;
  v9[4] = v0;
  v9[5] = v1;
  swift_retain_n(v0, 2);
  v10 = sub_10005582C((uint64_t)v4, (uint64_t)&unk_100267F50, (uint64_t)v9);
  swift_release(v10);
  v6(v4, 1, 1, v5);
  v11 = (_QWORD *)swift_allocObject(&unk_100258F10, 48, 7);
  v11[2] = v0;
  v11[3] = v8;
  v11[4] = v0;
  v11[5] = v1;
  swift_retain_n(v0, 2);
  v12 = sub_10005582C((uint64_t)v4, (uint64_t)&unk_100267F60, (uint64_t)v11);
  return swift_release(v12);
}

uint64_t sub_1001EC61C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[4] = a1;
  v3[5] = a2;
  v4 = type metadata accessor for SystemVersionNumber(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[8] = swift_task_alloc(v6);
  v3[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_1001EC68C, v2, 0);
}

uint64_t sub_1001EC68C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  NSObject *log;
  uint64_t v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;

  if (qword_10025FBF0 != -1)
    swift_once(&qword_10025FBF0, sub_1001EC1D0);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_100267D98);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v2, v1, v4);
  v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v3, v6, v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  v12 = os_log_type_enabled(v10, v11);
  v14 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 48);
  v15 = *(_QWORD *)(v0 + 56);
  if (v12)
  {
    v30 = *(_QWORD *)(v0 + 64);
    type = v11;
    v17 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v33 = v32;
    *(_DWORD *)v17 = 136315394;
    log = v10;
    v18 = sub_100018A7C(&qword_100260108, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v21 = v20;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v19, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v13, v16);
    *(_WORD *)(v17 + 12) = 2080;
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v25 = v24;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v23, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v25);
    v22(v30, v16);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Migrate from %s to %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v26 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v26(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48));
    v26(v14, v16);

  }
  v27 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001EC920(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(uint64_t, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[24];

  v41 = a1;
  v3 = sub_100037A5C(&qword_100263488);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v42 = v5;
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v7);
  v43 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v35 - v14;
  a2 += 16;
  swift_beginAccess(a2, v44, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v17 = result;
    UUID.init()(result);
    v38 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v38(v13, v15, v9);
    v18 = v3;
    v19 = *(unsigned __int8 *)(v10 + 80);
    v36 = v6;
    v20 = (v19 + 24) & ~v19;
    v37 = v19 | 7;
    v21 = swift_allocObject(&unk_100258F38, v20 + v11, v19 | 7);
    v22 = v10;
    v40 = v10;
    v23 = v4;
    v24 = v21;
    *(_QWORD *)(v21 + 16) = v17;
    v39 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
    v39(v21 + v20, v13, v9);
    swift_retain(v17);
    v25 = v24;
    v26 = v18;
    v35 = v18;
    v27 = v41;
    AsyncStream.Continuation.onTermination.setter(sub_1001EF0F4, v25, v18);
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v43, 1, 1, v28);
    v29 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v36, v27, v26);
    v38(v13, v15, v9);
    v30 = *(unsigned __int8 *)(v23 + 80);
    v31 = (v30 + 40) & ~v30;
    v32 = (v42 + v19 + v31) & ~v19;
    v33 = (char *)swift_allocObject(&unk_100258F60, v32 + v11, v37 | v30);
    *((_QWORD *)v33 + 2) = 0;
    *((_QWORD *)v33 + 3) = 0;
    *((_QWORD *)v33 + 4) = v17;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v33[v31], v29, v35);
    v39((uint64_t)&v33[v32], v13, v9);
    swift_retain(v17);
    v34 = sub_10005582C(v43, (uint64_t)&unk_100267FA0, (uint64_t)v33);
    swift_release(v17);
    swift_release(v34);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v15, v9);
  }
  return result;
}

uint64_t sub_1001ECBFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v5);
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (v12 + 40) & ~v12;
  v14 = (char *)swift_allocObject(&unk_100258F88, v13 + v7, v12 | 7);
  *((_QWORD *)v14 + 2) = 0;
  *((_QWORD *)v14 + 3) = 0;
  *((_QWORD *)v14 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_retain(a2);
  v15 = sub_10005582C((uint64_t)v10, (uint64_t)&unk_100267FB0, (uint64_t)v14);
  return swift_release(v15);
}

uint64_t sub_1001ECD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1001ECD58, a4, 0);
}

uint64_t sub_1001ECD58()
{
  uint64_t v0;

  sub_1001ED728(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ECD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v8 = sub_100037A5C(&qword_100267F90);
  v6[5] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[6] = v9;
  v6[7] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001ECDF4, a4, 0);
}

uint64_t sub_1001ECDF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1001ED424(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  *(_BYTE *)(v0 + 65) = *(_BYTE *)(v1 + 136);
  return swift_task_switch(sub_1001ECE3C, 0, 0);
}

uint64_t sub_1001ECE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  *(_BYTE *)(v0 + 64) = *(_BYTE *)(v0 + 65);
  v4 = sub_100037A5C(&qword_100263488);
  AsyncStream.Continuation.yield(_:)(v0 + 64, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ECEC0(int a1)
{
  unint64_t v1;
  unint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  os_log_t v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[3];

  v2 = v1;
  LODWORD(v3) = a1;
  v4 = sub_100037A5C(&qword_100267F90);
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100263488);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9);
  v14 = (char *)&v50 - v13;
  v15 = *(unsigned __int8 *)(v1 + 136);
  if (v15 == 2)
  {
    if (v3 == 2)
      return result;
    goto LABEL_9;
  }
  if (v15 == 3)
  {
    if (v3 == 3)
      return result;
    goto LABEL_9;
  }
  if ((v3 & 0xFE) == 2 || ((v3 ^ ((v15 & 1) == 0)) & 1) == 0)
  {
LABEL_9:
    if (qword_10025FBF0 != -1)
LABEL_43:
      swift_once(&qword_10025FBF0, sub_1001EC1D0);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100037A9C(v16, (uint64_t)qword_100267D98);
    v18 = swift_retain_n(v2, 2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      v22 = swift_slowAlloc(22, -1);
      v52 = v19;
      v55 = v17;
      LODWORD(v54) = v21;
      v23 = v22;
      v53 = swift_slowAlloc(64, -1);
      v59[0] = v53;
      *(_DWORD *)v23 = 136315394;
      v51 = v23 + 4;
      v24 = sub_1001EC260(*(_BYTE *)(v2 + 136));
      v26 = v25;
      v58 = sub_10002BA84(v24, v25, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v51, v23 + 12);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v23 + 12) = 2080;
      v51 = v23 + 14;
      v27 = sub_1001EC260(v3);
      v29 = v28;
      v58 = sub_10002BA84(v27, v28, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v51, v23 + 22);
      swift_bridgeObjectRelease(v29);
      v30 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v54, "State: %s -> %s", (uint8_t *)v23, 0x16u);
      v31 = v53;
      swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_release_n(v2, 2);
    }
    v32 = v3;
    *(_BYTE *)(v2 + 136) = v3;
    v33 = (uint64_t *)(v2 + 128);
    swift_beginAccess(v2 + 128, v59, 0, 0);
    v35 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 16);
    if (v35)
    {
      v36 = Logger.logObject.getter(v34);
      v37 = static os_log_type_t.default.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v55 = (int64_t)v33;
        v39 = v38;
        *(_DWORD *)v38 = 134217984;
        v58 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v38 + 4, v38 + 12);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Publishing State change event to %ld subscribers", v39, 0xCu);
        v40 = v39;
        v33 = (uint64_t *)v55;
        swift_slowDealloc(v40, -1, -1);
      }

    }
    v41 = *v33;
    v42 = *(_QWORD *)(v41 + 64);
    v54 = v41 + 64;
    v43 = 1 << *(_BYTE *)(v41 + 32);
    v44 = -1;
    if (v43 < 64)
      v44 = ~(-1 << v43);
    v2 = v44 & v42;
    v55 = (unint64_t)(v43 + 63) >> 6;
    swift_bridgeObjectRetain(v41);
    v3 = 0;
    while (1)
    {
      if (v2)
      {
        v45 = __clz(__rbit64(v2));
        v2 &= v2 - 1;
        v46 = v45 | (v3 << 6);
      }
      else
      {
        v47 = v3 + 1;
        if (__OFADD__(v3, 1))
        {
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        if (v47 >= v55)
          return swift_release(v41);
        v48 = *(_QWORD *)(v54 + 8 * v47);
        ++v3;
        if (!v48)
        {
          v3 = v47 + 1;
          if (v47 + 1 >= v55)
            return swift_release(v41);
          v48 = *(_QWORD *)(v54 + 8 * v3);
          if (!v48)
          {
            v3 = v47 + 2;
            if (v47 + 2 >= v55)
              return swift_release(v41);
            v48 = *(_QWORD *)(v54 + 8 * v3);
            if (!v48)
            {
              v3 = v47 + 3;
              if (v47 + 3 >= v55)
                return swift_release(v41);
              v48 = *(_QWORD *)(v54 + 8 * v3);
              if (!v48)
              {
                v49 = v47 + 4;
                if (v49 >= v55)
                  return swift_release(v41);
                v48 = *(_QWORD *)(v54 + 8 * v49);
                if (!v48)
                {
                  while (1)
                  {
                    v3 = v49 + 1;
                    if (__OFADD__(v49, 1))
                      goto LABEL_42;
                    if (v3 >= v55)
                      return swift_release(v41);
                    v48 = *(_QWORD *)(v54 + 8 * v3);
                    ++v49;
                    if (v48)
                      goto LABEL_38;
                  }
                }
                v3 = v49;
              }
            }
          }
        }
LABEL_38:
        v2 = (v48 - 1) & v48;
        v46 = __clz(__rbit64(v48)) + (v3 << 6);
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v14, *(_QWORD *)(v41 + 56) + *(_QWORD *)(v8 + 72) * v46, v7);
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v14, v7);
      LOBYTE(v58) = v32;
      AsyncStream.Continuation.yield(_:)(&v58, v7);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v6, v57);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
  }
  return result;
}

uint64_t sub_1001ED424(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];

  v3 = v2;
  v6 = sub_100037A5C(&qword_100263480);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  if (qword_10025FBF0 != -1)
    swift_once(&qword_10025FBF0, sub_1001EC1D0);
  v16 = type metadata accessor for Logger(0);
  sub_100037A9C(v16, (uint64_t)qword_100267D98);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v38 = a2;
  v17 = v37(v15, a2, v9);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(12, -1);
    v35 = a1;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v36 = v2;
    v23 = v22;
    v40[0] = v22;
    v34 = v13;
    *(_DWORD *)v21 = 136446210;
    v33 = v21 + 4;
    v24 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v9, v24);
    v27 = v26;
    v39 = sub_10002BA84(v25, v26, v40);
    v13 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v33, v21 + 12);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Storing stateContinuation for %{public}s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v28 = v23;
    v3 = v36;
    swift_slowDealloc(v28, -1, -1);
    v29 = v21;
    a1 = v35;
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }

  v37(v13, v38, v9);
  v30 = sub_100037A5C(&qword_100263488);
  v31 = *(_QWORD *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v8, a1, v30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v8, 0, 1, v30);
  swift_beginAccess(v3 + 128, v40, 33, 0);
  sub_1000DE6A0((uint64_t)v8, (uint64_t)v13);
  return swift_endAccess(v40);
}

uint64_t sub_1001ED728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38[3];

  v2 = v1;
  v4 = sub_100037A5C(&qword_100263480);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v36 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - v11;
  if (qword_10025FBF0 != -1)
    swift_once(&qword_10025FBF0, sub_1001EC1D0);
  v13 = type metadata accessor for Logger(0);
  sub_100037A9C(v13, (uint64_t)qword_100267D98);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15 = v14(v12, a1, v7);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(12, -1);
    v34 = v6;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v35 = v1;
    v21 = v20;
    v38[0] = v20;
    v33 = a1;
    *(_DWORD *)v19 = 136446210;
    v32 = v19 + 4;
    v22 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v7, v22);
    v25 = v24;
    v37 = sub_10002BA84(v23, v24, v38);
    a1 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v32, v19 + 12);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Removing stateContinuation for %{public}s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v26 = v21;
    v2 = v35;
    swift_slowDealloc(v26, -1, -1);
    v27 = v19;
    v6 = v34;
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }

  v28 = (uint64_t)v36;
  v14(v36, a1, v7);
  v29 = sub_100037A5C(&qword_100263488);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v6, 1, 1, v29);
  swift_beginAccess(v2 + 128, v38, 33, 0);
  sub_1000DE6A0((uint64_t)v6, v28);
  return swift_endAccess(v38);
}

uint64_t type metadata accessor for AppDeletionService()
{
  return objc_opt_self(_TtC13findmylocated18AppDeletionService);
}

uint64_t getEnumTagSinglePayload for AppDeletionService.State(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 1;
      if (v7 > 1)
        return result;
    }
    return 0;
  }
  v2 = a2 + 3;
  if (a2 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if (v2 >> 8 < 0xFF)
    v3 = 1;
  if (v2 >= 0x100)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1001EDA84 + 4 * byte_1001FC210[v4]))();
}

uint64_t storeEnumTagSinglePayload for AppDeletionService.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFD)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001EDB30 + 4 * byte_1001FC21A[v5]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001EDB64 + 4 * byte_1001FC215[v5]))();
}

uint64_t sub_1001EDB64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EDB6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001EDB74);
  return result;
}

uint64_t sub_1001EDB80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001EDB88);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001EDB8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EDB94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppDeletionService.State()
{
  return &type metadata for AppDeletionService.State;
}

uint64_t sub_1001EDBB0()
{
  uint64_t v0;

  return swift_task_switch(sub_1001EDBC4, v0, 0);
}

uint64_t sub_1001EDBC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_10025FBF0 != -1)
    swift_once(&qword_10025FBF0, sub_1001EC1D0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_100267D98);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "initialLaunchProcessing", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001EDCA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100267DE4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_1001EC61C(a1, a2);
}

uint64_t sub_1001EDCFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for AppDeletionService();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_1001EDD5C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100267DDC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1000087DC;
  v2[2] = v0;
  return swift_task_switch(sub_1001EC374, v0, 0);
}

uint64_t sub_1001EDDB8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1001EDDD0, v0, 0);
}

uint64_t sub_1001EDDD0()
{
  uint64_t v0;

  sub_1001EC4C8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001EDE04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for AppDeletionService();
  v2 = sub_100018A7C(&qword_100261EF0, v1, (uint64_t (*)(uint64_t))type metadata accessor for AppDeletionService, (uint64_t)&unk_1001FC2D4);
  return ActorServiceProtocol.description.getter(v0, v2);
}

uint64_t sub_1001EDE50(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(&qword_100267F10, a2, (uint64_t (*)(uint64_t))type metadata accessor for AppDeletionService, (uint64_t)&unk_1001FC2AC);
}

uint64_t sub_1001EDE7C(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(qword_100267F18, a2, (uint64_t (*)(uint64_t))type metadata accessor for AppDeletionService, (uint64_t)&unk_1001FC334);
}

uint64_t sub_1001EDEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[2] = a4;
  v6 = type metadata accessor for DistributedNotification(0);
  v4[3] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[4] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[5] = swift_task_alloc(v8);
  v4[6] = swift_task_alloc(v8);
  v9 = sub_100037A5C(&qword_100267F68);
  v4[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100267F70);
  v4[8] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[9] = v11;
  v4[10] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C(&qword_100267F78);
  v4[11] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[12] = v13;
  v4[13] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001EDF98, a4, 0);
}

uint64_t sub_1001EDF98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025FBF0 != -1)
    swift_once(&qword_10025FBF0, sub_1001EC1D0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_100267D98);
  *(_QWORD *)(v0 + 112) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Registering listener for Distributed notification: com.apple.LaunchServices.applicationRegistered", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 120) = v6;
  *v6 = v0;
  v6[1] = sub_1001EE098;
  return daemon.getter();
}

uint64_t sub_1001EE098(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v3);
  v4 = type metadata accessor for Daemon(0);
  v5 = sub_100018A7C((unint64_t *)&qword_100261630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_1001EE130, v6, v7);
}

uint64_t sub_1001EE130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 136) = Daemon.distributedNotificationHandler.getter();
  swift_release(v1);
  v2 = type metadata accessor for DistributedNotificationHandler(0);
  v3 = sub_100018A7C(&qword_100267F80, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DistributedNotificationHandler, (uint64_t)&protocol conformance descriptor for DistributedNotificationHandler);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_1001EE1C8, v4, v5);
}

uint64_t sub_1001EE1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 16);
  dispatch thunk of DistributedNotificationHandler.asyncStream(name:)(0xD00000000000002ELL, 0x8000000100202330);
  swift_release(v1);
  return swift_task_switch(sub_1001EE22C, v2, 0);
}

uint64_t sub_1001EE22C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = sub_100018A7C(qword_100267F18, v4, (uint64_t (*)(uint64_t))type metadata accessor for AppDeletionService, (uint64_t)&unk_1001FC334);
  v0[18] = v5;
  v6 = v0[2];
  v7 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[19] = v7;
  *v7 = v0;
  v7[1] = sub_1001EE2E0;
  return AsyncStream.Iterator.next(isolation:)(v0[7], v6, v5, v0[11]);
}

uint64_t sub_1001EE2E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_task_switch(sub_1001EE338, v1, 0);
}

uint64_t sub_1001EE338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(v4, *(_QWORD *)(v0 + 88));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v1);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9, v1, v2);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v9, v2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    v14 = os_log_type_enabled(v12, v13);
    v16 = *(_QWORD *)(v0 + 32);
    v15 = *(_QWORD *)(v0 + 40);
    v17 = *(_QWORD *)(v0 + 24);
    if (v14)
    {
      v18 = swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v30 = v19;
      *(_DWORD *)v18 = 136315138;
      v20 = sub_100018A7C(&qword_100267F88, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DistributedNotification, (uint64_t)&protocol conformance descriptor for DistributedNotification);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      v23 = v22;
      *(_QWORD *)(v18 + 4) = sub_10002BA84(v21, v22, &v30);
      swift_bridgeObjectRelease(v23);
      v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v24(v15, v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Process application registered: %s", (uint8_t *)v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v24(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
    }

    v25 = *(_QWORD *)(v0 + 48);
    v26 = *(_QWORD *)(v0 + 24);
    sub_1001EE62C();
    v24(v25, v26);
    v27 = *(_QWORD *)(v0 + 144);
    v28 = *(_QWORD *)(v0 + 16);
    v29 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 152) = v29;
    *v29 = v0;
    v29[1] = sub_1001EE2E0;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 56), v28, v27, *(_QWORD *)(v0 + 88));
  }
}

uint64_t sub_1001EE5B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100267F4C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003BF7C;
  return sub_1001EDEA8(a1, v4, v5, v6);
}

id sub_1001EE62C()
{
  uint64_t v0;
  uint64_t v1;
  id result;
  void *v3;
  NSString v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v3 = result;
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "applicationIsInstalled:", v4);

    if (qword_10025FBF0 != -1)
      swift_once(&qword_10025FBF0, sub_1001EC1D0);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100037A9C(v6, (uint64_t)qword_100267D98);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(64, -1);
      v15 = v11;
      *(_DWORD *)v10 = 136446466;
      v14 = sub_10002BA84(0xD000000000000027, 0x8000000100202300, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4, v10 + 12);
      *(_WORD *)(v10 + 12) = 2080;
      if (v5)
        v12 = 7562585;
      else
        v12 = 28494;
      if (v5)
        v13 = 0xE300000000000000;
      else
        v13 = 0xE200000000000000;
      v14 = sub_10002BA84(v12, v13, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 14, v10 + 22);
      swift_bridgeObjectRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s isFindMyAppInstalled: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

    *(_BYTE *)(v1 + 137) = v5;
    return (id)sub_1001ECEC0(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001EE87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[2] = a4;
  v6 = type metadata accessor for DistributedNotification(0);
  v4[3] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[4] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[5] = swift_task_alloc(v8);
  v4[6] = swift_task_alloc(v8);
  v9 = sub_100037A5C(&qword_100267F68);
  v4[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100267F70);
  v4[8] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[9] = v11;
  v4[10] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C(&qword_100267F78);
  v4[11] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[12] = v13;
  v4[13] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001EE96C, a4, 0);
}

uint64_t sub_1001EE96C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025FBF0 != -1)
    swift_once(&qword_10025FBF0, sub_1001EC1D0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_100267D98);
  *(_QWORD *)(v0 + 112) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Registering listener for Distributed notification: com.apple.LaunchServices.applicationUnregistered", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 120) = v6;
  *v6 = v0;
  v6[1] = sub_1001EEA6C;
  return daemon.getter();
}

uint64_t sub_1001EEA6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v3);
  v4 = type metadata accessor for Daemon(0);
  v5 = sub_100018A7C((unint64_t *)&qword_100261630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_1001EEB04, v6, v7);
}

uint64_t sub_1001EEB04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 136) = Daemon.distributedNotificationHandler.getter();
  swift_release(v1);
  v2 = type metadata accessor for DistributedNotificationHandler(0);
  v3 = sub_100018A7C(&qword_100267F80, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DistributedNotificationHandler, (uint64_t)&protocol conformance descriptor for DistributedNotificationHandler);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_1001EEB9C, v4, v5);
}

uint64_t sub_1001EEB9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 16);
  dispatch thunk of DistributedNotificationHandler.asyncStream(name:)(0xD000000000000030, 0x80000001002022C0);
  swift_release(v1);
  return swift_task_switch(sub_1001EEC00, v2, 0);
}

uint64_t sub_1001EEC00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = sub_100018A7C(qword_100267F18, v4, (uint64_t (*)(uint64_t))type metadata accessor for AppDeletionService, (uint64_t)&unk_1001FC334);
  v0[18] = v5;
  v6 = v0[2];
  v7 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[19] = v7;
  *v7 = v0;
  v7[1] = sub_1001EECB4;
  return AsyncStream.Iterator.next(isolation:)(v0[7], v6, v5, v0[11]);
}

uint64_t sub_1001EECB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_task_switch(sub_1001EED0C, v1, 0);
}

uint64_t sub_1001EED0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(v4, *(_QWORD *)(v0 + 88));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v1);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9, v1, v2);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v9, v2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    v14 = os_log_type_enabled(v12, v13);
    v16 = *(_QWORD *)(v0 + 32);
    v15 = *(_QWORD *)(v0 + 40);
    v17 = *(_QWORD *)(v0 + 24);
    if (v14)
    {
      v18 = swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v30 = v19;
      *(_DWORD *)v18 = 136315138;
      v20 = sub_100018A7C(&qword_100267F88, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DistributedNotification, (uint64_t)&protocol conformance descriptor for DistributedNotification);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      v23 = v22;
      *(_QWORD *)(v18 + 4) = sub_10002BA84(v21, v22, &v30);
      swift_bridgeObjectRelease(v23);
      v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v24(v15, v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Process application unregistered: %s", (uint8_t *)v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v24(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
    }

    v25 = *(_QWORD *)(v0 + 48);
    v26 = *(_QWORD *)(v0 + 24);
    sub_1001EE62C();
    v24(v25, v26);
    v27 = *(_QWORD *)(v0 + 144);
    v28 = *(_QWORD *)(v0 + 16);
    v29 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 152) = v29;
    *v29 = v0;
    v29[1] = sub_1001EECB4;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 56), v28, v27, *(_QWORD *)(v0 + 88));
  }
}

uint64_t sub_1001EEF88(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100267F5C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000087DC;
  return sub_1001EE87C(a1, v4, v5, v6);
}

uint64_t sub_1001EF000()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B458);
  sub_100037A9C(v0, (uint64_t)qword_10027B458);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0xD000000000000012, 0x80000001001FC220);
}

uint64_t sub_1001EF080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001EF0F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1001ECBFC(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_1001EF134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_100037A5C(&qword_100263488);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1001EF1FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100263488) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc(dword_100267F9C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10003BF7C;
  return sub_1001ECD88(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_1001EF2BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001EF338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_100267FAC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003BF7C;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_1001ECD58, v3, 0);
}

unsigned __int8 *sub_1001EF3B4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001EF4AC(a1, a2, a3);
}

unsigned __int8 *sub_1001EF3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  v4 = swift_bridgeObjectRetain(a2);
  v5 = String.init<A>(_:)(&v15, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v4);
  v7 = v5;
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_1001EF728(v5, v6);
  v12 = v11;
  swift_bridgeObjectRelease(v8);
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
  }
LABEL_7:
  v13 = sub_1001EF4AC(v9, v10, a3);
  swift_bridgeObjectRelease(v8);
  return v13;
}

unsigned __int8 *sub_1001EF4AC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1001EF728(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_1001EF7A4(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1001EF7A4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1001EF8E8(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_10002C3A8(v12, 0);
      v5 = sub_1001EF9D4((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_1001EF8E8(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_100050FD0(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_100050FD0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_1001EF9D4(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_100050FD0(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_100050FD0(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1001EFBE4(uint64_t a1)
{
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  _QWORD v28[3];

  if ((static SystemInfo.isInternalBuild.getter(a1) & 1) == 0)
    return 0;
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "stringForKey:", v2);

  if (!v3)
    return 0;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v8 = HIBYTE(v6) & 0xF;
  v9 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v6) & 0xF;
  else
    v10 = v4 & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
    swift_bridgeObjectRelease(v6);
    return 0;
  }
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
    {
      if ((v4 & 0x1000000000000000) != 0)
        v11 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v11 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v4, v6);
      v12 = (uint64_t)sub_1001EF4AC(v11, v9, 10);
      LOBYTE(v4) = v13 & 1;
      goto LABEL_46;
    }
    v28[0] = v4;
    v28[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    if (v4 == 43)
    {
      if (!v8)
        goto LABEL_60;
      if (v8 == 1 || (BYTE1(v4) - 48) > 9u)
        goto LABEL_33;
      v12 = (BYTE1(v4) - 48);
      if (v8 != 2)
      {
        if ((BYTE2(v4) - 48) > 9u)
          goto LABEL_33;
        v12 = 10 * (BYTE1(v4) - 48) + (BYTE2(v4) - 48);
        v14 = v8 - 3;
        if (v14)
        {
          v15 = (unsigned __int8 *)v28 + 3;
          while (1)
          {
            v16 = *v15 - 48;
            if (v16 > 9)
              goto LABEL_33;
            v17 = 10 * v12;
            if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63)
              goto LABEL_33;
            v12 = v17 + v16;
            if (__OFADD__(v17, v16))
              goto LABEL_33;
            LOBYTE(v4) = 0;
            ++v15;
            if (!--v14)
              goto LABEL_46;
          }
        }
      }
    }
    else
    {
      if (v4 == 45)
      {
        if (v8)
        {
          if (v8 != 1 && (BYTE1(v4) - 48) <= 9u)
          {
            if (v8 == 2)
            {
              LOBYTE(v4) = 0;
              v12 = -(uint64_t)(BYTE1(v4) - 48);
              goto LABEL_46;
            }
            if ((BYTE2(v4) - 48) <= 9u)
            {
              v12 = -10 * (BYTE1(v4) - 48) - (BYTE2(v4) - 48);
              v22 = v8 - 3;
              if (!v22)
                goto LABEL_45;
              v24 = (unsigned __int8 *)v28 + 3;
              while (1)
              {
                v25 = *v24 - 48;
                if (v25 > 9)
                  break;
                v26 = 10 * v12;
                if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63)
                  break;
                v12 = v26 - v25;
                if (__OFSUB__(v26, v25))
                  break;
                LOBYTE(v4) = 0;
                ++v24;
                if (!--v22)
                  goto LABEL_46;
              }
            }
          }
LABEL_33:
          v12 = 0;
          LOBYTE(v4) = 1;
          goto LABEL_46;
        }
        __break(1u);
LABEL_60:
        __break(1u);
        return type metadata accessor for SystemInfo.DeviceLockState(v7);
      }
      if (!v8 || (v4 - 48) > 9u)
        goto LABEL_33;
      v12 = (v4 - 48);
      if (v8 != 1)
      {
        if ((BYTE1(v4) - 48) > 9u)
          goto LABEL_33;
        v12 = 10 * (v4 - 48) + (BYTE1(v4) - 48);
        v18 = v8 - 2;
        if (v18)
        {
          v19 = (unsigned __int8 *)v28 + 2;
          while (1)
          {
            v20 = *v19 - 48;
            if (v20 > 9)
              goto LABEL_33;
            v21 = 10 * v12;
            if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63)
              goto LABEL_33;
            v12 = v21 + v20;
            if (__OFADD__(v21, v20))
              goto LABEL_33;
            LOBYTE(v4) = 0;
            ++v19;
            if (!--v18)
              goto LABEL_46;
          }
        }
      }
    }
LABEL_45:
    LOBYTE(v4) = 0;
    goto LABEL_46;
  }
  v12 = (uint64_t)sub_1001EF3C8(v4, v6, 10);
  LOBYTE(v4) = v27;
LABEL_46:
  swift_bridgeObjectRelease(v6);
  if ((v4 & 1) != 0)
    return 0;
  else
    return v12;
}

