uint64_t sub_100107614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100107620);
}

uint64_t sub_100107620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ClientContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001076A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001076B0);
}

uint64_t sub_1001076B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ClientContext(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100107730(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1001F65B0;
  result = type metadata accessor for ClientContext(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1001F65C8;
    v4[3] = &unk_1001F65E0;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for FriendshipStopOfferRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[2];
  swift_bridgeObjectRetain(v4);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v5;
  }
  else
  {
    v7 = *v5;
    sub_10001A484(*v5, v6);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  return a1;
}

uint64_t *assignWithCopy for FriendshipStopOfferRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2 + 1;
  v7 = a2[2];
  if ((unint64_t)a1[2] >> 60 != 15)
  {
    if (v7 >> 60 != 15)
    {
      v9 = *v6;
      sub_10001A484(*v6, a2[2]);
      v10 = a1[1];
      v11 = a1[2];
      a1[1] = v9;
      a1[2] = v7;
      sub_100037AB4(v10, v11);
      goto LABEL_8;
    }
    sub_10004A9A8((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v6;
    goto LABEL_8;
  }
  v8 = *v6;
  sub_10001A484(*v6, a2[2]);
  a1[1] = v8;
  a1[2] = v7;
LABEL_8:
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  return a1;
}

__n128 initializeWithTake for FriendshipStopOfferRequest(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for FriendshipStopOfferRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2 + 1;
  v6 = a1[2];
  if (v6 >> 60 != 15)
  {
    v7 = a2[2];
    if (v7 >> 60 != 15)
    {
      v8 = a1[1];
      a1[1] = *v5;
      a1[2] = v7;
      sub_100037AB4(v8, v6);
      goto LABEL_6;
    }
    sub_10004A9A8((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)v5;
LABEL_6:
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for FriendshipStopOfferRequest(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FriendshipStopOfferRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipStopOfferRequest()
{
  return &type metadata for FriendshipStopOfferRequest;
}

unint64_t sub_100107A58()
{
  unint64_t result;

  result = qword_100263C38;
  if (!qword_100263C38)
  {
    result = swift_getWitnessTable(&unk_1001F661C, &type metadata for FriendshipStopOfferRequest);
    atomic_store(result, (unint64_t *)&qword_100263C38);
  }
  return result;
}

uint64_t sub_100107A9C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004EA8(&qword_100263C40, type metadata accessor for FriendshipStopOfferContent, (uint64_t)&unk_1001F66DC);
  result = sub_100004EA8(&qword_100263B90, type metadata accessor for FriendshipStopOfferContent, (uint64_t)&unk_1001F6720);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100107AFC()
{
  unint64_t result;

  result = qword_100263C48;
  if (!qword_100263C48)
  {
    result = swift_getWitnessTable(&unk_1001F6644, &type metadata for FriendshipStopOfferRequest);
    atomic_store(result, (unint64_t *)&qword_100263C48);
  }
  return result;
}

unint64_t sub_100107B40()
{
  unint64_t result;

  result = qword_100263C58;
  if (!qword_100263C58)
  {
    result = swift_getWitnessTable(&unk_1001F6944, &type metadata for FriendshipStopOfferContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263C58);
  }
  return result;
}

uint64_t sub_100107B84(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000001001FF200;
    if (a2 == 0x80000001001FF200)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001FF200, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 2036625250 && a2 == 0xE400000000000000)
  {
    v6 = 0xE400000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(2036625250, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6341726573557369 && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease(0xEC0000006E6F6974);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6341726573557369, 0xEC0000006E6F6974, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100107CDC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v3 = sub_100037A5C(&qword_100263C68);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100036228(a1, v7);
  v9 = sub_100107F68();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FriendshipStopOfferRequest.CodingKeys, &type metadata for FriendshipStopOfferRequest.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_10002BB90(a1);
    sub_100037AF8(0, 0xF000000000000000);
  }
  else
  {
    v10 = sub_100037A5C(&qword_100261218);
    v18 = 0;
    v11 = sub_10007581C((unint64_t *)&qword_100261248, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v10, &v18, v3, v10, v11);
    v7 = v16;
    v18 = 1;
    v13 = sub_10003F974();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v16, &type metadata for Data, &v18, v3, &type metadata for Data, v13);
    v14 = v16;
    v15 = v17;
    LOBYTE(v16) = 2;
    sub_10001F728(v14, v17);
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v7);
    sub_10001F728(v14, v15);
    sub_100037AF8(v14, v15);
    swift_bridgeObjectRelease(v7);
    sub_10002BB90(a1);
    swift_bridgeObjectRelease(v7);
    sub_100037AF8(v14, v15);
  }
  return v7;
}

unint64_t sub_100107F68()
{
  unint64_t result;

  result = qword_100263C70;
  if (!qword_100263C70)
  {
    result = swift_getWitnessTable(&unk_1001F68F4, &type metadata for FriendshipStopOfferRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263C70);
  }
  return result;
}

unint64_t sub_100107FAC()
{
  unint64_t result;

  result = qword_100263C80;
  if (!qword_100263C80)
  {
    result = swift_getWitnessTable(&unk_1001F6748, &type metadata for FriendshipStopOfferRequest);
    atomic_store(result, (unint64_t *)&qword_100263C80);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FriendshipStopOfferRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10010803C + 4 * byte_1001F657A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100108070 + 4 * byte_1001F6575[v4]))();
}

uint64_t sub_100108070(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100108078(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100108080);
  return result;
}

uint64_t sub_10010808C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100108094);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100108098(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001080A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FriendshipStopOfferRequest.CodingKeys()
{
  return &type metadata for FriendshipStopOfferRequest.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FriendshipStopOfferContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FriendshipStopOfferContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100108198 + 4 * byte_1001F6584[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001081CC + 4 * byte_1001F657F[v4]))();
}

uint64_t sub_1001081CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001081D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001081DCLL);
  return result;
}

uint64_t sub_1001081E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001081F0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001081F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001081FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FriendshipStopOfferContent.CodingKeys()
{
  return &type metadata for FriendshipStopOfferContent.CodingKeys;
}

unint64_t sub_10010821C()
{
  unint64_t result;

  result = qword_100263C88;
  if (!qword_100263C88)
  {
    result = swift_getWitnessTable(&unk_1001F6814, &type metadata for FriendshipStopOfferContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263C88);
  }
  return result;
}

unint64_t sub_100108264()
{
  unint64_t result;

  result = qword_100263C90;
  if (!qword_100263C90)
  {
    result = swift_getWitnessTable(&unk_1001F68CC, &type metadata for FriendshipStopOfferRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263C90);
  }
  return result;
}

unint64_t sub_1001082AC()
{
  unint64_t result;

  result = qword_100263C98;
  if (!qword_100263C98)
  {
    result = swift_getWitnessTable(&unk_1001F683C, &type metadata for FriendshipStopOfferRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263C98);
  }
  return result;
}

unint64_t sub_1001082F4()
{
  unint64_t result;

  result = qword_100263CA0;
  if (!qword_100263CA0)
  {
    result = swift_getWitnessTable(&unk_1001F6864, &type metadata for FriendshipStopOfferRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263CA0);
  }
  return result;
}

unint64_t sub_10010833C()
{
  unint64_t result;

  result = qword_100263CA8;
  if (!qword_100263CA8)
  {
    result = swift_getWitnessTable(&unk_1001F6784, &type metadata for FriendshipStopOfferContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263CA8);
  }
  return result;
}

unint64_t sub_100108384()
{
  unint64_t result;

  result = qword_100263CB0;
  if (!qword_100263CB0)
  {
    result = swift_getWitnessTable(&unk_1001F67AC, &type metadata for FriendshipStopOfferContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263CB0);
  }
  return result;
}

uint64_t sub_1001083C8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL)
  {
    v5 = 0xED0000747865746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43726576726573, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    v7 = 0xED0000747865746ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x644970756F7267 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970756F7267, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6449646E65697266 && a2 == 0xE900000000000073)
  {
    v9 = 0xE900000000000073;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449646E65697266, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x73656C646E6168 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656C646E6168, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100108630()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  return swift_task_switch(sub_100108648, 0, 0);
}

uint64_t sub_100108648()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(*(_QWORD *)(v0 + 48));
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = sub_1001086CC;
  return withTimeout<A>(_:block:)(v0 + 16, 0x8AC7230489E80000, 0, &unk_100263CD0, *(_QWORD *)(v0 + 48), &type metadata for String);
}

uint64_t sub_1001086CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100108AE8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 48));
    v4 = sub_100108738;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100108738()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if (v2 == 0xD000000000000018)
  {
    v3 = 0x80000001001FF220;
    if (v1 == 0x80000001001FF220)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0xD000000000000018, 0x80000001001FF220, 0) & 1) != 0)
  {
    v3 = v1;
LABEL_5:
    v4 = swift_bridgeObjectRelease(v3);
    v5 = static SystemInfo.isInternalBuild.getter(v4);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(v5 & 1);
  }
  v7 = &selRef_integerValue;
  if (qword_10025F8D0 != -1)
    swift_once(&qword_10025F8D0, sub_1000A5664);
  v8 = type metadata accessor for Logger(0);
  sub_100037A9C(v8, (uint64_t)qword_10027AB90);
  v9 = swift_bridgeObjectRetain_n(v1, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v23 = v8;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v24 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain(v1);
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v2, v1, &v24);
    v7 = &selRef_integerValue;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v1, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Checking if %s is running", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    v14 = v12;
    v8 = v23;
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v1, 2);
  }

  v15 = *(_QWORD *)(v0 + 64);
  v5 = sub_100108E14(v2, v1);
  swift_bridgeObjectRelease(v1);
  if (v15)
  {
    if (v7[282] != (char *)-1)
      swift_once(&qword_10025F8D0, sub_1000A5664);
    sub_100037A9C(v8, (uint64_t)qword_10027AB90);
    swift_errorRetain(v15);
    v16 = swift_errorRetain(v15);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138543362;
      swift_errorRetain(v15);
      v21 = _swift_stdlib_bridgeErrorToNSError(v15);
      *(_QWORD *)(v0 + 32) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v19 + 4, v19 + 12);
      *v20 = v21;
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RunningBoardProcess threw an error: %{public}@", v19, 0xCu);
      v22 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      swift_errorRelease(v15);
    }
    else
    {
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      swift_errorRelease(v15);

    }
    v5 = 0;
  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v5 & 1);
}

uint64_t sub_100108AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(*(_QWORD *)(v0 + 48));
  v1 = *(_QWORD *)(v0 + 64);
  if (qword_10025F8D0 != -1)
    swift_once(&qword_10025F8D0, sub_1000A5664);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB90);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 32) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RunningBoardProcess threw an error: %{public}@", v6, 0xCu);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100108CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100108CD0, 0, 0);
}

uint64_t sub_100108CD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v1 = *(_QWORD *)(v0[3] + 112);
  v0[4] = v1;
  v2 = *((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.connection.getter + 1);
  v5 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of FM.XPCSession.connection.getter
                         + async function pointer to dispatch thunk of FM.XPCSession.connection.getter);
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[5] = v3;
  *v3 = v0;
  v3[1] = sub_100108D44;
  return v5();
}

uint64_t sub_100108D44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_100108DA8, 0, 0);
}

uint64_t sub_100108DA8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v1 = *(void **)(v0 + 48);
  v2 = NSXPCConnection.codeSigningIdentity.getter();
  v4 = v3;

  v5 = *(uint64_t **)(v0 + 16);
  *v5 = v2;
  v5[1] = v4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_100108E14(uint64_t a1, unint64_t a2)
{
  void *v4;
  NSString v5;
  id v6;
  id v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  __n128 v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  void *v21;
  unsigned __int8 v22;
  id v23;
  uint64_t v24;
  BOOL v25;
  id v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  id v35;

  v4 = (void *)objc_opt_self(RBSProcessState);
  swift_bridgeObjectRetain(a2);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend((id)objc_opt_self(RBSProcessPredicate), "predicateMatchingBundleIdentifier:", v5);

  v35 = 0;
  v7 = objc_msgSend(v4, "statesForPredicate:withDescriptor:error:", v6, 0, &v35);

  v8 = v35;
  if (!v7)
  {
    v23 = v35;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v24);
    return v25;
  }
  v9 = sub_1001095E0();
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v9);
  v11 = v8;

  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v33 = v10;
    else
      v33 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v13 = (void *)_CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease(v10);
    if (v13)
      goto LABEL_4;
  }
  else
  {
    v13 = *(void **)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
    {
LABEL_4:
      if ((v10 & 0xC000000000000001) != 0)
      {
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10, v12);
      }
      else
      {
        if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          __break(1u);
        v14 = *(id *)(v10 + 32);
      }
      v13 = v14;
    }
  }
  swift_bridgeObjectRelease(v10);
  if (qword_10025F8D0 != -1)
    swift_once(&qword_10025F8D0, sub_1000A5664);
  v15 = type metadata accessor for Logger(0);
  sub_100037A9C(v15, (uint64_t)qword_10027AB90);
  v16 = v13;
  swift_bridgeObjectRetain_n(a2, 2);
  v17 = v16;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = (void *)swift_slowAlloc(64, -1);
    v35 = v21;
    *(_DWORD *)v20 = 136315394;
    swift_bridgeObjectRetain(a2);
    v34 = sub_10002BA84(a1, a2, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v20 + 12) = 2080;
    if (v13)
      v22 = objc_msgSend(v17, "taskState");
    else
      v22 = 0;
    LOBYTE(v34) = v22;
    BYTE1(v34) = v13 == 0;
    v28 = sub_100037A5C(&qword_100263CE0);
    v29 = String.init<A>(describing:)(&v34, v28);
    v31 = v30;
    v34 = sub_10002BA84(v29, v30, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v20 + 14, v20 + 22);

    swift_bridgeObjectRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RunningBoardProcess: %s %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    if (!v13)
      return 0;
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    if (!v13)
      return 0;
  }
  v26 = v17;
  if (objc_msgSend(v26, "taskState") == 2)
  {

    return 1;
  }
  else
  {
    v27 = objc_msgSend(v26, "taskState");

    return v27 == 4;
  }
}

uint64_t sub_100109240(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_BYTE *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10010929C, 0, 0);
}

uint64_t sub_10010929C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);

  v1 = *(_BYTE *)(v0 + 192);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
  if ((v1 & 1) != 0)
  {
    v2 = swift_retain(*(_QWORD *)(v0 + 144));
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v2);
    v4 = *(_QWORD *)((*(_QWORD *)(v0 + 56) & 0xFFFFFFFFFFFFFF8) + 0x10);
    v3 = *(_QWORD *)((*(_QWORD *)(v0 + 56) & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v4 >= v3 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1);
    v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, *(_QWORD *)(v0 + 144));
    specialized Array._endMutation()(v5);
  }
  result = swift_release(*(_QWORD *)(v0 + 144));
  v7 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 120);
  if (v9 < 0)
  {
    v14 = __CocoaSet.Iterator.next()(result);
    if (v14)
    {
      v15 = v14;
      *(_QWORD *)(v0 + 72) = v14;
      v16 = type metadata accessor for LocationServiceClient();
      swift_unknownObjectRetain(v15);
      swift_dynamicCast(v0 + 64, v0 + 72, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
      v13 = *(_QWORD *)(v0 + 64);
      swift_unknownObjectRelease(v15);
      v12 = v7;
      v10 = v8;
LABEL_11:
      *(_QWORD *)(v0 + 152) = v12;
      *(_QWORD *)(v0 + 160) = v10;
      *(_QWORD *)(v0 + 144) = v13;
      if (v13)
      {
        v25 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                             + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
        v17 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                         + 1));
        *(_QWORD *)(v0 + 168) = v17;
        *v17 = v0;
        v17[1] = sub_100004C84;
        return v25(*(_QWORD *)(v0 + 112));
      }
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  if (v8)
  {
    v10 = (v8 - 1) & v8;
    v11 = __clz(__rbit64(v8)) | (v7 << 6);
    v12 = *(_QWORD *)(v0 + 152);
LABEL_8:
    v13 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v11);
    swift_retain(v13);
    goto LABEL_11;
  }
  v18 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    v19 = (unint64_t)(*(_QWORD *)(v0 + 136) + 64) >> 6;
    if (v18 < v19)
    {
      v20 = *(_QWORD *)(v0 + 128);
      v21 = *(_QWORD *)(v20 + 8 * v18);
      v12 = v7 + 1;
      if (v21)
      {
LABEL_16:
        v10 = (v21 - 1) & v21;
        v11 = __clz(__rbit64(v21)) + (v12 << 6);
        goto LABEL_8;
      }
      v12 = v7 + 2;
      if (v7 + 2 < v19)
      {
        v21 = *(_QWORD *)(v20 + 8 * v12);
        if (v21)
          goto LABEL_16;
        v12 = v7 + 3;
        if (v7 + 3 < v19)
        {
          v21 = *(_QWORD *)(v20 + 8 * v12);
          if (v21)
            goto LABEL_16;
          v12 = v7 + 4;
          if (v7 + 4 < v19)
          {
            v21 = *(_QWORD *)(v20 + 8 * v12);
            if (v21)
              goto LABEL_16;
            v12 = v7 + 5;
            if (v7 + 5 < v19)
            {
              v21 = *(_QWORD *)(v20 + 8 * v12);
              if (v21)
                goto LABEL_16;
              v22 = v7 + 6;
              while (v19 != v22)
              {
                v21 = *(_QWORD *)(v20 + 8 * v22++);
                if (v21)
                {
                  v12 = v22 - 1;
                  goto LABEL_16;
                }
              }
            }
          }
        }
      }
    }
LABEL_29:
    v23 = *(_QWORD *)(v0 + 112);
    sub_100086D50(*(_QWORD *)(v0 + 120));
    v24 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v24);
  }
  __break(1u);
  return result;
}

unint64_t sub_100109530()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100262428;
  if (!qword_100262428)
  {
    v1 = type metadata accessor for LocationServiceClient();
    result = swift_getWitnessTable(&unk_1001F4F24, v1);
    atomic_store(result, (unint64_t *)&qword_100262428);
  }
  return result;
}

uint64_t sub_100109578(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100263CCC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000087DC;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100263CC8 + dword_100263CC8))(a1, v1);
}

unint64_t sub_1001095E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100263CD8;
  if (!qword_100263CD8)
  {
    v1 = objc_opt_self(RBSProcessState);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100263CD8);
  }
  return result;
}

void sub_10010961C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_100109678()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1001096B8 + dword_100109C04[v0 >> 62]))();
}

void sub_100109C24(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100109C80(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100109CE8 + 4 * byte_1001F6998[a2]))(0x6F43737574617473);
}

uint64_t sub_100109CE8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F43737574617473 && v1 == 0xEA00000000006564)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6F43737574617473, 0xEA00000000006564, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006564);
  return v2 & 1;
}

uint64_t sub_100109D98(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0xD000000000000015;
    else
      v3 = 118;
    if (v2 == 1)
      v4 = 0x80000001001FC3B0;
    else
      v4 = 0xE100000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0xD000000000000015;
      else
        v6 = 118;
      if (v5 == 1)
        v7 = 0x80000001001FC3B0;
      else
        v7 = 0xE100000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE100000000000000;
    v3 = 112;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE100000000000000;
  v6 = 112;
  if (v3 != 112)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v4;
LABEL_22:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_100109E80(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x7265776F6C6C6F66;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6E69776F6C6C6F66;
    else
      v4 = 0x4F676E69646E6570;
    if (v3 == 1)
      v5 = 0xE900000000000067;
    else
      v5 = 0xED00007372656666;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6E69776F6C6C6F66;
      else
        v2 = 0x4F676E69646E6570;
      if (v6 == 1)
        v7 = 0xE900000000000067;
      else
        v7 = 0xED00007372656666;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE800000000000000;
    v4 = 0x7265776F6C6C6F66;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v4 != 0x7265776F6C6C6F66)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_100109FB8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100109FF0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10010A060 + 4 * byte_1001F69A0[a2]))(0x6E6F697461636F6CLL);
}

uint64_t sub_10010A060(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6F697461636F6CLL && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6E6F697461636F6CLL, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

void sub_10010A110(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10010A160(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10010A244 + 4 * byte_1001F69AC[a2]))(0x6564757469746C61);
}

uint64_t sub_10010A244(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6564757469746C61 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6564757469746C61, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

_QWORD *sub_10010A388(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = *(_QWORD *)(type metadata accessor for DiscoveryToken(0) - 8);
    v5 = (id *)(a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = *v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v8 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v7);
      specialized ContiguousArray._endMutation()(v9);
      v5 = (id *)((char *)v5 + v6);
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10010A454()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[10] = v0;
  v1[11] = *v0;
  v2 = type metadata accessor for UUID(0);
  v1[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10010A4B4, v0, 0);
}

uint64_t sub_10010A4B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t My;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v25;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v25 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 72) = sub_10002BA84(0xD00000000000001ALL, 0x80000001001FF340, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v8 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v8, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  v9 = sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) == 0)
  {
    v16 = Logger.logObject.getter(v9);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v25 = v19;
      *(_DWORD *)v18 = 136446210;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD00000000000001ALL, 0x80000001001FF340, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v18 + 4, v18 + 12);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s Feature.FindMy.redStripe FF disabled.", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      v20 = v18;
LABEL_12:
      swift_slowDealloc(v20, -1, -1);
    }
LABEL_13:

    goto LABEL_14;
  }
  v10 = sub_1001C30A4();
  if ((v10 & 1) == 0)
  {
    v16 = Logger.logObject.getter(v10);
    v21 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v25 = v23;
      *(_DWORD *)v22 = 136446210;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD00000000000001ALL, 0x80000001001FF340, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v22 + 4, v22 + 12);
      _os_log_impl((void *)&_mh_execute_header, v16, v21, "%{public}s isFindingCapable == false.", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      v20 = v22;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  v11 = *(_QWORD *)(v0 + 96);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v12 = swift_allocObject(&unk_100253590, 32, 7);
  v13 = *(_QWORD *)(v0 + 80);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(v0 + 80);
  v14 = swift_retain(v13);
  UUID.init()(v14);
  v15 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v11, &unk_100263DB0, v12, &unk_100263DB8, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v15);
  swift_release(v15);
LABEL_14:
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010A918(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_100037A5C(&qword_100265260);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_10010A98C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for Date(0);
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10010A9EC, v1, 0);
}

uint64_t sub_10010A9EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v0[12] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[6] = sub_10002BA84(0xD000000000000025, 0x80000001001FF4F0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  static ReferenceClock.now.getter(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_100261A04);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_10010AB98;
  return sub_100086E80();
}

uint64_t sub_10010AB98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 104);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v7 = *(_QWORD *)(*(_QWORD *)v2 + 72);
  v3[14] = a1;
  v3[15] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1)
    v8 = sub_10010AE14;
  else
    v8 = sub_10010AC2C;
  return swift_task_switch(v8, v3[8], 0);
}

uint64_t sub_10010AC2C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(void **)(v1 + 112);
  if (!v2)
  {
    v8 = Logger.logObject.getter(a1);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v13 = v11;
      *(_DWORD *)v10 = 136446210;
      *(_QWORD *)(v1 + 40) = sub_10002BA84(0xD000000000000025, 0x80000001001FF4F0, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v10 + 4, v10 + 12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s missing owner token!", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

    goto LABEL_10;
  }
  v3 = sub_100158208(*(void **)(v1 + 112), *(_QWORD *)(v1 + 56));
  if ((v3 & 1) == 0)
  {

LABEL_10:
    v7 = 0;
    goto LABEL_11;
  }
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Owner ranging is active.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = 1;
LABEL_11:
  swift_task_dealloc(*(_QWORD *)(v1 + 88));
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v7);
}

uint64_t sub_10010AE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 120);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 120);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000025, 0x80000001001FF4F0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 120);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10010B00C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;

  v1[28] = v0;
  v1[29] = *v0;
  v2 = type metadata accessor for Destination(0);
  v1[30] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[31] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[32] = swift_task_alloc(v4);
  v1[33] = swift_task_alloc(v4);
  v5 = type metadata accessor for RedStripeNotification(0);
  v1[34] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[35] = swift_task_alloc(v6);
  v1[36] = swift_task_alloc(v6);
  v1[37] = swift_task_alloc(v6);
  v1[38] = swift_task_alloc(v6);
  v7 = type metadata accessor for UUID(0);
  v1[39] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[40] = v8;
  v1[41] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_100263E18);
  v1[42] = v9;
  v1[43] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_1002675F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[44] = swift_task_alloc(v10);
  v1[45] = swift_task_alloc(v10);
  v1[46] = swift_task_alloc(v10);
  v11 = type metadata accessor for Handle(0);
  v1[47] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[48] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[49] = swift_task_alloc(v13);
  v1[50] = swift_task_alloc(v13);
  v1[51] = swift_task_alloc(v13);
  v1[52] = swift_task_alloc(v13);
  v1[53] = swift_task_alloc(v13);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260950) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[54] = swift_task_alloc(v14);
  v1[55] = swift_task_alloc(v14);
  v15 = type metadata accessor for Friend(0);
  v1[56] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v1[57] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[58] = swift_task_alloc(v17);
  v1[59] = swift_task_alloc(v17);
  v1[60] = swift_task_alloc(v17);
  v1[61] = swift_task_alloc(v17);
  v1[62] = swift_task_alloc(v17);
  v18 = type metadata accessor for DiscoveryToken.Bucket(0);
  v1[63] = v18;
  v1[64] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100037A5C(&qword_100261018);
  v1[65] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DiscoveryToken(0);
  v1[66] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v1[67] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[68] = swift_task_alloc(v22);
  v1[69] = swift_task_alloc(v22);
  v23 = sub_100037A5C((uint64_t *)&unk_100262930);
  v1[70] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v23 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Date(0);
  v1[71] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v1[72] = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[73] = swift_task_alloc(v26);
  v1[74] = swift_task_alloc(v26);
  v27 = type metadata accessor for FriendSharedSecretsRecord(0);
  v1[75] = v27;
  v28 = *(_QWORD *)(v27 - 8);
  v1[76] = v28;
  v29 = (*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[77] = swift_task_alloc(v29);
  v1[78] = swift_task_alloc(v29);
  v1[79] = swift_task_alloc(v29);
  v1[80] = swift_task_alloc(v29);
  v30 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v1[81] = v30;
  *v30 = v1;
  v30[1] = sub_10010B38C;
  return daemon.getter();
}

uint64_t sub_10010B38C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 648);
  v5 = *v1;
  *(_QWORD *)(*v1 + 656) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[83] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[84] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[85] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10010B484;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10010B484(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 664);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 224);
  v3[86] = a1;
  v3[87] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v6 = sub_10010EB88;
  }
  else
  {
    swift_release(v3[82]);
    v6 = sub_10010B508;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10010B508()
{
  uint64_t v0;
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[3];

  v1 = objc_msgSend((id)objc_opt_self(NISession), "activelyInteractingDiscoveryTokens");
  if (v1)
  {
    v2 = v1;
    v3 = sub_10011D800();
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v8 = v4;
      else
        v8 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      swift_bridgeObjectRelease(v4);
      if (v9)
        goto LABEL_4;
    }
    else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      v5 = sub_10016B944(v4);
      *(_QWORD *)(v0 + 704) = v5;
      swift_bridgeObjectRelease(v4);
      v6 = (_QWORD *)swift_task_alloc(dword_100263E24);
      *(_QWORD *)(v0 + 712) = v6;
      *v6 = v0;
      v6[1] = sub_10010BA88;
      return sub_10010A98C(v5);
    }
    swift_bridgeObjectRelease(v4);
  }
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100037A9C(v10, (uint64_t)qword_10027B330);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "No activelyInteractingDiscoveryTokens!", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }
  v15 = *(_QWORD *)(v0 + 688);

  v16 = sub_100097FB4();
  v17 = swift_allocError(&type metadata for NITokenService.Error, v16, 0, 0);
  *v18 = 2;
  swift_willThrow(v17);
  swift_release(v15);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  sub_100037A9C(v10, (uint64_t)qword_10027B330);
  swift_errorRetain(v17);
  v19 = swift_errorRetain(v17);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    *(_DWORD *)v22 = 136446210;
    v61[0] = v23;
    *(_QWORD *)(v0 + 176) = v17;
    swift_errorRetain(v17);
    v24 = sub_100037A5C(&qword_100265260);
    v25 = String.init<A>(describing:)(v0 + 176, v24);
    v27 = v26;
    *(_QWORD *)(v0 + 168) = sub_10002BA84(v25, v26, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v27);
    swift_errorRelease(v17);
    swift_errorRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "handleRangingStartedNotification error: %{public}s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    swift_errorRelease(v17);
  }
  else
  {
    swift_errorRelease(v17);
    swift_errorRelease(v17);
    swift_errorRelease(v17);

  }
  v28 = *(_QWORD *)(v0 + 632);
  v29 = *(_QWORD *)(v0 + 624);
  v30 = *(_QWORD *)(v0 + 616);
  v31 = *(_QWORD *)(v0 + 592);
  v32 = *(_QWORD *)(v0 + 584);
  v33 = *(_QWORD *)(v0 + 560);
  v34 = *(_QWORD *)(v0 + 552);
  v35 = *(_QWORD *)(v0 + 544);
  v36 = *(_QWORD *)(v0 + 520);
  v37 = *(_QWORD *)(v0 + 512);
  v38 = *(_QWORD *)(v0 + 496);
  v39 = *(_QWORD *)(v0 + 488);
  v40 = *(_QWORD *)(v0 + 480);
  v41 = *(_QWORD *)(v0 + 472);
  v42 = *(_QWORD *)(v0 + 464);
  v43 = *(_QWORD *)(v0 + 440);
  v44 = *(_QWORD *)(v0 + 432);
  v45 = *(_QWORD *)(v0 + 424);
  v46 = *(_QWORD *)(v0 + 416);
  v47 = *(_QWORD *)(v0 + 408);
  v48 = *(_QWORD *)(v0 + 400);
  v49 = *(_QWORD *)(v0 + 392);
  v50 = *(_QWORD *)(v0 + 368);
  v51 = *(_QWORD *)(v0 + 360);
  v52 = *(_QWORD *)(v0 + 352);
  v53 = *(_QWORD *)(v0 + 344);
  v54 = *(_QWORD *)(v0 + 328);
  v55 = *(_QWORD *)(v0 + 304);
  v56 = *(_QWORD *)(v0 + 296);
  v57 = *(_QWORD *)(v0 + 288);
  v58 = *(_QWORD *)(v0 + 280);
  v59 = *(_QWORD *)(v0 + 264);
  v60 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010BA88(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 712);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_BYTE *)(*(_QWORD *)v1 + 1052) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10010BAE8, v3, 0);
}

uint64_t sub_10010BAE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if ((*(_BYTE *)(v0 + 1052) & 1) == 0)
    return swift_task_switch(sub_10010BD44, *(_QWORD *)(v0 + 688), 0);
  v1 = *(_QWORD *)(v0 + 688);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 704));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 632);
  v3 = *(_QWORD *)(v0 + 624);
  v4 = *(_QWORD *)(v0 + 616);
  v5 = *(_QWORD *)(v0 + 592);
  v6 = *(_QWORD *)(v0 + 584);
  v7 = *(_QWORD *)(v0 + 560);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(_QWORD *)(v0 + 544);
  v10 = *(_QWORD *)(v0 + 520);
  v12 = *(_QWORD *)(v0 + 512);
  v13 = *(_QWORD *)(v0 + 496);
  v14 = *(_QWORD *)(v0 + 488);
  v15 = *(_QWORD *)(v0 + 480);
  v16 = *(_QWORD *)(v0 + 472);
  v17 = *(_QWORD *)(v0 + 464);
  v18 = *(_QWORD *)(v0 + 440);
  v19 = *(_QWORD *)(v0 + 432);
  v20 = *(_QWORD *)(v0 + 424);
  v21 = *(_QWORD *)(v0 + 416);
  v22 = *(_QWORD *)(v0 + 408);
  v23 = *(_QWORD *)(v0 + 400);
  v24 = *(_QWORD *)(v0 + 392);
  v25 = *(_QWORD *)(v0 + 368);
  v26 = *(_QWORD *)(v0 + 360);
  v27 = *(_QWORD *)(v0 + 352);
  v28 = *(_QWORD *)(v0 + 344);
  v29 = *(_QWORD *)(v0 + 328);
  v30 = *(_QWORD *)(v0 + 304);
  v31 = *(_QWORD *)(v0 + 296);
  v32 = *(_QWORD *)(v0 + 288);
  v33 = *(_QWORD *)(v0 + 280);
  v34 = *(_QWORD *)(v0 + 264);
  v35 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010BD44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  _QWORD *v10;

  v1 = sub_100037A5C(&qword_100260620);
  *(_QWORD *)(v0 + 720) = v1;
  v2 = type metadata accessor for HandleType(0);
  *(_QWORD *)(v0 + 728) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v0 + 736) = v4;
  LODWORD(v5) = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 1048) = v5;
  v5 = v5;
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + v4, v5 | 7);
  *(_QWORD *)(v0 + 744) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1001F35F0;
  v8 = enum case for HandleType.follower(_:);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  *(_QWORD *)(v0 + 752) = v9;
  v9(v7 + v6, v8, v2);
  v10 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 760) = v10;
  *v10 = v0;
  v10[1] = sub_10010BE2C;
  return sub_1000196E8(v7, 1);
}

uint64_t sub_10010BE2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 760);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 744);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 688);
  *(_QWORD *)(*(_QWORD *)v1 + 768) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10010BE98, v4, 0);
}

uint64_t sub_10010BE98()
{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 752);
  v2 = *(unsigned __int8 *)(v0 + 1048);
  v3 = *(_QWORD *)(v0 + 728);
  v4 = (v2 + 32) & ~v2;
  v5 = swift_allocObject(*(_QWORD *)(v0 + 720), v4 + *(_QWORD *)(v0 + 736), v2 | 7);
  *(_QWORD *)(v0 + 776) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_1001F35F0;
  v1(v5 + v4, enum case for HandleType.following(_:), v3);
  v6 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 784) = v6;
  *v6 = v0;
  v6[1] = sub_10010BF44;
  return sub_1000196E8(v5, 1);
}

uint64_t sub_10010BF44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v2 = *(_QWORD *)(*v1 + 784);
  v3 = *(_QWORD *)(*v1 + 776);
  v6 = *v1;
  *(_QWORD *)(v6 + 792) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v6 + 800) = v4;
  *v4 = v6;
  v4[1] = sub_10010BFC0;
  return daemon.getter();
}

uint64_t sub_10010BFC0(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 800);
  v5 = *v1;
  *(_QWORD *)(*v1 + 808) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[102] = v6;
  v7 = type metadata accessor for CloudStorageService();
  v8 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_10010C06C;
  return ActorServiceDaemon.getService<A>()(v3[84], v7, v3[85], v8);
}

uint64_t sub_10010C06C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 816);
  v3[103] = a1;
  v3[104] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[28];
    v6 = sub_10010EF40;
  }
  else
  {
    swift_release(v3[101]);
    v6 = sub_10010C0E8;
    v5 = 0;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10010C0E8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1002671A4);
  *(_QWORD *)(v0 + 840) = v1;
  *v1 = v0;
  v1[1] = sub_10010C134;
  return sub_1001CA408();
}

uint64_t sub_10010C134(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 840);
  *(_QWORD *)(*v2 + 848) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10010D354;
  }
  else
  {
    *(_QWORD *)(v4 + 856) = a1;
    v6 = sub_10010C1A8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10010C1A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[107];
  v3 = v1[28];
  v1[108] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(a1);
  swift_release(v2);
  return swift_task_switch(sub_10010C1F4, v3, 0);
}

uint64_t sub_10010C1F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(uint64_t, uint64_t, uint64_t);
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  void (*v135)(uint64_t, uint64_t);
  void (*v136)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int (*v144)(uint64_t, uint64_t, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v148;
  os_log_type_t v149;
  uint8_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  NSObject *v161;
  os_log_type_t v162;
  uint8_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t, uint64_t);
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(uint64_t, uint64_t);
  uint64_t v202;
  void (*v203)(uint64_t, uint64_t);
  uint64_t v204;
  uint64_t v205;
  uint64_t (*v206)(_QWORD, __n128);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227[3];

  v1 = *(_QWORD *)(v0 + 864);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    goto LABEL_26;
  v184 = (uint64_t *)(v0 + 168);
  v178 = (uint64_t *)(v0 + 176);
  v181 = v0 + 216;
  v3 = *(_QWORD *)(v0 + 608);
  v4 = *(_QWORD *)(v0 + 600);
  v5 = *(_QWORD *)(v0 + 576);
  v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v7 = type metadata accessor for FriendSharedSecretsRecord;
  v198 = *(_QWORD *)(v0 + 528);
  v204 = *(_QWORD *)(v0 + 504);
  v207 = *(_QWORD *)(v0 + 536);
  v218 = *(_QWORD *)(v3 + 72);
  v213 = v4;
  v222 = v5;
  while (1)
  {
    v8 = *(_QWORD *)(v0 + 640);
    v9 = v7;
    sub_100025C70(v6, v8, v7);
    v10 = (uint64_t *)(v8 + *(int *)(v4 + 32));
    v11 = *v10;
    *(_QWORD *)(v0 + 872) = *v10;
    v12 = v10[1];
    *(_QWORD *)(v0 + 880) = v12;
    if (v12 >> 60 == 15)
      goto LABEL_9;
    v216 = v12;
    v13 = *(_QWORD *)(v0 + 568);
    v14 = *(_QWORD *)(v0 + 560);
    sub_10000E37C(*(_QWORD *)(v0 + 640) + *(int *)(v4 + 36), v14, (uint64_t *)&unk_100262930);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v14, 1, v13) == 1)
    {
      sub_1000087A0(*(_QWORD *)(v0 + 560), (uint64_t *)&unk_100262930);
LABEL_9:
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v15 = *(_QWORD *)(v0 + 640);
      v16 = *(_QWORD *)(v0 + 616);
      v17 = type metadata accessor for Logger(0);
      sub_100037A9C(v17, (uint64_t)qword_10027B330);
      v7 = v9;
      v18 = sub_100025C70(v15, v16, v9);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.default.getter(v19);
      v21 = os_log_type_enabled(v19, v20);
      v22 = *(_QWORD *)(v0 + 616);
      if (v21)
      {
        v23 = *(_QWORD *)(v0 + 312);
        v24 = swift_slowAlloc(12, -1);
        v25 = swift_slowAlloc(32, -1);
        v227[0] = v25;
        *(_DWORD *)v24 = 136446210;
        v26 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v27 = dispatch thunk of CustomStringConvertible.description.getter(v23, v26);
        v29 = v28;
        *(_QWORD *)(v24 + 4) = sub_10002BA84(v27, v28, v227);
        v30 = v29;
        v7 = v9;
        swift_bridgeObjectRelease(v30);
        sub_100024990(v22, v9);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "No incomingSharedSecret for %{public}s", (uint8_t *)v24, 0xCu);
        swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
        v31 = v25;
        v4 = v213;
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v24, -1, -1);
      }
      else
      {
        sub_100024990(*(_QWORD *)(v0 + 616), v9);
      }

      v5 = v222;
      goto LABEL_5;
    }
    v32 = *(char **)(v0 + 592);
    v33 = *(char **)(v0 + 584);
    v34 = v5;
    v35 = *(_QWORD *)(v0 + 512);
    (*(void (**)(char *, _QWORD, _QWORD))(v34 + 32))(v32, *(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568));
    sub_10001A484(v11, v216);
    static Date.trustedNow.getter((uint64_t)v33);
    v36 = sub_1001D3B1C();
    sub_1001D3274(v32, v33, v36, v35);
    v37 = sub_1001D3C50(v11, v216, *(_QWORD *)(v35 + *(int *)(v204 + 20)), 0);
    v38 = *(_QWORD *)(v0 + 528);
    v39 = *(_QWORD **)(v0 + 520);
    v40 = *(_QWORD *)(v0 + 512);
    if (v37)
    {
      sub_1000321F4(v40, (uint64_t)v39 + *(int *)(v198 + 20), type metadata accessor for DiscoveryToken.Bucket);
      *v39 = v37;
      v41 = v207;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v39, 0, 1, v38);
    }
    else
    {
      sub_100024990(v40, type metadata accessor for DiscoveryToken.Bucket);
      v41 = v207;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v207 + 56))(v39, 1, 1, v38);
    }
    v42 = *(_QWORD *)(v0 + 584);
    v43 = *(_QWORD *)(v0 + 568);
    v44 = *(_QWORD *)(v0 + 528);
    v45 = *(_QWORD *)(v0 + 520);
    v46 = *(void (**)(uint64_t, uint64_t))(v222 + 8);
    *(_QWORD *)(v0 + 888) = v46;
    v46(v42, v43);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v45, 1, v44) == 1)
    {
      v201 = v46;
      sub_1000087A0(*(_QWORD *)(v0 + 520), &qword_100261018);
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v47 = *(_QWORD *)(v0 + 640);
      v48 = *(_QWORD *)(v0 + 624);
      v49 = type metadata accessor for Logger(0);
      sub_100037A9C(v49, (uint64_t)qword_10027B330);
      v50 = v9;
      v51 = sub_100025C70(v47, v48, v9);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.error.getter(v52);
      v54 = os_log_type_enabled(v52, v53);
      v55 = *(_QWORD *)(v0 + 624);
      v56 = *(_QWORD *)(v0 + 592);
      v57 = *(_QWORD *)(v0 + 568);
      if (v54)
      {
        v189 = *(_QWORD *)(v0 + 312);
        v195 = v11;
        v58 = (uint8_t *)swift_slowAlloc(12, -1);
        v187 = swift_slowAlloc(32, -1);
        v227[0] = v187;
        *(_DWORD *)v58 = 136446210;
        v59 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v60 = dispatch thunk of CustomStringConvertible.description.getter(v189, v59);
        v190 = v57;
        v62 = v61;
        *(_QWORD *)(v0 + 160) = sub_10002BA84(v60, v61, v227);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v184, v58 + 4, v58 + 12);
        swift_bridgeObjectRelease(v62);
        sub_100024990(v55, v50);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unable to retrieve discovery token for for %{public}s", v58, 0xCu);
        swift_arrayDestroy(v187, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v187, -1, -1);
        swift_slowDealloc(v58, -1, -1);
        sub_100037AF8(v195, v216);

        v64 = v190;
        v63 = v56;
      }
      else
      {
        sub_100037AF8(v11, v216);

        sub_100024990(v55, v50);
        v63 = v56;
        v64 = v57;
      }
      v201(v63, v64);
      v4 = v213;
      v5 = v222;
      v7 = v50;
      goto LABEL_5;
    }
    v65 = *(_QWORD *)(v0 + 704);
    v66 = *(id **)(v0 + 552);
    sub_1000321F4(*(_QWORD *)(v0 + 520), (uint64_t)v66, type metadata accessor for DiscoveryToken);
    v67 = *v66;
    LOBYTE(v65) = sub_100158208(v67, v65);

    if ((v65 & 1) != 0)
      break;
    v68 = *(_QWORD *)(v0 + 592);
    v69 = *(_QWORD *)(v0 + 568);
    v70 = *(_QWORD *)(v0 + 552);
    sub_100037AF8(v11, v216);
    v71 = v70;
    v5 = v222;
    sub_100024990(v71, type metadata accessor for DiscoveryToken);
    v46(v68, v69);
    v4 = v213;
    v7 = v9;
LABEL_5:
    sub_100024990(*(_QWORD *)(v0 + 640), v7);
    v6 += v218;
    if (!--v2)
    {
      v1 = *(_QWORD *)(v0 + 864);
LABEL_26:
      v72 = *(_QWORD *)(v0 + 824);
      swift_release(v1);
      swift_release(v72);
      v73 = *(_QWORD *)(v0 + 792);
      v74 = *(_QWORD *)(v0 + 768);
      v75 = *(_QWORD *)(v0 + 688);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 704));
      swift_bridgeObjectRelease(v74);
      swift_bridgeObjectRelease(v73);
      swift_release(v75);
      goto LABEL_27;
    }
  }
  v203 = v46;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 704));
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v86 = *(_QWORD *)(v0 + 640);
  v87 = *(_QWORD *)(v0 + 632);
  v88 = *(_QWORD *)(v0 + 552);
  v89 = *(_QWORD *)(v0 + 544);
  v192 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 896) = sub_100037A9C(v192, (uint64_t)qword_10027B330);
  sub_100025C70(v88, v89, type metadata accessor for DiscoveryToken);
  v90 = sub_100025C70(v86, v87, type metadata accessor for FriendSharedSecretsRecord);
  v91 = Logger.logObject.getter(v90);
  v92 = static os_log_type_t.default.getter(v91);
  v93 = os_log_type_enabled(v91, v92);
  v94 = *(_QWORD *)(v0 + 632);
  v95 = *(_QWORD *)(v0 + 544);
  v197 = v11;
  if (v93)
  {
    v220 = *(_QWORD *)(v0 + 312);
    v96 = swift_slowAlloc(22, -1);
    v224 = swift_slowAlloc(64, -1);
    v227[0] = v224;
    *(_DWORD *)v96 = 136446466;
    v97 = sub_1001D3010();
    v99 = v98;
    *(_QWORD *)(v0 + 208) = sub_10002BA84(v97, v98, v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v181, v96 + 4, v96 + 12);
    swift_bridgeObjectRelease(v99);
    sub_100024990(v95, type metadata accessor for DiscoveryToken);
    *(_WORD *)(v96 + 12) = 2082;
    v100 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v101 = dispatch thunk of CustomStringConvertible.description.getter(v220, v100);
    v103 = v102;
    *(_QWORD *)(v0 + 216) = sub_10002BA84(v101, v102, v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v181, v0 + 224, v96 + 14, v96 + 22);
    swift_bridgeObjectRelease(v103);
    sub_100024990(v94, type metadata accessor for FriendSharedSecretsRecord);
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "Found matching token %{public}s from record %{public}s", (uint8_t *)v96, 0x16u);
    swift_arrayDestroy(v224, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v224, -1, -1);
    swift_slowDealloc(v96, -1, -1);
  }
  else
  {
    sub_100024990(v95, type metadata accessor for DiscoveryToken);
    sub_100024990(v94, type metadata accessor for FriendSharedSecretsRecord);
  }

  v104 = *(_QWORD *)(v0 + 768);
  v105 = *(_QWORD *)(v104 + 16);
  if (!v105)
  {
LABEL_44:
    v136 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 456) + 56);
    v136(*(_QWORD *)(v0 + 440), 1, 1, *(_QWORD *)(v0 + 448));
    goto LABEL_47;
  }
  v106 = *(_QWORD *)(v0 + 456);
  v209 = *(_QWORD *)(v0 + 336);
  v211 = *(_QWORD *)(v0 + 384);
  v215 = *(_QWORD *)(v0 + 320);
  v107 = v104 + ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80));
  v194 = *(_QWORD *)(v106 + 72);
  v200 = v106;
  v206 = *(uint64_t (**)(_QWORD, __n128))(v106 + 16);
  v108 = swift_bridgeObjectRetain(v104);
  v109 = v107;
  v110 = (uint64_t *)&unk_1002675F0;
  while (2)
  {
    v221 = v109;
    v225 = *(_QWORD *)(v0 + 640);
    v112 = v110;
    v113 = *(_QWORD *)(v0 + 424);
    v114 = *(_QWORD *)(v0 + 368);
    v115 = *(_QWORD *)(v0 + 376);
    v116 = *(_QWORD *)(v0 + 360);
    v117 = *(_QWORD *)(v0 + 344);
    v118 = *(_QWORD *)(v0 + 312);
    v119 = v206(*(_QWORD *)(v0 + 488), v108);
    v120 = Friend.handle.getter(v119);
    Handle.peerID.getter(v120);
    v121 = v113;
    v110 = v112;
    (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v121, v115);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v215 + 16))(v116, v225, v118);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v215 + 56))(v116, 0, 1, v118);
    v122 = v117 + *(int *)(v209 + 48);
    sub_10000E37C(v114, v117, v112);
    sub_10000E37C(v116, v122, v112);
    v123 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v215 + 48);
    v124 = v123(v117, 1, v118);
    v125 = *(_QWORD *)(v0 + 312);
    if (v124 != 1)
    {
      sub_10000E37C(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), v112);
      v126 = v123(v122, 1, v125);
      v127 = *(_QWORD *)(v0 + 360);
      v128 = *(_QWORD *)(v0 + 368);
      v129 = *(_QWORD *)(v0 + 352);
      if (v126 == 1)
      {
        v130 = *(_QWORD *)(v0 + 312);
        sub_1000087A0(*(_QWORD *)(v0 + 360), v110);
        sub_1000087A0(v128, v110);
        (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v129, v130);
LABEL_36:
        sub_1000087A0(*(_QWORD *)(v0 + 344), &qword_100263E18);
      }
      else
      {
        v226 = *(_QWORD *)(v0 + 344);
        v131 = *(_QWORD *)(v0 + 328);
        v132 = *(_QWORD *)(v0 + 312);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v215 + 32))(v131, v122, v132);
        v133 = sub_100004EA8(&qword_100261E80, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v134 = dispatch thunk of static Equatable.== infix(_:_:)(v129, v131, v132, v133);
        v135 = *(void (**)(uint64_t, uint64_t))(v215 + 8);
        v135(v131, v132);
        sub_1000087A0(v127, v110);
        sub_1000087A0(v128, v110);
        v135(v129, v132);
        sub_1000087A0(v226, v110);
        if ((v134 & 1) != 0)
          goto LABEL_46;
      }
      (*(void (**)(_QWORD, _QWORD))(v200 + 8))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 448));
      v109 = v221 + v194;
      if (!--v105)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 768));
        goto LABEL_44;
      }
      continue;
    }
    break;
  }
  v111 = *(_QWORD *)(v0 + 368);
  sub_1000087A0(*(_QWORD *)(v0 + 360), v112);
  sub_1000087A0(v111, v112);
  if (v123(v122, 1, v125) != 1)
    goto LABEL_36;
  sub_1000087A0(*(_QWORD *)(v0 + 344), (uint64_t *)&unk_1002675F0);
LABEL_46:
  v137 = *(_QWORD *)(v0 + 488);
  v138 = *(_QWORD *)(v0 + 448);
  v139 = *(_QWORD *)(v0 + 456);
  v140 = *(_QWORD *)(v0 + 440);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 768));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 32))(v140, v137, v138);
  v136 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56);
  v136(v140, 0, 1, v138);
LABEL_47:
  *(_QWORD *)(v0 + 904) = v136;
  v141 = *(_QWORD *)(v0 + 448);
  v142 = *(_QWORD *)(v0 + 456);
  v143 = *(_QWORD *)(v0 + 440);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 768));
  v144 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48);
  *(_QWORD *)(v0 + 912) = v144;
  if (v144(v143, 1, v141) == 1)
  {
    v145 = *(_QWORD *)(v0 + 792);
    v146 = *(_QWORD *)(v0 + 440);
    swift_release(*(_QWORD *)(v0 + 864));
    swift_bridgeObjectRelease(v145);
    v147 = sub_1000087A0(v146, &qword_100260950);
    v148 = Logger.logObject.getter(v147);
    v149 = static os_log_type_t.error.getter(v148);
    if (os_log_type_enabled(v148, v149))
    {
      v150 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v150 = 0;
      _os_log_impl((void *)&_mh_execute_header, v148, v149, "No matching friend for active token!", v150, 2u);
      swift_slowDealloc(v150, -1, -1);
    }
    v151 = *(_QWORD *)(v0 + 824);
    v152 = *(_QWORD *)(v0 + 688);
    v153 = *(_QWORD *)(v0 + 640);
    v154 = *(_QWORD *)(v0 + 592);
    v155 = *(_QWORD *)(v0 + 568);
    v156 = *(_QWORD *)(v0 + 552);

    v157 = sub_100097FB4();
    v158 = swift_allocError(&type metadata for NITokenService.Error, v157, 0, 0);
    *v159 = 2;
    swift_willThrow(v158);
    sub_100037AF8(v197, v216);
    swift_release(v151);
    swift_release(v152);
    sub_100024990(v156, type metadata accessor for DiscoveryToken);
    v203(v154, v155);
    sub_100024990(v153, type metadata accessor for FriendSharedSecretsRecord);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    sub_100037A9C(v192, (uint64_t)qword_10027B330);
    swift_errorRetain(v158);
    v160 = swift_errorRetain(v158);
    v161 = Logger.logObject.getter(v160);
    v162 = static os_log_type_t.error.getter(v161);
    if (os_log_type_enabled(v161, v162))
    {
      v163 = (uint8_t *)swift_slowAlloc(12, -1);
      v164 = swift_slowAlloc(32, -1);
      v227[0] = v164;
      *(_DWORD *)v163 = 136446210;
      *v178 = v158;
      swift_errorRetain(v158);
      v165 = sub_100037A5C(&qword_100265260);
      v166 = String.init<A>(describing:)(v178, v165);
      v168 = v167;
      *v184 = sub_10002BA84(v166, v167, v227);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v184, v178, v163 + 4, v163 + 12);
      swift_bridgeObjectRelease(v168);
      swift_errorRelease(v158);
      swift_errorRelease(v158);
      _os_log_impl((void *)&_mh_execute_header, v161, v162, "handleRangingStartedNotification error: %{public}s", v163, 0xCu);
      swift_arrayDestroy(v164, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v164, -1, -1);
      swift_slowDealloc(v163, -1, -1);

      swift_errorRelease(v158);
    }
    else
    {
      swift_errorRelease(v158);
      swift_errorRelease(v158);
      swift_errorRelease(v158);

    }
LABEL_27:
    v76 = *(_QWORD *)(v0 + 632);
    v77 = *(_QWORD *)(v0 + 624);
    v78 = *(_QWORD *)(v0 + 616);
    v79 = *(_QWORD *)(v0 + 592);
    v80 = *(_QWORD *)(v0 + 584);
    v81 = *(_QWORD *)(v0 + 560);
    v82 = *(_QWORD *)(v0 + 552);
    v83 = *(_QWORD *)(v0 + 544);
    v84 = *(_QWORD *)(v0 + 520);
    v174 = *(_QWORD *)(v0 + 512);
    v175 = *(_QWORD *)(v0 + 496);
    v176 = *(_QWORD *)(v0 + 488);
    v177 = *(_QWORD *)(v0 + 480);
    v179 = *(_QWORD *)(v0 + 472);
    v180 = *(_QWORD *)(v0 + 464);
    v182 = *(_QWORD *)(v0 + 440);
    v183 = *(_QWORD *)(v0 + 432);
    v185 = *(_QWORD *)(v0 + 424);
    v186 = *(_QWORD *)(v0 + 416);
    v188 = *(_QWORD *)(v0 + 408);
    v191 = *(_QWORD *)(v0 + 400);
    v193 = *(_QWORD *)(v0 + 392);
    v196 = *(_QWORD *)(v0 + 368);
    v199 = *(_QWORD *)(v0 + 360);
    v202 = *(_QWORD *)(v0 + 352);
    v205 = *(_QWORD *)(v0 + 344);
    v208 = *(_QWORD *)(v0 + 328);
    v210 = *(_QWORD *)(v0 + 304);
    v212 = *(_QWORD *)(v0 + 296);
    v214 = *(_QWORD *)(v0 + 288);
    v217 = *(_QWORD *)(v0 + 280);
    v219 = *(_QWORD *)(v0 + 264);
    v223 = *(_QWORD *)(v0 + 256);
    swift_task_dealloc(*(_QWORD *)(v0 + 640));
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v174);
    swift_task_dealloc(v175);
    swift_task_dealloc(v176);
    swift_task_dealloc(v177);
    swift_task_dealloc(v179);
    swift_task_dealloc(v180);
    swift_task_dealloc(v182);
    swift_task_dealloc(v183);
    swift_task_dealloc(v185);
    swift_task_dealloc(v186);
    swift_task_dealloc(v188);
    swift_task_dealloc(v191);
    swift_task_dealloc(v193);
    swift_task_dealloc(v196);
    swift_task_dealloc(v199);
    swift_task_dealloc(v202);
    swift_task_dealloc(v205);
    swift_task_dealloc(v208);
    swift_task_dealloc(v210);
    swift_task_dealloc(v212);
    swift_task_dealloc(v214);
    swift_task_dealloc(v217);
    swift_task_dealloc(v219);
    swift_task_dealloc(v223);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v169 = *(_QWORD *)(v0 + 496);
    v170 = *(_QWORD *)(v0 + 448);
    v171 = *(_QWORD *)(v0 + 440);
    v172 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 456) + 32);
    *(_QWORD *)(v0 + 920) = v172;
    v172(v169, v171, v170);
    v173 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 928) = v173;
    *v173 = v0;
    v173[1] = sub_10010D778;
    return daemon.getter();
  }
}

uint64_t sub_10010D354()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[99];
  v2 = v0[96];
  v3 = v0[28];
  swift_bridgeObjectRelease(v0[88]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10010D3B4, v3, 0);
}

uint64_t sub_10010D3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(_QWORD *)(v0 + 688);
  swift_release(*(_QWORD *)(v0 + 824));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 848);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027B330);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136446210;
    v47 = v8;
    *(_QWORD *)(v0 + 176) = v2;
    swift_errorRetain(v2);
    v9 = sub_100037A5C(&qword_100265260);
    v10 = String.init<A>(describing:)(v0 + 176, v9);
    v12 = v11;
    *(_QWORD *)(v0 + 168) = sub_10002BA84(v10, v11, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "handleRangingStartedNotification error: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v13 = *(_QWORD *)(v0 + 632);
  v14 = *(_QWORD *)(v0 + 624);
  v15 = *(_QWORD *)(v0 + 616);
  v16 = *(_QWORD *)(v0 + 592);
  v17 = *(_QWORD *)(v0 + 584);
  v18 = *(_QWORD *)(v0 + 560);
  v19 = *(_QWORD *)(v0 + 552);
  v20 = *(_QWORD *)(v0 + 544);
  v21 = *(_QWORD *)(v0 + 520);
  v23 = *(_QWORD *)(v0 + 512);
  v24 = *(_QWORD *)(v0 + 496);
  v25 = *(_QWORD *)(v0 + 488);
  v26 = *(_QWORD *)(v0 + 480);
  v27 = *(_QWORD *)(v0 + 472);
  v28 = *(_QWORD *)(v0 + 464);
  v29 = *(_QWORD *)(v0 + 440);
  v30 = *(_QWORD *)(v0 + 432);
  v31 = *(_QWORD *)(v0 + 424);
  v32 = *(_QWORD *)(v0 + 416);
  v33 = *(_QWORD *)(v0 + 408);
  v34 = *(_QWORD *)(v0 + 400);
  v35 = *(_QWORD *)(v0 + 392);
  v36 = *(_QWORD *)(v0 + 368);
  v37 = *(_QWORD *)(v0 + 360);
  v38 = *(_QWORD *)(v0 + 352);
  v39 = *(_QWORD *)(v0 + 344);
  v40 = *(_QWORD *)(v0 + 328);
  v41 = *(_QWORD *)(v0 + 304);
  v42 = *(_QWORD *)(v0 + 296);
  v43 = *(_QWORD *)(v0 + 288);
  v44 = *(_QWORD *)(v0 + 280);
  v45 = *(_QWORD *)(v0 + 264);
  v46 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010D778(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 928);
  v5 = *v1;
  *(_QWORD *)(*v1 + 936) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[118] = v6;
  v7 = type metadata accessor for UserNotificationService();
  v8 = sub_100004EA8(&qword_100261EE0, (uint64_t (*)(uint64_t))type metadata accessor for UserNotificationService, (uint64_t)&unk_1001F7080);
  *v6 = v5;
  v6[1] = sub_10010D824;
  return ActorServiceDaemon.getService<A>()(v3[84], v7, v3[85], v8);
}

uint64_t sub_10010D824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 944);
  v3[119] = a1;
  v3[120] = v1;
  swift_task_dealloc(v4);
  v5 = v3[117];
  if (v1)
  {
    v6 = v3[108];
    v7 = v3[99];
    v8 = v3[28];
    swift_release(v6);
    swift_release(v5);
    swift_bridgeObjectRelease(v7);
    v9 = sub_10010F328;
    v10 = v8;
  }
  else
  {
    v11 = v3[28];
    swift_release(v3[117]);
    v9 = sub_10010D8D0;
    v10 = v11;
  }
  return swift_task_switch(v9, v10, 0);
}

uint64_t sub_10010D8D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)();
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t (*v41)(_QWORD, uint64_t, _QWORD, __n128);
  uint64_t v42;
  uint64_t v43;

  v1 = v0[99];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[57];
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v38 = *(_QWORD *)(v3 + 72);
    v39 = v3;
    v41 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v3 + 16);
    v42 = v0[48];
    v5 = swift_bridgeObjectRetain(v1);
    v40 = v0;
    while (1)
    {
      v43 = v2;
      v7 = v0[51];
      v6 = v0[52];
      v8 = v0[47];
      v9 = v41(v0[60], v4, v0[56], v5);
      v10 = Friend.handle.getter(v9);
      v11 = Handle.identifier.getter(v10);
      v13 = v12;
      v14 = *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8);
      v15 = v14(v6, v8);
      v16 = Friend.handle.getter(v15);
      v17 = Handle.identifier.getter(v16);
      v19 = v18;
      v14(v7, v8);
      if (v11 == v17 && v13 == v19)
        break;
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v17, v19, 0);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v19);
      if ((v21 & 1) != 0)
        goto LABEL_12;
      v0 = v40;
      (*(void (**)(_QWORD, _QWORD))(v39 + 8))(v40[60], v40[56]);
      v4 += v38;
      v2 = v43 - 1;
      if (v43 == 1)
      {
        swift_bridgeObjectRelease(v40[99]);
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease_n(v13, 2);
LABEL_12:
    v0 = v40;
    v23 = (void (*)(uint64_t, uint64_t, uint64_t))v40[115];
    v24 = v40[60];
    v25 = v40[56];
    v26 = v40[54];
    swift_bridgeObjectRelease(v40[99]);
    v23(v26, v24, v25);
    v22 = 0;
  }
  else
  {
LABEL_10:
    v22 = 1;
  }
  v27 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[114];
  v28 = v0[108];
  v29 = v0[99];
  v30 = v0[56];
  v31 = v0[54];
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[113])(v31, v22, 1, v30);
  swift_release(v28);
  swift_bridgeObjectRelease(v29);
  if (v27(v31, 1, v30) == 1)
  {
    v32 = v0[62];
    v34 = v0[57];
    v33 = v0[58];
    v35 = v0[56];
    sub_1000087A0(v0[54], &qword_100260950);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v32, v35);
    v36 = sub_10010DFA0;
  }
  else
  {
    ((void (*)(_QWORD, _QWORD, _QWORD))v0[115])(v0[59], v0[54], v0[56]);
    v36 = sub_10010DB2C;
  }
  return swift_task_switch(v36, 0, 0);
}

uint64_t sub_10010DB2C()
{
  _QWORD *v0;
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = (_BYTE *)v0[38];
  v2 = v0[34];
  *v1 = 2;
  v3 = &v1[*(int *)(v2 + 20)];
  v4 = enum case for LocalUserNotificationCategory.peopleFindingSessionStarted(_:);
  v5 = type metadata accessor for LocalUserNotificationCategory(0);
  v6 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v3, v4, v5);
  v7 = UUID.init()(v6);
  v8 = Friend.handle.getter(v7);
  v9 = Handle.isPhoneNumber.getter(v8);
  LOBYTE(v3) = v9;
  v10 = Handle.identifier.getter(v9);
  if ((v3 & 1) != 0)
    Destination.init(phoneNumber:)(v10);
  else
    Destination.init(email:)(v10);
  (*(void (**)(_QWORD, _QWORD))(v0[48] + 8))(v0[50], v0[47]);
  v11 = (_QWORD *)swift_task_alloc(dword_100265244);
  v0[121] = v11;
  *v11 = v0;
  v11[1] = sub_10010DC1C;
  return sub_100152250(1);
}

uint64_t sub_10010DC1C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 968);
  v5 = *(_QWORD *)(*v2 + 264);
  v6 = *(_QWORD *)(*v2 + 240);
  v7 = *(_QWORD *)(*v2 + 248);
  *(_QWORD *)(v3 + 976) = a1;
  *(_QWORD *)(v3 + 984) = a2;
  swift_task_dealloc(v4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return swift_task_switch(sub_10010DC9C, 0, 0);
}

uint64_t sub_10010DC9C()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[123];
  v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[115];
  v3 = v0[59];
  v4 = v0[56];
  v5 = v0[38];
  v6 = v0[34];
  v7 = v0[28];
  v8 = (_QWORD *)(v5 + *(int *)(v6 + 28));
  *v8 = v0[122];
  v8[1] = v1;
  v2(v5 + *(int *)(v6 + 32), v3, v4);
  return swift_task_switch(sub_10010DD08, v7, 0);
}

uint64_t sub_10010DD08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  os_log_type_t type;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0[38];
  v2 = v0[36];
  sub_100025C70(v1, v0[37], type metadata accessor for RedStripeNotification);
  v3 = sub_100025C70(v1, v2, type metadata accessor for RedStripeNotification);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[37];
    v7 = v0[34];
    v22 = v0[35];
    v23 = v0[36];
    v20 = v7;
    type = v5;
    v8 = swift_slowAlloc(32, -1);
    v24 = swift_slowAlloc(64, -1);
    v25 = v24;
    v0[23] = 1752392040;
    *(_DWORD *)v8 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    v9 = (uint64_t *)(v6 + *(int *)(v7 + 28));
    v10 = *v9;
    v11 = v9[1];
    swift_bridgeObjectRetain(v11);
    v0[24] = sub_10002BA84(v10, v11, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 25, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v11);
    sub_100024990(v6, type metadata accessor for RedStripeNotification);
    *(_WORD *)(v8 + 22) = 2080;
    sub_100025C70(v23, v22, type metadata accessor for RedStripeNotification);
    v12 = String.init<A>(describing:)(v22, v20);
    v14 = v13;
    v0[25] = sub_10002BA84(v12, v13, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease(v14);
    sub_100024990(v23, type metadata accessor for RedStripeNotification);
    _os_log_impl((void *)&_mh_execute_header, v4, type, "%{private,mask.hash}s is trying to find you. %s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v15 = v0[36];
    sub_100024990(v0[37], type metadata accessor for RedStripeNotification);
    sub_100024990(v15, type metadata accessor for RedStripeNotification);
  }

  v16 = v0[119];
  v17 = v0[38];
  v0[18] = v0[34];
  v0[19] = &off_100255178;
  v18 = sub_10003276C(v0 + 15);
  sub_100025C70(v17, (uint64_t)v18, type metadata accessor for RedStripeNotification);
  return swift_task_switch(sub_10010E17C, v16, 0);
}

uint64_t sub_10010DFA0()
{
  _QWORD *v0;
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = (_BYTE *)v0[38];
  v2 = v0[34];
  *v1 = 2;
  v3 = &v1[*(int *)(v2 + 20)];
  v4 = enum case for LocalUserNotificationCategory.peopleFindingSessionStarted(_:);
  v5 = type metadata accessor for LocalUserNotificationCategory(0);
  v6 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v3, v4, v5);
  v7 = UUID.init()(v6);
  v8 = Friend.handle.getter(v7);
  v9 = Handle.isPhoneNumber.getter(v8);
  LOBYTE(v3) = v9;
  v10 = Handle.identifier.getter(v9);
  if ((v3 & 1) != 0)
    Destination.init(phoneNumber:)(v10);
  else
    Destination.init(email:)(v10);
  (*(void (**)(_QWORD, _QWORD))(v0[48] + 8))(v0[49], v0[47]);
  v11 = (_QWORD *)swift_task_alloc(dword_100265244);
  v0[124] = v11;
  *v11 = v0;
  v11[1] = sub_10010E090;
  return sub_100152250(1);
}

uint64_t sub_10010E090(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 992);
  v6 = *(_QWORD *)(*v2 + 248);
  v5 = *(_QWORD *)(*v2 + 256);
  v7 = *(_QWORD *)(*v2 + 240);
  *(_QWORD *)(v3 + 1000) = a1;
  *(_QWORD *)(v3 + 1008) = a2;
  swift_task_dealloc(v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  return swift_task_switch(sub_10010E110, 0, 0);
}

uint64_t sub_10010E110()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[126];
  v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[115];
  v3 = v0[58];
  v4 = v0[56];
  v5 = v0[38];
  v6 = v0[34];
  v7 = v0[28];
  v8 = (_QWORD *)(v5 + *(int *)(v6 + 28));
  *v8 = v0[125];
  v8[1] = v1;
  v2(v5 + *(int *)(v6 + 32), v3, v4);
  return swift_task_switch(sub_10011D968, v7, 0);
}

uint64_t sub_10010E17C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  _QWORD *v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSString v17;
  id v18;
  uint64_t v19;

  v1 = v0;
  v2 = v0 + 2;
  v4 = v1[40];
  v3 = v1[41];
  v5 = v1[39];
  v6 = v1[34];
  v7 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithBundleIdentifier:", v8);
  v1[127] = v9;

  v10 = sub_100036228(v1 + 15, v1[18]);
  v11 = sub_10011CD3C((uint64_t)v10);
  v1[128] = v11;
  v12 = (char *)sub_100036228(v1 + 15, v1[18]);
  v13 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 16))(v3, &v12[*(int *)(v6 + 24)], v5);
  UUID.uuidString.getter(v13);
  v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v16 = v11;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v18 = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:destinations:", v17, v16, 0, 7);
  v1[129] = v18;

  v1[2] = v1;
  v1[3] = sub_10010E33C;
  v19 = swift_continuation_init(v2, 1);
  v1[10] = _NSConcreteStackBlock;
  v1 += 10;
  v1[1] = 0x40000000;
  v1[2] = sub_10010A918;
  v1[3] = &unk_1002535D0;
  v1[4] = v19;
  objc_msgSend(v9, "addNotificationRequest:withCompletionHandler:", v18, v1);
  return swift_continuation_await(v2);
}

uint64_t sub_10010E33C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 1040) = v2;
  if (v2)
    v3 = sub_10010E6BC;
  else
    v3 = sub_10010E39C;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 952), 0);
}

uint64_t sub_10010E39C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 1032);
  v2 = *(void **)(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 224);

  sub_10002BB90((_QWORD *)(v0 + 120));
  return swift_task_switch(sub_10010E400, v3, 0);
}

uint64_t sub_10010E400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 952);
  v2 = *(_QWORD *)(v0 + 824);
  v3 = *(_QWORD *)(v0 + 688);
  v43 = *(void (**)(uint64_t, uint64_t))(v0 + 888);
  v45 = *(_QWORD *)(v0 + 640);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 552);
  v41 = *(_QWORD *)(v0 + 496);
  v8 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 456);
  v9 = *(_QWORD *)(v0 + 304);
  sub_100037AF8(*(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 880));
  swift_release(v2);
  swift_release(v1);
  swift_release(v3);
  sub_100024990(v9, type metadata accessor for RedStripeNotification);
  sub_100024990(v6, type metadata accessor for DiscoveryToken);
  v43(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v41, v8);
  sub_100024990(v45, type metadata accessor for FriendSharedSecretsRecord);
  v10 = *(_QWORD *)(v0 + 632);
  v11 = *(_QWORD *)(v0 + 624);
  v12 = *(_QWORD *)(v0 + 616);
  v13 = *(_QWORD *)(v0 + 592);
  v14 = *(_QWORD *)(v0 + 584);
  v15 = *(_QWORD *)(v0 + 560);
  v16 = *(_QWORD *)(v0 + 552);
  v17 = *(_QWORD *)(v0 + 544);
  v18 = *(_QWORD *)(v0 + 520);
  v20 = *(_QWORD *)(v0 + 512);
  v21 = *(_QWORD *)(v0 + 496);
  v22 = *(_QWORD *)(v0 + 488);
  v23 = *(_QWORD *)(v0 + 480);
  v24 = *(_QWORD *)(v0 + 472);
  v25 = *(_QWORD *)(v0 + 464);
  v26 = *(_QWORD *)(v0 + 440);
  v27 = *(_QWORD *)(v0 + 432);
  v28 = *(_QWORD *)(v0 + 424);
  v29 = *(_QWORD *)(v0 + 416);
  v30 = *(_QWORD *)(v0 + 408);
  v31 = *(_QWORD *)(v0 + 400);
  v32 = *(_QWORD *)(v0 + 392);
  v33 = *(_QWORD *)(v0 + 368);
  v34 = *(_QWORD *)(v0 + 360);
  v35 = *(_QWORD *)(v0 + 352);
  v36 = *(_QWORD *)(v0 + 344);
  v37 = *(_QWORD *)(v0 + 328);
  v38 = *(_QWORD *)(v0 + 304);
  v39 = *(_QWORD *)(v0 + 296);
  v40 = *(_QWORD *)(v0 + 288);
  v42 = *(_QWORD *)(v0 + 280);
  v44 = *(_QWORD *)(v0 + 264);
  v46 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010E6BC(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = (void *)v1[129];
  v3 = (void *)v1[128];
  v4 = (void *)v1[127];
  v5 = v1[28];
  swift_willThrow(a1);

  return swift_task_switch(sub_10010E724, v5, 0);
}

uint64_t sub_10010E724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = *(_QWORD *)(v0 + 952);
  v2 = *(_QWORD *)(v0 + 824);
  v3 = *(_QWORD *)(v0 + 688);
  v55 = *(_QWORD *)(v0 + 640);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 552);
  v51 = *(_QWORD *)(v0 + 496);
  v53 = *(void (**)(uint64_t, uint64_t))(v0 + 888);
  v7 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 456);
  v9 = *(_QWORD *)(v0 + 304);
  sub_100037AF8(*(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 880));
  swift_release(v2);
  swift_release(v1);
  swift_release(v3);
  sub_100024990(v9, type metadata accessor for RedStripeNotification);
  sub_100024990(v6, type metadata accessor for DiscoveryToken);
  v53(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v51, v7);
  sub_100024990(v55, type metadata accessor for FriendSharedSecretsRecord);
  sub_10002BB90((_QWORD *)(v0 + 120));
  v10 = *(_QWORD *)(v0 + 1040);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v11 = type metadata accessor for Logger(0);
  sub_100037A9C(v11, (uint64_t)qword_10027B330);
  swift_errorRetain(v10);
  v12 = swift_errorRetain(v10);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    *(_DWORD *)v15 = 136446210;
    v58 = v16;
    *(_QWORD *)(v0 + 176) = v10;
    swift_errorRetain(v10);
    v17 = sub_100037A5C(&qword_100265260);
    v18 = String.init<A>(describing:)(v0 + 176, v17);
    v20 = v19;
    *(_QWORD *)(v0 + 168) = sub_10002BA84(v18, v19, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "handleRangingStartedNotification error: %{public}s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v10);
  }
  else
  {
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v21 = *(_QWORD *)(v0 + 632);
  v22 = *(_QWORD *)(v0 + 624);
  v23 = *(_QWORD *)(v0 + 616);
  v24 = *(_QWORD *)(v0 + 592);
  v25 = *(_QWORD *)(v0 + 584);
  v26 = *(_QWORD *)(v0 + 560);
  v27 = *(_QWORD *)(v0 + 552);
  v28 = *(_QWORD *)(v0 + 544);
  v29 = *(_QWORD *)(v0 + 520);
  v31 = *(_QWORD *)(v0 + 512);
  v32 = *(_QWORD *)(v0 + 496);
  v33 = *(_QWORD *)(v0 + 488);
  v34 = *(_QWORD *)(v0 + 480);
  v35 = *(_QWORD *)(v0 + 472);
  v36 = *(_QWORD *)(v0 + 464);
  v37 = *(_QWORD *)(v0 + 440);
  v38 = *(_QWORD *)(v0 + 432);
  v39 = *(_QWORD *)(v0 + 424);
  v40 = *(_QWORD *)(v0 + 416);
  v41 = *(_QWORD *)(v0 + 408);
  v42 = *(_QWORD *)(v0 + 400);
  v43 = *(_QWORD *)(v0 + 392);
  v44 = *(_QWORD *)(v0 + 368);
  v45 = *(_QWORD *)(v0 + 360);
  v46 = *(_QWORD *)(v0 + 352);
  v47 = *(_QWORD *)(v0 + 344);
  v48 = *(_QWORD *)(v0 + 328);
  v49 = *(_QWORD *)(v0 + 304);
  v50 = *(_QWORD *)(v0 + 296);
  v52 = *(_QWORD *)(v0 + 288);
  v54 = *(_QWORD *)(v0 + 280);
  v56 = *(_QWORD *)(v0 + 264);
  v57 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010EB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  swift_release(*(_QWORD *)(v0 + 656));
  v1 = *(_QWORD *)(v0 + 696);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136446210;
    v46 = v7;
    *(_QWORD *)(v0 + 176) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 176, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 168) = sub_10002BA84(v9, v10, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "handleRangingStartedNotification error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v12 = *(_QWORD *)(v0 + 632);
  v13 = *(_QWORD *)(v0 + 624);
  v14 = *(_QWORD *)(v0 + 616);
  v15 = *(_QWORD *)(v0 + 592);
  v16 = *(_QWORD *)(v0 + 584);
  v17 = *(_QWORD *)(v0 + 560);
  v18 = *(_QWORD *)(v0 + 552);
  v19 = *(_QWORD *)(v0 + 544);
  v20 = *(_QWORD *)(v0 + 520);
  v22 = *(_QWORD *)(v0 + 512);
  v23 = *(_QWORD *)(v0 + 496);
  v24 = *(_QWORD *)(v0 + 488);
  v25 = *(_QWORD *)(v0 + 480);
  v26 = *(_QWORD *)(v0 + 472);
  v27 = *(_QWORD *)(v0 + 464);
  v28 = *(_QWORD *)(v0 + 440);
  v29 = *(_QWORD *)(v0 + 432);
  v30 = *(_QWORD *)(v0 + 424);
  v31 = *(_QWORD *)(v0 + 416);
  v32 = *(_QWORD *)(v0 + 408);
  v33 = *(_QWORD *)(v0 + 400);
  v34 = *(_QWORD *)(v0 + 392);
  v35 = *(_QWORD *)(v0 + 368);
  v36 = *(_QWORD *)(v0 + 360);
  v37 = *(_QWORD *)(v0 + 352);
  v38 = *(_QWORD *)(v0 + 344);
  v39 = *(_QWORD *)(v0 + 328);
  v40 = *(_QWORD *)(v0 + 304);
  v41 = *(_QWORD *)(v0 + 296);
  v42 = *(_QWORD *)(v0 + 288);
  v43 = *(_QWORD *)(v0 + 280);
  v44 = *(_QWORD *)(v0 + 264);
  v45 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010EF40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 792);
  v2 = *(_QWORD *)(v0 + 768);
  v3 = *(_QWORD *)(v0 + 704);
  v4 = *(_QWORD *)(v0 + 688);
  swift_release(*(_QWORD *)(v0 + 808));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_release(v4);
  v5 = *(_QWORD *)(v0 + 832);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027B330);
  swift_errorRetain(v5);
  v7 = swift_errorRetain(v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_DWORD *)v10 = 136446210;
    v50 = v11;
    *(_QWORD *)(v0 + 176) = v5;
    swift_errorRetain(v5);
    v12 = sub_100037A5C(&qword_100265260);
    v13 = String.init<A>(describing:)(v0 + 176, v12);
    v15 = v14;
    *(_QWORD *)(v0 + 168) = sub_10002BA84(v13, v14, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "handleRangingStartedNotification error: %{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);

  }
  v16 = *(_QWORD *)(v0 + 632);
  v17 = *(_QWORD *)(v0 + 624);
  v18 = *(_QWORD *)(v0 + 616);
  v19 = *(_QWORD *)(v0 + 592);
  v20 = *(_QWORD *)(v0 + 584);
  v21 = *(_QWORD *)(v0 + 560);
  v22 = *(_QWORD *)(v0 + 552);
  v23 = *(_QWORD *)(v0 + 544);
  v24 = *(_QWORD *)(v0 + 520);
  v26 = *(_QWORD *)(v0 + 512);
  v27 = *(_QWORD *)(v0 + 496);
  v28 = *(_QWORD *)(v0 + 488);
  v29 = *(_QWORD *)(v0 + 480);
  v30 = *(_QWORD *)(v0 + 472);
  v31 = *(_QWORD *)(v0 + 464);
  v32 = *(_QWORD *)(v0 + 440);
  v33 = *(_QWORD *)(v0 + 432);
  v34 = *(_QWORD *)(v0 + 424);
  v35 = *(_QWORD *)(v0 + 416);
  v36 = *(_QWORD *)(v0 + 408);
  v37 = *(_QWORD *)(v0 + 400);
  v38 = *(_QWORD *)(v0 + 392);
  v39 = *(_QWORD *)(v0 + 368);
  v40 = *(_QWORD *)(v0 + 360);
  v41 = *(_QWORD *)(v0 + 352);
  v42 = *(_QWORD *)(v0 + 344);
  v43 = *(_QWORD *)(v0 + 328);
  v44 = *(_QWORD *)(v0 + 304);
  v45 = *(_QWORD *)(v0 + 296);
  v46 = *(_QWORD *)(v0 + 288);
  v47 = *(_QWORD *)(v0 + 280);
  v48 = *(_QWORD *)(v0 + 264);
  v49 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010F328()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 888);
  v2 = *(_QWORD *)(v0 + 824);
  v3 = *(_QWORD *)(v0 + 688);
  v54 = *(_QWORD *)(v0 + 640);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 552);
  v7 = *(_QWORD *)(v0 + 496);
  v9 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 456);
  sub_100037AF8(*(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 880));
  swift_release(v2);
  swift_release(v3);
  sub_100024990(v6, type metadata accessor for DiscoveryToken);
  v1(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  sub_100024990(v54, type metadata accessor for FriendSharedSecretsRecord);
  v10 = *(_QWORD *)(v0 + 960);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v11 = type metadata accessor for Logger(0);
  sub_100037A9C(v11, (uint64_t)qword_10027B330);
  swift_errorRetain(v10);
  v12 = swift_errorRetain(v10);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    *(_DWORD *)v15 = 136446210;
    v56 = v16;
    *(_QWORD *)(v0 + 176) = v10;
    swift_errorRetain(v10);
    v17 = sub_100037A5C(&qword_100265260);
    v18 = String.init<A>(describing:)(v0 + 176, v17);
    v20 = v19;
    *(_QWORD *)(v0 + 168) = sub_10002BA84(v18, v19, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "handleRangingStartedNotification error: %{public}s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v10);
  }
  else
  {
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v21 = *(_QWORD *)(v0 + 632);
  v22 = *(_QWORD *)(v0 + 624);
  v23 = *(_QWORD *)(v0 + 616);
  v24 = *(_QWORD *)(v0 + 592);
  v25 = *(_QWORD *)(v0 + 584);
  v26 = *(_QWORD *)(v0 + 560);
  v27 = *(_QWORD *)(v0 + 552);
  v28 = *(_QWORD *)(v0 + 544);
  v29 = *(_QWORD *)(v0 + 520);
  v31 = *(_QWORD *)(v0 + 512);
  v32 = *(_QWORD *)(v0 + 496);
  v33 = *(_QWORD *)(v0 + 488);
  v34 = *(_QWORD *)(v0 + 480);
  v35 = *(_QWORD *)(v0 + 472);
  v36 = *(_QWORD *)(v0 + 464);
  v37 = *(_QWORD *)(v0 + 440);
  v38 = *(_QWORD *)(v0 + 432);
  v39 = *(_QWORD *)(v0 + 424);
  v40 = *(_QWORD *)(v0 + 416);
  v41 = *(_QWORD *)(v0 + 408);
  v42 = *(_QWORD *)(v0 + 400);
  v43 = *(_QWORD *)(v0 + 392);
  v44 = *(_QWORD *)(v0 + 368);
  v45 = *(_QWORD *)(v0 + 360);
  v46 = *(_QWORD *)(v0 + 352);
  v47 = *(_QWORD *)(v0 + 344);
  v48 = *(_QWORD *)(v0 + 328);
  v49 = *(_QWORD *)(v0 + 304);
  v50 = *(_QWORD *)(v0 + 296);
  v51 = *(_QWORD *)(v0 + 288);
  v52 = *(_QWORD *)(v0 + 280);
  v53 = *(_QWORD *)(v0 + 264);
  v55 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010F758(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[10] = a1;
  v2[11] = v1;
  v2[12] = *v1;
  return swift_task_switch(sub_10010F778, v1, 0);
}

uint64_t sub_10010F778()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) != 0)
  {
    if ((sub_1001C30A4() & 1) != 0)
    {
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v3 = type metadata accessor for Logger(0);
      v4 = sub_100037A9C(v3, (uint64_t)qword_10027B330);
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.default.getter(v5);
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc(12, -1);
        v8 = swift_slowAlloc(32, -1);
        v34 = v8;
        *(_DWORD *)v7 = 136446210;
        *(_QWORD *)(v0 + 72) = sub_10002BA84(0xD000000000000023, 0x80000001001FF240, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v7 + 4, v7 + 12);
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s", v7, 0xCu);
        swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v8, -1, -1);
        swift_slowDealloc(v7, -1, -1);
      }

      v9 = sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
      v10 = swift_task_alloc(32);
      *(_QWORD *)(v0 + 104) = v10;
      v33 = *(_OWORD *)(v0 + 88);
      *(_OWORD *)(v10 + 16) = v33;
      v11 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v0 + 112) = v11;
      v12 = sub_100037A5C(&qword_100260A48);
      *v11 = v0;
      v11[1] = sub_10010FD70;
      return withCheckedContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 80), v33, v9, 0xD000000000000023, 0x80000001001FF240, sub_10011D1B4, v10, v12);
    }
    else
    {
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v22 = type metadata accessor for Logger(0);
      v23 = sub_100037A9C(v22, (uint64_t)qword_10027B330);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.default.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(12, -1);
        v27 = swift_slowAlloc(32, -1);
        v34 = v27;
        *(_DWORD *)v26 = 136446210;
        *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000023, 0x80000001001FF240, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v26 + 4, v26 + 12);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s isFindingCapable == false.", v26, 0xCu);
        swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v26, -1, -1);
      }

      v28 = sub_100097FB4();
      v29 = swift_allocError(&type metadata for NITokenService.Error, v28, 0, 0);
      *(_QWORD *)(v0 + 120) = v29;
      *v30 = 20;
      v31 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
      *(_QWORD *)(v0 + 128) = v31;
      v32 = (_QWORD *)swift_task_alloc(dword_100264B54);
      *(_QWORD *)(v0 + 136) = v32;
      *v32 = v0;
      v32[1] = sub_10010FDC0;
      return sub_100140EB8(0xD00000000000003BLL, 0x80000001001FF270, v29, v31);
    }
  }
  else
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100037A9C(v14, (uint64_t)qword_10027B330);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v34 = v19;
      *(_DWORD *)v18 = 136446210;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD000000000000023, 0x80000001001FF240, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v18 + 4, v18 + 12);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s Feature.FindMy.redStripe FF disabled.", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }

    v20 = *(_QWORD *)(v0 + 80);
    v21 = type metadata accessor for OwnerSharedSecretsRecord(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10010FD70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 104);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10010FDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  return swift_task_switch(sub_10010FE34, v3, 0);
}

uint64_t sub_10010FE34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for OwnerSharedSecretsRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010FE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;

  v6 = sub_100037A5C(&qword_100263CF8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v14 = sub_100004EA8(&qword_100263CF0, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA448);
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = (v15 + 40) & ~v15;
  v17 = (v8 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (char *)swift_allocObject(&unk_1002534A0, v17 + 8, v15 | 7);
  *((_QWORD *)v18 + 2) = a2;
  *((_QWORD *)v18 + 3) = v14;
  *((_QWORD *)v18 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v18[v16], v9, v6);
  *(_QWORD *)&v18[v17] = a3;
  swift_retain_n(a2, 2);
  v19 = sub_10005582C((uint64_t)v12, (uint64_t)&unk_100263D08, (uint64_t)v18);
  return swift_release(v19);
}

uint64_t sub_10011000C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v8 = type metadata accessor for UUID(0);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_100263CF8);
  v6[6] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[7] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v6[8] = v11;
  v6[9] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10011009C, a4, 0);
}

uint64_t sub_10011009C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = (v2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_1002534C8, v10 + 8, v8 | 7);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v1, v3);
  *(_QWORD *)(v11 + v10) = v6;
  UUID.init()(v12);
  v13 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v5, &unk_100263D18, v11, &unk_100263D20, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v13);
  swift_release(v13);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001101B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v2[10] = a1;
  v2[11] = a2;
  v3 = type metadata accessor for Date(0);
  v2[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[13] = v4;
  v2[14] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[16] = v6;
  v2[17] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260A48) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v7);
  v2[19] = swift_task_alloc(v7);
  v8 = type metadata accessor for OwnerSharedSecretsRecord(0);
  v2[20] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[21] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v10);
  v2[23] = swift_task_alloc(v10);
  v2[24] = swift_task_alloc(v10);
  v2[25] = swift_task_alloc(v10);
  v2[26] = swift_task_alloc(v10);
  v2[27] = swift_task_alloc(v10);
  v11 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v2[28] = v11;
  *v11 = v2;
  v11[1] = sub_1001102EC;
  return daemon.getter();
}

uint64_t sub_1001102EC(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 224);
  v5 = *v1;
  *(_QWORD *)(*v1 + 232) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[30] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[31] = v7;
  v8 = type metadata accessor for LocalStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[32] = v9;
  v10 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  *v6 = v5;
  v6[1] = sub_1001103E4;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001103E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[30];
  v5 = *v2;
  v5[33] = a1;
  v5[34] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10011149C, 0, 0);
  swift_release(v5[29]);
  v7 = (uint64_t **)swift_task_alloc(dword_1002606B4);
  v5[35] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_100110490;
  return sub_100056F84(v5[19]);
}

uint64_t sub_100110490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100111560;
  else
    v3 = sub_1001104F4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001104F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v1 = v0[19];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[21] + 48))(v1, 1, v0[20]) == 1)
  {
    sub_1000087A0(v1, &qword_100260A48);
    v0[37] = static Data.randomBytes(count:)(32);
    v0[38] = v2;
    __asm { BR              X10 }
  }
  sub_1000321F4(v1, v0[26], type metadata accessor for OwnerSharedSecretsRecord);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v4 = v0[25];
  v3 = v0[26];
  v5 = type metadata accessor for Logger(0);
  sub_100037A9C(v5, (uint64_t)qword_10027B330);
  v6 = sub_100025C70(v3, v4, type metadata accessor for OwnerSharedSecretsRecord);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[25];
  if (v9)
  {
    v11 = v0[24];
    v12 = v0[20];
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v21 = v14;
    *(_DWORD *)v13 = 136315138;
    sub_100025C70(v10, v11, type metadata accessor for OwnerSharedSecretsRecord);
    v15 = String.init<A>(describing:)(v11, v12);
    v17 = v16;
    v0[9] = sub_10002BA84(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    sub_100024990(v10, type metadata accessor for OwnerSharedSecretsRecord);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Found existing owner record: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_100024990(v0[25], type metadata accessor for OwnerSharedSecretsRecord);
  }

  sub_1000321F4(v0[26], v0[27], type metadata accessor for OwnerSharedSecretsRecord);
  v18 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  v0[47] = v18;
  v19 = (_QWORD *)swift_task_alloc(dword_100264B54);
  v0[48] = v19;
  *v19 = v0;
  v19[1] = sub_100110FF0;
  return sub_100140EB8(0xD00000000000003BLL, 0x80000001001FF270, 0, v18);
}

uint64_t sub_100110C90()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v5;

  v2 = (*v1)[39];
  v3 = *v1;
  v3[40] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100111624, 0, 0);
  sub_100025C70(v3[23], v3[27], type metadata accessor for OwnerSharedSecretsRecord);
  v5 = (uint64_t **)swift_task_alloc(async function pointer to daemon.getter[1]);
  v3[41] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = (uint64_t *)sub_100110D30;
  return daemon.getter();
}

uint64_t sub_100110D30(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 328);
  v5 = *v1;
  *(_QWORD *)(*v1 + 336) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[43] = v6;
  v7 = type metadata accessor for NITokenService_LocalMessaging();
  v8 = sub_100004EA8(&qword_100260F68, (uint64_t (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging, (uint64_t)&unk_1001F9E84);
  *v6 = v5;
  v6[1] = sub_100110DD8;
  return ActorServiceDaemon.getService<A>()(v3[31], v7, v3[32], v8);
}

uint64_t sub_100110DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *v2;
  v6 = *(_QWORD *)(*v2 + 336);
  v5 = *(_QWORD *)(*v2 + 344);
  *(_QWORD *)(*v2 + 352) = v1;
  swift_task_dealloc(v5);
  swift_release(v6);
  if (v1)
  {
    v7 = sub_100111750;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(v4 + 360) = a1;
    v7 = sub_100110E58;
    v8 = a1;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100110E58()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10018CA0C();
  v1 = (_QWORD *)swift_task_alloc(dword_1002660D4);
  *(_QWORD *)(v0 + 368) = v1;
  *v1 = v0;
  v1[1] = sub_100110EA8;
  return sub_100183224(0);
}

uint64_t sub_100110EA8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 368));
  return swift_task_switch(sub_100110EFC, 0, 0);
}

uint64_t sub_100110EFC()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v1 = v0[37];
  v2 = v0[38];
  v3 = v0[23];
  v5 = v0[16];
  v4 = v0[17];
  v7 = v0[14];
  v6 = v0[15];
  v8 = v0[12];
  v9 = v0[13];
  swift_release(v0[45]);
  sub_100037AB4(v1, v2);
  sub_100024990(v3, type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v10 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  v0[47] = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_100264B54);
  v0[48] = v11;
  *v11 = v0;
  v11[1] = sub_100110FF0;
  return sub_100140EB8(0xD00000000000003BLL, 0x80000001001FF270, 0, v10);
}

uint64_t sub_100110FF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10011104C, 0, 0);
}

uint64_t sub_10011104C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  sub_100025C70(v2, v5, type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v5, 0, 1, v3);
  v6 = sub_100037A5C(&qword_100263CF8);
  CheckedContinuation.resume(returning:)(v5, v6);
  swift_release(v1);
  sub_100024990(v2, type metadata accessor for OwnerSharedSecretsRecord);
  v7 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011116C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 408);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 400);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 416));
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  return swift_task_switch(sub_1001111D4, 0, 0);
}

uint64_t sub_1001111D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = *(_QWORD *)(v0 + 392);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 392);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v27 = v9;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD000000000000023, 0x80000001001FF240, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2082;
    *(_QWORD *)(v0 + 32) = v7;
    swift_errorRetain(v7);
    v10 = sub_100037A5C(&qword_100265260);
    v11 = String.init<A>(describing:)(v0 + 32, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v11, v12, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 392));
    swift_errorRelease(v7);
  }

  v14 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 56))(v15, 1, 1, *(_QWORD *)(v0 + 160));
  v16 = sub_100037A5C(&qword_100263CF8);
  CheckedContinuation.resume(returning:)(v15, v16);
  swift_errorRelease(v14);
  v17 = *(_QWORD *)(v0 + 208);
  v19 = *(_QWORD *)(v0 + 192);
  v18 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 176);
  v20 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 144);
  v22 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011149C()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  swift_release(v0[29]);
  v1 = v0[34];
  v0[49] = v1;
  v2 = sub_100097FB4();
  v3 = swift_allocError(&type metadata for NITokenService.Error, v2, 0, 0);
  v0[50] = v3;
  *v4 = v1;
  swift_errorRetain(v1);
  v5 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  v0[51] = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_100264B54);
  v0[52] = v6;
  *v6 = v0;
  v6[1] = sub_10011116C;
  return sub_100140EB8(0xD00000000000003BLL, 0x80000001001FF270, v3, v5);
}

uint64_t sub_100111560()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  swift_release(v0[33]);
  v1 = v0[36];
  v0[49] = v1;
  v2 = sub_100097FB4();
  v3 = swift_allocError(&type metadata for NITokenService.Error, v2, 0, 0);
  v0[50] = v3;
  *v4 = v1;
  swift_errorRetain(v1);
  v5 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  v0[51] = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_100264B54);
  v0[52] = v6;
  *v6 = v0;
  v6[1] = sub_10011116C;
  return sub_100140EB8(0xD00000000000003BLL, 0x80000001001FF270, v3, v5);
}

uint64_t sub_100111624()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;

  v1 = v0[37];
  v2 = v0[38];
  v3 = v0[23];
  v5 = v0[16];
  v4 = v0[17];
  v7 = v0[14];
  v6 = v0[15];
  v8 = v0[12];
  v9 = v0[13];
  swift_release(v0[33]);
  sub_100037AB4(v1, v2);
  sub_100024990(v3, type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v10 = v0[40];
  v0[49] = v10;
  v11 = sub_100097FB4();
  v12 = swift_allocError(&type metadata for NITokenService.Error, v11, 0, 0);
  v0[50] = v12;
  *v13 = v10;
  swift_errorRetain(v10);
  v14 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  v0[51] = v14;
  v15 = (_QWORD *)swift_task_alloc(dword_100264B54);
  v0[52] = v15;
  *v15 = v0;
  v15[1] = sub_10011116C;
  return sub_100140EB8(0xD00000000000003BLL, 0x80000001001FF270, v12, v14);
}

uint64_t sub_100111750()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v1 = v0[37];
  v2 = v0[38];
  v17 = v0[27];
  v3 = v0[23];
  v5 = v0[16];
  v4 = v0[17];
  v7 = v0[14];
  v6 = v0[15];
  v9 = v0[12];
  v8 = v0[13];
  swift_release(v0[33]);
  sub_100037AB4(v1, v2);
  sub_100024990(v3, type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100024990(v17, type metadata accessor for OwnerSharedSecretsRecord);
  v10 = v0[44];
  v0[49] = v10;
  v11 = sub_100097FB4();
  v12 = swift_allocError(&type metadata for NITokenService.Error, v11, 0, 0);
  v0[50] = v12;
  *v13 = v10;
  swift_errorRetain(v10);
  v14 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  v0[51] = v14;
  v15 = (_QWORD *)swift_task_alloc(dword_100264B54);
  v0[52] = v15;
  *v15 = v0;
  v15[1] = sub_10011116C;
  return sub_100140EB8(0xD00000000000003BLL, 0x80000001001FF270, v12, v14);
}

uint64_t sub_100111894(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[34] = a1;
  v2[35] = a2;
  v3 = type metadata accessor for Date(0);
  v2[36] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[37] = v4;
  v2[38] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001118F4, 0, 0);
}

uint64_t sub_1001118F4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 256) = _swiftEmptyArrayStorage;
  static ReferenceClock.now.getter(a1);
  v2 = (_QWORD *)swift_task_alloc(dword_100261A04);
  *(_QWORD *)(v1 + 312) = v2;
  *v2 = v1;
  v2[1] = sub_100111958;
  return sub_100086E80();
}

uint64_t sub_100111958(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 312);
  v3[40] = a1;
  v3[41] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v3[37] + 8))(v3[38], v3[36]);
  if (v1)
  {
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v5 = sub_100112D28;
  }
  else
  {
    v5 = sub_1001119E0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001119E0()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v16;
  uint64_t v17;

  v1 = (void *)v0[40];
  if (v1)
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v2 = v0 + 32;
    v3 = type metadata accessor for Logger(0);
    sub_100037A9C(v3, (uint64_t)qword_10027B330);
    v4 = v1;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v17 = v0[40];
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v7 = 138543362;
      v0[30] = v4;
      v8 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v7 + 4, v7 + 12);
      *v16 = v17;

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Setting owner token: %{public}@", v7, 0xCu);
      v9 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v16, 1, v9);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }
    else
    {

    }
    v10 = v4;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
    v12 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v11 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v12 >= v11 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
    specialized Array._endMutation()(v13);

  }
  v14 = (_QWORD *)swift_task_alloc(dword_100263DC4);
  v0[42] = v14;
  *v14 = v0;
  v14[1] = sub_100111C10;
  return sub_100112F64();
}

uint64_t sub_100111C10(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_BYTE *)(*(_QWORD *)v1 + 430) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100111C6C, 0, 0);
}

void sub_100111C6C()
{
  __asm { BR              X10 }
}

uint64_t sub_100111CE0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  swift_bridgeObjectRelease(0xE800000000000000);
  v1 = (_QWORD *)swift_task_alloc(dword_100263DDC);
  *(_QWORD *)(v0 + 344) = v1;
  *v1 = v0;
  v1[1] = sub_100112388;
  v2 = *(_QWORD **)(v0 + 272);
  v1[6] = v2;
  v1[7] = *v2;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v1[8] = v3;
  *v3 = v1;
  v3[1] = sub_100114548;
  return daemon.getter();
}

uint64_t sub_100112388(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 352) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001123E4, 0, 0);
}

uint64_t sub_1001123E4()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  Class isa;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44[2];

  v1 = (uint64_t *)(v0 + 256);
  v2 = sub_10010A388(*(_QWORD *)(v0 + 352));
  sub_10015D99C((uint64_t)v2);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v3 = *(_QWORD *)(v0 + 352);
  v4 = type metadata accessor for Logger(0);
  sub_100037A9C(v4, (uint64_t)qword_10027B330);
  v5 = swift_bridgeObjectRetain_n(v3, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 352);
  if (v8)
  {
    v10 = swift_slowAlloc(22, -1);
    v44[0] = swift_slowAlloc(32, -1);
    v11 = v44[0];
    *(_DWORD *)v10 = 134218242;
    *(_QWORD *)(v0 + 248) = *(_QWORD *)(v9 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v9);
    *(_WORD *)(v10 + 12) = 2082;
    type metadata accessor for DiscoveryToken(0);
    v12 = swift_bridgeObjectRetain(v9);
    v13 = Array.description.getter(v12);
    v15 = v14;
    swift_bridgeObjectRelease(v9);
    *(_QWORD *)(v0 + 232) = sub_10002BA84(v13, v15, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v9, 2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Setting friends tokens[%ld]: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 352), 3);
  }

  v16 = (void *)objc_opt_self(NISession);
  v17 = *v1;
  v18 = sub_10011D800();
  swift_bridgeObjectRetain(v17);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  v20 = objc_msgSend(v16, "setLocalDeviceInteractableDiscoveryTokens:", isa);

  v21 = objc_msgSend(v16, "interactableDiscoveryTokens");
  if (v21)
  {
    v22 = v21;
    v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v18);

    swift_bridgeObjectRelease(*v1);
    swift_bridgeObjectRetain(v23);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v44[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = swift_bridgeObjectRetain(v23);
      v30 = Array.description.getter(v29);
      v32 = v31;
      swift_bridgeObjectRelease(v23);
      *(_QWORD *)(v0 + 264) = sub_10002BA84(v30, v32, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease_n(v23, 2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Interactable discovery tokens: %{public}s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v23, 2);
    }

    if (qword_10025FB88 != -1)
      swift_once(&qword_10025FB88, sub_1001B4410);
    v40 = sub_100037A5C(&qword_1002632F8);
    v41 = sub_100037A9C(v40, (uint64_t)qword_100266920);
    *(_BYTE *)(v0 + 428) = 1;
    swift_beginAccess(v41, v0 + 112, 33, 0);
    ManagedDefault.wrappedValue.setter(v0 + 428, v40);
    swift_endAccess(v0 + 112);
    v42 = (_QWORD *)swift_task_alloc(dword_100266224);
    *(_QWORD *)(v0 + 360) = v42;
    *v42 = v0;
    v42[1] = sub_100112960;
    return sub_10018EF4C();
  }
  else
  {
    v33 = *v1;
    if ((unint64_t)v33 >> 62)
    {
      if (v33 < 0)
        v43 = v33;
      else
        v43 = v33 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v33);
      v34 = _CocoaArrayWrapper.endIndex.getter(v43);
      swift_bridgeObjectRelease(v33);
    }
    else
    {
      v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v35 = swift_bridgeObjectRelease(v33);
    if (v34)
    {
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.error.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "interactableDiscoveryTokens is unexpectedly empty!", v38, 2u);
        swift_slowDealloc(v38, -1, -1);
      }

    }
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100112960()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  return swift_task_switch(sub_1001129B4, 0, 0);
}

uint64_t sub_1001129B4()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;

  v1 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 368) = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_100264B54);
  *(_QWORD *)(v0 + 376) = v2;
  *v2 = v0;
  v2[1] = sub_100112A30;
  return sub_100140EB8(0xD00000000000003ELL, 0x80000001001FF3C0, 0, v1);
}

uint64_t sub_100112A30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 368);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 376));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_100112A8C, 0, 0);
}

uint64_t sub_100112A8C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100112AC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 384);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 392));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_100112B1C, 0, 0);
}

void sub_100112B1C()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t inited;

  v1 = *(unsigned __int8 *)(v0 + 430);
  v2 = sub_100097FB4();
  *(_QWORD *)(v0 + 400) = swift_allocError(&type metadata for NITokenService.Error, v2, 0, 0);
  *v3 = 20;
  v4 = sub_100037A5C(&qword_100263DD0);
  inited = swift_initStackObject(v4, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1001F35F0;
  strcpy((char *)(inited + 32), "findableStatus");
  *(_BYTE *)(inited + 47) = -18;
  __asm { BR              X10 }
}

uint64_t sub_100112BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v0 + 72) = &type metadata for String;
  *(_QWORD *)(v0 + 80) = sub_1000394E4();
  *(_QWORD *)(v0 + 48) = v3 + 15;
  *(_QWORD *)(v0 + 56) = 0x80000001001FF460;
  *(_WORD *)(v0 + 88) = 1;
  v4 = sub_1000DE8C4(v0);
  *(_QWORD *)(v2 + 408) = v4;
  v5 = (_QWORD *)swift_task_alloc(dword_100264B54);
  *(_QWORD *)(v2 + 416) = v5;
  *v5 = v2;
  v5[1] = sub_100112CC0;
  return sub_100140EB8(v3 + 46, 0x80000001001FF3C0, v1, v4);
}

uint64_t sub_100112CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 408);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 400);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 416));
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  return swift_task_switch(sub_10011D97C, 0, 0);
}

uint64_t sub_100112D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = *(_QWORD *)(v0 + 328);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 328);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 208) = sub_10002BA84(0xD00000000000001ALL, 0x80000001001FF340, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2082;
    *(_QWORD *)(v0 + 200) = v7;
    swift_errorRetain(v7);
    v10 = sub_100037A5C(&qword_100265260);
    v11 = String.init<A>(describing:)(v0 + 200, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 184) = sub_10002BA84(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 328));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100112F64()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1[191] = v0;
  v2 = sub_100037A5C(&qword_100260538);
  v1[192] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v1[193] = v3;
  *v3 = v1;
  v3[1] = sub_100112FD4;
  return daemon.getter();
}

uint64_t sub_100112FD4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1544);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1552) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[195] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[196] = v7;
  v8 = type metadata accessor for AppDeletionService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[197] = v9;
  v10 = sub_100004EA8(&qword_100261EF0, (uint64_t (*)(uint64_t))type metadata accessor for AppDeletionService, (uint64_t)&unk_1001FC2D4);
  *v6 = v5;
  v6[1] = sub_1001130CC;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001130CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1560);
  v4[198] = a1;
  v4[199] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[191];
    v7 = sub_100114064;
  }
  else
  {
    swift_release(v4[194]);
    v7 = sub_10011314C;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10011314C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 1528);
  *(_BYTE *)(v0 + 1664) = *(_BYTE *)(*(_QWORD *)(v0 + 1584) + 137);
  return swift_task_switch(sub_10011316C, v1, 0);
}

uint64_t sub_10011316C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(v0 + 1664) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 1600) = v1;
    *v1 = v0;
    v1[1] = sub_10011336C;
    return daemon.getter();
  }
  else
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100037A9C(v3, (uint64_t)qword_10027B330);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v0 + 1584);
    if (v7)
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v11 = v10;
      *(_DWORD *)v9 = 136446210;
      *(_QWORD *)(v0 + 1480) = sub_10002BA84(0x656C6261646E6966, 0xEE00737574617453, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1480, v0 + 1488, v9 + 4, v9 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s? Find My app is NOT installed.", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      swift_release(v8);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 1584));

    }
    swift_task_dealloc(*(_QWORD *)(v0 + 1536));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(2);
  }
}

uint64_t sub_10011336C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1600);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1608) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[202] = v6;
  v7 = type metadata accessor for DataManager(0);
  v8 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100113418;
  return ActorServiceDaemon.getService<A>()(v3[196], v7, v3[197], v8);
}

uint64_t sub_100113418(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1616);
  v5 = *(_QWORD **)v2;
  v5[203] = a1;
  v5[204] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1001142A8, v5[191], 0);
  swift_release(v5[201]);
  v7 = (_QWORD *)swift_task_alloc(dword_100262D8C);
  v5[205] = v7;
  *v7 = v5;
  v7[1] = sub_1001134C8;
  return sub_100006C00(v5[192]);
}

uint64_t sub_1001134C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1624);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1640));
  return swift_task_switch(sub_100113520, v1, 0);
}

uint64_t sub_100113520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v1 = *(_QWORD *)(v0 + 1536);
  v2 = type metadata accessor for Device(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(_QWORD *)(v0 + 1528);
  if ((_DWORD)v4 == 1)
  {
    sub_1000087A0(v1, &qword_100260538);
    v6 = sub_1001137E8;
  }
  else
  {
    *(_BYTE *)(v0 + 1665) = Device.isThisDevice.getter(v4) & 1;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    v6 = sub_1001135C8;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001135C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(v0 + 1665) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_1002659A4);
    *(_QWORD *)(v0 + 1648) = v1;
    *v1 = v0;
    v1[1] = sub_1001139AC;
    return sub_10000AFC8(v0 + 448);
  }
  else
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100037A9C(v3, (uint64_t)qword_10027B330);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v0 + 1624);
    v9 = *(_QWORD *)(v0 + 1584);
    if (v7)
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v12 = v11;
      *(_DWORD *)v10 = 136446210;
      *(_QWORD *)(v0 + 1488) = sub_10002BA84(0x656C6261646E6966, 0xEE00737574617453, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1488, v0 + 1496, v10 + 4, v10 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s? not a me device", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
      swift_release(v8);

      swift_release(v9);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 1624));
      swift_release(v9);

    }
    swift_task_dealloc(*(_QWORD *)(v0 + 1536));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
}

uint64_t sub_1001137E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 1624);
  v7 = *(_QWORD *)(v0 + 1584);
  if (v5)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v11 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 1488) = sub_10002BA84(0x656C6261646E6966, 0xEE00737574617453, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1488, v0 + 1496, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s? not a me device", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    swift_release(v6);

    swift_release(v7);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 1624));
    swift_release(v7);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 1536));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_1001139AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1624);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1648));
  return swift_task_switch(sub_100113A04, v1, 0);
}

uint64_t sub_100113A04()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  sub_10000EF6C(v0 + 448, v0 + 880, &qword_1002603A8);
  if (sub_100049214(v0 + 880) == 1
    || (v1 = (__int128 *)(v0 + 1344),
        memcpy((void *)(v0 + 16), (const void *)(v0 + 880), 0x1B0uLL),
        sub_10000EF6C(v0 + 416, v0 + 1376, &qword_100260550),
        sub_100028DD4((uint64_t *)(v0 + 1376)),
        sub_10000AF28(v0 + 448),
        sub_10000EF6C(v0 + 1376, v0 + 1344, &qword_100260550),
        !*(_QWORD *)(v0 + 1352)))
  {
    v7 = *(_QWORD *)(v0 + 1528);
    v6 = sub_100113EA0;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 1528);
    v3 = *v1;
    v4 = *(_OWORD *)(v0 + 1360);
    *(_OWORD *)(v0 + 1312) = *v1;
    *(_OWORD *)(v0 + 1328) = v4;
    *(_OWORD *)(v0 + 1424) = v3;
    *(_OWORD *)(v0 + 1456) = v3;
    *(_QWORD *)(v0 + 1440) = 28494;
    *(_QWORD *)(v0 + 1448) = 0xE200000000000000;
    v5 = sub_1000394E4();
    *(_QWORD *)(v0 + 1656) = StringProtocol.caseInsensitiveCompare<A>(_:)(v0 + 1440, &type metadata for String, &type metadata for String, v5, v5);
    sub_100017F44(v0 + 1424);
    *(_OWORD *)(v0 + 1408) = *(_OWORD *)(v0 + 1328);
    sub_100017F44(v0 + 1408);
    v6 = sub_100113B50;
    v7 = v2;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100113B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v19;

  if (*(_QWORD *)(v0 + 1656))
  {
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 1624);
    v7 = *(_QWORD *)(v0 + 1584);
    if (v5)
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v19 = v9;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 1496) = sub_10002BA84(0x656C6261646E6966, 0xEE00737574617453, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1496, v0 + 1504, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s? share my location disabled", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
      swift_release(v6);

      swift_release(v7);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 1624));
      swift_release(v7);

    }
    v11 = 3;
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 1584);
    swift_release(*(_QWORD *)(v0 + 1624));
    swift_release(v10);
    if ((objc_msgSend((id)objc_opt_self(CLLocationManager), "locationServicesEnabled") & 1) != 0)
    {
      v11 = 0;
    }
    else
    {
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v12 = type metadata accessor for Logger(0);
      v13 = sub_100037A9C(v12, (uint64_t)qword_10027B330);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.default.getter(v14);
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        v17 = swift_slowAlloc(32, -1);
        v19 = v17;
        *(_DWORD *)v16 = 136446210;
        *(_QWORD *)(v0 + 1520) = sub_10002BA84(0x656C6261646E6966, 0xEE00737574617453, &v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1520, v0 + 1528, v16 + 4, v16 + 12);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s? location services disabled", v16, 0xCu);
        swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v16, -1, -1);
      }

      v11 = 4;
    }
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 1536));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
}

uint64_t sub_100113EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 1624);
  v7 = *(_QWORD *)(v0 + 1584);
  if (v5)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v11 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 1496) = sub_10002BA84(0x656C6261646E6966, 0xEE00737574617453, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1496, v0 + 1504, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s? share my location disabled", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    swift_release(v6);

    swift_release(v7);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 1624));
    swift_release(v7);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 1536));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(3);
}

uint64_t sub_100114064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 1592);
  swift_release(*(_QWORD *)(v0 + 1552));
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 1512) = sub_10002BA84(0x656C6261646E6966, 0xEE00737574617453, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1512, v0 + 1520, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 1504) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 1504, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 1472) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1472, v0 + 1480, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 1536));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(5);
}

uint64_t sub_1001142A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 1584));
  v1 = *(_QWORD *)(v0 + 1632);
  swift_release(*(_QWORD *)(v0 + 1608));
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 1512) = sub_10002BA84(0x656C6261646E6966, 0xEE00737574617453, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1512, v0 + 1520, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 1504) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 1504, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 1472) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1472, v0 + 1480, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 1536));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(5);
}

uint64_t sub_1001144F4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1[6] = v0;
  v1[7] = *v0;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v1[8] = v2;
  *v2 = v1;
  v2[1] = sub_100114548;
  return daemon.getter();
}

uint64_t sub_100114548(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(*v1 + 72) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[10] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[11] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[12] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100114640;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100114640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v4 = *(_QWORD **)v2;
  v4[13] = a1;
  v4[14] = v1;
  swift_task_dealloc(v3);
  if (v1)
    return swift_task_switch(sub_100114BE4, v4[6], 0);
  swift_release(v4[9]);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v4[15] = v6;
  *v6 = v4;
  v6[1] = sub_1001146DC;
  return daemon.getter();
}

uint64_t sub_1001146DC(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 120);
  v5 = *v1;
  *(_QWORD *)(*v1 + 128) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[17] = v6;
  v7 = type metadata accessor for CloudStorageService();
  v8 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_100114784;
  return ActorServiceDaemon.getService<A>()(v3[11], v7, v3[12], v8);
}

uint64_t sub_100114784(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 136);
  v3[18] = a1;
  v3[19] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[6];
    v6 = sub_100114E18;
  }
  else
  {
    v7 = v3[6];
    swift_release(v3[16]);
    v6 = sub_100114800;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100114800()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[18];
  v2 = v0[7];
  v3 = swift_allocObject(&unk_1002535B8, 32, 7);
  v0[20] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v1);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[21] = v5;
  *v5 = v0;
  v5[1] = sub_1001148AC;
  return withTimeout<A>(_:block:)(v5, 0x8155A43676E00000, 6, &unk_100263DE8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1001148AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 48);
    v5 = sub_100115054;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 48);
    swift_release(*(_QWORD *)(v2 + 160));
    v5 = sub_100114920;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100114920()
{
  uint64_t v0;

  return swift_task_switch(sub_100114934, *(_QWORD *)(v0 + 104), 0);
}

uint64_t sub_100114934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 184) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.follower(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 192) = v7;
  *v7 = v0;
  v7[1] = sub_100114A04;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_100114A04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100114A6C, v4, 0);
}

uint64_t sub_100114A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 200);
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 208) = v2;
  v3 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  *(_QWORD *)(v0 + 216) = v4;
  v5 = sub_100037A5C(&qword_100260908);
  v6 = type metadata accessor for DiscoveryToken(0);
  v7 = sub_10011D91C();
  *v4 = v0;
  v4[1] = sub_100114B2C;
  return Sequence.asyncCompactMap<A>(_:)(&unk_100263DF8, v2, v5, v6, v7);
}

uint64_t sub_100114B2C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 208);
  v3 = *(_QWORD *)(*v1 + 216);
  v5 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 224) = a1;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 40));
  return swift_task_switch(sub_100114BA4, v5, 0);
}

uint64_t sub_100114BA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_release(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 224));
}

uint64_t sub_100114BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 72));
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0x6F54646E65697266, 0xEE002928736E656BLL, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100114E18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 128));
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0x6F54646E65697266, 0xEE002928736E656BLL, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100115054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 144));
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027B330);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v14 = v8;
    *(_DWORD *)v7 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0x6F54646E65697266, 0xEE002928736E656BLL, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v2;
    swift_errorRetain(v2);
    v9 = sub_100037A5C(&qword_100265260);
    v10 = String.init<A>(describing:)(v0 + 24, v9);
    v12 = v11;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s error %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  swift_errorRelease(v2);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_10011529C(double a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v2 + 136) = v1;
  *(double *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 144) = *v1;
  v3 = type metadata accessor for UUID(0);
  *(_QWORD *)(v2 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100037A5C(&qword_1002634F8);
  *(_QWORD *)(v2 + 160) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 168) = v5;
  *(_QWORD *)(v2 + 176) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C((uint64_t *)&unk_100262930);
  *(_QWORD *)(v2 + 184) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  *(_QWORD *)(v2 + 192) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 200) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 208) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 216) = swift_task_alloc(v9);
  return swift_task_switch(sub_100115388, v1, 0);
}

uint64_t sub_100115388()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t My;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;

  v1 = v0;
  v2 = v0 + 2;
  v53 = v0 + 14;
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v52 = v0 + 12;
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100037A9C(v3, (uint64_t)qword_10027B330);
  v5 = Logger.logObject.getter(v4);
  v6 = ((uint64_t (*)(void))static os_log_type_t.default.getter)();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = v0[16];
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    v54 = v9;
    *(_DWORD *)v8 = 136446466;
    v0[14] = sub_10002BA84(0xD000000000000021, 0x80000001001FF2B0, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v0 + 15, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2048;
    v0[15] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v8 + 14, v8 + 22);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s threshold: %f", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  My = type metadata accessor for Feature.FindMy(0);
  v0[5] = My;
  v0[6] = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v11 = sub_10003276C(v2);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v11, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v2);
  v12 = sub_10002BB90(v2);
  if ((My & 1) == 0)
  {
    v24 = Logger.logObject.getter(v12);
    v25 = ((uint64_t (*)(void))static os_log_type_t.default.getter)();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v54 = v27;
      *(_DWORD *)v26 = 136446210;
      v1[11] = sub_10002BA84(0xD000000000000021, 0x80000001001FF2B0, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 11, v52, v26 + 4, v26 + 12);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s Feature.FindMy.redStripe FF disabled.", (uint8_t *)v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
LABEL_20:
      v31 = v26;
      goto LABEL_21;
    }
LABEL_22:

    goto LABEL_23;
  }
  v13 = sub_1001C30A4();
  if ((v13 & 1) == 0)
  {
    v24 = Logger.logObject.getter(v13);
    v28 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v54 = v30;
      *(_DWORD *)v29 = 136446210;
      v1[10] = sub_10002BA84(0xD000000000000021, 0x80000001001FF2B0, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 10, v1 + 11, v29 + 4, v29 + 12);
      _os_log_impl((void *)&_mh_execute_header, v24, v28, "%{public}s isFindingCapable == false.", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      v31 = (uint64_t)v29;
LABEL_21:
      swift_slowDealloc(v31, -1, -1);
      goto LABEL_22;
    }
    goto LABEL_22;
  }
  static Date.trustedNow.getter(v0[27]);
  if (qword_10025FB90 != -1)
    swift_once(&qword_10025FB90, sub_1001B4524);
  v14 = v0[24];
  v15 = v1[25];
  v17 = v1[22];
  v16 = v1[23];
  v18 = v1[20];
  v19 = v1[21];
  v20 = sub_100037A9C(v18, (uint64_t)qword_100266938);
  swift_beginAccess(v20, v1 + 7, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, v20, v18);
  ManagedDefault.wrappedValue.getter(v18);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14);
  v22 = v1[26];
  if (v21 == 1)
  {
    v23 = v1[23];
    static Date.distantPast.getter(v22);
    sub_1000087A0(v23, (uint64_t *)&unk_100262930);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[25] + 32))(v22, v1[23], v1[24]);
  }
  v33 = v1[26];
  v32 = v1[27];
  v34 = v1[24];
  v35 = v1[25];
  v36 = *((double *)v1 + 16);
  v37 = Date.timeIntervalSince(_:)(v33);
  v38 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
  v38(v33, v34);
  v39 = ((uint64_t (*)(uint64_t, uint64_t))v38)(v32, v34);
  if (v37 <= v36)
  {
    v24 = Logger.logObject.getter(v39);
    v45 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v45))
    {
      v46 = v1[16];
      v26 = swift_slowAlloc(22, -1);
      *(_DWORD *)v26 = 134349312;
      *((double *)v1 + 12) = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v52, v1 + 13, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2050;
      v1[13] = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 13, v53, v26 + 14, v26 + 22);
      _os_log_impl((void *)&_mh_execute_header, v24, v45, "Time since last token request attempt: %{public}f. Threshold: %{public}f. Not sending.", (uint8_t *)v26, 0x16u);
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  v40 = v1[19];
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v41 = swift_allocObject(&unk_1002534F0, 32, 7);
  v42 = v1[17];
  *(_OWORD *)(v41 + 16) = *(_OWORD *)(v1 + 17);
  v43 = swift_retain(v42);
  UUID.init()(v43);
  v44 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v40, &unk_100263D38, v41, &unk_100263D40, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v44);
  swift_release(v44);
LABEL_23:
  v47 = v1[26];
  v48 = v1[22];
  v49 = v1[23];
  v50 = v1[19];
  swift_task_dealloc(v1[27]);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_100115A30()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[8] = v0;
  v2 = type metadata accessor for Date(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v1[11] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100115A90, v0, 0);
}

uint64_t sub_100115A90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v0[12] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[7] = sub_10002BA84(0xD000000000000019, 0x80000001001FF4A0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v0[2] = _swiftEmptyArrayStorage;
  static ReferenceClock.now.getter(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_100261A04);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_100115C48;
  return sub_100086E80();
}

uint64_t sub_100115C48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 104);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v7 = *(_QWORD *)(*(_QWORD *)v2 + 72);
  v3[14] = a1;
  v3[15] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1)
    v8 = sub_100115FAC;
  else
    v8 = sub_100115CDC;
  return swift_task_switch(v8, v3[8], 0);
}

uint64_t sub_100115CDC()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  Class isa;
  id v16;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t v20;

  v1 = (void *)v0[14];
  if (v1)
  {
    v2 = v0 + 2;
    v3 = v1;
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v20 = v0[14];
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v6 = 138543362;
      v0[6] = v3;
      v7 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v6 + 4, v6 + 12);
      *v19 = v20;

      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Setting owner token: %{public}@", v6, 0xCu);
      v8 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v19, 1, v8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }
    else
    {

    }
    v9 = v3;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
    v11 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v10 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v11 >= v10 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
    v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
    specialized Array._endMutation()(v12);

  }
  v13 = (void *)objc_opt_self(NISession);
  v14 = v0[2];
  sub_10011D800();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  v16 = objc_msgSend(v13, "setLocalDeviceInteractableDiscoveryTokens:", isa);

  v17 = (_QWORD *)swift_task_alloc(dword_100266224);
  v0[16] = v17;
  *v17 = v0;
  v17[1] = sub_100115F24;
  return sub_10018EF4C();
}

uint64_t sub_100115F24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_100115F7C, v1, 0);
}

uint64_t sub_100115F7C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100115FAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  Class isa;
  _QWORD *v16;
  uint64_t v18;

  v1 = v0[15];
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[15];
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v18 = v7;
    *(_DWORD *)v6 = 136446466;
    v0[3] = sub_10002BA84(0xD000000000000019, 0x80000001001FF4A0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    v0[4] = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 4, v8);
    v11 = v10;
    v0[5] = sub_10002BA84(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v12 = v0[15];
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  v13 = (void *)objc_opt_self(NISession);
  v14 = v0[2];
  sub_10011D800();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);

  v16 = (_QWORD *)swift_task_alloc(dword_100266224);
  v0[16] = v16;
  *v16 = v0;
  v16[1] = sub_100115F24;
  return sub_10018EF4C();
}

uint64_t sub_100116210(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a2;
  v3 = type metadata accessor for CloudKitStorage.State(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100116270, 0, 0);
}

uint64_t sub_100116270()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v0[8] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[3] = sub_10002BA84(0x6F54646E65697266, 0xEE002928736E656BLL, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Waiting for CloudKit to be available %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return swift_task_switch(sub_10011641C, v7, 0);
}

uint64_t sub_10011641C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                      + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                  + 1));
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_100116484;
  return v3(*(_QWORD *)(v0 + 56));
}

uint64_t sub_100116484()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[4];
    v5 = sub_10006CDAC;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[6] + 8))(v2[7], v2[5]);
    v5 = sub_1001164FC;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001164FC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v7 = v5;
    *(_DWORD *)v4 = 136446210;
    *(_QWORD *)(v1 + 16) = sub_10002BA84(0x6F54646E65697266, 0xEE002928736E656BLL, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CloudKit is available. %{public}s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10011664C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4[15] = a3;
  v4[16] = a4;
  v4[13] = a1;
  v4[14] = a2;
  v5 = type metadata accessor for Friend(0);
  v4[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[18] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[19] = swift_task_alloc(v7);
  v4[20] = swift_task_alloc(v7);
  v4[21] = swift_task_alloc(v7);
  v8 = sub_100037A5C(&qword_100261018);
  v4[22] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[23] = swift_task_alloc(v9);
  v4[24] = swift_task_alloc(v9);
  v4[25] = swift_task_alloc(v9);
  v10 = sub_100037A5C((uint64_t *)&unk_100262930);
  v4[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v4[27] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[28] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[29] = swift_task_alloc(v13);
  v4[30] = swift_task_alloc(v13);
  v14 = sub_100037A5C(&qword_100260F80);
  v4[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FriendSharedSecretsRecord(0);
  v4[32] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[33] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[34] = swift_task_alloc(v17);
  v4[35] = swift_task_alloc(v17);
  v18 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v4[36] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Handle(0);
  v4[37] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v4[38] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[39] = swift_task_alloc(v21);
  v4[40] = swift_task_alloc(v21);
  v22 = type metadata accessor for UUID(0);
  v4[41] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v4[42] = v23;
  v4[43] = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10011684C, 0, 0);
}

uint64_t sub_10011684C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = *(_QWORD *)(v1 + 328);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = *(_QWORD *)(v1 + 320);
  v5 = *(_QWORD *)(v1 + 296);
  v6 = *(_QWORD *)(v1 + 304);
  v7 = *(_QWORD *)(v1 + 288);
  v8 = Friend.handle.getter(a1);
  Handle.peerID.getter(v8);
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(_QWORD *)(v1 + 352) = v9;
  v9(v4, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
  {
    sub_1000087A0(*(_QWORD *)(v1 + 288), (uint64_t *)&unk_1002675F0);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v10 = *(_QWORD *)(v1 + 160);
    v11 = *(_QWORD *)(v1 + 136);
    v12 = *(_QWORD *)(v1 + 144);
    v13 = *(_QWORD *)(v1 + 112);
    v14 = type metadata accessor for Logger(0);
    sub_100037A9C(v14, (uint64_t)qword_10027B330);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v13, v11);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v1 + 160);
    v20 = *(_QWORD *)(v1 + 136);
    v21 = *(_QWORD *)(v1 + 144);
    if (v18)
    {
      v22 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(32, -1);
      v47 = v23;
      *(_DWORD *)v22 = 141558275;
      *(_QWORD *)(v1 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2081;
      v24 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v20, v24);
      v27 = v26;
      *(_QWORD *)(v1 + 24) = sub_10002BA84(v25, v26, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease(v27);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Missing friendSharedSecretsRecord for %{private,mask.hash}s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v21 + 8))(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 136));
    }

    v30 = *(_QWORD *)(v1 + 104);
    v31 = type metadata accessor for DiscoveryToken(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
    v33 = *(_QWORD *)(v1 + 312);
    v32 = *(_QWORD *)(v1 + 320);
    v35 = *(_QWORD *)(v1 + 280);
    v34 = *(_QWORD *)(v1 + 288);
    v36 = *(_QWORD *)(v1 + 272);
    v38 = *(_QWORD *)(v1 + 240);
    v37 = *(_QWORD *)(v1 + 248);
    v39 = *(_QWORD *)(v1 + 232);
    v40 = *(_QWORD *)(v1 + 208);
    v41 = *(_QWORD *)(v1 + 200);
    v42 = *(_QWORD *)(v1 + 192);
    v43 = *(_QWORD *)(v1 + 184);
    v44 = *(_QWORD *)(v1 + 168);
    v45 = *(_QWORD *)(v1 + 160);
    v46 = *(_QWORD *)(v1 + 152);
    swift_task_dealloc(*(_QWORD *)(v1 + 344));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 336) + 32))(*(_QWORD *)(v1 + 344), *(_QWORD *)(v1 + 288), *(_QWORD *)(v1 + 328));
    v28 = (_QWORD *)swift_task_alloc(dword_1002670BC);
    *(_QWORD *)(v1 + 360) = v28;
    *v28 = v1;
    v28[1] = sub_100116C14;
    return sub_1001CA618(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 344));
  }
}

uint64_t sub_100116C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100117944;
  else
    v3 = sub_100116C78;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100116C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  os_log_type_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  os_log_type_t typeb;
  os_log_type_t typec[8];
  os_log_type_t typed[8];
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  NSObject *v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146[2];

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 248);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 264) + 48))(v2, 1, v1) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 328));
    sub_1000087A0(v2, &qword_100260F80);
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v3 = *(_QWORD *)(v0 + 160);
    v4 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 112);
    v7 = type metadata accessor for Logger(0);
    sub_100037A9C(v7, (uint64_t)qword_10027B330);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 144);
    if (v11)
    {
      v15 = swift_slowAlloc(22, -1);
      v137 = swift_slowAlloc(32, -1);
      v146[0] = v137;
      *(_DWORD *)v15 = 141558275;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2081;
      v16 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
      v19 = v18;
      *(_QWORD *)(v0 + 24) = sub_10002BA84(v17, v18, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease(v19);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing friendSharedSecretsRecord for %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v137, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v14 + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
    }
    goto LABEL_14;
  }
  v20 = *(_QWORD *)(v0 + 280);
  sub_1000321F4(v2, v20, type metadata accessor for FriendSharedSecretsRecord);
  v21 = (uint64_t *)(v20 + *(int *)(v1 + 32));
  v22 = v21[1];
  if (v22 >> 60 == 15)
  {
LABEL_9:
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v28 = *(_QWORD *)(v0 + 272);
    v27 = *(_QWORD *)(v0 + 280);
    v29 = type metadata accessor for Logger(0);
    sub_100037A9C(v29, (uint64_t)qword_10027B330);
    v30 = sub_100025C70(v27, v28, type metadata accessor for FriendSharedSecretsRecord);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter(v31);
    v33 = os_log_type_enabled(v31, v32);
    v35 = *(_QWORD *)(v0 + 336);
    v34 = *(_QWORD *)(v0 + 344);
    v36 = *(_QWORD *)(v0 + 328);
    v37 = *(_QWORD *)(v0 + 272);
    v141 = *(_QWORD *)(v0 + 280);
    if (v33)
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v146[0] = v39;
      *(_DWORD *)v38 = 136446210;
      v40 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v36, v40);
      *(_QWORD *)type = v36;
      v43 = v42;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(v41, v42, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease(v43);
      sub_100024990(v37, type metadata accessor for FriendSharedSecretsRecord);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "No incomingSharedSecret for %{public}s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      sub_100024990(v141, type metadata accessor for FriendSharedSecretsRecord);
      (*(void (**)(uint64_t, os_log_type_t *))(v35 + 8))(v34, *(os_log_type_t **)type);
    }
    else
    {

      sub_100024990(v37, type metadata accessor for FriendSharedSecretsRecord);
      sub_100024990(v141, type metadata accessor for FriendSharedSecretsRecord);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    }
    goto LABEL_16;
  }
  v23 = *v21;
  v25 = *(_QWORD *)(v0 + 216);
  v24 = *(_QWORD *)(v0 + 224);
  v26 = *(_QWORD *)(v0 + 208);
  sub_10000E37C(*(_QWORD *)(v0 + 280) + *(int *)(*(_QWORD *)(v0 + 256) + 36), v26, (uint64_t *)&unk_100262930);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v25) == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 208), (uint64_t *)&unk_100262930);
    goto LABEL_9;
  }
  v143 = (_QWORD *)(v0 + 32);
  v56 = *(_QWORD *)(v0 + 368);
  v57 = *(char **)(v0 + 232);
  v58 = *(char **)(v0 + 240);
  v59 = *(_QWORD **)(v0 + 200);
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 32))(v58, *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  sub_10001A484(v23, v22);
  static Date.trustedNow.getter((uint64_t)v57);
  sub_1001D2EE8(v23, v22, v58, v57, v59);
  if (v56)
  {
    v60 = *(_QWORD *)(v0 + 280);
    v62 = *(_QWORD *)(v0 + 232);
    v61 = *(_QWORD *)(v0 + 240);
    v63 = *(_QWORD *)(v0 + 216);
    v64 = *(_QWORD *)(v0 + 224);
    sub_100037AF8(v23, v22);
    v65 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v65(v62, v63);
    v65(v61, v63);
    sub_100024990(v60, type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 328));
    if (qword_10025FB70 != -1)
      swift_once(&qword_10025FB70, sub_1001B4288);
    v67 = *(_QWORD *)(v0 + 144);
    v66 = *(_QWORD *)(v0 + 152);
    v68 = *(_QWORD *)(v0 + 136);
    v69 = *(_QWORD *)(v0 + 112);
    v70 = type metadata accessor for Logger(0);
    sub_100037A9C(v70, (uint64_t)qword_10027B330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v66, v69, v68);
    swift_errorRetain(v56);
    v71 = swift_errorRetain(v56);
    v9 = Logger.logObject.getter(v71);
    v72 = static os_log_type_t.error.getter(v9);
    v73 = os_log_type_enabled(v9, v72);
    v75 = *(_QWORD *)(v0 + 144);
    v74 = *(_QWORD *)(v0 + 152);
    v76 = *(_QWORD *)(v0 + 136);
    if (v73)
    {
      v77 = swift_slowAlloc(32, -1);
      v139 = swift_slowAlloc(64, -1);
      v146[0] = v139;
      *(_DWORD *)v77 = 141558531;
      *v143 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v143, v0 + 40, v77 + 4, v77 + 12);
      *(_WORD *)(v77 + 12) = 2081;
      v144 = v9;
      v78 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v79 = dispatch thunk of CustomStringConvertible.description.getter(v76, v78);
      typeb = v72;
      v81 = v80;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(v79, v80, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v77 + 14, v77 + 22);
      swift_bridgeObjectRelease(v81);
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v76);
      *(_WORD *)(v77 + 22) = 2082;
      *(_QWORD *)(v0 + 48) = v56;
      swift_errorRetain(v56);
      v82 = sub_100037A5C(&qword_100265260);
      v83 = String.init<A>(describing:)(v0 + 48, v82);
      v85 = v84;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(v83, v84, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v77 + 24, v77 + 32);
      swift_bridgeObjectRelease(v85);
      swift_errorRelease(v56);
      swift_errorRelease(v56);
      _os_log_impl((void *)&_mh_execute_header, v144, typeb, "Unable to generate discovery token for %{private,mask.hash}s. Error: %{public}s.", (uint8_t *)v77, 0x20u);
      swift_arrayDestroy(v139, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v139, -1, -1);
      swift_slowDealloc(v77, -1, -1);

      swift_errorRelease(v56);
      goto LABEL_16;
    }
    swift_errorRelease(v56);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v76);
    swift_errorRelease(v56);
    swift_errorRelease(v56);
LABEL_14:

LABEL_16:
    v44 = *(_QWORD *)(v0 + 104);
    v45 = type metadata accessor for DiscoveryToken(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 1, 1, v45);
    goto LABEL_17;
  }
  v145 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 8);
  v145(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v86 = *(_QWORD *)(v0 + 192);
  v87 = *(_QWORD *)(v0 + 200);
  v88 = *(_QWORD *)(v0 + 168);
  v89 = *(_QWORD *)(v0 + 136);
  v90 = *(_QWORD *)(v0 + 144);
  v91 = *(_QWORD *)(v0 + 112);
  v92 = type metadata accessor for Logger(0);
  sub_100037A9C(v92, (uint64_t)qword_10027B330);
  sub_10000E37C(v87, v86, &qword_100261018);
  v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 16))(v88, v91, v89);
  v94 = Logger.logObject.getter(v93);
  v95 = static os_log_type_t.default.getter(v94);
  v136 = v94;
  if (os_log_type_enabled(v94, v95))
  {
    v118 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    *(_QWORD *)typec = *(_QWORD *)(v0 + 328);
    v133 = *(_QWORD *)(v0 + 344);
    v96 = *(_QWORD *)(v0 + 312);
    v117 = *(_QWORD *)(v0 + 296);
    v124 = *(_QWORD *)(v0 + 280);
    v126 = *(_QWORD *)(v0 + 336);
    v122 = *(_QWORD *)(v0 + 216);
    v123 = *(_QWORD *)(v0 + 240);
    v98 = *(_QWORD *)(v0 + 184);
    v97 = *(_QWORD *)(v0 + 192);
    v115 = *(_QWORD *)(v0 + 176);
    v116 = *(_QWORD *)(v0 + 168);
    v119 = *(_QWORD *)(v0 + 144);
    v121 = *(_QWORD *)(v0 + 136);
    v99 = swift_slowAlloc(42, -1);
    v120 = swift_slowAlloc(64, -1);
    v146[0] = v120;
    *(_DWORD *)v99 = 141558787;
    *(_QWORD *)(v0 + 72) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v99 + 4, v99 + 12);
    *(_WORD *)(v99 + 12) = 2081;
    sub_10000E37C(v97, v98, &qword_100261018);
    v100 = String.init<A>(describing:)(v98, v115);
    v102 = v101;
    *(_QWORD *)(v0 + 80) = sub_10002BA84(v100, v101, v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v99 + 14, v99 + 22);
    swift_bridgeObjectRelease(v102);
    sub_1000087A0(v97, &qword_100261018);
    *(_WORD *)(v99 + 22) = 2160;
    *(_QWORD *)(v0 + 88) = 1752392040;
    v103 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v99 + 24, v99 + 32);
    *(_WORD *)(v99 + 32) = 2081;
    v104 = Friend.handle.getter(v103);
    v105 = Handle.identifier.getter(v104);
    v107 = v106;
    v118(v96, v117);
    *(_QWORD *)(v0 + 96) = sub_10002BA84(v105, v107, v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v99 + 34, v99 + 42);
    swift_bridgeObjectRelease(v107);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v116, v121);
    _os_log_impl((void *)&_mh_execute_header, v136, v95, "Local discovery token: %{private,mask.hash}s for follower: %{private,mask.hash}s.", (uint8_t *)v99, 0x2Au);
    swift_arrayDestroy(v120, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v120, -1, -1);
    swift_slowDealloc(v99, -1, -1);
    sub_100037AF8(v23, v22);

    v145(v123, v122);
    sub_100024990(v124, type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, os_log_type_t *))(v126 + 8))(v133, *(os_log_type_t **)typec);
  }
  else
  {
    v140 = *(_QWORD *)(v0 + 344);
    *(_QWORD *)typed = *(_QWORD *)(v0 + 336);
    v134 = *(_QWORD *)(v0 + 328);
    v108 = *(_QWORD *)(v0 + 280);
    v109 = *(_QWORD *)(v0 + 240);
    v110 = *(_QWORD *)(v0 + 216);
    v111 = *(_QWORD *)(v0 + 192);
    v112 = *(_QWORD *)(v0 + 168);
    v113 = *(_QWORD *)(v0 + 136);
    v114 = *(_QWORD *)(v0 + 144);
    sub_100037AF8(v23, v22);

    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v112, v113);
    sub_1000087A0(v111, &qword_100261018);
    v145(v109, v110);
    sub_100024990(v108, type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)typed + 8))(v140, v134);
  }
  sub_10000EF6C(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 104), &qword_100261018);
LABEL_17:
  v47 = *(_QWORD *)(v0 + 312);
  v46 = *(_QWORD *)(v0 + 320);
  v49 = *(_QWORD *)(v0 + 280);
  v48 = *(_QWORD *)(v0 + 288);
  v50 = *(_QWORD *)(v0 + 272);
  v52 = *(_QWORD *)(v0 + 240);
  v51 = *(_QWORD *)(v0 + 248);
  v53 = *(_QWORD *)(v0 + 232);
  v54 = *(_QWORD *)(v0 + 208);
  v125 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 192);
  v132 = *(_QWORD *)(v0 + 184);
  v135 = *(_QWORD *)(v0 + 168);
  v138 = *(_QWORD *)(v0 + 160);
  v142 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v125);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v132);
  swift_task_dealloc(v135);
  swift_task_dealloc(v138);
  swift_task_dealloc(v142);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100117944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 368);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 328));
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027B330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v12 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 136);
  if (v10)
  {
    type = v9;
    v14 = swift_slowAlloc(32, -1);
    v41 = swift_slowAlloc(64, -1);
    v43 = v41;
    *(_DWORD *)v14 = 141558531;
    *(_QWORD *)(v0 + 32) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v16, v17, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    *(_WORD *)(v14 + 22) = 2082;
    *(_QWORD *)(v0 + 48) = v1;
    swift_errorRetain(v1);
    v19 = sub_100037A5C(&qword_100265260);
    v20 = String.init<A>(describing:)(v0 + 48, v19);
    v22 = v21;
    *(_QWORD *)(v0 + 56) = sub_10002BA84(v20, v21, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease(v22);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Unable to generate discovery token for %{private,mask.hash}s. Error: %{public}s.", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v23 = *(_QWORD *)(v0 + 104);
  v24 = type metadata accessor for DiscoveryToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v26 = *(_QWORD *)(v0 + 312);
  v25 = *(_QWORD *)(v0 + 320);
  v28 = *(_QWORD *)(v0 + 280);
  v27 = *(_QWORD *)(v0 + 288);
  v29 = *(_QWORD *)(v0 + 272);
  v31 = *(_QWORD *)(v0 + 240);
  v30 = *(_QWORD *)(v0 + 248);
  v32 = *(_QWORD *)(v0 + 232);
  v33 = *(_QWORD *)(v0 + 208);
  v35 = *(_QWORD *)(v0 + 200);
  v36 = *(_QWORD *)(v0 + 192);
  v37 = *(_QWORD *)(v0 + 184);
  v38 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 160);
  v42 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100117D00(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;

  v2[8] = a1;
  v2[9] = a2;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100262930) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v3);
  v2[11] = swift_task_alloc(v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v2[12] = v4;
  *v4 = v2;
  v4[1] = sub_100117D80;
  return daemon.getter();
}

uint64_t sub_100117D80(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 96);
  v5 = *v1;
  *(_QWORD *)(*v1 + 104) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[14] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[15] = v7;
  v8 = type metadata accessor for CloudStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[16] = v9;
  v10 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_100117E78;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100117E78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 112);
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100118890;
  }
  else
  {
    swift_release(v3[13]);
    v5 = sub_100117EEC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100117EEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[17];
  v2 = v0[9];
  v3 = swift_allocObject(&unk_100253518, 32, 7);
  v0[19] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v1);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[20] = v5;
  *v5 = v0;
  v5[1] = sub_100117F98;
  return withTimeout<A>(_:block:)(v5, 0x8155A43676E00000, 6, &unk_100263D50, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100117F98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100118954;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 152));
    v4 = sub_100118004;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100118004()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 176) = v1;
  *v1 = v0;
  v1[1] = sub_10011804C;
  return daemon.getter();
}

uint64_t sub_10011804C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 176);
  v5 = *v1;
  *(_QWORD *)(*v1 + 184) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[24] = v6;
  v7 = type metadata accessor for DataManager(0);
  v8 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1001180F4;
  return ActorServiceDaemon.getService<A>()(v3[15], v7, v3[16], v8);
}

uint64_t sub_1001180F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  v3[25] = a1;
  v3[26] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100118A24;
  }
  else
  {
    swift_release(v3[23]);
    v5 = sub_100118168;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100118168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 216) = v3;
  v4 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_OWORD *)(v3 + 32) = v4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 224) = v5;
  *v5 = v0;
  v5[1] = sub_100118208;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100118208()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100118AF4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 216));
    v4 = sub_100118274;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100118274()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v16 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[7] = sub_10002BA84(0xD000000000000021, 0x80000001001FF2B0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s completed!", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = v0[11];
  static Date.trustedNow.getter(v7);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
  if (qword_10025FB90 != -1)
    swift_once(&qword_10025FB90, sub_1001B4524);
  v9 = v0[10];
  v10 = v0[11];
  v11 = sub_100037A5C(&qword_1002634F8);
  v12 = sub_100037A9C(v11, (uint64_t)qword_100266938);
  sub_10000E37C(v10, v9, (uint64_t *)&unk_100262930);
  swift_beginAccess(v12, v0 + 2, 33, 0);
  ManagedDefault.wrappedValue.setter(v9, v11);
  swift_endAccess(v0 + 2);
  sub_1000087A0(v10, (uint64_t *)&unk_100262930);
  v13 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  v0[30] = v13;
  v14 = (_QWORD *)swift_task_alloc(dword_100264B54);
  v0[31] = v14;
  *v14 = v0;
  v14[1] = sub_100118520;
  return sub_100140EB8(0xD00000000000003ALL, 0x80000001001FF2E0, 0, v13);
}

uint64_t sub_100118520()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10011857C, 0, 0);
}

uint64_t sub_10011857C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 200));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001185CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 264);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  return swift_task_switch(sub_100118634, 0, 0);
}

uint64_t sub_100118634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = *(_QWORD *)(v0 + 256);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B330);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 256);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v15 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(0xD000000000000021, 0x80000001001FF2B0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 48) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}@", (uint8_t *)v8, 0x16u);
    v12 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 256));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v13 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100118890()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  swift_release(v0[13]);
  v1 = v0[18];
  v0[32] = v1;
  v2 = sub_100097FB4();
  v3 = swift_allocError(&type metadata for NITokenService.Error, v2, 0, 0);
  v0[33] = v3;
  *v4 = v1;
  swift_errorRetain(v1);
  v5 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  v0[34] = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_100264B54);
  v0[35] = v6;
  *v6 = v0;
  v6[1] = sub_1001185CC;
  return sub_100140EB8(0xD00000000000003ALL, 0x80000001001FF2E0, v3, v5);
}

uint64_t sub_100118954()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;

  v1 = v0[17];
  swift_release(v0[19]);
  swift_release(v1);
  v2 = v0[21];
  v0[32] = v2;
  v3 = sub_100097FB4();
  v4 = swift_allocError(&type metadata for NITokenService.Error, v3, 0, 0);
  v0[33] = v4;
  *v5 = v2;
  swift_errorRetain(v2);
  v6 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  v0[34] = v6;
  v7 = (_QWORD *)swift_task_alloc(dword_100264B54);
  v0[35] = v7;
  *v7 = v0;
  v7[1] = sub_1001185CC;
  return sub_100140EB8(0xD00000000000003ALL, 0x80000001001FF2E0, v4, v6);
}

uint64_t sub_100118A24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;

  v1 = v0[23];
  swift_release(v0[17]);
  swift_release(v1);
  v2 = v0[26];
  v0[32] = v2;
  v3 = sub_100097FB4();
  v4 = swift_allocError(&type metadata for NITokenService.Error, v3, 0, 0);
  v0[33] = v4;
  *v5 = v2;
  swift_errorRetain(v2);
  v6 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  v0[34] = v6;
  v7 = (_QWORD *)swift_task_alloc(dword_100264B54);
  v0[35] = v7;
  *v7 = v0;
  v7[1] = sub_1001185CC;
  return sub_100140EB8(0xD00000000000003ALL, 0x80000001001FF2E0, v4, v6);
}

uint64_t sub_100118AF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;

  v1 = v0[27];
  v2 = v0[25];
  swift_release(v0[17]);
  swift_release(v2);
  swift_task_dealloc(v1);
  v3 = v0[29];
  v0[32] = v3;
  v4 = sub_100097FB4();
  v5 = swift_allocError(&type metadata for NITokenService.Error, v4, 0, 0);
  v0[33] = v5;
  *v6 = v3;
  swift_errorRetain(v3);
  v7 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  v0[34] = v7;
  v8 = (_QWORD *)swift_task_alloc(dword_100264B54);
  v0[35] = v8;
  *v8 = v0;
  v8[1] = sub_1001185CC;
  return sub_100140EB8(0xD00000000000003ALL, 0x80000001001FF2E0, v5, v7);
}

uint64_t sub_100118BD0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a2;
  v3 = type metadata accessor for CloudKitStorage.State(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100118C30, 0, 0);
}

uint64_t sub_100118C30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B330);
  v0[8] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[3] = sub_10002BA84(0xD000000000000021, 0x80000001001FF2B0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Waiting for CloudKit to be available %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return swift_task_switch(sub_100118DD4, v7, 0);
}

uint64_t sub_100118DD4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                      + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                  + 1));
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_100118E3C;
  return v3(*(_QWORD *)(v0 + 56));
}

uint64_t sub_100118E3C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[4];
    v5 = sub_10006A990;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[6] + 8))(v2[7], v2[5]);
    v5 = sub_100118EB4;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100118EB4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v7 = v5;
    *(_DWORD *)v4 = 136446210;
    *(_QWORD *)(v1 + 16) = sub_10002BA84(0xD000000000000021, 0x80000001001FF2B0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CloudKit is available. %{public}s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100118FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6[25] = a5;
  v6[26] = a6;
  v6[23] = a3;
  v6[24] = a4;
  v6[22] = a2;
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[27] = swift_task_alloc(v8);
  v6[28] = swift_task_alloc(v8);
  v6[29] = swift_task_alloc(v8);
  v6[30] = swift_task_alloc(v8);
  v9 = sub_100037A5C((uint64_t *)&unk_100262930);
  v6[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100260F80);
  v6[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FriendSharedSecretsRecord(0);
  v6[33] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[34] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[35] = swift_task_alloc(v13);
  v6[36] = swift_task_alloc(v13);
  v14 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v6[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Handle(0);
  v6[38] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v6[39] = v16;
  v6[40] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v6[41] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v6[42] = v18;
  v6[43] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Friend(0);
  v6[44] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v6[45] = v20;
  v21 = *(_QWORD *)(v20 + 64);
  v6[46] = v21;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[47] = swift_task_alloc(v22);
  v6[48] = swift_task_alloc(v22);
  v6[49] = swift_task_alloc(v22);
  v6[50] = swift_task_alloc(v22);
  v6[51] = swift_task_alloc(v22);
  v6[52] = swift_task_alloc(v22);
  return swift_task_switch(sub_1001191EC, a3, 0);
}

uint64_t sub_1001191EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 424) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 432) = v7;
  *v7 = v0;
  v7[1] = sub_1001192BC;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_1001192BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 432);
  *(_QWORD *)(*(_QWORD *)v1 + 440) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100119320, 0, 0);
}

uint64_t sub_100119320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 448) = v2;
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v0 + 360);
    *(_DWORD *)(v0 + 512) = *(_DWORD *)(v4 + 80);
    *(_QWORD *)(v0 + 456) = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v0 + 464) = *(_QWORD *)(v4 + 16);
    while (1)
    {
      *(_QWORD *)(v0 + 472) = v3;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 464))(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 440)+ ((*(unsigned __int8 *)(v0 + 512) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 512))+ *(_QWORD *)(v0 + 456) * v3, *(_QWORD *)(v0 + 352));
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
      v7 = *(_QWORD *)(v0 + 408);
      v6 = *(_QWORD *)(v0 + 416);
      v8 = *(_QWORD *)(v0 + 352);
      v9 = type metadata accessor for Logger(0);
      *(_QWORD *)(v0 + 480) = sub_100037A9C(v9, (uint64_t)qword_10027B330);
      v10 = v5(v7, v6, v8);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      v13 = os_log_type_enabled(v11, v12);
      v14 = *(_QWORD *)(v0 + 408);
      v15 = *(_QWORD *)(v0 + 352);
      v16 = *(_QWORD *)(v0 + 360);
      if (v13)
      {
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(32, -1);
        v67 = v18;
        *(_DWORD *)v17 = 141558275;
        *(_QWORD *)(v17 + 4) = 1752392040;
        *(_WORD *)(v17 + 12) = 2081;
        v19 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
        v20 = dispatch thunk of CustomStringConvertible.description.getter(v15, v19);
        v22 = v21;
        *(_QWORD *)(v17 + 14) = sub_10002BA84(v20, v21, &v67);
        swift_bridgeObjectRelease(v22);
        v23 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
        v23(v14, v15);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Checking if we need to request token for %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);
      }
      else
      {
        v23 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
        v23(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 352));
      }

      *(_QWORD *)(v0 + 488) = v23;
      v24 = *(_QWORD *)(v0 + 328);
      v25 = *(_QWORD *)(v0 + 336);
      v27 = *(_QWORD *)(v0 + 312);
      v26 = *(_QWORD *)(v0 + 320);
      v29 = *(_QWORD *)(v0 + 296);
      v28 = *(_QWORD *)(v0 + 304);
      v31 = Friend.handle.getter(v30);
      Handle.peerID.getter(v31);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v29, 1, v24) != 1)
        break;
      v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
      v33 = *(_QWORD *)(v0 + 416);
      v34 = *(_QWORD *)(v0 + 400);
      v35 = *(_QWORD *)(v0 + 352);
      sub_1000087A0(*(_QWORD *)(v0 + 296), (uint64_t *)&unk_1002675F0);
      v36 = v32(v34, v33, v35);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.error.getter(v37);
      v39 = os_log_type_enabled(v37, v38);
      v40 = *(_QWORD *)(v0 + 416);
      v41 = *(_QWORD *)(v0 + 400);
      v42 = *(_QWORD *)(v0 + 352);
      if (v39)
      {
        v43 = swift_slowAlloc(32, -1);
        v44 = swift_slowAlloc(64, -1);
        v67 = v44;
        *(_DWORD *)v43 = 136446723;
        *(_QWORD *)(v43 + 4) = sub_10002BA84(0xD000000000000021, 0x80000001001FF2B0, &v67);
        *(_WORD *)(v43 + 12) = 2160;
        *(_QWORD *)(v43 + 14) = 1752392040;
        *(_WORD *)(v43 + 22) = 2081;
        v45 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
        v46 = dispatch thunk of CustomStringConvertible.description.getter(v42, v45);
        v48 = v47;
        *(_QWORD *)(v43 + 24) = sub_10002BA84(v46, v47, &v67);
        swift_bridgeObjectRelease(v48);
        v23(v41, v42);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "%{public}s No peerID for following %{private,mask.hash}s", (uint8_t *)v43, 0x20u);
        swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

      }
      else
      {

        v23(v41, v42);
      }
      v23(v40, v42);
      v3 = *(_QWORD *)(v0 + 472) + 1;
      if (v3 == *(_QWORD *)(v0 + 448))
      {
        v1 = *(_QWORD *)(v0 + 440);
        goto LABEL_15;
      }
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 32))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 328));
    v49 = (_QWORD *)swift_task_alloc(dword_1002670BC);
    *(_QWORD *)(v0 + 496) = v49;
    *v49 = v0;
    v49[1] = sub_1001198BC;
    return sub_1001CA618(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 344));
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(v1);
    v51 = *(_QWORD *)(v0 + 408);
    v53 = *(_QWORD *)(v0 + 392);
    v52 = *(_QWORD *)(v0 + 400);
    v55 = *(_QWORD *)(v0 + 376);
    v54 = *(_QWORD *)(v0 + 384);
    v56 = *(_QWORD *)(v0 + 344);
    v57 = *(_QWORD *)(v0 + 320);
    v59 = *(_QWORD *)(v0 + 288);
    v58 = *(_QWORD *)(v0 + 296);
    v60 = *(_QWORD *)(v0 + 280);
    v61 = *(_QWORD *)(v0 + 256);
    v62 = *(_QWORD *)(v0 + 248);
    v63 = *(_QWORD *)(v0 + 240);
    v64 = *(_QWORD *)(v0 + 232);
    v65 = *(_QWORD *)(v0 + 224);
    v66 = *(_QWORD *)(v0 + 216);
    swift_task_dealloc(*(_QWORD *)(v0 + 416));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001198BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  *(_QWORD *)(*(_QWORD *)v1 + 504) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10011A80C;
  else
    v3 = sub_100119920;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100119920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ObjectType;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  _BOOL4 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  void (*v142)(uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  NSObject *v156;
  os_log_type_t v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(uint64_t, uint64_t, uint64_t);
  void (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 256);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 272) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
    v4 = *(_QWORD *)(v0 + 416);
    v5 = *(_QWORD *)(v0 + 392);
    v6 = *(_QWORD *)(v0 + 352);
    sub_1000087A0(v2, &qword_100260F80);
    v7 = v3(v5, v4, v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 392);
    v12 = *(_QWORD *)(v0 + 352);
    if (v10)
    {
      v178 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
      v13 = swift_slowAlloc(32, -1);
      v182 = swift_slowAlloc(64, -1);
      v187 = v182;
      *(_DWORD *)v13 = 136446723;
      *(_QWORD *)(v0 + 144) = sub_10002BA84(0xD000000000000021, 0x80000001001FF2B0, &v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2160;
      *(_QWORD *)(v0 + 136) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v13 + 14, v13 + 22);
      *(_WORD *)(v13 + 22) = 2081;
      v14 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
      v17 = v16;
      *(_QWORD *)(v0 + 128) = sub_10002BA84(v15, v16, &v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v13 + 24, v13 + 32);
      swift_bridgeObjectRelease(v17);
      v178(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s Missing friendSharedSecretsRecord for %{private,mask.hash}s. Requesting token...", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy(v182, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v182, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 488))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 352));
    }

    v22 = *(unsigned __int8 *)(v0 + 512);
    v163 = *(_QWORD *)(v0 + 416);
    v23 = *(_QWORD *)(v0 + 376);
    v24 = *(_QWORD *)(v0 + 352);
    v175 = *(_QWORD *)(v0 + 360);
    v25 = *(_QWORD *)(v0 + 224);
    v166 = v25;
    v169 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
    v183 = *(_QWORD *)(v0 + 216);
    v179 = *(_QWORD *)(v0 + 208);
    v172 = *(_QWORD *)(v0 + 200);
    v26 = (v22 + 40) & ~v22;
    v27 = (*(_QWORD *)(v0 + 368) + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    v28 = v22 | 7;
    v29 = type metadata accessor for TaskPriority(0);
    v30 = *(_QWORD *)(v29 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v25, 1, 1, v29);
    v169(v23, v163, v24);
    v31 = (_QWORD *)swift_allocObject(&unk_100253540, v27 + 8, v28);
    v31[2] = 0;
    v32 = v31 + 2;
    v31[3] = 0;
    v31[4] = v172;
    (*(void (**)(char *, uint64_t, uint64_t))(v175 + 32))((char *)v31 + v26, v23, v24);
    *(_QWORD *)((char *)v31 + v27) = v179;
    sub_10000E37C(v166, v183, (uint64_t *)&unk_100265180);
    LODWORD(v27) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v183, 1, v29);
    swift_retain(v172);
    v34 = *(_QWORD *)(v0 + 216);
    if ((_DWORD)v27 == 1)
    {
      sub_1000087A0(*(_QWORD *)(v0 + 216), (uint64_t *)&unk_100265180);
      v35 = 12544;
    }
    else
    {
      v51 = TaskPriority.rawValue.getter(v33);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v29);
      v35 = v51 | 0x3100;
    }
    v52 = *v32;
    if (*v32)
    {
      v53 = v31[3];
      ObjectType = swift_getObjectType(*v32);
      swift_unknownObjectRetain(v52);
      v55 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v53);
      v57 = v56;
      swift_unknownObjectRelease(v52);
    }
    else
    {
      v55 = 0;
      v57 = 0;
    }
    v72 = **(_QWORD **)(v0 + 176);
    v73 = v57 | v55;
    if (v57 | v55)
    {
      v73 = v0 + 16;
      *(_QWORD *)(v0 + 16) = 0;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = v55;
      *(_QWORD *)(v0 + 40) = v57;
    }
    v74 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
    v75 = *(_QWORD *)(v0 + 416);
    v77 = *(_QWORD *)(v0 + 344);
    v76 = *(_QWORD *)(v0 + 352);
    v79 = *(_QWORD *)(v0 + 328);
    v78 = *(_QWORD *)(v0 + 336);
    v80 = *(_QWORD *)(v0 + 224);
    *(_QWORD *)(v0 + 104) = 1;
    *(_QWORD *)(v0 + 112) = v73;
    *(_QWORD *)(v0 + 120) = v72;
    v81 = swift_task_create(v35, v0 + 104, (char *)&type metadata for () + 8, &unk_100263D70, v31);
    swift_release(v81);
    sub_1000087A0(v80, (uint64_t *)&unk_100265180);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v79);
    v74(v75, v76);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 280);
    v18 = *(_QWORD *)(v0 + 288);
    sub_1000321F4(v2, v18, type metadata accessor for FriendSharedSecretsRecord);
    v20 = *(_QWORD *)(v18 + *(int *)(v1 + 24) + 8);
    sub_100025C70(v18, v19, type metadata accessor for FriendSharedSecretsRecord);
    v21 = *(_QWORD *)(v0 + 280);
    if (v20 >> 60 == 15)
    {
      sub_100024990(*(_QWORD *)(v0 + 280), type metadata accessor for FriendSharedSecretsRecord);
    }
    else
    {
      v36 = *(_QWORD *)(v0 + 248);
      sub_10000E37C(v21 + *(int *)(*(_QWORD *)(v0 + 264) + 28), v36, (uint64_t *)&unk_100262930);
      sub_100024990(v21, type metadata accessor for FriendSharedSecretsRecord);
      v37 = type metadata accessor for Date(0);
      v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v36, 1, v37);
      sub_1000087A0(v36, (uint64_t *)&unk_100262930);
      if (v38 != 1)
      {
        v101 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
        v102 = *(_QWORD *)(v0 + 416);
        v104 = *(_QWORD *)(v0 + 344);
        v103 = *(_QWORD *)(v0 + 352);
        v105 = *(_QWORD *)(v0 + 328);
        v106 = *(_QWORD *)(v0 + 336);
        sub_100024990(*(_QWORD *)(v0 + 288), type metadata accessor for FriendSharedSecretsRecord);
        (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v104, v105);
        v101(v102, v103);
        goto LABEL_30;
      }
    }
    v39 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 464))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 352));
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(_QWORD *)(v0 + 384);
    v44 = *(_QWORD *)(v0 + 352);
    if (v42)
    {
      v184 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
      v45 = swift_slowAlloc(32, -1);
      v46 = swift_slowAlloc(64, -1);
      v187 = v46;
      *(_DWORD *)v45 = 136446723;
      *(_QWORD *)(v0 + 152) = sub_10002BA84(0xD000000000000021, 0x80000001001FF2B0, &v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2160;
      *(_QWORD *)(v0 + 160) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v45 + 14, v45 + 22);
      *(_WORD *)(v45 + 22) = 2081;
      v47 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v48 = dispatch thunk of CustomStringConvertible.description.getter(v44, v47);
      v50 = v49;
      *(_QWORD *)(v0 + 168) = sub_10002BA84(v48, v49, &v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v45 + 24, v45 + 32);
      swift_bridgeObjectRelease(v50);
      v184(v43, v44);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%{public}s Missing outgoingSharedSecret for %{private,mask.hash}s. Requesting token...", (uint8_t *)v45, 0x20u);
      swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 488))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 352));
    }

    v58 = *(unsigned __int8 *)(v0 + 512);
    v164 = *(_QWORD *)(v0 + 416);
    v59 = *(_QWORD *)(v0 + 376);
    v60 = *(_QWORD *)(v0 + 352);
    v176 = *(_QWORD *)(v0 + 360);
    v61 = *(_QWORD *)(v0 + 240);
    v167 = v61;
    v170 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
    v185 = *(_QWORD *)(v0 + 232);
    v180 = *(_QWORD *)(v0 + 208);
    v173 = *(_QWORD *)(v0 + 200);
    v62 = (v58 + 40) & ~v58;
    v63 = (*(_QWORD *)(v0 + 368) + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v64 = v58 | 7;
    v65 = type metadata accessor for TaskPriority(0);
    v66 = *(_QWORD *)(v65 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v61, 1, 1, v65);
    v170(v59, v164, v60);
    v67 = (_QWORD *)swift_allocObject(&unk_100253568, v63 + 8, v64);
    v67[2] = 0;
    v68 = v67 + 2;
    v67[3] = 0;
    v67[4] = v173;
    (*(void (**)(char *, uint64_t, uint64_t))(v176 + 32))((char *)v67 + v62, v59, v60);
    *(_QWORD *)((char *)v67 + v63) = v180;
    sub_10000E37C(v167, v185, (uint64_t *)&unk_100265180);
    LODWORD(v63) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v185, 1, v65);
    swift_retain(v173);
    v70 = *(_QWORD *)(v0 + 232);
    if ((_DWORD)v63 == 1)
    {
      sub_1000087A0(*(_QWORD *)(v0 + 232), (uint64_t *)&unk_100265180);
      v71 = 12544;
    }
    else
    {
      v82 = TaskPriority.rawValue.getter(v69);
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v70, v65);
      v71 = v82 | 0x3100;
    }
    v83 = *v68;
    if (*v68)
    {
      v84 = v67[3];
      v85 = v71;
      v86 = swift_getObjectType(*v68);
      swift_unknownObjectRetain(v83);
      v87 = dispatch thunk of Actor.unownedExecutor.getter(v86, v84);
      v89 = v88;
      swift_unknownObjectRelease(v83);
      v71 = v85;
    }
    else
    {
      v87 = 0;
      v89 = 0;
    }
    v90 = **(_QWORD **)(v0 + 176);
    v91 = v89 | v87;
    if (v89 | v87)
    {
      v91 = v0 + 48;
      *(_QWORD *)(v0 + 48) = 0;
      *(_QWORD *)(v0 + 56) = 0;
      *(_QWORD *)(v0 + 64) = v87;
      *(_QWORD *)(v0 + 72) = v89;
    }
    v92 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
    v93 = *(_QWORD *)(v0 + 416);
    v95 = *(_QWORD *)(v0 + 344);
    v94 = *(_QWORD *)(v0 + 352);
    v97 = *(_QWORD *)(v0 + 328);
    v96 = *(_QWORD *)(v0 + 336);
    v98 = *(_QWORD *)(v0 + 288);
    v99 = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v0 + 80) = 1;
    *(_QWORD *)(v0 + 88) = v91;
    *(_QWORD *)(v0 + 96) = v90;
    v100 = swift_task_create(v71, v0 + 80, (char *)&type metadata for () + 8, &unk_100263D80, v67);
    swift_release(v100);
    sub_1000087A0(v99, (uint64_t *)&unk_100265180);
    sub_100024990(v98, type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v97);
    v92(v93, v94);
  }
LABEL_30:
  v107 = *(_QWORD *)(v0 + 472) + 1;
  if (v107 == *(_QWORD *)(v0 + 448))
  {
LABEL_31:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 440));
    v108 = *(_QWORD *)(v0 + 408);
    v110 = *(_QWORD *)(v0 + 392);
    v109 = *(_QWORD *)(v0 + 400);
    v112 = *(_QWORD *)(v0 + 376);
    v111 = *(_QWORD *)(v0 + 384);
    v113 = *(_QWORD *)(v0 + 344);
    v114 = *(_QWORD *)(v0 + 320);
    v116 = *(_QWORD *)(v0 + 288);
    v115 = *(_QWORD *)(v0 + 296);
    v165 = *(_QWORD *)(v0 + 280);
    v168 = *(_QWORD *)(v0 + 256);
    v171 = *(_QWORD *)(v0 + 248);
    v174 = *(_QWORD *)(v0 + 240);
    v177 = *(_QWORD *)(v0 + 232);
    v181 = *(_QWORD *)(v0 + 224);
    v186 = *(_QWORD *)(v0 + 216);
    swift_task_dealloc(*(_QWORD *)(v0 + 416));
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v165);
    swift_task_dealloc(v168);
    swift_task_dealloc(v171);
    swift_task_dealloc(v174);
    swift_task_dealloc(v177);
    swift_task_dealloc(v181);
    swift_task_dealloc(v186);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 472) = v107;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 464))(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 440)+ ((*(unsigned __int8 *)(v0 + 512) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 512))+ *(_QWORD *)(v0 + 456) * v107, *(_QWORD *)(v0 + 352));
      if (qword_10025FB70 != -1)
        swift_once(&qword_10025FB70, sub_1001B4288);
      v124 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
      v126 = *(_QWORD *)(v0 + 408);
      v125 = *(_QWORD *)(v0 + 416);
      v127 = *(_QWORD *)(v0 + 352);
      v128 = type metadata accessor for Logger(0);
      *(_QWORD *)(v0 + 480) = sub_100037A9C(v128, (uint64_t)qword_10027B330);
      v129 = v124(v126, v125, v127);
      v130 = Logger.logObject.getter(v129);
      v131 = static os_log_type_t.default.getter(v130);
      v132 = os_log_type_enabled(v130, v131);
      v133 = *(_QWORD *)(v0 + 408);
      v134 = *(_QWORD *)(v0 + 352);
      v135 = *(_QWORD *)(v0 + 360);
      if (v132)
      {
        v136 = swift_slowAlloc(22, -1);
        v137 = swift_slowAlloc(32, -1);
        v187 = v137;
        *(_DWORD *)v136 = 141558275;
        *(_QWORD *)(v136 + 4) = 1752392040;
        *(_WORD *)(v136 + 12) = 2081;
        v138 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
        v139 = dispatch thunk of CustomStringConvertible.description.getter(v134, v138);
        v141 = v140;
        *(_QWORD *)(v136 + 14) = sub_10002BA84(v139, v140, &v187);
        swift_bridgeObjectRelease(v141);
        v142 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
        v142(v133, v134);
        _os_log_impl((void *)&_mh_execute_header, v130, v131, "Checking if we need to request token for %{private,mask.hash}s", (uint8_t *)v136, 0x16u);
        swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v137, -1, -1);
        swift_slowDealloc(v136, -1, -1);
      }
      else
      {
        v142 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
        v142(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 352));
      }

      *(_QWORD *)(v0 + 488) = v142;
      v143 = *(_QWORD *)(v0 + 328);
      v144 = *(_QWORD *)(v0 + 336);
      v146 = *(_QWORD *)(v0 + 312);
      v145 = *(_QWORD *)(v0 + 320);
      v148 = *(_QWORD *)(v0 + 296);
      v147 = *(_QWORD *)(v0 + 304);
      v150 = Friend.handle.getter(v149);
      Handle.peerID.getter(v150);
      (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v145, v147);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v148, 1, v143) != 1)
        break;
      v151 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
      v152 = *(_QWORD *)(v0 + 416);
      v153 = *(_QWORD *)(v0 + 400);
      v154 = *(_QWORD *)(v0 + 352);
      sub_1000087A0(*(_QWORD *)(v0 + 296), (uint64_t *)&unk_1002675F0);
      v155 = v151(v153, v152, v154);
      v156 = Logger.logObject.getter(v155);
      v157 = static os_log_type_t.error.getter(v156);
      v158 = os_log_type_enabled(v156, v157);
      v159 = *(_QWORD *)(v0 + 416);
      v160 = *(_QWORD *)(v0 + 400);
      v161 = *(_QWORD *)(v0 + 352);
      if (v158)
      {
        v118 = swift_slowAlloc(32, -1);
        v119 = swift_slowAlloc(64, -1);
        v187 = v119;
        *(_DWORD *)v118 = 136446723;
        *(_QWORD *)(v118 + 4) = sub_10002BA84(0xD000000000000021, 0x80000001001FF2B0, &v187);
        *(_WORD *)(v118 + 12) = 2160;
        *(_QWORD *)(v118 + 14) = 1752392040;
        *(_WORD *)(v118 + 22) = 2081;
        v120 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
        v121 = dispatch thunk of CustomStringConvertible.description.getter(v161, v120);
        v123 = v122;
        *(_QWORD *)(v118 + 24) = sub_10002BA84(v121, v122, &v187);
        swift_bridgeObjectRelease(v123);
        v142(v160, v161);
        _os_log_impl((void *)&_mh_execute_header, v156, v157, "%{public}s No peerID for following %{private,mask.hash}s", (uint8_t *)v118, 0x20u);
        swift_arrayDestroy(v119, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v119, -1, -1);
        swift_slowDealloc(v118, -1, -1);

      }
      else
      {

        v142(v160, v161);
      }
      v142(v159, v161);
      v107 = *(_QWORD *)(v0 + 472) + 1;
      if (v107 == *(_QWORD *)(v0 + 448))
        goto LABEL_31;
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 32))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 328));
    v162 = (_QWORD *)swift_task_alloc(dword_1002670BC);
    *(_QWORD *)(v0 + 496) = v162;
    *v162 = v0;
    v162[1] = sub_1001198BC;
    return sub_1001CA618(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 344));
  }
}

uint64_t sub_10011A80C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
  v2 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 400);
  v11 = *(_QWORD *)(v0 + 384);
  v12 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 328);
  v8 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 320);
  v14 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 280);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 240);
  v20 = *(_QWORD *)(v0 + 232);
  v21 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 216);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 440));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v1(v3, v6);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v7);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011A964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5[5] = a5;
  v7 = type metadata accessor for Friend(0);
  v5[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[7] = v8;
  v5[8] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Handle(0);
  v5[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[10] = v10;
  v5[11] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)swift_task_alloc(dword_100263D8C);
  v5[12] = v11;
  *v11 = v5;
  v11[1] = sub_10011AA0C;
  return sub_10011AA90(a5);
}

uint64_t sub_10011AA0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 96);
  v3 = *v1;
  *(_QWORD *)(v3 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10011D96C, 0, 0);
  v5 = *(_QWORD *)(v3 + 64);
  swift_task_dealloc(*(_QWORD *)(v3 + 88));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10011AA90(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v2[17] = a1;
  v2[18] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[19] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[20] = v4;
  v2[21] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v2[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MessagingOptions(0);
  v2[23] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[24] = v7;
  v2[25] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_1002601E8);
  v2[26] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[27] = v9;
  v2[28] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100260580);
  v2[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Account(0);
  v2[30] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[31] = v12;
  v2[32] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MessagingCapability(0);
  v2[33] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[34] = v14;
  v2[35] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Destination(0);
  v2[36] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[37] = v16;
  v2[38] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Handle(0);
  v2[39] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v2[40] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[41] = swift_task_alloc(v19);
  v2[42] = swift_task_alloc(v19);
  v2[43] = swift_task_alloc(v19);
  v2[44] = swift_task_alloc(v19);
  v2[45] = swift_task_alloc(v19);
  return swift_task_switch(sub_10011AC60, v1, 0);
}

uint64_t sub_10011AC60(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;

  Friend.handle.getter(a1);
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = v1[44];
  v3 = v1[45];
  v4 = v1[39];
  v5 = v1[40];
  v6 = type metadata accessor for Logger(0);
  v1[46] = sub_100037A9C(v6, (uint64_t)qword_10027B330);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v1[47] = v7;
  v8 = v7(v2, v3, v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v1[44];
  v13 = v1[40];
  if (v11)
  {
    v23 = v1[39];
    v14 = swift_slowAlloc(32, -1);
    v15 = swift_slowAlloc(64, -1);
    v24 = v15;
    *(_DWORD *)v14 = 136446723;
    v1[15] = sub_10002BA84(0xD000000000000013, 0x80000001001FF320, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 15, v1 + 16, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2160;
    v1[16] = 1752392040;
    v16 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 17, v14 + 14, v14 + 22);
    *(_WORD *)(v14 + 22) = 2081;
    v17 = Handle.identifier.getter(v16);
    v19 = v18;
    v1[7] = sub_10002BA84(v17, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 7, v1 + 8, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease(v19);
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v12, v23);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s from: %{private,mask.hash}s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v1[44], v1[39]);
  }

  v1[48] = v20;
  v21 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v1[49] = v21;
  *v21 = v1;
  v21[1] = sub_10011AED0;
  return daemon.getter();
}

uint64_t sub_10011AED0(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 392);
  v5 = *v1;
  *(_QWORD *)(*v1 + 400) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[51] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[52] = v7;
  v8 = type metadata accessor for IDSTransportServiceFMF();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[53] = v9;
  v10 = sub_100004EA8(&qword_1002600F0, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F2FD8);
  *v6 = v5;
  v6[1] = sub_10011AFC8;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10011AFC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 408);
  v3[54] = a1;
  v3[55] = v1;
  swift_task_dealloc(v4);
  v5 = v3[50];
  v6 = v3[18];
  swift_release(v5);
  if (v1)
    v7 = sub_10011C480;
  else
    v7 = sub_10011B040;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10011B040()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  v1 = Handle.isPhoneNumber.getter();
  v2 = v1;
  v3 = Handle.identifier.getter(v1);
  if ((v2 & 1) != 0)
    Destination.init(phoneNumber:)(v3);
  else
    Destination.init(email:)(v3);
  v4 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  *(_DWORD *)(v0 + 536) = enum case for MessagingCapability.supportsPeopleFindingV1(_:);
  v7 = *(void (**)(uint64_t))(v6 + 104);
  *(_QWORD *)(v0 + 448) = v7;
  v7(v5);
  return swift_task_switch(sub_10011B0C0, v4, 0);
}

uint64_t sub_10011B0C0()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of QueryController.destinationHasCapability(destination:capability:)
     + async function pointer to dispatch thunk of QueryController.destinationHasCapability(destination:capability:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of QueryController.destinationHasCapability(destination:capability:)
                                  + 1));
  v0[57] = v1;
  *v1 = v0;
  v1[1] = sub_10011B12C;
  return ((uint64_t (*)(_QWORD, _QWORD))v3)(v0[38], v0[35]);
}

uint64_t sub_10011B12C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 456);
  *(_QWORD *)(*v2 + 464) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 432);
    v7 = sub_10011B4FC;
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 296);
    v8 = *(_QWORD *)(v4 + 304);
    v10 = *(_QWORD *)(v4 + 280);
    v11 = *(_QWORD *)(v4 + 288);
    v12 = *(_QWORD *)(v4 + 264);
    v13 = *(_QWORD *)(v4 + 272);
    v14 = *(_QWORD *)(v4 + 144);
    *(_BYTE *)(v4 + 541) = a1 & 1;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v11);
    v7 = sub_10011B1D8;
    v6 = v14;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10011B1D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35[2];

  if (*(_BYTE *)(v0 + 541) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 472) = v1;
    *v1 = v0;
    v1[1] = sub_10011B664;
    return daemon.getter();
  }
  else
  {
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 312));
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 328);
    v8 = *(_QWORD *)(v0 + 312);
    if (v6)
    {
      v33 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
      v9 = swift_slowAlloc(32, -1);
      v10 = swift_slowAlloc(64, -1);
      v35[0] = v10;
      *(_DWORD *)v9 = 136446723;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000013, 0x80000001001FF320, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v9 + 4, v9 + 12);
      *(_WORD *)(v9 + 12) = 2160;
      *(_QWORD *)(v0 + 32) = 1752392040;
      v11 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
      *(_WORD *)(v9 + 22) = 2081;
      v12 = Handle.identifier.getter(v11);
      v14 = v13;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(v12, v13, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 24, v9 + 32);
      swift_bridgeObjectRelease(v14);
      v33(v7, v8);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s %{private,mask.hash}s missing required capability", (uint8_t *)v9, 0x20u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 312));
    }

    v15 = *(_QWORD *)(v0 + 432);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v17 = *(_QWORD *)(v0 + 360);
    v18 = *(_QWORD *)(v0 + 312);
    v19 = sub_100097FB4();
    v34 = swift_allocError(&type metadata for NITokenService.Error, v19, 0, 0);
    *v20 = 3;
    swift_willThrow(v34);
    swift_release(v15);
    v16(v17, v18);
    v21 = *(_QWORD *)(v0 + 352);
    v23 = *(_QWORD *)(v0 + 336);
    v22 = *(_QWORD *)(v0 + 344);
    v24 = *(_QWORD *)(v0 + 328);
    v25 = *(_QWORD *)(v0 + 304);
    v26 = *(_QWORD *)(v0 + 280);
    v27 = *(_QWORD *)(v0 + 256);
    v28 = *(_QWORD *)(v0 + 224);
    v29 = *(_QWORD *)(v0 + 232);
    v30 = *(_QWORD *)(v0 + 200);
    v31 = *(_QWORD *)(v0 + 176);
    v32 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 360));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v29);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10011B4FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v0[37];
  v1 = v0[38];
  v3 = v0[36];
  v4 = v0[18];
  (*(void (**)(_QWORD, _QWORD))(v0[34] + 8))(v0[35], v0[33]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_10011B560, v4, 0);
}

uint64_t sub_10011B560()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
  v2 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 312);
  swift_release(*(_QWORD *)(v0 + 432));
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 328);
  v8 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 280);
  v10 = *(_QWORD *)(v0 + 256);
  v11 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011B664(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 472);
  v5 = *v1;
  *(_QWORD *)(*v1 + 480) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[61] = v6;
  v7 = type metadata accessor for AccountService(0);
  v8 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_10011B70C;
  return ActorServiceDaemon.getService<A>()(v3[52], v7, v3[53], v8);
}

uint64_t sub_10011B70C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 488);
  v5 = *(_QWORD **)v2;
  v5[62] = a1;
  v5[63] = v1;
  swift_task_dealloc(v4);
  v6 = v5[60];
  if (v1)
  {
    v7 = v5[18];
    swift_release(v6);
    return swift_task_switch(sub_10011C574, v7, 0);
  }
  else
  {
    swift_release(v6);
    v9 = (_QWORD *)swift_task_alloc(dword_1002612E4);
    v5[64] = v9;
    *v9 = v5;
    v9[1] = sub_10011B7C0;
    return sub_1000069E8(v5[29]);
  }
}

uint64_t sub_10011B7C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 512));
  return swift_task_switch(sub_10011B818, v1, 0);
}

uint64_t sub_10011B818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  os_log_type_t type;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[2];

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = sub_1000087A0(v3, &qword_100260580);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v80[0] = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD000000000000013, 0x80000001001FF320, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Missing primary account to send FindingTokenReuqest with my dsid!", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v9 = *(_QWORD *)(v0 + 496);
    v10 = *(_QWORD *)(v0 + 432);
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v12 = *(_QWORD *)(v0 + 360);
    v13 = *(_QWORD *)(v0 + 312);
    v14 = sub_100097FB4();
    v15 = swift_allocError(&type metadata for NITokenService.Error, v14, 0, 0);
    *v16 = 16;
    swift_willThrow(v15);
    swift_release(v9);
    swift_release(v10);
    v17 = v12;
    v18 = v13;
    goto LABEL_10;
  }
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 376);
  v20 = *(_QWORD *)(v0 + 360);
  v21 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 312);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 256), v3, v1);
  v23 = Account.dsidBase64EncodedString()();
  v19(v21, v20, v22);
  v24 = swift_bridgeObjectRetain_n(v23._object, 2);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  v27 = os_log_type_enabled(v25, v26);
  v28 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
  v29 = *(_QWORD *)(v0 + 344);
  v30 = *(_QWORD *)(v0 + 312);
  if (v27)
  {
    v31 = swift_slowAlloc(42, -1);
    v76 = swift_slowAlloc(64, -1);
    v80[0] = v76;
    *(_DWORD *)v31 = 141558787;
    *(_QWORD *)(v0 + 88) = 1752392040;
    v32 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2081;
    v33 = Handle.identifier.getter(v32);
    type = v26;
    v35 = v34;
    *(_QWORD *)(v0 + 96) = sub_10002BA84(v33, v34, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease(v35);
    v28(v29, v30);
    *(_WORD *)(v31 + 22) = 2160;
    *(_QWORD *)(v0 + 104) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v31 + 24, v31 + 32);
    *(_WORD *)(v31 + 32) = 2081;
    swift_bridgeObjectRetain(v23._object);
    *(_QWORD *)(v0 + 112) = sub_10002BA84(v23._countAndFlagsBits, (unint64_t)v23._object, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v31 + 34, v31 + 42);
    swift_bridgeObjectRelease_n(v23._object, 3);
    _os_log_impl((void *)&_mh_execute_header, v25, type, "Requesting shared secret from %{private,mask.hash}s.\nserverId: %{private,mask.hash}s over IDS.", (uint8_t *)v31, 0x2Au);
    swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {
    v28(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 312));
    swift_bridgeObjectRelease_n(v23._object, 2);

  }
  v36 = *(_QWORD *)(v0 + 504);
  *(_BYTE *)(v0 + 540) = 3;
  *(Swift::String *)(v0 + 16) = v23;
  v37 = sub_10008277C();
  v38 = sub_10011D728();
  v39 = sub_10011D76C();
  Message.init<A>(type:version:payload:)(v0 + 540, 1, v0 + 16, &type metadata for FriendSharingMessageType, &type metadata for FindingTokenRequestEnvelopeV1, v37, v38, v39);
  if (v36)
  {
    v40 = *(_QWORD *)(v0 + 432);
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v41 = *(_QWORD *)(v0 + 360);
    v42 = *(_QWORD *)(v0 + 312);
    v44 = *(_QWORD *)(v0 + 248);
    v43 = *(_QWORD *)(v0 + 256);
    v45 = *(_QWORD *)(v0 + 240);
    swift_release(*(_QWORD *)(v0 + 496));
    swift_release(v40);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    v17 = v41;
    v18 = v42;
LABEL_10:
    v11(v17, v18);
    v46 = *(_QWORD *)(v0 + 352);
    v48 = *(_QWORD *)(v0 + 336);
    v47 = *(_QWORD *)(v0 + 344);
    v49 = *(_QWORD *)(v0 + 328);
    v50 = *(_QWORD *)(v0 + 304);
    v51 = *(_QWORD *)(v0 + 280);
    v52 = *(_QWORD *)(v0 + 256);
    v53 = *(_QWORD *)(v0 + 224);
    v54 = *(_QWORD *)(v0 + 232);
    v77 = *(_QWORD *)(v0 + 200);
    v78 = *(_QWORD *)(v0 + 176);
    v79 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 360));
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v53);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v56 = *(_QWORD *)(v0 + 296);
  v57 = sub_100037A5C(&qword_100261990);
  v58 = swift_allocObject(v57, ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72), *(unsigned __int8 *)(v56 + 80) | 7);
  *(_OWORD *)(v58 + 16) = xmmword_1001F35F0;
  v59 = Handle.isPhoneNumber.getter();
  v60 = v59;
  v61 = Handle.identifier.getter(v59);
  if ((v60 & 1) != 0)
    Destination.init(phoneNumber:)(v61);
  else
    Destination.init(email:)(v61);
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
  v63 = *(unsigned int *)(v0 + 536);
  v64 = *(_QWORD *)(v0 + 432);
  v65 = *(_QWORD *)(v0 + 264);
  v66 = *(_QWORD *)(v0 + 272);
  v67 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 56))(v67, 1, 1, *(_QWORD *)(v0 + 152));
  v68 = sub_100037A5C(&qword_100261B30);
  v69 = *(unsigned __int8 *)(v66 + 80);
  v70 = (v69 + 32) & ~v69;
  v71 = swift_allocObject(v68, v70 + *(_QWORD *)(v66 + 72), v69 | 7);
  *(_OWORD *)(v71 + 16) = xmmword_1001F35F0;
  v72 = v71 + v70;
  v62(v72, v63, v65);
  v73 = sub_10018C498(v71);
  swift_setDeallocating(v71);
  swift_arrayDestroy(v72, 1, v65);
  swift_deallocClassInstance(v71, 32, 7);
  v74 = sub_10018C36C((uint64_t)_swiftEmptyArrayStorage);
  MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)(v58, 0, v67, 0, 1, 0, v73, v74, 0, 0);
  return swift_task_switch(sub_10011BEEC, v64, 0);
}

uint64_t sub_10011BEEC()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to InternetMessaging.send(message:messageOptions:)[1]);
  v0[65] = v1;
  *v1 = v0;
  v1[1] = sub_10011BF4C;
  return InternetMessaging.send(message:messageOptions:)(v0[21], v0[28], v0[25]);
}

uint64_t sub_10011BF4C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  *(_QWORD *)(*(_QWORD *)v1 + 528) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[18];
    v5 = sub_10011BFC4;
  }
  else
  {
    v6 = v2[18];
    (*(void (**)(_QWORD, _QWORD))(v2[20] + 8))(v2[21], v2[19]);
    v5 = sub_10011C120;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10011BFC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 432);
  v24 = *(_QWORD *)(v0 + 360);
  v26 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
  v2 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 256);
  v22 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 496));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v20, v3);
  v26(v24, v22);
  v10 = *(_QWORD *)(v0 + 352);
  v12 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 328);
  v14 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 232);
  v21 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011C120()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 312));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v33 = *(_QWORD *)(v0 + 496);
    v35 = *(_QWORD *)(v0 + 432);
    v30 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v49 = *(_QWORD *)(v0 + 360);
    v4 = *(_QWORD *)(v0 + 336);
    v29 = *(_QWORD *)(v0 + 312);
    v43 = *(_QWORD *)(v0 + 240);
    v46 = *(_QWORD *)(v0 + 256);
    v39 = *(_QWORD *)(v0 + 224);
    v41 = *(_QWORD *)(v0 + 248);
    v36 = *(_QWORD *)(v0 + 216);
    v37 = *(_QWORD *)(v0 + 208);
    v34 = *(_QWORD *)(v0 + 200);
    v31 = *(_QWORD *)(v0 + 192);
    v32 = *(_QWORD *)(v0 + 184);
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 72) = 1752392040;
    v52 = v6;
    *(_DWORD *)v5 = 141558275;
    v7 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2081;
    v8 = Handle.identifier.getter(v7);
    v10 = v9;
    *(_QWORD *)(v0 + 80) = sub_10002BA84(v8, v9, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v10);
    v30(v4, v29);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully requested finding token from %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
    swift_release(v33);
    swift_release(v35);

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v34, v32);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v39, v37);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v46, v43);
    v30(v49, v29);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 432);
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v50 = *(_QWORD *)(v0 + 360);
    v13 = *(_QWORD *)(v0 + 336);
    v14 = *(_QWORD *)(v0 + 312);
    v44 = *(_QWORD *)(v0 + 240);
    v47 = *(_QWORD *)(v0 + 256);
    v15 = *(_QWORD *)(v0 + 216);
    v40 = *(_QWORD *)(v0 + 224);
    v42 = *(_QWORD *)(v0 + 248);
    v16 = *(_QWORD *)(v0 + 200);
    v38 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 184);
    v18 = *(_QWORD *)(v0 + 192);
    swift_release(*(_QWORD *)(v0 + 496));
    swift_release(v11);

    v12(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v40, v38);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v47, v44);
    v12(v50, v14);
  }
  v19 = *(_QWORD *)(v0 + 352);
  v21 = *(_QWORD *)(v0 + 336);
  v20 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 328);
  v23 = *(_QWORD *)(v0 + 304);
  v24 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD *)(v0 + 256);
  v27 = *(_QWORD *)(v0 + 224);
  v26 = *(_QWORD *)(v0 + 232);
  v45 = *(_QWORD *)(v0 + 200);
  v48 = *(_QWORD *)(v0 + 176);
  v51 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v45);
  swift_task_dealloc(v48);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011C480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(_QWORD, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 312));
  v1 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011C574()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
  v2 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 312);
  swift_release(*(_QWORD *)(v0 + 432));
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 328);
  v8 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 280);
  v10 = *(_QWORD *)(v0 + 256);
  v11 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011C678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5[5] = a5;
  v7 = type metadata accessor for Friend(0);
  v5[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[7] = v8;
  v5[8] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Handle(0);
  v5[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[10] = v10;
  v5[11] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)swift_task_alloc(dword_100263D8C);
  v5[12] = v11;
  *v11 = v5;
  v11[1] = sub_10011C720;
  return sub_10011AA90(a5);
}

uint64_t sub_10011C720()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 96);
  v3 = *v1;
  *(_QWORD *)(v3 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10011C7A4, 0, 0);
  v5 = *(_QWORD *)(v3 + 64);
  swift_task_dealloc(*(_QWORD *)(v3 + 88));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10011C7A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  NSObject *log;
  uint64_t v31;
  os_log_type_t type;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027B330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1, v5);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 104);
  if (v10)
  {
    v12 = *(_QWORD *)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 80);
    v29 = *(_QWORD *)(v0 + 72);
    type = v9;
    v13 = *(_QWORD *)(v0 + 64);
    v31 = *(_QWORD *)(v0 + 56);
    v33 = *(_QWORD *)(v0 + 48);
    v14 = swift_slowAlloc(32, -1);
    v34 = (uint64_t *)swift_slowAlloc(8, -1);
    v35 = swift_slowAlloc(32, -1);
    v36 = v35;
    *(_DWORD *)v14 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    v15 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    log = v8;
    v16 = v13;
    v17 = Friend.handle.getter(v15);
    v18 = Handle.identifier.getter(v17);
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v12, v29);
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v18, v20, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v16, v33);
    *(_WORD *)(v14 + 22) = 2114;
    swift_errorRetain(v11);
    v21 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 32) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v14 + 24, v14 + 32);
    *v34 = v21;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to request token from %{private,mask.hash}s error - %{public}@", (uint8_t *)v14, 0x20u);
    v22 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v34, 1, v22);
    swift_slowDealloc(v34, -1, -1);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v11);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 56);
    v23 = *(_QWORD *)(v0 + 64);
    v25 = *(_QWORD *)(v0 + 48);
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v26 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10011CAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10011CB34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10011CD18);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

id sub_10011CD3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  id v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  Class isa;
  uint64_t v39;
  unint64_t v40;
  _OWORD v41[2];
  __int128 v42;
  void *v43;
  char v44[80];
  _QWORD v45[3];
  uint64_t v46;
  _UNKNOWN **v47;

  v2 = type metadata accessor for Handle(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalUserNotificationCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RedStripeNotification(0);
  v46 = v10;
  v47 = &off_100255178;
  v11 = sub_10003276C(v45);
  sub_100025C70(a1, (uint64_t)v11, type metadata accessor for RedStripeNotification);
  v12 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  objc_msgSend(v12, "setDefaultActionURL:", 0);
  v13 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "defaultCriticalSound");
  objc_msgSend(v12, "setSound:", v13);

  v14 = (char *)sub_100036228(v45, v46);
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 16))(v9, &v14[*(int *)(v10 + 20)], v6);
  LocalUserNotificationCategory.rawValue.getter(v15);
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v12, "setCategoryIdentifier:", v18);

  sub_100036228(v45, v46);
  sub_100152B84();
  v20 = v19;
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  objc_msgSend(v12, "setTitle:", v21);

  sub_100036228(v45, v46);
  sub_100152CA8();
  v23 = v22;
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  objc_msgSend(v12, "setBody:", v24);

  objc_msgSend(v12, "setInterruptionLevel:", 2);
  sub_100036228(v45, v46);
  v25 = sub_100037A5C(qword_100263E28);
  inited = swift_initStackObject(v25, v44);
  *(_OWORD *)(inited + 16) = xmmword_1001F35F0;
  v27 = static LocalUserNotificationConstants.HandleIdentifier.getter();
  *(_QWORD *)(inited + 32) = v27;
  *(_QWORD *)(inited + 40) = v28;
  v29 = Friend.handle.getter(v27);
  v30 = Handle.identifier.getter(v29);
  v32 = v31;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v30;
  *(_QWORD *)(inited + 56) = v32;
  v33 = sub_1000DED00(inited);
  v43 = &type metadata for Bool;
  LOBYTE(v42) = 1;
  sub_10001AEAC(&v42, v41);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
  v40 = v33;
  sub_100164548(v41, 0xD000000000000023, 0x80000001001FF4C0, isUniquelyReferenced_nonNull_native);
  v35 = v40;
  swift_bridgeObjectRelease(0x8000000000000000);
  v36 = sub_100082BB4(v35);
  swift_bridgeObjectRelease(v35);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v36);
  objc_msgSend(v12, "setUserInfo:", isa);

  objc_msgSend(v12, "setShouldIgnoreDoNotDisturb:", 1);
  sub_10002BB90(v45);
  return v12;
}

uint64_t sub_10011D100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_10011CAD4(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

uint64_t sub_10011D1B4(uint64_t a1)
{
  uint64_t v1;

  return sub_10010FE84(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10011D1BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100037A5C(&qword_100263CF8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10011D248(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100263CF8) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_100263D04);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000087DC;
  return sub_10011000C(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_10011D2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100037A5C(&qword_100263CF8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10011D368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(sub_100037A5C(&qword_100263CF8) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc(dword_100263D14);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10003BF7C;
  return sub_1001101B4(v4, v5);
}

uint64_t sub_10011D3E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011D40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100263D34);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10003BF7C;
  return sub_100117D00(v2, v3);
}

uint64_t sub_10011D45C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100263D4C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_100118BD0(a1, v4);
}

uint64_t sub_10011D4C0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_100263D5C);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10003BF7C;
  return sub_100118FFC(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_10011D544(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for Friend(0) - 8);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v9 = (_QWORD *)swift_task_alloc(dword_100263D6C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003BF7C;
  return sub_10011A964(a1, v5, v6, v7, v8);
}

uint64_t sub_10011D5F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Friend(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10011D67C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for Friend(0) - 8);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v9 = (_QWORD *)swift_task_alloc(dword_100263D7C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003BF7C;
  return sub_10011C678(a1, v5, v6, v7, v8);
}

unint64_t sub_10011D728()
{
  unint64_t result;

  result = qword_100263D90;
  if (!qword_100263D90)
  {
    result = swift_getWitnessTable(&unk_1001F3910, &type metadata for FindingTokenRequestEnvelopeV1);
    atomic_store(result, (unint64_t *)&qword_100263D90);
  }
  return result;
}

unint64_t sub_10011D76C()
{
  unint64_t result;

  result = qword_100263D98;
  if (!qword_100263D98)
  {
    result = swift_getWitnessTable(&unk_1001F38E8, &type metadata for FindingTokenRequestEnvelopeV1);
    atomic_store(result, &qword_100263D98);
  }
  return result;
}

uint64_t sub_10011D7B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100263DAC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10003BF7C;
  return sub_100111894(v2, v3);
}

unint64_t sub_10011D800()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100263DC8;
  if (!qword_100263DC8)
  {
    v1 = objc_opt_self(NIDiscoveryToken);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100263DC8);
  }
  return result;
}

uint64_t sub_10011D83C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100263DE4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_100116210(a1, v4);
}

uint64_t sub_10011D8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_100263DF4);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_1000087DC;
  return sub_10011664C(a1, a2, v6, v7);
}

unint64_t sub_10011D91C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100263E00;
  if (!qword_100263E00)
  {
    v1 = sub_10003C1FC(&qword_100260908);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, &qword_100263E00);
  }
  return result;
}

uint64_t sub_10011D984(uint64_t a1)
{
  _QWORD v2[2];

  v2[1] = &unk_1001F69F0;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 96);
}

uint64_t sub_10011D9CC()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0 + 112);
}

uint64_t sub_10011D9D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 136);
  v3[18] = a1;
  v3[19] = v1;
  swift_task_dealloc(v4);
  swift_unknownObjectRelease(v3[16]);
  if (v1)
    v5 = sub_10011DD74;
  else
    v5 = sub_10011DA48;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10011DA48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, unint64_t, _QWORD);
  void (*v23)(_QWORD, unint64_t, uint64_t);
  uint64_t v25[2];

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v3 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = PropertyListEncoder.init()();
  *(_QWORD *)(v0 + 40) = v2;
  v5 = sub_100037A5C(&qword_100261858);
  v6 = sub_1000CA2CC();
  v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 40, v5, v6);
  v9 = *(_QWORD *)(v0 + 144);
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_release(v4);
    swift_bridgeObjectRelease(v9);
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v10 = type metadata accessor for Logger(0);
    sub_100037A9C(v10, (uint64_t)qword_10027ABA8);
    swift_errorRetain(v1);
    v11 = swift_errorRetain(v1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(64, -1);
      v25[0] = v15;
      *(_DWORD *)v14 = 136446466;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000026, 0x80000001001FF710, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2082;
      *(_QWORD *)(v0 + 24) = v1;
      swift_errorRetain(v1);
      v16 = sub_100037A5C(&qword_100265260);
      v17 = String.init<A>(describing:)(v0 + 24, v16);
      v19 = v18;
      *(_QWORD *)(v0 + 32) = sub_10002BA84(v17, v18, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s trampoline error: %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    v23 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 72);
    swift_errorRetain(v1);
    v23(0, 0xF000000000000000, v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  else
  {
    v20 = v7;
    v21 = v8;
    v22 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 72);
    swift_release(v4);
    swift_bridgeObjectRelease(v9);
    sub_10001A484(v20, v21);
    v22(v20, v21, 0);
    sub_100037AB4(v20, v21);
    sub_100037AB4(v20, v21);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011DD74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(_QWORD, unint64_t, uint64_t);
  uint64_t v14;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 152);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000026, 0x80000001001FF710, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s trampoline error: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v12 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 72);
  swift_errorRetain(v1);
  v12(0, 0xF000000000000000, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011DFCC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  type metadata accessor for Transaction(0);
  v11 = (_QWORD *)swift_allocObject(&unk_100253778, 64, 7);
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a5;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = v5;
  swift_retain(a5);
  sub_10001A484(a1, a2);
  swift_retain(v5);
  static Transaction.asyncTask(name:block:)("stopRefreshingLocation(handles:completion:)", 43, 2, &unk_100263F00, v11);
  return swift_release(v11);
}

uint64_t sub_10011E084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Priority;
  uint64_t v10;

  v6[10] = a5;
  v6[11] = a6;
  v6[8] = a3;
  v6[9] = a4;
  v6[6] = a1;
  v6[7] = a2;
  v7 = swift_isaMask;
  v6[12] = *a6;
  v6[13] = v7;
  v8 = sub_100037A5C(&qword_100263F08);
  v6[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  v6[15] = Priority;
  v10 = *(_QWORD *)(Priority - 8);
  v6[16] = v10;
  v6[17] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10011E124, 0, 0);
}

uint64_t sub_10011E124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  LocatePriority.init(rawValue:)(*(_QWORD *)(v0 + 48));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(void (**)(void))(v0 + 56);
    sub_100120FAC(*(_QWORD *)(v0 + 112));
    v5 = sub_100082560();
    v6 = swift_allocError(&type metadata for LocationServiceError, v5, 0, 0);
    *v7 = 4;
    v4();
    swift_errorRelease(v6);
    v15 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
    v10 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v11 = PropertyListDecoder.init()();
    v12 = sub_100037A5C(&qword_100262468);
    v13 = sub_100120CF0();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v12, v9, v8, v12, v13);
    v14 = *(_QWORD *)(v0 + 88);
    swift_release(v11);
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 16);
    return swift_task_switch(sub_10011E4CC, v14, 0);
  }
}

uint64_t sub_10011E4CC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 152) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 88) + 112);
  return swift_task_switch(sub_10011E510, 0, 0);
}

uint64_t sub_10011E510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(v0 + 152))
  {
    v1 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 104)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 104)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of LocationProtocol.stopRefreshingLocation(for:priority:)[1]);
    *(_QWORD *)(v0 + 160) = v4;
    *v4 = v0;
    v4[1] = sub_10011E5E0;
    return dispatch thunk of LocationProtocol.stopRefreshingLocation(for:priority:)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 136), v2, v3);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
    v7 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 120);
    (*(void (**)(_QWORD))(v0 + 56))(0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10011E5E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  v6 = v2 + 144;
  v4 = *(_QWORD *)(v2 + 144);
  v5 = *(_QWORD *)(v6 + 8);
  if (v0)
  {
    swift_unknownObjectRelease(v5);
    swift_bridgeObjectRelease(v4);
    v7 = sub_10011E6D8;
  }
  else
  {
    swift_bridgeObjectRelease(v4);
    swift_unknownObjectRelease(v5);
    v7 = sub_10011E670;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10011E670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  (*(void (**)(_QWORD))(v0 + 56))(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011E6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v18;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  v1 = *(_QWORD *)(v0 + 168);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v18 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD000000000000030, 0x80000001001FF690, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 32) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 32, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s trampoline error: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v12 = *(void (**)(void))(v0 + 56);
  v13 = sub_100082560();
  v14 = swift_allocError(&type metadata for LocationServiceError, v13, 0, 0);
  *v15 = 0;
  v12();
  swift_errorRelease(v14);
  swift_errorRelease(v1);
  v16 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011E94C(uint64_t a1, int a2, void *a3, uint64_t a4, void *aBlock)
{
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v8 = _Block_copy(aBlock);
  v9 = a3;
  swift_retain(a1);
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v12 = v11;

  v13 = swift_allocObject(&unk_100253868, 24, 7);
  *(_QWORD *)(v13 + 16) = v8;
  sub_10011DFCC(v10, v12, a4, (uint64_t)sub_10003C588, v13);
  swift_release(v13);
  sub_100037AB4(v10, v12);
  return swift_release(a1);
}

uint64_t sub_10011EA0C(uint64_t a1, uint64_t a2)
{
  return sub_10000890C(a1, a2, (uint64_t)&unk_100253750, (uint64_t)"stopRefreshingAllLocations(completion:)", 39, (uint64_t)&unk_100263EF0);
}

uint64_t sub_10011EA2C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v4 = swift_isaMask;
  v3[8] = *a1;
  v3[9] = v4;
  return swift_task_switch(sub_10011EA60, a1, 0);
}

uint64_t sub_10011EA60()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 40) + 112);
  return swift_task_switch(sub_10011EAA4, 0, 0);
}

uint64_t sub_10011EAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of LocationProtocol.stopRefreshingAllLocations()[1]);
    *(_QWORD *)(v0 + 88) = v4;
    *v4 = v0;
    v4[1] = sub_10011EB38;
    return dispatch thunk of LocationProtocol.stopRefreshingAllLocations()(v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 48))(0);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10011EB38()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10011EBD8;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 80));
    v4 = sub_10011EBA4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10011EBA4()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 48))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011EBD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v20;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 80));
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 96);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v20 = v9;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000027, 0x80000001001FF630, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v7;
    swift_errorRetain(v7);
    v10 = sub_100037A5C(&qword_100265260);
    v11 = String.init<A>(describing:)(v0 + 24, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s trampoline error: %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    swift_errorRelease(v7);
  }

  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(void (**)(void))(v0 + 48);
  v16 = sub_100082560();
  v17 = swift_allocError(&type metadata for LocationServiceError, v16, 0, 0);
  *v18 = 0;
  v15();
  swift_errorRelease(v17);
  swift_errorRelease(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011EE3C(uint64_t a1, int a2, void *a3)
{
  return sub_100009874(a1, a2, a3, (uint64_t)&unk_100253840, (uint64_t)sub_10003C58C, (void (*)(uint64_t, uint64_t))sub_10011EA0C);
}

uint64_t sub_10011EE58(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BA58(a1, a2, a3, a4, (uint64_t)&unk_100253728, (uint64_t)"locations(handles:completion:)", 30, (uint64_t)&unk_100263EE0);
}

uint64_t sub_10011EE78(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[10] = a4;
  v5[11] = a5;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  v6 = swift_isaMask;
  v5[12] = *a3;
  v5[13] = v6;
  return swift_task_switch(sub_10011EEAC, 0, 0);
}

uint64_t sub_10011EEAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = v0[7];
  v1 = v0[8];
  v3 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = PropertyListDecoder.init()();
  v5 = sub_100037A5C(&qword_100262468);
  v6 = sub_100120CF0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v5, v2, v1, v5, v6);
  v7 = v0[9];
  swift_release(v4);
  v0[14] = v0[2];
  return swift_task_switch(sub_10011F194, v7, 0);
}

uint64_t sub_10011F194()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 72) + 112);
  return swift_task_switch(sub_10011F1D8, 0, 0);
}

uint64_t sub_10011F1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void (*v6)(_QWORD, unint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  if (*(_QWORD *)(v0 + 120))
  {
    v1 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 104)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 104)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of LocationProtocol.locations(for:)[1]);
    *(_QWORD *)(v0 + 128) = v4;
    *v4 = v0;
    v4[1] = sub_10011F2AC;
    return dispatch thunk of LocationProtocol.locations(for:)(*(_QWORD *)(v0 + 112), v2, v3);
  }
  else
  {
    v6 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 80);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
    v7 = sub_100082560();
    v8 = swift_allocError(&type metadata for LocationServiceError, v7, 0, 0);
    *v9 = 0;
    v6(0, 0xF000000000000000, v8);
    swift_errorRelease(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10011F2AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 128);
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc(v4);
  v7 = v3 + 14;
  v5 = v3[14];
  v6 = v7[1];
  if (v1)
  {
    swift_unknownObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    v8 = sub_10011F648;
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    swift_unknownObjectRelease(v6);
    v8 = sub_10011F344;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10011F344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, unint64_t, _QWORD);
  void (*v23)(_QWORD, unint64_t, uint64_t);
  uint64_t v25[2];

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = PropertyListEncoder.init()();
  *(_QWORD *)(v0 + 48) = v2;
  v5 = sub_100037A5C(&qword_100261858);
  v6 = sub_1000CA2CC();
  v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 48, v5, v6);
  v9 = *(_QWORD *)(v0 + 136);
  if (v1)
  {
    swift_release(v4);
    swift_bridgeObjectRelease(v9);
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v10 = type metadata accessor for Logger(0);
    sub_100037A9C(v10, (uint64_t)qword_10027ABA8);
    swift_errorRetain(v1);
    v11 = swift_errorRetain(v1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(64, -1);
      v25[0] = v15;
      *(_DWORD *)v14 = 136446466;
      *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD00000000000001ALL, 0x80000001001FF610, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2082;
      *(_QWORD *)(v0 + 32) = v1;
      swift_errorRetain(v1);
      v16 = sub_100037A5C(&qword_100265260);
      v17 = String.init<A>(describing:)(v0 + 32, v16);
      v19 = v18;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(v17, v18, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s trampoline error: %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    v23 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 80);
    swift_errorRetain(v1);
    v23(0, 0xF000000000000000, v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  else
  {
    v20 = v7;
    v21 = v8;
    v22 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 80);
    swift_release(v4);
    swift_bridgeObjectRelease(v9);
    sub_10001A484(v20, v21);
    v22(v20, v21, 0);
    sub_100037AB4(v20, v21);
    sub_100037AB4(v20, v21);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011F648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(_QWORD, unint64_t, uint64_t);
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 144);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD00000000000001ALL, 0x80000001001FF610, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 32) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 32, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s trampoline error: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v12 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 80);
  swift_errorRetain(v1);
  v12(0, 0xF000000000000000, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011F888(uint64_t a1, int a2, void *a3, void *a4)
{
  return sub_10000CC38(a1, a2, a3, a4, (uint64_t)&unk_100253818, (uint64_t)sub_100121090, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10011EE58);
}

uint64_t sub_10011F8A4(uint64_t a1, uint64_t a2)
{
  return sub_10000890C(a1, a2, (uint64_t)&unk_100253700, (uint64_t)"subscribeToBackgroundProactiveLocations(completion:)", 52, (uint64_t)&unk_100263ED0);
}

uint64_t sub_10011F8C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = swift_isaMask;
  v3[9] = *a1;
  v3[10] = v4;
  return swift_task_switch(sub_10011F8F8, a1, 0);
}

uint64_t sub_10011F8F8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 88) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 48) + 112);
  return swift_task_switch(sub_10011F93C, 0, 0);
}

uint64_t sub_10011F93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void (*v6)(_QWORD, unint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = *(_QWORD *)(v0 + 72);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 80)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 80)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of LocationProtocol.subscribeToBackgroundProactiveLocations()[1]);
    *(_QWORD *)(v0 + 96) = v4;
    *v4 = v0;
    v4[1] = sub_10011FA04;
    return dispatch thunk of LocationProtocol.subscribeToBackgroundProactiveLocations()(v2, v3);
  }
  else
  {
    v6 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 56);
    v7 = sub_100082560();
    v8 = swift_allocError(&type metadata for LocationServiceError, v7, 0, 0);
    *v9 = 0;
    v6(0, 0xF000000000000000, v8);
    swift_errorRelease(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10011FA04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 96);
  v3[13] = a1;
  v3[14] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10011FD98;
  }
  else
  {
    swift_unknownObjectRelease(v3[11]);
    v5 = sub_10011FA78;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10011FA78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, unint64_t, _QWORD);
  void (*v23)(_QWORD, unint64_t, uint64_t);
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v28[2];

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = PropertyListEncoder.init()();
  *(_QWORD *)(v0 + 40) = v2;
  v5 = sub_100037A5C(&qword_100261858);
  v6 = sub_1000CA2CC();
  v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 40, v5, v6);
  v9 = *(_QWORD *)(v0 + 104);
  if (v1)
  {
    swift_release(v4);
    swift_bridgeObjectRelease(v9);
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v10 = type metadata accessor for Logger(0);
    sub_100037A9C(v10, (uint64_t)qword_10027ABA8);
    swift_errorRetain(v1);
    v11 = swift_errorRetain(v1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(64, -1);
      v28[0] = v15;
      *(_DWORD *)v14 = 136446466;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000034, 0x80000001001FF5B0, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2082;
      *(_QWORD *)(v0 + 24) = v1;
      swift_errorRetain(v1);
      v16 = sub_100037A5C(&qword_100265260);
      v17 = String.init<A>(describing:)(v0 + 24, v16);
      v19 = v18;
      *(_QWORD *)(v0 + 32) = sub_10002BA84(v17, v18, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s trampoline error: %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    v23 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 56);
    v24 = sub_100082560();
    v25 = swift_allocError(&type metadata for LocationServiceError, v24, 0, 0);
    *v26 = 0;
    v23(0, 0xF000000000000000, v25);
    swift_errorRelease(v25);
    swift_errorRelease(v1);
  }
  else
  {
    v20 = v7;
    v21 = v8;
    v22 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 56);
    swift_release(v4);
    swift_bridgeObjectRelease(v9);
    sub_10001A484(v20, v21);
    v22(v20, v21, 0);
    sub_100037AB4(v20, v21);
    sub_100037AB4(v20, v21);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011FD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(_QWORD, unint64_t, uint64_t);
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v17;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 112);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v17 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000034, 0x80000001001FF5B0, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s trampoline error: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v12 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 56);
  v13 = sub_100082560();
  v14 = swift_allocError(&type metadata for LocationServiceError, v13, 0, 0);
  *v15 = 0;
  v12(0, 0xF000000000000000, v14);
  swift_errorRelease(v14);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011FFFC(uint64_t a1, int a2, void *a3)
{
  return sub_100009874(a1, a2, a3, (uint64_t)&unk_1002537F0, (uint64_t)sub_100121090, (void (*)(uint64_t, uint64_t))sub_10011F8A4);
}

uint64_t sub_100120018(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v9 = swift_isaMask & *v4;
  type metadata accessor for Transaction(0);
  v10 = swift_allocObject(&unk_1002536B0, 24, 7);
  swift_weakInit(v10 + 16, v4);
  v11 = (_QWORD *)swift_allocObject(&unk_1002536D8, 72, 7);
  v11[2] = *(_QWORD *)(v9 + 80);
  v11[3] = *(_QWORD *)(v9 + 88);
  v11[4] = v10;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  v11[8] = a4;
  swift_retain(v10);
  sub_10001A484(a1, a2);
  swift_retain(a4);
  static Transaction.asyncTask(name:block:)("latestLocation(handles:completion:)", 35, 2, &unk_100263EB8, v11);
  swift_release(v10);
  return swift_release(v11);
}

uint64_t sub_100120118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[15] = a6;
  v7[16] = a7;
  v7[13] = a4;
  v7[14] = a5;
  v7[11] = a2;
  v7[12] = a3;
  v7[10] = a1;
  return swift_task_switch(sub_10012013C, 0, 0);
}

uint64_t sub_10012013C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1 = *(_QWORD *)(v0 + 80) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 136) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = Strong;
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v6 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = PropertyListDecoder.init()();
  v8 = sub_100037A5C(&qword_100262468);
  v9 = sub_100120CF0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v8, v5, v4, v8, v9);
  swift_release(v7);
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 40);
  return swift_task_switch(sub_100120454, v3, 0);
}

uint64_t sub_100120454()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 152) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 136) + 112);
  return swift_task_switch(sub_100120498, 0, 0);
}

uint64_t sub_100120498()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  void (*v4)(_QWORD, unint64_t, uint64_t);
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  if (*(_QWORD *)(v0 + 152))
  {
    v1 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of LocationProtocol.latestLocations(for:)[1]);
    *(_QWORD *)(v0 + 160) = v1;
    *v1 = v0;
    v1[1] = sub_100120564;
    return dispatch thunk of LocationProtocol.latestLocations(for:)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 136);
    v4 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 104);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
    v5 = sub_100082560();
    v6 = swift_allocError(&type metadata for LocationServiceError, v5, 0, 0);
    *v7 = 0;
    v4(0, 0xF000000000000000, v6);
    swift_release(v3);
    swift_errorRelease(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100120564(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 160);
  v3[21] = a1;
  v3[22] = v1;
  swift_task_dealloc(v4);
  v7 = v3 + 18;
  v5 = v3[18];
  v6 = v7[1];
  if (v1)
  {
    swift_unknownObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    v8 = sub_100120918;
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    swift_unknownObjectRelease(v6);
    v8 = sub_1001205FC;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1001205FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, unint64_t, _QWORD);
  uint64_t v24;
  void (*v25)(_QWORD, unint64_t, uint64_t);
  uint64_t v27[2];

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = PropertyListEncoder.init()();
  *(_QWORD *)(v0 + 72) = v2;
  v5 = sub_100037A5C(&qword_100261858);
  v6 = sub_1000CA2CC();
  v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 72, v5, v6);
  v9 = *(_QWORD *)(v0 + 168);
  if (v1)
  {
    swift_release(v4);
    swift_bridgeObjectRelease(v9);
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v10 = type metadata accessor for Logger(0);
    sub_100037A9C(v10, (uint64_t)qword_10027ABA8);
    swift_errorRetain(v1);
    v11 = swift_errorRetain(v1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(64, -1);
      v27[0] = v15;
      *(_DWORD *)v14 = 136446466;
      *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD000000000000020, 0x80000001001FF580, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2082;
      *(_QWORD *)(v0 + 56) = v1;
      swift_errorRetain(v1);
      v16 = sub_100037A5C(&qword_100265260);
      v17 = String.init<A>(describing:)(v0 + 56, v16);
      v19 = v18;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(v17, v18, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s trampoline error: %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    v24 = *(_QWORD *)(v0 + 136);
    v25 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 104);
    swift_errorRetain(v1);
    v25(0, 0xF000000000000000, v1);
    swift_release(v24);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  else
  {
    v20 = v7;
    v21 = v8;
    v22 = *(_QWORD *)(v0 + 136);
    v23 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 104);
    swift_release(v4);
    swift_bridgeObjectRelease(v9);
    sub_10001A484(v20, v21);
    v23(v20, v21, 0);
    swift_release(v22);
    sub_100037AB4(v20, v21);
    sub_100037AB4(v20, v21);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100120918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, unint64_t, uint64_t);
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 176);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD000000000000020, 0x80000001001FF580, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 56) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 56, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 64) = sub_10002BA84(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s trampoline error: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v12 = *(_QWORD *)(v0 + 136);
  v13 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 104);
  swift_errorRetain(v1);
  v13(0, 0xF000000000000000, v1);
  swift_release(v12);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100120B64(uint64_t a1, int a2, void *a3, void *a4)
{
  return sub_10000CC38(a1, a2, a3, a4, (uint64_t)&unk_1002537C8, (uint64_t)sub_100121048, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100120018);
}

void sub_100120B80()
{
  uint64_t v0;

  swift_defaultActor_initialize(v0);
  _swift_stdlib_reportUnimplementedInitializer("findmylocated.Trampoline", 24, "init()", 6, 0);
  __break(1u);
}

void sub_100120BB4()
{
  sub_100120B80();
}

uint64_t sub_100120BC8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 112);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t _s14descr1002538A9C10TrampolineCMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100121050(a1, a2, a3, a4, (uint64_t)&_s14descr1002538A9C10TrampolineCMn);
}

uint64_t sub_100120BF8()
{
  return sub_100041B50();
}

uint64_t sub_100120C10()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100120C34()
{
  _QWORD *v0;

  swift_release(v0[4]);
  sub_100037AB4(v0[5], v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100120C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v7;

  v7 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_100263EB4);
  v4 = *(_OWORD *)(v0 + 56);
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_OWORD *)(v3 + 120) = v5;
  *(_OWORD *)(v3 + 104) = v4;
  *(_QWORD *)(v3 + 96) = v2;
  *(_OWORD *)(v3 + 80) = v7;
  return swift_task_switch(sub_10012013C, 0, 0);
}

unint64_t sub_100120CF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100263EC0;
  if (!qword_100263EC0)
  {
    v1 = sub_10003C1FC(&qword_100262468);
    sub_100004EA8(&qword_100263778, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, &qword_100263EC0);
  }
  return result;
}

uint64_t sub_100120D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_100263ECC);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 64) = v2;
  *(_OWORD *)(v3 + 48) = v4;
  v5 = swift_isaMask;
  *(_QWORD *)(v3 + 72) = *(_QWORD *)v4;
  *(_QWORD *)(v3 + 80) = v5;
  return swift_task_switch(sub_10011F8F8, v4, 0);
}

uint64_t sub_100120DF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = swift_task_alloc(dword_100263EDC);
  v6 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_10003BF7C;
  *(_QWORD *)(v5 + 88) = v4;
  *(_OWORD *)(v5 + 72) = v6;
  *(_QWORD *)(v5 + 56) = v2;
  *(_QWORD *)(v5 + 64) = v3;
  v7 = swift_isaMask;
  *(_QWORD *)(v5 + 96) = *(_QWORD *)v6;
  *(_QWORD *)(v5 + 104) = v7;
  return swift_task_switch(sub_10011EEAC, 0, 0);
}

uint64_t sub_100120E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_100263EEC);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  v5 = swift_isaMask;
  *(_QWORD *)(v3 + 64) = *(_QWORD *)v4;
  *(_QWORD *)(v3 + 72) = v5;
  return swift_task_switch(sub_10011EA60, v4, 0);
}

uint64_t sub_100120F00()
{
  _QWORD *v0;

  swift_release(v0[4]);
  sub_100037AB4(v0[5], v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100120F34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v7 = v0[6];
  v6 = (_QWORD *)v0[7];
  v8 = (_QWORD *)swift_task_alloc(dword_100263EFC);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_1000087DC;
  return sub_10011E084(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_100120FAC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100037A5C(&qword_100263F08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100120FF0()
{
  _QWORD *v0;

  sub_100037AB4(v0[2], v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100121024()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100121048(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100154894(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_100121050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100121094(uint64_t a1)
{
  _QWORD v2[2];

  v2[1] = &unk_1001F6A88;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 96);
}

uint64_t sub_1001210DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 112));
  return swift_task_switch(sub_10012111C, v1, 0);
}

uint64_t sub_10012111C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[16];
  v0[2] = v1;
  v2 = v0[13];
  v3 = v0[11];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[16];
    (*(void (**)(_QWORD, _QWORD))(v0[12] + 8))(v0[13], v0[11]);
    swift_errorRetain(v5);
    v6 = v0[16];
  }
  else
  {
    v7 = v0[10];
    v8 = v0[11];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[9] + 104))(v7, enum case for ClientSessionError.Category.friendshipService(_:), v0[8]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[17] = v6;
  return swift_task_switch(sub_100127A34, 0, 0);
}

uint64_t sub_100121220(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BA58(a1, a2, a3, a4, (uint64_t)&unk_100253C10, (uint64_t)"friends(type:origin:completion:)", 32, (uint64_t)&unk_1002640F0);
}

uint64_t sub_100121240(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v6 = swift_isaMask;
  v5[10] = *a3;
  v5[11] = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  v5[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[13] = v8;
  v5[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  v5[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[16] = v10;
  v5[17] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001212E4, 0, 0);
}

uint64_t sub_1001212E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[5];
  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100037A5C(&qword_1002640F8);
  v7 = sub_1001278A0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, v3, v2, v6, v7);
  v0[18] = 0;
  swift_release(v5);
  v0[19] = v0[2];
  return swift_task_switch(sub_1001213BC, v1, 0);
}

uint64_t sub_1001213BC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 160) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 56) + 112);
  return swift_task_switch(sub_100121400, 0, 0);
}

uint64_t sub_100121400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, unint64_t, _QWORD);
  uint64_t v16;

  if (*(_QWORD *)(v0 + 160))
  {
    v1 = *(_QWORD *)(v0 + 80);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 88)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 88)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.friends(with:)[1]);
    *(_QWORD *)(v0 + 168) = v4;
    *v4 = v0;
    v4[1] = sub_100121598;
    return dispatch thunk of FriendshipProtocol.friends(with:)(*(_QWORD *)(v0 + 152), v2, v3);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
    v6 = *(_QWORD *)(v0 + 144);
    v7 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v8 = PropertyListEncoder.init()();
    *(_QWORD *)(v0 + 32) = 0;
    v9 = sub_100037A5C(&qword_100264108);
    v10 = sub_10012791C();
    v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 32, v9, v10);
    if (v6)
    {
      swift_bridgeObjectRelease(0);
      swift_release(v8);
      *(_QWORD *)(v0 + 192) = v6;
      return swift_task_switch(sub_10012177C, *(_QWORD *)(v0 + 56), 0);
    }
    else
    {
      v13 = v11;
      v14 = v12;
      v15 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 64);
      swift_bridgeObjectRelease(0);
      swift_release(v8);
      sub_10001A484(v13, v14);
      v15(v13, v14, 0);
      sub_100037AB4(v13, v14);
      sub_100037AB4(v13, v14);
      v16 = *(_QWORD *)(v0 + 112);
      swift_task_dealloc(*(_QWORD *)(v0 + 136));
      swift_task_dealloc(v16);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_100121598(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 168);
  *(_QWORD *)(*(_QWORD *)v2 + 176) = v1;
  swift_task_dealloc(v5);
  v7 = v4[19];
  v6 = v4[20];
  if (v1)
  {
    swift_unknownObjectRelease(v4[20]);
    swift_bridgeObjectRelease(v7);
    v4[24] = v1;
    v8 = v4[7];
    v9 = sub_10012177C;
  }
  else
  {
    swift_bridgeObjectRelease(v4[19]);
    swift_unknownObjectRelease(v6);
    v4[23] = a1;
    v9 = sub_100121640;
    v8 = 0;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_100121640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, unint64_t, _QWORD);
  uint64_t v13;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = PropertyListEncoder.init()();
  *(_QWORD *)(v0 + 32) = v1;
  v5 = sub_100037A5C(&qword_100264108);
  v6 = sub_10012791C();
  v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 32, v5, v6);
  if (v2)
  {
    swift_bridgeObjectRelease(v1);
    swift_release(v4);
    *(_QWORD *)(v0 + 192) = v2;
    return swift_task_switch(sub_10012177C, *(_QWORD *)(v0 + 56), 0);
  }
  else
  {
    v10 = v7;
    v11 = v8;
    v12 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 64);
    swift_bridgeObjectRelease(v1);
    swift_release(v4);
    sub_10001A484(v10, v11);
    v12(v10, v11, 0);
    sub_100037AB4(v10, v11);
    sub_100037AB4(v10, v11);
    v13 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10012177C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[24];
  v0[3] = v1;
  v2 = v0[17];
  v3 = v0[15];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 3, v4, v3, 6))
  {
    v5 = v0[24];
    (*(void (**)(_QWORD, _QWORD))(v0[16] + 8))(v0[17], v0[15]);
    swift_errorRetain(v5);
    v6 = v0[24];
  }
  else
  {
    v7 = v0[14];
    v8 = v0[15];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[13] + 104))(v7, enum case for ClientSessionError.Category.friendshipService(_:), v0[12]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[25] = v6;
  return swift_task_switch(sub_100121880, 0, 0);
}

uint64_t sub_100121880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, unint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 192);
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 64);
  swift_errorRetain(v1);
  v3(0, 0xF000000000000000, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  v4 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001218FC(uint64_t a1, int a2, void *a3, void *a4)
{
  return sub_10000CC38(a1, a2, a3, a4, (uint64_t)&unk_100253EE0, (uint64_t)sub_100121090, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100121220);
}

uint64_t sub_100121918(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BA58(a1, a2, a3, a4, (uint64_t)&unk_100253BE8, (uint64_t)"friendshipState(handle:groupID:completion:)", 43, (uint64_t)&unk_1002640C0);
}

uint64_t sub_100121938(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t CanShareLocationRequest;
  uint64_t v13;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = swift_isaMask;
  v5[8] = *a3;
  v5[9] = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  v5[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[11] = v8;
  v5[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  v5[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[14] = v10;
  v5[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_1002640C8);
  v5[16] = v11;
  v5[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  CanShareLocationRequest = type metadata accessor for FriendshipCanShareLocationRequest(0);
  v5[18] = CanShareLocationRequest;
  v13 = *(_QWORD *)(CanShareLocationRequest - 8);
  v5[19] = v13;
  v5[20] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100121A2C, 0, 0);
}

uint64_t sub_100121A2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[18];
  v3 = v0[3];
  v2 = v0[4];
  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100004EA8(&qword_1002640D0, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipCanShareLocationRequest, (uint64_t)&protocol conformance descriptor for FriendshipCanShareLocationRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v1, v3, v2, v1, v6);
  v0[21] = 0;
  v7 = v0[5];
  swift_release(v5);
  return swift_task_switch(sub_100121B08, v7, 0);
}

uint64_t sub_100121B08()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 176) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 40) + 112);
  return swift_task_switch(sub_100121B4C, 0, 0);
}

uint64_t sub_100121B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, unint64_t, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*(_QWORD *)(v0 + 176))
  {
    v1 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.friendshipState(_:)[1]);
    *(_QWORD *)(v0 + 184) = v4;
    *v4 = v0;
    v4[1] = sub_100121D68;
    return dispatch thunk of FriendshipProtocol.friendshipState(_:)(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160), v2, v3);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 136);
    v7 = type metadata accessor for FriendshipState(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
    v8 = *(_QWORD *)(v0 + 168);
    v10 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 136);
    v11 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v12 = PropertyListEncoder.init()();
    v13 = sub_1001277AC();
    v14 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v9, v10, v13);
    v17 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 160);
    v18 = *(_QWORD *)(v0 + 136);
    v19 = *(_QWORD *)(v0 + 144);
    if (v8)
    {
      swift_release(v12);
      sub_1000087A0(v18, &qword_1002640C8);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v19);
      v20 = *(_QWORD *)(v0 + 40);
      *(_QWORD *)(v0 + 200) = v8;
      return swift_task_switch(sub_100121F80, v20, 0);
    }
    else
    {
      v21 = v14;
      v22 = v15;
      v23 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 48);
      swift_release(v12);
      sub_10001A484(v21, v22);
      v23(v21, v22, 0);
      sub_100037AB4(v21, v22);
      sub_100037AB4(v21, v22);
      sub_1000087A0(v18, &qword_1002640C8);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v19);
      v24 = *(_QWORD *)(v0 + 136);
      v25 = *(_QWORD *)(v0 + 120);
      v26 = *(_QWORD *)(v0 + 96);
      swift_task_dealloc(*(_QWORD *)(v0 + 160));
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_100121D68()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 176));
  if (v0)
    v4 = sub_100122118;
  else
    v4 = sub_100121DD4;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100121DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, unint64_t, _QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = type metadata accessor for FriendshipState(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = PropertyListEncoder.init()();
  v8 = sub_1001277AC();
  v9 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v4, v5, v8);
  v12 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 144);
  if (v3)
  {
    swift_release(v7);
    sub_1000087A0(v13, &qword_1002640C8);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v14);
    v15 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 200) = v3;
    return swift_task_switch(sub_100121F80, v15, 0);
  }
  else
  {
    v17 = v9;
    v18 = v10;
    v19 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 48);
    swift_release(v7);
    sub_10001A484(v17, v18);
    v19(v17, v18, 0);
    sub_100037AB4(v17, v18);
    sub_100037AB4(v17, v18);
    sub_1000087A0(v13, &qword_1002640C8);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v14);
    v20 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 120);
    v22 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100121F80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[25];
  v0[2] = v1;
  v2 = v0[15];
  v3 = v0[13];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[25];
    (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
    swift_errorRetain(v5);
    v6 = v0[25];
  }
  else
  {
    v7 = v0[12];
    v8 = v0[13];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[11] + 104))(v7, enum case for ClientSessionError.Category.friendshipService(_:), v0[10]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[26] = v6;
  return swift_task_switch(sub_100122084, 0, 0);
}

uint64_t sub_100122084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, unint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 48);
  swift_errorRetain(v1);
  v3(0, 0xF000000000000000, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100122118()
{
  _QWORD *v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(v0[19] + 8))(v0[20], v0[18]);
  v1 = v0[5];
  v0[25] = v0[24];
  return swift_task_switch(sub_100121F80, v1, 0);
}

uint64_t sub_100122164(uint64_t a1, int a2, void *a3, void *a4)
{
  return sub_10000CC38(a1, a2, a3, a4, (uint64_t)&unk_100253EB8, (uint64_t)sub_100121090, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100121918);
}

uint64_t sub_100122180(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  type metadata accessor for Transaction(0);
  v13 = (_QWORD *)swift_allocObject(&unk_100253BC0, 72, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  v13[5] = a4;
  v13[6] = v6;
  v13[7] = a5;
  v13[8] = a6;
  sub_10001A484(a1, a2);
  sub_10001A484(a3, a4);
  swift_retain(v6);
  swift_retain(a6);
  static Transaction.asyncTask(name:block:)("offerExpirationFor(handle:fromHandle:origin:completion)", 55, 2, &unk_1002640B0, v13);
  return swift_release(v13);
}

uint64_t sub_100122254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  v8 = swift_isaMask;
  v7[10] = *a5;
  v7[11] = v8;
  v9 = type metadata accessor for ClientSessionError.Category(0);
  v7[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[13] = v10;
  v7[14] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ClientSessionError(0);
  v7[15] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[16] = v12;
  v7[17] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100262930) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[18] = swift_task_alloc(v13);
  v7[19] = swift_task_alloc(v13);
  v14 = type metadata accessor for Handle(0);
  v7[20] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v7[21] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[22] = swift_task_alloc(v16);
  v7[23] = swift_task_alloc(v16);
  return swift_task_switch(sub_100122368, 0, 0);
}

uint64_t sub_100122368()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0[20];
  v3 = v0[3];
  v2 = v0[4];
  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100004EA8(&qword_100263778, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v1, v3, v2, v1, v6);
  v7 = v0[20];
  v9 = v0[5];
  v8 = v0[6];
  swift_release(v5);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v10 = PropertyListDecoder.init()();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v7, v9, v8, v7, v6);
  v12 = v0[7];
  swift_release(v10);
  return swift_task_switch(sub_1001224B8, v12, 0);
}

uint64_t sub_1001224B8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 192) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 56) + 112);
  return swift_task_switch(sub_1001224FC, 0, 0);
}

uint64_t sub_1001224FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)(v0 + 192))
  {
    v1 = *(_QWORD *)(v0 + 80);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 88)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 88)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.offerExpiration(for:fromHandle:)[1]);
    *(_QWORD *)(v0 + 200) = v4;
    *v4 = v0;
    v4[1] = sub_100122648;
    return dispatch thunk of FriendshipProtocol.offerExpiration(for:fromHandle:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 176), v2, v3);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 152);
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
    v9 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 168);
    v12 = *(_QWORD *)(v0 + 152);
    (*(void (**)(uint64_t, _QWORD))(v0 + 64))(v12, 0);
    sub_1000087A0(v12, (uint64_t *)&unk_100262930);
    v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v13(v9, v10);
    v13(v8, v10);
    v14 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 144);
    v15 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 136);
    v18 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100122648()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 192));
  if (v0)
    v4 = sub_100122954;
  else
    v4 = sub_1001226B4;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001226B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 152);
  (*(void (**)(uint64_t, _QWORD))(v0 + 64))(v5, 0);
  sub_1000087A0(v5, (uint64_t *)&unk_100262930);
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v3);
  v6(v1, v3);
  v7 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100122770()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[27];
  v0[2] = v1;
  v2 = v0[17];
  v3 = v0[15];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[27];
    (*(void (**)(_QWORD, _QWORD))(v0[16] + 8))(v0[17], v0[15]);
    swift_errorRetain(v5);
    v6 = v0[27];
  }
  else
  {
    v7 = v0[14];
    v8 = v0[15];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[13] + 104))(v7, enum case for ClientSessionError.Category.friendshipService(_:), v0[12]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[28] = v6;
  return swift_task_switch(sub_100122874, 0, 0);
}

uint64_t sub_100122874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 64);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
  swift_errorRetain(v1);
  v4(v3, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  swift_errorRelease(v1);
  sub_1000087A0(v3, (uint64_t *)&unk_100262930);
  v6 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100122954()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  v1 = v0[23];
  v2 = v0[20];
  v3 = *(void (**)(uint64_t, uint64_t))(v0[21] + 8);
  v3(v0[22], v2);
  v3(v1, v2);
  v0[27] = v0[26];
  return swift_task_switch(sub_100122770, v0[7], 0);
}

uint64_t sub_1001229B8(uint64_t a1, int a2, void *a3, void *a4, void *aBlock)
{
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v8 = _Block_copy(aBlock);
  v9 = a3;
  v10 = a4;
  swift_retain(a1);
  v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v13 = v12;

  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v16 = v15;

  v17 = swift_allocObject(&unk_100253E90, 24, 7);
  *(_QWORD *)(v17 + 16) = v8;
  sub_100122180(v11, v13, v14, v16, (uint64_t)sub_100127A2C, v17);
  swift_release(v17);
  sub_100037AB4(v14, v16);
  sub_100037AB4(v11, v13);
  return swift_release(a1);
}

void sub_100122AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  uint64_t v13;

  v6 = sub_100037A5C((uint64_t *)&unk_100262930);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D6A78(a1, (uint64_t)v8);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  if (a2)
    v12 = (void *)_convertErrorToNSError(_:)(a2);
  else
    v12 = 0;
  (*(void (**)(uint64_t, Class, void *))(a3 + 16))(a3, isa, v12);

}

uint64_t sub_100122B98(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  type metadata accessor for Transaction(0);
  v13 = (_QWORD *)swift_allocObject(&unk_100253B98, 72, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = v6;
  v13[5] = a3;
  v13[6] = a4;
  v13[7] = a5;
  v13[8] = a6;
  sub_10001A484(a1, a2);
  swift_bridgeObjectRetain(a4);
  swift_retain(a6);
  swift_retain(v6);
  static Transaction.asyncTask(name:block:)("offerExpirationFor(handle:groupId:completion)", 45, 2, &unk_1002640A0, v13);
  return swift_release(v13);
}

uint64_t sub_100122C68(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  v8 = swift_isaMask;
  v7[10] = *a3;
  v7[11] = v8;
  v9 = type metadata accessor for ClientSessionError.Category(0);
  v7[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[13] = v10;
  v7[14] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ClientSessionError(0);
  v7[15] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[16] = v12;
  v7[17] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100262930) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[18] = swift_task_alloc(v13);
  v7[19] = swift_task_alloc(v13);
  v14 = type metadata accessor for Handle(0);
  v7[20] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v7[21] = v15;
  v7[22] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100122D6C, 0, 0);
}

uint64_t sub_100122D6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[20];
  v3 = v0[3];
  v2 = v0[4];
  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100004EA8(&qword_100263778, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v1, v3, v2, v1, v6);
  v7 = v0[5];
  swift_release(v5);
  return swift_task_switch(sub_100122E44, v7, 0);
}

uint64_t sub_100122E44()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 184) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 40) + 112);
  return swift_task_switch(sub_100122E88, 0, 0);
}

uint64_t sub_100122E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(v0 + 184))
  {
    v1 = *(_QWORD *)(v0 + 80);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 88)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 88)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.offerExpiration(for:groupId:)[1]);
    *(_QWORD *)(v0 + 192) = v4;
    *v4 = v0;
    v4[1] = sub_100122FBC;
    return dispatch thunk of FriendshipProtocol.offerExpiration(for:groupId:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), v2, v3);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 152);
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
    v9 = *(_QWORD *)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 176);
    v11 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 160);
    (*(void (**)(uint64_t, _QWORD))(v0 + 64))(v11, 0);
    sub_1000087A0(v11, (uint64_t *)&unk_100262930);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v12 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100122FBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 184));
  if (v0)
    v4 = sub_1001232A8;
  else
    v4 = sub_100123028;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100123028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD))(v0 + 64))(v4, 0);
  sub_1000087A0(v4, (uint64_t *)&unk_100262930);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001230CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[26];
  v0[2] = v1;
  v2 = v0[17];
  v3 = v0[15];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[26];
    (*(void (**)(_QWORD, _QWORD))(v0[16] + 8))(v0[17], v0[15]);
    swift_errorRetain(v5);
    v6 = v0[26];
  }
  else
  {
    v7 = v0[14];
    v8 = v0[15];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[13] + 104))(v7, enum case for ClientSessionError.Category.friendshipService(_:), v0[12]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[27] = v6;
  return swift_task_switch(sub_1001231D0, 0, 0);
}

uint64_t sub_1001231D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 64);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
  swift_errorRetain(v1);
  v4(v3, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  swift_errorRelease(v1);
  sub_1000087A0(v3, (uint64_t *)&unk_100262930);
  v6 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001232A8()
{
  _QWORD *v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(v0[21] + 8))(v0[22], v0[20]);
  v1 = v0[5];
  v0[26] = v0[25];
  return swift_task_switch(sub_1001230CC, v1, 0);
}

uint64_t sub_1001232F4(uint64_t a1, int a2, void *a3, void *a4, void *aBlock)
{
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = _Block_copy(aBlock);
  v9 = a3;
  swift_retain(a1);
  v10 = a4;
  v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v13 = v12;

  if (v10)
  {
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = swift_allocObject(&unk_100253E68, 24, 7);
  *(_QWORD *)(v17 + 16) = v8;
  sub_100122B98(v11, v13, v14, v16, (uint64_t)sub_100127A24, v17);
  swift_release(v17);
  swift_bridgeObjectRelease(v16);
  sub_100037AB4(v11, v13);
  return swift_release(a1);
}

uint64_t sub_1001233E8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BA58(a1, a2, a3, a4, (uint64_t)&unk_100253B70, (uint64_t)"sendFriendshipOffer(request:completion:)", 40, (uint64_t)&unk_100264090);
}

uint64_t sub_100123408(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = swift_isaMask;
  v5[8] = *a3;
  v5[9] = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  v5[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[11] = v8;
  v5[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  v5[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[14] = v10;
  v5[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_100264050);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FriendshipRequestResult(0);
  v5[17] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[18] = v13;
  v5[19] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FriendshipRequest(0);
  v5[20] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v5[21] = v15;
  v5[22] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100123520, 0, 0);
}

uint64_t sub_100123520()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[20];
  v3 = v0[3];
  v2 = v0[4];
  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100004EA8(&qword_100264058, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipRequest, (uint64_t)&protocol conformance descriptor for FriendshipRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v1, v3, v2, v1, v6);
  v7 = v0[5];
  swift_release(v5);
  return swift_task_switch(sub_1001235F8, v7, 0);
}

uint64_t sub_1001235F8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 184) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 40) + 112);
  return swift_task_switch(sub_10012363C, 0, 0);
}

uint64_t sub_10012363C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD, unint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_QWORD *)(v0 + 184))
  {
    v1 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.sendFriendshipOffer(_:)[1]);
    *(_QWORD *)(v0 + 192) = v4;
    *v4 = v0;
    v4[1] = sub_100123790;
    return dispatch thunk of FriendshipProtocol.sendFriendshipOffer(_:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 176), v2, v3);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(v9, 1, 1, *(_QWORD *)(v0 + 136));
    sub_1000087A0(v9, &qword_100264050);
    v11 = sub_10006F520();
    v12 = swift_allocError(&type metadata for FriendshipServiceError, v11, 0, 0);
    *v13 = 0;
    v10(0, 0xF000000000000000, v12);
    swift_errorRelease(v12);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v14 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100123790()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 184));
  if (v0)
    v4 = sub_100123C28;
  else
    v4 = sub_1001237FC;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001237FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, unint64_t, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v4, v5);
  v6 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = PropertyListEncoder.init()();
  v8 = sub_100004EA8(&qword_100264060, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipRequestResult, (uint64_t)&protocol conformance descriptor for FriendshipRequestResult);
  v9 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v2, v5, v8);
  if (v1)
  {
    v12 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 144);
    swift_release(v7);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    v17 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 208) = v1;
    return swift_task_switch(sub_100123A88, v17, 0);
  }
  else
  {
    v19 = v9;
    v20 = v10;
    swift_release(v7);
    if (qword_10025F988 != -1)
      swift_once(&qword_10025F988, sub_100139A94);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100037A9C(v21, (uint64_t)qword_10027ADC0);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "FriendshipService+Trampoline sendFriendshipOffer result back to framework", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }
    v26 = *(_QWORD *)(v0 + 168);
    v27 = *(_QWORD *)(v0 + 152);
    v35 = *(_QWORD *)(v0 + 160);
    v36 = *(_QWORD *)(v0 + 176);
    v29 = *(_QWORD *)(v0 + 136);
    v28 = *(_QWORD *)(v0 + 144);
    v30 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 48);

    sub_10001A484(v19, v20);
    v30(v19, v20, 0);
    sub_100037AB4(v19, v20);
    sub_100037AB4(v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v36, v35);
    v31 = *(_QWORD *)(v0 + 152);
    v33 = *(_QWORD *)(v0 + 120);
    v32 = *(_QWORD *)(v0 + 128);
    v34 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100123A88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[26];
  v0[2] = v1;
  v2 = v0[15];
  v3 = v0[13];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[26];
    (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
    swift_errorRetain(v5);
    v6 = v0[26];
  }
  else
  {
    v7 = v0[12];
    v8 = v0[13];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[11] + 104))(v7, enum case for ClientSessionError.Category.friendshipService(_:), v0[10]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[27] = v6;
  return swift_task_switch(sub_100123B8C, 0, 0);
}

uint64_t sub_100123B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, unint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 48);
  swift_errorRetain(v1);
  v3(0, 0xF000000000000000, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  v4 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100123C28()
{
  _QWORD *v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(v0[21] + 8))(v0[22], v0[20]);
  v1 = v0[5];
  v0[26] = v0[25];
  return swift_task_switch(sub_100123A88, v1, 0);
}

uint64_t sub_100123C74(uint64_t a1, int a2, void *a3, void *a4)
{
  return sub_10000CC38(a1, a2, a3, a4, (uint64_t)&unk_100253E40, (uint64_t)sub_100121090, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1001233E8);
}

uint64_t sub_100123C90(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BA58(a1, a2, a3, a4, (uint64_t)&unk_100253B48, (uint64_t)"sendFriendshipInvite(request:completion:)", 41, (uint64_t)&unk_100264080);
}

uint64_t sub_100123CB0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = swift_isaMask;
  v5[8] = *a3;
  v5[9] = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  v5[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[11] = v8;
  v5[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  v5[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[14] = v10;
  v5[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_100264050);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FriendshipRequestResult(0);
  v5[17] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[18] = v13;
  v5[19] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FriendshipRequest(0);
  v5[20] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v5[21] = v15;
  v5[22] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100123DC8, 0, 0);
}

uint64_t sub_100123DC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[20];
  v3 = v0[3];
  v2 = v0[4];
  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100004EA8(&qword_100264058, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipRequest, (uint64_t)&protocol conformance descriptor for FriendshipRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v1, v3, v2, v1, v6);
  v7 = v0[5];
  swift_release(v5);
  return swift_task_switch(sub_100123EA0, v7, 0);
}

uint64_t sub_100123EA0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 184) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 40) + 112);
  return swift_task_switch(sub_100123EE4, 0, 0);
}

uint64_t sub_100123EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD, unint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_QWORD *)(v0 + 184))
  {
    v1 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.sendFriendshipInvite(_:)[1]);
    *(_QWORD *)(v0 + 192) = v4;
    *v4 = v0;
    v4[1] = sub_100124038;
    return dispatch thunk of FriendshipProtocol.sendFriendshipInvite(_:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 176), v2, v3);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(v9, 1, 1, *(_QWORD *)(v0 + 136));
    sub_1000087A0(v9, &qword_100264050);
    v11 = sub_10006F520();
    v12 = swift_allocError(&type metadata for FriendshipServiceError, v11, 0, 0);
    *v13 = 0;
    v10(0, 0xF000000000000000, v12);
    swift_errorRelease(v12);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v14 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100124038()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 184));
  if (v0)
    v4 = sub_100124434;
  else
    v4 = sub_1001240A4;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001240A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, unint64_t, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v4, v5);
  v6 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = PropertyListEncoder.init()();
  v8 = sub_100004EA8(&qword_100264060, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipRequestResult, (uint64_t)&protocol conformance descriptor for FriendshipRequestResult);
  v9 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v2, v5, v8);
  if (v1)
  {
    v12 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 144);
    swift_release(v7);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    v17 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 208) = v1;
    return swift_task_switch(sub_100124330, v17, 0);
  }
  else
  {
    v19 = v9;
    v20 = v10;
    swift_release(v7);
    if (qword_10025F988 != -1)
      swift_once(&qword_10025F988, sub_100139A94);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100037A9C(v21, (uint64_t)qword_10027ADC0);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "FriendshipService+Trampoline sendFriendshipInvite result back to framework", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }
    v26 = *(_QWORD *)(v0 + 168);
    v27 = *(_QWORD *)(v0 + 152);
    v35 = *(_QWORD *)(v0 + 160);
    v36 = *(_QWORD *)(v0 + 176);
    v29 = *(_QWORD *)(v0 + 136);
    v28 = *(_QWORD *)(v0 + 144);
    v30 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 48);

    sub_10001A484(v19, v20);
    v30(v19, v20, 0);
    sub_100037AB4(v19, v20);
    sub_100037AB4(v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v36, v35);
    v31 = *(_QWORD *)(v0 + 152);
    v33 = *(_QWORD *)(v0 + 120);
    v32 = *(_QWORD *)(v0 + 128);
    v34 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100124330()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[26];
  v0[2] = v1;
  v2 = v0[15];
  v3 = v0[13];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[26];
    (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
    swift_errorRetain(v5);
    v6 = v0[26];
  }
  else
  {
    v7 = v0[12];
    v8 = v0[13];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[11] + 104))(v7, enum case for ClientSessionError.Category.friendshipService(_:), v0[10]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[27] = v6;
  return swift_task_switch(sub_100127A30, 0, 0);
}

uint64_t sub_100124434()
{
  _QWORD *v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(v0[21] + 8))(v0[22], v0[20]);
  v1 = v0[5];
  v0[26] = v0[25];
  return swift_task_switch(sub_100124330, v1, 0);
}

uint64_t sub_100124480(uint64_t a1, int a2, void *a3, void *a4)
{
  return sub_10000CC38(a1, a2, a3, a4, (uint64_t)&unk_100253E18, (uint64_t)sub_100121090, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100123C90);
}

uint64_t sub_10012449C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BA58(a1, a2, a3, a4, (uint64_t)&unk_100253B20, (uint64_t)"sendNotNow(toHandle:completion:)", 32, (uint64_t)&unk_100264070);
}

uint64_t sub_1001244BC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = swift_isaMask;
  v5[8] = *a3;
  v5[9] = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  v5[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[11] = v8;
  v5[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  v5[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[14] = v10;
  v5[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_100264050);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FriendshipRequestResult(0);
  v5[17] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[18] = v13;
  v5[19] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FriendshipRequest(0);
  v5[20] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v5[21] = v15;
  v5[22] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001245D4, 0, 0);
}

uint64_t sub_1001245D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[20];
  v3 = v0[3];
  v2 = v0[4];
  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100004EA8(&qword_100264058, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipRequest, (uint64_t)&protocol conformance descriptor for FriendshipRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v1, v3, v2, v1, v6);
  v7 = v0[5];
  swift_release(v5);
  return swift_task_switch(sub_1001246AC, v7, 0);
}

uint64_t sub_1001246AC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 184) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 40) + 112);
  return swift_task_switch(sub_1001246F0, 0, 0);
}

uint64_t sub_1001246F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD, unint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_QWORD *)(v0 + 184))
  {
    v1 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.respondToInviteRequest(_:)[1]);
    *(_QWORD *)(v0 + 192) = v4;
    *v4 = v0;
    v4[1] = sub_100124844;
    return dispatch thunk of FriendshipProtocol.respondToInviteRequest(_:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 176), v2, v3);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(v9, 1, 1, *(_QWORD *)(v0 + 136));
    sub_1000087A0(v9, &qword_100264050);
    v11 = sub_10006F520();
    v12 = swift_allocError(&type metadata for FriendshipServiceError, v11, 0, 0);
    *v13 = 0;
    v10(0, 0xF000000000000000, v12);
    swift_errorRelease(v12);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v14 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100124844()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 184));
  if (v0)
    v4 = sub_100124434;
  else
    v4 = sub_1001248B0;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001248B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, unint64_t, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v4, v5);
  v6 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = PropertyListEncoder.init()();
  v8 = sub_100004EA8(&qword_100264060, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipRequestResult, (uint64_t)&protocol conformance descriptor for FriendshipRequestResult);
  v9 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v2, v5, v8);
  v11 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 152);
  v25 = *(_QWORD *)(v0 + 160);
  v14 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 144);
  if (v1)
  {
    swift_release(v7);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v25);
    v16 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 208) = v1;
    return swift_task_switch(sub_100124330, v16, 0);
  }
  else
  {
    v18 = v9;
    v19 = v10;
    v20 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 48);
    swift_release(v7);
    sub_10001A484(v18, v19);
    v20(v18, v19, 0);
    sub_100037AB4(v18, v19);
    sub_100037AB4(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v25);
    v21 = *(_QWORD *)(v0 + 152);
    v23 = *(_QWORD *)(v0 + 120);
    v22 = *(_QWORD *)(v0 + 128);
    v24 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100124A8C(uint64_t a1, int a2, void *a3, void *a4)
{
  return sub_10000CC38(a1, a2, a3, a4, (uint64_t)&unk_100253DF0, (uint64_t)sub_100121090, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10012449C);
}

uint64_t sub_100124AA8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BA58(a1, a2, a3, a4, (uint64_t)&unk_100253AF8, (uint64_t)"stopSharingMyLocation(request:completion:)", 42, (uint64_t)&unk_100264048);
}

uint64_t sub_100124AC8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = swift_isaMask;
  v5[8] = *a3;
  v5[9] = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  v5[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[11] = v8;
  v5[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  v5[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[14] = v10;
  v5[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_100264050);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FriendshipRequestResult(0);
  v5[17] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[18] = v13;
  v5[19] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FriendshipRequest(0);
  v5[20] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v5[21] = v15;
  v5[22] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100124BE0, 0, 0);
}

uint64_t sub_100124BE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[20];
  v3 = v0[3];
  v2 = v0[4];
  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100004EA8(&qword_100264058, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipRequest, (uint64_t)&protocol conformance descriptor for FriendshipRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v1, v3, v2, v1, v6);
  v7 = v0[5];
  swift_release(v5);
  return swift_task_switch(sub_100124CB8, v7, 0);
}

uint64_t sub_100124CB8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 184) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 40) + 112);
  return swift_task_switch(sub_100124CFC, 0, 0);
}

uint64_t sub_100124CFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD, unint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_QWORD *)(v0 + 184))
  {
    v1 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.stopSharingMyLocation(_:)[1]);
    *(_QWORD *)(v0 + 192) = v4;
    *v4 = v0;
    v4[1] = sub_100124844;
    return dispatch thunk of FriendshipProtocol.stopSharingMyLocation(_:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 176), v2, v3);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(v9, 1, 1, *(_QWORD *)(v0 + 136));
    sub_1000087A0(v9, &qword_100264050);
    v11 = sub_10006F520();
    v12 = swift_allocError(&type metadata for FriendshipServiceError, v11, 0, 0);
    *v13 = 0;
    v10(0, 0xF000000000000000, v12);
    swift_errorRelease(v12);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v14 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100124E50(uint64_t a1, int a2, void *a3, void *a4)
{
  return sub_10000CC38(a1, a2, a3, a4, (uint64_t)&unk_100253DC8, (uint64_t)sub_100121090, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100124AA8);
}

uint64_t sub_100124E6C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BA58(a1, a2, a3, a4, (uint64_t)&unk_100253AD0, (uint64_t)"peerToken(handle:completion:)", 29, (uint64_t)&unk_100264038);
}

uint64_t sub_100124E8C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = swift_isaMask;
  v5[8] = *a3;
  v5[9] = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  v5[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[11] = v8;
  v5[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  v5[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[14] = v10;
  v5[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Handle(0);
  v5[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[17] = v12;
  v5[18] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100124F58, 0, 0);
}

uint64_t sub_100124F58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[16];
  v3 = v0[3];
  v2 = v0[4];
  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100004EA8(&qword_100263778, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v1, v3, v2, v1, v6);
  v7 = v0[5];
  swift_release(v5);
  return swift_task_switch(sub_100125030, v7, 0);
}

uint64_t sub_100125030()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 152) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 40) + 112);
  return swift_task_switch(sub_100125074, 0, 0);
}

uint64_t sub_100125074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(v0 + 152))
  {
    v1 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.peerToken(for:)[1]);
    *(_QWORD *)(v0 + 160) = v4;
    *v4 = v0;
    v4[1] = sub_10012514C;
    return dispatch thunk of FriendshipProtocol.peerToken(for:)(*(_QWORD *)(v0 + 144), v2, v3);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 144);
    v8 = *(_QWORD *)(v0 + 128);
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 48))(0, 0xF000000000000000, 0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = *(_QWORD *)(v0 + 120);
    v10 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10012514C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 160);
  v3[21] = a1;
  v3[22] = v1;
  swift_task_dealloc(v4);
  swift_unknownObjectRelease(v3[19]);
  if (v1)
    v5 = sub_100125494;
  else
    v5 = sub_1001251C0;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001251C0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, unint64_t, _QWORD);
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 168);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 176);
    v3 = NIDiscoveryToken.dataRepresentation.getter();
    v6 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 144);
    v7 = *(_QWORD *)(v0 + 128);
    if (v2)
    {
      (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));

      v8 = *(_QWORD *)(v0 + 40);
      *(_QWORD *)(v0 + 184) = v2;
      return swift_task_switch(sub_100125308, v8, 0);
    }
    v13 = v3;
    v14 = v4;
    v15 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 48);
    sub_10001A484(v3, v4);
    v15(v13, v14, 0);
    sub_100037AB4(v13, v14);

    sub_100037AB4(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 144);
    v12 = *(_QWORD *)(v0 + 128);
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 48))(0, 0xF000000000000000, 0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100125308()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[23];
  v0[2] = v1;
  v2 = v0[15];
  v3 = v0[13];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[23];
    (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
    swift_errorRetain(v5);
    v6 = v0[23];
  }
  else
  {
    v7 = v0[12];
    v8 = v0[13];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[11] + 104))(v7, enum case for ClientSessionError.Category.friendshipService(_:), v0[10]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[24] = v6;
  return swift_task_switch(sub_10012540C, 0, 0);
}

uint64_t sub_10012540C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, unint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 48);
  swift_errorRetain(v1);
  v3(0, 0xF000000000000000, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100125494()
{
  _QWORD *v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(v0[17] + 8))(v0[18], v0[16]);
  v1 = v0[5];
  v0[23] = v0[22];
  return swift_task_switch(sub_100125308, v1, 0);
}

uint64_t sub_1001254E0(uint64_t a1, int a2, void *a3, void *a4)
{
  return sub_10000CC38(a1, a2, a3, a4, (uint64_t)&unk_100253DA0, (uint64_t)sub_100121090, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100124E6C);
}

uint64_t sub_1001254FC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BA58(a1, a2, a3, a4, (uint64_t)&unk_100253AA8, (uint64_t)"removePeerToken(handle:completion:)", 35, (uint64_t)&unk_100264028);
}

uint64_t sub_10012551C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = swift_isaMask;
  v5[7] = *a3;
  v5[8] = v6;
  v7 = type metadata accessor for Handle(0);
  v5[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[10] = v8;
  v5[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100125598, 0, 0);
}

uint64_t sub_100125598()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[9];
  v3 = v0[2];
  v2 = v0[3];
  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100004EA8(&qword_100263778, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v1, v3, v2, v1, v6);
  swift_release(v5);
  return swift_task_switch(sub_100125698, v0[4], 0);
}

uint64_t sub_100125698()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 32) + 112);
  return swift_task_switch(sub_1001256DC, 0, 0);
}

uint64_t sub_1001256DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(v0 + 96))
  {
    v1 = *(_QWORD *)(v0 + 56);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 64)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 64)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.removePeerToken(for:)[1]);
    *(_QWORD *)(v0 + 104) = v4;
    *v4 = v0;
    v4[1] = sub_100125794;
    return dispatch thunk of FriendshipProtocol.removePeerToken(for:)(*(_QWORD *)(v0 + 88), v2, v3);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD))(v0 + 40))(0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100125794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  swift_unknownObjectRelease(v3);
  if (v0)
    v4 = sub_10012585C;
  else
    v4 = sub_100125800;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100125800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  (*(void (**)(_QWORD))(v0 + 40))(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012585C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(void (**)(uint64_t))(v0 + 40);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001258CC(uint64_t a1, int a2, void *a3, void *a4)
{
  return sub_10000CC38(a1, a2, a3, a4, (uint64_t)&unk_100253D78, (uint64_t)sub_10003C588, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1001254FC);
}

uint64_t sub_1001258E8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  type metadata accessor for Transaction(0);
  v7 = swift_allocObject(&unk_100253A80, 48, 7);
  *(_QWORD *)(v7 + 16) = v3;
  *(_BYTE *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a2;
  *(_QWORD *)(v7 + 40) = a3;
  swift_retain(v3);
  swift_retain(a3);
  static Transaction.asyncTask(name:block:)("removePeerToken(handle:completion:)", 35, 2, &unk_100264018, v7);
  return swift_release(v7);
}

uint64_t sub_100125984(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = a4;
  *(_BYTE *)(v4 + 80) = a2;
  *(_QWORD *)(v4 + 16) = a1;
  v5 = swift_isaMask;
  *(_QWORD *)(v4 + 40) = *a1;
  *(_QWORD *)(v4 + 48) = v5;
  return swift_task_switch(sub_1001259BC, a1, 0);
}

uint64_t sub_1001259BC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 16) + 112);
  return swift_task_switch(sub_100125A00, 0, 0);
}

uint64_t sub_100125A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (*(_QWORD *)(v0 + 56))
  {
    v1 = *(_QWORD *)(v0 + 40);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 48)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 48)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.requestOwnerToken(force:)[1]);
    *(_QWORD *)(v0 + 64) = v4;
    *v4 = v0;
    v4[1] = sub_100125A9C;
    return dispatch thunk of FriendshipProtocol.requestOwnerToken(force:)(*(unsigned __int8 *)(v0 + 80), v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 24))(0);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100125A9C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100125B3C;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 56));
    v4 = sub_100125B08;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100125B08()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 24))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100125B3C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(void (**)(uint64_t))(v0 + 24);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100125B9C(uint64_t a1, int a2, char a3, void *aBlock)
{
  void *v6;
  uint64_t v7;

  v6 = _Block_copy(aBlock);
  v7 = swift_allocObject(&unk_100253D50, 24, 7);
  *(_QWORD *)(v7 + 16) = v6;
  swift_retain(a1);
  sub_1001258E8(a3, (uint64_t)sub_10003C588, v7);
  swift_release(a1);
  return swift_release(v7);
}

uint64_t sub_100125C14(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BA58(a1, a2, a3, a4, (uint64_t)&unk_100253A58, (uint64_t)"startRanging(handle:completion:)", 32, (uint64_t)&unk_100264008);
}

uint64_t sub_100125C34(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = swift_isaMask;
  v5[8] = *a3;
  v5[9] = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  v5[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[11] = v8;
  v5[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  v5[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[14] = v10;
  v5[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Handle(0);
  v5[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[17] = v12;
  v5[18] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100125D00, 0, 0);
}

uint64_t sub_100125D00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[16];
  v3 = v0[3];
  v2 = v0[4];
  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100004EA8(&qword_100263778, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v1, v3, v2, v1, v6);
  v7 = v0[5];
  swift_release(v5);
  return swift_task_switch(sub_100125DD8, v7, 0);
}

uint64_t sub_100125DD8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 152) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 40) + 112);
  return swift_task_switch(sub_100125E1C, 0, 0);
}

uint64_t sub_100125E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(v0 + 152))
  {
    v1 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.startRanging(handle:)[1]);
    *(_QWORD *)(v0 + 160) = v4;
    *v4 = v0;
    v4[1] = sub_100125EEC;
    return dispatch thunk of FriendshipProtocol.startRanging(handle:)(*(_QWORD *)(v0 + 144), v2, v3);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 144);
    v8 = *(_QWORD *)(v0 + 128);
    (*(void (**)(_QWORD))(v0 + 48))(0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = *(_QWORD *)(v0 + 120);
    v10 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100125EEC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 152));
  if (v0)
    v4 = sub_100126150;
  else
    v4 = sub_100125F58;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100125F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  (*(void (**)(_QWORD))(v0 + 48))(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100125FCC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[22];
  v0[2] = v1;
  v2 = v0[15];
  v3 = v0[13];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[22];
    (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
    swift_errorRetain(v5);
    v6 = v0[22];
  }
  else
  {
    v7 = v0[12];
    v8 = v0[13];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[11] + 104))(v7, enum case for ClientSessionError.Category.friendshipService(_:), v0[10]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[23] = v6;
  return swift_task_switch(sub_1001260D0, 0, 0);
}

uint64_t sub_1001260D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(void (**)(uint64_t))(v0 + 48);
  swift_errorRetain(v1);
  v3(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100126150()
{
  _QWORD *v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(v0[17] + 8))(v0[18], v0[16]);
  v1 = v0[5];
  v0[22] = v0[21];
  return swift_task_switch(sub_100125FCC, v1, 0);
}

uint64_t sub_10012619C(uint64_t a1, int a2, void *a3, void *a4)
{
  return sub_10000CC38(a1, a2, a3, a4, (uint64_t)&unk_100253D28, (uint64_t)sub_10003C588, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100125C14);
}

uint64_t sub_1001261B8(uint64_t a1, uint64_t a2)
{
  return sub_10000890C(a1, a2, (uint64_t)&unk_100253A30, (uint64_t)"stopRanging(completion:)", 24, (uint64_t)&unk_100263FF8);
}

uint64_t sub_1001261D8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = swift_isaMask;
  v3[6] = *a1;
  v3[7] = v5;
  v6 = type metadata accessor for ClientSessionError.Category(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ClientSessionError(0);
  v3[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[12] = v9;
  v3[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10012627C, a1, 0);
}

uint64_t sub_10012627C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_1001262C0, 0, 0);
}

uint64_t sub_1001262C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.stopRanging()[1]);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_100126368;
    return dispatch thunk of FriendshipProtocol.stopRanging()(v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 32))(0);
    v6 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100126368()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001263D4;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 112));
    v4 = sub_100008630;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001263D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 112));
  return swift_task_switch(sub_100126414, v1, 0);
}

uint64_t sub_100126414()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[16];
  v0[2] = v1;
  v2 = v0[13];
  v3 = v0[11];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[16];
    (*(void (**)(_QWORD, _QWORD))(v0[12] + 8))(v0[13], v0[11]);
    swift_errorRetain(v5);
    v6 = v0[16];
  }
  else
  {
    v7 = v0[10];
    v8 = v0[11];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[9] + 104))(v7, enum case for ClientSessionError.Category.friendshipService(_:), v0[8]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[17] = v6;
  return swift_task_switch(sub_100126518, 0, 0);
}

uint64_t sub_100126518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(void (**)(uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v3(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  v4 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012658C(uint64_t a1, int a2, void *a3)
{
  return sub_100009874(a1, a2, a3, (uint64_t)&unk_100253D00, (uint64_t)sub_10003C588, (void (*)(uint64_t, uint64_t))sub_1001261B8);
}

uint64_t sub_1001265A8(uint64_t a1, uint64_t a2)
{
  return sub_10000890C(a1, a2, (uint64_t)&unk_100253A08, (uint64_t)"stopConfigRangingSession(completion:)", 37, (uint64_t)&unk_100263FE8);
}

uint64_t sub_1001265C8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = swift_isaMask;
  v3[5] = *a1;
  v3[6] = v4;
  return swift_task_switch(sub_1001265FC, a1, 0);
}

uint64_t sub_1001265FC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 16) + 112);
  return swift_task_switch(sub_100126640, 0, 0);
}

uint64_t sub_100126640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (*(_QWORD *)(v0 + 56))
  {
    v1 = *(_QWORD *)(v0 + 40);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 48)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 48)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.stopConfigRangingSession()[1]);
    *(_QWORD *)(v0 + 64) = v4;
    *v4 = v0;
    v4[1] = sub_100125A9C;
    return dispatch thunk of FriendshipProtocol.stopConfigRangingSession()(v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 24))(0);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001266D4(uint64_t a1, int a2, void *a3)
{
  return sub_100009874(a1, a2, a3, (uint64_t)&unk_100253CD8, (uint64_t)sub_10003C588, (void (*)(uint64_t, uint64_t))sub_1001265A8);
}

uint64_t sub_1001266F0(uint64_t a1, uint64_t a2)
{
  return sub_10000890C(a1, a2, (uint64_t)&unk_1002539E0, (uint64_t)"stopRanging(completion:)", 24, (uint64_t)&unk_100263FD8);
}

uint64_t sub_100126710(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = swift_isaMask;
  v3[6] = *a1;
  v3[7] = v5;
  v6 = type metadata accessor for ClientSessionError.Category(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ClientSessionError(0);
  v3[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[12] = v9;
  v3[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001267B4, a1, 0);
}

uint64_t sub_1001267B4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_1001267F8, 0, 0);
}

uint64_t sub_1001267F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.resetTokenDatabase()[1]);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_10000608C;
    return dispatch thunk of FriendshipProtocol.resetTokenDatabase()(v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 32))(0);
    v6 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001268A0(uint64_t a1, int a2, void *a3)
{
  return sub_100009874(a1, a2, a3, (uint64_t)&unk_100253CB0, (uint64_t)sub_10003C588, (void (*)(uint64_t, uint64_t))sub_1001266F0);
}

uint64_t sub_1001268BC(uint64_t a1, uint64_t a2)
{
  return sub_10000890C(a1, a2, (uint64_t)&unk_1002539B8, (uint64_t)"ownerToken(handle:completion:)", 30, (uint64_t)&unk_100263FC8);
}

uint64_t sub_1001268DC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = swift_isaMask;
  v3[6] = *a1;
  v3[7] = v5;
  v6 = type metadata accessor for ClientSessionError.Category(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ClientSessionError(0);
  v3[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[12] = v9;
  v3[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100126980, a1, 0);
}

uint64_t sub_100126980()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_1001269C4, 0, 0);
}

uint64_t sub_1001269C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.ownerToken()[1]);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_100126A74;
    return dispatch thunk of FriendshipProtocol.ownerToken()(v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 32))(0, 0xF000000000000000, 0);
    v6 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100126A74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 120);
  v3[16] = a1;
  v3[17] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100126D50;
  }
  else
  {
    swift_unknownObjectRelease(v3[14]);
    v5 = sub_100126AE8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100126AE8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(uint64_t, unint64_t, _QWORD);
  uint64_t v9;

  v1 = *(void **)(v0 + 128);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 136);
    v3 = NIDiscoveryToken.dataRepresentation.getter();
    if (v2)
    {

      *(_QWORD *)(v0 + 144) = v2;
      return swift_task_switch(sub_100126BD0, *(_QWORD *)(v0 + 24), 0);
    }
    v6 = v3;
    v7 = v4;
    v8 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 32);
    sub_10001A484(v3, v4);
    v8(v6, v7, 0);
    sub_100037AB4(v6, v7);
    sub_100037AB4(v6, v7);

  }
  else
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 32))(0, 0xF000000000000000, 0);
  }
  v9 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100126BD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[18];
  v0[2] = v1;
  v2 = v0[13];
  v3 = v0[11];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[18];
    (*(void (**)(_QWORD, _QWORD))(v0[12] + 8))(v0[13], v0[11]);
    swift_errorRetain(v5);
    v6 = v0[18];
  }
  else
  {
    v7 = v0[10];
    v8 = v0[11];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[9] + 104))(v7, enum case for ClientSessionError.Category.friendshipService(_:), v0[8]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[19] = v6;
  return swift_task_switch(sub_100126CD4, 0, 0);
}

uint64_t sub_100126CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, unint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v3(0, 0xF000000000000000, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  v4 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100126D50()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[14]);
  v0[18] = v0[17];
  return swift_task_switch(sub_100126BD0, v0[3], 0);
}

uint64_t sub_100126D94(uint64_t a1, int a2, void *a3)
{
  return sub_100009874(a1, a2, a3, (uint64_t)&unk_100253C88, (uint64_t)sub_100121048, (void (*)(uint64_t, uint64_t))sub_1001268BC);
}

uint64_t sub_100126DB0(uint64_t a1, uint64_t a2)
{
  return sub_10000890C(a1, a2, (uint64_t)&unk_100253990, (uint64_t)"startOwnerRanging(handle:completion:)", 37, (uint64_t)&unk_100263FB0);
}

uint64_t sub_100126DD0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = swift_isaMask;
  v3[6] = *a1;
  v3[7] = v5;
  v6 = type metadata accessor for ClientSessionError.Category(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ClientSessionError(0);
  v3[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[12] = v9;
  v3[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100126E74, a1, 0);
}

uint64_t sub_100126E74()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_100126EB8, 0, 0);
}

uint64_t sub_100126EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.startOwnerRanging()[1]);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_10000608C;
    return dispatch thunk of FriendshipProtocol.startOwnerRanging()(v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 32))(0);
    v6 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100126F60(uint64_t a1, int a2, void *a3)
{
  return sub_100009874(a1, a2, a3, (uint64_t)&unk_100253C60, (uint64_t)sub_10003C58C, (void (*)(uint64_t, uint64_t))sub_100126DB0);
}

void sub_100126F7C()
{
  sub_100120B80();
}

uint64_t _s10TrampolineCMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100121050(a1, a2, a3, a4, (uint64_t)&_s10TrampolineCMn);
}

uint64_t sub_100126FA0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (_QWORD *)v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100263FAC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003BF7C;
  return sub_100126DD0(v2, v3, v4);
}

uint64_t sub_100127004()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (_QWORD *)v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100263FC4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003BF7C;
  return sub_1001268DC(v2, v3, v4);
}

uint64_t sub_100127068()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (_QWORD *)v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100263FD4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003BF7C;
  return sub_100126710(v2, v3, v4);
}

uint64_t sub_1001270CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_100263FE4);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  v5 = swift_isaMask;
  *(_QWORD *)(v3 + 40) = *(_QWORD *)v4;
  *(_QWORD *)(v3 + 48) = v5;
  return swift_task_switch(sub_1001265FC, v4, 0);
}

uint64_t sub_10012714C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (_QWORD *)v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100263FF4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003BF7C;
  return sub_1001261D8(v2, v3, v4);
}

uint64_t sub_1001271B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (_QWORD *)v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_100264004);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_100125C34(v2, v3, v4, v5, v6);
}

uint64_t sub_100127224()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100127250()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v2 = *(_QWORD **)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = swift_task_alloc(dword_100264014);
  v5 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10003BF7C;
  *(_OWORD *)(v4 + 24) = v5;
  *(_BYTE *)(v4 + 80) = v3;
  *(_QWORD *)(v4 + 16) = v2;
  v6 = swift_isaMask;
  *(_QWORD *)(v4 + 40) = *v2;
  *(_QWORD *)(v4 + 48) = v6;
  return swift_task_switch(sub_1001259BC, v2, 0);
}

uint64_t sub_1001272E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (_QWORD *)v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_100264024);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_10012551C(v2, v3, v4, v5, v6);
}

uint64_t sub_100127358()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (_QWORD *)v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_100264034);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_100124E8C(v2, v3, v4, v5, v6);
}

uint64_t sub_1001273D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (_QWORD *)v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_100264044);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_100124AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_100127448()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (_QWORD *)v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_10026406C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_1001244BC(v2, v3, v4, v5, v6);
}

uint64_t sub_1001274C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (_QWORD *)v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_10026407C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_100123CB0(v2, v3, v4, v5, v6);
}

uint64_t sub_100127538()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (_QWORD *)v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_10026408C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_1000087DC;
  return sub_100123408(v2, v3, v4, v5, v6);
}

uint64_t sub_1001275AC()
{
  _QWORD *v0;

  sub_100037AB4(v0[2], v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001275E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (_QWORD *)v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = v0[7];
  v8 = v0[8];
  v9 = (_QWORD *)swift_task_alloc(dword_10026409C);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_10003BF7C;
  return sub_100122C68(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100127670()
{
  _QWORD *v0;

  sub_100037AB4(v0[2], v0[3]);
  sub_100037AB4(v0[4], v0[5]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001276AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = (_QWORD *)v0[6];
  v7 = v0[7];
  v8 = v0[8];
  v9 = (_QWORD *)swift_task_alloc(dword_1002640AC);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_10003BF7C;
  return sub_100122254(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100127738()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (_QWORD *)v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_1002640BC);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_100121938(v2, v3, v4, v5, v6);
}

unint64_t sub_1001277AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002640D8;
  if (!qword_1002640D8)
  {
    v1 = sub_10003C1FC(&qword_1002640C8);
    sub_100004EA8(&qword_1002640E0, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipState, (uint64_t)&protocol conformance descriptor for FriendshipState);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1002640D8);
  }
  return result;
}

uint64_t sub_10012782C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (_QWORD *)v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_1002640EC);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_100121240(v2, v3, v4, v5, v6);
}

unint64_t sub_1001278A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100264100;
  if (!qword_100264100)
  {
    v1 = sub_10003C1FC(&qword_1002640F8);
    sub_100004EA8(&qword_100263758, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100264100);
  }
  return result;
}

unint64_t sub_10012791C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100264110;
  if (!qword_100264110)
  {
    v1 = sub_10003C1FC(&qword_100264108);
    sub_100127980();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100264110);
  }
  return result;
}

unint64_t sub_100127980()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100264118;
  if (!qword_100264118)
  {
    v1 = sub_10003C1FC(&qword_100260908);
    sub_100004EA8(&qword_100264120, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100264118);
  }
  return result;
}

uint64_t sub_100127A00()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100127A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100122AA0(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100127A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_100127AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100127B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100127B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100127B54);
}

uint64_t sub_100127B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100127B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100127B9C);
}

uint64_t sub_100127B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for InitEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_100264190;
  if (!qword_100264190)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InitEndpoint);
  return result;
}

uint64_t sub_100127C18(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for URLComponents(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100127C80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100127CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[13] = a3;
  v4[14] = v3;
  v4[11] = a1;
  v4[12] = a2;
  return swift_task_switch(sub_100127CD4, v3, 0);
}

uint64_t sub_100127CD4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t My;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;

  v1 = (uint64_t *)(v0 + 64);
  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v3 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v3, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) != 0)
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v4 = *(void **)(v0 + 88);
    v5 = type metadata accessor for Logger(0);
    sub_100037A9C(v5, (uint64_t)qword_10027AD50);
    v6 = Logger.logObject.getter(v4);
    v7 = static os_log_type_t.default.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(void **)(v0 + 88);
    if (v8)
    {
      v10 = swift_slowAlloc(32, -1);
      v23 = (_QWORD *)swift_slowAlloc(8, -1);
      v24 = swift_slowAlloc(32, -1);
      v26 = v24;
      *(_DWORD *)v10 = 136446723;
      *v1 = sub_10002BA84(0xD00000000000003DLL, 0x80000001001FFBB0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v10 + 4, v10 + 12);
      *(_WORD *)(v10 + 12) = 2160;
      *(_QWORD *)(v0 + 72) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v10 + 14, v10 + 22);
      *(_WORD *)(v10 + 22) = 2113;
      *(_QWORD *)(v0 + 80) = v9;
      v11 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v10 + 24, v10 + 32);
      *v23 = v9;

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s token: %{private,mask.hash}@", (uint8_t *)v10, 0x20u);
      v12 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v23, 1, v12);
      swift_slowDealloc(v23, -1, -1);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {

    }
    v19 = *(void **)(*(_QWORD *)(v0 + 112) + 128);
    *(_QWORD *)(v0 + 120) = v19;
    if (v19)
    {
      v20 = unk_1002643A4;
      v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1002643A0 + dword_1002643A0);
      v19;
      v21 = (_QWORD *)swift_task_alloc(v20);
      *(_QWORD *)(v0 + 128) = v21;
      *v21 = v0;
      v21[1] = sub_10012813C;
      return v25(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    }
  }
  else
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100037A9C(v13, (uint64_t)qword_10027AD50);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v26 = v18;
      *(_DWORD *)v17 = 136446210;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD00000000000003DLL, 0x80000001001FFBB0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v1, v17 + 4, v17 + 12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s Feature.FindMy.redStripe FF disabled.", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012813C()
{
  uint64_t *v0;
  void *v1;
  uint64_t v3;

  v1 = *(void **)(*v0 + 120);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 128));

  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100128188(uint64_t a1)
{
  return sub_1001281D0(a1, qword_10027AD20, 0xD000000000000010, 0x80000001001F6B50);
}

uint64_t sub_1001281AC(uint64_t a1)
{
  return sub_1001281D0(a1, qword_10027AD38, 0xD00000000000001BLL, 0x80000001001FFC20);
}

uint64_t sub_1001281D0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_100043F10(v7, a2);
  sub_100037A9C(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, a3, a4);
}

uint64_t sub_100128244(uint64_t a1)
{
  return sub_10012828C(a1, qword_10027AD50, &qword_10025F958, (uint64_t)qword_10027AD20, (uint64_t)sub_100128188);
}

uint64_t sub_100128268(uint64_t a1)
{
  return sub_10012828C(a1, qword_10027AD68, &qword_10025F960, (uint64_t)qword_10027AD38, (uint64_t)sub_1001281AC);
}

uint64_t sub_10012828C(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = type metadata accessor for Logger(0);
  sub_100043F10(v9, a2);
  v10 = sub_100037A9C(v9, (uint64_t)a2);
  if (*a3 != -1)
    swift_once(a3, a5);
  v11 = sub_100037A9C(v9, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v10, v11, v9);
}

uint64_t sub_100128324()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 696) = v0;
  return swift_task_switch(sub_10012833C, v0, 0);
}

uint64_t sub_10012833C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;

  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AD50);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "NIRangingService startup()", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 696);

  v7 = objc_allocWithZone((Class)sub_100037A5C(&qword_1002644A0));
  v8 = swift_retain(v6);
  v9 = sub_100136564(v8);
  *(_QWORD *)(v0 + 704) = v9;
  swift_release(v6);
  v10 = *(void **)(v6 + 128);
  *(_QWORD *)(v6 + 128) = v9;
  v11 = v9;

  swift_retain(v6);
  swift_asyncLet_begin(v0 + 16, 0, (char *)&type metadata for () + 8, &unk_1002644B0, v6);
  return swift_asyncLet_get_throwing(v0 + 16, v12, sub_1001284A4, v0 + 656);
}

uint64_t sub_1001284A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  *(_QWORD *)(v3 + 712) = v2;
  if (v2)
    v4 = sub_100128520;
  else
    v4 = sub_1001284CC;
  return swift_asyncLet_finish(v3 + 16, a2, v4, v3 + 656);
}

uint64_t sub_1001284CC()
{
  uint64_t v0;

  return swift_task_switch(sub_1001284E0, *(_QWORD *)(v0 + 696), 0);
}

uint64_t sub_1001284E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 696);

  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100128520()
{
  uint64_t v0;

  return swift_task_switch(sub_100128534, *(_QWORD *)(v0 + 696), 0);
}

uint64_t sub_100128534()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 696);

  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100128574()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10026420C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1001285BC();
}

uint64_t sub_1001285BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 72) = *v0;
  v2 = sub_100037A5C((uint64_t *)&unk_100265180);
  *(_QWORD *)(v1 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10012861C, v0, 0);
}

uint64_t sub_10012861C()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v23;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) == 0)
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100037A9C(v11, (uint64_t)qword_10027AD50);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (!os_log_type_enabled(v13, v14))
      goto LABEL_13;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v23 = v16;
    *(_DWORD *)v15 = 136446210;
    *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD00000000000001CLL, 0x80000001001FFD30, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v15 + 4, v15 + 12);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s Feature.FindMy.redStripe FF disabled.", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    v17 = v16;
    goto LABEL_12;
  }
  if ((sub_1001C30A4() & 1) == 0)
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100037A9C(v18, (uint64_t)qword_10027AD50);
    v13 = Logger.logObject.getter(v19);
    v20 = static os_log_type_t.default.getter(v13);
    if (!os_log_type_enabled(v13, v20))
      goto LABEL_13;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v23 = v21;
    *(_DWORD *)v15 = 136446210;
    *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD00000000000001CLL, 0x80000001001FFD30, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v15 + 4, v15 + 12);
    _os_log_impl((void *)&_mh_execute_header, v13, v20, "%{public}s isFindingCapable == false.", v15, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v17 = v21;
LABEL_12:
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v15, -1, -1);
LABEL_13:

    goto LABEL_14;
  }
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v3, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_1002541B0, 40, 7);
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v4;
  v8 = sub_10005582C(v3, (uint64_t)&unk_100264488, (uint64_t)v7);
  swift_release(v8);
  v6(v3, 1, 1, v5);
  v9 = (_QWORD *)swift_allocObject(&unk_1002541D8, 40, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v4;
  v10 = sub_10005582C(v3, (uint64_t)&unk_100264498, (uint64_t)v9);
  swift_release(v10);
LABEL_14:
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001289E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for DarwinNotification(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[4] = swift_task_alloc(v3);
  v0[5] = swift_task_alloc(v3);
  v4 = sub_100037A5C(&qword_100261618);
  v0[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100261620);
  v0[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[8] = v6;
  v0[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100261628);
  v0[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v0[11] = v8;
  v0[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100128AD0, 0, 0);
}

uint64_t sub_100128AD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AD50);
  *(_QWORD *)(v0 + 104) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Registering listener for Darwin notification: NILocalDeviceStartedInteractingWithTokenNotification", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 112) = v6;
  *v6 = v0;
  v6[1] = sub_100128BD0;
  return daemon.getter();
}

uint64_t sub_100128BD0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = a1;
  swift_task_dealloc(v4);
  v5 = type metadata accessor for Daemon(0);
  *(_QWORD *)(v3 + 128) = v5;
  v6 = sub_100004EA8((unint64_t *)&qword_100261630, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
  return swift_task_switch(sub_100128C70, v7, v8);
}

uint64_t sub_100128C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 136) = Daemon.darwinNotificationHandler.getter();
  swift_release(v1);
  v2 = type metadata accessor for DarwinNotificationHandler(0);
  v3 = sub_100004EA8(&qword_100261638, (uint64_t (*)(uint64_t))&type metadata accessor for DarwinNotificationHandler, (uint64_t)&protocol conformance descriptor for DarwinNotificationHandler);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_100128D04, v4, v5);
}

uint64_t sub_100128D04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  dispatch thunk of DarwinNotificationHandler.asyncStream(name:)(0xD000000000000034, 0x80000001001FFD90);
  swift_release(v1);
  return swift_task_switch(sub_100128D64, 0, 0);
}

uint64_t sub_100128D64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[7];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[18] = v4;
  *v4 = v0;
  v4[1] = sub_100128DF0;
  return AsyncStream.Iterator.next(isolation:)(v0[6], 0, 0, v0[10]);
}

uint64_t sub_100128DF0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_task_switch(sub_100128E44, 0, 0);
}

uint64_t sub_100128E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  _QWORD *v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v4, *(_QWORD *)(v0 + 80));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v1);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9, v1, v2);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v9, v2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v16 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 32);
    v17 = *(_QWORD *)(v0 + 16);
    if (v14)
    {
      v18 = swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v26 = v19;
      *(_DWORD *)v18 = 136315138;
      v20 = sub_100004EA8(&qword_100261658, (uint64_t (*)(uint64_t))&type metadata accessor for DarwinNotification, (uint64_t)&protocol conformance descriptor for DarwinNotification);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      v23 = v22;
      *(_QWORD *)(v18 + 4) = sub_10002BA84(v21, v22, &v26);
      swift_bridgeObjectRelease(v23);
      v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v24(v15, v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Darwin NILocalDeviceStartedInteractingWithToken: %s", (uint8_t *)v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v24(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 16));
    }

    *(_QWORD *)(v0 + 152) = v24;
    v25 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 160) = v25;
    *v25 = v0;
    v25[1] = sub_100129084;
    return daemon.getter();
  }
}

uint64_t sub_100129084(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 160);
  v5 = *v1;
  *(_QWORD *)(*v1 + 168) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 176) = v6;
  v7 = type metadata accessor for NITokenService(0);
  v8 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v9 = sub_100004EA8(&qword_100261000, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA3E8);
  *v6 = v5;
  v6[1] = sub_10012915C;
  return ActorServiceDaemon.getService<A>()(*(_QWORD *)(v3 + 128), v7, v8, v9);
}

uint64_t sub_10012915C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 176);
  v5 = *(_QWORD **)v2;
  v5[23] = a1;
  v5[24] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1001292DC, 0, 0);
  swift_release(v5[21]);
  v7 = (_QWORD *)swift_task_alloc(dword_100263E14);
  v5[25] = v7;
  *v7 = v5;
  v7[1] = sub_100129200;
  return sub_10010B00C();
}

uint64_t sub_100129200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100129474;
  else
    v3 = sub_100129264;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100129264()
{
  uint64_t v0;
  _QWORD *v1;

  swift_release(*(_QWORD *)(v0 + 184));
  (*(void (**)(_QWORD, _QWORD))(v0 + 152))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16));
  v1 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 144) = v1;
  *v1 = v0;
  v1[1] = sub_100128DF0;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 48), 0, 0, *(_QWORD *)(v0 + 80));
}

uint64_t sub_1001292DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 168));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v5 + 4) = v7;
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ERROR: %{public}@", (uint8_t *)v5, 0xCu);
    v8 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  swift_errorRelease(v1);
  (*(void (**)(_QWORD, _QWORD))(v0 + 152))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16));
  v9 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 144) = v9;
  *v9 = v0;
  v9[1] = sub_100128DF0;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 48), 0, 0, *(_QWORD *)(v0 + 80));
}

uint64_t sub_100129474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 184));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v5 + 4) = v7;
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ERROR: %{public}@", (uint8_t *)v5, 0xCu);
    v8 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  swift_errorRelease(v1);
  (*(void (**)(_QWORD, _QWORD))(v0 + 152))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16));
  v9 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 144) = v9;
  *v9 = v0;
  v9[1] = sub_100128DF0;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 48), 0, 0, *(_QWORD *)(v0 + 80));
}

uint64_t sub_10012960C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for DarwinNotification(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[4] = swift_task_alloc(v3);
  v0[5] = swift_task_alloc(v3);
  v4 = sub_100037A5C(&qword_100261618);
  v0[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100261620);
  v0[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[8] = v6;
  v0[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100261628);
  v0[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v0[11] = v8;
  v0[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001296F4, 0, 0);
}

uint64_t sub_1001296F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AD50);
  *(_QWORD *)(v0 + 104) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Registering listener for Darwin notification: NILocalDeviceStoppedInteractingWithTokenNotification", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 112) = v6;
  *v6 = v0;
  v6[1] = sub_1001297F4;
  return daemon.getter();
}

uint64_t sub_1001297F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc(v3);
  v4 = type metadata accessor for Daemon(0);
  v5 = sub_100004EA8((unint64_t *)&qword_100261630, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_100129888, v6, v7);
}

uint64_t sub_100129888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 128) = Daemon.darwinNotificationHandler.getter();
  swift_release(v1);
  v2 = type metadata accessor for DarwinNotificationHandler(0);
  v3 = sub_100004EA8(&qword_100261638, (uint64_t (*)(uint64_t))&type metadata accessor for DarwinNotificationHandler, (uint64_t)&protocol conformance descriptor for DarwinNotificationHandler);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_10012991C, v4, v5);
}

uint64_t sub_10012991C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  dispatch thunk of DarwinNotificationHandler.asyncStream(name:)(0xD000000000000034, 0x80000001001FFD50);
  swift_release(v1);
  return swift_task_switch(sub_10012997C, 0, 0);
}

uint64_t sub_10012997C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[7];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[17] = v4;
  *v4 = v0;
  v4[1] = sub_100129A08;
  return AsyncStream.Iterator.next(isolation:)(v0[6], 0, 0, v0[10]);
}

uint64_t sub_100129A08()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_task_switch(sub_100129A5C, 0, 0);
}

uint64_t sub_100129A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);
  _QWORD *v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v4, *(_QWORD *)(v0 + 80));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v1);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9, v1, v2);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v9, v2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 32);
    v16 = *(_QWORD *)(v0 + 40);
    v17 = *(_QWORD *)(v0 + 16);
    v18 = *(_QWORD *)(v0 + 24);
    if (v14)
    {
      v19 = swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v28 = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = sub_100004EA8(&qword_100261658, (uint64_t (*)(uint64_t))&type metadata accessor for DarwinNotification, (uint64_t)&protocol conformance descriptor for DarwinNotification);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v17, v21);
      v24 = v23;
      *(_QWORD *)(v19 + 4) = sub_10002BA84(v22, v23, &v28);
      swift_bridgeObjectRelease(v24);
      v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v25(v15, v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Darwin NILocalDeviceStoppedInteractingWithToken: %s", (uint8_t *)v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      v25(v16, v17);
    }
    else
    {

      v26 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v26(v15, v17);
      v26(v16, v17);
    }
    v27 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 136) = v27;
    *v27 = v0;
    v27[1] = sub_100129A08;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 48), 0, 0, *(_QWORD *)(v0 + 80));
  }
}

uint64_t sub_100129CCC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[14] = a1;
  v2[15] = v1;
  v3 = type metadata accessor for Date(0);
  v2[16] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[17] = v4;
  v2[18] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100261018);
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DiscoveryToken(0);
  v2[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[21] = v7;
  v2[22] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Handle(0);
  v2[23] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[24] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v10);
  v2[26] = swift_task_alloc(v10);
  return swift_task_switch(sub_100129DB0, v1, 0);
}

uint64_t sub_100129DB0()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) != 0)
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v3 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 208);
    v5 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 192);
    v7 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 216) = sub_100037A9C(v7, (uint64_t)qword_10027AD50);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    *(_QWORD *)(v0 + 224) = v8;
    v9 = v8(v4, v3, v5);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 184);
    if (v12)
    {
      v33 = *(_QWORD *)(v0 + 192);
      v15 = swift_slowAlloc(32, -1);
      v34 = swift_slowAlloc(64, -1);
      v35 = v34;
      *(_DWORD *)v15 = 136446723;
      *(_QWORD *)(v0 + 88) = sub_10002BA84(0xD000000000000011, 0x80000001001FFD10, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2160;
      *(_QWORD *)(v0 + 96) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v15 + 14, v15 + 22);
      *(_WORD *)(v15 + 22) = 2081;
      v16 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
      v19 = v18;
      *(_QWORD *)(v0 + 104) = sub_10002BA84(v17, v18, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v15 + 24, v15 + 32);
      swift_bridgeObjectRelease(v19);
      v20 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v20(v13, v14);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s %{private,mask.hash}s", (uint8_t *)v15, 0x20u);
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 192) + 8);
      v20(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 184));
    }

    *(_QWORD *)(v0 + 232) = v20;
    v32 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 240) = v32;
    *v32 = v0;
    v32[1] = sub_10012A238;
    return daemon.getter();
  }
  else
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100037A9C(v21, (uint64_t)qword_10027AD50);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v35 = v26;
      *(_DWORD *)v25 = 136446210;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD000000000000011, 0x80000001001FFD10, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v25 + 4, v25 + 12);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s Feature.FindMy.redStripe FF disabled.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }

    v27 = *(_QWORD *)(v0 + 200);
    v28 = *(_QWORD *)(v0 + 176);
    v30 = *(_QWORD *)(v0 + 144);
    v29 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10012A238(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 240);
  v5 = *v1;
  *(_QWORD *)(*v1 + 248) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 256) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for NITokenService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100261000, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA3E8);
  *v6 = v5;
  v6[1] = sub_10012A320;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10012A320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 256);
  v3[33] = a1;
  v3[34] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[15];
    v6 = sub_10012A88C;
  }
  else
  {
    v7 = v3[15];
    swift_release(v3[31]);
    v6 = sub_10012A39C;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10012A39C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t **v2;

  static ReferenceClock.now.getter(a1);
  v2 = (uint64_t **)swift_task_alloc(dword_100261A1C);
  v1[35] = (uint64_t)v2;
  *v2 = v1;
  v2[1] = (uint64_t *)sub_10012A3F8;
  return sub_100086DA4(v1[19], v1[14], v1[18]);
}

uint64_t sub_10012A3F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc(v3);
  v5 = v2[17];
  v4 = v2[18];
  v7 = v2 + 15;
  v6 = v2[15];
  (*(void (**)(uint64_t, _QWORD))(v5 + 8))(v4, v7[1]);
  if (v0)
    v8 = sub_10012A900;
  else
    v8 = sub_10012A46C;
  return swift_task_switch(v8, v6, 0);
}

uint64_t sub_10012A46C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void **v18;
  void *v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33[2];

  v1 = *(_QWORD *)(v0 + 152);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 48))(v1, 1, *(_QWORD *)(v0 + 160)) == 1)
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
    v3 = *(_QWORD *)(v0 + 200);
    v4 = *(_QWORD *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 112);
    sub_1000087A0(v1, &qword_100261018);
    v6 = v2(v3, v5, v4);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 200);
    v11 = *(_QWORD *)(v0 + 184);
    if (v9)
    {
      v32 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
      v12 = swift_slowAlloc(32, -1);
      v13 = swift_slowAlloc(64, -1);
      v33[0] = v13;
      *(_DWORD *)v12 = 136446723;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000011, 0x80000001001FFD10, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2160;
      *(_QWORD *)(v0 + 72) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v12 + 14, v12 + 22);
      *(_WORD *)(v12 + 22) = 2081;
      v14 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
      v17 = v16;
      *(_QWORD *)(v0 + 80) = sub_10002BA84(v15, v16, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease(v17);
      v32(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s cannot generate token for %{private,mask.hash}s!", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 232))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    }

    v24 = *(_QWORD *)(v0 + 264);
    v25 = sub_100097FB4();
    v26 = swift_allocError(&type metadata for NITokenService.Error, v25, 0, 0);
    *v27 = 18;
    swift_willThrow(v26);
    swift_release(v24);
    v28 = *(_QWORD *)(v0 + 200);
    v29 = *(_QWORD *)(v0 + 176);
    v31 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = *(void ***)(v0 + 176);
    sub_1000321F4(v1, (uint64_t)v18, type metadata accessor for DiscoveryToken);
    v19 = *v18;
    *(_QWORD *)(v0 + 296) = *v18;
    v20 = dword_100264224;
    v21 = v19;
    v22 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v0 + 304) = v22;
    *v22 = v0;
    v22[1] = sub_10012A79C;
    return sub_10012B32C((uint64_t)v21);
  }
}

uint64_t sub_10012A79C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 304);
  *(_QWORD *)(*v1 + 312) = v0;
  swift_task_dealloc(v3);
  v4 = *(void **)(v2 + 296);
  v5 = *(_QWORD *)(v2 + 120);

  if (v0)
    v6 = sub_10012A974;
  else
    v6 = sub_10012A80C;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10012A80C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 264));
  sub_100024990(v1, type metadata accessor for DiscoveryToken);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012A88C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 248));
  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012A900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 264));
  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012A974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 264));
  sub_100024990(v1, type metadata accessor for DiscoveryToken);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012A9FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[10] = v0;
  v2 = type metadata accessor for Date(0);
  v1[11] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[12] = v3;
  v1[13] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10012AA5C, v0, 0);
}

uint64_t sub_10012AA5C()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) != 0)
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100037A9C(v3, (uint64_t)qword_10027AD50);
    *(_QWORD *)(v0 + 112) = v4;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v17 = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v0 + 72) = sub_10002BA84(0xD000000000000013, 0x80000001001FD3D0, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v9 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 120) = v9;
    *v9 = v0;
    v9[1] = sub_10012ADC0;
    return daemon.getter();
  }
  else
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100037A9C(v11, (uint64_t)qword_10027AD50);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v17 = v16;
      *(_DWORD *)v15 = 136446210;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD000000000000013, 0x80000001001FD3D0, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s Feature.FindMy.redStripe FF disabled.", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10012ADC0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 120);
  v5 = *v1;
  *(_QWORD *)(*v1 + 128) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 136) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for NITokenService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100261000, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA3E8);
  *v6 = v5;
  v6[1] = sub_10012AEA8;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10012AEA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 136);
  v3[18] = a1;
  v3[19] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[10];
    v6 = sub_10012B270;
  }
  else
  {
    v7 = v3[10];
    swift_release(v3[16]);
    v6 = sub_10012AF24;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10012AF24()
{
  uint64_t v0;
  _QWORD *v1;

  static ReferenceClock.now.getter();
  v1 = (_QWORD *)swift_task_alloc(dword_100261A04);
  *(_QWORD *)(v0 + 160) = v1;
  *v1 = v0;
  v1[1] = sub_10012AF7C;
  return sub_100086E80();
}

uint64_t sub_10012AF7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 160);
  v3[21] = a1;
  v3[22] = v1;
  swift_task_dealloc(v4);
  v6 = v3[12];
  v5 = v3[13];
  v8 = v3 + 10;
  v7 = v3[10];
  (*(void (**)(uint64_t, _QWORD))(v6 + 8))(v5, v8[1]);
  if (v1)
    v9 = sub_10012B2AC;
  else
    v9 = sub_10012AFF8;
  return swift_task_switch(v9, v7, 0);
}

uint64_t sub_10012AFF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(v1 + 168);
  if (v2)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_100264224);
    *(_QWORD *)(v1 + 184) = v3;
    *v3 = v1;
    v3[1] = sub_10012B1C8;
    return sub_10012B32C(v2);
  }
  else
  {
    v5 = Logger.logObject.getter(a1);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v13 = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v1 + 64) = sub_10002BA84(0xD000000000000013, 0x80000001001FD3D0, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s cannot generate owner token!", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v9 = *(_QWORD *)(v1 + 144);
    v10 = sub_100097FB4();
    v11 = swift_allocError(&type metadata for NITokenService.Error, v10, 0, 0);
    *v12 = 18;
    swift_willThrow(v11);
    swift_release(v9);
    swift_task_dealloc(*(_QWORD *)(v1 + 104));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10012B1C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10012B2E8;
  else
    v4 = sub_10012B22C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 80), 0);
}

uint64_t sub_10012B22C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 144));

  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012B270()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012B2AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012B2E8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 144));

  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012B32C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  v3 = sub_100037A5C((uint64_t *)&unk_100265180);
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100037A5C(&qword_100264448);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_100264450);
  v2[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[10] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v2[11] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v9);
  v2[13] = swift_task_alloc(v9);
  v2[14] = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002643C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v10);
  v2[16] = swift_task_alloc(v10);
  return swift_task_switch(sub_10012B43C, v1, 0);
}

uint64_t sub_10012B43C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = sub_100037A5C(&qword_100261EF8);
  *(_QWORD *)(v0 + 136) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  *(_QWORD *)(v0 + 144) = v5;
  v5(v1, 1, 1, v4);
  v6 = sub_1000DD514(0, (unint64_t *)&unk_1002651B0, NINearbyObject_ptr);
  *(_QWORD *)(v0 + 152) = v6;
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v7 + 16) = v1;
  *(_DWORD *)(v0 + 208) = enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:);
  v8 = *(void (**)(uint64_t))(v3 + 104);
  *(_QWORD *)(v0 + 160) = v8;
  v8(v2);
  AsyncStream.init(_:bufferingPolicy:_:)(v6, v2, sub_1001376BC, v7, v6);
  swift_task_dealloc(v7);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 168) = v9;
  *v9 = v0;
  v9[1] = sub_10012B558;
  return daemon.getter();
}

uint64_t sub_10012B558(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 168);
  v5 = *v1;
  *(_QWORD *)(*v1 + 176) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 184) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for FriendshipService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100261ED8, type metadata accessor for FriendshipService, (uint64_t)&unk_1001F6DC8);
  *v6 = v5;
  v6[1] = sub_10012B640;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10012B640(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *v2;
  v6 = *(_QWORD *)(*v2 + 176);
  v5 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(*v2 + 192) = v1;
  swift_task_dealloc(v5);
  swift_release(v6);
  v7 = *(_QWORD *)(v4 + 24);
  if (v1)
  {
    v8 = sub_10012B9CC;
  }
  else
  {
    *(_QWORD *)(v4 + 200) = a1;
    v8 = sub_10012B6BC;
  }
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_10012B6BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  unsigned int v28;
  void (*v29)(uint64_t, _QWORD, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = *(_QWORD *)(v0 + 200);
  v28 = *(_DWORD *)(v0 + 208);
  v29 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 160);
  v30 = *(_QWORD *)(v0 + 152);
  v22 = *(_QWORD *)(v0 + 136);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 144);
  v34 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v31 = *(_QWORD *)(v0 + 96);
  v32 = v1;
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 40);
  v24 = *(_QWORD *)(v0 + 48);
  v37 = *(_QWORD *)(v0 + 32);
  v33 = *(_QWORD *)(v0 + 16);
  v8 = type metadata accessor for TaskPriority(0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v27 = v8;
  v26(v7, 1, 1, v8);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v25(v2, v1, v5);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = (v3 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = v9 | 7;
  v13 = swift_allocObject(&unk_100254160, v12 + 8, v9 | 7);
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v20(v13 + v10, v2, v5);
  *(_QWORD *)(v13 + v11) = v35;
  *(_QWORD *)(v13 + v12) = v37;
  swift_retain(v35);
  v14 = sub_10005582C(v7, (uint64_t)&unk_100264460, v13);
  swift_release(v14);
  v23(v36, 1, 1, v22);
  v15 = swift_task_alloc(32);
  *(_QWORD *)(v15 + 16) = v36;
  v29(v6, v28, v24);
  AsyncStream.init(_:bufferingPolicy:_:)(v30, v6, sub_100137448, v15, v30);
  swift_task_dealloc(v15);
  v26(v7, 1, 1, v27);
  v25(v31, v2, v5);
  v16 = swift_allocObject(&unk_100254188, v12 + 8, v21);
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  v20(v16 + v10, v31, v5);
  *(_QWORD *)(v16 + v11) = v35;
  *(_QWORD *)(v16 + v12) = v37;
  swift_retain(v35);
  v17 = sub_10005582C(v7, (uint64_t)&unk_100264470, v16);
  swift_release(v17);
  sub_100171CF4(v33, v34, v36);
  swift_release(v35);
  v18 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v18(v2, v5);
  v18(v32, v5);
  sub_1000087A0(v36, &qword_1002643C0);
  sub_1000087A0(v34, &qword_1002643C0);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v32);
  swift_task_dealloc(v2);
  swift_task_dealloc(v31);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012B9CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(v3, *(_QWORD *)(v0 + 72));
  sub_1000087A0(v2, &qword_1002643C0);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012BA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = a5;
  v6 = sub_100037A5C(&qword_100264478);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10012BAE0, 0, 0);
}

uint64_t sub_10012BAE0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_100037A5C(&qword_100264450);
  AsyncStream.makeAsyncIterator()(v1);
  v0[10] = 0;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[11] = v2;
  *v2 = v0;
  v2[1] = sub_10012BB6C;
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v0[7]);
}

uint64_t sub_10012BB6C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_10012BBC0, 0, 0);
}

uint64_t sub_10012BBC0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 96) = v2;
  if (!v2)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 8))(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 56));
LABEL_13:
    swift_task_dealloc(*(_QWORD *)(v1 + 72));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v3 = *(_QWORD *)(v1 + 80);
  static Task<>.checkCancellation()(a1);
  *(_QWORD *)(v1 + 104) = v3;
  if (v3)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 8))(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 56));

    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v4 = type metadata accessor for Logger(0);
    sub_100037A9C(v4, (uint64_t)qword_10027AD50);
    swift_errorRetain(v3);
    v5 = swift_errorRetain(v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v23 = v9;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v1 + 24) = v3;
      swift_errorRetain(v3);
      v10 = sub_100037A5C(&qword_100265260);
      v11 = String.init<A>(describing:)(v1 + 24, v10);
      v13 = v12;
      *(_QWORD *)(v1 + 32) = sub_10002BA84(v11, v12, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Discover stream error: %{public}s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(v3);
    }
    else
    {
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
    goto LABEL_13;
  }
  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v14 = type metadata accessor for Logger(0);
  sub_100037A9C(v14, (uint64_t)qword_10027AD50);
  v15 = v2;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v19 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v18 = 141558275;
    *(_QWORD *)(v18 + 4) = 1752392040;
    *(_WORD *)(v18 + 12) = 2113;
    *(_QWORD *)(v18 + 14) = v15;
    *v19 = v2;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "discoverStream: %{private,mask.hash}@", (uint8_t *)v18, 0x16u);
    v20 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v19, 1, v20);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {

  }
  v22 = (_QWORD *)swift_task_alloc(dword_1002649B4);
  *(_QWORD *)(v1 + 112) = v22;
  *v22 = v1;
  v22[1] = sub_10012BF54;
  return sub_100137A54((uint64_t)v15);
}

uint64_t sub_10012BF54()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  return swift_task_switch(sub_10012BFA8, 0, 0);
}

uint64_t sub_10012BFA8()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 104);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = sub_10012BB6C;
  return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, *(_QWORD *)(v0 + 56));
}

uint64_t sub_10012C01C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1000087A0(a2, &qword_1002643C0);
  v4 = sub_100037A5C(&qword_100261EF8);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t sub_10012C090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = a5;
  v6 = sub_100037A5C(&qword_100264478);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10012C0F4, 0, 0);
}

uint64_t sub_10012C0F4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_100037A5C(&qword_100264450);
  AsyncStream.makeAsyncIterator()(v1);
  v0[10] = 0;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[11] = v2;
  *v2 = v0;
  v2[1] = sub_10012C180;
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v0[7]);
}

uint64_t sub_10012C180()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_10012C1D4, 0, 0);
}

uint64_t sub_10012C1D4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 96) = v2;
  if (!v2)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 8))(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 56));
LABEL_13:
    swift_task_dealloc(*(_QWORD *)(v1 + 72));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v3 = *(_QWORD *)(v1 + 80);
  static Task<>.checkCancellation()(a1);
  *(_QWORD *)(v1 + 104) = v3;
  if (v3)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 8))(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 56));

    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v4 = type metadata accessor for Logger(0);
    sub_100037A9C(v4, (uint64_t)qword_10027AD50);
    swift_errorRetain(v3);
    v5 = swift_errorRetain(v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v23 = v9;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v1 + 24) = v3;
      swift_errorRetain(v3);
      v10 = sub_100037A5C(&qword_100265260);
      v11 = String.init<A>(describing:)(v1 + 24, v10);
      v13 = v12;
      *(_QWORD *)(v1 + 32) = sub_10002BA84(v11, v12, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Update stream error: %{public}s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(v3);
    }
    else
    {
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
    goto LABEL_13;
  }
  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v14 = type metadata accessor for Logger(0);
  sub_100037A9C(v14, (uint64_t)qword_10027AD50);
  v15 = v2;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v19 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v18 = 141558275;
    *(_QWORD *)(v18 + 4) = 1752392040;
    *(_WORD *)(v18 + 12) = 2113;
    *(_QWORD *)(v18 + 14) = v15;
    *v19 = v2;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "updateStream: %{private,mask.hash}@", (uint8_t *)v18, 0x16u);
    v20 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v19, 1, v20);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {

  }
  v22 = (_QWORD *)swift_task_alloc(dword_10026498C);
  *(_QWORD *)(v1 + 112) = v22;
  *v22 = v1;
  v22[1] = sub_10012C568;
  return sub_100137DF0((uint64_t)v15);
}

uint64_t sub_10012C568()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  return swift_task_switch(sub_10012C5BC, 0, 0);
}

uint64_t sub_10012C5BC()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 104);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = sub_10012C180;
  return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, *(_QWORD *)(v0 + 56));
}

uint64_t sub_10012C630()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_10012C648, v0, 0);
}

uint64_t sub_10012C648()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) != 0)
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100037A9C(v3, (uint64_t)qword_10027AD50);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v16 = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0x676E6152706F7473, 0xED00002928676E69, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    sub_100171F08();
  }
  else
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100037A9C(v9, (uint64_t)qword_10027AD50);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v16 = v14;
      *(_DWORD *)v13 = 136446210;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0x676E6152706F7473, 0xED00002928676E69, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s Feature.FindMy.redStripe FF disabled.", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012C974()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));

  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated16NIRangingService_discoverContinuation, &qword_1002643C0);
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated16NIRangingService_updateContinuation, &qword_1002643C0);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10012C9D8()
{
  return type metadata accessor for NIRangingService(0);
}

uint64_t type metadata accessor for NIRangingService(uint64_t a1)
{
  uint64_t result;

  result = qword_1002641F0;
  if (!qword_1002641F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NIRangingService);
  return result;
}

void sub_10012CA1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  v4[1] = &unk_1001F6BA0;
  v4[2] = &unk_1001F6BB8;
  sub_10012CAA8(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_10012CAA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100264230)
  {
    v2 = sub_10003C1FC(&qword_100261EF8);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100264230);
  }
}

uint64_t sub_10012CB00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for NIRangingService(0);
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_10012CB64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.startup()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for NIRangingService(0);
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_10012CBC8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100264204);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1000087DC;
  v2[87] = v0;
  return swift_task_switch(sub_10012833C, v0, 0);
}

uint64_t sub_10012CC24()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for NIRangingService(0);
  v1 = sub_100004EA8(&qword_100260FE0, type metadata accessor for NIRangingService, (uint64_t)&unk_1001F6C08);
  return ActorServiceProtocol.description.getter(v0, v1);
}

uint64_t sub_10012CC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v4[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[14] = v6;
  v4[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v4[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[17] = v8;
  v4[18] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Handle(0);
  v4[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[20] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v4[21] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v12);
  v4[23] = swift_task_alloc(v12);
  return swift_task_switch(sub_10012CD3C, 0, 0);
}

uint64_t sub_10012CD3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  void *v15;
  id v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0[22];
  v2 = v0[23];
  v22 = v1;
  v3 = v0[20];
  v4 = v0[21];
  v5 = v0[19];
  v28 = v0[17];
  v29 = v0[16];
  v27 = v0[14];
  v6 = (char *)v0[12];
  v25 = v0[15];
  v26 = v0[13];
  v7 = v0[11];
  v8 = (void *)v0[9];
  v23 = *(void **)&v6[qword_100264F98];
  v24 = v0[18];
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v9(v2, v0[10], v5);
  v9(v1, v7, v5);
  v10 = *(unsigned __int8 *)(v3 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = (v4 + v10 + v11) & ~v10;
  v13 = swift_allocObject(&unk_100253FA8, v12 + v4, v10 | 7);
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)(v13 + 24) = v8;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v14(v13 + v11, v2, v5);
  v14(v13 + v12, v22, v5);
  v0[6] = sub_1001364C0;
  v0[7] = v13;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100133E74;
  v0[5] = &unk_100253FC0;
  v15 = _Block_copy(v0 + 2);
  v16 = v23;
  v17 = v6;
  static DispatchQoS.unspecified.getter(v8);
  v0[8] = _swiftEmptyArrayStorage;
  v18 = sub_100004EA8((unint64_t *)&unk_100265160, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_100037A5C(&qword_1002643A8);
  v20 = sub_10013767C((unint64_t *)&qword_100265170, &qword_1002643A8);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 8, v19, v20, v26, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v25, v15);
  _Block_release(v15);

  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v24, v29);
  swift_release(v0[7]);
  swift_task_dealloc(v2);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_10012CF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[13] = a3;
  v4[14] = v3;
  v4[11] = a1;
  v4[12] = a2;
  v5 = type metadata accessor for Handle(0);
  v4[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[16] = v6;
  v4[17] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10012D000, v3, 0);
}

uint64_t sub_10012D000()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) != 0)
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v3 = *(_QWORD *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 120);
    v7 = type metadata accessor for Logger(0);
    sub_100037A9C(v7, (uint64_t)qword_10027AD50);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v3, v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 136);
    if (v11)
    {
      v30 = *(_QWORD *)(v0 + 128);
      v31 = *(_QWORD *)(v0 + 120);
      v13 = swift_slowAlloc(32, -1);
      v32 = swift_slowAlloc(64, -1);
      v33 = v32;
      *(_DWORD *)v13 = 136446723;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000032, 0x80000001001FFCD0, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2160;
      *(_QWORD *)(v0 + 72) = 1752392040;
      v14 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v13 + 14, v13 + 22);
      *(_WORD *)(v13 + 22) = 2081;
      v15 = Handle.identifier.getter(v14);
      v17 = v16;
      *(_QWORD *)(v0 + 80) = sub_10002BA84(v15, v16, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v13 + 24, v13 + 32);
      swift_bridgeObjectRelease(v17);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v12, v31);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s with handle: %{private,mask.hash}s", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    }

    v24 = *(void **)(*(_QWORD *)(v0 + 112) + 128);
    if (v24)
    {
      v25 = *(_QWORD *)(v0 + 96);
      v26 = *(_QWORD *)(v0 + 104);
      v27 = *(_QWORD *)(v0 + 88);
      v28 = v24;
      sub_10012D414(v27, v25, v26);

    }
  }
  else
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100037A9C(v18, (uint64_t)qword_10027AD50);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v33 = v23;
      *(_DWORD *)v22 = 136446210;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD000000000000032, 0x80000001001FFCD0, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v22 + 4, v22 + 12);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s Feature.FindMy.redStripe FF disabled.", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012D414(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Class isa;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD aBlock[5];
  uint64_t v39;

  v31 = a1;
  v33 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v32 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Handle(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = objc_allocWithZone((Class)NIDiscoveryToken);
  sub_10001A484(a2, a3);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v13, "initWithBytes:", isa);
  sub_100037AB4(a2, a3);

  v16 = *(void **)&v3[qword_100264F98];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v31, v10);
  v17 = *(unsigned __int8 *)(v11 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_100254110, v18 + v12, v17 | 7);
  *(_QWORD *)(v19 + 16) = v3;
  *(_QWORD *)(v19 + 24) = v15;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v19 + v18, (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_10013735C;
  v39 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100133E74;
  aBlock[3] = &unk_100254128;
  v20 = _Block_copy(aBlock);
  v21 = v16;
  v22 = v3;
  v23 = v15;
  static DispatchQoS.unspecified.getter(v23);
  v37 = _swiftEmptyArrayStorage;
  v24 = sub_100004EA8((unint64_t *)&unk_100265160, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_100037A5C(&qword_1002643A8);
  v26 = sub_10013767C((unint64_t *)&qword_100265170, &qword_1002643A8);
  v28 = v32;
  v27 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v25, v26, v33, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v28, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v27);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v35);
  return swift_release(v39);
}

uint64_t sub_10012D6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  v6[22] = a5;
  v6[23] = v5;
  v6[20] = a3;
  v6[21] = a4;
  v6[18] = a1;
  v6[19] = a2;
  v7 = sub_100037A5C(&qword_1002650A0);
  v6[24] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[25] = swift_task_alloc(v8);
  v6[26] = swift_task_alloc(v8);
  return swift_task_switch(sub_10012D760, v5, 0);
}

uint64_t sub_10012D760()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *log;
  uint64_t v55;
  char *v56;
  uint64_t v57;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_10003276C((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  sub_10002BB90((_QWORD *)(v0 + 16));
  if ((My & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 160);
    v3 = *(_QWORD *)(v0 + 168);
    v5 = objc_allocWithZone((Class)NIDiscoveryToken);
    sub_10001A484(v4, v3);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v7 = objc_msgSend(v5, "initWithBytes:", isa);
    *(_QWORD *)(v0 + 216) = v7;
    sub_100037AB4(v4, v3);

    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v8 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 208);
    v11 = *(_QWORD *)(v0 + 176);
    v10 = *(_QWORD *)(v0 + 184);
    v12 = *(_QWORD *)(v0 + 152);
    v13 = type metadata accessor for Logger(0);
    sub_100037A9C(v13, (uint64_t)qword_10027AD50);
    sub_10000E37C(v11, v9, &qword_1002650A0);
    swift_retain(v10);
    sub_10001A484(v8, v12);
    v14 = v7;
    swift_retain(v10);
    sub_10001A484(v8, v12);
    v15 = v14;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 208);
    if (v18)
    {
      v20 = *(_QWORD *)(v0 + 184);
      v52 = *(_QWORD *)(v0 + 200);
      v53 = *(_QWORD *)(v0 + 192);
      log = v16;
      v21 = *(_QWORD *)(v0 + 144);
      v22 = *(_QWORD *)(v0 + 152);
      v51 = *(_QWORD *)(v0 + 208);
      v23 = swift_slowAlloc(82, -1);
      v50 = (_QWORD *)swift_slowAlloc(8, -1);
      v55 = swift_slowAlloc(128, -1);
      v57 = v55;
      *(_DWORD *)v23 = 136448003;
      *(_QWORD *)(v0 + 72) = sub_10002BA84(0xD00000000000002CLL, 0x80000001001FFC40, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v23 + 4, v23 + 12);
      *(_WORD *)(v23 + 12) = 2080;
      v24 = swift_allocObject(&unk_100254048, 32, 7);
      *(_QWORD *)(v24 + 16) = &unk_100264410;
      *(_QWORD *)(v24 + 24) = v20;
      *(_QWORD *)(v0 + 56) = &unk_100264420;
      *(_QWORD *)(v0 + 64) = v24;
      swift_retain(v20);
      v25 = sub_100037A5C(&qword_100264428);
      v26 = String.init<A>(describing:)(v0 + 56, v25);
      v28 = v27;
      *(_QWORD *)(v0 + 88) = sub_10002BA84(v26, v27, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v23 + 14, v23 + 22);
      swift_release_n(v20, 2);
      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v23 + 22) = 2160;
      *(_QWORD *)(v0 + 96) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v23 + 24, v23 + 32);
      *(_WORD *)(v23 + 32) = 2081;
      sub_10001A484(v21, v22);
      v29 = Data.description.getter(v21, v22);
      v31 = v30;
      sub_100037AB4(v21, v22);
      *(_QWORD *)(v0 + 104) = sub_10002BA84(v29, v31, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v23 + 34, v23 + 42);
      swift_bridgeObjectRelease(v31);
      sub_100037AB4(v21, v22);
      sub_100037AB4(v21, v22);
      *(_WORD *)(v23 + 42) = 2160;
      *(_QWORD *)(v0 + 112) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v23 + 44, v23 + 52);
      *(_WORD *)(v23 + 52) = 2113;
      *(_QWORD *)(v0 + 120) = v15;
      v32 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v23 + 54, v23 + 62);
      *v50 = v15;

      *(_WORD *)(v23 + 62) = 2160;
      *(_QWORD *)(v0 + 128) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v23 + 64, v23 + 72);
      *(_WORD *)(v23 + 72) = 2081;
      sub_10000E37C(v51, v52, &qword_1002650A0);
      v33 = String.init<A>(describing:)(v52, v53);
      v35 = v34;
      *(_QWORD *)(v0 + 136) = sub_10002BA84(v33, v34, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v23 + 74, v23 + 82);
      swift_bridgeObjectRelease(v35);
      sub_1000087A0(v51, &qword_1002650A0);
      _os_log_impl((void *)&_mh_execute_header, log, v17, "%{public}s \n\ncached ConfigData: %s\nreceived configData:%{private,mask.hash}s\npeerToken: %{private,mask.hash}@\nreplyHandle: %{private,mask.hash}s", (uint8_t *)v23, 0x52u);
      v36 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v50, 1, v36);
      swift_slowDealloc(v50, -1, -1);
      swift_arrayDestroy(v55, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {
      v44 = *(_QWORD *)(v0 + 144);
      v43 = *(_QWORD *)(v0 + 152);
      swift_release_n(*(_QWORD *)(v0 + 184), 2);
      sub_100037AB4(v44, v43);
      sub_100037AB4(v44, v43);

      sub_1000087A0(v19, &qword_1002650A0);
    }
    v45 = *(void **)(*(_QWORD *)(v0 + 184) + 128);
    *(_QWORD *)(v0 + 224) = v45;
    if (v45)
    {
      v46 = unk_100264404;
      v56 = (char *)&dword_100264400 + dword_100264400;
      v45;
      v47 = (_QWORD *)swift_task_alloc(v46);
      *(_QWORD *)(v0 + 232) = v47;
      *v47 = v0;
      v47[1] = sub_10012DF10;
      return ((uint64_t (*)(_QWORD, _QWORD, id, _QWORD))v56)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), v15, *(_QWORD *)(v0 + 176));
    }

  }
  else
  {
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_100037A9C(v37, (uint64_t)qword_10027AD50);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      v57 = v42;
      *(_DWORD *)v41 = 136446210;
      *(_QWORD *)(v0 + 80) = sub_10002BA84(0xD00000000000002CLL, 0x80000001001FFC40, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v41 + 4, v41 + 12);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "%{public}s Feature.FindMy.redStripe FF disabled.", v41, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }

  }
  v49 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012DF10()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(*(_QWORD *)v0 + 224);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));

  return swift_task_switch(sub_10012DF6C, v2, 0);
}

uint64_t sub_10012DF6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012DFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc(dword_1002643FC);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_10003BF7C;
  return sub_10012D6E8(a1, a2, a3, a4, a5);
}

uint64_t sub_10012E02C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *a2;
  v8 = a2[1];
  v9 = *a3;
  v10 = a3[1];
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)a5 + *a5);
  v11 = (_QWORD *)swift_task_alloc(a5[1]);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_10003BF7C;
  return v13(v7, v8, v9, v10, a4);
}

uint64_t sub_10012E0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v5[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[15] = v7;
  v5[16] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v5[17] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[18] = v9;
  v5[19] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_1002650A0);
  v5[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Handle(0);
  v5[21] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[22] = v12;
  v5[23] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10012E190, 0, 0);
}

uint64_t sub_10012E190()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[21];
  v2 = v0[22];
  v3 = v0[20];
  sub_10000E37C(v0[12], v3, &qword_1002650A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = v0[19];
    v5 = v0[16];
    v27 = v0[18];
    v28 = v0[17];
    v6 = v0[14];
    v26 = v0[15];
    v7 = (char *)v0[13];
    v8 = v0[10];
    v9 = (void *)v0[11];
    v10 = v0[9];
    sub_1000087A0(v0[20], &qword_1002650A0);
    v11 = *(void **)&v7[qword_100264F98];
    v12 = (_QWORD *)swift_allocObject(&unk_100254070, 48, 7);
    v12[2] = v7;
    v12[3] = v9;
    v12[4] = v10;
    v12[5] = v8;
    v0[6] = sub_10013721C;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_100133E74;
    v0[5] = &unk_100254088;
    v13 = _Block_copy(v0 + 2);
    v14 = v11;
    v15 = v7;
    v16 = v9;
    v17 = sub_10001A484(v10, v8);
    static DispatchQoS.unspecified.getter(v17);
    v0[8] = _swiftEmptyArrayStorage;
    v18 = sub_100004EA8((unint64_t *)&unk_100265160, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v19 = sub_100037A5C(&qword_1002643A8);
    v20 = sub_10013767C((unint64_t *)&qword_100265170, &qword_1002643A8);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 8, v19, v20, v6, v18);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v4, v5, v13);
    _Block_release(v13);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v5, v6);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v4, v28);
    swift_release(v0[7]);
    v21 = v0[19];
    v22 = v0[20];
    v23 = v0[16];
    swift_task_dealloc(v0[23]);
    swift_task_dealloc(v22);
    swift_task_dealloc(v21);
    swift_task_dealloc(v23);
    return ((uint64_t (*)(void))v0[1])();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[22] + 32))(v0[23], v0[20], v0[21]);
    v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100264430 + dword_100264430);
    v25 = (_QWORD *)swift_task_alloc(unk_100264434);
    v0[24] = v25;
    *v25 = v0;
    v25[1] = sub_10012E434;
    return v29(v0[11], v0[23], v0[9], v0[10]);
  }
}

uint64_t sub_10012E434()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  return swift_task_switch(sub_10012E488, 0, 0);
}

uint64_t sub_10012E488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012E4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6[14] = a5;
  v6[15] = v5;
  v6[12] = a3;
  v6[13] = a4;
  v6[10] = a1;
  v6[11] = a2;
  v7 = type metadata accessor for UUID(0);
  v6[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[17] = v8;
  v6[18] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v6[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MessagingOptions(0);
  v6[20] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[21] = v11;
  v6[22] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C(&qword_1002601E8);
  v6[23] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[24] = v13;
  v6[25] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FindingConfigEnvelopeV1(0);
  v6[26] = v14;
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[27] = swift_task_alloc(v15);
  v6[28] = swift_task_alloc(v15);
  v6[29] = swift_task_alloc(v15);
  v16 = type metadata accessor for Handle(0);
  v6[30] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v6[31] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[32] = swift_task_alloc(v18);
  v6[33] = swift_task_alloc(v18);
  return swift_task_switch(sub_10012E648, v5, 0);
}

uint64_t sub_10012E648()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v23;

  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v1 = v0[33];
  v2 = v0[30];
  v3 = v0[31];
  v4 = v0[13];
  v5 = type metadata accessor for Logger(0);
  v0[34] = sub_100037A9C(v5, (uint64_t)qword_10027AD50);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[35] = v6;
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[33];
  v12 = v0[30];
  v13 = v0[31];
  if (v10)
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(32, -1);
    v23 = v15;
    *(_DWORD *)v14 = 141558275;
    v0[9] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v16 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    v19 = v18;
    v0[6] = sub_10002BA84(v17, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v19);
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sending config data to handle %{private,mask.hash}s over IDS.", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v0[33], v0[30]);
  }

  v0[36] = v20;
  v21 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[37] = v21;
  *v21 = v0;
  v21[1] = sub_10012E888;
  return daemon.getter();
}

uint64_t sub_10012E888(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 296);
  v5 = *v1;
  *(_QWORD *)(*v1 + 304) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 312) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for IDSTransportServiceFMF();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002600F0, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F2FD8);
  *v6 = v5;
  v6[1] = sub_10012E970;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10012E970(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 312);
  v3[40] = a1;
  v3[41] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[15];
    v6 = sub_10012F524;
  }
  else
  {
    v7 = v3[15];
    swift_release(v3[38]);
    v6 = sub_10012E9EC;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10012E9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  BOOL v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t type;
  uint64_t v65;
  uint64_t v66[2];

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(uint64_t **)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(void **)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 80);
  sub_10001A484(v7, v6);
  v8 = objc_msgSend(v5, "rawToken");
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  sub_10000E37C(v4, (uint64_t)v2 + *(int *)(v3 + 24), &qword_1002650A0);
  *v2 = v7;
  v2[1] = v6;
  v2[2] = v9;
  v2[3] = v11;
  v12 = sub_100025C70((uint64_t)v2, v1, type metadata accessor for FindingConfigEnvelopeV1);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = *(_QWORD *)(v0 + 224);
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 56) = 1752392040;
    v66[0] = v17;
    *(_DWORD *)v16 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2081;
    v18 = sub_100149EE0();
    v20 = v19;
    *(_QWORD *)(v0 + 64) = sub_10002BA84(v18, v19, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease(v20);
    sub_100024990(v15, type metadata accessor for FindingConfigEnvelopeV1);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Sending config data envelope %{private,mask.hash}s over IDS.", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    sub_100024990(*(_QWORD *)(v0 + 224), type metadata accessor for FindingConfigEnvelopeV1);
  }

  v21 = *(_QWORD *)(v0 + 328);
  v22 = *(_QWORD *)(v0 + 232);
  v23 = *(_QWORD *)(v0 + 208);
  v24 = *(_QWORD *)(v0 + 216);
  *(_BYTE *)(v0 + 352) = 4;
  sub_100025C70(v22, v24, type metadata accessor for FindingConfigEnvelopeV1);
  v25 = sub_10008277C();
  v26 = sub_100004EA8(&qword_1002643E8, type metadata accessor for FindingConfigEnvelopeV1, (uint64_t)&unk_1001F7900);
  v27 = sub_100004EA8(&qword_1002643F0, type metadata accessor for FindingConfigEnvelopeV1, (uint64_t)&unk_1001F78D8);
  Message.init<A>(type:version:payload:)(v0 + 352, 1, v24, &type metadata for FriendSharingMessageType, v23, v25, v26, v27);
  if (v21)
  {
    v28 = *(_QWORD *)(v0 + 320);
    sub_100024990(*(_QWORD *)(v0 + 232), type metadata accessor for FindingConfigEnvelopeV1);
    swift_release(v28);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 280))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 240));
    swift_errorRetain(v21);
    v29 = swift_errorRetain(v21);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    v32 = os_log_type_enabled(v30, v31);
    v33 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v34 = *(_QWORD *)(v0 + 256);
    v35 = *(_QWORD *)(v0 + 240);
    if (v32)
    {
      type = v31;
      v36 = swift_slowAlloc(32, -1);
      v65 = swift_slowAlloc(64, -1);
      v66[0] = v65;
      *(_DWORD *)v36 = 141558531;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2081;
      v37 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v35, v37);
      v40 = v39;
      *(_QWORD *)(v0 + 24) = sub_10002BA84(v38, v39, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease(v40);
      v33(v34, v35);
      *(_WORD *)(v36 + 22) = 2082;
      *(_QWORD *)(v0 + 32) = v21;
      swift_errorRetain(v21);
      v41 = sub_100037A5C(&qword_100265260);
      v42 = String.init<A>(describing:)(v0 + 32, v41);
      v44 = v43;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(v42, v43, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v36 + 24, v36 + 32);
      swift_bridgeObjectRelease(v44);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v30, type, "Sending configData to handle %{private,mask.hash}s\nfailed: %{public}s", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      swift_errorRelease(v21);
    }
    else
    {
      swift_errorRelease(v21);
      v33(v34, v35);
      swift_errorRelease(v21);
      swift_errorRelease(v21);

    }
    v51 = *(_QWORD *)(v0 + 256);
    v53 = *(_QWORD *)(v0 + 224);
    v52 = *(_QWORD *)(v0 + 232);
    v54 = *(_QWORD *)(v0 + 216);
    v55 = *(_QWORD *)(v0 + 200);
    v56 = *(_QWORD *)(v0 + 176);
    v58 = *(_QWORD *)(v0 + 144);
    v57 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v45 = sub_100037A5C(&qword_100261990);
    v46 = *(_QWORD *)(type metadata accessor for Destination(0) - 8);
    v47 = swift_allocObject(v45, ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(_QWORD *)(v46 + 72), *(unsigned __int8 *)(v46 + 80) | 7);
    *(_OWORD *)(v47 + 16) = xmmword_1001F35F0;
    v48 = Handle.isPhoneNumber.getter();
    v49 = v48;
    v50 = Handle.identifier.getter(v48);
    if ((v49 & 1) != 0)
      Destination.init(phoneNumber:)(v50);
    else
      Destination.init(email:)(v50);
    v60 = *(_QWORD *)(v0 + 320);
    v61 = *(_QWORD *)(v0 + 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(v61, 1, 1, *(_QWORD *)(v0 + 128));
    v62 = sub_10018C36C((uint64_t)_swiftEmptyArrayStorage);
    v63 = sub_10018C36C((uint64_t)_swiftEmptyArrayStorage);
    MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)(v47, 0, v61, 0x4024000000000000, 0, 0, v62, v63, 0, 0);
    return swift_task_switch(sub_10012F048, v60, 0);
  }
}

uint64_t sub_10012F048()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to InternetMessaging.send(message:messageOptions:)[1]);
  v0[42] = v1;
  *v1 = v0;
  v1[1] = sub_10012F0A8;
  return InternetMessaging.send(message:messageOptions:)(v0[18], v0[25], v0[22]);
}

uint64_t sub_10012F0A8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 344) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[15];
    v5 = sub_10012F204;
  }
  else
  {
    v6 = v2[15];
    (*(void (**)(_QWORD, _QWORD))(v2[17] + 8))(v2[18], v2[16]);
    v5 = sub_10012F120;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10012F120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 320));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100024990(v1, type metadata accessor for FindingConfigEnvelopeV1);
  v8 = *(_QWORD *)(v0 + 256);
  v10 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 200);
  v13 = *(_QWORD *)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012F204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 320));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100024990(v1, type metadata accessor for FindingConfigEnvelopeV1);
  v8 = *(_QWORD *)(v0 + 344);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 280))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 240));
  swift_errorRetain(v8);
  v9 = swift_errorRetain(v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v35 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v12 = *(_QWORD *)(v0 + 256);
    v13 = *(_QWORD *)(v0 + 240);
    v14 = swift_slowAlloc(32, -1);
    v36 = swift_slowAlloc(64, -1);
    v37 = v36;
    *(_DWORD *)v14 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v16, v17, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v18);
    v35(v12, v13);
    *(_WORD *)(v14 + 22) = 2082;
    *(_QWORD *)(v0 + 32) = v8;
    swift_errorRetain(v8);
    v19 = sub_100037A5C(&qword_100265260);
    v20 = String.init<A>(describing:)(v0 + 32, v19);
    v22 = v21;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v20, v21, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease(v22);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Sending configData to handle %{private,mask.hash}s\nfailed: %{public}s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    v23 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v24 = *(_QWORD *)(v0 + 256);
    v25 = *(_QWORD *)(v0 + 240);
    swift_errorRelease(v8);
    v23(v24, v25);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  v26 = *(_QWORD *)(v0 + 256);
  v28 = *(_QWORD *)(v0 + 224);
  v27 = *(_QWORD *)(v0 + 232);
  v29 = *(_QWORD *)(v0 + 216);
  v30 = *(_QWORD *)(v0 + 200);
  v31 = *(_QWORD *)(v0 + 176);
  v33 = *(_QWORD *)(v0 + 144);
  v32 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012F524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;

  swift_release(*(_QWORD *)(v0 + 304));
  v1 = *(_QWORD *)(v0 + 328);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 280))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 240));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v28 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v5 = *(_QWORD *)(v0 + 256);
    v6 = *(_QWORD *)(v0 + 240);
    v7 = swift_slowAlloc(32, -1);
    v29 = swift_slowAlloc(64, -1);
    v30 = v29;
    *(_DWORD *)v7 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    v8 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v11);
    v28(v5, v6);
    *(_WORD *)(v7 + 22) = 2082;
    *(_QWORD *)(v0 + 32) = v1;
    swift_errorRetain(v1);
    v12 = sub_100037A5C(&qword_100265260);
    v13 = String.init<A>(describing:)(v0 + 32, v12);
    v15 = v14;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v13, v14, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v7 + 24, v7 + 32);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending configData to handle %{private,mask.hash}s\nfailed: %{public}s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v17 = *(_QWORD *)(v0 + 256);
    v18 = *(_QWORD *)(v0 + 240);
    swift_errorRelease(v1);
    v16(v17, v18);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v19 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 232);
  v22 = *(_QWORD *)(v0 + 216);
  v23 = *(_QWORD *)(v0 + 200);
  v24 = *(_QWORD *)(v0 + 176);
  v26 = *(_QWORD *)(v0 + 144);
  v25 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012F804(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;

  v2[17] = a1;
  v2[18] = a2;
  v3 = sub_100037A5C(&qword_100261018);
  v2[19] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v4);
  v2[21] = swift_task_alloc(v4);
  v2[22] = swift_task_alloc(v4);
  v5 = sub_100037A5C((uint64_t *)&unk_100262930);
  v2[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v2[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[25] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[26] = swift_task_alloc(v8);
  v2[27] = swift_task_alloc(v8);
  v9 = sub_100037A5C(&qword_100260F80);
  v2[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FriendSharedSecretsRecord(0);
  v2[29] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[30] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[31] = swift_task_alloc(v12);
  v2[32] = swift_task_alloc(v12);
  v13 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v2[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v2[34] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v2[35] = v15;
  v2[36] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Handle(0);
  v2[37] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[38] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[39] = swift_task_alloc(v18);
  v2[40] = swift_task_alloc(v18);
  v2[41] = swift_task_alloc(v18);
  v2[42] = swift_task_alloc(v18);
  v19 = type metadata accessor for Friend(0);
  v2[43] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v2[44] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[45] = swift_task_alloc(v21);
  v2[46] = swift_task_alloc(v21);
  v2[47] = swift_task_alloc(v21);
  v2[48] = swift_task_alloc(v21);
  v22 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260950) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[49] = swift_task_alloc(v22);
  v2[50] = swift_task_alloc(v22);
  v23 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v2[51] = v23;
  *v23 = v2;
  v23[1] = sub_10012FA6C;
  return daemon.getter();
}

uint64_t sub_10012FA6C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 408);
  v5 = *v1;
  *(_QWORD *)(*v1 + 416) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[53] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[54] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[55] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10012FB64;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10012FB64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v4 = *(_QWORD **)v2;
  v4[56] = a1;
  v4[57] = v1;
  swift_task_dealloc(v3);
  if (v1)
    return swift_task_switch(sub_100131C54, 0, 0);
  swift_release(v4[52]);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v4[58] = v6;
  *v6 = v4;
  v6[1] = sub_10012FC00;
  return daemon.getter();
}

uint64_t sub_10012FC00(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 464);
  v5 = *v1;
  *(_QWORD *)(*v1 + 472) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[60] = v6;
  v7 = type metadata accessor for CloudStorageService();
  v8 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_10012FCA8;
  return ActorServiceDaemon.getService<A>()(v3[54], v7, v3[55], v8);
}

uint64_t sub_10012FCA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 480);
  v4 = *(_QWORD **)v2;
  v4[61] = a1;
  v4[62] = v1;
  swift_task_dealloc(v3);
  if (v1)
    return swift_task_switch(sub_10013204C, 0, 0);
  swift_release(v4[59]);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v4[63] = v6;
  *v6 = v4;
  v6[1] = sub_10012FD44;
  return daemon.getter();
}

uint64_t sub_10012FD44(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 504);
  v5 = *v1;
  *(_QWORD *)(*v1 + 512) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[65] = v6;
  v7 = type metadata accessor for NITokenService(0);
  v8 = sub_100004EA8(&qword_100261000, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA3E8);
  *v6 = v5;
  v6[1] = sub_10012FDEC;
  return ActorServiceDaemon.getService<A>()(v3[54], v7, v3[55], v8);
}

uint64_t sub_10012FDEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 520);
  v3[66] = a1;
  v3[67] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100132450;
    v6 = 0;
  }
  else
  {
    v7 = v3[56];
    swift_release(v3[64]);
    v5 = sub_10012FE6C;
    v6 = v7;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_10012FE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 544) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.follower(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 552) = v7;
  *v7 = v0;
  v7[1] = sub_10012FF3C;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_10012FF3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 552);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  *(_QWORD *)(*(_QWORD *)v1 + 560) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10012FFA4, 0, 0);
}

uint64_t sub_10012FFA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  _QWORD *v77;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v106 = v0 + 64;
  v1 = *(_QWORD *)(v0 + 560);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 352);
    v108 = *(_QWORD *)(v0 + 304);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v3 + 16);
    v7 = swift_bridgeObjectRetain(v1);
    while (1)
    {
      v8 = *(_QWORD *)(v0 + 336);
      v9 = *(_QWORD *)(v0 + 296);
      v10 = *(_QWORD *)(v0 + 144);
      v11 = v6(*(_QWORD *)(v0 + 376), v4, *(_QWORD *)(v0 + 344), v7);
      Friend.handle.getter(v11);
      v12 = static Handle.== infix(_:_:)(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v8, v9);
      if ((v12 & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v3 + 8))(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 344));
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 560));
        goto LABEL_6;
      }
    }
    v14 = *(_QWORD *)(v0 + 400);
    v15 = *(_QWORD *)(v0 + 376);
    v16 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 352);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 560));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v14, v15, v16);
    v13 = 0;
  }
  else
  {
LABEL_6:
    v13 = 1;
  }
  v18 = *(_QWORD *)(v0 + 560);
  v20 = *(_QWORD *)(v0 + 392);
  v19 = *(_QWORD *)(v0 + 400);
  v21 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 352);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v19, v13, 1, v21);
  swift_bridgeObjectRelease(v18);
  sub_10000E37C(v19, v20, &qword_100260950);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 392), &qword_100260950);
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v23 = *(_QWORD *)(v0 + 320);
    v24 = *(_QWORD *)(v0 + 296);
    v25 = *(_QWORD *)(v0 + 304);
    v26 = *(_QWORD *)(v0 + 144);
    v27 = type metadata accessor for Logger(0);
    sub_100037A9C(v27, (uint64_t)qword_10027AD50);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v26, v24);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    v31 = os_log_type_enabled(v29, v30);
    v32 = *(_QWORD *)(v0 + 488);
    v33 = *(_QWORD *)(v0 + 448);
    v34 = *(_QWORD *)(v0 + 400);
    v35 = *(_QWORD *)(v0 + 320);
    v36 = *(_QWORD *)(v0 + 296);
    v37 = *(_QWORD *)(v0 + 304);
    if (!v31)
    {
      swift_release(*(_QWORD *)(v0 + 528));
      swift_release(v32);
      swift_release(v33);

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
      v76 = v34;
      goto LABEL_22;
    }
    v101 = *(_QWORD *)(v0 + 528);
    v109 = *(_QWORD *)(v0 + 400);
    v38 = swift_slowAlloc(22, -1);
    v98 = v33;
    v39 = swift_slowAlloc(32, -1);
    v111 = v39;
    *(_DWORD *)v38 = 141558275;
    *(_QWORD *)(v0 + 48) = 1752392040;
    v40 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v38 + 4, v38 + 12);
    *(_WORD *)(v38 + 12) = 2081;
    v41 = Handle.identifier.getter(v40);
    v43 = v42;
    *(_QWORD *)(v0 + 56) = sub_10002BA84(v41, v42, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v106, v38 + 14, v38 + 22);
    swift_bridgeObjectRelease(v43);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Findee has no such follower with peer %{private,mask.hash}s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);
    swift_release(v101);
    swift_release(v32);
    swift_release(v98);

  }
  else
  {
    v44 = *(_QWORD *)(v0 + 328);
    v45 = *(_QWORD *)(v0 + 296);
    v46 = *(_QWORD *)(v0 + 304);
    v47 = *(_QWORD *)(v0 + 272);
    v48 = *(_QWORD *)(v0 + 280);
    v49 = *(_QWORD *)(v0 + 264);
    v50 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 32))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 344));
    v51 = Friend.handle.getter(v50);
    Handle.peerID.getter(v51);
    v52 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    *(_QWORD *)(v0 + 568) = v52;
    v52(v44, v45);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v49, 1, v47) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 32))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
      v77 = (_QWORD *)swift_task_alloc(dword_1002670BC);
      *(_QWORD *)(v0 + 576) = v77;
      *v77 = v0;
      v77[1] = sub_1001307E8;
      return sub_1001CA618(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 288));
    }
    sub_1000087A0(*(_QWORD *)(v0 + 264), (uint64_t *)&unk_1002675F0);
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v53 = *(_QWORD *)(v0 + 384);
    v55 = *(_QWORD *)(v0 + 352);
    v54 = *(_QWORD *)(v0 + 360);
    v56 = *(_QWORD *)(v0 + 344);
    v57 = type metadata accessor for Logger(0);
    sub_100037A9C(v57, (uint64_t)qword_10027AD50);
    v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v54, v53, v56);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter(v59);
    v61 = os_log_type_enabled(v59, v60);
    v62 = *(_QWORD *)(v0 + 488);
    v63 = *(_QWORD *)(v0 + 448);
    v64 = *(_QWORD *)(v0 + 400);
    v65 = *(_QWORD *)(v0 + 384);
    v67 = *(_QWORD *)(v0 + 352);
    v66 = *(_QWORD *)(v0 + 360);
    v68 = *(_QWORD *)(v0 + 344);
    if (!v61)
    {
      swift_release(*(_QWORD *)(v0 + 528));
      swift_release(v62);
      swift_release(v63);

      v79 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
      v79(v66, v68);
      v79(v65, v68);
      v76 = v64;
      goto LABEL_22;
    }
    v104 = *(_QWORD *)(v0 + 448);
    v99 = *(_QWORD *)(v0 + 528);
    v109 = *(_QWORD *)(v0 + 400);
    v69 = swift_slowAlloc(32, -1);
    v102 = v65;
    v70 = swift_slowAlloc(64, -1);
    v111 = v70;
    *(_DWORD *)v69 = 136446723;
    v96 = v62;
    *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000014, 0x80000001001FFCB0, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v106, v0 + 72, v69 + 4, v69 + 12);
    *(_WORD *)(v69 + 12) = 2160;
    *(_QWORD *)(v0 + 72) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v69 + 14, v69 + 22);
    *(_WORD *)(v69 + 22) = 2081;
    v71 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
    v72 = dispatch thunk of CustomStringConvertible.description.getter(v68, v71);
    v74 = v73;
    *(_QWORD *)(v0 + 80) = sub_10002BA84(v72, v73, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v69 + 24, v69 + 32);
    swift_bridgeObjectRelease(v74);
    v75 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v75(v66, v68);
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "%{public}s Missing friendSharedSecretsRecord for %{private,mask.hash}s", (uint8_t *)v69, 0x20u);
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v69, -1, -1);
    swift_release(v99);
    swift_release(v96);
    swift_release(v104);

    v75(v102, v68);
  }
  v76 = v109;
LABEL_22:
  sub_1000087A0(v76, &qword_100260950);
  v80 = *(_QWORD *)(v0 + 136);
  v81 = type metadata accessor for DiscoveryToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v80, 1, 1, v81);
  v82 = *(_QWORD *)(v0 + 392);
  v83 = *(_QWORD *)(v0 + 376);
  v84 = *(_QWORD *)(v0 + 384);
  v86 = *(_QWORD *)(v0 + 360);
  v85 = *(_QWORD *)(v0 + 368);
  v88 = *(_QWORD *)(v0 + 328);
  v87 = *(_QWORD *)(v0 + 336);
  v90 = *(_QWORD *)(v0 + 312);
  v89 = *(_QWORD *)(v0 + 320);
  v91 = *(_QWORD *)(v0 + 288);
  v92 = *(_QWORD *)(v0 + 264);
  v93 = *(_QWORD *)(v0 + 256);
  v94 = *(_QWORD *)(v0 + 248);
  v95 = *(_QWORD *)(v0 + 224);
  v97 = *(_QWORD *)(v0 + 216);
  v100 = *(_QWORD *)(v0 + 208);
  v103 = *(_QWORD *)(v0 + 184);
  v105 = *(_QWORD *)(v0 + 176);
  v107 = *(_QWORD *)(v0 + 168);
  v110 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  swift_task_dealloc(v83);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v97);
  swift_task_dealloc(v100);
  swift_task_dealloc(v103);
  swift_task_dealloc(v105);
  swift_task_dealloc(v107);
  swift_task_dealloc(v110);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001307E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 576);
  *(_QWORD *)(*(_QWORD *)v1 + 584) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100131800;
  else
    v3 = sub_10013084C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10013084C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  void (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t);
  os_log_type_t type;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  os_log_type_t v183;
  NSObject *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194[3];

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 224);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 240) + 48))(v2, 1, v1) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
    sub_1000087A0(v2, &qword_100260F80);
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v3 = *(_QWORD *)(v0 + 384);
    v5 = *(_QWORD *)(v0 + 352);
    v4 = *(_QWORD *)(v0 + 360);
    v6 = *(_QWORD *)(v0 + 344);
    v7 = type metadata accessor for Logger(0);
    sub_100037A9C(v7, (uint64_t)qword_10027AD50);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 488);
    v13 = *(_QWORD *)(v0 + 448);
    v14 = *(_QWORD *)(v0 + 400);
    v15 = *(_QWORD *)(v0 + 384);
    v17 = *(_QWORD *)(v0 + 352);
    v16 = *(_QWORD *)(v0 + 360);
    v18 = *(_QWORD *)(v0 + 344);
    if (v11)
    {
      v179 = *(_QWORD *)(v0 + 488);
      v162 = *(_QWORD *)(v0 + 528);
      v174 = *(_QWORD *)(v0 + 448);
      v19 = swift_slowAlloc(32, -1);
      v157 = swift_slowAlloc(64, -1);
      v194[0] = v157;
      *(_DWORD *)v19 = 136446723;
      v168 = v14;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000014, 0x80000001001FFCB0, v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v19 + 4, v19 + 12);
      *(_WORD *)(v19 + 12) = 2160;
      *(_QWORD *)(v0 + 72) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v19 + 14, v19 + 22);
      *(_WORD *)(v19 + 22) = 2081;
      v20 = sub_100004EA8(&qword_100261AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v18, v20);
      v23 = v22;
      *(_QWORD *)(v0 + 80) = sub_10002BA84(v21, v22, v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v19 + 24, v19 + 32);
      swift_bridgeObjectRelease(v23);
      v24 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v24(v16, v18);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s Missing friendSharedSecretsRecord for %{private,mask.hash}s", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy(v157, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v157, -1, -1);
      swift_slowDealloc(v19, -1, -1);
      swift_release(v162);
      swift_release(v179);
      swift_release(v174);

      v24(v15, v18);
      v25 = v168;
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 528));
      swift_release(v12);
      swift_release(v13);

      v51 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v51(v16, v18);
      v51(v15, v18);
      v25 = v14;
    }
LABEL_16:
    sub_1000087A0(v25, &qword_100260950);
LABEL_17:
    v52 = *(_QWORD *)(v0 + 136);
    v53 = type metadata accessor for DiscoveryToken(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 1, 1, v53);
    goto LABEL_18;
  }
  v26 = *(_QWORD *)(v0 + 256);
  sub_1000321F4(v2, v26, type metadata accessor for FriendSharedSecretsRecord);
  v27 = (uint64_t *)(v26 + *(int *)(v1 + 32));
  v28 = v27[1];
  if (v28 >> 60 == 15)
  {
LABEL_9:
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v33 = *(_QWORD *)(v0 + 248);
    v34 = *(_QWORD *)(v0 + 256);
    v35 = type metadata accessor for Logger(0);
    sub_100037A9C(v35, (uint64_t)qword_10027AD50);
    v36 = sub_100025C70(v34, v33, type metadata accessor for FriendSharedSecretsRecord);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter(v37);
    v39 = os_log_type_enabled(v37, v38);
    v163 = *(_QWORD *)(v0 + 488);
    v40 = *(_QWORD *)(v0 + 400);
    v41 = *(_QWORD *)(v0 + 384);
    v42 = *(_QWORD *)(v0 + 344);
    v185 = *(_QWORD *)(v0 + 288);
    v190 = *(_QWORD *)(v0 + 352);
    v43 = *(_QWORD *)(v0 + 272);
    v180 = *(_QWORD *)(v0 + 280);
    v44 = *(_QWORD *)(v0 + 248);
    v169 = *(_QWORD *)(v0 + 448);
    v175 = *(_QWORD *)(v0 + 256);
    if (v39)
    {
      v145 = *(_QWORD *)(v0 + 528);
      v152 = *(_QWORD *)(v0 + 384);
      v45 = swift_slowAlloc(22, -1);
      log = v37;
      v46 = swift_slowAlloc(64, -1);
      v194[0] = v46;
      *(_DWORD *)v45 = 136446466;
      *(_QWORD *)(v0 + 88) = sub_10002BA84(0xD000000000000014, 0x80000001001FFCB0, v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2082;
      v47 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v48 = dispatch thunk of CustomStringConvertible.description.getter(v43, v47);
      v50 = v49;
      *(_QWORD *)(v0 + 96) = sub_10002BA84(v48, v49, v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v45 + 14, v45 + 22);
      swift_bridgeObjectRelease(v50);
      sub_100024990(v44, type metadata accessor for FriendSharedSecretsRecord);
      _os_log_impl((void *)&_mh_execute_header, log, v38, "%{public}s  No incomingSharedSecret for %{public}s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
      swift_release(v145);
      swift_release(v163);
      swift_release(v169);

      sub_100024990(v175, type metadata accessor for FriendSharedSecretsRecord);
      (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v185, v43);
      (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v152, v42);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 528));
      swift_release(v163);
      swift_release(v169);

      sub_100024990(v44, type metadata accessor for FriendSharedSecretsRecord);
      sub_100024990(v175, type metadata accessor for FriendSharedSecretsRecord);
      (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v185, v43);
      (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v41, v42);
    }
    v25 = v40;
    goto LABEL_16;
  }
  v29 = *v27;
  v30 = *(_QWORD *)(v0 + 192);
  v31 = *(_QWORD *)(v0 + 200);
  v32 = *(_QWORD *)(v0 + 184);
  sub_10000E37C(*(_QWORD *)(v0 + 256) + *(int *)(*(_QWORD *)(v0 + 232) + 36), v32, (uint64_t *)&unk_100262930);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1, v30) == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 184), (uint64_t *)&unk_100262930);
    goto LABEL_9;
  }
  v64 = *(_QWORD *)(v0 + 584);
  v66 = *(char **)(v0 + 208);
  v65 = *(char **)(v0 + 216);
  v67 = *(_QWORD **)(v0 + 176);
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 32))(v65, *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
  sub_10001A484(v29, v28);
  static Date.trustedNow.getter((uint64_t)v66);
  sub_1001D2EE8(v29, v28, v65, v66, v67);
  if (v64)
  {
    v68 = *(_QWORD *)(v0 + 528);
    v69 = *(_QWORD *)(v0 + 488);
    v70 = *(_QWORD *)(v0 + 448);
    v187 = *(_QWORD *)(v0 + 400);
    v192 = v64;
    v171 = *(_QWORD *)(v0 + 352);
    v177 = *(_QWORD *)(v0 + 344);
    v182 = *(_QWORD *)(v0 + 384);
    v154 = *(_QWORD *)(v0 + 280);
    v159 = *(_QWORD *)(v0 + 272);
    v165 = *(_QWORD *)(v0 + 288);
    v71 = *(_QWORD *)(v0 + 256);
    v72 = v29;
    v74 = *(_QWORD *)(v0 + 208);
    v73 = *(_QWORD *)(v0 + 216);
    v76 = *(_QWORD *)(v0 + 192);
    v75 = *(_QWORD *)(v0 + 200);
    sub_100037AF8(v72, v28);
    swift_release(v68);
    swift_release(v69);
    swift_release(v70);
    v77 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
    v77(v74, v76);
    v77(v73, v76);
    sub_100024990(v71, type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v165, v159);
    (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v182, v177);
    sub_1000087A0(v187, &qword_100260950);
    if (qword_10025F968 != -1)
      swift_once(&qword_10025F968, sub_100128244);
    v79 = *(_QWORD *)(v0 + 304);
    v78 = *(_QWORD *)(v0 + 312);
    v80 = *(_QWORD *)(v0 + 296);
    v81 = *(_QWORD *)(v0 + 144);
    v82 = type metadata accessor for Logger(0);
    sub_100037A9C(v82, (uint64_t)qword_10027AD50);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v78, v81, v80);
    swift_errorRetain(v192);
    v83 = swift_errorRetain(v192);
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.error.getter(v84);
    v86 = os_log_type_enabled(v84, v85);
    v88 = *(_QWORD *)(v0 + 304);
    v87 = *(_QWORD *)(v0 + 312);
    v89 = *(_QWORD *)(v0 + 296);
    if (v86)
    {
      v183 = v85;
      v90 = swift_slowAlloc(32, -1);
      v188 = swift_slowAlloc(64, -1);
      v194[0] = v188;
      *(_DWORD *)v90 = 141558531;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v90 + 4, v90 + 12);
      *(_WORD *)(v90 + 12) = 2081;
      v91 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v92 = dispatch thunk of CustomStringConvertible.description.getter(v89, v91);
      v94 = v93;
      *(_QWORD *)(v0 + 24) = sub_10002BA84(v92, v93, v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v90 + 14, v90 + 22);
      swift_bridgeObjectRelease(v94);
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
      *(_WORD *)(v90 + 22) = 2082;
      *(_QWORD *)(v0 + 32) = v192;
      swift_errorRetain(v192);
      v95 = sub_100037A5C(&qword_100265260);
      v96 = String.init<A>(describing:)(v0 + 32, v95);
      v98 = v97;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(v96, v97, v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v90 + 24, v90 + 32);
      swift_bridgeObjectRelease(v98);
      swift_errorRelease(v192);
      swift_errorRelease(v192);
      _os_log_impl((void *)&_mh_execute_header, v84, v183, "Unable to generate discovery token for %{private,mask.hash}s. Error: %{public}s.", (uint8_t *)v90, 0x20u);
      swift_arrayDestroy(v188, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v188, -1, -1);
      swift_slowDealloc(v90, -1, -1);

      swift_errorRelease(v192);
    }
    else
    {
      swift_errorRelease(v192);
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
      swift_errorRelease(v192);
      swift_errorRelease(v192);

    }
    goto LABEL_17;
  }
  v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 200) + 8);
  v193 = v29;
  v189(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v99 = *(_QWORD *)(v0 + 384);
  v100 = *(_QWORD *)(v0 + 368);
  v101 = *(_QWORD *)(v0 + 344);
  v102 = *(_QWORD *)(v0 + 352);
  v104 = *(_QWORD *)(v0 + 168);
  v103 = *(_QWORD *)(v0 + 176);
  v105 = type metadata accessor for Logger(0);
  sub_100037A9C(v105, (uint64_t)qword_10027AD50);
  sub_10000E37C(v103, v104, &qword_100261018);
  v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 16))(v100, v99, v101);
  v107 = Logger.logObject.getter(v106);
  v108 = static os_log_type_t.default.getter(v107);
  v184 = v107;
  if (os_log_type_enabled(v107, v108))
  {
    v134 = *(void (**)(uint64_t, uint64_t))(v0 + 568);
    v139 = *(_QWORD *)(v0 + 528);
    logb = *(os_log_t *)(v0 + 488);
    v147 = *(_QWORD *)(v0 + 448);
    v172 = *(_QWORD *)(v0 + 384);
    v178 = *(_QWORD *)(v0 + 400);
    v109 = *(_QWORD *)(v0 + 336);
    v137 = *(_QWORD *)(v0 + 352);
    v138 = *(_QWORD *)(v0 + 344);
    v132 = *(_QWORD *)(v0 + 368);
    v133 = *(_QWORD *)(v0 + 296);
    v160 = *(_QWORD *)(v0 + 272);
    v166 = *(_QWORD *)(v0 + 288);
    v150 = *(_QWORD *)(v0 + 256);
    v155 = *(_QWORD *)(v0 + 280);
    v140 = *(_QWORD *)(v0 + 192);
    v141 = *(_QWORD *)(v0 + 216);
    v111 = *(_QWORD *)(v0 + 160);
    v110 = *(_QWORD *)(v0 + 168);
    v112 = *(_QWORD *)(v0 + 152);
    type = v108;
    v113 = swift_slowAlloc(42, -1);
    v136 = swift_slowAlloc(64, -1);
    v194[0] = v136;
    *(_DWORD *)v113 = 141558787;
    *(_QWORD *)(v0 + 104) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v113 + 4, v113 + 12);
    *(_WORD *)(v113 + 12) = 2081;
    sub_10000E37C(v110, v111, &qword_100261018);
    v114 = String.init<A>(describing:)(v111, v112);
    v116 = v115;
    *(_QWORD *)(v0 + 112) = sub_10002BA84(v114, v115, v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v113 + 14, v113 + 22);
    swift_bridgeObjectRelease(v116);
    sub_1000087A0(v110, &qword_100261018);
    *(_WORD *)(v113 + 22) = 2160;
    *(_QWORD *)(v0 + 120) = 1752392040;
    v117 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v113 + 24, v113 + 32);
    *(_WORD *)(v113 + 32) = 2081;
    v118 = Friend.handle.getter(v117);
    v119 = Handle.identifier.getter(v118);
    v121 = v120;
    v134(v109, v133);
    *(_QWORD *)(v0 + 128) = sub_10002BA84(v119, v121, v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v113 + 34, v113 + 42);
    swift_bridgeObjectRelease(v121);
    v122 = *(void (**)(uint64_t, uint64_t))(v137 + 8);
    v122(v132, v138);
    _os_log_impl((void *)&_mh_execute_header, v184, type, "Findee found Local discovery token: %{private,mask.hash}s for follower: %{private,mask.hash}s.", (uint8_t *)v113, 0x2Au);
    swift_arrayDestroy(v136, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v136, -1, -1);
    swift_slowDealloc(v113, -1, -1);
    sub_100037AF8(v29, v28);
    swift_release(v139);
    swift_release(logb);
    swift_release(v147);

    v189(v141, v140);
    sub_100024990(v150, type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v166, v160);
    v122(v172, v138);
  }
  else
  {
    v123 = *(_QWORD *)(v0 + 528);
    v124 = *(_QWORD *)(v0 + 488);
    v125 = *(_QWORD *)(v0 + 448);
    v173 = *(_QWORD *)(v0 + 384);
    v178 = *(_QWORD *)(v0 + 400);
    v126 = *(_QWORD *)(v0 + 368);
    v128 = *(_QWORD *)(v0 + 344);
    v127 = *(_QWORD *)(v0 + 352);
    v161 = *(_QWORD *)(v0 + 272);
    v167 = *(_QWORD *)(v0 + 288);
    v151 = *(_QWORD *)(v0 + 256);
    v156 = *(_QWORD *)(v0 + 280);
    v129 = *(_QWORD *)(v0 + 216);
    v148 = *(_QWORD *)(v0 + 192);
    v130 = *(_QWORD *)(v0 + 168);
    sub_100037AF8(v193, v28);
    swift_release(v123);
    swift_release(v124);
    swift_release(v125);

    v131 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
    v131(v126, v128);
    sub_1000087A0(v130, &qword_100261018);
    v189(v129, v148);
    sub_100024990(v151, type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v167, v161);
    v131(v173, v128);
  }
  sub_1000087A0(v178, &qword_100260950);
  sub_10006F6A8(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 136));
LABEL_18:
  v54 = *(_QWORD *)(v0 + 392);
  v55 = *(_QWORD *)(v0 + 376);
  v56 = *(_QWORD *)(v0 + 384);
  v58 = *(_QWORD *)(v0 + 360);
  v57 = *(_QWORD *)(v0 + 368);
  v60 = *(_QWORD *)(v0 + 328);
  v59 = *(_QWORD *)(v0 + 336);
  v62 = *(_QWORD *)(v0 + 312);
  v61 = *(_QWORD *)(v0 + 320);
  loga = *(os_log_t *)(v0 + 288);
  v146 = *(_QWORD *)(v0 + 264);
  v149 = *(_QWORD *)(v0 + 256);
  v153 = *(_QWORD *)(v0 + 248);
  v158 = *(_QWORD *)(v0 + 224);
  v164 = *(_QWORD *)(v0 + 216);
  v170 = *(_QWORD *)(v0 + 208);
  v176 = *(_QWORD *)(v0 + 184);
  v181 = *(_QWORD *)(v0 + 176);
  v186 = *(_QWORD *)(v0 + 168);
  v191 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(loga);
  swift_task_dealloc(v146);
  swift_task_dealloc(v149);
  swift_task_dealloc(v153);
  swift_task_dealloc(v158);
  swift_task_dealloc(v164);
  swift_task_dealloc(v170);
  swift_task_dealloc(v176);
  swift_task_dealloc(v181);
  swift_task_dealloc(v186);
  swift_task_dealloc(v191);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100131800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 288);
  v9 = *(_QWORD *)(v0 + 272);
  swift_release(*(_QWORD *)(v0 + 528));
  swift_release(v1);
  swift_release(v2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_1000087A0(v3, &qword_100260950);
  v10 = *(_QWORD *)(v0 + 584);
  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v12 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 312);
  v13 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 144);
  v15 = type metadata accessor for Logger(0);
  sub_100037A9C(v15, (uint64_t)qword_10027AD50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v14, v13);
  swift_errorRetain(v10);
  v16 = swift_errorRetain(v10);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  v21 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 312);
  v22 = *(_QWORD *)(v0 + 296);
  if (v19)
  {
    type = v18;
    v23 = swift_slowAlloc(32, -1);
    v55 = swift_slowAlloc(64, -1);
    v57 = v55;
    *(_DWORD *)v23 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2081;
    v24 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v22, v24);
    v27 = v26;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v25, v26, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    *(_WORD *)(v23 + 22) = 2082;
    *(_QWORD *)(v0 + 32) = v10;
    swift_errorRetain(v10);
    v28 = sub_100037A5C(&qword_100265260);
    v29 = String.init<A>(describing:)(v0 + 32, v28);
    v31 = v30;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v29, v30, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v23 + 24, v23 + 32);
    swift_bridgeObjectRelease(v31);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v17, type, "Unable to generate discovery token for %{private,mask.hash}s. Error: %{public}s.", (uint8_t *)v23, 0x20u);
    swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    swift_errorRelease(v10);
  }
  else
  {
    swift_errorRelease(v10);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v32 = *(_QWORD *)(v0 + 136);
  v33 = type metadata accessor for DiscoveryToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  v34 = *(_QWORD *)(v0 + 392);
  v35 = *(_QWORD *)(v0 + 376);
  v36 = *(_QWORD *)(v0 + 384);
  v38 = *(_QWORD *)(v0 + 360);
  v37 = *(_QWORD *)(v0 + 368);
  v40 = *(_QWORD *)(v0 + 328);
  v39 = *(_QWORD *)(v0 + 336);
  v42 = *(_QWORD *)(v0 + 312);
  v41 = *(_QWORD *)(v0 + 320);
  v44 = *(_QWORD *)(v0 + 288);
  v45 = *(_QWORD *)(v0 + 264);
  v46 = *(_QWORD *)(v0 + 256);
  v47 = *(_QWORD *)(v0 + 248);
  v48 = *(_QWORD *)(v0 + 224);
  v49 = *(_QWORD *)(v0 + 216);
  v50 = *(_QWORD *)(v0 + 208);
  v51 = *(_QWORD *)(v0 + 184);
  v52 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 168);
  v56 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100131C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  swift_release(*(_QWORD *)(v0 + 416));
  v1 = *(_QWORD *)(v0 + 456);
  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v3 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027AD50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v12 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 312);
  v13 = *(_QWORD *)(v0 + 296);
  if (v10)
  {
    type = v9;
    v14 = swift_slowAlloc(32, -1);
    v46 = swift_slowAlloc(64, -1);
    v48 = v46;
    *(_DWORD *)v14 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v16, v17, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    *(_WORD *)(v14 + 22) = 2082;
    *(_QWORD *)(v0 + 32) = v1;
    swift_errorRetain(v1);
    v19 = sub_100037A5C(&qword_100265260);
    v20 = String.init<A>(describing:)(v0 + 32, v19);
    v22 = v21;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v20, v21, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease(v22);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Unable to generate discovery token for %{private,mask.hash}s. Error: %{public}s.", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v23 = *(_QWORD *)(v0 + 136);
  v24 = type metadata accessor for DiscoveryToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = *(_QWORD *)(v0 + 392);
  v26 = *(_QWORD *)(v0 + 376);
  v27 = *(_QWORD *)(v0 + 384);
  v29 = *(_QWORD *)(v0 + 360);
  v28 = *(_QWORD *)(v0 + 368);
  v31 = *(_QWORD *)(v0 + 328);
  v30 = *(_QWORD *)(v0 + 336);
  v33 = *(_QWORD *)(v0 + 312);
  v32 = *(_QWORD *)(v0 + 320);
  v35 = *(_QWORD *)(v0 + 288);
  v36 = *(_QWORD *)(v0 + 264);
  v37 = *(_QWORD *)(v0 + 256);
  v38 = *(_QWORD *)(v0 + 248);
  v39 = *(_QWORD *)(v0 + 224);
  v40 = *(_QWORD *)(v0 + 216);
  v41 = *(_QWORD *)(v0 + 208);
  v42 = *(_QWORD *)(v0 + 184);
  v43 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 168);
  v47 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013204C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 448);
  swift_release(*(_QWORD *)(v0 + 472));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 496);
  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v4 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 144);
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027AD50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_errorRetain(v2);
  v8 = swift_errorRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v13 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 296);
  if (v11)
  {
    type = v10;
    v15 = swift_slowAlloc(32, -1);
    v47 = swift_slowAlloc(64, -1);
    v49 = v47;
    *(_DWORD *)v15 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v19 = v18;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v17, v18, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v15 + 22) = 2082;
    *(_QWORD *)(v0 + 32) = v2;
    swift_errorRetain(v2);
    v20 = sub_100037A5C(&qword_100265260);
    v21 = String.init<A>(describing:)(v0 + 32, v20);
    v23 = v22;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v21, v22, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease(v23);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "Unable to generate discovery token for %{private,mask.hash}s. Error: %{public}s.", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v24 = *(_QWORD *)(v0 + 136);
  v25 = type metadata accessor for DiscoveryToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = *(_QWORD *)(v0 + 392);
  v27 = *(_QWORD *)(v0 + 376);
  v28 = *(_QWORD *)(v0 + 384);
  v30 = *(_QWORD *)(v0 + 360);
  v29 = *(_QWORD *)(v0 + 368);
  v32 = *(_QWORD *)(v0 + 328);
  v31 = *(_QWORD *)(v0 + 336);
  v34 = *(_QWORD *)(v0 + 312);
  v33 = *(_QWORD *)(v0 + 320);
  v36 = *(_QWORD *)(v0 + 288);
  v37 = *(_QWORD *)(v0 + 264);
  v38 = *(_QWORD *)(v0 + 256);
  v39 = *(_QWORD *)(v0 + 248);
  v40 = *(_QWORD *)(v0 + 224);
  v41 = *(_QWORD *)(v0 + 216);
  v42 = *(_QWORD *)(v0 + 208);
  v43 = *(_QWORD *)(v0 + 184);
  v44 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 168);
  v48 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100132450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 448);
  swift_release(*(_QWORD *)(v0 + 512));
  swift_release(v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 536);
  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v5 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = type metadata accessor for Logger(0);
  sub_100037A9C(v8, (uint64_t)qword_10027AD50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  swift_errorRetain(v3);
  v9 = swift_errorRetain(v3);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v14 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 296);
  if (v12)
  {
    type = v11;
    v16 = swift_slowAlloc(32, -1);
    v48 = swift_slowAlloc(64, -1);
    v50 = v48;
    *(_DWORD *)v16 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2081;
    v17 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    v20 = v19;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v18, v19, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    *(_WORD *)(v16 + 22) = 2082;
    *(_QWORD *)(v0 + 32) = v3;
    swift_errorRetain(v3);
    v21 = sub_100037A5C(&qword_100265260);
    v22 = String.init<A>(describing:)(v0 + 32, v21);
    v24 = v23;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v22, v23, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v16 + 24, v16 + 32);
    swift_bridgeObjectRelease(v24);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "Unable to generate discovery token for %{private,mask.hash}s. Error: %{public}s.", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v25 = *(_QWORD *)(v0 + 136);
  v26 = type metadata accessor for DiscoveryToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = *(_QWORD *)(v0 + 392);
  v28 = *(_QWORD *)(v0 + 376);
  v29 = *(_QWORD *)(v0 + 384);
  v31 = *(_QWORD *)(v0 + 360);
  v30 = *(_QWORD *)(v0 + 368);
  v33 = *(_QWORD *)(v0 + 328);
  v32 = *(_QWORD *)(v0 + 336);
  v35 = *(_QWORD *)(v0 + 312);
  v34 = *(_QWORD *)(v0 + 320);
  v37 = *(_QWORD *)(v0 + 288);
  v38 = *(_QWORD *)(v0 + 264);
  v39 = *(_QWORD *)(v0 + 256);
  v40 = *(_QWORD *)(v0 + 248);
  v41 = *(_QWORD *)(v0 + 224);
  v42 = *(_QWORD *)(v0 + 216);
  v43 = *(_QWORD *)(v0 + 208);
  v44 = *(_QWORD *)(v0 + 184);
  v45 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 168);
  v49 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100132860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[7] = a4;
  v5[8] = a5;
  v5[6] = a1;
  v7 = sub_100037A5C(&qword_100261EF8);
  v5[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[10] = v8;
  v5[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_1002643C0);
  v5[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001328F0, a4, 0);
}

uint64_t sub_1001328F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC13findmylocated16NIRangingService_discoverContinuation;
  swift_beginAccess(v2, v0 + 16, 0, 0);
  sub_10000E37C(v2, v1, &qword_1002643C0);
  return swift_task_switch(sub_1001376DC, 0, 0);
}

uint64_t sub_100132960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[7] = a4;
  v5[8] = a5;
  v5[6] = a1;
  v7 = sub_100037A5C(&qword_100261EF8);
  v5[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[10] = v8;
  v5[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_1002643C0);
  v5[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001329F0, a4, 0);
}

uint64_t sub_1001329F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC13findmylocated16NIRangingService_updateContinuation;
  swift_beginAccess(v2, v0 + 16, 0, 0);
  sub_10000E37C(v2, v1, &qword_1002643C0);
  return swift_task_switch(sub_100132A60, 0, 0);
}

uint64_t sub_100132A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2))
  {
    sub_1000087A0(v1, &qword_1002643C0);
    v4 = 1;
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 88);
    v6 = *(void **)(v0 + 64);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
    sub_1000087A0(v1, &qword_1002643C0);
    *(_QWORD *)(v0 + 40) = v6;
    v7 = v6;
    AsyncStream.Continuation.yield(_:)(v0 + 40, v2);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
    v4 = 0;
  }
  v9 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 48);
  v11 = sub_100037A5C(&qword_1002643C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, v4, 1, v11);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100132B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc(dword_1002643E4);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_10003BF7C;
  return sub_10012E4F0(a1, a2, a3, a4, a5);
}

void sub_100132BF0(uint64_t a1, uint64_t a2)
{
  sub_1001367F0(a2);
}

uint64_t sub_100132BF8(uint64_t a1, void *a2)
{
  return sub_1001369CC(a2);
}

void sub_100132C00(uint64_t a1, uint64_t a2)
{
  sub_100136C30(a2);
}

uint64_t sub_100132C08()
{
  return sub_100004EA8(&qword_100264360, type metadata accessor for NIRangingService, (uint64_t)&unk_1001F6BE0);
}

uint64_t sub_100132C34()
{
  return sub_100004EA8(qword_100264368, type metadata accessor for NIRangingService, (uint64_t)&unk_1001F6C68);
}

void sub_100132C60(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  BOOL v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  os_log_t v49;
  uint64_t v50;
  _BYTE v51[16];

  v11 = sub_100037A5C((uint64_t *)&unk_100265150);
  __chkstk_darwin(v11);
  v13 = ((char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = (int *)type metadata accessor for RangingConfigDataSession(0);
  v15 = *((_QWORD *)v14 - 1);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a5 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    v49 = v13;
    v18 = a4;
    v19 = objc_msgSend(objc_allocWithZone((Class)NISession), "init");
    v48 = v5;
    objc_msgSend(v19, "setDelegate:", v5);
    v20 = a2;
    v21 = a1;
    v22 = (char *)v17 + v14[5];
    v23 = type metadata accessor for Handle(0);
    v24 = v22;
    v25 = v21;
    v26 = v20;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v24, a3, v23);
    sub_10000E37C(v18, (uint64_t)v17 + v14[6], &qword_1002650A0);
    *v17 = v19;
    *(_QWORD *)((char *)v17 + v14[7]) = v20;
    *(_QWORD *)((char *)v17 + v14[8]) = a5;
    *(_QWORD *)((char *)v17 + v14[9]) = v25;
    if (a5 == 2)
    {
      v28 = v49;
      sub_100025C70((uint64_t)v17, (uint64_t)v49, type metadata accessor for RangingConfigDataSession);
      (*(void (**)(os_log_t, _QWORD, uint64_t, int *))(v15 + 56))(v28, 0, 1, v14);
      v29 = qword_100264FA0;
    }
    else
    {
      v27 = a5 == 3;
      v28 = v49;
      if (!v27)
      {
        v38 = qword_10025F970;
        v39 = v19;
        v40 = v26;
        v41 = v25;
        if (v38 != -1)
          swift_once(&qword_10025F970, sub_100128268);
        v42 = type metadata accessor for Logger(0);
        v43 = sub_100037A9C(v42, (uint64_t)qword_10027AD68);
        v44 = Logger.logObject.getter(v43);
        v45 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v44, v45))
        {
          v46 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v46 = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unknow NIFindingRole", v46, 2u);
          swift_slowDealloc(v46, -1, -1);
        }

        goto LABEL_19;
      }
      sub_100025C70((uint64_t)v17, (uint64_t)v49, type metadata accessor for RangingConfigDataSession);
      (*(void (**)(os_log_t, _QWORD, uint64_t, int *))(v15 + 56))(v28, 0, 1, v14);
      v29 = qword_100264FA8;
    }
    v34 = v48 + v29;
    swift_beginAccess(v48 + v29, &v50, 33, 0);
    v35 = v19;
    v36 = v26;
    v37 = v25;
    sub_10013651C((uint64_t)v28, v34);
    swift_endAccess(&v50);
    objc_msgSend(v19, "runWithConfiguration:", v25);

LABEL_19:
    sub_100024990((uint64_t)v17, type metadata accessor for RangingConfigDataSession);
    return;
  }
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_100037A9C(v30, (uint64_t)qword_10027AD68);
  v49 = (os_log_t)Logger.logObject.getter(v31);
  v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v49, v32))
  {
    v33 = swift_slowAlloc(22, -1);
    *(_DWORD *)v33 = 141558275;
    v50 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v33 + 4, v33 + 12);
    *(_WORD *)(v33 + 12) = 2049;
    v50 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v33 + 14, v33 + 22);
    _os_log_impl((void *)&_mh_execute_header, v49, v32, "updateConfigDataSession: unexpected role %{private,mask.hash}ld", (uint8_t *)v33, 0x16u);
    swift_slowDealloc(v33, -1, -1);
  }

}

void sub_1001330A8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  os_log_t v15;
  _BYTE v16[24];
  _BYTE v17[24];

  v3 = sub_100037A5C((uint64_t *)&unk_100265150);
  __chkstk_darwin(v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 2)
    return;
  if (a1 == 3)
  {
    v6 = qword_100264FA8;
    goto LABEL_6;
  }
  if (a1 == 2)
  {
    v6 = qword_100264FA0;
LABEL_6:
    v7 = (id *)(v1 + v6);
    swift_beginAccess(v7, v17, 0, 0);
    v8 = type metadata accessor for RangingConfigDataSession(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      objc_msgSend(*v7, "invalidate");
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
    swift_beginAccess(v7, v16, 33, 0);
    sub_10013651C((uint64_t)v5, (uint64_t)v7);
    swift_endAccess(v16);
    return;
  }
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100037A9C(v10, (uint64_t)qword_10027AD68);
  v15 = (os_log_t)Logger.logObject.getter(v11);
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v12, "Unknow NIFindingRole", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

}

void sub_100133288(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  id v21;
  char v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  _QWORD *v50;
  id v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[24];

  v56 = a4;
  v57 = a3;
  v6 = sub_100037A5C(&qword_1002650A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C((uint64_t *)&unk_100265150);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v53 - v13;
  v15 = type metadata accessor for RangingConfigDataSession(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1 + qword_100264FA0;
  swift_beginAccess(a1 + qword_100264FA0, v60, 0, 0);
  sub_10000E37C(v19, (uint64_t)v14, (uint64_t *)&unk_100265150);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v20(v14, 1, v15) == 1)
  {
    sub_1000087A0((uint64_t)v14, (uint64_t *)&unk_100265150);
LABEL_9:
    sub_10000E37C(v19, (uint64_t)v12, (uint64_t *)&unk_100265150);
    v31 = v20(v12, 1, v15);
    sub_1000087A0((uint64_t)v12, (uint64_t *)&unk_100265150);
    if (v31 != 1)
    {
      sub_100133A0C();
      if (qword_10025F970 != -1)
        swift_once(&qword_10025F970, sub_100128268);
      v32 = type metadata accessor for Logger(0);
      sub_100037A9C(v32, (uint64_t)qword_10027AD68);
      v33 = a2;
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = swift_slowAlloc(32, -1);
        v53 = (_QWORD *)swift_slowAlloc(8, -1);
        v37 = swift_slowAlloc(32, -1);
        v54 = v37;
        *(_DWORD *)v36 = 141558531;
        v58 = 1752392040;
        v59 = v37;
        v55 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v36 + 4, v36 + 12);
        *(_WORD *)(v36 + 12) = 2081;
        v58 = sub_10002BA84(0xD00000000000003DLL, 0x80000001001FFBB0, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v36 + 14, v36 + 22);
        *(_WORD *)(v36 + 22) = 2114;
        v58 = (uint64_t)v33;
        v38 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v36 + 24, v36 + 32);
        v39 = v53;
        *v53 = v33;

        _os_log_impl((void *)&_mh_execute_header, v34, v35, "%{private,mask.hash}s\nreceive finder trigger with new token: %{public}@\nshould stop the previous one", (uint8_t *)v36, 0x20u);
        v40 = sub_100037A5C(&qword_100260658);
        swift_arrayDestroy(v39, 1, v40);
        swift_slowDealloc(v39, -1, -1);
        v41 = v54;
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v36, -1, -1);

      }
      else
      {

      }
    }
    v42 = objc_msgSend(objc_allocWithZone((Class)NIFindingConfiguration), "initWithRole:discoveryToken:preferredUpdateRate:", 2, a2, 2);
    v43 = type metadata accessor for Handle(0);
    v44 = *(_QWORD *)(v43 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v8, v56, v43);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v8, 0, 1, v43);
    sub_100132C60(v42, a2, v57, (uint64_t)v8, 2);
    sub_1000087A0((uint64_t)v8, &qword_1002650A0);
    if (qword_10025F970 != -1)
      swift_once(&qword_10025F970, sub_100128268);
    v45 = type metadata accessor for Logger(0);
    sub_100037A9C(v45, (uint64_t)qword_10027AD68);
    v46 = v42;
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = swift_slowAlloc(22, -1);
      v50 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v49 = 141558275;
      v59 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v49 + 4, v49 + 12);
      *(_WORD *)(v49 + 12) = 2113;
      v59 = (uint64_t)v46;
      v51 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v49 + 14, v49 + 22);
      *v50 = v46;

      _os_log_impl((void *)&_mh_execute_header, v47, v48, "startFinderRangingSession with config %{private,mask.hash}@", (uint8_t *)v49, 0x16u);
      v52 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v50, 1, v52);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);

    }
    else
    {

    }
    return;
  }
  sub_1000321F4((uint64_t)v14, (uint64_t)v18, type metadata accessor for RangingConfigDataSession);
  sub_1000DD514(0, (unint64_t *)&unk_1002676F0, NSObject_ptr);
  v21 = *(id *)&v18[*(int *)(v15 + 28)];
  v22 = static NSObject.== infix(_:_:)();

  if ((v22 & 1) == 0)
  {
    sub_100024990((uint64_t)v18, type metadata accessor for RangingConfigDataSession);
    goto LABEL_9;
  }
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v23 = type metadata accessor for Logger(0);
  sub_100037A9C(v23, (uint64_t)qword_10027AD68);
  v24 = a2;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v27 = 138543362;
    v59 = (uint64_t)v24;
    v29 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v27 + 4, v27 + 12);
    *v28 = v24;

    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Already has Finder additional configData session\nfor token: %{public}@ running", v27, 0xCu);
    v30 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v28, 1, v30);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {

  }
  sub_100024990((uint64_t)v18, type metadata accessor for RangingConfigDataSession);
}

void sub_100133A0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[24];

  v1 = v0;
  v2 = sub_100037A5C((uint64_t *)&unk_100265150);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RangingConfigDataSession(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v31 - v10;
  v12 = v1 + qword_100264FA0;
  swift_beginAccess(v1 + qword_100264FA0, v36, 0, 0);
  sub_10000E37C(v12, (uint64_t)v4, (uint64_t *)&unk_100265150);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000087A0((uint64_t)v4, (uint64_t *)&unk_100265150);
    if (qword_10025F970 != -1)
      swift_once(&qword_10025F970, sub_100128268);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100037A9C(v13, (uint64_t)qword_10027AD68);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v35 = v18;
      *(_DWORD *)v17 = 136446210;
      v34 = sub_10002BA84(0xD000000000000024, 0x80000001001FFBF0, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 4, v17 + 12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s no active finder session", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  else
  {
    sub_1000321F4((uint64_t)v4, (uint64_t)v11, type metadata accessor for RangingConfigDataSession);
    if (qword_10025F970 != -1)
      swift_once(&qword_10025F970, sub_100128268);
    v19 = type metadata accessor for Logger(0);
    sub_100037A9C(v19, (uint64_t)qword_10027AD68);
    v20 = sub_100025C70((uint64_t)v11, (uint64_t)v9, type metadata accessor for RangingConfigDataSession);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(32, -1);
      v33 = v24;
      *(_DWORD *)v23 = 141558275;
      v34 = 1752392040;
      v35 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v23 + 4, v23 + 12);
      *(_WORD *)(v23 + 12) = 2081;
      v32 = v23 + 14;
      v25 = type metadata accessor for Handle(0);
      v26 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v25, v26);
      v29 = v28;
      v34 = sub_10002BA84(v27, v28, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v32, v23 + 22);
      swift_bridgeObjectRelease(v29);
      sub_100024990((uint64_t)v9, type metadata accessor for RangingConfigDataSession);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Finder Stop and clear configData session\nwith peerHandle: %{private,mask.hash}s", (uint8_t *)v23, 0x16u);
      v30 = v33;
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      sub_100024990((uint64_t)v9, type metadata accessor for RangingConfigDataSession);
    }

    sub_1001330A8(*(_QWORD *)&v11[*(int *)(v5 + 32)]);
    sub_100024990((uint64_t)v11, type metadata accessor for RangingConfigDataSession);
  }
}

uint64_t sub_100133E74(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100133EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v5[22] = a4;
  v5[23] = v4;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v5[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[25] = v7;
  v5[26] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v5[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[28] = v9;
  v5[29] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Handle(0);
  v5[30] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[31] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v5[32] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[33] = swift_task_alloc(v13);
  v5[34] = swift_task_alloc(v13);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100261018) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[35] = swift_task_alloc(v14);
  v5[36] = swift_task_alloc(v14);
  v5[37] = swift_task_alloc(v14);
  v5[38] = swift_task_alloc(v14);
  return swift_task_switch(sub_100133FB8, 0, 0);
}

uint64_t sub_100133FB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AD68);
  v0[39] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[18] = sub_10002BA84(0xD00000000000003DLL, 0x80000001001FFC70, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[40] = v7;
  *v7 = v0;
  v7[1] = sub_100134154;
  return daemon.getter();
}

uint64_t sub_100134154(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 320);
  v5 = *v1;
  *(_QWORD *)(*v1 + 328) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 336) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for NITokenService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100261000, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA3E8);
  *v6 = v5;
  v6[1] = sub_10013423C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10013423C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 336);
  v5 = *(_QWORD **)v2;
  v5[43] = a1;
  v5[44] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1001345F8, 0, 0);
  swift_release(v5[41]);
  v7 = (_QWORD *)swift_task_alloc(dword_100263DC4);
  v5[45] = v7;
  *v7 = v5;
  v7[1] = sub_1001342E0;
  return sub_100112F64();
}

uint64_t sub_1001342E0(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_BYTE *)(*(_QWORD *)v1 + 376) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10013433C, 0, 0);
}

void sub_10013433C()
{
  __asm { BR              X10 }
}

uint64_t sub_1001343A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  v1 = v0[43];
  swift_bridgeObjectRelease(0xE800000000000000);
  swift_release(v1);
  type metadata accessor for NIRangingService(0);
  v2 = (uint64_t **)swift_task_alloc(dword_10026443C);
  v0[46] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_10013483C;
  return sub_10012F804(v0[38], v0[20]);
}

uint64_t sub_1001345F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 352);
  swift_release(*(_QWORD *)(v0 + 328));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 352);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v21 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 128) = sub_10002BA84(0xD00000000000003DLL, 0x80000001001FFC70, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 64) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 64, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 72) = sub_10002BA84(v9, v10, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s\nchecking Findee device failed: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 352);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  v13 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 264);
  v16 = *(_QWORD *)(v0 + 272);
  v18 = *(_QWORD *)(v0 + 232);
  v19 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013483C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 368));
  return swift_task_switch(sub_100134890, 0, 0);
}

uint64_t sub_100134890()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  int v4;
  id *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v66;
  void *aBlock;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_type_t v80;
  os_log_t loga;
  NSObject *log;
  uint64_t v83;

  v1 = v0[37];
  sub_10000E37C(v0[38], v1, &qword_100261018);
  v2 = type metadata accessor for DiscoveryToken(0);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48);
  v4 = v3(v1, 1, v2);
  v5 = (id *)v0[37];
  if (v4 == 1)
  {
    sub_1000087A0(v0[37], &qword_100261018);
  }
  else
  {
    v6 = (void *)v0[19];
    v7 = *v5;
    sub_100024990((uint64_t)v5, type metadata accessor for DiscoveryToken);
    sub_1000DD514(0, (unint64_t *)&qword_100263DC8, NIDiscoveryToken_ptr);
    v8 = v7;
    v9 = v6;
    v10 = static NSObject.== infix(_:_:)(v8, v9);

    if ((v10 & 1) != 0)
    {
      v11 = v0[34];
      v13 = v0[31];
      v12 = v0[32];
      v14 = v0[30];
      v68 = v0[29];
      v77 = v0[28];
      v79 = v0[27];
      loga = (os_log_t)v0[38];
      v75 = v0[25];
      v15 = (char *)v0[23];
      v70 = v0[26];
      v72 = v0[24];
      v17 = v0[21];
      v16 = v0[22];
      v18 = (void *)v0[19];
      v66 = *(void **)&v15[qword_100264F98];
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 16))(v11, v0[20], v14);
      v19 = *(unsigned __int8 *)(v13 + 80);
      v20 = (v19 + 48) & ~v19;
      v21 = (char *)swift_allocObject(&unk_1002540C0, v20 + v12, v19 | 7);
      *((_QWORD *)v21 + 2) = v15;
      *((_QWORD *)v21 + 3) = v18;
      *((_QWORD *)v21 + 4) = v17;
      *((_QWORD *)v21 + 5) = v16;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(&v21[v20], v11, v14);
      v0[6] = sub_1001372AC;
      v0[7] = v21;
      v0[2] = _NSConcreteStackBlock;
      v0[3] = 1107296256;
      v0[4] = sub_100133E74;
      v0[5] = &unk_1002540D8;
      v22 = _Block_copy(v0 + 2);
      v23 = v18;
      v24 = v66;
      v25 = v15;
      v26 = sub_10001A484(v17, v16);
      static DispatchQoS.unspecified.getter(v26);
      v0[17] = _swiftEmptyArrayStorage;
      v27 = sub_100004EA8((unint64_t *)&unk_100265160, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v28 = sub_100037A5C(&qword_1002643A8);
      v29 = sub_10013767C((unint64_t *)&qword_100265170, &qword_1002643A8);
      dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 17, v28, v29, v72, v27);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v68, v70, v22);
      _Block_release(v22);

      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v70, v72);
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v68, v79);
      sub_1000087A0((uint64_t)loga, &qword_100261018);
      swift_release(v0[7]);
      goto LABEL_12;
    }
  }
  v30 = v0[38];
  v31 = v0[36];
  v32 = (void *)v0[19];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[31] + 16))(v0[33], v0[20], v0[30]);
  sub_10000E37C(v30, v31, &qword_100261018);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v80 = v34;
    log = v33;
    v71 = v0[35];
    v73 = v0[36];
    v74 = v0 + 15;
    v35 = v0[30];
    aBlock = (void *)v0[33];
    v69 = v0[31];
    v36 = swift_slowAlloc(52, -1);
    v76 = (_QWORD *)swift_slowAlloc(8, -1);
    v78 = swift_slowAlloc(96, -1);
    v83 = v78;
    *(_DWORD *)v36 = 136447235;
    v0[11] = sub_10002BA84(0xD00000000000003DLL, 0x80000001001FFC70, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v36 + 4, v36 + 12);
    *(_WORD *)(v36 + 12) = 2160;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v36 + 14, v36 + 22);
    *(_WORD *)(v36 + 22) = 2081;
    v37 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v35, v37);
    v40 = v39;
    v0[13] = sub_10002BA84(v38, v39, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v36 + 24, v36 + 32);
    swift_bridgeObjectRelease(v40);
    (*(void (**)(void *, uint64_t))(v69 + 8))(aBlock, v35);
    *(_WORD *)(v36 + 32) = 2082;
    sub_10000E37C(v73, v71, &qword_100261018);
    v41 = v3(v71, 1, v2);
    v42 = v0[35];
    if (v41 == 1)
    {
      sub_1000087A0(v0[35], &qword_100261018);
      v43 = 0;
      v44 = 0xE000000000000000;
    }
    else
    {
      v43 = sub_1001D3010();
      v44 = v52;
      sub_100024990(v42, type metadata accessor for DiscoveryToken);
    }
    v53 = v0[38];
    v54 = v0[36];
    v55 = (void *)v0[19];
    v0[14] = sub_10002BA84(v43, v44, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v74, v36 + 34, v36 + 42);
    swift_bridgeObjectRelease(v44);
    sub_1000087A0(v54, &qword_100261018);
    *(_WORD *)(v36 + 42) = 2114;
    v0[15] = v55;
    v56 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v74, v0 + 16, v36 + 44, v36 + 52);
    *v76 = v55;

    _os_log_impl((void *)&_mh_execute_header, log, v80, "%{public}s from %{private,mask.hash}s\nlocal peerToken: %{public}s doesn't match with recieved peerToken: %{public}@, ignore it", (uint8_t *)v36, 0x34u);
    v57 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v76, 1, v57);
    swift_slowDealloc(v76, -1, -1);
    swift_arrayDestroy(v78, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    v51 = v53;
  }
  else
  {
    v45 = v0[38];
    v46 = v0[36];
    v47 = v0[33];
    v48 = v0[30];
    v49 = v0[31];
    v50 = (void *)v0[19];

    sub_1000087A0(v46, &qword_100261018);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
    v51 = v45;
  }
  sub_1000087A0(v51, &qword_100261018);
LABEL_12:
  v58 = v0[37];
  v60 = v0[35];
  v59 = v0[36];
  v62 = v0[33];
  v61 = v0[34];
  v63 = v0[29];
  v64 = v0[26];
  swift_task_dealloc(v0[38]);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  return ((uint64_t (*)(void))v0[1])();
}

void sub_100134F8C(uint64_t a1, void *a2, uint64_t a3, id *a4, NSObject **a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  uint64_t (*v19)(id *, uint64_t, NSObject **);
  NSObject **v20;
  id v21;
  char v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  NSObject *v28;
  NSObject **v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  id *v43;
  uint64_t v44;
  id v45;
  Class isa;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  id v50;
  Class v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  _QWORD v56[2];
  uint64_t (*v57)(id *, uint64_t, NSObject **);
  NSObject **v58;
  id *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[24];

  v58 = a5;
  v60 = a3;
  v8 = sub_100037A5C(&qword_1002650A0);
  __chkstk_darwin(v8);
  v10 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C((uint64_t *)&unk_100265150);
  __chkstk_darwin(v11);
  v13 = (id *)((char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for RangingConfigDataSession(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (id *)((char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = a1 + qword_100264FA8;
  swift_beginAccess(a1 + qword_100264FA8, v62, 0, 0);
  v59 = (id *)v18;
  sub_10000E37C(v18, (uint64_t)v13, (uint64_t *)&unk_100265150);
  v19 = *(uint64_t (**)(id *, uint64_t, NSObject **))(v15 + 48);
  v20 = (NSObject **)v14;
  if (v19(v13, 1, (NSObject **)v14) == 1)
  {
    sub_1000087A0((uint64_t)v13, (uint64_t *)&unk_100265150);
LABEL_9:
    v57 = v19;
    v31 = objc_msgSend(objc_allocWithZone((Class)NIFindingConfiguration), "initWithRole:discoveryToken:preferredUpdateRate:", 3, a2, 2);
    v32 = type metadata accessor for Handle(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v10, 1, 1, v32);
    sub_100132C60(v31, a2, (uint64_t)v58, (uint64_t)v10, 3);
    sub_1000087A0((uint64_t)v10, &qword_1002650A0);
    if (qword_10025F970 != -1)
      swift_once(&qword_10025F970, sub_100128268);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_100037A9C(v33, (uint64_t)qword_10027AD68);
    v35 = v31;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v56[0] = swift_slowAlloc(8, -1);
      *(_DWORD *)v38 = 141558275;
      v61 = 1752392040;
      v58 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2113;
      v61 = (uint64_t)v35;
      v39 = v35;
      v56[1] = v34;
      v40 = v39;
      v20 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v38 + 14, v38 + 22);
      v41 = v56[0];
      *(_QWORD *)v56[0] = v35;

      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Findee session started and notifyDiscoveredNearbyObject\nwith config: %{private,mask.hash}@", (uint8_t *)v38, 0x16u);
      v42 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v41, 1, v42);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {

      v36 = v35;
    }
    v43 = v59;

    v44 = v57(v43, 1, v20);
    if (!(_DWORD)v44)
    {
      v45 = objc_msgSend(*v43, "findingNotifier");
      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v45, "notifyDiscoveredNearbyObjectWithToken:sharedConfigurationData:", a2, isa);

    }
    v47 = Logger.logObject.getter(v44);
    v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Findee addtional configData session notify end", v49, 2u);
      swift_slowDealloc(v49, -1, -1);

    }
    else
    {

    }
    return;
  }
  sub_1000321F4((uint64_t)v13, (uint64_t)v17, type metadata accessor for RangingConfigDataSession);
  sub_1000DD514(0, (unint64_t *)&unk_1002676F0, NSObject_ptr);
  v21 = *(id *)((char *)v17 + *(int *)(v14 + 28));
  v22 = static NSObject.== infix(_:_:)();

  if ((v22 & 1) == 0)
  {
    sub_100024990((uint64_t)v17, type metadata accessor for RangingConfigDataSession);
    goto LABEL_9;
  }
  v59 = a4;
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v23 = type metadata accessor for Logger(0);
  sub_100037A9C(v23, (uint64_t)qword_10027AD68);
  v24 = a2;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v58 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v27 = 138543362;
    v61 = (uint64_t)v24;
    v28 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v27 + 4, v27 + 12);
    v29 = v58;
    *v58 = v24;

    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Already has Findee addtional configData session\nfor token: %{public}@ running, just notifyDiscoveredNearbyObject", v27, 0xCu);
    v30 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v29, 1, v30);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {

    v25 = v24;
  }

  v50 = objc_msgSend(*v17, "findingNotifier");
  v51 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v50, "notifyDiscoveredNearbyObjectWithToken:sharedConfigurationData:", v24, v51);

  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Findee addtional configData session notify end", v55, 2u);
    swift_slowDealloc(v55, -1, -1);
  }

  sub_100024990((uint64_t)v17, type metadata accessor for RangingConfigDataSession);
}

void sub_10013567C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  id v33;
  char v34;
  void (*v35)(char *);
  uint64_t v36;
  char v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  id v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  os_log_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  os_log_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  char v94[24];

  v90 = a3;
  v91 = a2;
  v4 = type metadata accessor for Handle(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v87 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v88 = (os_log_t)((char *)&v81 - v9);
  __chkstk_darwin(v8);
  v11 = (char *)&v81 - v10;
  v12 = sub_100037A5C((uint64_t *)&unk_100265150);
  __chkstk_darwin(v12);
  v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for RangingConfigDataSession(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v86 = (uint64_t)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v85 = (uint64_t)&v81 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v81 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v81 - v24;
  v89 = a1;
  v26 = a1 + qword_100264FA8;
  swift_beginAccess(v26, v94, 0, 0);
  sub_10000E37C(v26, (uint64_t)v14, (uint64_t *)&unk_100265150);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    sub_1000321F4((uint64_t)v14, (uint64_t)v25, type metadata accessor for RangingConfigDataSession);
    sub_1000DD514(0, (unint64_t *)&unk_1002676F0, NSObject_ptr);
    v32 = v15;
    v33 = *(id *)&v25[*(int *)(v15 + 28)];
    v34 = static NSObject.== infix(_:_:)(v91, v33);

    v35 = *(void (**)(char *))(v5 + 16);
    v36 = v90;
    v35(v11);
    sub_100025C70((uint64_t)v25, (uint64_t)v23, type metadata accessor for RangingConfigDataSession);
    v84 = v32;
    if ((v34 & 1) != 0)
    {
      sub_100024990((uint64_t)v23, type metadata accessor for RangingConfigDataSession);
      v83 = *(void (**)(char *, uint64_t))(v5 + 8);
      v83(v11, v4);
    }
    else
    {
      v37 = static Handle.== infix(_:_:)(v11, &v23[*(int *)(v32 + 20)]);
      sub_100024990((uint64_t)v23, type metadata accessor for RangingConfigDataSession);
      v83 = *(void (**)(char *, uint64_t))(v5 + 8);
      v83(v11, v4);
      if ((v37 & 1) == 0)
      {
        if (qword_10025F970 != -1)
          swift_once(&qword_10025F970, sub_100128268);
        v50 = type metadata accessor for Logger(0);
        sub_100037A9C(v50, (uint64_t)qword_10027AD68);
        v51 = v85;
        sub_100025C70((uint64_t)v25, v85, type metadata accessor for RangingConfigDataSession);
        v52 = v86;
        sub_100025C70((uint64_t)v25, v86, type metadata accessor for RangingConfigDataSession);
        v53 = v87;
        ((void (*)(char *, uint64_t, uint64_t))v35)(v87, v36, v4);
        v54 = v91;
        v55 = Logger.logObject.getter(v54);
        v56 = static os_log_type_t.default.getter(v55);
        v57 = v56;
        if (os_log_type_enabled(v55, v56))
        {
          v58 = swift_slowAlloc(82, -1);
          v82 = (_QWORD *)swift_slowAlloc(8, -1);
          v59 = swift_slowAlloc(96, -1);
          v90 = v59;
          *(_DWORD *)v58 = 141559811;
          v92 = 1752392040;
          v93 = v59;
          v91 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v58 + 4, v58 + 12);
          *(_WORD *)(v58 + 12) = 2081;
          v81 = v58 + 14;
          v60 = *(id *)(v51 + *(int *)(v84 + 28));
          LODWORD(v89) = v57;
          v61 = v60;
          v62 = v51;
          v63 = objc_msgSend(v60, "description");
          v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
          v88 = v55;
          v66 = v65;

          v92 = sub_10002BA84(v64, v66, &v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v81, v58 + 22);
          swift_bridgeObjectRelease(v66);
          sub_100024990(v62, type metadata accessor for RangingConfigDataSession);
          *(_WORD *)(v58 + 22) = 2160;
          v92 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v58 + 24, v58 + 32);
          *(_WORD *)(v58 + 32) = 2113;
          v92 = (uint64_t)v54;
          v67 = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v58 + 34, v58 + 42);
          v68 = v82;
          *v82 = v54;

          *(_WORD *)(v58 + 42) = 2160;
          v92 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v58 + 44, v58 + 52);
          *(_WORD *)(v58 + 52) = 2081;
          v69 = v86;
          v70 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
          v71 = dispatch thunk of CustomStringConvertible.description.getter(v4, v70);
          v73 = v72;
          v92 = sub_10002BA84(v71, v72, &v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v58 + 54, v58 + 62);
          swift_bridgeObjectRelease(v73);
          sub_100024990(v69, type metadata accessor for RangingConfigDataSession);
          *(_WORD *)(v58 + 62) = 2160;
          v92 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v58 + 64, v58 + 72);
          *(_WORD *)(v58 + 72) = 2081;
          v74 = v87;
          v75 = dispatch thunk of CustomStringConvertible.description.getter(v4, v70);
          v77 = v76;
          v92 = sub_10002BA84(v75, v76, &v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v58 + 74, v58 + 82);
          swift_bridgeObjectRelease(v77);
          v83(v74, v4);
          v78 = v88;
          _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v89, "Receivied unknown token, not stop configData session\npeerToken: %{private,mask.hash}s\ntoken: %{private,mask.hash}@\npeerHandle: %{private,mask.hash}s\nhandle: %{private,mask.hash}s", (uint8_t *)v58, 0x52u);
          v79 = sub_100037A5C(&qword_100260658);
          swift_arrayDestroy(v68, 1, v79);
          swift_slowDealloc(v68, -1, -1);
          v80 = v90;
          swift_arrayDestroy(v90, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v80, -1, -1);
          swift_slowDealloc(v58, -1, -1);

          v49 = (uint64_t)v91;
        }
        else
        {

          v83(v53, v4);
          sub_100024990(v52, type metadata accessor for RangingConfigDataSession);

          sub_100024990(v51, type metadata accessor for RangingConfigDataSession);
          v49 = (uint64_t)v25;
        }
        goto LABEL_16;
      }
    }
    v38 = v88;
    if (qword_10025F970 != -1)
      swift_once(&qword_10025F970, sub_100128268);
    v39 = type metadata accessor for Logger(0);
    sub_100037A9C(v39, (uint64_t)qword_10027AD68);
    v40 = ((uint64_t (*)(os_log_t, uint64_t, uint64_t))v35)(v38, v36, v4);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(22, -1);
      v44 = swift_slowAlloc(32, -1);
      *(_DWORD *)v43 = 141558275;
      v92 = 1752392040;
      v93 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v43 + 4, v43 + 12);
      *(_WORD *)(v43 + 12) = 2081;
      v45 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v4, v45);
      v48 = v47;
      v92 = sub_10002BA84(v46, v47, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v43 + 14, v43 + 22);
      swift_bridgeObjectRelease(v48);
      v83((char *)v38, v4);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Findee Stop and clear configData session ranging\nfor peerHandle: %{private,mask.hash}s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      v83((char *)v38, v4);
    }

    sub_1001330A8(*(_QWORD *)&v25[*(int *)(v84 + 32)]);
    v49 = (uint64_t)v25;
LABEL_16:
    sub_100024990(v49, type metadata accessor for RangingConfigDataSession);
    return;
  }
  sub_1000087A0((uint64_t)v14, (uint64_t *)&unk_100265150);
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_100037A9C(v27, (uint64_t)qword_10027AD68);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "no active findee config data session", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

}

void sub_10013600C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  Class isa;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[24];

  v4 = sub_100037A5C((uint64_t *)&unk_100265150);
  __chkstk_darwin(v4);
  v6 = &v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for RangingConfigDataSession(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (id *)&v34[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = a1 + qword_100264FA0;
  swift_beginAccess(v11, v34, 0, 0);
  sub_10000E37C(v11, (uint64_t)v6, (uint64_t *)&unk_100265150);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    sub_1000321F4((uint64_t)v6, (uint64_t)v10, type metadata accessor for RangingConfigDataSession);
    sub_1000DD514(0, (unint64_t *)&unk_1002676F0, NSObject_ptr);
    v17 = *(id *)((char *)v10 + *(int *)(v7 + 28));
    v18 = static NSObject.== infix(_:_:)(v17, a2);

    if ((v18 & 1) != 0)
    {
      if (qword_10025F970 != -1)
        swift_once(&qword_10025F970, sub_100128268);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_100037A9C(v19, (uint64_t)qword_10027AD68);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Finder recieved configData from Findee, trying notifyDiscoveredNearbyObject", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }

      v24 = objc_msgSend(*v10, "findingNotifier");
      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v24, "notifyDiscoveredNearbyObjectWithToken:sharedConfigurationData:", a2, isa);

      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.default.getter(v27);
      if (!os_log_type_enabled(v27, v28))
        goto LABEL_19;
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      v30 = "Finder session notifyDiscoveredNearbyObject end";
    }
    else
    {
      if (qword_10025F970 != -1)
        swift_once(&qword_10025F970, sub_100128268);
      v31 = type metadata accessor for Logger(0);
      v32 = sub_100037A9C(v31, (uint64_t)qword_10027AD68);
      v27 = Logger.logObject.getter(v32);
      v28 = static os_log_type_t.error.getter(v27);
      if (!os_log_type_enabled(v27, v28))
        goto LABEL_19;
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      v30 = "Finder received different token than configSession is waiting for, ignore it";
    }
    _os_log_impl((void *)&_mh_execute_header, v27, v28, v30, v29, 2u);
    swift_slowDealloc(v29, -1, -1);
LABEL_19:

    sub_100024990((uint64_t)v10, type metadata accessor for RangingConfigDataSession);
    return;
  }
  sub_1000087A0((uint64_t)v6, (uint64_t *)&unk_100265150);
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100037A9C(v12, (uint64_t)qword_10027AD68);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "no active finder config data session", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

}

uint64_t sub_100136424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for Handle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = v7 + v5;

  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

void sub_1001364C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  sub_100133288(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), v0 + ((v2 + 32) & ~v2), v0 + ((*(_QWORD *)(v1 + 64) + v2 + ((v2 + 32) & ~v2)) & ~v2));
}

uint64_t sub_100136504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100136514(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10013651C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C((uint64_t *)&unk_100265150);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_100136564(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *ObjectType;
  objc_super v27;
  _QWORD *v28;

  v2 = v1;
  v25 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v24 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[qword_100264F90] = 0;
  v23 = qword_100264F98;
  v22 = sub_1000DD514(0, &qword_1002644B8, OS_dispatch_queue_ptr);
  v12 = v2;
  static DispatchQoS.unspecified.getter(v12);
  v28 = _swiftEmptyArrayStorage;
  v13 = sub_100004EA8(&qword_1002644C0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_100037A5C(&qword_1002644C8);
  v15 = sub_10013767C(&qword_1002644D0, &qword_1002644C8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v14, v15, v6, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v24);
  v16 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000028, 0x80000001001FFDD0, v11, v8, v5, 0);
  *(_QWORD *)&v2[v23] = v16;
  v17 = &v12[qword_100264FA0];
  v18 = type metadata accessor for RangingConfigDataSession(0);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v17, 1, 1, v18);
  v19(&v12[qword_100264FA8], 1, 1, v18);
  v20 = swift_weakInit(&v12[qword_100264FB0], 0);
  swift_weakAssign(v20, v25);

  v27.receiver = v12;
  v27.super_class = ObjectType;
  return objc_msgSendSuper2(&v27, "init");
}

void sub_1001367F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;
  uint64_t v13;

  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AD50);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = a1;
    v13 = v6;
    *(_DWORD *)v5 = 136446210;
    swift_errorRetain(a1);
    v7 = sub_100037A5C(&qword_100265260);
    v8 = String.init<A>(describing:)(&v12, v7);
    v10 = v9;
    v12 = sub_10002BA84(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "didFailWithError: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

uint64_t sub_1001369CC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v4 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027AD50);
  v8 = a1;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(8, -1);
    v22 = v2;
    v13 = (_QWORD *)v12;
    *(_DWORD *)v11 = 141558275;
    v23 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2113;
    v23 = (uint64_t)v8;
    v14 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v11 + 14, v11 + 22);
    *v13 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "didDiscover: %{private,mask.hash}@", (uint8_t *)v11, 0x16u);
    v15 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v13, 1, v15);
    v16 = v13;
    v2 = v22;
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 1, 1, v17);
  v18 = (_QWORD *)swift_allocObject(&unk_100254020, 48, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v2;
  v18[5] = v8;
  v19 = v8;
  swift_retain(v2);
  v20 = sub_100055978((uint64_t)v6, (uint64_t)&unk_1002643D8, (uint64_t)v18);
  return swift_release(v20);
}

void sub_100136C30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  id v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v4 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027AD50);
  v8 = swift_bridgeObjectRetain_n(a1, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v28 = v2;
    v12 = v11;
    v13 = swift_slowAlloc(32, -1);
    *(_DWORD *)v12 = 141558275;
    v29 = 1752392040;
    v30 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    sub_1000DD514(0, (unint64_t *)&unk_1002651B0, NINearbyObject_ptr);
    v14 = swift_bridgeObjectRetain(a1);
    v15 = Array.description.getter(v14);
    v17 = v16;
    swift_bridgeObjectRelease(a1);
    v29 = sub_10002BA84(v15, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "didUpdate: %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    v18 = v12;
    v2 = v28;
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v26 = a1;
    else
      v26 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v26))
      goto LABEL_8;
LABEL_16:
    swift_bridgeObjectRelease(a1);
    return;
  }
  v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v20 = swift_bridgeObjectRetain(a1);
  if (!v19)
    goto LABEL_16;
LABEL_8:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1, v20);
    goto LABEL_11;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v21 = *(id *)(a1 + 32);
LABEL_11:
    v22 = v21;
    swift_bridgeObjectRelease(a1);
    v23 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v6, 1, 1, v23);
    v24 = (_QWORD *)swift_allocObject(&unk_100253FF8, 48, 7);
    v24[2] = 0;
    v24[3] = 0;
    v24[4] = v2;
    v24[5] = v22;
    swift_retain(v2);
    v25 = sub_100055978((uint64_t)v6, (uint64_t)&unk_1002643B8, (uint64_t)v24);
    swift_release(v25);
    return;
  }
  __break(1u);
}

uint64_t sub_100136F60(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1002643B4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003BF7C;
  return sub_100132960(a1, v4, v5, v7, v6);
}

uint64_t sub_100136FDC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100137010(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1002643D4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003BF7C;
  return sub_100132860(a1, v4, v5, v7, v6);
}

uint64_t sub_100137088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  _QWORD *v12;

  v11 = (_QWORD *)swift_task_alloc(dword_10026440C);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_10003BF7C;
  v12 = (_QWORD *)swift_task_alloc(dword_1002643FC);
  v11[2] = v12;
  *v12 = v11;
  v12[1] = sub_10003BF7C;
  return sub_10012D6E8(a1, a2, a3, a4, a5);
}

uint64_t sub_10013712C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100137150(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v10;
  _QWORD *v11;

  v10 = *(int **)(v4 + 16);
  v11 = (_QWORD *)swift_task_alloc(dword_10026441C);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_1000087DC;
  return ((uint64_t (*)(uint64_t, uint64_t *, uint64_t *, uint64_t, int *))((char *)&dword_100264418
                                                                                + dword_100264418))(a1, a2, a3, a4, v10);
}

uint64_t sub_1001371E8()
{
  uint64_t v0;

  sub_100037AB4(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10013721C()
{
  uint64_t v0;

  sub_10013600C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100137228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Handle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  sub_100037AB4(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1001372AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Handle(0) - 8) + 80);
  sub_100134F8C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(id **)(v0 + 40), (NSObject **)(v0 + ((v1 + 48) & ~v1)));
}

uint64_t sub_1001372E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Handle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10013735C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Handle(0) - 8) + 80);
  sub_10013567C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_100137390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100264450) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_10026445C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_10012BA7C(a1, v6, v7, v8, v9);
}

uint64_t sub_100137448(uint64_t a1)
{
  uint64_t v1;

  return sub_10012C01C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100137464(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100264450) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_10026446C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_10012C090(a1, v6, v7, v8, v9);
}

uint64_t sub_10013751C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100137540()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100264484);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_1001289E8();
}

uint64_t sub_1001375AC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100264494);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_10012960C();
}

uint64_t sub_100137618()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1002644AC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000087DC;
  v2 = (_QWORD *)swift_task_alloc(dword_10026420C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_1001285BC();
}

uint64_t sub_10013767C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10003C1FC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001376E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001376EC);
}

uint64_t sub_1001376EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100137728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100137734);
}

uint64_t sub_100137734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SavePreferencesEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_100264530;
  if (!qword_100264530)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SavePreferencesEndpoint);
  return result;
}

uint64_t sub_1001377B0()
{
  uint64_t v0;

  v0 = type metadata accessor for URL(0);
  sub_100043F10(v0, qword_10027AD90);
  sub_100037A9C(v0, (uint64_t)qword_10027AD90);
  return sub_1001377F8();
}

uint64_t sub_1001377F8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v0 = sub_100037A5C(&qword_100264568);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v8 = 1;
  v9 = objc_msgSend(v7, "URLsForDirectory:inDomains:", 5, 1);

  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v3);
  if (*(_QWORD *)(v10 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v2, v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v3);
    v8 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, v8, 1, v3);
  swift_bridgeObjectRelease(v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100137A14((uint64_t)v2);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000032, 0x80000001001FFE30, "findmylocated/StorageFilePath.swift", 35, 2, 21, 0);
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001ELL, 0x80000001001FCAE0, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_100137A14(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100037A5C(&qword_100264568);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100137A54(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return swift_task_switch(sub_100137A74, v1, 0);
}

uint64_t sub_100137A74()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  void *v6;
  uint8_t *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = (void *)v0[3];
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ADC0);
  v3 = Logger.logObject.getter(v1);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = (void *)v0[3];
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    v0[2] = v6;
    v8 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v7 + 4, v7 + 12);
    *v15 = v6;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "FriendshipService: didDiscover %@", v7, 0xCu);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v15, 1, v9);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {

  }
  v0[6] = *(_QWORD *)(v0[4] + OBJC_IVAR____TtC13findmylocated17FriendshipService_connectionPool);
  v10 = sub_100037A5C(&qword_1002648E0);
  v11 = sub_10001013C(&qword_1002648E8, &qword_1002648E0, (uint64_t)&protocol conformance descriptor for XPCClientConnectionPool<A>);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v10, v11);
  return swift_task_switch(sub_100137C6C, v12, v13);
}

uint64_t sub_100137C6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 56) = dispatch thunk of XPCClientConnectionPool.sessions.getter();
  return swift_task_switch(sub_100137CB0, v1, 0);
}

uint64_t sub_100137CB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = v0[7];
  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[3];
  v5 = sub_100018A7C(qword_1002647E0, 255, type metadata accessor for FriendshipService, (uint64_t)&unk_1001F6E28);
  v6 = (_QWORD *)swift_task_alloc(48);
  v0[8] = v6;
  v6[2] = v1;
  v6[3] = v4;
  v6[4] = v3;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[9] = v7;
  *v7 = v0;
  v7[1] = sub_100137D7C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v7, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v2, v5, &unk_1002649C0, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_100137D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10004101C, v3, 0);
}

uint64_t sub_100137DF0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return swift_task_switch(sub_100137E10, v1, 0);
}

uint64_t sub_100137E10()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  void *v6;
  uint8_t *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = (void *)v0[3];
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ADC0);
  v3 = Logger.logObject.getter(v1);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = (void *)v0[3];
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    v0[2] = v6;
    v8 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v7 + 4, v7 + 12);
    *v15 = v6;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "FriendshipService: didUpdate %@", v7, 0xCu);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v15, 1, v9);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {

  }
  v0[6] = *(_QWORD *)(v0[4] + OBJC_IVAR____TtC13findmylocated17FriendshipService_connectionPool);
  v10 = sub_100037A5C(&qword_1002648E0);
  v11 = sub_10001013C(&qword_1002648E8, &qword_1002648E0, (uint64_t)&protocol conformance descriptor for XPCClientConnectionPool<A>);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v10, v11);
  return swift_task_switch(sub_100138008, v12, v13);
}

uint64_t sub_100138008()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 56) = dispatch thunk of XPCClientConnectionPool.sessions.getter();
  return swift_task_switch(sub_10013804C, v1, 0);
}

uint64_t sub_10013804C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = v0[7];
  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[3];
  v5 = sub_100018A7C(qword_1002647E0, 255, type metadata accessor for FriendshipService, (uint64_t)&unk_1001F6E28);
  v6 = (_QWORD *)swift_task_alloc(48);
  v0[8] = v6;
  v6[2] = v1;
  v6[3] = v4;
  v6[4] = v3;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[9] = v7;
  *v7 = v0;
  v7[1] = sub_100138118;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v7, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v2, v5, &unk_100264998, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_100138118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100044CD4, v3, 0);
}

uint64_t sub_10013818C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027ADA8);
  sub_100037A9C(v0, (uint64_t)qword_10027ADA8);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0xD000000000000011, 0x80000001001F6D20);
}

Swift::Int sub_10013820C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD v6[10];

  v6[9] = *v2;
  Hasher.init(_seed:)(v6, 0);
  v4 = type metadata accessor for FriendshipServiceClient();
  dispatch thunk of Hashable.hash(into:)(v6, v4, a2);
  return Hasher._finalize()();
}

uint64_t sub_100138264(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  v4 = type metadata accessor for FriendshipServiceClient();
  v6 = sub_100018A7C(&qword_100264840, v5, (uint64_t (*)(uint64_t))type metadata accessor for FriendshipServiceClient, (uint64_t)&unk_1001F6EF0);
  return static XPCAcceptedClient.== infix(_:_:)(v2, v3, v4, v6);
}

uint64_t sub_1001382C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return swift_task_switch(sub_1001382DC, 0, 0);
}

uint64_t sub_1001382DC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;

  v1 = v0[6];
  v2 = (void *)v0[7];
  v3 = v0[5];
  v4 = (_QWORD *)swift_allocObject(&unk_100254340, 40, 7);
  v0[8] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  v5 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v3);
  swift_retain(v1);
  v6 = v2;
  v7 = (_QWORD *)swift_task_alloc(v5);
  v0[9] = v7;
  *v7 = v0;
  v7[1] = sub_1001383A0;
  return withTimeout<A>(_:block:)(v7, 0x8AC7230489E80000, 0, &unk_100264880, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_1001383A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10013840C;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 64));
    v4 = sub_100044CD4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10013840C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 16) = v1;
  OnceCheckedContinuation.resume(throwing:)(v0 + 16);
  if (qword_10025F980 != -1)
    swift_once(&qword_10025F980, sub_10013818C);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027ADA8);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 80);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD00000000000001ALL, 0x80000001001FFF30, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2114;
    v12 = _convertErrorToNSError(_:)(v8);
    *(_QWORD *)(v0 + 32) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
    *v10 = v12;
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Uncaught error in %{public}s: %{public}@", (uint8_t *)v9, 0x16u);
    v13 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v10, 1, v13);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v8);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100138654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  return swift_task_switch(sub_100138670, 0, 0);
}

uint64_t sub_100138670()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = *((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:) + 1);
  v4 = (char *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:)
     + async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:);
  swift_retain(*(_QWORD *)(v0 + 80));
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 96) = v2;
  *v2 = v0;
  v2[1] = sub_1001386F8;
  return ((uint64_t (*)(uint64_t, uint64_t (*)(uint64_t), _QWORD))v4)(v0 + 64, sub_10013E838, *(_QWORD *)(v0 + 80));
}

uint64_t sub_1001386F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100138874;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 80));
    v4 = sub_100138764;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100138764()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  Class isa;
  void *v9;
  uint64_t v10;

  v1 = v0[13];
  v2 = (void *)v0[8];
  v3 = NINearbyObject.dataRepresentation.getter();
  if (!v1)
  {
    v5 = v3;
    v6 = v4;
    v7 = v0[10];
    isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_10013E850;
    v0[7] = v7;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1000A5E54;
    v0[5] = &unk_100254358;
    v9 = _Block_copy(v0 + 2);
    v10 = v0[7];
    swift_retain(v7);
    swift_release(v10);
    objc_msgSend(v2, "didDiscoverWithNearbyObject:completion:", isa, v9);
    _Block_release(v9);

    sub_100037AB4(v5, v6);
  }
  swift_unknownObjectRelease(v2);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_100138874()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001388A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v10 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = (_QWORD *)swift_allocObject(a4, 56, 7);
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a2;
  v14[5] = a1;
  v14[6] = a3;
  swift_retain(a2);
  swift_retain(a1);
  v15 = a3;
  v16 = sub_10005582C((uint64_t)v12, a5, (uint64_t)v14);
  return swift_release(v16);
}

uint64_t sub_10013898C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return swift_task_switch(sub_1001389A8, 0, 0);
}

uint64_t sub_1001389A8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;

  v1 = v0[6];
  v2 = (void *)v0[7];
  v3 = v0[5];
  v4 = (_QWORD *)swift_allocObject(&unk_1002542C8, 40, 7);
  v0[8] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  v5 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v3);
  swift_retain(v1);
  v6 = v2;
  v7 = (_QWORD *)swift_task_alloc(v5);
  v0[9] = v7;
  *v7 = v0;
  v7[1] = sub_100138A6C;
  return withTimeout<A>(_:block:)(v7, 0x8AC7230489E80000, 0, &unk_100264860, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_100138A6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100138AD8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 64));
    v4 = sub_100044CD4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100138AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 16) = v1;
  OnceCheckedContinuation.resume(throwing:)(v0 + 16);
  if (qword_10025F980 != -1)
    swift_once(&qword_10025F980, sub_10013818C);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027ADA8);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 80);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD000000000000018, 0x80000001001FFF10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2114;
    v12 = _convertErrorToNSError(_:)(v8);
    *(_QWORD *)(v0 + 32) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
    *v10 = v12;
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Uncaught error in %{public}s: %{public}@", (uint8_t *)v9, 0x16u);
    v13 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v10, 1, v13);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v8);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100138D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  return swift_task_switch(sub_100138D3C, 0, 0);
}

uint64_t sub_100138D3C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = *((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:) + 1);
  v4 = (char *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:)
     + async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:);
  swift_retain(*(_QWORD *)(v0 + 80));
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 96) = v2;
  *v2 = v0;
  v2[1] = sub_100138DC4;
  return ((uint64_t (*)(uint64_t, uint64_t (*)(uint64_t), _QWORD))v4)(v0 + 64, sub_10013E838, *(_QWORD *)(v0 + 80));
}

uint64_t sub_100138DC4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10013F9D0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 80));
    v4 = sub_100138E30;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100138E30()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  Class isa;
  void *v9;
  uint64_t v10;

  v1 = v0[13];
  v2 = (void *)v0[8];
  v3 = NINearbyObject.dataRepresentation.getter();
  if (!v1)
  {
    v5 = v3;
    v6 = v4;
    v7 = v0[10];
    isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_10013E850;
    v0[7] = v7;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1000A5E54;
    v0[5] = &unk_1002542E0;
    v9 = _Block_copy(v0 + 2);
    v10 = v0[7];
    swift_retain(v7);
    swift_release(v10);
    objc_msgSend(v2, "didUpdateWithNearbyObject:completion:", isa, v9);
    _Block_release(v9);

    sub_100037AB4(v5, v6);
  }
  swift_unknownObjectRelease(v2);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_100138F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = (_QWORD *)swift_allocObject(&unk_100254390, 56, 7);
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a2;
  v10[5] = a1;
  v10[6] = a3;
  swift_retain(a2);
  swift_retain(a1);
  swift_bridgeObjectRetain(a3);
  v11 = sub_10005582C((uint64_t)v8, (uint64_t)&unk_100264890, (uint64_t)v10);
  return swift_release(v11);
}

uint64_t sub_100139028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return swift_task_switch(sub_100139044, 0, 0);
}

uint64_t sub_100139044()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[6];
  v2 = v0[7];
  v3 = v0[5];
  v4 = (_QWORD *)swift_allocObject(&unk_1002543B8, 40, 7);
  v0[8] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  v5 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v3);
  swift_retain(v1);
  swift_bridgeObjectRetain(v2);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[9] = v6;
  *v6 = v0;
  v6[1] = sub_10013910C;
  return withTimeout<A>(_:block:)(v6, 0x8AC7230489E80000, 0, &unk_1002648A0, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_10013910C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100139178;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 64));
    v4 = sub_100044CD4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100139178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 16) = v1;
  OnceCheckedContinuation.resume(throwing:)(v0 + 16);
  if (qword_10025F8D0 != -1)
    swift_once(&qword_10025F8D0, sub_1000A5664);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027AB90);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 80);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD000000000000011, 0x80000001001FFF50, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2114;
    v12 = _convertErrorToNSError(_:)(v8);
    *(_QWORD *)(v0 + 32) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
    *v10 = v12;
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Uncaught error in %{public}s: %{public}@", (uint8_t *)v9, 0x16u);
    v13 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v10, 1, v13);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v8);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001393C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = a4;
  v4[10] = a2;
  return swift_task_switch(sub_1001393DC, 0, 0);
}

uint64_t sub_1001393DC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = *((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:) + 1);
  v4 = (char *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:)
     + async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:);
  swift_retain(*(_QWORD *)(v0 + 88));
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 104) = v2;
  *v2 = v0;
  v2[1] = sub_100139464;
  return ((uint64_t (*)(uint64_t, uint64_t (*)(uint64_t), _QWORD))v4)(v0 + 64, sub_10013E838, *(_QWORD *)(v0 + 88));
}

uint64_t sub_100139464()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000A5E20;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 88));
    v4 = sub_1001394D0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001394D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Class isa;
  void *v14;
  uint64_t v15;

  v1 = v0[14];
  v2 = v0[12];
  v3 = (void *)v0[8];
  v4 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListEncoder.init()();
  v0[9] = v2;
  v6 = sub_100037A5C(&qword_1002633B8);
  v7 = sub_10013EAFC();
  v8 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 9, v6, v7);
  if (v1)
  {
    swift_release(v5);
  }
  else
  {
    v10 = v8;
    v11 = v9;
    v12 = v0[11];
    swift_release(v5);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_10013E850;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1000A5E54;
    v0[5] = &unk_1002543D0;
    v14 = _Block_copy(v0 + 2);
    v15 = v0[7];
    swift_retain(v12);
    swift_release(v15);
    objc_msgSend(v3, "updateFriends:completion:", isa, v14);
    _Block_release(v14);

    sub_100037AB4(v10, v11);
  }
  swift_unknownObjectRelease(v3);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_100139644(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (qword_10025F980 != -1)
    swift_once(&qword_10025F980, sub_10013818C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ADA8);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = (void *)_convertErrorToNSError(_:)(a1);
    v9 = objc_msgSend(v8, "description");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    v14 = sub_10002BA84(v10, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "FrienshipServiceClient proxy error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v15 = a1;
  return OnceCheckedContinuation.resume(throwing:)(&v15);
}

uint64_t sub_100139844(uint64_t a1)
{
  uint64_t v3;

  if (!a1)
    return OnceCheckedContinuation.resume<>()();
  v3 = a1;
  swift_errorRetain(a1);
  OnceCheckedContinuation.resume(throwing:)(&v3);
  return swift_errorRelease(a1);
}

uint64_t sub_100139890(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_1001398A8, v1, 0);
}

uint64_t sub_1001398A8()
{
  int8x16_t *v0;
  int8x16_t *v1;
  int8x16_t **v2;

  v1 = (int8x16_t *)swift_task_alloc(32);
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  v2 = (int8x16_t **)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  v0[2].i64[1] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (int8x16_t *)sub_1000A6BBC;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_10013993C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_100139954, v1, 0);
}

uint64_t sub_100139954()
{
  int8x16_t *v0;
  int8x16_t *v1;
  int8x16_t **v2;

  v1 = (int8x16_t *)swift_task_alloc(32);
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  v2 = (int8x16_t **)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  v0[2].i64[1] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (int8x16_t *)sub_1000A6A6C;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_1001399E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_100139A00, v1, 0);
}

uint64_t sub_100139A00()
{
  int8x16_t *v0;
  int8x16_t *v1;
  int8x16_t **v2;

  v1 = (int8x16_t *)swift_task_alloc(32);
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  v2 = (int8x16_t **)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  v0[2].i64[1] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (int8x16_t *)sub_1000A6BBC;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_100139A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027ADC0);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027ADC0);
  if (qword_10025F980 != -1)
    swift_once(&qword_10025F980, sub_10013818C);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027ADA8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100139B24()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0;
  v1[2] = v0;
  v3 = type metadata accessor for UUID(0);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[3] = v4;
  swift_defaultActor_initialize(v0);
  *(_QWORD *)(v0 + 112) = 0xD000000000000011;
  *(_QWORD *)(v0 + 120) = 0x80000001001F6D20;
  v5 = v0 + OBJC_IVAR____TtC13findmylocated17FriendshipService_serviceDescription;
  v6 = type metadata accessor for XPCServiceDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13findmylocated17FriendshipService_trampoline) = 0;
  v7 = OBJC_IVAR____TtC13findmylocated17FriendshipService_connectionPool;
  sub_100037A5C(&qword_1002648E0);
  *(_QWORD *)(v2 + v7) = XPCClientConnectionPool.__allocating_init()();
  v8 = OBJC_IVAR____TtC13findmylocated17FriendshipService_friendUpdateQueue;
  v9 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v9);
  *(_QWORD *)(v2 + v8) = WorkItemQueue.__allocating_init(name:identifier:)(0xD000000000000023, 0x80000001001FFFC0, v4);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13findmylocated17FriendshipService_task) = 0;
  type metadata accessor for XPCSessionManager(0);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to XPCSessionManager.__allocating_init(name:)[1]);
  v1[4] = v10;
  *v10 = v1;
  v10[1] = sub_100139C88;
  return XPCSessionManager.__allocating_init(name:)(0xD000000000000011, 0x80000001001F6D20);
}

uint64_t sub_100139C88(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 24);
  v5 = *(_QWORD *)(*v1 + 16);
  v7 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 32));
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13findmylocated17FriendshipService_xpcSessionManager) = a1;
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v7 + 8))(*(_QWORD *)(v3 + 16));
}

uint64_t sub_100139CF4()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[18] = v0;
  v1[19] = *v0;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002626D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[20] = swift_task_alloc(v2);
  v1[21] = swift_task_alloc(v2);
  v1[22] = swift_task_alloc(v2);
  v3 = type metadata accessor for MachServiceName(0);
  v1[23] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[24] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[25] = swift_task_alloc(v5);
  v1[26] = swift_task_alloc(v5);
  v1[27] = swift_task_alloc(v5);
  return swift_task_switch(sub_100139DB8, v0, 0);
}

uint64_t sub_100139DB8()
{
  objc_super *v0;
  objc_super *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  Class super_class;
  id receiver;
  _QWORD *v9;
  Class v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  id v15;
  id v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  objc_class *v21;
  uint8_t *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  objc_super *v27;
  objc_super *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  objc_super *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  id v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  Class v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  objc_super *v55;
  uint64_t v56;
  objc_class *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  id v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  objc_super *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  objc_class *v78;
  uint64_t v80;
  Class v81;
  id v82;
  objc_class *v83;
  Class *p_super_class;
  uint64_t v85;
  objc_super *v86;
  Class *v87;
  uint64_t (*v88)(id, Class, Class);
  id v89;
  uint64_t v90;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = v0 + 5;
  p_super_class = &v0[8].super_class;
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100037A9C(v2, (uint64_t)qword_10027ADC0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "FriendshipService startup()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  receiver = v0[13].receiver;
  super_class = v0[13].super_class;
  v10 = v0[11].super_class;
  v9 = v0[12].receiver;

  MachServiceName.init(_:)(0xD00000000000002FLL, 0x80000001001FFF90);
  v82 = (id)objc_opt_self(NSXPCInterface);
  v89 = objc_msgSend(v82, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP12FindMyLocate20FriendshipXPCService_);
  v0[14].receiver = v89;
  v88 = (uint64_t (*)(id, Class, Class))v9[2];
  v11 = v88(receiver, super_class, v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v15 = v0[13].receiver;
  v16 = v0[12].receiver;
  if (v14)
  {
    v81 = v0[11].super_class;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v85 = swift_slowAlloc(32, -1);
    v90 = v85;
    *(_DWORD *)v17 = 136315138;
    v18 = MachServiceName.description.getter();
    v20 = v19;
    v0[8].super_class = (Class)sub_10002BA84(v18, v19, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(p_super_class, &v0[9], v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v20);
    v21 = (objc_class *)*((_QWORD *)v16 + 1);
    ((void (*)(id, Class))v21)(v15, v81);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Service Name: %s", v17, 0xCu);
    swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1, -1);
    v22 = v17;
    v1 = v0 + 5;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    v21 = (objc_class *)*((_QWORD *)v16 + 1);
    ((void (*)(id, Class))v21)(v15, v0[11].super_class);
  }

  v86 = v0 + 1;
  v87 = &v0[3].super_class;
  v0[14].super_class = v21;
  v23 = v0[9].receiver;
  v24 = sub_100037A5C(&qword_100264938);
  v25 = swift_allocObject(v24, 120, 15);
  swift_retain(v23);
  swift_defaultActor_initialize(v25);
  v26 = swift_weakInit(v25 + 112, 0);
  swift_weakAssign(v26, v23);
  v0[5].receiver = (id)v25;
  v0[5].super_class = (Class)v24;
  v27 = -[objc_super init](v1, "init");
  v0[15].receiver = v27;
  swift_release(v23);
  v83 = (objc_class *)objc_msgSend(v82, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP12FindMyLocate26FriendshipServiceClientXPC_);
  v0[15].super_class = v83;
  v28 = v27;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v80 = swift_slowAlloc(32, -1);
    v90 = v80;
    *(_DWORD *)v31 = 136315138;
    v32 = v28;
    v33 = -[objc_super description](v28, "description");
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    v28 = v32;
    v0[8].receiver = (id)sub_10002BA84(v34, v36, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v0[8], p_super_class, v31 + 4, v31 + 12);

    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Trampoline: %s", v31, 0xCu);
    swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v80, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

  }
  v37 = swift_retain_n(v0[9].receiver, 2);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v41 = v0[9].receiver;
  if (v40)
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v90 = v43;
    *(_DWORD *)v42 = 136315138;
    v0[7].receiver = v41;
    v44 = type metadata accessor for FriendshipService(0);
    v45 = sub_100018A7C(&qword_1002647D8, 255, type metadata accessor for FriendshipService, (uint64_t)&unk_1001F6DA0);
    v46 = dispatch thunk of CustomStringConvertible.description.getter(v44, v45);
    v48 = v47;
    v0[7].super_class = (Class)sub_10002BA84(v46, v47, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v0[7].super_class, &v0[8], v42 + 4, v42 + 12);
    swift_release_n(v41, 2);
    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Self: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

    swift_release_n(v41, 2);
  }
  v49 = v0[12].super_class;
  v50 = (uint64_t)v0[11].receiver;
  v51 = (uint64_t)v0[10].super_class;
  v52 = (char *)v0[9].receiver;
  v88(v49, v0[13].super_class, v0[11].super_class);
  v53 = type metadata accessor for ServiceEntitlements(0);
  v0[2].super_class = (Class)v53;
  v0[3].receiver = (id)sub_100018A7C(&qword_1002626F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ServiceEntitlements, (uint64_t)&protocol conformance descriptor for ServiceEntitlements);
  v54 = sub_10003276C(v86);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v53 - 8) + 104))(v54, enum case for ServiceEntitlements.friendshipService(_:), v53);
  swift_retain(v52);
  v55 = v28;
  XPCServiceDescription.init(name:exportedObject:exportedInterface:remoteObjectInterface:options:requiredEntitlement:shouldAccept:)(v49, v55, v89, v83, 0, v86, &unk_100264948, v52);
  v56 = type metadata accessor for XPCServiceDescription(0);
  v0[16].receiver = (id)v56;
  v57 = *(objc_class **)(v56 - 8);
  v0[16].super_class = v57;
  (*((void (**)(uint64_t, _QWORD, uint64_t, uint64_t))v57 + 7))(v50, 0, 1, v56);
  sub_10000EF6C(v50, v51, &qword_1002626D0);
  v58 = OBJC_IVAR____TtC13findmylocated17FriendshipService_serviceDescription;
  v0[17].receiver = (id)OBJC_IVAR____TtC13findmylocated17FriendshipService_serviceDescription;
  v59 = (uint64_t)&v52[v58];
  swift_beginAccess(&v52[v58], v87, 33, 0);
  sub_10013F45C(v51, v59);
  swift_endAccess(v87);
  v60 = swift_retain_n(v52, 2);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.default.getter(v61);
  v63 = os_log_type_enabled(v61, v62);
  v64 = v0[9].receiver;
  if (v63)
  {
    v65 = (uint8_t *)swift_slowAlloc(12, -1);
    v66 = swift_slowAlloc(32, -1);
    v90 = v66;
    *(_DWORD *)v65 = 136315138;
    v0[6].receiver = v64;
    v67 = type metadata accessor for FriendshipService(0);
    v68 = sub_100018A7C(&qword_1002647D8, 255, type metadata accessor for FriendshipService, (uint64_t)&unk_1001F6DA0);
    v69 = dispatch thunk of CustomStringConvertible.description.getter(v67, v68);
    v71 = v70;
    v0[6].super_class = (Class)sub_10002BA84(v69, v70, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v0[6].super_class, &v0[7], v65 + 4, v65 + 12);
    swift_release_n(v64, 2);
    swift_bridgeObjectRelease(v71);
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Service description: %s", v65, 0xCu);
    swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v65, -1, -1);

  }
  else
  {

    swift_release_n(v64, 2);
  }
  v72 = (char *)v0[9].receiver;
  v73 = *(_QWORD *)&v72[OBJC_IVAR____TtC13findmylocated17FriendshipService_trampoline];
  *(_QWORD *)&v72[OBJC_IVAR____TtC13findmylocated17FriendshipService_trampoline] = v55;
  v74 = v55;
  swift_release(v73);
  v0[17].super_class = *(Class *)&v72[OBJC_IVAR____TtC13findmylocated17FriendshipService_connectionPool];
  v75 = sub_100037A5C(&qword_1002648E0);
  v76 = sub_10001013C(&qword_1002648E8, &qword_1002648E0, (uint64_t)&protocol conformance descriptor for XPCClientConnectionPool<A>);
  v77 = dispatch thunk of Actor.unownedExecutor.getter(v75, v76);
  v0[18].receiver = (id)v77;
  v0[18].super_class = v78;
  return swift_task_switch(sub_10013A6F4, v77, v78);
}

uint64_t sub_10013A6F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  dispatch thunk of XPCClientConnectionPool.setRemoveHandler(_:)(&unk_100264950, 0);
  return swift_task_switch(sub_10013A740, v1, 0);
}

uint64_t sub_10013A740()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v1 = swift_allocObject(&unk_1002544A8, 32, 7);
  *(_QWORD *)(v0 + 304) = v1;
  v2 = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v1 + 16) = v2;
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  swift_retain(v2);
  return swift_task_switch(sub_10013A7A0, v3, v4);
}

uint64_t sub_10013A7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 144);
  dispatch thunk of XPCClientConnectionPool.setStopProcessing(_:)(&unk_100264960, v1);
  swift_release(v1);
  return swift_task_switch(sub_10013A800, v2, 0);
}

uint64_t sub_10013A800()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0[33];
  v2 = v0[32];
  v3 = v0[20];
  v4 = v0[18];
  v5 = v4 + v0[34];
  v0[39] = *(_QWORD *)(v4 + OBJC_IVAR____TtC13findmylocated17FriendshipService_xpcSessionManager);
  sub_10000E37C(v5, v3, &qword_1002626D0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v7 = type metadata accessor for XPCSessionManager(0);
    v8 = sub_100018A7C(&qword_1002626D8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCSessionManager, (uint64_t)&protocol conformance descriptor for XPCSessionManager);
    v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
    return swift_task_switch(sub_10013A8D0, v9, v10);
  }
  return result;
}

uint64_t sub_10013A8D0()
{
  _QWORD *v0;
  uint64_t v1;

  dispatch thunk of XPCSessionManager.register(service:)(v0[20]);
  v0[40] = 0;
  v1 = v0[18];
  (*(void (**)(_QWORD, _QWORD))(v0[33] + 8))(v0[20], v0[32]);
  return swift_task_switch(sub_10013A948, v1, 0);
}

uint64_t sub_10013A948()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(void **)(v0 + 240);
  v2 = *(void **)(v0 + 224);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 160);

  v3(v5, v7);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013A9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(void **)(v0 + 240);
  v4 = *(void **)(v0 + 224);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 184);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 168);

  v5(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v9, v1);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013AAC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = sub_100037A5C((uint64_t *)&unk_100265180);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10013AB1C, 0, 0);
}

uint64_t sub_10013AB1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "FriendshipService stop Processing", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);

  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject(&unk_1002544D0, 40, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v7;
  swift_retain(v7);
  v10 = sub_10005582C(v6, (uint64_t)&unk_100264970, (uint64_t)v9);
  swift_release(v10);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013AC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10026469C);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_10003BF7C;
  v6[4] = a4;
  return swift_task_switch(sub_10013AF08, a4, 0);
}

uint64_t sub_10013ACC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc(dword_100264694);
  *(_QWORD *)(v5 + 16) = v8;
  *v8 = v5;
  v8[1] = sub_10003BF7C;
  v8[3] = a5;
  v8[4] = a4;
  return swift_task_switch(sub_10003D42C, a4, 0);
}

uint64_t sub_10013AD2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_10003D42C, v1, 0);
}

uint64_t sub_10013AD44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ADC0);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 48);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    v10 = _convertErrorToNSError(_:)(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error adding connection: %{public}@", v8, 0xCu);
    v11 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 48));
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013AEF0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch(sub_10013AF08, v0, 0);
}

uint64_t sub_10013AF08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  *(_QWORD *)(v0 + 40) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "All client connections have been terminated. Invalidating...", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_100260FDC);
  *(_QWORD *)(v0 + 48) = v6;
  *v6 = v0;
  v6[1] = sub_10013B008;
  return sub_100069A68();
}

uint64_t sub_10013B008()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10013B074, *(_QWORD *)(v3 + 32), 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10013B074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 56);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 56);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136446210;
    v14 = v7;
    *(_QWORD *)(v0 + 16) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unable to stop ranging due to %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 56);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013B228(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  v3 = type metadata accessor for UUID(0);
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10013B288, v1, 0);
}

uint64_t sub_10013B288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v5 = (_QWORD *)swift_allocObject(&unk_100254408, 40, 7);
  v5[2] = v3;
  v5[3] = v4;
  v5[4] = v2;
  swift_retain(v3);
  v6 = swift_bridgeObjectRetain(v4);
  UUID.init()(v6);
  v7 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v1, &unk_1002648C0, v5, &unk_1002648C8, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v7);
  swift_release(v7);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013B360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_10013B37C, 0, 0);
}

uint64_t sub_10013B37C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject(&unk_100254430, 40, 7);
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v6 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v6;
  v3 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v1);
  swift_bridgeObjectRetain(v6);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = sub_1000C7780;
  return withTimeout<A>(_:block:)(v4, 0x40AAD21B3B700000, 3, &unk_1002648D8, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10013B43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[7] = a3;
  v4[8] = a4;
  v4[6] = a2;
  return swift_task_switch(sub_10013B458, 0, 0);
}

uint64_t sub_10013B458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 72) = *(_QWORD *)(*(_QWORD *)(v0 + 48)
                                   + OBJC_IVAR____TtC13findmylocated17FriendshipService_connectionPool);
  v1 = sub_100037A5C(&qword_1002648E0);
  v2 = sub_10001013C(&qword_1002648E8, &qword_1002648E0, (uint64_t)&protocol conformance descriptor for XPCClientConnectionPool<A>);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_10013B4E8, v3, v4);
}

uint64_t sub_10013B4E8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = dispatch thunk of XPCClientConnectionPool.sessions.getter();
  v0[10] = v1;
  v0[2] = v1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  v0[11] = v2;
  v3 = sub_100037A5C(&qword_1002648F8);
  v4 = type metadata accessor for UUID(0);
  v0[12] = v4;
  v5 = sub_10001013C(&qword_100264900, &qword_1002648F8, (uint64_t)&protocol conformance descriptor for Set<A>);
  *v2 = v0;
  v2[1] = sub_10013B5AC;
  return Sequence.asyncMap<A>(_:)(&unk_1002648F0, 0, v3, v4, v5);
}

uint64_t sub_10013B5AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10013B608, 0, 0);
}

uint64_t sub_10013B608()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  NSObject *log;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = v0[13];
  v2 = v0[10];
  v3 = v0[7];
  v4 = type metadata accessor for Logger(0);
  sub_100037A9C(v4, (uint64_t)qword_10027ADC0);
  swift_bridgeObjectRetain_n(v2, 2);
  swift_bridgeObjectRetain_n(v1, 2);
  v5 = swift_bridgeObjectRetain_n(v3, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = v0[10];
    v9 = swift_slowAlloc(32, -1);
    v10 = swift_slowAlloc(32, -1);
    v34 = v10;
    *(_DWORD *)v9 = 134218498;
    v11 = v0[10];
    v33 = v10;
    v32 = v7;
    log = v6;
    if ((v8 & 0xC000000000000001) != 0)
    {
      if (v11 < 0)
        v12 = v0[10];
      else
        v12 = v8 & 0xFFFFFFFFFFFFFF8;
      v13 = __CocoaSet.count.getter(v12);
      v11 = v0[10];
    }
    else
    {
      v13 = *(_QWORD *)(v11 + 16);
    }
    v17 = v0[13];
    v18 = v0[7];
    swift_bridgeObjectRelease(v11);
    v0[3] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v9 + 12) = 2082;
    v19 = swift_bridgeObjectRetain(v17);
    v20 = Array.description.getter(v19);
    v22 = v21;
    swift_bridgeObjectRelease(v17);
    v0[4] = sub_10002BA84(v20, v22, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v9 + 22) = 2048;
    v23 = *(_QWORD *)(v18 + 16);
    swift_bridgeObjectRelease(v18);
    v0[5] = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, log, v32, "Send friends update to clients[%ld]: %{public}s updates count:%ld", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {
    v14 = v0[13];
    v15 = v0[10];
    v16 = v0[7];

    swift_bridgeObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease_n(v15, 2);
    swift_bridgeObjectRelease_n(v16, 2);
  }
  v24 = v0[13];
  v25 = v0[10];
  v27 = v0[7];
  v26 = v0[8];
  v28 = (_QWORD *)swift_task_alloc(48);
  v0[14] = v28;
  v28[2] = v27;
  v28[3] = v25;
  v28[4] = v24;
  v28[5] = v26;
  v29 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[15] = v29;
  *v29 = v0;
  v29[1] = sub_10013B93C;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10013B93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10003BF80, 0, 0);
}

uint64_t sub_10013B9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v6[25] = a5;
  v6[26] = a6;
  v6[23] = a3;
  v6[24] = a4;
  v6[22] = a2;
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[27] = swift_task_alloc(v7);
  v6[28] = swift_task_alloc(v7);
  v8 = type metadata accessor for HandleType(0);
  v6[29] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[30] = v9;
  v6[31] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Handle(0);
  v6[32] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[33] = v11;
  v6[34] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FriendshipAction(0);
  v6[35] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[36] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[37] = swift_task_alloc(v14);
  v6[38] = swift_task_alloc(v14);
  v15 = type metadata accessor for Friend(0);
  v6[39] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v6[40] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[41] = swift_task_alloc(v17);
  v6[42] = swift_task_alloc(v17);
  v6[43] = swift_task_alloc(v17);
  v18 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100263338) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[44] = swift_task_alloc(v18);
  v6[45] = swift_task_alloc(v18);
  return swift_task_switch(sub_10013BB2C, 0, 0);
}

void sub_10013BB2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t ObjectType;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  int64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t (*v153)(uint64_t, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t **v163;
  unint64_t v164;
  int64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  os_log_type_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182[2];

  v137 = v0 + 7;
  v148 = v0 + 11;
  v134 = v0 + 14;
  v133 = v0 + 15;
  v145 = v0 + 17;
  v146 = v0 + 16;
  v143 = v0 + 19;
  v144 = v0 + 18;
  v141 = v0 + 21;
  v142 = v0 + 20;
  v1 = v0[40];
  v2 = v0[36];
  v3 = v0[23];
  v4 = v0[24];
  v135 = v3 + 64;
  v139 = v0[30];
  v140 = v0[33];
  v5 = -1;
  v6 = -1 << *(_BYTE *)(v3 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(63 - v6) >> 6;
  v147 = v4 & 0xC000000000000001;
  v9 = v4 & 0xFFFFFFFFFFFFFF8;
  v150 = v0[24];
  if (v4 < 0)
    v9 = v0[24];
  v136 = v9;
  v163 = (uint64_t **)(v0 + 22);
  v138 = v8;
  v132 = v8 - 1;
  v149 = v0[23];
  swift_bridgeObjectRetain(v3);
  v164 = 0;
  v162 = v1;
  v166 = v2;
  while (1)
  {
    if (v7)
    {
      v20 = __clz(__rbit64(v7));
      v21 = (v7 - 1) & v7;
      v22 = v20 | (v164 << 6);
      v23 = v180;
LABEL_10:
      v24 = v23[44];
      v25 = v23[35];
      (*(void (**)(uint64_t, unint64_t, _QWORD))(v1 + 16))(v24, *(_QWORD *)(v149 + 48) + *(_QWORD *)(v1 + 72) * v22, v23[39]);
      v26 = *(_QWORD *)(v149 + 56) + *(_QWORD *)(v2 + 72) * v22;
      v27 = sub_100037A5C(&qword_100263340);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v2 + 16))(v24 + *(int *)(v27 + 48), v26, v25);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v24, 0, 1, v27);
      goto LABEL_29;
    }
    v28 = v164 + 1;
    v23 = v180;
    if (__OFADD__(v164, 1))
    {
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      return;
    }
    if (v28 < v138)
    {
      v29 = *(_QWORD *)(v135 + 8 * v28);
      if (v29)
        goto LABEL_14;
      v30 = v164 + 2;
      ++v164;
      if (v28 + 1 < v138)
      {
        v29 = *(_QWORD *)(v135 + 8 * v30);
        if (v29)
          goto LABEL_17;
        v164 = v28 + 1;
        if (v28 + 2 < v138)
        {
          v29 = *(_QWORD *)(v135 + 8 * (v28 + 2));
          if (v29)
          {
            v28 += 2;
            goto LABEL_14;
          }
          v30 = v28 + 3;
          v164 = v28 + 2;
          if (v28 + 3 < v138)
          {
            v29 = *(_QWORD *)(v135 + 8 * v30);
            if (v29)
            {
LABEL_17:
              v28 = v30;
LABEL_14:
              v21 = (v29 - 1) & v29;
              v22 = __clz(__rbit64(v29)) + (v28 << 6);
              v164 = v28;
              goto LABEL_10;
            }
            while (1)
            {
              v28 = v30 + 1;
              if (__OFADD__(v30, 1))
                goto LABEL_76;
              if (v28 >= v138)
                break;
              v29 = *(_QWORD *)(v135 + 8 * v28);
              ++v30;
              if (v29)
                goto LABEL_14;
            }
            v164 = v132;
          }
        }
      }
    }
    v31 = v180[44];
    v32 = sub_100037A5C(&qword_100263340);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
    v21 = 0;
LABEL_29:
    v33 = v23[45];
    sub_10000EF6C(v23[44], v33, &qword_100263338);
    v34 = sub_100037A5C(&qword_100263340);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v33, 1, v34) == 1)
      break;
    v177 = v21;
    v35 = v23[38];
    v36 = v23[35];
    v37 = v23[45] + *(int *)(v34 + 48);
    (*(void (**)(_QWORD))(v1 + 32))(v23[43]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v35, v37, v36);
    if (qword_10025F988 != -1)
      swift_once(&qword_10025F988, sub_100139A94);
    v38 = v23[42];
    v39 = v23[43];
    v40 = v23[41];
    v42 = v23[38];
    v41 = v23[39];
    v43 = v23[37];
    v44 = v23[35];
    v169 = v23[24];
    v173 = v23[25];
    v45 = type metadata accessor for Logger(0);
    sub_100037A9C(v45, (uint64_t)qword_10027ADC0);
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    v46(v38, v39, v41);
    v46(v40, v39, v41);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 16))(v43, v42, v44);
    swift_bridgeObjectRetain_n(v169, 2);
    v47 = swift_bridgeObjectRetain_n(v173, 2);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.default.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = swift_slowAlloc(62, -1);
      v170 = swift_slowAlloc(128, -1);
      v182[0] = v170;
      *(_DWORD *)v50 = 134219267;
      v174 = v49;
      v160 = v48;
      if (v147)
        v51 = __CocoaSet.count.getter(v136);
      else
        v51 = *(_QWORD *)(v150 + 16);
      v52 = v180[42];
      v161 = v180[43];
      v155 = v180[41];
      v53 = v180[39];
      v157 = v180[37];
      v54 = v180[34];
      v158 = v180[35];
      v159 = v180[38];
      v152 = v180[32];
      v154 = v180[31];
      v156 = v180[29];
      v56 = v180[24];
      v55 = v180[25];
      swift_bridgeObjectRelease(v56);
      v180[16] = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v146, v145, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease(v56);
      *(_WORD *)(v50 + 12) = 2082;
      type metadata accessor for UUID(0);
      v57 = swift_bridgeObjectRetain(v55);
      v58 = Array.description.getter(v57);
      v60 = v59;
      swift_bridgeObjectRelease(v55);
      v180[17] = sub_10002BA84(v58, v60, v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v145, v144, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease_n(v55, 2);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v50 + 22) = 2160;
      v180[18] = 1752392040;
      v61 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v144, v143, v50 + 24, v50 + 32);
      *(_WORD *)(v50 + 32) = 2081;
      v62 = Friend.handle.getter(v61);
      v63 = Handle.identifier.getter(v62);
      v65 = v64;
      (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v54, v152);
      v180[19] = sub_10002BA84(v63, v65, v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v143, v142, v50 + 34, v50 + 42);
      swift_bridgeObjectRelease(v65);
      v153 = *(uint64_t (**)(uint64_t, uint64_t))(v162 + 8);
      v66 = v153(v52, v53);
      *(_WORD *)(v50 + 42) = 2082;
      Friend.type.getter(v66);
      v67 = sub_100018A7C(&qword_100261D30, 255, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
      v68 = dispatch thunk of CustomStringConvertible.description.getter(v156, v67);
      v70 = v69;
      (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v154, v156);
      v180[20] = sub_10002BA84(v68, v70, v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v142, v141, v50 + 44, v50 + 52);
      swift_bridgeObjectRelease(v70);
      v1 = v162;
      v153(v155, v53);
      *(_WORD *)(v50 + 52) = 2082;
      v71 = sub_100018A7C(&qword_100263348, 255, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipAction, (uint64_t)&protocol conformance descriptor for FriendshipAction);
      v72 = dispatch thunk of CustomStringConvertible.description.getter(v158, v71);
      v74 = v73;
      v180[21] = sub_10002BA84(v72, v73, v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v141, v163, v50 + 54, v50 + 62);
      swift_bridgeObjectRelease(v74);
      v2 = v166;
      v75 = *(void (**)(uint64_t, uint64_t))(v166 + 8);
      v75(v157, v158);
      _os_log_impl((void *)&_mh_execute_header, v160, v174, "Send friends update to all clients:\nclients[%ld]: %{public}s\nhandle: %{private,mask.hash}s\ntype: %{public}s\nby: %{public}s", (uint8_t *)v50, 0x3Eu);
      swift_arrayDestroy(v170, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v170, -1, -1);
      swift_slowDealloc(v50, -1, -1);

      v75(v159, v158);
      v153(v161, v53);
    }
    else
    {
      v10 = v23[41];
      v11 = v23[42];
      v12 = v23[39];
      v168 = v23[38];
      v172 = v23[43];
      v13 = v23[37];
      v14 = v23[35];
      v17 = v23 + 24;
      v16 = v23[24];
      v15 = v17[1];

      swift_bridgeObjectRelease(v16);
      v18 = *(void (**)(uint64_t, uint64_t))(v166 + 8);
      v18(v13, v14);
      v1 = v162;
      v19 = *(void (**)(uint64_t, uint64_t))(v162 + 8);
      v19(v10, v12);
      v19(v11, v12);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease_n(v15, 2);
      v18(v168, v14);
      v19(v172, v12);
      v2 = v166;
    }
    v7 = v177;
  }
  swift_release(v23[23]);
  v76 = v23[24];
  if (v147)
  {
    swift_bridgeObjectRetain(v76);
    v77 = __CocoaSet.makeIterator()(v136);
    v78 = type metadata accessor for FriendshipServiceClient();
    v80 = sub_100018A7C((unint64_t *)&unk_100264830, v79, (uint64_t (*)(uint64_t))type metadata accessor for FriendshipServiceClient, (uint64_t)&unk_1001F6EB0);
    v81 = Set.Iterator.init(_cocoa:)(v77, v78, v80);
    v82 = v23[2];
    v167 = v23[3];
    v83 = v23[4];
    v84 = v23[5];
    v85 = v23[6];
  }
  else
  {
    v86 = -1 << *(_BYTE *)(v76 + 32);
    v167 = v76 + 56;
    v87 = ~v86;
    v88 = -v86;
    if (v88 < 64)
      v89 = ~(-1 << v88);
    else
      v89 = -1;
    v85 = v89 & *(_QWORD *)(v76 + 56);
    swift_bridgeObjectRetain(v76);
    v83 = v87;
    v84 = 0;
    v82 = v150;
  }
  v165 = (unint64_t)(v83 + 64) >> 6;
  v151 = v82;
  while (v82 < 0)
  {
    v95 = __CocoaSet.Iterator.next()(v81);
    if (!v95)
      goto LABEL_73;
    v96 = v95;
    *v133 = v95;
    v97 = type metadata accessor for FriendshipServiceClient();
    swift_unknownObjectRetain(v96);
    swift_dynamicCast(v134, v133, (char *)&type metadata for Swift.AnyObject + 8, v97, 7);
    v98 = *v134;
    swift_unknownObjectRelease(v96);
    v94 = v84;
    v92 = v85;
    if (!v98)
      goto LABEL_73;
LABEL_66:
    v175 = v92;
    v178 = v94;
    v103 = v23[27];
    v102 = v23[28];
    v104 = v180[26];
    v105 = v180[23];
    v106 = type metadata accessor for TaskPriority(0);
    v107 = *(_QWORD *)(v106 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v102, 1, 1, v106);
    v108 = (_QWORD *)swift_allocObject(&unk_100254458, 56, 7);
    v108[2] = 0;
    v109 = v108 + 2;
    v108[3] = 0;
    v108[4] = v98;
    v108[5] = v105;
    v108[6] = v104;
    v23 = v180;
    sub_10000E37C(v102, v103, (uint64_t *)&unk_100265180);
    LODWORD(v103) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v103, 1, v106);
    swift_bridgeObjectRetain(v105);
    swift_retain(v98);
    v111 = v180[27];
    if ((_DWORD)v103 == 1)
    {
      sub_1000087A0(v180[27], (uint64_t *)&unk_100265180);
      v112 = 0;
      v113 = *v109;
      if (*v109)
        goto LABEL_68;
    }
    else
    {
      v119 = TaskPriority.rawValue.getter(v110);
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v111, v106);
      v112 = v119;
      v113 = *v109;
      if (*v109)
      {
LABEL_68:
        v114 = v108[3];
        ObjectType = swift_getObjectType(v113);
        swift_unknownObjectRetain(v113);
        v116 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v114);
        v118 = v117;
        swift_unknownObjectRelease(v113);
        goto LABEL_71;
      }
    }
    v116 = 0;
    v118 = 0;
LABEL_71:
    v120 = **v163;
    v121 = (_QWORD *)(v118 | v116);
    if (v118 | v116)
    {
      v121 = v137;
      *v137 = 0;
      v137[1] = 0;
      v180[9] = v116;
      v180[10] = v118;
    }
    v90 = v180[28];
    v180[11] = 1;
    v180[12] = v121;
    v180[13] = v120;
    v91 = swift_task_create(v112 | 0x3100, v148, (char *)&type metadata for () + 8, &unk_100264920, v108);
    swift_release(v98);
    swift_release(v91);
    v81 = sub_1000087A0(v90, (uint64_t *)&unk_100265180);
    v85 = v175;
    v84 = v178;
    v82 = v151;
  }
  if (v85)
  {
    v92 = (v85 - 1) & v85;
    v93 = __clz(__rbit64(v85)) | (v84 << 6);
    v94 = v84;
    goto LABEL_65;
  }
  v99 = v84 + 1;
  if (__OFADD__(v84, 1))
    goto LABEL_75;
  if (v99 >= v165)
    goto LABEL_73;
  v100 = *(_QWORD *)(v167 + 8 * v99);
  v94 = v84 + 1;
  if (v100)
    goto LABEL_64;
  v94 = v84 + 2;
  if (v84 + 2 >= v165)
    goto LABEL_73;
  v100 = *(_QWORD *)(v167 + 8 * v94);
  if (v100)
    goto LABEL_64;
  v94 = v84 + 3;
  if (v84 + 3 >= v165)
    goto LABEL_73;
  v100 = *(_QWORD *)(v167 + 8 * v94);
  if (v100)
    goto LABEL_64;
  v94 = v84 + 4;
  if (v84 + 4 >= v165)
    goto LABEL_73;
  v100 = *(_QWORD *)(v167 + 8 * v94);
  if (v100)
  {
LABEL_64:
    v92 = (v100 - 1) & v100;
    v93 = __clz(__rbit64(v100)) + (v94 << 6);
LABEL_65:
    v98 = *(_QWORD *)(*(_QWORD *)(v82 + 48) + 8 * v93);
    swift_retain(v98);
    if (!v98)
      goto LABEL_73;
    goto LABEL_66;
  }
  v101 = v84 + 5;
  while (v165 != v101)
  {
    v100 = *(_QWORD *)(v167 + 8 * v101++);
    if (v100)
    {
      v94 = v101 - 1;
      v82 = v151;
      goto LABEL_64;
    }
  }
LABEL_73:
  v123 = v23[44];
  v122 = v23[45];
  v125 = v23[42];
  v124 = v23[43];
  v126 = v23[41];
  v127 = v23[38];
  v128 = v23;
  v171 = v23[37];
  v176 = v23[34];
  v129 = v23[31];
  v131 = v23 + 27;
  v130 = v23[27];
  v179 = v129;
  v181 = v131[1];
  sub_100086D50(v151);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v171);
  swift_task_dealloc(v176);
  swift_task_dealloc(v179);
  swift_task_dealloc(v181);
  swift_task_dealloc(v130);
  ((void (*)(void))v128[1])();
}

uint64_t sub_10013C854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  v7 = type metadata accessor for UUID(0);
  v6[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[8] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[9] = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[10] = swift_task_alloc(v10);
  v6[11] = swift_task_alloc(v10);
  v6[12] = swift_task_alloc(v10);
  return swift_task_switch(sub_10013C8D8, 0, 0);
}

uint64_t sub_10013C8D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  static Task<>.checkCancellation()(a1);
  v4 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                      + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
  v2 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                  + 1));
  *(_QWORD *)(v1 + 104) = v2;
  *v2 = v1;
  v2[1] = sub_10013C98C;
  return v4(*(_QWORD *)(v1 + 96));
}

uint64_t sub_10013C98C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_10013C9E0, 0, 0);
}

uint64_t sub_10013C9E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  v2 = v0[11];
  v1 = v0[12];
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[7];
  v6 = v0[4];
  v17 = v0[5];
  v18 = v0[6];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[14] = v7;
  v7(v2, v1, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_100254480, v12 + 8, v8 | 7);
  v0[15] = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v13 + v9, v2, v5);
  *(_QWORD *)(v13 + v10) = v6;
  *(_QWORD *)(v13 + v11) = v17;
  *(_QWORD *)(v13 + v12) = v18;
  v14 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v6);
  swift_bridgeObjectRetain(v17);
  v15 = (_QWORD *)swift_task_alloc(v14);
  v0[16] = v15;
  *v15 = v0;
  v15[1] = sub_10013CB14;
  return withTimeout<A>(_:block:)(v15, 0x8AC7230489E80000, 0, &unk_100264930, v13, (char *)&type metadata for () + 8);
}

uint64_t sub_10013CB14()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10013CBD8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 120));
    v4 = sub_10013CB80;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10013CB80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013CBD8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  os_log_type_t type;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  swift_release(*(_QWORD *)(v0 + 120));
  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027ADC0);
  v2(v4, v3, v5);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 136);
  v12 = *(_QWORD *)(v0 + 96);
  v13 = *(_QWORD *)(v0 + 80);
  v15 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  if (v10)
  {
    v31 = *(_QWORD *)(v0 + 96);
    v16 = swift_slowAlloc(22, -1);
    v29 = (uint64_t *)swift_slowAlloc(8, -1);
    v30 = swift_slowAlloc(32, -1);
    v32 = v30;
    *(_DWORD *)v16 = 136446466;
    type = v9;
    v17 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    v20 = v19;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v18, v19, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v20);
    v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v21(v13, v15);
    *(_WORD *)(v16 + 12) = 2114;
    swift_errorRetain(v11);
    v22 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 24) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v16 + 14, v16 + 22);
    *v29 = v22;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Error from client %{public}s error: %{public}@", (uint8_t *)v16, 0x16u);
    v23 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v29, 1, v23);
    swift_slowDealloc(v29, -1, -1);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease(v11);
    v21(v31, v15);
  }
  else
  {

    swift_errorRelease(v11);
    swift_errorRelease(v11);
    v24 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v24(v13, v15);
    swift_errorRelease(v11);
    v24(v12, v15);
  }
  v25 = *(_QWORD *)(v0 + 88);
  v26 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013CEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[9] = swift_task_alloc(v7);
  v4[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_10013CF54, 0, 0);
}

uint64_t sub_10013CF54()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = v0[4];
  v2 = v0[10];
  v3 = v0[7];
  v4 = v0[8];
  v5 = type metadata accessor for Logger(0);
  v0[11] = sub_100037A9C(v5, (uint64_t)qword_10027ADC0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[12] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[10];
  v12 = v0[7];
  v13 = v0[8];
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v22 = v21;
    *(_DWORD *)v14 = 136446210;
    v15 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v18 = v17;
    v0[3] = sub_10002BA84(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sending friends update to client %{public}s", v14, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
  }

  v0[13] = v19;
  return swift_task_switch(sub_10013D168, v0[5], 0);
}

uint64_t sub_10013D168()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 112) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  *(_QWORD *)(v0 + 120) = v2;
  *v2 = v0;
  v2[1] = sub_10013D1F8;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_10013D1F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 40);
    v5 = sub_1000C9020;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 40);
    swift_task_dealloc(*(_QWORD *)(v2 + 112));
    v5 = sub_10013D26C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10013D26C()
{
  return swift_task_switch(sub_10013D280, 0, 0);
}

uint64_t sub_10013D280()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 96))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    v14(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully sent friends update to client %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 104))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  }

  v12 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013D43C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated17FriendshipService_serviceDescription, &qword_1002626D0);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated17FriendshipService_trampoline));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated17FriendshipService_connectionPool));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated17FriendshipService_friendUpdateQueue));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated17FriendshipService_xpcSessionManager));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated17FriendshipService_task));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10013D4C8()
{
  uint64_t v0;

  sub_10013D43C();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10013D4E0()
{
  return type metadata accessor for FriendshipService(0);
}

uint64_t type metadata accessor for FriendshipService(uint64_t a1)
{
  uint64_t result;

  result = qword_100264678;
  if (!qword_100264678)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FriendshipService);
  return result;
}

void sub_10013D524(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[1] = &unk_1001F6D70;
  sub_1000C926C(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1001F6D88;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = &unk_1001F6D88;
    swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
  }
}

uint64_t sub_10013D5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.initialLaunchProcessing()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for FriendshipService(0);
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_10013D624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.migrate(from:to:)[1]);
  *(_QWORD *)(v4 + 16) = v8;
  v9 = type metadata accessor for FriendshipService(0);
  *v8 = v4;
  v8[1] = sub_10003BF7C;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_10013D6A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for FriendshipService(0);
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_10013D708()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10026468C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_100139CF4();
}

uint64_t sub_10013D74C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.run()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for FriendshipService(0);
  *v4 = v2;
  v4[1] = sub_1000087DC;
  return ActorServiceProtocol.run()(v5, a2);
}

uint64_t sub_10013D7B0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for FriendshipService(0);
  v1 = sub_100018A7C(&qword_100261ED8, 255, type metadata accessor for FriendshipService, (uint64_t)&unk_1001F6DC8);
  return ActorServiceProtocol.description.getter(v0, v1);
}

uint64_t sub_10013D804()
{
  return sub_100018A7C(&qword_1002647D8, 255, type metadata accessor for FriendshipService, (uint64_t)&unk_1001F6DA0);
}

uint64_t sub_10013D834()
{
  return sub_100018A7C(qword_1002647E0, 255, type metadata accessor for FriendshipService, (uint64_t)&unk_1001F6E28);
}

uint64_t sub_10013D864(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(&qword_100264828, a2, (uint64_t (*)(uint64_t))type metadata accessor for FriendshipServiceClient, (uint64_t)&unk_1001F6E88);
}

uint64_t sub_10013D890(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C((unint64_t *)&unk_100264830, a2, (uint64_t (*)(uint64_t))type metadata accessor for FriendshipServiceClient, (uint64_t)&unk_1001F6EB0);
}

uint64_t sub_10013D8BC(uint64_t a1)
{
  uint64_t v1;

  return sub_1001388A8(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), (uint64_t)&unk_1002542A0, (uint64_t)&unk_100264850);
}

uint64_t sub_10013D8E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_10026484C);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  return swift_task_switch(sub_1001389A8, 0, 0);
}

uint64_t sub_10013D954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_10026485C);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 88) = v2;
  *(_OWORD *)(v3 + 72) = v4;
  return swift_task_switch(sub_100138D3C, 0, 0);
}

uint64_t sub_10013D9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  unint64_t v6;

  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[20] = swift_task_alloc(v6);
  v5[21] = swift_task_alloc(v6);
  return swift_task_switch(sub_10013DA2C, 0, 0);
}

void sub_10013DA2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  id v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;

  v1 = *(_QWORD *)(v0 + 136);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 136);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 136));
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for FriendshipServiceClient();
    v6 = sub_100018A7C((unint64_t *)&unk_100264830, v5, (uint64_t (*)(uint64_t))type metadata accessor for FriendshipServiceClient, (uint64_t)&unk_1001F6EB0);
    v7 = Set.Iterator.init(_cocoa:)(v3, v4, v6);
    v1 = *(_QWORD *)(v0 + 16);
    v51 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v11 = -1 << *(_BYTE *)(v1 + 32);
    v51 = v1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain(v1);
    v9 = 0;
  }
  v48 = (uint64_t *)(v0 + 120);
  v49 = (uint64_t *)(v0 + 112);
  v50 = (unint64_t)(v8 + 64) >> 6;
  v52 = v1;
  while (v1 < 0)
  {
    v19 = __CocoaSet.Iterator.next()(v7);
    if (!v19)
      goto LABEL_40;
    v20 = v19;
    *v48 = v19;
    v21 = type metadata accessor for FriendshipServiceClient();
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(v49, v48, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = *v49;
    swift_unknownObjectRelease(v20);
    v18 = v9;
    v16 = v10;
    if (!v22)
      goto LABEL_40;
LABEL_33:
    v53 = v16;
    v27 = *(_QWORD *)(v0 + 160);
    v26 = *(_QWORD *)(v0 + 168);
    v28 = type metadata accessor for TaskPriority(0);
    v29 = *(_QWORD *)(v28 - 8);
    v54 = *(_OWORD *)(v0 + 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v26, 1, 1, v28);
    v30 = swift_allocObject(&unk_100254570, 56, 7);
    *(_QWORD *)(v30 + 16) = 0;
    v31 = (uint64_t *)(v30 + 16);
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = v22;
    *(_OWORD *)(v30 + 40) = v54;
    sub_10000E37C(v26, v27, (uint64_t *)&unk_100265180);
    LODWORD(v27) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28);
    swift_retain(v22);
    v32 = (id)v54;
    v34 = *(_QWORD *)(v0 + 160);
    if ((_DWORD)v27 == 1)
    {
      sub_1000087A0(*(_QWORD *)(v0 + 160), (uint64_t *)&unk_100265180);
      v35 = 0;
      v36 = *v31;
      if (*v31)
        goto LABEL_35;
    }
    else
    {
      v42 = TaskPriority.rawValue.getter(v33);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v34, v28);
      v35 = v42;
      v36 = *v31;
      if (*v31)
      {
LABEL_35:
        v37 = *(_QWORD *)(v30 + 24);
        ObjectType = swift_getObjectType(v36);
        swift_unknownObjectRetain(v36);
        v39 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v37);
        v41 = v40;
        swift_unknownObjectRelease(v36);
        goto LABEL_38;
      }
    }
    v39 = 0;
    v41 = 0;
LABEL_38:
    v43 = **(_QWORD **)(v0 + 128);
    v44 = swift_allocObject(&unk_100254598, 32, 7);
    *(_QWORD *)(v44 + 16) = &unk_1002649D0;
    *(_QWORD *)(v44 + 24) = v30;
    v45 = v41 | v39;
    if (v41 | v39)
    {
      v45 = v0 + 56;
      *(_QWORD *)(v0 + 56) = 0;
      *(_QWORD *)(v0 + 64) = 0;
      *(_QWORD *)(v0 + 72) = v39;
      *(_QWORD *)(v0 + 80) = v41;
    }
    v14 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v0 + 88) = 1;
    *(_QWORD *)(v0 + 96) = v45;
    *(_QWORD *)(v0 + 104) = v43;
    v15 = swift_task_create(v35 | 0x3100, v0 + 88, (char *)&type metadata for () + 8, &unk_1002649D8, v44);
    swift_release(v22);
    swift_release(v15);
    v7 = sub_1000087A0(v14, (uint64_t *)&unk_100265180);
    v9 = v18;
    v10 = v53;
    v1 = v52;
  }
  if (v10)
  {
    v16 = (v10 - 1) & v10;
    v17 = __clz(__rbit64(v10)) | (v9 << 6);
    v18 = v9;
LABEL_32:
    v22 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v17);
    swift_retain(v22);
    if (!v22)
      goto LABEL_40;
    goto LABEL_33;
  }
  v23 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v23 >= v50)
      goto LABEL_40;
    v24 = *(_QWORD *)(v51 + 8 * v23);
    v18 = v9 + 1;
    if (!v24)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v50)
        goto LABEL_40;
      v24 = *(_QWORD *)(v51 + 8 * v18);
      if (!v24)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v50)
          goto LABEL_40;
        v24 = *(_QWORD *)(v51 + 8 * v18);
        if (!v24)
        {
          v18 = v9 + 4;
          if (v9 + 4 >= v50)
            goto LABEL_40;
          v24 = *(_QWORD *)(v51 + 8 * v18);
          if (!v24)
          {
            v25 = v9 + 5;
            while (v50 != v25)
            {
              v24 = *(_QWORD *)(v51 + 8 * v25++);
              if (v24)
              {
                v18 = v25 - 1;
                goto LABEL_31;
              }
            }
LABEL_40:
            v47 = *(_QWORD *)(v0 + 160);
            v46 = *(_QWORD *)(v0 + 168);
            sub_100086D50(v1);
            swift_task_dealloc(v46);
            swift_task_dealloc(v47);
            (*(void (**)(void))(v0 + 8))();
            return;
          }
        }
      }
    }
LABEL_31:
    v16 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v18 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_10013DECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  return swift_task_switch(sub_10013DEE4, a4, 0);
}

uint64_t sub_10013DEE4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10013DF74;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_10013DF74()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = sub_10013DFE8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 24);
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v5 = sub_10004101C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10013DFE8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return swift_task_switch(sub_10013E024, 0, 0);
}

uint64_t sub_10013E024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ADC0);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 56);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    v10 = _convertErrorToNSError(_:)(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "didDiscover error: %{public}@", v8, 0xCu);
    v11 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 56));
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013E1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  unint64_t v6;

  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[20] = swift_task_alloc(v6);
  v5[21] = swift_task_alloc(v6);
  return swift_task_switch(sub_10013E240, 0, 0);
}

void sub_10013E240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  id v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;

  v1 = *(_QWORD *)(v0 + 136);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 136);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 136));
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for FriendshipServiceClient();
    v6 = sub_100018A7C((unint64_t *)&unk_100264830, v5, (uint64_t (*)(uint64_t))type metadata accessor for FriendshipServiceClient, (uint64_t)&unk_1001F6EB0);
    v7 = Set.Iterator.init(_cocoa:)(v3, v4, v6);
    v1 = *(_QWORD *)(v0 + 16);
    v51 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v11 = -1 << *(_BYTE *)(v1 + 32);
    v51 = v1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain(v1);
    v9 = 0;
  }
  v48 = (uint64_t *)(v0 + 120);
  v49 = (uint64_t *)(v0 + 112);
  v50 = (unint64_t)(v8 + 64) >> 6;
  v52 = v1;
  while (v1 < 0)
  {
    v19 = __CocoaSet.Iterator.next()(v7);
    if (!v19)
      goto LABEL_40;
    v20 = v19;
    *v48 = v19;
    v21 = type metadata accessor for FriendshipServiceClient();
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(v49, v48, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = *v49;
    swift_unknownObjectRelease(v20);
    v18 = v9;
    v16 = v10;
    if (!v22)
      goto LABEL_40;
LABEL_33:
    v53 = v16;
    v27 = *(_QWORD *)(v0 + 160);
    v26 = *(_QWORD *)(v0 + 168);
    v28 = type metadata accessor for TaskPriority(0);
    v29 = *(_QWORD *)(v28 - 8);
    v54 = *(_OWORD *)(v0 + 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v26, 1, 1, v28);
    v30 = swift_allocObject(&unk_100254520, 56, 7);
    *(_QWORD *)(v30 + 16) = 0;
    v31 = (uint64_t *)(v30 + 16);
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = v22;
    *(_OWORD *)(v30 + 40) = v54;
    sub_10000E37C(v26, v27, (uint64_t *)&unk_100265180);
    LODWORD(v27) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28);
    swift_retain(v22);
    v32 = (id)v54;
    v34 = *(_QWORD *)(v0 + 160);
    if ((_DWORD)v27 == 1)
    {
      sub_1000087A0(*(_QWORD *)(v0 + 160), (uint64_t *)&unk_100265180);
      v35 = 0;
      v36 = *v31;
      if (*v31)
        goto LABEL_35;
    }
    else
    {
      v42 = TaskPriority.rawValue.getter(v33);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v34, v28);
      v35 = v42;
      v36 = *v31;
      if (*v31)
      {
LABEL_35:
        v37 = *(_QWORD *)(v30 + 24);
        ObjectType = swift_getObjectType(v36);
        swift_unknownObjectRetain(v36);
        v39 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v37);
        v41 = v40;
        swift_unknownObjectRelease(v36);
        goto LABEL_38;
      }
    }
    v39 = 0;
    v41 = 0;
LABEL_38:
    v43 = **(_QWORD **)(v0 + 128);
    v44 = swift_allocObject(&unk_100254548, 32, 7);
    *(_QWORD *)(v44 + 16) = &unk_1002649A8;
    *(_QWORD *)(v44 + 24) = v30;
    v45 = v41 | v39;
    if (v41 | v39)
    {
      v45 = v0 + 56;
      *(_QWORD *)(v0 + 56) = 0;
      *(_QWORD *)(v0 + 64) = 0;
      *(_QWORD *)(v0 + 72) = v39;
      *(_QWORD *)(v0 + 80) = v41;
    }
    v14 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v0 + 88) = 1;
    *(_QWORD *)(v0 + 96) = v45;
    *(_QWORD *)(v0 + 104) = v43;
    v15 = swift_task_create(v35 | 0x3100, v0 + 88, (char *)&type metadata for () + 8, &unk_100260180, v44);
    swift_release(v22);
    swift_release(v15);
    v7 = sub_1000087A0(v14, (uint64_t *)&unk_100265180);
    v9 = v18;
    v10 = v53;
    v1 = v52;
  }
  if (v10)
  {
    v16 = (v10 - 1) & v10;
    v17 = __clz(__rbit64(v10)) | (v9 << 6);
    v18 = v9;
LABEL_32:
    v22 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v17);
    swift_retain(v22);
    if (!v22)
      goto LABEL_40;
    goto LABEL_33;
  }
  v23 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v23 >= v50)
      goto LABEL_40;
    v24 = *(_QWORD *)(v51 + 8 * v23);
    v18 = v9 + 1;
    if (!v24)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v50)
        goto LABEL_40;
      v24 = *(_QWORD *)(v51 + 8 * v18);
      if (!v24)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v50)
          goto LABEL_40;
        v24 = *(_QWORD *)(v51 + 8 * v18);
        if (!v24)
        {
          v18 = v9 + 4;
          if (v9 + 4 >= v50)
            goto LABEL_40;
          v24 = *(_QWORD *)(v51 + 8 * v18);
          if (!v24)
          {
            v25 = v9 + 5;
            while (v50 != v25)
            {
              v24 = *(_QWORD *)(v51 + 8 * v25++);
              if (v24)
              {
                v18 = v25 - 1;
                goto LABEL_31;
              }
            }
LABEL_40:
            v47 = *(_QWORD *)(v0 + 160);
            v46 = *(_QWORD *)(v0 + 168);
            sub_100086D50(v1);
            swift_task_dealloc(v46);
            swift_task_dealloc(v47);
            (*(void (**)(void))(v0 + 8))();
            return;
          }
        }
      }
    }
LABEL_31:
    v16 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v18 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_10013E6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  return swift_task_switch(sub_10013E6F8, a4, 0);
}

uint64_t sub_10013E6F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withOnceCheckedThrowingContinuation<A>(function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10013E788;
  return withOnceCheckedThrowingContinuation<A>(function:_:)();
}

uint64_t sub_10013E788()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = sub_10013E7FC;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 24);
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v5 = sub_100044CD4;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10013E7FC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return swift_task_switch(sub_10013F9CC, 0, 0);
}

uint64_t sub_10013E838(uint64_t a1)
{
  return sub_100139644(a1);
}

uint64_t sub_10013E850(uint64_t a1)
{
  return sub_100139844(a1);
}

uint64_t sub_10013E868(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10013E878(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10013E880(uint64_t a1)
{
  uint64_t v1;

  return sub_1001388A8(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), (uint64_t)&unk_100254318, (uint64_t)&unk_100264870);
}

uint64_t sub_10013E8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_10026486C);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  return swift_task_switch(sub_1001382DC, 0, 0);
}

uint64_t sub_10013E918()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013E94C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_10026487C);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 88) = v2;
  *(_OWORD *)(v3 + 72) = v4;
  return swift_task_switch(sub_100138670, 0, 0);
}

uint64_t sub_10013E9B4(uint64_t a1)
{
  uint64_t v1;

  return sub_100138F40(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10013E9BC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10013E9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_10026488C);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  return swift_task_switch(sub_100139044, 0, 0);
}

uint64_t sub_10013EA60()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013EA94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_10026489C);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 96) = v2;
  *(_OWORD *)(v3 + 80) = v4;
  return swift_task_switch(sub_1001393DC, 0, 0);
}

unint64_t sub_10013EAFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002648A8;
  if (!qword_1002648A8)
  {
    v1 = sub_10003C1FC(&qword_1002633B8);
    sub_100018A7C(&qword_100264120, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
    sub_100018A7C(&qword_1002648B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipAction, (uint64_t)&protocol conformance descriptor for FriendshipAction);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1002648A8);
  }
  return result;
}

uint64_t sub_10013EBA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_1002648BC);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_1000087DC;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch(sub_10013B37C, 0, 0);
}

uint64_t sub_10013EC0C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_task_switch(sub_10013EC24, 0, 0);
}

uint64_t sub_10013EC24()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of FM.XPCSession.connection.getter
                         + async function pointer to dispatch thunk of FM.XPCSession.connection.getter);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.connection.getter
                                  + 1));
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_10013EC84;
  return v3();
}

uint64_t sub_10013EC84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10013ECE0, 0, 0);
}

uint64_t sub_10013ECE0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = *(void **)(v0 + 40);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ADC0);
  v3 = Logger.logObject.getter(v1);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(void **)(v0 + 40);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = v6;
    v10 = objc_msgSend(v9, "description");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    *(_QWORD *)(v0 + 16) = sub_10002BA84(v11, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v13);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Friendship Service: removed connection: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013EEC0(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 32) = a2;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_10013EEDC, 0, 0);
}

uint64_t sub_10013EEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 24);
    swift_errorRetain(v1);
    if (qword_10025F988 != -1)
      swift_once(&qword_10025F988, sub_100139A94);
    v2 = type metadata accessor for Logger(0);
    sub_100037A9C(v2, (uint64_t)qword_10027ADC0);
    swift_errorRetain(v1);
    v3 = swift_errorRetain(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 24);
    if (v6)
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      v13 = swift_slowAlloc(32, -1);
      v14 = v13;
      *(_DWORD *)v8 = 136446466;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000017, 0x80000001001FFF70, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2114;
      swift_errorRetain(v1);
      v10 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(_QWORD *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 14, v8 + 22);
      *v9 = v10;
      sub_10007E9BC(v7, 1);
      sub_10007E9BC(v7, 1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error: %{public}@", (uint8_t *)v8, 0x16u);
      v11 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      sub_10007E9BC(v7, 1);
    }
    else
    {
      sub_10007E9BC(*(_QWORD *)(v0 + 24), 1);
      sub_10007E9BC(v7, 1);
      swift_errorRelease(v1);

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013F148()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013F174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_1002648D4);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 64) = v2;
  *(_OWORD *)(v3 + 48) = v4;
  return swift_task_switch(sub_10013B458, 0, 0);
}

uint64_t sub_10013F1DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_10026490C);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10003BF7C;
  return sub_10013B9B8(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_10013F25C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10013F290(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10026491C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003BF7C;
  return sub_10013C854(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10013F310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_10013F3A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + v6);
  v9 = *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_10026492C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_10013CEE0(a1, v7, v8, v9);
}

uint64_t sub_10013F45C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_1002626D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013F4A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013F4C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10026495C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  return sub_10013AAC0(v2);
}

uint64_t sub_10013F518()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013F544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10026496C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  v4 = (_QWORD *)swift_task_alloc(dword_10026469C);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10003BF7C;
  v4[4] = v2;
  return swift_task_switch(sub_10013AF08, v2, 0);
}

uint64_t sub_10013F5C4()
{
  return sub_10013F7EC(48);
}

uint64_t sub_10013F5CC()
{
  int8x16_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int8x16_t v5;

  v2 = (_QWORD *)swift_task_alloc(dword_10026497C);
  v5 = v0[2];
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  v3 = swift_task_alloc(dword_100264694);
  v2[2] = v3;
  *(_QWORD *)v3 = v2;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(int8x16_t *)(v3 + 24) = vextq_s8(v5, v5, 8uLL);
  return swift_task_switch(sub_10003D42C, v5.i64[0], 0);
}

uint64_t sub_10013F660(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_100264994);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_10003BF7C;
  return sub_10013E1D0(a1, a2, v6, v7, v8);
}

uint64_t sub_10013F6DC()
{
  return sub_10013F7EC(56);
}

uint64_t sub_10013F6E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1002649A4);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_10003BF7C;
  *(_OWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_10013E6F8, v3, 0);
}

uint64_t sub_10013F744()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013F768(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_1002649BC);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_1000087DC;
  return sub_10013D9BC(a1, a2, v6, v7, v8);
}

uint64_t sub_10013F7E4()
{
  return sub_10013F7EC(56);
}

uint64_t sub_10013F7EC(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));

  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10013F82C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1002649CC);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_10003BF7C;
  *(_OWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_10013DEE4, v3, 0);
}

ValueMetadata *type metadata accessor for FriendshipServiceError()
{
  return &type metadata for FriendshipServiceError;
}

uint64_t _s13findmylocated22FriendshipServiceErrorV8CategoryOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_10013F8F0 + 4 * byte_1001F6CF5[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_10013F924 + 4 * byte_1001F6CF0[v4]))();
}

uint64_t sub_10013F924(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013F92C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013F934);
  return result;
}

uint64_t sub_10013F940(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013F948);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_10013F94C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013F954(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FriendshipServiceError.Category()
{
  return &type metadata for FriendshipServiceError.Category;
}

unint64_t sub_10013F974()
{
  unint64_t result;

  result = qword_1002649E8;
  if (!qword_1002649E8)
  {
    result = swift_getWitnessTable(&unk_1001F7004, &type metadata for FriendshipServiceError.Category);
    atomic_store(result, (unint64_t *)&qword_1002649E8);
  }
  return result;
}

uint64_t sub_10013F9E0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027ADD8);
  sub_100037A9C(v0, (uint64_t)qword_10027ADD8);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0xD000000000000013, 0x8000000100200020);
}

uint64_t sub_10013FA60()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for UserNotificationService()
{
  return objc_opt_self(_TtC13findmylocated23UserNotificationService);
}

uint64_t sub_10013FAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.initialLaunchProcessing()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for UserNotificationService();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_10013FB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.migrate(from:to:)[1]);
  *(_QWORD *)(v4 + 16) = v8;
  v9 = type metadata accessor for UserNotificationService();
  *v8 = v4;
  v8[1] = sub_10003BF7C;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_10013FB80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for UserNotificationService();
  *v4 = v2;
  v4[1] = sub_1000087DC;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_10013FBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.startup()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for UserNotificationService();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_10013FC40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.run()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for UserNotificationService();
  *v4 = v2;
  v4[1] = sub_1000087DC;
  return ActorServiceProtocol.run()(v5, a2);
}

uint64_t sub_10013FCA0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for UserNotificationService();
  v1 = sub_10013FD2C(&qword_100261EE0, (uint64_t)&unk_1001F7080);
  return ActorServiceProtocol.description.getter(v0, v1);
}

uint64_t sub_10013FCE4()
{
  return sub_10013FD2C(&qword_100264AC0, (uint64_t)&unk_1001F7058);
}

uint64_t sub_10013FD08()
{
  return sub_10013FD2C(qword_100264AC8, (uint64_t)&unk_1001F70E0);
}

uint64_t sub_10013FD2C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UserNotificationService();
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013FD68()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[3] = v0;
  v1[4] = *v0;
  v2 = type metadata accessor for DispatchQoS(0);
  v1[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10013FDC8, v0, 0);
}

uint64_t sub_10013FDC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v14 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[2] = sub_10002BA84(0xD000000000000024, 0x8000000100200080, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = v0[4];
  v8 = v0[3];
  type metadata accessor for XPCActivity(0);
  static DispatchQoS.utility.getter();
  v9 = swift_allocObject(&unk_100254858, 24, 7);
  swift_weakInit(v9 + 16, v8);
  v10 = swift_allocObject(&unk_100254880, 32, 7);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v7;
  v11 = async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1];
  swift_retain(v8);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[6] = v12;
  *v12 = v0;
  v12[1] = sub_10014000C;
  return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD000000000000030, 0x8000000100200040, v0[5], &unk_100264B08, v0[3], &unk_100264B18, v10);
}

uint64_t sub_10014000C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10014006C, v3, 0);
}

uint64_t sub_10014006C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = *(_QWORD *)(v0 + 56);
  swift_release(v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001400B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100264B24);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  return sub_1001401B8(a1);
}

uint64_t sub_100140118(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc(dword_100264B04);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000087DC;
  v4 = (_QWORD *)swift_task_alloc(dword_100264B24);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10003BF7C;
  return sub_1001401B8(a1);
}

uint64_t sub_100140194()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001401B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[332] = v1;
  v2[331] = a1;
  v3 = type metadata accessor for XPCActivity.Criteria.Options(0);
  v2[333] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[334] = v4;
  v2[335] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for XPCActivity.Priority(0);
  v2[336] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[337] = v6;
  v2[338] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100140244, v1, 0);
}

uint64_t sub_100140244()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v0[339] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[330] = sub_10002BA84(0xD000000000000018, 0x80000001002000E0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 330, v0 + 331, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v0[340] = v7;
  *v7 = v0;
  v7[1] = sub_1001403EC;
  return sub_10000AFC8((uint64_t)(v0 + 218));
}

uint64_t sub_1001403EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)v0 + 16;
  v2 = *(_QWORD *)v0 + 1744;
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 2656);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2720));
  sub_10000EF6C(v2, v1, &qword_1002603A8);
  return swift_task_switch(sub_100140468, v3, 0);
}

uint64_t sub_100140468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  sub_10000EF6C(v0 + 1744, v0 + 1312, &qword_1002603A8);
  if (sub_100049214(v0 + 1312) != 1)
  {
    memcpy((void *)(v0 + 880), (const void *)(v0 + 1312), 0x1B0uLL);
    sub_10000EF6C(v0 + 1136, v0 + 2480, &qword_100260858);
    sub_10000EF6C(v0 + 2480, v0 + 2336, &qword_100260858);
    if (sub_10005EFC4(v0 + 2336) == 1
      && (sub_10000EF6C(v0 + 16, v0 + 448, &qword_1002603A8),
          sub_10000EF6C(v0 + 544, v0 + 2176, &qword_1002603B0),
          sub_10005EFE0(v0 + 2176) == 1))
    {
      v17 = *(_QWORD *)(v0 + 848);
      v18 = *(_QWORD *)(v0 + 856);
      v19 = *(_QWORD *)(v0 + 864);
      v20 = *(_QWORD *)(v0 + 872);
      sub_10002BD68(v17, v18, v19, v20);
      sub_10000AF28(v0 + 1744);
      if (!v18)
        goto LABEL_2;
      v21 = sub_10002BD98(v17, v18, v19, v20);
    }
    else
    {
      v21 = sub_10000AF28(v0 + 1744);
    }
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136446210;
      *(_QWORD *)(v0 + 2632) = sub_10002BA84(0xD000000000000018, 0x80000001002000E0, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2632, v0 + 2640, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s not eligible, since we have non-nil serverSettings already.", v24, 0xCu);
      v16 = 1;
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      v16 = 1;
    }
    goto LABEL_14;
  }
LABEL_2:
  v1 = *(_QWORD *)(v0 + 2704);
  v2 = *(_QWORD *)(v0 + 2696);
  v3 = *(_QWORD *)(v0 + 2688);
  v4 = *(_QWORD *)(v0 + 2680);
  v5 = *(_QWORD *)(v0 + 2672);
  v6 = *(_QWORD *)(v0 + 2664);
  v7 = sub_1001EFBE4(0xD000000000000021);
  if ((v8 & 1) != 0)
    v9 = 3600;
  else
    v9 = v7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for XPCActivity.Priority.utility(_:), v3);
  v10 = sub_100037A5C(&qword_100264B28);
  v11 = swift_allocObject(v10, ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ 2 * *(_QWORD *)(v5 + 72), *(unsigned __int8 *)(v5 + 80) | 7);
  *(_OWORD *)(v11 + 16) = xmmword_1001F7110;
  v12 = static XPCActivity.Criteria.Options.requiresClassC.getter();
  static XPCActivity.Criteria.Options.requiresNetwork.getter(v12);
  *(_QWORD *)(v0 + 2624) = v11;
  v13 = sub_100004EA8(&qword_100264B30, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options, (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
  v14 = sub_100037A5C(&qword_100264B38);
  v15 = sub_100140D54();
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 2624, v14, v15, v6, v13);
  XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)(v1, 0, v9, v9, v9, v4);
  v16 = 0;
LABEL_14:
  v26 = *(_QWORD *)(v0 + 2704);
  v27 = *(_QWORD *)(v0 + 2680);
  v28 = *(_QWORD *)(v0 + 2648);
  v29 = type metadata accessor for XPCActivity.Criteria(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, v16, 1, v29);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014083C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = type metadata accessor for XPCActivity.State(0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001408A0, 0, 0);
}

uint64_t sub_1001408A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Strong;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 56), v3);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for XPCActivity.State.run(_:))
  {
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100037A9C(v5, (uint64_t)qword_10027ACA0);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v23 = v10;
      *(_DWORD *)v9 = 136446210;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(0xD000000000000024, 0x8000000100200080, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 4, v9 + 12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s receive state .run", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    v11 = *(_QWORD *)(v0 + 64) + 16;
    swift_beginAccess(v11, v0 + 16, 0, 0);
    Strong = swift_weakLoadStrong(v11);
    *(_QWORD *)(v0 + 96) = Strong;
    if (Strong)
    {
      v13 = (_QWORD *)swift_task_alloc(dword_100262DC4);
      *(_QWORD *)(v0 + 104) = v13;
      *v13 = v0;
      v13[1] = sub_100140BB8;
      return sub_1000E5230();
    }
    else
    {
      v19 = type metadata accessor for XPCActivity(0);
      v20 = sub_100004EA8(&qword_100263620, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
      v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, v20);
      return swift_task_switch(sub_100140C50, v21, v22);
    }
  }
  else if (v4 == enum case for XPCActivity.State.defer(_:))
  {
    v15 = type metadata accessor for XPCActivity(0);
    v16 = sub_100004EA8(&qword_100263620, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
    v17 = dispatch thunk of Actor.unownedExecutor.getter(v15, v16);
    return swift_task_switch(sub_100140C8C, v17, v18);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100140BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_release(v1);
  v2 = type metadata accessor for XPCActivity(0);
  v3 = sub_100004EA8(&qword_100263620, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_100140C50, v4, v5);
}

uint64_t sub_100140C50()
{
  dispatch thunk of XPCActivity.done()();
  return swift_task_switch(sub_100115F7C, 0, 0);
}

uint64_t sub_100140C8C()
{
  dispatch thunk of XPCActivity.defer()();
  return swift_task_switch(sub_100140DA0, 0, 0);
}

uint64_t sub_100140CC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100140CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_100264B14);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10003BF7C;
  return sub_10014083C(a1, a2, v6);
}

unint64_t sub_100140D54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100264B40;
  if (!qword_100264B40)
  {
    v1 = sub_10003C1FC(&qword_100264B38);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100264B40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100140DF0 + 4 * byte_1001F7125[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100140E24 + 4 * byte_1001F7120[v4]))();
}

uint64_t sub_100140E24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100140E2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100140E34);
  return result;
}

uint64_t sub_100140E40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100140E48);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100140E4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100140E54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversionError()
{
  return &type metadata for ConversionError;
}

unint64_t sub_100140E74()
{
  unint64_t result;

  result = qword_100264B48;
  if (!qword_100264B48)
  {
    result = swift_getWitnessTable(&unk_1001F717C, &type metadata for ConversionError);
    atomic_store(result, &qword_100264B48);
  }
  return result;
}

uint64_t sub_100140EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v6 = sub_100037A5C((uint64_t *)&unk_100265180);
  v5[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100140F1C, 0, 0);
}

uint64_t sub_100140F1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027B330);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v21 = *(_QWORD *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 56);
    v22 = *(_QWORD *)(v0 + 64);
    v8 = swift_slowAlloc(32, -1);
    v23 = swift_slowAlloc(96, -1);
    v25 = v23;
    *(_DWORD *)v8 = 136446722;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000030, 0x8000000100200100, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2082;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v21, v7, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v8 + 22) = 2080;
    *(_QWORD *)(v0 + 32) = v22;
    swift_errorRetain(v1);
    v9 = sub_100037A5C(&qword_100262480);
    v10 = String.init<A>(describing:)(v0 + 32, v9);
    v12 = v11;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v10, v11, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s %{public}s %s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy(v23, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 56), 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 48);
  v17 = type metadata accessor for TaskPriority(0);
  v24 = *(_OWORD *)(v0 + 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v13, 1, 1, v17);
  v18 = swift_allocObject(&unk_100254998, 72, 7);
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = v16;
  *(_QWORD *)(v18 + 40) = v14;
  *(_QWORD *)(v18 + 48) = v15;
  *(_OWORD *)(v18 + 56) = v24;
  swift_bridgeObjectRetain(v14);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v24);
  v19 = sub_10005582C(v13, (uint64_t)&unk_100264B60, v18);
  swift_release(v19);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014125C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  return swift_task_switch(sub_100141278, 0, 0);
}

uint64_t sub_100141278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = type metadata accessor for AnalyticsEvent(0);
  v5 = (char *)swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v0 + 112) = v5;
  swift_bridgeObjectRetain(v1);
  swift_defaultActor_initialize(v5);
  v6 = sub_1000DEBC0((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v5 + 14) = v6;
  UUID.init()(v6);
  v7 = &v5[OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_startTime];
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  v9(&v5[OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_endTime], 1, 1, v8);
  *((_QWORD *)v5 + 15) = v3;
  *((_QWORD *)v5 + 16) = v1;
  if (v2)
  {
    v10 = *(_QWORD *)(v0 + 96);
    swift_errorRetain(v10);
    v11 = (_QWORD *)swift_task_alloc(dword_100262AAC);
    *(_QWORD *)(v0 + 120) = v11;
    *v11 = v0;
    v11[1] = sub_100141488;
    return sub_1000D8530(v10);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 104);
    *(_BYTE *)(v0 + 16) = 1;
    *(_WORD *)(v0 + 56) = 0;
    if (*(_QWORD *)(v13 + 16))
    {
      v14 = unk_100262C84;
      v18 = (char *)&dword_100262C80 + dword_100262C80;
      swift_bridgeObjectRetain(v13);
      v15 = (_QWORD *)swift_task_alloc(v14);
      *(_QWORD *)(v0 + 128) = v15;
      *v15 = v0;
      v15[1] = sub_1001415C4;
      return ((uint64_t (*)(_QWORD, _QWORD))v18)(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 104));
    }
    else
    {
      v16 = swift_task_alloc(32);
      *(_QWORD *)(v0 + 144) = v16;
      *(_QWORD *)(v16 + 16) = v0 + 16;
      v17 = (_QWORD *)swift_task_alloc(dword_100262AA4);
      *(_QWORD *)(v0 + 152) = v17;
      *v17 = v0;
      v17[1] = sub_100141930;
      return sub_1000D7208((uint64_t)&unk_100264B70, v16);
    }
  }
}

uint64_t sub_100141488()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  return swift_task_switch(sub_1001414DC, 0, 0);
}

uint64_t sub_1001414DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  char *v7;

  swift_errorRelease(*(_QWORD *)(v0 + 96));
  *(_BYTE *)(v0 + 16) = 0;
  v1 = *(_QWORD *)(v0 + 104);
  *(_WORD *)(v0 + 56) = 0;
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = unk_100262C84;
    v7 = (char *)&dword_100262C80 + dword_100262C80;
    swift_bridgeObjectRetain(v1);
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 128) = v3;
    *v3 = v0;
    v3[1] = sub_1001415C4;
    return ((uint64_t (*)(_QWORD, _QWORD))v7)(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 104));
  }
  else
  {
    v5 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 144) = v5;
    *(_QWORD *)(v5 + 16) = v0 + 16;
    v6 = (_QWORD *)swift_task_alloc(dword_100262AA4);
    *(_QWORD *)(v0 + 152) = v6;
    *v6 = v0;
    v6[1] = sub_100141930;
    return sub_1000D7208((uint64_t)&unk_100264B70, v5);
  }
}

uint64_t sub_1001415C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  if (v0)
    v4 = sub_1001416A4;
  else
    v4 = sub_100141634;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100141634()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 144) = v1;
  *(_QWORD *)(v1 + 16) = v0 + 16;
  v2 = (_QWORD *)swift_task_alloc(dword_100262AA4);
  *(_QWORD *)(v0 + 152) = v2;
  *v2 = v0;
  v2[1] = sub_100141930;
  return sub_1000D7208((uint64_t)&unk_100264B70, v1);
}

uint64_t sub_1001416A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_release(*(_QWORD *)(v0 + 112));
  v1 = *(_QWORD *)(v0 + 136);
  sub_1000DC080((_QWORD *)(v0 + 16));
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027B330);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 88);
  if (v7)
  {
    v14 = *(_QWORD *)(v0 + 80);
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v15 = swift_slowAlloc(32, -1);
    v16 = v15;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 64) = sub_10002BA84(v14, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v8, 3);
    *(_WORD *)(v9 + 12) = 2114;
    swift_errorRetain(v1);
    v11 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 72) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v9 + 14, v9 + 22);
    *v10 = v11;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to publish %{public}s. Error %{public}@", (uint8_t *)v9, 0x16u);
    v12 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100141930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100141AA0;
  else
    v4 = sub_10014199C;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10014199C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[21] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_100262BF4);
  v0[22] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100141A08;
  return sub_1000D8ECC(v0[14]);
}

uint64_t sub_100141A08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_release(v1);
  return swift_task_switch(sub_100141A64, 0, 0);
}

uint64_t sub_100141A64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  sub_1000DC080((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100141AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_release(*(_QWORD *)(v0 + 112));
  v1 = *(_QWORD *)(v0 + 160);
  sub_1000DC080((_QWORD *)(v0 + 16));
  if (qword_10025FB70 != -1)
    swift_once(&qword_10025FB70, sub_1001B4288);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027B330);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 88);
  if (v7)
  {
    v14 = *(_QWORD *)(v0 + 80);
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v15 = swift_slowAlloc(32, -1);
    v16 = v15;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 64) = sub_10002BA84(v14, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v8, 3);
    *(_WORD *)(v9 + 12) = 2114;
    swift_errorRetain(v1);
    v11 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 72) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v9 + 14, v9 + 22);
    *v10 = v11;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to publish %{public}s. Error %{public}@", (uint8_t *)v9, 0x16u);
    v12 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100141D2C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = a1;
  return swift_task_switch(sub_100141D44, 0, 0);
}

uint64_t sub_100141D44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = sub_100037A5C(&qword_100263DD0);
  inited = swift_initStackObject(v2, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1001F35F0;
  *(_QWORD *)(inited + 32) = 0x6563637553736177;
  *(_QWORD *)(inited + 40) = 0xEA00000000007373;
  sub_1000DBF64(v1, inited + 48);
  v4 = sub_1000DE8C4(inited);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v4);
}

uint64_t sub_100141DC8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_errorRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100141E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v6 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc(dword_100264B5C);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_1000087DC;
  *(_QWORD *)(v4 + 96) = v2;
  *(_QWORD *)(v4 + 104) = v3;
  *(_OWORD *)(v4 + 80) = v6;
  return swift_task_switch(sub_100141278, 0, 0);
}

uint64_t sub_100141E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_100264B6C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003D330;
  v3[14] = v2;
  return swift_task_switch(sub_100141D44, 0, 0);
}

uint64_t sub_100141EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4[227] = a4;
  v4[226] = a3;
  v4[225] = a2;
  v4[224] = a1;
  v5 = type metadata accessor for IDSStatus(0);
  v4[228] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[229] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[230] = swift_task_alloc(v7);
  v4[231] = swift_task_alloc(v7);
  v8 = type metadata accessor for Handle(0);
  v4[232] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[233] = v9;
  v4[234] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ClientOrigin(0);
  v4[235] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[236] = v11;
  v4[237] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for RequestOrigin(0);
  v4[238] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[239] = v13;
  v4[240] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for GroupID(0);
  v4[241] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[242] = v15;
  v4[243] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100037A5C((uint64_t *)&unk_100262930);
  v4[244] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v4[245] = v17;
  *v17 = v4;
  v17[1] = sub_100142030;
  return daemon.getter();
}

uint64_t sub_100142030(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1960);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1968) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1976) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100142118;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100142118(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1976);
  v5 = *(_QWORD **)v2;
  v5[248] = a1;
  v5[249] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1001422F0, 0, 0);
  swift_release(v5[246]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[250] = v7;
  *v7 = v5;
  v7[1] = sub_1001421CC;
  return sub_10000AFC8((uint64_t)(v5 + 110));
}

uint64_t sub_1001421CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1984);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2000));
  return swift_task_switch(sub_100142224, v1, 0);
}

uint64_t sub_100142224()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000EF6C(v0 + 880, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1)
  {
    v1 = v0 + 1472;
    sub_10004922C((_OWORD *)(v0 + 1472));
  }
  else
  {
    v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_10000EF6C(v0 + 112, v0 + 1632, &qword_1002603B0);
    sub_10000EFB0((_QWORD *)(v0 + 1632), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_10000AF28(v0 + 880);
  }
  sub_10000EF6C(v1, v0 + 1312, &qword_1002603B0);
  return swift_task_switch(sub_1001423F0, 0, 0);
}

uint64_t sub_1001422F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 1952);
  v2 = *(_QWORD *)(v0 + 1944);
  v3 = *(_QWORD *)(v0 + 1920);
  v4 = *(_QWORD *)(v0 + 1896);
  v5 = *(_QWORD *)(v0 + 1872);
  v6 = *(_QWORD *)(v0 + 1848);
  v13 = *(_QWORD *)(v0 + 1840);
  v7 = *(_QWORD *)(v0 + 1816);
  v8 = *(_QWORD *)(v0 + 1808);
  v9 = *(_QWORD *)(v0 + 1800);
  swift_release(*(_QWORD *)(v0 + 1968));
  v10 = type metadata accessor for FriendshipRequestType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
  v11 = type metadata accessor for FriendshipRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  sub_100024990(v9, type metadata accessor for ClientContext);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001423F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t isUniquelyReferenced_nonNull_native;
  char v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t result;
  char v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(_QWORD, unint64_t, _QWORD);
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v1 = v0[244];
  v2 = v0[225];
  v3 = v0[224];
  swift_release(v0[248]);
  sub_10000EF6C((uint64_t)(v0 + 164), v3, &qword_1002603B0);
  v4 = (int *)type metadata accessor for FriendshipOfferContent(0);
  v5 = sub_100025C70(v2, v3 + v4[5], type metadata accessor for ClientContext);
  FriendshipRequest.endDate.getter(v5);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = v0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v1, 1, v6);
  v10 = v0[244];
  if ((_DWORD)v9 == 1)
  {
    v11 = sub_1000087A0(v0[244], (uint64_t *)&unk_100262930);
    v12 = 0.0;
  }
  else
  {
    v13 = Date.timeIntervalSince1970.getter(v9);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
    v12 = v13 * 1000.0;
  }
  v14 = v0[237];
  v15 = v0[236];
  v16 = v8[235];
  *(double *)(v8[224] + v4[6]) = v12;
  v17 = FriendshipRequest.origin.getter(v11);
  v18 = FriendshipRequest.isFromGroup.getter(v17);
  v19 = v18;
  RequestOrigin.origin.getter(v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v15 + 88))(v14, v16) == enum case for ClientOrigin.messagesApp(_:))
  {
    if ((v19 & 1) != 0)
      v20 = (unsigned int *)&enum case for GroupID.group(_:);
    else
      v20 = (unsigned int *)&enum case for GroupID.oneToOne(_:);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v8[242] + 104))(v8[243], *v20, v8[241]);
  }
  else
  {
    v21 = v8[237];
    v22 = v8[236];
    v23 = v8[235];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v8[242] + 104))(v8[243], enum case for GroupID.oneToOne(_:), v8[241]);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }
  v24 = v8[243];
  v25 = v8[242];
  v26 = v8[241];
  v27 = v8[240];
  v28 = v8[239];
  v29 = v8[238];
  v30 = v8;
  v31 = v8[224];
  v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
  v33 = GroupID.rawValue.getter(v32);
  v35 = v34;
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  v37 = (uint64_t *)(v31 + v4[7]);
  *v37 = v33;
  v37[1] = v35;
  v38 = FriendshipRequest.toHandles.getter(v36);
  v39 = *(_QWORD *)(v38 + 16);
  v78 = v38;
  v79 = v4;
  if (v39)
  {
    v40 = v30[233];
    v87 = v30[229];
    v41 = v38 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    v83 = enum case for IDSStatus.valid(_:);
    v80 = *(_QWORD *)(v40 + 72);
    v81 = v40;
    v82 = *(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v40 + 16);
    v42 = v30;
    while (1)
    {
      v85 = v39;
      v45 = v42[231];
      v46 = v42[230];
      v47 = v42[228];
      v48 = v82(v42[234], v41, v42[232]);
      v49 = Handle.identifier.getter(v48);
      v51 = v50;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v87 + 104))(v45, v83, v47);
      v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 32);
      v52(v46, v45, v47);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      v55 = sub_10002FF38(v49, v51);
      v56 = _swiftEmptyDictionarySingleton[2];
      v57 = (v54 & 1) == 0;
      result = v56 + v57;
      if (__OFADD__(v56, v57))
        break;
      v59 = v54;
      if (_swiftEmptyDictionarySingleton[3] >= result)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1000F63FC();
      }
      else
      {
        sub_10016148C(result, isUniquelyReferenced_nonNull_native);
        v60 = sub_10002FF38(v49, v51);
        if ((v59 & 1) != (v61 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        v55 = v60;
      }
      v62 = v42[230];
      v63 = v42[228];
      if ((v59 & 1) != 0)
      {
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v87 + 40))(_swiftEmptyDictionarySingleton[7] + *(_QWORD *)(v87 + 72) * v55, v62, v63);
      }
      else
      {
        _swiftEmptyDictionarySingleton[(v55 >> 6) + 8] |= 1 << v55;
        v64 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v55);
        *v64 = v49;
        v64[1] = v51;
        result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v52)(_swiftEmptyDictionarySingleton[7] + *(_QWORD *)(v87 + 72) * v55, v62, v63);
        v65 = _swiftEmptyDictionarySingleton[2];
        v66 = __OFADD__(v65, 1);
        v67 = v65 + 1;
        if (v66)
          goto LABEL_27;
        _swiftEmptyDictionarySingleton[2] = v67;
        swift_bridgeObjectRetain(v51);
      }
      v43 = v42[234];
      v44 = v42[232];
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_bridgeObjectRelease(v51);
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v43, v44);
      v41 += v80;
      v39 = v85 - 1;
      if (v85 == 1)
        goto LABEL_24;
    }
    __break(1u);
LABEL_27:
    __break(1u);
  }
  else
  {
    v42 = v30;
LABEL_24:
    v68 = v42[244];
    v69 = v42[243];
    v70 = v42[240];
    v71 = v42[237];
    v84 = v42[234];
    v86 = v42[231];
    v88 = v42[230];
    v72 = v42[227];
    v73 = v42[226];
    v74 = v42[225];
    v75 = v42[224];
    v76 = type metadata accessor for FriendshipRequestType(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v72, v76);
    v77 = type metadata accessor for FriendshipRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 8))(v73, v77);
    sub_100024990(v74, type metadata accessor for ClientContext);
    swift_bridgeObjectRelease(v78);
    *(_QWORD *)(v75 + v79[8]) = _swiftEmptyDictionarySingleton;
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    return ((uint64_t (*)(void))v42[1])();
  }
  return result;
}

uint64_t sub_100142950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v4[228] = a4;
  v4[227] = a3;
  v4[226] = a2;
  v4[225] = a1;
  v5 = type metadata accessor for HandleType(0);
  v4[229] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[230] = v6;
  v4[231] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[232] = swift_task_alloc(v7);
  v4[233] = swift_task_alloc(v7);
  v8 = type metadata accessor for Handle(0);
  v4[234] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[235] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[236] = swift_task_alloc(v10);
  v4[237] = swift_task_alloc(v10);
  v4[238] = swift_task_alloc(v10);
  v11 = type metadata accessor for ClientOrigin(0);
  v4[239] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[240] = v12;
  v4[241] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RequestOrigin(0);
  v4[242] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[243] = v14;
  v4[244] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for GroupID(0);
  v4[245] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[246] = v16;
  v4[247] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100037A5C((uint64_t *)&unk_100262930);
  v4[248] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v4[249] = v18;
  *v18 = v4;
  v18[1] = sub_100142AE4;
  return daemon.getter();
}

uint64_t sub_100142AE4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1992);
  v5 = *v1;
  *(_QWORD *)(*v1 + 2000) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[251] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[252] = v7;
  v8 = type metadata accessor for DataManager(0);
  v3[253] = v8;
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[254] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  v3[255] = v10;
  *v6 = v5;
  v6[1] = sub_100142BE4;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100142BE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 2008);
  v5 = *(_QWORD **)v2;
  v5[256] = a1;
  v5[257] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100142DBC, 0, 0);
  swift_release(v5[250]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[258] = v7;
  *v7 = v5;
  v7[1] = sub_100142C98;
  return sub_10000AFC8((uint64_t)(v5 + 110));
}

uint64_t sub_100142C98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2048);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2064));
  return swift_task_switch(sub_100142CF0, v1, 0);
}

uint64_t sub_100142CF0()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000EF6C(v0 + 880, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1)
  {
    v1 = v0 + 1472;
    sub_10004922C((_OWORD *)(v0 + 1472));
  }
  else
  {
    v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_10000EF6C(v0 + 112, v0 + 1632, &qword_1002603B0);
    sub_10000EFB0((_QWORD *)(v0 + 1632), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_10000AF28(v0 + 880);
  }
  sub_10000EF6C(v1, v0 + 1312, &qword_1002603B0);
  return swift_task_switch(sub_100142EE4, 0, 0);
}

uint64_t sub_100142DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 1984);
  v2 = *(_QWORD *)(v0 + 1976);
  v3 = *(_QWORD *)(v0 + 1952);
  v4 = *(_QWORD *)(v0 + 1928);
  v5 = *(_QWORD *)(v0 + 1904);
  v6 = *(_QWORD *)(v0 + 1896);
  v13 = *(_QWORD *)(v0 + 1888);
  v14 = *(_QWORD *)(v0 + 1864);
  v15 = *(_QWORD *)(v0 + 1856);
  v16 = *(_QWORD *)(v0 + 1848);
  v7 = *(_QWORD *)(v0 + 1824);
  v8 = *(_QWORD *)(v0 + 1816);
  v9 = *(_QWORD *)(v0 + 1808);
  swift_release(*(_QWORD *)(v0 + 2000));
  v10 = type metadata accessor for FriendshipRequestType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
  v11 = type metadata accessor for FriendshipRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  sub_100024990(v9, type metadata accessor for ClientContext);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100142EE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;

  v1 = v0[248];
  v2 = v0[226];
  v3 = v0[225];
  swift_release(v0[256]);
  sub_10000EF6C((uint64_t)(v0 + 164), v3, &qword_1002603B0);
  v4 = (int *)type metadata accessor for FriendshipRequestContent(0);
  v0[259] = v4;
  v5 = sub_100025C70(v2, v3 + v4[5], type metadata accessor for ClientContext);
  v6 = FriendshipRequest.toHandles.getter(v5);
  v7 = sub_1000A4A30(v6);
  v8 = swift_bridgeObjectRelease(v6);
  *(_QWORD *)(v3 + v4[8]) = v7;
  FriendshipRequest.endDate.getter(v8);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v1, 1, v9);
  v12 = v0[248];
  if ((_DWORD)v11 == 1)
  {
    v13 = sub_1000087A0(v0[248], (uint64_t *)&unk_100262930);
    v14 = 0.0;
  }
  else
  {
    v15 = Date.timeIntervalSince1970.getter(v11);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
    v14 = v15 * 1000.0;
  }
  v16 = v0[241];
  v17 = v0[240];
  v18 = v0[239];
  *(double *)(v0[225] + v4[6]) = v14;
  v19 = FriendshipRequest.origin.getter(v13);
  v20 = FriendshipRequest.isFromGroup.getter(v19);
  v21 = v20;
  RequestOrigin.origin.getter(v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 88))(v16, v18) == enum case for ClientOrigin.messagesApp(_:))
  {
    if ((v21 & 1) != 0)
      v22 = (unsigned int *)&enum case for GroupID.group(_:);
    else
      v22 = (unsigned int *)&enum case for GroupID.oneToOne(_:);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[246] + 104))(v0[247], *v22, v0[245]);
  }
  else
  {
    v23 = v0[241];
    v24 = v0[240];
    v25 = v0[239];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[246] + 104))(v0[247], enum case for GroupID.oneToOne(_:), v0[245]);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  }
  v26 = v0[247];
  v27 = v0[246];
  v28 = v0[245];
  v29 = v0[225];
  v30 = (*(uint64_t (**)(_QWORD, _QWORD))(v0[243] + 8))(v0[244], v0[242]);
  v31 = GroupID.rawValue.getter(v30);
  v33 = v32;
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  v34 = (uint64_t *)(v29 + v4[7]);
  *v34 = v31;
  v34[1] = v33;
  v35 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[260] = v35;
  *v35 = v0;
  v35[1] = sub_100143164;
  return daemon.getter();
}

uint64_t sub_100143164(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2080);
  v6 = *(_QWORD **)v1;
  v6[261] = a1;
  swift_task_dealloc(v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v6[262] = v4;
  *v4 = v6;
  v4[1] = sub_1001431E4;
  return ActorServiceDaemon.getService<A>()(v6[252], v6[253], v6[254], v6[255]);
}

uint64_t sub_1001431E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 2096);
  v3[263] = a1;
  v3[264] = v1;
  swift_task_dealloc(v4);
  swift_release(v3[261]);
  if (v1)
    v5 = sub_100143CC8;
  else
    v5 = sub_10014325C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10014325C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void (*v8)(_QWORD, unint64_t, _QWORD);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = FriendshipRequest.toHandles.getter(a1);
  *(_QWORD *)(v1 + 2120) = v2;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 + 2128) = v3;
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 1880);
    v5 = *(_QWORD *)(v1 + 1840);
    v6 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v1 + 2208) = v6;
    v7 = enum case for HandleType.follower(_:);
    *(_DWORD *)(v1 + 2212) = enum case for HandleType.follower(_:);
    *(_DWORD *)(v1 + 2216) = enum case for HandleType.following(_:);
    *(_QWORD *)(v1 + 2136) = *(_QWORD *)(v4 + 72);
    v8 = *(void (**)(_QWORD, unint64_t, _QWORD))(v4 + 16);
    *(_QWORD *)(v1 + 2144) = v8;
    *(_QWORD *)(v1 + 2160) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v1 + 2152) = 0;
    v9 = *(_QWORD *)(v1 + 1848);
    v10 = *(_QWORD *)(v1 + 1832);
    v8(*(_QWORD *)(v1 + 1904), v2 + ((v6 + 32) & ~(unint64_t)v6), *(_QWORD *)(v1 + 1872));
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104);
    *(_QWORD *)(v1 + 2168) = v11;
    v11(v9, v7, v10);
    v12 = (_QWORD *)swift_task_alloc(dword_100262DDC);
    *(_QWORD *)(v1 + 2176) = v12;
    *v12 = v1;
    v12[1] = sub_1001434CC;
    return sub_1000E7320(*(_QWORD *)(v1 + 1864), *(_QWORD *)(v1 + 1904), *(_QWORD *)(v1 + 1848), 0);
  }
  else
  {
    v14 = swift_bridgeObjectRelease(v2);
    v15 = *(_QWORD *)(v1 + 2104);
    v16 = *(_QWORD *)(v1 + 1824);
    v17 = *(_QWORD *)(v1 + 1816);
    v18 = *(_QWORD *)(v1 + 1808);
    v19 = _swiftEmptyArrayStorage;
    v20 = _swiftEmptyArrayStorage[2];
    v21 = FriendshipRequest.toHandles.getter(v14);
    swift_release(v15);
    v22 = *(_QWORD *)(v21 + 16);
    swift_bridgeObjectRelease(v21);
    v23 = type metadata accessor for FriendshipRequestType(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v16, v23);
    v24 = type metadata accessor for FriendshipRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v17, v24);
    sub_100024990(v18, type metadata accessor for ClientContext);
    if (v20 != v22)
    {
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      v19 = 0;
    }
    v25 = *(_QWORD *)(v1 + 1984);
    v26 = *(_QWORD *)(v1 + 1976);
    v27 = *(_QWORD *)(v1 + 1952);
    v28 = *(_QWORD *)(v1 + 1928);
    v29 = *(_QWORD *)(v1 + 1904);
    v30 = *(_QWORD *)(v1 + 1896);
    v31 = *(_QWORD *)(v1 + 1888);
    v32 = *(_QWORD *)(v1 + 1864);
    v33 = *(_QWORD *)(v1 + 1856);
    v34 = *(_QWORD *)(v1 + 1848);
    *(_QWORD *)(*(_QWORD *)(v1 + 1800) + *(int *)(*(_QWORD *)(v1 + 2072) + 36)) = v19;
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1001434CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 1848);
  v3 = *(_QWORD *)(*v0 + 1840);
  v4 = *(_QWORD *)(*v0 + 1832);
  swift_task_dealloc(*(_QWORD *)(*v0 + 2176));
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v1 + 2184) = v5;
  v5(v2, v4);
  return swift_task_switch(sub_100143544, 0, 0);
}

uint64_t sub_100143544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  _QWORD *v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 1880);
  v2 = *(_QWORD *)(v0 + 1872);
  v3 = *(_QWORD *)(v0 + 1864);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  *(_QWORD *)(v0 + 2192) = v4;
  if (v4(v3, 1, v2) == 1)
  {
    sub_1000087A0(v3, &qword_1002650A0);
LABEL_13:
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2168))(*(_QWORD *)(v0 + 1848), *(unsigned int *)(v0 + 2216), *(_QWORD *)(v0 + 1832));
    v41 = (_QWORD *)swift_task_alloc(dword_100262DDC);
    *(_QWORD *)(v0 + 2200) = v41;
    *v41 = v0;
    v41[1] = sub_1001438CC;
    v42 = *(_QWORD *)(v0 + 1904);
    v43 = *(_QWORD *)(v0 + 1856);
    return sub_1000E7320(v43, v42, *(_QWORD *)(v0 + 1848), 0);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 1896), v3, v2);
  v6 = Handle.serverID.getter(v5);
  if (!v7)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1880) + 8))(*(_QWORD *)(v0 + 1896), *(_QWORD *)(v0 + 1872));
    goto LABEL_13;
  }
  v8 = v6;
  v9 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 2160));
  v11 = *(_QWORD **)(v0 + 2160);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v11 = sub_10003C33C(0, v11[2] + 1, 1, *(_QWORD **)(v0 + 2160));
  v13 = v11[2];
  v12 = v11[3];
  if (v13 >= v12 >> 1)
    v11 = sub_10003C33C((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
  v14 = *(_QWORD *)(v0 + 1896);
  v15 = *(_QWORD *)(v0 + 1880);
  v16 = *(_QWORD *)(v0 + 1872);
  v11[2] = v13 + 1;
  v17 = &v11[2 * v13];
  v17[4] = v8;
  v17[5] = v9;
  v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v18(v14, v16);
  v19 = *(_QWORD *)(v0 + 2128);
  v20 = *(_QWORD *)(v0 + 2152) + 1;
  v18(*(_QWORD *)(v0 + 1904), *(_QWORD *)(v0 + 1872));
  if (v20 != v19)
  {
    v44 = *(_QWORD *)(v0 + 2152) + 1;
    *(_QWORD *)(v0 + 2160) = v11;
    *(_QWORD *)(v0 + 2152) = v44;
    v45 = *(unsigned int *)(v0 + 2212);
    v46 = *(_QWORD *)(v0 + 1848);
    v47 = *(_QWORD *)(v0 + 1840);
    v48 = *(_QWORD *)(v0 + 1832);
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 2144))(*(_QWORD *)(v0 + 1904), *(_QWORD *)(v0 + 2120)+ ((*(unsigned __int8 *)(v0 + 2208) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2208))+ *(_QWORD *)(v0 + 2136) * v44, *(_QWORD *)(v0 + 1872));
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 104);
    *(_QWORD *)(v0 + 2168) = v49;
    v49(v46, v45, v48);
    v50 = (_QWORD *)swift_task_alloc(dword_100262DDC);
    *(_QWORD *)(v0 + 2176) = v50;
    *v50 = v0;
    v50[1] = sub_1001434CC;
    v42 = *(_QWORD *)(v0 + 1904);
    v43 = *(_QWORD *)(v0 + 1864);
    return sub_1000E7320(v43, v42, *(_QWORD *)(v0 + 1848), 0);
  }
  v21 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2120));
  v22 = *(_QWORD *)(v0 + 2104);
  v23 = *(_QWORD *)(v0 + 1824);
  v24 = *(_QWORD *)(v0 + 1816);
  v25 = *(_QWORD *)(v0 + 1808);
  v26 = v11[2];
  v27 = FriendshipRequest.toHandles.getter(v21);
  swift_release(v22);
  v28 = *(_QWORD *)(v27 + 16);
  swift_bridgeObjectRelease(v27);
  v29 = type metadata accessor for FriendshipRequestType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v23, v29);
  v30 = type metadata accessor for FriendshipRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v24, v30);
  sub_100024990(v25, type metadata accessor for ClientContext);
  if (v26 != v28)
  {
    swift_bridgeObjectRelease(v11);
    v11 = 0;
  }
  v31 = *(_QWORD *)(v0 + 1984);
  v32 = *(_QWORD *)(v0 + 1976);
  v33 = *(_QWORD *)(v0 + 1952);
  v34 = *(_QWORD *)(v0 + 1928);
  v35 = *(_QWORD *)(v0 + 1904);
  v36 = *(_QWORD *)(v0 + 1896);
  v37 = *(_QWORD *)(v0 + 1888);
  v38 = *(_QWORD *)(v0 + 1864);
  v39 = *(_QWORD *)(v0 + 1856);
  v51 = *(_QWORD *)(v0 + 1848);
  *(_QWORD *)(*(_QWORD *)(v0 + 1800) + *(int *)(*(_QWORD *)(v0 + 2072) + 36)) = v11;
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001438CC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 2184);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1848);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 1832);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2200));
  v1(v2, v3);
  return swift_task_switch(sub_100143940, 0, 0);
}

uint64_t sub_100143940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  _QWORD *v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 1872);
  v2 = *(_QWORD *)(v0 + 1856);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 2192))(v2, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 2120);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1880) + 8))(*(_QWORD *)(v0 + 1904), v1);
    swift_bridgeObjectRelease(v3);
    v4 = sub_1000087A0(v2, &qword_1002650A0);
LABEL_11:
    v11 = *(_QWORD **)(v0 + 2160);
    goto LABEL_12;
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1880) + 32))(*(_QWORD *)(v0 + 1888), v2, v1);
  v6 = Handle.serverID.getter(v5);
  if (!v7)
  {
    v21 = *(_QWORD *)(v0 + 2120);
    v22 = *(_QWORD *)(v0 + 1904);
    v23 = *(_QWORD *)(v0 + 1872);
    v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1880) + 8);
    v24(*(_QWORD *)(v0 + 1888), v23);
    v24(v22, v23);
    v4 = swift_bridgeObjectRelease(v21);
    goto LABEL_11;
  }
  v8 = v6;
  v9 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 2160));
  v11 = *(_QWORD **)(v0 + 2160);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v11 = sub_10003C33C(0, v11[2] + 1, 1, *(_QWORD **)(v0 + 2160));
  v13 = v11[2];
  v12 = v11[3];
  if (v13 >= v12 >> 1)
    v11 = sub_10003C33C((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
  v14 = *(_QWORD *)(v0 + 1888);
  v15 = *(_QWORD *)(v0 + 1880);
  v16 = *(_QWORD *)(v0 + 1872);
  v11[2] = v13 + 1;
  v17 = &v11[2 * v13];
  v17[4] = v8;
  v17[5] = v9;
  v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v18(v14, v16);
  v19 = *(_QWORD *)(v0 + 2128);
  v20 = *(_QWORD *)(v0 + 2152) + 1;
  v18(*(_QWORD *)(v0 + 1904), *(_QWORD *)(v0 + 1872));
  if (v20 != v19)
  {
    v44 = *(_QWORD *)(v0 + 2152) + 1;
    *(_QWORD *)(v0 + 2160) = v11;
    *(_QWORD *)(v0 + 2152) = v44;
    v45 = *(unsigned int *)(v0 + 2212);
    v46 = *(_QWORD *)(v0 + 1848);
    v47 = *(_QWORD *)(v0 + 1840);
    v48 = *(_QWORD *)(v0 + 1832);
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 2144))(*(_QWORD *)(v0 + 1904), *(_QWORD *)(v0 + 2120)+ ((*(unsigned __int8 *)(v0 + 2208) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2208))+ *(_QWORD *)(v0 + 2136) * v44, *(_QWORD *)(v0 + 1872));
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 104);
    *(_QWORD *)(v0 + 2168) = v49;
    v49(v46, v45, v48);
    v50 = (_QWORD *)swift_task_alloc(dword_100262DDC);
    *(_QWORD *)(v0 + 2176) = v50;
    *v50 = v0;
    v50[1] = sub_1001434CC;
    return sub_1000E7320(*(_QWORD *)(v0 + 1864), *(_QWORD *)(v0 + 1904), *(_QWORD *)(v0 + 1848), 0);
  }
  v4 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2120));
LABEL_12:
  v25 = *(_QWORD *)(v0 + 2104);
  v26 = *(_QWORD *)(v0 + 1824);
  v27 = *(_QWORD *)(v0 + 1816);
  v28 = *(_QWORD *)(v0 + 1808);
  v29 = v11[2];
  v30 = FriendshipRequest.toHandles.getter(v4);
  swift_release(v25);
  v31 = *(_QWORD *)(v30 + 16);
  swift_bridgeObjectRelease(v30);
  v32 = type metadata accessor for FriendshipRequestType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v26, v32);
  v33 = type metadata accessor for FriendshipRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v27, v33);
  sub_100024990(v28, type metadata accessor for ClientContext);
  if (v29 != v31)
  {
    swift_bridgeObjectRelease(v11);
    v11 = 0;
  }
  v34 = *(_QWORD *)(v0 + 1984);
  v35 = *(_QWORD *)(v0 + 1976);
  v36 = *(_QWORD *)(v0 + 1952);
  v37 = *(_QWORD *)(v0 + 1928);
  v38 = *(_QWORD *)(v0 + 1904);
  v39 = *(_QWORD *)(v0 + 1896);
  v40 = *(_QWORD *)(v0 + 1888);
  v41 = *(_QWORD *)(v0 + 1864);
  v42 = *(_QWORD *)(v0 + 1856);
  v51 = *(_QWORD *)(v0 + 1848);
  *(_QWORD *)(*(_QWORD *)(v0 + 1800) + *(int *)(*(_QWORD *)(v0 + 2072) + 36)) = v11;
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100143CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 2112);
  v2 = *(_QWORD *)(v0 + 1824);
  v3 = *(_QWORD *)(v0 + 1816);
  v4 = *(_QWORD *)(v0 + 1808);
  v5 = type metadata accessor for FriendshipRequestType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
  v6 = type metadata accessor for FriendshipRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v3, v6);
  sub_100024990(v4, type metadata accessor for ClientContext);
  swift_errorRelease(v1);
  v7 = *(_QWORD *)(v0 + 1984);
  v8 = *(_QWORD *)(v0 + 1976);
  v9 = *(_QWORD *)(v0 + 1952);
  v10 = *(_QWORD *)(v0 + 1928);
  v11 = *(_QWORD *)(v0 + 1904);
  v12 = *(_QWORD *)(v0 + 1896);
  v13 = *(_QWORD *)(v0 + 1888);
  v14 = *(_QWORD *)(v0 + 1864);
  v15 = *(_QWORD *)(v0 + 1856);
  v16 = *(_QWORD *)(v0 + 1848);
  *(_QWORD *)(*(_QWORD *)(v0 + 1800) + *(int *)(*(_QWORD *)(v0 + 2072) + 36)) = 0;
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100143DF8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v20 = a4;
  v8 = sub_100037A5C(&qword_100264D60);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100036228(a1, v12);
  v14 = sub_1001493DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FriendshipServerRequest.CodingKeys, &type metadata for FriendshipServerRequest.CodingKeys, v14, v12, v13);
  v21[0] = a2;
  v22 = 0;
  v15 = sub_100037A5C(&qword_100261218);
  v16 = sub_10007581C(&qword_100261220, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, v15, v16);
  if (!v4)
  {
    v21[0] = a3;
    v21[1] = v20;
    v22 = 1;
    v17 = sub_10003F9B8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100143F6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001493DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100143F94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001493DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100143FBC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1001491B0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100143FE8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100143DF8(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100144004(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100149420();
  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_10014402C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v25[20];
  _BYTE v26[168];
  char v27;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100264D40);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_100149064();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FriendshipOfferContent.CodingKeys, &type metadata for FriendshipOfferContent.CodingKeys, v11, v9, v10);
  sub_10000EF6C(v3, (uint64_t)v26, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v26, (uint64_t)v25, &qword_1002603B0);
  v27 = 0;
  v12 = sub_10003E3B0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v27, v5, &type metadata for ServerContext, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for FriendshipOfferContent(0);
    v14 = v3 + v13[5];
    LOBYTE(v25[0]) = 1;
    v15 = type metadata accessor for ClientContext(0);
    v16 = sub_100004EA8(&qword_100260488, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3130);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, v25, v5, v15, v16);
    v17 = *(double *)(v3 + v13[6]);
    LOBYTE(v25[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v5, v17);
    v18 = (uint64_t *)(v3 + v13[7]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v25[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, v25, v5);
    v25[0] = *(_QWORD *)(v3 + v13[8]);
    v27 = 4;
    v21 = sub_100037A5C(&qword_100264D30);
    v22 = sub_10014912C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v27, v5, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100144274@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[20];
  _BYTE v35[160];
  _QWORD v36[21];
  char v37;
  char v38;

  v28 = a2;
  v29 = type metadata accessor for ClientContext(0);
  __chkstk_darwin(v29);
  v4 = (uint64_t *)((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_100037A5C(&qword_100264D20);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for FriendshipOfferContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v32 = a1;
  sub_100036228(a1, v11);
  v13 = sub_100149064();
  v30 = v7;
  v14 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FriendshipOfferContent.CodingKeys, &type metadata for FriendshipOfferContent.CodingKeys, v13, v11, v12);
  if (v14)
    return sub_10002BB90(v32);
  v33 = v5;
  v15 = (uint64_t)v10;
  v38 = 0;
  v16 = sub_10002B9FC();
  v17 = v30;
  v18 = v31;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v36, &type metadata for ServerContext, &v38, v31, &type metadata for ServerContext, v16);
  sub_10000EF6C((uint64_t)v36, (uint64_t)v35, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v35, v15, &qword_1002603B0);
  LOBYTE(v34[0]) = 1;
  v19 = sub_100004EA8(&qword_1002604A0, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3158);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v29, v34, v18, v29, v19);
  sub_10003E4F4((uint64_t)v4, v15 + v8[5]);
  LOBYTE(v34[0]) = 2;
  *(double *)(v15 + v8[6]) = KeyedDecodingContainer.decode(_:forKey:)(v34, v18, v20);
  LOBYTE(v34[0]) = 3;
  v21 = KeyedDecodingContainer.decode(_:forKey:)(v34, v18);
  v22 = (uint64_t *)(v15 + v8[7]);
  *v22 = v21;
  v22[1] = v23;
  v24 = sub_100037A5C(&qword_100264D30);
  v37 = 4;
  v25 = sub_1001490A8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v24, &v37, v18, v24, v25);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v18);
  *(_QWORD *)(v15 + v8[8]) = v34[0];
  sub_100025C70(v15, v28, type metadata accessor for FriendshipOfferContent);
  sub_10002BB90(v32);
  return sub_100024990(v15, type metadata accessor for FriendshipOfferContent);
}

uint64_t sub_10014463C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100144678 + 4 * byte_1001F71F0[*v0]))(0x6F43726576726573, 0xED0000747865746ELL);
}

uint64_t sub_100144678()
{
  return 0x6F43746E65696C63;
}

uint64_t sub_10014468C()
{
  return 0x73657269707865;
}

uint64_t sub_1001446A4()
{
  return 0x644970756F7267;
}

unint64_t sub_1001446BC()
{
  return 0xD000000000000013;
}

uint64_t sub_1001446D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001499E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001446FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100149064();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100144724(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100149064();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014474C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100144274(a1, a2);
}

uint64_t sub_100144760(_QWORD *a1)
{
  return sub_10014402C(a1);
}

uint64_t sub_100144774(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[20];
  _BYTE v26[168];
  char v27;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100264D18);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_100149020();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FriendshipRequestContent.CodingKeys, &type metadata for FriendshipRequestContent.CodingKeys, v11, v9, v10);
  sub_10000EF6C(v3, (uint64_t)v26, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v26, (uint64_t)v25, &qword_1002603B0);
  v27 = 0;
  v12 = sub_10003E3B0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v27, v5, &type metadata for ServerContext, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for FriendshipRequestContent(0);
    v14 = v3 + v13[5];
    LOBYTE(v25[0]) = 1;
    v15 = type metadata accessor for ClientContext(0);
    v16 = sub_100004EA8(&qword_100260488, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3130);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, v25, v5, v15, v16);
    v17 = *(double *)(v3 + v13[6]);
    LOBYTE(v25[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v5, v17);
    v18 = (uint64_t *)(v3 + v13[7]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v25[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, v25, v5);
    v25[0] = *(_QWORD *)(v3 + v13[8]);
    v27 = 4;
    v21 = sub_100037A5C(&qword_1002625F8);
    v22 = sub_100027254(&qword_100263A00, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v24 = v21;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v27, v5, v21, v22);
    v25[0] = *(_QWORD *)(v3 + v13[9]);
    v27 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v27, v5, v24, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100144A18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE v37[160];
  _QWORD v38[21];
  char v39;
  char v40;

  v30 = a2;
  v31 = type metadata accessor for ClientContext(0);
  __chkstk_darwin(v31);
  v4 = (uint64_t *)((char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_100037A5C(&qword_100264D08);
  v5 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for FriendshipRequestContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v34 = a1;
  sub_100036228(a1, v11);
  v13 = sub_100149020();
  v32 = v7;
  v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FriendshipRequestContent.CodingKeys, &type metadata for FriendshipRequestContent.CodingKeys, v13, v11, v12);
  if (v14)
    return sub_10002BB90(v34);
  v35 = v4;
  v15 = (uint64_t)v10;
  v40 = 0;
  v16 = sub_10002B9FC();
  v17 = v32;
  v18 = v33;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v38, &type metadata for ServerContext, &v40, v33, &type metadata for ServerContext, v16);
  sub_10000EF6C((uint64_t)v38, (uint64_t)v37, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v37, v15, &qword_1002603B0);
  LOBYTE(v36) = 1;
  v19 = sub_100004EA8(&qword_1002604A0, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3158);
  v20 = v35;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v35, v31, &v36, v18, v31, v19);
  sub_10003E4F4((uint64_t)v20, v15 + v8[5]);
  LOBYTE(v36) = 2;
  *(double *)(v15 + v8[6]) = KeyedDecodingContainer.decode(_:forKey:)(&v36, v18, v21);
  LOBYTE(v36) = 3;
  v22 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v18);
  v23 = (uint64_t *)(v15 + v8[7]);
  *v23 = v22;
  v23[1] = v24;
  v25 = sub_100037A5C(&qword_1002625F8);
  v39 = 4;
  v26 = sub_100027254(&qword_1002639C8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v27 = v18;
  v28 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v36, v25, &v39, v27, v25, v26);
  *(_QWORD *)(v15 + v8[8]) = v36;
  v39 = 5;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v36, v25, &v39, v33, v25, v28);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v33);
  *(_QWORD *)(v15 + v8[9]) = v36;
  sub_100025C70(v15, v30, type metadata accessor for FriendshipRequestContent);
  sub_10002BB90(v34);
  return sub_100024990(v15, type metadata accessor for FriendshipRequestContent);
}

uint64_t sub_100144E9C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100144ED8 + 4 * byte_1001F71F5[*v0]))(0x6F43726576726573, 0xED0000747865746ELL);
}

uint64_t sub_100144ED8()
{
  return 0x6F43746E65696C63;
}

uint64_t sub_100144EEC()
{
  return 0x73657269707865;
}

uint64_t sub_100144F04()
{
  return 0x644970756F7267;
}

uint64_t sub_100144F1C()
{
  return 0x736C69616D65;
}

uint64_t sub_100144F30()
{
  return 7562345;
}

uint64_t sub_100144F40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100149C38(a1, a2);
  *a3 = result;
  return result;
}

void sub_100144F64(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100144F70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100149020();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100144F98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100149020();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100144FC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100144A18(a1, a2);
}

uint64_t sub_100144FD4(_QWORD *a1)
{
  return sub_100144774(a1);
}

uint64_t sub_100144FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v3[40] = a2;
  v3[41] = a3;
  v3[39] = a1;
  v4 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  v3[42] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[43] = v5;
  v3[44] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FriendshipRequest(0);
  v3[45] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[46] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[47] = swift_task_alloc(v8);
  v3[48] = swift_task_alloc(v8);
  v9 = type metadata accessor for FriendshipRequestType(0);
  v3[49] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[50] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[51] = swift_task_alloc(v11);
  v3[52] = swift_task_alloc(v11);
  v3[53] = swift_task_alloc(v11);
  v12 = type metadata accessor for Account(0);
  v3[54] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[55] = v13;
  v3[56] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260238) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[57] = swift_task_alloc(v14);
  v3[58] = swift_task_alloc(v14);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[59] = swift_task_alloc(v15);
  v3[60] = swift_task_alloc(v15);
  v16 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ClientContext(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[61] = swift_task_alloc(v16);
  v3[62] = swift_task_alloc(v16);
  v3[63] = swift_task_alloc(v16);
  return swift_task_switch(sub_100145194, 0, 0);
}

uint64_t sub_100145194()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = v0[59];
  v1 = v0[60];
  v4 = v0[57];
  v3 = v0[58];
  v6 = v0[55];
  v5 = v0[56];
  v7 = v0[54];
  v8 = v0[39];
  v9 = sub_10003D638();
  v0[64] = v9;
  swift_bridgeObjectRetain(v9);
  v11 = FriendshipRequest.callerHandle.getter(v10);
  FriendshipRequest.origin.getter(v11);
  v12 = type metadata accessor for RequestOrigin(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v3, 0, 1, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  sub_10000E37C(v3, v4, &qword_100260238);
  sub_10000E37C(v1, v2, &qword_1002650A0);
  v13 = (_QWORD *)swift_task_alloc(dword_100260234);
  v0[65] = v13;
  *v13 = v0;
  v13[1] = sub_1001452A0;
  return sub_100044CD8(v0[63], v0[56], v0[57], v0[59], (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1001452A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 480);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 464);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 520));
  sub_1000087A0(v2, &qword_100260238);
  sub_1000087A0(v1, &qword_1002650A0);
  return swift_task_switch(sub_10014531C, 0, 0);
}

uint64_t sub_10014531C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v1 = v0[53];
  v2 = v0[49];
  v3 = v0[50];
  v4 = v0[46];
  v5 = v0[41];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v1, enum case for FriendshipRequestType.offer(_:), v2);
  v6 = static FriendshipRequestType.== infix(_:_:)(v5, v1);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[66] = v7;
  v7(v1, v2);
  v8 = v0[63];
  v9 = v0[49];
  v10 = v0[45];
  v12 = v0[40];
  v11 = v0[41];
  if ((v6 & 1) != 0)
  {
    v13 = v0[52];
    v14 = v0[48];
    sub_100025C70(v8, v0[62], type metadata accessor for ClientContext);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v14, v12, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v13, v11, v9);
    v0[29] = type metadata accessor for FriendshipOfferContent(0);
    v0[30] = sub_100004EA8(&qword_100264BA8, type metadata accessor for FriendshipOfferContent, (uint64_t)&unk_1001F73E8);
    v0[31] = sub_100004EA8(&qword_100264BB0, type metadata accessor for FriendshipOfferContent, (uint64_t)&unk_1001F73C0);
    v15 = sub_10003276C(v0 + 26);
    v16 = (_QWORD *)swift_task_alloc(dword_100264BA4);
    v0[67] = v16;
    *v16 = v0;
    v16[1] = sub_100145584;
    return sub_100141EDC((uint64_t)v15, v0[62], v0[48], v0[52]);
  }
  else
  {
    v18 = v0[51];
    v19 = v0[47];
    sub_100025C70(v8, v0[61], type metadata accessor for ClientContext);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v19, v12, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v18, v11, v9);
    v0[11] = type metadata accessor for FriendshipRequestContent(0);
    v0[12] = sub_100004EA8(&qword_100264B88, type metadata accessor for FriendshipRequestContent, (uint64_t)&unk_1001F7438);
    v0[13] = sub_100004EA8(&qword_100264B90, type metadata accessor for FriendshipRequestContent, (uint64_t)&unk_1001F7410);
    v20 = sub_10003276C(v0 + 8);
    v21 = (_QWORD *)swift_task_alloc(dword_100264B84);
    v0[69] = v21;
    *v21 = v0;
    v21[1] = sub_100145A10;
    return sub_100142950((uint64_t)v20, v0[61], v0[47], v0[51]);
  }
}

uint64_t sub_100145584()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 536);
  *(_QWORD *)(*v1 + 544) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 512));
    v4 = sub_100145E9C;
  }
  else
  {
    v4 = sub_1001455F0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001455F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;

  v1 = v0 + 16;
  v48 = (_QWORD *)(v0 + 160);
  v2 = v0 + 256;
  sub_1001461A4((__int128 *)(v0 + 208), (_OWORD *)(v0 + 16));
  v3 = *(_QWORD *)(v0 + 544);
  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100037A9C(v4, (uint64_t)qword_10027AD08);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v49 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_beginAccess(v1, v0 + 280, 0, 0);
    sub_1001461BC(v1, v0 + 112);
    v10 = sub_100037A5C(&qword_100264B98);
    v11 = String.init<A>(describing:)(v0 + 112, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 304) = sub_10002BA84(v11, v12, &v49);
    v2 = v0 + 256;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v8 + 4, v8 + 12);
    v14 = v13;
    v1 = v0 + 16;
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Request content: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v15 = *(_QWORD *)(v0 + 344);
  v16 = *(_QWORD **)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 336);
  v18 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = JSONEncoder.init()();
  *v16 = sub_100055760;
  v16[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v16, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v17);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v16);
  swift_beginAccess(v1, v2, 0, 0);
  sub_1001461BC(v1, (uint64_t)v48);
  v20 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 200);
  v22 = sub_100036228(v48, v20);
  v23 = dispatch thunk of JSONEncoder.encode<A>(_:)(v22, v20, v21);
  v25 = v24;
  swift_release(v19);
  if (v3)
  {
    swift_errorRelease(v3);
    v23 = 0;
    v25 = 0xF000000000000000;
  }
  v26 = *(_QWORD *)(v0 + 504);
  v34 = *(_QWORD *)(v0 + 512);
  v35 = *(_QWORD *)(v0 + 496);
  v36 = *(_QWORD *)(v0 + 488);
  v37 = *(_QWORD *)(v0 + 480);
  v38 = *(_QWORD *)(v0 + 472);
  v39 = *(_QWORD *)(v0 + 464);
  v27 = *(_QWORD *)(v0 + 440);
  v40 = *(_QWORD *)(v0 + 456);
  v41 = *(_QWORD *)(v0 + 448);
  v28 = *(_QWORD *)(v0 + 432);
  v42 = *(_QWORD *)(v0 + 424);
  v43 = *(_QWORD *)(v0 + 416);
  v44 = *(_QWORD *)(v0 + 408);
  v45 = *(_QWORD *)(v0 + 384);
  v29 = *(_QWORD *)(v0 + 368);
  v30 = *(_QWORD *)(v0 + 360);
  v46 = *(_QWORD *)(v0 + 376);
  v47 = *(_QWORD *)(v0 + 352);
  v31 = *(_QWORD *)(v0 + 320);
  v32 = *(_QWORD *)(v0 + 312);
  (*(void (**)(_QWORD, _QWORD))(v0 + 528))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v32, v28);
  sub_100024990(v26, type metadata accessor for ClientContext);
  sub_10002BB90(v48);
  sub_10001F728(v23, v25);
  sub_100037AF8(0, 0xF000000000000000);
  sub_10002BB90((_QWORD *)(v0 + 16));
  swift_bridgeObjectRetain(v34);
  sub_10001F728(v23, v25);
  sub_100037AF8(v23, v25);
  swift_bridgeObjectRelease_n(v34, 2);
  sub_100037AF8(v23, v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(v0 + 8))(*(_QWORD *)(v0 + 512), v23, v25);
}

uint64_t sub_100145A10()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 552);
  *(_QWORD *)(*v1 + 560) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 512));
    v4 = sub_100145FFC;
  }
  else
  {
    v4 = sub_100145A7C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100145A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;

  v1 = v0 + 16;
  v48 = (_QWORD *)(v0 + 160);
  v2 = v0 + 256;
  sub_1001461A4((__int128 *)(v0 + 64), (_OWORD *)(v0 + 16));
  v3 = *(_QWORD *)(v0 + 560);
  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100037A9C(v4, (uint64_t)qword_10027AD08);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v49 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_beginAccess(v1, v0 + 280, 0, 0);
    sub_1001461BC(v1, v0 + 112);
    v10 = sub_100037A5C(&qword_100264B98);
    v11 = String.init<A>(describing:)(v0 + 112, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 304) = sub_10002BA84(v11, v12, &v49);
    v2 = v0 + 256;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v8 + 4, v8 + 12);
    v14 = v13;
    v1 = v0 + 16;
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Request content: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v15 = *(_QWORD *)(v0 + 344);
  v16 = *(_QWORD **)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 336);
  v18 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = JSONEncoder.init()();
  *v16 = sub_100055760;
  v16[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v16, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v17);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v16);
  swift_beginAccess(v1, v2, 0, 0);
  sub_1001461BC(v1, (uint64_t)v48);
  v20 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 200);
  v22 = sub_100036228(v48, v20);
  v23 = dispatch thunk of JSONEncoder.encode<A>(_:)(v22, v20, v21);
  v25 = v24;
  swift_release(v19);
  if (v3)
  {
    swift_errorRelease(v3);
    v23 = 0;
    v25 = 0xF000000000000000;
  }
  v26 = *(_QWORD *)(v0 + 504);
  v34 = *(_QWORD *)(v0 + 512);
  v35 = *(_QWORD *)(v0 + 496);
  v36 = *(_QWORD *)(v0 + 488);
  v37 = *(_QWORD *)(v0 + 480);
  v38 = *(_QWORD *)(v0 + 472);
  v39 = *(_QWORD *)(v0 + 464);
  v27 = *(_QWORD *)(v0 + 440);
  v40 = *(_QWORD *)(v0 + 456);
  v41 = *(_QWORD *)(v0 + 448);
  v28 = *(_QWORD *)(v0 + 432);
  v42 = *(_QWORD *)(v0 + 424);
  v43 = *(_QWORD *)(v0 + 416);
  v44 = *(_QWORD *)(v0 + 408);
  v45 = *(_QWORD *)(v0 + 384);
  v29 = *(_QWORD *)(v0 + 368);
  v30 = *(_QWORD *)(v0 + 360);
  v46 = *(_QWORD *)(v0 + 376);
  v47 = *(_QWORD *)(v0 + 352);
  v31 = *(_QWORD *)(v0 + 320);
  v32 = *(_QWORD *)(v0 + 312);
  (*(void (**)(_QWORD, _QWORD))(v0 + 528))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v32, v28);
  sub_100024990(v26, type metadata accessor for ClientContext);
  sub_10002BB90(v48);
  sub_10001F728(v23, v25);
  sub_100037AF8(0, 0xF000000000000000);
  sub_10002BB90((_QWORD *)(v0 + 16));
  swift_bridgeObjectRetain(v34);
  sub_10001F728(v23, v25);
  sub_100037AF8(v23, v25);
  swift_bridgeObjectRelease_n(v34, 2);
  sub_100037AF8(v23, v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(v0 + 8))(*(_QWORD *)(v0 + 512), v23, v25);
}

uint64_t sub_100145E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 312);
  (*(void (**)(_QWORD, _QWORD))(v0 + 528))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v2);
  sub_100024990(v1, type metadata accessor for ClientContext);
  sub_100146170((_QWORD *)(v0 + 208));
  v8 = *(_QWORD *)(v0 + 504);
  v10 = *(_QWORD *)(v0 + 488);
  v9 = *(_QWORD *)(v0 + 496);
  v12 = *(_QWORD *)(v0 + 472);
  v11 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 464);
  v15 = *(_QWORD *)(v0 + 448);
  v16 = *(_QWORD *)(v0 + 424);
  v18 = *(_QWORD *)(v0 + 416);
  v19 = *(_QWORD *)(v0 + 408);
  v20 = *(_QWORD *)(v0 + 384);
  v21 = *(_QWORD *)(v0 + 376);
  v22 = *(_QWORD *)(v0 + 352);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 512));
  sub_100037AF8(0, 0xF000000000000000);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100145FFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 312);
  (*(void (**)(_QWORD, _QWORD))(v0 + 528))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v2);
  sub_100024990(v1, type metadata accessor for ClientContext);
  sub_100146170((_QWORD *)(v0 + 64));
  v8 = *(_QWORD *)(v0 + 504);
  v10 = *(_QWORD *)(v0 + 488);
  v9 = *(_QWORD *)(v0 + 496);
  v12 = *(_QWORD *)(v0 + 472);
  v11 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 464);
  v15 = *(_QWORD *)(v0 + 448);
  v16 = *(_QWORD *)(v0 + 424);
  v18 = *(_QWORD *)(v0 + 416);
  v19 = *(_QWORD *)(v0 + 408);
  v20 = *(_QWORD *)(v0 + 384);
  v21 = *(_QWORD *)(v0 + 376);
  v22 = *(_QWORD *)(v0 + 352);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 512));
  sub_100037AF8(0, 0xF000000000000000);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for FriendshipRequestContent(uint64_t a1)
{
  return sub_100025C3C(a1, qword_100264CB0, (uint64_t)&nominal type descriptor for FriendshipRequestContent);
}

_QWORD *sub_100146170(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

_OWORD *sub_1001461A4(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_1001461BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for FriendshipOfferContent(uint64_t a1)
{
  return sub_100025C3C(a1, qword_100264C10, (uint64_t)&nominal type descriptor for FriendshipOfferContent);
}

_OWORD *sub_100146214(_OWORD *a1, uint64_t *a2, int *a3)
{
  _OWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t, __n128);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = a2[5];
    if (v7)
    {
      *a1 = *(_OWORD *)a2;
      v8 = a2[2];
      *((_QWORD *)v4 + 2) = v8;
      *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 3);
      *((_QWORD *)v4 + 5) = v7;
      *((_BYTE *)v4 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)((char *)v4 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)((char *)v4 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)((char *)v4 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)((char *)v4 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)((char *)v4 + 120) = *(_OWORD *)(a2 + 15);
      v10 = a2[17];
      v9 = a2[18];
      *((_QWORD *)v4 + 17) = v10;
      *((_QWORD *)v4 + 18) = v9;
      v11 = a2[19];
      *((_QWORD *)v4 + 19) = v11;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      a1[6] = *((_OWORD *)a2 + 6);
      a1[7] = v13;
      v14 = *((_OWORD *)a2 + 9);
      a1[8] = *((_OWORD *)a2 + 8);
      a1[9] = v14;
      v15 = *((_OWORD *)a2 + 3);
      a1[2] = *((_OWORD *)a2 + 2);
      a1[3] = v15;
      v16 = *((_OWORD *)a2 + 5);
      a1[4] = *((_OWORD *)a2 + 4);
      a1[5] = v16;
      v17 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v17;
    }
    v18 = a3[5];
    v19 = (char *)v4 + v18;
    v20 = (uint64_t)a2 + v18;
    v92 = *(uint64_t *)((char *)a2 + v18 + 8);
    *(_QWORD *)v19 = *(uint64_t *)((char *)a2 + v18);
    *((_QWORD *)v19 + 1) = v92;
    v19[16] = *((_BYTE *)a2 + v18 + 16);
    v90 = *(uint64_t *)((char *)a2 + v18 + 32);
    *((_QWORD *)v19 + 3) = *(uint64_t *)((char *)a2 + v18 + 24);
    *((_QWORD *)v19 + 4) = v90;
    v21 = *(uint64_t *)((char *)a2 + v18 + 48);
    *((_QWORD *)v19 + 5) = *(uint64_t *)((char *)a2 + v18 + 40);
    *((_QWORD *)v19 + 6) = v21;
    v19[56] = *((_BYTE *)a2 + v18 + 56);
    v22 = *(uint64_t *)((char *)a2 + v18 + 72);
    *((_QWORD *)v19 + 8) = *(uint64_t *)((char *)a2 + v18 + 64);
    *((_QWORD *)v19 + 9) = v22;
    v23 = *(uint64_t *)((char *)a2 + v18 + 88);
    *((_QWORD *)v19 + 10) = *(uint64_t *)((char *)a2 + v18 + 80);
    *((_QWORD *)v19 + 11) = v23;
    v24 = *(uint64_t *)((char *)a2 + v18 + 104);
    *((_QWORD *)v19 + 12) = *(uint64_t *)((char *)a2 + v18 + 96);
    *((_QWORD *)v19 + 13) = v24;
    v25 = (int *)type metadata accessor for ClientContext(0);
    v26 = v25[12];
    v86 = v20 + v26;
    v88 = &v19[v26];
    v94 = a3;
    v27 = type metadata accessor for SystemInfo.DeviceLockState(0);
    v84 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v27 - 8) + 16);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v28 = swift_bridgeObjectRetain(v24);
    v84(v88, v86, v27, v28);
    *(_QWORD *)&v19[v25[13]] = *(_QWORD *)(v20 + v25[13]);
    v29 = v25[14];
    v30 = &v19[v29];
    v31 = (_QWORD *)(v20 + v29);
    v32 = v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v32;
    v19[v25[15]] = *(_BYTE *)(v20 + v25[15]);
    v33 = v25[16];
    v34 = &v19[v33];
    v35 = (_QWORD *)(v20 + v33);
    v93 = v35[1];
    *(_QWORD *)v34 = *v35;
    *((_QWORD *)v34 + 1) = v93;
    v36 = v25[17];
    v37 = &v19[v36];
    v38 = (_QWORD *)(v20 + v36);
    v91 = v38[1];
    *(_QWORD *)v37 = *v38;
    *((_QWORD *)v37 + 1) = v91;
    v39 = v25[18];
    v40 = &v19[v39];
    v41 = (_QWORD *)(v20 + v39);
    v89 = v41[1];
    *(_QWORD *)v40 = *v41;
    *((_QWORD *)v40 + 1) = v89;
    v42 = v25[19];
    v43 = &v19[v42];
    v44 = (_QWORD *)(v20 + v42);
    v87 = v44[1];
    *(_QWORD *)v43 = *v44;
    *((_QWORD *)v43 + 1) = v87;
    v45 = v25[20];
    v46 = &v19[v45];
    v47 = (_QWORD *)(v20 + v45);
    v85 = v47[1];
    *(_QWORD *)v46 = *v47;
    *((_QWORD *)v46 + 1) = v85;
    v48 = v25[21];
    v49 = &v19[v48];
    v50 = (_QWORD *)(v20 + v48);
    v83 = v50[1];
    *(_QWORD *)v49 = *v50;
    *((_QWORD *)v49 + 1) = v83;
    v51 = v25[22];
    v52 = &v19[v51];
    v53 = (_QWORD *)(v20 + v51);
    v82 = v53[1];
    *(_QWORD *)v52 = *v53;
    *((_QWORD *)v52 + 1) = v82;
    v54 = v25[23];
    v55 = &v19[v54];
    v56 = (_QWORD *)(v20 + v54);
    v57 = v56[1];
    *(_QWORD *)v55 = *v56;
    *((_QWORD *)v55 + 1) = v57;
    v58 = v25[24];
    v59 = &v19[v58];
    v60 = v20 + v58;
    *(_QWORD *)v59 = *(_QWORD *)v60;
    v59[8] = *(_BYTE *)(v60 + 8);
    v19[v25[25]] = *(_BYTE *)(v20 + v25[25]);
    v61 = v25[26];
    v62 = *(_QWORD *)(v20 + v61);
    *(_QWORD *)&v19[v61] = v62;
    v63 = v25[27];
    v64 = &v19[v63];
    v65 = (_QWORD *)(v20 + v63);
    v66 = v65[1];
    *(_QWORD *)v64 = *v65;
    *((_QWORD *)v64 + 1) = v66;
    v67 = v25[28];
    v68 = &v19[v67];
    v69 = (_QWORD *)(v20 + v67);
    v70 = v69[1];
    *(_QWORD *)v68 = *v69;
    *((_QWORD *)v68 + 1) = v70;
    v71 = v25[29];
    v72 = &v19[v71];
    v73 = (_QWORD *)(v20 + v71);
    v74 = v73[1];
    *(_QWORD *)v72 = *v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = v94[7];
    *(_QWORD *)((char *)v4 + v94[6]) = *(uint64_t *)((char *)a2 + v94[6]);
    v76 = (_QWORD *)((char *)v4 + v75);
    v77 = (uint64_t *)((char *)a2 + v75);
    v78 = v77[1];
    *v76 = *v77;
    v76[1] = v78;
    v79 = v94[8];
    v80 = *(uint64_t *)((char *)a2 + v79);
    *(_QWORD *)((char *)v4 + v79) = v80;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v80);
  }
  return v4;
}

uint64_t sub_100146604(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  uint64_t v9;

  v4 = a1[5];
  if (v4)
  {
    v5 = a1[2];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[19]);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[4]);
  swift_bridgeObjectRelease(v6[6]);
  swift_bridgeObjectRelease(v6[9]);
  swift_bridgeObjectRelease(v6[11]);
  swift_bridgeObjectRelease(v6[13]);
  v7 = (int *)type metadata accessor for ClientContext(0);
  v8 = (char *)v6 + v7[12];
  v9 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[21] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[22] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[23] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[26]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[27] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[28] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[29] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8]));
}

uint64_t sub_1001467A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;

  v6 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    v9 = *(_QWORD *)(a2 + 136);
    v8 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v9;
    *(_QWORD *)(a1 + 144) = v8;
    v10 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v10;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  v16 = a3[5];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v90 = *(_QWORD *)(a2 + v16 + 8);
  v92 = a3;
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = v90;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(a2 + v16 + 16);
  v88 = *(_QWORD *)(a2 + v16 + 32);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(a2 + v16 + 24);
  *(_QWORD *)(v17 + 32) = v88;
  v19 = *(_QWORD *)(a2 + v16 + 48);
  *(_QWORD *)(v17 + 40) = *(_QWORD *)(a2 + v16 + 40);
  *(_QWORD *)(v17 + 48) = v19;
  *(_BYTE *)(v17 + 56) = *(_BYTE *)(a2 + v16 + 56);
  v20 = *(_QWORD *)(a2 + v16 + 72);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(a2 + v16 + 64);
  *(_QWORD *)(v17 + 72) = v20;
  v21 = *(_QWORD *)(a2 + v16 + 88);
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(a2 + v16 + 80);
  *(_QWORD *)(v17 + 88) = v21;
  v22 = *(_QWORD *)(a2 + v16 + 104);
  *(_QWORD *)(v17 + 96) = *(_QWORD *)(a2 + v16 + 96);
  *(_QWORD *)(v17 + 104) = v22;
  v23 = (int *)type metadata accessor for ClientContext(0);
  v24 = v23[12];
  v84 = v18 + v24;
  v86 = v17 + v24;
  v25 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v82 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  v26 = swift_bridgeObjectRetain(v22);
  v82(v86, v84, v25, v26);
  *(_QWORD *)(v17 + v23[13]) = *(_QWORD *)(v18 + v23[13]);
  v27 = v23[14];
  v28 = (_QWORD *)(v17 + v27);
  v29 = (_QWORD *)(v18 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  *(_BYTE *)(v17 + v23[15]) = *(_BYTE *)(v18 + v23[15]);
  v31 = v23[16];
  v32 = (_QWORD *)(v17 + v31);
  v33 = (_QWORD *)(v18 + v31);
  v91 = v33[1];
  *v32 = *v33;
  v32[1] = v91;
  v34 = v23[17];
  v35 = (_QWORD *)(v17 + v34);
  v36 = (_QWORD *)(v18 + v34);
  v89 = v36[1];
  *v35 = *v36;
  v35[1] = v89;
  v37 = v23[18];
  v38 = (_QWORD *)(v17 + v37);
  v39 = (_QWORD *)(v18 + v37);
  v87 = v39[1];
  *v38 = *v39;
  v38[1] = v87;
  v40 = v23[19];
  v41 = (_QWORD *)(v17 + v40);
  v42 = (_QWORD *)(v18 + v40);
  v85 = v42[1];
  *v41 = *v42;
  v41[1] = v85;
  v43 = v23[20];
  v44 = (_QWORD *)(v17 + v43);
  v45 = (_QWORD *)(v18 + v43);
  v83 = v45[1];
  *v44 = *v45;
  v44[1] = v83;
  v46 = v23[21];
  v47 = (_QWORD *)(v17 + v46);
  v48 = (_QWORD *)(v18 + v46);
  v81 = v48[1];
  *v47 = *v48;
  v47[1] = v81;
  v49 = v23[22];
  v50 = (_QWORD *)(v17 + v49);
  v51 = (_QWORD *)(v18 + v49);
  v80 = v51[1];
  *v50 = *v51;
  v50[1] = v80;
  v52 = v23[23];
  v53 = (_QWORD *)(v17 + v52);
  v54 = (_QWORD *)(v18 + v52);
  v55 = v54[1];
  *v53 = *v54;
  v53[1] = v55;
  v56 = v23[24];
  v57 = v17 + v56;
  v58 = v18 + v56;
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
  *(_BYTE *)(v17 + v23[25]) = *(_BYTE *)(v18 + v23[25]);
  v59 = v23[26];
  v60 = *(_QWORD *)(v18 + v59);
  *(_QWORD *)(v17 + v59) = v60;
  v61 = v23[27];
  v62 = (_QWORD *)(v17 + v61);
  v63 = (_QWORD *)(v18 + v61);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  v65 = v23[28];
  v66 = (_QWORD *)(v17 + v65);
  v67 = (_QWORD *)(v18 + v65);
  v68 = v67[1];
  *v66 = *v67;
  v66[1] = v68;
  v69 = v23[29];
  v70 = (_QWORD *)(v17 + v69);
  v71 = (_QWORD *)(v18 + v69);
  v72 = v71[1];
  *v70 = *v71;
  v70[1] = v72;
  v73 = v92[7];
  *(_QWORD *)(a1 + v92[6]) = *(_QWORD *)(a2 + v92[6]);
  v74 = (_QWORD *)(a1 + v73);
  v75 = (_QWORD *)(a2 + v73);
  v76 = v75[1];
  *v74 = *v75;
  v74[1] = v76;
  v77 = v92[8];
  v78 = *(_QWORD *)(a2 + v77);
  *(_QWORD *)(a1 + v77) = v78;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v78);
  return a1;
}

uint64_t sub_100146B68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v10);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v11 = *(_QWORD *)(a2 + 136);
      v12 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v13 = *(_QWORD *)(a2 + 152);
      v14 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      sub_10004A1B8((_QWORD *)a1);
      v19 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v19;
      v20 = *(_OWORD *)(a2 + 80);
      v22 = *(_OWORD *)(a2 + 32);
      v21 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v20;
      *(_OWORD *)(a1 + 32) = v22;
      *(_OWORD *)(a1 + 48) = v21;
      v23 = *(_OWORD *)(a2 + 144);
      v25 = *(_OWORD *)(a2 + 96);
      v24 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v23;
      *(_OWORD *)(a1 + 96) = v25;
      *(_OWORD *)(a1 + 112) = v24;
    }
  }
  else if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v16;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v17 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v17;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v18 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v18;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v26;
    v27 = *(_OWORD *)(a2 + 32);
    v28 = *(_OWORD *)(a2 + 48);
    v29 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v29;
    *(_OWORD *)(a1 + 32) = v27;
    *(_OWORD *)(a1 + 48) = v28;
    v30 = *(_OWORD *)(a2 + 96);
    v31 = *(_OWORD *)(a2 + 112);
    v32 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v32;
    *(_OWORD *)(a1 + 96) = v30;
    *(_OWORD *)(a1 + 112) = v31;
  }
  v33 = a3[5];
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_QWORD *)v34 = *(_QWORD *)(a2 + v33);
  v36 = *(_QWORD *)(a2 + v33 + 8);
  v37 = *(_QWORD *)(a1 + v33 + 8);
  *(_QWORD *)(v34 + 8) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_BYTE *)(v34 + 16) = *(_BYTE *)(v35 + 16);
  *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
  v38 = *(_QWORD *)(v35 + 32);
  v39 = *(_QWORD *)(v34 + 32);
  *(_QWORD *)(v34 + 32) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  *(_QWORD *)(v34 + 40) = *(_QWORD *)(v35 + 40);
  v40 = *(_QWORD *)(v35 + 48);
  v41 = *(_QWORD *)(v34 + 48);
  *(_QWORD *)(v34 + 48) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *(_BYTE *)(v34 + 56) = *(_BYTE *)(v35 + 56);
  *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
  v42 = *(_QWORD *)(v35 + 72);
  v43 = *(_QWORD *)(v34 + 72);
  *(_QWORD *)(v34 + 72) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *(_QWORD *)(v34 + 80) = *(_QWORD *)(v35 + 80);
  v44 = *(_QWORD *)(v35 + 88);
  v45 = *(_QWORD *)(v34 + 88);
  *(_QWORD *)(v34 + 88) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_QWORD *)(v34 + 96) = *(_QWORD *)(v35 + 96);
  v46 = *(_QWORD *)(v35 + 104);
  v47 = *(_QWORD *)(v34 + 104);
  *(_QWORD *)(v34 + 104) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = (int *)type metadata accessor for ClientContext(0);
  v49 = v48[12];
  v50 = v34 + v49;
  v51 = v35 + v49;
  v52 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v50, v51, v52);
  *(_QWORD *)(v34 + v48[13]) = *(_QWORD *)(v35 + v48[13]);
  v53 = v48[14];
  v54 = (_QWORD *)(v34 + v53);
  v55 = (_QWORD *)(v35 + v53);
  *v54 = *v55;
  v56 = v55[1];
  v57 = v54[1];
  v54[1] = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *(_BYTE *)(v34 + v48[15]) = *(_BYTE *)(v35 + v48[15]);
  v58 = v48[16];
  v59 = (_QWORD *)(v34 + v58);
  v60 = (_QWORD *)(v35 + v58);
  *v59 = *v60;
  v61 = v60[1];
  v62 = v59[1];
  v59[1] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  v63 = v48[17];
  v64 = (_QWORD *)(v34 + v63);
  v65 = (_QWORD *)(v35 + v63);
  *v64 = *v65;
  v66 = v65[1];
  v67 = v64[1];
  v64[1] = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  v68 = v48[18];
  v69 = (_QWORD *)(v34 + v68);
  v70 = (_QWORD *)(v35 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v72 = v69[1];
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v73 = v48[19];
  v74 = (_QWORD *)(v34 + v73);
  v75 = (_QWORD *)(v35 + v73);
  *v74 = *v75;
  v76 = v75[1];
  v77 = v74[1];
  v74[1] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  v78 = v48[20];
  v79 = (_QWORD *)(v34 + v78);
  v80 = (_QWORD *)(v35 + v78);
  *v79 = *v80;
  v81 = v80[1];
  v82 = v79[1];
  v79[1] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  v83 = v48[21];
  v84 = (_QWORD *)(v34 + v83);
  v85 = (_QWORD *)(v35 + v83);
  *v84 = *v85;
  v86 = v85[1];
  v87 = v84[1];
  v84[1] = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  v88 = v48[22];
  v89 = (_QWORD *)(v34 + v88);
  v90 = (_QWORD *)(v35 + v88);
  *v89 = *v90;
  v91 = v90[1];
  v92 = v89[1];
  v89[1] = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v92);
  v93 = v48[23];
  v94 = (_QWORD *)(v34 + v93);
  v95 = (_QWORD *)(v35 + v93);
  *v94 = *v95;
  v96 = v95[1];
  v97 = v94[1];
  v94[1] = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  v98 = v48[24];
  v99 = v34 + v98;
  v100 = (uint64_t *)(v35 + v98);
  v101 = *v100;
  *(_BYTE *)(v99 + 8) = *((_BYTE *)v100 + 8);
  *(_QWORD *)v99 = v101;
  *(_BYTE *)(v34 + v48[25]) = *(_BYTE *)(v35 + v48[25]);
  v102 = v48[26];
  v103 = *(_QWORD *)(v34 + v102);
  v104 = *(_QWORD *)(v35 + v102);
  *(_QWORD *)(v34 + v102) = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v103);
  v105 = v48[27];
  v106 = (_QWORD *)(v34 + v105);
  v107 = (_QWORD *)(v35 + v105);
  *v106 = *v107;
  v108 = v107[1];
  v109 = v106[1];
  v106[1] = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  v110 = v48[28];
  v111 = (_QWORD *)(v34 + v110);
  v112 = (_QWORD *)(v35 + v110);
  *v111 = *v112;
  v113 = v112[1];
  v114 = v111[1];
  v111[1] = v113;
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRelease(v114);
  v115 = v48[29];
  v116 = (_QWORD *)(v34 + v115);
  v117 = (_QWORD *)(v35 + v115);
  *v116 = *v117;
  v118 = v117[1];
  v119 = v116[1];
  v116[1] = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease(v119);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v120 = a3[7];
  v121 = (_QWORD *)(a1 + v120);
  v122 = (_QWORD *)(a2 + v120);
  *v121 = *v122;
  v123 = v122[1];
  v124 = v121[1];
  v121[1] = v123;
  swift_bridgeObjectRetain(v123);
  swift_bridgeObjectRelease(v124);
  v125 = a3[8];
  v126 = *(_QWORD *)(a2 + v125);
  v127 = *(_QWORD *)(a1 + v125);
  *(_QWORD *)(a1 + v125) = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  return a1;
}

_OWORD *sub_100147190(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  v11 = a3[5];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_OWORD *)v12 = *(_OWORD *)((char *)a2 + v11);
  v12[16] = *((_BYTE *)a2 + v11 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)((char *)a2 + v11 + 40);
  v12[56] = *((_BYTE *)a2 + v11 + 56);
  v14 = *(_OWORD *)((char *)a2 + v11 + 80);
  *((_OWORD *)v12 + 4) = *(_OWORD *)((char *)a2 + v11 + 64);
  *((_OWORD *)v12 + 5) = v14;
  *((_OWORD *)v12 + 6) = *(_OWORD *)((char *)a2 + v11 + 96);
  v15 = (int *)type metadata accessor for ClientContext(0);
  v16 = v15[12];
  v17 = &v12[v16];
  v18 = &v13[v16];
  v19 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_QWORD *)&v12[v15[13]] = *(_QWORD *)&v13[v15[13]];
  *(_OWORD *)&v12[v15[14]] = *(_OWORD *)&v13[v15[14]];
  v12[v15[15]] = v13[v15[15]];
  *(_OWORD *)&v12[v15[16]] = *(_OWORD *)&v13[v15[16]];
  *(_OWORD *)&v12[v15[17]] = *(_OWORD *)&v13[v15[17]];
  *(_OWORD *)&v12[v15[18]] = *(_OWORD *)&v13[v15[18]];
  *(_OWORD *)&v12[v15[19]] = *(_OWORD *)&v13[v15[19]];
  *(_OWORD *)&v12[v15[20]] = *(_OWORD *)&v13[v15[20]];
  *(_OWORD *)&v12[v15[21]] = *(_OWORD *)&v13[v15[21]];
  *(_OWORD *)&v12[v15[22]] = *(_OWORD *)&v13[v15[22]];
  *(_OWORD *)&v12[v15[23]] = *(_OWORD *)&v13[v15[23]];
  v20 = v15[24];
  v21 = &v12[v20];
  v22 = &v13[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v12[v15[25]] = v13[v15[25]];
  *(_QWORD *)&v12[v15[26]] = *(_QWORD *)&v13[v15[26]];
  *(_OWORD *)&v12[v15[27]] = *(_OWORD *)&v13[v15[27]];
  *(_OWORD *)&v12[v15[28]] = *(_OWORD *)&v13[v15[28]];
  *(_OWORD *)&v12[v15[29]] = *(_OWORD *)&v13[v15[29]];
  v23 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t sub_100147370(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_5;
  if (!*(_QWORD *)(a2 + 40))
  {
    sub_10004A1B8((_QWORD *)a1);
LABEL_5:
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v17;
    v18 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v18;
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v19;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  swift_bridgeObjectRelease(v14);
LABEL_6:
  v20 = a3[5];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20 + 8);
  v24 = *(_QWORD *)(a1 + v20 + 8);
  *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(v21 + 8) = v23;
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  v25 = *(_QWORD *)(v22 + 32);
  v26 = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v21 + 32) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(v22 + 48);
  v28 = *(_QWORD *)(v21 + 48);
  *(_QWORD *)(v21 + 40) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v21 + 48) = v27;
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(v21 + 56) = *(_BYTE *)(v22 + 56);
  v29 = *(_QWORD *)(v22 + 72);
  v30 = *(_QWORD *)(v21 + 72);
  *(_QWORD *)(v21 + 64) = *(_QWORD *)(v22 + 64);
  *(_QWORD *)(v21 + 72) = v29;
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(v22 + 88);
  v32 = *(_QWORD *)(v21 + 88);
  *(_QWORD *)(v21 + 80) = *(_QWORD *)(v22 + 80);
  *(_QWORD *)(v21 + 88) = v31;
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(v22 + 104);
  v34 = *(_QWORD *)(v21 + 104);
  *(_QWORD *)(v21 + 96) = *(_QWORD *)(v22 + 96);
  *(_QWORD *)(v21 + 104) = v33;
  swift_bridgeObjectRelease(v34);
  v35 = (int *)type metadata accessor for ClientContext(0);
  v36 = v35[12];
  v37 = v21 + v36;
  v38 = v22 + v36;
  v39 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  *(_QWORD *)(v21 + v35[13]) = *(_QWORD *)(v22 + v35[13]);
  v40 = v35[14];
  v41 = (_QWORD *)(v21 + v40);
  v42 = (uint64_t *)(v22 + v40);
  v44 = *v42;
  v43 = v42[1];
  v45 = v41[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  *(_BYTE *)(v21 + v35[15]) = *(_BYTE *)(v22 + v35[15]);
  v46 = v35[16];
  v47 = (_QWORD *)(v21 + v46);
  v48 = (uint64_t *)(v22 + v46);
  v50 = *v48;
  v49 = v48[1];
  v51 = v47[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  v52 = v35[17];
  v53 = (_QWORD *)(v21 + v52);
  v54 = (uint64_t *)(v22 + v52);
  v56 = *v54;
  v55 = v54[1];
  v57 = v53[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  v58 = v35[18];
  v59 = (_QWORD *)(v21 + v58);
  v60 = (uint64_t *)(v22 + v58);
  v62 = *v60;
  v61 = v60[1];
  v63 = v59[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  v64 = v35[19];
  v65 = (_QWORD *)(v21 + v64);
  v66 = (uint64_t *)(v22 + v64);
  v68 = *v66;
  v67 = v66[1];
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = v35[20];
  v71 = (_QWORD *)(v21 + v70);
  v72 = (uint64_t *)(v22 + v70);
  v74 = *v72;
  v73 = v72[1];
  v75 = v71[1];
  *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease(v75);
  v76 = v35[21];
  v77 = (_QWORD *)(v21 + v76);
  v78 = (uint64_t *)(v22 + v76);
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  v82 = v35[22];
  v83 = (_QWORD *)(v21 + v82);
  v84 = (uint64_t *)(v22 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  v88 = v35[23];
  v89 = (_QWORD *)(v21 + v88);
  v90 = (uint64_t *)(v22 + v88);
  v92 = *v90;
  v91 = v90[1];
  v93 = v89[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease(v93);
  v94 = v35[24];
  v95 = v21 + v94;
  v96 = v22 + v94;
  *(_QWORD *)v95 = *(_QWORD *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  *(_BYTE *)(v21 + v35[25]) = *(_BYTE *)(v22 + v35[25]);
  v97 = v35[26];
  v98 = *(_QWORD *)(v21 + v97);
  *(_QWORD *)(v21 + v97) = *(_QWORD *)(v22 + v97);
  swift_bridgeObjectRelease(v98);
  v99 = v35[27];
  v100 = (_QWORD *)(v21 + v99);
  v101 = (uint64_t *)(v22 + v99);
  v103 = *v101;
  v102 = v101[1];
  v104 = v100[1];
  *v100 = v103;
  v100[1] = v102;
  swift_bridgeObjectRelease(v104);
  v105 = v35[28];
  v106 = (_QWORD *)(v21 + v105);
  v107 = (uint64_t *)(v22 + v105);
  v109 = *v107;
  v108 = v107[1];
  v110 = v106[1];
  *v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease(v110);
  v111 = v35[29];
  v112 = (_QWORD *)(v21 + v111);
  v113 = (uint64_t *)(v22 + v111);
  v115 = *v113;
  v114 = v113[1];
  v116 = v112[1];
  *v112 = v115;
  v112[1] = v114;
  swift_bridgeObjectRelease(v116);
  v117 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v118 = (_QWORD *)(a1 + v117);
  v119 = (uint64_t *)(a2 + v117);
  v121 = *v119;
  v120 = v119[1];
  v122 = v118[1];
  *v118 = v121;
  v118[1] = v120;
  swift_bridgeObjectRelease(v122);
  v123 = a3[8];
  v124 = *(_QWORD *)(a1 + v123);
  *(_QWORD *)(a1 + v123) = *(_QWORD *)(a2 + v123);
  swift_bridgeObjectRelease(v124);
  return a1;
}

uint64_t sub_1001476FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100147708);
}

uint64_t sub_10014770C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100147718);
}

uint64_t sub_10014771C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1001F7238;
  result = type metadata accessor for ClientContext(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_1001F7250;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

_OWORD *sub_1001477B4(_OWORD *a1, uint64_t *a2, int *a3)
{
  _OWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t, __n128);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = a2[5];
    if (v7)
    {
      *a1 = *(_OWORD *)a2;
      v8 = a2[2];
      *((_QWORD *)v4 + 2) = v8;
      *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 3);
      *((_QWORD *)v4 + 5) = v7;
      *((_BYTE *)v4 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)((char *)v4 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)((char *)v4 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)((char *)v4 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)((char *)v4 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)((char *)v4 + 120) = *(_OWORD *)(a2 + 15);
      v10 = a2[17];
      v9 = a2[18];
      *((_QWORD *)v4 + 17) = v10;
      *((_QWORD *)v4 + 18) = v9;
      v11 = a2[19];
      *((_QWORD *)v4 + 19) = v11;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      a1[6] = *((_OWORD *)a2 + 6);
      a1[7] = v13;
      v14 = *((_OWORD *)a2 + 9);
      a1[8] = *((_OWORD *)a2 + 8);
      a1[9] = v14;
      v15 = *((_OWORD *)a2 + 3);
      a1[2] = *((_OWORD *)a2 + 2);
      a1[3] = v15;
      v16 = *((_OWORD *)a2 + 5);
      a1[4] = *((_OWORD *)a2 + 4);
      a1[5] = v16;
      v17 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v17;
    }
    v18 = a3[5];
    v19 = (char *)v4 + v18;
    v20 = (uint64_t)a2 + v18;
    v94 = *(uint64_t *)((char *)a2 + v18 + 8);
    *(_QWORD *)v19 = *(uint64_t *)((char *)a2 + v18);
    *((_QWORD *)v19 + 1) = v94;
    v19[16] = *((_BYTE *)a2 + v18 + 16);
    v92 = *(uint64_t *)((char *)a2 + v18 + 32);
    *((_QWORD *)v19 + 3) = *(uint64_t *)((char *)a2 + v18 + 24);
    *((_QWORD *)v19 + 4) = v92;
    v21 = *(uint64_t *)((char *)a2 + v18 + 48);
    *((_QWORD *)v19 + 5) = *(uint64_t *)((char *)a2 + v18 + 40);
    *((_QWORD *)v19 + 6) = v21;
    v19[56] = *((_BYTE *)a2 + v18 + 56);
    v22 = *(uint64_t *)((char *)a2 + v18 + 72);
    *((_QWORD *)v19 + 8) = *(uint64_t *)((char *)a2 + v18 + 64);
    *((_QWORD *)v19 + 9) = v22;
    v23 = *(uint64_t *)((char *)a2 + v18 + 88);
    *((_QWORD *)v19 + 10) = *(uint64_t *)((char *)a2 + v18 + 80);
    *((_QWORD *)v19 + 11) = v23;
    v24 = *(uint64_t *)((char *)a2 + v18 + 104);
    *((_QWORD *)v19 + 12) = *(uint64_t *)((char *)a2 + v18 + 96);
    *((_QWORD *)v19 + 13) = v24;
    v25 = (int *)type metadata accessor for ClientContext(0);
    v26 = v25[12];
    v88 = v20 + v26;
    v90 = &v19[v26];
    v96 = a3;
    v27 = type metadata accessor for SystemInfo.DeviceLockState(0);
    v86 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v27 - 8) + 16);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v28 = swift_bridgeObjectRetain(v24);
    v86(v90, v88, v27, v28);
    *(_QWORD *)&v19[v25[13]] = *(_QWORD *)(v20 + v25[13]);
    v29 = v25[14];
    v30 = &v19[v29];
    v31 = (_QWORD *)(v20 + v29);
    v32 = v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v32;
    v19[v25[15]] = *(_BYTE *)(v20 + v25[15]);
    v33 = v25[16];
    v34 = &v19[v33];
    v35 = (_QWORD *)(v20 + v33);
    v95 = v35[1];
    *(_QWORD *)v34 = *v35;
    *((_QWORD *)v34 + 1) = v95;
    v36 = v25[17];
    v37 = &v19[v36];
    v38 = (_QWORD *)(v20 + v36);
    v93 = v38[1];
    *(_QWORD *)v37 = *v38;
    *((_QWORD *)v37 + 1) = v93;
    v39 = v25[18];
    v40 = &v19[v39];
    v41 = (_QWORD *)(v20 + v39);
    v91 = v41[1];
    *(_QWORD *)v40 = *v41;
    *((_QWORD *)v40 + 1) = v91;
    v42 = v25[19];
    v43 = &v19[v42];
    v44 = (_QWORD *)(v20 + v42);
    v89 = v44[1];
    *(_QWORD *)v43 = *v44;
    *((_QWORD *)v43 + 1) = v89;
    v45 = v25[20];
    v46 = &v19[v45];
    v47 = (_QWORD *)(v20 + v45);
    v87 = v47[1];
    *(_QWORD *)v46 = *v47;
    *((_QWORD *)v46 + 1) = v87;
    v48 = v25[21];
    v49 = &v19[v48];
    v50 = (_QWORD *)(v20 + v48);
    v85 = v50[1];
    *(_QWORD *)v49 = *v50;
    *((_QWORD *)v49 + 1) = v85;
    v51 = v25[22];
    v52 = &v19[v51];
    v53 = (_QWORD *)(v20 + v51);
    v84 = v53[1];
    *(_QWORD *)v52 = *v53;
    *((_QWORD *)v52 + 1) = v84;
    v54 = v25[23];
    v55 = &v19[v54];
    v56 = (_QWORD *)(v20 + v54);
    v83 = v56[1];
    *(_QWORD *)v55 = *v56;
    *((_QWORD *)v55 + 1) = v83;
    v57 = v25[24];
    v58 = &v19[v57];
    v59 = v20 + v57;
    *(_QWORD *)v58 = *(_QWORD *)v59;
    v58[8] = *(_BYTE *)(v59 + 8);
    v19[v25[25]] = *(_BYTE *)(v20 + v25[25]);
    v60 = v25[26];
    v61 = *(_QWORD *)(v20 + v60);
    *(_QWORD *)&v19[v60] = v61;
    v62 = v25[27];
    v63 = &v19[v62];
    v64 = (_QWORD *)(v20 + v62);
    v65 = v64[1];
    *(_QWORD *)v63 = *v64;
    *((_QWORD *)v63 + 1) = v65;
    v66 = v25[28];
    v67 = &v19[v66];
    v68 = (_QWORD *)(v20 + v66);
    v69 = v68[1];
    *(_QWORD *)v67 = *v68;
    *((_QWORD *)v67 + 1) = v69;
    v70 = v25[29];
    v71 = &v19[v70];
    v72 = (_QWORD *)(v20 + v70);
    v73 = v72[1];
    *(_QWORD *)v71 = *v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = v96[7];
    *(_QWORD *)((char *)v4 + v96[6]) = *(uint64_t *)((char *)a2 + v96[6]);
    v75 = (_QWORD *)((char *)v4 + v74);
    v76 = (uint64_t *)((char *)a2 + v74);
    v77 = v76[1];
    *v75 = *v76;
    v75[1] = v77;
    v78 = v96[8];
    v79 = v96[9];
    v80 = *(uint64_t *)((char *)a2 + v78);
    *(_QWORD *)((char *)v4 + v78) = v80;
    v81 = *(uint64_t *)((char *)a2 + v79);
    *(_QWORD *)((char *)v4 + v79) = v81;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v95);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v81);
  }
  return v4;
}

uint64_t sub_100147BB4(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  uint64_t v9;

  v4 = a1[5];
  if (v4)
  {
    v5 = a1[2];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[19]);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[4]);
  swift_bridgeObjectRelease(v6[6]);
  swift_bridgeObjectRelease(v6[9]);
  swift_bridgeObjectRelease(v6[11]);
  swift_bridgeObjectRelease(v6[13]);
  v7 = (int *)type metadata accessor for ClientContext(0);
  v8 = (char *)v6 + v7[12];
  v9 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[21] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[22] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[23] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[26]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[27] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[28] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[29] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8]));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[9]));
}

uint64_t sub_100147D64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;

  v6 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    v9 = *(_QWORD *)(a2 + 136);
    v8 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v9;
    *(_QWORD *)(a1 + 144) = v8;
    v10 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v10;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  v16 = a3[5];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v92 = *(_QWORD *)(a2 + v16 + 8);
  v94 = a3;
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = v92;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(a2 + v16 + 16);
  v90 = *(_QWORD *)(a2 + v16 + 32);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(a2 + v16 + 24);
  *(_QWORD *)(v17 + 32) = v90;
  v19 = *(_QWORD *)(a2 + v16 + 48);
  *(_QWORD *)(v17 + 40) = *(_QWORD *)(a2 + v16 + 40);
  *(_QWORD *)(v17 + 48) = v19;
  *(_BYTE *)(v17 + 56) = *(_BYTE *)(a2 + v16 + 56);
  v20 = *(_QWORD *)(a2 + v16 + 72);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(a2 + v16 + 64);
  *(_QWORD *)(v17 + 72) = v20;
  v21 = *(_QWORD *)(a2 + v16 + 88);
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(a2 + v16 + 80);
  *(_QWORD *)(v17 + 88) = v21;
  v22 = *(_QWORD *)(a2 + v16 + 104);
  *(_QWORD *)(v17 + 96) = *(_QWORD *)(a2 + v16 + 96);
  *(_QWORD *)(v17 + 104) = v22;
  v23 = (int *)type metadata accessor for ClientContext(0);
  v24 = v23[12];
  v86 = v18 + v24;
  v88 = v17 + v24;
  v25 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v84 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  v26 = swift_bridgeObjectRetain(v22);
  v84(v88, v86, v25, v26);
  *(_QWORD *)(v17 + v23[13]) = *(_QWORD *)(v18 + v23[13]);
  v27 = v23[14];
  v28 = (_QWORD *)(v17 + v27);
  v29 = (_QWORD *)(v18 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  *(_BYTE *)(v17 + v23[15]) = *(_BYTE *)(v18 + v23[15]);
  v31 = v23[16];
  v32 = (_QWORD *)(v17 + v31);
  v33 = (_QWORD *)(v18 + v31);
  v93 = v33[1];
  *v32 = *v33;
  v32[1] = v93;
  v34 = v23[17];
  v35 = (_QWORD *)(v17 + v34);
  v36 = (_QWORD *)(v18 + v34);
  v91 = v36[1];
  *v35 = *v36;
  v35[1] = v91;
  v37 = v23[18];
  v38 = (_QWORD *)(v17 + v37);
  v39 = (_QWORD *)(v18 + v37);
  v89 = v39[1];
  *v38 = *v39;
  v38[1] = v89;
  v40 = v23[19];
  v41 = (_QWORD *)(v17 + v40);
  v42 = (_QWORD *)(v18 + v40);
  v87 = v42[1];
  *v41 = *v42;
  v41[1] = v87;
  v43 = v23[20];
  v44 = (_QWORD *)(v17 + v43);
  v45 = (_QWORD *)(v18 + v43);
  v85 = v45[1];
  *v44 = *v45;
  v44[1] = v85;
  v46 = v23[21];
  v47 = (_QWORD *)(v17 + v46);
  v48 = (_QWORD *)(v18 + v46);
  v83 = v48[1];
  *v47 = *v48;
  v47[1] = v83;
  v49 = v23[22];
  v50 = (_QWORD *)(v17 + v49);
  v51 = (_QWORD *)(v18 + v49);
  v82 = v51[1];
  *v50 = *v51;
  v50[1] = v82;
  v52 = v23[23];
  v53 = (_QWORD *)(v17 + v52);
  v54 = (_QWORD *)(v18 + v52);
  v81 = v54[1];
  *v53 = *v54;
  v53[1] = v81;
  v55 = v23[24];
  v56 = v17 + v55;
  v57 = v18 + v55;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  *(_BYTE *)(v17 + v23[25]) = *(_BYTE *)(v18 + v23[25]);
  v58 = v23[26];
  v59 = *(_QWORD *)(v18 + v58);
  *(_QWORD *)(v17 + v58) = v59;
  v60 = v23[27];
  v61 = (_QWORD *)(v17 + v60);
  v62 = (_QWORD *)(v18 + v60);
  v63 = v62[1];
  *v61 = *v62;
  v61[1] = v63;
  v64 = v23[28];
  v65 = (_QWORD *)(v17 + v64);
  v66 = (_QWORD *)(v18 + v64);
  v67 = v66[1];
  *v65 = *v66;
  v65[1] = v67;
  v68 = v23[29];
  v69 = (_QWORD *)(v17 + v68);
  v70 = (_QWORD *)(v18 + v68);
  v71 = v70[1];
  *v69 = *v70;
  v69[1] = v71;
  v72 = v94[7];
  *(_QWORD *)(a1 + v94[6]) = *(_QWORD *)(a2 + v94[6]);
  v73 = (_QWORD *)(a1 + v72);
  v74 = (_QWORD *)(a2 + v72);
  v75 = v74[1];
  *v73 = *v74;
  v73[1] = v75;
  v76 = v94[8];
  v77 = v94[9];
  v78 = *(_QWORD *)(a2 + v76);
  *(_QWORD *)(a1 + v76) = v78;
  v79 = *(_QWORD *)(a2 + v77);
  *(_QWORD *)(a1 + v77) = v79;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  return a1;
}

uint64_t sub_100148134(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v10);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v11 = *(_QWORD *)(a2 + 136);
      v12 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v13 = *(_QWORD *)(a2 + 152);
      v14 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      sub_10004A1B8((_QWORD *)a1);
      v19 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v19;
      v20 = *(_OWORD *)(a2 + 80);
      v22 = *(_OWORD *)(a2 + 32);
      v21 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v20;
      *(_OWORD *)(a1 + 32) = v22;
      *(_OWORD *)(a1 + 48) = v21;
      v23 = *(_OWORD *)(a2 + 144);
      v25 = *(_OWORD *)(a2 + 96);
      v24 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v23;
      *(_OWORD *)(a1 + 96) = v25;
      *(_OWORD *)(a1 + 112) = v24;
    }
  }
  else if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v16;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v17 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v17;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v18 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v18;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v26;
    v27 = *(_OWORD *)(a2 + 32);
    v28 = *(_OWORD *)(a2 + 48);
    v29 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v29;
    *(_OWORD *)(a1 + 32) = v27;
    *(_OWORD *)(a1 + 48) = v28;
    v30 = *(_OWORD *)(a2 + 96);
    v31 = *(_OWORD *)(a2 + 112);
    v32 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v32;
    *(_OWORD *)(a1 + 96) = v30;
    *(_OWORD *)(a1 + 112) = v31;
  }
  v33 = a3[5];
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_QWORD *)v34 = *(_QWORD *)(a2 + v33);
  v36 = *(_QWORD *)(a2 + v33 + 8);
  v37 = *(_QWORD *)(a1 + v33 + 8);
  *(_QWORD *)(v34 + 8) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_BYTE *)(v34 + 16) = *(_BYTE *)(v35 + 16);
  *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
  v38 = *(_QWORD *)(v35 + 32);
  v39 = *(_QWORD *)(v34 + 32);
  *(_QWORD *)(v34 + 32) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  *(_QWORD *)(v34 + 40) = *(_QWORD *)(v35 + 40);
  v40 = *(_QWORD *)(v35 + 48);
  v41 = *(_QWORD *)(v34 + 48);
  *(_QWORD *)(v34 + 48) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *(_BYTE *)(v34 + 56) = *(_BYTE *)(v35 + 56);
  *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
  v42 = *(_QWORD *)(v35 + 72);
  v43 = *(_QWORD *)(v34 + 72);
  *(_QWORD *)(v34 + 72) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *(_QWORD *)(v34 + 80) = *(_QWORD *)(v35 + 80);
  v44 = *(_QWORD *)(v35 + 88);
  v45 = *(_QWORD *)(v34 + 88);
  *(_QWORD *)(v34 + 88) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_QWORD *)(v34 + 96) = *(_QWORD *)(v35 + 96);
  v46 = *(_QWORD *)(v35 + 104);
  v47 = *(_QWORD *)(v34 + 104);
  *(_QWORD *)(v34 + 104) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = (int *)type metadata accessor for ClientContext(0);
  v49 = v48[12];
  v50 = v34 + v49;
  v51 = v35 + v49;
  v52 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v50, v51, v52);
  *(_QWORD *)(v34 + v48[13]) = *(_QWORD *)(v35 + v48[13]);
  v53 = v48[14];
  v54 = (_QWORD *)(v34 + v53);
  v55 = (_QWORD *)(v35 + v53);
  *v54 = *v55;
  v56 = v55[1];
  v57 = v54[1];
  v54[1] = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *(_BYTE *)(v34 + v48[15]) = *(_BYTE *)(v35 + v48[15]);
  v58 = v48[16];
  v59 = (_QWORD *)(v34 + v58);
  v60 = (_QWORD *)(v35 + v58);
  *v59 = *v60;
  v61 = v60[1];
  v62 = v59[1];
  v59[1] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  v63 = v48[17];
  v64 = (_QWORD *)(v34 + v63);
  v65 = (_QWORD *)(v35 + v63);
  *v64 = *v65;
  v66 = v65[1];
  v67 = v64[1];
  v64[1] = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  v68 = v48[18];
  v69 = (_QWORD *)(v34 + v68);
  v70 = (_QWORD *)(v35 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v72 = v69[1];
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v73 = v48[19];
  v74 = (_QWORD *)(v34 + v73);
  v75 = (_QWORD *)(v35 + v73);
  *v74 = *v75;
  v76 = v75[1];
  v77 = v74[1];
  v74[1] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  v78 = v48[20];
  v79 = (_QWORD *)(v34 + v78);
  v80 = (_QWORD *)(v35 + v78);
  *v79 = *v80;
  v81 = v80[1];
  v82 = v79[1];
  v79[1] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  v83 = v48[21];
  v84 = (_QWORD *)(v34 + v83);
  v85 = (_QWORD *)(v35 + v83);
  *v84 = *v85;
  v86 = v85[1];
  v87 = v84[1];
  v84[1] = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  v88 = v48[22];
  v89 = (_QWORD *)(v34 + v88);
  v90 = (_QWORD *)(v35 + v88);
  *v89 = *v90;
  v91 = v90[1];
  v92 = v89[1];
  v89[1] = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v92);
  v93 = v48[23];
  v94 = (_QWORD *)(v34 + v93);
  v95 = (_QWORD *)(v35 + v93);
  *v94 = *v95;
  v96 = v95[1];
  v97 = v94[1];
  v94[1] = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  v98 = v48[24];
  v99 = v34 + v98;
  v100 = (uint64_t *)(v35 + v98);
  v101 = *v100;
  *(_BYTE *)(v99 + 8) = *((_BYTE *)v100 + 8);
  *(_QWORD *)v99 = v101;
  *(_BYTE *)(v34 + v48[25]) = *(_BYTE *)(v35 + v48[25]);
  v102 = v48[26];
  v103 = *(_QWORD *)(v34 + v102);
  v104 = *(_QWORD *)(v35 + v102);
  *(_QWORD *)(v34 + v102) = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v103);
  v105 = v48[27];
  v106 = (_QWORD *)(v34 + v105);
  v107 = (_QWORD *)(v35 + v105);
  *v106 = *v107;
  v108 = v107[1];
  v109 = v106[1];
  v106[1] = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  v110 = v48[28];
  v111 = (_QWORD *)(v34 + v110);
  v112 = (_QWORD *)(v35 + v110);
  *v111 = *v112;
  v113 = v112[1];
  v114 = v111[1];
  v111[1] = v113;
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRelease(v114);
  v115 = v48[29];
  v116 = (_QWORD *)(v34 + v115);
  v117 = (_QWORD *)(v35 + v115);
  *v116 = *v117;
  v118 = v117[1];
  v119 = v116[1];
  v116[1] = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease(v119);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v120 = a3[7];
  v121 = (_QWORD *)(a1 + v120);
  v122 = (_QWORD *)(a2 + v120);
  *v121 = *v122;
  v123 = v122[1];
  v124 = v121[1];
  v121[1] = v123;
  swift_bridgeObjectRetain(v123);
  swift_bridgeObjectRelease(v124);
  v125 = a3[8];
  v126 = *(_QWORD *)(a2 + v125);
  v127 = *(_QWORD *)(a1 + v125);
  *(_QWORD *)(a1 + v125) = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  v128 = a3[9];
  v129 = *(_QWORD *)(a1 + v128);
  v130 = *(_QWORD *)(a2 + v128);
  *(_QWORD *)(a1 + v128) = v130;
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRelease(v129);
  return a1;
}

_OWORD *sub_100148778(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  v11 = a3[5];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_OWORD *)v12 = *(_OWORD *)((char *)a2 + v11);
  v12[16] = *((_BYTE *)a2 + v11 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)((char *)a2 + v11 + 40);
  v12[56] = *((_BYTE *)a2 + v11 + 56);
  v14 = *(_OWORD *)((char *)a2 + v11 + 80);
  *((_OWORD *)v12 + 4) = *(_OWORD *)((char *)a2 + v11 + 64);
  *((_OWORD *)v12 + 5) = v14;
  *((_OWORD *)v12 + 6) = *(_OWORD *)((char *)a2 + v11 + 96);
  v15 = (int *)type metadata accessor for ClientContext(0);
  v16 = v15[12];
  v17 = &v12[v16];
  v18 = &v13[v16];
  v19 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_QWORD *)&v12[v15[13]] = *(_QWORD *)&v13[v15[13]];
  *(_OWORD *)&v12[v15[14]] = *(_OWORD *)&v13[v15[14]];
  v12[v15[15]] = v13[v15[15]];
  *(_OWORD *)&v12[v15[16]] = *(_OWORD *)&v13[v15[16]];
  *(_OWORD *)&v12[v15[17]] = *(_OWORD *)&v13[v15[17]];
  *(_OWORD *)&v12[v15[18]] = *(_OWORD *)&v13[v15[18]];
  *(_OWORD *)&v12[v15[19]] = *(_OWORD *)&v13[v15[19]];
  *(_OWORD *)&v12[v15[20]] = *(_OWORD *)&v13[v15[20]];
  *(_OWORD *)&v12[v15[21]] = *(_OWORD *)&v13[v15[21]];
  *(_OWORD *)&v12[v15[22]] = *(_OWORD *)&v13[v15[22]];
  *(_OWORD *)&v12[v15[23]] = *(_OWORD *)&v13[v15[23]];
  v20 = v15[24];
  v21 = &v12[v20];
  v22 = &v13[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v12[v15[25]] = v13[v15[25]];
  *(_QWORD *)&v12[v15[26]] = *(_QWORD *)&v13[v15[26]];
  *(_OWORD *)&v12[v15[27]] = *(_OWORD *)&v13[v15[27]];
  *(_OWORD *)&v12[v15[28]] = *(_OWORD *)&v13[v15[28]];
  *(_OWORD *)&v12[v15[29]] = *(_OWORD *)&v13[v15[29]];
  v23 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  v24 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  return a1;
}

uint64_t sub_100148960(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_5;
  if (!*(_QWORD *)(a2 + 40))
  {
    sub_10004A1B8((_QWORD *)a1);
LABEL_5:
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v17;
    v18 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v18;
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v19;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  swift_bridgeObjectRelease(v14);
LABEL_6:
  v20 = a3[5];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20 + 8);
  v24 = *(_QWORD *)(a1 + v20 + 8);
  *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(v21 + 8) = v23;
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  v25 = *(_QWORD *)(v22 + 32);
  v26 = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v21 + 32) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(v22 + 48);
  v28 = *(_QWORD *)(v21 + 48);
  *(_QWORD *)(v21 + 40) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v21 + 48) = v27;
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(v21 + 56) = *(_BYTE *)(v22 + 56);
  v29 = *(_QWORD *)(v22 + 72);
  v30 = *(_QWORD *)(v21 + 72);
  *(_QWORD *)(v21 + 64) = *(_QWORD *)(v22 + 64);
  *(_QWORD *)(v21 + 72) = v29;
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(v22 + 88);
  v32 = *(_QWORD *)(v21 + 88);
  *(_QWORD *)(v21 + 80) = *(_QWORD *)(v22 + 80);
  *(_QWORD *)(v21 + 88) = v31;
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(v22 + 104);
  v34 = *(_QWORD *)(v21 + 104);
  *(_QWORD *)(v21 + 96) = *(_QWORD *)(v22 + 96);
  *(_QWORD *)(v21 + 104) = v33;
  swift_bridgeObjectRelease(v34);
  v35 = (int *)type metadata accessor for ClientContext(0);
  v36 = v35[12];
  v37 = v21 + v36;
  v38 = v22 + v36;
  v39 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  *(_QWORD *)(v21 + v35[13]) = *(_QWORD *)(v22 + v35[13]);
  v40 = v35[14];
  v41 = (_QWORD *)(v21 + v40);
  v42 = (uint64_t *)(v22 + v40);
  v44 = *v42;
  v43 = v42[1];
  v45 = v41[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  *(_BYTE *)(v21 + v35[15]) = *(_BYTE *)(v22 + v35[15]);
  v46 = v35[16];
  v47 = (_QWORD *)(v21 + v46);
  v48 = (uint64_t *)(v22 + v46);
  v50 = *v48;
  v49 = v48[1];
  v51 = v47[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  v52 = v35[17];
  v53 = (_QWORD *)(v21 + v52);
  v54 = (uint64_t *)(v22 + v52);
  v56 = *v54;
  v55 = v54[1];
  v57 = v53[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  v58 = v35[18];
  v59 = (_QWORD *)(v21 + v58);
  v60 = (uint64_t *)(v22 + v58);
  v62 = *v60;
  v61 = v60[1];
  v63 = v59[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  v64 = v35[19];
  v65 = (_QWORD *)(v21 + v64);
  v66 = (uint64_t *)(v22 + v64);
  v68 = *v66;
  v67 = v66[1];
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = v35[20];
  v71 = (_QWORD *)(v21 + v70);
  v72 = (uint64_t *)(v22 + v70);
  v74 = *v72;
  v73 = v72[1];
  v75 = v71[1];
  *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease(v75);
  v76 = v35[21];
  v77 = (_QWORD *)(v21 + v76);
  v78 = (uint64_t *)(v22 + v76);
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  v82 = v35[22];
  v83 = (_QWORD *)(v21 + v82);
  v84 = (uint64_t *)(v22 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  v88 = v35[23];
  v89 = (_QWORD *)(v21 + v88);
  v90 = (uint64_t *)(v22 + v88);
  v92 = *v90;
  v91 = v90[1];
  v93 = v89[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease(v93);
  v94 = v35[24];
  v95 = v21 + v94;
  v96 = v22 + v94;
  *(_QWORD *)v95 = *(_QWORD *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  *(_BYTE *)(v21 + v35[25]) = *(_BYTE *)(v22 + v35[25]);
  v97 = v35[26];
  v98 = *(_QWORD *)(v21 + v97);
  *(_QWORD *)(v21 + v97) = *(_QWORD *)(v22 + v97);
  swift_bridgeObjectRelease(v98);
  v99 = v35[27];
  v100 = (_QWORD *)(v21 + v99);
  v101 = (uint64_t *)(v22 + v99);
  v103 = *v101;
  v102 = v101[1];
  v104 = v100[1];
  *v100 = v103;
  v100[1] = v102;
  swift_bridgeObjectRelease(v104);
  v105 = v35[28];
  v106 = (_QWORD *)(v21 + v105);
  v107 = (uint64_t *)(v22 + v105);
  v109 = *v107;
  v108 = v107[1];
  v110 = v106[1];
  *v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease(v110);
  v111 = v35[29];
  v112 = (_QWORD *)(v21 + v111);
  v113 = (uint64_t *)(v22 + v111);
  v115 = *v113;
  v114 = v113[1];
  v116 = v112[1];
  *v112 = v115;
  v112[1] = v114;
  swift_bridgeObjectRelease(v116);
  v117 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v118 = (_QWORD *)(a1 + v117);
  v119 = (uint64_t *)(a2 + v117);
  v121 = *v119;
  v120 = v119[1];
  v122 = v118[1];
  *v118 = v121;
  v118[1] = v120;
  swift_bridgeObjectRelease(v122);
  v123 = a3[8];
  v124 = *(_QWORD *)(a1 + v123);
  *(_QWORD *)(a1 + v123) = *(_QWORD *)(a2 + v123);
  swift_bridgeObjectRelease(v124);
  v125 = a3[9];
  v126 = *(_QWORD *)(a1 + v125);
  *(_QWORD *)(a1 + v125) = *(_QWORD *)(a2 + v125);
  swift_bridgeObjectRelease(v126);
  return a1;
}

uint64_t sub_100148D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100148D0C);
}

uint64_t sub_100148D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ClientContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100148D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100148DA0);
}

uint64_t sub_100148DA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ClientContext(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100148E24(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1001F7238;
  result = type metadata accessor for ClientContext(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_1001F7250;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = "\b";
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipServerRequest()
{
  return &type metadata for FriendshipServerRequest;
}

unint64_t sub_100148EDC()
{
  unint64_t result;

  result = qword_100264CF8;
  if (!qword_100264CF8)
  {
    result = swift_getWitnessTable(&unk_1001F72C8, &type metadata for FriendshipServerRequest);
    atomic_store(result, (unint64_t *)&qword_100264CF8);
  }
  return result;
}

uint64_t sub_100148F20(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004EA8(&qword_100264B88, type metadata accessor for FriendshipRequestContent, (uint64_t)&unk_1001F7438);
  result = sub_100004EA8(&qword_100264B90, type metadata accessor for FriendshipRequestContent, (uint64_t)&unk_1001F7410);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100148F7C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004EA8(&qword_100264BA8, type metadata accessor for FriendshipOfferContent, (uint64_t)&unk_1001F73E8);
  result = sub_100004EA8(&qword_100264BB0, type metadata accessor for FriendshipOfferContent, (uint64_t)&unk_1001F73C0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100148FDC()
{
  unint64_t result;

  result = qword_100264D00;
  if (!qword_100264D00)
  {
    result = swift_getWitnessTable(&unk_1001F72F0, &type metadata for FriendshipServerRequest);
    atomic_store(result, (unint64_t *)&qword_100264D00);
  }
  return result;
}

unint64_t sub_100149020()
{
  unint64_t result;

  result = qword_100264D10;
  if (!qword_100264D10)
  {
    result = swift_getWitnessTable(&unk_1001F7764, &type metadata for FriendshipRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264D10);
  }
  return result;
}

unint64_t sub_100149064()
{
  unint64_t result;

  result = qword_100264D28;
  if (!qword_100264D28)
  {
    result = swift_getWitnessTable(&unk_1001F7714, &type metadata for FriendshipOfferContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264D28);
  }
  return result;
}

unint64_t sub_1001490A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100264D38;
  if (!qword_100264D38)
  {
    v1 = sub_10003C1FC(&qword_100264D30);
    sub_100004EA8(&qword_1002639C0, (uint64_t (*)(uint64_t))&type metadata accessor for IDSStatus, (uint64_t)&protocol conformance descriptor for IDSStatus);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100264D38);
  }
  return result;
}

unint64_t sub_10014912C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100264D48;
  if (!qword_100264D48)
  {
    v1 = sub_10003C1FC(&qword_100264D30);
    sub_100004EA8(&qword_1002639F8, (uint64_t (*)(uint64_t))&type metadata accessor for IDSStatus, (uint64_t)&protocol conformance descriptor for IDSStatus);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100264D48);
  }
  return result;
}

uint64_t sub_1001491B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v3 = sub_100037A5C(&qword_100264D50);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100036228(a1, v7);
  v9 = sub_1001493DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FriendshipServerRequest.CodingKeys, &type metadata for FriendshipServerRequest.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_10002BB90(a1);
    sub_100037AF8(0, 0xF000000000000000);
  }
  else
  {
    v10 = sub_100037A5C(&qword_100261218);
    v19 = 0;
    v11 = sub_10007581C((unint64_t *)&qword_100261248, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v10, &v19, v3, v10, v11);
    v7 = v17;
    v19 = 1;
    v13 = sub_10003F974();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v17, &type metadata for Data, &v19, v3, &type metadata for Data, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v14 = v17;
    v15 = v18;
    sub_10001F728(v17, v18);
    sub_100037AF8(0, 0xF000000000000000);
    swift_bridgeObjectRetain(v7);
    sub_10001F728(v14, v15);
    sub_100037AF8(v14, v15);
    swift_bridgeObjectRelease(v7);
    sub_10002BB90(a1);
    swift_bridgeObjectRelease(v7);
    sub_100037AF8(v14, v15);
  }
  return v7;
}

unint64_t sub_1001493DC()
{
  unint64_t result;

  result = qword_100264D58;
  if (!qword_100264D58)
  {
    result = swift_getWitnessTable(&unk_1001F76C4, &type metadata for FriendshipServerRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264D58);
  }
  return result;
}

unint64_t sub_100149420()
{
  unint64_t result;

  result = qword_100264D68;
  if (!qword_100264D68)
  {
    result = swift_getWitnessTable(&unk_1001F7460, &type metadata for FriendshipServerRequest);
    atomic_store(result, (unint64_t *)&qword_100264D68);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FriendshipServerRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001494B0 + 4 * byte_1001F7200[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001494E4 + 4 * byte_1001F71FB[v4]))();
}

uint64_t sub_1001494E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001494EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001494F4);
  return result;
}

uint64_t sub_100149500(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100149508);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10014950C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100149514(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FriendshipServerRequest.CodingKeys()
{
  return &type metadata for FriendshipServerRequest.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FriendshipOfferContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10014957C + 4 * byte_1001F720A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001495B0 + 4 * byte_1001F7205[v4]))();
}

uint64_t sub_1001495B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001495B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001495C0);
  return result;
}

uint64_t sub_1001495CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001495D4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001495D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001495E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FriendshipOfferContent.CodingKeys()
{
  return &type metadata for FriendshipOfferContent.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FriendshipRequestContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FriendshipRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1001496D8 + 4 * byte_1001F7214[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10014970C + 4 * byte_1001F720F[v4]))();
}

uint64_t sub_10014970C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100149714(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014971CLL);
  return result;
}

uint64_t sub_100149728(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100149730);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100149734(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014973C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FriendshipRequestContent.CodingKeys()
{
  return &type metadata for FriendshipRequestContent.CodingKeys;
}

unint64_t sub_10014975C()
{
  unint64_t result;

  result = qword_100264D70;
  if (!qword_100264D70)
  {
    result = swift_getWitnessTable(&unk_1001F752C, &type metadata for FriendshipRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264D70);
  }
  return result;
}

unint64_t sub_1001497A4()
{
  unint64_t result;

  result = qword_100264D78;
  if (!qword_100264D78)
  {
    result = swift_getWitnessTable(&unk_1001F75E4, &type metadata for FriendshipOfferContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264D78);
  }
  return result;
}

unint64_t sub_1001497EC()
{
  unint64_t result;

  result = qword_100264D80;
  if (!qword_100264D80)
  {
    result = swift_getWitnessTable(&unk_1001F769C, &type metadata for FriendshipServerRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264D80);
  }
  return result;
}

unint64_t sub_100149834()
{
  unint64_t result;

  result = qword_100264D88;
  if (!qword_100264D88)
  {
    result = swift_getWitnessTable(&unk_1001F760C, &type metadata for FriendshipServerRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264D88);
  }
  return result;
}

unint64_t sub_10014987C()
{
  unint64_t result;

  result = qword_100264D90;
  if (!qword_100264D90)
  {
    result = swift_getWitnessTable(&unk_1001F7634, &type metadata for FriendshipServerRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264D90);
  }
  return result;
}

unint64_t sub_1001498C4()
{
  unint64_t result;

  result = qword_100264D98;
  if (!qword_100264D98)
  {
    result = swift_getWitnessTable(&unk_1001F7554, &type metadata for FriendshipOfferContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264D98);
  }
  return result;
}

unint64_t sub_10014990C()
{
  unint64_t result;

  result = qword_100264DA0;
  if (!qword_100264DA0)
  {
    result = swift_getWitnessTable(&unk_1001F757C, &type metadata for FriendshipOfferContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264DA0);
  }
  return result;
}

unint64_t sub_100149954()
{
  unint64_t result;

  result = qword_100264DA8;
  if (!qword_100264DA8)
  {
    result = swift_getWitnessTable(&unk_1001F749C, &type metadata for FriendshipRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264DA8);
  }
  return result;
}

unint64_t sub_10014999C()
{
  unint64_t result;

  result = qword_100264DB0;
  if (!qword_100264DB0)
  {
    result = swift_getWitnessTable(&unk_1001F74C4, &type metadata for FriendshipRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264DB0);
  }
  return result;
}

uint64_t sub_1001499E0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL)
  {
    v5 = 0xED0000747865746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43726576726573, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    v7 = 0xED0000747865746ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x73657269707865 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73657269707865, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x644970756F7267 && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970756F7267, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100200140)
  {
    swift_bridgeObjectRelease(0x8000000100200140);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100200140, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100149C38(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL)
  {
    v5 = 0xED0000747865746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43726576726573, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    v7 = 0xED0000747865746ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x73657269707865 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73657269707865, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x644970756F7267 && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970756F7267, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x736C69616D65 && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736C69616D65, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 7562345 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(7562345, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

unint64_t sub_100149EE0()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  void *v15;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;

  v1 = sub_100037A5C(&qword_1002650A0);
  __chkstk_darwin(v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(v19);
  v18 = 0xD000000000000024;
  v19 = 0x8000000100200260;
  v17 = *v0;
  v4 = sub_10003EC14();
  v5._countAndFlagsBits = DataProtocol.hexString.getter(&type metadata for Data, v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x6B6F54726565700ALL;
  v7._object = (void *)0xEC000000203A6E65;
  String.append(_:)(v7);
  v8 = *((_QWORD *)v0 + 2);
  v9 = *((_QWORD *)v0 + 3);
  sub_10001A484(v8, v9);
  v10._countAndFlagsBits = Data.description.getter(v8, v9);
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  sub_100037AB4(v8, v9);
  v12._countAndFlagsBits = 0x6148796C7065720ALL;
  v12._object = (void *)0xEE00203A656C646ELL;
  String.append(_:)(v12);
  v13 = type metadata accessor for FindingConfigEnvelopeV1(0);
  sub_10014A08C((uint64_t)v0 + *(int *)(v13 + 24), (uint64_t)v3);
  v14._countAndFlagsBits = String.init<A>(describing:)(v3, v1);
  v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  return v18;
}

uint64_t type metadata accessor for FindingConfigEnvelopeV1(uint64_t a1)
{
  return sub_100025C3C(a1, qword_100264EA0, (uint64_t)&nominal type descriptor for FindingConfigEnvelopeV1);
}

uint64_t sub_10014A08C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_1002650A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014A0D4(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  __int128 v19;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100264EF0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10014B824();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FindingConfigEnvelopeV1.CodingKeys, &type metadata for FindingConfigEnvelopeV1.CodingKeys, v11, v9, v10);
  v19 = *v3;
  v18 = 0;
  v12 = sub_10003F9B8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v19 = v3[1];
    v18 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v12);
    v13 = (char *)v3 + *(int *)(type metadata accessor for FindingConfigEnvelopeV1(0) + 24);
    LOBYTE(v19) = 2;
    v14 = type metadata accessor for Handle(0);
    v15 = sub_10014B8B0(&qword_100262478, (uint64_t)&protocol conformance descriptor for Handle);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v13, &v19, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10014A278@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  char v29;

  v25 = a2;
  v4 = sub_100037A5C(&qword_1002650A0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_100037A5C(&qword_100264EE0);
  v7 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FindingConfigEnvelopeV1(0);
  __chkstk_darwin(v10);
  v12 = (_OWORD *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a1[3];
  v14 = a1[4];
  v27 = a1;
  sub_100036228(a1, v13);
  v15 = sub_10014B824();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FindingConfigEnvelopeV1.CodingKeys, &type metadata for FindingConfigEnvelopeV1.CodingKeys, v15, v13, v14);
  if (v2)
    return sub_10002BB90(v27);
  v23 = v6;
  v24 = v7;
  v29 = 0;
  v16 = sub_10003F974();
  v17 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for Data, &v29, v26, &type metadata for Data, v16);
  *v12 = v28;
  v29 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for Data, &v29, v17, &type metadata for Data, v16);
  v12[1] = v28;
  v18 = type metadata accessor for Handle(0);
  LOBYTE(v28) = 2;
  v19 = sub_10014B8B0(&qword_100263778, (uint64_t)&protocol conformance descriptor for Handle);
  v20 = v23;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, v18, &v28, v17, v18, v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v17);
  sub_10014B868((uint64_t)v20, (uint64_t)v12 + *(int *)(v10 + 24));
  sub_100025C70((uint64_t)v12, v25, type metadata accessor for FindingConfigEnvelopeV1);
  sub_10002BB90(v27);
  return sub_100024990((uint64_t)v12, type metadata accessor for FindingConfigEnvelopeV1);
}

uint64_t sub_10014A54C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656B6F5472656570;
  if (*v0 != 1)
    v1 = 0x6E6148796C706572;
  if (*v0)
    return v1;
  else
    return 0x61446769666E6F63;
}

uint64_t sub_10014A5B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10014BC7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10014A5DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014B824();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014A604(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014B824();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014A62C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014A278(a1, a2);
}

uint64_t sub_10014A640(_QWORD *a1)
{
  return sub_10014A0D4(a1);
}

unint64_t sub_10014A658()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *v9;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *v0;
  v2 = v0[1];
  sub_10001A484(*v0, v2);
  v3._countAndFlagsBits = Data.description.getter(v1, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  sub_100037AB4(v1, v2);
  v5._countAndFlagsBits = 0x6E6148726565700ALL;
  v5._object = (void *)0xED0000203A656C64;
  String.append(_:)(v5);
  type metadata accessor for FindingConfigSessionStopEnvelopeV1(0);
  v6 = type metadata accessor for Handle(0);
  v7 = sub_10014B8B0(&qword_100261A98, (uint64_t)&protocol conformance descriptor for Handle);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
  v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v9);
  return 0xD00000000000002ELL;
}

uint64_t type metadata accessor for FindingConfigSessionStopEnvelopeV1(uint64_t a1)
{
  return sub_100025C3C(a1, qword_100264E10, (uint64_t)&nominal type descriptor for FindingConfigSessionStopEnvelopeV1);
}

uint64_t sub_10014A790(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  __int128 v19;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100264F08);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10014B8F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FindingConfigSessionStopEnvelopeV1.CodingKeys, &type metadata for FindingConfigSessionStopEnvelopeV1.CodingKeys, v11, v9, v10);
  v19 = *v3;
  v18 = 0;
  v12 = sub_10003F9B8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (char *)v3 + *(int *)(type metadata accessor for FindingConfigSessionStopEnvelopeV1(0) + 20);
    LOBYTE(v19) = 1;
    v14 = type metadata accessor for Handle(0);
    v15 = sub_10014B8B0(&qword_100262478, (uint64_t)&protocol conformance descriptor for Handle);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v19, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10014A8F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;

  v26 = a2;
  v4 = type metadata accessor for Handle(0);
  v28 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  __chkstk_darwin(v4);
  v27 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100037A5C(&qword_100264EF8);
  v6 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FindingConfigSessionStopEnvelopeV1(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_100036228(a1, v13);
  v14 = sub_10014B8F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FindingConfigSessionStopEnvelopeV1.CodingKeys, &type metadata for FindingConfigSessionStopEnvelopeV1.CodingKeys, v14, v13, v12);
  if (v2)
    return sub_10002BB90(a1);
  v23 = v9;
  v24 = a1;
  v25 = v6;
  v15 = v11;
  v17 = v27;
  v16 = v28;
  v18 = v29;
  v32 = 0;
  v19 = sub_10003F974();
  v20 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for Data, &v32, v30, &type metadata for Data, v19);
  *(_OWORD *)v15 = v31;
  LOBYTE(v31) = 1;
  v21 = sub_10014B8B0(&qword_100263778, (uint64_t)&protocol conformance descriptor for Handle);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v18, &v31, v20, v18, v21);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v20);
  (*(void (**)(char *, _QWORD *, uint64_t))(v16 + 32))(&v15[*(int *)(v23 + 20)], v17, v18);
  sub_100025C70((uint64_t)v15, v26, type metadata accessor for FindingConfigSessionStopEnvelopeV1);
  sub_10002BB90(v24);
  return sub_100024990((uint64_t)v15, type metadata accessor for FindingConfigSessionStopEnvelopeV1);
}

uint64_t sub_10014AB6C()
{
  _BYTE *v0;

  if (*v0)
    return 0x646E614872656570;
  else
    return 0x656B6F5472656570;
}

uint64_t sub_10014ABB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10014BE00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10014ABD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014B8F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014ABFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014B8F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014AC24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014A8F4(a1, a2);
}

uint64_t sub_10014AC38(_QWORD *a1)
{
  return sub_10014A790(a1);
}

uint64_t *sub_10014AC50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001A484(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Handle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_10014ACF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_100037AB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Handle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_10014AD40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  sub_10001A484(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Handle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_10014ADB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_10001A484(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100037AB4(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Handle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_10014AE38(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Handle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_10014AE94(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100037AB4(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Handle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10014AF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014AF10);
}

uint64_t sub_10014AF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for Handle(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10014AF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014AFA4);
}

char *sub_10014AFA4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for Handle(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_10014B020(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1001F7808;
  result = type metadata accessor for Handle(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_10014B094(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001A484(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_10001A484(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = *(int *)(a3 + 24);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for Handle(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_100037A5C(&qword_1002650A0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t sub_10014B1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  sub_100037AB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_100037AB4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Handle(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t *sub_10014B22C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = a2[1];
  sub_10001A484(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_10001A484(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Handle(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_100037A5C(&qword_1002650A0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

uint64_t *sub_10014B310(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;

  v6 = *a2;
  v7 = a2[1];
  sub_10001A484(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100037AB4(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_10001A484(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100037AB4(v12, v13);
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Handle(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v11) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v11)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = sub_100037A5C(&qword_1002650A0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

_OWORD *sub_10014B450(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Handle(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_100037A5C(&qword_1002650A0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t *sub_10014B50C(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100037AB4(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100037AB4(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Handle(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100037A5C(&qword_1002650A0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t sub_10014B638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014B644);
}

uint64_t sub_10014B644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_100037A5C(&qword_1002650A0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10014B6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014B6DC);
}

char *sub_10014B6DC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_100037A5C(&qword_1002650A0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_10014B75C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1001F7808;
  v4[1] = &unk_1001F7808;
  sub_10014B7D0(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_10014B7D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100265110)
  {
    v2 = type metadata accessor for Handle(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100265110);
  }
}

unint64_t sub_10014B824()
{
  unint64_t result;

  result = qword_100264EE8;
  if (!qword_100264EE8)
  {
    result = swift_getWitnessTable(&unk_1001F7AF4, &type metadata for FindingConfigEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264EE8);
  }
  return result;
}

uint64_t sub_10014B868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_1002650A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014B8B0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Handle(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10014B8F0()
{
  unint64_t result;

  result = qword_100264F00;
  if (!qword_100264F00)
  {
    result = swift_getWitnessTable(&unk_1001F7AA4, &type metadata for FindingConfigSessionStopEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264F00);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FindingConfigSessionStopEnvelopeV1.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10014B980 + 4 * byte_1001F77C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10014B9B4 + 4 * byte_1001F77C0[v4]))();
}

uint64_t sub_10014B9B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B9BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014B9C4);
  return result;
}

uint64_t sub_10014B9D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014B9D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10014B9DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B9E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FindingConfigSessionStopEnvelopeV1.CodingKeys()
{
  return &type metadata for FindingConfigSessionStopEnvelopeV1.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FindingConfigEnvelopeV1.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10014BA4C + 4 * byte_1001F77CF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10014BA80 + 4 * byte_1001F77CA[v4]))();
}

uint64_t sub_10014BA80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014BA88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014BA90);
  return result;
}

uint64_t sub_10014BA9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014BAA4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10014BAA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014BAB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FindingConfigEnvelopeV1.CodingKeys()
{
  return &type metadata for FindingConfigEnvelopeV1.CodingKeys;
}

unint64_t sub_10014BAD0()
{
  unint64_t result;

  result = qword_100264F10;
  if (!qword_100264F10)
  {
    result = swift_getWitnessTable(&unk_1001F79C4, &type metadata for FindingConfigEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264F10);
  }
  return result;
}

unint64_t sub_10014BB18()
{
  unint64_t result;

  result = qword_100264F18;
  if (!qword_100264F18)
  {
    result = swift_getWitnessTable(&unk_1001F7A7C, &type metadata for FindingConfigSessionStopEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264F18);
  }
  return result;
}

unint64_t sub_10014BB60()
{
  unint64_t result;

  result = qword_100264F20;
  if (!qword_100264F20)
  {
    result = swift_getWitnessTable(&unk_1001F79EC, &type metadata for FindingConfigSessionStopEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264F20);
  }
  return result;
}

unint64_t sub_10014BBA8()
{
  unint64_t result;

  result = qword_100264F28;
  if (!qword_100264F28)
  {
    result = swift_getWitnessTable(&unk_1001F7A14, &type metadata for FindingConfigSessionStopEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264F28);
  }
  return result;
}

unint64_t sub_10014BBF0()
{
  unint64_t result;

  result = qword_100264F30;
  if (!qword_100264F30)
  {
    result = swift_getWitnessTable(&unk_1001F7934, &type metadata for FindingConfigEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264F30);
  }
  return result;
}

unint64_t sub_10014BC38()
{
  unint64_t result;

  result = qword_100264F38;
  if (!qword_100264F38)
  {
    result = swift_getWitnessTable(&unk_1001F795C, &type metadata for FindingConfigEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264F38);
  }
  return result;
}

uint64_t sub_10014BC7C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x61446769666E6F63 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446769666E6F63, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656B6F5472656570 && a2 == 0xE90000000000006ELL)
  {
    v7 = 0xE90000000000006ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656B6F5472656570, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E6148796C706572 && a2 == 0xEB00000000656C64)
  {
    swift_bridgeObjectRelease(0xEB00000000656C64);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6148796C706572, 0xEB00000000656C64, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10014BE00(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x656B6F5472656570 && a2 == 0xE90000000000006ELL)
  {
    v5 = 0xE90000000000006ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656B6F5472656570, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x646E614872656570 && a2 == 0xEA0000000000656CLL)
  {
    swift_bridgeObjectRelease(0xEA0000000000656CLL);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646E614872656570, 0xEA0000000000656CLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10014BF08()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D40);
  sub_100043F10(v0, qword_10027ADF0);
  sub_100037A9C(v0, (uint64_t)qword_10027ADF0);
  v1 = sub_10014D9E4(&qword_100260DA8, &qword_100260D40);
  return ExpressionType.init(_:)(25705, 0xE200000000000000, v0, v1);
}

uint64_t sub_10014BF84()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628F0);
  sub_100043F10(v0, qword_10027AE08);
  sub_100037A9C(v0, (uint64_t)qword_10027AE08);
  v1 = sub_10014D9E4(&qword_100264F48, &qword_1002628F0);
  return ExpressionType.init(_:)(0x797469746E656469, 0xE800000000000000, v0, v1);
}

uint64_t sub_10014C00C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D50);
  sub_100043F10(v0, qword_10027AE20);
  sub_100037A9C(v0, (uint64_t)qword_10027AE20);
  v1 = sub_10014D9E4(&qword_100260DA0, &qword_100260D50);
  return ExpressionType.init(_:)(0xD000000000000010, 0x80000001001FD2B0, v0, v1);
}

uint64_t sub_10014C098()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D68);
  sub_100043F10(v0, qword_10027AE38);
  sub_100037A9C(v0, (uint64_t)qword_10027AE38);
  v1 = sub_10014D9E4(&qword_100260DC0, &qword_100260D68);
  return ExpressionType.init(_:)(0xD000000000000011, 0x80000001002003C0, v0, v1);
}

uint64_t sub_10014C124()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D78);
  sub_100043F10(v0, qword_10027AE50);
  sub_100037A9C(v0, (uint64_t)qword_10027AE50);
  v1 = sub_10014D9E4((unint64_t *)&unk_100264F80, &qword_100260D78);
  return ExpressionType.init(_:)(0x6574614465736162, 0xE800000000000000, v0, v1);
}

uint64_t sub_10014C1AC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260DB8);
  sub_100043F10(v0, qword_10027AE68);
  sub_100037A9C(v0, (uint64_t)qword_10027AE68);
  v1 = sub_10014D9E4(&qword_100260DC8, &qword_100260DB8);
  return ExpressionType.init(_:)(0xD000000000000010, 0x80000001001FEF20, v0, v1);
}

uint64_t sub_10014C238()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027AE80);
  sub_100037A9C(v0, (uint64_t)qword_10027AE80);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD000000000000011, 0x80000001002003A0, v0, v1);
}

uint64_t sub_10014C2C4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E8);
  sub_100043F10(v0, qword_10027AE98);
  sub_100037A9C(v0, (uint64_t)qword_10027AE98);
  v1 = sub_10014D9E4(&qword_100264F70, &qword_1002628E8);
  return ExpressionType.init(_:)(0x6449656C646E6168, 0xEF73757461745373, v0, v1);
}

uint64_t sub_10014C358()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027AEB0);
  sub_100037A9C(v0, (uint64_t)qword_10027AEB0);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0x7344656C646E6168, 0xEA00000000006469, v0, v1);
}

uint64_t sub_10014C3E4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628F8);
  sub_100043F10(v0, qword_10027AEC8);
  sub_100037A9C(v0, (uint64_t)qword_10027AEC8);
  v1 = sub_10014D9E4(&qword_100264F78, &qword_1002628F8);
  return ExpressionType.init(_:)(0xD000000000000010, 0x8000000100200380, v0, v1);
}

uint64_t sub_10014C470()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027AEE0);
  sub_100037A9C(v0, (uint64_t)qword_10027AEE0);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD000000000000010, 0x80000001001FEF80, v0, v1);
}

uint64_t sub_10014C4FC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027AEF8);
  sub_100037A9C(v0, (uint64_t)qword_10027AEF8);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD000000000000013, 0x80000001001FEFA0, v0, v1);
}

uint64_t sub_10014C588()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100262900);
  sub_100043F10(v0, qword_10027AF10);
  sub_100037A9C(v0, (uint64_t)qword_10027AF10);
  v1 = sub_10014D9E4(&qword_100264F60, &qword_100262900);
  return ExpressionType.init(_:)(0x6552656C646E6168, 0xEF656C6261686361, v0, v1);
}

uint64_t sub_10014C61C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D60);
  sub_100043F10(v0, qword_10027AF28);
  sub_100037A9C(v0, (uint64_t)qword_10027AF28);
  v1 = sub_10014D9E4(&qword_100260D98, &qword_100260D60);
  return ExpressionType.init(_:)(0xD000000000000015, 0x80000001001FEFC0, v0, v1);
}

uint64_t sub_10014C6A8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027AF40);
  sub_100037A9C(v0, (uint64_t)qword_10027AF40);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD000000000000010, 0x80000001001FEFE0, v0, v1);
}

uint64_t sub_10014C734()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027AF58);
  sub_100037A9C(v0, (uint64_t)qword_10027AF58);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD000000000000017, 0x80000001001FF000, v0, v1);
}

uint64_t sub_10014C7C0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260DB8);
  sub_100043F10(v0, qword_10027AF70);
  sub_100037A9C(v0, (uint64_t)qword_10027AF70);
  v1 = sub_10014D9E4(&qword_100260DC8, &qword_100260DB8);
  return ExpressionType.init(_:)(0xD000000000000018, 0x80000001001FF020, v0, v1);
}

uint64_t sub_10014C84C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027AF88);
  sub_100037A9C(v0, (uint64_t)qword_10027AF88);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD000000000000016, 0x80000001001FF040, v0, v1);
}

uint64_t sub_10014C8D8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027AFA0);
  sub_100037A9C(v0, (uint64_t)qword_10027AFA0);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD000000000000015, 0x80000001001FF060, v0, v1);
}

uint64_t sub_10014C964()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027AFB8);
  sub_100037A9C(v0, (uint64_t)qword_10027AFB8);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD000000000000016, 0x8000000100200360, v0, v1);
}

uint64_t sub_10014C9F0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E8);
  sub_100043F10(v0, qword_10027AFD0);
  sub_100037A9C(v0, (uint64_t)qword_10027AFD0);
  v1 = sub_10014D9E4(&qword_100264F70, &qword_1002628E8);
  return ExpressionType.init(_:)(0xD000000000000014, 0x80000001001FF0A0, v0, v1);
}

uint64_t sub_10014CA7C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027AFE8);
  sub_100037A9C(v0, (uint64_t)qword_10027AFE8);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0x6E614872656E776FLL, 0xEF64697344656C64, v0, v1);
}

uint64_t sub_10014CB10()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D60);
  sub_100043F10(v0, qword_10027B000);
  sub_100037A9C(v0, (uint64_t)qword_10027B000);
  v1 = sub_10014D9E4(&qword_100260D98, &qword_100260D60);
  return ExpressionType.init(_:)(0xD00000000000001BLL, 0x80000001001FF0C0, v0, v1);
}

uint64_t sub_10014CB9C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100262908);
  sub_100043F10(v0, qword_10027B018);
  sub_100037A9C(v0, (uint64_t)qword_10027B018);
  v1 = sub_10014D9E4(&qword_100264F68, &qword_100262908);
  return ExpressionType.init(_:)(0xD000000000000015, 0x8000000100200340, v0, v1);
}

uint64_t sub_10014CC28()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027B030);
  sub_100037A9C(v0, (uint64_t)qword_10027B030);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD000000000000015, 0x80000001001FF100, v0, v1);
}

uint64_t sub_10014CCB4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027B048);
  sub_100037A9C(v0, (uint64_t)qword_10027B048);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD000000000000018, 0x80000001001FF120, v0, v1);
}

uint64_t sub_10014CD40()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100262900);
  sub_100043F10(v0, qword_10027B060);
  sub_100037A9C(v0, (uint64_t)qword_10027B060);
  v1 = sub_10014D9E4(&qword_100264F60, &qword_100262900);
  return ExpressionType.init(_:)(0xD000000000000014, 0x80000001001FF140, v0, v1);
}

uint64_t sub_10014CDCC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D60);
  sub_100043F10(v0, qword_10027B078);
  sub_100037A9C(v0, (uint64_t)qword_10027B078);
  v1 = sub_10014D9E4(&qword_100260D98, &qword_100260D60);
  return ExpressionType.init(_:)(0xD00000000000001ALL, 0x80000001001FF160, v0, v1);
}

uint64_t sub_10014CE58()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027B090);
  sub_100037A9C(v0, (uint64_t)qword_10027B090);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD000000000000015, 0x80000001001FF180, v0, v1);
}

uint64_t sub_10014CEE4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027B0A8);
  sub_100037A9C(v0, (uint64_t)qword_10027B0A8);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD00000000000001CLL, 0x80000001001FF1A0, v0, v1);
}

uint64_t sub_10014CF70()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628E0);
  sub_100043F10(v0, qword_10027B0C0);
  sub_100037A9C(v0, (uint64_t)qword_10027B0C0);
  v1 = sub_10014D9E4(&qword_100264F58, &qword_1002628E0);
  return ExpressionType.init(_:)(0xD00000000000001BLL, 0x80000001001FF1C0, v0, v1);
}

uint64_t sub_10014CFFC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D48);
  sub_100043F10(v0, qword_10027B0D8);
  sub_100037A9C(v0, (uint64_t)qword_10027B0D8);
  v1 = sub_10014D9E4(&qword_100264F40, &qword_100260D48);
  return ExpressionType.init(_:)(0xD000000000000016, 0x80000001001FEE70, v0, v1);
}

uint64_t sub_10014D088()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D48);
  sub_100043F10(v0, qword_10027B0F0);
  sub_100037A9C(v0, (uint64_t)qword_10027B0F0);
  v1 = sub_10014D9E4(&qword_100264F40, &qword_100260D48);
  return ExpressionType.init(_:)(0xD000000000000023, 0x80000001001FEE40, v0, v1);
}

uint64_t sub_10014D114()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D48);
  sub_100043F10(v0, qword_10027B108);
  sub_100037A9C(v0, (uint64_t)qword_10027B108);
  v1 = sub_10014D9E4(&qword_100264F40, &qword_100260D48);
  return ExpressionType.init(_:)(0xD000000000000017, 0x80000001001FEEB0, v0, v1);
}

uint64_t sub_10014D1A0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D48);
  sub_100043F10(v0, qword_10027B120);
  sub_100037A9C(v0, (uint64_t)qword_10027B120);
  v1 = sub_10014D9E4(&qword_100264F40, &qword_100260D48);
  return ExpressionType.init(_:)(0xD000000000000010, 0x80000001001FEE90, v0, v1);
}

uint64_t sub_10014D22C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D68);
  sub_100043F10(v0, qword_10027B138);
  sub_100037A9C(v0, (uint64_t)qword_10027B138);
  v1 = sub_10014D9E4(&qword_100260DC0, &qword_100260D68);
  return ExpressionType.init(_:)(0x6E49646E65697266, 0xEA00000000006F66, v0, v1);
}

uint64_t sub_10014D2B8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100262910);
  sub_100043F10(v0, qword_10027B150);
  sub_100037A9C(v0, (uint64_t)qword_10027B150);
  v1 = sub_10014D9E4(&qword_100264F50, &qword_100262910);
  return ExpressionType.init(_:)(0x7365707974, 0xE500000000000000, v0, v1);
}

uint64_t sub_10014D33C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260DB8);
  sub_100043F10(v0, qword_10027B168);
  sub_100037A9C(v0, (uint64_t)qword_10027B168);
  v1 = sub_10014D9E4(&qword_100260DC8, &qword_100260DB8);
  return ExpressionType.init(_:)(0xD000000000000010, 0x8000000100200300, v0, v1);
}

uint64_t sub_10014D3C8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260DB8);
  sub_100043F10(v0, qword_10027B180);
  sub_100037A9C(v0, (uint64_t)qword_10027B180);
  v1 = sub_10014D9E4(&qword_100260DC8, &qword_100260DB8);
  return ExpressionType.init(_:)(0x614E656369766564, 0xEA0000000000656DLL, v0, v1);
}

uint64_t sub_10014D454()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260DB8);
  sub_100043F10(v0, qword_10027B198);
  sub_100037A9C(v0, (uint64_t)qword_10027B198);
  v1 = sub_10014D9E4(&qword_100260DC8, &qword_100260DB8);
  return ExpressionType.init(_:)(0x6369766544736469, 0xEB00000000644965, v0, v1);
}

uint64_t sub_10014D4E4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D48);
  sub_100043F10(v0, qword_10027B1B0);
  sub_100037A9C(v0, (uint64_t)qword_10027B1B0);
  v1 = sub_10014D9E4(&qword_100264F40, &qword_100260D48);
  return ExpressionType.init(_:)(0x7349656369766564, 0xEE00657669746341, v0, v1);
}

uint64_t sub_10014D578()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D48);
  sub_100043F10(v0, qword_10027B1C8);
  sub_100037A9C(v0, (uint64_t)qword_10027B1C8);
  v1 = sub_10014D9E4(&qword_100264F40, &qword_100260D48);
  return ExpressionType.init(_:)(0x6544736968547369, 0xEC00000065636976, v0, v1);
}

uint64_t sub_10014D608()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D48);
  sub_100043F10(v0, qword_10027B1E0);
  sub_100037A9C(v0, (uint64_t)qword_10027B1E0);
  v1 = sub_10014D9E4(&qword_100264F40, &qword_100260D48);
  return ExpressionType.init(_:)(0xD000000000000011, 0x80000001002002E0, v0, v1);
}

uint64_t sub_10014D694()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D48);
  sub_100043F10(v0, qword_10027B1F8);
  sub_100037A9C(v0, (uint64_t)qword_10027B1F8);
  v1 = sub_10014D9E4(&qword_100264F40, &qword_100260D48);
  return ExpressionType.init(_:)(0xD000000000000015, 0x80000001002002C0, v0, v1);
}

uint64_t sub_10014D720()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_1002628F0);
  sub_100043F10(v0, qword_10027B210);
  sub_100037A9C(v0, (uint64_t)qword_10027B210);
  v1 = sub_10014D9E4(&qword_100264F48, &qword_1002628F0);
  return ExpressionType.init(_:)(0x6E49726576726573, 0xEB00000000786564, v0, v1);
}

uint64_t sub_10014D7B0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D68);
  sub_100043F10(v0, qword_10027B228);
  sub_100037A9C(v0, (uint64_t)qword_10027B228);
  v1 = sub_10014D9E4(&qword_100260DC0, &qword_100260D68);
  return ExpressionType.init(_:)(0x6F666E49796DLL, 0xE600000000000000, v0, v1);
}

uint64_t sub_10014D834()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D60);
  sub_100043F10(v0, qword_10027B240);
  sub_100037A9C(v0, (uint64_t)qword_10027B240);
  v1 = sub_10014D9E4(&qword_100260D98, &qword_100260D60);
  return ExpressionType.init(_:)(0x6F43726576726573, 0xED0000747865746ELL, v0, v1);
}

uint64_t sub_10014D8C8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D60);
  sub_100043F10(v0, qword_10027B258);
  sub_100037A9C(v0, (uint64_t)qword_10027B258);
  v1 = sub_10014D9E4(&qword_100260D98, &qword_100260D60);
  return ExpressionType.init(_:)(0x6F43726576726573, 0xEC0000006769666ELL, v0, v1);
}

uint64_t sub_10014D958()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D60);
  sub_100043F10(v0, qword_10027B270);
  sub_100037A9C(v0, (uint64_t)qword_10027B270);
  v1 = sub_10014D9E4(&qword_100260D98, &qword_100260D60);
  return ExpressionType.init(_:)(0xD000000000000011, 0x8000000100200320, v0, v1);
}

uint64_t sub_10014D9E4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10003C1FC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10014DA24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100101280(319, &qword_100265098, type metadata accessor for RangingConfigDataSession);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = &unk_1001F7B90;
    swift_initClassMetadata2(a1, 0, 5, v4, a1 + 96);
  }
}

void sub_10014DAC4(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  os_log_t v15;
  _BYTE v16[24];
  _BYTE v17[24];

  v3 = sub_100037A5C((uint64_t *)&unk_100265150);
  __chkstk_darwin(v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 2)
    return;
  if (a1 == 3)
  {
    v6 = qword_100264FA8;
    goto LABEL_6;
  }
  if (a1 == 2)
  {
    v6 = qword_100264FA0;
LABEL_6:
    v7 = (id *)(v1 + v6);
    swift_beginAccess(v7, v17, 0, 0);
    v8 = type metadata accessor for RangingConfigDataSession(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      objc_msgSend(*v7, "invalidate");
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
    swift_beginAccess(v7, v16, 33, 0);
    sub_10013651C((uint64_t)v5, (uint64_t)v7);
    swift_endAccess(v16);
    return;
  }
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100037A9C(v10, (uint64_t)qword_10027AD68);
  v15 = (os_log_t)Logger.logObject.getter(v11);
  v12 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v12, "Unknow NIFindingRole", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

}

void sub_10014DCA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[24];

  v1 = v0;
  v2 = sub_100037A5C((uint64_t *)&unk_100265150);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RangingConfigDataSession(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v31 - v10;
  v12 = v1 + qword_100264FA0;
  swift_beginAccess(v1 + qword_100264FA0, v36, 0, 0);
  sub_1001516F0(v12, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100151738((uint64_t)v4);
    if (qword_10025F970 != -1)
      swift_once(&qword_10025F970, sub_100128268);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100037A9C(v13, (uint64_t)qword_10027AD68);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v35 = v18;
      *(_DWORD *)v17 = 136446210;
      v34 = sub_10002BA84(0xD000000000000024, 0x80000001001FFBF0, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 4, v17 + 12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s no active finder session", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  else
  {
    sub_100151778((uint64_t)v4, (uint64_t)v11);
    if (qword_10025F970 != -1)
      swift_once(&qword_10025F970, sub_100128268);
    v19 = type metadata accessor for Logger(0);
    sub_100037A9C(v19, (uint64_t)qword_10027AD68);
    v20 = sub_1001517BC((uint64_t)v11, (uint64_t)v9);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(32, -1);
      v33 = v24;
      *(_DWORD *)v23 = 141558275;
      v34 = 1752392040;
      v35 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v23 + 4, v23 + 12);
      *(_WORD *)(v23 + 12) = 2081;
      v32 = v23 + 14;
      v25 = type metadata accessor for Handle(0);
      v26 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v25, v26);
      v29 = v28;
      v34 = sub_10002BA84(v27, v28, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v32, v23 + 22);
      swift_bridgeObjectRelease(v29);
      sub_100151800((uint64_t)v9);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Finder Stop and clear configData session\nwith peerHandle: %{private,mask.hash}s", (uint8_t *)v23, 0x16u);
      v30 = v33;
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      sub_100151800((uint64_t)v9);
    }

    sub_10014DAC4(*(_QWORD *)&v11[*(int *)(v5 + 32)]);
    sub_100151800((uint64_t)v11);
  }
}

void sub_10014E0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];

  v4 = sub_100037A5C((uint64_t *)&unk_100265150);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RangingConfigDataSession(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (id *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = a1 + qword_100264FA0;
  swift_beginAccess(a1 + qword_100264FA0, v23, 0, 0);
  sub_1001516F0(v11, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100151738((uint64_t)v6);
  }
  else
  {
    sub_100151778((uint64_t)v6, (uint64_t)v10);
    sub_1000DD514(0, (unint64_t *)&unk_1002676F0, NSObject_ptr);
    v12 = *v10;
    v13 = static NSObject.== infix(_:_:)(a2, v12);

    if ((v13 & 1) != 0)
    {
      sub_10014DCA4();
      sub_100151800((uint64_t)v10);
      return;
    }
    sub_100151800((uint64_t)v10);
  }
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100037A9C(v14, (uint64_t)qword_10027AD68);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v22 = v19;
    *(_DWORD *)v18 = 136446210;
    v21 = sub_10002BA84(0xD00000000000001CLL, 0x8000000100200530, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v18 + 4, v18 + 12);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, " %{public}s ignore, when its not Finder session", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

}

void sub_10014E37C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_10015183C(v4);

}

uint64_t sub_10014E3D0(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t aBlock[5];
  uint64_t v37;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100037A9C(v11, (uint64_t)qword_10027AD68);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v33 = v5;
    v15 = swift_slowAlloc(12, -1);
    v31 = a1;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v32 = v8;
    v18 = v17;
    aBlock[0] = v17;
    *(_DWORD *)v16 = 136446210;
    v35 = (_QWORD *)sub_10002BA84(0xD00000000000001ALL, 0x8000000100200510, aBlock);
    v5 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, aBlock, v16 + 4, v16 + 12);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v19 = v18;
    v8 = v32;
    swift_slowDealloc(v19, -1, -1);
    v20 = v16;
    a1 = v31;
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = *(void **)&v2[qword_100264F98];
  v22 = swift_allocObject(&unk_1002550E0, 32, 7);
  *(_QWORD *)(v22 + 16) = a1;
  *(_QWORD *)(v22 + 24) = v2;
  aBlock[4] = (uint64_t)sub_10015221C;
  v37 = v22;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100133E74;
  aBlock[3] = (uint64_t)&unk_1002550F8;
  v23 = _Block_copy(aBlock);
  v24 = v21;
  v25 = a1;
  static DispatchQoS.unspecified.getter(v2);
  v35 = _swiftEmptyArrayStorage;
  v26 = sub_100004EA8((unint64_t *)&unk_100265160, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100037A5C(&qword_1002643A8);
  v28 = sub_100151F38();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v27, v28, v4, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v8);
  return swift_release(v37);
}

void sub_10014E70C(void *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unsigned int (*v6)(void **, uint64_t, uint64_t);
  void *v7;
  id v8;
  id v9;
  char v10;
  void **v11;
  __n128 v12;
  void *v13;
  id v14;
  id v15;
  char v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];
  _BYTE v34[24];

  v4 = (void **)(a2 + qword_100264FA0);
  swift_beginAccess(a2 + qword_100264FA0, v34, 0, 0);
  v5 = type metadata accessor for RangingConfigDataSession(0);
  v6 = *(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    v7 = *v4;
    sub_1000DD514(0, (unint64_t *)&unk_1002651C0, NISession_ptr);
    v8 = v7;
    v9 = a1;
    v10 = static NSObject.== infix(_:_:)(v9, v8);

    if ((v10 & 1) != 0 && !v6(v4, 1, v5))
    {
      v27 = *(void **)((char *)v4 + *(int *)(v5 + 36));
      if (v27)
      {
        v28 = qword_10025F970;
        v19 = v27;
        if (v28 != -1)
          swift_once(&qword_10025F970, sub_100128268);
        v29 = type metadata accessor for Logger(0);
        v30 = sub_100037A9C(v29, (uint64_t)qword_10027AD68);
        v22 = Logger.logObject.getter(v30);
        v23 = static os_log_type_t.default.getter(v22);
        if (!os_log_type_enabled(v22, v23))
          goto LABEL_18;
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v25 = swift_slowAlloc(32, -1);
        v33[0] = v25;
        *(_DWORD *)v24 = 136446210;
        v32 = sub_10002BA84(0xD00000000000001ALL, 0x8000000100200510, v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v24 + 4, v24 + 12);
        v26 = "%{public}s re-run Finder config session";
        goto LABEL_17;
      }
    }
  }
  v11 = (void **)(a2 + qword_100264FA8);
  v12 = swift_beginAccess(v11, v33, 0, 0);
  if (!((unsigned int (*)(void **, uint64_t, uint64_t, __n128))v6)(v11, 1, v5, v12))
  {
    v13 = *v11;
    sub_1000DD514(0, (unint64_t *)&unk_1002651C0, NISession_ptr);
    v14 = a1;
    v15 = v13;
    v16 = static NSObject.== infix(_:_:)(v14, v15);

    if ((v16 & 1) != 0 && !v6(v11, 1, v5))
    {
      v17 = *(void **)((char *)v11 + *(int *)(v5 + 36));
      if (v17)
      {
        v18 = qword_10025F970;
        v19 = v17;
        if (v18 != -1)
          swift_once(&qword_10025F970, sub_100128268);
        v20 = type metadata accessor for Logger(0);
        v21 = sub_100037A9C(v20, (uint64_t)qword_10027AD68);
        v22 = Logger.logObject.getter(v21);
        v23 = static os_log_type_t.default.getter(v22);
        if (!os_log_type_enabled(v22, v23))
          goto LABEL_18;
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v25 = swift_slowAlloc(32, -1);
        v32 = v25;
        *(_DWORD *)v24 = 136446210;
        v31 = sub_10002BA84(0xD00000000000001ALL, 0x8000000100200510, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v24 + 4, v24 + 12);
        v26 = "%{public}s re-run Findee config session";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v22, v23, v26, v24, 0xCu);
        swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v24, -1, -1);
LABEL_18:

        objc_msgSend(a1, "runWithConfiguration:", v19);
      }
    }
  }
}

void sub_10014EAE8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_10014E3D0(v4);

}

void sub_10014EB3C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  void **v11;
  __n128 v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  void *v14;
  id v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];
  _BYTE v36[24];

  v4 = sub_100037A5C((uint64_t *)&unk_100265150);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RangingConfigDataSession(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (id *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (void **)(a2 + qword_100264FA0);
  v12 = swift_beginAccess(a2 + qword_100264FA0, v36, 0, 0);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void **, uint64_t, uint64_t, __n128))v13)(v11, 1, v7, v12)
    || (v14 = *v11,
        sub_1000DD514(0, (unint64_t *)&unk_1002651C0, NISession_ptr),
        v15 = v14,
        v16 = a1,
        v17 = static NSObject.== infix(_:_:)(v16, v15),
        v16,
        v15,
        (v17 & 1) == 0))
  {
    v24 = a2 + qword_100264FA8;
    swift_beginAccess(a2 + qword_100264FA8, v35, 0, 0);
    sub_1001516F0(v24, (uint64_t)v6);
    if (v13(v6, 1, v7) == 1)
    {
      sub_100151738((uint64_t)v6);
    }
    else
    {
      sub_100151778((uint64_t)v6, (uint64_t)v10);
      sub_1000DD514(0, (unint64_t *)&unk_1002676F0, NSObject_ptr);
      v25 = *v10;
      v26 = static NSObject.== infix(_:_:)(a1, v25);

      if ((v26 & 1) != 0)
      {
        if (qword_10025F970 != -1)
          swift_once(&qword_10025F970, sub_100128268);
        v27 = type metadata accessor for Logger(0);
        v28 = sub_100037A9C(v27, (uint64_t)qword_10027AD68);
        v29 = Logger.logObject.getter(v28);
        v30 = static os_log_type_t.default.getter(v29);
        if (os_log_type_enabled(v29, v30))
        {
          v31 = (uint8_t *)swift_slowAlloc(12, -1);
          v32 = swift_slowAlloc(32, -1);
          v34 = v32;
          *(_DWORD *)v31 = 136446210;
          v33 = sub_10002BA84(0xD00000000000001DLL, 0x80000001002004F0, &v34);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v31 + 4, v31 + 12);
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s invalidate Findee config session", v31, 0xCu);
          swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v32, -1, -1);
          swift_slowDealloc(v31, -1, -1);
        }

        sub_10014DAC4(*(unint64_t *)((char *)v10 + *(int *)(v7 + 32)));
      }
      sub_100151800((uint64_t)v10);
    }
  }
  else
  {
    if (qword_10025F970 != -1)
      swift_once(&qword_10025F970, sub_100128268);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100037A9C(v18, (uint64_t)qword_10027AD68);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v35[0] = v23;
      *(_DWORD *)v22 = 136446210;
      v34 = sub_10002BA84(0xD00000000000001DLL, 0x80000001002004F0, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v22 + 4, v22 + 12);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s invalidate Finder config session", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }

    sub_10014DCA4();
  }
}

void sub_10014EFA4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v8 = a4;
  v7 = a1;
  sub_100151B78(v6);

}

uint64_t sub_10014F000(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = *v2;
  v7 = swift_isaMask;
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v8 = type metadata accessor for Logger(0);
  sub_100037A9C(v8, (uint64_t)qword_10027AD68);
  swift_errorRetain(a2);
  v9 = swift_errorRetain(a2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v23 = v6;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = v7;
    v13 = swift_slowAlloc(32, -1);
    v24 = a2;
    v25 = v13;
    *(_DWORD *)v12 = 136446210;
    swift_errorRetain(a2);
    v14 = sub_100037A5C(&qword_100265260);
    v15 = String.init<A>(describing:)(&v24, v14);
    v17 = v16;
    v24 = sub_10002BA84(v15, v16, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "didFailWithError: %{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    v18 = v13;
    v7 = v22;
    swift_slowDealloc(v18, -1, -1);
    v19 = v12;
    v6 = v23;
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  result = swift_unknownObjectWeakLoadStrong((char *)v3 + qword_100264FB0);
  if (result)
  {
    v21 = result;
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)((v7 & v6) + 0x58) + 24))(a1, a2, *(_QWORD *)((v7 & v6) + 0x50));
    return swift_unknownObjectRelease(v21);
  }
  return result;
}

void sub_10014F224(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v8 = a4;
  v7 = a1;
  sub_10014F000((uint64_t)v6, (uint64_t)v8);

}

uint64_t sub_10014F284(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;

  v3 = v2;
  v6 = *v3;
  v7 = swift_isaMask;
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v8 = type metadata accessor for Logger(0);
  sub_100037A9C(v8, (uint64_t)qword_10027AD68);
  v9 = a2;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v20 = a1;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = v6;
    v13 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138412290;
    v21 = v9;
    v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4, v12 + 12);
    *v13 = v9;

    a1 = v20;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "didDiscover: %@", v12, 0xCu);
    v15 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v13, 1, v15);
    v16 = v13;
    v6 = v19;
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  result = swift_unknownObjectWeakLoadStrong((char *)v3 + qword_100264FB0);
  if (result)
  {
    v18 = result;
    (*(void (**)(uint64_t, id, _QWORD))(*(_QWORD *)((v7 & v6) + 0x58) + 32))(a1, v9, *(_QWORD *)((v7 & v6) + 0x50));
    return swift_unknownObjectRelease(v18);
  }
  return result;
}

void sub_10014F488(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  sub_10014F284((uint64_t)v6, v7);

}

uint64_t sub_10014F4F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v6 = *v2;
  v7 = swift_isaMask;
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v8 = type metadata accessor for Logger(0);
  sub_100037A9C(v8, (uint64_t)qword_10027AD68);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v25 = a1;
    v24 = v6;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = v7;
    v13 = swift_slowAlloc(32, -1);
    v27 = v13;
    *(_DWORD *)v12 = 136315138;
    sub_1000DD514(0, (unint64_t *)&unk_1002651B0, NINearbyObject_ptr);
    v14 = swift_bridgeObjectRetain(a2);
    v15 = Array.description.getter(v14);
    v17 = v16;
    swift_bridgeObjectRelease(a2);
    v26 = sub_10002BA84(v15, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    v18 = v17;
    a1 = v25;
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "didUpdate: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    v19 = v13;
    v7 = v23;
    swift_slowDealloc(v19, -1, -1);
    v20 = v12;
    v6 = v24;
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  result = swift_unknownObjectWeakLoadStrong((char *)v3 + qword_100264FB0);
  if (result)
  {
    v22 = result;
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)((v7 & v6) + 0x58) + 40))(a1, a2, *(_QWORD *)((v7 & v6) + 0x50));
    return swift_unknownObjectRelease(v22);
  }
  return result;
}

uint64_t sub_10014F734(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;

  v7 = sub_1000DD514(0, (unint64_t *)&unk_1002651B0, NINearbyObject_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v7);
  v9 = a3;
  v10 = a1;
  sub_10014F4F0((uint64_t)v9, v8);

  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_10014F7B0(void *a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t aBlock[5];
  _QWORD *v57;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v51 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v54 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v53 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v13 = type metadata accessor for Logger(0);
  sub_100037A9C(v13, (uint64_t)qword_10027AD68);
  v14 = a4;
  sub_10001A484(a2, a3);
  v15 = v14;
  v16 = sub_10001A484(a2, a3);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    v20 = swift_slowAlloc(52, -1);
    v48 = v11;
    v21 = v20;
    v44 = (_QWORD *)swift_slowAlloc(8, -1);
    v46 = swift_slowAlloc(64, -1);
    aBlock[0] = v46;
    *(_DWORD *)v21 = 136447235;
    v49 = v10;
    v55 = sub_10002BA84(0xD000000000000035, 0x80000001002004B0, aBlock);
    v45 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, aBlock, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2160;
    v55 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, aBlock, v21 + 14, v21 + 22);
    *(_WORD *)(v21 + 22) = 2113;
    v47 = a1;
    v55 = (uint64_t)v15;
    v22 = v15;
    v50 = v8;
    v23 = v22;
    v10 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, aBlock, v21 + 24, v21 + 32);
    v24 = v44;
    *v44 = v15;

    *(_WORD *)(v21 + 32) = 2160;
    v55 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, aBlock, v21 + 34, v21 + 42);
    *(_WORD *)(v21 + 42) = 2081;
    sub_10001A484(a2, a3);
    v25 = Data.description.getter(a2, a3);
    v27 = v26;
    sub_100037AB4(a2, a3);
    v55 = sub_10002BA84(v25, v27, aBlock);
    a1 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, aBlock, v21 + 44, v21 + 52);
    v28 = v27;
    v8 = v50;
    swift_bridgeObjectRelease(v28);
    sub_100037AB4(a2, a3);
    sub_100037AB4(a2, a3);
    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v45, "%{public}s\nfor object: %{private,mask.hash}@\nshareableConfigurationData: %{private,mask.hash}s", (uint8_t *)v21, 0x34u);
    v29 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v24, 1, v29);
    swift_slowDealloc(v24, -1, -1);
    v30 = v46;
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    v31 = v21;
    v11 = v48;
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {

    sub_100037AB4(a2, a3);
    sub_100037AB4(a2, a3);
  }

  v32 = v52;
  v33 = *(void **)&v52[qword_100264F98];
  v34 = (_QWORD *)swift_allocObject(&unk_100254FF0, 48, 7);
  v34[2] = v32;
  v34[3] = a1;
  v34[4] = a2;
  v34[5] = a3;
  aBlock[4] = (uint64_t)sub_100151F14;
  v57 = v34;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100133E74;
  aBlock[3] = (uint64_t)&unk_100255008;
  v35 = _Block_copy(aBlock);
  sub_10001A484(a2, a3);
  v36 = v33;
  v37 = v32;
  v38 = a1;
  v39 = v53;
  static DispatchQoS.unspecified.getter(v38);
  v55 = (uint64_t)_swiftEmptyArrayStorage;
  v40 = sub_100004EA8((unint64_t *)&unk_100265160, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v41 = sub_100037A5C(&qword_1002643A8);
  v42 = sub_100151F38();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v41, v42, v8, v40);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v39, v10, v35);
  _Block_release(v35);

  (*(void (**)(char *, uint64_t))(v51 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v11);
  return swift_release(v57);
}

void sub_10014FCC4(_QWORD *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  id *v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  id v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  id v52;
  _QWORD *v53;
  os_log_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id *v58;
  id v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  void *v75;
  id v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void *v96;
  unint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  void *v109;
  unint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  os_log_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  id *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129[3];
  char v130[32];

  v122 = a3;
  v123 = a4;
  v120 = swift_isaMask & *a1;
  v6 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v6);
  v121 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C((uint64_t *)&unk_100265150);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v114 - v12;
  v14 = type metadata accessor for RangingConfigDataSession(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = __chkstk_darwin(v14);
  v117 = (os_log_t *)((char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v114 - v19;
  v21 = __chkstk_darwin(v18);
  v124 = (id *)((char *)&v114 - v22);
  v23 = __chkstk_darwin(v21);
  v119 = (uint64_t)&v114 - v24;
  v25 = __chkstk_darwin(v23);
  v116 = (uint64_t)&v114 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v114 - v28;
  __chkstk_darwin(v27);
  v31 = (id *)((char *)&v114 - v30);
  v126 = a1;
  v32 = (uint64_t)a1 + qword_100264FA0;
  swift_beginAccess(v32, v130, 0, 0);
  sub_1001516F0(v32, (uint64_t)v13);
  v118 = v15;
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v125 = v14;
  if (v33(v13, 1, v14) == 1)
  {
    sub_100151738((uint64_t)v13);
  }
  else
  {
    sub_100151778((uint64_t)v13, (uint64_t)v31);
    sub_1000DD514(0, (unint64_t *)&unk_1002676F0, NSObject_ptr);
    v34 = *v31;
    v35 = static NSObject.== infix(_:_:)(a2, v34);

    if ((v35 & 1) != 0)
    {
      if (qword_10025F970 != -1)
        swift_once(&qword_10025F970, sub_100128268);
      v36 = type metadata accessor for Logger(0);
      sub_100037A9C(v36, (uint64_t)qword_10027AD68);
      v37 = (uint64_t)v31;
      sub_1001517BC((uint64_t)v31, (uint64_t)v29);
      v38 = v116;
      v39 = sub_1001517BC((uint64_t)v31, v116);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.default.getter(v40);
      v42 = v41;
      if (os_log_type_enabled(v40, v41))
      {
        v43 = swift_slowAlloc(52, -1);
        v117 = (_QWORD *)swift_slowAlloc(8, -1);
        v124 = (id *)swift_slowAlloc(64, -1);
        v129[0] = (uint64_t)v124;
        *(_DWORD *)v43 = 136447235;
        LODWORD(v115) = v42;
        v128 = sub_10002BA84(0xD000000000000035, 0x80000001002004B0, v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v43 + 4, v43 + 12);
        *(_WORD *)(v43 + 12) = 2160;
        v128 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v43 + 14, v43 + 22);
        *(_WORD *)(v43 + 22) = 2081;
        v44 = v125;
        v45 = type metadata accessor for Handle(0);
        v114 = v40;
        v46 = v45;
        v47 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
        v48 = dispatch thunk of CustomStringConvertible.description.getter(v46, v47);
        v50 = v49;
        v128 = sub_10002BA84(v48, v49, v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v43 + 24, v43 + 32);
        swift_bridgeObjectRelease(v50);
        sub_100151800((uint64_t)v29);
        *(_WORD *)(v43 + 32) = 2160;
        v128 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v43 + 34, v43 + 42);
        *(_WORD *)(v43 + 42) = 2113;
        v51 = *(void **)(v38 + *(int *)(v44 + 28));
        v128 = (uint64_t)v51;
        v52 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v43 + 44, v43 + 52);
        v53 = v117;
        *v117 = v51;
        sub_100151800(v38);
        v54 = v114;
        _os_log_impl((void *)&_mh_execute_header, v114, (os_log_type_t)v115, "%{public}s,\nFinder trying send to peer: %{private,mask.hash}s\nwith token: %{private,mask.hash}@", (uint8_t *)v43, 0x34u);
        v55 = sub_100037A5C(&qword_100260658);
        swift_arrayDestroy(v53, 1, v55);
        swift_slowDealloc(v53, -1, -1);
        v56 = (uint64_t)v124;
        swift_arrayDestroy(v124, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v43, -1, -1);

      }
      else
      {
        sub_100151800((uint64_t)v29);
        sub_100151800(v38);

      }
      v89 = type metadata accessor for TaskPriority(0);
      v90 = (uint64_t)v121;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v121, 1, 1, v89);
      v91 = v119;
      sub_1001517BC(v37, v119);
      v92 = *(unsigned __int8 *)(v118 + 80);
      v93 = (v92 + 72) & ~v92;
      v94 = (_QWORD *)swift_allocObject(&unk_100255068, v93 + v16, v92 | 7);
      v94[2] = 0;
      v94[3] = 0;
      v95 = v120;
      v94[4] = *(_QWORD *)(v120 + 80);
      v96 = v126;
      v94[5] = *(_QWORD *)(v95 + 88);
      v94[6] = v96;
      v98 = v122;
      v97 = v123;
      v94[7] = v122;
      v94[8] = v97;
      sub_100151778(v91, (uint64_t)v94 + v93);
      v99 = v96;
      sub_10001A484(v98, v97);
      v100 = sub_100055994(v90, (uint64_t)&unk_1002651A8, (uint64_t)v94);
      swift_release(v100);
      v101 = v37;
      goto LABEL_26;
    }
    sub_100151800((uint64_t)v31);
  }
  v57 = (uint64_t)v126 + qword_100264FA8;
  swift_beginAccess((char *)v126 + qword_100264FA8, v129, 0, 0);
  sub_1001516F0(v57, (uint64_t)v11);
  if (v33(v11, 1, v125) != 1)
  {
    v58 = v124;
    sub_100151778((uint64_t)v11, (uint64_t)v124);
    sub_1000DD514(0, (unint64_t *)&unk_1002676F0, NSObject_ptr);
    v59 = *v58;
    v60 = static NSObject.== infix(_:_:)(a2, v59);

    if ((v60 & 1) == 0)
    {
      sub_100151800((uint64_t)v58);
      goto LABEL_17;
    }
    if (qword_10025F970 != -1)
      swift_once(&qword_10025F970, sub_100128268);
    v61 = type metadata accessor for Logger(0);
    sub_100037A9C(v61, (uint64_t)qword_10027AD68);
    sub_1001517BC((uint64_t)v58, (uint64_t)v20);
    v62 = v117;
    v63 = sub_1001517BC((uint64_t)v58, (uint64_t)v117);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      v66 = swift_slowAlloc(52, -1);
      v115 = (_QWORD *)swift_slowAlloc(8, -1);
      v116 = swift_slowAlloc(64, -1);
      v128 = v116;
      *(_DWORD *)v66 = 136447235;
      v127 = sub_10002BA84(0xD000000000000035, 0x80000001002004B0, &v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v66 + 4, v66 + 12);
      *(_WORD *)(v66 + 12) = 2160;
      v127 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v66 + 14, v66 + 22);
      *(_WORD *)(v66 + 22) = 2081;
      v67 = v125;
      v68 = (uint64_t)v20;
      v69 = type metadata accessor for Handle(0);
      v70 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v71 = dispatch thunk of CustomStringConvertible.description.getter(v69, v70);
      v73 = v72;
      v127 = sub_10002BA84(v71, v72, &v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v66 + 24, v66 + 32);
      swift_bridgeObjectRelease(v73);
      sub_100151800(v68);
      *(_WORD *)(v66 + 32) = 2160;
      v127 = 1752392040;
      v58 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v66 + 34, v66 + 42);
      *(_WORD *)(v66 + 42) = 2113;
      v74 = v117;
      v75 = *(void **)((char *)v117 + *(int *)(v67 + 28));
      v127 = (uint64_t)v75;
      v76 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v66 + 44, v66 + 52);
      v77 = v115;
      *v115 = v75;
      sub_100151800((uint64_t)v74);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "%{public}s,\nFindee trying send to peer: %{private,mask.hash}s\nwith token: %{private,mask.hash}@", (uint8_t *)v66, 0x34u);
      v78 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v77, 1, v78);
      swift_slowDealloc(v77, -1, -1);
      v79 = v116;
      swift_arrayDestroy(v116, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1, -1);
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      sub_100151800((uint64_t)v20);
      sub_100151800((uint64_t)v62);
    }

    v102 = type metadata accessor for TaskPriority(0);
    v103 = (uint64_t)v121;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v121, 1, 1, v102);
    v104 = v119;
    sub_1001517BC((uint64_t)v58, v119);
    v105 = *(unsigned __int8 *)(v118 + 80);
    v106 = (v105 + 72) & ~v105;
    v107 = (_QWORD *)swift_allocObject(&unk_100255040, v106 + v16, v105 | 7);
    v107[2] = 0;
    v107[3] = 0;
    v108 = v120;
    v107[4] = *(_QWORD *)(v120 + 80);
    v109 = v126;
    v107[5] = *(_QWORD *)(v108 + 88);
    v107[6] = v109;
    v111 = v122;
    v110 = v123;
    v107[7] = v122;
    v107[8] = v110;
    sub_100151778(v104, (uint64_t)v107 + v106);
    v112 = v109;
    sub_10001A484(v111, v110);
    v113 = sub_100055994(v103, (uint64_t)&unk_100265198, (uint64_t)v107);
    swift_release(v113);
    v101 = (uint64_t)v58;
LABEL_26:
    sub_100151800(v101);
    return;
  }
  sub_100151738((uint64_t)v11);
LABEL_17:
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v80 = type metadata accessor for Logger(0);
  sub_100037A9C(v80, (uint64_t)qword_10027AD68);
  v81 = a2;
  v82 = Logger.logObject.getter(v81);
  v83 = static os_log_type_t.error.getter(v82);
  if (os_log_type_enabled(v82, v83))
  {
    v84 = swift_slowAlloc(32, -1);
    v85 = (_QWORD *)swift_slowAlloc(8, -1);
    v86 = swift_slowAlloc(32, -1);
    v128 = v86;
    *(_DWORD *)v84 = 136446723;
    v127 = sub_10002BA84(0xD000000000000035, 0x80000001002004B0, &v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v84 + 4, v84 + 12);
    *(_WORD *)(v84 + 12) = 2160;
    v127 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v84 + 14, v84 + 22);
    *(_WORD *)(v84 + 22) = 2113;
    v127 = (uint64_t)v81;
    v87 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v84 + 24, v84 + 32);
    *v85 = v81;

    _os_log_impl((void *)&_mh_execute_header, v82, v83, "%{public}s current session %{private,mask.hash}@\nis not waiting for shareConfigation data, privacy: .public)", (uint8_t *)v84, 0x20u);
    v88 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v85, 1, v88);
    swift_slowDealloc(v85, -1, -1);
    swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v84, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_100150910(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  v8 = swift_isaMask;
  v7[7] = *a4;
  v7[8] = v8;
  return swift_task_switch(sub_100150944, 0, 0);
}

uint64_t sub_100150944()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  int *v14;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + qword_100264FB0);
  *(_QWORD *)(v0 + 72) = Strong;
  if (Strong)
  {
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56) & *(_QWORD *)(v0 + 64);
    v4 = (int *)type metadata accessor for RangingConfigDataSession(0);
    v5 = *(_QWORD *)(v2 + v4[7]);
    v6 = v2 + v4[5];
    v7 = v2 + v4[6];
    v10 = v3 + 80;
    v9 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v10 + 8);
    v11 = *(int **)(v8 + 8);
    v14 = (int *)((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc(v11[1]);
    *(_QWORD *)(v0 + 80) = v12;
    *v12 = v0;
    v12[1] = sub_100150A40;
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v14)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v5, v6, v7, v9, v8);
  }
  else
  {
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100150A40()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_10015224C, 0, 0);
}

uint64_t sub_100150A9C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  v8 = swift_isaMask;
  v7[7] = *a4;
  v7[8] = v8;
  return swift_task_switch(sub_100150AD0, 0, 0);
}

uint64_t sub_100150AD0()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  int *v14;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + qword_100264FB0);
  *(_QWORD *)(v0 + 72) = Strong;
  if (Strong)
  {
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56) & *(_QWORD *)(v0 + 64);
    v4 = (int *)type metadata accessor for RangingConfigDataSession(0);
    v5 = *(_QWORD *)(v2 + v4[7]);
    v6 = v2 + v4[5];
    v7 = v2 + v4[6];
    v10 = v3 + 80;
    v9 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v10 + 8);
    v11 = *(int **)(v8 + 8);
    v14 = (int *)((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc(v11[1]);
    *(_QWORD *)(v0 + 80) = v12;
    *v12 = v0;
    v12[1] = sub_100150BCC;
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v14)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v5, v6, v7, v9, v8);
  }
  else
  {
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100150BCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_100150C28, 0, 0);
}

uint64_t sub_100150C28()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 72) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100150C44(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v14 = a1;
  v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v13 = v12;

  sub_10014F7B0(v8, v11, v13, v10);
  sub_100037AB4(v11, v13);

}

void sub_100150CE4()
{
  sub_100151EB4();
}

id sub_100150D00()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100150D34(uint64_t a1)
{

  sub_100151738(a1 + qword_100264FA0);
  sub_100151738(a1 + qword_100264FA8);
  return swift_unknownObjectWeakDestroy(a1 + qword_100264FB0);
}

uint64_t _s10TrampolineCMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100121050(a1, a2, a3, a4, (uint64_t)&_s10TrampolineCMn_0);
}

uint64_t type metadata accessor for RangingConfigDataSession(uint64_t a1)
{
  uint64_t result;

  result = qword_100265100;
  if (!qword_100265100)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RangingConfigDataSession);
  return result;
}

void **sub_100150DE4(void **a1, void **a2, int *a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Handle(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v14 = v4;
    v13(v9, v10, v11);
    v15 = a3[6];
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)a2 + v15, 1, v11))
    {
      v18 = sub_100037A5C(&qword_1002650A0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v13(v16, v17, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
    }
    v19 = a3[7];
    v20 = a3[8];
    v21 = *(void **)((char *)a2 + v19);
    *(void **)((char *)v7 + v19) = v21;
    *(void **)((char *)v7 + v20) = *(void **)((char *)a2 + v20);
    v22 = a3[9];
    v23 = *(void **)((char *)a2 + v22);
    *(void **)((char *)v7 + v22) = v23;
    v24 = v21;
    v25 = v23;
  }
  return v7;
}

void sub_100150F28(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t);
  char *v8;

  v4 = (char *)a1 + a2[5];
  v5 = type metadata accessor for Handle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(char *, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (char *)a1 + a2[6];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
    v7(v8, v5);

}

void **sub_100150FC8(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Handle(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v13 = v6;
  v12(v8, v9, v10);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))((char *)a2 + v14, 1, v10))
  {
    v17 = sub_100037A5C(&qword_1002650A0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v12(v15, v16, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = *(void **)((char *)a2 + v18);
  *(void **)((char *)a1 + v18) = v20;
  *(void **)((char *)a1 + v19) = *(void **)((char *)a2 + v19);
  v21 = a3[9];
  v22 = *(void **)((char *)a2 + v21);
  *(void **)((char *)a1 + v21) = v22;
  v23 = v20;
  v24 = v22;
  return a1;
}

void **sub_1001510E4(void **a1, void **a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = a3[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Handle(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, char *, uint64_t))(v13 + 24);
  v14(v10, v11, v12);
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v19 = v18((char *)a1 + v15, 1, v12);
  v20 = v18(v17, 1, v12);
  if (!v19)
  {
    if (!v20)
    {
      v14(v16, v17, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = sub_100037A5C(&qword_1002650A0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v17, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
LABEL_7:
  v22 = a3[7];
  v23 = *(void **)((char *)a2 + v22);
  v24 = *(void **)((char *)a1 + v22);
  *(void **)((char *)a1 + v22) = v23;
  v25 = v23;

  *(void **)((char *)a1 + a3[8]) = *(void **)((char *)a2 + a3[8]);
  v26 = a3[9];
  v27 = *(void **)((char *)a1 + v26);
  v28 = *(void **)((char *)a2 + v26);
  *(void **)((char *)a1 + v26) = v28;
  v29 = v28;

  return a1;
}

_QWORD *sub_100151260(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for Handle(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = &a2[v12];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
  {
    v15 = sub_100037A5C(&qword_1002650A0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  v16 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)&a2[v16];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)&a2[a3[9]];
  return a1;
}

void **sub_100151368(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;

  v6 = *a1;
  *a1 = *a2;

  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Handle(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v17 = v16((char *)a1 + v13, 1, v10);
  v18 = v16(v15, 1, v10);
  if (!v17)
  {
    if (!v18)
    {
      v12(v14, v15, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_100037A5C(&qword_1002650A0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
LABEL_7:
  v20 = a3[7];
  v21 = *(void **)((char *)a1 + v20);
  *(void **)((char *)a1 + v20) = *(void **)((char *)a2 + v20);

  v22 = a3[9];
  *(void **)((char *)a1 + a3[8]) = *(void **)((char *)a2 + a3[8]);
  v23 = *(void **)((char *)a1 + v22);
  *(void **)((char *)a1 + v22) = *(void **)((char *)a2 + v22);

  return a1;
}

uint64_t sub_1001514D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001514E0);
}

uint64_t sub_1001514E0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Handle(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_100037A5C(&qword_1002650A0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_100151584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100151590);
}

char *sub_100151590(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for Handle(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_100037A5C(&qword_1002650A0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_100151630(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2 = type metadata accessor for Handle(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100101280(319, (unint64_t *)&qword_100265110, (uint64_t (*)(uint64_t))&type metadata accessor for Handle);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[5] = "\b";
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

uint64_t sub_1001516F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C((uint64_t *)&unk_100265150);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100151738(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100037A5C((uint64_t *)&unk_100265150);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100151778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RangingConfigDataSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001517BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RangingConfigDataSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100151800(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RangingConfigDataSession(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10015183C(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t aBlock[5];
  uint64_t v37;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100037A9C(v11, (uint64_t)qword_10027AD68);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v33 = v5;
    v15 = swift_slowAlloc(12, -1);
    v31 = a1;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v32 = v8;
    v18 = v17;
    aBlock[0] = v17;
    *(_DWORD *)v16 = 136446210;
    v35 = (_QWORD *)sub_10002BA84(0xD00000000000001CLL, 0x8000000100200530, aBlock);
    v5 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, aBlock, v16 + 4, v16 + 12);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v19 = v18;
    v8 = v32;
    swift_slowDealloc(v19, -1, -1);
    v20 = v16;
    a1 = v31;
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = *(void **)&v2[qword_100264F98];
  v22 = swift_allocObject(&unk_100255130, 32, 7);
  *(_QWORD *)(v22 + 16) = v2;
  *(_QWORD *)(v22 + 24) = a1;
  aBlock[4] = (uint64_t)sub_100152224;
  v37 = v22;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100133E74;
  aBlock[3] = (uint64_t)&unk_100255148;
  v23 = _Block_copy(aBlock);
  v24 = v21;
  v25 = v2;
  static DispatchQoS.unspecified.getter(a1);
  v35 = _swiftEmptyArrayStorage;
  v26 = sub_100004EA8((unint64_t *)&unk_100265160, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100037A5C(&qword_1002643A8);
  v28 = sub_100151F38();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v27, v28, v4, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v8);
  return swift_release(v37);
}

uint64_t sub_100151B78(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t aBlock[5];
  uint64_t v37;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100037A9C(v11, (uint64_t)qword_10027AD68);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v33 = v5;
    v15 = swift_slowAlloc(12, -1);
    v31 = a1;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v32 = v8;
    v18 = v17;
    aBlock[0] = v17;
    *(_DWORD *)v16 = 136446210;
    v35 = (_QWORD *)sub_10002BA84(0xD00000000000001DLL, 0x80000001002004F0, aBlock);
    v5 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, aBlock, v16 + 4, v16 + 12);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v19 = v18;
    v8 = v32;
    swift_slowDealloc(v19, -1, -1);
    v20 = v16;
    a1 = v31;
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = *(void **)&v2[qword_100264F98];
  v22 = swift_allocObject(&unk_100255090, 32, 7);
  *(_QWORD *)(v22 + 16) = a1;
  *(_QWORD *)(v22 + 24) = v2;
  aBlock[4] = (uint64_t)sub_100152214;
  v37 = v22;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100133E74;
  aBlock[3] = (uint64_t)&unk_1002550A8;
  v23 = _Block_copy(aBlock);
  v24 = v21;
  v25 = a1;
  static DispatchQoS.unspecified.getter(v2);
  v35 = _swiftEmptyArrayStorage;
  v26 = sub_100004EA8((unint64_t *)&unk_100265160, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100037A5C(&qword_1002643A8);
  v28 = sub_100151F38();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v27, v28, v4, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v8);
  return swift_release(v37);
}

void sub_100151EB4()
{
  _swift_stdlib_reportUnimplementedInitializer("findmylocated.Trampoline", 24, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_100151EE0()
{
  uint64_t v0;

  sub_100037AB4(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100151F14()
{
  uint64_t v0;

  sub_10014FCC4(*(_QWORD **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100151F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100151F30(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100151F38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100265170;
  if (!qword_100265170)
  {
    v1 = sub_10003C1FC(&qword_1002643A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100265170);
  }
  return result;
}

uint64_t sub_100151F88(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RangingConfigDataSession(0) - 8) + 80);
  v5 = (_QWORD *)v1[6];
  v6 = v1[7];
  v7 = v1[8];
  v8 = (char *)v1 + ((v4 + 72) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_100265194);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000087DC;
  v9[5] = v7;
  v9[6] = v8;
  v9[3] = v5;
  v9[4] = v6;
  v9[2] = a1;
  v10 = swift_isaMask;
  v9[7] = *v5;
  v9[8] = v10;
  return swift_task_switch(sub_100150AD0, 0, 0);
}

uint64_t sub_10015203C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  v1 = (int *)type metadata accessor for RangingConfigDataSession(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  sub_100037AB4(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  v6 = v0 + v4;

  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for Handle(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
    v10(v11, v8);

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100152138(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RangingConfigDataSession(0) - 8) + 80);
  v5 = (_QWORD *)v1[6];
  v6 = v1[7];
  v7 = v1[8];
  v8 = (char *)v1 + ((v4 + 72) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_1002651A4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003BF7C;
  v9[5] = v7;
  v9[6] = v8;
  v9[3] = v5;
  v9[4] = v6;
  v9[2] = a1;
  v10 = swift_isaMask;
  v9[7] = *v5;
  v9[8] = v10;
  return swift_task_switch(sub_100150944, 0, 0);
}

uint64_t sub_1001521E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100152214()
{
  uint64_t v0;

  sub_10014EB3C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10015221C()
{
  uint64_t v0;

  sub_10014E70C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100152224()
{
  uint64_t v0;

  sub_10014E0D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100152250(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v2 + 40) = v1;
  *(_BYTE *)(v2 + 88) = a1;
  v3 = type metadata accessor for Destination.DestinationType(0);
  *(_QWORD *)(v2 + 48) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 56) = v4;
  *(_QWORD *)(v2 + 64) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Daemon(0);
  *(_QWORD *)(v2 + 72) = static Daemon.shared.getter();
  v6 = sub_1001530A0();
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
  return swift_task_switch(sub_10015231C, v7, v8);
}

uint64_t sub_10015231C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  swift_release(*(_QWORD *)(v0 + 72));
  v1 = (void *)qword_100260668;
  if (qword_100260668)
  {
    v2 = (id)qword_100260668;
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)CNContactStore), "init");
    v4 = (void *)qword_100260668;
    qword_100260668 = (uint64_t)v3;
    v2 = v3;

    v1 = 0;
  }
  *(_QWORD *)(v0 + 80) = v2;
  v5 = v1;
  return swift_task_switch(sub_1001523D8, 0, 0);
}

uint64_t sub_1001523D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  void *v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  void *v18;
  id v19;
  NSString v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  Class isa;
  id v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t countAndFlagsBits;
  id v77;
  void *v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;

  v1 = v0;
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  Destination.type.getter();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 == enum case for Destination.DestinationType.email(_:))
  {
    Destination.destination.getter();
    v7 = v6;
    v8._countAndFlagsBits = 0x3A6F746C69616DLL;
    v8._object = (void *)0xE700000000000000;
    v9 = String.deletingPrefix(_:)(v8);
    object = v9._object;
    swift_bridgeObjectRelease(v7);
    v11 = (void *)objc_opt_self(CNContact);
    countAndFlagsBits = v9._countAndFlagsBits;
    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v11, "predicateForContactsMatchingEmailAddress:", v12);
  }
  else
  {
    if (v5 != enum case for Destination.DestinationType.phoneNumber(_:))
    {
      if (qword_10025F990 != -1)
        swift_once(&qword_10025F990, sub_10013F9E0);
      v59 = type metadata accessor for Logger(0);
      v60 = sub_100037A9C(v59, (uint64_t)qword_10027ADD8);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.error.getter(v61);
      if (os_log_type_enabled(v61, v62))
      {
        v63 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Unexpected destination type!", v63, 2u);
        swift_slowDealloc(v63, -1, -1);
      }
      v65 = *(_QWORD *)(v0 + 56);
      v64 = *(_QWORD *)(v0 + 64);
      v66 = *(_QWORD *)(v0 + 48);

      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
      v67 = 0;
      object = (void *)0xE000000000000000;
      goto LABEL_31;
    }
    Destination.destination.getter();
    v15 = v14;
    v16._countAndFlagsBits = 980182388;
    v16._object = (void *)0xE400000000000000;
    v17 = String.deletingPrefix(_:)(v16);
    object = v17._object;
    swift_bridgeObjectRelease(v15);
    v18 = (void *)objc_opt_self(CNContact);
    v19 = objc_allocWithZone((Class)CNPhoneNumber);
    swift_bridgeObjectRetain(v17._object);
    countAndFlagsBits = v17._countAndFlagsBits;
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17._object);
    v12 = objc_msgSend(v19, "initWithStringValue:", v20);

    v13 = objc_msgSend(v18, "predicateForContactsMatchingPhoneNumber:", v12);
  }
  v21 = *(void **)(v0 + 80);
  v22 = v13;

  v80 = (id)objc_opt_self(CNContactFormatter);
  v23 = objc_msgSend(v80, "descriptorForRequiredKeysForStyle:", 0);
  v24 = sub_100037A5C(&qword_100265250);
  v25 = swift_allocObject(v24, 40, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1001F5130;
  *(_QWORD *)(v25 + 32) = v23;
  v82 = v25;
  specialized Array._endMutation()(v25);
  v77 = v23;
  swift_unknownObjectRetain(v23);
  sub_100037A5C(&qword_100265258);
  v79 = v0;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v82);
  *(_QWORD *)(v0 + 16) = 0;
  v78 = v22;
  v27 = objc_msgSend(v21, "unifiedContactsMatchingPredicate:keysToFetch:error:", v22, isa, v0 + 16);

  v1 = v0;
  v28 = *(void **)(v0 + 16);
  if (v27)
  {
    v29 = sub_1001530E8();
    v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v29);
    v31 = v28;

    if ((unint64_t)v30 >> 62)
      goto LABEL_35;
    v33 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v33)
    {
      v34 = 0;
      while (1)
      {
        v35 = (v30 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v30, v32)
            : *(id *)(v30 + 8 * v34 + 32);
        v36 = v35;
        v37 = v34 + 1;
        if (__OFADD__(v34, 1))
          break;
        if (*(_BYTE *)(v1 + 88) == 1)
        {
          v38 = objc_msgSend(v35, "givenName");
          v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
          v41 = v40;

          swift_bridgeObjectRelease(v41);
          v42 = HIBYTE(v41) & 0xF;
          v43 = v39 & 0xFFFFFFFFFFFFLL;
          v1 = v79;
          if ((v41 & 0x2000000000000000) == 0)
            v42 = v43;
          if (v42)
          {
            v72 = *(void **)(v79 + 80);
            swift_bridgeObjectRelease(v30);
            swift_bridgeObjectRelease(object);
            v73 = objc_msgSend(v36, "givenName");
            v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
            object = v74;

            swift_unknownObjectRelease(v77);
            goto LABEL_31;
          }
        }
        v44 = objc_msgSend(v80, "stringFromContact:style:", v36, 0);
        if (v44)
        {
          v69 = v44;
          v70 = *(void **)(v1 + 80);
          swift_bridgeObjectRelease(object);
          v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
          object = v71;

          swift_unknownObjectRelease(v77);
          swift_bridgeObjectRelease(v30);
          goto LABEL_31;
        }

        ++v34;
        if (v37 == v33)
          goto LABEL_19;
      }
      __break(1u);
LABEL_35:
      if (v30 < 0)
        v75 = v30;
      else
        v75 = v30 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v30);
      v33 = _CocoaArrayWrapper.endIndex.getter(v75);
      swift_bridgeObjectRelease(v30);
    }
LABEL_19:

    swift_unknownObjectRelease(v77);
    swift_bridgeObjectRelease(v30);

  }
  else
  {
    v45 = v28;
    v46 = _convertNSErrorToError(_:)(v28);

    swift_willThrow(v47);
    if (qword_10025F990 != -1)
      swift_once(&qword_10025F990, sub_10013F9E0);
    v48 = type metadata accessor for Logger(0);
    sub_100037A9C(v48, (uint64_t)qword_10027ADD8);
    swift_errorRetain(v46);
    v49 = swift_errorRetain(v46);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v81 = *(id *)(v0 + 80);
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = swift_slowAlloc(32, -1);
      v82 = v53;
      *(_DWORD *)v52 = 136315138;
      *(_QWORD *)(v0 + 24) = v46;
      swift_errorRetain(v46);
      v54 = sub_100037A5C(&qword_100265260);
      v55 = String.init<A>(describing:)(v0 + 24, v54);
      v57 = v56;
      *(_QWORD *)(v0 + 32) = sub_10002BA84(v55, v56, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease(v57);
      swift_errorRelease(v46);
      swift_errorRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Error matching contacts: %s", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      v58 = v52;
      v1 = v0;
      swift_slowDealloc(v58, -1, -1);

      swift_errorRelease(v46);
      swift_unknownObjectRelease(v77);

    }
    else
    {

      swift_unknownObjectRelease(v77);
      swift_errorRelease(v46);
      swift_errorRelease(v46);
      swift_errorRelease(v46);

    }
  }
  v67 = countAndFlagsBits;
LABEL_31:
  swift_task_dealloc(*(_QWORD *)(v1 + 64));
  return (*(uint64_t (**)(uint64_t, void *))(v1 + 8))(v67, object);
}

uint64_t sub_100152B84()
{
  return sub_100152CD4(0xD000000000000028, 0x80000001002005E0, 0x80000001002005B0);
}

_QWORD *sub_100152BB0(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  void *v11;
  unint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v13 = _swiftEmptyArrayStorage;
    sub_1001E7914(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v13 = v2;
      v7 = v2[2];
      v8 = v2[3];
      swift_bridgeObjectRetain(v5);
      if (v7 >= v8 >> 1)
      {
        sub_1001E7914(v8 > 1, v7 + 1, 1);
        v2 = v13;
      }
      v4 += 2;
      v11 = &type metadata for String;
      v12 = sub_10015305C();
      *(_QWORD *)&v10 = v6;
      *((_QWORD *)&v10 + 1) = v5;
      v2[2] = v7 + 1;
      sub_10001A4CC(&v10, (uint64_t)&v2[5 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_100152CA8()
{
  return sub_100152CD4(0xD00000000000002BLL, 0x8000000100200580, 0x8000000100200550);
}

uint64_t sub_100152CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[48];

  v36 = a3;
  v37 = a2;
  v5 = type metadata accessor for LocalizationUtility.Table(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandleType(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100037A5C(&qword_100265230);
  inited = swift_initStackObject(v13, v38);
  *(_OWORD *)(inited + 16) = xmmword_1001F35F0;
  v15 = (uint64_t *)(v3 + *(int *)(type metadata accessor for RedStripeNotification(0) + 28));
  v17 = *v15;
  v16 = v15[1];
  *(_QWORD *)(inited + 32) = v17;
  *(_QWORD *)(inited + 40) = v16;
  swift_bridgeObjectRetain(v16);
  Friend.type.getter(v18);
  v34 = v10;
  v35 = v9;
  v19 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v12, v9);
  if (v19 == enum case for HandleType.follower(_:))
    goto LABEL_12;
  if (v19 == enum case for HandleType.following(_:))
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizationUtility.Table.redStripe(_:), v5);
    v20 = static LocalizationUtility.localizedString(key:table:)(a1, v36, v8);
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v23 = sub_100152BB0(inited);
    swift_bridgeObjectRelease(inited);
LABEL_13:
    v27 = String.init(format:arguments:)(v20, v22, v23);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v23);
    return v27;
  }
  v24 = v19 == enum case for HandleType.futureFollower(_:) || v19 == enum case for HandleType.futureFollowing(_:);
  if (v24 || v19 == enum case for HandleType.pendingOffer(_:))
  {
LABEL_12:
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizationUtility.Table.redStripe(_:), v5);
    v20 = static LocalizationUtility.localizedString(key:table:)(a1, v37, v8);
    v22 = v26;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v23 = sub_100152BB0(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
    goto LABEL_13;
  }
  swift_bridgeObjectRelease(inited);
  if (qword_10025F990 != -1)
    swift_once(&qword_10025F990, sub_10013F9E0);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_100037A9C(v29, (uint64_t)qword_10027ADD8);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unexpected friend type!", v33, 2u);
    swift_slowDealloc(v33, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v35);
  return 0;
}

uint64_t type metadata accessor for RedStripeNotification(uint64_t a1)
{
  uint64_t result;

  result = qword_1002652C8;
  if (!qword_1002652C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RedStripeNotification);
  return result;
}

unint64_t sub_10015305C()
{
  unint64_t result;

  result = qword_100265238;
  if (!qword_100265238)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, &qword_100265238);
  }
  return result;
}

unint64_t sub_1001530A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100261630;
  if (!qword_100261630)
  {
    v1 = type metadata accessor for Daemon(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Daemon, v1);
    atomic_store(result, (unint64_t *)&qword_100261630);
  }
  return result;
}

unint64_t sub_1001530E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100265268;
  if (!qword_100265268)
  {
    v1 = objc_opt_self(CNContact);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100265268);
  }
  return result;
}

uint64_t *sub_100153124(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for LocalUserNotificationCategory(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[7];
    v16 = a3[8];
    v17 = (uint64_t *)((char *)v4 + v15);
    v18 = (uint64_t *)((char *)a2 + v15);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = (char *)v4 + v16;
    v21 = (char *)a2 + v16;
    v22 = type metadata accessor for Friend(0);
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    swift_bridgeObjectRetain(v19);
    v23(v20, v21, v22);
  }
  return v4;
}

uint64_t sub_100153230(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for LocalUserNotificationCategory(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  v8 = a1 + a2[8];
  v9 = type metadata accessor for Friend(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

_BYTE *sub_1001532D0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  void (*v22)(_BYTE *, _BYTE *, uint64_t);

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalUserNotificationCategory(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = a3[7];
  v15 = a3[8];
  v16 = &a1[v14];
  v17 = &a2[v14];
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = &a1[v15];
  v20 = &a2[v15];
  v21 = type metadata accessor for Friend(0);
  v22 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  swift_bridgeObjectRetain(v18);
  v22(v19, v20, v21);
  return a1;
}

_BYTE *sub_1001533B0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalUserNotificationCategory(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for Friend(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

_BYTE *sub_1001534A0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalUserNotificationCategory(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for Friend(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

_BYTE *sub_10015356C(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalUserNotificationCategory(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = (uint64_t *)&a2[v14];
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  v20 = a3[8];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = type metadata accessor for Friend(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  return a1;
}

uint64_t sub_10015364C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100153658);
}

uint64_t sub_100153658(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for LocalUserNotificationCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Friend(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[7] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100153724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100153730);
}

uint64_t sub_100153730(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for LocalUserNotificationCategory(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    result = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = result;
      v11 = a4[6];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[7] + 8) = (a2 - 1);
        return result;
      }
      v10 = type metadata accessor for Friend(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[8];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t sub_1001537F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_1001F7C18;
  result = type metadata accessor for LocalUserNotificationCategory(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(result - 8) + 64;
      v6[3] = &unk_1001F7C30;
      result = type metadata accessor for Friend(319);
      if (v5 <= 0x3F)
      {
        v6[4] = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1001538AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001538B8);
}

uint64_t sub_1001538B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001538F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100153900);
}

uint64_t sub_100153900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

unint64_t sub_100153940()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t inited;
  __int128 v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v1 = sub_100037A5C(&qword_1002653A0);
  inited = swift_initStackObject(v1, &v5);
  *(_OWORD *)(inited + 16) = xmmword_1001F7CB0;
  v3 = v0[1];
  v8 = *v0;
  *(_OWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 32) = 112;
  *(_QWORD *)(inited + 40) = 0xE100000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0xD000000000000015;
  *(_QWORD *)(inited + 88) = 0x80000001001FC3B0;
  *(_OWORD *)(inited + 96) = v3;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 118;
  *(_QWORD *)(inited + 136) = 0xE100000000000000;
  v6 = v0[2];
  v7 = v3;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_OWORD *)(inited + 144) = v0[2];
  sub_100028DAC((uint64_t)&v8);
  sub_100028DAC((uint64_t)&v7);
  sub_100028DAC((uint64_t)&v6);
  return sub_1000DEBA4(inited);
}

uint64_t sub_100153A08(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100109D98(*a1, *a2);
}

Swift::Int sub_100153A14()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0x80000001001FC3B0;
  v3 = 0xD000000000000015;
  if (v1 != 1)
  {
    v3 = 118;
    v2 = 0xE100000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 112;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE100000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100153AA0(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x80000001001FC3B0;
  v3 = 0xD000000000000015;
  if (*v1 != 1)
  {
    v3 = 118;
    v2 = 0xE100000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 112;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE100000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100153B08(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0x80000001001FC3B0;
  v4 = 0xD000000000000015;
  if (v2 != 1)
  {
    v4 = 118;
    v3 = 0xE100000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 112;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE100000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_100153B90@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001543E8(*a1);
  *a2 = result;
  return result;
}

void sub_100153BBC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE100000000000000;
  v4 = 0x80000001001FC3B0;
  v5 = 0xD000000000000015;
  if (v2 != 1)
  {
    v5 = 118;
    v4 = 0xE100000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 112;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100153C08()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000015;
  if (*v0 != 1)
    v1 = 118;
  if (*v0)
    return v1;
  else
    return 112;
}

unint64_t sub_100153C50@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001543E8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100153C74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100154664();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100153C9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100154664();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100153CC4()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  uint64_t v10;
  Swift::String v11;

  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *v0;
  v2 = (void *)v0[1];
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._object = (void *)0x8000000100200630;
  v4._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v4);
  v5 = v0[2];
  v6 = (void *)v0[3];
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 540702218;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  v10 = v0[4];
  v9 = (void *)v0[5];
  swift_bridgeObjectRetain(v9);
  v11._countAndFlagsBits = v10;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v9);
  return 2112112;
}

uint64_t sub_100153DC0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v3 = v1;
  v5 = sub_100037A5C(&qword_1002653B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_100154664();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MappingEnvelopeV1.CodingKeys, &type metadata for MappingEnvelopeV1.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v21, v5);
    v16 = v3[4];
    v17 = v3[5];
    v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_100153EFC@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_100154430(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100153F3C(_QWORD *a1)
{
  return sub_100153DC0(a1);
}

uint64_t sub_100153F54@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[5];
  __int128 v22;
  __int128 v23;

  v19 = 112;
  v20 = 0xE100000000000000;
  AnyHashable.init<A>(_:)(v21, &v19, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v4 = sub_1000F3FE4((uint64_t)v21), (v5 & 1) != 0))
  {
    sub_10002BB54(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v22);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }
  sub_10001AEBC((uint64_t)v21);
  if (!*((_QWORD *)&v23 + 1))
    goto LABEL_17;
  if ((swift_dynamicCast(&v19, &v22, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_20:
    v16 = a1;
LABEL_21:
    result = swift_bridgeObjectRelease(v16);
    goto LABEL_22;
  }
  v7 = v19;
  v6 = v20;
  v19 = 0xD000000000000015;
  v20 = 0x80000001001FC3B0;
  AnyHashable.init<A>(_:)(v21, &v19, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v8 = sub_1000F3FE4((uint64_t)v21), (v9 & 1) != 0))
  {
    sub_10002BB54(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)&v22);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }
  sub_10001AEBC((uint64_t)v21);
  if (!*((_QWORD *)&v23 + 1))
  {
    swift_bridgeObjectRelease(v6);
LABEL_17:
    v14 = a1;
    goto LABEL_18;
  }
  if ((swift_dynamicCast(&v19, &v22, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v6);
    goto LABEL_20;
  }
  v11 = v19;
  v10 = v20;
  v19 = 118;
  v20 = 0xE100000000000000;
  AnyHashable.init<A>(_:)(v21, &v19, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v12 = sub_1000F3FE4((uint64_t)v21), (v13 & 1) != 0))
  {
    sub_10002BB54(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)&v22);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }
  swift_bridgeObjectRelease(a1);
  sub_10001AEBC((uint64_t)v21);
  if (*((_QWORD *)&v23 + 1))
  {
    result = swift_dynamicCast(&v19, &v22, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if ((result & 1) != 0)
    {
      v17 = v19;
      v18 = v20;
      goto LABEL_23;
    }
    swift_bridgeObjectRelease(v10);
    v16 = v6;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease(v10);
  v14 = v6;
LABEL_18:
  swift_bridgeObjectRelease(v14);
  result = sub_1000DDE64((uint64_t)&v22);
LABEL_22:
  v7 = 0;
  v6 = 0;
  v11 = 0;
  v10 = 0;
  v17 = 0;
  v18 = 0;
LABEL_23:
  *a2 = v7;
  a2[1] = v6;
  a2[2] = v11;
  a2[3] = v10;
  a2[4] = v17;
  a2[5] = v18;
  return result;
}

uint64_t destroy for MappingEnvelopeV1(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for MappingEnvelopeV1(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for MappingEnvelopeV1(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for MappingEnvelopeV1(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for MappingEnvelopeV1(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MappingEnvelopeV1(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MappingEnvelopeV1(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MappingEnvelopeV1()
{
  return &type metadata for MappingEnvelopeV1;
}

unint64_t sub_1001543E8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10024EE70, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_100154430@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;

  v5 = sub_100037A5C(&qword_1002653A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_100154664();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MappingEnvelopeV1.CodingKeys, &type metadata for MappingEnvelopeV1.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_10002BB90(a1);
  v30 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  v14 = v13;
  v27 = v12;
  v29 = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
  v17 = v16;
  v25 = v15;
  v28 = 2;
  swift_bridgeObjectRetain(v16);
  v26 = v17;
  v18 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  v20 = v19;
  v21 = v18;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v20);
  sub_10002BB90(a1);
  swift_bridgeObjectRelease(v20);
  v22 = v26;
  swift_bridgeObjectRelease(v26);
  result = swift_bridgeObjectRelease(v14);
  *a2 = v27;
  a2[1] = v14;
  a2[2] = v25;
  a2[3] = v22;
  a2[4] = v21;
  a2[5] = v20;
  return result;
}

unint64_t sub_100154664()
{
  unint64_t result;

  result = qword_1002653B0;
  if (!qword_1002653B0)
  {
    result = swift_getWitnessTable(&unk_1001F7E58, &type metadata for MappingEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002653B0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MappingEnvelopeV1.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001546F4 + 4 * byte_1001F7CC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100154728 + 4 * byte_1001F7CC0[v4]))();
}

uint64_t sub_100154728(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100154730(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100154738);
  return result;
}

uint64_t sub_100154744(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015474CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100154750(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100154758(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MappingEnvelopeV1.CodingKeys()
{
  return &type metadata for MappingEnvelopeV1.CodingKeys;
}

unint64_t sub_100154778()
{
  unint64_t result;

  result = qword_1002653C0;
  if (!qword_1002653C0)
  {
    result = swift_getWitnessTable(&unk_1001F7E30, &type metadata for MappingEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002653C0);
  }
  return result;
}

unint64_t sub_1001547C0()
{
  unint64_t result;

  result = qword_1002653C8;
  if (!qword_1002653C8)
  {
    result = swift_getWitnessTable(&unk_1001F7D68, &type metadata for MappingEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002653C8);
  }
  return result;
}

unint64_t sub_100154808()
{
  unint64_t result;

  result = qword_1002653D0[0];
  if (!qword_1002653D0[0])
  {
    result = swift_getWitnessTable(&unk_1001F7D90, &type metadata for MappingEnvelopeV1.CodingKeys);
    atomic_store(result, qword_1002653D0);
  }
  return result;
}

uint64_t sub_10015484C(uint64_t a1)
{
  _QWORD v2[2];

  v2[1] = &unk_1001F7ED8;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 96);
}

void sub_100154894(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  uint64_t v7;
  id v8;

  if (a2 >> 60 != 15)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  isa = 0;
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);

}

uint64_t sub_100154914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  type metadata accessor for Transaction(0);
  v9 = (_QWORD *)swift_allocObject(&unk_1002555F8, 56, 7);
  v9[2] = v4;
  v9[3] = a1;
  v9[4] = a2;
  v9[5] = a3;
  v9[6] = a4;
  swift_retain(v4);
  swift_bridgeObjectRetain(a2);
  swift_retain(a4);
  static Transaction.asyncTask(name:block:)("setActiveLocationSharingDevice(device:completion:)", 50, 2, &unk_100265520, v9);
  return swift_release(v9);
}

uint64_t sub_1001549C4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v7 = swift_isaMask;
  v5[8] = *a1;
  v5[9] = v7;
  v8 = type metadata accessor for ClientSessionError.Category(0);
  v5[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ClientSessionError(0);
  v5[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[14] = v11;
  v5[15] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100154A6C, a1, 0);
}

uint64_t sub_100154A6C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_100154AB0, 0, 0);
}

uint64_t sub_100154AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 128))
  {
    v1 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 72)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SettingsProtocol.setActiveLocationSharingDevice(_:)[1]);
    *(_QWORD *)(v0 + 136) = v4;
    *v4 = v0;
    v4[1] = sub_100154B60;
    return dispatch thunk of SettingsProtocol.setActiveLocationSharingDevice(_:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 48))(0);
    v6 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100154B60()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100154C14;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 128));
    v4 = sub_100154BCC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100154BCC()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD))(v0 + 48))(0);
  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100154C14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 128));
  return swift_task_switch(sub_100154C54, v1, 0);
}

uint64_t sub_100154C54()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[18];
  v0[2] = v1;
  v2 = v0[15];
  v3 = v0[13];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[18];
    (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
    swift_errorRetain(v5);
    v6 = v0[18];
  }
  else
  {
    v7 = v0[12];
    v8 = v0[13];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[11] + 104))(v7, enum case for ClientSessionError.Category.settingsService(_:), v0[10]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[19] = v6;
  return swift_task_switch(sub_100154D58, 0, 0);
}

uint64_t sub_100154D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(void (**)(uint64_t))(v0 + 48);
  swift_errorRetain(v1);
  v3(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  v4 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100154DCC(uint64_t a1, int a2, uint64_t a3, void *aBlock)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = _Block_copy(aBlock);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v9 = v8;
  v10 = swift_allocObject(&unk_100255760, 24, 7);
  *(_QWORD *)(v10 + 16) = v6;
  swift_retain(a1);
  sub_100154914(v7, v9, (uint64_t)sub_10003C588, v10);
  swift_release(a1);
  swift_bridgeObjectRelease(v9);
  return swift_release(v10);
}

uint64_t sub_100154E68(char a1, uint64_t a2, uint64_t a3)
{
  return sub_100156C48(a1, a2, a3, (uint64_t)&unk_1002555D0, (uint64_t)"setHideMyLocation(hidden:completion:)", 37, (uint64_t)&unk_100265510);
}

uint64_t sub_100154E88(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 40) = a4;
  *(_BYTE *)(v4 + 144) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  v6 = swift_isaMask;
  *(_QWORD *)(v4 + 48) = *a1;
  *(_QWORD *)(v4 + 56) = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  *(_QWORD *)(v4 + 64) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 72) = v8;
  *(_QWORD *)(v4 + 80) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  *(_QWORD *)(v4 + 88) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 96) = v10;
  *(_QWORD *)(v4 + 104) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100154F30, a1, 0);
}

uint64_t sub_100154F30()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_100154F74, 0, 0);
}

uint64_t sub_100154F74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SettingsProtocol.hideMyLocation(hidden:)[1]);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_100155024;
    return dispatch thunk of SettingsProtocol.hideMyLocation(hidden:)(*(unsigned __int8 *)(v0 + 144), v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 32))(0);
    v6 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100155024()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100155090;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 112));
    v4 = sub_100008630;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100155090()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 112));
  return swift_task_switch(sub_1001550D0, v1, 0);
}

uint64_t sub_1001550D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[16];
  v0[2] = v1;
  v2 = v0[13];
  v3 = v0[11];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[16];
    (*(void (**)(_QWORD, _QWORD))(v0[12] + 8))(v0[13], v0[11]);
    swift_errorRetain(v5);
    v6 = v0[16];
  }
  else
  {
    v7 = v0[10];
    v8 = v0[11];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[9] + 104))(v7, enum case for ClientSessionError.Category.settingsService(_:), v0[8]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[17] = v6;
  return swift_task_switch(sub_100126518, 0, 0);
}

uint64_t sub_1001551D4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  return sub_100155578(a1, a2, a3, a4, (uint64_t)&unk_100255738, (uint64_t)sub_10003C588, (void (*)(uint64_t, uint64_t, uint64_t))sub_100154E68);
}

uint64_t sub_1001551F0(char a1, uint64_t a2, uint64_t a3)
{
  return sub_100156C48(a1, a2, a3, (uint64_t)&unk_1002555A8, (uint64_t)"allowFriendshipRequests(allowed:completion:)", 44, (uint64_t)&unk_100265500);
}

uint64_t sub_100155210(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 40) = a4;
  *(_BYTE *)(v4 + 144) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  v6 = swift_isaMask;
  *(_QWORD *)(v4 + 48) = *a1;
  *(_QWORD *)(v4 + 56) = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  *(_QWORD *)(v4 + 64) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 72) = v8;
  *(_QWORD *)(v4 + 80) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  *(_QWORD *)(v4 + 88) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 96) = v10;
  *(_QWORD *)(v4 + 104) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001552B8, a1, 0);
}

uint64_t sub_1001552B8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_1001552FC, 0, 0);
}

uint64_t sub_1001552FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SettingsProtocol.allowFriendshipRequests(allowed:)[1]);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_1001553AC;
    return dispatch thunk of SettingsProtocol.allowFriendshipRequests(allowed:)(*(unsigned __int8 *)(v0 + 144), v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 32))(0);
    v6 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001553AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100155418;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 112));
    v4 = sub_10003D4AC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100155418()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 112));
  return swift_task_switch(sub_100155458, v1, 0);
}

uint64_t sub_100155458()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[16];
  v0[2] = v1;
  v2 = v0[13];
  v3 = v0[11];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[16];
    (*(void (**)(_QWORD, _QWORD))(v0[12] + 8))(v0[13], v0[11]);
    swift_errorRetain(v5);
    v6 = v0[16];
  }
  else
  {
    v7 = v0[10];
    v8 = v0[11];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[9] + 104))(v7, enum case for ClientSessionError.Category.settingsService(_:), v0[8]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[17] = v6;
  return swift_task_switch(sub_100127A34, 0, 0);
}

uint64_t sub_10015555C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  return sub_100155578(a1, a2, a3, a4, (uint64_t)&unk_100255710, (uint64_t)sub_10003C588, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001551F0);
}

uint64_t sub_100155578(uint64_t a1, int a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t))
{
  void *v12;
  uint64_t v13;

  v12 = _Block_copy(aBlock);
  v13 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v13 + 16) = v12;
  swift_retain(a1);
  a7(a3, a6, v13);
  swift_release(a1);
  return swift_release(v13);
}

uint64_t sub_100155600(char a1, uint64_t a2, uint64_t a3)
{
  return sub_100156C48(a1, a2, a3, (uint64_t)&unk_100255580, (uint64_t)"activeLocationSharingDevice(cached:completion:)", 47, (uint64_t)&unk_1002654E8);
}

uint64_t sub_100155620(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 40) = a4;
  *(_BYTE *)(v4 + 168) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  v6 = swift_isaMask;
  *(_QWORD *)(v4 + 48) = *a1;
  *(_QWORD *)(v4 + 56) = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  *(_QWORD *)(v4 + 64) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 72) = v8;
  *(_QWORD *)(v4 + 80) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  *(_QWORD *)(v4 + 88) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 96) = v10;
  *(_QWORD *)(v4 + 104) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_100260538);
  *(_QWORD *)(v4 + 112) = v11;
  *(_QWORD *)(v4 + 120) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001556F0, a1, 0);
}

uint64_t sub_1001556F0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_100155734, 0, 0);
}

uint64_t sub_100155734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, unint64_t, _QWORD);
  uint64_t v19;
  uint64_t v20;

  if (*(_QWORD *)(v0 + 128))
  {
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SettingsProtocol.activeLocationSharingDevice(cached:)[1]);
    *(_QWORD *)(v0 + 136) = v4;
    *v4 = v0;
    v4[1] = sub_100155924;
    return dispatch thunk of SettingsProtocol.activeLocationSharingDevice(cached:)(*(_QWORD *)(v0 + 120), *(unsigned __int8 *)(v0 + 168), v2, v3);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 120);
    v7 = type metadata accessor for Device(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
    v9 = *(_QWORD *)(v0 + 112);
    v8 = *(_QWORD *)(v0 + 120);
    v10 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v11 = PropertyListEncoder.init()();
    v12 = sub_100157418(&qword_1002654F0, &qword_100260538, (uint64_t)&protocol conformance descriptor for <A> A?);
    v13 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v8, v9, v12);
    v14 = *(_QWORD *)(v0 + 120);
    v15 = v13;
    v17 = v16;
    v18 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 32);
    swift_release(v11);
    sub_10001A484(v15, v17);
    v18(v15, v17, 0);
    sub_100037AB4(v15, v17);
    sub_100037AB4(v15, v17);
    sub_1000087A0(v14, &qword_100260538);
    v19 = *(_QWORD *)(v0 + 104);
    v20 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100155924()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100155CA4;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 128));
    v4 = sub_100155990;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100155990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, unint64_t, _QWORD);
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = type metadata accessor for Device(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = PropertyListEncoder.init()();
  v8 = sub_100157418(&qword_1002654F0, &qword_100260538, (uint64_t)&protocol conformance descriptor for <A> A?);
  v9 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v4, v5, v8);
  v11 = *(_QWORD *)(v0 + 120);
  if (v3)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 120), &qword_100260538);
    swift_release(v7);
    *(_QWORD *)(v0 + 152) = v3;
    return swift_task_switch(sub_100155B18, *(_QWORD *)(v0 + 24), 0);
  }
  else
  {
    v13 = v9;
    v14 = v10;
    v15 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 32);
    swift_release(v7);
    sub_10001A484(v13, v14);
    v15(v13, v14, 0);
    sub_100037AB4(v13, v14);
    sub_100037AB4(v13, v14);
    sub_1000087A0(v11, &qword_100260538);
    v16 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100155B18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[19];
  v0[2] = v1;
  v2 = v0[13];
  v3 = v0[11];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[19];
    (*(void (**)(_QWORD, _QWORD))(v0[12] + 8))(v0[13], v0[11]);
    swift_errorRetain(v5);
    v6 = v0[19];
  }
  else
  {
    v7 = v0[10];
    v8 = v0[11];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[9] + 104))(v7, enum case for ClientSessionError.Category.settingsService(_:), v0[8]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[20] = v6;
  return swift_task_switch(sub_100155C1C, 0, 0);
}

uint64_t sub_100155C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, unint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v3(0, 0xF000000000000000, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100155CA4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[16]);
  v0[19] = v0[18];
  return swift_task_switch(sub_100155B18, v0[3], 0);
}

uint64_t sub_100155CE8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  return sub_100155578(a1, a2, a3, a4, (uint64_t)&unk_1002556E8, (uint64_t)sub_100121090, (void (*)(uint64_t, uint64_t, uint64_t))sub_100155600);
}

uint64_t sub_100155D04(uint64_t a1, uint64_t a2)
{
  return sub_10000890C(a1, a2, (uint64_t)&unk_100255558, (uint64_t)"thisDeviceWithCompanion(completion:)", 36, (uint64_t)&unk_1002654C0);
}

uint64_t sub_100155D24(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = swift_isaMask;
  v3[6] = *a1;
  v3[7] = v5;
  v6 = type metadata accessor for ClientSessionError.Category(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ClientSessionError(0);
  v3[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[12] = v9;
  v3[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_1002654C8);
  v3[14] = v10;
  v3[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100155DF0, a1, 0);
}

uint64_t sub_100155DF0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_100155E34, 0, 0);
}

uint64_t sub_100155E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, unint64_t, _QWORD);
  uint64_t v19;
  uint64_t v20;

  if (*(_QWORD *)(v0 + 128))
  {
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SettingsProtocol.thisDeviceWithCompanion()[1]);
    *(_QWORD *)(v0 + 136) = v4;
    *v4 = v0;
    v4[1] = sub_100156008;
    return dispatch thunk of SettingsProtocol.thisDeviceWithCompanion()(*(_QWORD *)(v0 + 120), v2, v3);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 120);
    v7 = type metadata accessor for DeviceWithCompanion(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
    v9 = *(_QWORD *)(v0 + 112);
    v8 = *(_QWORD *)(v0 + 120);
    v10 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v11 = PropertyListEncoder.init()();
    v12 = sub_100157630();
    v13 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v8, v9, v12);
    v14 = *(_QWORD *)(v0 + 120);
    v15 = v13;
    v17 = v16;
    v18 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 32);
    swift_release(v11);
    sub_10001A484(v15, v17);
    v18(v15, v17, 0);
    sub_100037AB4(v15, v17);
    sub_100037AB4(v15, v17);
    sub_1000087A0(v14, &qword_1002654C8);
    v19 = *(_QWORD *)(v0 + 104);
    v20 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100156008()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100155CA4;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 128));
    v4 = sub_100156074;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100156074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, unint64_t, _QWORD);
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = type metadata accessor for DeviceWithCompanion(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = PropertyListEncoder.init()();
  v8 = sub_100157630();
  v9 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v4, v5, v8);
  v11 = *(_QWORD *)(v0 + 120);
  if (v3)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 120), &qword_1002654C8);
    swift_release(v7);
    *(_QWORD *)(v0 + 152) = v3;
    return swift_task_switch(sub_100155B18, *(_QWORD *)(v0 + 24), 0);
  }
  else
  {
    v13 = v9;
    v14 = v10;
    v15 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 32);
    swift_release(v7);
    sub_10001A484(v13, v14);
    v15(v13, v14, 0);
    sub_100037AB4(v13, v14);
    sub_100037AB4(v13, v14);
    sub_1000087A0(v11, &qword_1002654C8);
    v16 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001561E4(uint64_t a1, int a2, void *a3)
{
  return sub_100009874(a1, a2, a3, (uint64_t)&unk_1002556C0, (uint64_t)sub_100121090, (void (*)(uint64_t, uint64_t))sub_100155D04);
}

uint64_t sub_100156200(char a1, uint64_t a2, uint64_t a3)
{
  return sub_100156C48(a1, a2, a3, (uint64_t)&unk_100255530, (uint64_t)"isMyLocationEnabled(cached:completion:)", 39, (uint64_t)&unk_1002654B0);
}

uint64_t sub_100156220(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 40) = a4;
  *(_BYTE *)(v4 + 144) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  v6 = swift_isaMask;
  *(_QWORD *)(v4 + 48) = *a1;
  *(_QWORD *)(v4 + 56) = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  *(_QWORD *)(v4 + 64) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 72) = v8;
  *(_QWORD *)(v4 + 80) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  *(_QWORD *)(v4 + 88) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 96) = v10;
  *(_QWORD *)(v4 + 104) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001562C8, a1, 0);
}

uint64_t sub_1001562C8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_10015630C, 0, 0);
}

uint64_t sub_10015630C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SettingsProtocol.isMyLocationEnabled(cached:)[1]);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_1001563C0;
    return dispatch thunk of SettingsProtocol.isMyLocationEnabled(cached:)(*(unsigned __int8 *)(v0 + 144), v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 32))(0, 0);
    v6 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001563C0(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10015648C;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v4 + 112));
    *(_BYTE *)(v4 + 145) = a1 & 1;
    v6 = sub_100156440;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100156440()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(v0 + 32))(*(unsigned __int8 *)(v0 + 145), 0);
  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015648C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 112));
  return swift_task_switch(sub_1001564CC, v1, 0);
}

uint64_t sub_1001564CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[16];
  v0[2] = v1;
  v2 = v0[13];
  v3 = v0[11];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[16];
    (*(void (**)(_QWORD, _QWORD))(v0[12] + 8))(v0[13], v0[11]);
    swift_errorRetain(v5);
    v6 = v0[16];
  }
  else
  {
    v7 = v0[10];
    v8 = v0[11];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[9] + 104))(v7, enum case for ClientSessionError.Category.settingsService(_:), v0[8]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[17] = v6;
  return swift_task_switch(sub_1001565D0, 0, 0);
}

uint64_t sub_1001565D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(void (**)(_QWORD, uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v3(0, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  v4 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100156648(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  return sub_100155578(a1, a2, a3, a4, (uint64_t)&unk_100255698, (uint64_t)sub_1001578C4, (void (*)(uint64_t, uint64_t, uint64_t))sub_100156200);
}

void sub_100156664(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, a1 & 1);

}

uint64_t sub_1001566BC(char a1, uint64_t a2, uint64_t a3)
{
  return sub_100156C48(a1, a2, a3, (uint64_t)&unk_100255508, (uint64_t)"areFriendshipRequestsAllowed(cached:completion:)", 48, (uint64_t)&unk_1002654A0);
}

uint64_t sub_1001566DC(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 40) = a4;
  *(_BYTE *)(v4 + 144) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  v6 = swift_isaMask;
  *(_QWORD *)(v4 + 48) = *a1;
  *(_QWORD *)(v4 + 56) = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  *(_QWORD *)(v4 + 64) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 72) = v8;
  *(_QWORD *)(v4 + 80) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  *(_QWORD *)(v4 + 88) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 96) = v10;
  *(_QWORD *)(v4 + 104) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100156784, a1, 0);
}

uint64_t sub_100156784()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_1001567C8, 0, 0);
}

uint64_t sub_1001567C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SettingsProtocol.areFriendshipRequestsAllowed(cached:)[1]);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_10015687C;
    return dispatch thunk of SettingsProtocol.areFriendshipRequestsAllowed(cached:)(*(unsigned __int8 *)(v0 + 144), v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 32))(0, 0);
    v6 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10015687C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1001568FC;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v4 + 112));
    *(_BYTE *)(v4 + 145) = a1 & 1;
    v6 = sub_1001578EC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001568FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 112));
  return swift_task_switch(sub_10015693C, v1, 0);
}

uint64_t sub_10015693C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[16];
  v0[2] = v1;
  v2 = v0[13];
  v3 = v0[11];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[16];
    (*(void (**)(_QWORD, _QWORD))(v0[12] + 8))(v0[13], v0[11]);
    swift_errorRetain(v5);
    v6 = v0[16];
  }
  else
  {
    v7 = v0[10];
    v8 = v0[11];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[9] + 104))(v7, enum case for ClientSessionError.Category.settingsService(_:), v0[8]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[17] = v6;
  return swift_task_switch(sub_1001578E8, 0, 0);
}

uint64_t sub_100156A40(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  return sub_100155578(a1, a2, a3, a4, (uint64_t)&unk_100255670, (uint64_t)sub_1001578BC, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001566BC);
}

uint64_t sub_100156A5C(uint64_t a1, uint64_t a2)
{
  return sub_10000890C(a1, a2, (uint64_t)&unk_1002554E0, (uint64_t)"startMonitoringPreferencesChangeForClient(completion:)", 54, (uint64_t)&unk_100265490);
}

uint64_t sub_100156A7C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = swift_isaMask;
  v3[6] = *a1;
  v3[7] = v5;
  v6 = type metadata accessor for ClientSessionError.Category(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ClientSessionError(0);
  v3[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[12] = v9;
  v3[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100156B20, a1, 0);
}

uint64_t sub_100156B20()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_100156B64, 0, 0);
}

uint64_t sub_100156B64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SettingsProtocol.startMonitoringPreferencesChangeForClient()[1]);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_100155024;
    return dispatch thunk of SettingsProtocol.startMonitoringPreferencesChangeForClient()(v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 32))(0);
    v6 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100156C0C(uint64_t a1, int a2, void *a3)
{
  return sub_100009874(a1, a2, a3, (uint64_t)&unk_100255648, (uint64_t)sub_10003C58C, (void (*)(uint64_t, uint64_t))sub_100156A5C);
}

uint64_t sub_100156C28(char a1, uint64_t a2, uint64_t a3)
{
  return sub_100156C48(a1, a2, a3, (uint64_t)&unk_1002554B8, (uint64_t)"activeLocationSharingDevice(cached:completion:)", 47, (uint64_t)&unk_100265460);
}

uint64_t sub_100156C48(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v15;

  type metadata accessor for Transaction(0);
  v15 = swift_allocObject(a4, 48, 7);
  *(_QWORD *)(v15 + 16) = v7;
  *(_BYTE *)(v15 + 24) = a1;
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = a3;
  swift_retain(v7);
  swift_retain(a3);
  static Transaction.asyncTask(name:block:)(a5, a6, 2, a7, v15);
  return swift_release(v15);
}

uint64_t sub_100156CF8(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v4 + 40) = a3;
  *(_QWORD *)(v4 + 48) = a4;
  *(_BYTE *)(v4 + 168) = a2;
  *(_QWORD *)(v4 + 32) = a1;
  v6 = swift_isaMask;
  *(_QWORD *)(v4 + 56) = *a1;
  *(_QWORD *)(v4 + 64) = v6;
  v7 = type metadata accessor for ClientSessionError.Category(0);
  *(_QWORD *)(v4 + 72) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 80) = v8;
  *(_QWORD *)(v4 + 88) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientSessionError(0);
  *(_QWORD *)(v4 + 96) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 104) = v10;
  *(_QWORD *)(v4 + 112) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100156DA0, a1, 0);
}

uint64_t sub_100156DA0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 32) + 112);
  return swift_task_switch(sub_100156DE4, 0, 0);
}

uint64_t sub_100156DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, unint64_t, _QWORD);
  uint64_t v14;

  if (*(_QWORD *)(v0 + 120))
  {
    v1 = *(_QWORD *)(v0 + 56);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 64)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 64)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SettingsProtocol.allDevices(cached:)[1]);
    *(_QWORD *)(v0 + 128) = v4;
    *v4 = v0;
    v4[1] = sub_100156F78;
    return dispatch thunk of SettingsProtocol.allDevices(cached:)(*(unsigned __int8 *)(v0 + 168), v2, v3);
  }
  else
  {
    v6 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v7 = PropertyListEncoder.init()();
    *(_QWORD *)(v0 + 24) = 0;
    v8 = sub_100037A5C(&qword_100265468);
    v9 = sub_10015739C();
    v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 24, v8, v9);
    v12 = v11;
    v13 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 40);
    swift_bridgeObjectRelease(0);
    swift_release(v7);
    sub_10001A484(v10, v12);
    v13(v10, v12, 0);
    sub_100037AB4(v10, v12);
    sub_100037AB4(v10, v12);
    v14 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100156F78(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1001572B0;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v4 + 120));
    *(_QWORD *)(v4 + 144) = a1;
    v6 = sub_100156FF4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100156FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, unint64_t, _QWORD);
  uint64_t v13;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = PropertyListEncoder.init()();
  *(_QWORD *)(v0 + 24) = v1;
  v5 = sub_100037A5C(&qword_100265468);
  v6 = sub_10015739C();
  v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 24, v5, v6);
  if (v2)
  {
    swift_bridgeObjectRelease(v1);
    swift_release(v4);
    *(_QWORD *)(v0 + 152) = v2;
    return swift_task_switch(sub_100157130, *(_QWORD *)(v0 + 32), 0);
  }
  else
  {
    v10 = v7;
    v11 = v8;
    v12 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 40);
    swift_bridgeObjectRelease(v1);
    swift_release(v4);
    sub_10001A484(v10, v11);
    v12(v10, v11, 0);
    sub_100037AB4(v10, v11);
    sub_100037AB4(v10, v11);
    v13 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100157130()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[19];
  v0[2] = v1;
  v2 = v0[14];
  v3 = v0[12];
  swift_errorRetain(v1);
  v4 = sub_100037A5C(&qword_100265260);
  if (swift_dynamicCast(v2, v0 + 2, v4, v3, 6))
  {
    v5 = v0[19];
    (*(void (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[14], v0[12]);
    swift_errorRetain(v5);
    v6 = v0[19];
  }
  else
  {
    v7 = v0[11];
    v8 = v0[12];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[10] + 104))(v7, enum case for ClientSessionError.Category.settingsService(_:), v0[9]);
    v9 = sub_100004EA8(&qword_100263FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ClientSessionError, (uint64_t)&protocol conformance descriptor for ClientSessionError);
    v6 = swift_allocError(v8, v9, 0, 0);
    ClientSessionError.init(type:)(v7);
  }
  v0[20] = v6;
  return swift_task_switch(sub_100157234, 0, 0);
}

uint64_t sub_100157234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, unint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 40);
  swift_errorRetain(v1);
  v3(0, 0xF000000000000000, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  v4 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001572B0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[15]);
  v0[19] = v0[17];
  return swift_task_switch(sub_100157130, v0[4], 0);
}

uint64_t sub_1001572F4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  return sub_100155578(a1, a2, a3, a4, (uint64_t)&unk_100255620, (uint64_t)sub_100121048, (void (*)(uint64_t, uint64_t, uint64_t))sub_100156C28);
}

void sub_100157310()
{
  sub_100120B80();
}

uint64_t _s10TrampolineCMa_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100121050(a1, a2, a3, a4, (uint64_t)&_s10TrampolineCMn_1);
}

uint64_t sub_100157334()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD **)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_10026545C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1000087DC;
  return sub_100156CF8(v2, v3, v5, v4);
}

unint64_t sub_10015739C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100265470;
  if (!qword_100265470)
  {
    v1 = sub_10003C1FC(&qword_100265468);
    sub_100157418(&qword_100265478, &qword_1002607D8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100265470);
  }
  return result;
}

uint64_t sub_100157418(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10003C1FC(a2);
    sub_100004EA8(&qword_100265480, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100157494()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (_QWORD *)v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10026548C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003BF7C;
  return sub_100156A7C(v2, v3, v4);
}

uint64_t sub_1001574F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD **)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_10026549C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10003BF7C;
  return sub_1001566DC(v2, v3, v5, v4);
}

uint64_t sub_100157564()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD **)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_1002654AC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10003BF7C;
  return sub_100156220(v2, v3, v5, v4);
}

uint64_t sub_1001575D0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (_QWORD *)v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002654BC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003BF7C;
  return sub_100155D24(v2, v3, v4);
}

unint64_t sub_100157630()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002654D0;
  if (!qword_1002654D0)
  {
    v1 = sub_10003C1FC(&qword_1002654C8);
    sub_100004EA8(&qword_1002654D8, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceWithCompanion, (uint64_t)&protocol conformance descriptor for DeviceWithCompanion);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1002654D0);
  }
  return result;
}

uint64_t sub_1001576B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD **)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_1002654E4);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10003BF7C;
  return sub_100155620(v2, v3, v5, v4);
}

uint64_t sub_10015771C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD **)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_1002654FC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10003BF7C;
  return sub_100155210(v2, v3, v5, v4);
}

uint64_t sub_100157788()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD **)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_10026550C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10003BF7C;
  return sub_100154E88(v2, v3, v5, v4);
}

uint64_t sub_1001577F0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100157824()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (_QWORD *)v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_10026551C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_1001549C4(v2, v3, v4, v5, v6);
}

uint64_t sub_100157898()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001578BC(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_100156664(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_1001578F0(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;

  v33 = a1;
  v30 = a3;
  v34 = sub_100037A5C(&qword_100263340);
  v29 = *(_QWORD *)(v34 - 8);
  v5 = __chkstk_darwin(v34);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v28 - v8;
  v10 = *(_QWORD *)(a2 + 64);
  v31 = a2 + 64;
  v11 = 1 << *(_BYTE *)(a2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v32 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v14 = 0;
  if (!v13)
    goto LABEL_5;
LABEL_4:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    v20 = *(_QWORD *)(a2 + 48);
    v21 = type metadata accessor for Friend(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v9, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * i, v21);
    v22 = *(_QWORD *)(a2 + 56);
    v23 = type metadata accessor for FriendshipAction(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(&v9[*(int *)(v34 + 48)], v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * i, v23);
    sub_10000EF6C((uint64_t)v9, (uint64_t)v7, &qword_100263340);
    v24 = v33(v7);
    if (v3)
    {
      sub_1000087A0((uint64_t)v7, &qword_100263340);
      swift_release(a2);
      return;
    }
    if ((v24 & 1) != 0)
    {
      swift_release(a2);
      v25 = v30;
      sub_10000EF6C((uint64_t)v7, v30, &qword_100263340);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v25, 0, 1, v34);
      return;
    }
    sub_1000087A0((uint64_t)v7, &qword_100263340);
    if (v13)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v14 >= v32)
      goto LABEL_28;
    v18 = *(_QWORD *)(v31 + 8 * v14);
    if (!v18)
      break;
LABEL_17:
    v13 = (v18 - 1) & v18;
  }
  v19 = v14 + 1;
  if (v14 + 1 >= v32)
    goto LABEL_28;
  v18 = *(_QWORD *)(v31 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 2;
  if (v14 + 2 >= v32)
    goto LABEL_28;
  v18 = *(_QWORD *)(v31 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 3;
  if (v14 + 3 >= v32)
    goto LABEL_28;
  v18 = *(_QWORD *)(v31 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 4;
  if (v14 + 4 >= v32)
  {
LABEL_28:
    v27 = v29;
    v26 = v30;
    swift_release(a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, 1, 1, v34);
    return;
  }
  v18 = *(_QWORD *)(v31 + 8 * v19);
  if (v18)
  {
LABEL_16:
    v14 = v19;
    goto LABEL_17;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v32)
      goto LABEL_28;
    v18 = *(_QWORD *)(v31 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_17;
  }
LABEL_30:
  __break(1u);
}

_QWORD *sub_100157BF0(void (*a1)(_QWORD *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *, __n128);
  uint64_t v20;
  _QWORD v21[2];
  _QWORD *v22;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v18 = type metadata accessor for Friend(0);
  v6 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v22 = _swiftEmptyArrayStorage;
    sub_1000303C0(0, v9, 0);
    v10 = v22;
    v11 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v12 = *v11;
      v21[0] = *(v11 - 1);
      v21[1] = v12;
      v13 = swift_bridgeObjectRetain(v12);
      v19(v21, v13);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease(v12);
      v22 = v10;
      v15 = v10[2];
      v14 = v10[3];
      if (v15 >= v14 >> 1)
      {
        sub_1000303C0(v14 > 1, v15 + 1, 1);
        v10 = v22;
      }
      v11 += 2;
      v10[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v15, v8, v18);
      if (!--v9)
        return v10;
    }
    swift_release(v10);
    swift_bridgeObjectRelease(v12);
  }
  return v10;
}

uint64_t sub_100157D64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v33[2];
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;

  v42 = type metadata accessor for Friend(0);
  v37 = *(_QWORD *)(v42 - 8);
  v3 = __chkstk_darwin(v42);
  v41 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)v33 - v5;
  v6 = type metadata accessor for Handle(0);
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  __chkstk_darwin(v6);
  v43 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (!v8)
    return (uint64_t)v9;
  v33[1] = v1;
  v44 = _swiftEmptyArrayStorage;
  sub_100018EBC(0, v8, 0);
  result = sub_10016B4E0(a1);
  v12 = result;
  v13 = 0;
  v14 = a1 + 64;
  v15 = *(_BYTE *)(a1 + 32);
  v33[0] = a1 + 88;
  v34 = v8;
  v35 = v11;
  v36 = a1 + 64;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << v15)
  {
    v18 = (unint64_t)v12 >> 6;
    if ((*(_QWORD *)(v14 + 8 * ((unint64_t)v12 >> 6)) & (1 << v12)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v11)
      goto LABEL_28;
    v19 = a1;
    v20 = *(_QWORD *)(a1 + 48);
    v21 = v37;
    v22 = v40;
    v23 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v40, v20 + *(_QWORD *)(v37 + 72) * v12, v42);
    v24 = v41;
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(v41, v22, v23);
    Friend.handle.getter(v25);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v23);
    v9 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
    {
      sub_100018EBC(0, v9[2] + 1, 1);
      v9 = v44;
    }
    v27 = v9[2];
    v26 = v9[3];
    a1 = v19;
    if (v27 >= v26 >> 1)
    {
      sub_100018EBC(v26 > 1, v27 + 1, 1);
      v9 = v44;
    }
    v9[2] = v27 + 1;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v38 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v27, v43, v39);
    v44 = v9;
    v15 = *(_BYTE *)(v19 + 32);
    v16 = 1 << v15;
    if (v12 >= 1 << v15)
      goto LABEL_29;
    v14 = v36;
    v28 = *(_QWORD *)(v36 + 8 * v18);
    if ((v28 & (1 << v12)) == 0)
      goto LABEL_30;
    LODWORD(v11) = v35;
    if (*(_DWORD *)(v19 + 36) != (_DWORD)v35)
      goto LABEL_31;
    v29 = v28 & (-2 << (v12 & 0x3F));
    if (v29)
    {
      v16 = __clz(__rbit64(v29)) | v12 & 0xFFFFFFFFFFFFFFC0;
      v17 = v34;
    }
    else
    {
      v30 = v18 + 1;
      v31 = (v16 + 63) >> 6;
      v17 = v34;
      if (v18 + 1 < v31)
      {
        v32 = *(_QWORD *)(v36 + 8 * v30);
        if (!v32)
        {
          v30 = v18 + 2;
          if (v18 + 2 >= v31)
            goto LABEL_4;
          v32 = *(_QWORD *)(v36 + 8 * v30);
          if (!v32)
          {
            while (v31 - 3 != v18)
            {
              v32 = *(_QWORD *)(v33[0] + 8 * v18++);
              if (v32)
              {
                v30 = v18 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        v16 = __clz(__rbit64(v32)) + (v30 << 6);
      }
    }
LABEL_4:
    ++v13;
    v12 = v16;
    if (v13 == v17)
      return (uint64_t)v9;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1001580B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD v18[9];

  v4 = type metadata accessor for FriendInfoOption(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (Hasher.init(_seed:)(v18, *(_QWORD *)(a2 + 40)),
        v8 = type metadata accessor for HandleType(0),
        v9 = sub_100004EA8(&qword_100263710, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType), dispatch thunk of Hashable.hash(into:)(v18, v8, v9), v10 = Hasher._finalize()(), v11 = -1 << *(_BYTE *)(a2 + 32), v12 = v10 & ~v11, ((*(_QWORD *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0))
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_100038AA4(*(_QWORD *)(a2 + 48) + v14 * v12, (uint64_t)v7);
      v15 = static HandleType.== infix(_:_:)(v7, a1);
      sub_100039674((uint64_t)v7);
      if ((v15 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_100158208(void *a1, uint64_t a2)
{
  id v4;
  char v5;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  id v16;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v4 = a1;
    v5 = __CocoaSet.contains(_:)();

    return v5 & 1;
  }
  if (!*(_QWORD *)(a2 + 16)
    || (v7 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40)),
        v8 = -1 << *(_BYTE *)(a2 + 32),
        v9 = v7 & ~v8,
        v10 = a2 + 56,
        ((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0))
  {
LABEL_11:
    v13 = 0;
    return v13 & 1;
  }
  sub_10011D800();
  v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v9);
  v12 = static NSObject.== infix(_:_:)(v11, a1);

  if ((v12 & 1) == 0)
  {
    v14 = ~v8;
    v15 = (v9 + 1) & v14;
    if (((*(_QWORD *)(v10 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      do
      {
        v16 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v15);
        v13 = static NSObject.== infix(_:_:)(v16, a1);

        if ((v13 & 1) != 0)
          break;
        v15 = (v15 + 1) & v14;
      }
      while (((*(_QWORD *)(v10 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
      return v13 & 1;
    }
    goto LABEL_11;
  }
  v13 = 1;
  return v13 & 1;
}

uint64_t sub_100158354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 56));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager readFromLocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100158540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 72));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager readFromLocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_10015872C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = v0[102];
  v2 = v0[85];
  v3 = swift_task_alloc(32);
  v0[104] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[105] = v4;
  v5 = sub_100037A5C(&qword_100260908);
  v0[106] = v5;
  *v4 = v0;
  v4[1] = sub_1001587E8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 79, 0, 0, 0x2873646E65697266, 0xEC000000293A666FLL, sub_10016CEF4, v3, v5);
}

uint64_t sub_1001587E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 840);
  *(_QWORD *)(*v1 + 856) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100159260;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 832));
    v4 = sub_100158854;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100158854()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[86];
  v0[108] = v0[79];
  return swift_task_switch(sub_100158870, v1, 0);
}

uint64_t sub_100158870()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void (*v3)(_QWORD, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t result;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  void (*v109)(_QWORD, _QWORD, _QWORD);
  void (*v110)(uint64_t, _QWORD, uint64_t);
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, unint64_t, uint64_t);
  void (*v115)(uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118[2];

  v1 = *(unsigned __int8 *)(v0 + 912);
  *(_QWORD *)(v0 + 624) = *(_QWORD *)(v0 + 864);
  if (v1 != 1)
  {
    if (qword_10025F928 == -1)
    {
LABEL_6:
      v14 = *(_QWORD *)(v0 + 680);
      v15 = type metadata accessor for Logger(0);
      sub_100037A9C(v15, (uint64_t)qword_10027ACA0);
      v16 = swift_bridgeObjectRetain_n(v14, 2);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v117 = *(_QWORD *)(v0 + 816);
        v19 = *(_QWORD *)(v0 + 680);
        v20 = (uint8_t *)swift_slowAlloc(12, -1);
        v21 = swift_slowAlloc(32, -1);
        v118[0] = v21;
        *(_DWORD *)v20 = 136446210;
        v22 = swift_bridgeObjectRetain(v19);
        v23 = Array.description.getter(v22);
        v25 = v24;
        swift_bridgeObjectRelease(v19);
        *(_QWORD *)(v0 + 640) = sub_10002BA84(v23, v25, v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648, v20 + 4, v20 + 12);
        swift_bridgeObjectRelease(v25);
        swift_bridgeObjectRelease_n(v19, 2);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "DataManager load friends not checking expiry with types %{public}s", v20, 0xCu);
        swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1, -1);
        swift_slowDealloc(v20, -1, -1);
        swift_release(v117);
      }
      else
      {
        v26 = *(_QWORD *)(v0 + 680);
        swift_release(*(_QWORD *)(v0 + 816));
        swift_bridgeObjectRelease_n(v26, 2);
      }

LABEL_42:
      v93 = *(_QWORD *)(v0 + 624);
      v94 = *(_QWORD *)(v0 + 776);
      v95 = *(_QWORD *)(v0 + 768);
      v96 = *(_QWORD *)(v0 + 760);
      v97 = *(_QWORD *)(v0 + 752);
      v98 = *(_QWORD *)(v0 + 744);
      v99 = *(_QWORD *)(v0 + 720);
      swift_task_dealloc(*(_QWORD *)(v0 + 784));
      swift_task_dealloc(v94);
      swift_task_dealloc(v95);
      swift_task_dealloc(v96);
      swift_task_dealloc(v97);
      swift_task_dealloc(v98);
      swift_task_dealloc(v99);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v93);
    }
LABEL_51:
    swift_once(&qword_10025F928, sub_1000DF67C);
    goto LABEL_6;
  }
  v2 = *(_QWORD *)(v0 + 680);
  v3 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 736) + 104);
  v3(*(_QWORD *)(v0 + 784), enum case for HandleType.follower(_:), *(_QWORD *)(v0 + 728));
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v0 + 864);
  v116 = v4;
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 784);
    v7 = *(_QWORD *)(v0 + 776);
    v8 = *(_QWORD *)(v0 + 736);
    v9 = *(_QWORD *)(v0 + 728);
    v10 = *(_QWORD *)(v0 + 680);
    v111 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v114 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
    v114(v7, v10 + v111, v9);
    v11 = sub_100004EA8(&qword_100263888, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v10);
    v12 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v6, v9, v11);
    v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v13(v7, v9);
    if ((v12 & 1) != 0)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680));
LABEL_31:
      v65 = *(_QWORD *)(v0 + 784);
      v66 = *(_QWORD *)(v0 + 728);
      goto LABEL_32;
    }
    if (v116 != 1)
    {
      v109 = v3;
      v28 = v13;
      v29 = *(_QWORD *)(*(_QWORD *)(v0 + 736) + 72);
      v30 = v10 + v29 + v111;
      v31 = 1;
      while (1)
      {
        v114(*(_QWORD *)(v0 + 776), v30, *(_QWORD *)(v0 + 728));
        v32 = v31 + 1;
        if (__OFADD__(v31, 1))
          break;
        v33 = *(_QWORD *)(v0 + 776);
        v34 = *(_QWORD *)(v0 + 728);
        v35 = dispatch thunk of static Equatable.== infix(_:_:)(v33, *(_QWORD *)(v0 + 784), v34, v11);
        v28(v33, v34);
        if ((v35 & 1) != 0)
        {
          swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680));
          v13 = v28;
          goto LABEL_31;
        }
        ++v31;
        v30 += v29;
        if (v32 == v116)
        {
          swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680));
          v13 = v28;
          v3 = v109;
          goto LABEL_18;
        }
      }
      __break(1u);
      goto LABEL_50;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680));
  }
  else
  {
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 736) + 8);
    v27 = swift_bridgeObjectRetain(v5);
  }
LABEL_18:
  v36 = *(_QWORD *)(v0 + 768);
  v37 = *(_QWORD *)(v0 + 728);
  ((void (*)(_QWORD, uint64_t, __n128))v13)(*(_QWORD *)(v0 + 784), v37, v27);
  v3(v36, enum case for HandleType.pendingOffer(_:), v37);
  v38 = *(_QWORD *)(v0 + 768);
  if (!v116)
  {
    v48 = *(_QWORD *)(v0 + 752);
    v49 = *(_QWORD *)(v0 + 728);
    v13(v38, v49);
    v3(v48, enum case for HandleType.following(_:), v49);
LABEL_22:
    v50 = *(_QWORD *)(v0 + 864);
    v13(*(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 728));
LABEL_36:
    v75 = v0 + 592;
    swift_bridgeObjectRelease(v50);
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v76 = *(_QWORD *)(v0 + 680);
    v77 = type metadata accessor for Logger(0);
    sub_100037A9C(v77, (uint64_t)qword_10027ACA0);
    v78 = *(_QWORD *)(v0 + 624);
    swift_bridgeObjectRetain_n(v76, 2);
    v79 = swift_bridgeObjectRetain_n(v78, 2);
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.default.getter();
    v82 = os_log_type_enabled(v80, v81);
    v83 = *(_QWORD *)(v0 + 816);
    v84 = *(_QWORD *)(v0 + 680);
    if (v82)
    {
      v113 = *(_QWORD *)(v0 + 816);
      v85 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(32, -1);
      v118[0] = v86;
      *(_DWORD *)v85 = 136446466;
      v87 = swift_bridgeObjectRetain(v84);
      v88 = Array.description.getter(v87);
      v90 = v89;
      swift_bridgeObjectRelease(v84);
      *(_QWORD *)(v0 + 656) = sub_10002BA84(v88, v90, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v0 + 664, v85 + 4, v85 + 12);
      swift_bridgeObjectRelease(v90);
      swift_bridgeObjectRelease_n(v84, 2);
      *(_WORD *)(v85 + 12) = 2048;
      v91 = *(_QWORD *)(v78 + 16);
      swift_bridgeObjectRelease(v78);
      *(_QWORD *)(v0 + 664) = v91;
      v75 = v0 + 592;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 664, v0 + 672, v85 + 14, v85 + 22);
      swift_bridgeObjectRelease(v78);
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "DataManager load LocalStorage friends with types %{public}s count:%ld", (uint8_t *)v85, 0x16u);
      swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v85, -1, -1);
      v92 = v113;
    }
    else
    {
      swift_bridgeObjectRelease_n(v78, 2);
      swift_bridgeObjectRelease_n(v84, 2);
      v92 = v83;
    }
    swift_release(v92);

    swift_beginAccess(v0 + 624, v75, 0, 0);
    goto LABEL_42;
  }
  v39 = *(_QWORD *)(v0 + 760);
  v40 = *(_QWORD *)(v0 + 736);
  v41 = *(_QWORD *)(v0 + 728);
  v42 = *(_QWORD *)(v0 + 680);
  v107 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  v110 = v3;
  v112 = v42 + v107;
  v115 = *(void (**)(uint64_t))(v40 + 16);
  v115(v39);
  v43 = sub_100004EA8(&qword_100263888, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
  v108 = v42;
  swift_bridgeObjectRetain(v42);
  v44 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v38, v41, v43);
  v45 = v13;
  v13(v39, v41);
  if ((v44 & 1) != 0)
  {
LABEL_20:
    v46 = *(_QWORD *)(v0 + 768);
    v47 = *(_QWORD *)(v0 + 728);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680));
    v45(v46, v47);
LABEL_33:
    v67 = *(_QWORD *)(v0 + 864);
    v68 = *(_QWORD *)(v0 + 720);
    v69 = *(_QWORD *)(v0 + 696);
    static Date.trustedNow.getter(v68);
    v70 = swift_task_alloc(32);
    *(_QWORD *)(v70 + 16) = v68;
    *(_QWORD *)(v70 + 24) = v69;
    swift_bridgeObjectRetain(v67);
    v71 = sub_100021D18((uint64_t (*)(_QWORD))sub_100021F58, v70, v67);
    swift_task_dealloc(v70);
    v72 = *(_QWORD *)(v71 + 16);
    swift_bridgeObjectRelease(v71);
    if (v72)
    {
      v73 = (_QWORD *)swift_task_alloc(dword_100262DBC);
      *(_QWORD *)(v0 + 872) = v73;
      *v73 = v0;
      v73[1] = sub_1001594E4;
      return sub_1000E3CBC(v0 + 16);
    }
    v50 = *(_QWORD *)(v0 + 864);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 8))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 704));
    goto LABEL_36;
  }
  if (v116 != 1)
  {
    v51 = *(_QWORD *)(*(_QWORD *)(v0 + 736) + 72);
    v52 = v108 + v51 + v107;
    v53 = 1;
    while (1)
    {
      ((void (*)(_QWORD, unint64_t, _QWORD))v115)(*(_QWORD *)(v0 + 760), v52, *(_QWORD *)(v0 + 728));
      v54 = v53 + 1;
      if (__OFADD__(v53, 1))
        break;
      v55 = *(_QWORD *)(v0 + 760);
      v56 = *(_QWORD *)(v0 + 728);
      v57 = dispatch thunk of static Equatable.== infix(_:_:)(v55, *(_QWORD *)(v0 + 768), v56, v43);
      v45(v55, v56);
      if ((v57 & 1) != 0)
        goto LABEL_20;
      ++v53;
      v52 += v51;
      if (v54 == v116)
        goto LABEL_28;
    }
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
LABEL_28:
  v58 = *(_QWORD *)(v0 + 768);
  v59 = *(_QWORD *)(v0 + 752);
  v60 = *(_QWORD *)(v0 + 744);
  v61 = *(_QWORD *)(v0 + 728);
  v62 = *(_QWORD *)(v0 + 680);
  swift_bridgeObjectRelease(v62);
  v13 = v45;
  v45(v58, v61);
  v110(v59, enum case for HandleType.following(_:), v61);
  ((void (*)(uint64_t, uint64_t, uint64_t))v115)(v60, v112, v61);
  swift_bridgeObjectRetain(v62);
  LOBYTE(v58) = dispatch thunk of static Equatable.== infix(_:_:)(v60, v59, v61, v43);
  v45(v60, v61);
  if ((v58 & 1) != 0)
  {
LABEL_29:
    v63 = *(_QWORD *)(v0 + 752);
    v64 = *(_QWORD *)(v0 + 728);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680));
    v65 = v63;
    v66 = v64;
LABEL_32:
    v13(v65, v66);
    goto LABEL_33;
  }
  if (v116 == 1)
  {
LABEL_48:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680));
    goto LABEL_22;
  }
  v100 = *(_QWORD *)(*(_QWORD *)(v0 + 736) + 72);
  v101 = v108 + v100 + v107;
  v102 = 1;
  while (1)
  {
    result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v115)(*(_QWORD *)(v0 + 744), v101, *(_QWORD *)(v0 + 728));
    v103 = v102 + 1;
    if (__OFADD__(v102, 1))
      break;
    v104 = *(_QWORD *)(v0 + 744);
    v105 = *(_QWORD *)(v0 + 728);
    v106 = dispatch thunk of static Equatable.== infix(_:_:)(v104, *(_QWORD *)(v0 + 752), v105, v43);
    v13(v104, v105);
    if ((v106 & 1) != 0)
      goto LABEL_29;
    ++v102;
    v101 += v100;
    if (v103 == v116)
      goto LABEL_48;
  }
  __break(1u);
  return result;
}

uint64_t sub_100159260()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 688);
  swift_task_dealloc(*(_QWORD *)(v0 + 832));
  return swift_task_switch(sub_1001592A0, v1, 0);
}

uint64_t sub_1001592A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  swift_release(*(_QWORD *)(v0 + 816));
  v1 = *(_QWORD *)(v0 + 856);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v19 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 648) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 648, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 616) = sub_10002BA84(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager readFromLocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 752);
  v16 = *(_QWORD *)(v0 + 744);
  v17 = *(_QWORD *)(v0 + 720);
  swift_task_dealloc(*(_QWORD *)(v0 + 784));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_1001594E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)v0 + 16;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 688);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 872));
  sub_10005EC64(v1);
  return swift_task_switch(sub_100159548, v2, 0);
}

uint64_t sub_100159548()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[108];
  (*(void (**)(_QWORD, _QWORD))(v0[89] + 8))(v0[90], v0[88]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[78]);
  return swift_task_switch(sub_1001595A4, 0, 0);
}

uint64_t sub_1001595A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[102];
  v2 = v0[85];
  v3 = swift_task_alloc(32);
  v0[110] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[111] = v4;
  *v4 = v0;
  v4[1] = sub_100159650;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 84, 0, 0, 0x2873646E65697266, 0xEC000000293A666FLL, sub_10016CFB8, v3, v0[106]);
}

uint64_t sub_100159650()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 888);
  *(_QWORD *)(*v1 + 896) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100159998;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 880));
    v4 = sub_1001596BC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001596BC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[86];
  v0[113] = v0[84];
  return swift_task_switch(sub_1001596D8, v1, 0);
}

uint64_t sub_1001596D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0 + 624;
  *(_QWORD *)(v0 + 624) = *(_QWORD *)(v0 + 904);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = *(_QWORD *)(v0 + 680);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027ACA0);
  v4 = *(_QWORD *)(v0 + 624);
  swift_bridgeObjectRetain_n(v2, 2);
  v5 = swift_bridgeObjectRetain_n(v4, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 816);
  if (v8)
  {
    v29 = *(_QWORD *)(v0 + 816);
    v10 = *(_QWORD *)(v0 + 680);
    v11 = swift_slowAlloc(22, -1);
    v28 = swift_slowAlloc(32, -1);
    v30 = v28;
    *(_DWORD *)v11 = 136446466;
    v12 = swift_bridgeObjectRetain(v10);
    v13 = Array.description.getter(v12);
    v15 = v14;
    swift_bridgeObjectRelease(v10);
    *(_QWORD *)(v0 + 656) = sub_10002BA84(v13, v15, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v0 + 664, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v10, 2);
    *(_WORD *)(v11 + 12) = 2048;
    v16 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v0 + 664) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 664, v0 + 672, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "DataManager load LocalStorage friends with types %{public}s count:%ld", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    v17 = v11;
    v1 = v0 + 624;
    swift_slowDealloc(v17, -1, -1);
    v18 = v29;
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 680);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease_n(v19, 2);
    v18 = v9;
  }
  swift_release(v18);

  swift_beginAccess(v1, v0 + 592, 0, 0);
  v20 = *(_QWORD *)(v0 + 624);
  v21 = *(_QWORD *)(v0 + 776);
  v22 = *(_QWORD *)(v0 + 768);
  v23 = *(_QWORD *)(v0 + 760);
  v24 = *(_QWORD *)(v0 + 752);
  v25 = *(_QWORD *)(v0 + 744);
  v26 = *(_QWORD *)(v0 + 720);
  swift_task_dealloc(*(_QWORD *)(v0 + 784));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v20);
}

uint64_t sub_100159998()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 688);
  swift_task_dealloc(*(_QWORD *)(v0 + 880));
  return swift_task_switch(sub_1001599D8, v1, 0);
}

uint64_t sub_1001599D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  swift_release(*(_QWORD *)(v0 + 816));
  v1 = *(_QWORD *)(v0 + 896);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v19 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 648) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 648, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 616) = sub_10002BA84(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager readFromLocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 752);
  v16 = *(_QWORD *)(v0 + 744);
  v17 = *(_QWORD *)(v0 + 720);
  swift_task_dealloc(*(_QWORD *)(v0 + 784));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100159C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  swift_release(*(_QWORD *)(v0 + 800));
  v1 = *(_QWORD *)(v0 + 824);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v19 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 648) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 648, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 616) = sub_10002BA84(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager readFromLocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 752);
  v16 = *(_QWORD *)(v0 + 744);
  v17 = *(_QWORD *)(v0 + 720);
  swift_task_dealloc(*(_QWORD *)(v0 + 784));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100159E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v4[79] = v3;
  v4[78] = a3;
  v4[77] = a2;
  v4[76] = a1;
  v4[80] = *v3;
  v5 = type metadata accessor for Date(0);
  v4[81] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[82] = v6;
  v4[83] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HandleType(0);
  v4[84] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[85] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[86] = swift_task_alloc(v9);
  v4[87] = swift_task_alloc(v9);
  v4[88] = swift_task_alloc(v9);
  v10 = type metadata accessor for Friend(0);
  v4[89] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[90] = v11;
  v4[91] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260950) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[92] = swift_task_alloc(v12);
  v4[93] = swift_task_alloc(v12);
  v4[94] = swift_task_alloc(v12);
  v13 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v4[95] = v13;
  *v13 = v4;
  v13[1] = sub_100159F8C;
  return daemon.getter();
}

uint64_t sub_100159F8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 760);
  v5 = *v1;
  *(_QWORD *)(*v1 + 768) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 776) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  *v6 = v5;
  v6[1] = sub_10015A074;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10015A074(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[97];
  v5 = *v2;
  v5[98] = a1;
  v5[99] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10015A950, v5[79], 0);
  swift_release(v5[96]);
  v7 = (uint64_t **)swift_task_alloc(dword_1002609EC);
  v5[100] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_10015A12C;
  return sub_100058B50(v5[94], v5[77], v5[78]);
}

uint64_t sub_10015A12C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 800);
  *(_QWORD *)(*v1 + 808) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10015ABB8;
  else
    v4 = sub_10015A190;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 632), 0);
}

uint64_t sub_10015A190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t);
  char v15;
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = *(_QWORD *)(v0 + 744);
  v2 = *(_QWORD *)(v0 + 720);
  v3 = *(_QWORD *)(v0 + 712);
  sub_10000E37C(*(_QWORD *)(v0 + 752), v1, &qword_100260950);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) != 1)
  {
    v9 = *(_QWORD *)(v0 + 704);
    v10 = *(_QWORD *)(v0 + 696);
    v11 = *(_QWORD **)(v0 + 680);
    v12 = *(_QWORD *)(v0 + 672);
    v13 = *(_QWORD *)(v0 + 624);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 720) + 32))(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 744), *(_QWORD *)(v0 + 712));
    v14 = (void (*)(uint64_t, _QWORD, uint64_t))v11[13];
    v14(v9, enum case for HandleType.follower(_:), v12);
    v15 = static HandleType.== infix(_:_:)(v13, v9);
    v16 = (void (*)(uint64_t, uint64_t))v11[1];
    v16(v9, v12);
    v17 = (void (*)(uint64_t, uint64_t, uint64_t))v11[2];
    v17(v10, v13, v12);
    if ((v15 & 1) != 0)
    {
      v18 = *(_QWORD *)(v0 + 688);
      v19 = *(_QWORD *)(v0 + 672);
      v20 = *(_QWORD *)(v0 + 624);
      v16(*(_QWORD *)(v0 + 696), v19);
      v17(v18, v20, v19);
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 704);
      v22 = *(_QWORD *)(v0 + 696);
      v23 = *(_QWORD *)(v0 + 688);
      v24 = *(_QWORD *)(v0 + 672);
      v25 = *(_QWORD *)(v0 + 624);
      v14(v21, enum case for HandleType.pendingOffer(_:), v24);
      v26 = static HandleType.== infix(_:_:)(v22, v21);
      v16(v21, v24);
      v16(v22, v24);
      v17(v23, v25, v24);
      if ((v26 & 1) == 0)
      {
        v47 = *(_QWORD *)(v0 + 704);
        v48 = *(_QWORD *)(v0 + 688);
        v49 = *(_QWORD *)(v0 + 672);
        v14(v47, enum case for HandleType.following(_:), v49);
        v50 = static HandleType.== infix(_:_:)(v48, v47);
        v16(v47, v49);
        v16(v48, v49);
        if ((v50 & 1) == 0)
        {
LABEL_12:
          v51 = *(_QWORD *)(v0 + 784);
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 720) + 8))(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 712));
          swift_release(v51);
          v7 = *(_QWORD *)(v0 + 752);
          v8 = *(_QWORD *)(v0 + 608);
          goto LABEL_13;
        }
LABEL_7:
        v27 = *(_QWORD *)(v0 + 728);
        v28 = *(_QWORD *)(v0 + 720);
        v29 = *(_QWORD *)(v0 + 712);
        v30 = *(_QWORD *)(v0 + 664);
        v31 = *(_QWORD *)(v0 + 640);
        v32 = sub_100037A5C(&qword_100265580);
        v33 = *(_QWORD *)(v28 + 72);
        LODWORD(v34) = *(_DWORD *)(v28 + 80);
        *(_DWORD *)(v0 + 856) = v34;
        v34 = v34;
        v35 = (v34 + 32) & ~v34;
        v36 = swift_allocObject(v32, v35 + v33, v34 | 7);
        *(_QWORD *)(v0 + 816) = v36;
        *(_OWORD *)(v36 + 16) = xmmword_1001F35F0;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v36 + v35, v27, v29);
        static Date.trustedNow.getter(v30);
        v37 = swift_task_alloc(32);
        *(_QWORD *)(v37 + 16) = v30;
        *(_QWORD *)(v37 + 24) = v31;
        swift_bridgeObjectRetain(v36);
        v38 = sub_100021D18((uint64_t (*)(_QWORD))sub_10016CFA0, v37, v36);
        swift_task_dealloc(v37);
        v39 = *(_QWORD *)(v38 + 16);
        *(_QWORD *)(v0 + 824) = v39;
        swift_bridgeObjectRelease(v38);
        if (v39)
        {
          v40 = (_QWORD *)swift_task_alloc(dword_100262DBC);
          *(_QWORD *)(v0 + 832) = v40;
          *v40 = v0;
          v40[1] = sub_10015A610;
          return sub_1000E3CBC(v0 + 16);
        }
        v42 = *(_QWORD *)(v0 + 824);
        v43 = *(_QWORD *)(v0 + 816);
        v44 = *(_QWORD *)(v0 + 712);
        v45 = v43 + ((*(unsigned __int8 *)(v0 + 856) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 856));
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 656) + 8))(*(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 648));
        swift_setDeallocating(v43);
        swift_arrayDestroy(v45, *(_QWORD *)(v43 + 16), v44);
        swift_deallocClassInstance(v43, 32, 7);
        if (v42)
        {
          v46 = (_QWORD *)swift_task_alloc(dword_1002609EC);
          *(_QWORD *)(v0 + 840) = v46;
          *v46 = v0;
          v46[1] = sub_10015A7F0;
          return sub_100058B50(*(_QWORD *)(v0 + 736), *(_QWORD *)(v0 + 616), *(_QWORD *)(v0 + 624));
        }
        goto LABEL_12;
      }
    }
    v16(*(_QWORD *)(v0 + 688), *(_QWORD *)(v0 + 672));
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(v0 + 752);
  v5 = *(_QWORD *)(v0 + 744);
  v6 = *(_QWORD *)(v0 + 608);
  swift_release(*(_QWORD *)(v0 + 784));
  sub_1000087A0(v5, &qword_100260950);
  v7 = v4;
  v8 = v6;
LABEL_13:
  sub_10000EF6C(v7, v8, &qword_100260950);
  v52 = *(_QWORD *)(v0 + 744);
  v53 = *(_QWORD *)(v0 + 736);
  v54 = *(_QWORD *)(v0 + 728);
  v55 = *(_QWORD *)(v0 + 704);
  v56 = *(_QWORD *)(v0 + 696);
  v57 = *(_QWORD *)(v0 + 688);
  v58 = *(_QWORD *)(v0 + 664);
  swift_task_dealloc(*(_QWORD *)(v0 + 752));
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015A610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)v0 + 16;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 632);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 832));
  sub_10005EC64(v1);
  return swift_task_switch(sub_10015A674, v2, 0);
}

uint64_t sub_10015A674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 824);
  v2 = *(_QWORD *)(v0 + 816);
  v3 = *(_QWORD *)(v0 + 712);
  v4 = v2 + ((*(unsigned __int8 *)(v0 + 856) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 856));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 656) + 8))(*(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 648));
  swift_setDeallocating(v2);
  swift_arrayDestroy(v4, *(_QWORD *)(v2 + 16), v3);
  swift_deallocClassInstance(v2, 32, 7);
  if (v1)
  {
    v5 = (_QWORD *)swift_task_alloc(dword_1002609EC);
    *(_QWORD *)(v0 + 840) = v5;
    *v5 = v0;
    v5[1] = sub_10015A7F0;
    return sub_100058B50(*(_QWORD *)(v0 + 736), *(_QWORD *)(v0 + 616), *(_QWORD *)(v0 + 624));
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 784);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 720) + 8))(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 712));
    swift_release(v7);
    sub_10000EF6C(*(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 608), &qword_100260950);
    v8 = *(_QWORD *)(v0 + 744);
    v9 = *(_QWORD *)(v0 + 736);
    v10 = *(_QWORD *)(v0 + 728);
    v11 = *(_QWORD *)(v0 + 704);
    v12 = *(_QWORD *)(v0 + 696);
    v13 = *(_QWORD *)(v0 + 688);
    v14 = *(_QWORD *)(v0 + 664);
    swift_task_dealloc(*(_QWORD *)(v0 + 752));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10015A7F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 840);
  *(_QWORD *)(*v1 + 848) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10015AE20;
  else
    v4 = sub_10015A854;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 632), 0);
}

uint64_t sub_10015A854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 752);
  v2 = *(_QWORD *)(v0 + 736);
  v3 = *(_QWORD *)(v0 + 728);
  v4 = *(_QWORD *)(v0 + 720);
  v5 = *(_QWORD *)(v0 + 712);
  swift_release(*(_QWORD *)(v0 + 784));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_1000087A0(v1, &qword_100260950);
  sub_10000EF6C(v2, v1, &qword_100260950);
  sub_10000EF6C(*(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 608), &qword_100260950);
  v6 = *(_QWORD *)(v0 + 744);
  v7 = *(_QWORD *)(v0 + 736);
  v8 = *(_QWORD *)(v0 + 728);
  v9 = *(_QWORD *)(v0 + 704);
  v10 = *(_QWORD *)(v0 + 696);
  v11 = *(_QWORD *)(v0 + 688);
  v12 = *(_QWORD *)(v0 + 664);
  swift_task_dealloc(*(_QWORD *)(v0 + 752));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015A950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  swift_release(*(_QWORD *)(v0 + 768));
  v1 = *(_QWORD *)(v0 + 792);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v20 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 592) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 592, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 600) = sub_10002BA84(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v0 + 608, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager readFromLocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 720) + 56))(*(_QWORD *)(v0 + 608), 1, 1, *(_QWORD *)(v0 + 712));
  v12 = *(_QWORD *)(v0 + 744);
  v13 = *(_QWORD *)(v0 + 736);
  v14 = *(_QWORD *)(v0 + 728);
  v15 = *(_QWORD *)(v0 + 704);
  v16 = *(_QWORD *)(v0 + 696);
  v17 = *(_QWORD *)(v0 + 688);
  v18 = *(_QWORD *)(v0 + 664);
  swift_task_dealloc(*(_QWORD *)(v0 + 752));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015ABB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  swift_release(*(_QWORD *)(v0 + 784));
  v1 = *(_QWORD *)(v0 + 808);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v20 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 592) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 592, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 600) = sub_10002BA84(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v0 + 608, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager readFromLocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 720) + 56))(*(_QWORD *)(v0 + 608), 1, 1, *(_QWORD *)(v0 + 712));
  v12 = *(_QWORD *)(v0 + 744);
  v13 = *(_QWORD *)(v0 + 736);
  v14 = *(_QWORD *)(v0 + 728);
  v15 = *(_QWORD *)(v0 + 704);
  v16 = *(_QWORD *)(v0 + 696);
  v17 = *(_QWORD *)(v0 + 688);
  v18 = *(_QWORD *)(v0 + 664);
  swift_task_dealloc(*(_QWORD *)(v0 + 752));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015AE20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 752);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 720);
  v4 = *(_QWORD *)(v0 + 712);
  swift_release(*(_QWORD *)(v0 + 784));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1000087A0(v1, &qword_100260950);
  v5 = *(_QWORD *)(v0 + 848);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v5);
  v7 = swift_errorRetain(v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v24 = v11;
    *(_DWORD *)v10 = 136446210;
    *(_QWORD *)(v0 + 592) = v5;
    swift_errorRetain(v5);
    v12 = sub_100037A5C(&qword_100265260);
    v13 = String.init<A>(describing:)(v0 + 592, v12);
    v15 = v14;
    *(_QWORD *)(v0 + 600) = sub_10002BA84(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v0 + 608, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "DataManager readFromLocalStorage failed with error: %{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 720) + 56))(*(_QWORD *)(v0 + 608), 1, 1, *(_QWORD *)(v0 + 712));
  v16 = *(_QWORD *)(v0 + 744);
  v17 = *(_QWORD *)(v0 + 736);
  v18 = *(_QWORD *)(v0 + 728);
  v19 = *(_QWORD *)(v0 + 704);
  v20 = *(_QWORD *)(v0 + 696);
  v21 = *(_QWORD *)(v0 + 688);
  v22 = *(_QWORD *)(v0 + 664);
  swift_task_dealloc(*(_QWORD *)(v0 + 752));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015B0B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2[19] = a1;
  v2[20] = v1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100262930) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[21] = swift_task_alloc(v3);
  v2[22] = swift_task_alloc(v3);
  v2[23] = swift_task_alloc(v3);
  v2[24] = swift_task_alloc(v3);
  v4 = type metadata accessor for Handle(0);
  v2[25] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[26] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[27] = swift_task_alloc(v6);
  v2[28] = swift_task_alloc(v6);
  v2[29] = swift_task_alloc(v6);
  v7 = type metadata accessor for HandleType(0);
  v2[30] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[31] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[32] = swift_task_alloc(v9);
  v2[33] = swift_task_alloc(v9);
  v10 = type metadata accessor for FriendshipAction(0);
  v2[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[35] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[36] = swift_task_alloc(v12);
  v2[37] = swift_task_alloc(v12);
  v13 = type metadata accessor for Friend(0);
  v2[38] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[39] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[40] = swift_task_alloc(v15);
  v2[41] = swift_task_alloc(v15);
  v2[42] = swift_task_alloc(v15);
  v2[43] = swift_task_alloc(v15);
  v2[44] = swift_task_alloc(v15);
  v16 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100263338) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[45] = swift_task_alloc(v16);
  v2[46] = swift_task_alloc(v16);
  return swift_task_switch(sub_10015B280, v1, 0);
}

uint64_t sub_10015B280()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v0[47] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[18] = sub_10002BA84(0xD000000000000034, 0x8000000100200900, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s start updateFriends", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[48] = v7;
  *v7 = v0;
  v7[1] = sub_10015B41C;
  return daemon.getter();
}

uint64_t sub_10015B41C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10015B47C, v3, 0);
}

void sub_10015B47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  char v58;
  void (*v59)(_QWORD, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  void (*v114)(uint64_t, _QWORD);
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  _BOOL4 v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSString v141;
  unsigned int (*v142)(uint64_t, uint64_t, uint64_t);
  Class isa;
  uint64_t v144;
  uint64_t v145;
  Class v146;
  void *v147;
  id v148;
  NSString v149;
  id v150;
  void (*v151)(uint64_t, uint64_t);
  void (*v152)(uint64_t, uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  id v165;
  NSObject *v166;
  os_log_type_t v167;
  _BOOL4 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  uint8_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  os_log_type_t type;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  os_log_type_t v216[8];
  os_log_type_t v217[8];
  os_log_type_t v218;
  uint64_t v219;
  uint64_t v220;
  NSObject *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  void (*v237)(uint64_t, uint64_t);
  uint64_t v238;
  void (*v239)(uint64_t, uint64_t);
  void (*v240)(uint64_t, uint64_t);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258[4];

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = type metadata accessor for Daemon(0);
  v4 = sub_100004EA8(&qword_100265538, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v5 = ActorDaemon.bundleIdentifier.getter(v3, v4);
  v7 = v6;
  v8 = swift_release(v1);
  v9 = (id)BiomeLibrary(v8);
  v10 = objc_msgSend(v9, "FindMy");
  swift_unknownObjectRelease(v9);
  v11 = objc_msgSend(v10, "ContactActivity");
  swift_unknownObjectRelease(v10);
  v12 = objc_msgSend(v11, "source");
  swift_bridgeObjectRetain(v2);
  v14 = sub_10016767C(v13);
  swift_bridgeObjectRelease(v2);
  v258[0] = (uint64_t)v14;
  sub_10016854C(v258);
  v15 = v258[0];
  v236 = v7;
  v211 = v0 + 40;
  v212 = v0 + 32;
  v214 = v0 + 24;
  v215 = v0 + 48;
  v203 = v0 + 64;
  v204 = v0 + 56;
  v201 = v0 + 80;
  v202 = v0 + 72;
  v213 = v0 + 88;
  v199 = v0 + 104;
  v200 = v0 + 96;
  v197 = v0 + 120;
  v198 = v0 + 112;
  v16 = swift_retain_n(v258[0], 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter();
  v232 = v5;
  v233 = v12;
  v252 = v15;
  v196 = v11;
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(64, -1);
    v258[0] = v20;
    *(_DWORD *)v19 = 136446466;
    *(_QWORD *)(v0 + 128) = sub_10002BA84(0xD000000000000034, 0x8000000100200900, v258);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2080;
    swift_retain(v15);
    sub_100037A5C(&qword_100263340);
    v22 = Array.description.getter(v21);
    v24 = v23;
    swift_release(v252);
    *(_QWORD *)(v0 + 136) = sub_10002BA84(v22, v24, v258);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v19 + 14, v19 + 22);
    v25 = v24;
    v15 = v252;
    swift_bridgeObjectRelease(v25);
    swift_release_n(v252, 2);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s sortedFriendsArray: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    swift_release_n(v15, 2);
  }

  v26 = 0;
  v195 = (uint64_t *)(v0 + 16);
  v254 = *(_QWORD *)(v0 + 312);
  v27 = *(_QWORD *)(v0 + 280);
  v250 = *(_QWORD *)(v0 + 248);
  v242 = *(_QWORD *)(v0 + 208);
  v28 = *(_QWORD *)(v15 + 16);
  v248 = enum case for HandleType.following(_:);
  v244 = enum case for FriendshipAction.add(_:);
  v234 = enum case for FriendshipAction.remove(_:);
  v235 = v27;
  v246 = v28;
  while (1)
  {
    if (v26 == v28)
    {
      v31 = *(_QWORD *)(v0 + 360);
      v32 = sub_100037A5C(&qword_100263340);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
      v33 = v28;
    }
    else
    {
      if (v26 >= *(_QWORD *)(v15 + 16))
      {
        __break(1u);
        return;
      }
      v34 = *(_QWORD *)(v0 + 360);
      v35 = sub_100037A5C(&qword_100263340);
      v36 = *(_QWORD *)(v35 - 8);
      sub_10000E37C(v15+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v26, v34, &qword_100263340);
      v33 = v26 + 1;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v34, 0, 1, v35);
    }
    v37 = *(_QWORD *)(v0 + 368);
    sub_10000EF6C(*(_QWORD *)(v0 + 360), v37, &qword_100263338);
    v38 = sub_100037A5C(&qword_100263340);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38) == 1)
      break;
    v256 = v33;
    v39 = *(_QWORD *)(v0 + 296);
    v41 = *(_QWORD *)(v0 + 264);
    v40 = *(_QWORD *)(v0 + 272);
    v42 = *(_QWORD *)(v0 + 256);
    v43 = v27;
    v44 = *(_QWORD *)(v0 + 240);
    v45 = *(_QWORD *)(v0 + 368) + *(int *)(v38 + 48);
    (*(void (**)(_QWORD))(v254 + 32))(*(_QWORD *)(v0 + 352));
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v39, v45, v40);
    Friend.type.getter(v46);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v250 + 104))(v42, v248, v44);
    LOBYTE(v45) = static HandleType.== infix(_:_:)(v41, v42);
    v47 = *(void (**)(uint64_t, uint64_t))(v250 + 8);
    v47(v42, v44);
    v47(v41, v44);
    if ((v45 & 1) == 0)
    {
      v29 = *(_QWORD *)(v0 + 352);
      v30 = *(_QWORD *)(v0 + 304);
      (*(void (**)(_QWORD, _QWORD))(v43 + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 272));
      (*(void (**)(uint64_t, uint64_t))(v254 + 8))(v29, v30);
      v27 = v43;
      goto LABEL_6;
    }
    v48 = *(_QWORD *)(v0 + 288);
    v49 = *(_QWORD *)(v0 + 272);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v43 + 16))(v48, *(_QWORD *)(v0 + 296), v49);
    v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 88))(v48, v49);
    v27 = v43;
    if ((_DWORD)v50 == v244)
    {
      v51 = *(_QWORD *)(v0 + 232);
      v52 = *(_QWORD *)(v0 + 200);
      v53 = Friend.handle.getter(v50);
      v54 = Handle.serverID.getter(v53);
      v56 = v55;
      v57 = *(void (**)(uint64_t, uint64_t))(v242 + 8);
      v57(v51, v52);
      if (v56)
      {
        swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
        v58 = sub_10001A808(v54, v56, (uint64_t)&_swiftEmptySetSingleton);
        swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
        v15 = v252;
        v59 = *(void (**)(_QWORD, uint64_t, uint64_t))(v254 + 16);
        v60 = *(_QWORD *)(v0 + 352);
        v61 = *(_QWORD *)(v0 + 304);
        if ((v58 & 1) != 0)
        {
          v237 = v57;
          v59(*(_QWORD *)(v0 + 344), v60, v61);
          swift_bridgeObjectRetain(v56);
          v63 = Logger.logObject.getter(v62);
          v64 = static os_log_type_t.default.getter(v63);
          v65 = os_log_type_enabled(v63, v64);
          v66 = *(_QWORD *)(v0 + 344);
          v67 = *(_QWORD *)(v0 + 352);
          v219 = *(_QWORD *)(v0 + 296);
          v223 = *(_QWORD *)(v0 + 304);
          *(_QWORD *)v216 = *(_QWORD *)(v0 + 272);
          v26 = v256;
          if (v65)
          {
            v68 = *(_QWORD *)(v0 + 224);
            v205 = *(_QWORD *)(v0 + 200);
            v69 = swift_slowAlloc(52, -1);
            v207 = swift_slowAlloc(96, -1);
            v258[0] = v207;
            *(_DWORD *)v69 = 136447235;
            type = v64;
            *(_QWORD *)(v0 + 88) = sub_10002BA84(0xD000000000000034, 0x8000000100200900, v258);
            v208 = v67;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v213, v200, v69 + 4, v69 + 12);
            *(_WORD *)(v69 + 12) = 2160;
            *(_QWORD *)(v0 + 96) = 1752392040;
            v70 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v200, v199, v69 + 14, v69 + 22);
            *(_WORD *)(v69 + 22) = 2081;
            v71 = Friend.handle.getter(v70);
            v72 = Handle.identifier.getter(v71);
            v74 = v73;
            v75 = v68;
            v27 = v235;
            v237(v75, v205);
            *(_QWORD *)(v0 + 104) = sub_10002BA84(v72, v74, v258);
            v15 = v252;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v199, v198, v69 + 24, v69 + 32);
            swift_bridgeObjectRelease(v74);
            v76 = *(void (**)(uint64_t, uint64_t))(v254 + 8);
            v76(v66, v223);
            *(_WORD *)(v69 + 32) = 2160;
            *(_QWORD *)(v0 + 112) = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v198, v197, v69 + 34, v69 + 42);
            *(_WORD *)(v69 + 42) = 2081;
            swift_bridgeObjectRetain(v56);
            *(_QWORD *)(v0 + 120) = sub_10002BA84(v54, v56, v258);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v197, v0 + 128, v69 + 44, v69 + 52);
            swift_bridgeObjectRelease_n(v56, 3);
            _os_log_impl((void *)&_mh_execute_header, v63, type, "%{public}s Friend: %{private,mask.hash}s has already added serverId %{private,mask.hash}s - skipping", (uint8_t *)v69, 0x34u);
            swift_arrayDestroy(v207, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v207, -1, -1);
            v77 = v69;
            v26 = v256;
            swift_slowDealloc(v77, -1, -1);

            (*(void (**)(uint64_t, os_log_type_t *))(v235 + 8))(v219, *(os_log_type_t **)v216);
            v76(v208, v223);
          }
          else
          {

            swift_bridgeObjectRelease_n(v56, 2);
            v152 = *(void (**)(uint64_t, uint64_t))(v254 + 8);
            v152(v66, v223);
            (*(void (**)(uint64_t, os_log_type_t *))(v27 + 8))(v219, *(os_log_type_t **)v216);
            v152(v67, v223);
          }
          goto LABEL_41;
        }
        v59(*(_QWORD *)(v0 + 336), v60, v61);
        v116 = swift_bridgeObjectRetain_n(v56, 2);
        v117 = Logger.logObject.getter(v116);
        v118 = static os_log_type_t.default.getter(v117);
        v119 = os_log_type_enabled(v117, v118);
        v120 = *(_QWORD *)(v0 + 336);
        if (v119)
        {
          v230 = v54;
          v121 = v57;
          v122 = *(_QWORD *)(v0 + 224);
          v210 = *(_QWORD *)(v0 + 200);
          v241 = *(_QWORD *)(v0 + 304);
          v123 = swift_slowAlloc(52, -1);
          v226 = swift_slowAlloc(96, -1);
          v258[0] = v226;
          *(_DWORD *)v123 = 136447235;
          v221 = v117;
          *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD000000000000034, 0x8000000100200900, v258);
          v218 = v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v215, v204, v123 + 4, v123 + 12);
          *(_WORD *)(v123 + 12) = 2160;
          *(_QWORD *)(v0 + 56) = 1752392040;
          v124 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v204, v203, v123 + 14, v123 + 22);
          *(_WORD *)(v123 + 22) = 2081;
          v125 = Friend.handle.getter(v124);
          v126 = Handle.identifier.getter(v125);
          v128 = v127;
          v129 = v122;
          v57 = v121;
          v54 = v230;
          v57(v129, v210);
          *(_QWORD *)(v0 + 64) = sub_10002BA84(v126, v128, v258);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v203, v202, v123 + 24, v123 + 32);
          swift_bridgeObjectRelease(v128);
          v130 = v241;
          v239 = *(void (**)(uint64_t, uint64_t))(v254 + 8);
          v239(v120, v130);
          *(_WORD *)(v123 + 32) = 2160;
          *(_QWORD *)(v0 + 72) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v202, v201, v123 + 34, v123 + 42);
          *(_WORD *)(v123 + 42) = 2081;
          swift_bridgeObjectRetain(v56);
          *(_QWORD *)(v0 + 80) = sub_10002BA84(v230, v56, v258);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v201, v213, v123 + 44, v123 + 52);
          swift_bridgeObjectRelease_n(v56, 3);
          v117 = v221;
          _os_log_impl((void *)&_mh_execute_header, v221, v218, "%{public}s Added a Friend: %{private,mask.hash}s with serverId %{private,mask.hash}s", (uint8_t *)v123, 0x34u);
          swift_arrayDestroy(v226, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v226, -1, -1);
          swift_slowDealloc(v123, -1, -1);
        }
        else
        {
          v239 = *(void (**)(uint64_t, uint64_t))(v254 + 8);
          v239(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 304));
          swift_bridgeObjectRelease_n(v56, 2);
        }

        v153 = *(_QWORD *)(v0 + 224);
        v154 = *(_QWORD *)(v0 + 192);
        v155 = *(_QWORD *)(v0 + 200);
        v156 = *(_QWORD *)(v0 + 184);
        sub_10003007C(v258, v54, v56);
        v157 = swift_bridgeObjectRelease(v258[1]);
        v158 = Friend.handle.getter(v157);
        v159 = Handle.identifier.getter(v158);
        v161 = v160;
        v162 = ((uint64_t (*)(uint64_t, uint64_t))v57)(v153, v155);
        Friend.createdAt.getter(v162);
        v163 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 56))(v156, 1, 1, v163);
        v164 = objc_allocWithZone((Class)BMFindMyContactActivity);
        swift_bridgeObjectRetain(v236);
        v150 = sub_100160E08(v159, v161, 2, v154, v156, v232, v236);
        v147 = v233;
LABEL_37:
        objc_msgSend(v147, "sendEvent:", v150);
        v165 = v150;
        v166 = Logger.logObject.getter(v165);
        v167 = static os_log_type_t.default.getter(v166);
        v168 = os_log_type_enabled(v166, v167);
        v169 = *(_QWORD *)(v0 + 352);
        v171 = *(_QWORD *)(v0 + 296);
        v170 = *(_QWORD *)(v0 + 304);
        v172 = *(_QWORD *)(v0 + 272);
        if (v168)
        {
          v173 = swift_slowAlloc(22, -1);
          v174 = swift_slowAlloc(32, -1);
          v258[0] = v174;
          *(_DWORD *)v173 = 141558275;
          *(_QWORD *)(v173 + 4) = 1752392040;
          *(_WORD *)(v173 + 12) = 2081;
          v231 = v169;
          v175 = objc_msgSend(v165, "description");
          v222 = v171;
          v227 = v170;
          v176 = static String._unconditionallyBridgeFromObjectiveC(_:)(v175);
          v178 = v177;

          *(_QWORD *)(v173 + 14) = sub_10002BA84(v176, v178, v258);
          swift_bridgeObjectRelease(v178);

          _os_log_impl((void *)&_mh_execute_header, v166, v167, "Sent event: %{private,mask.hash}s", (uint8_t *)v173, 0x16u);
          swift_arrayDestroy(v174, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v174, -1, -1);
          swift_slowDealloc(v173, -1, -1);

          v27 = v235;
          (*(void (**)(uint64_t, uint64_t))(v235 + 8))(v222, v172);
          v180 = v227;
          v179 = v231;
        }
        else
        {

          v27 = v235;
          (*(void (**)(uint64_t, uint64_t))(v235 + 8))(v171, v172);
          v179 = v169;
          v180 = v170;
        }
        v239(v179, v180);
        v15 = v252;
        v26 = v256;
LABEL_41:
        v28 = v246;
      }
      else
      {
        v98 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v254 + 16))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 304));
        v99 = Logger.logObject.getter(v98);
        v100 = static os_log_type_t.error.getter(v99);
        v101 = os_log_type_enabled(v99, v100);
        v102 = *(_QWORD *)(v0 + 352);
        v103 = *(_QWORD *)(v0 + 328);
        v104 = *(_QWORD *)(v0 + 304);
        v225 = *(_QWORD *)(v0 + 272);
        v229 = *(_QWORD *)(v0 + 296);
        if (v101)
        {
          *(_QWORD *)v217 = *(_QWORD *)(v0 + 304);
          v105 = *(_QWORD *)(v0 + 224);
          v209 = *(_QWORD *)(v0 + 200);
          v240 = v57;
          v106 = swift_slowAlloc(32, -1);
          v220 = v102;
          v107 = swift_slowAlloc(64, -1);
          v258[0] = v107;
          *(_DWORD *)v106 = 136446723;
          v108 = sub_10002BA84(0xD000000000000034, 0x8000000100200900, v258);
          *(_QWORD *)(v106 + 4) = v108;
          *(_WORD *)(v106 + 12) = 2160;
          *(_QWORD *)(v106 + 14) = 1752392040;
          *(_WORD *)(v106 + 22) = 2081;
          v109 = Friend.handle.getter(v108);
          v110 = Handle.identifier.getter(v109);
          v112 = v111;
          v240(v105, v209);
          *(_QWORD *)(v106 + 24) = sub_10002BA84(v110, v112, v258);
          v113 = v112;
          v27 = v235;
          swift_bridgeObjectRelease(v113);
          v114 = *(void (**)(uint64_t, _QWORD))(v254 + 8);
          v114(v103, *(_QWORD *)v217);
          _os_log_impl((void *)&_mh_execute_header, v99, v100, "%{public}s Friend: %{private,mask.hash}s has nil serverId", (uint8_t *)v106, 0x20u);
          swift_arrayDestroy(v107, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v107, -1, -1);
          v115 = v106;
          v26 = v256;
          swift_slowDealloc(v115, -1, -1);

          (*(void (**)(uint64_t, uint64_t))(v235 + 8))(v229, v225);
          v114(v220, *(_QWORD *)v217);
          v15 = v252;
          goto LABEL_41;
        }

        v151 = *(void (**)(uint64_t, uint64_t))(v254 + 8);
        v151(v103, v104);
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v229, v225);
        v151(v102, v104);
        v15 = v252;
        v28 = v246;
        v26 = v256;
      }
    }
    else
    {
      if ((_DWORD)v50 == v234)
      {
        v78 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v254 + 16))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 304));
        v79 = Logger.logObject.getter(v78);
        v80 = static os_log_type_t.default.getter(v79);
        v81 = os_log_type_enabled(v79, v80);
        v82 = *(_QWORD *)(v0 + 320);
        if (v81)
        {
          v83 = *(_QWORD *)(v0 + 224);
          v224 = *(_QWORD *)(v0 + 200);
          v238 = *(_QWORD *)(v0 + 304);
          v84 = swift_slowAlloc(32, -1);
          v228 = swift_slowAlloc(64, -1);
          v258[0] = v228;
          *(_DWORD *)v84 = 136446723;
          *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD000000000000034, 0x8000000100200900, v258);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v214, v212, v84 + 4, v84 + 12);
          *(_WORD *)(v84 + 12) = 2160;
          *(_QWORD *)(v0 + 32) = 1752392040;
          v85 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v212, v211, v84 + 14, v84 + 22);
          *(_WORD *)(v84 + 22) = 2081;
          v86 = Friend.handle.getter(v85);
          v87 = Handle.identifier.getter(v86);
          v89 = v88;
          v90 = v242;
          (*(void (**)(uint64_t, uint64_t))(v242 + 8))(v83, v224);
          *(_QWORD *)(v0 + 40) = sub_10002BA84(v87, v89, v258);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v211, v215, v84 + 24, v84 + 32);
          swift_bridgeObjectRelease(v89);
          v91 = v238;
          v239 = *(void (**)(uint64_t, uint64_t))(v254 + 8);
          v239(v82, v91);
          _os_log_impl((void *)&_mh_execute_header, v79, v80, "%{public}s Removed a Friend: %{private,mask.hash}s", (uint8_t *)v84, 0x20u);
          swift_arrayDestroy(v228, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v228, -1, -1);
          swift_slowDealloc(v84, -1, -1);

        }
        else
        {
          v239 = *(void (**)(uint64_t, uint64_t))(v254 + 8);
          v239(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));

          v90 = v242;
        }
        v131 = *(_QWORD *)(v0 + 216);
        v132 = *(_QWORD *)(v0 + 200);
        v134 = *(_QWORD *)(v0 + 168);
        v133 = *(_QWORD *)(v0 + 176);
        v135 = Friend.handle.getter(v92);
        Handle.identifier.getter(v135);
        v137 = v136;
        v138 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 8))(v131, v132);
        Friend.createdAt.getter(v138);
        v139 = type metadata accessor for Date(0);
        v140 = *(_QWORD *)(v139 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v140 + 56))(v134, 1, 1, v139);
        swift_bridgeObjectRetain(v236);
        v141 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v137);
        v142 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48);
        isa = 0;
        if (v142(v133, 1, v139) != 1)
        {
          v144 = *(_QWORD *)(v0 + 176);
          isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v144, v139);
        }
        v145 = *(_QWORD *)(v0 + 168);
        if (v142(v145, 1, v139) == 1)
        {
          v146 = 0;
        }
        else
        {
          v146 = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v145, v139);
        }
        v147 = v233;
        v148 = objc_allocWithZone((Class)BMFindMyContactActivity);
        v149 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v236);
        v150 = objc_msgSend(v148, "initWithHandle:actionType:eventTimestampBegin:eventTimestampEnd:bundleID:", v141, 3, isa, v146, v149);

        goto LABEL_37;
      }
      v93 = *(_QWORD *)(v0 + 352);
      v94 = *(_QWORD *)(v0 + 304);
      v95 = *(_QWORD *)(v0 + 288);
      v96 = *(_QWORD *)(v0 + 272);
      v97 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v97(*(_QWORD *)(v0 + 296), v96);
      (*(void (**)(uint64_t, uint64_t))(v254 + 8))(v93, v94);
      v97(v95, v96);
LABEL_6:
      v28 = v246;
      v15 = v252;
      v26 = v256;
    }
  }
  swift_bridgeObjectRelease(v236);
  swift_release(v15);
  v181 = swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  v182 = Logger.logObject.getter(v181);
  v183 = static os_log_type_t.default.getter(v182);
  if (os_log_type_enabled(v182, v183))
  {
    v184 = (uint8_t *)swift_slowAlloc(12, -1);
    v185 = swift_slowAlloc(32, -1);
    v258[0] = v185;
    *(_DWORD *)v184 = 136446210;
    *v195 = sub_10002BA84(0xD000000000000034, 0x8000000100200900, v258);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v195, v214, v184 + 4, v184 + 12);
    _os_log_impl((void *)&_mh_execute_header, v182, v183, "%{public}s end updateFriends", v184, 0xCu);
    swift_arrayDestroy(v185, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v185, -1, -1);
    swift_slowDealloc(v184, -1, -1);
  }

  v186 = *(_QWORD *)(v0 + 360);
  v188 = *(_QWORD *)(v0 + 344);
  v187 = *(_QWORD *)(v0 + 352);
  v190 = *(_QWORD *)(v0 + 328);
  v189 = *(_QWORD *)(v0 + 336);
  v191 = *(_QWORD *)(v0 + 320);
  v193 = *(_QWORD *)(v0 + 288);
  v192 = *(_QWORD *)(v0 + 296);
  v194 = *(_QWORD *)(v0 + 264);
  v243 = *(_QWORD *)(v0 + 256);
  v245 = *(_QWORD *)(v0 + 232);
  v247 = *(_QWORD *)(v0 + 224);
  v249 = *(_QWORD *)(v0 + 216);
  v251 = *(_QWORD *)(v0 + 192);
  v253 = *(_QWORD *)(v0 + 184);
  v255 = *(_QWORD *)(v0 + 176);
  v257 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v186);
  swift_task_dealloc(v187);
  swift_task_dealloc(v188);
  swift_task_dealloc(v189);
  swift_task_dealloc(v190);
  swift_task_dealloc(v191);
  swift_task_dealloc(v192);
  swift_task_dealloc(v193);
  swift_task_dealloc(v194);
  swift_task_dealloc(v243);
  swift_task_dealloc(v245);
  swift_task_dealloc(v247);
  swift_task_dealloc(v249);
  swift_task_dealloc(v251);
  swift_task_dealloc(v253);
  swift_task_dealloc(v255);
  swift_task_dealloc(v257);
  (*(void (**)(void))(v0 + 8))();
}

uint64_t sub_10015CA54(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[5] = a1;
  v2[6] = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v2[7] = v3;
  *v3 = v2;
  v3[1] = sub_10015CAA0;
  return daemon.getter();
}

uint64_t sub_10015CAA0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = *v1;
  *(_QWORD *)(*v1 + 64) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 72) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for FriendshipService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100261ED8, type metadata accessor for FriendshipService, (uint64_t)&unk_1001F6DC8);
  *v6 = v5;
  v6[1] = sub_10015CB88;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10015CB88(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[9];
  v5 = *v2;
  v5[10] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10015CCC0, v5[6], 0);
  swift_release(v5[8]);
  v5[11] = a1;
  v7 = (uint64_t **)swift_task_alloc(dword_1002646A4);
  v5[12] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_10015CC38;
  return sub_10013B228(v5[5]);
}

uint64_t sub_10015CC38()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_task_switch(sub_10015CC90, v1, 0);
}

uint64_t sub_10015CC90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015CCC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  swift_release(*(_QWORD *)(v0 + 64));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 80);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000031, 0x80000001002008C0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v7;
    swift_errorRetain(v7);
    v10 = sub_100037A5C(&qword_100265260);
    v11 = String.init<A>(describing:)(v0 + 24, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015CEF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_10003C33C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10015D048(uint64_t a1)
{
  return sub_10015D81C(a1, &qword_100261E78, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_10015D05C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  int isUniquelyReferenced_nonNull_native;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  void (*v51)(_QWORD, _QWORD, _QWORD);
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  char *v58;
  uint64_t (*v59)(unint64_t, char *, uint64_t);
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  unint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t, uint64_t);
  void (*v70)(_QWORD, _QWORD, _QWORD);
  unint64_t v71;
  unint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v79 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v7 = __chkstk_darwin(v6);
  v80 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v68 - v10;
  __chkstk_darwin(v9);
  v16 = (char *)&v68 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *v1;
  v19 = *(_QWORD *)(*v1 + 16);
  v20 = v19 + v17;
  if (__OFADD__(v19, v17))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v18;
  v78 = v11;
  if (!isUniquelyReferenced_nonNull_native || (v22 = *(_QWORD *)(v18 + 24) >> 1, v22 < v20))
  {
    if (v19 <= v20)
      v23 = v19 + v17;
    else
      v23 = v19;
    v18 = sub_100032264(isUniquelyReferenced_nonNull_native, v23, 1, v18, &qword_100261E78, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
    *v1 = v18;
    v22 = *(_QWORD *)(v18 + 24) >> 1;
  }
  v24 = *(_QWORD *)(v18 + 16);
  v19 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v20 = *(_QWORD *)(v4 + 72);
  v25 = v22 - v24;
  v26 = sub_10016ABB4(&v81, v18 + v19 + v20 * v24, v22 - v24, a1);
  if (v26 < v17)
    goto LABEL_15;
  if (v26)
  {
    v28 = *(_QWORD *)(v18 + 16);
    v29 = __OFADD__(v28, v26);
    v30 = v28 + v26;
    if (v29)
    {
      __break(1u);
LABEL_20:
      v35 = a1 + 1;
      if (__OFADD__(a1, 1))
      {
        __break(1u);
      }
      else
      {
        v36 = (v27 + 64) >> 6;
        v76 = a1;
        if (v35 >= v36)
          goto LABEL_41;
        v37 = *(_QWORD *)(v18 + 8 * v35);
        if (v37)
        {
LABEL_23:
          v32 = (v37 - 1) & v37;
          v33 = __clz(__rbit64(v37)) + (v35 << 6);
          a1 = v35;
          goto LABEL_18;
        }
        v38 = a1 + 2;
        v76 = a1 + 1;
        if (a1 + 2 >= v36)
          goto LABEL_41;
        v14 = v16;
        v13 = v25;
        v12 = v17;
        v37 = *(_QWORD *)(v18 + 8 * v38);
        if (v37)
        {
LABEL_26:
          v35 = v38;
          goto LABEL_23;
        }
        v76 = a1 + 2;
        v18 = v75;
        if (a1 + 3 >= v36)
          goto LABEL_41;
        v37 = *(_QWORD *)(v75 + 8 * (a1 + 3));
        if (v37)
        {
          v35 = a1 + 3;
          goto LABEL_23;
        }
        v38 = a1 + 4;
        v76 = a1 + 3;
        v18 = v75;
        if (a1 + 4 >= v36)
          goto LABEL_41;
        v37 = *(_QWORD *)(v75 + 8 * v38);
        if (v37)
          goto LABEL_26;
        v35 = a1 + 5;
        v76 = a1 + 4;
        v18 = v75;
        if (a1 + 5 >= v36)
        {
LABEL_41:
          v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
          v69(v16, 1, 1, v3);
          v34 = 0;
          a1 = v76;
          goto LABEL_42;
        }
        v37 = *(_QWORD *)(v75 + 8 * v35);
        if (v37)
          goto LABEL_23;
        v76 = v36 - 1;
        v39 = a1 + 6;
        while (v36 != v39)
        {
          v37 = *(_QWORD *)(v75 + 8 * v39++);
          if (v37)
          {
            v35 = v39 - 1;
            goto LABEL_23;
          }
        }
      }
      v17 = v12;
      v25 = v13;
      v18 = v75;
      v16 = v14;
      goto LABEL_41;
    }
    *(_QWORD *)(v18 + 16) = v30;
  }
  if (v26 != v25)
    return sub_100086D50(v81);
LABEL_16:
  v25 = *(_QWORD *)(v18 + 16);
  v17 = v81;
  v18 = v82;
  v27 = v83;
  a1 = v84;
  v75 = v82;
  v72 = v83;
  if (!v85)
    goto LABEL_20;
  v32 = (v85 - 1) & v85;
  v33 = __clz(__rbit64(v85)) | (v84 << 6);
LABEL_18:
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v16, *(_QWORD *)(v17 + 48) + v33 * v20, v3);
  v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v69(v16, 0, 1, v3);
  v34 = v32;
  v18 = v75;
LABEL_42:
  v74 = v34;
  v76 = a1;
  v81 = v17;
  v82 = v18;
  v83 = v72;
  v84 = a1;
  v85 = v34;
  v40 = v17;
  v41 = (uint64_t)v78;
  sub_10000E37C((uint64_t)v16, (uint64_t)v78, (uint64_t *)&unk_1002675F0);
  v42 = v41;
  v43 = v40;
  v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v73(v42, 1, v3) == 1)
  {
LABEL_82:
    sub_1000087A0((uint64_t)v16, (uint64_t *)&unk_1002675F0);
    sub_100086D50(v43);
    return sub_1000087A0((uint64_t)v78, (uint64_t *)&unk_1002675F0);
  }
  v44 = (uint64_t)v78;
  v45 = v79;
  v77 = v16;
  while (1)
  {
    sub_1000087A0(v44, (uint64_t *)&unk_1002675F0);
    v46 = *(_QWORD *)(*v1 + 24);
    v47 = v46 >> 1;
    if ((uint64_t)(v46 >> 1) < v25 + 1)
    {
      v53 = sub_100032264(v46 > 1, v25 + 1, 1, *v1, &qword_100261E78, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
      *v1 = v53;
      v76 = v53;
      v47 = *(_QWORD *)(v53 + 24) >> 1;
    }
    else
    {
      v76 = *v1;
    }
    v48 = v80;
    sub_10000E37C((uint64_t)v16, v80, (uint64_t *)&unk_1002675F0);
    if (v73(v48, 1, v3) != 1)
      break;
    v49 = v80;
LABEL_50:
    sub_1000087A0(v49, (uint64_t *)&unk_1002675F0);
    v50 = v25;
LABEL_45:
    *(_QWORD *)(*v1 + 16) = v50;
    v44 = (uint64_t)v78;
    sub_10000E37C((uint64_t)v16, (uint64_t)v78, (uint64_t *)&unk_1002675F0);
    if (v73(v44, 1, v3) == 1)
    {
      v43 = v81;
      v76 = v84;
      v74 = v85;
      goto LABEL_82;
    }
  }
  v71 = v76 + v19;
  v51 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 32);
  if (v25 <= v47)
    v52 = v47;
  else
    v52 = v25;
  v72 = v52;
  v49 = v80;
  v70 = v51;
  while (1)
  {
    v57 = v45;
    v58 = v45;
    v59 = (uint64_t (*)(unint64_t, char *, uint64_t))v51;
    v51(v57, v49, v3);
    v50 = v72;
    if (v25 == v72)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v58, v3);
      v25 = v50;
      v45 = v58;
      v16 = v77;
      goto LABEL_45;
    }
    sub_1000087A0((uint64_t)v77, (uint64_t *)&unk_1002675F0);
    v76 = v25;
    result = v59(v71 + v25 * v20, v58, v3);
    v55 = v81;
    v60 = v84;
    v74 = v83;
    v75 = v82;
    if (v85)
    {
      v54 = (v85 - 1) & v85;
      v61 = __clz(__rbit64(v85)) | (v84 << 6);
      v16 = v77;
      goto LABEL_62;
    }
    v68 = v81;
    v63 = v84 + 1;
    if (__OFADD__(v84, 1))
      break;
    v64 = (v83 + 64) >> 6;
    v62 = v84;
    v16 = v77;
    if (v63 < v64)
    {
      v65 = *(_QWORD *)(v82 + 8 * v63);
      if (v65)
        goto LABEL_66;
      v66 = v84 + 2;
      v62 = v84 + 1;
      if (v84 + 2 < v64)
      {
        v65 = *(_QWORD *)(v82 + 8 * v66);
        if (v65)
          goto LABEL_69;
        v62 = v84 + 2;
        if (v84 + 3 < v64)
        {
          v65 = *(_QWORD *)(v82 + 8 * (v84 + 3));
          if (v65)
          {
            v63 = v84 + 3;
            goto LABEL_66;
          }
          v66 = v84 + 4;
          v62 = v84 + 3;
          if (v84 + 4 < v64)
          {
            v65 = *(_QWORD *)(v82 + 8 * v66);
            if (v65)
            {
LABEL_69:
              v63 = v66;
              goto LABEL_66;
            }
            v63 = v84 + 5;
            v62 = v84 + 4;
            if (v84 + 5 < v64)
            {
              v65 = *(_QWORD *)(v82 + 8 * v63);
              if (!v65)
              {
                v62 = v64 - 1;
                v67 = v84 + 6;
                do
                {
                  if (v64 == v67)
                  {
                    v16 = v77;
                    goto LABEL_57;
                  }
                  v65 = *(_QWORD *)(v82 + 8 * v67++);
                }
                while (!v65);
                v63 = v67 - 1;
                v16 = v77;
              }
LABEL_66:
              v54 = (v65 - 1) & v65;
              v61 = __clz(__rbit64(v65)) + (v63 << 6);
              v60 = v63;
              v55 = v68;
LABEL_62:
              (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v16, *(_QWORD *)(v55 + 48) + v61 * v20, v3);
              v69(v16, 0, 1, v3);
              v62 = v60;
              goto LABEL_58;
            }
          }
        }
      }
    }
LABEL_57:
    v69(v16, 1, 1, v3);
    v54 = 0;
    v55 = v68;
LABEL_58:
    v25 = v76 + 1;
    v81 = v55;
    v82 = v75;
    v83 = v74;
    v84 = v62;
    v85 = v54;
    v49 = v80;
    sub_10000E37C((uint64_t)v16, v80, (uint64_t *)&unk_1002675F0);
    v56 = v73(v49, 1, v3);
    v45 = v79;
    v51 = v70;
    if (v56 == 1)
      goto LABEL_50;
  }
  __break(1u);
  return result;
}

uint64_t sub_10015D81C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t result;
  char v29;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  if (isUniquelyReferenced_nonNull_native && v7 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v6 <= v7)
    v27 = v6 + v4;
  else
    v27 = v6;
  v5 = sub_100032264(isUniquelyReferenced_nonNull_native, v27, 1, v5, a2, a3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v4)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v12 = *(_QWORD *)(v5 + 16);
  v13 = (*(_QWORD *)(v5 + 24) >> 1) - v12;
  v14 = a3(0);
  if (v13 < v4)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v5 + v16 + v17 * v12;
  v19 = a1 + v16;
  v20 = v17 * v4;
  v21 = v18 + v20;
  v22 = v19 + v20;
  if (v19 < v21 && v18 < v22)
    goto LABEL_24;
  swift_arrayInitWithCopy(v18);
  if (!v4)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v4);
  v26 = v24 + v4;
  if (!v25)
  {
    *(_QWORD *)(v5 + 16) = v26;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v29 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v29, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10015D99C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v18 = *v1;
  else
    v18 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v18);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    v10 = swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4, v10);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_10016A8C8(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v12 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v19 = v4;
    else
      v19 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v4);
  }
  if (v12 < 1)
    goto LABEL_19;
  v13 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v14 = __OFADD__(v13, v12);
  v15 = v13 + v12;
  if (!v14)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v15;
LABEL_19:
    v16 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v16);
  }
  __break(1u);
  return result;
}

uint64_t sub_10015DB54@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  unsigned int *v46;
  char *v47;
  char *v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;

  v60 = a4;
  v7 = sub_100037A5C(&qword_1002650A0);
  __chkstk_darwin(v7);
  v59 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ClientOrigin(0);
  v56 = *(_QWORD *)(v9 - 8);
  v57 = v9;
  __chkstk_darwin(v9);
  v58 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C((uint64_t *)&unk_100262930);
  v12 = __chkstk_darwin(v11);
  v55 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v54 = (char *)&v50 - v14;
  v15 = type metadata accessor for HandleType(0);
  v52 = *(_QWORD *)(v15 - 8);
  v53 = v15;
  __chkstk_darwin(v15);
  v51 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for Handle(0);
  v17 = *(_QWORD *)(v50 - 8);
  v18 = __chkstk_darwin(v50);
  v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v50 - v21;
  v23 = sub_1000DEE54((uint64_t)_swiftEmptyArrayStorage);
  v25 = *((_QWORD *)a1 + 10);
  v24 = *((_QWORD *)a1 + 11);
  v26 = a1[9];
  swift_bridgeObjectRetain(v24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
  v61 = v23;
  sub_1001639B4(v25, v24, isUniquelyReferenced_nonNull_native, v26);
  v28 = v61;
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(0x8000000000000000);
  v29 = *a1;
  v30 = *((_QWORD *)a1 + 1);
  v31 = sub_100037A5C(&qword_100265230);
  v32 = swift_allocObject(v31, 48, 7);
  *(_OWORD *)(v32 + 16) = xmmword_1001F35F0;
  *(_QWORD *)(v32 + 32) = a2;
  *(_QWORD *)(v32 + 40) = a3;
  swift_bridgeObjectRetain_n(a3, 2);
  v33 = swift_bridgeObjectRetain(v30);
  v34 = a2;
  v35 = v17;
  v36 = v29;
  v37 = v30;
  v38 = v20;
  v40 = v50;
  v39 = v51;
  Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)(v34, a3, *(_QWORD *)&v36, v37, _swiftEmptyArrayStorage, v28, v32, v33);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v38, v22, v40);
  v41 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v52 + 104))(v39, enum case for HandleType.pendingOffer(_:), v53);
  if (v26 == 0.0)
  {
    v42 = type metadata accessor for Date(0);
    v43 = v54;
    v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v54, 1, 1, v42);
  }
  else
  {
    v43 = v54;
    Date.init(timeIntervalSince1970:)(v41, v26 / 1000.0);
    v42 = type metadata accessor for Date(0);
    v44 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v43, 0, 1, v42);
  }
  v45 = v55;
  Date.init(timeIntervalSince1970:)(v44, a1[8] / 1000.0);
  type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v45, 0, 1, v42);
  if (((_BYTE)a1[12] & 1) != 0)
    v46 = (unsigned int *)&enum case for ClientOrigin.messagesApp(_:);
  else
    v46 = (unsigned int *)&enum case for ClientOrigin.other(_:);
  v47 = v58;
  (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v58, *v46, v57);
  v48 = v59;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v59, 1, 1, v40);
  Friend.init(handle:type:expiry:createdAt:origin:secureLocationsCapable:shallowOrLiveSecureLocationsCapable:fallbackToLegacyAllowed:fallbackToLegacy:ownerHandle:)(v38, v39, v43, v45, v47, 0, 0, 0, 0, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v22, v40);
}

uint64_t sub_10015DF5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 416));
  return swift_task_switch(sub_10015DFB4, v1, 0);
}

uint64_t sub_10015DFB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, unint64_t, uint64_t);
  unint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  uint64_t v104;
  int64_t v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int *v108;
  int64_t v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int *v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  unsigned int *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, unint64_t, uint64_t);
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, unint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v1 = v0[2];
  v140 = v0[34];
  v2 = v0[25];
  v3 = v0[13];
  v142 = v0[14];
  swift_bridgeObjectRetain(v1);
  v111 = sub_1001678AC(v4, (unsigned int *)&enum case for HandleType.futureFollowing(_:), (unsigned int *)&enum case for FriendshipAction.remove(_:));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRetain(v1);
  v6 = sub_1001678AC(v5, (unsigned int *)&enum case for HandleType.following(_:), (unsigned int *)&enum case for FriendshipAction.add(_:));
  result = swift_bridgeObjectRelease(v1);
  v8 = 0;
  v103 = v6 + 16;
  v9 = -1;
  v10 = -1 << *((_BYTE *)v6 + 32);
  if (-v10 < 64)
    v9 = ~(-1 << -(char)v10);
  v11 = v9 & *((_QWORD *)v6 + 8);
  v105 = (unint64_t)(63 - v10) >> 6;
  v108 = v6;
  v145 = v2;
  v147 = v3;
  while (1)
  {
    if (v11)
    {
      v134 = (v11 - 1) & v11;
      v137 = v8;
      v18 = __clz(__rbit64(v11)) | (v8 << 6);
      goto LABEL_23;
    }
    v19 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v19 >= v105)
      goto LABEL_26;
    v20 = *(_QWORD *)&v103[2 * v19];
    v21 = v8 + 1;
    if (!v20)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v105)
        goto LABEL_26;
      v20 = *(_QWORD *)&v103[2 * v21];
      if (!v20)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v105)
          goto LABEL_26;
        v20 = *(_QWORD *)&v103[2 * v21];
        if (!v20)
          break;
      }
    }
LABEL_22:
    v134 = (v20 - 1) & v20;
    v137 = v21;
    v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_23:
    v24 = *(_QWORD *)(v149 + 264);
    v23 = *(_QWORD **)(v149 + 272);
    v26 = *(_QWORD *)(v149 + 192);
    v25 = *(_QWORD *)(v149 + 200);
    v28 = *(_QWORD *)(v149 + 152);
    v27 = *(_QWORD *)(v149 + 160);
    v122 = *(_QWORD *)(v149 + 144);
    v125 = *(_QWORD *)(v149 + 96);
    v128 = *(_QWORD *)(v149 + 88);
    v131 = *(_QWORD *)(v149 + 104);
    v119 = (void (*)(uint64_t, unint64_t, uint64_t))v23[2];
    v119(v27, *((_QWORD *)v108 + 6) + v23[9] * v18, v24);
    v29 = *((_QWORD *)v108 + 7) + *(_QWORD *)(v25 + 72) * v18;
    v30 = v27 + *(int *)(v147 + 48);
    v31 = *(void (**)(uint64_t, unint64_t, uint64_t))(v145 + 16);
    v31(v30, v29, v26);
    v32 = v28 + *(int *)(v147 + 48);
    v114 = (void (*)(uint64_t, uint64_t, uint64_t))v23[4];
    v114(v28, v27, v24);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 32))(v32, v30, v26);
    v33 = v122 + *(int *)(v147 + 48);
    v119(v122, v28, v24);
    v31(v33, v32, v26);
    v34 = swift_task_alloc(32);
    *(_QWORD *)(v34 + 16) = v122;
    sub_1001578F0((uint64_t (*)(char *))sub_10016CF84, (uint64_t)v111, v125);
    swift_task_dealloc(v34);
    sub_1000087A0(v122, &qword_100263340);
    sub_10000E37C(v125, v128, &qword_100263338);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v128, 1, v131) == 1)
    {
      v12 = *(_QWORD *)(v149 + 264);
      v13 = *(_QWORD *)(v149 + 176);
      sub_1000087A0(*(_QWORD *)(v149 + 88), &qword_100263338);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v140 + 56))(v13, 1, 1, v12);
LABEL_5:
      v14 = *(_QWORD *)(v149 + 176);
      v15 = *(_QWORD *)(v149 + 152);
      sub_1000087A0(*(_QWORD *)(v149 + 96), &qword_100263338);
      sub_1000087A0(v15, &qword_100263340);
      v16 = v14;
      v17 = &qword_100260950;
      goto LABEL_6;
    }
    v35 = *(_QWORD *)(v149 + 264);
    v36 = *(_QWORD *)(v149 + 272);
    v37 = *(_QWORD *)(v149 + 192);
    v38 = *(_QWORD *)(v149 + 176);
    v39 = *(_QWORD *)(v149 + 88) + *(int *)(v147 + 48);
    ((void (*)(uint64_t))v114)(v38);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v140 + 56))(v38, 0, 1, v35);
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v39, v37);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v38, 1, v35) == 1)
      goto LABEL_5;
    v40 = *(_QWORD *)(v149 + 288);
    v42 = *(_QWORD *)(v149 + 264);
    v41 = *(_QWORD *)(v149 + 272);
    v43 = *(_QWORD *)(v149 + 152);
    v44 = *(_QWORD *)(v149 + 96);
    v45 = *(_QWORD *)(v149 + 64);
    v114(v40, *(_QWORD *)(v149 + 176), v42);
    sub_1000F46EC(v40, v45);
    sub_1000087A0(v45, &qword_100265588);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    sub_1000087A0(v44, &qword_100263338);
    v16 = v43;
    v17 = &qword_100263340;
LABEL_6:
    result = sub_1000087A0(v16, v17);
    v11 = v134;
    v8 = v137;
  }
  v22 = v8 + 4;
  if (v8 + 4 >= v105)
  {
LABEL_26:
    swift_release(v108);
    swift_release(v111);
    v46 = *(_QWORD *)(v149 + 16);
    swift_bridgeObjectRetain(v46);
    v115 = sub_1001678AC(v47, (unsigned int *)&enum case for HandleType.futureFollower(_:), (unsigned int *)&enum case for FriendshipAction.remove(_:));
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRetain(v46);
    v49 = sub_1001678AC(v48, (unsigned int *)&enum case for HandleType.follower(_:), (unsigned int *)&enum case for FriendshipAction.add(_:));
    result = swift_bridgeObjectRelease(v46);
    v50 = 0;
    v106 = v49 + 16;
    v51 = -1;
    v52 = -1 << *((_BYTE *)v49 + 32);
    if (-v52 < 64)
      v51 = ~(-1 << -(char)v52);
    v53 = v51 & *((_QWORD *)v49 + 8);
    v109 = (unint64_t)(63 - v52) >> 6;
    v112 = v49;
    while (1)
    {
      if (v53)
      {
        v117 = (v53 - 1) & v53;
        v120 = v50;
        v60 = __clz(__rbit64(v53)) | (v50 << 6);
      }
      else
      {
        v61 = v50 + 1;
        if (__OFADD__(v50, 1))
          goto LABEL_53;
        if (v61 >= v109)
        {
LABEL_51:
          swift_release(v112);
          swift_release(v115);
          v148 = *(_QWORD *)(v149 + 16);
          v90 = *(_QWORD *)(v149 + 376);
          v92 = *(_QWORD *)(v149 + 344);
          v91 = *(_QWORD *)(v149 + 352);
          v93 = *(_QWORD *)(v149 + 328);
          v94 = *(_QWORD *)(v149 + 336);
          v96 = *(_QWORD *)(v149 + 312);
          v95 = *(_QWORD *)(v149 + 320);
          v98 = *(_QWORD *)(v149 + 296);
          v97 = *(_QWORD *)(v149 + 304);
          v99 = *(_QWORD *)(v149 + 288);
          v100 = *(_QWORD *)(v149 + 280);
          v101 = *(_QWORD *)(v149 + 256);
          v102 = *(_QWORD *)(v149 + 232);
          v104 = *(_QWORD *)(v149 + 224);
          v107 = *(_QWORD *)(v149 + 216);
          v110 = *(_QWORD *)(v149 + 208);
          v113 = *(_QWORD *)(v149 + 184);
          v116 = *(_QWORD *)(v149 + 176);
          v118 = *(_QWORD *)(v149 + 168);
          v121 = *(_QWORD *)(v149 + 160);
          v124 = *(_QWORD *)(v149 + 152);
          v127 = *(_QWORD *)(v149 + 144);
          v130 = *(_QWORD *)(v149 + 136);
          v133 = *(_QWORD *)(v149 + 128);
          v136 = *(_QWORD *)(v149 + 120);
          v139 = *(_QWORD *)(v149 + 96);
          v141 = *(_QWORD *)(v149 + 88);
          v143 = *(_QWORD *)(v149 + 80);
          v144 = *(_QWORD *)(v149 + 72);
          v146 = *(_QWORD *)(v149 + 64);
          swift_task_dealloc(*(_QWORD *)(v149 + 384));
          swift_task_dealloc(v90);
          swift_task_dealloc(v91);
          swift_task_dealloc(v92);
          swift_task_dealloc(v94);
          swift_task_dealloc(v93);
          swift_task_dealloc(v95);
          swift_task_dealloc(v96);
          swift_task_dealloc(v97);
          swift_task_dealloc(v98);
          swift_task_dealloc(v99);
          swift_task_dealloc(v100);
          swift_task_dealloc(v101);
          swift_task_dealloc(v102);
          swift_task_dealloc(v104);
          swift_task_dealloc(v107);
          swift_task_dealloc(v110);
          swift_task_dealloc(v113);
          swift_task_dealloc(v116);
          swift_task_dealloc(v118);
          swift_task_dealloc(v121);
          swift_task_dealloc(v124);
          swift_task_dealloc(v127);
          swift_task_dealloc(v130);
          swift_task_dealloc(v133);
          swift_task_dealloc(v136);
          swift_task_dealloc(v139);
          swift_task_dealloc(v141);
          swift_task_dealloc(v143);
          swift_task_dealloc(v144);
          swift_task_dealloc(v146);
          return (*(uint64_t (**)(uint64_t))(v149 + 8))(v148);
        }
        v62 = *(_QWORD *)&v106[2 * v61];
        v63 = v50 + 1;
        if (!v62)
        {
          v63 = v50 + 2;
          if (v50 + 2 >= v109)
            goto LABEL_51;
          v62 = *(_QWORD *)&v106[2 * v63];
          if (!v62)
          {
            v63 = v50 + 3;
            if (v50 + 3 >= v109)
              goto LABEL_51;
            v62 = *(_QWORD *)&v106[2 * v63];
            if (!v62)
            {
              v64 = v50 + 4;
              if (v50 + 4 >= v109)
                goto LABEL_51;
              v62 = *(_QWORD *)&v106[2 * v64];
              if (!v62)
              {
                while (1)
                {
                  v63 = v64 + 1;
                  if (__OFADD__(v64, 1))
                    goto LABEL_55;
                  if (v63 >= v109)
                    goto LABEL_51;
                  v62 = *(_QWORD *)&v106[2 * v63];
                  ++v64;
                  if (v62)
                    goto LABEL_47;
                }
              }
              v63 = v50 + 4;
            }
          }
        }
LABEL_47:
        v117 = (v62 - 1) & v62;
        v120 = v63;
        v60 = __clz(__rbit64(v62)) + (v63 << 6);
      }
      v65 = *(_QWORD *)(v149 + 264);
      v66 = *(_QWORD **)(v149 + 272);
      v67 = *(_QWORD *)(v149 + 192);
      v68 = *(_QWORD *)(v149 + 200);
      v69 = *(_QWORD *)(v149 + 128);
      v70 = *(_QWORD *)(v149 + 136);
      v129 = *(_QWORD *)(v149 + 120);
      v132 = *(_QWORD *)(v149 + 80);
      v135 = *(_QWORD *)(v149 + 72);
      v138 = *(_QWORD *)(v149 + 104);
      v123 = v68;
      v126 = (void (*)(uint64_t, unint64_t, uint64_t))v66[2];
      v126(v70, *((_QWORD *)v112 + 6) + v66[9] * v60, v65);
      v71 = v70 + *(int *)(v147 + 48);
      v72 = *(void (**)(uint64_t, unint64_t, uint64_t))(v145 + 16);
      v72(v71, *((_QWORD *)v112 + 7) + *(_QWORD *)(v68 + 72) * v60, v67);
      v73 = v69 + *(int *)(v147 + 48);
      v74 = (void (*)(uint64_t, uint64_t, uint64_t))v66[4];
      v74(v69, v70, v65);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v123 + 32))(v73, v71, v67);
      v75 = v129 + *(int *)(v147 + 48);
      v126(v129, v69, v65);
      v72(v75, v73, v67);
      v76 = swift_task_alloc(32);
      *(_QWORD *)(v76 + 16) = v129;
      sub_1001578F0((uint64_t (*)(char *))sub_10016CE84, (uint64_t)v115, v132);
      swift_task_dealloc(v76);
      sub_1000087A0(v129, &qword_100263340);
      sub_10000E37C(v132, v135, &qword_100263338);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v135, 1, v138) == 1)
        break;
      v77 = *(_QWORD *)(v149 + 264);
      v78 = *(_QWORD *)(v149 + 272);
      v79 = *(_QWORD *)(v149 + 192);
      v80 = *(_QWORD *)(v149 + 168);
      v81 = v74;
      v82 = *(_QWORD *)(v149 + 72) + *(int *)(v147 + 48);
      v83 = v81;
      ((void (*)(uint64_t))v81)(v80);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v140 + 56))(v80, 0, 1, v77);
      (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v82, v79);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v80, 1, v77) == 1)
        goto LABEL_30;
      v85 = *(_QWORD *)(v149 + 272);
      v84 = *(_QWORD *)(v149 + 280);
      v86 = *(_QWORD *)(v149 + 264);
      v87 = *(_QWORD *)(v149 + 128);
      v88 = *(_QWORD *)(v149 + 80);
      v89 = *(_QWORD *)(v149 + 64);
      v83(v84, *(_QWORD *)(v149 + 168), v86);
      sub_1000F46EC(v84, v89);
      sub_1000087A0(v89, &qword_100265588);
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
      sub_1000087A0(v88, &qword_100263338);
      v58 = v87;
      v59 = &qword_100263340;
LABEL_31:
      result = sub_1000087A0(v58, v59);
      v53 = v117;
      v50 = v120;
    }
    v54 = *(_QWORD *)(v149 + 264);
    v55 = *(_QWORD *)(v149 + 168);
    sub_1000087A0(*(_QWORD *)(v149 + 72), &qword_100263338);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v140 + 56))(v55, 1, 1, v54);
LABEL_30:
    v56 = *(_QWORD *)(v149 + 168);
    v57 = *(_QWORD *)(v149 + 128);
    sub_1000087A0(*(_QWORD *)(v149 + 80), &qword_100263338);
    sub_1000087A0(v57, &qword_100263340);
    v58 = v56;
    v59 = &qword_100260950;
    goto LABEL_31;
  }
  v20 = *(_QWORD *)&v103[2 * v22];
  if (v20)
  {
    v21 = v8 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v21 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v21 >= v105)
      goto LABEL_26;
    v20 = *(_QWORD *)&v103[2 * v21];
    ++v22;
    if (v20)
      goto LABEL_22;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_10015EA6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 424);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 432));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10015EACC, v2, 0);
}

uint64_t sub_10015EACC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, unint64_t, uint64_t);
  unint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  uint64_t v104;
  int64_t v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int *v108;
  int64_t v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int *v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  unsigned int *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, unint64_t, uint64_t);
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, unint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v1 = v0[53];
  v140 = v0[34];
  v2 = v0[25];
  v3 = v0[13];
  v142 = v0[14];
  swift_bridgeObjectRetain(v1);
  v111 = sub_1001678AC(v4, (unsigned int *)&enum case for HandleType.futureFollowing(_:), (unsigned int *)&enum case for FriendshipAction.remove(_:));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRetain(v1);
  v6 = sub_1001678AC(v5, (unsigned int *)&enum case for HandleType.following(_:), (unsigned int *)&enum case for FriendshipAction.add(_:));
  result = swift_bridgeObjectRelease(v1);
  v8 = 0;
  v103 = v6 + 16;
  v9 = -1;
  v10 = -1 << *((_BYTE *)v6 + 32);
  if (-v10 < 64)
    v9 = ~(-1 << -(char)v10);
  v11 = v9 & *((_QWORD *)v6 + 8);
  v105 = (unint64_t)(63 - v10) >> 6;
  v108 = v6;
  v145 = v2;
  v147 = v3;
  while (1)
  {
    if (v11)
    {
      v134 = (v11 - 1) & v11;
      v137 = v8;
      v18 = __clz(__rbit64(v11)) | (v8 << 6);
      goto LABEL_23;
    }
    v19 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v19 >= v105)
      goto LABEL_26;
    v20 = *(_QWORD *)&v103[2 * v19];
    v21 = v8 + 1;
    if (!v20)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v105)
        goto LABEL_26;
      v20 = *(_QWORD *)&v103[2 * v21];
      if (!v20)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v105)
          goto LABEL_26;
        v20 = *(_QWORD *)&v103[2 * v21];
        if (!v20)
          break;
      }
    }
LABEL_22:
    v134 = (v20 - 1) & v20;
    v137 = v21;
    v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_23:
    v24 = *(_QWORD *)(v149 + 264);
    v23 = *(_QWORD **)(v149 + 272);
    v26 = *(_QWORD *)(v149 + 192);
    v25 = *(_QWORD *)(v149 + 200);
    v28 = *(_QWORD *)(v149 + 152);
    v27 = *(_QWORD *)(v149 + 160);
    v122 = *(_QWORD *)(v149 + 144);
    v125 = *(_QWORD *)(v149 + 96);
    v128 = *(_QWORD *)(v149 + 88);
    v131 = *(_QWORD *)(v149 + 104);
    v119 = (void (*)(uint64_t, unint64_t, uint64_t))v23[2];
    v119(v27, *((_QWORD *)v108 + 6) + v23[9] * v18, v24);
    v29 = *((_QWORD *)v108 + 7) + *(_QWORD *)(v25 + 72) * v18;
    v30 = v27 + *(int *)(v147 + 48);
    v31 = *(void (**)(uint64_t, unint64_t, uint64_t))(v145 + 16);
    v31(v30, v29, v26);
    v32 = v28 + *(int *)(v147 + 48);
    v114 = (void (*)(uint64_t, uint64_t, uint64_t))v23[4];
    v114(v28, v27, v24);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 32))(v32, v30, v26);
    v33 = v122 + *(int *)(v147 + 48);
    v119(v122, v28, v24);
    v31(v33, v32, v26);
    v34 = swift_task_alloc(32);
    *(_QWORD *)(v34 + 16) = v122;
    sub_1001578F0((uint64_t (*)(char *))sub_10016CF84, (uint64_t)v111, v125);
    swift_task_dealloc(v34);
    sub_1000087A0(v122, &qword_100263340);
    sub_10000E37C(v125, v128, &qword_100263338);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v128, 1, v131) == 1)
    {
      v12 = *(_QWORD *)(v149 + 264);
      v13 = *(_QWORD *)(v149 + 176);
      sub_1000087A0(*(_QWORD *)(v149 + 88), &qword_100263338);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v140 + 56))(v13, 1, 1, v12);
LABEL_5:
      v14 = *(_QWORD *)(v149 + 176);
      v15 = *(_QWORD *)(v149 + 152);
      sub_1000087A0(*(_QWORD *)(v149 + 96), &qword_100263338);
      sub_1000087A0(v15, &qword_100263340);
      v16 = v14;
      v17 = &qword_100260950;
      goto LABEL_6;
    }
    v35 = *(_QWORD *)(v149 + 264);
    v36 = *(_QWORD *)(v149 + 272);
    v37 = *(_QWORD *)(v149 + 192);
    v38 = *(_QWORD *)(v149 + 176);
    v39 = *(_QWORD *)(v149 + 88) + *(int *)(v147 + 48);
    ((void (*)(uint64_t))v114)(v38);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v140 + 56))(v38, 0, 1, v35);
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v39, v37);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v38, 1, v35) == 1)
      goto LABEL_5;
    v40 = *(_QWORD *)(v149 + 288);
    v42 = *(_QWORD *)(v149 + 264);
    v41 = *(_QWORD *)(v149 + 272);
    v43 = *(_QWORD *)(v149 + 152);
    v44 = *(_QWORD *)(v149 + 96);
    v45 = *(_QWORD *)(v149 + 64);
    v114(v40, *(_QWORD *)(v149 + 176), v42);
    sub_1000F46EC(v40, v45);
    sub_1000087A0(v45, &qword_100265588);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    sub_1000087A0(v44, &qword_100263338);
    v16 = v43;
    v17 = &qword_100263340;
LABEL_6:
    result = sub_1000087A0(v16, v17);
    v11 = v134;
    v8 = v137;
  }
  v22 = v8 + 4;
  if (v8 + 4 >= v105)
  {
LABEL_26:
    swift_release(v108);
    swift_release(v111);
    v46 = *(_QWORD *)(v149 + 16);
    swift_bridgeObjectRetain(v46);
    v115 = sub_1001678AC(v47, (unsigned int *)&enum case for HandleType.futureFollower(_:), (unsigned int *)&enum case for FriendshipAction.remove(_:));
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRetain(v46);
    v49 = sub_1001678AC(v48, (unsigned int *)&enum case for HandleType.follower(_:), (unsigned int *)&enum case for FriendshipAction.add(_:));
    result = swift_bridgeObjectRelease(v46);
    v50 = 0;
    v106 = v49 + 16;
    v51 = -1;
    v52 = -1 << *((_BYTE *)v49 + 32);
    if (-v52 < 64)
      v51 = ~(-1 << -(char)v52);
    v53 = v51 & *((_QWORD *)v49 + 8);
    v109 = (unint64_t)(63 - v52) >> 6;
    v112 = v49;
    while (1)
    {
      if (v53)
      {
        v117 = (v53 - 1) & v53;
        v120 = v50;
        v60 = __clz(__rbit64(v53)) | (v50 << 6);
      }
      else
      {
        v61 = v50 + 1;
        if (__OFADD__(v50, 1))
          goto LABEL_53;
        if (v61 >= v109)
        {
LABEL_51:
          swift_release(v112);
          swift_release(v115);
          v148 = *(_QWORD *)(v149 + 16);
          v90 = *(_QWORD *)(v149 + 376);
          v92 = *(_QWORD *)(v149 + 344);
          v91 = *(_QWORD *)(v149 + 352);
          v93 = *(_QWORD *)(v149 + 328);
          v94 = *(_QWORD *)(v149 + 336);
          v96 = *(_QWORD *)(v149 + 312);
          v95 = *(_QWORD *)(v149 + 320);
          v98 = *(_QWORD *)(v149 + 296);
          v97 = *(_QWORD *)(v149 + 304);
          v99 = *(_QWORD *)(v149 + 288);
          v100 = *(_QWORD *)(v149 + 280);
          v101 = *(_QWORD *)(v149 + 256);
          v102 = *(_QWORD *)(v149 + 232);
          v104 = *(_QWORD *)(v149 + 224);
          v107 = *(_QWORD *)(v149 + 216);
          v110 = *(_QWORD *)(v149 + 208);
          v113 = *(_QWORD *)(v149 + 184);
          v116 = *(_QWORD *)(v149 + 176);
          v118 = *(_QWORD *)(v149 + 168);
          v121 = *(_QWORD *)(v149 + 160);
          v124 = *(_QWORD *)(v149 + 152);
          v127 = *(_QWORD *)(v149 + 144);
          v130 = *(_QWORD *)(v149 + 136);
          v133 = *(_QWORD *)(v149 + 128);
          v136 = *(_QWORD *)(v149 + 120);
          v139 = *(_QWORD *)(v149 + 96);
          v141 = *(_QWORD *)(v149 + 88);
          v143 = *(_QWORD *)(v149 + 80);
          v144 = *(_QWORD *)(v149 + 72);
          v146 = *(_QWORD *)(v149 + 64);
          swift_task_dealloc(*(_QWORD *)(v149 + 384));
          swift_task_dealloc(v90);
          swift_task_dealloc(v91);
          swift_task_dealloc(v92);
          swift_task_dealloc(v94);
          swift_task_dealloc(v93);
          swift_task_dealloc(v95);
          swift_task_dealloc(v96);
          swift_task_dealloc(v97);
          swift_task_dealloc(v98);
          swift_task_dealloc(v99);
          swift_task_dealloc(v100);
          swift_task_dealloc(v101);
          swift_task_dealloc(v102);
          swift_task_dealloc(v104);
          swift_task_dealloc(v107);
          swift_task_dealloc(v110);
          swift_task_dealloc(v113);
          swift_task_dealloc(v116);
          swift_task_dealloc(v118);
          swift_task_dealloc(v121);
          swift_task_dealloc(v124);
          swift_task_dealloc(v127);
          swift_task_dealloc(v130);
          swift_task_dealloc(v133);
          swift_task_dealloc(v136);
          swift_task_dealloc(v139);
          swift_task_dealloc(v141);
          swift_task_dealloc(v143);
          swift_task_dealloc(v144);
          swift_task_dealloc(v146);
          return (*(uint64_t (**)(uint64_t))(v149 + 8))(v148);
        }
        v62 = *(_QWORD *)&v106[2 * v61];
        v63 = v50 + 1;
        if (!v62)
        {
          v63 = v50 + 2;
          if (v50 + 2 >= v109)
            goto LABEL_51;
          v62 = *(_QWORD *)&v106[2 * v63];
          if (!v62)
          {
            v63 = v50 + 3;
            if (v50 + 3 >= v109)
              goto LABEL_51;
            v62 = *(_QWORD *)&v106[2 * v63];
            if (!v62)
            {
              v64 = v50 + 4;
              if (v50 + 4 >= v109)
                goto LABEL_51;
              v62 = *(_QWORD *)&v106[2 * v64];
              if (!v62)
              {
                while (1)
                {
                  v63 = v64 + 1;
                  if (__OFADD__(v64, 1))
                    goto LABEL_55;
                  if (v63 >= v109)
                    goto LABEL_51;
                  v62 = *(_QWORD *)&v106[2 * v63];
                  ++v64;
                  if (v62)
                    goto LABEL_47;
                }
              }
              v63 = v50 + 4;
            }
          }
        }
LABEL_47:
        v117 = (v62 - 1) & v62;
        v120 = v63;
        v60 = __clz(__rbit64(v62)) + (v63 << 6);
      }
      v65 = *(_QWORD *)(v149 + 264);
      v66 = *(_QWORD **)(v149 + 272);
      v67 = *(_QWORD *)(v149 + 192);
      v68 = *(_QWORD *)(v149 + 200);
      v69 = *(_QWORD *)(v149 + 128);
      v70 = *(_QWORD *)(v149 + 136);
      v129 = *(_QWORD *)(v149 + 120);
      v132 = *(_QWORD *)(v149 + 80);
      v135 = *(_QWORD *)(v149 + 72);
      v138 = *(_QWORD *)(v149 + 104);
      v123 = v68;
      v126 = (void (*)(uint64_t, unint64_t, uint64_t))v66[2];
      v126(v70, *((_QWORD *)v112 + 6) + v66[9] * v60, v65);
      v71 = v70 + *(int *)(v147 + 48);
      v72 = *(void (**)(uint64_t, unint64_t, uint64_t))(v145 + 16);
      v72(v71, *((_QWORD *)v112 + 7) + *(_QWORD *)(v68 + 72) * v60, v67);
      v73 = v69 + *(int *)(v147 + 48);
      v74 = (void (*)(uint64_t, uint64_t, uint64_t))v66[4];
      v74(v69, v70, v65);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v123 + 32))(v73, v71, v67);
      v75 = v129 + *(int *)(v147 + 48);
      v126(v129, v69, v65);
      v72(v75, v73, v67);
      v76 = swift_task_alloc(32);
      *(_QWORD *)(v76 + 16) = v129;
      sub_1001578F0((uint64_t (*)(char *))sub_10016CE84, (uint64_t)v115, v132);
      swift_task_dealloc(v76);
      sub_1000087A0(v129, &qword_100263340);
      sub_10000E37C(v132, v135, &qword_100263338);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v135, 1, v138) == 1)
        break;
      v77 = *(_QWORD *)(v149 + 264);
      v78 = *(_QWORD *)(v149 + 272);
      v79 = *(_QWORD *)(v149 + 192);
      v80 = *(_QWORD *)(v149 + 168);
      v81 = v74;
      v82 = *(_QWORD *)(v149 + 72) + *(int *)(v147 + 48);
      v83 = v81;
      ((void (*)(uint64_t))v81)(v80);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v140 + 56))(v80, 0, 1, v77);
      (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v82, v79);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v80, 1, v77) == 1)
        goto LABEL_30;
      v85 = *(_QWORD *)(v149 + 272);
      v84 = *(_QWORD *)(v149 + 280);
      v86 = *(_QWORD *)(v149 + 264);
      v87 = *(_QWORD *)(v149 + 128);
      v88 = *(_QWORD *)(v149 + 80);
      v89 = *(_QWORD *)(v149 + 64);
      v83(v84, *(_QWORD *)(v149 + 168), v86);
      sub_1000F46EC(v84, v89);
      sub_1000087A0(v89, &qword_100265588);
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
      sub_1000087A0(v88, &qword_100263338);
      v58 = v87;
      v59 = &qword_100263340;
LABEL_31:
      result = sub_1000087A0(v58, v59);
      v53 = v117;
      v50 = v120;
    }
    v54 = *(_QWORD *)(v149 + 264);
    v55 = *(_QWORD *)(v149 + 168);
    sub_1000087A0(*(_QWORD *)(v149 + 72), &qword_100263338);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v140 + 56))(v55, 1, 1, v54);
LABEL_30:
    v56 = *(_QWORD *)(v149 + 168);
    v57 = *(_QWORD *)(v149 + 128);
    sub_1000087A0(*(_QWORD *)(v149 + 80), &qword_100263338);
    sub_1000087A0(v57, &qword_100263340);
    v58 = v56;
    v59 = &qword_100260950;
    goto LABEL_31;
  }
  v20 = *(_QWORD *)&v103[2 * v22];
  if (v20)
  {
    v21 = v8 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v21 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v21 >= v105)
      goto LABEL_26;
    v20 = *(_QWORD *)&v103[2 * v21];
    ++v22;
    if (v20)
      goto LABEL_22;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_10015F584(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t result;
  uint64_t v69;
  char v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  int v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v75 = a3;
  v78 = a2;
  v88 = type metadata accessor for Handle(0);
  v73 = *(_QWORD *)(v88 - 8);
  v4 = __chkstk_darwin(v88);
  v87 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v86 = (char *)&v71 - v6;
  v82 = type metadata accessor for FriendshipAction(0);
  v93 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v74 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = (char *)type metadata accessor for HandleType(0);
  v81 = *((_QWORD *)v83 - 1);
  v8 = __chkstk_darwin(v83);
  v80 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v77 = (char *)&v71 - v10;
  v11 = sub_100037A5C(&qword_100263340);
  v12 = __chkstk_darwin(v11);
  v72 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v79 = (char *)&v71 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v71 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v71 - v20;
  v22 = *(int *)(v19 + 48);
  v85 = (void (*)(char *, uint64_t))v19;
  v23 = (char *)&v71 + v22 - v20;
  v24 = type metadata accessor for Friend(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v26(v21, a1, v24);
  v27 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
  v84 = v23;
  v28 = v82;
  v27(v23, v78, v82);
  v29 = &v18[*(int *)(v11 + 48)];
  v78 = v29;
  v26(v18, (uint64_t)v21, v24);
  v30 = ((uint64_t (*)(char *, char *, uint64_t))v27)(v29, v23, v28);
  v31 = v77;
  Friend.type.getter(v30);
  v71 = *(void (**)(char *, uint64_t))(v25 + 8);
  v71(v18, v24);
  v33 = v80;
  v32 = v81;
  v34 = (uint64_t)v83;
  (*(void (**)(char *, _QWORD, char *))(v81 + 104))(v80, enum case for HandleType.pendingOffer(_:), v83);
  v76 = static HandleType.== infix(_:_:)(v31, v33);
  v35 = *(void (**)(char *, uint64_t))(v32 + 8);
  v35(v33, v34);
  v35(v31, v34);
  v36 = *(void (**)(char *, uint64_t))(v93 + 8);
  v36(v78, v28);
  v37 = (uint64_t)v79;
  v38 = &v79[*((int *)v85 + 12)];
  v83 = v21;
  v80 = (char *)v26;
  v81 = v24;
  v26(v79, (uint64_t)v21, v24);
  v39 = v28;
  v78 = (char *)v27;
  v27(v38, v84, v28);
  if ((v76 & 1) == 0)
  {
    sub_1000087A0(v37, &qword_100263340);
    goto LABEL_10;
  }
  v40 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v74, enum case for FriendshipAction.add(_:), v28);
  v41 = sub_100004EA8(&qword_1002655C0, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipAction, (uint64_t)&protocol conformance descriptor for FriendshipAction);
  dispatch thunk of RawRepresentable.rawValue.getter(v39, v41);
  dispatch thunk of RawRepresentable.rawValue.getter(v39, v41);
  v42 = v92;
  v43 = v90;
  v77 = (char *)v36;
  if (v91 == v89 && v92 == v90)
  {
    swift_bridgeObjectRelease_n(v92, 2);
    v36(v40, v39);
    sub_1000087A0(v37, &qword_100263340);
    v45 = v86;
    v44 = v87;
    v46 = v75;
    goto LABEL_7;
  }
  v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v91, v92, v89, v90, 0);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v43);
  v36(v40, v39);
  sub_1000087A0(v37, &qword_100263340);
  v45 = v86;
  v44 = v87;
  v46 = v75;
  if ((v47 & 1) == 0)
  {
LABEL_10:
    sub_1000087A0((uint64_t)v83, &qword_100263340);
    return 1;
  }
LABEL_7:
  v48 = v72;
  v49 = &v72[*((int *)v85 + 12)];
  v50 = v81;
  ((void (*)(char *, char *, unint64_t))v80)(v72, v83, v81);
  v51 = ((uint64_t (*)(char *, char *, uint64_t))v78)(v49, v84, v39);
  Friend.handle.getter(v51);
  v71(v48, v50);
  v52 = *(_QWORD *)(v46 + 16);
  if (!v52)
  {
    v60 = 1;
    v61 = (void (*)(char *, uint64_t))v77;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v45, v88);
LABEL_23:
    sub_1000087A0((uint64_t)v83, &qword_100263340);
    v61(v49, v39);
    return v60;
  }
  v84 = v49;
  v53 = v73;
  v81 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
  v54 = v44;
  v55 = v44;
  v56 = v88;
  v93 = *(_QWORD *)(v73 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v93)(v54, v46 + v81, v88);
  v57 = sub_100004EA8(&qword_1002605F0, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  swift_bridgeObjectRetain(v46);
  v58 = dispatch thunk of static Equatable.== infix(_:_:)(v55, v45, v56, v57);
  v59 = *(void (**)(char *, uint64_t))(v53 + 8);
  v59(v55, v56);
  if ((v58 & 1) != 0)
  {
    swift_bridgeObjectRelease(v46);
    v60 = 0;
    goto LABEL_14;
  }
  if (v52 == 1)
  {
    swift_bridgeObjectRelease(v46);
    v60 = 1;
LABEL_14:
    v61 = (void (*)(char *, uint64_t))v77;
    v49 = v84;
LABEL_22:
    v59(v45, v88);
    goto LABEL_23;
  }
  v85 = v59;
  v62 = v46;
  v63 = *(_QWORD *)(v73 + 72);
  v64 = v62 + v63 + v81;
  v65 = 1;
  v67 = v87;
  v66 = v88;
  while (1)
  {
    result = ((uint64_t (*)(char *, unint64_t, uint64_t))v93)(v67, v64, v66);
    v69 = v65 + 1;
    if (__OFADD__(v65, 1))
      break;
    v70 = dispatch thunk of static Equatable.== infix(_:_:)(v67, v45, v66, v57);
    v85(v67, v66);
    if ((v70 & 1) != 0)
    {
      swift_bridgeObjectRelease(v75);
      v60 = 0;
      v39 = v82;
      v45 = v86;
      goto LABEL_21;
    }
    ++v65;
    v64 += v63;
    v45 = v86;
    if (v69 == v52)
    {
      swift_bridgeObjectRelease(v75);
      v60 = 1;
      v39 = v82;
LABEL_21:
      v61 = (void (*)(char *, uint64_t))v77;
      v49 = v84;
      v59 = v85;
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10015FC14(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[4] = a1;
  v2[5] = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v2[6] = v3;
  *v3 = v2;
  v3[1] = sub_10015FC60;
  return daemon.getter();
}

uint64_t sub_10015FC60(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  *(_QWORD *)(*v1 + 56) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  *v6 = v5;
  v6[1] = sub_10015FD48;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10015FD48(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[8];
  v5 = *v2;
  v5[9] = a1;
  v5[10] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10015FE5C, v5[5], 0);
  swift_release(v5[7]);
  v7 = (uint64_t **)swift_task_alloc(dword_10026089C);
  v5[11] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_10015FDF4;
  return sub_10005A130(v5[4]);
}

uint64_t sub_10015FDF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v4 = sub_10016004C;
  else
    v4 = sub_10016CF9C;
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_10015FE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 56));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager storeIntoLocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016004C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 72));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager storeIntoLocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016023C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[4] = a1;
  v2[5] = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v2[6] = v3;
  *v3 = v2;
  v3[1] = sub_100160288;
  return daemon.getter();
}

uint64_t sub_100160288(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  *(_QWORD *)(*v1 + 56) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  *v6 = v5;
  v6[1] = sub_100160370;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100160370(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[8];
  v5 = *v2;
  v5[9] = a1;
  v5[10] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1001604B4, v5[5], 0);
  swift_release(v5[7]);
  v7 = (uint64_t **)swift_task_alloc(dword_1002608CC);
  v5[11] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_10016041C;
  return sub_10005A848(v5[4]);
}

uint64_t sub_10016041C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v4 = sub_1001606A4;
  else
    v4 = sub_100160484;
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_100160484()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001604B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 56));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager update LocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001606A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 72));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager update LocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100160894(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a1;
  v3 = type metadata accessor for Handle(0);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  v4 = __chkstk_darwin(v3);
  v38 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v35 = (char *)&v34 - v6;
  v7 = sub_100037A5C(&qword_100263340);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v34 - v12;
  v14 = *(int *)(v11 + 48);
  v15 = (char *)&v34 + v14 - v12;
  v37 = v15;
  v34 = a2 + v14;
  v16 = type metadata accessor for Friend(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v13, a2, v16);
  v19 = type metadata accessor for FriendshipAction(0);
  v36 = *(_QWORD *)(v19 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v21 = v20(v15, v34, v19);
  v22 = v35;
  Friend.handle.getter(v21);
  v23 = *(void (**)(char *, uint64_t))(v17 + 8);
  v23(v13, v16);
  v24 = *(int *)(v7 + 48);
  v25 = &v10[v24];
  v26 = v39 + v24;
  ((void (*)(char *))v18)(v10);
  v27 = v20(v25, v26, v19);
  v28 = v38;
  Friend.handle.getter(v27);
  v23(v10, v16);
  LOBYTE(v26) = static Handle.== infix(_:_:)(v22, v28);
  v29 = *(void (**)(char *, uint64_t))(v40 + 8);
  v30 = v28;
  v31 = v41;
  v29(v30, v41);
  v29(v22, v31);
  v32 = *(void (**)(char *, uint64_t))(v36 + 8);
  v32(v25, v19);
  v32(v37, v19);
  return v26 & 1;
}

uint64_t sub_100160AB4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  void (*v47)(char *, uint64_t);
  uint64_t (*v49)(char *, uint64_t);
  char *v50;
  char *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;

  v52 = a3;
  v64 = a2;
  v4 = type metadata accessor for HandleType(0);
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  v5 = __chkstk_darwin(v4);
  v51 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v50 = (char *)&v49 - v7;
  v8 = type metadata accessor for Handle(0);
  v62 = *(void (**)(char *, uint64_t))(v8 - 8);
  v63 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v58 = (char *)&v49 - v12;
  v60 = sub_100037A5C(&qword_100263340);
  v13 = __chkstk_darwin(v60);
  v61 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v49 - v16;
  v18 = *(int *)(v15 + 48);
  v19 = (char *)&v49 + v18 - v16;
  v55 = v19;
  v59 = a1;
  v20 = a1 + v18;
  v57 = a1 + v18;
  v21 = type metadata accessor for Friend(0);
  v22 = *(_QWORD *)(v21 - 8);
  v56 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v56(v17, a1, v21);
  v23 = type metadata accessor for FriendshipAction(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v26 = v25(v19, v20, v23);
  v27 = v58;
  Friend.handle.getter(v26);
  v49 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
  v28 = v49(v17, v21);
  Friend.handle.getter(v28);
  LODWORD(v64) = static Handle.== infix(_:_:)(v27, v11);
  v29 = (void (*)(char *, uint64_t))*((_QWORD *)v62 + 1);
  v30 = v11;
  v31 = v63;
  v29(v30, v63);
  v32 = (uint64_t)v61;
  v29(v27, v31);
  v33 = *(void (**)(char *, uint64_t))(v24 + 8);
  v34 = (void (*)(uint64_t, uint64_t, uint64_t))v56;
  v35 = v60;
  v62 = v33;
  v33(v55, v23);
  v36 = v32 + *(int *)(v35 + 48);
  v34(v32, v59, v21);
  v63 = v23;
  v37 = v23;
  v38 = v25;
  v25((char *)v36, v57, v37);
  if ((v64 & 1) != 0)
  {
    v39 = &v17[*(int *)(v35 + 48)];
    v34((uint64_t)v17, v32, v21);
    v40 = v63;
    v41 = v38(v39, v36, v63);
    v42 = v50;
    Friend.type.getter(v41);
    v49(v17, v21);
    v43 = v53;
    v44 = v51;
    v45 = v54;
    (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v51, *v52, v54);
    v46 = static HandleType.== infix(_:_:)(v42, v44);
    v47 = *(void (**)(char *, uint64_t))(v43 + 8);
    v47(v44, v45);
    v47(v42, v45);
    sub_1000087A0(v32, &qword_100263340);
    v62(v39, v40);
  }
  else
  {
    sub_1000087A0(v32, &qword_100263340);
    v46 = 0;
  }
  return v46 & 1;
}

id sub_100160E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  Class isa;
  Class v19;
  NSString v20;
  id v21;

  v8 = v7;
  if (a2)
  {
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v14 = 0;
  }
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  isa = 0;
  if (v17(a4, 1, v15) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a4, v15);
  }
  if (v17(a5, 1, v15) != 1)
  {
    v19 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a5, v15);
    if (a7)
      goto LABEL_8;
LABEL_10:
    v20 = 0;
    goto LABEL_11;
  }
  v19 = 0;
  if (!a7)
    goto LABEL_10;
LABEL_8:
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a7);
LABEL_11:
  v21 = objc_msgSend(v8, "initWithHandle:actionType:eventTimestampBegin:eventTimestampEnd:bundleID:", v14, a3, isa, v19, v20);

  return v21;
}

unint64_t sub_100160F64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100160FC8(a1, a2, v5);
}

unint64_t sub_100160FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_10016110C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100032264(a1, a2, a3, a4, &qword_1002655B8, type metadata accessor for FriendRecord);
}

uint64_t sub_100161120(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100032264(a1, a2, a3, a4, &qword_100262658, (uint64_t (*)(_QWORD))&type metadata accessor for Handle);
}

uint64_t sub_100161134(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100037A5C(&qword_100265648);
  v11 = *(_QWORD *)(sub_100037A5C(&qword_1002615D8) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100037A5C(&qword_1002615D8);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10016BC90(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_100161344(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100032264(a1, a2, a3, a4, &qword_100265600, (uint64_t (*)(_QWORD))&type metadata accessor for LocatePriority);
}

_QWORD *sub_100161358(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100037A5C(&qword_100265650);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10016BDAC(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100161464(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100032264(a1, a2, a3, a4, &qword_100261E78, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_100161478(uint64_t a1, uint64_t a2)
{
  return sub_1001614B4(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for Location, &qword_100263350);
}

Swift::Int sub_10016148C(uint64_t a1, uint64_t a2)
{
  return sub_1001618C0(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for IDSStatus, &qword_100263450);
}

uint64_t sub_1001614A0(uint64_t a1, uint64_t a2)
{
  return sub_1001614B4(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for FriendshipRequestStatus, &qword_100263428);
}

uint64_t sub_1001614B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[4];
  int v50;
  uint64_t *v51;
  int64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;

  v6 = v4;
  v9 = a3(0);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  __chkstk_darwin(v9);
  v57 = &v49[-v10];
  v11 = type metadata accessor for Handle(0);
  v56 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_100037A5C(a4);
  v15 = static _DictionaryStorage.resize(original:capacity:move:)(v14, a1, a2);
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
  {
    v46 = v14;
LABEL_44:
    result = swift_release(v46);
    *v6 = v16;
    return result;
  }
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v53 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v51 = v6;
  v52 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  v55 = v14;
  result = swift_retain(v14);
  v23 = 0;
  v50 = a2;
  v24 = 16;
  if ((a2 & 1) != 0)
    v24 = 32;
  v54 = v24;
  v25 = v24;
  while (1)
  {
    if (v20)
    {
      v27 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v28 = v27 | (v23 << 6);
      goto LABEL_26;
    }
    v29 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v29 >= v52)
    {
      v47 = v55;
      swift_release(v55);
      v6 = v51;
      v30 = v53;
      if ((v50 & 1) != 0)
      {
LABEL_39:
        v48 = 1 << *(_BYTE *)(v47 + 32);
        if (v48 >= 64)
          bzero(v30, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v30 = -1 << v48;
        *(_QWORD *)(v47 + 16) = 0;
      }
LABEL_43:
      v46 = v47;
      goto LABEL_44;
    }
    v30 = v53;
    v31 = v53[v29];
    ++v23;
    if (!v31)
    {
      v23 = v29 + 1;
      if (v29 + 1 >= v52)
        goto LABEL_36;
      v31 = v53[v23];
      if (!v31)
        break;
    }
LABEL_25:
    v20 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v23 << 6);
LABEL_26:
    v33 = v55;
    v34 = *(_QWORD *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v25))(v13, *(_QWORD *)(v55 + 48) + v34 * v28, v11);
    v35 = *(_QWORD *)(v33 + 56);
    v36 = *(_QWORD *)(v58 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v58 + v25))(v57, v35 + v36 * v28, v59);
    v37 = *(_QWORD *)(v16 + 40);
    v38 = sub_100004EA8(&qword_1002605F8, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    v39 = -1 << *(_BYTE *)(v16 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v21 + 8 * v41);
      }
      while (v45 == -1);
      v26 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v21 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))(*(_QWORD *)(v16 + 48) + v34 * v26, v13, v11);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v58 + 32))(*(_QWORD *)(v16 + 56) + v36 * v26, v57, v59);
    ++*(_QWORD *)(v16 + 16);
  }
  v32 = v29 + 2;
  if (v32 >= v52)
  {
LABEL_36:
    v47 = v55;
    swift_release(v55);
    v6 = v51;
    if ((v50 & 1) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v31 = v53[v32];
  if (v31)
  {
    v23 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v23 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v23 >= v52)
      goto LABEL_36;
    v31 = v53[v23];
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

Swift::Int sub_1001618AC(uint64_t a1, uint64_t a2)
{
  return sub_1001618C0(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for Handle, &qword_100263430);
}

Swift::Int sub_1001618C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Int result;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  int v47;
  char *v48;
  uint64_t v49;
  _QWORD v50[9];

  v6 = v4;
  v49 = a3(0);
  v9 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v48 = (char *)&v43 - v10;
  v11 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_100037A5C(a4);
  v47 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v44 = v6;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v46 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v45 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain(v11);
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_24;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45)
      goto LABEL_36;
    v26 = v46[v25];
    ++v20;
    if (!v26)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_36;
      v26 = v46[v20];
      if (!v26)
        break;
    }
LABEL_23:
    v17 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v11 + 56);
    v29 = v11;
    v30 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v24);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v9 + 72);
    v34 = v28 + v33 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v48, v34, v49);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v48, v34, v49);
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v50, *(_QWORD *)(v13 + 40));
    String.hash(into:)(v50, v32, v31);
    result = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v13 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      v21 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v21);
    *v22 = v32;
    v22[1] = v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v13 + 56) + v33 * v21, v48, v49);
    ++*(_QWORD *)(v13 + 16);
    v11 = v29;
  }
  v27 = v25 + 2;
  if (v27 < v45)
  {
    v26 = v46[v27];
    if (!v26)
    {
      while (1)
      {
        v20 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_43;
        if (v20 >= v45)
          goto LABEL_36;
        v26 = v46[v20];
        ++v27;
        if (v26)
          goto LABEL_23;
      }
    }
    v20 = v27;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v11);
  v6 = v44;
  if ((v47 & 1) != 0)
  {
    v42 = 1 << *(_BYTE *)(v11 + 32);
    if (v42 >= 64)
      bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v46 = -1 << v42;
    *(_QWORD *)(v11 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v11);
  *v6 = v13;
  return result;
}

uint64_t sub_100161C24(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[4];
  int v50;
  uint64_t *v51;
  int64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;

  v6 = v4;
  v9 = sub_100037A5C(a3);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  __chkstk_darwin(v9);
  v57 = &v49[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for UUID(0);
  v56 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_100037A5C(a4);
  v15 = static _DictionaryStorage.resize(original:capacity:move:)(v14, a1, a2);
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
  {
    v46 = v14;
LABEL_44:
    result = swift_release(v46);
    *v6 = v16;
    return result;
  }
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v53 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v51 = v6;
  v52 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  v55 = v14;
  result = swift_retain(v14);
  v23 = 0;
  v50 = a2;
  v24 = 16;
  if ((a2 & 1) != 0)
    v24 = 32;
  v54 = v24;
  v25 = v24;
  while (1)
  {
    if (v20)
    {
      v27 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v28 = v27 | (v23 << 6);
      goto LABEL_26;
    }
    v29 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v29 >= v52)
    {
      v47 = v55;
      swift_release(v55);
      v6 = v51;
      v30 = v53;
      if ((v50 & 1) != 0)
      {
LABEL_39:
        v48 = 1 << *(_BYTE *)(v47 + 32);
        if (v48 >= 64)
          bzero(v30, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v30 = -1 << v48;
        *(_QWORD *)(v47 + 16) = 0;
      }
LABEL_43:
      v46 = v47;
      goto LABEL_44;
    }
    v30 = v53;
    v31 = v53[v29];
    ++v23;
    if (!v31)
    {
      v23 = v29 + 1;
      if (v29 + 1 >= v52)
        goto LABEL_36;
      v31 = v53[v23];
      if (!v31)
        break;
    }
LABEL_25:
    v20 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v23 << 6);
LABEL_26:
    v33 = v55;
    v34 = *(_QWORD *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v25))(v13, *(_QWORD *)(v55 + 48) + v34 * v28, v11);
    v35 = *(_QWORD *)(v33 + 56);
    v36 = *(_QWORD *)(v58 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v58 + v25))(v57, v35 + v36 * v28, v59);
    v37 = *(_QWORD *)(v16 + 40);
    v38 = sub_100004EA8(&qword_1002676A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    v39 = -1 << *(_BYTE *)(v16 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v21 + 8 * v41);
      }
      while (v45 == -1);
      v26 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v21 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))(*(_QWORD *)(v16 + 48) + v34 * v26, v13, v11);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v58 + 32))(*(_QWORD *)(v16 + 56) + v36 * v26, v57, v59);
    ++*(_QWORD *)(v16 + 16);
  }
  v32 = v29 + 2;
  if (v32 >= v52)
  {
LABEL_36:
    v47 = v55;
    swift_release(v55);
    v6 = v51;
    if ((v50 & 1) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v31 = v53[v32];
  if (v31)
  {
    v23 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v23 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v23 >= v52)
      goto LABEL_36;
    v31 = v53[v23];
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_100162020(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  int64_t v55;
  char *v56;
  uint64_t v57;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_100263638);
  v54 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v56 = v9;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v51 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v49 = v2;
  v50 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  v52 = v10;
  v53 = v7;
  v57 = v6;
  while (1)
  {
    if (v16)
    {
      v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_24;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v50)
      break;
    v25 = v51;
    v26 = v51[v24];
    ++v19;
    if (!v26)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v50)
        goto LABEL_36;
      v26 = v51[v19];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v50)
        {
LABEL_36:
          swift_release(v10);
          v3 = v49;
          if ((v54 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v51[v27];
        if (!v26)
        {
          while (1)
          {
            v19 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v19 >= v50)
              goto LABEL_36;
            v26 = v51[v19];
            ++v27;
            if (v26)
              goto LABEL_23;
          }
        }
        v19 = v27;
      }
    }
LABEL_23:
    v16 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_24:
    v28 = v7[9];
    v29 = *(_QWORD *)(v10 + 48) + v28 * v23;
    v55 = v19;
    if ((v54 & 1) != 0)
    {
      v30 = (void (*)(char *, unint64_t, uint64_t))v7[4];
      v31 = v57;
      v30(v56, v29, v57);
      v32 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 24 * v23);
      v33 = *v32;
      v34 = v32[1];
      v35 = v32[2];
    }
    else
    {
      v36 = (void (*)(char *, unint64_t, uint64_t))v7[2];
      v31 = v57;
      v36(v56, v29, v57);
      v37 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 24 * v23);
      v33 = *v37;
      v34 = v37[1];
      v35 = v37[2];
      swift_retain(v34);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v33);
    }
    v38 = *(_QWORD *)(v12 + 40);
    v39 = sub_100004EA8(&qword_1002676A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v38, v31, v39);
    v40 = -1 << *(_BYTE *)(v12 + 32);
    v41 = result & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v17 + 8 * (v41 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v17 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
      v7 = v53;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v40) >> 6;
      v7 = v53;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v45 = v42 == v44;
        if (v42 == v44)
          v42 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v17 + 8 * v42);
      }
      while (v46 == -1);
      v20 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v7[4])(*(_QWORD *)(v12 + 48) + v28 * v20, v56, v57);
    v21 = (_QWORD *)(*(_QWORD *)(v12 + 56) + 24 * v20);
    *v21 = v33;
    v21[1] = v34;
    v21[2] = v35;
    ++*(_QWORD *)(v12 + 16);
    v10 = v52;
    v19 = v55;
  }
  swift_release(v10);
  v3 = v49;
  v25 = v51;
  if ((v54 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v47 = 1 << *(_BYTE *)(v10 + 32);
  if (v47 >= 64)
    bzero(v25, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v47;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

Swift::Int sub_100162404(uint64_t a1, uint64_t a2)
{
  return sub_100030FDC(a1, a2, &qword_100263640);
}

uint64_t sub_100162410(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  __int128 v40[3];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_100263408);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v36)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v36)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = (__int128 *)(*(_QWORD *)(v5 + 56) + 48 * v18);
    if ((v38 & 1) != 0)
    {
      sub_1000DC028(v26, v40);
    }
    else
    {
      sub_1000DBFF4((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v25, v24);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v25;
    v16[1] = v24;
    result = (uint64_t)sub_1000DC028(v40, (_OWORD *)(*(_QWORD *)(v8 + 56) + 48 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100162734(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  __int128 v40[3];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_100263418);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v36)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v36)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = (__int128 *)(*(_QWORD *)(v5 + 56) + 48 * v18);
    if ((v38 & 1) != 0)
    {
      sub_1000DBF98(v26, v40);
    }
    else
    {
      sub_1000DBF64((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v25, v24);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v25;
    v16[1] = v24;
    result = (uint64_t)sub_1000DBF98(v40, (_OWORD *)(*(_QWORD *)(v8 + 56) + 48 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100162A58(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_100263630);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100162D64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[4];
  int v48;
  uint64_t *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v2;
  v6 = type metadata accessor for FriendshipAction(0);
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  __chkstk_darwin(v6);
  v55 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Friend(0);
  v54 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v12 = a1;
  else
    v12 = *(_QWORD *)(*v3 + 24);
  sub_100037A5C(&qword_100263378);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v11, v12, a2);
  v14 = v13;
  if (!*(_QWORD *)(v11 + 16))
  {
    v44 = v11;
LABEL_45:
    result = swift_release(v44);
    *v3 = v14;
    return result;
  }
  v15 = 1 << *(_BYTE *)(v11 + 32);
  v16 = *(_QWORD *)(v11 + 64);
  v51 = (_QWORD *)(v11 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v49 = v3;
  v50 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  v53 = v11;
  result = swift_retain(v11);
  v21 = 0;
  v48 = a2;
  v22 = 16;
  if ((a2 & 1) != 0)
    v22 = 32;
  v52 = v22;
  v23 = v22;
  while (1)
  {
    if (v18)
    {
      v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v26 = v25 | (v21 << 6);
      goto LABEL_27;
    }
    v27 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v27 >= v50)
    {
      v45 = v53;
      swift_release(v53);
      v3 = v49;
      v28 = v51;
      if ((v48 & 1) != 0)
      {
LABEL_40:
        v46 = 1 << *(_BYTE *)(v45 + 32);
        if (v46 >= 64)
          bzero(v28, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v28 = -1 << v46;
        *(_QWORD *)(v45 + 16) = 0;
      }
LABEL_44:
      v44 = v45;
      goto LABEL_45;
    }
    v28 = v51;
    v29 = v51[v27];
    ++v21;
    if (!v29)
    {
      v21 = v27 + 1;
      if (v27 + 1 >= v50)
        goto LABEL_37;
      v29 = v51[v21];
      if (!v29)
        break;
    }
LABEL_26:
    v18 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_27:
    v31 = v53;
    v32 = *(_QWORD *)(v54 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v54 + v23))(v10, *(_QWORD *)(v53 + 48) + v32 * v26, v8);
    v33 = *(_QWORD *)(v31 + 56);
    v34 = *(_QWORD *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v23))(v55, v33 + v34 * v26, v57);
    v35 = *(_QWORD *)(v14 + 40);
    v36 = sub_100004EA8(&qword_1002608F8, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
    v37 = -1 << *(_BYTE *)(v14 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v19 + 8 * v39);
      }
      while (v43 == -1);
      v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v19 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v54 + 32))(*(_QWORD *)(v14 + 48) + v32 * v24, v10, v8);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))(*(_QWORD *)(v14 + 56) + v34 * v24, v55, v57);
    ++*(_QWORD *)(v14 + 16);
  }
  v30 = v27 + 2;
  if (v30 >= v50)
  {
LABEL_37:
    v45 = v53;
    swift_release(v53);
    v3 = v49;
    if ((v48 & 1) != 0)
      goto LABEL_40;
    goto LABEL_44;
  }
  v29 = v51[v30];
  if (v29)
  {
    v21 = v30;
    goto LABEL_26;
  }
  while (1)
  {
    v21 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v21 >= v50)
      goto LABEL_37;
    v29 = v51[v21];
    ++v30;
    if (v29)
      goto LABEL_26;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_10016315C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_1002634D0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10001AEAC(v25, v38);
      }
      else
      {
        sub_10002BB54((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_10001AEAC(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100163458(uint64_t a1, uint64_t a2)
{
  return sub_10016346C(a1, a2, &qword_1002634A0, (void (*)(unint64_t, _BYTE *))sub_10001A4CC);
}

uint64_t sub_10016346C(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(unint64_t, _BYTE *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  int v45;
  void (*v46)(unint64_t, _BYTE *);
  _BYTE v47[40];

  v46 = a4;
  v6 = v4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_100037A5C(a3);
  v45 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v44 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v42 = v6;
  v43 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  result = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v43)
      break;
    v27 = v44;
    v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v43)
        goto LABEL_36;
      v28 = v44[v22];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_36:
          swift_release(v13);
          v6 = v42;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            v22 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v22 >= v43)
              goto LABEL_36;
            v28 = v44[v22];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v22 = v29;
      }
    }
LABEL_23:
    v19 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_24:
    v30 = *(_QWORD *)(v10 + 72);
    v31 = *(_QWORD *)(v13 + 48) + v30 * v25;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v12, v31, v9);
      v46(*(_QWORD *)(v13 + 56) + 40 * v25, v47);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, v31, v9);
      sub_100043ECC(*(_QWORD *)(v13 + 56) + 40 * v25, (uint64_t)v47);
    }
    v32 = *(_QWORD *)(v15 + 40);
    v33 = sub_100004EA8(&qword_1002676A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v34 = -1 << *(_BYTE *)(v15 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v20 + 8 * (v35 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v20 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v20 + 8 * v36);
      }
      while (v40 == -1);
      v23 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v30 * v23, v12, v9);
    result = ((uint64_t (*)(_BYTE *, unint64_t))v46)(v47, *(_QWORD *)(v15 + 56) + 40 * v23);
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release(v13);
  v6 = v42;
  v27 = v44;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v13 + 32);
  if (v41 >= 64)
    bzero(v27, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v41;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_43:
  result = swift_release(v13);
  *v6 = v15;
  return result;
}

uint64_t sub_100163824(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1000F3F4C(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_QWORD *)(v20[7] + 40 * v14);
        sub_10002BB90(v21);
        return sub_10001A4CC(a1, (uint64_t)v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1000F5EBC();
      goto LABEL_7;
    }
    sub_10016346C(v17, a3 & 1, &qword_100263648, (void (*)(unint64_t, _BYTE *))sub_10001A4CC);
    v23 = sub_1000F3F4C(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10016485C(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_1001639B4(uint64_t a1, uint64_t a2, char a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10002FF38(a1, a2);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a3 & 1) == 0)
  {
    sub_1000F6234();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(double *)(v18[7] + 8 * v12) = a4;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    *(double *)(v18[7] + 8 * v12) = a4;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a2);
      return;
    }
    goto LABEL_14;
  }
  sub_10002CC24(v15, a3 & 1);
  v19 = sub_10002FF38(a1, a2);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_100163B08(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100163B40(a1, a2, a3, (void (*)(void))sub_1000F63E0, (uint64_t (*)(_QWORD))&type metadata accessor for Location, &qword_100263350);
}

uint64_t sub_100163B24(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100163B40(a1, a2, a3, (void (*)(void))sub_1000F6410, (uint64_t (*)(_QWORD))&type metadata accessor for FriendshipRequestStatus, &qword_100263428);
}

uint64_t sub_100163B40(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), uint64_t (*a5)(_QWORD), uint64_t *a6)
{
  _QWORD *v6;
  _QWORD **v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  void (*v32)(void);
  uint64_t *v33;
  uint64_t v34;

  v32 = a4;
  v33 = a6;
  v8 = (_QWORD **)v6;
  v34 = a1;
  v11 = type metadata accessor for Handle(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)*v6;
  v17 = sub_10001CBC8(a2);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = v15[3];
    if (v22 >= v20 && (a3 & 1) != 0)
    {
LABEL_7:
      v23 = a5;
      v24 = *v8;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v25 = v24[7];
        v26 = v23(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v17, v34, v26);
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a3 & 1) == 0)
    {
      v32();
      goto LABEL_7;
    }
    v28 = a3 & 1;
    v23 = a5;
    sub_1001614B4(v20, v28, a5, v33);
    v29 = sub_10001CBC8(a2);
    if ((v21 & 1) == (v30 & 1))
    {
      v17 = v29;
      v24 = *v8;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
      return sub_100164BB4(v17, (uint64_t)v14, v34, v24, (uint64_t (*)(_QWORD))&type metadata accessor for Handle, v23);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
  __break(1u);
  return result;
}

void sub_100163CF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10002FF38(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for Handle(0);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, a1, v20);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000F642C();
      goto LABEL_7;
    }
    sub_1001618C0(v15, a4 & 1, (uint64_t (*)(_QWORD))&type metadata accessor for Handle, &qword_100263430);
    v21 = sub_10002FF38(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100164900(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_100163E40(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001646B0(a1, a2, a3, (void (*)(void))sub_1000F669C, &qword_100261570, &qword_1002634A8);
}

uint64_t sub_100163E5C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001646B0(a1, a2, a3, (void (*)(void))sub_1000F66B0, &qword_100261D28, &qword_1002634B0);
}

uint64_t sub_100163E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  v6 = (_QWORD **)v5;
  v30 = a2;
  v31 = a3;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_1000F3F4C(a4);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a5 & 1) != 0)
  {
LABEL_7:
    v22 = *v6;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (uint64_t *)(v22[7] + 24 * v16);
      v24 = *v23;
      v25 = v23[1];
      swift_bridgeObjectRelease(v23[2]);
      swift_bridgeObjectRelease(v24);
      result = swift_release(v25);
      v27 = v30;
      *v23 = a1;
      v23[1] = v27;
      v23[2] = v31;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a5 & 1) == 0)
  {
    sub_1000F6B48();
    goto LABEL_7;
  }
  sub_100162020(v19, a5 & 1);
  v28 = sub_1000F3F4C(a4);
  if ((v20 & 1) != (v29 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }
  v16 = v28;
  v22 = *v6;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  return sub_100164990(v16, (uint64_t)v13, a1, v30, v31, v22);
}

uint64_t sub_100164004(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for Handle(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10001CBC8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1000F6918();
    goto LABEL_7;
  }
  sub_10001CFE4(v17, a3 & 1);
  v23 = sub_10001CBC8(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100164A44(v14, (uint64_t)v11, a1, v20);
}

void sub_100164160(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10002FF38(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        sub_1000DC0AC((uint64_t)a1, v18[7] + 48 * v12);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000F6DF4();
      goto LABEL_7;
    }
    sub_100162410(v15, a4 & 1);
    v19 = sub_10002FF38(a2, a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = v19;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100164ADC(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_100164288(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10002FF38(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        sub_10016CF48((uint64_t)a1, v18[7] + 48 * v12);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000F6FDC();
      goto LABEL_7;
    }
    sub_100162734(v15, a4 & 1);
    v19 = sub_10002FF38(a2, a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = v19;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100164B48(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1001643B0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for Friend(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1000F40AC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for FriendshipAction(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1000F7374();
      goto LABEL_7;
    }
    sub_100162D64(v17, a3 & 1);
    v24 = sub_1000F40AC(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100164BB4(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(_QWORD))&type metadata accessor for Friend, (uint64_t (*)(_QWORD))&type metadata accessor for FriendshipAction);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_100164548(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10002FF38(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_10002BB90(v19);
        sub_10001AEAC(a1, v19);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000F7670();
      goto LABEL_7;
    }
    sub_10016315C(v15, a4 & 1);
    v20 = sub_10002FF38(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100164C70(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_100164678(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001646B0(a1, a2, a3, (void (*)(void))sub_1000F7A0C, &qword_1002634C0, &qword_1002634C8);
}

uint64_t sub_100164694(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001646B0(a1, a2, a3, (void (*)(void))sub_1000F7C68, &qword_100263488, &qword_100263490);
}

uint64_t sub_1001646B0(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), uint64_t *a5, uint64_t *a6)
{
  _QWORD *v6;
  _QWORD **v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  void (*v32)(void);
  uint64_t *v33;
  uint64_t v34;

  v32 = a4;
  v33 = a6;
  v8 = (_QWORD **)v6;
  v34 = a1;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)*v6;
  v17 = sub_1000F3F4C(a2);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = v15[3];
    if (v22 >= v20 && (a3 & 1) != 0)
    {
LABEL_7:
      v23 = a5;
      v24 = *v8;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v25 = v24[7];
        v26 = sub_100037A5C(v23);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v17, v34, v26);
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a3 & 1) == 0)
    {
      v32();
      goto LABEL_7;
    }
    v28 = a3 & 1;
    v23 = a5;
    sub_100161C24(v20, v28, a5, v33);
    v29 = sub_1000F3F4C(a2);
    if ((v21 & 1) == (v30 & 1))
    {
      v17 = v29;
      v24 = *v8;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
      return sub_100164CD8(v17, (uint64_t)v14, v34, v24, v23);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
  __break(1u);
  return result;
}

uint64_t sub_10016485C(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_10001A4CC(a3, a4[7] + 40 * a1);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_100164900(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for Handle(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t sub_100164990(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  v12 = a6[6];
  v13 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a2, v13);
  v15 = (_QWORD *)(a6[7] + 24 * a1);
  *v15 = a3;
  v15[1] = a4;
  v15[2] = a5;
  v16 = a6[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    a6[2] = v18;
  return result;
}

uint64_t sub_100164A44(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for Handle(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_100164ADC(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1000DC028(a4, (_OWORD *)(a5[7] + 48 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *sub_100164B48(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1000DBF98(a4, (_OWORD *)(a5[7] + 48 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_100164BB4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v11 = a4[6];
  v12 = a5(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a2, v12);
  v13 = a4[7];
  v14 = a6(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * a1, a3, v14);
  v16 = a4[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    a4[2] = v18;
  return result;
}

_OWORD *sub_100164C70(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10001AEAC(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_100164CD8(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v12 = a4[7];
  v13 = sub_100037A5C(a5);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a3, v13);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

uint64_t sub_100164D94(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for Device(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100004EA8(&qword_1002619A8, v12, (uint64_t)&protocol conformance descriptor for Device);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100004EA8(&qword_100265618, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100166370((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_100164FF0(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100004EA8(&qword_1002676A0, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100004EA8(&qword_100261E80, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_10001CD90((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_10016524C(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = sub_10011D800();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_1001654C8(v7, result + 1);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_100166054(v29);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_1001662F0((uint64_t)v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10011D800();
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_1001665C4((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

Swift::Int sub_1001654C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_100037A5C(&qword_100265630);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = sub_10011D800();
      do
      {
        v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_100166054(v16 + 1);
          v4 = v23;
        }
        v9 = v22;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

uint64_t sub_1001656AC(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  unint64_t *v48;
  uint64_t v49;

  v48 = a4;
  v49 = a5;
  v7 = v5;
  v47 = a2;
  v9 = a2(0);
  v46 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - v10;
  v12 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_100037A5C(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_39;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v45 = (_QWORD *)(v12 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = v7;
  v44 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      goto LABEL_35;
    v26 = v45[v25];
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_35;
      v26 = v45[v21];
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        if (!v26)
          break;
      }
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    v28 = v12;
    v29 = *(_QWORD *)(v12 + 48);
    v30 = *(_QWORD *)(v46 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 32);
    v31(v11, v29 + v30 * v24, v9);
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_100004EA8(v48, v47, v49);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v34 = -1 << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v9);
    ++*(_QWORD *)(v14 + 16);
    v12 = v28;
  }
  v27 = v25 + 3;
  if (v27 < v44)
  {
    v26 = v45[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_41;
        if (v21 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        ++v27;
        if (v26)
          goto LABEL_25;
      }
    }
    v21 = v27;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v12);
  v7 = v43;
  v41 = 1 << *(_BYTE *)(v12 + 32);
  if (v41 > 63)
    bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v45 = -1 << v41;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
  result = swift_release(v12);
  *v7 = v14;
  return result;
}

Swift::Int sub_100165A0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100037A5C(&qword_100265540);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_100165CE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[9];

  v2 = v1;
  v4 = type metadata accessor for FriendInfoOption(0);
  v38 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_1002655B0);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v37 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v35 = v2;
  v36 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v36)
      goto LABEL_35;
    v21 = v37[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v36)
        goto LABEL_35;
      v21 = v37[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v36)
          goto LABEL_35;
        v21 = v37[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v38 + 72);
    sub_100038AE8(*(_QWORD *)(v7 + 48) + v23 * v19, (uint64_t)v6);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    v24 = type metadata accessor for HandleType(0);
    v25 = sub_100004EA8(&qword_100263710, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
    dispatch thunk of Hashable.hash(into:)(v39, v24, v25);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v9 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v14 + 8 * v28);
      }
      while (v32 == -1);
      v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_100038AE8((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v23);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 < v36)
  {
    v21 = v37[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v36)
          goto LABEL_35;
        v21 = v37[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v35;
  v33 = 1 << *(_BYTE *)(v7 + 32);
  if (v33 > 63)
    bzero(v37, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v37 = -1 << v33;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

Swift::Int sub_100166054(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100037A5C(&qword_100265630);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v30;
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t sub_1001662F0(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_100166370(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for Device(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001656AC(v12, (uint64_t (*)(uint64_t))&type metadata accessor for Device, &qword_100265620, &qword_1002619A8, (uint64_t)&protocol conformance descriptor for Device);
  }
  else
  {
    if (v11 > v10)
    {
      sub_10000D090((uint64_t (*)(_QWORD))&type metadata accessor for Device, &qword_100265620);
      goto LABEL_12;
    }
    sub_100166C9C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for Device, &qword_100265620, &qword_1002619A8, (uint64_t)&protocol conformance descriptor for Device);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100004EA8(&qword_1002619A8, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100004EA8(&qword_100265618, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_1001665C4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100166054(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_100166AF4();
      goto LABEL_14;
    }
    sub_1001672EC(v9);
  }
  v10 = *v3;
  v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = sub_10011D800();
    v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v15 = static NSObject.== infix(_:_:)(v14, a1);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v18 = static NSObject.== infix(_:_:)(v17, a1);

        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

void sub_100166738()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100037A5C(&qword_100265540);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_1001668E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for FriendInfoOption(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037A5C(&qword_1002655B0);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v6);
    *v1 = v8;
    return result;
  }
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    sub_100038AA4(*(_QWORD *)(v6 + 48) + v20, (uint64_t)v5);
    result = (void *)sub_100038AE8((uint64_t)v5, *(_QWORD *)(v8 + 48) + v20);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
    goto LABEL_28;
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100166AE0()
{
  return sub_10000D090((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1002655E8);
}

id sub_100166AF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100037A5C(&qword_100265630);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100166C9C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;

  v43 = a4;
  v44 = a5;
  v7 = v5;
  v42 = a2;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_100037A5C(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = swift_release(v13);
LABEL_37:
    *v7 = v15;
    return result;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v39 = v7;
  v40 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v41 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v41)
        goto LABEL_35;
      v27 = *(_QWORD *)(v40 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v41)
          goto LABEL_35;
        v27 = *(_QWORD *)(v40 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_25:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    v29 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(_QWORD *)(v13 + 48) + v29 * v25, v9);
    v30 = *(_QWORD *)(v15 + 40);
    v31 = sub_100004EA8(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    v32 = -1 << *(_BYTE *)(v15 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v20 + 8 * v34);
      }
      while (v38 == -1);
      v23 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v23 * v29, v12, v9);
    ++*(_QWORD *)(v15 + 16);
  }
  v28 = v26 + 3;
  if (v28 >= v41)
  {
LABEL_35:
    result = swift_release_n(v13, 2);
    v7 = v39;
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(v40 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_100166FB8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD v38[9];

  v2 = v1;
  v4 = type metadata accessor for FriendInfoOption(0);
  v37 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_1002655B0);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release(v7);
LABEL_37:
    *v2 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v34 = v2;
  v35 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v36 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v20 >= v36)
      goto LABEL_35;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v36)
        goto LABEL_35;
      v21 = *(_QWORD *)(v35 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v36)
          goto LABEL_35;
        v21 = *(_QWORD *)(v35 + 8 * v16);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v37 + 72);
    sub_100038AA4(*(_QWORD *)(v7 + 48) + v23 * v19, (uint64_t)v6);
    Hasher.init(_seed:)(v38, *(_QWORD *)(v9 + 40));
    v24 = type metadata accessor for HandleType(0);
    v25 = sub_100004EA8(&qword_100263710, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
    dispatch thunk of Hashable.hash(into:)(v38, v24, v25);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v9 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v14 + 8 * v28);
      }
      while (v32 == -1);
      v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_100038AE8((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v23);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_35:
    result = swift_release_n(v7, 2);
    v2 = v34;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v35 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v36)
      goto LABEL_35;
    v21 = *(_QWORD *)(v35 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_1001672EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100037A5C(&qword_100265630);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(_QWORD *)(v6 + 40);
    v22 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    result = NSObject._rawHashValue(seed:)(v21);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

_QWORD *sub_100167564(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100037A5C(&qword_100262658);
  v4 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = sub_10016AF04(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_100086D50(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10016767C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100037A5C(&qword_100265548);
  v4 = *(_QWORD *)(sub_100037A5C(&qword_100263340) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_100263340) - 8) + 80);
      v12 = sub_10016B1CC(&v14, (uint64_t)v8 + ((v11 + 32) & ~v11), v1, a1);
      v13 = v14;
      swift_bridgeObjectRetain(a1);
      sub_100086D50(v13);
      if (v12 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001677B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100037A5C(&qword_100261E78);
  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      swift_bridgeObjectRetain(a1);
      v11 = sub_10016ABB4(&v12, (uint64_t)v8 + v7, v1, a1);
      sub_100086D50(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned int *sub_1001678AC(uint64_t isStackAllocationSafe, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v6 = isStackAllocationSafe;
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    v12 = sub_100167A1C((unint64_t *)((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0)), v10, v6, a2, a3);
    if (v3)
      swift_willThrow(v12);
    else
      return (unsigned int *)v12;
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v11, -1);
    bzero(v13, v11);
    a2 = (unsigned int *)sub_100167A1C((unint64_t *)v13, v10, v6, a2, a3);
    swift_slowDealloc(v13, -1, -1);
  }
  return a2;
}

uint64_t sub_100167A1C(unint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(char *, unint64_t, uint64_t);
  unint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t (*v46)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  char *v79;
  char *v80;
  char *v81;
  unsigned int v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  int64_t v93;
  int v94;
  void (*v95)(char *, uint64_t, uint64_t);
  void (*v96)(char *, unint64_t, uint64_t);
  uint64_t (*v97)(char *, uint64_t);
  char *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v72 = a2;
  v73 = a1;
  v8 = type metadata accessor for HandleType(0);
  v88 = *(_QWORD *)(v8 - 8);
  v89 = v8;
  v9 = __chkstk_darwin(v8);
  v87 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v86 = (char *)&v71 - v11;
  v100 = sub_100037A5C(&qword_100263340);
  v12 = __chkstk_darwin(v100);
  v85 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v84 = (char *)&v71 - v15;
  __chkstk_darwin(v14);
  v98 = (char *)&v71 - v16;
  v17 = type metadata accessor for FriendshipAction(0);
  v99 = *(_QWORD **)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v81 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v71 - v20;
  v22 = type metadata accessor for Friend(0);
  v83 = *(_QWORD *)(v22 - 8);
  result = __chkstk_darwin(v22);
  v25 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = 0;
  v26 = 0;
  v91 = (_QWORD *)a3;
  v27 = *(_QWORD *)(a3 + 64);
  v77 = a3 + 64;
  v28 = 1 << *(_BYTE *)(a3 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v27;
  v78 = (unint64_t)(v28 + 63) >> 6;
  v82 = *a4;
  v31 = v25;
  v75 = *a5;
  v76 = result;
  v80 = v25;
  v79 = v21;
  v105 = v17;
  while (v30)
  {
    v92 = (v30 - 1) & v30;
    v93 = v26;
    v32 = __clz(__rbit64(v30)) | (v26 << 6);
LABEL_21:
    v90 = v32;
    v37 = v91;
    v38 = v83;
    v39 = *(void (**)(char *, unint64_t, uint64_t))(v83 + 16);
    v39(v31, v91[6] + *(_QWORD *)(v83 + 72) * v32, v22);
    v40 = v37[7] + v99[9] * v32;
    v41 = (void (*)(char *, unint64_t, uint64_t))v99[2];
    v41(v21, v40, v17);
    v42 = v31;
    v43 = v100;
    v44 = (uint64_t)v98;
    v45 = v21;
    v46 = (uint64_t (*)(char *, uint64_t))&v98[*(int *)(v100 + 48)];
    v95 = (void (*)(char *, uint64_t, uint64_t))v39;
    v39(v98, (unint64_t)v42, v22);
    v97 = v46;
    v41((char *)v46, (unint64_t)v45, v105);
    v96 = v41;
    v47 = *(int *)(v43 + 48);
    v48 = v84;
    v49 = &v84[v47];
    v39(v84, v44, v22);
    v50 = ((uint64_t (*)(char *, uint64_t (*)(char *, uint64_t), uint64_t))v41)(v49, v46, v105);
    v51 = v86;
    Friend.type.getter(v50);
    v52 = *(void (**)(char *, uint64_t))(v38 + 8);
    v52(v48, v22);
    v54 = v87;
    v53 = v88;
    v55 = v44;
    v56 = v22;
    v57 = v89;
    (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v87, v82, v89);
    v94 = static HandleType.== infix(_:_:)(v51, v54);
    v58 = *(void (**)(char *, uint64_t))(v53 + 8);
    v59 = v54;
    v60 = v56;
    v58(v59, v57);
    v58(v51, v57);
    v61 = v99;
    v62 = (void (*)(char *, uint64_t))v99[1];
    v62(v49, v105);
    v17 = v105;
    v63 = (uint64_t)v85;
    v64 = &v85[*(int *)(v100 + 48)];
    v95(v85, v55, v60);
    v96(v64, (unint64_t)v97, v17);
    if ((v94 & 1) != 0)
    {
      v97 = (uint64_t (*)(char *, uint64_t))v52;
      v65 = v79;
      ((void (*)(char *, _QWORD, uint64_t))v61[13])(v81, v75, v17);
      v66 = sub_100004EA8(&qword_1002655C0, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipAction, (uint64_t)&protocol conformance descriptor for FriendshipAction);
      dispatch thunk of RawRepresentable.rawValue.getter(v17, v66);
      dispatch thunk of RawRepresentable.rawValue.getter(v17, v66);
      v67 = v104;
      v68 = v102;
      if (v103 == v101 && v104 == v102)
      {
        swift_bridgeObjectRelease_n(v104, 2);
        v62(v81, v17);
        sub_1000087A0(v63, &qword_100263340);
        sub_1000087A0((uint64_t)v98, &qword_100263340);
        v21 = v65;
        v62(v65, v17);
        v31 = v80;
        v22 = v76;
        result = v97(v80, v76);
        v30 = v92;
        v26 = v93;
LABEL_27:
        *(unint64_t *)((char *)v73 + ((v90 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v90;
        if (__OFADD__(v74++, 1))
        {
          __break(1u);
          return sub_100168160(v73, v72, v74, v91);
        }
      }
      else
      {
        v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v103, v104, v101, v102, 0);
        swift_bridgeObjectRelease(v67);
        swift_bridgeObjectRelease(v68);
        v62(v81, v17);
        sub_1000087A0(v63, &qword_100263340);
        sub_1000087A0((uint64_t)v98, &qword_100263340);
        v21 = v65;
        v62(v65, v17);
        v31 = v80;
        v22 = v76;
        result = v97(v80, v76);
        v30 = v92;
        v26 = v93;
        if ((v69 & 1) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      sub_1000087A0(v63, &qword_100263340);
      sub_1000087A0((uint64_t)v98, &qword_100263340);
      v21 = v79;
      v62(v79, v17);
      v31 = v80;
      result = ((uint64_t (*)(char *, uint64_t))v52)(v80, v60);
      v22 = v60;
      v30 = v92;
      v26 = v93;
    }
  }
  v33 = v26 + 1;
  if (__OFADD__(v26, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v33 >= v78)
    return sub_100168160(v73, v72, v74, v91);
  v34 = *(_QWORD *)(v77 + 8 * v33);
  v35 = v26 + 1;
  if (v34)
    goto LABEL_20;
  v35 = v26 + 2;
  if (v26 + 2 >= v78)
    return sub_100168160(v73, v72, v74, v91);
  v34 = *(_QWORD *)(v77 + 8 * v35);
  if (v34)
    goto LABEL_20;
  v35 = v26 + 3;
  if (v26 + 3 >= v78)
    return sub_100168160(v73, v72, v74, v91);
  v34 = *(_QWORD *)(v77 + 8 * v35);
  if (v34)
  {
LABEL_20:
    v92 = (v34 - 1) & v34;
    v93 = v35;
    v32 = __clz(__rbit64(v34)) + (v35 << 6);
    goto LABEL_21;
  }
  v36 = v26 + 4;
  if (v26 + 4 >= v78)
    return sub_100168160(v73, v72, v74, v91);
  v34 = *(_QWORD *)(v77 + 8 * v36);
  if (v34)
  {
    v35 = v26 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v35 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v35 >= v78)
      return sub_100168160(v73, v72, v74, v91);
    v34 = *(_QWORD *)(v77 + 8 * v35);
    ++v36;
    if (v34)
      goto LABEL_20;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100168160(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;

  v59 = type metadata accessor for FriendshipAction(0);
  v53 = *(_QWORD *)(v59 - 8);
  v8 = __chkstk_darwin(v59);
  v58 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v52 = (char *)&v46 - v10;
  v11 = type metadata accessor for Friend(0);
  v51 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v57 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v50 = (char *)&v46 - v14;
  if (!a3)
    return (uint64_t)_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (uint64_t)a4;
  }
  sub_100037A5C(&qword_100263378);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v16 = result;
  v46 = a1;
  v47 = a2;
  if (a2 < 1)
    v17 = 0;
  else
    v17 = *a1;
  v18 = 0;
  v19 = result + 64;
  v48 = a4;
  v49 = result;
  v20 = v52;
  while (1)
  {
    v56 = a3;
    if (v17)
    {
      v54 = (v17 - 1) & v17;
      v55 = v18;
      v21 = __clz(__rbit64(v17)) | (v18 << 6);
    }
    else
    {
      v22 = v18 + 1;
      if (__OFADD__(v18, 1))
        goto LABEL_40;
      if (v22 >= v47)
        return v16;
      v23 = v46[v22];
      v24 = v18 + 1;
      if (!v23)
      {
        v24 = v18 + 2;
        if (v18 + 2 >= v47)
          return v16;
        v23 = v46[v24];
        if (!v23)
        {
          v24 = v18 + 3;
          if (v18 + 3 >= v47)
            return v16;
          v23 = v46[v24];
          if (!v23)
          {
            v25 = v18 + 4;
            if (v18 + 4 >= v47)
              return v16;
            v23 = v46[v25];
            if (!v23)
            {
              while (1)
              {
                v24 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v24 >= v47)
                  return v16;
                v23 = v46[v24];
                ++v25;
                if (v23)
                  goto LABEL_24;
              }
            }
            v24 = v18 + 4;
          }
        }
      }
LABEL_24:
      v54 = (v23 - 1) & v23;
      v55 = v24;
      v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    v26 = v50;
    v27 = v51;
    v28 = *(_QWORD *)(v51 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v50, a4[6] + v28 * v21, v11);
    v29 = a4[7];
    v30 = v53;
    v31 = *(_QWORD *)(v53 + 72);
    v32 = v29 + v31 * v21;
    v33 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v20, v32, v59);
    v34 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v34(v57, v26, v11);
    v35 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v35(v58, v20, v33);
    v16 = v49;
    v36 = *(_QWORD *)(v49 + 40);
    v37 = sub_100004EA8(&qword_1002608F8, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v11, v37);
    v38 = -1 << *(_BYTE *)(v16 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v19 + 8 * (v39 >> 6))) != 0)
    {
      v41 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v19 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v44 = v40 == v43;
        if (v40 == v43)
          v40 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v19 + 8 * v40);
      }
      while (v45 == -1);
      v41 = __clz(__rbit64(~v45)) + (v40 << 6);
    }
    *(_QWORD *)(v19 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    v34((char *)(*(_QWORD *)(v16 + 48) + v41 * v28), v57, v11);
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v35)(*(_QWORD *)(v16 + 56) + v41 * v31, v58, v59);
    ++*(_QWORD *)(v16 + 16);
    a3 = v56 - 1;
    if (__OFSUB__(v56, 1))
      break;
    a4 = v48;
    v17 = v54;
    v18 = v55;
    if (v56 == 1)
      return v16;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_10016854C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(sub_100037A5C(&qword_100263340) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10016A8B4(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1001685D0(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1001685D0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  Swift::Int result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  char *v48;
  unint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t (*v66)(char *, uint64_t);
  uint64_t v67;
  Swift::Int v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  Swift::Int v77;
  uint64_t v78;
  Swift::Int v79;
  Swift::Int v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t, uint64_t);
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  int v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  Swift::Int v118;
  Swift::Int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  Swift::Int v125;
  void (*v126)(char *, uint64_t);
  char *v127;
  uint64_t v128;
  Swift::Int v129;
  void (*v130)(char *, uint64_t);
  Swift::Int v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(char *, uint64_t, uint64_t);
  uint64_t v147;
  char *v148;
  uint64_t (*v149)(char *, uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t);
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  void (*v169)(char *, uint64_t);
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  Swift::Int v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  BOOL v191;
  unint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  BOOL v201;
  uint64_t v202;
  char v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  BOOL v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  unint64_t v233;
  char *v234;
  _QWORD *v235;
  uint64_t v236;
  _QWORD *v237;
  Swift::Int v238;
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  Swift::Int v247;
  Swift::Int v248;
  void (*v249)(uint64_t, uint64_t);
  void (*v250)(char *, uint64_t);
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t *v266;
  uint64_t v267;
  char *v268;
  Swift::Int v269;
  uint64_t v270;
  uint64_t v271;
  Swift::Int v272;
  uint64_t v273;
  char *v274;
  Swift::Int v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t (*v280)(char *, uint64_t);
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;

  v271 = type metadata accessor for Handle(0);
  v267 = *(_QWORD *)(v271 - 8);
  v3 = __chkstk_darwin(v271);
  v265 = (char *)&v236 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v264 = (char *)&v236 - v6;
  v7 = __chkstk_darwin(v5);
  v255 = (char *)&v236 - v8;
  v9 = __chkstk_darwin(v7);
  v254 = (char *)&v236 - v10;
  v11 = __chkstk_darwin(v9);
  v242 = (char *)&v236 - v12;
  __chkstk_darwin(v11);
  v241 = (char *)&v236 - v13;
  v285 = sub_100037A5C(&qword_100263340);
  v260 = *(_QWORD *)(v285 - 8);
  v14 = __chkstk_darwin(v285);
  v246 = (uint64_t)&v236 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v273 = (uint64_t)&v236 - v17;
  v18 = __chkstk_darwin(v16);
  v263 = (char *)&v236 - v19;
  v20 = __chkstk_darwin(v18);
  v262 = (char *)&v236 - v21;
  v22 = __chkstk_darwin(v20);
  v284 = (uint64_t)&v236 - v23;
  v24 = __chkstk_darwin(v22);
  v283 = (uint64_t)&v236 - v25;
  v26 = __chkstk_darwin(v24);
  v253 = (char *)&v236 - v27;
  v28 = __chkstk_darwin(v26);
  v252 = (char *)&v236 - v29;
  v30 = __chkstk_darwin(v28);
  v258 = (uint64_t)&v236 - v31;
  v32 = __chkstk_darwin(v30);
  v257 = (uint64_t)&v236 - v33;
  v34 = __chkstk_darwin(v32);
  v240 = (char *)&v236 - v35;
  v36 = __chkstk_darwin(v34);
  v239 = (char *)&v236 - v37;
  v38 = __chkstk_darwin(v36);
  v244 = (uint64_t)&v236 - v39;
  __chkstk_darwin(v38);
  v243 = (uint64_t)&v236 - v40;
  v41 = a1[1];
  result = _minimumMergeRunLength(_:)(v41);
  if (result >= v41)
  {
    if (v41 < 0)
      goto LABEL_157;
    if (v41)
      return sub_1001697E4(0, v41, 1, a1);
    return result;
  }
  if (v41 >= 0)
    v43 = v41;
  else
    v43 = v41 + 1;
  if (v41 < -1)
    goto LABEL_165;
  v238 = result;
  v261 = v1;
  if (v41 < 2)
  {
    v259 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v260 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v260 + 80));
    v237 = _swiftEmptyArrayStorage;
    if (v41 != 1)
    {
      v49 = _swiftEmptyArrayStorage[2];
      v48 = (char *)_swiftEmptyArrayStorage;
LABEL_120:
      if (v49 >= 2)
      {
        v227 = *a1;
        do
        {
          v228 = v49 - 2;
          if (v49 < 2)
            goto LABEL_152;
          if (!v227)
            goto LABEL_164;
          v220 = v48;
          v229 = *(_QWORD *)&v48[16 * v228 + 32];
          v230 = *(_QWORD *)&v48[16 * v49 + 24];
          v231 = v261;
          sub_100169CB8(v227 + *(_QWORD *)(v260 + 72) * v229, v227 + *(_QWORD *)(v260 + 72) * *(_QWORD *)&v48[16 * v49 + 16], (_BYTE *)(v227 + *(_QWORD *)(v260 + 72) * v230), v259);
          v261 = v231;
          if (v231)
            goto LABEL_132;
          if (v230 < v229)
            goto LABEL_153;
          if ((swift_isUniquelyReferenced_nonNull_native(v220) & 1) == 0)
            v220 = sub_10016A8A0((uint64_t)v220);
          if (v228 >= *((_QWORD *)v220 + 2))
            goto LABEL_154;
          v232 = &v220[16 * v228 + 32];
          *(_QWORD *)v232 = v229;
          *((_QWORD *)v232 + 1) = v230;
          v233 = *((_QWORD *)v220 + 2);
          if (v49 > v233)
            goto LABEL_155;
          memmove(&v220[16 * v49 + 16], &v220[16 * v49 + 32], 16 * (v233 - v49));
          v48 = v220;
          *((_QWORD *)v220 + 2) = v233 - 1;
          v49 = v233 - 1;
        }
        while (v233 > 2);
      }
      v234 = v48;
LABEL_134:
      swift_bridgeObjectRelease(v234);
      v235 = v237;
      v237[2] = 0;
      return swift_bridgeObjectRelease(v235);
    }
  }
  else
  {
    v44 = v43 >> 1;
    v45 = static Array._allocateBufferUninitialized(minimumCapacity:)(v43 >> 1, v285);
    *(_QWORD *)(v45 + 16) = v44;
    v46 = *(unsigned __int8 *)(v260 + 80);
    v237 = (_QWORD *)v45;
    v259 = v45 + ((v46 + 32) & ~v46);
  }
  v47 = 0;
  v48 = (char *)_swiftEmptyArrayStorage;
  v266 = a1;
  while (1)
  {
    v50 = v47 + 1;
    v251 = v48;
    v256 = v47;
    if (v47 + 1 >= v41)
      break;
    v275 = v41;
    v51 = *a1;
    v52 = v47;
    v53 = *(_QWORD *)(v260 + 72);
    v248 = v47 + 1;
    v54 = v243;
    sub_10000E37C(v51 + v53 * v50, v243, &qword_100263340);
    v245 = v51;
    v281 = v53;
    sub_10000E37C(v51 + v53 * v52, v244, &qword_100263340);
    v55 = *(int *)(v285 + 48);
    v56 = v239;
    v57 = &v239[v55];
    v58 = v54 + v55;
    v59 = type metadata accessor for Friend(0);
    v60 = *(_QWORD *)(v59 - 8);
    v61 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
    v61(v56, v54, v59);
    v62 = type metadata accessor for FriendshipAction(0);
    v278 = *(_QWORD *)(v62 - 8);
    v279 = (uint64_t)v57;
    v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v278 + 16);
    v64 = v63(v57, v58, v62);
    v65 = v241;
    Friend.handle.getter(v64);
    v66 = *(uint64_t (**)(char *, uint64_t))(v60 + 8);
    v67 = v66(v56, v59);
    v276 = Handle.identifier.getter(v67);
    v272 = v68;
    v69 = *(void (**)(char *, uint64_t))(v267 + 8);
    v69(v65, v271);
    v70 = *(int *)(v285 + 48);
    v71 = v240;
    v72 = &v240[v70];
    v73 = v244 + v70;
    v269 = (Swift::Int)v61;
    ((void (*)(char *))v61)(v240);
    v277 = v72;
    v282 = v62;
    v268 = (char *)v63;
    v74 = v63(v72, v73, v62);
    v75 = v242;
    Friend.handle.getter(v74);
    v270 = v59;
    v280 = v66;
    v76 = v66(v71, v59);
    v77 = v272;
    v78 = Handle.identifier.getter(v76);
    v80 = v79;
    v250 = v69;
    v69(v75, v271);
    if (v276 == v78 && v77 == v80)
    {
      LODWORD(v274) = 0;
      v80 = v77;
    }
    else
    {
      LODWORD(v274) = _stringCompareWithSmolCheck(_:_:expecting:)(v276, v77, v78, v80, 1);
    }
    v41 = v275;
    swift_bridgeObjectRelease(v80);
    swift_bridgeObjectRelease(v77);
    v81 = *(void (**)(char *, uint64_t))(v278 + 8);
    v82 = v282;
    v81(v277, v282);
    v249 = (void (*)(uint64_t, uint64_t))v81;
    v81((char *)v279, v82);
    sub_1000087A0(v244, &qword_100263340);
    sub_1000087A0(v243, &qword_100263340);
    v47 = v256;
    v50 = v256 + 2;
    if (v256 + 2 < v41)
    {
      v248 *= v281;
      v83 = v245;
      v247 = v281 * v50;
      while (1)
      {
        v272 = v50;
        v84 = v257;
        sub_10000E37C(v83 + v247, v257, &qword_100263340);
        v276 = v83;
        v85 = v258;
        sub_10000E37C(v83 + v248, v258, &qword_100263340);
        v86 = v285;
        v87 = *(int *)(v285 + 48);
        v88 = v252;
        v89 = &v252[v87];
        v90 = v84 + v87;
        v92 = (void (*)(char *, uint64_t, uint64_t))v269;
        v91 = v270;
        ((void (*)(char *, uint64_t, uint64_t))v269)(v252, v84, v270);
        v279 = (uint64_t)v89;
        v93 = (uint64_t (*)(char *, uint64_t, uint64_t))v268;
        v94 = ((uint64_t (*)(char *, uint64_t, uint64_t))v268)(v89, v90, v282);
        v95 = v254;
        Friend.handle.getter(v94);
        v96 = v280(v88, v91);
        v97 = Handle.identifier.getter(v96);
        v277 = v98;
        v278 = v97;
        v99 = v271;
        v100 = v250;
        v250(v95, v271);
        v101 = *(int *)(v86 + 48);
        v102 = v253;
        v103 = &v253[v101];
        v104 = v85 + v101;
        v92(v253, v85, v91);
        v105 = v93(v103, v104, v282);
        v106 = v255;
        Friend.handle.getter(v105);
        v107 = v280(v102, v91);
        v108 = Handle.identifier.getter(v107);
        v110 = v109;
        v100(v106, v99);
        v111 = v277;
        if (v278 != v108)
          goto LABEL_25;
        if (v277 == v110)
        {
          v112 = 0;
          v110 = v277;
        }
        else
        {
LABEL_25:
          v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v278, v277, v108, v110, 1);
        }
        swift_bridgeObjectRelease(v110);
        swift_bridgeObjectRelease(v111);
        v113 = v282;
        v114 = v249;
        v249((uint64_t)v103, v282);
        v114(v279, v113);
        sub_1000087A0(v258, &qword_100263340);
        sub_1000087A0(v257, &qword_100263340);
        if (((v274 ^ v112) & 1) != 0)
          break;
        v50 = v272 + 1;
        v41 = v275;
        v83 = v276 + v281;
        if (v275 == v272 + 1)
        {
          v50 = v275;
          v47 = v256;
          goto LABEL_30;
        }
      }
      v50 = v272;
      v47 = v256;
      v41 = v275;
    }
LABEL_30:
    v48 = v251;
    if ((v274 & 1) != 0)
    {
      v115 = v246;
      if (v50 < v47)
        goto LABEL_158;
      if (v47 >= v50)
      {
        a1 = v266;
        break;
      }
      v116 = 0;
      v117 = v281 * (v50 - 1);
      v118 = v50 * v281;
      v119 = v47;
      v120 = v47 * v281;
      do
      {
        if (v119 != v50 + v116 - 1)
        {
          if (!v245)
            goto LABEL_163;
          v121 = v245 + v120;
          v122 = v245 + v117;
          v123 = v115;
          v124 = v245;
          sub_10000EF6C(v245 + v120, v123, &qword_100263340);
          if (v120 < v117 || v121 >= v124 + v118)
          {
            swift_arrayInitWithTakeFrontToBack(v121, v122, 1, v285);
          }
          else if (v120 != v117)
          {
            swift_arrayInitWithTakeBackToFront(v121);
          }
          v115 = v246;
          sub_10000EF6C(v246, v122, &qword_100263340);
          v48 = v251;
        }
        ++v119;
        --v116;
        v117 -= v281;
        v118 -= v281;
        v120 += v281;
      }
      while (v119 < v50 + v116);
      a1 = v266;
      v47 = v256;
      v41 = v275;
      if (v50 < v275)
        goto LABEL_47;
    }
    else
    {
      a1 = v266;
      if (v50 < v41)
        goto LABEL_47;
    }
LABEL_71:
    if (v50 < v47)
      goto LABEL_151;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v48);
    v272 = v50;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v48 = v251;
    else
      v48 = sub_10016A698(0, *((_QWORD *)v251 + 2) + 1, 1, v251);
    v176 = *((_QWORD *)v48 + 2);
    v175 = *((_QWORD *)v48 + 3);
    v49 = v176 + 1;
    if (v176 >= v175 >> 1)
      v48 = sub_10016A698((char *)(v175 > 1), v176 + 1, 1, v48);
    *((_QWORD *)v48 + 2) = v49;
    v177 = v48 + 32;
    v178 = &v48[16 * v176 + 32];
    v179 = v272;
    *(_QWORD *)v178 = v256;
    *((_QWORD *)v178 + 1) = v179;
    if (v176)
    {
      while (1)
      {
        v180 = v49 - 1;
        if (v49 >= 4)
        {
          v185 = &v177[16 * v49];
          v186 = *((_QWORD *)v185 - 8);
          v187 = *((_QWORD *)v185 - 7);
          v191 = __OFSUB__(v187, v186);
          v188 = v187 - v186;
          if (v191)
            goto LABEL_140;
          v190 = *((_QWORD *)v185 - 6);
          v189 = *((_QWORD *)v185 - 5);
          v191 = __OFSUB__(v189, v190);
          v183 = v189 - v190;
          v184 = v191;
          if (v191)
            goto LABEL_141;
          v192 = v49 - 2;
          v193 = &v177[16 * v49 - 32];
          v195 = *(_QWORD *)v193;
          v194 = *((_QWORD *)v193 + 1);
          v191 = __OFSUB__(v194, v195);
          v196 = v194 - v195;
          if (v191)
            goto LABEL_143;
          v191 = __OFADD__(v183, v196);
          v197 = v183 + v196;
          if (v191)
            goto LABEL_146;
          if (v197 >= v188)
          {
            v215 = &v177[16 * v180];
            v217 = *(_QWORD *)v215;
            v216 = *((_QWORD *)v215 + 1);
            v191 = __OFSUB__(v216, v217);
            v218 = v216 - v217;
            if (v191)
              goto LABEL_150;
            v208 = v183 < v218;
            goto LABEL_108;
          }
        }
        else
        {
          if (v49 != 3)
          {
            v209 = *((_QWORD *)v48 + 4);
            v210 = *((_QWORD *)v48 + 5);
            v191 = __OFSUB__(v210, v209);
            v202 = v210 - v209;
            v203 = v191;
            goto LABEL_102;
          }
          v182 = *((_QWORD *)v48 + 4);
          v181 = *((_QWORD *)v48 + 5);
          v191 = __OFSUB__(v181, v182);
          v183 = v181 - v182;
          v184 = v191;
        }
        if ((v184 & 1) != 0)
          goto LABEL_142;
        v192 = v49 - 2;
        v198 = &v177[16 * v49 - 32];
        v200 = *(_QWORD *)v198;
        v199 = *((_QWORD *)v198 + 1);
        v201 = __OFSUB__(v199, v200);
        v202 = v199 - v200;
        v203 = v201;
        if (v201)
          goto LABEL_145;
        v204 = &v177[16 * v180];
        v206 = *(_QWORD *)v204;
        v205 = *((_QWORD *)v204 + 1);
        v191 = __OFSUB__(v205, v206);
        v207 = v205 - v206;
        if (v191)
          goto LABEL_148;
        if (__OFADD__(v202, v207))
          goto LABEL_149;
        if (v202 + v207 >= v183)
        {
          v208 = v183 < v207;
LABEL_108:
          if (v208)
            v180 = v192;
          goto LABEL_110;
        }
LABEL_102:
        if ((v203 & 1) != 0)
          goto LABEL_144;
        v211 = &v177[16 * v180];
        v213 = *(_QWORD *)v211;
        v212 = *((_QWORD *)v211 + 1);
        v191 = __OFSUB__(v212, v213);
        v214 = v212 - v213;
        if (v191)
          goto LABEL_147;
        if (v214 < v202)
          goto LABEL_14;
LABEL_110:
        v219 = v180 - 1;
        if (v180 - 1 >= v49)
        {
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
          goto LABEL_160;
        }
        if (!*a1)
          goto LABEL_162;
        v220 = v48;
        v221 = &v177[16 * v219];
        v222 = *(_QWORD *)v221;
        v223 = &v177[16 * v180];
        v224 = *((_QWORD *)v223 + 1);
        v225 = v261;
        sub_100169CB8(*a1 + *(_QWORD *)(v260 + 72) * *(_QWORD *)v221, *a1 + *(_QWORD *)(v260 + 72) * *(_QWORD *)v223, (_BYTE *)(*a1 + *(_QWORD *)(v260 + 72) * v224), v259);
        v261 = v225;
        if (v225)
        {
LABEL_132:
          v234 = v220;
          goto LABEL_134;
        }
        if (v224 < v222)
          goto LABEL_137;
        if (v180 > *((_QWORD *)v220 + 2))
          goto LABEL_138;
        *(_QWORD *)v221 = v222;
        *(_QWORD *)&v177[16 * v219 + 8] = v224;
        v226 = *((_QWORD *)v220 + 2);
        if (v180 >= v226)
          goto LABEL_139;
        v49 = v226 - 1;
        memmove(&v177[16 * v180], v223 + 16, 16 * (v226 - 1 - v180));
        v48 = v220;
        *((_QWORD *)v220 + 2) = v226 - 1;
        if (v226 <= 2)
          goto LABEL_14;
      }
    }
    v49 = 1;
LABEL_14:
    v41 = a1[1];
    v47 = v272;
    if (v272 >= v41)
      goto LABEL_120;
  }
  if (v50 >= v41)
    goto LABEL_71;
LABEL_47:
  v191 = __OFSUB__(v50, v47);
  v125 = v50 - v47;
  if (v191)
    goto LABEL_156;
  if (v125 >= v238)
  {
LABEL_70:
    v47 = v256;
    goto LABEL_71;
  }
  if (__OFADD__(v256, v238))
    goto LABEL_159;
  if (v256 + v238 >= v41)
    v126 = (void (*)(char *, uint64_t))v41;
  else
    v126 = (void (*)(char *, uint64_t))(v256 + v238);
  if ((uint64_t)v126 >= v256)
  {
    if ((void (*)(char *, uint64_t))v50 == v126)
    {
      v47 = v256;
      goto LABEL_71;
    }
    v127 = *(char **)(v260 + 72);
    v128 = (_QWORD)v127 * (v50 - 1);
    v268 = v127;
    v129 = v50 * (_QWORD)v127;
    v250 = v126;
    do
    {
      v132 = 0;
      v133 = v256;
      v272 = v50;
      v269 = v129;
      v270 = v128;
      while (1)
      {
        v276 = v133;
        v134 = *a1;
        v275 = (Swift::Int)&v132[v129];
        v135 = (uint64_t)&v132[v129 + v134];
        v136 = v283;
        sub_10000E37C(v135, v283, &qword_100263340);
        v277 = v132;
        v274 = &v132[v128];
        v137 = (uint64_t)&v132[v128 + v134];
        v138 = v284;
        sub_10000E37C(v137, v284, &qword_100263340);
        v139 = *(int *)(v285 + 48);
        v140 = v262;
        v141 = &v262[v139];
        v142 = v136 + v139;
        v143 = type metadata accessor for Friend(0);
        v144 = *(_QWORD *)(v143 - 8);
        v280 = *(uint64_t (**)(char *, uint64_t))(v144 + 16);
        ((void (*)(char *, uint64_t, uint64_t))v280)(v140, v136, v143);
        v145 = type metadata accessor for FriendshipAction(0);
        v281 = *(_QWORD *)(v145 - 8);
        v282 = (uint64_t)v141;
        v146 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v281 + 16);
        v147 = v146(v141, v142, v145);
        v148 = v264;
        Friend.handle.getter(v147);
        v149 = *(uint64_t (**)(char *, uint64_t))(v144 + 8);
        v150 = v149(v140, v143);
        v151 = Handle.identifier.getter(v150);
        v278 = v152;
        v279 = v151;
        v153 = *(void (**)(char *, uint64_t))(v267 + 8);
        v154 = v271;
        v153(v148, v271);
        v155 = *(int *)(v285 + 48);
        v156 = v263;
        v157 = v138 + v155;
        v158 = v138;
        v159 = &v263[v155];
        ((void (*)(char *, uint64_t, uint64_t))v280)(v263, v158, v143);
        v160 = v146(v159, v157, v145);
        v161 = v265;
        Friend.handle.getter(v160);
        v162 = v149(v156, v143);
        v163 = Handle.identifier.getter(v162);
        v165 = v164;
        v166 = v154;
        v167 = v278;
        v153(v161, v166);
        if (v279 == v163 && v167 == v165)
          break;
        v168 = _stringCompareWithSmolCheck(_:_:expecting:)(v279, v167, v163, v165, 1);
        swift_bridgeObjectRelease(v165);
        swift_bridgeObjectRelease(v167);
        v169 = *(void (**)(char *, uint64_t))(v281 + 8);
        v169(v159, v145);
        v169((char *)v282, v145);
        sub_1000087A0(v284, &qword_100263340);
        sub_1000087A0(v283, &qword_100263340);
        if ((v168 & 1) == 0)
          goto LABEL_60;
        a1 = v266;
        v170 = *v266;
        v129 = v269;
        v128 = v270;
        if (!*v266)
          goto LABEL_161;
        v171 = v277;
        v172 = (uint64_t)&v277[v170 + v269];
        v173 = (uint64_t)&v277[v170 + v270];
        sub_10000EF6C(v172, v273, &qword_100263340);
        swift_arrayInitWithTakeFrontToBack(v172, v173, 1, v285);
        sub_10000EF6C(v273, v173, &qword_100263340);
        v132 = (char *)(v171 - v268);
        v133 = v276 + 1;
        v131 = v272;
        if (v272 == v276 + 1)
          goto LABEL_61;
      }
      swift_bridgeObjectRelease_n(v167, 2);
      v130 = *(void (**)(char *, uint64_t))(v281 + 8);
      v130(v159, v145);
      v130((char *)v282, v145);
      sub_1000087A0(v284, &qword_100263340);
      sub_1000087A0(v283, &qword_100263340);
LABEL_60:
      a1 = v266;
      v131 = v272;
      v129 = v269;
      v128 = v270;
LABEL_61:
      v50 = v131 + 1;
      v128 += (uint64_t)v268;
      v129 += (Swift::Int)v268;
    }
    while ((void (*)(char *, uint64_t))v50 != v250);
    v50 = (Swift::Int)v250;
    v48 = v251;
    goto LABEL_70;
  }
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001697E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v38;
  _BYTE *v39;
  uint64_t (*v40)(_BYTE *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t);
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  char v60;
  void (*v61)(_BYTE *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[16];
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;

  v83 = a4;
  v68 = a1;
  v6 = type metadata accessor for Handle(0);
  v74 = *(_QWORD *)(v6 - 8);
  v75 = v6;
  v7 = __chkstk_darwin(v6);
  v73 = &v66[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v72 = &v66[-v9];
  v92 = sub_100037A5C(&qword_100263340);
  v10 = __chkstk_darwin(v92);
  v80 = &v66[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v10);
  v71 = &v66[-v13];
  v14 = __chkstk_darwin(v12);
  v70 = &v66[-v15];
  v16 = __chkstk_darwin(v14);
  v91 = &v66[-v17];
  result = __chkstk_darwin(v16);
  v21 = &v66[-v20];
  v79 = a3;
  v67 = a2;
  if (a3 != a2)
  {
    v22 = *(_QWORD *)(v19 + 72);
    v23 = v22 * (v79 - 1);
    v76 = v22;
    v24 = v22 * v79;
    v69 = &v66[-v20];
LABEL_6:
    v26 = 0;
    v84 = v68;
    v77 = v24;
    v78 = v23;
    while (1)
    {
      v27 = *v83;
      v82 = v24 + v26;
      sub_10000E37C(v24 + v26 + v27, (uint64_t)v21, &qword_100263340);
      v85 = v26;
      v81 = v23 + v26;
      v28 = v23 + v26 + v27;
      v29 = v91;
      sub_10000E37C(v28, (uint64_t)v91, &qword_100263340);
      v30 = *(int *)(v92 + 48);
      v31 = v70;
      v32 = &v70[v30];
      v33 = &v21[v30];
      v34 = type metadata accessor for Friend(0);
      v35 = *(_QWORD *)(v34 - 8);
      v88 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 16);
      v88(v31, v21, v34);
      v36 = type metadata accessor for FriendshipAction(0);
      v89 = *(_QWORD *)(v36 - 8);
      v90 = v32;
      v37 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v89 + 16);
      v38 = v37(v32, v33, v36);
      v39 = v72;
      Friend.handle.getter(v38);
      v40 = *(uint64_t (**)(_BYTE *, uint64_t))(v35 + 8);
      v41 = v40(v31, v34);
      v42 = Handle.identifier.getter(v41);
      v86 = v43;
      v87 = v42;
      v44 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
      v45 = v39;
      v46 = v75;
      v44(v45, v75);
      v47 = *(int *)(v92 + 48);
      v48 = v71;
      v49 = &v29[v47];
      v50 = v29;
      v51 = &v71[v47];
      v88(v71, v50, v34);
      v52 = v37(v51, v49, v36);
      v53 = v73;
      Friend.handle.getter(v52);
      v54 = v40(v48, v34);
      v55 = Handle.identifier.getter(v54);
      v57 = v56;
      v58 = v53;
      v59 = v86;
      v44(v58, v46);
      if (v87 == v55 && v59 == v57)
      {
        swift_bridgeObjectRelease_n(v59, 2);
        v25 = *(void (**)(_BYTE *, uint64_t))(v89 + 8);
        v25(v51, v36);
        v25(v90, v36);
        sub_1000087A0((uint64_t)v91, &qword_100263340);
        v21 = v69;
        result = sub_1000087A0((uint64_t)v69, &qword_100263340);
        v24 = v77;
        v23 = v78;
LABEL_5:
        v23 += v76;
        v24 += v76;
        if (++v79 == v67)
          return result;
        goto LABEL_6;
      }
      v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v59, v55, v57, 1);
      swift_bridgeObjectRelease(v57);
      swift_bridgeObjectRelease(v59);
      v61 = *(void (**)(_BYTE *, uint64_t))(v89 + 8);
      v61(v51, v36);
      v61(v90, v36);
      sub_1000087A0((uint64_t)v91, &qword_100263340);
      v21 = v69;
      result = sub_1000087A0((uint64_t)v69, &qword_100263340);
      v24 = v77;
      v23 = v78;
      v62 = v85;
      if ((v60 & 1) == 0)
        goto LABEL_5;
      v63 = *v83;
      if (!*v83)
        break;
      v64 = v63 + v77 + v85;
      v65 = v63 + v78 + v85;
      sub_10000EF6C(v64, (uint64_t)v80, &qword_100263340);
      swift_arrayInitWithTakeFrontToBack(v64, v65, 1, v92);
      result = sub_10000EF6C((uint64_t)v80, v65, &qword_100263340);
      v26 = v62 - v76;
      if (v79 == ++v84)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100169CB8(unint64_t a1, unint64_t a2, _BYTE *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t (*v52)(_BYTE *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v56;
  void (*v57)(_BYTE *, uint64_t);
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v67)(_QWORD, _QWORD, _QWORD);
  _BYTE *v68;
  uint64_t (*v69)(_QWORD, _QWORD, _QWORD);
  void (*v70)(void (*)(_BYTE *, _BYTE *, uint64_t), uint64_t);
  char v71;
  void (*v72)(void (*)(_BYTE *, _BYTE *, uint64_t), uint64_t);
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(_BYTE *, uint64_t);
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  _BYTE *v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  void (*v110)(void (*)(_BYTE *, _BYTE *, uint64_t), uint64_t);
  unint64_t v111;
  BOOL v112;
  unint64_t v113;
  _BYTE *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t result;
  _BYTE v118[16];
  unint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  unint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  uint64_t (*v132)(_BYTE *, uint64_t);
  uint64_t (*v133)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v134;
  void (*v135)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v136;
  _BYTE *v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;

  v8 = type metadata accessor for Handle(0);
  v139 = *(_QWORD *)(v8 - 8);
  v140 = v8;
  v9 = __chkstk_darwin(v8);
  v130 = &v118[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v9);
  v128 = &v118[-v12];
  v13 = __chkstk_darwin(v11);
  v131 = &v118[-v14];
  __chkstk_darwin(v13);
  v129 = &v118[-v15];
  v143 = sub_100037A5C(&qword_100263340);
  v16 = __chkstk_darwin(v143);
  v127 = &v118[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v16);
  v126 = &v118[-v19];
  v20 = __chkstk_darwin(v18);
  v138 = &v118[-v21];
  v22 = __chkstk_darwin(v20);
  v24 = &v118[-v23];
  v25 = __chkstk_darwin(v22);
  v125 = &v118[-v26];
  v27 = __chkstk_darwin(v25);
  v124 = &v118[-v28];
  v29 = __chkstk_darwin(v27);
  v137 = &v118[-v30];
  __chkstk_darwin(v29);
  v32 = &v118[-v31];
  v34 = *(_QWORD *)(v33 + 72);
  if (!v34)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v34 == -1)
    goto LABEL_69;
  v35 = (uint64_t)&a3[-a2];
  if (&a3[-a2] == (_BYTE *)0x8000000000000000 && v34 == -1)
    goto LABEL_70;
  v36 = (uint64_t)(a2 - a1) / v34;
  v146 = a1;
  v145 = a4;
  v37 = v35 / v34;
  if (v36 >= v35 / v34)
  {
    if ((v37 & 0x8000000000000000) == 0)
    {
      v39 = v37 * v34;
      if (a4 < a2 || a2 + v39 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v37, v143);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v79 = a4 + v39;
      v144 = a4 + v39;
      v146 = a2;
      if (v39 >= 1 && a1 < a2)
      {
        v81 = -v34;
        v123 = a4;
        v119 = a1;
        v121 = v24;
        v129 = (_BYTE *)v81;
        do
        {
          v141 = a3;
          sub_10000E37C(v79 + v81, (uint64_t)v24, &qword_100263340);
          v142 = a2;
          v131 = (_BYTE *)(a2 + v81);
          v82 = v138;
          sub_10000E37C(a2 + v81, (uint64_t)v138, &qword_100263340);
          v83 = *(int *)(v143 + 48);
          v84 = v126;
          v85 = &v126[v83];
          v86 = &v24[v83];
          v87 = type metadata accessor for Friend(0);
          v88 = *(_QWORD *)(v87 - 8);
          v135 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v88 + 16);
          v135(v84, v24, v87);
          v89 = type metadata accessor for FriendshipAction(0);
          v136 = *(_QWORD *)(v89 - 8);
          v137 = v85;
          v133 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v136 + 16);
          v90 = v133(v85, v86, v89);
          v91 = v128;
          Friend.handle.getter(v90);
          v132 = *(uint64_t (**)(_BYTE *, uint64_t))(v88 + 8);
          v92 = v132(v84, v87);
          v134 = Handle.identifier.getter(v92);
          v94 = v93;
          v95 = *(void (**)(_BYTE *, uint64_t))(v139 + 8);
          v96 = v91;
          v97 = v140;
          v95(v96, v140);
          v98 = *(int *)(v143 + 48);
          v99 = v127;
          v100 = &v127[v98];
          v101 = &v82[v98];
          v135(v127, v82, v87);
          v135 = (void (*)(_BYTE *, _BYTE *, uint64_t))v100;
          v102 = v133(v100, v101, v89);
          v103 = v130;
          Friend.handle.getter(v102);
          v104 = v132(v99, v87);
          v105 = Handle.identifier.getter(v104);
          v107 = v106;
          v95(v103, v97);
          if (v134 == v105 && v94 == v107)
          {
            v108 = 0;
            v107 = v94;
          }
          else
          {
            v108 = _stringCompareWithSmolCheck(_:_:expecting:)(v134, v94, v105, v107, 1);
          }
          v109 = (unint64_t)v141;
          swift_bridgeObjectRelease(v107);
          swift_bridgeObjectRelease(v94);
          v81 = (uint64_t)v129;
          a3 = &v129[v109];
          v110 = *(void (**)(void (*)(_BYTE *, _BYTE *, uint64_t), uint64_t))(v136 + 8);
          v110(v135, v89);
          v110((void (*)(_BYTE *, _BYTE *, uint64_t))v137, v89);
          sub_1000087A0((uint64_t)v138, &qword_100263340);
          v24 = v121;
          sub_1000087A0((uint64_t)v121, &qword_100263340);
          if ((v108 & 1) != 0)
          {
            v111 = v123;
            if (v109 < v142 || (unint64_t)a3 >= v142)
            {
              v114 = v131;
              swift_arrayInitWithTakeFrontToBack(v109 + v81, v131, 1, v143);
              v113 = v119;
            }
            else
            {
              v112 = v109 == v142;
              v113 = v119;
              v114 = v131;
              if (!v112)
                swift_arrayInitWithTakeBackToFront(a3);
            }
            v146 += v81;
          }
          else
          {
            v115 = v144;
            v116 = v144 + v81;
            v144 += v81;
            v111 = v123;
            if (v109 < v115 || (unint64_t)a3 >= v115)
            {
              swift_arrayInitWithTakeFrontToBack(v109 + v81, v116, 1, v143);
              v114 = (_BYTE *)v142;
            }
            else
            {
              v114 = (_BYTE *)v142;
              if (v109 != v115)
                swift_arrayInitWithTakeBackToFront(v109 + v81);
            }
            v113 = v119;
          }
          v79 = v144;
          if (v144 <= v111)
            break;
          a2 = (unint64_t)v114;
        }
        while ((unint64_t)v114 > v113);
      }
LABEL_67:
      sub_10016A790(&v146, &v145, (uint64_t *)&v144);
      return 1;
    }
  }
  else if ((v36 & 0x8000000000000000) == 0)
  {
    v38 = v36 * v34;
    if (a4 < a1 || a1 + v38 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v36, v143);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v130 = (_BYTE *)(a4 + v38);
    v144 = a4 + v38;
    if (v38 >= 1 && a2 < (unint64_t)a3)
    {
      v141 = a3;
      v122 = v34;
      v120 = v32;
      while (1)
      {
        v142 = a2;
        sub_10000E37C(a2, (uint64_t)v32, &qword_100263340);
        v41 = v137;
        sub_10000E37C(a4, (uint64_t)v137, &qword_100263340);
        v42 = v143;
        v43 = *(int *)(v143 + 48);
        v44 = v124;
        v45 = &v124[v43];
        v46 = &v32[v43];
        v47 = type metadata accessor for Friend(0);
        v48 = *(_QWORD *)(v47 - 8);
        v135 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v48 + 16);
        v135(v44, v32, v47);
        v49 = type metadata accessor for FriendshipAction(0);
        v136 = *(_QWORD *)(v49 - 8);
        v132 = *(uint64_t (**)(_BYTE *, uint64_t))(v136 + 16);
        v138 = v45;
        v50 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v132)(v45, v46, v49);
        v51 = v129;
        Friend.handle.getter(v50);
        v52 = *(uint64_t (**)(_BYTE *, uint64_t))(v48 + 8);
        v53 = v52(v44, v47);
        v54 = Handle.identifier.getter(v53);
        v133 = v55;
        v134 = v54;
        v56 = v140;
        v57 = *(void (**)(_BYTE *, uint64_t))(v139 + 8);
        v57(v51, v140);
        v58 = *(int *)(v42 + 48);
        v59 = v125;
        v60 = &v125[v58];
        v61 = &v41[v58];
        v135(v125, v41, v47);
        v135 = (void (*)(_BYTE *, _BYTE *, uint64_t))v60;
        v62 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v132)(v60, v61, v49);
        v63 = v131;
        Friend.handle.getter(v62);
        v64 = v52(v59, v47);
        v65 = Handle.identifier.getter(v64);
        v67 = v66;
        v68 = v63;
        v69 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v133;
        v57(v68, v56);
        if (v134 == v65 && v69 == v67)
          break;
        v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v134, v69, v65, v67, 1);
        swift_bridgeObjectRelease(v67);
        swift_bridgeObjectRelease(v69);
        v72 = *(void (**)(void (*)(_BYTE *, _BYTE *, uint64_t), uint64_t))(v136 + 8);
        v72(v135, v49);
        v72((void (*)(_BYTE *, _BYTE *, uint64_t))v138, v49);
        sub_1000087A0((uint64_t)v137, &qword_100263340);
        v32 = v120;
        sub_1000087A0((uint64_t)v120, &qword_100263340);
        if ((v71 & 1) == 0)
          goto LABEL_31;
        v73 = v146;
        v74 = v122;
        v75 = v142 + v122;
        if (v146 < v142 || v146 >= v75)
        {
          swift_arrayInitWithTakeFrontToBack(v146, v142, 1, v143);
          v76 = (unint64_t)v141;
        }
        else
        {
          v76 = (unint64_t)v141;
          if (v146 == v142)
            v73 = v142;
          else
            swift_arrayInitWithTakeBackToFront(v146);
        }
LABEL_37:
        v146 = v73 + v74;
        a4 = v145;
        if (v145 < (unint64_t)v130)
        {
          a2 = v75;
          if (v75 < v76)
            continue;
        }
        goto LABEL_67;
      }
      swift_bridgeObjectRelease_n(v69, 2);
      v70 = *(void (**)(void (*)(_BYTE *, _BYTE *, uint64_t), uint64_t))(v136 + 8);
      v70(v135, v49);
      v70((void (*)(_BYTE *, _BYTE *, uint64_t))v138, v49);
      sub_1000087A0((uint64_t)v137, &qword_100263340);
      v32 = v120;
      sub_1000087A0((uint64_t)v120, &qword_100263340);
LABEL_31:
      v73 = v146;
      v74 = v122;
      v77 = v145 + v122;
      v78 = v142;
      if (v146 < v145 || v146 >= v77)
      {
        swift_arrayInitWithTakeFrontToBack(v146, v145, 1, v143);
        v76 = (unint64_t)v141;
      }
      else
      {
        v76 = (unint64_t)v141;
        if (v146 != v145)
          swift_arrayInitWithTakeBackToFront(v146);
      }
      v145 = v77;
      v75 = v78;
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_71:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10016A698(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100037A5C(&qword_100265550);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_10016A790(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = sub_100037A5C(&qword_100263340);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3);
  return result;
}

char *sub_10016A8A0(uint64_t a1)
{
  return sub_10016A698(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10016A8B4(_QWORD *a1)
{
  return sub_1001E7B40(0, a1[2], 0, a1);
}

uint64_t sub_10016A8C8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10016CEFC();
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100037A5C(&qword_100265608);
          v13 = sub_10016AAC0(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10011D800();
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void (*sub_10016AAC0(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);
  __n128 v7;

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10016AB40(v6, a2, a3, v7);
  return sub_10016AB14;
}

void sub_10016AB14(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_10016AB40(void (*result)(id *a1), unint64_t a2, uint64_t a3, __n128 a4))(id *a1)
{
  void (*v4)(id *);
  id v5;

  v4 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3, a4);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v5 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v4 = v5;
    return sub_10016ABAC;
  }
  __break(1u);
  return result;
}

void sub_10016ABAC(id *a1)
{

}

uint64_t sub_10016ABB4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v11 - 8);
  result = __chkstk_darwin(v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 56;
  v14 = *(_QWORD *)(a4 + 56);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
    v21 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 56;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      v21 = v39;
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1, 1, v11);
          v19 = 0;
LABEL_38:
          sub_1000087A0((uint64_t)v10, (uint64_t *)&unk_1002675F0);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10016AF04(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = type metadata accessor for Handle(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v32 - v14;
  v39 = a4;
  v18 = *(_QWORD *)(a4 + 64);
  v17 = a4 + 64;
  v16 = v18;
  v37 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 32);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v17 - 32);
  v35 = a1;
  v22 = 0;
  v23 = 0;
  v36 = (unint64_t)(63 - v19) >> 6;
  v33 = v36 - 1;
  v38 = a3;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(_QWORD *)(v39 + 48) + v29 * v25, v8);
    v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v36)
      goto LABEL_32;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v36)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v36)
    goto LABEL_32;
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v36)
    {
      v21 = 0;
      v22 = v33;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v37 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10016B1CC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = sub_100037A5C(&qword_100263340);
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9);
  v14 = (char *)&v32 - v13;
  v15 = *(_QWORD *)(a4 + 64);
  v37 = a4 + 64;
  v16 = -1 << *(_BYTE *)(a4 + 32);
  if (-v16 < 64)
    v17 = ~(-1 << -(char)v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  if (!a2)
  {
    v19 = 0;
    a3 = 0;
LABEL_39:
    v31 = v37;
    *a1 = a4;
    a1[1] = v31;
    a1[2] = ~v16;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    v19 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v34 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v19 = 0;
  v20 = 0;
  v36 = (unint64_t)(63 - v16) >> 6;
  v33 = v36 - 1;
  v21 = a3;
  if (!v18)
    goto LABEL_9;
LABEL_8:
  v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  v23 = v22 | (v19 << 6);
  while (1)
  {
    ++v20;
    v27 = *(_QWORD *)(a4 + 48);
    v28 = type metadata accessor for Friend(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v11, v27 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v23, v28);
    v29 = *(_QWORD *)(a4 + 56);
    v30 = type metadata accessor for FriendshipAction(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(&v11[*(int *)(v39 + 48)], v29 + *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72) * v23, v30);
    sub_10000EF6C((uint64_t)v11, (uint64_t)v14, &qword_100263340);
    result = sub_10000EF6C((uint64_t)v14, a2, &qword_100263340);
    if (v20 == v21)
    {
      a3 = v21;
      goto LABEL_38;
    }
    a2 += *(_QWORD *)(v38 + 72);
    if (v18)
      goto LABEL_8;
LABEL_9:
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v24 >= v36)
      goto LABEL_33;
    v25 = *(_QWORD *)(v37 + 8 * v24);
    if (!v25)
    {
      v19 += 2;
      if (v24 + 1 >= v36)
      {
        v18 = 0;
        v19 = v24;
      }
      else
      {
        v25 = *(_QWORD *)(v37 + 8 * v19);
        if (v25)
          goto LABEL_14;
        v26 = v24 + 2;
        if (v24 + 2 >= v36)
          goto LABEL_33;
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (v25)
        {
LABEL_17:
          v24 = v26;
          goto LABEL_18;
        }
        v19 = v24 + 3;
        if (v24 + 3 < v36)
        {
          v25 = *(_QWORD *)(v37 + 8 * v19);
          if (v25)
          {
LABEL_14:
            v24 = v19;
            goto LABEL_18;
          }
          v26 = v24 + 4;
          if (v24 + 4 >= v36)
          {
LABEL_33:
            v18 = 0;
            goto LABEL_37;
          }
          v25 = *(_QWORD *)(v37 + 8 * v26);
          if (!v25)
          {
            while (1)
            {
              v24 = v26 + 1;
              if (__OFADD__(v26, 1))
                goto LABEL_42;
              if (v24 >= v36)
              {
                v18 = 0;
                v19 = v33;
                goto LABEL_37;
              }
              v25 = *(_QWORD *)(v37 + 8 * v24);
              ++v26;
              if (v25)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v18 = 0;
        v19 = v24 + 2;
      }
LABEL_37:
      a3 = v20;
LABEL_38:
      v16 = v34;
      a1 = v35;
      goto LABEL_39;
    }
LABEL_18:
    v18 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v24 << 6);
    v19 = v24;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10016B4E0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10016B590(uint64_t a1)
{
  return sub_10016B818(a1, (uint64_t (*)(uint64_t))&type metadata accessor for Device, &qword_1002619A8, (uint64_t)&protocol conformance descriptor for Device, (void (*)(char *, char *))sub_100164D94);
}

uint64_t sub_10016B5B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10003007C(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10016B648(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v18 - v7;
  v9 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_100004EA8(&qword_1002676A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_100164FF0((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1, 1, v2);
  }
  return v19;
}

uint64_t sub_10016B818(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4, void (*a5)(char *, char *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v10 = a2(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v23 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = sub_100004EA8(a3, a2, a4);
  result = Set.init(minimumCapacity:)(v17, v10, v18);
  v24 = result;
  if (v17)
  {
    v20 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v21 = *(_QWORD *)(v11 + 72);
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    do
    {
      v22(v14, v20, v10);
      a5(v16, v14);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      v20 += v21;
      --v17;
    }
    while (v17);
    return v24;
  }
  return result;
}

uint64_t sub_10016B944(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void **v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = sub_10011D800();
  v5 = sub_100004EA8(&qword_100265628, (uint64_t (*)(uint64_t))sub_10011D800, (uint64_t)&protocol conformance descriptor for NSObject);
  result = Set.init(minimumCapacity:)(v3, v4, v5);
  v16 = result;
  if (v2)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v9);
    result = swift_bridgeObjectRelease(a1);
    if (!v8)
      return v16;
  }
  else
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v8)
      return v16;
  }
  if (v8 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v8; ++i)
      {
        v11 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1, v7);
        sub_10016524C((Swift::Int *)&v15, v11);

      }
    }
    else
    {
      v12 = (void **)(a1 + 32);
      do
      {
        v13 = *v12++;
        sub_10016524C((Swift::Int *)&v15, v13);

        --v8;
      }
      while (v8);
    }
    return v16;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10016BAA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _QWORD *v23;

  v2 = type metadata accessor for Friend(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v23 = _swiftEmptyArrayStorage;
    sub_1000303C0(0, v6, 0);
    v7 = v23;
    v8 = (__int128 *)(a1 + 32);
    do
    {
      v9 = v8[5];
      v20 = v8[4];
      v21 = v9;
      v22 = *((_BYTE *)v8 + 96);
      v10 = v8[1];
      v16 = *v8;
      v17 = v10;
      v11 = v8[3];
      v18 = v8[2];
      v19 = v11;
      v12 = v17;
      sub_10016CDB4(&v16);
      sub_10015DB54((double *)&v16, v12, *((uint64_t *)&v12 + 1), (uint64_t)v5);
      sub_10016CE1C(&v16);
      v23 = v7;
      v14 = v7[2];
      v13 = v7[3];
      if (v14 >= v13 >> 1)
      {
        sub_1000303C0(v13 > 1, v14 + 1, 1);
        v7 = v23;
      }
      v7[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v14, v5, v2);
      v8 = (__int128 *)((char *)v8 + 104);
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_10016BC14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];
  uint64_t v8;

  v8 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (uint64_t *)(a1 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      swift_bridgeObjectRetain(*v3);
      sub_10003007C(v7, v4, v5);
      swift_bridgeObjectRelease(v7[1]);
      v3 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return a2;
}

uint64_t sub_10016BC90(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_100037A5C(&qword_1002615D8) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10016BDAC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100037A5C(&qword_100265658);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

BOOL sub_10016BEB4(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t);
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, _QWORD, uint64_t);
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v67 = a2;
  v65 = a1;
  v2 = sub_100037A5C(&qword_100263338);
  v3 = __chkstk_darwin(v2);
  v60 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v63 = (uint64_t)&v56 - v5;
  v6 = sub_100037A5C(&qword_100263340);
  v64 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v58 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v61 = (char *)&v56 - v9;
  v10 = type metadata accessor for HandleType(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v56 - v15;
  v17 = type metadata accessor for FriendshipAction(0);
  v18 = __chkstk_darwin(v17);
  v57 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v59 = (char *)&v56 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v56 - v22;
  v68 = v24;
  v62 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 104);
  v62((char *)&v56 - v22, enum case for FriendshipAction.remove(_:), v17);
  v25 = sub_100004EA8(&qword_1002655C0, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipAction, (uint64_t)&protocol conformance descriptor for FriendshipAction);
  dispatch thunk of RawRepresentable.rawValue.getter(v17, v25);
  dispatch thunk of RawRepresentable.rawValue.getter(v17, v25);
  v26 = v72;
  v27 = v70;
  v66 = v6;
  if (v71 == v69 && v72 == v70)
  {
    swift_bridgeObjectRelease_n(v72, 2);
    v28 = *(uint64_t (**)(char *, uint64_t))(v68 + 8);
    v29 = v28(v23, v17);
  }
  else
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, v69, v70, 0);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v27);
    v28 = *(uint64_t (**)(char *, uint64_t))(v68 + 8);
    v29 = v28(v23, v17);
    if ((v30 & 1) == 0)
      return 1;
  }
  v56 = (void (*)(char *, uint64_t))v28;
  v31 = v67;
  Friend.type.getter(v29);
  v32 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 104);
  v32(v14, enum case for HandleType.futureFollower(_:), v10);
  v33 = static HandleType.== infix(_:_:)(v16, v14);
  v34 = *(void (**)(char *, uint64_t))(v11 + 8);
  v34(v14, v10);
  v35 = ((uint64_t (*)(char *, uint64_t))v34)(v16, v10);
  if ((v33 & 1) != 0)
  {
    __chkstk_darwin(v35);
    *(&v56 - 2) = v31;
    v36 = v63;
    sub_1001578F0((uint64_t (*)(char *))sub_10016CED0, v65, v63);
    v37 = v66;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v36, 1, v66) != 1)
    {
      v38 = *(int *)(v37 + 48);
      v39 = (uint64_t)v61;
      v40 = &v61[v38];
      v41 = v36 + v38;
      v42 = type metadata accessor for Friend(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v39, v36, v42);
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v40, v41, v17);
      v43 = enum case for FriendshipAction.add(_:);
      v44 = v59;
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  Friend.type.getter(v35);
  v32(v14, enum case for HandleType.futureFollowing(_:), v10);
  v45 = static HandleType.== infix(_:_:)(v16, v14);
  v34(v14, v10);
  v46 = ((uint64_t (*)(char *, uint64_t))v34)(v16, v10);
  if ((v45 & 1) != 0)
  {
    __chkstk_darwin(v46);
    *(&v56 - 2) = v31;
    v36 = v60;
    sub_1001578F0((uint64_t (*)(char *))sub_10016CEAC, v65, v60);
    v47 = v66;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v36, 1, v66) != 1)
    {
      v49 = *(int *)(v47 + 48);
      v39 = (uint64_t)v58;
      v50 = &v58[v49];
      v51 = v36 + v49;
      v52 = type metadata accessor for Friend(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v39, v36, v52);
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v50, v51, v17);
      v43 = enum case for FriendshipAction.add(_:);
      v44 = v57;
LABEL_13:
      v62(v44, v43, v17);
      dispatch thunk of RawRepresentable.rawValue.getter(v17, v25);
      dispatch thunk of RawRepresentable.rawValue.getter(v17, v25);
      v53 = v72;
      v54 = v70;
      if (v71 == v69 && v72 == v70)
      {
        swift_bridgeObjectRelease_n(v72, 2);
        v56(v44, v17);
        sub_1000087A0(v39, &qword_100263340);
        return 1;
      }
      v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, v69, v70, 0);
      swift_bridgeObjectRelease(v53);
      swift_bridgeObjectRelease(v54);
      v56(v44, v17);
      sub_1000087A0(v39, &qword_100263340);
      return (v55 & 1) != 0;
    }
LABEL_10:
    sub_1000087A0(v36, &qword_100263338);
    return 0;
  }
  return 1;
}

uint64_t sub_10016C488(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  int64_t v46;

  v32 = a2;
  v43 = a4;
  v33 = a1;
  v5 = type metadata accessor for FriendshipAction(0);
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  __chkstk_darwin(v5);
  v40 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Friend(0);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  result = __chkstk_darwin(v7);
  v37 = (void (*)(char *, uint64_t))((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = 0;
  v44 = (_QWORD *)a3;
  v11 = *(_QWORD *)(a3 + 64);
  v34 = 0;
  v35 = a3 + 64;
  v12 = 1 << *(_BYTE *)(a3 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v36 = (unint64_t)(v12 + 63) >> 6;
  v16 = v37;
  v15 = v38;
  v17 = v39;
  v18 = v40;
  v19 = v41;
  v20 = v42;
  while (1)
  {
    if (v14)
    {
      v45 = (v14 - 1) & v14;
      v46 = v10;
      v21 = __clz(__rbit64(v14)) | (v10 << 6);
      goto LABEL_5;
    }
    v26 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v26 >= v36)
      return sub_100168160(v33, v32, v34, v44);
    v27 = *(_QWORD *)(v35 + 8 * v26);
    v28 = v10 + 1;
    if (!v27)
    {
      v28 = v10 + 2;
      if (v10 + 2 >= v36)
        return sub_100168160(v33, v32, v34, v44);
      v27 = *(_QWORD *)(v35 + 8 * v28);
      if (!v27)
      {
        v28 = v10 + 3;
        if (v10 + 3 >= v36)
          return sub_100168160(v33, v32, v34, v44);
        v27 = *(_QWORD *)(v35 + 8 * v28);
        if (!v27)
          break;
      }
    }
LABEL_20:
    v45 = (v27 - 1) & v27;
    v46 = v28;
    v21 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_5:
    v22 = v44;
    (*(void (**)(void (*)(char *, uint64_t), unint64_t, uint64_t))(v15 + 16))(v16, v44[6] + *(_QWORD *)(v15 + 72) * v21, v17);
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v18, v22[7] + *(_QWORD *)(v19 + 72) * v21, v20);
    v23 = *v43;
    swift_bridgeObjectRetain(*v43);
    v25 = sub_10016BEB4(v24, v16);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v20);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(v15 + 8))(v16, v17);
    v10 = v46;
    v14 = v45;
    if (v25)
    {
      *(unint64_t *)((char *)v33 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (__OFADD__(v34++, 1))
      {
        __break(1u);
        return sub_100168160(v33, v32, v34, v44);
      }
    }
  }
  v29 = v10 + 4;
  if (v10 + 4 >= v36)
    return sub_100168160(v33, v32, v34, v44);
  v27 = *(_QWORD *)(v35 + 8 * v29);
  if (v27)
  {
    v28 = v10 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v28 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v28 >= v36)
      return sub_100168160(v33, v32, v34, v44);
    v27 = *(_QWORD *)(v35 + 8 * v28);
    ++v29;
    if (v27)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10016C760(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v8;
  unsigned int v9;
  unint64_t v10;
  size_t v11;
  uint64_t isStackAllocationSafe;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;

  v4 = v3;
  v8 = *(_BYTE *)(a1 + 32);
  v9 = v8 & 0x3F;
  v10 = (unint64_t)((1 << v8) + 63) >> 6;
  v11 = 8 * v10;
  isStackAllocationSafe = swift_retain_n(a2, 2);
  if (v9 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v11, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    swift_retain(a2);
    v13 = sub_10016C488((unint64_t *)((char *)&v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0)), v10, a1, a3);
    v14 = swift_release(a2);
    if (v4)
      swift_willThrow(v14);
    swift_release_n(a2, 2);
  }
  else
  {
    v15 = (void *)swift_slowAlloc(v11, -1);
    bzero(v15, v11);
    swift_retain(a2);
    v13 = sub_10016C488((unint64_t *)v15, v10, a1, a3);
    swift_release(a2);
    swift_slowDealloc(v15, -1, -1);
    swift_release_n(a2, 2);
  }
  return v13;
}

uint64_t sub_10016C918(unint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;

  v42 = a4;
  v36 = a2;
  v37 = a1;
  v41 = type metadata accessor for FriendshipAction(0);
  v44 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Friend(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = __chkstk_darwin(v7);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v13 = 0;
  v43 = a3;
  v16 = a3[8];
  v15 = a3 + 8;
  v14 = v16;
  v17 = 1 << *((_BYTE *)v15 - 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v14;
  v39 = v15;
  v40 = (unint64_t)(v17 + 63) >> 6;
LABEL_4:
  v38 = v12;
  while (v19)
  {
    v20 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    v45 = v13;
    v21 = v20 | (v13 << 6);
    v22 = v44;
LABEL_18:
    v27 = v43;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v11, v43[6] + *(_QWORD *)(v8 + 72) * v21, v7);
    v28 = v27[7] + *(_QWORD *)(v22 + 72) * v21;
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
    v30 = v22;
    v31 = v41;
    v29(v6, v28, v41);
    v32 = v46;
    v33 = sub_10015F584((uint64_t)v11, v6, v42);
    v46 = v32;
    if (v32)
      goto LABEL_28;
    v34 = v33;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v31);
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v13 = v45;
    if ((v34 & 1) != 0)
    {
      v35 = v38;
      *(unint64_t *)((char *)v37 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      v23 = __OFADD__(v35, 1);
      v12 = v35 + 1;
      if (!v23)
        goto LABEL_4;
      __break(1u);
LABEL_28:
      (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
  }
  v23 = __OFADD__(v13, 1);
  v24 = v13 + 1;
  v22 = v44;
  if (v23)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v24 >= v40)
    return sub_100168160(v37, v36, v38, v43);
  v25 = v39[v24];
  if (v25)
  {
LABEL_17:
    v19 = (v25 - 1) & v25;
    v45 = v24;
    v21 = __clz(__rbit64(v25)) + (v24 << 6);
    goto LABEL_18;
  }
  v26 = v24 + 1;
  if (v24 + 1 >= v40)
    return sub_100168160(v37, v36, v38, v43);
  v25 = v39[v26];
  if (v25)
    goto LABEL_16;
  v26 = v24 + 2;
  if (v24 + 2 >= v40)
    return sub_100168160(v37, v36, v38, v43);
  v25 = v39[v26];
  if (v25)
    goto LABEL_16;
  v26 = v24 + 3;
  if (v24 + 3 >= v40)
    return sub_100168160(v37, v36, v38, v43);
  v25 = v39[v26];
  if (v25)
  {
LABEL_16:
    v24 = v26;
    goto LABEL_17;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v40)
      return sub_100168160(v37, v36, v38, v43);
    v25 = v39[v24];
    ++v26;
    if (v25)
      goto LABEL_17;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10016CC00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_10016C918((unint64_t *)((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, (_QWORD *)a1, a2);
    v11 = swift_bridgeObjectRelease(a2);
    if (v2)
      swift_willThrow(v11);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v8, -1);
    bzero(v12, v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_10016C918((unint64_t *)v12, v7, (_QWORD *)a1, a2);
    swift_bridgeObjectRelease(a2);
    swift_slowDealloc(v12, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v10;
}

_QWORD *sub_10016CDB4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[11];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *sub_10016CE1C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10016CE84(uint64_t a1)
{
  uint64_t v1;

  return sub_100160894(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10016CEA0(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_10016CEAC(uint64_t a1)
{
  uint64_t v1;

  return sub_100160AB4(a1, *(_QWORD *)(v1 + 16), (unsigned int *)&enum case for HandleType.following(_:)) & 1;
}

uint64_t sub_10016CED0(uint64_t a1)
{
  uint64_t v1;

  return sub_100160AB4(a1, *(_QWORD *)(v1 + 16), (unsigned int *)&enum case for HandleType.follower(_:)) & 1;
}

uint64_t sub_10016CEF4(uint64_t a1)
{
  uint64_t v1;

  return sub_100058440(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_10016CEFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100265610;
  if (!qword_100265610)
  {
    v1 = sub_10003C1FC(&qword_100265608);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100265610);
  }
  return result;
}

uint64_t sub_10016CF48(uint64_t a1, uint64_t a2)
{
  assignWithTake for AnalyticsEvent.Mode(a2, a1);
  return a2;
}

uint64_t sub_10016CF84(uint64_t a1)
{
  return sub_10016CE84(a1) & 1;
}

BOOL sub_10016CFA0(uint64_t a1)
{
  return sub_100021F58(a1);
}

void sub_10016CFBC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10016CFFC(uint64_t a1)
{
  String.hash(into:)(a1, 0x6564757469746C61, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_10016D0D8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10016D124()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6564757469746C61, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10016D214(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v17 = a4;
  v18 = a5;
  v9 = sub_100037A5C(&qword_100265850);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_100036228(a1, v14);
  v15 = sub_10001ABF0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerLocationInProgress.CodingKeys, &type metadata for ServerLocationInProgress.CodingKeys, v15, v14, v13);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v20, v9);
  if (!v5)
  {
    v19 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v19, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10016D33C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10016F904(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10016D360(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001ABF0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016D388(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001ABF0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016D3B0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10016D214(a1, *v1, v1[1], v1[2], v1[3]);
}

void sub_10016D3CC(char *a1)
{
  sub_100109FB8(*a1);
}

void sub_10016D3D8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10016D418()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E6F697461636F6CLL, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_10016D480()
{
  __asm { BR              X10 }
}

uint64_t sub_10016D4B0(uint64_t a1)
{
  String.hash(into:)(a1, 0x6E6F697461636F6CLL, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_10016D504(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10016D540()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E6F697461636F6CLL, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

unint64_t sub_10016D5A8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10016F9D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016D5D4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10016D5F8 + 4 * byte_1001F7F5C[*v0]))();
}

void sub_10016D5F8(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F697461636F6CLL;
  a1[1] = 0xE800000000000000;
}

void sub_10016D614(char *a1@<X8>)
{
  strcpy(a1, "locationStatus");
  a1[15] = -18;
}

void sub_10016D63C(_QWORD *a1@<X8>)
{
  *a1 = 0x737574617473;
  a1[1] = 0xE600000000000000;
}

unint64_t sub_10016D654@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10016F9D4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016D678(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000262E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016D6A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000262E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016D6C8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100265830);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1000262E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerLocation.CodingKeys, &type metadata for ServerLocation.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v29 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v29, v5);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for ServerLocation(0);
    v15 = (char *)v3 + v14[5];
    v28 = 1;
    v16 = type metadata accessor for LegacyLocation(0);
    v17 = sub_100004EA8(&qword_100265838, type metadata accessor for LegacyLocation, (uint64_t)&protocol conformance descriptor for LegacyLocation);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v28, v5, v16, v17);
    v18 = (uint64_t *)((char *)v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    v27 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v27, v5);
    v21 = (uint64_t *)((char *)v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    v26 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10016D880(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016D8B4 + 4 * byte_1001F7F64[a1]))(0x73736572646461, 0xE700000000000000);
}

uint64_t sub_10016D8B4()
{
  return 0x6564757469746C61;
}

uint64_t sub_10016D8D0()
{
  return 0x76654C726F6F6C66;
}

unint64_t sub_10016D8EC()
{
  return 0xD000000000000012;
}

uint64_t sub_10016D90C()
{
  return 0x656475746974616CLL;
}

uint64_t sub_10016D924()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_10016D940()
{
  return 0x6D617473656D6974;
}

unint64_t sub_10016D960()
{
  return 0xD000000000000010;
}

uint64_t sub_10016D97C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016D9B0 + 4 * byte_1001F7F6C[a1]))(0x73736572646461, 0xE700000000000000);
}

uint64_t sub_10016D9B0()
{
  return 0x6564757469746C61;
}

uint64_t sub_10016D9CC()
{
  return 0x76654C726F6F6C66;
}

unint64_t sub_10016D9E8()
{
  return 0xD000000000000012;
}

uint64_t sub_10016DA08()
{
  return 0x656475746974616CLL;
}

uint64_t sub_10016DA20()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_10016DA3C()
{
  return 0x6D617473656D6974;
}

unint64_t sub_10016DA5C()
{
  return 0xD000000000000010;
}

uint64_t sub_10016DA78(_QWORD *a1)
{
  return sub_10016D6C8(a1);
}

void sub_10016DA8C(char *a1)
{
  sub_10010A110(*a1);
}

void sub_10016DA98()
{
  char *v0;

  sub_10016D0D8(0, *v0);
}

void sub_10016DAA4(uint64_t a1)
{
  char *v1;

  sub_10016CFBC(a1, *v1);
}

void sub_10016DAAC(uint64_t a1)
{
  char *v1;

  sub_10016D0D8(a1, *v1);
}

unint64_t sub_10016DAB4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10016FA1C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016DAE0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10016D880(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10016DB08()
{
  unsigned __int8 *v0;

  return sub_10016D97C(*v0);
}

unint64_t sub_10016DB10@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10016FA1C(a1);
  *a2 = result;
  return result;
}

void sub_10016DB34(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_10016DB40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016DF90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016DB68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016DF90();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LegacyLocation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  int *v20;
  __n128 v21;
  char *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;

  v46 = a2;
  v3 = sub_100037A5C(&qword_100261818);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100037A5C(&qword_100265660);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LegacyLocation(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v47 = a1;
  sub_100036228(a1, v14);
  v15 = sub_10016DF90();
  v16 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LegacyLocation.CodingKeys, &type metadata for LegacyLocation.CodingKeys, v15, v14, v13);
  if (v16)
    return sub_10002BB90(v47);
  v56 = 4;
  v18.n128_f64[0] = KeyedDecodingContainer.decode(_:forKey:)(&v56, v6, v17);
  v19 = v6;
  v20 = (int *)v10;
  *(_QWORD *)&v12[*(int *)(v10 + 32)] = v18.n128_u64[0];
  v55 = 5;
  v21.n128_f64[0] = KeyedDecodingContainer.decode(_:forKey:)(&v55, v19, v18);
  v22 = v9;
  v48 = v7;
  *(_QWORD *)&v12[v20[9]] = v21.n128_u64[0];
  v54 = 6;
  v23 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v19, v21);
  v24 = v20[10];
  v44 = v12;
  *(double *)&v12[v24] = v23;
  v25 = type metadata accessor for PlaceMark(0);
  v53 = 0;
  v26 = sub_100004EA8(&qword_100265670, (uint64_t (*)(uint64_t))&type metadata accessor for PlaceMark, (uint64_t)&protocol conformance descriptor for PlaceMark);
  v45 = v19;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v5, v25, &v53, v19, v25, v26);
  v27 = (uint64_t)v44;
  sub_10000EF6C((uint64_t)v5, (uint64_t)v44, &qword_100261818);
  v52 = 1;
  v28 = v45;
  v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v45);
  v30 = v27 + v20[5];
  *(_QWORD *)v30 = v29;
  *(_BYTE *)(v30 + 8) = v31 & 1;
  v51 = 2;
  v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v28);
  v33 = v27 + v20[6];
  *(_QWORD *)v33 = v32;
  *(_BYTE *)(v33 + 8) = v34 & 1;
  v50 = 3;
  v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v28);
  v36 = v27 + v20[7];
  *(_QWORD *)v36 = v35;
  *(_BYTE *)(v36 + 8) = v37 & 1;
  v49 = 7;
  v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v49, v28);
  v40 = v39;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v28);
  v41 = v27 + v20[11];
  *(_QWORD *)v41 = v38;
  *(_BYTE *)(v41 + 8) = v40 & 1;
  sub_10016DFD4(v27, v46);
  sub_10002BB90(v47);
  return sub_10016E018(v27);
}

unint64_t sub_10016DF90()
{
  unint64_t result;

  result = qword_100265668;
  if (!qword_100265668)
  {
    result = swift_getWitnessTable(&unk_1001F81F4, &type metadata for LegacyLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265668);
  }
  return result;
}

uint64_t sub_10016DFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LegacyLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016E018(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LegacyLocation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t LegacyLocation.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  void *v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  void *v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  double v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  Swift::String v48;
  uint64_t v50;
  char v51;
  _QWORD v52[2];

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100261818);
  __chkstk_darwin(v5);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52[0] = 0;
  v52[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(124);
  v8._countAndFlagsBits = 0x3A73736572646461;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  sub_10000E37C(v0, (uint64_t)v7, &qword_100261818);
  v9 = type metadata accessor for PlaceMark(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) == 1)
  {
    sub_1000087A0((uint64_t)v7, &qword_100261818);
    v11 = 0;
    v12 = (void *)0xE000000000000000;
  }
  else
  {
    v11 = PlaceMark.description.getter();
    v12 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
  }
  v14._countAndFlagsBits = v11;
  v14._object = v12;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v12);
  v15._countAndFlagsBits = 0x64757469746C610ALL;
  v15._object = (void *)0xEA00000000003A65;
  String.append(_:)(v15);
  v16 = (int *)type metadata accessor for LegacyLocation(0);
  v17 = v0 + v16[5];
  v18 = *(_QWORD *)v17;
  LOBYTE(v17) = *(_BYTE *)(v17 + 8);
  v50 = v18;
  v51 = v17;
  v19 = sub_100037A5C(&qword_100265578);
  v20._countAndFlagsBits = String.init<A>(describing:)(&v50, v19);
  object = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(object);
  v22._countAndFlagsBits = 0x654C726F6F6C660ALL;
  v22._object = (void *)0xEC0000003A6C6576;
  String.append(_:)(v22);
  v23 = v0 + v16[6];
  v24 = *(_QWORD *)v23;
  LOBYTE(v23) = *(_BYTE *)(v23 + 8);
  v50 = v24;
  v51 = v23;
  v25 = sub_100037A5C(&qword_100265678);
  v26._countAndFlagsBits = String.init<A>(describing:)(&v50, v25);
  v27 = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v27);
  v28._countAndFlagsBits = 0xD000000000000014;
  v28._object = (void *)0x8000000100200AA0;
  String.append(_:)(v28);
  v29 = v0 + v16[7];
  v30 = *(_QWORD *)v29;
  LOBYTE(v29) = *(_BYTE *)(v29 + 8);
  v50 = v30;
  v51 = v29;
  v31._countAndFlagsBits = String.init<A>(describing:)(&v50, v19);
  v32 = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v32);
  v33._object = (void *)0x8000000100200AC0;
  v33._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v33);
  v34 = v0 + v16[11];
  v35 = *(_QWORD *)v34;
  LOBYTE(v34) = *(_BYTE *)(v34 + 8);
  v50 = v35;
  v51 = v34;
  v36._countAndFlagsBits = String.init<A>(describing:)(&v50, v19);
  v37 = v36._object;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v37);
  v38._countAndFlagsBits = 0x6475746974616C0ALL;
  v38._object = (void *)0xEA00000000003A65;
  String.append(_:)(v38);
  Double.write<A>(to:)(v52, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + v16[8]));
  v39._countAndFlagsBits = 0x757469676E6F6C0ALL;
  v39._object = (void *)0xEB000000003A6564;
  String.append(_:)(v39);
  Double.write<A>(to:)(v52, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + v16[9]));
  v40._object = (void *)0xEB000000003A706DLL;
  v40._countAndFlagsBits = 0x617473656D69740ALL;
  String.append(_:)(v40);
  v41 = *(double *)(v0 + v16[10]);
  Double.write<A>(to:)(v52, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v41);
  v42._countAndFlagsBits = 0x3A657461640ALL;
  v42._object = (void *)0xE600000000000000;
  String.append(_:)(v42);
  v44 = Date.init(timeIntervalSince1970:)(v43, v41);
  v45 = Date.localISO8601.getter(v44);
  v47 = v46;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v48._countAndFlagsBits = v45;
  v48._object = v47;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v47);
  return v52[0];
}

BOOL static LegacyLocation.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LegacyLocation(0);
  return *(double *)(a1 + *(int *)(v4 + 40)) < *(double *)(a2 + *(int *)(v4 + 40));
}

void LegacyLocation.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  uint64_t v16;
  Swift::UInt v17;
  uint64_t v18;
  Swift::UInt64 v19;
  Swift::UInt64 v20;
  Swift::UInt64 v21;
  Swift::UInt64 v22;
  Swift::UInt64 v23;
  uint64_t v24;
  Swift::UInt64 v25;
  Swift::UInt64 v26;
  uint64_t v27;

  v2 = v1;
  v4 = type metadata accessor for PlaceMark(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100261818);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E37C(v2, (uint64_t)v10, &qword_100261818);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    v11 = sub_100004EA8(&qword_100265680, (uint64_t (*)(uint64_t))&type metadata accessor for PlaceMark, (uint64_t)&protocol conformance descriptor for PlaceMark);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v12 = (int *)type metadata accessor for LegacyLocation(0);
  v13 = v2 + v12[5];
  if (*(_BYTE *)(v13 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v14 = *(_QWORD *)v13;
    Hasher._combine(_:)(1u);
    if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v15 = v14;
    else
      v15 = 0;
    Hasher._combine(_:)(v15);
  }
  v16 = v2 + v12[6];
  if (*(_BYTE *)(v16 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v17 = *(_QWORD *)v16;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
  }
  v18 = v2 + v12[7];
  if (*(_BYTE *)(v18 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v19 = *(_QWORD *)v18;
    Hasher._combine(_:)(1u);
    if ((v19 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v20 = v19;
    else
      v20 = 0;
    Hasher._combine(_:)(v20);
  }
  if ((*(_QWORD *)(v2 + v12[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v21 = *(_QWORD *)(v2 + v12[8]);
  else
    v21 = 0;
  Hasher._combine(_:)(v21);
  if ((*(_QWORD *)(v2 + v12[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v22 = *(_QWORD *)(v2 + v12[9]);
  else
    v22 = 0;
  Hasher._combine(_:)(v22);
  if ((*(_QWORD *)(v2 + v12[10]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v23 = *(_QWORD *)(v2 + v12[10]);
  else
    v23 = 0;
  Hasher._combine(_:)(v23);
  v24 = v2 + v12[11];
  if (*(_BYTE *)(v24 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v25 = *(_QWORD *)v24;
    Hasher._combine(_:)(1u);
    if ((v25 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v26 = v25;
    else
      v26 = 0;
    Hasher._combine(_:)(v26);
  }
}

uint64_t LegacyLocation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100265688);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10016DF90();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LegacyLocation.CodingKeys, &type metadata for LegacyLocation.CodingKeys, v11, v9, v10);
  v39 = 0;
  v12 = type metadata accessor for PlaceMark(0);
  v13 = sub_100004EA8(&qword_100265690, (uint64_t (*)(uint64_t))&type metadata accessor for PlaceMark, (uint64_t)&protocol conformance descriptor for PlaceMark);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v39, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for LegacyLocation(0);
    v15 = (uint64_t *)(v3 + v14[5]);
    v16 = *v15;
    v17 = *((unsigned __int8 *)v15 + 8);
    v38 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v38, v5);
    v18 = (uint64_t *)(v3 + v14[6]);
    v19 = *v18;
    v20 = *((unsigned __int8 *)v18 + 8);
    v37 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v37, v5);
    v21 = (uint64_t *)(v3 + v14[7]);
    v22 = *v21;
    v23 = *((unsigned __int8 *)v21 + 8);
    v36 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v36, v5);
    v24 = *(double *)(v3 + v14[8]);
    v35 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v24);
    v25 = *(double *)(v3 + v14[9]);
    v34 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v34, v5, v25);
    v26 = *(double *)(v3 + v14[10]);
    v33 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(&v33, v5, v26);
    v27 = (uint64_t *)(v3 + v14[11]);
    v28 = *v27;
    v29 = *((unsigned __int8 *)v27 + 8);
    v32 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v32, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int LegacyLocation.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  LegacyLocation.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10016E9F0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  LegacyLocation.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_10016EA28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return LegacyLocation.init(from:)(a1, a2);
}

uint64_t sub_10016EA3C(_QWORD *a1)
{
  return LegacyLocation.encode(to:)(a1);
}

BOOL sub_10016EA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a1 + *(int *)(a3 + 40)) < *(double *)(a2 + *(int *)(a3 + 40));
}

BOOL sub_10016EA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + *(int *)(a3 + 40)) >= *(double *)(a1 + *(int *)(a3 + 40));
}

BOOL sub_10016EA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a1 + *(int *)(a3 + 40)) >= *(double *)(a2 + *(int *)(a3 + 40));
}

BOOL sub_10016EA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + *(int *)(a3 + 40)) < *(double *)(a1 + *(int *)(a3 + 40));
}

BOOL _s13findmylocated14LegacyLocationV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  int *v25;
  uint64_t v26;
  double *v27;
  char v28;
  double *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  double *v37;
  char v38;
  double *v39;
  int v40;
  uint64_t v41;
  double *v42;
  char v43;
  double *v44;
  char v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v4 = type metadata accessor for PlaceMark(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v48 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100265768);
  __chkstk_darwin(v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100261818);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v47 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v47 - v17;
  v49 = a1;
  sub_10000E37C(a1, (uint64_t)&v47 - v17, &qword_100261818);
  v50 = a2;
  sub_10000E37C(a2, (uint64_t)v16, &qword_100261818);
  v19 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10000E37C((uint64_t)v18, (uint64_t)v9, &qword_100261818);
  sub_10000E37C((uint64_t)v16, v19, &qword_100261818);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v9, 1, v4) != 1)
  {
    sub_10000E37C((uint64_t)v9, (uint64_t)v13, &qword_100261818);
    if (v20(v19, 1, v4) != 1)
    {
      v21 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v48, v19, v4);
      v22 = sub_100004EA8(&qword_100265770, (uint64_t (*)(uint64_t))&type metadata accessor for PlaceMark, (uint64_t)&protocol conformance descriptor for PlaceMark);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v21, v4, v22);
      v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v21, v4);
      sub_1000087A0((uint64_t)v16, &qword_100261818);
      sub_1000087A0((uint64_t)v18, &qword_100261818);
      v24(v13, v4);
      sub_1000087A0((uint64_t)v9, &qword_100261818);
      if ((v23 & 1) == 0)
        return 0;
      goto LABEL_8;
    }
    sub_1000087A0((uint64_t)v16, &qword_100261818);
    sub_1000087A0((uint64_t)v18, &qword_100261818);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_6:
    sub_1000087A0((uint64_t)v9, &qword_100265768);
    return 0;
  }
  sub_1000087A0((uint64_t)v16, &qword_100261818);
  sub_1000087A0((uint64_t)v18, &qword_100261818);
  if (v20(v19, 1, v4) != 1)
    goto LABEL_6;
  sub_1000087A0((uint64_t)v9, &qword_100261818);
LABEL_8:
  v25 = (int *)type metadata accessor for LegacyLocation(0);
  v26 = v25[5];
  v27 = (double *)(v49 + v26);
  v28 = *(_BYTE *)(v49 + v26 + 8);
  v29 = (double *)(v50 + v26);
  v30 = *(unsigned __int8 *)(v50 + v26 + 8);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      return 0;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      return 0;
  }
  v31 = v25[6];
  v32 = (_QWORD *)(v49 + v31);
  v33 = *(_BYTE *)(v49 + v31 + 8);
  v34 = (_QWORD *)(v50 + v31);
  v35 = *(unsigned __int8 *)(v50 + v31 + 8);
  if ((v33 & 1) != 0)
  {
    if (!v35)
      return 0;
  }
  else
  {
    if (*v32 != *v34)
      LOBYTE(v35) = 1;
    if ((v35 & 1) != 0)
      return 0;
  }
  v36 = v25[7];
  v37 = (double *)(v49 + v36);
  v38 = *(_BYTE *)(v49 + v36 + 8);
  v39 = (double *)(v50 + v36);
  v40 = *(unsigned __int8 *)(v50 + v36 + 8);
  if ((v38 & 1) != 0)
  {
    if (!v40)
      return 0;
  }
  else
  {
    if (*v37 != *v39)
      LOBYTE(v40) = 1;
    if ((v40 & 1) != 0)
      return 0;
  }
  if (*(double *)(v49 + v25[8]) != *(double *)(v50 + v25[8])
    || *(double *)(v49 + v25[9]) != *(double *)(v50 + v25[9])
    || *(double *)(v49 + v25[10]) != *(double *)(v50 + v25[10]))
  {
    return 0;
  }
  v41 = v25[11];
  v42 = (double *)(v49 + v41);
  v43 = *(_BYTE *)(v49 + v41 + 8);
  v44 = (double *)(v50 + v41);
  v45 = *(_BYTE *)(v50 + v41 + 8);
  if ((v43 & 1) == 0)
  {
    if (*v42 != *v44)
      v45 = 1;
    return (v45 & 1) == 0;
  }
  return (v45 & 1) != 0;
}

uint64_t sub_10016EEC8()
{
  return sub_100004EA8(&qword_100265698, type metadata accessor for LegacyLocation, (uint64_t)&protocol conformance descriptor for LegacyLocation);
}

uint64_t *initializeBufferWithCopyOfBuffer for LegacyLocation(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for PlaceMark(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100037A5C(&qword_100261818);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = a3[7];
    v18 = a3[8];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
    v21 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
    v22 = a3[11];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
  }
  return a1;
}

uint64_t destroy for LegacyLocation(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for PlaceMark(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

char *initializeWithCopy for LegacyLocation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = type metadata accessor for PlaceMark(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100037A5C(&qword_100261818);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  v19 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  v20 = a3[11];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  return a1;
}

char *assignWithCopy for LegacyLocation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v6 = type metadata accessor for PlaceMark(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100037A5C(&qword_100261818);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)v17 = v19;
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  v24 = a3[11];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  return a1;
}

char *initializeWithTake for LegacyLocation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = type metadata accessor for PlaceMark(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100037A5C(&qword_100261818);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  v19 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  v20 = a3[11];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  return a1;
}

char *assignWithTake for LegacyLocation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = type metadata accessor for PlaceMark(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100037A5C(&qword_100261818);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = a3[6];
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = &a1[v13];
  v17 = &a2[v13];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  v22 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  v23 = a3[11];
  v24 = &a1[v23];
  v25 = &a2[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  return a1;
}

uint64_t sub_10016F644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_100261818);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10016F684(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_100261818);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_10016F6C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  sub_100101280(319, (unint64_t *)&unk_100265708, (uint64_t (*)(uint64_t))&type metadata accessor for PlaceMark);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\t";
    v4[2] = "\t";
    v4[3] = "\t";
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = "\t";
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
  }
}

uint64_t storeEnumTagSinglePayload for LegacyLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10016F7AC + 4 * byte_1001F7F79[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10016F7E0 + 4 * byte_1001F7F74[v4]))();
}

uint64_t sub_10016F7E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016F7E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016F7F0);
  return result;
}

uint64_t sub_10016F7FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10016F804);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10016F808(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016F810(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyLocation.CodingKeys()
{
  return &type metadata for LegacyLocation.CodingKeys;
}

unint64_t sub_10016F830()
{
  unint64_t result;

  result = qword_100265750;
  if (!qword_100265750)
  {
    result = swift_getWitnessTable(&unk_1001F81CC, &type metadata for LegacyLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265750);
  }
  return result;
}

unint64_t sub_10016F878()
{
  unint64_t result;

  result = qword_100265758;
  if (!qword_100265758)
  {
    result = swift_getWitnessTable(&unk_1001F8104, &type metadata for LegacyLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265758);
  }
  return result;
}

unint64_t sub_10016F8C0()
{
  unint64_t result;

  result = qword_100265760;
  if (!qword_100265760)
  {
    result = swift_getWitnessTable(&unk_1001F812C, &type metadata for LegacyLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265760);
  }
  return result;
}

uint64_t sub_10016F904(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_10016F9D4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10024EF58, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_10016FA1C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10024EFD8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

_QWORD *sub_10016FA64(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = (int *)type metadata accessor for LegacyLocation(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_10016E018((uint64_t)v9);
      goto LABEL_7;
    }
    v20 = type metadata accessor for PlaceMark(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
    v23 = v22(v9, 1, v20);
    v24 = v22(v10, 1, v20);
    if (v23)
    {
      if (!v24)
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v9, v10, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v9, 0, 1, v20);
LABEL_16:
        v42 = v11[5];
        v43 = &v9[v42];
        v44 = &v10[v42];
        v45 = *(_QWORD *)v44;
        v43[8] = v44[8];
        *(_QWORD *)v43 = v45;
        v46 = v11[6];
        v47 = &v9[v46];
        v48 = &v10[v46];
        v49 = *(_QWORD *)v48;
        v47[8] = v48[8];
        *(_QWORD *)v47 = v49;
        v50 = v11[7];
        v51 = &v9[v50];
        v52 = &v10[v50];
        v53 = *(_QWORD *)v52;
        v51[8] = v52[8];
        *(_QWORD *)v51 = v53;
        *(_QWORD *)&v9[v11[8]] = *(_QWORD *)&v10[v11[8]];
        *(_QWORD *)&v9[v11[9]] = *(_QWORD *)&v10[v11[9]];
        *(_QWORD *)&v9[v11[10]] = *(_QWORD *)&v10[v11[10]];
        v54 = v11[11];
        v55 = &v9[v54];
        v56 = &v10[v54];
        v57 = *(_QWORD *)v56;
        v55[8] = v56[8];
        *(_QWORD *)v55 = v57;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v24)
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v9, v10, v20);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v20);
    }
    v41 = sub_100037A5C(&qword_100261818);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_16;
  }
  if (v15)
  {
LABEL_7:
    v19 = sub_100037A5C(&qword_100261820);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_17;
  }
  v16 = type metadata accessor for PlaceMark(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v16))
  {
    v18 = sub_100037A5C(&qword_100261818);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v9, v10, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, v16);
  }
  v25 = v11[5];
  v26 = &v9[v25];
  v27 = &v10[v25];
  v28 = *(_QWORD *)v27;
  v26[8] = v27[8];
  *(_QWORD *)v26 = v28;
  v29 = v11[6];
  v30 = &v9[v29];
  v31 = &v10[v29];
  v32 = *(_QWORD *)v31;
  v30[8] = v31[8];
  *(_QWORD *)v30 = v32;
  v33 = v11[7];
  v34 = &v9[v33];
  v35 = &v10[v33];
  v36 = *(_QWORD *)v35;
  v34[8] = v35[8];
  *(_QWORD *)v34 = v36;
  *(_QWORD *)&v9[v11[8]] = *(_QWORD *)&v10[v11[8]];
  *(_QWORD *)&v9[v11[9]] = *(_QWORD *)&v10[v11[9]];
  *(_QWORD *)&v9[v11[10]] = *(_QWORD *)&v10[v11[10]];
  v37 = v11[11];
  v38 = &v9[v37];
  v39 = &v10[v37];
  v40 = *(_QWORD *)v39;
  v38[8] = v39[8];
  *(_QWORD *)v38 = v40;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
LABEL_17:
  v58 = a3[6];
  v59 = (_QWORD *)((char *)a1 + v58);
  v60 = (_QWORD *)((char *)a2 + v58);
  *v59 = *v60;
  v61 = v60[1];
  v62 = v59[1];
  v59[1] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  v63 = a3[7];
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = (_QWORD *)((char *)a2 + v63);
  *v64 = *v65;
  v66 = v65[1];
  v67 = v64[1];
  v64[1] = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  return a1;
}

_OWORD *sub_10016FE18(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for LegacyLocation(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100037A5C(&qword_100261820);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for PlaceMark(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12))
    {
      v14 = sub_100037A5C(&qword_100261818);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v7, v8, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
    }
    v15 = v9[5];
    v16 = &v7[v15];
    v17 = &v8[v15];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = v9[6];
    v19 = &v7[v18];
    v20 = &v8[v18];
    v19[8] = v20[8];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v21 = v9[7];
    v22 = &v7[v21];
    v23 = &v8[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    *(_QWORD *)&v7[v9[8]] = *(_QWORD *)&v8[v9[8]];
    *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
    *(_QWORD *)&v7[v9[10]] = *(_QWORD *)&v8[v9[10]];
    v24 = v9[11];
    v25 = &v7[v24];
    v26 = &v8[v24];
    v25[8] = v26[8];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v27 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v27) = *(_OWORD *)((char *)a2 + v27);
  return a1;
}

_QWORD *sub_10016FFF8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = (int *)type metadata accessor for LegacyLocation(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_10016E018((uint64_t)v9);
      goto LABEL_7;
    }
    v20 = type metadata accessor for PlaceMark(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
    v23 = v22(v9, 1, v20);
    v24 = v22(v10, 1, v20);
    if (v23)
    {
      if (!v24)
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v9, v10, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v9, 0, 1, v20);
LABEL_16:
        v38 = v11[5];
        v39 = &v9[v38];
        v40 = &v10[v38];
        *(_QWORD *)v39 = *(_QWORD *)v40;
        v39[8] = v40[8];
        v41 = v11[6];
        v42 = &v9[v41];
        v43 = &v10[v41];
        v42[8] = v43[8];
        *(_QWORD *)v42 = *(_QWORD *)v43;
        v44 = v11[7];
        v45 = &v9[v44];
        v46 = &v10[v44];
        *(_QWORD *)v45 = *(_QWORD *)v46;
        v45[8] = v46[8];
        *(_QWORD *)&v9[v11[8]] = *(_QWORD *)&v10[v11[8]];
        *(_QWORD *)&v9[v11[9]] = *(_QWORD *)&v10[v11[9]];
        *(_QWORD *)&v9[v11[10]] = *(_QWORD *)&v10[v11[10]];
        v47 = v11[11];
        v48 = &v9[v47];
        v49 = &v10[v47];
        v48[8] = v49[8];
        *(_QWORD *)v48 = *(_QWORD *)v49;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v24)
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v9, v10, v20);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v20);
    }
    v37 = sub_100037A5C(&qword_100261818);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_16;
  }
  if (v15)
  {
LABEL_7:
    v19 = sub_100037A5C(&qword_100261820);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_17;
  }
  v16 = type metadata accessor for PlaceMark(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v16))
  {
    v18 = sub_100037A5C(&qword_100261818);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v9, v10, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, v16);
  }
  v25 = v11[5];
  v26 = &v9[v25];
  v27 = &v10[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  v28 = v11[6];
  v29 = &v9[v28];
  v30 = &v10[v28];
  v29[8] = v30[8];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v31 = v11[7];
  v32 = &v9[v31];
  v33 = &v10[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  *(_QWORD *)&v9[v11[8]] = *(_QWORD *)&v10[v11[8]];
  *(_QWORD *)&v9[v11[9]] = *(_QWORD *)&v10[v11[9]];
  *(_QWORD *)&v9[v11[10]] = *(_QWORD *)&v10[v11[10]];
  v34 = v11[11];
  v35 = &v9[v34];
  v36 = &v10[v34];
  v35[8] = v36[8];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
LABEL_17:
  v50 = a3[6];
  v51 = (_QWORD *)((char *)a1 + v50);
  v52 = (_QWORD *)((char *)a2 + v50);
  v54 = *v52;
  v53 = v52[1];
  v55 = v51[1];
  *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease(v55);
  v56 = a3[7];
  v57 = (_QWORD *)((char *)a1 + v56);
  v58 = (_QWORD *)((char *)a2 + v56);
  v60 = *v58;
  v59 = v58[1];
  v61 = v57[1];
  *v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease(v61);
  return a1;
}

uint64_t sub_10017037C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100170388);
}

uint64_t sub_100170388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100037A5C(&qword_100261820);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100170408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100170414);
}

uint64_t sub_100170414(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100037A5C(&qword_100261820);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_10017048C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1001F8258;
  sub_100101280(319, (unint64_t *)&unk_1002657E0, type metadata accessor for LegacyLocation);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1001F8270;
    v4[3] = &unk_1001F8270;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

_QWORD *assignWithCopy for ServerLocationInProgress(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for ServerLocationInProgress(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for ServerLocationInProgress()
{
  return &type metadata for ServerLocationInProgress;
}

ValueMetadata *type metadata accessor for ServerLocationInProgress.CodingKeys()
{
  return &type metadata for ServerLocationInProgress.CodingKeys;
}

ValueMetadata *type metadata accessor for ServerLocation.CodingKeys()
{
  return &type metadata for ServerLocation.CodingKeys;
}

unint64_t sub_100170600()
{
  unint64_t result;

  result = qword_100265858;
  if (!qword_100265858)
  {
    result = swift_getWitnessTable(&unk_1001F8464, &type metadata for ServerLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265858);
  }
  return result;
}

unint64_t sub_100170648()
{
  unint64_t result;

  result = qword_100265860;
  if (!qword_100265860)
  {
    result = swift_getWitnessTable(&unk_1001F851C, &type metadata for ServerLocationInProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265860);
  }
  return result;
}

unint64_t sub_100170690()
{
  unint64_t result;

  result = qword_100265868;
  if (!qword_100265868)
  {
    result = swift_getWitnessTable(&unk_1001F848C, &type metadata for ServerLocationInProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265868);
  }
  return result;
}

unint64_t sub_1001706D8()
{
  unint64_t result;

  result = qword_100265870;
  if (!qword_100265870)
  {
    result = swift_getWitnessTable(&unk_1001F84B4, &type metadata for ServerLocationInProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265870);
  }
  return result;
}

unint64_t sub_100170720()
{
  unint64_t result;

  result = qword_100265878;
  if (!qword_100265878)
  {
    result = swift_getWitnessTable(&unk_1001F839C, &type metadata for ServerLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265878);
  }
  return result;
}

unint64_t sub_100170768()
{
  unint64_t result;

  result = qword_100265880;
  if (!qword_100265880)
  {
    result = swift_getWitnessTable(&unk_1001F83C4, &type metadata for ServerLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265880);
  }
  return result;
}

uint64_t sub_1001707AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[160];
  _BYTE v19[168];
  char v20;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100265940);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10017195C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RefreshClientRequestContent.CodingKeys, &type metadata for RefreshClientRequestContent.CodingKeys, v11, v9, v10);
  sub_10000EF6C(v3, (uint64_t)v19, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v19, (uint64_t)v18, &qword_1002603B0);
  v20 = 0;
  v12 = sub_10003E3B0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v20, v5, &type metadata for ServerContext, v12);
  if (!v2)
  {
    v13 = v3 + *(int *)(type metadata accessor for RefreshClientRequestContent(0) + 20);
    v18[0] = 1;
    v14 = type metadata accessor for ClientContext(0);
    v15 = sub_100004EA8(&qword_100260488, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3130);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100170944@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t refreshed;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v29[160];
  _QWORD v30[21];
  char v31;
  char v32;

  v23 = a2;
  v24 = type metadata accessor for ClientContext(0);
  __chkstk_darwin(v24);
  v4 = (uint64_t *)((char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_100037A5C(&qword_100265950);
  v5 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  refreshed = type metadata accessor for RefreshClientRequestContent(0);
  __chkstk_darwin(refreshed);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  v27 = a1;
  sub_100036228(a1, v12);
  v13 = sub_10017195C();
  v25 = v7;
  v14 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RefreshClientRequestContent.CodingKeys, &type metadata for RefreshClientRequestContent.CodingKeys, v13, v12, v11);
  if (v14)
    return sub_10002BB90(v27);
  v22 = refreshed;
  v28 = v5;
  v15 = v24;
  v16 = (uint64_t)v10;
  v32 = 0;
  v17 = sub_10002B9FC();
  v18 = v25;
  v19 = v26;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, &type metadata for ServerContext, &v32, v26, &type metadata for ServerContext, v17);
  sub_10000EF6C((uint64_t)v30, (uint64_t)v29, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v29, v16, &qword_1002603B0);
  v31 = 1;
  v20 = sub_100004EA8(&qword_1002604A0, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3158);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v15, &v31, v19, v15, v20);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v19);
  sub_10003E4F4((uint64_t)v4, v16 + *(int *)(v22 + 20));
  sub_100025C70(v16, v23, type metadata accessor for RefreshClientRequestContent);
  sub_10002BB90(v27);
  return sub_100024990(v16, type metadata accessor for RefreshClientRequestContent);
}

uint64_t sub_100170C08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000F97DC();
  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_100170C30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10017195C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100170C58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10017195C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100170C80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100170944(a1, a2);
}

uint64_t sub_100170C94(_QWORD *a1)
{
  return sub_1001707AC(a1);
}

uint64_t sub_100170CA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t refreshed;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1[225] = a1;
  v2 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  v1[226] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[227] = v3;
  v1[228] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  refreshed = type metadata accessor for RefreshClientRequestContent(0);
  v1[229] = refreshed;
  v5 = (*(_QWORD *)(*(_QWORD *)(refreshed - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[230] = swift_task_alloc(v5);
  v1[231] = swift_task_alloc(v5);
  v1[232] = swift_task_alloc(v5);
  v6 = type metadata accessor for Account(0);
  v1[233] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[234] = v7;
  v1[235] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260238) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[236] = swift_task_alloc(v8);
  v1[237] = swift_task_alloc(v8);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[238] = swift_task_alloc(v9);
  v1[239] = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ClientContext(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[240] = swift_task_alloc(v10);
  v1[241] = swift_task_alloc(v10);
  return swift_task_switch(sub_100170E08, 0, 0);
}

uint64_t sub_100170E08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v13;
  _QWORD *v14;

  v1 = v0[239];
  v2 = v0[238];
  v3 = v0[237];
  v4 = v0[236];
  v5 = v0[235];
  v6 = v0[234];
  v7 = v0[233];
  v8 = v0[225];
  v9 = sub_10003D638();
  v0[242] = v9;
  v10 = type metadata accessor for Handle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v1, 1, 1, v10);
  v11 = type metadata accessor for RequestOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v3, 1, 1, v11);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v6 + 16);
  v13 = swift_bridgeObjectRetain(v9);
  v12(v5, v8, v7, v13);
  sub_10000E37C(v3, v4, &qword_100260238);
  sub_10000E37C(v1, v2, &qword_1002650A0);
  v14 = (_QWORD *)swift_task_alloc(dword_100260234);
  v0[243] = v14;
  *v14 = v0;
  v14[1] = sub_100170F40;
  return sub_100044CD8(v0[241], v0[235], v0[236], v0[238], (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_100170F40()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 1928);
  v3 = *(_QWORD *)(*v0 + 1920);
  v4 = *(_QWORD *)(*v0 + 1912);
  v5 = *(_QWORD *)(*v0 + 1896);
  v8 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1944));
  sub_1000087A0(v5, &qword_100260238);
  sub_1000087A0(v4, &qword_1002650A0);
  sub_100025C70(v2, v3, type metadata accessor for ClientContext);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 1952) = v6;
  *v6 = v8;
  v6[1] = sub_100170FF8;
  return daemon.getter();
}

uint64_t sub_100170FF8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1952);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1960) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1968) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1001710E0;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001710E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1968);
  v5 = *(_QWORD **)v2;
  v5[247] = a1;
  v5[248] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100063400, 0, 0);
  swift_release(v5[245]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[249] = v7;
  *v7 = v5;
  v7[1] = sub_100171194;
  return sub_10000AFC8((uint64_t)(v5 + 110));
}

uint64_t sub_100171194()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1976);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1992));
  return swift_task_switch(sub_1001711EC, v1, 0);
}

uint64_t sub_1001711EC()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000EF6C(v0 + 880, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1)
  {
    v1 = v0 + 1472;
    sub_10004922C((_OWORD *)(v0 + 1472));
  }
  else
  {
    v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_10000EF6C(v0 + 112, v0 + 1632, &qword_1002603B0);
    sub_10000EFB0((_QWORD *)(v0 + 1632), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_10000AF28(v0 + 880);
  }
  sub_10000EF6C(v1, v0 + 1312, &qword_1002603B0);
  return swift_task_switch(sub_1001712B8, 0, 0);
}

uint64_t sub_1001712B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 1920);
  v2 = *(_QWORD *)(v0 + 1856);
  v3 = *(_QWORD *)(v0 + 1832);
  swift_release(*(_QWORD *)(v0 + 1976));
  sub_10000EF6C(v0 + 1312, v2, &qword_1002603B0);
  sub_10003E4F4(v1, v2 + *(int *)(v3 + 20));
  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v4 = *(_QWORD *)(v0 + 1856);
  v5 = *(_QWORD *)(v0 + 1848);
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027AD08);
  v7 = sub_100025C70(v4, v5, type metadata accessor for RefreshClientRequestContent);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 1848);
  if (v10)
  {
    v12 = *(_QWORD *)(v0 + 1840);
    v13 = *(_QWORD *)(v0 + 1832);
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v44 = v15;
    *(_DWORD *)v14 = 136315138;
    sub_100025C70(v11, v12, type metadata accessor for RefreshClientRequestContent);
    v16 = String.init<A>(describing:)(v12, v13);
    v18 = v17;
    *(_QWORD *)(v0 + 1792) = sub_10002BA84(v16, v17, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1792, v0 + 1800, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    sub_100024990(v11, type metadata accessor for RefreshClientRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Request content: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    sub_100024990(*(_QWORD *)(v0 + 1848), type metadata accessor for RefreshClientRequestContent);
  }

  v19 = *(_QWORD *)(v0 + 1984);
  v20 = *(_QWORD *)(v0 + 1856);
  v21 = *(_QWORD *)(v0 + 1832);
  v22 = *(_QWORD **)(v0 + 1824);
  v23 = *(_QWORD *)(v0 + 1816);
  v24 = *(_QWORD *)(v0 + 1808);
  v25 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = JSONEncoder.init()();
  *v22 = sub_100055760;
  v22[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v22, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v24);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v22);
  v27 = sub_100004EA8(&qword_100265890, type metadata accessor for RefreshClientRequestContent, (uint64_t)&unk_1001F870C);
  v28 = dispatch thunk of JSONEncoder.encode<A>(_:)(v20, v21, v27);
  v30 = v29;
  swift_release(v26);
  if (v19)
  {
    swift_errorRelease(v19);
    v28 = 0;
    v30 = 0xF000000000000000;
  }
  v31 = *(_QWORD *)(v0 + 1936);
  v32 = *(_QWORD *)(v0 + 1928);
  v33 = *(_QWORD *)(v0 + 1920);
  v34 = *(_QWORD *)(v0 + 1912);
  v35 = *(_QWORD *)(v0 + 1904);
  v36 = *(_QWORD *)(v0 + 1896);
  v39 = *(_QWORD *)(v0 + 1888);
  v40 = *(_QWORD *)(v0 + 1880);
  v37 = *(_QWORD *)(v0 + 1856);
  v41 = *(_QWORD *)(v0 + 1848);
  v42 = *(_QWORD *)(v0 + 1840);
  v43 = *(_QWORD *)(v0 + 1824);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1872) + 8))(*(_QWORD *)(v0 + 1800), *(_QWORD *)(v0 + 1864));
  sub_100024990(v37, type metadata accessor for RefreshClientRequestContent);
  sub_100024990(v32, type metadata accessor for ClientContext);
  swift_bridgeObjectRetain(v31);
  sub_10001F728(v28, v30);
  swift_bridgeObjectRelease_n(v31, 2);
  sub_100037AF8(v28, v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v37);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(v0 + 8))(*(_QWORD *)(v0 + 1936), v28, v30);
}

uint64_t type metadata accessor for RefreshClientRequestContent(uint64_t a1)
{
  uint64_t result;

  result = qword_1002658F0;
  if (!qword_1002658F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RefreshClientRequestContent);
  return result;
}

uint64_t sub_1001716D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001716E4);
}

uint64_t sub_1001716E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for ClientContext(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t sub_10017176C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100171778);
}

uint64_t sub_100171778(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 40) = a2;
  }
  else
  {
    v7 = type metadata accessor for ClientContext(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1001717EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1001F8620;
  result = type metadata accessor for ClientContext(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RefreshClientRequest()
{
  return &type metadata for RefreshClientRequest;
}

unint64_t sub_100171874()
{
  unint64_t result;

  result = qword_100265928;
  if (!qword_100265928)
  {
    result = swift_getWitnessTable(&unk_1001F8658, &type metadata for RefreshClientRequest);
    atomic_store(result, (unint64_t *)&qword_100265928);
  }
  return result;
}

uint64_t sub_1001718B8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004EA8(&qword_100265930, type metadata accessor for RefreshClientRequestContent, (uint64_t)&unk_1001F86C8);
  result = sub_100004EA8(&qword_100265890, type metadata accessor for RefreshClientRequestContent, (uint64_t)&unk_1001F870C);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100171918()
{
  unint64_t result;

  result = qword_100265938;
  if (!qword_100265938)
  {
    result = swift_getWitnessTable(&unk_1001F8680, &type metadata for RefreshClientRequest);
    atomic_store(result, (unint64_t *)&qword_100265938);
  }
  return result;
}

unint64_t sub_10017195C()
{
  unint64_t result;

  result = qword_100265948;
  if (!qword_100265948)
  {
    result = swift_getWitnessTable(&unk_1001F8828, &type metadata for RefreshClientRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265948);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RefreshClientRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001719EC + 4 * byte_1001F85F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100171A20 + 4 * byte_1001F85F0[v4]))();
}

uint64_t sub_100171A20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100171A28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100171A30);
  return result;
}

uint64_t sub_100171A3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100171A44);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100171A48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100171A50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RefreshClientRequestContent.CodingKeys()
{
  return &type metadata for RefreshClientRequestContent.CodingKeys;
}

unint64_t sub_100171A70()
{
  unint64_t result;

  result = qword_100265958;
  if (!qword_100265958)
  {
    result = swift_getWitnessTable(&unk_1001F8800, &type metadata for RefreshClientRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265958);
  }
  return result;
}

unint64_t sub_100171AB8()
{
  unint64_t result;

  result = qword_100265960;
  if (!qword_100265960)
  {
    result = swift_getWitnessTable(&unk_1001F8770, &type metadata for RefreshClientRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265960);
  }
  return result;
}

unint64_t sub_100171B00()
{
  unint64_t result;

  result = qword_100265968;
  if (!qword_100265968)
  {
    result = swift_getWitnessTable(&unk_1001F8798, &type metadata for RefreshClientRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265968);
  }
  return result;
}

uint64_t _s15KnownRecordTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100171B90 + 4 * byte_1001F887D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100171BC4 + 4 * byte_1001F8878[v4]))();
}

uint64_t sub_100171BC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100171BCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100171BD4);
  return result;
}

uint64_t sub_100171BE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100171BE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100171BEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100171BF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15KnownRecordTypeOMa()
{
  return &_s15KnownRecordTypeON;
}

void sub_100171C10(_QWORD *a1@<X8>)
{
  *a1 = &off_10024F0B8;
}

uint64_t sub_100171C20()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0x65636E65662ELL;
}

unint64_t sub_100171C60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100265970;
  if (!qword_100265970)
  {
    v1 = sub_10003C1FC(&qword_100265978);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100265970);
  }
  return result;
}

unint64_t sub_100171CB0()
{
  unint64_t result;

  result = qword_100265980;
  if (!qword_100265980)
  {
    result = swift_getWitnessTable(&unk_1001F8934, &_s15KnownRecordTypeON);
    atomic_store(result, (unint64_t *)&qword_100265980);
  }
  return result;
}

void sub_100171CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19[3];

  v4 = v3;
  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100037A9C(v8, (uint64_t)qword_10027AD50);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v19[0] = v13;
    *(_DWORD *)v12 = 136446210;
    v18 = sub_10002BA84(0xD000000000000044, 0x8000000100200B40, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  v14 = v4 + OBJC_IVAR____TtC13findmylocated16NIRangingService_discoverContinuation;
  swift_beginAccess(v4 + OBJC_IVAR____TtC13findmylocated16NIRangingService_discoverContinuation, v19, 33, 0);
  sub_1001726E4(a2, v14);
  swift_endAccess(v19);
  v15 = v4 + OBJC_IVAR____TtC13findmylocated16NIRangingService_updateContinuation;
  swift_beginAccess(v4 + OBJC_IVAR____TtC13findmylocated16NIRangingService_updateContinuation, v19, 33, 0);
  sub_1001726E4(a3, v15);
  swift_endAccess(v19);
  v16 = *(void **)(v4 + 128);
  if (v16)
  {
    v17 = v16;
    sub_1001724B4(a1);

  }
}

uint64_t sub_100171F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _BYTE v34[24];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];

  v1 = v0;
  v2 = sub_100037A5C(&qword_100261EF8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v33 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_1002643C0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v31 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v31 - v12;
  if (qword_10025F968 != -1)
    swift_once(&qword_10025F968, sub_100128244);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100037A9C(v14, (uint64_t)qword_10027AD50);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v31 = v1;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v32 = v3;
    v20 = v19;
    v37[0] = v19;
    *(_DWORD *)v18 = 136446210;
    v35 = sub_10002BA84(0xD000000000000015, 0x8000000100200B20, v37);
    v1 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v18 + 4, v18 + 12);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v21 = v20;
    v3 = v32;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

  v22 = *(void **)(v1 + 128);
  if (v22)
  {
    v23 = v22;
    sub_1001722EC();

  }
  v24 = v1 + OBJC_IVAR____TtC13findmylocated16NIRangingService_discoverContinuation;
  swift_beginAccess(v1 + OBJC_IVAR____TtC13findmylocated16NIRangingService_discoverContinuation, v37, 0, 0);
  sub_1001723E4(v24, (uint64_t)v13);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v25(v13, 1, v2))
  {
    sub_10017242C((uint64_t)v13);
  }
  else
  {
    v26 = v33;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v33, v13, v2);
    sub_10017242C((uint64_t)v13);
    AsyncStream.Continuation.finish()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v26, v2);
  }
  v27 = v1 + OBJC_IVAR____TtC13findmylocated16NIRangingService_updateContinuation;
  swift_beginAccess(v27, &v35, 0, 0);
  sub_1001723E4(v27, (uint64_t)v11);
  if (v25(v11, 1, v2))
  {
    sub_10017242C((uint64_t)v11);
  }
  else
  {
    v28 = v33;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v33, v11, v2);
    sub_10017242C((uint64_t)v11);
    AsyncStream.Continuation.finish()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v28, v2);
  }
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v29(v8, 1, 1, v2);
  swift_beginAccess(v24, v34, 33, 0);
  sub_10017246C((uint64_t)v8, v24);
  swift_endAccess(v34);
  v29(v8, 1, 1, v2);
  swift_beginAccess(v27, v34, 33, 0);
  sub_10017246C((uint64_t)v8, v27);
  return swift_endAccess(v34);
}

void sub_1001722EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;

  v1 = v0;
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100037A9C(v2, (uint64_t)qword_10027AD68);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Stop ranging", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = qword_100264F90;
  v8 = *(void **)(v1 + qword_100264F90);
  if (v8)
  {
    objc_msgSend(v8, "invalidate");
    v8 = *(void **)(v1 + v7);
  }
  *(_QWORD *)(v1 + v7) = 0;

}

uint64_t sub_1001723E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_1002643C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017242C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100037A5C(&qword_1002643C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10017246C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_1002643C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1001724B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v3 = objc_msgSend(objc_allocWithZone((Class)NIFindingConfiguration), "initWithRole:discoveryToken:preferredUpdateRate:", 0, a1, 2);
  if (qword_10025F970 != -1)
    swift_once(&qword_10025F970, sub_100128268);
  v4 = type metadata accessor for Logger(0);
  sub_100037A9C(v4, (uint64_t)qword_10027AD68);
  v5 = v3;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 141558275;
    v14 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2113;
    v14 = (uint64_t)v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v8 + 14, v8 + 22);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Start ranging with %{private,mask.hash}@", (uint8_t *)v8, 0x16u);
    v11 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = objc_msgSend(objc_allocWithZone((Class)NISession), "init");
  v13 = *(void **)(v2 + qword_100264F90);
  *(_QWORD *)(v2 + qword_100264F90) = v12;

  objc_msgSend(v12, "runWithConfiguration:", v5);
}

uint64_t sub_1001726E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_1002643C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

BOOL sub_10017272C(char *a1, char *a2)
{
  return qword_1001F8AC0[*a1] == qword_1001F8AC0[*a2];
}

Swift::Int sub_100172750()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(qword_1001F8AC0[v1]);
  return Hasher._finalize()();
}

void sub_10017279C()
{
  char *v0;

  Hasher._combine(_:)(qword_1001F8AC0[*v0]);
}

Swift::Int sub_1001727D0(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_1001F8AC0[v2]);
  return Hasher._finalize()();
}

uint64_t sub_100172818@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10002B954(*a1);
  *a2 = result;
  return result;
}

void sub_100172840(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1001F8AC0[*v1];
}

uint64_t sub_100172858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100172A14();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001728B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100172A14();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for ServerStatusCode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_10017294C + 4 * byte_1001F8988[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100172980 + 4 * byte_1001F8983[v4]))();
}

uint64_t sub_100172980(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100172988(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100172990);
  return result;
}

uint64_t sub_10017299C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001729A4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1001729A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001729B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerStatusCode()
{
  return &type metadata for ServerStatusCode;
}

unint64_t sub_1001729D0()
{
  unint64_t result;

  result = qword_100265988;
  if (!qword_100265988)
  {
    result = swift_getWitnessTable(&unk_1001F8A94, &type metadata for ServerStatusCode);
    atomic_store(result, (unint64_t *)&qword_100265988);
  }
  return result;
}

unint64_t sub_100172A14()
{
  unint64_t result;

  result = qword_100265990;
  if (!qword_100265990)
  {
    result = swift_getWitnessTable(&unk_1001F8A1C, &type metadata for ServerStatusCode);
    atomic_store(result, &qword_100265990);
  }
  return result;
}

uint64_t sub_100172A58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 56));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager read all devices failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100172C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 72));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager read all devices failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100172E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 1784));
  v1 = *(_QWORD *)(v0 + 1808);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 1744) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 1744, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 1752) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1752, v0 + 1760, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager read serverSettings fromLocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  sub_100173A20((_OWORD *)(v0 + 880));
  sub_10002C158(v0 + 880, v0 + 16);
  sub_10002C158(v0 + 16, *(_QWORD *)(v0 + 1760));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100173048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 1800));
  v1 = *(_QWORD *)(v0 + 1824);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 1744) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 1744, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 1752) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1752, v0 + 1760, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager read serverSettings fromLocalStorage failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  sub_100173A20((_OWORD *)(v0 + 880));
  sub_10002C158(v0 + 880, v0 + 16);
  sub_10002C158(v0 + 16, *(_QWORD *)(v0 + 1760));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100173260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 64));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager writeAllDevices failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100173450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 80));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager writeAllDevices failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100173640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 56));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager write serverSettings failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100173830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 72));
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager write serverSettings failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100173A20(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_100173A60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100179A08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100173A84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001B40C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100173AAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001B40C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100173AD4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[6];
  _OWORD v10[6];

  v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_1001798B0((double *)v9, (uint64_t)v10) & 1;
}

uint64_t sub_100173B2C()
{
  return sub_100028A7C();
}

uint64_t sub_100173B6C(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100265B80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1000240B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerDevice.CodingKeys, &type metadata for ServerDevice.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v26 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v26, v5);
  if (!v2)
  {
    v13 = v3[1];
    v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v25, v5);
    v14 = *((_QWORD *)v3 + 1);
    v15 = *((_QWORD *)v3 + 2);
    v24 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v24, v5);
    v16 = *((_QWORD *)v3 + 3);
    v17 = *((_QWORD *)v3 + 4);
    v23 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v23, v5);
    v18 = *((_QWORD *)v3 + 5);
    v19 = *((_QWORD *)v3 + 6);
    v22 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100173CF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100179D9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100173D1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000240B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100173D44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000240B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100173D6C(_QWORD *a1)
{
  return sub_100173B6C(a1);
}

uint64_t sub_100173D80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100179FC4(a1, a2);
  *a3 = result;
  return result;
}

void sub_100173DA4(_BYTE *a1@<X8>)
{
  *a1 = 21;
}

uint64_t sub_100173DB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001BC50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100173DD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001BC50();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_100173E00(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[9];
  _OWORD v12[9];

  v2 = a1[7];
  v11[6] = a1[6];
  v11[7] = v2;
  v11[8] = a1[8];
  v3 = a1[3];
  v11[2] = a1[2];
  v11[3] = v3;
  v4 = a1[5];
  v11[4] = a1[4];
  v11[5] = v4;
  v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  v6 = a2[7];
  v12[6] = a2[6];
  v12[7] = v6;
  v12[8] = a2[8];
  v7 = a2[3];
  v12[2] = a2[2];
  v12[3] = v7;
  v8 = a2[5];
  v12[4] = a2[4];
  v12[5] = v8;
  v9 = a2[1];
  v12[0] = *a2;
  v12[1] = v9;
  return sub_100179728((uint64_t)v11, (uint64_t)v12);
}

uint64_t sub_100173E80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10017A7D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100173EA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100019BD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100173ECC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100019BD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100173EF4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  return result;
}

void sub_100173F84(char *a1)
{
  sub_100109C24(*a1);
}

void sub_100173F90()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_100173FE0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6F43737574617473, 0xEA00000000006564);
  swift_bridgeObjectRelease(0xEA00000000006564);
  return Hasher._finalize()();
}

void sub_100174058()
{
  __asm { BR              X10 }
}

uint64_t sub_100174098(uint64_t a1)
{
  String.hash(into:)(a1, 0x6F43737574617473, 0xEA00000000006564);
  return swift_bridgeObjectRelease(0xEA00000000006564);
}

void sub_1001740FC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_100174148()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6F43737574617473, 0xEA00000000006564);
  swift_bridgeObjectRelease(0xEA00000000006564);
  return Hasher._finalize()();
}

unint64_t sub_1001741C0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10017A8DC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001741EC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100174220 + 4 * byte_1001F8B6E[*v0]))();
}

void sub_100174220(_QWORD *a1@<X8>)
{
  *a1 = 0x6F43737574617473;
  a1[1] = 0xEA00000000006564;
}

void sub_100174240(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "requestTokens");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_100174268(_QWORD *a1@<X8>)
{
  *a1 = 7107189;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_10017427C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001742B0 + 4 * byte_1001F8B72[*v0]))(0x614D737574617473, 0xE900000000000070);
}

uint64_t sub_1001742B0()
{
  return 0x6F43737574617473;
}

uint64_t sub_1001742CC()
{
  return 0x5474736575716572;
}

uint64_t sub_1001742F0()
{
  return 7107189;
}

unint64_t sub_100174300@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10017A8DC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100174324(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10017EFD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017434C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10017EFD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t *sub_100174374@<X0>(uint64_t *result@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  _QWORD v26[2];

  v3 = *result;
  v4 = result[1];
  v5 = HIBYTE(v4) & 0xF;
  v6 = *result & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v7 = HIBYTE(v4) & 0xF;
  else
    v7 = *result & 0xFFFFFFFFFFFFLL;
  if (!v7)
    goto LABEL_48;
  if ((v4 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(result[1]);
    v9 = (uint64_t)sub_1001EF3C8(v3, v4, 10);
    v11 = v25;
    result = (uint64_t *)swift_bridgeObjectRelease(v4);
    goto LABEL_44;
  }
  if ((v4 & 0x2000000000000000) == 0)
  {
    if ((v3 & 0x1000000000000000) != 0)
      v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(*result, v4);
    result = (uint64_t *)sub_1001EF3B4(v8, v6, 10);
    v9 = (uint64_t)result;
    v11 = v10 & 1;
LABEL_44:
    if ((v11 & 1) == 0)
    {
      result = (uint64_t *)sub_10002B954(v9);
      if (result == 11)
        v21 = 0;
      else
        v21 = (char)result;
      goto LABEL_49;
    }
LABEL_48:
    v21 = 10;
LABEL_49:
    *a2 = v21;
    return result;
  }
  v26[0] = *result;
  v26[1] = v4 & 0xFFFFFFFFFFFFFFLL;
  if (v3 == 43)
  {
    if (!v5)
      goto LABEL_59;
    if (v5 == 1 || (BYTE1(v3) - 48) > 9u)
      goto LABEL_31;
    v9 = (BYTE1(v3) - 48);
    if (v5 != 2)
    {
      if ((BYTE2(v3) - 48) > 9u)
        goto LABEL_31;
      v9 = 10 * (BYTE1(v3) - 48) + (BYTE2(v3) - 48);
      v12 = v5 - 3;
      if (v12)
      {
        v13 = (unsigned __int8 *)v26 + 3;
        while (1)
        {
          v14 = *v13 - 48;
          if (v14 > 9)
            goto LABEL_31;
          v15 = 10 * v9;
          if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63)
            goto LABEL_31;
          v9 = v15 + v14;
          if (__OFADD__(v15, v14))
            goto LABEL_31;
          v11 = 0;
          ++v13;
          if (!--v12)
            goto LABEL_44;
        }
      }
    }
LABEL_43:
    v11 = 0;
    goto LABEL_44;
  }
  if (v3 != 45)
  {
    if (!v5 || (v3 - 48) > 9u)
      goto LABEL_31;
    v9 = (v3 - 48);
    if (v5 != 1)
    {
      if ((BYTE1(v3) - 48) > 9u)
        goto LABEL_31;
      v9 = 10 * (v3 - 48) + (BYTE1(v3) - 48);
      v16 = v5 - 2;
      if (v16)
      {
        v17 = (unsigned __int8 *)v26 + 2;
        while (1)
        {
          v18 = *v17 - 48;
          if (v18 > 9)
            goto LABEL_31;
          v19 = 10 * v9;
          if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63)
            goto LABEL_31;
          v9 = v19 + v18;
          if (__OFADD__(v19, v18))
            goto LABEL_31;
          v11 = 0;
          ++v17;
          if (!--v16)
            goto LABEL_44;
        }
      }
    }
    goto LABEL_43;
  }
  if (v5)
  {
    if (v5 != 1 && (BYTE1(v3) - 48) <= 9u)
    {
      if (v5 == 2)
      {
        v11 = 0;
        v9 = -(uint64_t)(BYTE1(v3) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(v3) - 48) <= 9u)
      {
        v9 = -10 * (BYTE1(v3) - 48) - (BYTE2(v3) - 48);
        v20 = v5 - 3;
        if (!v20)
          goto LABEL_43;
        v22 = (unsigned __int8 *)v26 + 3;
        while (1)
        {
          v23 = *v22 - 48;
          if (v23 > 9)
            break;
          v24 = 10 * v9;
          if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63)
            break;
          v9 = v24 - v23;
          if (__OFSUB__(v24, v23))
            break;
          v11 = 0;
          ++v22;
          if (!--v20)
            goto LABEL_44;
        }
      }
    }
LABEL_31:
    v9 = 0;
    v11 = 1;
    goto LABEL_44;
  }
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_10017466C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001746A8 + 4 * byte_1001F8B76[a1]))(0xD000000000000012, 0x8000000100201330);
}

uint64_t sub_1001746A8()
{
  return 0x7972746E756F63;
}

uint64_t sub_1001746C0()
{
  return 0x437972746E756F63;
}

unint64_t sub_1001746E0()
{
  return 0xD000000000000015;
}

uint64_t sub_100174810()
{
  return 0x6C61636F4C627573;
}

double sub_100174830@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_10017A924(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100174874()
{
  uint64_t v0;

  return sub_100179640(*(_QWORD *)v0, *(_BYTE *)(v0 + 16));
}

uint64_t sub_100174880()
{
  unsigned __int8 *v0;

  return sub_10017466C(*v0);
}

uint64_t sub_100174888@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10017AF0C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001748AC(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_1001748B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10017EE8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001748E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10017EE8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100174908@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[14];
  uint64_t v12;

  sub_10017B5B8(a1, (uint64_t)v11);
  if (!v2)
  {
    v5 = v11[13];
    *(_OWORD *)(a2 + 192) = v11[12];
    *(_OWORD *)(a2 + 208) = v5;
    *(_QWORD *)(a2 + 224) = v12;
    v6 = v11[9];
    *(_OWORD *)(a2 + 128) = v11[8];
    *(_OWORD *)(a2 + 144) = v6;
    v7 = v11[11];
    *(_OWORD *)(a2 + 160) = v11[10];
    *(_OWORD *)(a2 + 176) = v7;
    v8 = v11[5];
    *(_OWORD *)(a2 + 64) = v11[4];
    *(_OWORD *)(a2 + 80) = v8;
    v9 = v11[7];
    *(_OWORD *)(a2 + 96) = v11[6];
    *(_OWORD *)(a2 + 112) = v9;
    v10 = v11[1];
    *(_OWORD *)a2 = v11[0];
    *(_OWORD *)(a2 + 16) = v10;
    result = (__n128)v11[3];
    *(_OWORD *)(a2 + 32) = v11[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_100174994()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *object;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  Swift::String v54;
  Swift::String v55;
  unint64_t v56;
  Swift::String v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  Swift::String v66;
  Swift::String v67;
  uint64_t v68;
  int v69;
  Swift::String v70;
  void *v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  Swift::String v77;
  Swift::String v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  Swift::String v83;
  Swift::String v84;
  uint64_t v85;
  Swift::String v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  Swift::String v93;
  Swift::String v94;
  uint64_t v95;
  Swift::String v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  int v100;
  Swift::String v101;
  void *v102;
  Swift::String v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  Swift::String v108;
  Swift::String v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  Swift::String v114;
  Swift::String v115;
  uint64_t v116;
  Swift::String v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  Swift::String v124;
  Swift::String v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  Swift::String v130;
  Swift::String v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  Swift::String v136;
  Swift::String v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  Swift::String v142;
  Swift::String v143;
  uint64_t v144;
  Swift::String v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD v153[2];
  Swift::String v154[14];
  uint64_t v155;
  _OWORD v156[14];
  uint64_t v157;
  _QWORD v158[2];
  Swift::String v159[14];
  Swift::String v160;
  uint64_t v161;
  unint64_t v162;

  v1 = sub_100037A5C(&qword_100265230);
  v2 = swift_allocObject(v1, 448, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1001F98C0;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(0xE000000000000000);
  v160._countAndFlagsBits = 0xD000000000000012;
  v160._object = (void *)0x8000000100201010;
  v3 = v0[1];
  if (v3)
  {
    v4 = *v0;
    v159[0]._countAndFlagsBits = 0;
    v159[0]._object = (void *)0xE000000000000000;
    *(_QWORD *)&v156[0] = v4;
    *((_QWORD *)&v156[0] + 1) = v3;
    swift_bridgeObjectRetain_n(v3, 2);
    _print_unlocked<A, B>(_:_:)(v156, v159, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    object = v159[0]._object;
    String.append(_:)(v159[0]);
    swift_bridgeObjectRelease_n(v3, 2);
    swift_bridgeObjectRelease(object);
  }
  else
  {
    v6._countAndFlagsBits = 7104878;
    v6._object = (void *)0xE300000000000000;
    String.append(_:)(v6);
  }
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8 = v160._object;
  *(_QWORD *)(v2 + 32) = v160._countAndFlagsBits;
  *(_QWORD *)(v2 + 40) = v8;
  v160._countAndFlagsBits = 0x3A73736572646461;
  v160._object = (void *)0xE900000000000020;
  v9 = v0[3];
  if (v9)
  {
    v10 = v0[2];
    v159[0]._countAndFlagsBits = 0;
    v159[0]._object = (void *)0xE000000000000000;
    *(_QWORD *)&v156[0] = v10;
    *((_QWORD *)&v156[0] + 1) = v9;
    swift_bridgeObjectRetain_n(v9, 2);
    _print_unlocked<A, B>(_:_:)(v156, v159, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v11 = v159[0]._object;
    String.append(_:)(v159[0]);
    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    v12._countAndFlagsBits = 7104878;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
  }
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14 = v160._object;
  *(_QWORD *)(v2 + 48) = v160._countAndFlagsBits;
  *(_QWORD *)(v2 + 56) = v14;
  v160._countAndFlagsBits = 0;
  v160._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(v160._object);
  strcpy((char *)&v160, "ckRecordName: ");
  HIBYTE(v160._object) = -18;
  v15 = v0[5];
  if (v15)
  {
    v16 = v0[4];
    v159[0]._countAndFlagsBits = 0;
    v159[0]._object = (void *)0xE000000000000000;
    *(_QWORD *)&v156[0] = v16;
    *((_QWORD *)&v156[0] + 1) = v15;
    swift_bridgeObjectRetain_n(v15, 2);
    _print_unlocked<A, B>(_:_:)(v156, v159, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v17 = v159[0]._object;
    String.append(_:)(v159[0]);
    swift_bridgeObjectRelease_n(v15, 2);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v18._countAndFlagsBits = 7104878;
    v18._object = (void *)0xE300000000000000;
    String.append(_:)(v18);
  }
  v19._countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20 = v160._object;
  *(_QWORD *)(v2 + 64) = v160._countAndFlagsBits;
  *(_QWORD *)(v2 + 72) = v20;
  v160._countAndFlagsBits = 0;
  v160._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(v160._object);
  v160._countAndFlagsBits = 0xD000000000000017;
  v160._object = (void *)0x8000000100201030;
  v21 = v0[7];
  if (v21)
  {
    v22 = v0[6];
    v159[0]._countAndFlagsBits = 0;
    v159[0]._object = (void *)0xE000000000000000;
    *(_QWORD *)&v156[0] = v22;
    *((_QWORD *)&v156[0] + 1) = v21;
    swift_bridgeObjectRetain_n(v21, 2);
    _print_unlocked<A, B>(_:_:)(v156, v159, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v23 = v159[0]._object;
    String.append(_:)(v159[0]);
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease(v23);
  }
  else
  {
    v24._countAndFlagsBits = 7104878;
    v24._object = (void *)0xE300000000000000;
    String.append(_:)(v24);
  }
  v25._countAndFlagsBits = 41;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  v26 = v160._object;
  *(_QWORD *)(v2 + 80) = v160._countAndFlagsBits;
  *(_QWORD *)(v2 + 88) = v26;
  v160._countAndFlagsBits = 0;
  v160._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v160._object);
  strcpy((char *)&v160, "createdById: ");
  HIWORD(v160._object) = -4864;
  v27 = v0[9];
  if (v27)
  {
    v28 = v0[8];
    v159[0]._countAndFlagsBits = 0;
    v159[0]._object = (void *)0xE000000000000000;
    *(_QWORD *)&v156[0] = v28;
    *((_QWORD *)&v156[0] + 1) = v27;
    swift_bridgeObjectRetain_n(v27, 2);
    _print_unlocked<A, B>(_:_:)(v156, v159, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v29 = v159[0]._object;
    String.append(_:)(v159[0]);
    swift_bridgeObjectRelease_n(v27, 2);
    swift_bridgeObjectRelease(v29);
  }
  else
  {
    v30._countAndFlagsBits = 7104878;
    v30._object = (void *)0xE300000000000000;
    String.append(_:)(v30);
  }
  v31._countAndFlagsBits = 41;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32 = v160._object;
  *(_QWORD *)(v2 + 96) = v160._countAndFlagsBits;
  *(_QWORD *)(v2 + 104) = v32;
  v160._countAndFlagsBits = 0x203A736C69616D65;
  v160._object = (void *)0xE800000000000000;
  v33 = v0[10];
  if (v33)
  {
    v159[0]._countAndFlagsBits = 0;
    v159[0]._object = (void *)0xE000000000000000;
    *(_QWORD *)&v156[0] = v33;
    swift_bridgeObjectRetain_n(v33, 2);
    v34 = sub_100037A5C(&qword_1002625F8);
    _print_unlocked<A, B>(_:_:)(v156, v159, v34, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v35 = v159[0]._object;
    String.append(_:)(v159[0]);
    swift_bridgeObjectRelease_n(v33, 2);
    swift_bridgeObjectRelease(v35);
  }
  else
  {
    v36._countAndFlagsBits = 7104878;
    v36._object = (void *)0xE300000000000000;
    String.append(_:)(v36);
  }
  v37._countAndFlagsBits = 41;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  v38 = v160._object;
  *(_QWORD *)(v2 + 112) = v160._countAndFlagsBits;
  *(_QWORD *)(v2 + 120) = v38;
  v160._countAndFlagsBits = 0x3A644965636E6566;
  v160._object = (void *)0xE900000000000020;
  v39 = v0[12];
  if (v39)
  {
    v40 = v0[11];
    v159[0]._countAndFlagsBits = 0;
    v159[0]._object = (void *)0xE000000000000000;
    *(_QWORD *)&v156[0] = v40;
    *((_QWORD *)&v156[0] + 1) = v39;
    swift_bridgeObjectRetain_n(v39, 2);
    _print_unlocked<A, B>(_:_:)(v156, v159, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v41 = v159[0]._object;
    String.append(_:)(v159[0]);
    swift_bridgeObjectRelease_n(v39, 2);
    swift_bridgeObjectRelease(v41);
  }
  else
  {
    v42._countAndFlagsBits = 7104878;
    v42._object = (void *)0xE300000000000000;
    String.append(_:)(v42);
  }
  v43._countAndFlagsBits = 41;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  v44 = v160._object;
  *(_QWORD *)(v2 + 128) = v160._countAndFlagsBits;
  *(_QWORD *)(v2 + 136) = v44;
  v160._countAndFlagsBits = 0;
  v160._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v160._object);
  strcpy((char *)&v160, "followerIds: ");
  HIWORD(v160._object) = -4864;
  v45 = v0[13];
  if (v45)
  {
    v159[0]._countAndFlagsBits = 0;
    v159[0]._object = (void *)0xE000000000000000;
    *(_QWORD *)&v156[0] = v45;
    swift_bridgeObjectRetain_n(v45, 2);
    v46 = sub_100037A5C(&qword_1002625F8);
    _print_unlocked<A, B>(_:_:)(v156, v159, v46, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v47 = v159[0]._object;
    String.append(_:)(v159[0]);
    swift_bridgeObjectRelease_n(v45, 2);
    swift_bridgeObjectRelease(v47);
  }
  else
  {
    v48._countAndFlagsBits = 7104878;
    v48._object = (void *)0xE300000000000000;
    String.append(_:)(v48);
  }
  v49._countAndFlagsBits = 41;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  v50 = v160._object;
  *(_QWORD *)(v2 + 144) = v160._countAndFlagsBits;
  *(_QWORD *)(v2 + 152) = v50;
  v161 = 0x6449646E65697266;
  v162 = 0xEA0000000000203ALL;
  v51 = (void *)v0[15];
  if (v51)
  {
    v52 = v0[14];
    v160._countAndFlagsBits = 0;
    v160._object = (void *)0xE000000000000000;
    v159[0]._countAndFlagsBits = v52;
    v159[0]._object = v51;
    swift_bridgeObjectRetain_n(v51, 2);
    _print_unlocked<A, B>(_:_:)(v159, &v160, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v53 = v160._object;
    String.append(_:)(v160);
    swift_bridgeObjectRelease_n(v51, 2);
    swift_bridgeObjectRelease(v53);
  }
  else
  {
    v54._countAndFlagsBits = 7104878;
    v54._object = (void *)0xE300000000000000;
    String.append(_:)(v54);
  }
  v55._countAndFlagsBits = 41;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  v56 = v162;
  *(_QWORD *)(v2 + 160) = v161;
  *(_QWORD *)(v2 + 168) = v56;
  strcpy((char *)v158, "fullAddress: ");
  HIWORD(v158[1]) = -4864;
  sub_10000EF6C((uint64_t)(v0 + 16), (uint64_t)v159, &qword_100265B20);
  sub_10000EF6C((uint64_t)v159, (uint64_t)&v160, &qword_100265B20);
  if (sub_10017ED1C((uint64_t)&v160) == 1)
  {
    v57._countAndFlagsBits = 7104878;
    v57._object = (void *)0xE300000000000000;
    String.append(_:)(v57);
  }
  else
  {
    sub_10000EF6C((uint64_t)v159, (uint64_t)v156, &qword_100265B20);
    v154[12] = (Swift::String)v156[12];
    v154[13] = (Swift::String)v156[13];
    v155 = v157;
    v154[8] = (Swift::String)v156[8];
    v154[9] = (Swift::String)v156[9];
    v154[10] = (Swift::String)v156[10];
    v154[11] = (Swift::String)v156[11];
    v154[4] = (Swift::String)v156[4];
    v154[5] = (Swift::String)v156[5];
    v154[6] = (Swift::String)v156[6];
    v154[7] = (Swift::String)v156[7];
    v154[0] = (Swift::String)v156[0];
    v154[1] = (Swift::String)v156[1];
    v154[2] = (Swift::String)v156[2];
    v154[3] = (Swift::String)v156[3];
    sub_10017ED8C(v156);
    v58 = String.init<A>(describing:)(v154, &type metadata for ServerFence.FullAddress);
    v60 = v59;
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v153[0] = v58;
    v153[1] = v59;
    swift_bridgeObjectRetain(v59);
    _print_unlocked<A, B>(_:_:)(v153, v154, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v61 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease_n(v60, 2);
    swift_bridgeObjectRelease(v61);
  }
  v62 = v158[1];
  *(_QWORD *)(v2 + 176) = v158[0];
  *(_QWORD *)(v2 + 184) = v62;
  *(_QWORD *)&v156[0] = 540697705;
  *((_QWORD *)&v156[0] + 1) = 0xE400000000000000;
  v63 = v0[46];
  if (v63)
  {
    v64 = v0[45];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v64;
    v158[1] = v63;
    swift_bridgeObjectRetain_n(v63, 2);
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v65 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease_n(v63, 2);
    swift_bridgeObjectRelease(v65);
  }
  else
  {
    v66._countAndFlagsBits = 7104878;
    v66._object = (void *)0xE300000000000000;
    String.append(_:)(v66);
  }
  v67._countAndFlagsBits = 41;
  v67._object = (void *)0xE100000000000000;
  String.append(_:)(v67);
  v68 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 192) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 200) = v68;
  *(_QWORD *)&v156[0] = 0x203A6E4F7369;
  *((_QWORD *)&v156[0] + 1) = 0xE600000000000000;
  v69 = *((unsigned __int8 *)v0 + 376);
  if (v69 == 2)
  {
    v70._countAndFlagsBits = 7104878;
    v70._object = (void *)0xE300000000000000;
    String.append(_:)(v70);
  }
  else
  {
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    LOBYTE(v158[0]) = v69 & 1;
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for Bool, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v71 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease(v71);
  }
  v72._countAndFlagsBits = 41;
  v72._object = (void *)0xE100000000000000;
  String.append(_:)(v72);
  v73 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 208) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 216) = v73;
  strcpy((char *)v156, "label: ");
  *((_QWORD *)&v156[0] + 1) = 0xE700000000000000;
  v74 = v0[49];
  if (v74)
  {
    v75 = v0[48];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v75;
    v158[1] = v74;
    swift_bridgeObjectRetain_n(v74, 2);
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v76 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease_n(v74, 2);
    swift_bridgeObjectRelease(v76);
  }
  else
  {
    v77._countAndFlagsBits = 7104878;
    v77._object = (void *)0xE300000000000000;
    String.append(_:)(v77);
  }
  v78._countAndFlagsBits = 41;
  v78._object = (void *)0xE100000000000000;
  String.append(_:)(v78);
  v79 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 224) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 232) = v79;
  *(_QWORD *)&v156[0] = 0;
  *((_QWORD *)&v156[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(*((_QWORD *)&v156[0] + 1));
  *(_QWORD *)&v156[0] = 0xD000000000000016;
  *((_QWORD *)&v156[0] + 1) = 0x8000000100201050;
  v80 = v0[51];
  if (v80)
  {
    v81 = v0[50];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v81;
    v158[1] = v80;
    swift_bridgeObjectRetain_n(v80, 2);
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v82 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease_n(v80, 2);
    swift_bridgeObjectRelease(v82);
  }
  else
  {
    v83._countAndFlagsBits = 7104878;
    v83._object = (void *)0xE300000000000000;
    String.append(_:)(v83);
  }
  v84._countAndFlagsBits = 41;
  v84._object = (void *)0xE100000000000000;
  String.append(_:)(v84);
  v85 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 240) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 248) = v85;
  strcpy((char *)v156, "latitude: ");
  BYTE11(v156[0]) = 0;
  HIDWORD(v156[0]) = -369098752;
  if ((v0[53] & 1) != 0)
  {
    v86._countAndFlagsBits = 7104878;
    v86._object = (void *)0xE300000000000000;
    String.append(_:)(v86);
  }
  else
  {
    v87 = v0[52];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v87;
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for Double, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v88 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease(v88);
  }
  v89 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 256) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 264) = v89;
  *(_QWORD *)&v156[0] = 0;
  *((_QWORD *)&v156[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(*((_QWORD *)&v156[0] + 1));
  strcpy((char *)v156, "locationType: ");
  HIBYTE(v156[0]) = -18;
  v90 = v0[55];
  if (v90)
  {
    v91 = v0[54];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v91;
    v158[1] = v90;
    swift_bridgeObjectRetain_n(v90, 2);
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v92 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease_n(v90, 2);
    swift_bridgeObjectRelease(v92);
  }
  else
  {
    v93._countAndFlagsBits = 7104878;
    v93._object = (void *)0xE300000000000000;
    String.append(_:)(v93);
  }
  v94._countAndFlagsBits = 41;
  v94._object = (void *)0xE100000000000000;
  String.append(_:)(v94);
  v95 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 272) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 280) = v95;
  strcpy((char *)v156, "longitude: ");
  HIDWORD(v156[0]) = -352321536;
  if ((v0[57] & 1) != 0)
  {
    v96._countAndFlagsBits = 7104878;
    v96._object = (void *)0xE300000000000000;
    String.append(_:)(v96);
  }
  else
  {
    v97 = v0[56];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v97;
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for Double, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v98 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease(v98);
  }
  v99 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 288) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 296) = v99;
  *(_QWORD *)&v156[0] = 0;
  *((_QWORD *)&v156[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(*((_QWORD *)&v156[0] + 1));
  strcpy((char *)v156, "onetimeonly: ");
  HIWORD(v156[0]) = -4864;
  v100 = *((unsigned __int8 *)v0 + 457);
  if (v100 == 2)
  {
    v101._countAndFlagsBits = 7104878;
    v101._object = (void *)0xE300000000000000;
    String.append(_:)(v101);
  }
  else
  {
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    LOBYTE(v158[0]) = v100 & 1;
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for Bool, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v102 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease(v102);
  }
  v103._countAndFlagsBits = 41;
  v103._object = (void *)0xE100000000000000;
  String.append(_:)(v103);
  v104 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 304) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 312) = v104;
  *(_QWORD *)&v156[0] = 0;
  *((_QWORD *)&v156[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(*((_QWORD *)&v156[0] + 1));
  strcpy((char *)v156, "phoneNumbers: ");
  HIBYTE(v156[0]) = -18;
  v105 = v0[58];
  if (v105)
  {
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v105;
    swift_bridgeObjectRetain_n(v105, 2);
    v106 = sub_100037A5C(&qword_1002625F8);
    _print_unlocked<A, B>(_:_:)(v158, v154, v106, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v107 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease_n(v105, 2);
    swift_bridgeObjectRelease(v107);
  }
  else
  {
    v108._countAndFlagsBits = 7104878;
    v108._object = (void *)0xE300000000000000;
    String.append(_:)(v108);
  }
  v109._countAndFlagsBits = 41;
  v109._object = (void *)0xE100000000000000;
  String.append(_:)(v109);
  v110 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 320) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 328) = v110;
  *(_QWORD *)&v156[0] = 0;
  *((_QWORD *)&v156[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(*((_QWORD *)&v156[0] + 1));
  *(_QWORD *)&v156[0] = 0x6441797474657270;
  *((_QWORD *)&v156[0] + 1) = 0xEF203A7373657264;
  v111 = v0[60];
  if (v111)
  {
    v112 = v0[59];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v112;
    v158[1] = v111;
    swift_bridgeObjectRetain_n(v111, 2);
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v113 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease_n(v111, 2);
    swift_bridgeObjectRelease(v113);
  }
  else
  {
    v114._countAndFlagsBits = 7104878;
    v114._object = (void *)0xE300000000000000;
    String.append(_:)(v114);
  }
  v115._countAndFlagsBits = 41;
  v115._object = (void *)0xE100000000000000;
  String.append(_:)(v115);
  v116 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 336) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 344) = v116;
  strcpy((char *)v156, "radius: ");
  BYTE9(v156[0]) = 0;
  WORD5(v156[0]) = 0;
  HIDWORD(v156[0]) = -402653184;
  if ((v0[62] & 1) != 0)
  {
    v117._countAndFlagsBits = 7104878;
    v117._object = (void *)0xE300000000000000;
    String.append(_:)(v117);
  }
  else
  {
    v118 = v0[61];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v118;
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for Double, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v119 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease(v119);
  }
  v120 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 352) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 360) = v120;
  strcpy((char *)v156, "status: ");
  BYTE9(v156[0]) = 0;
  WORD5(v156[0]) = 0;
  HIDWORD(v156[0]) = -402653184;
  v121 = v0[64];
  if (v121)
  {
    v122 = v0[63];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v122;
    v158[1] = v121;
    swift_bridgeObjectRetain_n(v121, 2);
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v123 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease_n(v121, 2);
    swift_bridgeObjectRelease(v123);
  }
  else
  {
    v124._countAndFlagsBits = 7104878;
    v124._object = (void *)0xE300000000000000;
    String.append(_:)(v124);
  }
  v125._countAndFlagsBits = 41;
  v125._object = (void *)0xE100000000000000;
  String.append(_:)(v125);
  v126 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 368) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 376) = v126;
  strcpy((char *)v156, "streetName: ");
  BYTE13(v156[0]) = 0;
  HIWORD(v156[0]) = -5120;
  v127 = v0[66];
  if (v127)
  {
    v128 = v0[65];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v128;
    v158[1] = v127;
    swift_bridgeObjectRetain_n(v127, 2);
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v129 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease_n(v127, 2);
    swift_bridgeObjectRelease(v129);
  }
  else
  {
    v130._countAndFlagsBits = 7104878;
    v130._object = (void *)0xE300000000000000;
    String.append(_:)(v130);
  }
  v131._countAndFlagsBits = 41;
  v131._object = (void *)0xE100000000000000;
  String.append(_:)(v131);
  v132 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 384) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 392) = v132;
  strcpy((char *)v156, "trigger: ");
  WORD5(v156[0]) = 0;
  HIDWORD(v156[0]) = -385875968;
  v133 = v0[68];
  if (v133)
  {
    v134 = v0[67];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v134;
    v158[1] = v133;
    swift_bridgeObjectRetain_n(v133, 2);
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v135 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease_n(v133, 2);
    swift_bridgeObjectRelease(v135);
  }
  else
  {
    v136._countAndFlagsBits = 7104878;
    v136._object = (void *)0xE300000000000000;
    String.append(_:)(v136);
  }
  v137._countAndFlagsBits = 41;
  v137._object = (void *)0xE100000000000000;
  String.append(_:)(v137);
  v138 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 400) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 408) = v138;
  *(_QWORD *)&v156[0] = 0x203A65707974;
  *((_QWORD *)&v156[0] + 1) = 0xE600000000000000;
  v139 = v0[70];
  if (v139)
  {
    v140 = v0[69];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v140;
    v158[1] = v139;
    swift_bridgeObjectRetain_n(v139, 2);
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v141 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease_n(v139, 2);
    swift_bridgeObjectRelease(v141);
  }
  else
  {
    v142._countAndFlagsBits = 7104878;
    v142._object = (void *)0xE300000000000000;
    String.append(_:)(v142);
  }
  v143._countAndFlagsBits = 41;
  v143._object = (void *)0xE100000000000000;
  String.append(_:)(v143);
  v144 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 416) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 424) = v144;
  *(_QWORD *)&v156[0] = 0;
  *((_QWORD *)&v156[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(*((_QWORD *)&v156[0] + 1));
  *(_QWORD *)&v156[0] = 0xD000000000000011;
  *((_QWORD *)&v156[0] + 1) = 0x8000000100201070;
  if ((v0[72] & 1) != 0)
  {
    v145._countAndFlagsBits = 7104878;
    v145._object = (void *)0xE300000000000000;
    String.append(_:)(v145);
  }
  else
  {
    v146 = v0[71];
    v154[0]._countAndFlagsBits = 0;
    v154[0]._object = (void *)0xE000000000000000;
    v158[0] = v146;
    _print_unlocked<A, B>(_:_:)(v158, v154, &type metadata for Int64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v147 = v154[0]._object;
    String.append(_:)(v154[0]);
    swift_bridgeObjectRelease(v147);
  }
  v148 = *((_QWORD *)&v156[0] + 1);
  *(_QWORD *)(v2 + 432) = *(_QWORD *)&v156[0];
  *(_QWORD *)(v2 + 440) = v148;
  *(_QWORD *)&v156[0] = v2;
  v149 = sub_100037A5C(&qword_1002625F8);
  v150 = sub_10017ED40();
  v151 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v149, v150);
  swift_bridgeObjectRelease(v2);
  return v151;
}

uint64_t sub_100175E18(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100175E50 + 4 * byte_1001F8B85[a1]))(0xD000000000000010, 0x80000001002012D0);
}

uint64_t sub_100175E50()
{
  return 0x73736572646461;
}

uint64_t sub_100175E68()
{
  return 0x64726F6365526B63;
}

uint64_t sub_100175E88(uint64_t a1)
{
  return a1 + 5;
}

uint64_t sub_100175F88()
{
  return 0x656475746974616CLL;
}

uint64_t sub_100175FA0()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_100175FC0()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_100175FDC()
{
  return 0x6F656D6974656E6FLL;
}

uint64_t sub_100175FFC()
{
  return 0x6D754E656E6F6870;
}

uint64_t sub_10017601C()
{
  return 0x6441797474657270;
}

uint64_t sub_100176040()
{
  return 0x737569646172;
}

uint64_t sub_100176054()
{
  return 0x737574617473;
}

uint64_t sub_100176068()
{
  return 0x614E746565727473;
}

uint64_t sub_100176084()
{
  return 0x72656767697274;
}

uint64_t sub_10017609C()
{
  return 1701869940;
}

uint64_t sub_1001760AC()
{
  return 0x6954657461647075;
}

uint64_t sub_1001760D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100176100 + 4 * byte_1001F8B9F[a1]))(0x6F666E49796DLL, 0xE600000000000000);
}

uint64_t sub_100176100()
{
  return 0x73656369766564;
}

uint64_t sub_100176118()
{
  return 0x7366657270;
}

uint64_t sub_10017612C()
{
  return 0x7265776F6C6C6F66;
}

uint64_t sub_100176208()
{
  return 0x6174536863746566;
}

uint64_t sub_100176228()
{
  return 0x6F43726576726573;
}

uint64_t sub_10017624C()
{
  return 0x6769666E6F63;
}

unint64_t sub_100176278()
{
  return 0xD000000000000015;
}

uint64_t sub_1001762D4()
{
  unsigned __int8 *v0;

  return sub_100175E18(*v0);
}

uint64_t sub_1001762DC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10017C2CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100176300(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10017E60C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100176328(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10017E60C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100176350@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE __src[584];

  result = sub_10017CDA8(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x241uLL);
  return result;
}

uint64_t sub_1001763A0()
{
  const void *v0;
  _BYTE __dst[577];

  memcpy(__dst, v0, sizeof(__dst));
  return sub_100174994();
}

uint64_t sub_1001763D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_1001760D0(*a1);
  v5 = v4;
  v6 = sub_1001760D0(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100176460()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_1001760D0(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001764C0(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1001760D0(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100176500(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_1001760D0(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10017655C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10017E340(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100176588@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1001760D0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001765B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10017E340(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001765D4(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_1001765E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B8CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100176608(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B8CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100176630(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_100037A5C(&qword_100265AD8);
  LOBYTE(v6) = a1;
  v3 = sub_100037A5C(&qword_100265A10);
  v4 = sub_10002B370(&qword_100265AE0, &qword_100265AD8, (void (*)(void))sub_10017E584, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v7, v2, &v6, v3, v2, v4);
  return v7;
}

_QWORD *sub_100176918(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_100176940()
{
  const void *v0;
  _BYTE v2[576];

  memcpy(v2, v0, sizeof(v2));
  return sub_1000282A0();
}

uint64_t destroy for ServerFence(_QWORD *a1)
{
  uint64_t v2;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  v2 = a1[17];
  if (v2 != 1)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[19]);
    swift_bridgeObjectRelease(a1[21]);
    swift_bridgeObjectRelease(a1[22]);
    swift_bridgeObjectRelease(a1[24]);
    swift_bridgeObjectRelease(a1[26]);
    swift_bridgeObjectRelease(a1[28]);
    swift_bridgeObjectRelease(a1[30]);
    swift_bridgeObjectRelease(a1[32]);
    swift_bridgeObjectRelease(a1[34]);
    swift_bridgeObjectRelease(a1[36]);
    swift_bridgeObjectRelease(a1[38]);
    swift_bridgeObjectRelease(a1[40]);
    swift_bridgeObjectRelease(a1[42]);
    swift_bridgeObjectRelease(a1[44]);
  }
  swift_bridgeObjectRelease(a1[46]);
  swift_bridgeObjectRelease(a1[49]);
  swift_bridgeObjectRelease(a1[51]);
  swift_bridgeObjectRelease(a1[55]);
  swift_bridgeObjectRelease(a1[58]);
  swift_bridgeObjectRelease(a1[60]);
  swift_bridgeObjectRelease(a1[64]);
  swift_bridgeObjectRelease(a1[66]);
  swift_bridgeObjectRelease(a1[68]);
  return swift_bridgeObjectRelease(a1[70]);
}

uint64_t initializeWithCopy for ServerFence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v10 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v9;
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v13;
  v58 = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  if (v58 == 1)
  {
    v14 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v14;
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    v15 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v15;
    v16 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v16;
    v17 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v17;
    v18 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v18;
    v19 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v19;
    v20 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v20;
  }
  else
  {
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v58;
    v21 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v21;
    v22 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = v22;
    v23 = *(_QWORD *)(a2 + 184);
    v56 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v56;
    *(_QWORD *)(a1 + 184) = v23;
    v25 = *(_QWORD *)(a2 + 192);
    v24 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = v25;
    *(_QWORD *)(a1 + 200) = v24;
    v27 = *(_QWORD *)(a2 + 208);
    v26 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = v27;
    *(_QWORD *)(a1 + 216) = v26;
    v29 = *(_QWORD *)(a2 + 224);
    v28 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = v29;
    *(_QWORD *)(a1 + 232) = v28;
    v31 = *(_QWORD *)(a2 + 240);
    v30 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 240) = v31;
    *(_QWORD *)(a1 + 248) = v30;
    v33 = *(_QWORD *)(a2 + 256);
    v32 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 256) = v33;
    *(_QWORD *)(a1 + 264) = v32;
    v35 = *(_QWORD *)(a2 + 272);
    v34 = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 272) = v35;
    *(_QWORD *)(a1 + 280) = v34;
    v36 = *(_QWORD *)(a2 + 296);
    v55 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 288) = v55;
    *(_QWORD *)(a1 + 296) = v36;
    v37 = *(_QWORD *)(a2 + 312);
    v54 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 304) = v54;
    *(_QWORD *)(a1 + 312) = v37;
    v38 = *(_QWORD *)(a2 + 328);
    v53 = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 320) = v53;
    *(_QWORD *)(a1 + 328) = v38;
    v39 = *(_QWORD *)(a2 + 344);
    v52 = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 336) = v52;
    *(_QWORD *)(a1 + 344) = v39;
    v57 = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 352) = v57;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v57);
  }
  v40 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v40;
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  v59 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v59;
  v41 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v41;
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
  v42 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = v42;
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_WORD *)(a1 + 456) = *(_WORD *)(a2 + 456);
  v44 = *(_QWORD *)(a2 + 464);
  v43 = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 464) = v44;
  *(_QWORD *)(a1 + 472) = v43;
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v46 = *(_QWORD *)(a2 + 480);
  v45 = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 480) = v46;
  *(_QWORD *)(a1 + 488) = v45;
  v47 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = v47;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  v48 = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 528) = v48;
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  v49 = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 544) = v49;
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  v50 = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 560) = v50;
  *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v50);
  return a1;
}

uint64_t assignWithCopy for ServerFence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a1 + 104);
  v19 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a2 + 120);
  v21 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = (__int128 *)(a1 + 128);
  v23 = (__int128 *)(a2 + 128);
  v24 = *(_QWORD *)(a1 + 136);
  v25 = *(_QWORD *)(a2 + 136);
  if (v24 == 1)
  {
    if (v25 == 1)
    {
      v26 = *v23;
      v27 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v27;
      *v22 = v26;
      v28 = *(_OWORD *)(a2 + 176);
      v29 = *(_OWORD *)(a2 + 192);
      v30 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 224) = v30;
      *(_OWORD *)(a1 + 176) = v28;
      *(_OWORD *)(a1 + 192) = v29;
      v31 = *(_OWORD *)(a2 + 240);
      v32 = *(_OWORD *)(a2 + 256);
      v33 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = v33;
      *(_OWORD *)(a1 + 240) = v31;
      *(_OWORD *)(a1 + 256) = v32;
      v34 = *(_OWORD *)(a2 + 304);
      v35 = *(_OWORD *)(a2 + 320);
      v36 = *(_OWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 320) = v35;
      *(_OWORD *)(a1 + 336) = v36;
      *(_OWORD *)(a1 + 304) = v34;
    }
    else
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v48 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 136) = v48;
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v49 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 152) = v49;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      v50 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 168) = v50;
      v116 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 176) = v116;
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v115 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 192) = v115;
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      v51 = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 208) = v51;
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      v52 = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 224) = v52;
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      v53 = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 240) = v53;
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      v54 = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 256) = v54;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      v55 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 272) = v55;
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      v56 = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 288) = v56;
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      v114 = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 304) = v114;
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      v113 = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 320) = v113;
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      v112 = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 336) = v112;
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      v111 = *(_QWORD *)(a2 + 352);
      *(_QWORD *)(a1 + 352) = v111;
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v116);
      swift_bridgeObjectRetain(v115);
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRetain(v114);
      swift_bridgeObjectRetain(v113);
      swift_bridgeObjectRetain(v112);
      swift_bridgeObjectRetain(v111);
    }
  }
  else if (v25 == 1)
  {
    sub_1001774CC((_QWORD *)(a1 + 128));
    v38 = *(_OWORD *)(a2 + 144);
    v37 = *(_OWORD *)(a2 + 160);
    *v22 = *v23;
    *(_OWORD *)(a1 + 144) = v38;
    *(_OWORD *)(a1 + 160) = v37;
    v39 = *(_OWORD *)(a2 + 224);
    v41 = *(_OWORD *)(a2 + 176);
    v40 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v39;
    *(_OWORD *)(a1 + 176) = v41;
    *(_OWORD *)(a1 + 192) = v40;
    v42 = *(_OWORD *)(a2 + 288);
    v44 = *(_OWORD *)(a2 + 240);
    v43 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v42;
    *(_OWORD *)(a1 + 240) = v44;
    *(_OWORD *)(a1 + 256) = v43;
    v46 = *(_OWORD *)(a2 + 320);
    v45 = *(_OWORD *)(a2 + 336);
    v47 = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 320) = v46;
    *(_OWORD *)(a1 + 336) = v45;
    *(_OWORD *)(a1 + 304) = v47;
  }
  else
  {
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v57 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v57;
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRelease(v24);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v58 = *(_QWORD *)(a2 + 152);
    v59 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v58;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRelease(v59);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v60 = *(_QWORD *)(a2 + 168);
    v61 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v60;
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRelease(v61);
    v62 = *(_QWORD *)(a1 + 176);
    v63 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v63;
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRelease(v62);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v64 = *(_QWORD *)(a2 + 192);
    v65 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v64;
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRelease(v65);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v66 = *(_QWORD *)(a2 + 208);
    v67 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v66;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRelease(v67);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v68 = *(_QWORD *)(a2 + 224);
    v69 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 224) = v68;
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRelease(v69);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v70 = *(_QWORD *)(a2 + 240);
    v71 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v70;
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRelease(v71);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    v72 = *(_QWORD *)(a2 + 256);
    v73 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v72;
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRelease(v73);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v74 = *(_QWORD *)(a2 + 272);
    v75 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 272) = v74;
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRelease(v75);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    v76 = *(_QWORD *)(a2 + 288);
    v77 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 288) = v76;
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRelease(v77);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    v78 = *(_QWORD *)(a2 + 304);
    v79 = *(_QWORD *)(a1 + 304);
    *(_QWORD *)(a1 + 304) = v78;
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRelease(v79);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    v80 = *(_QWORD *)(a2 + 320);
    v81 = *(_QWORD *)(a1 + 320);
    *(_QWORD *)(a1 + 320) = v80;
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRelease(v81);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    v82 = *(_QWORD *)(a2 + 336);
    v83 = *(_QWORD *)(a1 + 336);
    *(_QWORD *)(a1 + 336) = v82;
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRelease(v83);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    v84 = *(_QWORD *)(a2 + 352);
    v85 = *(_QWORD *)(a1 + 352);
    *(_QWORD *)(a1 + 352) = v84;
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRelease(v85);
  }
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  v86 = *(_QWORD *)(a2 + 368);
  v87 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  v88 = *(_QWORD *)(a2 + 392);
  v89 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v88;
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRelease(v89);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  v90 = *(_QWORD *)(a2 + 408);
  v91 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v90;
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRelease(v91);
  v92 = *(_QWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
  *(_QWORD *)(a1 + 416) = v92;
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  v93 = *(_QWORD *)(a2 + 440);
  v94 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v93;
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRelease(v94);
  v95 = *(_QWORD *)(a2 + 448);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_QWORD *)(a1 + 448) = v95;
  *(_BYTE *)(a1 + 457) = *(_BYTE *)(a2 + 457);
  v96 = *(_QWORD *)(a1 + 464);
  v97 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 464) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v96);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  v98 = *(_QWORD *)(a2 + 480);
  v99 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = v100;
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  v101 = *(_QWORD *)(a2 + 512);
  v102 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 512) = v101;
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRelease(v102);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  v103 = *(_QWORD *)(a2 + 528);
  v104 = *(_QWORD *)(a1 + 528);
  *(_QWORD *)(a1 + 528) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  v105 = *(_QWORD *)(a2 + 544);
  v106 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = v105;
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRelease(v106);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  v107 = *(_QWORD *)(a2 + 560);
  v108 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 560) = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  v109 = *(_QWORD *)(a2 + 568);
  *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
  *(_QWORD *)(a1 + 568) = v109;
  return a1;
}

_QWORD *sub_1001774CC(_QWORD *a1)
{
  destroy for ServerFence.FullAddress(a1);
  return a1;
}

void *initializeWithTake for ServerFence(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x241uLL);
}

uint64_t assignWithTake for ServerFence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a1 + 136);
  if (v20 != 1)
  {
    v21 = *(_QWORD *)(a2 + 136);
    if (v21 != 1)
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v21;
      swift_bridgeObjectRelease(v20);
      v29 = *(_QWORD *)(a2 + 152);
      v30 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v29;
      swift_bridgeObjectRelease(v30);
      v31 = *(_QWORD *)(a2 + 168);
      v32 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v31;
      swift_bridgeObjectRelease(v32);
      v33 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      swift_bridgeObjectRelease(v33);
      v34 = *(_QWORD *)(a2 + 192);
      v35 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v34;
      swift_bridgeObjectRelease(v35);
      v36 = *(_QWORD *)(a2 + 208);
      v37 = *(_QWORD *)(a1 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = v36;
      swift_bridgeObjectRelease(v37);
      v38 = *(_QWORD *)(a2 + 224);
      v39 = *(_QWORD *)(a1 + 224);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = v38;
      swift_bridgeObjectRelease(v39);
      v40 = *(_QWORD *)(a2 + 240);
      v41 = *(_QWORD *)(a1 + 240);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v40;
      swift_bridgeObjectRelease(v41);
      v42 = *(_QWORD *)(a2 + 256);
      v43 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = v42;
      swift_bridgeObjectRelease(v43);
      v44 = *(_QWORD *)(a2 + 272);
      v45 = *(_QWORD *)(a1 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v44;
      swift_bridgeObjectRelease(v45);
      v46 = *(_QWORD *)(a2 + 288);
      v47 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = v46;
      swift_bridgeObjectRelease(v47);
      v48 = *(_QWORD *)(a2 + 304);
      v49 = *(_QWORD *)(a1 + 304);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = v48;
      swift_bridgeObjectRelease(v49);
      v50 = *(_QWORD *)(a2 + 320);
      v51 = *(_QWORD *)(a1 + 320);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 320) = v50;
      swift_bridgeObjectRelease(v51);
      v52 = *(_QWORD *)(a2 + 336);
      v53 = *(_QWORD *)(a1 + 336);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = v52;
      swift_bridgeObjectRelease(v53);
      v54 = *(_QWORD *)(a2 + 352);
      v55 = *(_QWORD *)(a1 + 352);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 352) = v54;
      swift_bridgeObjectRelease(v55);
      goto LABEL_6;
    }
    sub_1001774CC((_QWORD *)(a1 + 128));
  }
  v22 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v22;
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  v23 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v23;
  v24 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v24;
  v25 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v25;
  v26 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v26;
  v27 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v27;
  v28 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v28;
LABEL_6:
  v56 = *(_QWORD *)(a2 + 368);
  v57 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v56;
  swift_bridgeObjectRelease(v57);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  v58 = *(_QWORD *)(a2 + 392);
  v59 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v58;
  swift_bridgeObjectRelease(v59);
  v60 = *(_QWORD *)(a2 + 408);
  v61 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v60;
  swift_bridgeObjectRelease(v61);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
  v62 = *(_QWORD *)(a2 + 440);
  v63 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = v62;
  swift_bridgeObjectRelease(v63);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_WORD *)(a1 + 456) = *(_WORD *)(a2 + 456);
  v64 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  swift_bridgeObjectRelease(v64);
  v65 = *(_QWORD *)(a2 + 480);
  v66 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v65;
  swift_bridgeObjectRelease(v66);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v67 = *(_QWORD *)(a2 + 512);
  v68 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = v67;
  swift_bridgeObjectRelease(v68);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  v69 = *(_QWORD *)(a1 + 528);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  swift_bridgeObjectRelease(v69);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  v70 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRelease(v70);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  v71 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  swift_bridgeObjectRelease(v71);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerFence(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 577))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerFence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 568) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_BYTE *)(result + 576) = 0;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 577) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 577) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFence()
{
  return &type metadata for ServerFence;
}

uint64_t destroy for ServerFence.FullAddress(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  return swift_bridgeObjectRelease(a1[28]);
}

_QWORD *initializeWithCopy for ServerFence.FullAddress(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  v28 = a2[6];
  a1[6] = v28;
  a1[7] = v6;
  v7 = a2[9];
  v27 = a2[8];
  a1[8] = v27;
  a1[9] = v7;
  v9 = a2[10];
  v8 = a2[11];
  a1[10] = v9;
  a1[11] = v8;
  v11 = a2[12];
  v10 = a2[13];
  a1[12] = v11;
  a1[13] = v10;
  v13 = a2[14];
  v12 = a2[15];
  a1[14] = v13;
  a1[15] = v12;
  v15 = a2[16];
  v14 = a2[17];
  a1[16] = v15;
  a1[17] = v14;
  v17 = a2[18];
  v16 = a2[19];
  a1[18] = v17;
  a1[19] = v16;
  v19 = a2[20];
  v18 = a2[21];
  a1[20] = v19;
  a1[21] = v18;
  v21 = a2[22];
  v20 = a2[23];
  a1[22] = v21;
  a1[23] = v20;
  v22 = a2[25];
  v26 = a2[24];
  a1[24] = v26;
  a1[25] = v22;
  v23 = a2[27];
  v25 = a2[26];
  a1[26] = v25;
  a1[27] = v23;
  v29 = a2[28];
  a1[28] = v29;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v29);
  return a1;
}

_QWORD *assignWithCopy for ServerFence.FullAddress(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1[6];
  v11 = a2[6];
  a1[6] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  a1[7] = a2[7];
  v12 = a2[8];
  v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[9] = a2[9];
  v14 = a2[10];
  v15 = a1[10];
  a1[10] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[11] = a2[11];
  v16 = a2[12];
  v17 = a1[12];
  a1[12] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  a1[13] = a2[13];
  v18 = a2[14];
  v19 = a1[14];
  a1[14] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  a1[15] = a2[15];
  v20 = a2[16];
  v21 = a1[16];
  a1[16] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  a1[17] = a2[17];
  v22 = a2[18];
  v23 = a1[18];
  a1[18] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  a1[19] = a2[19];
  v24 = a2[20];
  v25 = a1[20];
  a1[20] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  a1[21] = a2[21];
  v26 = a2[22];
  v27 = a1[22];
  a1[22] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  a1[23] = a2[23];
  v28 = a2[24];
  v29 = a1[24];
  a1[24] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  a1[25] = a2[25];
  v30 = a2[26];
  v31 = a1[26];
  a1[26] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  a1[27] = a2[27];
  v32 = a2[28];
  v33 = a1[28];
  a1[28] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  return a1;
}

__n128 initializeWithTake for ServerFence.FullAddress(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

_QWORD *assignWithTake for ServerFence.FullAddress(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  v8 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = a1[8];
  a1[7] = *(_QWORD *)(a2 + 56);
  a1[8] = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = a1[10];
  a1[9] = *(_QWORD *)(a2 + 72);
  a1[10] = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = a1[12];
  a1[11] = *(_QWORD *)(a2 + 88);
  a1[12] = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = a1[14];
  a1[13] = *(_QWORD *)(a2 + 104);
  a1[14] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a2 + 128);
  v18 = a1[16];
  a1[15] = *(_QWORD *)(a2 + 120);
  a1[16] = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 144);
  v20 = a1[18];
  a1[17] = *(_QWORD *)(a2 + 136);
  a1[18] = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a2 + 160);
  v22 = a1[20];
  a1[19] = *(_QWORD *)(a2 + 152);
  a1[20] = v21;
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 176);
  v24 = a1[22];
  a1[21] = *(_QWORD *)(a2 + 168);
  a1[22] = v23;
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 192);
  v26 = a1[24];
  a1[23] = *(_QWORD *)(a2 + 184);
  a1[24] = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(a2 + 208);
  v28 = a1[26];
  a1[25] = *(_QWORD *)(a2 + 200);
  a1[26] = v27;
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(a2 + 224);
  v30 = a1[28];
  a1[27] = *(_QWORD *)(a2 + 216);
  a1[28] = v29;
  swift_bridgeObjectRelease(v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerFence.FullAddress(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 232))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerFence.FullAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 232) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 232) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerFence.FullAddress()
{
  return &type metadata for ServerFence.FullAddress;
}

uint64_t destroy for ServerCommandResponse(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for ServerCommandResponse(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for ServerCommandResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for ServerCommandResponse(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ServerCommandResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for ServerCommandResponse()
{
  return &type metadata for ServerCommandResponse;
}

uint64_t assignWithCopy for ServerDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for ServerDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerDevice(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerDevice()
{
  return &type metadata for ServerDevice;
}

uint64_t destroy for ServerBaseResponse(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[12]);
  v2 = a1[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[16]);
  }
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[21]);
  v3 = a1[22];
  if (v3 != 1)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[23]);
    swift_bridgeObjectRelease(a1[26]);
  }
  swift_bridgeObjectRelease(a1[27]);
  swift_bridgeObjectRelease(a1[28]);
  v4 = a1[35];
  if (v4)
  {
    v5 = a1[32];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[47]);
    swift_bridgeObjectRelease(a1[49]);
  }
  swift_bridgeObjectRelease(a1[68]);
  swift_bridgeObjectRelease(a1[69]);
  swift_bridgeObjectRelease(a1[70]);
  return swift_bridgeObjectRelease(a1[71]);
}

uint64_t initializeWithCopy for ServerBaseResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  if (v11)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v11;
    v12 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v12;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v13;
  }
  v14 = *(_QWORD *)(a2 + 176);
  v15 = *(_QWORD *)(a2 + 136);
  v16 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v15;
  *(_QWORD *)(a1 + 144) = v16;
  v17 = *(_QWORD *)(a2 + 152);
  v18 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v17;
  *(_QWORD *)(a1 + 160) = v18;
  v19 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v19;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  if (v14 == 1)
  {
    v20 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v20;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  }
  else
  {
    v21 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = v14;
    *(_QWORD *)(a1 + 184) = v21;
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    v22 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v22;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
  }
  v23 = *(_QWORD *)(a2 + 216);
  v24 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v23;
  *(_QWORD *)(a1 + 224) = v24;
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v25 = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  if (v25)
  {
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    v26 = *(_QWORD *)(a2 + 256);
    v27 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 256) = v26;
    *(_QWORD *)(a1 + 264) = v27;
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = v25;
    *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    v28 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v28;
    v29 = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = v29;
    v30 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 376) = v30;
    v31 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 392) = v31;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
  }
  else
  {
    v32 = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = v32;
    v33 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 384) = v33;
    v34 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v34;
    v35 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v35;
    v36 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v36;
  }
  v37 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = v37;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  v38 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v38;
  v39 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v39;
  v40 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v40;
  v41 = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 544) = v41;
  v42 = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 552) = v42;
  v43 = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 560) = v43;
  v44 = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 568) = v44;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v44);
  return a1;
}

uint64_t assignWithCopy for ServerBaseResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = (_OWORD *)(a1 + 104);
  v17 = (_OWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a1 + 112);
  v19 = *(_QWORD *)(a2 + 112);
  if (v18)
  {
    if (v19)
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      v20 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v20;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v18);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v21 = *(_QWORD *)(a2 + 128);
      v22 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v21;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      sub_100178C44(a1 + 104);
      v25 = *(_OWORD *)(a2 + 120);
      *v16 = *v17;
      *(_OWORD *)(a1 + 120) = v25;
    }
  }
  else if (v19)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v23 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v23;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v24 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 128) = v24;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 120);
    *v16 = *v17;
    *(_OWORD *)(a1 + 120) = v26;
  }
  v27 = *(_QWORD *)(a1 + 136);
  v28 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v27);
  v29 = *(_QWORD *)(a1 + 144);
  v30 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v29);
  v31 = *(_QWORD *)(a1 + 152);
  v32 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 152) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v31);
  v33 = *(_QWORD *)(a1 + 160);
  v34 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v33);
  v35 = *(_QWORD *)(a1 + 168);
  v36 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v35);
  v37 = (__int128 *)(a1 + 176);
  v38 = *(_QWORD *)(a1 + 176);
  v40 = (__int128 *)(a2 + 176);
  v39 = *(_QWORD *)(a2 + 176);
  if (v38 == 1)
  {
    if (v39 == 1)
    {
      v41 = *v40;
      v42 = *(_OWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *v37 = v41;
      *(_OWORD *)(a1 + 192) = v42;
    }
    else
    {
      *(_QWORD *)(a1 + 176) = v39;
      v45 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 184) = v45;
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      v46 = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 208) = v46;
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v46);
    }
  }
  else if (v39 == 1)
  {
    sub_100178C74((_QWORD *)(a1 + 176));
    v43 = *(_QWORD *)(a2 + 208);
    v44 = *(_OWORD *)(a2 + 192);
    *v37 = *v40;
    *(_OWORD *)(a1 + 192) = v44;
    *(_QWORD *)(a1 + 208) = v43;
  }
  else
  {
    *(_QWORD *)(a1 + 176) = v39;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRelease(v38);
    v47 = *(_QWORD *)(a1 + 184);
    v48 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v48;
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRelease(v47);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v49 = *(_QWORD *)(a2 + 208);
    v50 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v49;
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRelease(v50);
  }
  v51 = *(_QWORD *)(a1 + 216);
  v52 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 216) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v51);
  v53 = *(_QWORD *)(a1 + 224);
  v54 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 224) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v53);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v55 = (_OWORD *)(a1 + 240);
  v56 = (_OWORD *)(a2 + 240);
  v57 = *(_QWORD *)(a2 + 280);
  if (*(_QWORD *)(a1 + 280))
  {
    if (v57)
    {
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      v58 = *(_QWORD *)(a2 + 256);
      v59 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v58;
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRelease(v59);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      v60 = *(_QWORD *)(a2 + 280);
      v61 = *(_QWORD *)(a1 + 280);
      *(_QWORD *)(a1 + 280) = v60;
      swift_bridgeObjectRetain(v60);
      swift_bridgeObjectRelease(v61);
      *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      v62 = *(_QWORD *)(a2 + 376);
      v63 = *(_QWORD *)(a1 + 376);
      *(_QWORD *)(a1 + 376) = v62;
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRelease(v63);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      v64 = *(_QWORD *)(a2 + 392);
      v65 = *(_QWORD *)(a1 + 392);
      *(_QWORD *)(a1 + 392) = v64;
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRelease(v65);
    }
    else
    {
      sub_10004A1B8((_QWORD *)(a1 + 240));
      v70 = *(_OWORD *)(a2 + 256);
      *v55 = *v56;
      *(_OWORD *)(a1 + 256) = v70;
      v71 = *(_OWORD *)(a2 + 320);
      v73 = *(_OWORD *)(a2 + 272);
      v72 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
      *(_OWORD *)(a1 + 320) = v71;
      *(_OWORD *)(a1 + 272) = v73;
      *(_OWORD *)(a1 + 288) = v72;
      v74 = *(_OWORD *)(a2 + 384);
      v76 = *(_OWORD *)(a2 + 336);
      v75 = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 384) = v74;
      *(_OWORD *)(a1 + 336) = v76;
      *(_OWORD *)(a1 + 352) = v75;
    }
  }
  else if (v57)
  {
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    v66 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 256) = v66;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    v67 = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 280) = v67;
    *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    v68 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 376) = v68;
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    v69 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 392) = v69;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v67);
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v69);
  }
  else
  {
    v77 = *(_OWORD *)(a2 + 256);
    *v55 = *v56;
    *(_OWORD *)(a1 + 256) = v77;
    v78 = *(_OWORD *)(a2 + 272);
    v79 = *(_OWORD *)(a2 + 288);
    v80 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v80;
    *(_OWORD *)(a1 + 272) = v78;
    *(_OWORD *)(a1 + 288) = v79;
    v81 = *(_OWORD *)(a2 + 336);
    v82 = *(_OWORD *)(a2 + 352);
    v83 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 384) = v83;
    *(_OWORD *)(a1 + 336) = v81;
    *(_OWORD *)(a1 + 352) = v82;
  }
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  v84 = *(_OWORD *)(a2 + 416);
  v85 = *(_OWORD *)(a2 + 432);
  v86 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v86;
  *(_OWORD *)(a1 + 416) = v84;
  *(_OWORD *)(a1 + 432) = v85;
  v87 = *(_OWORD *)(a2 + 480);
  v88 = *(_OWORD *)(a2 + 496);
  v89 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v89;
  *(_OWORD *)(a1 + 480) = v87;
  *(_OWORD *)(a1 + 496) = v88;
  v90 = *(_QWORD *)(a1 + 544);
  v91 = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 544) = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v90);
  v92 = *(_QWORD *)(a1 + 552);
  v93 = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 552) = v93;
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRelease(v92);
  v94 = *(_QWORD *)(a1 + 560);
  v95 = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 560) = v95;
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRelease(v94);
  v96 = *(_QWORD *)(a1 + 568);
  v97 = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 568) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v96);
  return a1;
}

uint64_t sub_100178C44(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return a1;
}

_QWORD *sub_100178C74(_QWORD *a1)
{
  destroy for ServerCommandResponse(a1);
  return a1;
}

void *initializeWithTake for ServerBaseResponse(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x240uLL);
}

uint64_t assignWithTake for ServerBaseResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a1 + 112);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 112);
    if (v15)
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v15;
      swift_bridgeObjectRelease(v14);
      v16 = *(_QWORD *)(a2 + 128);
      v17 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = v16;
      swift_bridgeObjectRelease(v17);
      goto LABEL_6;
    }
    sub_100178C44(a1 + 104);
  }
  v18 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v18;
LABEL_6:
  v19 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a1 + 176);
  v25 = *(_QWORD *)(a2 + 176);
  if (v24 == 1)
  {
LABEL_9:
    v26 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v26;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    goto LABEL_11;
  }
  if (v25 == 1)
  {
    sub_100178C74((_QWORD *)(a1 + 176));
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 176) = v25;
  swift_bridgeObjectRelease(v24);
  v27 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease(v27);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  v28 = *(_QWORD *)(a2 + 208);
  v29 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v28;
  swift_bridgeObjectRelease(v29);
LABEL_11:
  v30 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  if (!*(_QWORD *)(a1 + 280))
  {
LABEL_15:
    v41 = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = v41;
    v42 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 384) = v42;
    v43 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v43;
    v44 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v44;
    v45 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v45;
    goto LABEL_16;
  }
  if (!*(_QWORD *)(a2 + 280))
  {
    sub_10004A1B8((_QWORD *)(a1 + 240));
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v32 = *(_QWORD *)(a2 + 256);
  v33 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v32;
  swift_bridgeObjectRelease(v33);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v34 = *(_QWORD *)(a2 + 280);
  v35 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v34;
  swift_bridgeObjectRelease(v35);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  v36 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v36;
  v37 = *(_QWORD *)(a2 + 376);
  v38 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v37;
  swift_bridgeObjectRelease(v38);
  v39 = *(_QWORD *)(a2 + 392);
  v40 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v39;
  swift_bridgeObjectRelease(v40);
LABEL_16:
  v46 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = v46;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  v47 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v47;
  v48 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v48;
  v49 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v49;
  v50 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRelease(v50);
  v51 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  swift_bridgeObjectRelease(v51);
  v52 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  swift_bridgeObjectRelease(v52);
  v53 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  swift_bridgeObjectRelease(v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerBaseResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 576))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerBaseResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 568) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 576) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 576) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerBaseResponse()
{
  return &type metadata for ServerBaseResponse;
}

uint64_t destroy for ServerMyInfo(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for ServerMyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for ServerMyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for ServerMyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

ValueMetadata *type metadata accessor for ServerMyInfo()
{
  return &type metadata for ServerMyInfo;
}

ValueMetadata *type metadata accessor for ServerConfig()
{
  return &type metadata for ServerConfig;
}

ValueMetadata *type metadata accessor for ServerPreferences()
{
  return &type metadata for ServerPreferences;
}

uint64_t sub_10017934C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v15 = *(v13 - 1);
      v16 = *v13;
      v17 = *(i - 1);
      v18 = *i;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_100179410(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29[2];
  char v30;

  sub_100037A5C(&qword_100265B60);
  result = static _DictionaryStorage.copy(original:)(a1);
  v4 = (_QWORD *)result;
  v5 = 0;
  v28 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v26 = v7;
  v27 = (unint64_t)(v9 + 63) >> 6;
  v12 = result + 64;
  if ((v10 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * i);
    v19 = *v18;
    v20 = v18[1];
    v21 = (uint64_t *)(*(_QWORD *)(v28 + 56) + 16 * i);
    v22 = v21[1];
    v29[0] = *v21;
    v29[1] = v22;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    sub_100174374(v29, &v30);
    result = swift_bridgeObjectRelease(v22);
    if (v1)
    {
      swift_bridgeObjectRelease(v20);
      swift_release(v4);
      return (uint64_t)v4;
    }
    *(_QWORD *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v23 = (_QWORD *)(v4[6] + 16 * i);
    *v23 = v19;
    v23[1] = v20;
    *(_BYTE *)(v4[7] + i) = v30;
    v24 = v4[2];
    v15 = __OFADD__(v24, 1);
    v25 = v24 + 1;
    if (v15)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v25;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v15 = __OFADD__(v5++, 1);
    if (v15)
      goto LABEL_27;
    if (v5 >= v27)
      return (uint64_t)v4;
    v16 = *(_QWORD *)(v26 + 8 * v5);
    if (!v16)
      break;
LABEL_15:
    v11 = (v16 - 1) & v16;
  }
  v17 = v5 + 1;
  if (v5 + 1 >= v27)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v26 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v5 + 2;
  if (v5 + 2 >= v27)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v26 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v5 + 3;
  if (v5 + 3 >= v27)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v26 + 8 * v17);
  if (v16)
  {
LABEL_14:
    v5 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v27)
      return (uint64_t)v4;
    v16 = *(_QWORD *)(v26 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100179640(uint64_t a1, char a2)
{
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  v12 = 0x614D737574617473;
  v13 = 0xEA00000000003A70;
  v11 = a1;
  swift_bridgeObjectRetain(a1);
  v4 = sub_100037A5C(&qword_100265B68);
  v5._countAndFlagsBits = String.init<A>(describing:)(&v11, v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x437375746174730ALL;
  v7._object = (void *)0xED0000203A65646FLL;
  String.append(_:)(v7);
  sub_10000C628(a2);
  v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v9);
  return v12;
}

BOOL sub_100179728(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  _BOOL4 v6;

  if (*(double *)a1 != *(double *)a2
    || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
    || ((*(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) != 0
    || *(double *)(a1 + 24) != *(double *)(a2 + 24)
    || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32)
    || *(double *)(a1 + 40) != *(double *)(a2 + 40)
    || *(double *)(a1 + 48) != *(double *)(a2 + 48)
    || ((*(unsigned __int8 *)(a1 + 56) ^ *(unsigned __int8 *)(a2 + 56)) & 1) != 0
    || *(double *)(a1 + 64) != *(double *)(a2 + 64)
    || *(double *)(a1 + 72) != *(double *)(a2 + 72)
    || *(double *)(a1 + 80) != *(double *)(a2 + 80)
    || *(double *)(a1 + 88) != *(double *)(a2 + 88)
    || ((*(unsigned __int8 *)(a1 + 96) ^ *(unsigned __int8 *)(a2 + 96)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 97) ^ *(unsigned __int8 *)(a2 + 97)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 98) ^ *(unsigned __int8 *)(a2 + 98)) & 1) != 0)
  {
    return 0;
  }
  v3 = *(unsigned __int8 *)(a1 + 99);
  v4 = *(unsigned __int8 *)(a2 + 99);
  if (v3 == 2)
  {
    if (v4 != 2)
      return 0;
  }
  else
  {
    v5 = 0;
    v6 = (v3 & 1) == 0;
    if (v4 == 2 || ((v6 ^ v4) & 1) == 0)
      return v5;
  }
  if (*(double *)(a1 + 104) != *(double *)(a2 + 104)
    || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a2 + 112)
    || *(double *)(a1 + 120) != *(double *)(a2 + 120)
    || ((*(unsigned __int8 *)(a1 + 128) ^ *(unsigned __int8 *)(a2 + 128)) & 1) != 0)
  {
    return 0;
  }
  return *(double *)(a1 + 136) == *(double *)(a2 + 136);
}

uint64_t sub_1001798B0(double *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *((_QWORD *)a1 + 1);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (v5)
      return 0;
    goto LABEL_10;
  }
  if (!v5)
    return 0;
  v6 = *a1;
  v7 = *(_QWORD *)a1 == *(_QWORD *)a2 && v4 == v5;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v6, v4, *(_QWORD *)a2, v5, 0),
        result = 0,
        (v8 & 1) != 0))
  {
LABEL_10:
    v10 = *((_QWORD *)a1 + 3);
    v11 = *(_QWORD *)(a2 + 24);
    if (v10)
    {
      if (!v11)
        return 0;
      v12 = *((_QWORD *)a1 + 2);
      v13 = *(_QWORD *)(a2 + 16);
      if (v12 != v13 || v10 != v11)
      {
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v10, v13, v11, 0);
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v11)
    {
      return 0;
    }
    if (a1[4] == *(double *)(a2 + 32)
      && ((*((unsigned __int8 *)a1 + 40) ^ *(unsigned __int8 *)(a2 + 40)) & 1) == 0
      && (sub_10017934C(*((_QWORD **)a1 + 6), *(_QWORD **)(a2 + 48)) & 1) != 0)
    {
      v15 = *((_QWORD *)a1 + 7);
      v16 = *((_QWORD *)a1 + 8);
      v17 = *(_QWORD *)(a2 + 56);
      v18 = *(_QWORD *)(a2 + 64);
      if (v15 != v17 || v16 != v18)
      {
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0);
        result = 0;
        if ((v19 & 1) == 0)
          return result;
      }
      if (((*((unsigned __int8 *)a1 + 72) ^ *(unsigned __int8 *)(a2 + 72)) & 1) == 0)
      {
        v20 = *((_QWORD *)a1 + 11);
        v21 = *(_QWORD *)(a2 + 88);
        if (v20)
        {
          if (!v21)
            return 0;
          v22 = *((_QWORD *)a1 + 10);
          v23 = *(_QWORD *)(a2 + 80);
          if ((v22 != v23 || v20 != v21)
            && (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v20, v23, v21, 0) & 1) == 0)
          {
            return 0;
          }
        }
        else if (v21)
        {
          return 0;
        }
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_100179A08(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x80000001002010B0;
    if (a2 == 0x80000001002010B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001002010B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6449656369766564 && a2 == 0xE800000000000000)
  {
    v6 = 0xE800000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449656369766564, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6954656369766564 && a2 == 0xEF706D617453656DLL)
  {
    v7 = 0xEF706D617453656DLL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6954656369766564, 0xEF706D617453656DLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x656C626967696C65 && a2 == 0xEE00654D6F747541)
  {
    v8 = 0xEE00654D6F747541;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C626967696C65, 0xEE00654D6F747541, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x736C69616D65 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736C69616D65, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0x6D614E7473726966 && a2 == 0xE900000000000065)
  {
    v10 = 0xE900000000000065;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E7473726966, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_35;
  }
  if (a1 == 0xD000000000000011)
  {
    v11 = 0x80000001002010D0;
    if (a2 == 0x80000001002010D0)
      goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001002010D0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if (a1 == 0x656369766544656DLL && a2 == 0xEA00000000006449)
  {
    swift_bridgeObjectRelease(0xEA00000000006449);
    return 7;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656369766544656DLL, 0xEA00000000006449, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_100179D9C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6143654D6F747561 && a2 == 0xED0000656C626170)
  {
    v5 = 0xED0000656C626170;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6143654D6F747561, 0xED0000656C626170, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100201390;
    if (a2 == 0x8000000100201390)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100201390, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v8 = 0xE200000000000000;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x6369766544736469 && a2 == 0xEB00000000644965)
  {
    v9 = 0xEB00000000644965;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6369766544736469, 0xEB00000000644965, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100179FC4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;

  if (a1 == 0xD00000000000001ALL)
  {
    v4 = 0x80000001002010F0;
    if (a2 == 0x80000001002010F0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001002010F0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6F6C6C6F4678616DLL && a2 == 0xEC00000073726577)
  {
    v6 = 0xEC00000073726577;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6C6C6F4678616DLL, 0xEC00000073726577, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000012)
  {
    v7 = 0x8000000100201110;
    if (a2 == 0x8000000100201110)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100201110, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100201130)
  {
    v8 = 0x8000000100201130;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100201130, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x6E6569724678616DLL && a2 == 0xEA00000000007364)
  {
    v9 = 0xEA00000000007364;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6569724678616DLL, 0xEA00000000007364, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0xD00000000000001ELL)
  {
    v10 = 0x8000000100201150;
    if (a2 == 0x8000000100201150)
      goto LABEL_33;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100201150, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_33:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100201170)
  {
    v11 = 0x8000000100201170;
LABEL_39:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100201170, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_39;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x8000000100201190)
  {
    v12 = 0x8000000100201190;
LABEL_45:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100201190, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_45;
  }
  if (a1 == 0xD000000000000015)
  {
    v13 = 0x80000001002011B0;
    if (a2 == 0x80000001002011B0)
      goto LABEL_50;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001002011B0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x80000001002011D0)
  {
    v14 = 0x80000001002011D0;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x80000001002011D0, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0xD000000000000012)
  {
    v15 = 0x80000001002011F0;
    if (a2 == 0x80000001002011F0)
      goto LABEL_61;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001002011F0, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if (a1 == 0xD000000000000018)
  {
    v16 = 0x8000000100201210;
    if (a2 == 0x8000000100201210)
      goto LABEL_66;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100201210, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 11;
  }
  if (a1 == 0x464D466B636F6C62 && a2 == 0xEF6C656E6E616843)
  {
    v17 = 0xEF6C656E6E616843;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x464D466B636F6C62, 0xEF6C656E6E616843, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_72;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100201230)
  {
    v18 = 0x8000000100201230;
LABEL_78:
    swift_bridgeObjectRelease(v18);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100201230, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_78;
  }
  if (a1 == 0xD00000000000001FLL && a2 == 0x8000000100201250)
  {
    v19 = 0x8000000100201250;
LABEL_84:
    swift_bridgeObjectRelease(v19);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x8000000100201250, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_84;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x80000001001FC8E0)
  {
    v20 = 0x80000001001FC8E0;
LABEL_90:
    swift_bridgeObjectRelease(v20);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x80000001001FC8E0, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_90;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEB000000004C5454)
  {
    v21 = 0xEB000000004C5454;
LABEL_96:
    swift_bridgeObjectRelease(v21);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEB000000004C5454, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_96;
  }
  if (a1 == 0xD000000000000018)
  {
    v22 = 0x8000000100201270;
    if (a2 == 0x8000000100201270)
      goto LABEL_101;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100201270, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_101:
    swift_bridgeObjectRelease(v22);
    return 17;
  }
  if (a1 == 0xD000000000000015)
  {
    v23 = 0x8000000100201290;
    if (a2 == 0x8000000100201290)
      goto LABEL_106;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100201290, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
LABEL_106:
    swift_bridgeObjectRelease(v23);
    return 18;
  }
  if (a1 == 0xD00000000000001ELL)
  {
    v24 = 0x80000001002012B0;
    if (a2 == 0x80000001002012B0)
      goto LABEL_111;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001002012B0, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_111:
    swift_bridgeObjectRelease(v24);
    return 19;
  }
  if (a1 == 0x5465636172474C65 && a2 == 0xEE006E694D656D69)
  {
    swift_bridgeObjectRelease(0xEE006E694D656D69);
    return 20;
  }
  else
  {
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(0x5465636172474C65, 0xEE006E694D656D69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v25 & 1) != 0)
      return 20;
    else
      return 21;
  }
}

uint64_t sub_10017A7D8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x61636F4C65646968 && a2 == 0xEC0000006E6F6974)
  {
    v5 = 0xEC0000006E6F6974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61636F4C65646968, 0xEC0000006E6F6974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001001FD4D0)
  {
    swift_bridgeObjectRelease(0x80000001001FD4D0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001001FD4D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_10017A8DC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10024F0E0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_10017A924@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[4];
  int v55;

  v5 = sub_100037A5C(&qword_100265B40);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10017EFD0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerCommandResponse.CodingKeys, &type metadata for ServerCommandResponse.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_10002BB90(a1);
  LOBYTE(v52) = 1;
  result = KeyedDecodingContainer.decode(_:forKey:)(&v52, v5);
  v14 = v13;
  v15 = HIBYTE(v13) & 0xF;
  v16 = result & 0xFFFFFFFFFFFFLL;
  if ((v14 & 0x2000000000000000) != 0)
    v17 = v15;
  else
    v17 = result & 0xFFFFFFFFFFFFLL;
  if (!v17)
  {
    swift_bridgeObjectRelease(v14);
    goto LABEL_57;
  }
  if ((v14 & 0x1000000000000000) != 0)
  {
    v19 = (uint64_t)sub_1001EF3C8(result, v14, 10);
    v21 = v49;
    goto LABEL_46;
  }
  if ((v14 & 0x2000000000000000) != 0)
  {
    v52 = result;
    v53 = v14 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v15)
        goto LABEL_65;
      if (v15 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_33;
      v19 = (BYTE1(result) - 48);
      if (v15 != 2)
      {
        if ((BYTE2(result) - 48) > 9u)
          goto LABEL_33;
        v19 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        v22 = v15 - 3;
        if (v22)
        {
          v23 = (unsigned __int8 *)&v52 + 3;
          while (1)
          {
            v24 = *v23 - 48;
            if (v24 > 9)
              goto LABEL_33;
            v25 = 10 * v19;
            if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63)
              goto LABEL_33;
            v19 = v25 + v24;
            if (__OFADD__(v25, v24))
              goto LABEL_33;
            v21 = 0;
            ++v23;
            if (!--v22)
              goto LABEL_46;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v15)
        {
          if (v15 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            if (v15 == 2)
            {
              v21 = 0;
              v19 = -(uint64_t)(BYTE1(result) - 48);
              goto LABEL_46;
            }
            if ((BYTE2(result) - 48) <= 9u)
            {
              v19 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
              v30 = v15 - 3;
              if (!v30)
                goto LABEL_45;
              v33 = (unsigned __int8 *)&v52 + 3;
              while (1)
              {
                v34 = *v33 - 48;
                if (v34 > 9)
                  break;
                v35 = 10 * v19;
                if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63)
                  break;
                v19 = v35 - v34;
                if (__OFSUB__(v35, v34))
                  break;
                v21 = 0;
                ++v33;
                if (!--v30)
                  goto LABEL_46;
              }
            }
          }
LABEL_33:
          v19 = 0;
          v21 = 1;
          goto LABEL_46;
        }
        __break(1u);
LABEL_65:
        __break(1u);
        return result;
      }
      if (!v15 || (result - 48) > 9u)
        goto LABEL_33;
      v19 = (result - 48);
      if (v15 != 1)
      {
        if ((BYTE1(result) - 48) > 9u)
          goto LABEL_33;
        v19 = 10 * (result - 48) + (BYTE1(result) - 48);
        v26 = v15 - 2;
        if (v26)
        {
          v27 = (unsigned __int8 *)&v52 + 2;
          while (1)
          {
            v28 = *v27 - 48;
            if (v28 > 9)
              goto LABEL_33;
            v29 = 10 * v19;
            if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63)
              goto LABEL_33;
            v19 = v29 + v28;
            if (__OFADD__(v29, v28))
              goto LABEL_33;
            v21 = 0;
            ++v27;
            if (!--v26)
              goto LABEL_46;
          }
        }
      }
    }
LABEL_45:
    v21 = 0;
    goto LABEL_46;
  }
  if ((result & 0x1000000000000000) != 0)
    v18 = (unsigned __int8 *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v14);
  v19 = (uint64_t)sub_1001EF3B4(v18, v16, 10);
  v21 = v20 & 1;
LABEL_46:
  swift_bridgeObjectRelease(v14);
  if ((v21 & 1) != 0)
  {
LABEL_57:
    v32 = 10;
    goto LABEL_58;
  }
  v31 = sub_10002B954(v19);
  if (v31 == 11)
    v32 = 0;
  else
    v32 = v31;
LABEL_58:
  v55 = v32;
  v36 = sub_100037A5C(&qword_100261948);
  v54[0] = 2;
  v37 = sub_10002B370(&qword_100265B50, &qword_100261948, (void (*)(void))sub_10017F014, (uint64_t)&protocol conformance descriptor for <A> A?);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, v36, v54, v5, v36, v37);
  v38 = v52;
  v51 = v6;
  v39 = sub_100037A5C(&qword_10025FF00);
  v54[0] = 3;
  v40 = sub_1000272B4(&qword_100265B58, &qword_10025FF00, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  swift_bridgeObjectRetain(v38);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, v39, v54, v5, v39, v40);
  v41 = v52;
  v42 = v53;
  LOBYTE(v52) = 0;
  v43 = swift_bridgeObjectRetain(v53);
  if ((KeyedDecodingContainer.contains(_:)(&v52, v5, v43) & 1) != 0)
  {
    v44 = sub_100037A5C(&qword_100261218);
    v54[0] = 0;
    v45 = sub_10017F014();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, v44, v54, v5, v44, v45);
    v50 = a2;
    v46 = v52;
    v47 = sub_100179410(v52);
    v48 = v46;
    a2 = v50;
    swift_bridgeObjectRelease(v48);
  }
  else
  {
    v47 = 0;
  }
  (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v5);
  sub_10002BB90(a1);
  swift_bridgeObjectRelease(v42);
  result = swift_bridgeObjectRelease(v38);
  *(_QWORD *)a2 = v47;
  *(_QWORD *)(a2 + 8) = v38;
  *(_BYTE *)(a2 + 16) = v55;
  *(_QWORD *)(a2 + 24) = v41;
  *(_QWORD *)(a2 + 32) = v42;
  return result;
}

uint64_t sub_10017AF0C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000100201330)
  {
    v4 = 0x8000000100201330;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100201330, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x7972746E756F63 && a2 == 0xE700000000000000)
  {
    v6 = 0xE700000000000000;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7972746E756F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x437972746E756F63 && a2 == 0xEB0000000065646FLL)
  {
    v7 = 0xEB0000000065646FLL;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x437972746E756F63, 0xEB0000000065646FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0xD000000000000015)
  {
    v8 = 0x8000000100201350;
    if (a2 == 0x8000000100201350)
      goto LABEL_23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100201350, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if (a1 == 0x726464416C6C7566 && a2 == 0xEB00000000737365)
  {
    v9 = 0xEB00000000737365;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726464416C6C7566, 0xEB00000000737365, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0x7974696C61636F6CLL && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7974696C61636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_35;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xED0000656C746954)
  {
    v11 = 0xED0000656C746954;
LABEL_41:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xED0000656C746954, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_41;
  }
  if (a1 == 0x65646F4374736F70 && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4374736F70, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_47;
  }
  if (a1 == 0x736573696D657270 && a2 == 0xE800000000000000)
  {
    v13 = 0xE800000000000000;
LABEL_53:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736573696D657270, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_53;
  }
  if (a1 == 0x64644174726F6873 && a2 == 0xEC00000073736572)
  {
    v14 = 0xEC00000073736572;
LABEL_59:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64644174726F6873, 0xEC00000073736572, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_59;
  }
  if (a1 == 0x646F436574617473 && a2 == 0xE900000000000065)
  {
    v15 = 0xE900000000000065;
LABEL_65:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F436574617473, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_65;
  }
  if (a1 == 0x6441746565727473 && a2 == 0xED00007373657264)
  {
    v16 = 0xED00007373657264;
LABEL_71:
    swift_bridgeObjectRelease(v16);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6441746565727473, 0xED00007373657264, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_71;
  }
  if (a1 == 0x614E746565727473 && a2 == 0xEA0000000000656DLL)
  {
    v17 = 0xEA0000000000656DLL;
LABEL_77:
    swift_bridgeObjectRelease(v17);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E746565727473, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_77;
  }
  if (a1 == 0xD000000000000015)
  {
    v18 = 0x8000000100201370;
    if (a2 == 0x8000000100201370)
      goto LABEL_82;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100201370, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_82:
    swift_bridgeObjectRelease(v18);
    return 13;
  }
  if (a1 == 0x6C61636F4C627573 && a2 == 0xEB00000000797469)
  {
    swift_bridgeObjectRelease(0xEB00000000797469);
    return 14;
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C61636F4C627573, 0xEB00000000797469, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

_QWORD *sub_10017B5B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  _QWORD v110[30];
  char v111;

  v5 = sub_100037A5C(&qword_100265B30);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v94 = a1;
  sub_100036228(a1, v9);
  v11 = sub_10017EE8C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerFence.FullAddress.CodingKeys, &type metadata for ServerFence.FullAddress.CodingKeys, v11, v9, v10);
  if (v2)
    return (_QWORD *)sub_10002BB90(v94);
  LOBYTE(v110[0]) = 0;
  v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
  LOBYTE(v110[0]) = 1;
  v15 = v14;
  swift_bridgeObjectRetain(v14);
  v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
  v93 = v15;
  v84 = v16;
  v85 = v13;
  LOBYTE(v110[0]) = 2;
  v18 = v17;
  swift_bridgeObjectRetain(v17);
  v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
  v92 = v18;
  v83 = v19;
  v21 = v20;
  v22 = sub_100037A5C(&qword_1002625F8);
  LOBYTE(v95) = 3;
  v23 = sub_1000272B4(&qword_1002639C8, &qword_1002625F8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  swift_bridgeObjectRetain(v21);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v110, v22, &v95, v5, v22, v23);
  v91 = v21;
  v24 = v110[0];
  LOBYTE(v110[0]) = 4;
  swift_bridgeObjectRetain(v24);
  v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
  LOBYTE(v110[0]) = 5;
  v26 = v25;
  swift_bridgeObjectRetain(v25);
  v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
  v90 = v26;
  v81 = v27;
  LOBYTE(v110[0]) = 6;
  v29 = v28;
  swift_bridgeObjectRetain(v28);
  v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
  v89 = v29;
  v80 = v30;
  LOBYTE(v110[0]) = 7;
  v32 = v31;
  swift_bridgeObjectRetain(v31);
  v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
  v88 = v32;
  v79 = v33;
  LOBYTE(v110[0]) = 8;
  v35 = v34;
  swift_bridgeObjectRetain(v34);
  v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
  v87 = v35;
  v77 = v24;
  LOBYTE(v110[0]) = 9;
  v86 = v36;
  swift_bridgeObjectRetain(v36);
  v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
  v76 = v38;
  v39 = v37;
  LOBYTE(v110[0]) = 10;
  swift_bridgeObjectRetain(v38);
  v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
  v75 = v40;
  LOBYTE(v110[0]) = 11;
  swift_bridgeObjectRetain(v40);
  v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
  v72 = v41;
  v74 = 0;
  LOBYTE(v110[0]) = 12;
  swift_bridgeObjectRetain(v72);
  v42 = v74;
  v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
  v71 = v43;
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v93);
    swift_bridgeObjectRelease(v92);
    swift_bridgeObjectRelease(v91);
    swift_bridgeObjectRelease(v77);
    swift_bridgeObjectRelease(v90);
    swift_bridgeObjectRelease(v89);
    swift_bridgeObjectRelease(v88);
    swift_bridgeObjectRelease(v87);
    swift_bridgeObjectRelease(v86);
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v72);
    sub_10002BB90(v94);
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease(v86);
    swift_bridgeObjectRelease(v87);
    swift_bridgeObjectRelease(v88);
    swift_bridgeObjectRelease(v89);
    swift_bridgeObjectRelease(v90);
    swift_bridgeObjectRelease(v77);
    swift_bridgeObjectRelease(v91);
    swift_bridgeObjectRelease(v92);
    result = (_QWORD *)swift_bridgeObjectRelease(v93);
    if (!v74)
      return (_QWORD *)swift_bridgeObjectRelease(v72);
  }
  else
  {
    LOBYTE(v110[0]) = 13;
    swift_bridgeObjectRetain(v71);
    v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v110, v5);
    v45 = v44;
    v111 = 14;
    swift_bridgeObjectRetain(v44);
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
    v67 = v47;
    v48 = v46;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v49 = v92;
    v50 = v93;
    *(_QWORD *)&v95 = v85;
    *((_QWORD *)&v95 + 1) = v93;
    *(_QWORD *)&v96 = v84;
    *((_QWORD *)&v96 + 1) = v92;
    v51 = v91;
    *(_QWORD *)&v97 = v83;
    *((_QWORD *)&v97 + 1) = v91;
    *(_QWORD *)&v98 = v77;
    *((_QWORD *)&v98 + 1) = v82;
    *(_QWORD *)&v99 = v90;
    *((_QWORD *)&v99 + 1) = v81;
    *(_QWORD *)&v100 = v89;
    *((_QWORD *)&v100 + 1) = v80;
    *(_QWORD *)&v101 = v88;
    *((_QWORD *)&v101 + 1) = v79;
    *(_QWORD *)&v102 = v87;
    *((_QWORD *)&v102 + 1) = v78;
    *(_QWORD *)&v103 = v86;
    *((_QWORD *)&v103 + 1) = v39;
    v65 = v48;
    v66 = v39;
    *(_QWORD *)&v104 = v76;
    *((_QWORD *)&v104 + 1) = v73;
    *(_QWORD *)&v105 = v75;
    *((_QWORD *)&v105 + 1) = v70;
    *(_QWORD *)&v106 = v72;
    *((_QWORD *)&v106 + 1) = v69;
    *(_QWORD *)&v107 = v71;
    *((_QWORD *)&v107 + 1) = v68;
    *(_QWORD *)&v108 = v45;
    *((_QWORD *)&v108 + 1) = v48;
    v109 = v67;
    sub_10017ED8C(&v95);
    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(v77);
    swift_bridgeObjectRelease(v90);
    swift_bridgeObjectRelease(v89);
    swift_bridgeObjectRelease(v88);
    v52 = v87;
    swift_bridgeObjectRelease(v87);
    v53 = v86;
    swift_bridgeObjectRelease(v86);
    v54 = v76;
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease(v75);
    v55 = v72;
    swift_bridgeObjectRelease(v72);
    v56 = v71;
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v45);
    sub_10002BB90(v94);
    v110[0] = v85;
    v110[1] = v93;
    v110[2] = v84;
    v110[3] = v92;
    v110[4] = v83;
    v110[5] = v91;
    v110[6] = v77;
    v110[7] = v82;
    v110[8] = v90;
    v110[9] = v81;
    v110[10] = v89;
    v110[11] = v80;
    v110[12] = v88;
    v110[13] = v79;
    v110[14] = v52;
    v110[15] = v78;
    v110[16] = v53;
    v110[17] = v66;
    v110[18] = v54;
    v110[19] = v73;
    v110[20] = v75;
    v110[21] = v70;
    v110[22] = v55;
    v110[23] = v69;
    v110[24] = v56;
    v110[25] = v68;
    v110[26] = v45;
    v110[27] = v65;
    v110[28] = v67;
    result = sub_10017EED0(v110);
    v57 = v108;
    *(_OWORD *)(a2 + 192) = v107;
    *(_OWORD *)(a2 + 208) = v57;
    *(_QWORD *)(a2 + 224) = v109;
    v58 = v104;
    *(_OWORD *)(a2 + 128) = v103;
    *(_OWORD *)(a2 + 144) = v58;
    v59 = v106;
    *(_OWORD *)(a2 + 160) = v105;
    *(_OWORD *)(a2 + 176) = v59;
    v60 = v100;
    *(_OWORD *)(a2 + 64) = v99;
    *(_OWORD *)(a2 + 80) = v60;
    v61 = v102;
    *(_OWORD *)(a2 + 96) = v101;
    *(_OWORD *)(a2 + 112) = v61;
    v62 = v96;
    *(_OWORD *)a2 = v95;
    *(_OWORD *)(a2 + 16) = v62;
    v63 = v98;
    *(_OWORD *)(a2 + 32) = v97;
    *(_OWORD *)(a2 + 48) = v63;
  }
  return result;
}

uint64_t sub_10017C2CC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000001002012D0;
    if (a2 == 0x80000001002012D0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001002012D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x73736572646461 && a2 == 0xE700000000000000)
  {
    v6 = 0xE700000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73736572646461, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x64726F6365526B63 && a2 == 0xEC000000656D614ELL)
  {
    v7 = 0xEC000000656D614ELL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64726F6365526B63, 0xEC000000656D614ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000001002012F0)
  {
    v8 = 0x80000001002012F0;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001002012F0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x4264657461657263 && a2 == 0xEB00000000644979)
  {
    v9 = 0xEB00000000644979;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4264657461657263, 0xEB00000000644979, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0x736C69616D65 && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736C69616D65, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_35;
  }
  if (a1 == 0x644965636E6566 && a2 == 0xE700000000000000)
  {
    v11 = 0xE700000000000000;
LABEL_41:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644965636E6566, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_41;
  }
  if (a1 == 0x7265776F6C6C6F66 && a2 == 0xEB00000000736449)
  {
    v12 = 0xEB00000000736449;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265776F6C6C6F66, 0xEB00000000736449, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_47;
  }
  if (a1 == 0x6449646E65697266 && a2 == 0xE800000000000000)
  {
    v13 = 0xE800000000000000;
LABEL_53:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449646E65697266, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_53;
  }
  if (a1 == 0x726464416C6C7566 && a2 == 0xEB00000000737365)
  {
    v14 = 0xEB00000000737365;
LABEL_59:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726464416C6C7566, 0xEB00000000737365, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_59;
  }
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v15 = 0xE200000000000000;
LABEL_65:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_65;
  }
  if (a1 == 1850700649 && a2 == 0xE400000000000000)
  {
    v16 = 0xE400000000000000;
LABEL_71:
    swift_bridgeObjectRelease(v16);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1850700649, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_71;
  }
  if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000)
  {
    v17 = 0xE500000000000000;
LABEL_77:
    swift_bridgeObjectRelease(v17);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6562616CLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_77;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100201310)
  {
    v18 = 0x8000000100201310;
LABEL_83:
    swift_bridgeObjectRelease(v18);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100201310, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_83;
  }
  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000)
  {
    v19 = 0xE800000000000000;
LABEL_89:
    swift_bridgeObjectRelease(v19);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_89;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000065707954)
  {
    v20 = 0xEC00000065707954;
LABEL_95:
    swift_bridgeObjectRelease(v20);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC00000065707954, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_95;
  }
  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065)
  {
    v21 = 0xE900000000000065;
LABEL_101:
    swift_bridgeObjectRelease(v21);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_101;
  }
  if (a1 == 0x6F656D6974656E6FLL && a2 == 0xEB00000000796C6ELL)
  {
    v22 = 0xEB00000000796C6ELL;
LABEL_107:
    swift_bridgeObjectRelease(v22);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F656D6974656E6FLL, 0xEB00000000796C6ELL, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_107;
  }
  if (a1 == 0x6D754E656E6F6870 && a2 == 0xEC00000073726562)
  {
    v23 = 0xEC00000073726562;
LABEL_113:
    swift_bridgeObjectRelease(v23);
    return 18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E656E6F6870, 0xEC00000073726562, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_113;
  }
  if (a1 == 0x6441797474657270 && a2 == 0xED00007373657264)
  {
    v24 = 0xED00007373657264;
LABEL_119:
    swift_bridgeObjectRelease(v24);
    return 19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6441797474657270, 0xED00007373657264, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
    goto LABEL_119;
  }
  if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    v25 = 0xE600000000000000;
LABEL_125:
    swift_bridgeObjectRelease(v25);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737569646172, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
    goto LABEL_125;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v26 = 0xE600000000000000;
LABEL_131:
    swift_bridgeObjectRelease(v26);
    return 21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_131;
  }
  if (a1 == 0x614E746565727473 && a2 == 0xEA0000000000656DLL)
  {
    v27 = 0xEA0000000000656DLL;
LABEL_137:
    swift_bridgeObjectRelease(v27);
    return 22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E746565727473, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
    goto LABEL_137;
  }
  if (a1 == 0x72656767697274 && a2 == 0xE700000000000000)
  {
    v28 = 0xE700000000000000;
LABEL_143:
    swift_bridgeObjectRelease(v28);
    return 23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656767697274, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
    goto LABEL_143;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v29 = 0xE400000000000000;
LABEL_149:
    swift_bridgeObjectRelease(v29);
    return 24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v29 = a2;
    goto LABEL_149;
  }
  if (a1 == 0x6954657461647075 && a2 == 0xEF706D617473656DLL)
  {
    swift_bridgeObjectRelease(0xEF706D617473656DLL);
    return 25;
  }
  else
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6954657461647075, 0xEF706D617473656DLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v30 & 1) != 0)
      return 25;
    else
      return 26;
  }
}

void *sub_10017CDA8@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  void *result;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD v120[73];
  _QWORD v121[73];
  _QWORD v122[29];
  _QWORD v123[29];
  _QWORD v124[74];
  int v125;
  char v126;
  char v127;

  v3 = v2;
  v6 = sub_100037A5C(&qword_100265B10);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  v118 = a1;
  sub_100036228(a1, v10);
  v12 = sub_10017E60C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerFence.CodingKeys, &type metadata for ServerFence.CodingKeys, v12, v10, v11);
  if (v2)
  {
    LODWORD(v116) = 0;
    v13 = 0;
    goto LABEL_4;
  }
  LOBYTE(v121[0]) = 0;
  v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v24 = v23;
  v124[0] = v22;
  v124[1] = v23;
  LOBYTE(v121[0]) = 1;
  swift_bridgeObjectRetain(v23);
  v124[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v124[3] = v25;
  LOBYTE(v121[0]) = 2;
  v115 = v124[2];
  v116 = v25;
  swift_bridgeObjectRetain(v25);
  v124[4] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v124[5] = v26;
  LOBYTE(v121[0]) = 3;
  v113 = v124[4];
  v114 = v26;
  swift_bridgeObjectRetain(v26);
  v124[6] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v124[7] = v27;
  LOBYTE(v121[0]) = 4;
  v110 = v124[6];
  v112 = v27;
  swift_bridgeObjectRetain(v27);
  v124[8] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v124[9] = v28;
  v108 = v124[8];
  v111 = v28;
  v29 = sub_100037A5C(&qword_1002625F8);
  LOBYTE(v120[0]) = 5;
  v30 = sub_1000272B4(&qword_1002639C8, &qword_1002625F8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  swift_bridgeObjectRetain(v111);
  v117 = v29;
  v109 = v30;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v121, v29, v120, v6, v29, v30);
  v124[10] = v121[0];
  LOBYTE(v121[0]) = 6;
  v107 = v124[10];
  swift_bridgeObjectRetain(v124[10]);
  v105 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v106 = v31;
  v124[11] = v105;
  v124[12] = v31;
  LOBYTE(v120[0]) = 7;
  swift_bridgeObjectRetain(v31);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v121, v117, v120, v6, v117, v109);
  v102 = v22;
  v103 = a2;
  v104 = v24;
  v32 = v121[0];
  v124[13] = v121[0];
  LOBYTE(v121[0]) = 8;
  swift_bridgeObjectRetain(v124[13]);
  v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v124[14] = v33;
  v124[15] = v34;
  v127 = 9;
  v35 = v34;
  v36 = sub_10017E758();
  v101 = v35;
  swift_bridgeObjectRetain(v35);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v123, &type metadata for ServerFence.FullAddress, &v127, v6, &type metadata for ServerFence.FullAddress, v36);
  sub_10000EF6C((uint64_t)v123, (uint64_t)v122, &qword_100265B20);
  sub_10000EF6C((uint64_t)v122, (uint64_t)&v124[16], &qword_100265B20);
  LOBYTE(v121[0]) = 10;
  sub_10017E79C(v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10017E810);
  v100 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v38 = v37;
  v124[45] = v100;
  v124[46] = v37;
  LOBYTE(v121[0]) = 11;
  swift_bridgeObjectRetain(v37);
  v125 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  LOBYTE(v124[47]) = v125;
  LOBYTE(v121[0]) = 12;
  v98 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v99 = v39;
  v124[48] = v98;
  v124[49] = v39;
  LOBYTE(v121[0]) = 13;
  swift_bridgeObjectRetain(v39);
  v96 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v97 = v40;
  v124[50] = v96;
  v124[51] = v40;
  LOBYTE(v121[0]) = 14;
  swift_bridgeObjectRetain(v40);
  v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v94 = v41;
  v124[52] = v95;
  v91 = &v124[53];
  LOBYTE(v124[53]) = v41 & 1;
  LOBYTE(v121[0]) = 15;
  v92 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v93 = v42;
  v124[54] = v92;
  v124[55] = v42;
  LOBYTE(v121[0]) = 16;
  swift_bridgeObjectRetain(v42);
  v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v89 = v43;
  v124[56] = v90;
  v91[32] = v43 & 1;
  LOBYTE(v121[0]) = 17;
  v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v119 = 0;
  v45 = v44;
  BYTE1(v124[57]) = v44;
  LOBYTE(v120[0]) = 18;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v121, v117, v120, v6, v117, v109);
  v119 = 0;
  v124[58] = v121[0];
  LOBYTE(v121[0]) = 19;
  v109 = v124[58];
  swift_bridgeObjectRetain(v124[58]);
  v46 = v119;
  v87 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v88 = v47;
  v119 = v46;
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v99);
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v93);
    swift_bridgeObjectRelease(v109);
    sub_10017E79C(v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10017E650);
    swift_bridgeObjectRelease(v104);
    swift_bridgeObjectRelease(v116);
    swift_bridgeObjectRelease(v114);
    swift_bridgeObjectRelease(v112);
    swift_bridgeObjectRelease(v111);
    swift_bridgeObjectRelease(v107);
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v101);
    LODWORD(v116) = 0;
    v13 = 67418111;
    v3 = v119;
    goto LABEL_4;
  }
  v124[59] = v87;
  v124[60] = v88;
  LOBYTE(v121[0]) = 20;
  swift_bridgeObjectRetain(v88);
  v48 = v119;
  v86 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
  v85 = v49;
  v119 = v48;
  if (!v48)
  {
    v124[61] = v86;
    v91[72] = v85 & 1;
    LOBYTE(v121[0]) = 21;
    v50 = v119;
    v83 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
    v84 = v51;
    v119 = v50;
    if (!v50)
    {
      v124[63] = v83;
      v124[64] = v84;
      LOBYTE(v121[0]) = 22;
      swift_bridgeObjectRetain(v84);
      v52 = v119;
      v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
      v82 = v53;
      LODWORD(v117) = v52 == 0;
      v119 = v52;
      if (v52)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        swift_bridgeObjectRelease(v38);
        swift_bridgeObjectRelease(v99);
        swift_bridgeObjectRelease(v97);
        swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease(v109);
        swift_bridgeObjectRelease(v88);
        v54 = v84;
      }
      else
      {
        v124[65] = v81;
        v124[66] = v82;
        LOBYTE(v121[0]) = 23;
        swift_bridgeObjectRetain(v82);
        v55 = v119;
        v79 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
        v80 = v56;
        v119 = v55;
        if (!v55)
        {
          v124[67] = v79;
          v124[68] = v80;
          LOBYTE(v121[0]) = 24;
          swift_bridgeObjectRetain(v80);
          v57 = v119;
          v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v121, v6);
          v78 = v58;
          v119 = v57;
          if (v57)
          {
            (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
            swift_bridgeObjectRelease(v38);
            swift_bridgeObjectRelease(v99);
            swift_bridgeObjectRelease(v97);
            swift_bridgeObjectRelease(v93);
            swift_bridgeObjectRelease(v109);
            swift_bridgeObjectRelease(v88);
            swift_bridgeObjectRelease(v84);
            swift_bridgeObjectRelease(v82);
            swift_bridgeObjectRelease(v80);
            sub_10017E79C(v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10017E650);
            swift_bridgeObjectRelease(v104);
            swift_bridgeObjectRelease(v116);
            swift_bridgeObjectRelease(v114);
            swift_bridgeObjectRelease(v112);
            swift_bridgeObjectRelease(v111);
            swift_bridgeObjectRelease(v107);
            swift_bridgeObjectRelease(v106);
            swift_bridgeObjectRelease(v32);
            swift_bridgeObjectRelease(v101);
            sub_10002BB90(v118);
            LODWORD(v118) = 0;
            v20 = 1;
          }
          else
          {
            v124[69] = v77;
            v124[70] = v78;
            v126 = 25;
            v59 = swift_bridgeObjectRetain(v78);
            v60 = v119;
            v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v126, v6, v59);
            v76 = v62;
            v119 = v60;
            if (!v60)
            {
              v63 = v61;
              v73 = &v120[53];
              (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
              v74 = v63;
              v124[71] = v63;
              LODWORD(v117) = v76 & 1;
              v91[152] = v76 & 1;
              v120[0] = v102;
              v120[1] = v104;
              v120[2] = v115;
              v120[3] = v116;
              v120[4] = v113;
              v120[5] = v114;
              v120[6] = v110;
              v120[7] = v112;
              v120[8] = v108;
              v120[9] = v111;
              v120[10] = v107;
              v120[11] = v105;
              v120[12] = v106;
              v120[13] = v32;
              v75 = v32;
              v120[14] = v33;
              v120[15] = v101;
              sub_10000EF6C((uint64_t)v122, (uint64_t)&v120[16], &qword_100265B20);
              v64 = v99;
              v120[45] = v100;
              v120[46] = v38;
              LOBYTE(v120[47]) = v125;
              v65 = v97;
              v120[48] = v98;
              v120[49] = v99;
              v120[50] = v96;
              v120[51] = v97;
              v66 = v73;
              *v73 = v94 & 1;
              v120[52] = v95;
              v67 = v93;
              v120[54] = v92;
              v120[55] = v93;
              v120[56] = v90;
              v66[32] = v89 & 1;
              BYTE1(v120[57]) = v45;
              v68 = v109;
              v120[58] = v109;
              v69 = v88;
              v120[59] = v87;
              v120[60] = v88;
              v120[61] = v86;
              v66[72] = v85 & 1;
              v70 = v84;
              v120[63] = v83;
              v120[64] = v84;
              v71 = v82;
              v120[65] = v81;
              v120[66] = v82;
              v120[67] = v79;
              v120[68] = v80;
              v120[69] = v77;
              v120[70] = v78;
              v120[71] = v74;
              v66[152] = v117;
              sub_10017E918((uint64_t)v120);
              swift_bridgeObjectRelease(v38);
              swift_bridgeObjectRelease(v64);
              swift_bridgeObjectRelease(v65);
              swift_bridgeObjectRelease(v67);
              swift_bridgeObjectRelease(v68);
              swift_bridgeObjectRelease(v69);
              swift_bridgeObjectRelease(v70);
              swift_bridgeObjectRelease(v71);
              swift_bridgeObjectRelease(v80);
              swift_bridgeObjectRelease(v78);
              sub_10017E79C(v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10017E650);
              swift_bridgeObjectRelease(v104);
              swift_bridgeObjectRelease(v116);
              swift_bridgeObjectRelease(v114);
              swift_bridgeObjectRelease(v112);
              swift_bridgeObjectRelease(v111);
              swift_bridgeObjectRelease(v107);
              swift_bridgeObjectRelease(v106);
              swift_bridgeObjectRelease(v75);
              swift_bridgeObjectRelease(v101);
              sub_10002BB90(v118);
              memcpy(v121, v124, 0x241uLL);
              sub_10017EB1C((uint64_t)v121);
              return memcpy(v103, v120, 0x241uLL);
            }
            (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
            swift_bridgeObjectRelease(v38);
            swift_bridgeObjectRelease(v99);
            swift_bridgeObjectRelease(v97);
            swift_bridgeObjectRelease(v93);
            swift_bridgeObjectRelease(v109);
            swift_bridgeObjectRelease(v88);
            swift_bridgeObjectRelease(v84);
            swift_bridgeObjectRelease(v82);
            swift_bridgeObjectRelease(v80);
            swift_bridgeObjectRelease(v78);
            sub_10017E79C(v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10017E650);
            swift_bridgeObjectRelease(v104);
            swift_bridgeObjectRelease(v116);
            swift_bridgeObjectRelease(v114);
            swift_bridgeObjectRelease(v112);
            swift_bridgeObjectRelease(v111);
            swift_bridgeObjectRelease(v107);
            swift_bridgeObjectRelease(v106);
            swift_bridgeObjectRelease(v32);
            swift_bridgeObjectRelease(v101);
            sub_10002BB90(v118);
            v20 = 1;
            LODWORD(v118) = 1;
          }
          goto LABEL_57;
        }
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        swift_bridgeObjectRelease(v38);
        swift_bridgeObjectRelease(v99);
        swift_bridgeObjectRelease(v97);
        swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease(v109);
        swift_bridgeObjectRelease(v88);
        swift_bridgeObjectRelease(v84);
        v54 = v82;
      }
      swift_bridgeObjectRelease(v54);
      sub_10017E79C(v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10017E650);
      swift_bridgeObjectRelease(v104);
      swift_bridgeObjectRelease(v116);
      swift_bridgeObjectRelease(v114);
      swift_bridgeObjectRelease(v112);
      swift_bridgeObjectRelease(v111);
      swift_bridgeObjectRelease(v107);
      swift_bridgeObjectRelease(v106);
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v101);
      sub_10002BB90(v118);
      v20 = 0;
      LODWORD(v118) = 0;
LABEL_57:
      swift_bridgeObjectRelease(v124[1]);
      swift_bridgeObjectRelease(v124[3]);
      swift_bridgeObjectRelease(v124[5]);
      swift_bridgeObjectRelease(v124[7]);
      swift_bridgeObjectRelease(v124[9]);
      swift_bridgeObjectRelease(v124[10]);
      swift_bridgeObjectRelease(v124[12]);
      swift_bridgeObjectRelease(v124[13]);
      swift_bridgeObjectRelease(v124[15]);
      v21 = 1;
      LODWORD(v116) = 1;
      v19 = 1;
      v18 = 1;
      v17 = 1;
      v16 = 1;
      LOBYTE(v15) = 1;
LABEL_15:
      sub_10000EF6C((uint64_t)&v124[16], (uint64_t)v121, &qword_100265B20);
      result = sub_10017E79C(v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10017E650);
      if ((v15 & 1) != 0)
        goto LABEL_16;
      goto LABEL_36;
    }
  }
  v13 = 833535;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v99);
  swift_bridgeObjectRelease(v97);
  swift_bridgeObjectRelease(v93);
  swift_bridgeObjectRelease(v109);
  swift_bridgeObjectRelease(v88);
  sub_10017E79C(v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10017E650);
  swift_bridgeObjectRelease(v104);
  swift_bridgeObjectRelease(v116);
  swift_bridgeObjectRelease(v114);
  swift_bridgeObjectRelease(v112);
  swift_bridgeObjectRelease(v111);
  swift_bridgeObjectRelease(v107);
  swift_bridgeObjectRelease(v106);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v101);
  LODWORD(v116) = 1;
  v3 = v119;
LABEL_4:
  result = (void *)sub_10002BB90(v118);
  v15 = (v13 >> 10) & 1;
  v16 = (v13 >> 12) & 1;
  v17 = (v13 >> 13) & 1;
  v18 = (v13 >> 15) & 1;
  v19 = (v13 >> 18) & 1;
  v119 = v3;
  if ((v13 & 1) != 0)
  {
    result = (void *)swift_bridgeObjectRelease(v124[1]);
    if ((v13 & 2) == 0)
    {
LABEL_6:
      if ((v13 & 4) == 0)
        goto LABEL_7;
      goto LABEL_28;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_6;
  }
  result = (void *)swift_bridgeObjectRelease(v124[3]);
  if ((v13 & 4) == 0)
  {
LABEL_7:
    if ((v13 & 8) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  result = (void *)swift_bridgeObjectRelease(v124[5]);
  if ((v13 & 8) == 0)
  {
LABEL_8:
    if ((v13 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  result = (void *)swift_bridgeObjectRelease(v124[7]);
  if ((v13 & 0x10) == 0)
  {
LABEL_9:
    if ((v13 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  result = (void *)swift_bridgeObjectRelease(v124[9]);
  if ((v13 & 0x20) == 0)
  {
LABEL_10:
    if ((v13 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  result = (void *)swift_bridgeObjectRelease(v124[10]);
  if ((v13 & 0x40) == 0)
  {
LABEL_11:
    if ((v13 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  result = (void *)swift_bridgeObjectRelease(v124[12]);
  if ((v13 & 0x80) == 0)
  {
LABEL_12:
    if ((v13 & 0x100) == 0)
      goto LABEL_13;
LABEL_34:
    result = (void *)swift_bridgeObjectRelease(v124[15]);
    if ((v13 & 0x200) != 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_33:
  result = (void *)swift_bridgeObjectRelease(v124[13]);
  if ((v13 & 0x100) != 0)
    goto LABEL_34;
LABEL_13:
  if ((v13 & 0x200) != 0)
  {
LABEL_14:
    LODWORD(v118) = 0;
    v20 = 0;
    LODWORD(v117) = 0;
    v21 = 0;
    goto LABEL_15;
  }
LABEL_35:
  v21 = 0;
  LODWORD(v117) = 0;
  v20 = 0;
  LODWORD(v118) = 0;
  if ((v13 & 0x400) != 0)
  {
LABEL_16:
    result = (void *)swift_bridgeObjectRelease(v124[46]);
    if ((v16 & 1) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  if (!v16)
  {
LABEL_17:
    if (v17)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  result = (void *)swift_bridgeObjectRelease(v124[49]);
  if ((v17 & 1) != 0)
  {
LABEL_18:
    result = (void *)swift_bridgeObjectRelease(v124[51]);
    if ((v18 & 1) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  if (!v18)
  {
LABEL_19:
    if (v19)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  result = (void *)swift_bridgeObjectRelease(v124[55]);
  if ((v19 & 1) != 0)
  {
LABEL_20:
    result = (void *)swift_bridgeObjectRelease(v124[58]);
    if ((v116 & 1) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  if (!(_DWORD)v116)
  {
LABEL_21:
    if (v21)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  result = (void *)swift_bridgeObjectRelease(v124[60]);
  if ((v21 & 1) != 0)
  {
LABEL_22:
    result = (void *)swift_bridgeObjectRelease(v124[64]);
    if ((v117 & 1) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  if (!(_DWORD)v117)
  {
LABEL_23:
    if (v20)
      goto LABEL_24;
LABEL_44:
    if (!(_DWORD)v118)
      return result;
    return (void *)swift_bridgeObjectRelease(v124[70]);
  }
LABEL_43:
  result = (void *)swift_bridgeObjectRelease(v124[66]);
  if ((v20 & 1) == 0)
    goto LABEL_44;
LABEL_24:
  result = (void *)swift_bridgeObjectRelease(v124[68]);
  if ((v118 & 1) == 0)
    return result;
  return (void *)swift_bridgeObjectRelease(v124[70]);
}

uint64_t sub_10017E340(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_10024F160, a1, a2, &unk_10025FC00);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x12)
    return 18;
  else
    return v3;
}

unint64_t sub_10017E390()
{
  unint64_t result;

  result = qword_100265A38;
  if (!qword_100265A38)
  {
    result = swift_getWitnessTable(&unk_1001F8DF4, &type metadata for ServerDevice);
    atomic_store(result, (unint64_t *)&qword_100265A38);
  }
  return result;
}

uint64_t sub_10017E3D4()
{
  return sub_10002B370(&qword_100265A50, &qword_100265A58, (void (*)(void))sub_10017E3F8, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

unint64_t sub_10017E3F8()
{
  unint64_t result;

  result = qword_100265A60;
  if (!qword_100265A60)
  {
    result = swift_getWitnessTable(&unk_1001FA6A8, &type metadata for ServerFriend);
    atomic_store(result, (unint64_t *)&qword_100265A60);
  }
  return result;
}

unint64_t sub_10017E43C()
{
  unint64_t result;

  result = qword_100265A78;
  if (!qword_100265A78)
  {
    result = swift_getWitnessTable(&unk_1001FA6F8, &type metadata for ServerFutureFriend);
    atomic_store(result, (unint64_t *)&qword_100265A78);
  }
  return result;
}

unint64_t sub_10017E480()
{
  unint64_t result;

  result = qword_100265A90;
  if (!qword_100265A90)
  {
    result = swift_getWitnessTable(&unk_1001FA748, &type metadata for ServerPendingOfferFriend);
    atomic_store(result, (unint64_t *)&qword_100265A90);
  }
  return result;
}

unint64_t sub_10017E4C4()
{
  unint64_t result;

  result = qword_100265AB0;
  if (!qword_100265AB0)
  {
    result = swift_getWitnessTable(&unk_1001F82FC, &type metadata for ServerLocationInProgress);
    atomic_store(result, (unint64_t *)&qword_100265AB0);
  }
  return result;
}

unint64_t sub_10017E508()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100265AC0;
  if (!qword_100265AC0)
  {
    v1 = sub_10003C1FC(&qword_100265AB8);
    sub_100004EA8(&qword_100265AC8, type metadata accessor for ServerLocation, (uint64_t)&unk_1001F8374);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100265AC0);
  }
  return result;
}

unint64_t sub_10017E584()
{
  unint64_t result;

  result = qword_100265AE8;
  if (!qword_100265AE8)
  {
    result = swift_getWitnessTable(&unk_1001F8EBC, &type metadata for ServerFence);
    atomic_store(result, (unint64_t *)&qword_100265AE8);
  }
  return result;
}

unint64_t sub_10017E5C8()
{
  unint64_t result;

  result = qword_100265AF0;
  if (!qword_100265AF0)
  {
    result = swift_getWitnessTable(&unk_1001F9750, &type metadata for ServerBaseResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265AF0);
  }
  return result;
}

unint64_t sub_10017E60C()
{
  unint64_t result;

  result = qword_100265B18;
  if (!qword_100265B18)
  {
    result = swift_getWitnessTable(&unk_1001F9700, &type metadata for ServerFence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265B18);
  }
  return result;
}

uint64_t sub_10017E650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a13);
    swift_bridgeObjectRelease(a15);
    swift_bridgeObjectRelease(a17);
    swift_bridgeObjectRelease(a19);
    swift_bridgeObjectRelease(a21);
    swift_bridgeObjectRelease(a23);
    swift_bridgeObjectRelease(a25);
    swift_bridgeObjectRelease(a27);
    return swift_bridgeObjectRelease(a29);
  }
  return result;
}

unint64_t sub_10017E758()
{
  unint64_t result;

  result = qword_100265B28;
  if (!qword_100265B28)
  {
    result = swift_getWitnessTable(&unk_1001F8E6C, &type metadata for ServerFence.FullAddress);
    atomic_store(result, (unint64_t *)&qword_100265B28);
  }
  return result;
}

_QWORD *sub_10017E79C(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26],
    a1[27],
    a1[28]);
  return a1;
}

uint64_t sub_10017E810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a29);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a13);
    swift_bridgeObjectRetain(a15);
    swift_bridgeObjectRetain(a17);
    swift_bridgeObjectRetain(a19);
    swift_bridgeObjectRetain(a21);
    swift_bridgeObjectRetain(a23);
    swift_bridgeObjectRetain(a25);
    return swift_bridgeObjectRetain(a27);
  }
  return result;
}

uint64_t sub_10017E918(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  v31 = *(_QWORD *)(a1 + 136);
  v32 = *(_QWORD *)(a1 + 128);
  v29 = *(_QWORD *)(a1 + 152);
  v30 = *(_QWORD *)(a1 + 144);
  v27 = *(_QWORD *)(a1 + 168);
  v28 = *(_QWORD *)(a1 + 160);
  v25 = *(_QWORD *)(a1 + 184);
  v26 = *(_QWORD *)(a1 + 176);
  v21 = *(_OWORD *)(a1 + 208);
  v22 = *(_OWORD *)(a1 + 192);
  v20 = *(_OWORD *)(a1 + 224);
  v17 = *(_OWORD *)(a1 + 256);
  v18 = *(_OWORD *)(a1 + 240);
  v15 = *(_OWORD *)(a1 + 288);
  v16 = *(_OWORD *)(a1 + 272);
  v13 = *(_OWORD *)(a1 + 320);
  v14 = *(_OWORD *)(a1 + 304);
  v12 = *(_OWORD *)(a1 + 336);
  v9 = *(_QWORD *)(a1 + 352);
  v23 = *(_QWORD *)(a1 + 368);
  v24 = *(_QWORD *)(a1 + 392);
  v33 = *(_QWORD *)(a1 + 408);
  v34 = *(_QWORD *)(a1 + 440);
  v35 = *(_QWORD *)(a1 + 464);
  v36 = *(_QWORD *)(a1 + 480);
  v37 = *(_QWORD *)(a1 + 512);
  v38 = *(_QWORD *)(a1 + 528);
  v39 = *(_QWORD *)(a1 + 544);
  v10 = *(_QWORD *)(a1 + 560);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 120));
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v19);
  sub_10017E810(v32, v31, v30, v29, v28, v27, v26, v25, v22, *((uint64_t *)&v22 + 1), v21, *((uint64_t *)&v21 + 1), v20, *((uint64_t *)&v20 + 1), v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v39);
  return a1;
}

uint64_t sub_10017EB1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 120);
  v31 = *(_QWORD *)(a1 + 136);
  v32 = *(_QWORD *)(a1 + 128);
  v29 = *(_QWORD *)(a1 + 152);
  v30 = *(_QWORD *)(a1 + 144);
  v27 = *(_QWORD *)(a1 + 168);
  v28 = *(_QWORD *)(a1 + 160);
  v25 = *(_QWORD *)(a1 + 184);
  v26 = *(_QWORD *)(a1 + 176);
  v21 = *(_OWORD *)(a1 + 192);
  v19 = *(_OWORD *)(a1 + 224);
  v20 = *(_OWORD *)(a1 + 208);
  v17 = *(_OWORD *)(a1 + 256);
  v18 = *(_OWORD *)(a1 + 240);
  v15 = *(_OWORD *)(a1 + 288);
  v16 = *(_OWORD *)(a1 + 272);
  v13 = *(_OWORD *)(a1 + 320);
  v14 = *(_OWORD *)(a1 + 304);
  v12 = *(_OWORD *)(a1 + 336);
  v10 = *(_QWORD *)(a1 + 352);
  v22 = *(_QWORD *)(a1 + 368);
  v23 = *(_QWORD *)(a1 + 392);
  v24 = *(_QWORD *)(a1 + 408);
  v33 = *(_QWORD *)(a1 + 440);
  v34 = *(_QWORD *)(a1 + 464);
  v35 = *(_QWORD *)(a1 + 480);
  v36 = *(_QWORD *)(a1 + 512);
  v37 = *(_QWORD *)(a1 + 528);
  v38 = *(_QWORD *)(a1 + 544);
  v39 = *(_QWORD *)(a1 + 560);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  sub_10017E650(v32, v31, v30, v29, v28, v27, v26, v25, v21, *((uint64_t *)&v21 + 1), v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v10);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v39);
  return a1;
}

uint64_t sub_10017ED1C(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

unint64_t sub_10017ED40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100263878;
  if (!qword_100263878)
  {
    v1 = sub_10003C1FC(&qword_1002625F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100263878);
  }
  return result;
}

_QWORD *sub_10017ED8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[12];
  v9 = a1[14];
  v10 = a1[16];
  v12 = a1[18];
  v13 = a1[20];
  v14 = a1[22];
  v15 = a1[24];
  v16 = a1[26];
  swift_bridgeObjectRetain(a1[28]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  return a1;
}

unint64_t sub_10017EE8C()
{
  unint64_t result;

  result = qword_100265B38;
  if (!qword_100265B38)
  {
    result = swift_getWitnessTable(&unk_1001F96B0, &type metadata for ServerFence.FullAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265B38);
  }
  return result;
}

_QWORD *sub_10017EED0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[12];
  v8 = a1[14];
  v9 = a1[16];
  v10 = a1[18];
  v12 = a1[20];
  v13 = a1[22];
  v14 = a1[24];
  v15 = a1[26];
  v16 = a1[28];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

unint64_t sub_10017EFD0()
{
  unint64_t result;

  result = qword_100265B48;
  if (!qword_100265B48)
  {
    result = swift_getWitnessTable(&unk_1001F9660, &type metadata for ServerCommandResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265B48);
  }
  return result;
}

unint64_t sub_10017F014()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100261248;
  if (!qword_100261248)
  {
    v1 = sub_10003C1FC(&qword_100261218);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100261248);
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerDevice.CodingKeys()
{
  return &type metadata for ServerDevice.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ServerCommandResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10017F0CC + 4 * byte_1001F8BD2[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10017F100 + 4 * byte_1001F8BCD[v4]))();
}

uint64_t sub_10017F100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017F108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10017F110);
  return result;
}

uint64_t sub_10017F11C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10017F124);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10017F128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017F130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerCommandResponse.CodingKeys()
{
  return &type metadata for ServerCommandResponse.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ServerFence.FullAddress.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerFence.FullAddress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_10017F228 + 4 * byte_1001F8BDC[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_10017F25C + 4 * byte_1001F8BD7[v4]))();
}

uint64_t sub_10017F25C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017F264(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10017F26CLL);
  return result;
}

uint64_t sub_10017F278(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10017F280);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_10017F284(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017F28C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerFence.FullAddress.CodingKeys()
{
  return &type metadata for ServerFence.FullAddress.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ServerFence.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 25 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 25) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE6)
    return ((uint64_t (*)(void))((char *)&loc_10017F2F4 + 4 * byte_1001F8BE6[v4]))();
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_10017F328 + 4 * byte_1001F8BE1[v4]))();
}

uint64_t sub_10017F328(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017F330(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10017F338);
  return result;
}

uint64_t sub_10017F344(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10017F34CLL);
  *(_BYTE *)result = a2 + 25;
  return result;
}

uint64_t sub_10017F350(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017F358(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerFence.CodingKeys()
{
  return &type metadata for ServerFence.CodingKeys;
}

ValueMetadata *type metadata accessor for ServerBaseResponse.CodingKeys()
{
  return &type metadata for ServerBaseResponse.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ServerConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEC)
    goto LABEL_17;
  if (a2 + 20 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 20) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 20;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 20;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 20;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x15;
  v8 = v6 - 21;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

ValueMetadata *type metadata accessor for ServerConfig.CodingKeys()
{
  return &type metadata for ServerConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for ServerPreferences.CodingKeys()
{
  return &type metadata for ServerPreferences.CodingKeys;
}

ValueMetadata *type metadata accessor for ServerMyInfo.CodingKeys()
{
  return &type metadata for ServerMyInfo.CodingKeys;
}

unint64_t sub_10017F448()
{
  unint64_t result;

  result = qword_100265B88;
  if (!qword_100265B88)
  {
    result = swift_getWitnessTable(&unk_1001F9098, &type metadata for ServerMyInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265B88);
  }
  return result;
}

unint64_t sub_10017F490()
{
  unint64_t result;

  result = qword_100265B90;
  if (!qword_100265B90)
  {
    result = swift_getWitnessTable(&unk_1001F9150, &type metadata for ServerPreferences.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265B90);
  }
  return result;
}

unint64_t sub_10017F4D8()
{
  unint64_t result;

  result = qword_100265B98;
  if (!qword_100265B98)
  {
    result = swift_getWitnessTable(&unk_1001F9208, &type metadata for ServerConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265B98);
  }
  return result;
}

unint64_t sub_10017F520()
{
  unint64_t result;

  result = qword_100265BA0;
  if (!qword_100265BA0)
  {
    result = swift_getWitnessTable(&unk_1001F92D0, &type metadata for ServerBaseResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265BA0);
  }
  return result;
}

unint64_t sub_10017F568()
{
  unint64_t result;

  result = qword_100265BA8;
  if (!qword_100265BA8)
  {
    result = swift_getWitnessTable(&unk_1001F9388, &type metadata for ServerFence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265BA8);
  }
  return result;
}

unint64_t sub_10017F5B0()
{
  unint64_t result;

  result = qword_100265BB0;
  if (!qword_100265BB0)
  {
    result = swift_getWitnessTable(&unk_1001F9440, &type metadata for ServerFence.FullAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265BB0);
  }
  return result;
}

unint64_t sub_10017F5F8()
{
  unint64_t result;

  result = qword_100265BB8;
  if (!qword_100265BB8)
  {
    result = swift_getWitnessTable(&unk_1001F9530, &type metadata for ServerCommandResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265BB8);
  }
  return result;
}

unint64_t sub_10017F640()
{
  unint64_t result;

  result = qword_100265BC0;
  if (!qword_100265BC0)
  {
    result = swift_getWitnessTable(&unk_1001F95E8, &type metadata for ServerDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265BC0);
  }
  return result;
}

unint64_t sub_10017F688()
{
  unint64_t result;

  result = qword_100265BC8;
  if (!qword_100265BC8)
  {
    result = swift_getWitnessTable(&unk_1001F9558, &type metadata for ServerDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265BC8);
  }
  return result;
}

unint64_t sub_10017F6D0()
{
  unint64_t result;

  result = qword_100265BD0;
  if (!qword_100265BD0)
  {
    result = swift_getWitnessTable(&unk_1001F9580, &type metadata for ServerDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265BD0);
  }
  return result;
}

unint64_t sub_10017F718()
{
  unint64_t result;

  result = qword_100265BD8;
  if (!qword_100265BD8)
  {
    result = swift_getWitnessTable(&unk_1001F9468, &type metadata for ServerCommandResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265BD8);
  }
  return result;
}

unint64_t sub_10017F760()
{
  unint64_t result;

  result = qword_100265BE0;
  if (!qword_100265BE0)
  {
    result = swift_getWitnessTable(&unk_1001F9490, &type metadata for ServerCommandResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265BE0);
  }
  return result;
}

unint64_t sub_10017F7A8()
{
  unint64_t result;

  result = qword_100265BE8;
  if (!qword_100265BE8)
  {
    result = swift_getWitnessTable(&unk_1001F93B0, &type metadata for ServerFence.FullAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265BE8);
  }
  return result;
}

unint64_t sub_10017F7F0()
{
  unint64_t result;

  result = qword_100265BF0;
  if (!qword_100265BF0)
  {
    result = swift_getWitnessTable(&unk_1001F93D8, &type metadata for ServerFence.FullAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265BF0);
  }
  return result;
}

unint64_t sub_10017F838()
{
  unint64_t result;

  result = qword_100265BF8;
  if (!qword_100265BF8)
  {
    result = swift_getWitnessTable(&unk_1001F92F8, &type metadata for ServerFence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265BF8);
  }
  return result;
}

unint64_t sub_10017F880()
{
  unint64_t result;

  result = qword_100265C00;
  if (!qword_100265C00)
  {
    result = swift_getWitnessTable(&unk_1001F9320, &type metadata for ServerFence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265C00);
  }
  return result;
}

unint64_t sub_10017F8C8()
{
  unint64_t result;

  result = qword_100265C08;
  if (!qword_100265C08)
  {
    result = swift_getWitnessTable(&unk_1001F9230, &type metadata for ServerBaseResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265C08);
  }
  return result;
}

unint64_t sub_10017F914()
{
  unint64_t result;

  result = qword_100265C10;
  if (!qword_100265C10)
  {
    result = swift_getWitnessTable(&unk_1001F9178, &type metadata for ServerConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265C10);
  }
  return result;
}

unint64_t sub_10017F95C()
{
  unint64_t result;

  result = qword_100265C18;
  if (!qword_100265C18)
  {
    result = swift_getWitnessTable(&unk_1001F91A0, &type metadata for ServerConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265C18);
  }
  return result;
}

unint64_t sub_10017F9A4()
{
  unint64_t result;

  result = qword_100265C20;
  if (!qword_100265C20)
  {
    result = swift_getWitnessTable(&unk_1001F90C0, &type metadata for ServerPreferences.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265C20);
  }
  return result;
}

unint64_t sub_10017F9EC()
{
  unint64_t result;

  result = qword_100265C28;
  if (!qword_100265C28)
  {
    result = swift_getWitnessTable(&unk_1001F90E8, &type metadata for ServerPreferences.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265C28);
  }
  return result;
}

unint64_t sub_10017FA34()
{
  unint64_t result;

  result = qword_100265C30;
  if (!qword_100265C30)
  {
    result = swift_getWitnessTable(&unk_1001F9008, &type metadata for ServerMyInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265C30);
  }
  return result;
}

unint64_t sub_10017FA7C()
{
  unint64_t result;

  result = qword_100265C38;
  if (!qword_100265C38)
  {
    result = swift_getWitnessTable(&unk_1001F9030, &type metadata for ServerMyInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265C38);
  }
  return result;
}

uint64_t sub_10017FAC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 2080);
  v2 = *(_QWORD *)(v0 + 2056);
  v3 = *(_QWORD *)(v0 + 2040);
  v4 = *(_QWORD *)(v0 + 2024);
  v12 = *(_QWORD *)(v0 + 2016);
  v13 = *(_QWORD *)(v0 + 2064);
  v14 = *(_QWORD *)(v0 + 1992);
  v15 = *(_QWORD *)(v0 + 1968);
  v16 = *(_QWORD *)(v0 + 1944);
  v17 = *(_QWORD *)(v0 + 1936);
  v18 = *(_QWORD *)(v0 + 1928);
  v19 = *(_QWORD *)(v0 + 1920);
  v20 = *(_QWORD *)(v0 + 1912);
  v21 = *(_QWORD *)(v0 + 1904);
  v5 = *(_QWORD *)(v0 + 1896);
  v6 = *(_QWORD *)(v0 + 1888);
  v7 = *(_QWORD *)(v0 + 1880);
  v8 = *(_QWORD *)(v0 + 1840);
  v9 = *(_QWORD *)(v0 + 1832);
  swift_release(*(_QWORD *)(v0 + 2096));
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v6);
  v10 = type metadata accessor for LocationRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1800));
  swift_bridgeObjectRelease(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10017FC20(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v20 = a4;
  v8 = sub_100037A5C(&qword_100265D28);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100036228(a1, v12);
  v14 = sub_1001806BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LocationServerRequest.CodingKeys, &type metadata for LocationServerRequest.CodingKeys, v14, v12, v13);
  v21[0] = a2;
  v22 = 0;
  v15 = sub_100037A5C(&qword_100261218);
  v16 = sub_10007581C(&qword_100261220, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, v15, v16);
  if (!v4)
  {
    v21[0] = a3;
    v21[1] = v20;
    v22 = 1;
    v17 = sub_10003F9B8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10017FD94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001806BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017FDBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001806BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10017FDE4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100180490(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10017FE10(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10017FC20(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10017FE2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v29[160];
  _QWORD v30[21];
  char v31;
  char v32;

  v23 = a2;
  v24 = type metadata accessor for ClientContext(0);
  __chkstk_darwin(v24);
  v4 = (uint64_t *)((char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_100037A5C(&qword_100265D10);
  v5 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LegacyLocationServerRequestContext(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  v27 = a1;
  sub_100036228(a1, v12);
  v13 = sub_10003C964();
  v25 = v7;
  v14 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LegacyLocationServerRequestContext.CodingKeys, &type metadata for LegacyLocationServerRequestContext.CodingKeys, v13, v12, v11);
  if (v14)
    return sub_10002BB90(v27);
  v22 = v8;
  v28 = v5;
  v15 = v24;
  v16 = (uint64_t)v10;
  v32 = 0;
  v17 = sub_10002B9FC();
  v18 = v25;
  v19 = v26;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, &type metadata for ServerContext, &v32, v26, &type metadata for ServerContext, v17);
  sub_10000EF6C((uint64_t)v30, (uint64_t)v29, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v29, v16, &qword_1002603B0);
  v31 = 1;
  v20 = sub_100004EA8(&qword_1002604A0, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3158);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v15, &v31, v19, v15, v20);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v19);
  sub_10003E4F4((uint64_t)v4, v16 + *(int *)(v22 + 20));
  sub_10001F6A8(v16, v23);
  sub_10002BB90(v27);
  return sub_10001F13C(v16);
}

uint64_t sub_1001800E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003C964();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100180108(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003C964();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100180130@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10017FE2C(a1, a2);
}

uint64_t sub_100180144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v7);
  swift_bridgeObjectRelease(v2);
  sub_100037AF8(0, 0xF000000000000000);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018020C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100180218);
}

uint64_t sub_100180218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for ClientContext(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t sub_1001802A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001802AC);
}

uint64_t sub_1001802AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 40) = a2;
  }
  else
  {
    v7 = type metadata accessor for ClientContext(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100180320(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1001F9908;
  result = type metadata accessor for ClientContext(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationServerRequest()
{
  return &type metadata for LocationServerRequest;
}

unint64_t sub_1001803A8()
{
  unint64_t result;

  result = qword_100265CE8;
  if (!qword_100265CE8)
  {
    result = swift_getWitnessTable(&unk_1001F9938, &type metadata for LocationServerRequest);
    atomic_store(result, (unint64_t *)&qword_100265CE8);
  }
  return result;
}

uint64_t sub_1001803EC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004EA8(&qword_100265CF0, type metadata accessor for LegacyLocationServerRequestContext, (uint64_t)&unk_1001F99F8);
  result = sub_100004EA8(&qword_100265C50, type metadata accessor for LegacyLocationServerRequestContext, (uint64_t)&unk_1001F9A3C);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10018044C()
{
  unint64_t result;

  result = qword_100265CF8;
  if (!qword_100265CF8)
  {
    result = swift_getWitnessTable(&unk_1001F9960, &type metadata for LocationServerRequest);
    atomic_store(result, (unint64_t *)&qword_100265CF8);
  }
  return result;
}

uint64_t sub_100180490(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v3 = sub_100037A5C(&qword_100265D18);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100036228(a1, v7);
  v9 = sub_1001806BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LocationServerRequest.CodingKeys, &type metadata for LocationServerRequest.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_10002BB90(a1);
    sub_100037AF8(0, 0xF000000000000000);
  }
  else
  {
    v10 = sub_100037A5C(&qword_100261218);
    v19 = 0;
    v11 = sub_10007581C((unint64_t *)&qword_100261248, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v10, &v19, v3, v10, v11);
    v7 = v17;
    v19 = 1;
    v13 = sub_10003F974();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v17, &type metadata for Data, &v19, v3, &type metadata for Data, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v14 = v17;
    v15 = v18;
    sub_10001F728(v17, v18);
    sub_100037AF8(0, 0xF000000000000000);
    swift_bridgeObjectRetain(v7);
    sub_10001F728(v14, v15);
    sub_100037AF8(v14, v15);
    swift_bridgeObjectRelease(v7);
    sub_10002BB90(a1);
    swift_bridgeObjectRelease(v7);
    sub_100037AF8(v14, v15);
  }
  return v7;
}

unint64_t sub_1001806BC()
{
  unint64_t result;

  result = qword_100265D20;
  if (!qword_100265D20)
  {
    result = swift_getWitnessTable(&unk_1001F9C10, &type metadata for LocationServerRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265D20);
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationServerRequest.CodingKeys()
{
  return &type metadata for LocationServerRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for LegacyLocationServerRequestContext.CodingKeys()
{
  return &type metadata for LegacyLocationServerRequestContext.CodingKeys;
}

unint64_t sub_100180724()
{
  unint64_t result;

  result = qword_100265D30;
  if (!qword_100265D30)
  {
    result = swift_getWitnessTable(&unk_1001F9B30, &type metadata for LegacyLocationServerRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265D30);
  }
  return result;
}

unint64_t sub_10018076C()
{
  unint64_t result;

  result = qword_100265D38;
  if (!qword_100265D38)
  {
    result = swift_getWitnessTable(&unk_1001F9BE8, &type metadata for LocationServerRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265D38);
  }
  return result;
}

unint64_t sub_1001807B4()
{
  unint64_t result;

  result = qword_100265D40;
  if (!qword_100265D40)
  {
    result = swift_getWitnessTable(&unk_1001F9B58, &type metadata for LocationServerRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265D40);
  }
  return result;
}

unint64_t sub_1001807FC()
{
  unint64_t result;

  result = qword_100265D48;
  if (!qword_100265D48)
  {
    result = swift_getWitnessTable(&unk_1001F9B80, &type metadata for LocationServerRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265D48);
  }
  return result;
}

unint64_t sub_100180844()
{
  unint64_t result;

  result = qword_100265D50;
  if (!qword_100265D50)
  {
    result = swift_getWitnessTable(&unk_1001F9AA0, &type metadata for LegacyLocationServerRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265D50);
  }
  return result;
}

unint64_t sub_10018088C()
{
  unint64_t result;

  result = qword_100265D58;
  if (!qword_100265D58)
  {
    result = swift_getWitnessTable(&unk_1001F9AC8, &type metadata for LegacyLocationServerRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265D58);
  }
  return result;
}

uint64_t sub_1001808D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B288);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027B288);
  if (qword_10025FB28 != -1)
    swift_once(&qword_10025FB28, sub_100182D74);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027B2A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100180968(char a1)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  if (a1 == 2)
    return 0x6E776F6E6B6E752ELL;
  if (a1 == 3)
    return 0x6C616974696E692ELL;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(0xE000000000000000);
  if ((a1 & 1) != 0)
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000012;
}

uint64_t sub_100180A5C()
{
  char *v0;

  return sub_100180968(*v0);
}

BOOL sub_100180A64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
    return v3 == 2;
  if (v2 == 3)
    return v3 == 3;
  if ((v3 & 0xFE) == 2)
    return 0;
  return (((v2 & 1) == 0) ^ v3) & 1;
}

uint64_t sub_100180AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[4] = a1;
  v3[5] = a2;
  v4 = type metadata accessor for SystemVersionNumber(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[8] = swift_task_alloc(v6);
  v3[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_100180B34, v2, 0);
}

uint64_t sub_100180B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  NSObject *log;
  uint64_t v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;

  if (qword_10025FB20 != -1)
    swift_once(&qword_10025FB20, sub_1001808D8);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027B288);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v2, v1, v4);
  v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v3, v6, v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  v12 = os_log_type_enabled(v10, v11);
  v14 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 48);
  v15 = *(_QWORD *)(v0 + 56);
  if (v12)
  {
    v30 = *(_QWORD *)(v0 + 64);
    type = v11;
    v17 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v33 = v32;
    *(_DWORD *)v17 = 136315394;
    log = v10;
    v18 = sub_100018A7C(&qword_100260108, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v21 = v20;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v19, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v13, v16);
    *(_WORD *)(v17 + 12) = 2080;
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v25 = v24;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v23, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v25);
    v22(v30, v16);
    _os_log_impl((void *)&_mh_execute_header, log, type, "LocationMonitor: migrate from %s to %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v26 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v26(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48));
    v26(v14, v16);

  }
  v27 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100180DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(uint64_t, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[24];

  v41 = a1;
  v3 = sub_100037A5C(&qword_1002634C0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v42 = v5;
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v7);
  v43 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v35 - v14;
  a2 += 16;
  swift_beginAccess(a2, v44, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v17 = result;
    UUID.init()(result);
    v38 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v38(v13, v15, v9);
    v18 = v3;
    v19 = *(unsigned __int8 *)(v10 + 80);
    v36 = v6;
    v20 = (v19 + 24) & ~v19;
    v37 = v19 | 7;
    v21 = swift_allocObject(&unk_100256D90, v20 + v11, v19 | 7);
    v22 = v10;
    v40 = v10;
    v23 = v4;
    v24 = v21;
    *(_QWORD *)(v21 + 16) = v17;
    v39 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
    v39(v21 + v20, v13, v9);
    swift_retain(v17);
    v25 = v24;
    v26 = v18;
    v35 = v18;
    v27 = v41;
    AsyncStream.Continuation.onTermination.setter(sub_100182E68, v25, v18);
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v43, 1, 1, v28);
    v29 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v36, v27, v26);
    v38(v13, v15, v9);
    v30 = *(unsigned __int8 *)(v23 + 80);
    v31 = (v30 + 40) & ~v30;
    v32 = (v42 + v19 + v31) & ~v19;
    v33 = (char *)swift_allocObject(&unk_100256DB8, v32 + v11, v37 | v30);
    *((_QWORD *)v33 + 2) = 0;
    *((_QWORD *)v33 + 3) = 0;
    *((_QWORD *)v33 + 4) = v17;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v33[v31], v29, v35);
    v39((uint64_t)&v33[v32], v13, v9);
    swift_retain(v17);
    v34 = sub_10005582C(v43, (uint64_t)&unk_100265ED8, (uint64_t)v33);
    swift_release(v17);
    swift_release(v34);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v15, v9);
  }
  return result;
}

uint64_t sub_1001810A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v5);
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (v12 + 40) & ~v12;
  v14 = (char *)swift_allocObject(&unk_100256DE0, v13 + v7, v12 | 7);
  *((_QWORD *)v14 + 2) = 0;
  *((_QWORD *)v14 + 3) = 0;
  *((_QWORD *)v14 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_retain(a2);
  v15 = sub_10005582C((uint64_t)v10, (uint64_t)&unk_100265EF0, (uint64_t)v14);
  return swift_release(v15);
}

uint64_t sub_1001811E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_100181200, a4, 0);
}

uint64_t sub_100181200()
{
  uint64_t v0;

  sub_100181BD0(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100181230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v8 = sub_100037A5C(&qword_100265EE0);
  v6[5] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[6] = v9;
  v6[7] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10018129C, a4, 0);
}

uint64_t sub_10018129C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1001818CC(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  *(_BYTE *)(v0 + 65) = *(_BYTE *)(v1 + 136);
  return swift_task_switch(sub_1001812E4, 0, 0);
}

uint64_t sub_1001812E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  *(_BYTE *)(v0 + 64) = *(_BYTE *)(v0 + 65);
  v4 = sub_100037A5C(&qword_1002634C0);
  AsyncStream.Continuation.yield(_:)(v0 + 64, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100181368(int a1)
{
  unint64_t v1;
  unint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  os_log_t v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[3];

  v2 = v1;
  LODWORD(v3) = a1;
  v4 = sub_100037A5C(&qword_100265EE0);
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_1002634C0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9);
  v14 = (char *)&v50 - v13;
  v15 = *(unsigned __int8 *)(v1 + 136);
  if (v15 == 2)
  {
    if (v3 == 2)
      return result;
    goto LABEL_9;
  }
  if (v15 == 3)
  {
    if (v3 == 3)
      return result;
    goto LABEL_9;
  }
  if ((v3 & 0xFE) == 2 || ((v3 ^ ((v15 & 1) == 0)) & 1) == 0)
  {
LABEL_9:
    if (qword_10025FB20 != -1)
LABEL_43:
      swift_once(&qword_10025FB20, sub_1001808D8);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100037A9C(v16, (uint64_t)qword_10027B288);
    v18 = swift_retain_n(v2, 2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      v22 = swift_slowAlloc(22, -1);
      v52 = v19;
      v55 = v17;
      LODWORD(v54) = v21;
      v23 = v22;
      v53 = swift_slowAlloc(64, -1);
      v59[0] = v53;
      *(_DWORD *)v23 = 136315394;
      v51 = v23 + 4;
      v24 = sub_100180968(*(_BYTE *)(v2 + 136));
      v26 = v25;
      v58 = sub_10002BA84(v24, v25, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v51, v23 + 12);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v23 + 12) = 2080;
      v51 = v23 + 14;
      v27 = sub_100180968(v3);
      v29 = v28;
      v58 = sub_10002BA84(v27, v28, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v51, v23 + 22);
      swift_bridgeObjectRelease(v29);
      v30 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v54, "State: %s -> %s", (uint8_t *)v23, 0x16u);
      v31 = v53;
      swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_release_n(v2, 2);
    }
    v32 = v3;
    *(_BYTE *)(v2 + 136) = v3;
    v33 = (uint64_t *)(v2 + 128);
    swift_beginAccess(v2 + 128, v59, 0, 0);
    v35 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 16);
    if (v35)
    {
      v36 = Logger.logObject.getter(v34);
      v37 = static os_log_type_t.default.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v55 = (int64_t)v33;
        v39 = v38;
        *(_DWORD *)v38 = 134217984;
        v58 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v38 + 4, v38 + 12);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Publishing State change event to %ld subscribers", v39, 0xCu);
        v40 = v39;
        v33 = (uint64_t *)v55;
        swift_slowDealloc(v40, -1, -1);
      }

    }
    v41 = *v33;
    v42 = *(_QWORD *)(v41 + 64);
    v54 = v41 + 64;
    v43 = 1 << *(_BYTE *)(v41 + 32);
    v44 = -1;
    if (v43 < 64)
      v44 = ~(-1 << v43);
    v2 = v44 & v42;
    v55 = (unint64_t)(v43 + 63) >> 6;
    swift_bridgeObjectRetain(v41);
    v3 = 0;
    while (1)
    {
      if (v2)
      {
        v45 = __clz(__rbit64(v2));
        v2 &= v2 - 1;
        v46 = v45 | (v3 << 6);
      }
      else
      {
        v47 = v3 + 1;
        if (__OFADD__(v3, 1))
        {
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        if (v47 >= v55)
          return swift_release(v41);
        v48 = *(_QWORD *)(v54 + 8 * v47);
        ++v3;
        if (!v48)
        {
          v3 = v47 + 1;
          if (v47 + 1 >= v55)
            return swift_release(v41);
          v48 = *(_QWORD *)(v54 + 8 * v3);
          if (!v48)
          {
            v3 = v47 + 2;
            if (v47 + 2 >= v55)
              return swift_release(v41);
            v48 = *(_QWORD *)(v54 + 8 * v3);
            if (!v48)
            {
              v3 = v47 + 3;
              if (v47 + 3 >= v55)
                return swift_release(v41);
              v48 = *(_QWORD *)(v54 + 8 * v3);
              if (!v48)
              {
                v49 = v47 + 4;
                if (v49 >= v55)
                  return swift_release(v41);
                v48 = *(_QWORD *)(v54 + 8 * v49);
                if (!v48)
                {
                  while (1)
                  {
                    v3 = v49 + 1;
                    if (__OFADD__(v49, 1))
                      goto LABEL_42;
                    if (v3 >= v55)
                      return swift_release(v41);
                    v48 = *(_QWORD *)(v54 + 8 * v3);
                    ++v49;
                    if (v48)
                      goto LABEL_38;
                  }
                }
                v3 = v49;
              }
            }
          }
        }
LABEL_38:
        v2 = (v48 - 1) & v48;
        v46 = __clz(__rbit64(v48)) + (v3 << 6);
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v14, *(_QWORD *)(v41 + 56) + *(_QWORD *)(v8 + 72) * v46, v7);
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v14, v7);
      LOBYTE(v58) = v32;
      AsyncStream.Continuation.yield(_:)(&v58, v7);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v6, v57);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
  }
  return result;
}

uint64_t sub_1001818CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];

  v3 = v2;
  v6 = sub_100037A5C(&qword_1002634B8);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  if (qword_10025FB20 != -1)
    swift_once(&qword_10025FB20, sub_1001808D8);
  v16 = type metadata accessor for Logger(0);
  sub_100037A9C(v16, (uint64_t)qword_10027B288);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v38 = a2;
  v17 = v37(v15, a2, v9);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(12, -1);
    v35 = a1;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v36 = v2;
    v23 = v22;
    v40[0] = v22;
    v34 = v13;
    *(_DWORD *)v21 = 136446210;
    v33 = v21 + 4;
    v24 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v9, v24);
    v27 = v26;
    v39 = sub_10002BA84(v25, v26, v40);
    v13 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v33, v21 + 12);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Storing stateContinuation for %{public}s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v28 = v23;
    v3 = v36;
    swift_slowDealloc(v28, -1, -1);
    v29 = v21;
    a1 = v35;
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }

  v37(v13, v38, v9);
  v30 = sub_100037A5C(&qword_1002634C0);
  v31 = *(_QWORD *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v8, a1, v30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v8, 0, 1, v30);
  swift_beginAccess(v3 + 128, v40, 33, 0);
  sub_1000DE530((uint64_t)v8, (uint64_t)v13);
  return swift_endAccess(v40);
}

uint64_t sub_100181BD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38[3];

  v2 = v1;
  v4 = sub_100037A5C(&qword_1002634B8);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v36 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - v11;
  if (qword_10025FB20 != -1)
    swift_once(&qword_10025FB20, sub_1001808D8);
  v13 = type metadata accessor for Logger(0);
  sub_100037A9C(v13, (uint64_t)qword_10027B288);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15 = v14(v12, a1, v7);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(12, -1);
    v34 = v6;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v35 = v1;
    v21 = v20;
    v38[0] = v20;
    v33 = a1;
    *(_DWORD *)v19 = 136446210;
    v32 = v19 + 4;
    v22 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v7, v22);
    v25 = v24;
    v37 = sub_10002BA84(v23, v24, v38);
    a1 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v32, v19 + 12);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Removing stateContinuation for %{public}s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v26 = v21;
    v2 = v35;
    swift_slowDealloc(v26, -1, -1);
    v27 = v19;
    v6 = v34;
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }

  v28 = (uint64_t)v36;
  v14(v36, a1, v7);
  v29 = sub_100037A5C(&qword_1002634C0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v6, 1, 1, v29);
  swift_beginAccess(v2 + 128, v38, 33, 0);
  sub_1000DE530((uint64_t)v6, v28);
  return swift_endAccess(v38);
}

uint64_t sub_100181EBC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LocationMonitor()
{
  return objc_opt_self(_TtC13findmylocated15LocationMonitor);
}

uint64_t getEnumTagSinglePayload for LocationMonitor.State(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 1;
      if (v7 > 1)
        return result;
    }
    return 0;
  }
  v2 = a2 + 3;
  if (a2 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if (v2 >> 8 < 0xFF)
    v3 = 1;
  if (v2 >= 0x100)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_100181F58 + 4 * byte_1001F9CB0[v4]))();
}

uint64_t storeEnumTagSinglePayload for LocationMonitor.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFD)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100182004 + 4 * byte_1001F9CBA[v5]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100182038 + 4 * byte_1001F9CB5[v5]))();
}

uint64_t sub_100182038(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100182040(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100182048);
  return result;
}

uint64_t sub_100182054(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10018205CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100182060(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100182068(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100182074(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *sub_100182090(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for LocationMonitor.State()
{
  return &type metadata for LocationMonitor.State;
}

uint64_t sub_1001820B8()
{
  uint64_t v0;

  return swift_task_switch(sub_1001820CC, v0, 0);
}

uint64_t sub_1001820CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_10025FB20 != -1)
    swift_once(&qword_10025FB20, sub_1001808D8);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B288);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocationMonitor: initialLaunchProcessing", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001821A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100265D8C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_100180AC4(a1, a2);
}

uint64_t sub_100182204(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for LocationMonitor();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_100182264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.startup()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for LocationMonitor();
  *v4 = v2;
  v4[1] = sub_1000087DC;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_1001822C4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v1[3] = *v0;
  v2 = sub_100037A5C((uint64_t *)&unk_100265180);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100182328, v0, 0);
}

uint64_t sub_100182328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for TaskPriority(0);
  v9 = *(_OWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v5 = sub_100018A7C(qword_100265E90, v4, (uint64_t (*)(uint64_t))type metadata accessor for LocationMonitor, (uint64_t)&unk_1001F9DCC);
  v6 = swift_allocObject(&unk_100256D68, 48, 7);
  *(_QWORD *)(v6 + 16) = v9;
  *(_QWORD *)(v6 + 24) = v5;
  *(_OWORD *)(v6 + 32) = v9;
  swift_retain_n(v3, 2);
  v7 = sub_10005582C(v1, (uint64_t)&unk_100265EC8, v6);
  swift_release(v7);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018240C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for LocationMonitor();
  v2 = sub_100018A7C(&qword_100261EE8, v1, (uint64_t (*)(uint64_t))type metadata accessor for LocationMonitor, (uint64_t)&unk_1001F9D6C);
  return ActorServiceProtocol.description.getter(v0, v2);
}

uint64_t sub_100182458(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(&qword_100265E88, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocationMonitor, (uint64_t)&unk_1001F9D44);
}

uint64_t sub_100182484(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(qword_100265E90, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocationMonitor, (uint64_t)&unk_1001F9DCC);
}

uint64_t sub_1001824B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[2] = a4;
  v6 = type metadata accessor for DarwinNotification(0);
  v4[3] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[4] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[5] = swift_task_alloc(v8);
  v4[6] = swift_task_alloc(v8);
  v9 = sub_100037A5C(&qword_100261618);
  v4[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100261620);
  v4[8] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[9] = v11;
  v4[10] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C(&qword_100261628);
  v4[11] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[12] = v13;
  v4[13] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001825A0, a4, 0);
}

uint64_t sub_1001825A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025FB20 != -1)
    swift_once(&qword_10025FB20, sub_1001808D8);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B288);
  *(_QWORD *)(v0 + 112) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Registering listener for Darwin notification: com.apple.locationd.authorization", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 120) = v6;
  *v6 = v0;
  v6[1] = sub_1001826A0;
  return daemon.getter();
}

uint64_t sub_1001826A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v3);
  v4 = type metadata accessor for Daemon(0);
  v5 = sub_100018A7C((unint64_t *)&qword_100261630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_100182738, v6, v7);
}

uint64_t sub_100182738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 136) = Daemon.darwinNotificationHandler.getter();
  swift_release(v1);
  v2 = type metadata accessor for DarwinNotificationHandler(0);
  v3 = sub_100018A7C(&qword_100261638, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DarwinNotificationHandler, (uint64_t)&protocol conformance descriptor for DarwinNotificationHandler);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_1001827D0, v4, v5);
}

uint64_t sub_1001827D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 16);
  dispatch thunk of DarwinNotificationHandler.asyncStream(name:)(0xD000000000000021, 0x80000001002013E0);
  swift_release(v1);
  return swift_task_switch(sub_100182834, v2, 0);
}

uint64_t sub_100182834()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = sub_100018A7C(qword_100265E90, v4, (uint64_t (*)(uint64_t))type metadata accessor for LocationMonitor, (uint64_t)&unk_1001F9DCC);
  v0[18] = v5;
  v6 = v0[2];
  v7 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[19] = v7;
  *v7 = v0;
  v7[1] = sub_1001828E8;
  return AsyncStream.Iterator.next(isolation:)(v0[7], v6, v5, v0[11]);
}

uint64_t sub_1001828E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_task_switch(sub_100182940, v1, 0);
}

uint64_t sub_100182940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  id v25;
  int v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(v4, *(_QWORD *)(v0 + 88));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v1);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9, v1, v2);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v9, v2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    v14 = os_log_type_enabled(v12, v13);
    v16 = *(_QWORD *)(v0 + 32);
    v15 = *(_QWORD *)(v0 + 40);
    v17 = *(_QWORD *)(v0 + 24);
    if (v14)
    {
      v18 = swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v38 = v19;
      *(_DWORD *)v18 = 136315138;
      v20 = sub_100018A7C(&qword_100261658, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DarwinNotification, (uint64_t)&protocol conformance descriptor for DarwinNotification);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      v23 = v22;
      *(_QWORD *)(v18 + 4) = sub_10002BA84(v21, v22, &v38);
      swift_bridgeObjectRelease(v23);
      v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v24(v15, v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Process location authorization change: %s", (uint8_t *)v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v24(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
    }

    v25 = objc_msgSend((id)objc_opt_self(CLLocationManager), "locationServicesEnabled");
    v26 = (int)v25;
    v27 = Logger.logObject.getter(v25);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v38 = v30;
      *(_DWORD *)v29 = 136315138;
      if (v26)
        v31 = 0x44454C42414E45;
      else
        v31 = 0x44454C4241534944;
      if (v26)
        v32 = 0xE700000000000000;
      else
        v32 = 0xE800000000000000;
      *(_QWORD *)(v29 + 4) = sub_10002BA84(v31, v32, &v38);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "*** Location Authorization Event *** %s", (uint8_t *)v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }

    v33 = *(_QWORD *)(v0 + 48);
    v34 = *(_QWORD *)(v0 + 24);
    sub_100181368(v26);
    v24(v33, v34);
    v35 = *(_QWORD *)(v0 + 144);
    v36 = *(_QWORD *)(v0 + 16);
    v37 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 152) = v37;
    *v37 = v0;
    v37[1] = sub_1001828E8;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 56), v36, v35, *(_QWORD *)(v0 + 88));
  }
}

uint64_t sub_100182CD0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100182CFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100265EC4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000087DC;
  return sub_1001824B0(a1, v4, v5, v6);
}

uint64_t sub_100182D74()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B2A0);
  sub_100037A9C(v0, (uint64_t)qword_10027B2A0);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0x6E6F697461636F4CLL, 0xEF726F74696E6F4DLL);
}

uint64_t sub_100182DF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100182E68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1001810A4(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_100182EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_100037A5C(&qword_1002634C0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100182F70(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_1002634C0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc(dword_100265ED4);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10003BF7C;
  return sub_100181230(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_100183030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001830AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_100265EEC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003BF7C;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_100181200, v3, 0);
}

_QWORD *sub_100183128(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1000312EC(0, v1, 0);
    v3 = type metadata accessor for UUID(0);
    v4 = *(_QWORD *)(v3 - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v3 = UUID.uuidString.getter(v3);
      v7 = v3;
      v9 = v8;
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        v3 = sub_1000312EC(v10 > 1, v11 + 1, 1);
      _swiftEmptyArrayStorage[2] = v11 + 1;
      v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v7;
      v12[5] = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100183224(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v2 + 40) = v1;
  *(_BYTE *)(v2 + 136) = a1;
  v3 = sub_100037A5C(&qword_1002660D8);
  *(_QWORD *)(v2 + 48) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Device(0);
  *(_QWORD *)(v2 + 56) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 64) = v5;
  *(_QWORD *)(v2 + 72) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v2 + 80) = v6;
  *v6 = v2;
  v6[1] = sub_1001832C0;
  return daemon.getter();
}

uint64_t sub_1001832C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *v1;
  *(_QWORD *)(*v1 + 88) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 96) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalMessagingService();
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100261EC8, 255, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC17C);
  *v6 = v5;
  v6[1] = sub_1001833B0;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001833B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 96);
  v4[13] = a1;
  v4[14] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[5];
    v7 = sub_1001837E8;
  }
  else
  {
    swift_release(v4[11]);
    v7 = sub_10018342C;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10018342C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 120) = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 128);
  v1 = sub_100037A5C(&qword_100261EC0);
  v2 = sub_10001013C(&qword_1002660E0, &qword_100261EC0, (uint64_t)&protocol conformance descriptor for LocalMessaging<A>);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_1001834B4, v3, v4);
}

uint64_t sub_1001834B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  dispatch thunk of LocalMessaging.connectedDevice.getter();
  return swift_task_switch(sub_1001834F4, v1, 0);
}

uint64_t sub_1001834F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_1000087A0(v3, &qword_1002660D8);
    if (qword_10025FB30 != -1)
      swift_once(&qword_10025FB30, sub_100183B18);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100037A9C(v4, (uint64_t)qword_10027B2B8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 104);
    if (v8)
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v15 = v11;
      *(_DWORD *)v10 = 136446210;
      *(_QWORD *)(v0 + 32) = sub_10002BA84(0xD000000000000027, 0x8000000100201470, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v10 + 4, v10 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s no connected device!", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    swift_release(v9);

    v12 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 72), v3, v1);
    v14 = (_QWORD *)swift_task_alloc(dword_1002660EC);
    *(_QWORD *)(v0 + 128) = v14;
    *v14 = v0;
    v14[1] = sub_10018372C;
    return sub_1001868E0(*(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 136));
  }
}

uint64_t sub_10018372C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_100183784, v1, 0);
}

uint64_t sub_100183784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 104));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001837E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  swift_release(*(_QWORD *)(v0 + 88));
  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = *(_QWORD *)(v0 + 112);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B2B8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 112);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v15 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000027, 0x8000000100201470, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error: %{public}@", (uint8_t *)v8, 0x16u);
    v12 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 112));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v13 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100183A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100183A68(a1, sub_10016B4DC, (uint64_t (*)(_QWORD))&type metadata accessor for Handle, (void (*)(void))sub_10018BDF4, a2);
}

uint64_t sub_100183A68@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  result = a2();
  if ((v11 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v10)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v12 = a3(0);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v14 = a5;
    v15 = 1;
  }
  else
  {
    a4();
    v12 = a3(0);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v14 = a5;
    v15 = 0;
  }
  return v13(v14, v15, 1, v12);
}

uint64_t sub_100183B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027B2B8);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027B2B8);
  if (qword_10025FB58 != -1)
    swift_once(&qword_10025FB58, sub_10018AED8);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027B2E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100183BA8()
{
  uint64_t v0;

  v0 = type metadata accessor for PrefixedDefaults(0);
  sub_100043F10(v0, qword_100265EF8);
  sub_100037A9C(v0, (uint64_t)qword_100265EF8);
  return PrefixedDefaults.init(prefix:)(0xD00000000000001DLL, 0x80000001001F9E00);
}

uint64_t sub_100183C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for PrefixedDefaults(0);
  sub_100043F10(v0, qword_10027B2D0);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027B2D0);
  if (qword_10025FB38 != -1)
    swift_once(&qword_10025FB38, sub_100183BA8);
  v2 = sub_100037A9C(v0, (uint64_t)qword_100265EF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100183C98(uint64_t a1)
{
  return sub_100183CE0(a1, qword_100265F10, 0xD00000000000001CLL, 0x80000001002014D0);
}

uint64_t sub_100183CBC(uint64_t a1)
{
  return sub_100183CE0(a1, qword_100265F28, 0xD000000000000023, 0x8000000100201510);
}

uint64_t sub_100183CE0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v7 = type metadata accessor for PrefixedDefaults(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_100266148);
  sub_100043F10(v11, a2);
  sub_100037A9C(v11, (uint64_t)a2);
  if (qword_10025FB40 != -1)
    swift_once(&qword_10025FB40, sub_100183C08);
  v12 = sub_100037A9C(v7, (uint64_t)qword_10027B2D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  v13 = sub_100037A5C(&qword_1002625F8);
  v14 = sub_10018E4A0();
  return ManagedDefault.init(prefixedDefaults:key:)(v10, a3, a4, v13, v14);
}

uint64_t sub_100183DFC(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v7;
  _QWORD v8[2];

  if (!a1)
    return 0x6E776F6E6B6E752ELL;
  strcpy((char *)v8, ".underlying(");
  BYTE5(v8[1]) = 0;
  HIWORD(v8[1]) = -5120;
  v7 = a1;
  swift_errorRetain(a1);
  swift_errorRetain(a1);
  v2 = sub_100037A5C(&qword_100265260);
  v3._countAndFlagsBits = String.init<A>(describing:)(&v7, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_errorRelease(a1);
  return v8[0];
}

uint64_t sub_100183EBC()
{
  uint64_t *v0;

  return sub_100183DFC(*v0);
}

uint64_t sub_100183EC4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1[99] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[100] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[101] = v3;
  v1[102] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v1[103] = v4;
  *v4 = v1;
  v4[1] = sub_100183F38;
  return daemon.getter();
}

uint64_t sub_100183F38(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 824);
  v5 = *v1;
  *(_QWORD *)(*v1 + 832) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 840) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalMessagingService();
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100261EC8, 255, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC17C);
  *v6 = v5;
  v6[1] = sub_100184028;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100184028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 840);
  v3[106] = a1;
  v3[107] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[99];
    v6 = sub_100184298;
  }
  else
  {
    v7 = v3[99];
    swift_release(v3[104]);
    v6 = sub_1001840A8;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001840A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[99];
  v0[90] = type metadata accessor for NITokenService_LocalMessaging();
  v0[91] = sub_100018A7C(&qword_100263498, v2, (uint64_t (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging, (uint64_t)&unk_1001F9E40);
  v0[87] = v1;
  v3 = dword_100267B64;
  swift_retain(v1);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[108] = v4;
  *v4 = v0;
  v4[1] = sub_100184144;
  return sub_1001E94C8(v0[102], (uint64_t)(v0 + 87));
}

uint64_t sub_100184144()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 864);
  *(_QWORD *)(*(_QWORD *)v1 + 872) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[99];
    v5 = sub_1001842D8;
  }
  else
  {
    v6 = v2 + 87;
    v7 = v2[102];
    v8 = v2[101];
    v9 = v2[100];
    v10 = v2[99];
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    sub_10002BB90(v6);
    v5 = sub_1001841D0;
    v4 = v10;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001841D0()
{
  uint64_t v0;
  uint64_t v1;

  swift_asyncLet_begin(v0 + 16, 0, (char *)&type metadata for () + 8, &unk_100266210, *(_QWORD *)(v0 + 792));
  return swift_asyncLet_get(v0 + 16, v1, sub_100184230, v0 + 656);
}

uint64_t sub_100184230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 16, a2, sub_100184244, v2 + 736);
}

uint64_t sub_100184244()
{
  uint64_t v0;

  return swift_task_switch(sub_100184258, *(_QWORD *)(v0 + 792), 0);
}

uint64_t sub_100184258()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 816);
  swift_release(*(_QWORD *)(v0 + 848));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100184298()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 816);
  swift_release(*(_QWORD *)(v0 + 832));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001842D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  sub_10002BB90(v0 + 87);
  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = v0[109];
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B2B8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[109];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    v0[97] = v7;
    swift_errorRetain(v7);
    v10 = sub_100037A5C(&qword_100265260);
    v11 = String.init<A>(describing:)(v0 + 97, v10);
    v13 = v12;
    v0[98] = sub_10002BA84(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 98, v0 + 99, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "LocalMessagingService subscription up error: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(v0[109]);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  swift_asyncLet_begin(v0 + 2, 0, (char *)&type metadata for () + 8, &unk_100266210, v0[99]);
  return swift_asyncLet_get(v0 + 2, v14, sub_100184230, v0 + 82);
}

uint64_t sub_100184508()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10026621C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10005D184;
  return sub_100184550();
}

uint64_t sub_100184550()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1[3] = v0;
  v2 = type metadata accessor for DarwinNotification(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[6] = swift_task_alloc(v4);
  v1[7] = swift_task_alloc(v4);
  v5 = sub_100037A5C(&qword_100261618);
  v1[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_100261620);
  v1[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[10] = v7;
  v1[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100261628);
  v1[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[13] = v9;
  v1[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10018463C, v0, 0);
}

uint64_t sub_10018463C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B2B8);
  v0[15] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136315138;
    v0[2] = sub_10002BA84(0xD000000000000026, 0x8000000100201670, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Registering listener for Darwin notification: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[16] = v7;
  *v7 = v0;
  v7[1] = sub_1001847D8;
  return daemon.getter();
}

uint64_t sub_1001847D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v3);
  v4 = type metadata accessor for Daemon(0);
  v5 = sub_100018A7C((unint64_t *)&qword_100261630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_100184870, v6, v7);
}

uint64_t sub_100184870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 144) = Daemon.darwinNotificationHandler.getter();
  swift_release(v1);
  v2 = type metadata accessor for DarwinNotificationHandler(0);
  v3 = sub_100018A7C(&qword_100261638, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DarwinNotificationHandler, (uint64_t)&protocol conformance descriptor for DarwinNotificationHandler);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_100184908, v4, v5);
}

uint64_t sub_100184908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 24);
  dispatch thunk of DarwinNotificationHandler.asyncStream(name:)(0xD000000000000026, 0x8000000100201670);
  swift_release(v1);
  return swift_task_switch(sub_10018496C, v2, 0);
}

uint64_t sub_10018496C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[9];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = sub_100018A7C(qword_1002660A0, v4, (uint64_t (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging, (uint64_t)&unk_1001F9EE4);
  v0[19] = v5;
  v6 = v0[3];
  v7 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[20] = v7;
  *v7 = v0;
  v7[1] = sub_100184A20;
  return AsyncStream.Iterator.next(isolation:)(v0[8], v6, v5, v0[12]);
}

uint64_t sub_100184A20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  return swift_task_switch(sub_100184A78, v1, 0);
}

uint64_t sub_100184A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 48);
    v6 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(v4, *(_QWORD *)(v0 + 96));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v1);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 48);
    v9 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9, v1, v2);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v9, v2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v16 = *(_QWORD *)(v0 + 40);
    v15 = *(_QWORD *)(v0 + 48);
    v17 = *(_QWORD *)(v0 + 32);
    if (v14)
    {
      v18 = swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v34 = v19;
      *(_DWORD *)v18 = 136315138;
      v20 = sub_100018A7C(&qword_100261658, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DarwinNotification, (uint64_t)&protocol conformance descriptor for DarwinNotification);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      v23 = v22;
      *(_QWORD *)(v18 + 4) = sub_10002BA84(v21, v22, &v34);
      swift_bridgeObjectRelease(v23);
      v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v24(v15, v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Process NanoRegistryDeviceDidUnpair event: %s", (uint8_t *)v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v24(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
    }

    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Clearing paired devices.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }
    v29 = *(_QWORD *)(v0 + 56);
    v30 = *(_QWORD *)(v0 + 32);

    sub_10018CA0C();
    v24(v29, v30);
    v31 = *(_QWORD *)(v0 + 152);
    v32 = *(_QWORD *)(v0 + 24);
    v33 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 160) = v33;
    *v33 = v0;
    v33[1] = sub_100184A20;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 64), v32, v31, *(_QWORD *)(v0 + 96));
  }
}

uint64_t sub_100184D60()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for NITokenService_LocalMessaging()
{
  return objc_opt_self(_TtC13findmylocated29NITokenService_LocalMessaging);
}

unint64_t sub_100184DB0()
{
  unint64_t result;

  result = qword_100266050;
  if (!qword_100266050)
  {
    result = swift_getWitnessTable(&unk_1001F4B84, &type metadata for LocalMessageType);
    atomic_store(result, (unint64_t *)&qword_100266050);
  }
  return result;
}

uint64_t sub_100184DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.startup()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for NITokenService_LocalMessaging();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_100184E54()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100265F6C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000087DC;
  return sub_100183EC4();
}

uint64_t sub_100184E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for NITokenService_LocalMessaging();
  v2 = sub_100018A7C(&qword_100260F68, v1, (uint64_t (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging, (uint64_t)&unk_1001F9E84);
  return ActorServiceProtocol.description.getter(v0, v2);
}

uint64_t sub_100184EE4(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(&qword_100266098, a2, (uint64_t (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging, (uint64_t)&unk_1001F9E5C);
}

uint64_t sub_100184F10(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(qword_1002660A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging, (uint64_t)&unk_1001F9EE4);
}

uint64_t sub_100184F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4[7] = a2;
  v4[8] = a3;
  v4[6] = a1;
  v5 = type metadata accessor for Destination(0);
  v4[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v4[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[13] = v8;
  v4[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Account(0);
  v4[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[16] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v11);
  v4[18] = swift_task_alloc(v11);
  return swift_task_switch(sub_100185000, v3, 0);
}

uint64_t sub_100185000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v53;

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 96);
  v43 = *(_QWORD *)(v0 + 112);
  v45 = *(_QWORD *)(v0 + 80);
  v49 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)type = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 56);
  v47 = *(_QWORD *)(v0 + 64);
  v8 = type metadata accessor for Logger(0);
  sub_100037A9C(v8, (uint64_t)qword_10027B2B8);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v42(v2, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v43, v7, v6);
  v9 = (*(uint64_t (**)(os_log_type_t *, uint64_t, uint64_t))(v45 + 16))(*(os_log_type_t **)type, v47, v49);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 144);
  if (v12)
  {
    v14 = *(_QWORD *)(v0 + 136);
    typea = v11;
    v15 = *(_QWORD *)(v0 + 120);
    v40 = *(_QWORD *)(v0 + 112);
    v41 = *(_QWORD *)(v0 + 104);
    v38 = *(_QWORD *)(v0 + 128);
    v39 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 88);
    v48 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 72);
    v16 = swift_slowAlloc(42, -1);
    v50 = swift_slowAlloc(128, -1);
    v53 = v50;
    *(_DWORD *)v16 = 136446978;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD00000000000002CLL, 0x80000001001FD980, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2080;
    v42(v14, v13, v15);
    v17 = String.init<A>(describing:)(v14, v15);
    v19 = v18;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v17, v18, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v13, v15);
    *(_WORD *)(v16 + 22) = 2080;
    v20 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v39, v20);
    v23 = v22;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v21, v22, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v16 + 24, v16 + 32);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v39);
    *(_WORD *)(v16 + 32) = 2080;
    v24 = sub_100018A7C(&qword_100261998, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v44, v24);
    v27 = v26;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v25, v26, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v16 + 34, v16 + 42);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v44);
    _os_log_impl((void *)&_mh_execute_header, v10, typea, "Local IDS %{public}s %s id %s from: %s", (uint8_t *)v16, 0x2Au);
    swift_arrayDestroy(v50, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    v29 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 112);
    v31 = *(_QWORD *)(v0 + 88);
    v30 = *(_QWORD *)(v0 + 96);
    v32 = *(_QWORD *)(v0 + 72);
    v33 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  }

  v34 = *(_QWORD *)(v0 + 136);
  v35 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100185404(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[14] = a1;
  v2[15] = v1;
  v3 = type metadata accessor for Destination(0);
  v2[16] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[17] = v4;
  v2[18] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v2[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[21] = v7;
  v2[22] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_1002660D8);
  v2[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Device(0);
  v2[24] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[25] = v10;
  v2[26] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001854FC, v1, 0);
}

uint64_t sub_1001854FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B2B8);
  v0[27] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(32, -1);
    v18 = v6;
    *(_DWORD *)v5 = 141558275;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2081;
    v7 = sub_10018E60C();
    v8 = CustomStringConvertible.typeDescription.getter(&type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1, v7);
    v10 = v9;
    v0[13] = sub_10002BA84(v8, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Extracted CompanionPeopleFindingCapabilityRequestEnvelopeV1: %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v18 = v15;
    *(_DWORD *)v14 = 136446210;
    v0[11] = sub_10002BA84(0xD000000000000039, 0x8000000100201600, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v14 + 4, v14 + 12);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s Watch requested companion finding capability. Sending now.", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }

  v16 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[28] = v16;
  *v16 = v0;
  v16[1] = sub_1001857C8;
  return daemon.getter();
}

uint64_t sub_1001857C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 224);
  v5 = *v1;
  *(_QWORD *)(*v1 + 232) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 240) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalMessagingService();
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100261EC8, 255, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC17C);
  *v6 = v5;
  v6[1] = sub_1001858B8;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1001858B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 240);
  v3[31] = a1;
  v3[32] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[15];
    v6 = sub_100185F5C;
  }
  else
  {
    v7 = v3[15];
    swift_release(v3[29]);
    v6 = sub_100185934;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100185934()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[31];
  v0[33] = Destination.destination.getter();
  v0[34] = v2;
  return swift_task_switch(sub_100185978, v1, 0);
}

uint64_t sub_100185978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 280) = *(_QWORD *)(*(_QWORD *)(v0 + 248) + 128);
  v1 = sub_100037A5C(&qword_100261EC0);
  v2 = sub_10001013C(&qword_1002660E0, &qword_100261EC0, (uint64_t)&protocol conformance descriptor for LocalMessaging<A>);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_100185A00, v3, v4);
}

uint64_t sub_100185A00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[34];
  v2 = v0[15];
  dispatch thunk of LocalMessaging.device(fromID:)(v0[33], v1);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_100185A5C, v2, 0);
}

uint64_t sub_100185A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;

  v2 = *(_QWORD *)(v0 + 192);
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 112);
    sub_1000087A0(v3, &qword_1002660D8);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v13 = *(_QWORD *)(v0 + 136);
    v12 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 128);
    if (v11)
    {
      v41 = *(_QWORD *)(v0 + 248);
      v15 = swift_slowAlloc(22, -1);
      v16 = (void *)swift_slowAlloc(32, -1);
      v42 = v16;
      *(_DWORD *)v15 = 141558275;
      *(_QWORD *)(v0 + 80) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2081;
      v17 = sub_100018A7C(&qword_100261998, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
      v20 = v19;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(v18, v19, (uint64_t *)&v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease(v20);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No IDSDevice for %{private,mask.hash}s!", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
      swift_release(v41);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 248));
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }

    v37 = *(_QWORD *)(v0 + 176);
    v38 = *(_QWORD *)(v0 + 184);
    v40 = *(_QWORD *)(v0 + 144);
    v39 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v38);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 176);
    v22 = *(_QWORD *)(v0 + 152);
    v23 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 208), v3, v2);
    v24 = Device.uniqueIDOverride.getter(v23);
    v26 = v25;
    v27 = String.utf8Data.getter(v24);
    v29 = v28;
    swift_bridgeObjectRelease(v26);
    *(_QWORD *)(v0 + 40) = v27;
    *(_QWORD *)(v0 + 48) = v29;
    v30 = sub_10003EC14();
    DataProtocol.stableUUID.getter(&type metadata for Data, v30);
    sub_100037AB4(v27, v29);
    v42 = sub_10018C708(&qword_10025FB50, (uint64_t)qword_100265F28, (char *)sub_100183CBC);
    sub_1000FF3C8(v21, v22);
    sub_1000087A0(v22, (uint64_t *)&unk_1002675F0);
    v31 = sub_1001677B4((uint64_t)v42);
    swift_bridgeObjectRelease(v42);
    v32 = sub_100183128((uint64_t)v31);
    swift_release(v31);
    if (qword_10025FB50 != -1)
      swift_once(&qword_10025FB50, sub_100183CBC);
    v33 = sub_100037A5C(&qword_100266148);
    v34 = sub_100037A9C(v33, (uint64_t)qword_100265F28);
    *(_QWORD *)(v0 + 72) = v32;
    swift_beginAccess(v34, v0 + 16, 33, 0);
    ManagedDefault.wrappedValue.setter(v0 + 72, v33);
    swift_endAccess(v0 + 16);
    v35 = (_QWORD *)swift_task_alloc(dword_1002661CC);
    *(_QWORD *)(v0 + 288) = v35;
    *v35 = v0;
    v35[1] = sub_100185E60;
    return sub_1001893F8(*(_QWORD *)(v0 + 208));
  }
}

uint64_t sub_100185E60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 288));
  return swift_task_switch(sub_100185EB8, v1, 0);
}

uint64_t sub_100185EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 248));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100185F5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100185FD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_100185FEC, v1, 0);
}

uint64_t sub_100185FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B2B8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD00000000000001ALL, 0x8000000100201590, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v10 = type metadata accessor for Account(0);
    v11 = sub_100018A7C(&qword_1002619B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Account, (uint64_t)&protocol conformance descriptor for Account);
    swift_bridgeObjectRetain(v7);
    v13 = Set.description.getter(v12, v10, v11);
    v15 = v14;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v13, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Local IDS %{public}s. Accounts: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 24), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100186230(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_100186248, v1, 0);
}

uint64_t sub_100186248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B2B8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    v8 = swift_slowAlloc(32, -1);
    v16 = swift_slowAlloc(64, -1);
    v17 = v16;
    *(_DWORD *)v8 = 136446722;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000018, 0x8000000100201570, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2048;
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2080;
    v9 = type metadata accessor for Device(0);
    v10 = sub_100018A7C(&qword_1002619A8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    swift_bridgeObjectRetain(v7);
    v12 = Set.description.getter(v11, v9, v10);
    v14 = v13;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v12, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Local IDS %{public}s. Devices[%ld]: %s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 24), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001864AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_100037A5C(&qword_1002660D8);
  v2[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Device(0);
  v2[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[8] = v5;
  v2[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100186530, v1, 0);
}

uint64_t sub_100186530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027B2B8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v20 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 32);
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v21 = v8;
    *(_DWORD *)v7 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000021, 0x8000000100201540, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2080;
    v9 = sub_100018A7C(&qword_1002619A8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    swift_bridgeObjectRetain(v6);
    v11 = Set.description.getter(v10, v20, v9);
    v13 = v12;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v11, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Local IDS %{public}s. Connected devices: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 32), 2);
  }

  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 48);
  sub_100183A68(*(_QWORD *)(v0 + 32), (uint64_t (*)(void))sub_100035A18, (uint64_t (*)(_QWORD))&type metadata accessor for Device, (void (*)(void))sub_10018BD60, v16);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14) == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 48), &qword_1002660D8);
    v17 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
    v19 = (_QWORD *)swift_task_alloc(dword_1002660EC);
    *(_QWORD *)(v0 + 80) = v19;
    *v19 = v0;
    v19[1] = sub_10018683C;
    return sub_1001868E0(*(_QWORD *)(v0 + 72), 0);
  }
}

uint64_t sub_10018683C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  return swift_task_switch(sub_100186894, v1, 0);
}

uint64_t sub_100186894()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001868E0(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_BYTE *)(v3 + 108) = a2;
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = v2;
  *(_QWORD *)(v3 + 48) = *v2;
  v4 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Device(0);
  *(_QWORD *)(v3 + 64) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 72) = v6;
  v7 = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v3 + 80) = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 88) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 96) = swift_task_alloc(v8);
  return swift_task_switch(sub_100186980, v2, 0);
}

uint64_t sub_100186980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = type metadata accessor for Logger(0);
  sub_100037A9C(v5, (uint64_t)qword_10027B2B8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 64);
  if (v10)
  {
    v32 = *(_QWORD *)(v0 + 72);
    v34 = *(unsigned __int8 *)(v0 + 108);
    v13 = swift_slowAlloc(28, -1);
    v37 = swift_slowAlloc(64, -1);
    *(_DWORD *)v13 = 136446722;
    v39 = v37;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000021, 0x80000001002014A0, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2080;
    v14 = sub_100018A7C(&qword_100266108, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v17 = v16;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v15, v16, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v11, v12);
    *(_WORD *)(v13 + 22) = 1024;
    *(_DWORD *)(v0 + 104) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 108, v13 + 24, v13 + 28);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s to: %s. Force? %{BOOL}d", (uint8_t *)v13, 0x1Cu);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64));
  }

  v18 = *(_QWORD *)(v0 + 88);
  v19 = *(_QWORD *)(v0 + 72);
  v20 = *(_QWORD *)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 64);
  v22 = *(_QWORD *)(v0 + 40);
  v35 = *(_QWORD *)(v0 + 48);
  v36 = *(_QWORD *)(v0 + 56);
  v33 = *(_BYTE *)(v0 + 108);
  v23 = *(_QWORD *)(v0 + 32);
  v38 = *(_QWORD *)(v0 + 96);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v6(v18, v23, v21);
  v24 = *(unsigned __int8 *)(v19 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = v25 + v20;
  v27 = ((v26 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_100256E88, v27 + 8, v24 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v28 + v25, v18, v21);
  *(_BYTE *)(v28 + v26) = v33;
  *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + v28 + 8) = v22;
  *(_QWORD *)(v28 + v27) = v35;
  v29 = swift_retain(v22);
  UUID.init()(v29);
  v30 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v36, &unk_1002660F8, v28, &unk_100266100, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v30);
  swift_release(v30);
  swift_task_dealloc(v38);
  swift_task_dealloc(v18);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100186D0C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 40) = a4;
  *(_BYTE *)(v4 + 104) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = type metadata accessor for Device(0);
  *(_QWORD *)(v4 + 48) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 56) = v6;
  v7 = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v4 + 64) = v7;
  *(_QWORD *)(v4 + 72) = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100186D78, 0, 0);
}

uint64_t sub_100186D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B2B8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v23 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000021, 0x80000001002014A0, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s entered queue.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v8 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v10 = *(_QWORD *)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 32);
  v22 = *(_QWORD *)(v0 + 40);
  v21 = *(_BYTE *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v7, *(_QWORD *)(v0 + 24), v9);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = v13 + v8;
  v15 = (v13 + v8) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_100256EB0, v16 + 8, v12 | 7);
  *(_QWORD *)(v0 + 80) = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v17 + v13, v7, v9);
  *(_BYTE *)(v17 + v14) = v21;
  *(_QWORD *)(v15 + v17 + 8) = v11;
  *(_QWORD *)(v17 + v16) = v22;
  v18 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v11);
  v19 = (_QWORD *)swift_task_alloc(v18);
  *(_QWORD *)(v0 + 88) = v19;
  *v19 = v0;
  v19[1] = sub_100186FDC;
  return withTimeout<A>(_:block:)(v19, 0x8155A43676E00000, 6, &unk_100266128, v17, (char *)&type metadata for () + 8);
}

uint64_t sub_100186FDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10018707C;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 80));
    v4 = sub_100187048;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100187048()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018707C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001870B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  *(_BYTE *)(v4 + 537) = a3;
  *(_QWORD *)(v4 + 112) = a2;
  *(_QWORD *)(v4 + 120) = a4;
  v5 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  *(_QWORD *)(v4 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MessagingOptions(0);
  *(_QWORD *)(v4 + 136) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 144) = v7;
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100266130);
  *(_QWORD *)(v4 + 160) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 168) = v9;
  *(_QWORD *)(v4 + 176) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnerTokenEnvelopeV1(0);
  *(_QWORD *)(v4 + 184) = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 200) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 208) = swift_task_alloc(v11);
  v12 = sub_100037A5C(&qword_100260A48);
  *(_QWORD *)(v4 + 216) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnerSharedSecretsRecord(0);
  *(_QWORD *)(v4 + 224) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v4 + 232) = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 240) = swift_task_alloc(v15);
  *(_QWORD *)(v4 + 248) = swift_task_alloc(v15);
  v16 = type metadata accessor for Device(0);
  *(_QWORD *)(v4 + 256) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v4 + 264) = v17;
  *(_QWORD *)(v4 + 272) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 280) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v4 + 288) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 296) = swift_task_alloc(v20);
  *(_QWORD *)(v4 + 304) = swift_task_alloc(v20);
  *(_QWORD *)(v4 + 312) = swift_task_alloc(v20);
  *(_QWORD *)(v4 + 320) = swift_task_alloc(v20);
  *(_QWORD *)(v4 + 328) = swift_task_alloc(v20);
  *(_QWORD *)(v4 + 336) = swift_task_alloc(v20);
  *(_QWORD *)(v4 + 344) = swift_task_alloc(v20);
  *(_QWORD *)(v4 + 352) = swift_task_alloc(v20);
  return swift_task_switch(sub_1001872B0, 0, 0);
}

uint64_t sub_1001872B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t type;
  uint64_t (*v65)(_QWORD, _QWORD, _QWORD);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v1 = Device.uniqueIDOverride.getter();
  v3 = v2;
  v4 = String.utf8Data.getter(v1);
  v6 = v5;
  swift_bridgeObjectRelease(v3);
  *(_QWORD *)(v0 + 16) = v4;
  *(_QWORD *)(v0 + 24) = v6;
  v7 = sub_10003EC14();
  DataProtocol.stableUUID.getter(&type metadata for Data, v7);
  sub_100037AB4(v4, v6);
  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v9 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 352);
  v10 = *(_QWORD *)(v0 + 280);
  v11 = *(_QWORD *)(v0 + 288);
  v12 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 360) = sub_100037A9C(v12, (uint64_t)qword_10027B2B8);
  v13 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v11 + 16);
  *(_QWORD *)(v0 + 368) = v13;
  v65 = v13;
  v14 = v13(v9, v8, v10);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(_QWORD *)(v0 + 344);
  v19 = *(_QWORD *)(v0 + 280);
  if (v17)
  {
    v62 = *(_QWORD *)(v0 + 288);
    v20 = swift_slowAlloc(22, -1);
    v63 = swift_slowAlloc(64, -1);
    v68 = v63;
    *(_DWORD *)v20 = 136446466;
    *(_QWORD *)(v0 + 96) = sub_10002BA84(0xD000000000000021, 0x80000001002014A0, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2082;
    v21 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v19, v21);
    v24 = v23;
    *(_QWORD *)(v0 + 104) = sub_10002BA84(v22, v23, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease(v24);
    v25 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
    v25(v18, v19);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s to device: %{public}s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    v25 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 8);
    v25(v18, v19);
  }

  *(_QWORD *)(v0 + 376) = v25;
  if ((*(_BYTE *)(v0 + 537) & 1) != 0)
  {
    v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
    v27 = *(_QWORD *)(v0 + 352);
    v28 = *(_QWORD *)(v0 + 328);
    v29 = *(_QWORD *)(v0 + 280);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 16))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 256));
    v30 = v26(v28, v27, v29);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter(v31);
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v35 = *(_QWORD *)(v0 + 328);
    v36 = *(_QWORD *)(v0 + 272);
    v37 = *(_QWORD *)(v0 + 280);
    v39 = *(_QWORD *)(v0 + 256);
    v38 = *(_QWORD *)(v0 + 264);
    if (v33)
    {
      v40 = swift_slowAlloc(22, -1);
      v66 = swift_slowAlloc(64, -1);
      v68 = v66;
      *(_DWORD *)v40 = 136315394;
      v41 = sub_100018A7C(&qword_100266108, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
      v42 = dispatch thunk of CustomStringConvertible.description.getter(v39, v41);
      type = v32;
      v44 = v43;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(v42, v43, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease(v44);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v39);
      *(_WORD *)(v40 + 12) = 2082;
      v45 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v37, v45);
      v48 = v47;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(v46, v47, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v40 + 14, v40 + 22);
      swift_bridgeObjectRelease(v48);
      v34(v35, v37);
      _os_log_impl((void *)&_mh_execute_header, v31, type, "Connected device: %s ID: %{public}s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v38 + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
      v34(v35, v37);
    }

    v60 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 392) = v60;
    *v60 = v0;
    v60[1] = sub_100187EC0;
    return daemon.getter();
  }
  else
  {
    v49 = v65(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 280));
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter(v50);
    v52 = os_log_type_enabled(v50, v51);
    v53 = *(_QWORD *)(v0 + 336);
    v54 = *(_QWORD *)(v0 + 280);
    if (v52)
    {
      v55 = swift_slowAlloc(22, -1);
      v67 = swift_slowAlloc(64, -1);
      v68 = v67;
      *(_DWORD *)v55 = 136446466;
      *(_QWORD *)(v0 + 80) = sub_10002BA84(0xD000000000000021, 0x80000001002014A0, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v55 + 4, v55 + 12);
      *(_WORD *)(v55 + 12) = 2082;
      v56 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v54, v56);
      v59 = v58;
      *(_QWORD *)(v0 + 88) = sub_10002BA84(v57, v58, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease(v59);
      v25(v53, v54);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "%{public}s Checking if we should send to %{public}s", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v55, -1, -1);
    }
    else
    {
      v25(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 280));
    }

    return swift_task_switch(sub_10018795C, *(_QWORD *)(v0 + 120), 0);
  }
}

uint64_t sub_10018795C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 384) = sub_10018C708(&qword_10025FB48, (uint64_t)qword_100265F10, (char *)sub_100183C98);
  return swift_task_switch(sub_1001879B0, 0, 0);
}

uint64_t sub_1001879B0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t type[8];
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = sub_10000E054(*(_QWORD *)(v0 + 352), v1);
  swift_bridgeObjectRelease(v1);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
  v4 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 280);
  if ((v2 & 1) != 0)
  {
    v6 = v3(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 280));
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v11 = *(_QWORD *)(v0 + 352);
    v12 = *(_QWORD *)(v0 + 296);
    v13 = *(_QWORD *)(v0 + 280);
    if (v9)
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = v11;
      v15 = swift_slowAlloc(32, -1);
      v64 = v15;
      *(_DWORD *)v14 = 136446210;
      v16 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
      v19 = v18;
      *(_QWORD *)(v0 + 72) = sub_10002BA84(v17, v18, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v19);
      v10(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Already sent owner token to %{public}s.", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      v20 = v60;
    }
    else
    {

      v10(v12, v13);
      v20 = v11;
    }
    v10(v20, v13);
    v41 = *(_QWORD *)(v0 + 344);
    v43 = *(_QWORD *)(v0 + 328);
    v42 = *(_QWORD *)(v0 + 336);
    v45 = *(_QWORD *)(v0 + 312);
    v44 = *(_QWORD *)(v0 + 320);
    v46 = *(_QWORD *)(v0 + 296);
    v47 = *(_QWORD *)(v0 + 304);
    v48 = *(_QWORD *)(v0 + 272);
    v49 = *(_QWORD *)(v0 + 248);
    v52 = *(_QWORD *)(v0 + 240);
    v53 = *(_QWORD *)(v0 + 216);
    v55 = *(_QWORD *)(v0 + 208);
    v56 = *(_QWORD *)(v0 + 200);
    *(_QWORD *)type = *(_QWORD *)(v0 + 192);
    v59 = *(_QWORD *)(v0 + 176);
    v62 = *(_QWORD *)(v0 + 152);
    v63 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(*(_QWORD *)type);
    swift_task_dealloc(v59);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 328);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 16))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 256));
    v22 = v3(v21, v4, v5);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    v25 = os_log_type_enabled(v23, v24);
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v27 = *(_QWORD *)(v0 + 328);
    v28 = *(_QWORD *)(v0 + 272);
    v29 = *(_QWORD *)(v0 + 280);
    v30 = *(_QWORD *)(v0 + 256);
    v31 = *(_QWORD *)(v0 + 264);
    if (v25)
    {
      v58 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
      v32 = swift_slowAlloc(22, -1);
      v61 = swift_slowAlloc(64, -1);
      v64 = v61;
      *(_DWORD *)v32 = 136315394;
      v33 = sub_100018A7C(&qword_100266108, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
      v54 = v29;
      v36 = v35;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(v34, v35, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v36);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v28, v30);
      *(_WORD *)(v32 + 12) = 2082;
      v37 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v54, v37);
      v40 = v39;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(v38, v39, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease(v40);
      v58(v27, v54);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Connected device: %s ID: %{public}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v31 + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
      v26(v27, v29);
    }

    v51 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 392) = v51;
    *v51 = v0;
    v51[1] = sub_100187EC0;
    return daemon.getter();
  }
}

uint64_t sub_100187EC0(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 392);
  v5 = *v1;
  *(_QWORD *)(*v1 + 400) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[51] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[52] = v7;
  v8 = type metadata accessor for NITokenService(0);
  v3[53] = v8;
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[54] = v9;
  v10 = sub_100018A7C(&qword_100261000, 255, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA3E8);
  *v6 = v5;
  v6[1] = sub_100187FC4;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100187FC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[51];
  v5 = *v2;
  v5[55] = a1;
  v5[56] = v1;
  swift_task_dealloc(v4);
  swift_release(v5[50]);
  if (v1)
    return swift_task_switch(sub_100189128, 0, 0);
  v7 = (uint64_t **)swift_task_alloc(dword_100263CEC);
  v5[57] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_100188070;
  return sub_10010F758(v5[27]);
}

uint64_t sub_100188070()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 456));
  return swift_task_switch(sub_1001880C4, 0, 0);
}

uint64_t sub_1001880C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106[2];

  v1 = *(_QWORD *)(v0 + 216);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 232) + 48))(v1, 1, *(_QWORD *)(v0 + 224)) == 1)
  {
    v2 = sub_1000087A0(v1, &qword_100260A48);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 440);
    v7 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v8 = *(_QWORD *)(v0 + 352);
    v9 = *(_QWORD *)(v0 + 280);
    if (v5)
    {
      v104 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v106[0] = v11;
      *(_DWORD *)v10 = 136446210;
      *(_QWORD *)(v0 + 32) = sub_10002BA84(0xD000000000000021, 0x80000001002014A0, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v10 + 4, v10 + 12);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s No owner token record!", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
      swift_release(v6);

      v104(v8, v9);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 440));

      v7(v8, v9);
    }
    v29 = *(_QWORD *)(v0 + 344);
    v31 = *(_QWORD *)(v0 + 328);
    v30 = *(_QWORD *)(v0 + 336);
    v33 = *(_QWORD *)(v0 + 312);
    v32 = *(_QWORD *)(v0 + 320);
    v34 = *(_QWORD *)(v0 + 296);
    v35 = *(_QWORD *)(v0 + 304);
    v36 = *(_QWORD *)(v0 + 272);
    v37 = *(_QWORD *)(v0 + 248);
    v89 = *(_QWORD *)(v0 + 240);
    v91 = *(_QWORD *)(v0 + 216);
    v93 = *(_QWORD *)(v0 + 208);
    v95 = *(_QWORD *)(v0 + 200);
    v97 = *(_QWORD *)(v0 + 192);
    v99 = *(_QWORD *)(v0 + 176);
    v101 = *(_QWORD *)(v0 + 152);
    v105 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v105);
    v38 = *(uint64_t (**)(void))(v0 + 8);
    return v38();
  }
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
  v13 = *(_QWORD *)(v0 + 352);
  v14 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 280);
  sub_1000321F4(v1, *(_QWORD *)(v0 + 248), type metadata accessor for OwnerSharedSecretsRecord);
  v16 = v12(v14, v13, v15);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  v20 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v21 = *(_QWORD *)(v0 + 320);
  v22 = *(_QWORD *)(v0 + 280);
  if (v19)
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v106[0] = v24;
    *(_DWORD *)v23 = 136446210;
    v25 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v22, v25);
    v28 = v27;
    *(_QWORD *)(v0 + 48) = sub_10002BA84(v26, v27, v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease(v28);
    v20(v21, v22);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Sending owner shared secret to local device %{public}s over IDS.", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    v20(v21, v22);
  }

  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
  v40 = *(_QWORD *)(v0 + 280);
  v41 = *(_QWORD *)(v0 + 240);
  v42 = *(int **)(v0 + 224);
  v44 = *(_QWORD *)(v0 + 200);
  v43 = *(_QWORD *)(v0 + 208);
  v45 = *(int **)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 192);
  v102 = *(_QWORD *)(v0 + 448);
  sub_100025C70(*(_QWORD *)(v0 + 248), v41, type metadata accessor for OwnerSharedSecretsRecord);
  v39(v44, v41, v40);
  *(_BYTE *)(v44 + v45[5]) = *(_BYTE *)(v41 + v42[5]);
  v47 = v41 + v42[7];
  v48 = v44 + v45[6];
  v49 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v48, v47, v49);
  v50 = (uint64_t *)(v41 + v42[6]);
  v51 = *v50;
  v52 = v50[1];
  sub_10001A484(*v50, v52);
  sub_100024990(v41, type metadata accessor for OwnerSharedSecretsRecord);
  v53 = (uint64_t *)(v44 + v45[7]);
  *v53 = v51;
  v53[1] = v52;
  sub_1000321F4(v44, v43, type metadata accessor for OwnerTokenEnvelopeV1);
  *(_BYTE *)(v0 + 536) = 0;
  sub_100025C70(v43, v46, type metadata accessor for OwnerTokenEnvelopeV1);
  v54 = sub_100184DB0();
  v55 = sub_100018A7C(&qword_100266138, 255, type metadata accessor for OwnerTokenEnvelopeV1, (uint64_t)&unk_1001FB120);
  v56 = sub_100018A7C(&qword_100266140, 255, type metadata accessor for OwnerTokenEnvelopeV1, (uint64_t)&unk_1001FB0F8);
  Message.init<A>(type:version:payload:)(v0 + 536, 1, v46, &type metadata for LocalMessageType, v45, v54, v55, v56);
  if (v102)
  {
    v57 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v58 = *(_QWORD *)(v0 + 352);
    v59 = *(_QWORD *)(v0 + 280);
    v60 = *(_QWORD *)(v0 + 248);
    v61 = *(_QWORD *)(v0 + 208);
    swift_release(*(_QWORD *)(v0 + 440));
    sub_100024990(v61, type metadata accessor for OwnerTokenEnvelopeV1);
    sub_100024990(v60, type metadata accessor for OwnerSharedSecretsRecord);
    v57(v58, v59);
    v62 = *(_QWORD *)(v0 + 344);
    v64 = *(_QWORD *)(v0 + 328);
    v63 = *(_QWORD *)(v0 + 336);
    v65 = *(_QWORD *)(v0 + 312);
    v66 = *(_QWORD *)(v0 + 320);
    v68 = *(_QWORD *)(v0 + 296);
    v67 = *(_QWORD *)(v0 + 304);
    v69 = *(_QWORD *)(v0 + 272);
    v70 = *(_QWORD *)(v0 + 248);
    v88 = *(_QWORD *)(v0 + 240);
    v90 = *(_QWORD *)(v0 + 216);
    v92 = *(_QWORD *)(v0 + 208);
    v94 = *(_QWORD *)(v0 + 200);
    v96 = *(_QWORD *)(v0 + 192);
    v98 = *(_QWORD *)(v0 + 176);
    v100 = *(_QWORD *)(v0 + 152);
    v103 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v100);
    swift_task_dealloc(v103);
    v38 = *(uint64_t (**)(void))(v0 + 8);
    return v38();
  }
  v72 = *(_QWORD *)(v0 + 280);
  v73 = *(_QWORD *)(v0 + 288);
  v74 = *(_QWORD *)(v0 + 128);
  v75 = sub_100037A5C(&qword_100261990);
  v76 = type metadata accessor for Destination(0);
  v77 = swift_allocObject(v75, ((*(unsigned __int8 *)(*(_QWORD *)(v76 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v76 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v76 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v76 - 8) + 80) | 7);
  *(_OWORD *)(v77 + 16) = xmmword_1001F35F0;
  Device.destination.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v74, 1, 1, v72);
  v78 = sub_100037A5C(&qword_100261B30);
  v79 = type metadata accessor for MessagingCapability(0);
  v80 = *(_QWORD *)(v79 - 8);
  v81 = *(unsigned __int8 *)(v80 + 80);
  v82 = (v81 + 32) & ~v81;
  v83 = swift_allocObject(v78, v82 + *(_QWORD *)(v80 + 72), v81 | 7);
  *(_OWORD *)(v83 + 16) = xmmword_1001F35F0;
  v84 = v83 + v82;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v80 + 104))(v84, enum case for MessagingCapability.supportsPeopleFindingV1(_:), v79);
  v85 = sub_10018C498(v83);
  swift_setDeallocating(v83);
  swift_arrayDestroy(v84, 1, v79);
  swift_deallocClassInstance(v83, 32, 7);
  v86 = sub_10018C36C((uint64_t)_swiftEmptyArrayStorage);
  MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)(v77, 0, v74, 0, 1, 0, v85, v86, 0, 0);
  v87 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 464) = v87;
  *v87 = v0;
  v87[1] = sub_1001888F4;
  return daemon.getter();
}

uint64_t sub_1001888F4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 464);
  v5 = *v1;
  *(_QWORD *)(*v1 + 472) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[60] = v6;
  v7 = type metadata accessor for LocalMessagingService();
  v8 = sub_100018A7C(&qword_100261EC8, 255, (uint64_t (*)(uint64_t))type metadata accessor for LocalMessagingService, (uint64_t)&unk_1001FC17C);
  *v6 = v5;
  v6[1] = sub_1001889A4;
  return ActorServiceDaemon.getService<A>()(v3[52], v7, v3[54], v8);
}

uint64_t sub_1001889A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 480);
  v4[61] = a1;
  v4[62] = v1;
  swift_task_dealloc(v5);
  swift_release(v4[59]);
  if (v1)
  {
    v6 = sub_10018925C;
    v7 = 0;
  }
  else
  {
    v6 = sub_100188A20;
    v7 = a1;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100188A20()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to LocalMessaging.send(message:messageOptions:)
                                  + 1));
  v0[63] = v1;
  *v1 = v0;
  v1[1] = sub_100188A80;
  return LocalMessaging.send(message:messageOptions:)(v0[39], v0[22], v0[19]);
}

uint64_t sub_100188A80()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 504);
  *(_QWORD *)(*v1 + 512) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100188AF4;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 376))(*(_QWORD *)(v2 + 312), *(_QWORD *)(v2 + 280));
    v4 = sub_100188CA0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100188AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 488);
  v28 = *(_QWORD *)(v0 + 352);
  v30 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v26 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 440));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  sub_100024990(v3, type metadata accessor for OwnerTokenEnvelopeV1);
  sub_100024990(v2, type metadata accessor for OwnerSharedSecretsRecord);
  v30(v28, v26);
  v10 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 304);
  v17 = *(_QWORD *)(v0 + 272);
  v18 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 240);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 200);
  v24 = *(_QWORD *)(v0 + 192);
  v25 = *(_QWORD *)(v0 + 176);
  v27 = *(_QWORD *)(v0 + 152);
  v29 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100188CA0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 368))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 280));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v4 = *(_QWORD *)(v0 + 304);
    v5 = *(_QWORD *)(v0 + 280);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    v13(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully sent owner shared secret over local IDS to device: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 280));
  }

  return swift_task_switch(sub_100188E54, *(_QWORD *)(v0 + 120), 0);
}

uint64_t sub_100188E54()
{
  uint64_t v0;

  sub_10018E7E8(*(_QWORD *)(v0 + 352), &qword_10025FB48, (uint64_t)qword_100265F10, (char *)sub_100183C98);
  return swift_task_switch(sub_100188EA8, 0, 0);
}

uint64_t sub_100188EA8()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;

  v1 = sub_1000DE8C4((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 520) = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_100264B54);
  *(_QWORD *)(v0 + 528) = v2;
  *v2 = v0;
  v2[1] = sub_100188F24;
  return sub_100140EB8(0xD00000000000003DLL, 0x8000000100200160, 0, v1);
}

uint64_t sub_100188F24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 520);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 528));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_100188F84, 0, 0);
}

uint64_t sub_100188F84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 488);
  v27 = *(_QWORD *)(v0 + 352);
  v29 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v25 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 440));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  sub_100024990(v3, type metadata accessor for OwnerTokenEnvelopeV1);
  sub_100024990(v2, type metadata accessor for OwnerSharedSecretsRecord);
  v29(v27, v25);
  v10 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 312);
  v13 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 304);
  v17 = *(_QWORD *)(v0 + 272);
  v18 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 240);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 200);
  v24 = *(_QWORD *)(v0 + 192);
  v26 = *(_QWORD *)(v0 + 176);
  v28 = *(_QWORD *)(v0 + 152);
  v30 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100189128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  (*(void (**)(_QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 280));
  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 216);
  v13 = *(_QWORD *)(v0 + 208);
  v14 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018925C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);

  v27 = *(_QWORD *)(v0 + 352);
  v29 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 440));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100024990(v3, type metadata accessor for OwnerTokenEnvelopeV1);
  sub_100024990(v2, type metadata accessor for OwnerSharedSecretsRecord);
  v29(v27, v1);
  v10 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 304);
  v17 = *(_QWORD *)(v0 + 272);
  v18 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 240);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 200);
  v24 = *(_QWORD *)(v0 + 192);
  v25 = *(_QWORD *)(v0 + 176);
  v26 = *(_QWORD *)(v0 + 152);
  v28 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001893F8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[4] = a1;
  v2[5] = v1;
  v2[6] = *v1;
  v3 = type metadata accessor for UUID(0);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Device(0);
  v2[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[10] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v7);
  v2[12] = swift_task_alloc(v7);
  return swift_task_switch(sub_100189494, v1, 0);
}

uint64_t sub_100189494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (qword_10025FB30 != -1)
    swift_once(&qword_10025FB30, sub_100183B18);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = type metadata accessor for Logger(0);
  sub_100037A9C(v5, (uint64_t)qword_10027B2B8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 64);
  if (v10)
  {
    v34 = *(_QWORD *)(v0 + 72);
    v13 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(64, -1);
    v37 = v35;
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000023, 0x8000000100201640, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2080;
    v14 = sub_100018A7C(&qword_100266108, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v17 = v16;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v15, v16, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s to: %s.", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64));
  }

  v18 = *(_QWORD *)(v0 + 88);
  v19 = *(_QWORD *)(v0 + 72);
  v20 = *(_QWORD *)(v0 + 80);
  v22 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 40);
  v33 = *(_QWORD *)(v0 + 48);
  v24 = *(_QWORD *)(v0 + 32);
  v36 = *(_QWORD *)(v0 + 96);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v6(v18, v24, v21);
  v25 = *(unsigned __int8 *)(v19 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = (v20 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject(&unk_100256ED8, v28 + 8, v25 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v29 + v26, v18, v21);
  *(_QWORD *)(v29 + v27) = v23;
  *(_QWORD *)(v29 + v28) = v33;
  v30 = swift_retain(v23);
  UUID.init()(v30);
  v31 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v22, &unk_1002661E0, v29, &unk_1002661E8, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v31);
  swift_release(v31);
  swift_task_dealloc(v36);
  swift_task_dealloc(v18);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001897D0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2[12] = a1;
  v2[13] = a2;
  v3 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v2[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MessagingOptions(0);
  v2[15] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[16] = v5;
  v2[17] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_100266130);
  v2[18] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[19] = v7;
  v2[20] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Device(0);
  v2[21] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[22] = v9;
  v2[23] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v2[24] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[25] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[26] = swift_task_alloc(v12);
  v2[27] = swift_task_alloc(v12);
  v2[28] = swift_task_alloc(v12);
  v2[29] = swift_task_alloc(v12);
  v2[30] = swift_task_alloc(v12);
  v2[31] = swift_task_alloc(v12);
  return swift_task_switch(sub_100189910, 0, 0);
}

uint64_t sub_100189910()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = v0[13];
  v2 = Device.uniqueIDOverride.getter();
  v4 = v3;
  v5 = String.utf8Data.getter(v2);
  v7 = v6;
  swift_bridgeObjectRelease(v4);
  v0[2] = v5;
  v0[3] = v7;
  v8 = sub_10003EC14();
  DataProtocol.stableUUID.getter(&type metadata for Data, v8);
  sub_100037AB4(v5, v7);
  return swift_task_switch(sub_1001899A8, v1, 0);
}

uint64_t sub_1001899A8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 256) = sub_10018C708(&qword_10025FB50, (uint64_t)qword_100265F28, (char *)sub_100183CBC);
  return swift_task_switch(sub_1001899FC, 0, 0);
}

uint64_t sub_1001899FC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  os_log_type_t type;
  uint64_t v99;
  uint64_t (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109[2];

  v1 = v0;
  v2 = v0 + 9;
  v3 = v0 + 10;
  v4 = v0[32];
  v5 = sub_10000E054(v0[31], v4);
  swift_bridgeObjectRelease(v4);
  if ((v5 & 1) != 0)
  {
    if (qword_10025FB30 != -1)
      swift_once(&qword_10025FB30, sub_100183B18);
    v6 = v1[31];
    v8 = v1[25];
    v7 = v1[26];
    v9 = v1[24];
    v10 = type metadata accessor for Logger(0);
    sub_100037A9C(v10, (uint64_t)qword_10027B2B8);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = v1[31];
    v17 = v1[25];
    v16 = v1[26];
    v18 = v1[24];
    if (v14)
    {
      v106 = v1[31];
      v107 = v3;
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v105 = v17;
      v20 = swift_slowAlloc(32, -1);
      v109[0] = v20;
      *(_DWORD *)v19 = 136446210;
      v21 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v18, v21);
      v24 = v23;
      *v2 = sub_10002BA84(v22, v23, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v107, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v24);
      v25 = *(void (**)(uint64_t, uint64_t))(v105 + 8);
      v25(v16, v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Already sent finding capability to %{public}s.", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      v25(v106, v18);
    }
    else
    {

      v55 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v55(v16, v18);
      v55(v15, v18);
    }
    v89 = v1[30];
    v90 = v1[28];
    v91 = v1[29];
    v93 = v1[26];
    v92 = v1[27];
    v94 = v1[23];
    v95 = v1[20];
    v96 = v1[17];
    v97 = v1[14];
    swift_task_dealloc(v1[31]);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    return ((uint64_t (*)(void))v1[1])();
  }
  else
  {
    v101 = v2;
    v108 = v3;
    if (qword_10025FB30 != -1)
      swift_once(&qword_10025FB30, sub_100183B18);
    v26 = v1[12];
    v27 = v1[30];
    v103 = v1[31];
    v104 = v1 + 11;
    v28 = v1[24];
    v29 = v1[25];
    v31 = v1[22];
    v30 = v1[23];
    v32 = v1[21];
    v33 = type metadata accessor for Logger(0);
    v1[33] = sub_100037A9C(v33, (uint64_t)qword_10027B2B8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v30, v26, v32);
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
    v1[34] = v34;
    v35 = v34(v27, v103, v28);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    v38 = os_log_type_enabled(v36, v37);
    v39 = v1[30];
    v40 = v1[24];
    v102 = v1[25];
    v42 = v1[22];
    v41 = v1[23];
    v43 = v1[21];
    if (v38)
    {
      v100 = v34;
      v44 = swift_slowAlloc(22, -1);
      v99 = swift_slowAlloc(64, -1);
      v109[0] = v99;
      *(_DWORD *)v44 = 136315394;
      v45 = sub_100018A7C(&qword_100266108, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v43, v45);
      type = v37;
      v48 = v47;
      *v104 = sub_10002BA84(v46, v47, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v104, v1 + 12, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v48);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
      *(_WORD *)(v44 + 12) = 2082;
      v49 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v40, v49);
      v52 = v51;
      v1[8] = sub_10002BA84(v50, v51, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 8, v101, v44 + 14, v44 + 22);
      swift_bridgeObjectRelease(v52);
      v53 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
      v53(v39, v40);
      _os_log_impl((void *)&_mh_execute_header, v36, type, "Connected device: %s ID: %{public}s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy(v99, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1, -1);
      v54 = v44;
      v34 = v100;
      swift_slowDealloc(v54, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v42 + 8))(v1[23], v1[21]);
      v53 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
      v53(v39, v40);
    }

    v56 = v34(v1[29], v1[31], v1[24]);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.default.getter(v57);
    v59 = os_log_type_enabled(v57, v58);
    v60 = v1[29];
    v61 = v1[24];
    if (v59)
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = swift_slowAlloc(32, -1);
      v109[0] = v63;
      *(_DWORD *)v62 = 136446210;
      v64 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v65 = dispatch thunk of CustomStringConvertible.description.getter(v61, v64);
      v67 = v66;
      *v108 = sub_10002BA84(v65, v66, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v108, v104, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease(v67);
      v53(v60, v61);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Sending finding capability to local device %{public}s over IDS.", v62, 0xCu);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);
    }
    else
    {
      v53(v1[29], v1[24]);
    }

    v68 = sub_1001C30A4();
    *((_BYTE *)v1 + 344) = 2;
    *((_BYTE *)v1 + 345) = v68 & 1;
    v69 = sub_100184DB0();
    v70 = sub_10018E760();
    v71 = sub_10018E7A4();
    Message.init<A>(type:version:payload:)(v1 + 43, 1, (char *)v1 + 345, &type metadata for LocalMessageType, &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1, v69, v70, v71);
    v72 = v1[24];
    v73 = v1[25];
    v74 = v1[14];
    v75 = sub_100037A5C(&qword_100261990);
    v76 = type metadata accessor for Destination(0);
    v77 = swift_allocObject(v75, ((*(unsigned __int8 *)(*(_QWORD *)(v76 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v76 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v76 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v76 - 8) + 80) | 7);
    *(_OWORD *)(v77 + 16) = xmmword_1001F35F0;
    Device.destination.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v74, 1, 1, v72);
    v78 = sub_100037A5C(&qword_100261B30);
    v79 = type metadata accessor for MessagingCapability(0);
    v80 = *(_QWORD *)(v79 - 8);
    v81 = *(unsigned __int8 *)(v80 + 80);
    v82 = (v81 + 32) & ~v81;
    v83 = swift_allocObject(v78, v82 + *(_QWORD *)(v80 + 72), v81 | 7);
    *(_OWORD *)(v83 + 16) = xmmword_1001F35F0;
    v84 = v83 + v82;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v80 + 104))(v84, enum case for MessagingCapability.supportsPeopleFindingV1(_:), v79);
    v85 = sub_10018C498(v83);
    swift_setDeallocating(v83);
    swift_arrayDestroy(v84, 1, v79);
    swift_deallocClassInstance(v83, 32, 7);
    v86 = sub_10018C36C((uint64_t)_swiftEmptyArrayStorage);
    MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)(v77, 0, v74, 0, 1, 0, v85, v86, 0, 0);
    v87 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    v1[35] = v87;
    *v87 = v1;
    v87[1] = sub_10018A454;
    return daemon.getter();
  }
}

