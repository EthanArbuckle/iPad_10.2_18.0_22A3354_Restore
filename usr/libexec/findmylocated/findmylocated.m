uint64_t sub_1000048AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[160];
  _BYTE v19[168];
  char v20;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100265D00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10003C964();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LegacyLocationServerRequestContext.CodingKeys, &type metadata for LegacyLocationServerRequestContext.CodingKeys, v11, v9, v10);
  sub_10000EF6C(v3, (uint64_t)v19, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v19, (uint64_t)v18, &qword_1002603B0);
  v20 = 0;
  v12 = sub_10003E3B0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v20, v5, &type metadata for ServerContext, v12);
  if (!v2)
  {
    v13 = v3 + *(int *)(type metadata accessor for LegacyLocationServerRequestContext(0) + 20);
    v18[0] = 1;
    v14 = type metadata accessor for ClientContext(0);
    v15 = sub_100004EA8(&qword_100260488, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3130);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100004A44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 432) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 440) = v7;
  *v7 = v0;
  v7[1] = sub_100006A50;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_100004B14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100262554);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003BF7C;
  return sub_100007318(a1, v4, v5, v6);
}

uint64_t sub_100004B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_10026253C);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10003BF7C;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch(sub_10000C568, 0, 0);
}

uint64_t sub_100004BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100037A5C(&qword_100264450);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_100004C84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  return swift_task_switch(sub_100017F6C, v1, 0);
}

uint64_t sub_100004CDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100007DDC, v4, 0);
}

uint64_t sub_100004D44(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = (_QWORD *)*v2;
  v3[5] = v2;
  v3[6] = a1;
  v3[7] = v1;
  v4 = v3[15];
  v3[16] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[9];
    v6 = sub_100053100;
  }
  else
  {
    v7 = v3[9];
    swift_release(v3[14]);
    v6 = sub_10001293C;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100004DC0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 2088);
  v5 = *v1;
  *(_QWORD *)(*v1 + 2096) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 2104) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100008024;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100004EA8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for LocationServiceClient()
{
  return objc_opt_self(_TtC13findmylocated21LocationServiceClient);
}

uint64_t sub_100004F08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = sub_100018A7C(qword_1002607A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
  v5 = swift_task_alloc(48);
  *(_QWORD *)(v2 + 40) = v5;
  v8 = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = v8;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v2 + 48) = v6;
  *v6 = v2;
  v6[1] = sub_1000080D8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, v8, v4, 0x6564286574697277, 0xEF293A7365636976, sub_10005DC80, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_100004FE0()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(char **)(v0 + 80);
  if (v1)
  {
    if (qword_10025F8F8 != -1)
      swift_once(&qword_10025F8F8, sub_1000CFDC8);
    v2 = *(_QWORD *)(v0 + 72);
    v3 = type metadata accessor for Table(0);
    v4 = sub_100037A9C(v3, (uint64_t)qword_10027AC08);
    *(_QWORD *)(v0 + 40) = v3;
    *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
    v5 = sub_10003276C((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v5, v4, v3);
    v6 = sub_100027374(v0 + 16, v1);
    swift_release(v1);
    sub_10002BB90((_QWORD *)(v0 + 16));
    if (!v2)
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
  }
  else
  {
    v8 = type metadata accessor for DatabaseError(0);
    v9 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v8, v9, 0, 0);
    v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DatabaseError.notConnected(_:), v8);
    swift_willThrow(v11);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000514C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1600);
  v5 = *(_QWORD **)v2;
  v5[201] = a1;
  v5[202] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v6 = v5[199];
    v7 = v5[197];
    v8 = v5[116];
    swift_bridgeObjectRelease(v5[196]);
    swift_release(v6);
    v9 = v5[105];
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v9);
    return swift_task_switch(sub_1000126F0, v8, 0);
  }
  else
  {
    swift_release(v5[199]);
    v11 = (_QWORD *)swift_task_alloc(dword_1002612E4);
    v5[203] = v11;
    *v11 = v5;
    v11[1] = sub_10003E174;
    return sub_1000069E8(v5[153]);
  }
}

uint64_t sub_10000522C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 592);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 584);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 600) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000249CC, v4, 0);
}

uint64_t type metadata accessor for FriendshipServiceClient()
{
  return objc_opt_self(_TtC13findmylocated23FriendshipServiceClient);
}

uint64_t sub_1000052B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for FriendshipServiceClient();
  v4 = swift_allocObject(v3, 120, 15);
  swift_defaultActor_initialize(v4);
  *(_QWORD *)(v4 + 112) = a1;
  return sub_1000C9F7C(*(uint64_t (**)(uint64_t))(v1 + 8), v1, v4);
}

uint64_t sub_10000530C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_100037A5C(&qword_100267A10);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Insert(0);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003CFAC, 0, 0);
}

uint64_t sub_100005390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for LocationServiceClient();
  v4 = swift_allocObject(v3, 120, 15);
  swift_defaultActor_initialize(v4);
  *(_QWORD *)(v4 + 112) = a1;
  return sub_1000C9F7C(*(uint64_t (**)(uint64_t))(v1 + 8), v1, v4);
}

uint64_t sub_1000053E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v9 = sub_10003D638();
  *(_QWORD *)(v0 + 176) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v7, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v8, v5);
  v10 = dword_100265C4C;
  swift_bridgeObjectRetain(v9);
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 184) = v11;
  *v11 = v0;
  v11[1] = sub_10003CC18;
  return sub_100010ED4(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 200), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1000054C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 40) = v0;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 48) = v2;
  *v2 = v1;
  v2[1] = sub_100019CFC;
  return daemon.getter();
}

uint64_t sub_10000550C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  _QWORD *v42;
  int64_t v43;

  v29 = a2;
  v40 = a4;
  v41 = a5;
  v30 = a1;
  v39 = type metadata accessor for Location(0);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v36 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for Handle(0);
  v35 = *(_QWORD *)(v38 - 8);
  result = __chkstk_darwin(v38);
  v34 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v42 = (_QWORD *)a3;
  v10 = *(_QWORD *)(a3 + 64);
  v31 = 0;
  v32 = a3 + 64;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v33 = (unint64_t)(v11 + 63) >> 6;
  v15 = (uint64_t)v34;
  v14 = v35;
  v17 = v37;
  v16 = v38;
  v18 = (uint64_t)v36;
  v19 = v39;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v43 = v9;
      v21 = v20 | (v9 << 6);
      goto LABEL_5;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v23 >= v33)
      return sub_1000060F8(v30, v29, v31, v42);
    v24 = *(_QWORD *)(v32 + 8 * v23);
    v25 = v9 + 1;
    if (!v24)
    {
      v25 = v9 + 2;
      if (v9 + 2 >= v33)
        return sub_1000060F8(v30, v29, v31, v42);
      v24 = *(_QWORD *)(v32 + 8 * v25);
      if (!v24)
      {
        v25 = v9 + 3;
        if (v9 + 3 >= v33)
          return sub_1000060F8(v30, v29, v31, v42);
        v24 = *(_QWORD *)(v32 + 8 * v25);
        if (!v24)
          break;
      }
    }
LABEL_20:
    v13 = (v24 - 1) & v24;
    v43 = v25;
    v21 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_5:
    v22 = v42;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16))(v15, v42[6] + *(_QWORD *)(v14 + 72) * v21, v16);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16))(v18, v22[7] + *(_QWORD *)(v17 + 72) * v21, v19);
    LOBYTE(v22) = sub_1000547DC(v15, v18, v40, v41);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
    v9 = v43;
    if ((v22 & 1) != 0)
    {
      *(unint64_t *)((char *)v30 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (__OFADD__(v31++, 1))
      {
        __break(1u);
        return sub_1000060F8(v30, v29, v31, v42);
      }
    }
  }
  v26 = v9 + 4;
  if (v9 + 4 >= v33)
    return sub_1000060F8(v30, v29, v31, v42);
  v24 = *(_QWORD *)(v32 + 8 * v26);
  if (v24)
  {
    v25 = v9 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v33)
      return sub_1000060F8(v30, v29, v31, v42);
    v24 = *(_QWORD *)(v32 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000057D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 408);
  v4[52] = a1;
  v4[53] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[11];
    v7 = sub_10009D208;
  }
  else
  {
    swift_release(v4[50]);
    v7 = sub_100004A44;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10000584C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  *(_QWORD *)(*(_QWORD *)v2 + 96) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[8];
    v7 = sub_1000F1720;
  }
  else
  {
    v8 = v4[8];
    swift_release(v4[10]);
    v4[13] = a1;
    v7 = sub_100005A3C;
    v6 = v8;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000058D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v1;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100019360, 0, 0);
}

Swift::Int sub_10000592C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  v5 = type metadata accessor for LocationServiceClient();
  dispatch thunk of Hashable.hash(into:)(v7, v5, a3);
  return Hasher._finalize()();
}

uint64_t sub_100005980(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 88);
  v5 = *(_QWORD *)(*v2 + 40);
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v6 = sub_100158540;
  else
    v6 = sub_1000141BC;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000059F0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 40) = v0;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 48) = v2;
  *v2 = v1;
  v2[1] = sub_100019C14;
  return daemon.getter();
}

uint64_t sub_100005A3C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (uint64_t *)(v0[8] + OBJC_IVAR____TtC13findmylocated11DataManager_legacyLocationsForHandles);
  swift_beginAccess(v1, v0 + 2, 0, 0);
  v2 = *v1;
  v0[14] = *v1;
  v3 = dword_100262124;
  swift_bridgeObjectRetain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_1000064E4;
  return sub_100009814(v2);
}

uint64_t sub_100005AC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 40);
  v5 = *v2;
  *(_QWORD *)(v5 + 48) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10013AD44, *(_QWORD *)(v5 + 32), 0);
  swift_release(a1);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100005B4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[25];
  v5 = *v2;
  v5[26] = a1;
  v5[27] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10005362C, v5[9], 0);
  swift_release(v5[24]);
  v7 = (uint64_t **)swift_task_alloc(dword_1002618BC);
  v5[28] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_100053424;
  return sub_1000098F4(v5[8]);
}

uint64_t sub_100005BF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[9];
  v5 = *v2;
  v5[10] = a1;
  v5[11] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100173260, v5[6], 0);
  swift_release(v5[8]);
  v7 = (uint64_t **)swift_task_alloc(dword_10026095C);
  v5[12] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_10003EB30;
  return sub_10003CCBC(v5[5]);
}

Swift::Int sub_100005CA4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100037A5C(&qword_100265540);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100005F50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2040);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2032);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 1768);
  *(_QWORD *)(*(_QWORD *)v1 + 2048) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10001498C, v4, 0);
}

uint64_t sub_100005FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 1544) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 1552) = v7;
  *v7 = v0;
  v7[1] = sub_100006C70;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_10000608C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001210DC;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 112));
    v4 = sub_10003D4AC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000060F8(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;

  v59 = type metadata accessor for Location(0);
  v53 = *(_QWORD *)(v59 - 8);
  v8 = __chkstk_darwin(v59);
  v58 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v52 = (char *)&v46 - v10;
  v11 = type metadata accessor for Handle(0);
  v51 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v57 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v50 = (char *)&v46 - v14;
  if (!a3)
    return (uint64_t)_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (uint64_t)a4;
  }
  sub_100037A5C(&qword_100263350);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v16 = result;
  v46 = a1;
  v47 = a2;
  if (a2 < 1)
    v17 = 0;
  else
    v17 = *a1;
  v18 = 0;
  v19 = result + 64;
  v48 = a4;
  v49 = result;
  v20 = v52;
  while (1)
  {
    v56 = a3;
    if (v17)
    {
      v54 = (v17 - 1) & v17;
      v55 = v18;
      v21 = __clz(__rbit64(v17)) | (v18 << 6);
    }
    else
    {
      v22 = v18 + 1;
      if (__OFADD__(v18, 1))
        goto LABEL_40;
      if (v22 >= v47)
        return v16;
      v23 = v46[v22];
      v24 = v18 + 1;
      if (!v23)
      {
        v24 = v18 + 2;
        if (v18 + 2 >= v47)
          return v16;
        v23 = v46[v24];
        if (!v23)
        {
          v24 = v18 + 3;
          if (v18 + 3 >= v47)
            return v16;
          v23 = v46[v24];
          if (!v23)
          {
            v25 = v18 + 4;
            if (v18 + 4 >= v47)
              return v16;
            v23 = v46[v25];
            if (!v23)
            {
              while (1)
              {
                v24 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v24 >= v47)
                  return v16;
                v23 = v46[v24];
                ++v25;
                if (v23)
                  goto LABEL_24;
              }
            }
            v24 = v18 + 4;
          }
        }
      }
LABEL_24:
      v54 = (v23 - 1) & v23;
      v55 = v24;
      v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    v26 = v50;
    v27 = v51;
    v28 = *(_QWORD *)(v51 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v50, a4[6] + v28 * v21, v11);
    v29 = a4[7];
    v30 = v53;
    v31 = *(_QWORD *)(v53 + 72);
    v32 = v29 + v31 * v21;
    v33 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v20, v32, v59);
    v34 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v34(v57, v26, v11);
    v35 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v35(v58, v20, v33);
    v16 = v49;
    v36 = *(_QWORD *)(v49 + 40);
    v37 = sub_100004EA8(&qword_1002605F8, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v11, v37);
    v38 = -1 << *(_BYTE *)(v16 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v19 + 8 * (v39 >> 6))) != 0)
    {
      v41 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v19 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v44 = v40 == v43;
        if (v40 == v43)
          v40 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v19 + 8 * v40);
      }
      while (v45 == -1);
      v41 = __clz(__rbit64(~v45)) + (v40 << 6);
    }
    *(_QWORD *)(v19 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    v34((char *)(*(_QWORD *)(v16 + 48) + v41 * v28), v57, v11);
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v35)(*(_QWORD *)(v16 + 56) + v41 * v31, v58, v59);
    ++*(_QWORD *)(v16 + 16);
    a3 = v56 - 1;
    if (__OFSUB__(v56, 1))
      break;
    a4 = v48;
    v17 = v54;
    v18 = v55;
    if (v56 == 1)
      return v16;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000064E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10003EBE4, v2, 0);
}

uint64_t sub_100006544(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[8];
  v5 = *v2;
  v5[9] = a1;
  v5[10] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100173640, v5[5], 0);
  swift_release(v5[7]);
  v7 = (uint64_t **)swift_task_alloc(dword_100260864);
  v5[11] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_10003E6B8;
  return sub_10003CCDC(v5[4]);
}

uint64_t sub_1000065F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_10000A17C, 0, 0);
}

uint64_t sub_100006694(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 232);
  v4[30] = a1;
  v4[31] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000457C8;
    v7 = 0;
  }
  else
  {
    swift_release(v4[28]);
    v6 = sub_10003E54C;
    v7 = a1;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100006710(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 40);
  v5 = *v2;
  *(_QWORD *)(v5 + 48) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000A9D78, *(_QWORD *)(v5 + 32), 0);
  swift_release(a1);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100006794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(_QWORD *)(v0 + 56);
    v5 = *(void **)(v0 + 40);
    v6 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
    v7 = (_QWORD *)swift_allocObject(&unk_100251F70, 48, 7);
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = v3;
    v7[5] = v5;
    swift_retain(v3);
    v8 = v5;
    v9 = sub_10005582C(v4, (uint64_t)&unk_100262748, (uint64_t)v7);
    swift_release(v3);
    swift_release(v9);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_10000687C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 80);
  if (v1)
  {
    if (qword_10025F8F0 != -1)
      swift_once(&qword_10025F8F0, sub_1000CFDA8);
    v2 = *(_QWORD *)(v0 + 72);
    v3 = type metadata accessor for Table(0);
    v4 = sub_100037A9C(v3, (uint64_t)qword_10027ABF0);
    *(_QWORD *)(v0 + 40) = v3;
    *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
    v5 = sub_10003276C((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v5, v4, v3);
    v6 = sub_100031CF8(v0 + 16);
    swift_release(v1);
    sub_10002BB90((_QWORD *)(v0 + 16));
    if (!v2)
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
  }
  else
  {
    v8 = type metadata accessor for DatabaseError(0);
    v9 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v8, v9, 0, 0);
    v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DatabaseError.notConnected(_:), v8);
    swift_willThrow(v11);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000069E8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  v3 = type metadata accessor for Account.TokenStatus(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100007380, v1, 0);
}

uint64_t sub_100006A50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 432);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 448) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10001D378, v4, 0);
}

uint64_t sub_100006AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC13findmylocated14AccountService__account;
  swift_beginAccess(v2, v0 + 16, 0, 0);
  sub_10000E37C(v2, v1, &qword_100260580);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100006B20(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for Handle(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v2[13] = v5;
  *v5 = v2;
  v5[1] = sub_100008BC8;
  return daemon.getter();
}

uint64_t sub_100006B94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 48) = dispatch thunk of XPCClientConnectionPool.sessions.getter();
  return swift_task_switch(sub_1000095D8, v1, 0);
}

uint64_t sub_100006BD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 120));
  return v1;
}

uint64_t sub_100006C00(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for Device(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)swift_task_alloc(dword_10026599C);
  v2[7] = v5;
  *v5 = v2;
  v5[1] = sub_10003E658;
  return sub_1000059F0();
}

uint64_t sub_100006C70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1552);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1544);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 928);
  *(_QWORD *)(*(_QWORD *)v1 + 1560) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100020F14, v4, 0);
}

uint64_t sub_100006CDC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
    return (*(uint64_t (**)(void))(v1 + 8))();
  v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 72) = v3;
  *v3 = v1;
  v3[1] = sub_10000A094;
  return daemon.getter();
}

uint64_t sub_100006D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 152) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 160) = v7;
  *v7 = v0;
  v7[1] = sub_100004CDC;
  return sub_1000196E8(v6, 1);
}

Swift::Int sub_100006E10(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_100263468);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100007118(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = LocationRequest.toHandles.getter(a1);
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease(v2);
  if (v3)
  {
    v4 = (_QWORD *)swift_task_alloc(dword_10026060C);
    *(_QWORD *)(v1 + 128) = v4;
    *v4 = v1;
    v4[1] = sub_10003DCD0;
    return sub_100010E38();
  }
  else
  {
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100037A9C(v6, (uint64_t)qword_10027ABA8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v14 = v11;
      *(_DWORD *)v10 = 136446210;
      *(_QWORD *)(v1 + 56) = sub_10002BA84(0xD000000000000019, 0x80000001001FCF40, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v10 + 4, v10 + 12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s with empty handles", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

    v12 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    v13 = *(_QWORD *)(v1 + 112);
    swift_task_dealloc(*(_QWORD *)(v1 + 120));
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(unint64_t))(v1 + 8))(v12);
  }
}

uint64_t sub_100007318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;

  v4[7] = a3;
  v4[8] = a4;
  v4[6] = a2;
  v6 = (_QWORD *)swift_task_alloc(dword_10026207C);
  v4[9] = v6;
  *v6 = v4;
  v6[1] = sub_100010068;
  v6[4] = a2;
  return swift_task_switch(sub_10000FFD8, a2, 0);
}

uint64_t sub_100007380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 80);
    v3 = *(_QWORD *)(v1 + 40);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 72) + 104))(v2, enum case for Account.TokenStatus.success(_:), *(_QWORD *)(v1 + 64));
    Account.init(icloudIdentifier:dsid:authTokenStatus:appToken:appHostName:apsEnvironment:peopleURL:authToken:)(0xD000000000000015, 0x80000001001FD6E0, 3355699, 0xE300000000000000, v2, 0, 0xE000000000000000, 0, 0, 0x6D706F6C65766564, 0xEB00000000746E65, 0xD00000000000003DLL, 0x80000001001FD700, 0x656B6F5468747561, 0xE90000000000006ELL);
    v4 = type metadata accessor for Account(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
    swift_task_dealloc(*(_QWORD *)(v1 + 80));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    sub_100004EA8(qword_100261538, type metadata accessor for AccountService, (uint64_t)&unk_1001F4710);
    v6 = swift_task_alloc(32);
    *(_QWORD *)(v1 + 88) = v6;
    *(_OWORD *)(v6 + 16) = *(_OWORD *)(v1 + 48);
    v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v1 + 96) = v7;
    *v7 = v1;
    v7[1] = sub_10003E340;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
}

uint64_t sub_10000755C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  *(_BYTE *)(v0 + 200) = dispatch thunk of XPCClientConnectionPool.isEmpty.getter() & 1;
  return swift_task_switch(sub_100020220, v1, 0);
}

uint64_t sub_1000075A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t Priority;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t i;
  int v48;
  __int128 v49;

  v3 = v2;
  Priority = type metadata accessor for LocatePriority(0);
  v7 = *(_QWORD *)(Priority - 8);
  __chkstk_darwin(Priority);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_100263470);
  v48 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v46 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v44 = v2;
  v45 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_24;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v45)
      break;
    v25 = v46;
    v26 = v46[v24];
    ++v19;
    if (!v26)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v45)
        goto LABEL_36;
      v26 = v46[v19];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v45)
        {
LABEL_36:
          swift_release(v10);
          v3 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v46[v27];
        if (!v26)
        {
          while (1)
          {
            v19 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v19 >= v45)
              goto LABEL_36;
            v26 = v46[v19];
            ++v27;
            if (v26)
              goto LABEL_23;
          }
        }
        v19 = v27;
      }
    }
LABEL_23:
    v16 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v7 + 72);
    v29 = *(_QWORD *)(v10 + 48) + v28 * v23;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v29, Priority);
      v30 = *(_QWORD *)(v10 + 56) + 24 * v23;
      v31 = *(_QWORD *)v30;
      v49 = *(_OWORD *)(v30 + 8);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v29, Priority);
      v32 = *(_QWORD *)(v10 + 56) + 24 * v23;
      v31 = *(_QWORD *)v32;
      v49 = *(_OWORD *)(v32 + 8);
      swift_retain(v49);
      swift_bridgeObjectRetain(v31);
    }
    v33 = *(_QWORD *)(v12 + 40);
    v34 = sub_100004EA8(&qword_1002625C0, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, Priority, v34);
    v35 = -1 << *(_BYTE *)(v12 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v17 + 8 * (v36 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v17 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v17 + 8 * v37);
      }
      while (v41 == -1);
      v20 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v28 * v20, v9, Priority);
    v21 = *(_QWORD *)(v12 + 56) + 24 * v20;
    *(_QWORD *)v21 = v31;
    *(_OWORD *)(v21 + 8) = v49;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v44;
  v25 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v10 + 32);
  if (v42 >= 64)
    bzero(v25, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v42;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_100007970(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 88);
  v5 = *(_QWORD *)(*v2 + 40);
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v6 = sub_100172C44;
  else
    v6 = sub_10001430C;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000079E0(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;

  v38 = a2;
  v39 = a1;
  v6 = type metadata accessor for Device(0);
  v49 = *(_QWORD **)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v7);
  v12 = (char *)&v38 - v11;
  v13 = 0;
  v43 = a3;
  v14 = *(_QWORD *)(a3 + 56);
  v40 = 0;
  v41 = a3 + 56;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  if (v15 < 64)
    v16 = ~(-1 << v15);
  else
    v16 = -1;
  v17 = v16 & v14;
  v42 = (unint64_t)(v15 + 63) >> 6;
  v47 = a4 + 7;
  v48 = a4;
  while (1)
  {
    if (v17)
    {
      v45 = (v17 - 1) & v17;
      v46 = v13;
      v18 = __clz(__rbit64(v17)) | (v13 << 6);
      goto LABEL_22;
    }
    v19 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v19 >= v42)
      goto LABEL_31;
    v20 = *(_QWORD *)(v41 + 8 * v19);
    v21 = v13 + 1;
    if (!v20)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v42)
        goto LABEL_31;
      v20 = *(_QWORD *)(v41 + 8 * v21);
      if (!v20)
      {
        v21 = v13 + 3;
        if (v13 + 3 >= v42)
          goto LABEL_31;
        v20 = *(_QWORD *)(v41 + 8 * v21);
        if (!v20)
          break;
      }
    }
LABEL_21:
    v45 = (v20 - 1) & v20;
    v46 = v21;
    v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_22:
    v23 = *(_QWORD *)(v43 + 48);
    v24 = v49[9];
    v44 = v18;
    v25 = (void (*)(char *, unint64_t, uint64_t))v49[2];
    v25(v12, v23 + v24 * v18, v6);
    if (v48[2]
      && (v26 = v48,
          v27 = v48[5],
          v28 = sub_100004EA8(&qword_100263890, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device), v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v6, v28), v30 = -1 << *((_BYTE *)v26 + 32), v31 = v29 & ~v30, ((*(_QWORD *)((char *)v47 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) != 0))
    {
      v32 = ~v30;
      while (1)
      {
        v25(v9, v48[6] + v31 * v24, v6);
        v33 = sub_100004EA8(&qword_100263368, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
        v34 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v12, v6, v33);
        v35 = (void (*)(char *, uint64_t))v49[1];
        v35(v9, v6);
        if ((v34 & 1) != 0)
          break;
        v31 = (v31 + 1) & v32;
        if (((*(_QWORD *)((char *)v47 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
          goto LABEL_5;
      }
      result = ((uint64_t (*)(char *, uint64_t))v35)(v12, v6);
      *(unint64_t *)((char *)v39 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v44;
      v36 = __OFADD__(v40++, 1);
      v17 = v45;
      v13 = v46;
      if (v36)
      {
        __break(1u);
LABEL_31:
        v37 = v43;
        swift_retain(v43);
        return sub_100035718(v39, v38, v40, v37);
      }
    }
    else
    {
LABEL_5:
      result = ((uint64_t (*)(char *, uint64_t))v49[1])(v12, v6);
      v17 = v45;
      v13 = v46;
    }
  }
  v22 = v13 + 4;
  if (v13 + 4 >= v42)
    goto LABEL_31;
  v20 = *(_QWORD *)(v41 + 8 * v22);
  if (v20)
  {
    v21 = v13 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v21 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v21 >= v42)
      goto LABEL_31;
    v20 = *(_QWORD *)(v41 + 8 * v21);
    ++v22;
    if (v20)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100007D58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1496);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 928);
  v3[190] = a1;
  v3[191] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v6 = sub_100080A48;
  }
  else
  {
    swift_release(v3[186]);
    v6 = sub_10003DD6C;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100007DDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = v0[9];
  v2 = (uint64_t *)(v0[18] + OBJC_IVAR____TtC13findmylocated11DataManager_legacyLocationsForHandles);
  swift_beginAccess(v2, v0 + 2, 0, 0);
  v3 = *v2;
  v0[22] = *v2;
  swift_bridgeObjectRetain(v3);
  return swift_task_switch(sub_10000CAA8, v1, 0);
}

Swift::Int sub_100007E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  v5 = type metadata accessor for FriendshipServiceClient();
  dispatch thunk of Hashable.hash(into:)(v7, v5, a3);
  return Hasher._finalize()();
}

uint64_t sub_100007E9C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1584);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1592) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[200] = v6;
  v7 = type metadata accessor for AccountService(0);
  v8 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_10000514C;
  return ActorServiceDaemon.getService<A>()(v3[188], v7, v3[189], v8);
}

uint64_t sub_100007F48()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1704);
  *(_QWORD *)(*(_QWORD *)v1 + 1712) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[197];
    v5 = v2[196];
    v6 = v2[116];
    sub_1000087A0((uint64_t)(v2 + 74), &qword_100260598);
    swift_bridgeObjectRelease(v5);
    v7 = v2[105];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v7);
    v8 = sub_100080C94;
  }
  else
  {
    v6 = v2[116];
    sub_1000087A0((uint64_t)(v2 + 74), &qword_100260598);
    sub_10002BB90(v2 + 79);
    sub_10002BB90(v2 + 84);
    v8 = sub_10007FDF0;
  }
  return swift_task_switch(v8, v6, 0);
}

uint64_t sub_100008024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 2104);
  v5 = *(_QWORD **)v2;
  v5[264] = a1;
  v5[265] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10017FAC0, 0, 0);
  swift_release(v5[262]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[266] = v7;
  *v7 = v5;
  v7[1] = sub_10003CA74;
  return sub_10000AFC8((uint64_t)(v5 + 110));
}

uint64_t sub_1000080D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = sub_1000570BC;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 24);
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v5 = sub_10003BF80;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10000814C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[2];
  v6 = sub_100018A7C(qword_1002607A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
  v7 = (_QWORD *)swift_task_alloc(48);
  v2[5] = v7;
  v7[2] = v3;
  v7[3] = v5;
  v7[4] = v4;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v2[6] = v8;
  *v8 = v2;
  v8[1] = sub_1000080D8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, v3, v6, 0xD000000000000016, 0x80000001001FD080, sub_10005D380, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_10000821C(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  _QWORD *v52;
  char *v53;
  _QWORD *v54;

  v43 = a2;
  v44 = a1;
  v6 = type metadata accessor for Device(0);
  v54 = *(_QWORD **)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v7);
  v12 = (char *)&v43 - v11;
  v47 = a3;
  v48 = 0;
  v13 = 0;
  v14 = a3;
  v15 = a4;
  v16 = *(_QWORD *)(v14 + 56);
  v45 = v14 + 56;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v16;
  v46 = (unint64_t)(v17 + 63) >> 6;
  v52 = v15 + 7;
  v53 = v12;
  do
  {
    while (1)
    {
      if (v19)
      {
        v20 = __clz(__rbit64(v19));
        v21 = (v19 - 1) & v19;
        v51 = v13;
        v22 = v20 | (v13 << 6);
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
          goto LABEL_32;
        if (v23 >= v46)
        {
LABEL_31:
          v42 = v47;
          swift_retain(v47);
          return sub_100035718(v44, v43, v48, v42);
        }
        v24 = *(_QWORD *)(v45 + 8 * v23);
        v25 = v13 + 1;
        if (!v24)
        {
          v25 = v13 + 2;
          if (v13 + 2 >= v46)
            goto LABEL_31;
          v24 = *(_QWORD *)(v45 + 8 * v25);
          if (!v24)
          {
            v25 = v13 + 3;
            if (v13 + 3 >= v46)
              goto LABEL_31;
            v24 = *(_QWORD *)(v45 + 8 * v25);
            if (!v24)
            {
              v26 = v13 + 4;
              if (v13 + 4 >= v46)
                goto LABEL_31;
              v24 = *(_QWORD *)(v45 + 8 * v26);
              if (!v24)
              {
                while (1)
                {
                  v25 = v26 + 1;
                  if (__OFADD__(v26, 1))
                    goto LABEL_33;
                  if (v25 >= v46)
                    goto LABEL_31;
                  v24 = *(_QWORD *)(v45 + 8 * v25);
                  ++v26;
                  if (v24)
                    goto LABEL_21;
                }
              }
              v25 = v13 + 4;
            }
          }
        }
LABEL_21:
        v21 = (v24 - 1) & v24;
        v51 = v25;
        v22 = __clz(__rbit64(v24)) + (v25 << 6);
      }
      v27 = *(_QWORD *)(v47 + 48);
      v28 = v54[9];
      v49 = v22;
      v29 = (void (*)(char *, unint64_t, uint64_t))v54[2];
      v29(v12, v27 + v28 * v22, v6);
      v30 = v15[2];
      v50 = v21;
      if (!v30)
        break;
      v31 = v15;
      v32 = v15[5];
      v33 = sub_100004EA8(&qword_100263890, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
      v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v6, v33);
      v15 = v31;
      v35 = -1 << *((_BYTE *)v31 + 32);
      v36 = v34 & ~v35;
      if (((*(_QWORD *)((char *)v52 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
        break;
      v37 = ~v35;
      while (1)
      {
        v29(v9, v15[6] + v36 * v28, v6);
        v38 = sub_100004EA8(&qword_100263368, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
        v39 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v53, v6, v38);
        v40 = (void (*)(char *, uint64_t))v54[1];
        v40(v9, v6);
        if ((v39 & 1) != 0)
          break;
        v36 = (v36 + 1) & v37;
        v15 = v31;
        if (((*(_QWORD *)((char *)v52 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
          goto LABEL_27;
      }
      v12 = v53;
      result = ((uint64_t (*)(char *, uint64_t))v40)(v53, v6);
      v15 = v31;
      v19 = v50;
      v13 = v51;
    }
    v40 = (void (*)(char *, uint64_t))v54[1];
LABEL_27:
    v12 = v53;
    result = ((uint64_t (*)(char *, uint64_t))v40)(v53, v6);
    v19 = v50;
    *(unint64_t *)((char *)v44 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
    v41 = __OFADD__(v48++, 1);
    v13 = v51;
  }
  while (!v41);
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1000085B4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v6 = swift_isaMask;
  v5[11] = *a3;
  v5[12] = v6;
  v7 = type metadata accessor for LocationRequest(0);
  v5[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[14] = v8;
  v5[15] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000091FC, 0, 0);
}

uint64_t sub_100008630()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD))(v0 + 32))(0);
  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100008678(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v17 = a4;
  v18 = a5;
  v9 = sub_100037A5C(&qword_100265B08);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_100036228(a1, v14);
  v15 = sub_100019BD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerPreferences.CodingKeys, &type metadata for ServerPreferences.CodingKeys, v15, v14, v13);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v20, v9);
  if (!v5)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v19, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1000087A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100037A5C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000087DC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100008824(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = *v1;
  *(_QWORD *)(*v1 + 64) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 72) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  *v6 = v5;
  v6[1] = sub_100005BF8;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10000890C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  type metadata accessor for Transaction(0);
  v13 = (_QWORD *)swift_allocObject(a3, 40, 7);
  v13[2] = v6;
  v13[3] = a1;
  v13[4] = a2;
  swift_retain(v6);
  swift_retain(a2);
  static Transaction.asyncTask(name:block:)(a4, a5, 2, a6, v13);
  return swift_release(v13);
}

uint64_t sub_1000089AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_10001572C, v3, 0);
}

uint64_t sub_100008A14(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1480);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1488) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[187] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[188] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[189] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100007D58;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100008B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[656] = a2;
  v3[655] = a1;
  v4 = type metadata accessor for OnConflict(0);
  v3[657] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[658] = v5;
  v3[659] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Table(0);
  v3[660] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[661] = v7;
  v3[662] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)swift_task_alloc(dword_1002679DC);
  v3[663] = v8;
  *v8 = v3;
  v8[1] = sub_10003CD60;
  v8[116] = v2;
  v8[115] = v3 + 56;
  return swift_task_switch(sub_10003B998, 0, 0);
}

uint64_t sub_100008BC8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 104);
  v5 = *v1;
  *(_QWORD *)(*v1 + 112) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 120) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100004D44;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100008CB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000570BC;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v4 = sub_10005975C;
  }
  return swift_task_switch(v4, 0, 0);
}

_OWORD *sub_100008D1C(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _OWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t, __n128);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = a2[5];
    if (v7)
    {
      *a1 = *(_OWORD *)a2;
      v8 = a2[2];
      *((_QWORD *)v4 + 2) = v8;
      *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 3);
      *((_QWORD *)v4 + 5) = v7;
      *((_BYTE *)v4 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)((char *)v4 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)((char *)v4 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)((char *)v4 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)((char *)v4 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)((char *)v4 + 120) = *(_OWORD *)(a2 + 15);
      v10 = a2[17];
      v9 = a2[18];
      *((_QWORD *)v4 + 17) = v10;
      *((_QWORD *)v4 + 18) = v9;
      v11 = a2[19];
      *((_QWORD *)v4 + 19) = v11;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      a1[6] = *((_OWORD *)a2 + 6);
      a1[7] = v13;
      v14 = *((_OWORD *)a2 + 9);
      a1[8] = *((_OWORD *)a2 + 8);
      a1[9] = v14;
      v15 = *((_OWORD *)a2 + 3);
      a1[2] = *((_OWORD *)a2 + 2);
      a1[3] = v15;
      v16 = *((_OWORD *)a2 + 5);
      a1[4] = *((_OWORD *)a2 + 4);
      a1[5] = v16;
      v17 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v17;
    }
    v18 = *(int *)(a3 + 20);
    v19 = (char *)v4 + v18;
    v20 = (uint64_t)a2 + v18;
    v86 = *(uint64_t *)((char *)a2 + v18 + 8);
    *(_QWORD *)v19 = *(uint64_t *)((char *)a2 + v18);
    *((_QWORD *)v19 + 1) = v86;
    v19[16] = *((_BYTE *)a2 + v18 + 16);
    v21 = *(uint64_t *)((char *)a2 + v18 + 32);
    *((_QWORD *)v19 + 3) = *(uint64_t *)((char *)a2 + v18 + 24);
    *((_QWORD *)v19 + 4) = v21;
    v22 = *(uint64_t *)((char *)a2 + v18 + 48);
    *((_QWORD *)v19 + 5) = *(uint64_t *)((char *)a2 + v18 + 40);
    *((_QWORD *)v19 + 6) = v22;
    v19[56] = *((_BYTE *)a2 + v18 + 56);
    v23 = *(uint64_t *)((char *)a2 + v18 + 72);
    *((_QWORD *)v19 + 8) = *(uint64_t *)((char *)a2 + v18 + 64);
    *((_QWORD *)v19 + 9) = v23;
    v24 = *(uint64_t *)((char *)a2 + v18 + 88);
    *((_QWORD *)v19 + 10) = *(uint64_t *)((char *)a2 + v18 + 80);
    *((_QWORD *)v19 + 11) = v24;
    v25 = *(uint64_t *)((char *)a2 + v18 + 104);
    *((_QWORD *)v19 + 12) = *(uint64_t *)((char *)a2 + v18 + 96);
    *((_QWORD *)v19 + 13) = v25;
    v26 = (int *)type metadata accessor for ClientContext(0);
    v27 = v26[12];
    v82 = v20 + v27;
    v84 = &v19[v27];
    v28 = type metadata accessor for SystemInfo.DeviceLockState(0);
    v80 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    v29 = swift_bridgeObjectRetain(v25);
    v80(v84, v82, v28, v29);
    *(_QWORD *)&v19[v26[13]] = *(_QWORD *)(v20 + v26[13]);
    v30 = v26[14];
    v31 = &v19[v30];
    v32 = (_QWORD *)(v20 + v30);
    v33 = v32[1];
    *(_QWORD *)v31 = *v32;
    *((_QWORD *)v31 + 1) = v33;
    v19[v26[15]] = *(_BYTE *)(v20 + v26[15]);
    v34 = v26[16];
    v35 = &v19[v34];
    v36 = (_QWORD *)(v20 + v34);
    v87 = v36[1];
    *(_QWORD *)v35 = *v36;
    *((_QWORD *)v35 + 1) = v87;
    v37 = v26[17];
    v38 = &v19[v37];
    v39 = (_QWORD *)(v20 + v37);
    v85 = v39[1];
    *(_QWORD *)v38 = *v39;
    *((_QWORD *)v38 + 1) = v85;
    v40 = v26[18];
    v41 = &v19[v40];
    v42 = (_QWORD *)(v20 + v40);
    v83 = v42[1];
    *(_QWORD *)v41 = *v42;
    *((_QWORD *)v41 + 1) = v83;
    v43 = v26[19];
    v44 = &v19[v43];
    v45 = (_QWORD *)(v20 + v43);
    v81 = v45[1];
    *(_QWORD *)v44 = *v45;
    *((_QWORD *)v44 + 1) = v81;
    v46 = v26[20];
    v47 = &v19[v46];
    v48 = (_QWORD *)(v20 + v46);
    v79 = v48[1];
    *(_QWORD *)v47 = *v48;
    *((_QWORD *)v47 + 1) = v79;
    v49 = v26[21];
    v50 = &v19[v49];
    v51 = (_QWORD *)(v20 + v49);
    v52 = v51[1];
    *(_QWORD *)v50 = *v51;
    *((_QWORD *)v50 + 1) = v52;
    v53 = v26[22];
    v54 = &v19[v53];
    v55 = (_QWORD *)(v20 + v53);
    v56 = v55[1];
    *(_QWORD *)v54 = *v55;
    *((_QWORD *)v54 + 1) = v56;
    v57 = v26[23];
    v58 = &v19[v57];
    v59 = (_QWORD *)(v20 + v57);
    v60 = v59[1];
    *(_QWORD *)v58 = *v59;
    *((_QWORD *)v58 + 1) = v60;
    v61 = v26[24];
    v62 = &v19[v61];
    v63 = v20 + v61;
    *(_QWORD *)v62 = *(_QWORD *)v63;
    v62[8] = *(_BYTE *)(v63 + 8);
    v19[v26[25]] = *(_BYTE *)(v20 + v26[25]);
    v64 = v26[26];
    v65 = *(_QWORD *)(v20 + v64);
    *(_QWORD *)&v19[v64] = v65;
    v66 = v26[27];
    v67 = &v19[v66];
    v68 = (_QWORD *)(v20 + v66);
    v69 = v68[1];
    *(_QWORD *)v67 = *v68;
    *((_QWORD *)v67 + 1) = v69;
    v70 = v26[28];
    v71 = &v19[v70];
    v72 = (_QWORD *)(v20 + v70);
    v73 = v72[1];
    *(_QWORD *)v71 = *v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = v26[29];
    v75 = &v19[v74];
    v76 = (_QWORD *)(v20 + v74);
    v77 = v76[1];
    *(_QWORD *)v75 = *v76;
    *((_QWORD *)v75 + 1) = v77;
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v77);
  }
  return v4;
}

uint64_t sub_1000090BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = swift_isaMask;
  v3[6] = *a1;
  v3[7] = v5;
  v6 = type metadata accessor for ClientSessionError.Category(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ClientSessionError(0);
  v3[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[12] = v9;
  v3[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003D558, a1, 0);
}

uint64_t sub_100009160(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[12] = a1;
  v2[13] = v1;
  v2[14] = *v1;
  v3 = sub_100037A5C((uint64_t *)&unk_100265180);
  v2[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v2[16] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[17] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v6);
  v2[19] = swift_task_alloc(v6);
  return swift_task_switch(sub_10001226C, v1, 0);
}

uint64_t sub_1000091FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[13];
  v3 = v0[6];
  v2 = v0[7];
  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100004EA8(qword_100263F20, (uint64_t (*)(uint64_t))&type metadata accessor for LocationRequest, (uint64_t)&protocol conformance descriptor for LocationRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v1, v3, v2, v1, v6);
  v7 = v0[8];
  swift_release(v5);
  return swift_task_switch(sub_10003DB84, v7, 0);
}

uint64_t sub_1000094F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 216);
  v5 = *v1;
  *(_QWORD *)(*v1 + 224) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 232) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100006694;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000095D8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  v1 = unk_100263CBC;
  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100263CB8 + dword_100263CB8);
  swift_retain(v0[4]);
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[7] = v2;
  *v2 = v0;
  v2[1] = sub_1000089AC;
  return v4(v0[6], v0[4]);
}

uint64_t sub_100009648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1936);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1920);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2136));
  sub_1000087A0(v2, &qword_100260238);
  sub_1000087A0(v1, &qword_1002650A0);
  return swift_task_switch(sub_100011C04, 0, 0);
}

uint64_t sub_1000096C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 392);
  v5 = *v1;
  *(_QWORD *)(*v1 + 400) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 408) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1000057D0;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000097AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100018BAC, v4, 0);
}

uint64_t sub_100009814(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2[4] = a1;
  v2[5] = v1;
  v2[6] = *v1;
  v3 = type metadata accessor for UUID(0);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100017744, v1, 0);
}

uint64_t sub_100009874(uint64_t a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  void *v10;
  uint64_t v11;

  v10 = _Block_copy(aBlock);
  v11 = swift_allocObject(a4, 24, 7);
  *(_QWORD *)(v11 + 16) = v10;
  swift_retain(a1);
  a6(a5, v11);
  swift_release(a1);
  return swift_release(v11);
}

uint64_t sub_1000098F4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Priority;
  uint64_t v6;
  unint64_t v7;

  v2[11] = a1;
  v2[12] = v1;
  v3 = type metadata accessor for LocationRequest(0);
  v2[13] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[14] = v4;
  v2[15] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  v2[16] = Priority;
  v6 = *(_QWORD *)(Priority - 8);
  v2[17] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v7);
  v2[19] = swift_task_alloc(v7);
  return swift_task_switch(sub_10000CDA0, v1, 0);
}

uint64_t sub_10000998C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[10] = a1;
  v2[11] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[13] = v4;
  v2[14] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10000B33C, 0, 0);
}

uint64_t sub_1000099EC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[8] = a1;
  v2[9] = v1;
  v2[10] = *v1;
  v3 = type metadata accessor for LocationRequest(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[13] = v5;
  v2[14] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C((uint64_t *)&unk_100265180);
  v2[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100007118, v1, 0);
}

uint64_t sub_100009A7C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000CFCA8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 40));
    v4 = sub_10003BF78;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100009AE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  *(_QWORD *)(*v1 + 56) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  *v6 = v5;
  v6[1] = sub_100006544;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100009BD0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 184);
  v5 = *v1;
  *(_QWORD *)(*v1 + 192) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 200) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for CommandManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002605E0, type metadata accessor for CommandManager, (uint64_t)&unk_1001F4950);
  *v6 = v5;
  v6[1] = sub_100005B4C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100009CB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 160);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 152);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 160));
    *(_QWORD *)(v0 + 24) = v2;
    sub_10000FC08(v1, (uint64_t)sub_1000A1314, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)(v0 + 24));
    if (v3)
    {
      return swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 24);
      swift_bridgeObjectRelease(0x8000000000000000);
      *(_QWORD *)(v0 + 152) = 0;
      *(_QWORD *)(v0 + 160) = v10;
      v11 = *(_QWORD *)(v0 + 144);
      v12 = *(_QWORD *)(v0 + 56);
      v13 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
      *(_QWORD *)(v0 + 168) = v13;
      *v13 = v0;
      v13[1] = sub_10003DC78;
      return TaskGroup.Iterator.next(isolation:)(v0 + 16, v12, v11, *(_QWORD *)(v0 + 80));
    }
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD **)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v8, *(_QWORD *)(v0 + 80));
    *v9 = v2;
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

_QWORD *sub_100009E04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100037A5C(&qword_100265230);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1000303EC((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100086D50(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_100009EE8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_1000140DC, v0, 0);
}

uint64_t sub_100009F08()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 168) = *(_QWORD *)(*(_QWORD *)(v0 + 72)
                                    + OBJC_IVAR____TtC13findmylocated15LocationService_connectionPool);
  v1 = sub_100037A5C(&qword_100260610);
  v2 = sub_100009F78();
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_10000755C, v3, v4);
}

unint64_t sub_100009F78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100260618;
  if (!qword_100260618)
  {
    v1 = sub_10003C1FC(&qword_100260610);
    result = swift_getWitnessTable(&protocol conformance descriptor for XPCClientConnectionPool<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100260618);
  }
  return result;
}

uint64_t sub_100009FC4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100014028, 0, 0);
}

uint64_t *sub_100009FE4(uint64_t *a1)
{
  sub_10002C108(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

void *sub_10000A044@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[576];

  result = (void *)sub_10002A1F0(a1, v5);
  if (!v2)
    return memcpy(a2, v5, 0x240uLL);
  return result;
}

uint64_t sub_10000A094(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 72);
  v5 = *v1;
  *(_QWORD *)(*v1 + 80) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 88) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocationService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100261868, type metadata accessor for LocationService, (uint64_t)&unk_1001F4E44);
  *v6 = v5;
  v6[1] = sub_10000584C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10000A17C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_100004EA8(&qword_1002618A8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_100004EA8(&qword_1002618B0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_100082478;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_10000A294(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 2032);
  v5 = *v1;
  *(_QWORD *)(*v1 + 2040) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[256] = v6;
  v7 = type metadata accessor for LocationService(0);
  v8 = sub_100004EA8(&qword_100261868, type metadata accessor for LocationService, (uint64_t)&unk_1001F4E44);
  *v6 = v5;
  v6[1] = sub_10000C0FC;
  return ActorServiceDaemon.getService<A>()(v3[250], v7, v3[251], v8);
}

uint64_t type metadata accessor for LocationService(uint64_t a1)
{
  uint64_t result;

  result = qword_100262068;
  if (!qword_100262068)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationService);
  return result;
}

uint64_t sub_10000A37C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  char v28;
  char v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  os_log_t v47;
  os_log_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  os_log_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  os_log_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[3];
  char v95[16];

  v80 = type metadata accessor for HandleType(0);
  v79 = *(_QWORD *)(v80 - 8);
  v3 = __chkstk_darwin(v80);
  v75 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v82 = (char *)&v68 - v5;
  v85 = type metadata accessor for DarwinNotifications(0);
  v83 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v84 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for Friend(0);
  v78 = *(_QWORD *)(v81 - 8);
  v7 = __chkstk_darwin(v81);
  v76 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v77 = (char *)&v68 - v9;
  v10 = sub_100037A5C(&qword_100261D20);
  v90 = *(_QWORD *)(v10 - 8);
  v91 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100037A5C(&qword_100261D28);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v68 - v18;
  v86 = type metadata accessor for DataManager.State(0);
  v20 = __chkstk_darwin(v86);
  v87 = (uint64_t)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v88 = (uint64_t)&v68 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v68 - v24;
  v26 = v1;
  v27 = (v1 + OBJC_IVAR____TtC13findmylocated11DataManager_state);
  swift_beginAccess(v1 + OBJC_IVAR____TtC13findmylocated11DataManager_state, v95, 0, 0);
  v89 = v27;
  sub_10003E7A8((uint64_t)v27, (uint64_t)v25);
  v92 = a1;
  sub_10000D6B8((uint64_t)v25, a1);
  v29 = v28;
  result = sub_10003E76C((uint64_t)v25);
  if ((v29 & 1) == 0)
  {
    if (qword_10025F928 != -1)
      goto LABEL_36;
    while (1)
    {
      v31 = type metadata accessor for Logger(0);
      v32 = sub_100037A9C(v31, (uint64_t)qword_10027ACA0);
      v33 = v88;
      sub_10003E7A8(v92, v88);
      v34 = swift_retain_n(v26, 2);
      v74 = v32;
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      v37 = v36;
      if (os_log_type_enabled(v35, v36))
      {
        v38 = swift_slowAlloc(22, -1);
        v72 = v37;
        v73 = v26;
        v39 = v38;
        v71 = swift_slowAlloc(64, -1);
        v94[0] = v71;
        *(_DWORD *)v39 = 136446466;
        v68 = v39 + 4;
        sub_10003E7A8((uint64_t)v89, (uint64_t)v25);
        v70 = v35;
        sub_1000DF70C();
        v41 = v40;
        v43 = v42;
        sub_10003E76C((uint64_t)v25);
        v93 = sub_10002BA84(v41, v43, v94);
        v69 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v68, v39 + 12);
        swift_release_n(v73, 2);
        swift_bridgeObjectRelease(v43);
        *(_WORD *)(v39 + 12) = 2082;
        sub_1000DF70C();
        v45 = v44;
        v93 = sub_10002BA84(v46, v44, v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v69, v39 + 14, v39 + 22);
        v47 = v89;
        swift_bridgeObjectRelease(v45);
        sub_10003E76C(v33);
        v48 = v70;
        _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v72, "State: %{public}s -> %{public}s", (uint8_t *)v39, 0x16u);
        v49 = v71;
        swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v39, -1, -1);

        v26 = v73;
      }
      else
      {
        swift_release_n(v26, 2);
        sub_10003E76C(v33);

        v47 = v89;
      }
      swift_beginAccess(v47, v94, 33, 0);
      sub_10009ABDC(v92, (uint64_t)v47);
      swift_endAccess(v94);
      v50 = (uint64_t *)(v26 + OBJC_IVAR____TtC13findmylocated11DataManager_stateContinuations);
      v51 = swift_beginAccess(v50, v94, 0, 0);
      v52 = *(_QWORD *)(*v50 + 16);
      if (v52)
      {
        v53 = Logger.logObject.getter(v51);
        v54 = static os_log_type_t.default.getter(v53);
        v89 = v53;
        LODWORD(v88) = v54;
        if (os_log_type_enabled(v53, v54))
        {
          v55 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v55 = 134217984;
          v93 = v52;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v55 + 4, v55 + 12);
          _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v88, "Publishing State change event to %ld subscribers", v55, 0xCu);
          swift_slowDealloc(v55, -1, -1);
        }

      }
      v26 = *v50;
      v56 = *(_QWORD *)(v26 + 64);
      v88 = v26 + 64;
      v57 = 1 << *(_BYTE *)(v26 + 32);
      v58 = -1;
      if (v57 < 64)
        v58 = ~(-1 << v57);
      v59 = v58 & v56;
      v89 = (os_log_t)((unint64_t)(v57 + 63) >> 6);
      swift_bridgeObjectRetain(v26);
      v60 = 0;
      while (1)
      {
        if (v59)
        {
          v61 = __clz(__rbit64(v59));
          v59 &= v59 - 1;
          v62 = v61 | (v60 << 6);
          goto LABEL_14;
        }
        v63 = v60 + 1;
        if (__OFADD__(v60, 1))
        {
          __break(1u);
          JUMPOUT(0x10000AD10);
        }
        if (v63 >= (uint64_t)v89)
        {
LABEL_32:
          swift_release(v26);
          v66 = v87;
          sub_10003E7A8(v92, v87);
          v67 = (char *)&loc_10000AB14 + dword_10009ABBC[swift_getEnumCaseMultiPayload(v66, v86)];
          __asm { BR              X10 }
        }
        v64 = *(_QWORD *)(v88 + 8 * v63);
        ++v60;
        if (!v64)
        {
          v60 = v63 + 1;
          if (v63 + 1 >= (uint64_t)v89)
            goto LABEL_32;
          v64 = *(_QWORD *)(v88 + 8 * v60);
          if (!v64)
          {
            v60 = v63 + 2;
            if (v63 + 2 >= (uint64_t)v89)
              goto LABEL_32;
            v64 = *(_QWORD *)(v88 + 8 * v60);
            if (!v64)
            {
              v60 = v63 + 3;
              if (v63 + 3 >= (uint64_t)v89)
                goto LABEL_32;
              v64 = *(_QWORD *)(v88 + 8 * v60);
              if (!v64)
                break;
            }
          }
        }
LABEL_31:
        v59 = (v64 - 1) & v64;
        v62 = __clz(__rbit64(v64)) + (v60 << 6);
LABEL_14:
        (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v19, *(_QWORD *)(v26 + 56) + *(_QWORD *)(v14 + 72) * v62, v13);
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v19, v13);
        sub_10003E7A8(v92, (uint64_t)v25);
        AsyncStream.Continuation.yield(_:)(v25, v13);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v12, v91);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
      }
      v65 = v63 + 4;
      if (v65 >= (uint64_t)v89)
        goto LABEL_32;
      v64 = *(_QWORD *)(v88 + 8 * v65);
      if (v64)
        break;
      while (1)
      {
        v60 = v65 + 1;
        if (__OFADD__(v65, 1))
          break;
        if (v60 >= (uint64_t)v89)
          goto LABEL_32;
        v64 = *(_QWORD *)(v88 + 8 * v60);
        ++v65;
        if (v64)
          goto LABEL_31;
      }
      __break(1u);
LABEL_36:
      swift_once(&qword_10025F928, sub_1000DF67C);
    }
    v60 = v65;
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_10000AF28(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v13 = *(_OWORD *)(a1 + 384);
  v14 = *(_OWORD *)(a1 + 400);
  v11 = *(_OWORD *)(a1 + 352);
  v12 = *(_OWORD *)(a1 + 368);
  v9 = *(_OWORD *)(a1 + 320);
  v10 = *(_OWORD *)(a1 + 336);
  v7 = *(_OWORD *)(a1 + 288);
  v8 = *(_OWORD *)(a1 + 304);
  v5 = *(_OWORD *)(a1 + 256);
  v6 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  v4 = *(_OWORD *)(a1 + 240);
  sub_10002BDC8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    *(_QWORD *)(a1 + 416),
    *(_QWORD *)(a1 + 424));
  return a1;
}

uint64_t sub_10000AFC8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[221] = v1;
  v2[220] = a1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v2[222] = v3;
  *v3 = v2;
  v3[1] = sub_100019DE4;
  return daemon.getter();
}

uint64_t sub_10000B018()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v25 = v0[210];
  v26 = v0[211];
  v24 = v0[209];
  v1 = v0[192];
  v2 = v0[152];
  v3 = v0[151];
  v4 = v0[150];
  v23 = v0[145];
  v22 = v0[144];
  v5 = v0[143];
  v6 = v0[142];
  v7 = v0[141];
  v8 = v0[116];
  v9 = v8 + v0[204];
  v10 = *(_QWORD *)(v8 + v1);
  *(_QWORD *)(v8 + v1) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for LegacyRefreshSchedule.notScheduled(_:), v7);
  v11 = v8 + OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  swift_beginAccess(v11, v0 + 101, 33, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(v11, v5, v7);
  swift_endAccess(v0 + 101);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for LocatePriority.shallow(_:), v4);
  swift_beginAccess(v9, v0 + 95, 33, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(v9, v2, v4);
  swift_endAccess(v0 + 95);
  v0[87] = v22;
  v0[88] = sub_100004EA8(&qword_100261830, type metadata accessor for LocationEndpoint, (uint64_t)&unk_1001F7C84);
  v12 = sub_10003276C(v0 + 84);
  sub_100025C70(v23, (uint64_t)v12, type metadata accessor for LocationEndpoint);
  v0[82] = &type metadata for LocationServerRequest;
  v0[83] = sub_1000825A4();
  v0[79] = v24;
  v0[80] = v25;
  v0[81] = v26;
  swift_bridgeObjectRetain(v24);
  v13 = sub_10001F728(v25, v26);
  v14 = Account.dsid.getter(v13);
  v16 = v15;
  v17 = Account.appToken.getter();
  v19 = v18;
  v0[77] = type metadata accessor for BasicCredential(0);
  v0[78] = &protocol witness table for BasicCredential;
  sub_10003276C(v0 + 74);
  BasicCredential.init(username:password:)(v14, v16, v17, v19);
  v20 = (_QWORD *)swift_task_alloc(dword_100263274);
  v0[213] = v20;
  *v20 = v0;
  v20[1] = sub_100007F48;
  return sub_1000DE6C4((uint64_t)(v0 + 2), (uint64_t)(v0 + 84), (uint64_t)(v0 + 79), (uint64_t)(v0 + 74));
}

uint64_t sub_10000B29C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 1992);
  v4 = *(_QWORD **)v2;
  v4[252] = a1;
  v4[253] = v1;
  swift_task_dealloc(v3);
  if (v1)
    return swift_task_switch(sub_10007FB8C, v4[230], 0);
  swift_release(v4[248]);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v4[254] = v6;
  *v6 = v4;
  v6[1] = sub_10000A294;
  return daemon.getter();
}

uint64_t sub_10000B33C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD);

  *(_QWORD *)(v0 + 56) = _swiftEmptyArrayStorage;
  v1 = *(_QWORD *)(v0 + 80);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 80);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for LocationServiceClient();
    v5 = sub_100109530();
    Set.Iterator.init(_cocoa:)(v3, v4, v5);
    result = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
    v9 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 128) = v7;
    *(_QWORD *)(v0 + 136) = v9;
    *(_QWORD *)(v0 + 120) = result;
    if (result < 0)
    {
      v23 = __CocoaSet.Iterator.next()(result);
      if (v23)
      {
        v24 = v23;
        *(_QWORD *)(v0 + 72) = v23;
        swift_unknownObjectRetain(v23);
        swift_dynamicCast(v0 + 64, v0 + 72, (char *)&type metadata for Swift.AnyObject + 8, v4, 7);
        v14 = *(_QWORD *)(v0 + 64);
        swift_unknownObjectRelease(v24);
        v13 = v8;
        v11 = v10;
LABEL_9:
        *(_QWORD *)(v0 + 152) = v13;
        *(_QWORD *)(v0 + 160) = v11;
        *(_QWORD *)(v0 + 144) = v14;
        if (v14)
        {
          v28 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                               + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
          v15 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                           + 1));
          *(_QWORD *)(v0 + 168) = v15;
          *v15 = v0;
          v15[1] = sub_100004C84;
          return v28(*(_QWORD *)(v0 + 112));
        }
        goto LABEL_33;
      }
      goto LABEL_33;
    }
    if (v10)
    {
LABEL_7:
      v11 = (v10 - 1) & v10;
      v12 = __clz(__rbit64(v10)) | (v8 << 6);
      v13 = v8;
LABEL_8:
      v14 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v12);
      swift_retain(v14);
      goto LABEL_9;
    }
  }
  else
  {
    v16 = -1 << *(_BYTE *)(v1 + 32);
    v9 = ~v16;
    v7 = v1 + 56;
    v17 = *(_QWORD *)(v1 + 56);
    v18 = -v16;
    *(_QWORD *)(v0 + 128) = v1 + 56;
    *(_QWORD *)(v0 + 136) = v9;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v10 = v19 & v17;
    *(_QWORD *)(v0 + 120) = v1;
    result = swift_bridgeObjectRetain(v1);
    v8 = 0;
    if (v10)
      goto LABEL_7;
  }
  v20 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    v21 = (unint64_t)(v9 + 64) >> 6;
    if (v20 < v21)
    {
      v22 = *(_QWORD *)(v7 + 8 * v20);
      v13 = v8 + 1;
      if (v22)
      {
LABEL_18:
        v11 = (v22 - 1) & v22;
        v12 = __clz(__rbit64(v22)) + (v13 << 6);
        goto LABEL_8;
      }
      v13 = v8 + 2;
      if (v8 + 2 < v21)
      {
        v22 = *(_QWORD *)(v7 + 8 * v13);
        if (v22)
          goto LABEL_18;
        v13 = v8 + 3;
        if (v8 + 3 < v21)
        {
          v22 = *(_QWORD *)(v7 + 8 * v13);
          if (v22)
            goto LABEL_18;
          v13 = v8 + 4;
          if (v8 + 4 < v21)
          {
            v22 = *(_QWORD *)(v7 + 8 * v13);
            if (v22)
              goto LABEL_18;
            v13 = v8 + 5;
            if (v8 + 5 < v21)
            {
              v22 = *(_QWORD *)(v7 + 8 * v13);
              if (v22)
                goto LABEL_18;
              v25 = v8 + 6;
              while (v21 != v25)
              {
                v22 = *(_QWORD *)(v7 + 8 * v25++);
                if (v22)
                {
                  v13 = v25 - 1;
                  goto LABEL_18;
                }
              }
            }
          }
        }
      }
    }
LABEL_33:
    v26 = *(_QWORD *)(v0 + 112);
    sub_100086D50(*(_QWORD *)(v0 + 120));
    v27 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v27);
  }
  __break(1u);
  return result;
}

uint64_t sub_10000B5F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 64);
  v5 = *(_QWORD **)v2;
  v5[9] = a1;
  v5[10] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100158354, v5[5], 0);
  swift_release(v5[7]);
  v7 = (_QWORD *)swift_task_alloc(dword_100260904);
  v5[11] = v7;
  *v7 = v5;
  v7[1] = sub_100005980;
  return sub_100009FC4();
}

uint64_t sub_10000B698()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1648);
  v2 = *(_QWORD *)(v0 + 1520);
  v3 = *(_QWORD *)(v0 + 1352);
  v4 = *(_QWORD *)(v0 + 1320);
  v5 = *(_QWORD *)(v0 + 1264);
  v6 = *(_QWORD *)(v0 + 1240);
  v7 = *(_QWORD *)(v0 + 1232);
  v8 = *(_QWORD *)(v0 + 1160);
  swift_release(*(_QWORD *)(v0 + 1608));
  swift_release(v2);
  sub_100024990(v8, type metadata accessor for LocationEndpoint);
  v1(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v9 = *(_QWORD *)(v0 + 1464);
  v10 = *(_QWORD *)(v0 + 1456);
  v11 = *(_QWORD *)(v0 + 1448);
  v12 = *(_QWORD *)(v0 + 1440);
  v13 = *(_QWORD *)(v0 + 1416);
  v14 = *(_QWORD *)(v0 + 1408);
  v15 = *(_QWORD *)(v0 + 1400);
  v16 = *(_QWORD *)(v0 + 1392);
  v17 = *(_QWORD *)(v0 + 1384);
  v19 = *(_QWORD *)(v0 + 1360);
  v20 = *(_QWORD *)(v0 + 1352);
  v21 = *(_QWORD *)(v0 + 1344);
  v22 = *(_QWORD *)(v0 + 1336);
  v23 = *(_QWORD *)(v0 + 1312);
  v24 = *(_QWORD *)(v0 + 1288);
  v25 = *(_QWORD *)(v0 + 1264);
  v26 = *(_QWORD *)(v0 + 1256);
  v27 = *(_QWORD *)(v0 + 1248);
  v28 = *(_QWORD *)(v0 + 1224);
  v29 = *(_QWORD *)(v0 + 1216);
  v30 = *(_QWORD *)(v0 + 1192);
  v31 = *(_QWORD *)(v0 + 1184);
  v32 = *(_QWORD *)(v0 + 1160);
  v33 = *(_QWORD *)(v0 + 1144);
  v34 = *(_QWORD *)(v0 + 1120);
  v35 = *(_QWORD *)(v0 + 1112);
  v36 = *(_QWORD *)(v0 + 1104);
  v37 = *(_QWORD *)(v0 + 1080);
  v38 = *(_QWORD *)(v0 + 1072);
  v39 = *(_QWORD *)(v0 + 1048);
  v40 = *(_QWORD *)(v0 + 1040);
  v41 = *(_QWORD *)(v0 + 1032);
  v42 = *(_QWORD *)(v0 + 1008);
  v43 = *(_QWORD *)(v0 + 984);
  v44 = *(_QWORD *)(v0 + 976);
  v45 = *(_QWORD *)(v0 + 952);
  swift_task_dealloc(*(_QWORD *)(v0 + 1472));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10000B938(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100037A5C(&qword_100263400);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_10002FF38(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10000BA58(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;

  type metadata accessor for Transaction(0);
  v17 = (_QWORD *)swift_allocObject(a5, 56, 7);
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = v8;
  v17[5] = a3;
  v17[6] = a4;
  sub_10001A484(a1, a2);
  swift_retain(v8);
  swift_retain(a4);
  static Transaction.asyncTask(name:block:)(a6, a7, 2, a8, v17);
  return swift_release(v17);
}

uint64_t sub_10000BB18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 64);
  v5 = *(_QWORD **)v2;
  v5[9] = a1;
  v5[10] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100172A58, v5[5], 0);
  swift_release(v5[7]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002607D4);
  v5[11] = v7;
  *v7 = v5;
  v7[1] = sub_100007970;
  return sub_100009EE8();
}

uint64_t sub_10000BBBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  _QWORD *v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 208);
  if (!v1)
  {
    v7 = type metadata accessor for DatabaseError(0);
    v8 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v7, v8, 0, 0);
    v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, enum case for DatabaseError.notConnected(_:), v7);
    swift_willThrow(v10);
LABEL_19:
    v27 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 160);
    v28 = *(_QWORD *)(v0 + 128);
    v29 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 168);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v3, *(_QWORD *)(v0 + 72), v4);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v3, v4);
  if (v5 == enum case for HandleType.follower(_:))
  {
    v6 = 2;
  }
  else if (v5 == enum case for HandleType.following(_:))
  {
    v6 = 4;
  }
  else if (v5 == enum case for HandleType.futureFollower(_:))
  {
    v6 = 8;
  }
  else if (v5 == enum case for HandleType.futureFollowing(_:))
  {
    v6 = 16;
  }
  else
  {
    if (v5 != enum case for HandleType.pendingOffer(_:))
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000011, 0x80000001001FEF00, "findmylocated/FriendRecord.swift", 32, 2, 58, 0);
    v6 = 32;
  }
  if (qword_10025F8F0 != -1)
    swift_once(&qword_10025F8F0, sub_1000CFDA8);
  v43 = (_QWORD *)(v0 + 16);
  v44 = v1;
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = sub_100037A9C(v13, (uint64_t)qword_10027ABF0);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v42(v12, v14, v13);
  if (qword_10025FAB8 != -1)
    swift_once(&qword_10025FAB8, sub_10014D2B8);
  v41 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 152);
  v16 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 128);
  v37 = *(_QWORD *)(v0 + 160);
  v38 = *(_QWORD *)(v0 + 120);
  v18 = *(_QWORD *)(v0 + 104);
  v39 = *(_QWORD *)(v0 + 112);
  v40 = *(_QWORD *)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 96);
  v21 = sub_100037A9C(v19, (uint64_t)qword_10027B150);
  *(_QWORD *)(v0 + 56) = v6;
  v22 = sub_100039528();
  & infix<A>(_:_:)(v21, v0 + 56, &type metadata for UInt64, v22);
  *(_QWORD *)(v0 + 64) = 0;
  != infix<A>(_:_:)(v18, v0 + 64, &type metadata for UInt64, v22, &protocol witness table for Int64);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  QueryType.filter(_:)(v17, v16, &protocol witness table for Table);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v17, v39);
  v23 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v23(v15, v16);
  *(_QWORD *)(v0 + 40) = v16;
  *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
  v24 = sub_10003276C(v43);
  v42((uint64_t)v24, v37, v16);
  v25 = sub_100031CF8((uint64_t)v43);
  if (v41)
  {
    v23(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
    swift_release(v44);
    sub_10002BB90(v43);
    goto LABEL_19;
  }
  v31 = v25;
  v32 = *(_QWORD *)(v0 + 184);
  v34 = *(_QWORD *)(v0 + 152);
  v33 = *(_QWORD *)(v0 + 160);
  v35 = *(_QWORD *)(v0 + 128);
  v36 = *(_QWORD *)(v0 + 104);
  v23(v33, *(_QWORD *)(v0 + 136));
  swift_release(v44);
  sub_10002BB90(v43);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v31);
}

uint64_t sub_10000C018()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 912);
  *(_QWORD *)(*v1 + 920) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100056F50;
  else
    v4 = sub_100056EE0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 888), 0);
}

uint64_t sub_10000C080(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 144);
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[9];
    v6 = sub_1000539F4;
  }
  else
  {
    v7 = v3[9];
    swift_release(v3[17]);
    v6 = sub_100009F08;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10000C0FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 2048);
  v5 = *(_QWORD **)v2;
  v5[257] = a1;
  v5[258] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10007FC48, v5[230], 0);
  swift_release(v5[255]);
  v7 = (_QWORD *)swift_task_alloc(dword_10026060C);
  v5[259] = v7;
  *v7 = v5;
  v7[1] = sub_10003E2CC;
  return sub_100010E38();
}

uint64_t sub_10000C1A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 40);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v3 + 16);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      v7 = v6(*(_QWORD *)(v0 + 48), v4, *(_QWORD *)(v0 + 32));
      if ((Device.isActive.getter(v7) & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v3 + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
        goto LABEL_6;
      }
    }
    v10 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 32);
    v12 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v12, v9, v11);
    v8 = 0;
  }
  else
  {
LABEL_6:
    v8 = 1;
  }
  v13 = *(_QWORD *)(v0 + 64);
  v14 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 40) + 56))(*(_QWORD *)(v0 + 16), v8, 1, *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000C2A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1816);
  *(_QWORD *)(*v1 + 1824) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 1768);
    v5 = sub_100173048;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 1768);
    sub_10002C158(v2 + 448, v2 + 1312);
    v5 = sub_1000197D4;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10000C320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 72);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager write server Settings into LocalStorage", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_release(v6);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000C408()
{
  uint64_t v0;
  unint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 264);
  if (v1 >> 60 == 15)
  {
    v2 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    v3 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 56);
    swift_release(*(_QWORD *)(v0 + 240));
    sub_1000087A0(v4, &qword_1002650A0);
    sub_1000087A0(v5, &qword_100260238);
    v2(v6, v3);
    v7 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 240);
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    v11 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 24) = v1;
    v15 = sub_10003EC14();
    v7 = DataProtocol.hexString.getter(&type metadata for Data, v15);
    v8 = v16;
    swift_release(v9);
    sub_1000087A0(v12, &qword_1002650A0);
    sub_1000087A0(v13, &qword_100260238);
    v10(v14, v11);
    sub_100037AB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  }
  v17 = (uint64_t *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 200) + 84));
  *v17 = v7;
  v17[1] = v8;
  v18 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 168);
  v20 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000C568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject(&unk_100251BF0, 40, 7);
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v6 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v6;
  v3 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v1);
  swift_bridgeObjectRetain(v6);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = sub_100009A7C;
  return withTimeout<A>(_:block:)();
}

void sub_10000C628(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10000C654()
{
  Swift::String v0;
  void *object;
  Swift::String v2;

  v0._countAndFlagsBits = ((uint64_t (*)(void *, void *))dispatch thunk of CustomStringConvertible.description.getter)(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0x737365636375732ELL;
}

uint64_t sub_10000C8DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[119];
  if (v1)
  {
    if (qword_10025F900 != -1)
      swift_once(&qword_10025F900, sub_1000CFDE8);
    v2 = v0[118];
    v3 = type metadata accessor for Table(0);
    v4 = sub_100037A9C(v3, (uint64_t)qword_10027AC20);
    v0[113] = v3;
    v0[114] = &protocol witness table for Table;
    v5 = sub_10003276C(v0 + 110);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v5, v4, v3);
    v6 = sub_1000327A8((uint64_t)(v0 + 110));
    if (!v2)
    {
      v12 = v6;
      v13 = v0[115];
      v14 = sub_10002BB90(v0 + 110);
      v15 = dispatch thunk of _AnySequenceBox._makeIterator()(v14);
      v16 = swift_release(v12);
      dispatch thunk of _AnyIteratorBoxBase.next()(v16);
      swift_release(v1);
      swift_release(v15);
      sub_10000EF6C((uint64_t)(v0 + 2), (uint64_t)(v0 + 56), &qword_1002603A8);
      sub_10000EF6C((uint64_t)(v0 + 56), v13, &qword_1002603A8);
      v11 = (uint64_t (*)(void))v0[1];
      return v11();
    }
    swift_release(v1);
    sub_10002BB90(v0 + 110);
  }
  else
  {
    v7 = type metadata accessor for DatabaseError(0);
    v8 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v7, v8, 0, 0);
    v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, enum case for DatabaseError.notConnected(_:), v7);
    swift_willThrow(v10);
  }
  v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10000CAA8()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(NSObject **)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v1);
  v6 = sub_10000F7A4(v2, v4, v1);
  swift_bridgeObjectRelease_n(v1, 2);
  swift_bridgeObjectRelease_n(v4, 2);
  swift_bridgeObjectRelease(v2);
  swift_release(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_10000CB54(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  _QWORD v12[2];

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v12, "hideLocation:");
  swift_bridgeObjectRetain(a2);
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(a2);
  v9._object = (void *)0x8000000100200FC0;
  v9._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v9);
  swift_bridgeObjectRetain(a4);
  v10._countAndFlagsBits = a3;
  v10._object = a4;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(a4);
  return v12[0];
}

uint64_t sub_10000CC38(uint64_t a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v12 = _Block_copy(aBlock);
  v13 = a3;
  swift_retain(a1);
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v16 = v15;

  v17 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v17 + 16) = v12;
  a7(v14, v16, a6, v17);
  swift_release(v17);
  sub_100037AB4(v14, v16);
  return swift_release(a1);
}

uint64_t sub_10000CCF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(void **)(v0 + 16);
  v4 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = (_QWORD *)swift_allocObject(&unk_1002544F8, 48, 7);
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v1;
  v5[5] = v3;
  swift_retain(v1);
  v6 = v3;
  v7 = sub_10005582C(v2, (uint64_t)&unk_100264980, (uint64_t)v5);
  swift_release(v7);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_10000CDA0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = v1[18];
  v2 = v1[19];
  v4 = v1[16];
  v5 = v1[17];
  v6 = v1[12];
  v7 = LocationRequest.priority.getter(a1);
  v8 = LocatePriority.rawValue.getter(v7);
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v2, v4);
  v10 = v6 + OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority;
  swift_beginAccess(v6 + OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority, v1 + 2, 0, 0);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v10, v4);
  v12 = LocatePriority.rawValue.getter(v11);
  v13 = ((uint64_t (*)(uint64_t, uint64_t))v9)(v3, v4);
  if (v12 < v8)
  {
    v14 = v1[19];
    v16 = v1[16];
    v15 = v1[17];
    LocationRequest.priority.getter(v13);
    swift_beginAccess(v10, v1 + 8, 33, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40))(v10, v14, v16);
    swift_endAccess(v1 + 8);
  }
  v17 = v1[12];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[14] + 16))(v1[15], v1[11], v1[13]);
  v18 = (unint64_t *)(v17 + OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands);
  swift_beginAccess(v18, v1 + 5, 33, 0);
  v19 = *v18;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v18);
  *v18 = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = sub_10003C448(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
    *v18 = v19;
  }
  v22 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(v19 + 24);
  if (v22 >= v21 >> 1)
  {
    v19 = sub_10003C448(v21 > 1, v22 + 1, 1, v19);
    *v18 = v19;
  }
  v24 = v1[14];
  v23 = v1[15];
  v25 = v1[13];
  *(_QWORD *)(v19 + 16) = v22 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))(v19+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v22, v23, v25);
  swift_endAccess(v1 + 5);
  v26 = (_QWORD *)swift_task_alloc(dword_100261864);
  v1[20] = v26;
  *v26 = v1;
  v26[1] = sub_10007F3DC;
  return sub_10001485C();
}

uint64_t sub_10000CFC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 176) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 184) = v7;
  *v7 = v0;
  v7[1] = sub_1000097AC;
  return sub_1000196E8(v6, 1);
}

void *sub_10000D090(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - v7;
  sub_100037A5C(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release(v9);
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release(v9);
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10000D2B4(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a4;
  v7 = sub_100037A5C(&qword_100260868);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v16 = sub_100018A7C(qword_1002607A0, v15, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = (v17 + 472) & ~v17;
  v19 = (v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (char *)swift_allocObject(&unk_1002500F8, v19 + 8, v17 | 7);
  *((_QWORD *)v20 + 2) = a2;
  *((_QWORD *)v20 + 3) = v16;
  *((_QWORD *)v20 + 4) = a2;
  memcpy(v20 + 40, a3, 0x1B0uLL);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v18], v10, v7);
  *(_QWORD *)&v20[v19] = v24;
  swift_retain_n(a2, 2);
  sub_10002A0C4((uint64_t)a3);
  v21 = sub_10005582C((uint64_t)v13, (uint64_t)&unk_100260878, (uint64_t)v20);
  return swift_release(v21);
}

uint64_t sub_10000D460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v8 = sub_100037A5C(&qword_100261DA8);
  v6[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[11] = v9;
  v6[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocationRequest(0);
  v6[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[14] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v6[15] = v12;
  v6[16] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100037A5C((uint64_t *)&unk_100265180);
  v6[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000130DC, a4, 0);
}

uint64_t sub_10000D520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v26 = a4;
  v27 = a6;
  v10 = sub_100037A5C(&qword_100260868);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v19 = sub_100018A7C(qword_1002607A0, v18, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v20 + 48) & ~v20;
  v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (char *)swift_allocObject(a5, v22 + 8, v20 | 7);
  *((_QWORD *)v23 + 2) = a3;
  *((_QWORD *)v23 + 3) = v19;
  *((_QWORD *)v23 + 4) = a2;
  *((_QWORD *)v23 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v23[v21], v13, v10);
  *(_QWORD *)&v23[v22] = v26;
  swift_retain_n(a3, 2);
  swift_bridgeObjectRetain(a2);
  v24 = sub_10005582C((uint64_t)v16, v27, (uint64_t)v23);
  return swift_release(v24);
}

void sub_10000D6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD v27[12];
  uint64_t v28;
  uint64_t v29;

  v28 = a1;
  v29 = a2;
  v2 = type metadata accessor for Friend(0);
  v27[10] = *(_QWORD *)(v2 - 8);
  v27[11] = v2;
  v3 = __chkstk_darwin(v2);
  v27[8] = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v27[9] = (char *)v27 - v5;
  v6 = type metadata accessor for Device(0);
  v27[5] = *(_QWORD *)(v6 - 8);
  v27[6] = v6;
  __chkstk_darwin(v6);
  v27[1] = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100263358);
  __chkstk_darwin(v8);
  v27[7] = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100260538);
  v11 = __chkstk_darwin(v10);
  v27[2] = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v27[3] = (char *)v27 - v14;
  __chkstk_darwin(v13);
  v27[4] = (char *)v27 - v15;
  v16 = type metadata accessor for DataManager.State(0);
  v17 = __chkstk_darwin(v16);
  v18 = __chkstk_darwin(v17);
  v19 = __chkstk_darwin(v18);
  v20 = __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  v21 = sub_100037A5C(&qword_100263360);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (uint64_t)&v24[*(int *)(v22 + 48)];
  sub_100025C70(v28, (uint64_t)v24, type metadata accessor for DataManager.State);
  sub_100025C70(v29, v25, type metadata accessor for DataManager.State);
  v26 = (char *)sub_10000D968 + 4 * byte_1001F5638[swift_getEnumCaseMultiPayload(v24, v16)];
  __asm { BR              X10 }
}

uint64_t sub_10000D968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);

  sub_100025C70(v0, v3, type metadata accessor for DataManager.State);
  if (swift_getEnumCaseMultiPayload(v2, v4))
  {
    sub_1000087A0(v3, &qword_100260538);
    sub_1000087A0(v0, &qword_100263360);
    v6 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v5 - 160);
    sub_10000EF6C(v3, v7, &qword_100260538);
    v8 = *(_QWORD *)(v5 - 168);
    sub_10000EF6C(v2, v8, &qword_100260538);
    v9 = *(_QWORD *)(v5 - 136);
    v10 = v9 + *(int *)(v1 + 48);
    sub_10000E37C(v7, v9, &qword_100260538);
    sub_10000E37C(v8, v10, &qword_100260538);
    v12 = *(_QWORD *)(v5 - 152);
    v11 = *(_QWORD *)(v5 - 144);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (v13(v9, 1, v11) == 1)
    {
      sub_1000087A0(v8, &qword_100260538);
      sub_1000087A0(v7, &qword_100260538);
      v14 = v13(v10, 1, v11);
      if (v14 == 1)
        v15 = &qword_100260538;
      else
        v15 = (uint64_t *)&unk_100263358;
      if (v14 == 1)
        v6 = -1;
      else
        v6 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(v5 - 176);
      sub_10000E37C(v9, v16, &qword_100260538);
      if (v13(v10, 1, v11) == 1)
      {
        sub_1000087A0(v8, &qword_100260538);
        sub_1000087A0(v7, &qword_100260538);
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v11);
        v6 = 0;
        v15 = (uint64_t *)&unk_100263358;
      }
      else
      {
        v17 = *(_QWORD *)(v5 - 184);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v17, v10, v11);
        v18 = sub_100004EA8(&qword_100263368, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
        v6 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v17, v11, v18);
        v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
        v19(v17, v11);
        v15 = &qword_100260538;
        sub_1000087A0(v8, &qword_100260538);
        sub_1000087A0(v7, &qword_100260538);
        v19(v16, v11);
      }
    }
    sub_1000087A0(v9, v15);
    sub_100024990(v0, type metadata accessor for DataManager.State);
  }
  return v6 & 1;
}

uint64_t sub_10000DDA4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t (*v24)(_QWORD);

  v1 = *(_QWORD *)(v0 + 176);
  v2 = sub_10000E054(*(_QWORD *)(v0 + 112), v1);
  swift_bridgeObjectRelease(v1);
  if ((v2 & 1) != 0)
  {
    v23 = (uint64_t (*)(void))((char *)&dword_100263CC0 + dword_100263CC0);
    v3 = (_QWORD *)swift_task_alloc(unk_100263CC4);
    *(_QWORD *)(v0 + 184) = v3;
    *v3 = v0;
    v3[1] = sub_100109240;
    return v23();
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
  result = swift_release(*(_QWORD *)(v0 + 144));
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 120);
  if (v7 < 0)
  {
    v12 = __CocoaSet.Iterator.next()(result);
    if (v12)
    {
      v13 = v12;
      *(_QWORD *)(v0 + 72) = v12;
      v14 = type metadata accessor for LocationServiceClient();
      swift_unknownObjectRetain(v13);
      swift_dynamicCast(v0 + 64, v0 + 72, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
      v11 = *(_QWORD *)(v0 + 64);
      swift_unknownObjectRelease(v13);
      v10 = v5;
      v8 = v6;
LABEL_9:
      *(_QWORD *)(v0 + 152) = v10;
      *(_QWORD *)(v0 + 160) = v8;
      *(_QWORD *)(v0 + 144) = v11;
      if (v11)
      {
        v24 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                             + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
        v15 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                         + 1));
        *(_QWORD *)(v0 + 168) = v15;
        *v15 = v0;
        v15[1] = sub_100004C84;
        return v24(*(_QWORD *)(v0 + 112));
      }
      goto LABEL_27;
    }
    goto LABEL_27;
  }
  if (v6)
  {
    v8 = (v6 - 1) & v6;
    v9 = __clz(__rbit64(v6)) | (v5 << 6);
    v10 = *(_QWORD *)(v0 + 152);
LABEL_6:
    v11 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v9);
    swift_retain(v11);
    goto LABEL_9;
  }
  v16 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    v17 = (unint64_t)(*(_QWORD *)(v0 + 136) + 64) >> 6;
    if (v16 < v17)
    {
      v18 = *(_QWORD *)(v0 + 128);
      v19 = *(_QWORD *)(v18 + 8 * v16);
      v10 = v5 + 1;
      if (v19)
      {
LABEL_14:
        v8 = (v19 - 1) & v19;
        v9 = __clz(__rbit64(v19)) + (v10 << 6);
        goto LABEL_6;
      }
      v10 = v5 + 2;
      if (v5 + 2 < v17)
      {
        v19 = *(_QWORD *)(v18 + 8 * v10);
        if (v19)
          goto LABEL_14;
        v10 = v5 + 3;
        if (v5 + 3 < v17)
        {
          v19 = *(_QWORD *)(v18 + 8 * v10);
          if (v19)
            goto LABEL_14;
          v10 = v5 + 4;
          if (v5 + 4 < v17)
          {
            v19 = *(_QWORD *)(v18 + 8 * v10);
            if (v19)
              goto LABEL_14;
            v10 = v5 + 5;
            if (v5 + 5 < v17)
            {
              v19 = *(_QWORD *)(v18 + 8 * v10);
              if (v19)
                goto LABEL_14;
              v20 = v5 + 6;
              while (v17 != v20)
              {
                v19 = *(_QWORD *)(v18 + 8 * v20++);
                if (v19)
                {
                  v10 = v20 - 1;
                  goto LABEL_14;
                }
              }
            }
          }
        }
      }
    }
LABEL_27:
    v21 = *(_QWORD *)(v0 + 112);
    sub_100086D50(*(_QWORD *)(v0 + 120));
    v22 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v22);
  }
  __break(1u);
  return result;
}

uint64_t sub_10000E054(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100004EA8(&qword_1002676A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_100004EA8(&qword_100261E80, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_10000E1D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 152));
  return v1;
}

uint64_t sub_10000E204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 2008);
  v2 = *(_QWORD *)(v0 + 2000);
  v3 = *(_QWORD *)(v0 + 1936);
  v15 = *(_QWORD *)(v0 + 1928);
  v4 = *(_QWORD *)(v0 + 1920);
  v13 = *(_QWORD *)(v0 + 1904);
  v14 = *(_QWORD *)(v0 + 1912);
  v5 = *(_QWORD *)(v0 + 1896);
  v12 = *(_QWORD *)(v0 + 1888);
  v6 = *(_QWORD *)(v0 + 1840);
  v7 = *(_QWORD *)(v0 + 1824);
  swift_release(*(_QWORD *)(v0 + 2112));
  sub_10000EF6C(v0 + 1472, v7, &qword_1002603B0);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v3, 1, 1, v2);
  LocationRequest.origin.getter(v8);
  v9 = type metadata accessor for RequestOrigin(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 0, 1, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v13, v6, v12);
  sub_10000E37C(v4, v14, &qword_100260238);
  sub_10000E37C(v3, v15, &qword_1002650A0);
  v10 = (_QWORD *)swift_task_alloc(dword_100260254);
  *(_QWORD *)(v0 + 2136) = v10;
  *v10 = v0;
  v10[1] = sub_100009648;
  return sub_100010444(*(_QWORD *)(v0 + 1944), *(_QWORD *)(v0 + 1904), *(_QWORD *)(v0 + 1912), *(_QWORD *)(v0 + 1928), *(_BYTE *)(v0 + 2145), *(_QWORD *)(v0 + 2024), *(_QWORD *)(v0 + 2072), *(_QWORD *)(v0 + 2080));
}

uint64_t sub_10000E37C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100037A5C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000E3C0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 64) = a8;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  *(_BYTE *)(v8 + 200) = a3;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = a2;
  v10 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  *(_QWORD *)(v8 + 72) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 80) = v11;
  *(_QWORD *)(v8 + 88) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Account(0);
  *(_QWORD *)(v8 + 96) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 104) = v13;
  *(_QWORD *)(v8 + 112) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocationRequest(0);
  *(_QWORD *)(v8 + 120) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v8 + 128) = v15;
  *(_QWORD *)(v8 + 136) = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LegacyLocationServerRequestContext(0);
  *(_QWORD *)(v8 + 144) = v16;
  v17 = (*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 152) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 160) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 168) = swift_task_alloc(v17);
  swift_bridgeObjectRelease(a7);
  return swift_task_switch(sub_1000053E4, 0, 0);
}

uint64_t sub_10000E4C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  void *object;
  Swift::String v16;
  Swift::String v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v6)
      return swift_release(a1);
    v19 = *(_QWORD *)(v2 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v6)
        return swift_release(a1);
      v19 = *(_QWORD *)(v2 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v6)
          return swift_release(a1);
        v19 = *(_QWORD *)(v2 + 8 * v8);
        if (!v19)
        {
          v8 = v18 + 3;
          if (v18 + 3 >= v6)
            return swift_release(a1);
          v19 = *(_QWORD *)(v2 + 8 * v8);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v19 - 1) & v19;
    v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = (void *)v11[1];
    v21 = *v11;
    swift_bridgeObjectRetain_n(v12, 2);
    v13._countAndFlagsBits = 10272;
    v13._object = (void *)0xE200000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    v16._countAndFlagsBits = 8233;
    v16._object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = v21;
    v17._object = v12;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v12);
    result = swift_bridgeObjectRelease(v12);
  }
  v20 = v18 + 4;
  if (v20 >= v6)
    return swift_release(a1);
  v19 = *(_QWORD *)(v2 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v6)
      return swift_release(a1);
    v19 = *(_QWORD *)(v2 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ServerContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_10000E6E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[3];

  v2 = sub_100037A5C(&qword_1002605A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URLComponents(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v41 - v11;
  v13 = Account.peopleURL.getter(v10);
  if (!v14)
    goto LABEL_4;
  v15 = v13;
  v16 = v14;
  URLComponents.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    swift_bridgeObjectRelease(v16);
    v13 = sub_1000087A0((uint64_t)v4, &qword_1002605A0);
LABEL_4:
    v43 = a1;
    URLComponents.init()(v13);
    v17 = URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
    v18 = Account.appHostName.getter(v17);
    if (!v19)
    {
      v18 = 0xD000000000000014;
      v19 = 0x80000001001FCE90;
    }
    URLComponents.host.setter(v18, v19);
    URLComponents.path.setter(0xD00000000000001DLL, 0x80000001001FCEB0);
    if (qword_10025F898 != -1)
      swift_once(&qword_10025F898, sub_100075E54);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100037A9C(v20, (uint64_t)qword_10027AAB8);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v47[0] = v25;
      *(_DWORD *)v24 = 136315138;
      swift_beginAccess(v9, &v45, 0, 0);
      v26 = sub_100004EA8(&qword_1002605A8, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v5, v26);
      v29 = v28;
      v44 = sub_10002BA84(v27, v28, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Fallback to hardcoded URL: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    v30 = v43;
    swift_beginAccess(v9, v47, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v30, v9, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  v32 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v32(v12, v4, v5);
  if (qword_10025F898 != -1)
    swift_once(&qword_10025F898, sub_100075E54);
  v33 = type metadata accessor for Logger(0);
  sub_100037A9C(v33, (uint64_t)qword_10027AAB8);
  swift_bridgeObjectRetain(v16);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v43 = a1;
    v37 = swift_slowAlloc(12, -1);
    v42 = v32;
    v38 = (uint8_t *)v37;
    v39 = swift_slowAlloc(32, -1);
    v47[0] = v39;
    *(_DWORD *)v38 = 136315138;
    swift_bridgeObjectRetain(v16);
    v45 = sub_10002BA84(v15, v16, v47);
    a1 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease_n(v16, 3);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Using people URL: %s", v38, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    v40 = v38;
    v32 = v42;
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v16, 2);
  }
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v32)(a1, v12, v5);
}

uint64_t *sub_10000EBB4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = (int *)type metadata accessor for LegacyLocation(0);
    v12 = *((_QWORD *)v11 - 1);
    v13 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_100037A5C(&qword_100261820);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v17 = type metadata accessor for PlaceMark(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v10, 1, v17))
      {
        v19 = sub_100037A5C(&qword_100261818);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v9, v10, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v9, 0, 1, v17);
      }
      v20 = v11[5];
      v21 = &v9[v20];
      v22 = &v10[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v11[6];
      v24 = &v9[v23];
      v25 = &v10[v23];
      v24[8] = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v26 = v11[7];
      v27 = &v9[v26];
      v28 = &v10[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      *(_QWORD *)&v9[v11[8]] = *(_QWORD *)&v10[v11[8]];
      *(_QWORD *)&v9[v11[9]] = *(_QWORD *)&v10[v11[9]];
      *(_QWORD *)&v9[v11[10]] = *(_QWORD *)&v10[v11[10]];
      v29 = v11[11];
      v30 = &v9[v29];
      v31 = &v10[v29];
      v30[8] = v31[8];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
    }
    v32 = a3[6];
    v33 = a3[7];
    v34 = (uint64_t *)((char *)v4 + v32);
    v35 = (uint64_t *)((char *)a2 + v32);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = (uint64_t *)((char *)v4 + v33);
    v38 = (uint64_t *)((char *)a2 + v33);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v39);
  }
  return v4;
}

uint64_t sub_10000EDE4()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_10000EF6C(v0 + 16, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1
    || (memcpy((void *)(v0 + 880), (const void *)(v0 + 448), 0x1B0uLL),
        sub_10000EF6C(v0 + 976, v0 + 1312, &qword_1002603B0),
        sub_10000EFB0((_QWORD *)(v0 + 1312), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108), sub_10000AF28(v0 + 16), sub_10000EF6C(v0 + 1312, v0 + 1472, &qword_1002603B0), sub_10005EFE0(v0 + 1472) == 1))
  {
    v1 = 5000.0;
  }
  else
  {
    v1 = *(double *)(v0 + 1472);
    sub_10000EFB0((_QWORD *)(v0 + 1312), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
  }
  v2 = *(_QWORD *)(v0 + 2016);
  v3 = *(_QWORD *)(v0 + 1880);
  v4 = *(_QWORD *)(v0 + 1872);
  v5 = *(_QWORD *)(v0 + 1864);
  v6 = *(_QWORD *)(v0 + 1840);
  v7 = static Duration.seconds(_:)(v1 / 1000.0);
  v9 = v8;
  v10 = static Date.now.getter(v7);
  v11 = Date.timeIntervalSince1970.getter(v10);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v12 = static Duration.seconds(_:)(v11 - *(double *)(v2
                                                    + OBJC_IVAR____TtC13findmylocated11DataManager_lastSuccessfulResponseTimestamp));
  *(_QWORD *)(v0 + 2152) = static Duration.- infix(_:_:)(v7, v9, v12, v13);
  *(_QWORD *)(v0 + 2160) = v14;
  return swift_task_switch(sub_100015B74, v6, 0);
}

uint64_t sub_10000EF6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100037A5C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_QWORD *sub_10000EFB0(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

void sub_10000F014(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10000F044()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD v10[4];
  _QWORD v11[10];

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForInfoDictionaryKey:", v1);

  if (v2)
  {
    ((void (*)(_QWORD *__return_ptr, id))_bridgeAnyObjectToAny(_:))(v10, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_10003C240((uint64_t)v10, (uint64_t)v11);
  if (v11[3])
  {
    if ((swift_dynamicCast(&v9, v11, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      return v9;
  }
  else
  {
    sub_1000DDE64((uint64_t)v11);
  }
  if (qword_10025F8C8 != -1)
    swift_once(&qword_10025F8C8, sub_1000A27C4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100037A9C(v4, (uint64_t)qword_10027AB78);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "App name not found in info.plist", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  return 0;
}

uint64_t sub_10000F618@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  void (*v16)(uint64_t *, _QWORD);
  Swift::String v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;

  v6 = type metadata accessor for URLComponents(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003CD40(a1);
  v20 = 0;
  v21 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(v21);
  v20 = 0x61636F4C72657375;
  v21 = 0xEB000000002F6574;
  if ((a2 & 1) != 0)
    v10 = 1885693284;
  else
    v10 = 0x776F6C6C616873;
  if ((a2 & 1) != 0)
    v11 = 0xE400000000000000;
  else
    v11 = 0xE700000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease(v11);
  v13._object = (void *)0x8000000100200610;
  v13._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v13);
  v14 = v20;
  v15 = (void *)v21;
  v16 = (void (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v20);
  v17._countAndFlagsBits = v14;
  v17._object = v15;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v15);
  v16(&v20, 0);
  v18 = type metadata accessor for Account(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
}

uint64_t sub_10000F7A4(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  swift_bridgeObjectRetain_n(a2, 2);
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a3, 2);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v10, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    v12 = sub_10000550C((unint64_t *)((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    swift_bridgeObjectRelease(a2);
    v13 = swift_bridgeObjectRelease(a3);
    if (v3)
      swift_willThrow(v13);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v14 = (void *)swift_slowAlloc(v10, -1);
    bzero(v14, v10);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    v12 = sub_10000550C((unint64_t *)v14, v9, a1, a2, a3);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_slowDealloc(v14, -1, -1);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a2);
  }
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  return v12;
}

uint64_t sub_10000F9C0(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100265AF8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10001B40C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerMyInfo.CodingKeys, &type metadata for ServerMyInfo.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((_QWORD *)v3 + 1);
  LOBYTE(v27) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(*(_QWORD *)&v12, v13, &v27, v5);
  if (!v2)
  {
    v14 = *((_QWORD *)v3 + 2);
    v15 = *((_QWORD *)v3 + 3);
    LOBYTE(v27) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v27, v5);
    v16 = v3[4];
    LOBYTE(v27) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v27, v5, v16);
    v17 = *((unsigned __int8 *)v3 + 40);
    LOBYTE(v27) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v27, v5);
    v27 = *((_QWORD *)v3 + 6);
    HIBYTE(v26) = 4;
    v18 = sub_100037A5C(&qword_1002625F8);
    v19 = sub_1000272B4(&qword_100263A00, &qword_1002625F8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, (char *)&v26 + 7, v5, v18, v19);
    v20 = *((_QWORD *)v3 + 7);
    v21 = *((_QWORD *)v3 + 8);
    LOBYTE(v27) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v27, v5);
    v22 = *((unsigned __int8 *)v3 + 72);
    LOBYTE(v27) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v27, v5);
    v23 = *((_QWORD *)v3 + 10);
    v24 = *((_QWORD *)v3 + 11);
    LOBYTE(v27) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v27, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10000FC08(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;

  v59 = a5;
  v51 = type metadata accessor for Location(0);
  v9 = *(_QWORD *)(v51 - 8);
  v10 = __chkstk_darwin(v51);
  v47 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v44 - v12;
  v50 = type metadata accessor for Handle(0);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100037A5C(&qword_100261DD8);
  __chkstk_darwin(v16);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = -1 << *(_BYTE *)(a1 + 32);
  v20 = ~v19;
  v21 = *(_QWORD *)(a1 + 64);
  v22 = -v19;
  v52 = a1;
  v53 = a1 + 64;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  else
    v23 = -1;
  v54 = v20;
  v55 = 0;
  v56 = v23 & v21;
  v57 = a2;
  v58 = a3;
  v46 = a1;
  swift_bridgeObjectRetain(a1);
  v45 = a3;
  swift_retain(a3);
  sub_1000A13A0((uint64_t)v18);
  v24 = sub_100037A5C(&qword_100261DD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v18, 1, v24) == 1)
  {
LABEL_5:
    swift_release(v45);
    swift_bridgeObjectRelease(v46);
    sub_100086D50(v52);
    return swift_release(v58);
  }
  v49 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
  while (1)
  {
    v28 = &v18[*(int *)(v24 + 48)];
    v49(v15, v18, v50);
    v29 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30 = v13;
    v29(v13, v28, v51);
    v31 = *v59;
    v33 = sub_10001CBC8((uint64_t)v15);
    v34 = *(_QWORD *)(v31 + 16);
    v35 = (v32 & 1) == 0;
    v36 = v34 + v35;
    if (__OFADD__(v34, v35))
      break;
    v37 = v32;
    if (*(_QWORD *)(v31 + 24) >= v36)
    {
      if ((a4 & 1) != 0)
      {
        if ((v32 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        sub_1000F63E0();
        if ((v37 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      sub_100161478(v36, a4 & 1);
      v38 = sub_10001CBC8((uint64_t)v15);
      if ((v37 & 1) != (v39 & 1))
        goto LABEL_22;
      v33 = v38;
      if ((v37 & 1) != 0)
      {
LABEL_7:
        v26 = v47;
        v13 = v30;
        v27 = v51;
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v47, v30, v51);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v30, v27);
        (*(void (**)(char *, uint64_t))(v48 + 8))(v15, v50);
        (*(void (**)(unint64_t, char *, uint64_t))(v9 + 40))(*(_QWORD *)(*v59 + 56) + *(_QWORD *)(v9 + 72) * v33, v26, v27);
        goto LABEL_8;
      }
    }
    v40 = (_QWORD *)*v59;
    *(_QWORD *)(*v59 + 8 * (v33 >> 6) + 64) |= 1 << v33;
    v49((char *)(v40[6] + *(_QWORD *)(v48 + 72) * v33), v15, v50);
    v13 = v30;
    v29((char *)(v40[7] + *(_QWORD *)(v9 + 72) * v33), v30, v51);
    v41 = v40[2];
    v42 = __OFADD__(v41, 1);
    v43 = v41 + 1;
    if (v42)
      goto LABEL_21;
    v40[2] = v43;
LABEL_8:
    sub_1000A13A0((uint64_t)v18);
    v24 = sub_100037A5C(&qword_100261DD0);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v18, 1, v24) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v50);
  __break(1u);
  return result;
}

uint64_t sub_10000FFD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(*(_QWORD *)(v0 + 32)
                                   + OBJC_IVAR____TtC13findmylocated15LocationService_connectionPool);
  v1 = sub_100037A5C(&qword_100260610);
  v2 = sub_10001013C((unint64_t *)&qword_100260618, &qword_100260610, (uint64_t)&protocol conformance descriptor for XPCClientConnectionPool<A>);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_100006B94, v3, v4);
}

uint64_t sub_100010068(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 72);
  v5 = *v1;
  *(_QWORD *)(*v1 + 80) = a1;
  swift_task_dealloc(v4);
  v3[2] = a1;
  v3 += 2;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  v3[9] = v6;
  v7 = sub_100037A5C(&qword_1002624E8);
  v8 = type metadata accessor for UUID(0);
  v3[10] = v8;
  v9 = sub_10001013C(&qword_1002624F0, &qword_1002624E8, (uint64_t)&protocol conformance descriptor for [A]);
  *v6 = v5;
  v6[1] = sub_1000058D0;
  return Sequence.asyncMap<A>(_:)(&unk_100262560, 0, v7, v8, v9);
}

uint64_t sub_10001013C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10003C1FC(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001017C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 40);
  if (v6)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v8 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager write AllDevices count:%ld into LocalStorage", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  }
  swift_release(v7);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000102CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100010310(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v4 + 2936) = v3;
  *(_BYTE *)(v4 + 3097) = a3;
  *(_BYTE *)(v4 + 3096) = a2;
  *(_QWORD *)(v4 + 2928) = a1;
  v5 = type metadata accessor for DataManager.State(0);
  *(_QWORD *)(v4 + 2944) = v5;
  *(_QWORD *)(v4 + 2952) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Device(0);
  *(_QWORD *)(v4 + 2960) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 2968) = v7;
  *(_QWORD *)(v4 + 2976) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260538) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 2984) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 2992) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 3000) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 3008) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 3016) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 3024) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 3032) = swift_task_alloc(v8);
  v9 = (_QWORD *)swift_task_alloc(dword_10026599C);
  *(_QWORD *)(v4 + 3040) = v9;
  *v9 = v4;
  v9[1] = sub_10003E89C;
  return sub_1000059F0();
}

uint64_t sub_100010420(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[111] = v1;
  v2[110] = a1;
  v2[112] = *v1;
  return swift_task_switch(sub_100019914, v1, 0);
}

uint64_t sub_100010444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v8 + 120) = v17;
  *(_QWORD *)(v8 + 128) = v18;
  *(_OWORD *)(v8 + 104) = v16;
  *(_QWORD *)(v8 + 88) = a7;
  *(_QWORD *)(v8 + 96) = a8;
  *(_QWORD *)(v8 + 72) = a4;
  *(_QWORD *)(v8 + 80) = a6;
  *(_BYTE *)(v8 + 272) = a5;
  *(_QWORD *)(v8 + 56) = a2;
  *(_QWORD *)(v8 + 64) = a3;
  *(_QWORD *)(v8 + 48) = a1;
  v9 = sub_100037A5C(&qword_100260238);
  *(_QWORD *)(v8 + 136) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Account(0);
  *(_QWORD *)(v8 + 144) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 152) = v11;
  *(_QWORD *)(v8 + 160) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C(&qword_1002650A0);
  *(_QWORD *)(v8 + 168) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  *(_QWORD *)(v8 + 176) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 184) = v14;
  *(_QWORD *)(v8 + 192) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)())swift_bridgeObjectRelease)();
  return swift_task_switch(sub_100014D00, 0, 0);
}

uint64_t sub_100010540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;
  char v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t);
  void (*v77)(uint64_t, uint64_t, uint64_t);
  void (*v78)(uint64_t, uint64_t);
  unsigned int v79;
  uint64_t v80;

  if (*(_BYTE *)(v0 + 2200) != 1)
  {
    if (qword_10025F8C0 != -1)
      swift_once(&qword_10025F8C0, sub_100098E4C);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100037A9C(v20, (uint64_t)qword_10027AB38);
    v15 = Logger.logObject.getter(v21);
    v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v15, v22))
      goto LABEL_12;
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v80 = v24;
    *(_DWORD *)v23 = 136446210;
    *(_QWORD *)(v0 + 1800) = sub_10002BA84(0xD000000000000011, 0x80000001001FD8B0, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1800, v0 + 1808, v23 + 4, v23 + 12);
    _os_log_impl((void *)&_mh_execute_header, v15, v22, "%{public}s Skipping since no need to schedule a refresh", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v19 = v23;
    goto LABEL_11;
  }
  v1 = *(_QWORD *)(v0 + 1968);
  v2 = *(_QWORD *)(v0 + 1960);
  v3 = *(_QWORD **)(v0 + 1928);
  v4 = *(_QWORD *)(v0 + 1920);
  v5 = *(_QWORD *)(v0 + 1840);
  v6 = OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  *(_QWORD *)(v0 + 2080) = OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  v7 = v5 + v6;
  swift_beginAccess(v5 + v6, v0 + 1656, 0, 0);
  v8 = (void (*)(uint64_t, uint64_t, uint64_t))v3[2];
  v8(v1, v7, v4);
  *(_DWORD *)(v0 + 2196) = enum case for LegacyRefreshSchedule.highPriorityScheduled(_:);
  v9 = (void (*)(uint64_t))v3[13];
  *(_QWORD *)(v0 + 2088) = v9;
  v9(v2);
  v10 = sub_100004EA8(&qword_100261870, (uint64_t (*)(uint64_t))&type metadata accessor for LegacyRefreshSchedule, (uint64_t)&protocol conformance descriptor for LegacyRefreshSchedule);
  v11 = dispatch thunk of static Equatable.== infix(_:_:)(v1, v2, v4, v10);
  v12 = (void (*)(uint64_t, uint64_t))v3[1];
  v12(v2, v4);
  v12(v1, v4);
  if ((v11 & 1) != 0)
  {
    if (qword_10025F8C0 != -1)
      swift_once(&qword_10025F8C0, sub_100098E4C);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100037A9C(v13, (uint64_t)qword_10027AB38);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v15, v16))
      goto LABEL_12;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v80 = v18;
    *(_DWORD *)v17 = 136446210;
    *(_QWORD *)(v0 + 1832) = sub_10002BA84(0xD000000000000011, 0x80000001001FD8B0, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1832, v0 + 1840, v17 + 4, v17 + 12);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s Skipping since we already have a high priority refresh queued", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v19 = v17;
LABEL_11:
    swift_slowDealloc(v19, -1, -1);
LABEL_12:

    v25 = *(_QWORD *)(v0 + 2056);
    v26 = *(_QWORD *)(v0 + 2016);
    v27 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    swift_release(v26);
    swift_release(v25);
LABEL_13:
    v28 = *(_QWORD *)(v0 + 1960);
    v29 = *(_QWORD *)(v0 + 1952);
    v30 = *(_QWORD *)(v0 + 1944);
    v31 = *(_QWORD *)(v0 + 1936);
    v32 = *(_QWORD *)(v0 + 1912);
    v33 = *(_QWORD *)(v0 + 1904);
    v34 = *(_QWORD *)(v0 + 1880);
    v35 = *(_QWORD *)(v0 + 1856);
    swift_task_dealloc(*(_QWORD *)(v0 + 1968));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v27);
  }
  v77 = v8;
  v78 = v12;
  v37 = *(_QWORD *)(v0 + 1912);
  v38 = *(_QWORD *)(v0 + 1904);
  v39 = *(_QWORD *)(v0 + 1896);
  v40 = *(_QWORD *)(v0 + 1888);
  v41 = *(_QWORD *)(v0 + 1840) + OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority;
  swift_beginAccess(v41, v0 + 1680, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v37, v41, v40);
  v42 = *(void (**)(uint64_t))(v39 + 104);
  v79 = enum case for LocatePriority.live(_:);
  v42(v38);
  v43 = sub_100004EA8(&qword_100261878, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
  dispatch thunk of RawRepresentable.rawValue.getter(v40, v43);
  dispatch thunk of RawRepresentable.rawValue.getter(v40, v43);
  v44 = *(_QWORD *)(v0 + 1776);
  v45 = *(_QWORD *)(v0 + 1760);
  v46 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  *(_QWORD *)(v0 + 2096) = v46;
  v46(v38, v40);
  if (v44 != v45)
  {
    v76 = v42;
    v47 = *(_QWORD *)(v0 + 1944);
    v48 = *(_QWORD *)(v0 + 1920);
    v77(*(_QWORD *)(v0 + 1952), v7, v48);
    ((void (*)(uint64_t, _QWORD, uint64_t))v9)(v47, enum case for LegacyRefreshSchedule.notScheduled(_:), v48);
    v49 = sub_100004EA8(&qword_100261880, (uint64_t (*)(uint64_t))&type metadata accessor for LegacyRefreshSchedule, (uint64_t)&protocol conformance descriptor for LegacyRefreshSchedule);
    dispatch thunk of RawRepresentable.rawValue.getter(v48, v49);
    dispatch thunk of RawRepresentable.rawValue.getter(v48, v49);
    v50 = *(_QWORD *)(v0 + 1744);
    v51 = *(_QWORD *)(v0 + 1752);
    v52 = *(_QWORD *)(v0 + 1728);
    v53 = *(_QWORD *)(v0 + 1736);
    v54 = *(_QWORD *)(v0 + 1952);
    v55 = *(_QWORD *)(v0 + 1944);
    v56 = *(_QWORD *)(v0 + 1920);
    if (v50 == v52 && v51 == v53)
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1752), 2);
      v78(v55, v56);
      v78(v54, v56);
      v42 = v76;
    }
    else
    {
      v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, *(_QWORD *)(v0 + 1752), v52, *(_QWORD *)(v0 + 1736), 0);
      swift_bridgeObjectRelease(v51);
      swift_bridgeObjectRelease(v53);
      v78(v55, v56);
      v78(v54, v56);
      v42 = v76;
      if ((v57 & 1) == 0)
        goto LABEL_23;
    }
    v58 = *(_QWORD *)(v0 + 1840) + OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands;
    swift_beginAccess(v58, v0 + 1704, 0, 0);
    if (*(_QWORD *)(*(_QWORD *)v58 + 16))
      goto LABEL_20;
LABEL_23:
    if (qword_10025F8C0 != -1)
      swift_once(&qword_10025F8C0, sub_100098E4C);
    v65 = v46;
    v66 = type metadata accessor for Logger(0);
    v67 = sub_100037A9C(v66, (uint64_t)qword_10027AB38);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v80 = v71;
      *(_DWORD *)v70 = 136446210;
      *(_QWORD *)(v0 + 1768) = sub_10002BA84(0xD000000000000011, 0x80000001001FD8B0, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1768, v0 + 1776, v70 + 4, v70 + 12);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "%{public}s Returning since there is no need to schedule a refresh", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);
    }

    v72 = *(_QWORD *)(v0 + 2056);
    v73 = *(_QWORD *)(v0 + 2016);
    v74 = *(_QWORD *)(v0 + 1912);
    v75 = *(_QWORD *)(v0 + 1888);
    v27 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    swift_release(v73);
    swift_release(v72);
    v65(v74, v75);
    goto LABEL_13;
  }
LABEL_20:
  v59 = *(_QWORD *)(v0 + 1904);
  v60 = *(_QWORD *)(v0 + 1888);
  ((void (*)(uint64_t, _QWORD, uint64_t))v42)(v59, v79, v60);
  dispatch thunk of RawRepresentable.rawValue.getter(v60, v43);
  dispatch thunk of RawRepresentable.rawValue.getter(v60, v43);
  v61 = *(_QWORD *)(v0 + 1784);
  *(_QWORD *)(v0 + 2104) = v61;
  v62 = *(_QWORD *)(v0 + 1792);
  *(_QWORD *)(v0 + 2112) = v62;
  v46(v59, v60);
  if (v61 == v62)
  {
    v63 = (_QWORD *)swift_task_alloc(dword_100261B94);
    *(_QWORD *)(v0 + 2120) = v63;
    *v63 = v0;
    v63[1] = sub_10007F450;
    return sub_100098EDC();
  }
  else
  {
    v64 = (_QWORD *)swift_task_alloc(dword_1002659A4);
    *(_QWORD *)(v0 + 2144) = v64;
    *v64 = v0;
    v64[1] = sub_10003E274;
    return sub_10000AFC8(v0 + 16);
  }
}

uint64_t sub_100010E38()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1[9] = v0;
  v2 = type metadata accessor for Friend(0);
  v1[10] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[11] = v3;
  v1[12] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Handle(0);
  v1[13] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[14] = v5;
  v1[15] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v1[16] = v6;
  *v6 = v1;
  v6[1] = sub_100014668;
  return daemon.getter();
}

uint64_t sub_100010ED4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t refreshed;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  *(_QWORD *)(v8 + 1880) = v21;
  *(_QWORD *)(v8 + 1872) = a8;
  *(_QWORD *)(v8 + 1864) = a7;
  *(_QWORD *)(v8 + 1856) = a6;
  *(_QWORD *)(v8 + 1848) = a5;
  *(_BYTE *)(v8 + 2144) = a4;
  *(_QWORD *)(v8 + 1840) = a3;
  *(_QWORD *)(v8 + 1832) = a2;
  *(_QWORD *)(v8 + 1824) = a1;
  v9 = type metadata accessor for Account(0);
  *(_QWORD *)(v8 + 1888) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 1896) = v10;
  *(_QWORD *)(v8 + 1904) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260238) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 1912) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 1920) = swift_task_alloc(v11);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 1928) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 1936) = swift_task_alloc(v12);
  v13 = type metadata accessor for ClientContext(0);
  *(_QWORD *)(v8 + 1944) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = ((uint64_t (*)(_QWORD))type metadata accessor for LegacyRefreshCommandReason)(0);
  *(_QWORD *)(v8 + 1952) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v8 + 1960) = v15;
  *(_QWORD *)(v8 + 1968) = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  refreshed = type metadata accessor for LegacyRefreshSchedule(0);
  *(_QWORD *)(v8 + 1976) = refreshed;
  v17 = *(_QWORD *)(refreshed - 8);
  *(_QWORD *)(v8 + 1984) = v17;
  *(_QWORD *)(v8 + 1992) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Handle(0);
  *(_QWORD *)(v8 + 2000) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v8 + 2008) = v19;
  *(_QWORD *)(v8 + 2016) = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002C40C, 0, 0);
}

uint64_t sub_100011058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void (*v13)(char *, uint64_t);
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  Swift::String v16;
  void *object;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  void *v22;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TimeZone(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin();
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = 0;
  v26 = 0xE000000000000000;
  v9 = static TimeZone.current.getter(v6);
  Date.init()(v9);
  v10 = TimeZone.abbreviation(for:)(v3);
  v12 = v11;
  v13 = *(void (**)(char *, uint64_t))(v1 + 8);
  v13(v3, v0);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  if (v12)
    v15 = v10;
  else
    v15 = 0;
  if (!v12)
    v12 = (void *)0xE000000000000000;
  v24._countAndFlagsBits = v15;
  v24._object = v12;
  swift_bridgeObjectRetain(v12);
  v16._countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v12);
  object = v24._object;
  String.append(_:)(v24);
  v18 = swift_bridgeObjectRelease(object);
  v19 = static TimeZone.current.getter(v18);
  Date.init()(v19);
  v20 = TimeZone.secondsFromGMT(for:)(v3);
  v13(v3, v0);
  v14(v8, v4);
  v24._countAndFlagsBits = v20;
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  return v25;
}

uint64_t sub_100011208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (*(_BYTE *)(v0 + 252) == 1)
  {
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100037A9C(v1, (uint64_t)qword_10027ABA8);
    *(_QWORD *)(v0 + 136) = v2;
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v33 = v6;
      *(_DWORD *)v5 = 136446210;
      *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD000000000000019, 0x80000001001FCF40, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 4, v5 + 12);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending %{public}s to server", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);
    }

    v8 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 120);
    v10 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 72);
    v14 = type metadata accessor for TaskPriority(0);
    *(_QWORD *)(v0 + 144) = v14;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
    *(_QWORD *)(v0 + 152) = v15;
    v15(v7, 1, 1, v14);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    *(_QWORD *)(v0 + 160) = v16;
    v16(v8, v13, v11);
    v17 = sub_100004EA8(&qword_100260638, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
    *(_QWORD *)(v0 + 168) = v17;
    LODWORD(v18) = *(_DWORD *)(v10 + 80);
    *(_DWORD *)(v0 + 248) = v18;
    v18 = v18;
    v19 = (v18 + 40) & ~v18;
    v20 = (char *)swift_allocObject(&unk_10024FFE0, v19 + v9, v18 | 7);
    *((_QWORD *)v20 + 2) = v12;
    *((_QWORD *)v20 + 3) = v17;
    *((_QWORD *)v20 + 4) = v12;
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
    *(_QWORD *)(v0 + 176) = v21;
    v21(&v20[v19], v8, v11);
    swift_retain_n(v12, 2);
    v22 = sub_10007F2A8(v7, (uint64_t)&unk_100260640, (uint64_t)v20);
    swift_release(v22);
    v23 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 184) = v23;
    *v23 = v0;
    v23[1] = sub_100009BD0;
    return daemon.getter();
  }
  else
  {
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100037A9C(v25, (uint64_t)qword_10027ABA8);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v33 = v30;
      *(_DWORD *)v29 = 136446210;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000019, 0x80000001001FCF40, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v29 + 4, v29 + 12);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s should not schedule legacyRefresh", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }

    v31 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    v32 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v31);
  }
}

uint64_t sub_100011618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = *(_QWORD *)(v0 + 216);
  v2 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 568) = sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 216);
  if (v6)
  {
    v8 = swift_slowAlloc(32, -1);
    v9 = swift_slowAlloc(32, -1);
    v50 = v9;
    *(_DWORD *)v8 = 141558531;
    *(_QWORD *)(v0 + 192) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    *(_QWORD *)(v0 + 200) = sub_10002BA84(0xD00000000000001DLL, 0x80000001001FEB00, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2048;
    *(_QWORD *)(v0 + 208) = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{private,mask.hash}s legacy locations count: %ld.", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 216));
  }

  v11 = *(_QWORD *)(*(_QWORD *)(v0 + 216) + 16);
  *(_QWORD *)(v0 + 576) = v11;
  if (v11)
  {
    v12 = sub_100037A5C(&qword_100260620);
    v13 = type metadata accessor for HandleType(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned __int8 *)(v14 + 80);
    v16 = (v15 + 32) & ~v15;
    v17 = swift_allocObject(v12, v16 + *(_QWORD *)(v14 + 72), v15 | 7);
    *(_QWORD *)(v0 + 584) = v17;
    *(_OWORD *)(v17 + 16) = xmmword_1001F35F0;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v17 + v16, enum case for HandleType.following(_:), v13);
    v18 = (_QWORD *)swift_task_alloc(dword_1002655DC);
    *(_QWORD *)(v0 + 592) = v18;
    *v18 = v0;
    v18[1] = sub_10000522C;
    return sub_1000196E8(v17, 0);
  }
  else
  {
    v20 = Logger.logObject.getter(v10);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No legacy location return from server, should not process.", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v23 = *(_QWORD *)(v0 + 552);
    v24 = *(_QWORD *)(v0 + 544);
    v25 = *(_QWORD *)(v0 + 536);
    v26 = *(_QWORD *)(v0 + 528);
    v27 = *(_QWORD *)(v0 + 520);
    v28 = *(_QWORD *)(v0 + 512);
    v29 = *(_QWORD *)(v0 + 488);
    v31 = *(_QWORD *)(v0 + 456);
    v30 = *(_QWORD *)(v0 + 464);
    v32 = *(_QWORD *)(v0 + 448);
    v33 = *(_QWORD *)(v0 + 424);
    v34 = *(_QWORD *)(v0 + 416);
    v35 = *(_QWORD *)(v0 + 408);
    v36 = *(_QWORD *)(v0 + 400);
    v37 = *(_QWORD *)(v0 + 392);
    v38 = *(_QWORD *)(v0 + 384);
    v39 = *(_QWORD *)(v0 + 376);
    v40 = *(_QWORD *)(v0 + 352);
    v41 = *(_QWORD *)(v0 + 344);
    v42 = *(_QWORD *)(v0 + 336);
    v43 = *(_QWORD *)(v0 + 328);
    v44 = *(_QWORD *)(v0 + 320);
    v45 = *(_QWORD *)(v0 + 296);
    v46 = *(_QWORD *)(v0 + 288);
    v47 = *(_QWORD *)(v0 + 264);
    v48 = *(_QWORD *)(v0 + 240);
    v49 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 560));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100011AC0(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  v4 = (char *)a1 + a2[12];
  v5 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[21] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[22] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[23] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[26]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[27] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[28] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[29] + 8));
}

uint64_t sub_100011C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 2064);
  v2 = *(_QWORD *)(v0 + 2016);
  v3 = *(_QWORD *)(v0 + 1992);
  v4 = *(_QWORD *)(v0 + 1968);
  v5 = *(_QWORD *)(v0 + 1944);
  v6 = *(_QWORD *)(v0 + 1936);
  v7 = *(_QWORD *)(v0 + 1928);
  v13 = *(_QWORD *)(v0 + 1920);
  v14 = *(_QWORD *)(v0 + 1912);
  v15 = *(_QWORD *)(v0 + 1904);
  v8 = *(_QWORD *)(v0 + 1832);
  v9 = *(_QWORD *)(v0 + 1824);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1896) + 8))(*(_QWORD *)(v0 + 1840), *(_QWORD *)(v0 + 1888));
  v10 = type metadata accessor for LocationRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  v11 = type metadata accessor for LegacyLocationServerRequestContext(0);
  sub_10003E4F4(v5, v9 + *(int *)(v11 + 20));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1800));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011D28()
{
  uint64_t v0;

  sub_1000D0754();
  *(_QWORD *)(v0 + 72) = 0;
  return swift_task_switch(sub_10003BE30, *(_QWORD *)(v0 + 64), 0);
}

uint64_t sub_100011D94()
{
  uint64_t v0;

  sub_1000D0754();
  *(_QWORD *)(v0 + 72) = 0;
  return swift_task_switch(sub_10003BED4, *(_QWORD *)(v0 + 64), 0);
}

uint64_t sub_100011E00()
{
  uint64_t v0;

  sub_1000D0754();
  *(_QWORD *)(v0 + 200) = 0;
  return swift_task_switch(sub_10003BB30, *(_QWORD *)(v0 + 192), 0);
}

uint64_t sub_100011EAC()
{
  uint64_t v0;

  sub_1000D0754();
  *(_QWORD *)(v0 + 944) = 0;
  return swift_task_switch(sub_10003B928, *(_QWORD *)(v0 + 936), 0);
}

uint64_t type metadata accessor for LocalStorageDatabase(uint64_t a1)
{
  uint64_t result;

  result = qword_1002627C0;
  if (!qword_1002627C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocalStorageDatabase);
  return result;
}

uint64_t sub_100011F54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 808);
  v3[102] = a1;
  v3[103] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[86];
    v6 = sub_100159C1C;
  }
  else
  {
    swift_release(v3[100]);
    v6 = sub_10015872C;
    v5 = 0;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100011FD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = v0[10];
  v2 = v0[45];
  v3 = v0[40];
  v4 = v0[41];
  v5 = type metadata accessor for Logger(0);
  v0[46] = sub_100037A9C(v5, (uint64_t)qword_10027ABA8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[47] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[45];
  if (v10)
  {
    v12 = v0[39];
    v13 = v0[35];
    v23 = v0[36];
    v24 = v0[41];
    v25 = v0[40];
    v14 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    v27 = v26;
    *(_DWORD *)v14 = 136446466;
    v0[8] = sub_10002BA84(0xD00000000000001BLL, 0x80000001001FDC90, &v27);
    v15 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2082;
    LocationRequest.priority.getter(v15);
    v16 = sub_100004EA8(&qword_100261E20, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v12, v13);
    v0[9] = sub_10002BA84(v17, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v19);
    v20 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v20(v11, v25);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s request priority: %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v0[41] + 8);
    v20(v0[45], v0[40]);
  }

  v0[48] = v20;
  v21 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[49] = v21;
  *v21 = v0;
  v21[1] = sub_1000096C4;
  return daemon.getter();
}

uint64_t sub_10001226C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  __n128 v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v40;
  uint64_t v41;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v41 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 88) = sub_10002BA84(0xD000000000000025, 0x80000001001FECE0, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (unint64_t *)(*(_QWORD *)(v0 + 104) + OBJC_IVAR____TtC13findmylocated11DataManager__apnsRefreshTimestamps);
  v9 = swift_beginAccess(v7, v0 + 16, 0, 0);
  if (*(_QWORD *)(*v7 + 16))
  {
    v10 = Logger.logObject.getter(v8);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Found existing trigger. Not refreshing.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
    v14 = *(_QWORD *)(v0 + 136);
    v13 = *(_QWORD *)(v0 + 144);
    v15 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 96);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v16, v15);
    swift_beginAccess(v7, v0 + 40, 33, 0);
    v17 = *v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    *v7 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = sub_10003C45C(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
      *v7 = v17;
    }
    v20 = *(_QWORD *)(v17 + 16);
    v19 = *(_QWORD *)(v17 + 24);
    if (v20 >= v19 >> 1)
    {
      v17 = sub_10003C45C(v19 > 1, v20 + 1, 1, v17);
      *v7 = v17;
    }
    v22 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 144);
    v23 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v17 + 16) = v20 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(v17+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v20, v21, v23);
    swift_endAccess(v0 + 40);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)(v0 + 136) + 16))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 128), v9);
    swift_beginAccess(v7, v0 + 64, 33, 0);
    v24 = *v7;
    v25 = swift_isUniquelyReferenced_nonNull_native(*v7);
    *v7 = v24;
    if ((v25 & 1) == 0)
    {
      v24 = sub_10003C45C(0, *(_QWORD *)(v24 + 16) + 1, 1, v24);
      *v7 = v24;
    }
    v27 = *(_QWORD *)(v24 + 16);
    v26 = *(_QWORD *)(v24 + 24);
    if (v27 >= v26 >> 1)
    {
      v24 = sub_10003C45C(v26 > 1, v27 + 1, 1, v24);
      *v7 = v24;
    }
    v28 = *(_QWORD *)(v0 + 152);
    v29 = *(_QWORD *)(v0 + 128);
    v30 = *(_QWORD *)(v0 + 136);
    v31 = *(_QWORD *)(v0 + 120);
    v40 = *(_OWORD *)(v0 + 104);
    v32 = *(_QWORD *)(v0 + 104);
    *(_QWORD *)(v24 + 16) = v27 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v30 + 32))(v24+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v27, v28, v29);
    swift_endAccess(v0 + 64);
    v33 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v31, 1, 1, v33);
    v34 = sub_100004EA8(qword_100263240, type metadata accessor for DataManager, (uint64_t)&unk_1001F5888);
    v35 = swift_allocObject(&unk_1002527D8, 48, 7);
    *(_QWORD *)(v35 + 16) = v40;
    *(_QWORD *)(v35 + 24) = v34;
    *(_OWORD *)(v35 + 32) = v40;
    swift_retain_n(v32, 2);
    v36 = sub_10005582C(v31, (uint64_t)&unk_1002635A0, v35);
    swift_release(v36);
  }
  v37 = *(_QWORD *)(v0 + 144);
  v38 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000126F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  swift_release(*(_QWORD *)(v0 + 1520));
  v1 = *(_QWORD *)(v0 + 1464);
  v2 = *(_QWORD *)(v0 + 1456);
  v3 = *(_QWORD *)(v0 + 1448);
  v4 = *(_QWORD *)(v0 + 1440);
  v5 = *(_QWORD *)(v0 + 1416);
  v6 = *(_QWORD *)(v0 + 1408);
  v7 = *(_QWORD *)(v0 + 1400);
  v8 = *(_QWORD *)(v0 + 1392);
  v9 = *(_QWORD *)(v0 + 1384);
  v11 = *(_QWORD *)(v0 + 1360);
  v12 = *(_QWORD *)(v0 + 1352);
  v13 = *(_QWORD *)(v0 + 1344);
  v14 = *(_QWORD *)(v0 + 1336);
  v15 = *(_QWORD *)(v0 + 1312);
  v16 = *(_QWORD *)(v0 + 1288);
  v17 = *(_QWORD *)(v0 + 1264);
  v18 = *(_QWORD *)(v0 + 1256);
  v19 = *(_QWORD *)(v0 + 1248);
  v20 = *(_QWORD *)(v0 + 1224);
  v21 = *(_QWORD *)(v0 + 1216);
  v22 = *(_QWORD *)(v0 + 1192);
  v23 = *(_QWORD *)(v0 + 1184);
  v24 = *(_QWORD *)(v0 + 1160);
  v25 = *(_QWORD *)(v0 + 1144);
  v26 = *(_QWORD *)(v0 + 1120);
  v27 = *(_QWORD *)(v0 + 1112);
  v28 = *(_QWORD *)(v0 + 1104);
  v29 = *(_QWORD *)(v0 + 1080);
  v30 = *(_QWORD *)(v0 + 1072);
  v31 = *(_QWORD *)(v0 + 1048);
  v32 = *(_QWORD *)(v0 + 1040);
  v33 = *(_QWORD *)(v0 + 1032);
  v34 = *(_QWORD *)(v0 + 1008);
  v35 = *(_QWORD *)(v0 + 984);
  v36 = *(_QWORD *)(v0 + 976);
  v37 = *(_QWORD *)(v0 + 952);
  swift_task_dealloc(*(_QWORD *)(v0 + 1472));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001293C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;

  v1 = v0[8];
  sub_100020530();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = v0[8];
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRetain(v4);
    v3 = v0[8];
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v6 = v0[11];
    sub_1000312EC(0, v5, 0);
    v20 = v3;
    v7 = v3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = v6;
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v22 = *(_QWORD *)(v6 + 72);
    do
    {
      v9 = v0[12];
      v10 = v0[10];
      v11 = v21(v9, v7, v10);
      v12 = Handle.identifier.getter(v11);
      v14 = v13;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_1000312EC(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v16 = _swiftEmptyArrayStorage[2];
      v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1)
        sub_1000312EC(v15 > 1, v16 + 1, 1);
      _swiftEmptyArrayStorage[2] = v16 + 1;
      v17 = &_swiftEmptyArrayStorage[2 * v16];
      v17[4] = v12;
      v17[5] = v14;
      v7 += v22;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    swift_bridgeObjectRelease(v3);
  }
  v18 = v0[6];
  v0[17] = _swiftEmptyArrayStorage;
  v0[18] = v18;
  return swift_task_switch(sub_100006D40, v18, 0);
}

uint64_t sub_100012AE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1792);
  v5 = *(_QWORD **)v2;
  v5[225] = a1;
  v5[226] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100172E30, v5[221], 0);
  swift_release(v5[223]);
  v7 = (_QWORD *)swift_task_alloc(dword_100260824);
  v5[227] = v7;
  *v7 = v5;
  v7[1] = sub_10000C2A8;
  return sub_100010420((uint64_t)(v5 + 56));
}

uint64_t sub_100012B94()
{
  id v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  uint64_t v13;

  v0 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v1 = objc_msgSend(v0, "processName");

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v13 = v2;
  v3._countAndFlagsBits = 47;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = static SystemInfo.productType.getter();
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._countAndFlagsBits = 47;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = static SystemInfo.osVersion.getter();
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  return v13;
}

uint64_t sub_100012CAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 104);
  v12 = a3[12];
  v67 = a2 + v12;
  v69 = a1 + v12;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v11;
  v13 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  v65(v69, v67, v13);
  v14 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v70 = v20[1];
  *v19 = *v20;
  v19[1] = v70;
  v21 = a3[17];
  v22 = a3[18];
  v23 = (_QWORD *)(a1 + v21);
  v24 = (_QWORD *)(a2 + v21);
  v66 = v24[1];
  *v23 = *v24;
  v23[1] = v66;
  v25 = (_QWORD *)(a1 + v22);
  v26 = (_QWORD *)(a2 + v22);
  v68 = v26[1];
  *v25 = *v26;
  v25[1] = v68;
  v27 = a3[19];
  v28 = a3[20];
  v29 = (_QWORD *)(a1 + v27);
  v30 = (_QWORD *)(a2 + v27);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = (_QWORD *)(a1 + v28);
  v33 = (_QWORD *)(a2 + v28);
  v64 = v33[1];
  *v32 = *v33;
  v32[1] = v64;
  v34 = a3[21];
  v35 = a3[22];
  v36 = (_QWORD *)(a1 + v34);
  v37 = (_QWORD *)(a2 + v34);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  v39 = (_QWORD *)(a1 + v35);
  v40 = (_QWORD *)(a2 + v35);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = a3[23];
  v43 = a3[24];
  v44 = (_QWORD *)(a1 + v42);
  v45 = (_QWORD *)(a2 + v42);
  v46 = v45[1];
  *v44 = *v45;
  v44[1] = v46;
  v47 = a1 + v43;
  v48 = a2 + v43;
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
  v49 = a3[26];
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  v50 = *(_QWORD *)(a2 + v49);
  *(_QWORD *)(a1 + v49) = v50;
  v51 = a3[27];
  v52 = a3[28];
  v53 = (_QWORD *)(a1 + v51);
  v54 = (_QWORD *)(a2 + v51);
  v55 = v54[1];
  *v53 = *v54;
  v53[1] = v55;
  v56 = (_QWORD *)(a1 + v52);
  v57 = (_QWORD *)(a2 + v52);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  v59 = a3[29];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (_QWORD *)(a2 + v59);
  v62 = v61[1];
  *v60 = *v61;
  v60[1] = v62;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v62);
  return a1;
}

uint64_t sub_100012F34(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2[9] = a1;
  v2[10] = v1;
  v3 = type metadata accessor for Insert(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100260DB8);
  v2[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[15] = v6;
  v2[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100260D48);
  v2[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[18] = v8;
  v2[19] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Delete(0);
  v2[20] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[21] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v11);
  v2[23] = swift_task_alloc(v11);
  v2[24] = swift_task_alloc(v11);
  v12 = type metadata accessor for Device(0);
  v2[25] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[26] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[27] = swift_task_alloc(v14);
  v2[28] = swift_task_alloc(v14);
  v2[29] = swift_task_alloc(v14);
  v2[30] = swift_task_alloc(v14);
  v2[31] = swift_task_alloc(v14);
  v2[32] = swift_task_alloc(v14);
  v2[33] = swift_task_alloc(v14);
  v15 = type metadata accessor for Table(0);
  v2[34] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[35] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[36] = swift_task_alloc(v17);
  v2[37] = swift_task_alloc(v17);
  return swift_task_switch(sub_1001E276C, 0, 0);
}

uint64_t sub_1000130DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v2 = v0[16];
  v1 = v0[17];
  v4 = v0[14];
  v3 = v0[15];
  v5 = v0[13];
  v31 = v0[8];
  v32 = v0[9];
  v6 = v0[6];
  v28 = v0[7];
  v7 = (uint64_t *)v0[5];
  v8 = type metadata accessor for TaskPriority(0);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v30(v1, 1, 1, v8);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9 = v6;
  v10 = v5;
  v29(v2, v9, v5);
  v11 = *(unsigned __int8 *)(v4 + 80);
  v12 = (v11 + 32) & ~v11;
  v27 = v11 | 7;
  v13 = (v3 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject(&unk_1002516E0, v13 + 8, v11 | 7);
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v26(v14 + v12, v2, v10);
  *(_QWORD *)(v14 + v13) = v28;
  swift_retain(v28);
  sub_10009B170(v1, (uint64_t)&unk_100261E30, v14);
  sub_1000087A0(v1, (uint64_t *)&unk_100265180);
  v30(v1, 1, 1, v8);
  v15 = v2;
  v16 = v2;
  v17 = v10;
  v29(v16, v31, v10);
  v18 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_100251708, v18 + 8, v27);
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  v26(v19 + v12, v15, v17);
  *(_QWORD *)(v19 + v13) = v28;
  *(_QWORD *)(v19 + v18) = v32;
  swift_retain(v28);
  sub_10009B170(v1, (uint64_t)&unk_100261E40, v19);
  sub_1000087A0(v1, (uint64_t *)&unk_100265180);
  v20 = *v7;
  v21 = sub_100037A5C(&qword_100261858);
  TaskGroup.makeAsyncIterator()(v20, v21);
  v22 = sub_100004EA8(&qword_100260638, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
  v0[19] = 0;
  v0[20] = _swiftEmptyDictionarySingleton;
  v0[18] = v22;
  v23 = v0[7];
  v24 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
  v0[21] = v24;
  *v24 = v0;
  v24[1] = sub_10003DC78;
  return TaskGroup.Iterator.next(isolation:)(v0 + 2, v23, v22, v0[10]);
}

uint64_t sub_10001334C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v34;
  char v35;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100265B00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10001BC50();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerConfig.CodingKeys, &type metadata for ServerConfig.CodingKeys, v11, v9, v10);
  v12 = *(double *)v3;
  v35 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v35 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v35, v5);
    v14 = *(unsigned __int8 *)(v3 + 16);
    v35 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v35, v5);
    v15 = *(double *)(v3 + 24);
    v35 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v15);
    v16 = *(_QWORD *)(v3 + 32);
    v35 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v35, v5);
    v17 = *(double *)(v3 + 40);
    v35 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v17);
    v18 = *(double *)(v3 + 48);
    v35 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v18);
    v19 = *(unsigned __int8 *)(v3 + 56);
    v35 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v35, v5);
    v20 = *(double *)(v3 + 64);
    v35 = 8;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v20);
    v21 = *(double *)(v3 + 72);
    v35 = 9;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v21);
    v22 = *(double *)(v3 + 80);
    v35 = 10;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v22);
    v23 = *(double *)(v3 + 88);
    v35 = 11;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v23);
    v24 = *(unsigned __int8 *)(v3 + 96);
    v35 = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v24, &v35, v5);
    v25 = *(unsigned __int8 *)(v3 + 97);
    v35 = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v35, v5);
    v26 = *(unsigned __int8 *)(v3 + 98);
    v35 = 14;
    KeyedEncodingContainer.encode(_:forKey:)(v26, &v35, v5);
    v27 = *(unsigned __int8 *)(v3 + 99);
    v35 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, &v35, v5);
    v28 = *(double *)(v3 + 104);
    v35 = 16;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v28);
    v29 = *(_QWORD *)(v3 + 112);
    v35 = 17;
    KeyedEncodingContainer.encode(_:forKey:)(v29, &v35, v5);
    v30 = *(double *)(v3 + 120);
    v35 = 18;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v30);
    v31 = *(unsigned __int8 *)(v3 + 128);
    v35 = 19;
    KeyedEncodingContainer.encode(_:forKey:)(v31, &v35, v5);
    v32 = *(double *)(v3 + 136);
    v35 = 20;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v32);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100013758@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  Class isa;
  NSString v31;
  NSString v32;
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;

  v51 = a2;
  v3 = sub_100037A5C((uint64_t *)&unk_100262930);
  __chkstk_darwin(v3);
  v52 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v55 = *(_QWORD *)(v5 - 8);
  v56 = v5;
  __chkstk_darwin(v5);
  v58 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v47 - v11;
  v13 = sub_100037A5C(&qword_1002636E0);
  v57 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FMFAPSMessage(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v20 = a1[4];
  sub_100036228(a1, v19);
  v21 = sub_10003E4B0();
  v22 = v59;
  v23 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FMFAPSMessage.CodingKeys, &type metadata for FMFAPSMessage.CodingKeys, v21, v19, v20);
  if (v22)
    goto LABEL_7;
  v24 = v58;
  v49 = v12;
  v50 = v10;
  v48 = v18;
  v59 = a1;
  v25 = KeyedDecodingContainer.decode(_:forKey:)(v23, v13);
  v26 = v57;
  v28 = v27;
  v47 = v25;
  v29 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  Locale.init(identifier:)(0x4F505F53555F6E65, 0xEB00000000584953);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v24, v56);
  objc_msgSend(v29, "setLocale:", isa);

  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v29, "setDateFormat:", v31);

  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  v33 = objc_msgSend(v29, "dateFromString:", v32);

  if (!v33)
  {
    v35 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v52, 1, 1, v54);
    goto LABEL_6;
  }
  v34 = v50;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

  v35 = (uint64_t)v52;
  v36 = v53;
  v37 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
  v38 = v34;
  v39 = v54;
  v37(v52, v38, v54);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v35, 0, 1, v39);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v35, 1, v39) == 1)
  {
LABEL_6:
    sub_1000087A0(v35, (uint64_t *)&unk_100262930);
    v43 = sub_1000F9428();
    v44 = swift_allocError(&type metadata for DataManager.Error, v43, 0, 0);
    *v45 = 0;
    swift_willThrow(v44);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v13);
    a1 = v59;
LABEL_7:
    v42 = a1;
    return sub_10002BB90(v42);
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v13);
  v40 = v49;
  v37(v49, (char *)v35, v39);
  v41 = (uint64_t)v48;
  v37(v48, v40, v39);
  sub_1000321F4(v41, v51, type metadata accessor for FMFAPSMessage);
  v42 = v59;
  return sub_10002BB90(v42);
}

uint64_t sub_100013B7C()
{
  _OWORD *v0;
  Swift::String v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  void *v18;
  _BYTE v20[32];
  uint64_t v21[18];
  _BYTE v22[160];
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[20];
  _OWORD v26[6];

  v25[0] = 0;
  v25[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(61);
  v23 = 0;
  v24 = 0xE000000000000000;
  v1._countAndFlagsBits = 0x203A6F666E49796DLL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  v2 = v0[3];
  v26[2] = v0[2];
  v26[3] = v2;
  v3 = v0[5];
  v26[4] = v0[4];
  v26[5] = v3;
  v4 = v0[1];
  v26[0] = *v0;
  v26[1] = v4;
  sub_100029F34(v26);
  v5._countAndFlagsBits = sub_100028A7C();
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  sub_100029ECC(v26);
  v7._object = (void *)0x80000001002020C0;
  v7._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v7);
  sub_10000EF6C((uint64_t)(v0 + 6), (uint64_t)v25, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v25, (uint64_t)v22, &qword_1002603B0);
  sub_10000EFB0(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
  v8 = sub_100037A5C(&qword_1002603B0);
  v9._countAndFlagsBits = String.init<A>(describing:)(v22, v8);
  v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10);
  v11._countAndFlagsBits = 0x437265767265730ALL;
  v11._object = (void *)0xEF203A6769666E6FLL;
  String.append(_:)(v11);
  sub_10000EF6C((uint64_t)(v0 + 16), (uint64_t)v22, &qword_100260858);
  sub_10000EF6C((uint64_t)v22, (uint64_t)v21, &qword_100260858);
  v12 = sub_100037A5C(&qword_100260858);
  v13._countAndFlagsBits = String.init<A>(describing:)(v21, v12);
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  v15._countAndFlagsBits = 0x507265767265730ALL;
  v15._object = (void *)0xEE00203A73666572;
  String.append(_:)(v15);
  sub_10000EF6C((uint64_t)(v0 + 25), (uint64_t)v21, &qword_100260550);
  sub_10000EF6C((uint64_t)v21, (uint64_t)v20, &qword_100260550);
  sub_100028DD4(v21);
  v16 = sub_100037A5C(&qword_100260550);
  v17._countAndFlagsBits = String.init<A>(describing:)(v20, v16);
  v18 = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v18);
  return v23;
}

_QWORD *initializeBufferWithCopyOfBuffer for FriendInfoOption(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for HandleType(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ClientOrigin(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = a3[7];
    v14 = *(_QWORD *)((char *)a2 + v12);
    *(_QWORD *)((char *)a1 + v12) = v14;
    v15 = (char *)a1 + v13;
    v16 = (char *)a2 + v13;
    v17 = type metadata accessor for Date(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v18 + 48);
    v20 = swift_bridgeObjectRetain(v14);
    if (v19(v16, 1, v17, v20))
    {
      v21 = sub_100037A5C((uint64_t *)&unk_100262930);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v23 = a3[8];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v19)((char *)a2 + v23, 1, v17))
    {
      v26 = sub_100037A5C((uint64_t *)&unk_100262930);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v24, v25, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
    }
    v27 = a3[9];
    v28 = a3[10];
    v29 = (_QWORD *)((char *)a1 + v27);
    v30 = (_QWORD *)((char *)a2 + v27);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = (char *)a1 + v28;
    v33 = (char *)a2 + v28;
    v34 = type metadata accessor for Handle(0);
    v35 = *(_QWORD *)(v34 - 8);
    v36 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v35 + 48);
    v37 = swift_bridgeObjectRetain(v31);
    if (v36(v33, 1, v34, v37))
    {
      v38 = sub_100037A5C(&qword_1002650A0);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v39 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v39) = *((_BYTE *)a2 + v39);
    v40 = a3[14];
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *((_BYTE *)a1 + v40) = *((_BYTE *)a2 + v40);
  }
  return a1;
}

uint64_t sub_100014028()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  v3 = sub_100037A5C(&qword_100260908);
  *v2 = v0;
  v2[1] = sub_100008CB0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6E656972466C6C61, 0xEC00000029287364, sub_10005D99C, v1, v3);
}

uint64_t sub_1000140DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v8;

  v3 = sub_100018A7C(qword_1002607A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v2 + 40) = v4;
  v8 = *(_OWORD *)(v2 + 24);
  *(_OWORD *)(v4 + 16) = v8;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v2 + 48) = v5;
  v6 = sub_100037A5C(&qword_1002607D8);
  *v5 = v2;
  v5[1] = sub_10003BDBC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2 + 16, v8, v3, 0xD000000000000010, 0x80000001001FD040, sub_10005B600, v4, v6);
}

uint64_t sub_1000141BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  if (v6)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager load LocalStorage All friends count:%ld", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  }
  swift_release(v8);

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10001430C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ACA0);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  if (v6)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DataManager load LocalStorage All devices count:%ld", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  }
  swift_release(v8);

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10001445C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  *(_QWORD *)(v3 + 1768) = v2;
  *(_BYTE *)(v3 + 163) = a2;
  *(_QWORD *)(v3 + 1760) = a1;
  v4 = type metadata accessor for ClientOrigin(0);
  *(_QWORD *)(v3 + 1776) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 1784) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1792) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 1800) = swift_task_alloc(v6);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100262930) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1808) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 1816) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 1824) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 1832) = swift_task_alloc(v7);
  v8 = type metadata accessor for Handle(0);
  *(_QWORD *)(v3 + 1840) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 1848) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1856) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 1864) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 1872) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 1880) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 1888) = swift_task_alloc(v10);
  v11 = type metadata accessor for Friend(0);
  *(_QWORD *)(v3 + 1896) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v3 + 1904) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1912) = swift_task_alloc(v13);
  *(_QWORD *)(v3 + 1920) = swift_task_alloc(v13);
  *(_QWORD *)(v3 + 1928) = swift_task_alloc(v13);
  v14 = type metadata accessor for HandleType(0);
  *(_QWORD *)(v3 + 1936) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v3 + 1944) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1952) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 1960) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 1968) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 1976) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 1984) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 1992) = swift_task_alloc(v16);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 2000) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 2008) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 2016) = swift_task_alloc(v17);
  return swift_task_switch(sub_10002CF28, v2, 0);
}

uint64_t sub_100014668(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 128);
  v5 = *v1;
  *(_QWORD *)(*v1 + 136) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 144) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10000C080;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100014750(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 1976);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1984) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[249] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[250] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[251] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10000B29C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t type metadata accessor for DataManager(uint64_t a1)
{
  return sub_100025C3C(a1, (uint64_t *)&unk_100262D78, (uint64_t)&nominal type descriptor for DataManager);
}

uint64_t sub_10001485C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Priority;
  uint64_t v6;
  unint64_t v7;
  uint64_t refreshed;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v1[230] = v0;
  v1[231] = *v0;
  v2 = type metadata accessor for UUID(0);
  v1[232] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  v1[233] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[234] = v4;
  v1[235] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  v1[236] = Priority;
  v6 = *(_QWORD *)(Priority - 8);
  v1[237] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[238] = swift_task_alloc(v7);
  v1[239] = swift_task_alloc(v7);
  refreshed = type metadata accessor for LegacyRefreshSchedule(0);
  v1[240] = refreshed;
  v9 = *(_QWORD *)(refreshed - 8);
  v1[241] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[242] = swift_task_alloc(v10);
  v1[243] = swift_task_alloc(v10);
  v1[244] = swift_task_alloc(v10);
  v1[245] = swift_task_alloc(v10);
  v1[246] = swift_task_alloc(v10);
  v11 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v1[247] = v11;
  *v11 = v1;
  v11[1] = sub_100014750;
  return daemon.getter();
}

uint64_t sub_10001498C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v1 = *(_QWORD *)(v0 + 2048);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AD08);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 2048);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v38 = v9;
    *(_DWORD *)v8 = 136315138;
    type metadata accessor for FriendshipAction(0);
    sub_100004EA8(&qword_1002608F8, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
    v10 = swift_bridgeObjectRetain(v7);
    v11 = Dictionary.description.getter(v10);
    v13 = v12;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 1672) = sub_10002BA84(v11, v13, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1672, v0 + 1680, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Updated friends: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 2048), 2);
  }

  v14 = *(_QWORD *)(v0 + 2016);
  v15 = *(_QWORD *)(v0 + 2008);
  v16 = *(_QWORD *)(v0 + 2000);
  v17 = *(_QWORD *)(v0 + 1992);
  v18 = *(_QWORD *)(v0 + 1984);
  v19 = *(_QWORD *)(v0 + 1976);
  v20 = *(_QWORD *)(v0 + 1968);
  v21 = *(_QWORD *)(v0 + 1960);
  v22 = *(_QWORD *)(v0 + 1952);
  v24 = *(_QWORD *)(v0 + 1928);
  v25 = *(_QWORD *)(v0 + 1920);
  v26 = *(_QWORD *)(v0 + 1912);
  v27 = *(_QWORD *)(v0 + 1888);
  v28 = *(_QWORD *)(v0 + 1880);
  v29 = *(_QWORD *)(v0 + 1872);
  v30 = *(_QWORD *)(v0 + 1864);
  v31 = *(_QWORD *)(v0 + 1856);
  v32 = *(_QWORD *)(v0 + 1832);
  v33 = *(_QWORD *)(v0 + 1824);
  v34 = *(_QWORD *)(v0 + 1816);
  v35 = *(_QWORD *)(v0 + 1808);
  v36 = *(_QWORD *)(v0 + 1800);
  v37 = *(_QWORD *)(v0 + 1792);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2024));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2048));
}

uint64_t destroy for ServerLocationInProgress(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

void sub_100014D00()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;

  v1 = *(_QWORD **)(v0 + 48);
  sub_10000F014(0);
  *v1 = v2;
  v1[1] = v3;
  v4 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (!v4)
  {
    __break(1u);
    goto LABEL_15;
  }
  v5 = v4;
  v7 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 48);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v5, "applicationIsInstalled:", v10);

  *(_BYTE *)(v9 + 16) = v11 ^ 1;
  *(_QWORD *)(v9 + 24) = static SystemInfo.uniqueDeviceID.getter();
  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 40) = static SystemInfo.deviceClass.getter();
  *(_QWORD *)(v9 + 48) = v13;
  *(_BYTE *)(v9 + 56) = 1;
  *(_QWORD *)(v9 + 64) = static SystemInfo.productType.getter();
  *(_QWORD *)(v9 + 72) = v14;
  *(_QWORD *)(v9 + 80) = static SystemInfo.osVersion.getter();
  *(_QWORD *)(v9 + 88) = v15;
  *(_QWORD *)(v9 + 96) = static SystemInfo.buildVersion.getter();
  *(_QWORD *)(v9 + 104) = v16;
  v17 = (int *)type metadata accessor for ClientContext(0);
  *(_QWORD *)(v0 + 200) = v17;
  v18 = static SystemInfo.lockState.getter();
  v19 = static Date.now.getter(v18);
  v20 = Date.timeIntervalSince1970.getter(v19);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  *(double *)(v9 + v17[13]) = v20 * 1000.0;
  v21 = sub_100011058();
  v22 = (uint64_t *)(v9 + v17[14]);
  *v22 = v21;
  v22[1] = v23;
  *(_BYTE *)(v9 + v17[15]) = 1;
  v24 = (_QWORD *)(v9 + v17[16]);
  *v24 = 3157559;
  v24[1] = 0xE300000000000000;
  v25 = static SystemInfo.platform.getter();
  v26 = (uint64_t *)(v9 + v17[17]);
  *v26 = v25;
  v26[1] = v27;
  v28 = objc_msgSend((id)objc_opt_self(GEOCountryConfiguration), "sharedConfiguration");
  if (!v28)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v29 = v28;
  v30 = objc_msgSend(v28, "countryCode");

  if (v30)
  {
    v31 = *(_QWORD *)(v0 + 168);
    v32 = *(_QWORD *)(v0 + 72);
    v33 = *(_QWORD *)(v0 + 48);
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v36 = v35;

    v37 = (uint64_t *)(v33 + v17[18]);
    *v37 = v34;
    v37[1] = v36;
    v38 = static SystemInfo.regionCode.getter();
    v39 = (uint64_t *)(v33 + v17[19]);
    *v39 = v38;
    v39[1] = v40;
    v41 = ((uint64_t (*)(void))Account.icloudIdentifier.getter)();
    v42 = (uint64_t *)(v33 + v17[20]);
    *v42 = v41;
    v42[1] = v43;
    sub_10000E37C(v32, v31, &qword_1002650A0);
    v44 = type metadata accessor for Handle(0);
    v45 = *(_QWORD *)(v44 - 8);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v31, 1, v44);
    v47 = *(_QWORD *)(v0 + 160);
    v48 = *(_QWORD *)(v0 + 168);
    v50 = *(_QWORD *)(v0 + 144);
    v49 = *(_QWORD *)(v0 + 152);
    v51 = *(_QWORD *)(v0 + 56);
    if (v46 == 1)
    {
      sub_1000087A0(*(_QWORD *)(v0 + 168), &qword_1002650A0);
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v47, v51, v50);
    }
    else
    {
      v89 = *(_QWORD *)(v0 + 160);
      v53 = Handle.identifier.getter();
      v55 = v54;
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v48, v44);
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v89, v51, v50);
      if (v55)
        goto LABEL_8;
    }
    v53 = Account.icloudIdentifier.getter(v52);
    v55 = v56;
LABEL_8:
    v57 = *(_QWORD *)(v0 + 160);
    v59 = *(_QWORD *)(v0 + 136);
    v58 = *(_QWORD *)(v0 + 144);
    v60 = *(_QWORD *)(v0 + 64);
    v61 = *(_QWORD *)(v0 + 48);
    v62 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 152) + 8);
    *(_QWORD *)(v0 + 208) = v62;
    v62(v57, v58);
    v63 = (uint64_t *)(v61 + v17[22]);
    *v63 = v53;
    v63[1] = v55;
    v64 = v61 + v17[24];
    *(_QWORD *)v64 = 0;
    *(_BYTE *)(v64 + 8) = 1;
    sub_10000E37C(v60, v59, &qword_100260238);
    v65 = type metadata accessor for RequestOrigin(0);
    v66 = *(_QWORD *)(v65 - 8);
    v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v59, 1, v65);
    v68 = *(_QWORD *)(v0 + 136);
    if (v67 == 1)
    {
      sub_1000087A0(*(_QWORD *)(v0 + 136), &qword_100260238);
    }
    else
    {
      v69 = RequestOrigin.contextBundleApp.getter();
      v71 = v70;
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v68, v65);
      if (v71)
      {
        v72 = v17[23];
        *(_QWORD *)(*(_QWORD *)(v0 + 48) + v72) = v69;
LABEL_13:
        v77 = *(_QWORD *)(v0 + 120);
        v76 = *(_QWORD *)(v0 + 128);
        v79 = *(_QWORD *)(v0 + 104);
        v78 = *(_QWORD *)(v0 + 112);
        v81 = *(_QWORD *)(v0 + 88);
        v80 = *(_QWORD *)(v0 + 96);
        v82 = *(_QWORD *)(v0 + 80);
        v83 = *(_BYTE *)(v0 + 272);
        v84 = *(_QWORD *)(v0 + 48);
        *(_QWORD *)(v84 + v72 + 8) = v71;
        *(_BYTE *)(v84 + v17[25]) = v83;
        *(_QWORD *)(v84 + v17[26]) = v82;
        v85 = (_QWORD *)(v84 + v17[27]);
        *v85 = v81;
        v85[1] = v80;
        v86 = (_QWORD *)(v84 + v17[28]);
        *v86 = v79;
        v86[1] = v78;
        v87 = (_QWORD *)(v84 + v17[29]);
        *v87 = v77;
        v87[1] = v76;
        v88 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
        *(_QWORD *)(v0 + 216) = v88;
        *v88 = v0;
        v88[1] = sub_1000094F0;
        daemon.getter();
        return;
      }
    }
    v73 = *(_QWORD *)(v0 + 48);
    sub_10000F014(3);
    v71 = v74;
    v72 = v17[23];
    *(_QWORD *)(v73 + v72) = v75;
    goto LABEL_13;
  }
LABEL_16:
  __break(1u);
}

uint64_t sub_100015154(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100260370);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10003E5A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ClientContext.CodingKeys, &type metadata for ClientContext.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v76) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v76, v5);
  if (!v2)
  {
    v14 = *((unsigned __int8 *)v3 + 16);
    LOBYTE(v76) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v76, v5);
    v15 = v3[3];
    v16 = v3[4];
    LOBYTE(v76) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v76, v5);
    v17 = v3[5];
    v18 = v3[6];
    LOBYTE(v76) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v76, v5);
    v19 = *((unsigned __int8 *)v3 + 56);
    LOBYTE(v76) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v76, v5);
    v20 = v3[8];
    v21 = v3[9];
    LOBYTE(v76) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v76, v5);
    v22 = v3[10];
    v23 = v3[11];
    LOBYTE(v76) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v76, v5);
    v24 = v3[12];
    v25 = v3[13];
    LOBYTE(v76) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v25, &v76, v5);
    v26 = (int *)type metadata accessor for ClientContext(0);
    v27 = (uint64_t)v3 + v26[12];
    LOBYTE(v76) = 8;
    v28 = type metadata accessor for SystemInfo.DeviceLockState(0);
    v29 = sub_100004EA8(&qword_100260378, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v27, &v76, v5, v28, v29);
    v30 = *(double *)((char *)v3 + v26[13]);
    LOBYTE(v76) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(&v76, v5, v30);
    v31 = (uint64_t *)((char *)v3 + v26[14]);
    v32 = *v31;
    v33 = v31[1];
    LOBYTE(v76) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v33, &v76, v5);
    v34 = *((unsigned __int8 *)v3 + v26[15]);
    LOBYTE(v76) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v34, &v76, v5);
    v35 = (uint64_t *)((char *)v3 + v26[16]);
    v36 = *v35;
    v37 = v35[1];
    LOBYTE(v76) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v36, v37, &v76, v5);
    v38 = (uint64_t *)((char *)v3 + v26[17]);
    v39 = *v38;
    v40 = v38[1];
    LOBYTE(v76) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v39, v40, &v76, v5);
    v41 = (uint64_t *)((char *)v3 + v26[18]);
    v42 = *v41;
    v43 = v41[1];
    LOBYTE(v76) = 14;
    KeyedEncodingContainer.encode(_:forKey:)(v42, v43, &v76, v5);
    v44 = (uint64_t *)((char *)v3 + v26[19]);
    v45 = *v44;
    v46 = v44[1];
    LOBYTE(v76) = 15;
    KeyedEncodingContainer.encode(_:forKey:)(v45, v46, &v76, v5);
    v47 = (uint64_t *)((char *)v3 + v26[20]);
    v48 = *v47;
    v49 = v47[1];
    LOBYTE(v76) = 16;
    KeyedEncodingContainer.encode(_:forKey:)(v48, v49, &v76, v5);
    v50 = (uint64_t *)((char *)v3 + v26[21]);
    v51 = *v50;
    v52 = v50[1];
    LOBYTE(v76) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v51, v52, &v76, v5);
    v53 = (uint64_t *)((char *)v3 + v26[22]);
    v54 = *v53;
    v55 = v53[1];
    LOBYTE(v76) = 18;
    KeyedEncodingContainer.encode(_:forKey:)(v54, v55, &v76, v5);
    v56 = (uint64_t *)((char *)v3 + v26[23]);
    v57 = *v56;
    v58 = v56[1];
    LOBYTE(v76) = 19;
    KeyedEncodingContainer.encode(_:forKey:)(v57, v58, &v76, v5);
    v59 = (uint64_t *)((char *)v3 + v26[24]);
    v60 = *v59;
    v61 = *((unsigned __int8 *)v59 + 8);
    LOBYTE(v76) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v60, v61, &v76, v5);
    v62 = *((unsigned __int8 *)v3 + v26[25]);
    LOBYTE(v76) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v62, &v76, v5);
    v76 = *(uint64_t *)((char *)v3 + v26[26]);
    HIBYTE(v75) = 22;
    v63 = sub_100037A5C(&qword_100260360);
    v64 = sub_100027310(&qword_100260380, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v76, (char *)&v75 + 7, v5, v63, v64);
    v65 = (uint64_t *)((char *)v3 + v26[27]);
    v66 = *v65;
    v67 = v65[1];
    LOBYTE(v76) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v66, v67, &v76, v5);
    v68 = (uint64_t *)((char *)v3 + v26[28]);
    v69 = *v68;
    v70 = v68[1];
    LOBYTE(v76) = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v69, v70, &v76, v5);
    v71 = (uint64_t *)((char *)v3 + v26[29]);
    v72 = *v71;
    v73 = v71[1];
    LOBYTE(v76) = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v72, v73, &v76, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001572C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027ABA8);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = swift_bridgeObjectRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 48);
    v8 = swift_slowAlloc(22, -1);
    *(_DWORD *)v8 = 134218240;
    v9 = *(_QWORD *)(v0 + 48);
    if ((v7 & 0xC000000000000001) != 0)
    {
      if (v9 < 0)
        v10 = *(_QWORD *)(v0 + 48);
      else
        v10 = v7 & 0xFFFFFFFFFFFFFF8;
      v11 = __CocoaSet.count.getter(v10);
      v9 = *(_QWORD *)(v0 + 48);
    }
    else
    {
      v11 = *(_QWORD *)(v9 + 16);
    }
    v13 = *(_QWORD *)(v0 + 64);
    swift_bridgeObjectRelease(v9);
    *(_QWORD *)(v0 + 16) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v9);
    *(_WORD *)(v8 + 12) = 2048;
    if (v13 >> 62)
    {
      v17 = *(_QWORD *)(v0 + 64);
      if (v17 < 0)
        v18 = *(_QWORD *)(v0 + 64);
      else
        v18 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
      v14 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease(v17);
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v15 = *(_QWORD *)(v0 + 64);
    swift_bridgeObjectRelease(v15);
    *(_QWORD *)(v0 + 24) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "All sessions: %ld. Active sessions: %ld", (uint8_t *)v8, 0x16u);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 64), 2);
    swift_bridgeObjectRelease_n(v12, 2);
  }

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 64));
}

uint64_t sub_10001593C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t Priority;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v2[10] = a1;
  v2[11] = v1;
  v2[12] = *v1;
  v3 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v2[14] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[15] = v5;
  v2[16] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_1002605D0);
  v2[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for RequestOrigin(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v7);
  v2[19] = swift_task_alloc(v7);
  v8 = type metadata accessor for Handle(0);
  v2[20] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[21] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v10);
  v2[23] = swift_task_alloc(v10);
  v2[24] = swift_task_alloc(v10);
  v2[25] = swift_task_alloc(v10);
  v2[26] = swift_task_alloc(v10);
  v2[27] = swift_task_alloc(v10);
  v11 = type metadata accessor for Friend(0);
  v2[28] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[29] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[30] = swift_task_alloc(v13);
  v2[31] = swift_task_alloc(v13);
  v2[32] = swift_task_alloc(v13);
  v2[33] = swift_task_alloc(v13);
  v2[34] = swift_task_alloc(v13);
  Priority = type metadata accessor for LocatePriority(0);
  v2[35] = Priority;
  v15 = *(_QWORD *)(Priority - 8);
  v2[36] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[37] = swift_task_alloc(v16);
  v2[38] = swift_task_alloc(v16);
  v2[39] = swift_task_alloc(v16);
  v17 = type metadata accessor for LocationRequest(0);
  v2[40] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v2[41] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[42] = swift_task_alloc(v19);
  v2[43] = swift_task_alloc(v19);
  v2[44] = swift_task_alloc(v19);
  v2[45] = swift_task_alloc(v19);
  return swift_task_switch(sub_100011FD0, v1, 0);
}

uint64_t sub_100015B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  _QWORD *v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 2160);
  v2 = *(_QWORD *)(v0 + 2152);
  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v3 = type metadata accessor for Logger(0);
  v50 = sub_100037A9C(v3, (uint64_t)qword_10027AB38);
  v4 = Logger.logObject.getter(v50);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v48 = *(_QWORD *)(v0 + 2104) == *(_QWORD *)(v0 + 2112);
    v52 = v1;
    v6 = swift_slowAlloc(28, -1);
    v7 = v2;
    v8 = swift_slowAlloc(64, -1);
    v54 = v8;
    *(_DWORD *)v6 = 136446722;
    *(_QWORD *)(v0 + 1816) = sub_10002BA84(0xD000000000000011, 0x80000001001FD8B0, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1816, v0 + 1824, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    v9 = Duration.description.getter(v7, v52);
    v11 = v10;
    *(_QWORD *)(v0 + 1824) = sub_10002BA84(v9, v10, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1824, v0 + 1832, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v6 + 22) = 1024;
    *(_DWORD *)(v0 + 2192) = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2192, v0 + 2196, v6 + 24, v6 + 28);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s scheduleInterval: %{public}s isHighPriority: %{BOOL}d", (uint8_t *)v6, 0x1Cu);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    v12 = v8;
    v2 = v7;
    swift_slowDealloc(v12, -1, -1);
    v13 = v6;
    v1 = v52;
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = *(_QWORD *)(v0 + 1936);
  v15 = *(_QWORD *)(v0 + 1928);
  v16 = *(_QWORD *)(v0 + 1920);
  v17 = *(_QWORD *)(v0 + 1840) + *(_QWORD *)(v0 + 2080);
  if (*(_QWORD *)(v0 + 2104) == *(_QWORD *)(v0 + 2112))
    v18 = (unsigned int *)(v0 + 2196);
  else
    v18 = (unsigned int *)&enum case for LegacyRefreshSchedule.lowPriorityScheduled(_:);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2088))(*(_QWORD *)(v0 + 1936), *v18, *(_QWORD *)(v0 + 1920));
  swift_beginAccess(v17, v0 + 1632, 33, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40))(v17, v14, v16);
  swift_endAccess(v0 + 1632);
  v19 = Duration.milliseconds.getter(v2, v1);
  if (v19 < 1)
  {
    v43 = Logger.logObject.getter(v19);
    v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v54 = v46;
      *(_DWORD *)v45 = 136446210;
      *(_QWORD *)(v0 + 1808) = sub_10002BA84(0xD000000000000011, 0x80000001001FD8B0, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1808, v0 + 1816, v45 + 4, v45 + 12);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s Refreshing legacy location now.", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }

    v47 = (_QWORD *)swift_task_alloc(dword_100261814);
    *(_QWORD *)(v0 + 2168) = v47;
    *v47 = v0;
    v47[1] = sub_10007FA30;
    return sub_100018EE8(0, v2, v1);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 2056);
    v21 = *(_QWORD *)(v0 + 2016);
    v51 = *(_QWORD *)(v0 + 1912);
    v53 = *(void (**)(uint64_t, uint64_t))(v0 + 2096);
    v49 = *(_QWORD *)(v0 + 1888);
    v22 = *(_QWORD *)(v0 + 1856);
    v23 = *(_QWORD *)(v0 + 2104) == *(_QWORD *)(v0 + 2112);
    v24 = v2;
    v25 = OBJC_IVAR____TtC13findmylocated14CommandManager_coalesceTaskList;
    type metadata accessor for WorkItemQueue.WorkItem(0);
    v26 = swift_allocObject(&unk_1002511D8, 64, 7);
    v27 = *(_OWORD *)(v0 + 1840);
    v28 = v1;
    v29 = *(_QWORD *)(v0 + 1840);
    v30 = *(_QWORD *)(v29 + v25);
    *(_QWORD *)(v26 + 16) = v24;
    *(_QWORD *)(v26 + 24) = v28;
    *(_BYTE *)(v26 + 32) = v23;
    *(_QWORD *)(v26 + 40) = v21;
    *(_OWORD *)(v26 + 48) = v27;
    swift_retain(v30);
    swift_retain(v21);
    v31 = swift_retain(v29);
    UUID.init()(v31);
    v32 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v22, &unk_100261890, v26, &unk_100261898, 0);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v32);
    swift_release(v30);
    swift_release(v32);
    v33 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    swift_release(v21);
    swift_release(v20);
    v53(v51, v49);
    v34 = *(_QWORD *)(v0 + 1960);
    v35 = *(_QWORD *)(v0 + 1952);
    v36 = *(_QWORD *)(v0 + 1944);
    v37 = *(_QWORD *)(v0 + 1936);
    v38 = *(_QWORD *)(v0 + 1912);
    v39 = *(_QWORD *)(v0 + 1904);
    v40 = *(_QWORD *)(v0 + 1880);
    v41 = *(_QWORD *)(v0 + 1856);
    swift_task_dealloc(*(_QWORD *)(v0 + 1968));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v33);
  }
}

uint64_t sub_1000160F0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  *(_BYTE *)(v3 + 440) = a2;
  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 56) = v2;
  v4 = sub_100037A5C(&qword_100265588);
  *(_QWORD *)(v3 + 64) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100263338) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 72) = swift_task_alloc(v5);
  *(_QWORD *)(v3 + 80) = swift_task_alloc(v5);
  *(_QWORD *)(v3 + 88) = swift_task_alloc(v5);
  *(_QWORD *)(v3 + 96) = swift_task_alloc(v5);
  v6 = sub_100037A5C(&qword_100263340);
  *(_QWORD *)(v3 + 104) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 112) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 120) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 128) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 136) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 144) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 152) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc(v8);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260950) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 168) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v9);
  v10 = type metadata accessor for FriendshipAction(0);
  *(_QWORD *)(v3 + 192) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v3 + 200) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v12);
  *(_QWORD *)(v3 + 216) = swift_task_alloc(v12);
  *(_QWORD *)(v3 + 224) = swift_task_alloc(v12);
  *(_QWORD *)(v3 + 232) = swift_task_alloc(v12);
  v13 = type metadata accessor for Handle(0);
  *(_QWORD *)(v3 + 240) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v3 + 248) = v14;
  *(_QWORD *)(v3 + 256) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Friend(0);
  *(_QWORD *)(v3 + 264) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v3 + 272) = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 280) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 288) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 296) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 304) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 312) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 320) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 328) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 336) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 344) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 352) = swift_task_alloc(v17);
  v18 = sub_100037A5C(&qword_100265590);
  *(_QWORD *)(v3 + 360) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v3 + 368) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 376) = swift_task_alloc(v20);
  *(_QWORD *)(v3 + 384) = swift_task_alloc(v20);
  v21 = (_QWORD *)swift_task_alloc(dword_10026559C);
  *(_QWORD *)(v3 + 392) = v21;
  *v21 = v3;
  v21[1] = sub_10003EAD0;
  v21[5] = v2;
  v22 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v21[6] = v22;
  *v22 = v21;
  v22[1] = sub_100019CFC;
  return daemon.getter();
}

uint64_t sub_1000163CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char v73;

  v1 = *(_QWORD *)(v0 + 3048);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 2968);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v3 + 16);
    v7 = swift_bridgeObjectRetain(v1);
    while (1)
    {
      v8 = v6(*(_QWORD *)(v0 + 2976), v4, *(_QWORD *)(v0 + 2960), v7);
      if ((Device.isActive.getter(v8) & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v3 + 8))(*(_QWORD *)(v0 + 2976), *(_QWORD *)(v0 + 2960));
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 3048));
        goto LABEL_6;
      }
    }
    v10 = *(_QWORD *)(v0 + 3032);
    v11 = *(_QWORD *)(v0 + 2976);
    v12 = *(_QWORD *)(v0 + 2968);
    v13 = *(_QWORD *)(v0 + 2960);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 3048));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v10, v11, v13);
    v9 = 0;
  }
  else
  {
LABEL_6:
    v9 = 1;
  }
  v14 = *(_QWORD *)(v0 + 3048);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 2968) + 56))(*(_QWORD *)(v0 + 3032), v9, 1, *(_QWORD *)(v0 + 2960));
  swift_bridgeObjectRelease(v14);
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v15 = *(_QWORD *)(v0 + 3032);
  v16 = *(_QWORD *)(v0 + 3024);
  v17 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 3056) = sub_100037A9C(v17, (uint64_t)qword_10027ACA0);
  v18 = sub_10000E37C(v15, v16, &qword_100260538);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v22 = *(_QWORD *)(v0 + 3024);
  if (!v21)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 3024), &qword_100260538);
    goto LABEL_18;
  }
  v23 = *(_QWORD *)(v0 + 3016);
  v24 = *(_QWORD *)(v0 + 2968);
  v25 = *(_QWORD *)(v0 + 2960);
  v26 = (uint8_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v26 = 67109120;
  sub_10000E37C(v22, v23, &qword_100260538);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v25);
  v28 = *(_QWORD *)(v0 + 3016);
  if ((_DWORD)v27 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 3016), &qword_100260538);
LABEL_16:
    v32 = 0;
    goto LABEL_17;
  }
  v29 = *(_QWORD *)(v0 + 2968);
  v30 = *(_QWORD *)(v0 + 2960);
  v31 = Device.isThisDevice.getter(v27);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
  if ((v31 & 1) == 0)
    goto LABEL_16;
  v32 = 1;
LABEL_17:
  sub_1000087A0(*(_QWORD *)(v0 + 3024), &qword_100260538);
  *(_DWORD *)(v0 + 3092) = v32;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3092, v0 + 3096, v26 + 4, v26 + 8);
  _os_log_impl((void *)&_mh_execute_header, v19, v20, "Current Device meDevice? %{BOOL}d", v26, 8u);
  swift_slowDealloc(v26, -1, -1);
LABEL_18:

  v33 = sub_10000E37C(*(_QWORD *)(v0 + 3032), *(_QWORD *)(v0 + 3008), &qword_100260538);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  v36 = os_log_type_enabled(v34, v35);
  v37 = *(_QWORD *)(v0 + 3008);
  if (!v36)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 3008), &qword_100260538);
    goto LABEL_26;
  }
  v38 = *(_QWORD *)(v0 + 3000);
  v39 = *(_QWORD *)(v0 + 2968);
  v40 = *(_QWORD *)(v0 + 2960);
  v41 = (uint8_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v41 = 67109120;
  sub_10000E37C(v37, v38, &qword_100260538);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v38, 1, v40);
  v43 = *(_QWORD *)(v0 + 3000);
  if ((_DWORD)v42 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 3000), &qword_100260538);
LABEL_24:
    v47 = 0;
    goto LABEL_25;
  }
  v44 = *(_QWORD *)(v0 + 2968);
  v45 = *(_QWORD *)(v0 + 2960);
  v46 = Device.isActive.getter(v42);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
  if ((v46 & 1) == 0)
    goto LABEL_24;
  v47 = 1;
LABEL_25:
  sub_1000087A0(*(_QWORD *)(v0 + 3008), &qword_100260538);
  *(_DWORD *)(v0 + 3088) = v47;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3088, v0 + 3092, v41 + 4, v41 + 8);
  _os_log_impl((void *)&_mh_execute_header, v34, v35, "Current MeDevice isActive? %{BOOL}d", v41, 8u);
  swift_slowDealloc(v41, -1, -1);
LABEL_26:
  v48 = *(_QWORD *)(v0 + 2992);
  v49 = *(_QWORD *)(v0 + 2968);
  v50 = *(_QWORD *)(v0 + 2960);
  v51 = *(_QWORD *)(v0 + 2928);

  sub_10000E37C(v51, v48, &qword_100260538);
  v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  v53 = v52(v48, 1, v50);
  v54 = *(_QWORD *)(v0 + 2992);
  if ((_DWORD)v53 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 2992), &qword_100260538);
    v55 = 0;
    v56 = 0;
  }
  else
  {
    v57 = *(_QWORD *)(v0 + 2968);
    v58 = *(_QWORD *)(v0 + 2960);
    v55 = Device.identifier.getter(v53);
    v56 = v59;
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v54, v58);
  }
  v60 = *(_QWORD *)(v0 + 2984);
  v61 = *(_QWORD *)(v0 + 2960);
  sub_10000E37C(*(_QWORD *)(v0 + 3032), v60, &qword_100260538);
  v62 = v52(v60, 1, v61);
  v63 = *(_QWORD *)(v0 + 2984);
  if ((_DWORD)v62 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 2984), &qword_100260538);
    if (!v56)
      goto LABEL_41;
    goto LABEL_37;
  }
  v64 = *(_QWORD *)(v0 + 2968);
  v65 = *(_QWORD *)(v0 + 2960);
  v66 = Device.identifier.getter(v62);
  v68 = v67;
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
  if (v56)
  {
    if (!v68)
    {
LABEL_37:
      v68 = v56;
LABEL_39:
      swift_bridgeObjectRelease(v68);
LABEL_40:
      v69 = *(_QWORD *)(v0 + 2952);
      v70 = *(_QWORD *)(v0 + 2944);
      sub_10000E37C(*(_QWORD *)(v0 + 3032), v69, &qword_100260538);
      swift_storeEnumTagMultiPayload(v69, v70, 0);
      sub_10000A37C(v69);
      sub_100024990(v69, type metadata accessor for DataManager.State);
      goto LABEL_41;
    }
    if (v55 != v66 || v56 != v68)
    {
      v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, v66, v68, 0);
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(v68);
      if ((v73 & 1) != 0)
        goto LABEL_41;
      goto LABEL_40;
    }
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(v68);
  }
  else if (v68)
  {
    goto LABEL_39;
  }
LABEL_41:
  v71 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  *(_QWORD *)(v0 + 3064) = v71;
  *v71 = v0;
  v71[1] = sub_10003E844;
  return sub_10000AFC8(v0 + 448);
}

_QWORD *initializeWithCopy for ServerLocationInProgress(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_100016A00(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v2[27] = a1;
  v2[28] = v1;
  v3 = sub_100037A5C((uint64_t *)&unk_100262930);
  v2[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100037A5C(&qword_100260600);
  v2[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MotionActivityState(0);
  v2[31] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[32] = v6;
  v2[33] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocationType(0);
  v2[34] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[35] = v8;
  v2[36] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_100261818);
  v2[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v2[38] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[39] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[40] = swift_task_alloc(v12);
  v2[41] = swift_task_alloc(v12);
  v2[42] = swift_task_alloc(v12);
  v2[43] = swift_task_alloc(v12);
  v13 = sub_100037A5C(&qword_100261820);
  v2[44] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Location(0);
  v2[45] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v2[46] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[47] = swift_task_alloc(v16);
  v2[48] = swift_task_alloc(v16);
  v2[49] = swift_task_alloc(v16);
  v2[50] = swift_task_alloc(v16);
  v2[51] = swift_task_alloc(v16);
  v2[52] = swift_task_alloc(v16);
  v2[53] = swift_task_alloc(v16);
  v17 = type metadata accessor for Handle(0);
  v2[54] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v2[55] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[56] = swift_task_alloc(v19);
  v2[57] = swift_task_alloc(v19);
  v2[58] = swift_task_alloc(v19);
  v20 = type metadata accessor for ServerLocation(0);
  v2[59] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v2[60] = v21;
  v2[61] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Friend(0);
  v2[62] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v2[63] = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[64] = swift_task_alloc(v24);
  v2[65] = swift_task_alloc(v24);
  v2[66] = swift_task_alloc(v24);
  v2[67] = swift_task_alloc(v24);
  v2[68] = swift_task_alloc(v24);
  v2[69] = swift_task_alloc(v24);
  v2[70] = swift_task_alloc(v24);
  return swift_task_switch(sub_100011618, v1, 0);
}

void sub_100016CBC()
{
  char isUniquelyReferenced_nonNull_native;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  id v13;
  NSString v14;
  unsigned int v15;
  char v16;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100016EF0(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001001FD4F0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v1 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v1)
  {
    __break(1u);
    goto LABEL_8;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, "serverFriendlyDescription");

  if (!v3)
  {
LABEL_8:
    __break(1u);
    return;
  }
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100016EF0(v4, v6, 0xD000000000000011, 0x80000001001FD510, v7);
  swift_bridgeObjectRelease(0x8000000000000000);
  v8 = sub_100012B94();
  v10 = v9;
  v11 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100016EF0(v8, v10, 0x6567412D72657355, 0xEA0000000000746ELL, v11);
  v12 = swift_bridgeObjectRelease(0x8000000000000000);
  if ((static SystemInfo.isInternalBuild.getter(v12) & 1) != 0)
  {
    v13 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend(v13, "BOOLForKey:", v14);

    if (v15)
    {
      v16 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_100016EF0(1702195828, 0xE400000000000000, 0xD000000000000018, 0x80000001001FD550, v16);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
  }
}

void sub_100016EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = v5;
  v12 = *v5;
  v14 = sub_10002FF38(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1000F5ED0();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      swift_bridgeObjectRelease(v21[1]);
      *v21 = a1;
      v21[1] = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a3;
    v24[1] = a4;
    v25 = (_QWORD *)(v20[7] + 16 * v14);
    *v25 = a1;
    v25[1] = a2;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }
    goto LABEL_14;
  }
  sub_100017064(v17, a5 & 1);
  v22 = sub_10002FF38(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

Swift::Int sub_100017064(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_100263400);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100017388(_QWORD *a1)
{
  return sub_10001739C(a1);
}

uint64_t sub_10001739C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v3 = v1;
  v5 = sub_100037A5C(&qword_10025FF28);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10001EC98();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerContext.CodingKeys, &type metadata for ServerContext.CodingKeys, v11, v9, v10);
  v12 = *(double *)v3;
  LOBYTE(v35) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = *(_QWORD *)(v3 + 16);
    LOBYTE(v35) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v35, v5);
    v15 = *(double *)(v3 + 24);
    LOBYTE(v35) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v15);
    v16 = *(_QWORD *)(v3 + 32);
    v17 = *(_QWORD *)(v3 + 40);
    LOBYTE(v35) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v35, v5);
    v18 = *(unsigned __int8 *)(v3 + 48);
    LOBYTE(v35) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v35, v5);
    v19 = *(double *)(v3 + 56);
    LOBYTE(v35) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v19);
    v20 = *(double *)(v3 + 64);
    LOBYTE(v35) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v20);
    v21 = *(double *)(v3 + 72);
    LOBYTE(v35) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v21);
    v22 = *(double *)(v3 + 80);
    LOBYTE(v35) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v22);
    v23 = *(_QWORD *)(v3 + 88);
    LOBYTE(v35) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v23, &v35, v5);
    v24 = *(double *)(v3 + 96);
    LOBYTE(v35) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v24);
    v25 = *(double *)(v3 + 104);
    LOBYTE(v35) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v25);
    v26 = *(double *)(v3 + 112);
    LOBYTE(v35) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v26);
    v27 = *(double *)(v3 + 120);
    LOBYTE(v35) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(&v35, v5, v27);
    v28 = *(_QWORD *)(v3 + 128);
    v29 = *(_QWORD *)(v3 + 136);
    LOBYTE(v35) = 14;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v29, &v35, v5);
    v30 = *(_QWORD *)(v3 + 144);
    LOBYTE(v35) = 15;
    KeyedEncodingContainer.encode(_:forKey:)(v30, &v35, v5);
    v35 = *(_QWORD *)(v3 + 152);
    HIBYTE(v34) = 16;
    v31 = sub_100037A5C(&qword_10025FF18);
    v32 = sub_10001ECDC(&qword_10025FF30, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, (char *)&v34 + 7, v5, v31, v32);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100017744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 32);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    v18 = v9;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000023, 0x80000001001FE0D0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2048;
    *(_QWORD *)(v0 + 24) = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s count:%ld", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(v7);
  }
  v11 = *(_QWORD *)(v0 + 48);
  v10 = *(_QWORD *)(v0 + 56);
  v13 = *(_QWORD *)(v0 + 32);
  v12 = *(_QWORD *)(v0 + 40);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v14 = (_QWORD *)swift_allocObject(&unk_100251BC8, 40, 7);
  v14[2] = v12;
  v14[3] = v13;
  v14[4] = v11;
  swift_bridgeObjectRetain(v13);
  v15 = swift_retain(v12);
  UUID.init()(v15);
  v16 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v10, &unk_100262540, v14, &unk_100262548, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v16);
  swift_release(v16);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000179AC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v14 = *(_OWORD *)(a1 + 384);
  v15 = *(_OWORD *)(a1 + 400);
  v12 = *(_OWORD *)(a1 + 352);
  v13 = *(_OWORD *)(a1 + 368);
  v10 = *(_OWORD *)(a1 + 320);
  v11 = *(_OWORD *)(a1 + 336);
  v8 = *(_OWORD *)(a1 + 288);
  v9 = *(_OWORD *)(a1 + 304);
  v6 = *(_OWORD *)(a1 + 256);
  v7 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 240);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    v8,
    *((_QWORD *)&v8 + 1),
    v9,
    *((_QWORD *)&v9 + 1),
    v10,
    *((_QWORD *)&v10 + 1),
    v11,
    *((_QWORD *)&v11 + 1),
    v12,
    *((_QWORD *)&v12 + 1),
    v13,
    *((_QWORD *)&v13 + 1),
    v14,
    *((_QWORD *)&v14 + 1),
    v15,
    *((_QWORD *)&v15 + 1),
    *(_QWORD *)(a1 + 416),
    *(_QWORD *)(a1 + 424));
  return a1;
}

uint64_t sub_100017A50()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;

  sub_10000EF6C(v0 + 448, v0 + 2176, &qword_1002603A8);
  v1 = sub_100049214(v0 + 2176);
  if ((_DWORD)v1 == 1
    || (memcpy((void *)(v0 + 1744), (const void *)(v0 + 2176), 0x1B0uLL),
        sub_10000EF6C(v0 + 2144, v0 + 2704, &qword_100260550),
        sub_100028DD4((uint64_t *)(v0 + 2704)),
        sub_1000179AC(v0 + 448, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8), v1 = sub_10000EF6C(v0 + 2704, v0 + 2608, &qword_100260550), !*(_QWORD *)(v0 + 2616)))
  {
    v6 = 0;
  }
  else
  {
    v2 = *(_OWORD *)(v0 + 2608);
    v3 = *(_OWORD *)(v0 + 2624);
    *(_OWORD *)(v0 + 2736) = v2;
    *(_OWORD *)(v0 + 2752) = v3;
    *(_OWORD *)(v0 + 2816) = v2;
    *(_OWORD *)(v0 + 2912) = v2;
    *(_QWORD *)(v0 + 2864) = 28494;
    *(_QWORD *)(v0 + 2872) = 0xE200000000000000;
    v4 = sub_1000394E4();
    v5 = StringProtocol.caseInsensitiveCompare<A>(_:)(v0 + 2864, &type metadata for String, &type metadata for String, v4, v4);
    sub_100017F44(v0 + 2816);
    v6 = v5 == 0;
    *(_OWORD *)(v0 + 2832) = *(_OWORD *)(v0 + 2752);
    v1 = sub_100017F44(v0 + 2832);
  }
  v7 = Logger.logObject.getter(v1);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 67240192;
    *(_DWORD *)(v0 + 3080) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3080, v0 + 3084, v9 + 4, v9 + 8);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Current Device locationEnabled? %{BOOL,public}d", v9, 8u);
    swift_slowDealloc(v9, -1, -1);
  }
  v10 = *(unsigned __int8 *)(v0 + 3096);

  if (v6 != v10)
  {
    v11 = *(_BYTE **)(v0 + 2952);
    v12 = *(_QWORD *)(v0 + 2944);
    *v11 = v6;
    swift_storeEnumTagMultiPayload(v11, v12, 3);
    sub_10000A37C((uint64_t)v11);
    sub_100024990((uint64_t)v11, type metadata accessor for DataManager.State);
  }
  v13 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  *(_QWORD *)(v0 + 3072) = v13;
  *v13 = v0;
  v13[1] = sub_10003E7EC;
  return sub_10000AFC8(v0 + 880);
}

uint64_t sub_100017C98()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  unint64_t v4;
  int v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_10000EF6C(v0 + 880, v0 + 1312, &qword_1002603A8);
  v1 = sub_100049214(v0 + 1312);
  if ((_DWORD)v1 == 1
    || (memcpy((void *)(v0 + 16), (const void *)(v0 + 1312), 0x1B0uLL),
        sub_10000EF6C(v0 + 416, v0 + 2672, &qword_100260550),
        sub_100028DD4((uint64_t *)(v0 + 2672)),
        sub_1000179AC(v0 + 880, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8), v1 = sub_10000EF6C(v0 + 2672, v0 + 2640, &qword_100260550), !*(_QWORD *)(v0 + 2648)))
  {
    v5 = 0;
  }
  else
  {
    v2 = *(_OWORD *)(v0 + 2656);
    *(_OWORD *)(v0 + 2768) = *(_OWORD *)(v0 + 2640);
    *(_OWORD *)(v0 + 2784) = v2;
    v3 = *(_OWORD *)(v0 + 2784);
    *(_OWORD *)(v0 + 2848) = v3;
    *(_OWORD *)(v0 + 2880) = v3;
    *(_QWORD *)(v0 + 2896) = 7562585;
    *(_QWORD *)(v0 + 2904) = 0xE300000000000000;
    v4 = sub_1000394E4();
    v5 = StringProtocol.caseInsensitiveCompare<A>(_:)(v0 + 2896, &type metadata for String, &type metadata for String, v4, v4) == 0;
    *(_OWORD *)(v0 + 2800) = *(_OWORD *)(v0 + 2768);
    sub_100017F44(v0 + 2800);
    v1 = sub_100017F44(v0 + 2848);
  }
  v6 = Logger.logObject.getter(v1);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67240192;
    *(_DWORD *)(v0 + 3084) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3084, v0 + 3088, v8 + 4, v8 + 8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Current Device newFriendshipRequestsAllowed? %{BOOL,public}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }
  v9 = *(unsigned __int8 *)(v0 + 3097);

  if (v5 != v9)
  {
    v10 = *(_BYTE **)(v0 + 2952);
    v11 = *(_QWORD *)(v0 + 2944);
    *v10 = v5;
    swift_storeEnumTagMultiPayload(v10, v11, 4);
    sub_10000A37C((uint64_t)v10);
    sub_100024990((uint64_t)v10, type metadata accessor for DataManager.State);
  }
  v12 = *(_QWORD *)(v0 + 3032);
  v13 = *(_QWORD *)(v0 + 3024);
  v14 = *(_QWORD *)(v0 + 3016);
  v15 = *(_QWORD *)(v0 + 3008);
  v16 = *(_QWORD *)(v0 + 3000);
  v17 = *(_QWORD *)(v0 + 2992);
  v18 = *(_QWORD *)(v0 + 2984);
  v19 = *(_QWORD *)(v0 + 2976);
  v20 = *(_QWORD *)(v0 + 2952);
  sub_1000087A0(v12, &qword_100260538);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017F44(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100017F6C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 176) = sub_100017FAC();
  return swift_task_switch(sub_10000DDA4, 0, 0);
}

_QWORD *sub_100017FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  void (*v112)(char *, uint64_t, uint64_t, uint64_t);
  char *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[24];
  uint64_t v122[3];
  _QWORD *v123;
  char v124[8];
  _QWORD *v125;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v117 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v95 - v5;
  v7 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  __chkstk_darwin(v7);
  v103 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100037A5C(&qword_100262438);
  v9 = __chkstk_darwin(v110);
  v109 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v108 = (uint64_t)&v95 - v12;
  v13 = __chkstk_darwin(v11);
  v107 = (char *)&v95 - v14;
  __chkstk_darwin(v13);
  v106 = (char *)&v95 - v15;
  v125 = &_swiftEmptySetSingleton;
  v98 = v0;
  v16 = (uint64_t *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_subscriptions);
  swift_beginAccess(v16, v124, 0, 0);
  v17 = *v16;
  v18 = swift_bridgeObjectRetain(v17);
  v19 = sub_1000A4B2C(v18);
  v97 = 0;
  swift_bridgeObjectRelease(v17);
  v100 = v19[2];
  if (!v100)
  {
    swift_bridgeObjectRelease(v19);
    goto LABEL_49;
  }
  v101 = (char *)(v19 + 4);
  v96 = v19;
  swift_bridgeObjectRetain(v19);
  v20 = 0;
  v104 = v2;
  v118 = v6;
  v105 = v1;
  while (1)
  {
    v102 = v20;
    v21 = *(_QWORD *)&v101[8 * v20];
    v22 = *(_QWORD *)(v21 + 16);
    v114 = v21;
    if (v22)
      break;
    swift_bridgeObjectRetain(v21);
    v46 = _swiftEmptyArrayStorage;
    v49 = _swiftEmptyArrayStorage[2];
    v123 = _swiftEmptyArrayStorage;
    if (v49)
    {
LABEL_31:
      swift_bridgeObjectRetain(v46);
      v55 = 0;
      do
      {
        v56 = v46[v55++ + 4];
        v57 = swift_bridgeObjectRetain(v56);
        sub_10015D05C(v57);
      }
      while (v49 != v55);
      swift_bridgeObjectRelease(v46);
    }
    swift_bridgeObjectRelease(v46);
    v115 = v123[2];
    v111 = (unint64_t)v123;
    if (v115)
    {
      v58 = 0;
      v113 = (char *)v123 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      v119 = *(_QWORD *)(v2 + 72);
      v59 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
      v60 = v118;
      v61 = v103;
      v62 = v2;
      v59(v103, v113, v1);
      while (1)
      {
        v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
        v67(v61, 0, 1, v1);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v61, 1, v1) == 1)
          break;
        v112 = v67;
        v116 = (_QWORD *)v58;
        (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v60, v61, v1);
        v68 = v125;
        v69 = v125[5];
        v70 = sub_100018A7C(&qword_1002676A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        swift_bridgeObjectRetain(v68);
        v71 = dispatch thunk of Hashable._rawHashValue(seed:)(v69, v1, v70);
        v72 = -1 << *((_BYTE *)v68 + 32);
        v73 = v71 & ~v72;
        if (((*(_QWORD *)((char *)v68 + ((v73 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v73) & 1) != 0)
        {
          v74 = ~v72;
          while (1)
          {
            v75 = v117;
            v59(v117, (char *)(v68[6] + v73 * v119), v1);
            v76 = sub_100018A7C(&qword_100261E80, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v77 = dispatch thunk of static Equatable.== infix(_:_:)(v75, v118, v1, v76);
            v66 = *(void (**)(char *, uint64_t))(v2 + 8);
            v66(v75, v1);
            if ((v77 & 1) != 0)
              break;
            v73 = (v73 + 1) & v74;
            v2 = v62;
            if (((*(_QWORD *)((char *)v68 + ((v73 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v73) & 1) == 0)
              goto LABEL_36;
          }
          swift_bridgeObjectRelease(v68);
          v64 = v118;
        }
        else
        {
LABEL_36:
          swift_bridgeObjectRelease(v68);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v125);
          v65 = (uint64_t)v117;
          v64 = v118;
          v59(v117, v118, v1);
          v123 = v125;
          sub_10001CD90(v65, v73, isUniquelyReferenced_nonNull_native);
          v125 = v123;
          swift_bridgeObjectRelease(0x8000000000000000);
          v66 = *(void (**)(char *, uint64_t))(v2 + 8);
        }
        v58 = (uint64_t)v116 + 1;
        v66(v64, v1);
        v60 = v64;
        v61 = v103;
        v2 = v62;
        if (v58 == v115)
        {
          v112(v103, 1, 1, v1);
          break;
        }
        v59(v103, &v113[v119 * v58], v1);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v103, 1, 1, v1);
    }
    v20 = v102 + 1;
    swift_bridgeObjectRelease(v114);
    swift_bridgeObjectRelease(v111);
    if (v20 == v100)
    {
      swift_bridgeObjectRelease_n(v96, 2);
LABEL_49:
      v78 = (uint64_t *)(v98 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions);
      swift_beginAccess(v98 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions, &v123, 0, 0);
      v79 = *v78;
      v80 = swift_bridgeObjectRetain(v79);
      v81 = sub_1000A7E08(v80);
      swift_bridgeObjectRelease(v79);
      sub_1000A1FA0((uint64_t)v81);
      swift_bridgeObjectRelease(v81);
      if (qword_10025F8D8 != -1)
        goto LABEL_59;
      goto LABEL_50;
    }
  }
  v123 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v21);
  sub_1001E78E8(0, v22, 0);
  v24 = sub_1000CA424(v21);
  v25 = 0;
  v26 = v21 + 64;
  v27 = *(_BYTE *)(v21 + 32);
  v111 = v23;
  v99 = v21 + 88;
  v112 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v22;
  v113 = (char *)(v21 + 64);
  while ((v24 & 0x8000000000000000) == 0 && v24 < 1 << v27)
  {
    v30 = (unint64_t)v24 >> 6;
    if ((*(_QWORD *)(v26 + 8 * ((unint64_t)v24 >> 6)) & (1 << v24)) == 0)
      goto LABEL_54;
    if (*(_DWORD *)(v21 + 36) != (_DWORD)v23)
      goto LABEL_55;
    v119 = 1 << v24;
    v115 = v25;
    v116 = v23;
    v31 = v110;
    v32 = *(int *)(v110 + 48);
    v33 = *(_QWORD *)(v21 + 48);
    v34 = type metadata accessor for Handle(0);
    v35 = *(_QWORD **)(v34 - 8);
    v36 = (void (*)(char *, uint64_t, uint64_t))v35[2];
    v37 = (uint64_t)v106;
    v36(v106, v33 + v35[9] * v24, v34);
    v38 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v24);
    *(_QWORD *)(v37 + v32) = v38;
    v39 = v107;
    v36(v107, v37, v34);
    *(_QWORD *)&v39[*(int *)(v31 + 48)] = v38;
    v40 = (uint64_t)v39;
    v41 = v108;
    sub_10000EF6C(v40, v108, &qword_100262438);
    swift_bridgeObjectRetain_n(v38, 2);
    sub_1000087A0(v37, &qword_100262438);
    v42 = *(int *)(v31 + 48);
    v43 = v109;
    v36(v109, v41, v34);
    v44 = *(_QWORD *)(v41 + v42);
    *(_QWORD *)&v43[v42] = v44;
    v45 = (void (*)(char *, uint64_t))v35[1];
    swift_bridgeObjectRetain(v44);
    v45(v43, v34);
    sub_1000087A0(v41, &qword_100262438);
    v46 = v123;
    if ((swift_isUniquelyReferenced_nonNull_native(v123) & 1) == 0)
    {
      sub_1001E78E8(0, v46[2] + 1, 1);
      v46 = v123;
    }
    v48 = v46[2];
    v47 = v46[3];
    v49 = v48 + 1;
    v1 = v105;
    v21 = v114;
    if (v48 >= v47 >> 1)
    {
      sub_1001E78E8(v47 > 1, v48 + 1, 1);
      v46 = v123;
    }
    v46[2] = v49;
    v46[v48 + 4] = v44;
    v27 = *(_BYTE *)(v21 + 32);
    v28 = 1 << v27;
    if (v24 >= 1 << v27)
      goto LABEL_56;
    v26 = (uint64_t)v113;
    v50 = *(_QWORD *)&v113[8 * v30];
    if ((v50 & v119) == 0)
      goto LABEL_57;
    if (*(_DWORD *)(v21 + 36) != (_DWORD)v116)
      goto LABEL_58;
    v51 = v50 & (-2 << (v24 & 0x3F));
    if (v51)
    {
      v28 = __clz(__rbit64(v51)) | v24 & 0xFFFFFFFFFFFFFFC0;
      v2 = v104;
      v29 = v112;
    }
    else
    {
      v52 = v30 + 1;
      v53 = (v28 + 63) >> 6;
      v2 = v104;
      v29 = v112;
      if (v30 + 1 < v53)
      {
        v54 = *(_QWORD *)&v113[8 * v52];
        if (!v54)
        {
          v52 = v30 + 2;
          if (v30 + 2 >= v53)
            goto LABEL_8;
          v54 = *(_QWORD *)&v113[8 * v52];
          if (!v54)
          {
            while (v53 - 3 != v30)
            {
              v54 = *(_QWORD *)(v99 + 8 * v30++);
              if (v54)
              {
                v52 = v30 + 2;
                goto LABEL_23;
              }
            }
            goto LABEL_8;
          }
        }
LABEL_23:
        v28 = __clz(__rbit64(v54)) + (v52 << 6);
      }
    }
LABEL_8:
    v25 = v115 + 1;
    v23 = (_QWORD *)v111;
    v24 = v28;
    if ((void (*)(char *, uint64_t, uint64_t, uint64_t))(v115 + 1) == v29)
    {
      v123 = _swiftEmptyArrayStorage;
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  swift_once(&qword_10025F8D8, sub_1000A7D34);
LABEL_50:
  v82 = type metadata accessor for Logger(0);
  v83 = sub_100037A9C(v82, (uint64_t)qword_10027ABA8);
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v84, v85))
  {
    v86 = (uint8_t *)swift_slowAlloc(12, -1);
    v87 = swift_slowAlloc(32, -1);
    v122[0] = v87;
    *(_DWORD *)v86 = 136446210;
    swift_beginAccess(&v125, v121, 0, 0);
    v88 = v125;
    v89 = sub_100018A7C(&qword_1002676A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v90 = swift_bridgeObjectRetain(v88);
    v91 = Set.description.getter(v90, v1, v89);
    v93 = v92;
    swift_bridgeObjectRelease(v88);
    v120 = sub_10002BA84(v91, v93, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v86 + 4, v86 + 12);
    swift_bridgeObjectRelease(v93);
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Active clients: %{public}s", v86, 0xCu);
    swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    swift_slowDealloc(v86, -1, -1);
  }

  swift_beginAccess(&v125, v122, 0, 0);
  return v125;
}

uint64_t sub_100018A7C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100018ABC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_100037A5C(&qword_100262910);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100260D48);
  v2[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[15] = v6;
  v2[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Table(0);
  v2[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[18] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[19] = swift_task_alloc(v9);
  v2[20] = swift_task_alloc(v9);
  v10 = type metadata accessor for HandleType(0);
  v2[21] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[22] = v11;
  v2[23] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003BBA0, 0, 0);
}

uint64_t sub_100018BAC()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 88);
    v28 = _swiftEmptyArrayStorage;
    sub_100018EBC(0, v2, 0);
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v27 = *(_QWORD *)(v4 + 72);
    v6 = v4;
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v8 = _swiftEmptyArrayStorage;
    do
    {
      v9 = *(_QWORD *)(v0 + 96);
      v10 = *(_QWORD *)(v0 + 80);
      v11 = v7(v9, v5, v10);
      Friend.handle.getter(v11);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v10);
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_100018EBC(0, v8[2] + 1, 1);
        v8 = v28;
      }
      v13 = v8[2];
      v12 = v8[3];
      if (v13 >= v12 >> 1)
      {
        sub_100018EBC(v12 > 1, v13 + 1, 1);
        v8 = v28;
      }
      v14 = *(_QWORD *)(v0 + 120);
      v15 = *(_QWORD *)(v0 + 104);
      v8[2] = v13 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v13, v14, v15);
      v28 = v8;
      v5 += v27;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
    v8 = _swiftEmptyArrayStorage;
  }
  v16 = v8[2];
  swift_bridgeObjectRelease(v8);
  if (v16)
  {
    swift_release(*(_QWORD *)(v0 + 152));
  }
  else
  {
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100037A9C(v17, (uint64_t)qword_10027ABA8);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter();
    v21 = os_log_type_enabled(v19, v20);
    v22 = *(_QWORD *)(v0 + 152);
    if (v21)
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = (_QWORD *)swift_slowAlloc(32, -1);
      v28 = v24;
      *(_DWORD *)v23 = 136446210;
      *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD00000000000001DLL, 0x80000001001FCF20, (uint64_t *)&v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v23 + 4, v23 + 12);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Not %{public}s to server since no followings", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    swift_release(v22);

  }
  v25 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v16 != 0);
}

uint64_t sub_100018EBC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100032470(a1, a2, a3, (_QWORD *)*v3, &qword_100262658, (uint64_t (*)(_QWORD))&type metadata accessor for Handle);
  *v3 = result;
  return result;
}

uint64_t sub_100018EE8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t refreshed;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Priority;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;

  *(_QWORD *)(v4 + 928) = v3;
  *(_QWORD *)(v4 + 920) = a3;
  *(_QWORD *)(v4 + 912) = a2;
  *(_BYTE *)(v4 + 1780) = a1;
  v5 = type metadata accessor for MotionActivityState(0);
  *(_QWORD *)(v4 + 936) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 944) = v6;
  *(_QWORD *)(v4 + 952) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocationType(0);
  *(_QWORD *)(v4 + 960) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 968) = v8;
  *(_QWORD *)(v4 + 976) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_100261818);
  *(_QWORD *)(v4 + 984) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  *(_QWORD *)(v4 + 992) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v4 + 1000) = v11;
  *(_QWORD *)(v4 + 1008) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Location(0);
  *(_QWORD *)(v4 + 1016) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v4 + 1024) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 1032) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 1040) = swift_task_alloc(v14);
  v15 = sub_100037A5C(&qword_100261820);
  *(_QWORD *)(v4 + 1048) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LegacyLocation(0);
  *(_QWORD *)(v4 + 1056) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v4 + 1064) = v17;
  *(_QWORD *)(v4 + 1072) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100037A5C(&qword_100260950);
  *(_QWORD *)(v4 + 1080) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ServerLocation(0);
  *(_QWORD *)(v4 + 1088) = v19;
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v4 + 1096) = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 1104) = swift_task_alloc(v21);
  *(_QWORD *)(v4 + 1112) = swift_task_alloc(v21);
  v22 = sub_100037A5C((uint64_t *)&unk_100265180);
  *(_QWORD *)(v4 + 1120) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  refreshed = type metadata accessor for LegacyRefreshSchedule(0);
  *(_QWORD *)(v4 + 1128) = refreshed;
  v24 = *(_QWORD *)(refreshed - 8);
  *(_QWORD *)(v4 + 1136) = v24;
  *(_QWORD *)(v4 + 1144) = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for LocationEndpoint(0);
  *(_QWORD *)(v4 + 1152) = v25;
  *(_QWORD *)(v4 + 1160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ClientOrigin(0);
  *(_QWORD *)(v4 + 1168) = v26;
  v27 = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(v4 + 1176) = v27;
  *(_QWORD *)(v4 + 1184) = swift_task_alloc((*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100037A5C(&qword_1002605D0);
  *(_QWORD *)(v4 + 1192) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v28 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  *(_QWORD *)(v4 + 1200) = Priority;
  v30 = *(_QWORD *)(Priority - 8);
  *(_QWORD *)(v4 + 1208) = v30;
  *(_QWORD *)(v4 + 1216) = swift_task_alloc((*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100037A5C(&qword_100260580);
  *(_QWORD *)(v4 + 1224) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v31 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Account(0);
  *(_QWORD *)(v4 + 1232) = v32;
  v33 = *(_QWORD *)(v32 - 8);
  *(_QWORD *)(v4 + 1240) = v33;
  v34 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 1248) = swift_task_alloc(v34);
  *(_QWORD *)(v4 + 1256) = swift_task_alloc(v34);
  *(_QWORD *)(v4 + 1264) = swift_task_alloc(v34);
  v35 = type metadata accessor for RequestOrigin(0);
  *(_QWORD *)(v4 + 1272) = v35;
  v36 = *(_QWORD *)(v35 - 8);
  *(_QWORD *)(v4 + 1280) = v36;
  *(_QWORD *)(v4 + 1288) = swift_task_alloc((*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for LegacyRefreshCommandReason(0);
  *(_QWORD *)(v4 + 1296) = v37;
  v38 = *(_QWORD *)(v37 - 8);
  *(_QWORD *)(v4 + 1304) = v38;
  *(_QWORD *)(v4 + 1312) = swift_task_alloc((*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for LocationRequest(0);
  *(_QWORD *)(v4 + 1320) = v39;
  v40 = *(_QWORD *)(v39 - 8);
  *(_QWORD *)(v4 + 1328) = v40;
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 1336) = swift_task_alloc(v41);
  *(_QWORD *)(v4 + 1344) = swift_task_alloc(v41);
  *(_QWORD *)(v4 + 1352) = swift_task_alloc(v41);
  *(_QWORD *)(v4 + 1360) = swift_task_alloc(v41);
  v42 = type metadata accessor for Handle(0);
  *(_QWORD *)(v4 + 1368) = v42;
  v43 = *(_QWORD *)(v42 - 8);
  *(_QWORD *)(v4 + 1376) = v43;
  v44 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 1384) = swift_task_alloc(v44);
  *(_QWORD *)(v4 + 1392) = swift_task_alloc(v44);
  *(_QWORD *)(v4 + 1400) = swift_task_alloc(v44);
  *(_QWORD *)(v4 + 1408) = swift_task_alloc(v44);
  *(_QWORD *)(v4 + 1416) = swift_task_alloc(v44);
  v45 = type metadata accessor for Friend(0);
  *(_QWORD *)(v4 + 1424) = v45;
  v46 = *(_QWORD *)(v45 - 8);
  *(_QWORD *)(v4 + 1432) = v46;
  v47 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 1440) = swift_task_alloc(v47);
  *(_QWORD *)(v4 + 1448) = swift_task_alloc(v47);
  *(_QWORD *)(v4 + 1456) = swift_task_alloc(v47);
  *(_QWORD *)(v4 + 1464) = swift_task_alloc(v47);
  *(_QWORD *)(v4 + 1472) = swift_task_alloc(v47);
  v48 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v4 + 1480) = v48;
  *v48 = v4;
  v48[1] = sub_100008A14;
  return daemon.getter();
}

uint64_t sub_100019360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33[14];

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = type metadata accessor for Logger(0);
  sub_100037A9C(v4, (uint64_t)qword_10027ABA8);
  swift_bridgeObjectRetain_n(v2, 2);
  swift_bridgeObjectRetain_n(v3, 2);
  swift_bridgeObjectRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v31 = v7;
    v8 = *(_QWORD *)(v0 + 80);
    v9 = swift_slowAlloc(32, -1);
    v32 = swift_slowAlloc(32, -1);
    v33[0] = v32;
    *(_DWORD *)v9 = 134218498;
    if (v8 >> 62)
    {
      v29 = *(_QWORD *)(v0 + 80);
      if (v29 < 0)
        v30 = *(_QWORD *)(v0 + 80);
      else
        v30 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
      v10 = _CocoaArrayWrapper.endIndex.getter(v30);
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease(v12);
    *(_QWORD *)(v0 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v9 + 12) = 2082;
    v14 = swift_bridgeObjectRetain(v11);
    v15 = Array.description.getter(v14);
    v17 = v16;
    swift_bridgeObjectRelease(v11);
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v15, v17, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease_n(v11, 2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v9 + 22) = 2048;
    v18 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRelease(v13);
    *(_QWORD *)(v0 + 40) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v31, "Send locations update to clients[%ld]: %{public}s updates count:%ld", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {
    v19 = *(_QWORD *)(v0 + 104);
    v20 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 56);

    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease_n(v20, 2);
    swift_bridgeObjectRelease_n(v21, 2);
  }
  v22 = *(_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v22 + 16))
  {
    v23 = *(_QWORD *)(v0 + 80);
    v24 = *(_QWORD *)(v0 + 64);
    v25 = *(_QWORD *)(v0 + 48);
    sub_1000A4600(*(_QWORD *)(v0 + 56));
    v26 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 120) = v26;
    v26[2] = v23;
    v26[3] = v22;
    v26[4] = v25;
    v26[5] = v24;
    v27 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(_QWORD *)(v0 + 128) = v27;
    *v27 = v0;
    v27[1] = sub_1000C6310;
    v33[12] = (uint64_t)&type metadata for () + 8;
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000196E8(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v3 + 688) = v2;
  *(_BYTE *)(v3 + 912) = a2;
  *(_QWORD *)(v3 + 680) = a1;
  *(_QWORD *)(v3 + 696) = *v2;
  v4 = type metadata accessor for Date(0);
  *(_QWORD *)(v3 + 704) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 712) = v5;
  *(_QWORD *)(v3 + 720) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HandleType(0);
  *(_QWORD *)(v3 + 728) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 736) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 744) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 752) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 760) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 768) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 776) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 784) = swift_task_alloc(v8);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v3 + 792) = v9;
  *v9 = v3;
  v9[1] = sub_100019ECC;
  return daemon.getter();
}

uint64_t sub_1000197D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;

  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ACA0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 1800);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager load LocalStorage serverSettings", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_release(v6);

  sub_10002C158(v0 + 1312, v0 + 16);
  sub_10002C158(v0 + 16, *(_QWORD *)(v0 + 1760));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000198DC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 112, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 112));
}

uint64_t sub_100019914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v8;

  v3 = sub_100018A7C(qword_1002607A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v2 + 904) = v4;
  v8 = *(_OWORD *)(v2 + 888);
  *(_OWORD *)(v4 + 16) = v8;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v2 + 912) = v5;
  v6 = sub_100037A5C(&qword_1002603A8);
  *v5 = v2;
  v5[1] = sub_10000C018;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2 + 16, v8, v3, 0xD000000000000014, 0x80000001001FD060, sub_10005D1D0, v4, v6);
}

uint64_t sub_1000199F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100019A24(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100019A24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v3 = sub_100037A5C(&qword_1002659F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100036228(a1, v7);
  v9 = sub_100019BD0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerPreferences.CodingKeys, &type metadata for ServerPreferences.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_10002BB90(a1);
  }
  else
  {
    v17 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    v12 = v11;
    v16 = 1;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v14);
    sub_10002BB90(a1);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

unint64_t sub_100019BD0()
{
  unint64_t result;

  result = qword_1002659F8;
  if (!qword_1002659F8)
  {
    result = swift_getWitnessTable(&unk_1001F9818, &type metadata for ServerPreferences.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002659F8);
  }
  return result;
}

uint64_t sub_100019C14(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  *(_QWORD *)(*v1 + 56) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  *v6 = v5;
  v6[1] = sub_10000BB18;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100019CFC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  *(_QWORD *)(*v1 + 56) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  *v6 = v5;
  v6[1] = sub_10000B5F4;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100019DE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1776);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1784) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1792) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  *v6 = v5;
  v6[1] = sub_100012AE0;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100019ECC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 792);
  v5 = *v1;
  *(_QWORD *)(*v1 + 800) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 808) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for LocalStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002609B0, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  *v6 = v5;
  v6[1] = sub_100011F54;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t type metadata accessor for LocalStorageService()
{
  return objc_opt_self(_TtC13findmylocated19LocalStorageService);
}

uint64_t sub_100019FD4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  sub_10002BB90(v0 + 4);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10001A008(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = sub_100037A5C(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 40) & ~v4;
  v6 = v4 | 7;
  v7 = ((*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v7, v6);
}

uint64_t sub_10001A08C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10001A0C0(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  _QWORD *v3;

  swift_unknownObjectRelease(v3[2]);
  swift_release(v3[4]);
  a1(v3[5]);
  a2(v3[6]);
  return swift_deallocObject(v3, a3, 7);
}

uint64_t sub_10001A118()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001A144()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001A170()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10001A1AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001A1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for Device(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + v0;
  v8 = (((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v7 + 8));
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_10001A254()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001A280(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t destroy for RespondToInviteRequest(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_bridgeObjectRelease(*a1);
  v3 = a1[2];
  if (v3 >> 60 != 15)
    return sub_100037AB4(a1[1], v3);
  return result;
}

uint64_t sub_10001A2F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  void *object;
  _QWORD v14[2];
  uint64_t v15;
  unint64_t v16;

  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  v15 = 540697705;
  v16 = 0xE400000000000000;
  swift_bridgeObjectRetain(a2);
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(a2);
  v9._countAndFlagsBits = 0x3A7375746174730ALL;
  v9._object = (void *)0xE800000000000000;
  String.append(_:)(v9);
  v14[0] = a3;
  v14[1] = a4;
  swift_bridgeObjectRetain(a4);
  v10 = sub_100037A5C(&qword_10025FF00);
  v11._countAndFlagsBits = String.init<A>(describing:)(v14, v10);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  return v15;
}

uint64_t sub_10001A3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s13findmylocated22RespondToInviteRequestVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  v4 = a2 + 1;
  v5 = a2[2];
  swift_bridgeObjectRetain(v3);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  }
  else
  {
    v6 = *v4;
    sub_10001A484(*v4, v5);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t sub_10001A484(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001A4CC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_QWORD *sub_10001A4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t, __n128);
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v50 = type metadata accessor for Handle(0);
  v4 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Friend(0);
  v51 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v44 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v36 - v11;
  v13 = __chkstk_darwin(v10);
  v39 = (char *)&v36 - v14;
  __chkstk_darwin(v13);
  v38 = (char *)&v36 - v15;
  v46 = *(_QWORD *)(a1 + 16);
  if (!v46)
    return _swiftEmptyArrayStorage;
  v42 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v16 = *(_QWORD *)(a2 + 16);
  v40 = *(_QWORD *)(v4 + 72);
  v37 = a1;
  v17 = a1;
  v18 = v16;
  swift_bridgeObjectRetain(v17);
  v19 = 0;
  v20 = _swiftEmptyArrayStorage;
  v43 = a2;
  v49 = v4;
  v41 = v18;
  do
  {
    if (v18)
    {
      v47 = v19;
      v48 = v20;
      v21 = v42 + v40 * v19;
      v22 = v51;
      v45 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      v23 = a2 + v45;
      v24 = swift_bridgeObjectRetain(a2);
      v25 = *(_QWORD *)(v22 + 72);
      v26 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16);
      v27 = v18;
      while (1)
      {
        v28 = v26(v12, v23, v7, v24);
        Friend.handle.getter(v28);
        v29 = static Handle.== infix(_:_:)(v6, v21);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v6, v50);
        if ((v29 & 1) != 0)
          break;
        (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v7);
        v23 += v25;
        if (!--v27)
        {
          a2 = v43;
          swift_bridgeObjectRelease(v43);
          v18 = v41;
          v20 = v48;
          goto LABEL_4;
        }
      }
      a2 = v43;
      swift_bridgeObjectRelease(v43);
      v30 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
      v31 = v39;
      v30(v39, v12, v7);
      v32 = v38;
      v30(v38, v31, v7);
      v30(v44, v32, v7);
      v20 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
        v20 = (_QWORD *)sub_100031CE4(0, v20[2] + 1, 1, (unint64_t)v20);
      v34 = v20[2];
      v33 = v20[3];
      if (v34 >= v33 >> 1)
        v20 = (_QWORD *)sub_100031CE4(v33 > 1, v34 + 1, 1, (unint64_t)v20);
      v20[2] = v34 + 1;
      v30((char *)v20 + v45 + v34 * v25, v44, v7);
      v18 = v41;
LABEL_4:
      v19 = v47;
    }
    ++v19;
  }
  while (v19 != v46);
  swift_bridgeObjectRelease(v37);
  return v20;
}

uint64_t sub_10001A808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD v18[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v18, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v18, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t destroy for ServerContext(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[17]);
  return swift_bridgeObjectRelease(a1[19]);
}

uint64_t initializeWithCopy for ServerContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v6 = *(_QWORD *)(a2 + 136);
  v5 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = v5;
  v7 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 152) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_10001AA18@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10001AA44(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10001AA44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v3 = sub_100037A5C(&qword_100265840);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100036228(a1, v7);
  v9 = sub_10001ABF0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerLocationInProgress.CodingKeys, &type metadata for ServerLocationInProgress.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_10002BB90(a1);
  }
  else
  {
    v17 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    v12 = v11;
    v16 = 1;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v3);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v14);
    sub_10002BB90(a1);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

unint64_t sub_10001ABF0()
{
  unint64_t result;

  result = qword_100265848;
  if (!qword_100265848)
  {
    result = swift_getWitnessTable(&unk_1001F8544, &type metadata for ServerLocationInProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265848);
  }
  return result;
}

uint64_t destroy for ServerSettingsRecord(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[11]);
  v2 = a1[17];
  if (v2)
  {
    v3 = a1[14];
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[29]);
    swift_bridgeObjectRelease(a1[31]);
  }
  result = a1[51];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a1[53]);
  }
  return result;
}

uint64_t initializeWithCopy for ServerSettingsRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  if (v10)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    v11 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = v10;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    v13 = *(_QWORD *)(a2 + 232);
    v12 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = v13;
    *(_QWORD *)(a1 + 240) = v12;
    v14 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 248) = v14;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v15;
    v16 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v16;
    v17 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v17;
    v18 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v18;
    v19 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v19;
  }
  v20 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v20;
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  v21 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v21;
  v22 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v22;
  v23 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v23;
  v24 = *(_QWORD *)(a2 + 408);
  if (v24)
  {
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 408) = v24;
    v25 = *(_QWORD *)(a2 + 416);
    v26 = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 416) = v25;
    *(_QWORD *)(a1 + 424) = v26;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v26);
  }
  else
  {
    v27 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v27;
  }
  return a1;
}

uint64_t sub_10001AE70(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

_OWORD *sub_10001AEAC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10001AEBC(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

double sub_10001AEF0@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[6];

  sub_10001AF38(a1, (uint64_t)v8);
  if (!v2)
  {
    v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    result = *(double *)v8;
    v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_10001AF38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  v5 = sub_100037A5C(&qword_1002659E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10001B40C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerMyInfo.CodingKeys, &type metadata for ServerMyInfo.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_10002BB90(a1);
  LOBYTE(v46) = 0;
  v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v5);
  v14 = v13;
  v44 = v12;
  LOBYTE(v46) = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v5);
  v17 = v16;
  v42 = v15;
  v43 = v14;
  LOBYTE(v46) = 2;
  v18 = swift_bridgeObjectRetain(v16);
  v19 = v17;
  KeyedDecodingContainer.decode(_:forKey:)(&v46, v5, v18);
  v21 = v20;
  LOBYTE(v46) = 3;
  v41 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
  v22 = sub_100037A5C(&qword_1002625F8);
  v45 = 4;
  v23 = sub_1000272B4(&qword_1002639C8, &qword_1002625F8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v46, v22, &v45, v5, v22, v23);
  v24 = v46;
  LOBYTE(v46) = 5;
  v39 = v24;
  swift_bridgeObjectRetain(v24);
  v38 = 0;
  v25 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
  LOBYTE(v46) = 6;
  v40 = v26;
  swift_bridgeObjectRetain(v26);
  HIDWORD(v37) = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
  LOBYTE(v46) = 7;
  v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v5);
  v29 = v28;
  v41 &= 1u;
  LODWORD(v38) = BYTE4(v37) & 1;
  v30 = *(void (**)(char *, uint64_t))(v6 + 8);
  v31 = v27;
  v30(v8, v5);
  swift_bridgeObjectRetain(v29);
  sub_10002BB90(a1);
  swift_bridgeObjectRelease(v29);
  v32 = v40;
  swift_bridgeObjectRelease(v40);
  v33 = v39;
  swift_bridgeObjectRelease(v39);
  v34 = v19;
  swift_bridgeObjectRelease(v19);
  v35 = v43;
  result = swift_bridgeObjectRelease(v43);
  *(_QWORD *)a2 = v44;
  *(_QWORD *)(a2 + 8) = v35;
  *(_QWORD *)(a2 + 16) = v42;
  *(_QWORD *)(a2 + 24) = v34;
  *(_QWORD *)(a2 + 32) = v21;
  *(_BYTE *)(a2 + 40) = v41;
  *(_QWORD *)(a2 + 48) = v33;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v32;
  *(_BYTE *)(a2 + 72) = v38;
  *(_QWORD *)(a2 + 80) = v31;
  *(_QWORD *)(a2 + 88) = v29;
  return result;
}

unint64_t sub_10001B40C()
{
  unint64_t result;

  result = qword_1002659E8;
  if (!qword_1002659E8)
  {
    result = swift_getWitnessTable(&unk_1001F9868, &type metadata for ServerMyInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002659E8);
  }
  return result;
}

uint64_t sub_10001B450()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  int *v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  uint64_t *v18;
  uint64_t v19;
  Swift::String v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v1 = sub_100037A5C(&qword_100261820);
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = 0;
  v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease(v26);
  v25 = 540697705;
  v26 = 0xE400000000000000;
  v4 = *v0;
  v5 = (void *)v0[1];
  swift_bridgeObjectRetain(v5);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 0x6F697461636F6C0ALL;
  v7._object = (void *)0xEA00000000003A6ELL;
  String.append(_:)(v7);
  v8 = (int *)type metadata accessor for ServerLocation(0);
  sub_10000E37C((uint64_t)v0 + v8[5], (uint64_t)v3, &qword_100261820);
  v9._countAndFlagsBits = String.init<A>(describing:)(v3, v1);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._object = (void *)0x8000000100200AE0;
  v11._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v11);
  v12 = (uint64_t *)((char *)v0 + v8[6]);
  v13 = v12[1];
  v23 = *v12;
  v24 = v13;
  swift_bridgeObjectRetain(v13);
  v14 = sub_100037A5C(&qword_10025FF00);
  v15._countAndFlagsBits = String.init<A>(describing:)(&v23, v14);
  v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  v17._countAndFlagsBits = 0x3A7375746174730ALL;
  v17._object = (void *)0xE800000000000000;
  String.append(_:)(v17);
  v18 = (uint64_t *)((char *)v0 + v8[7]);
  v19 = v18[1];
  v23 = *v18;
  v24 = v19;
  swift_bridgeObjectRetain(v19);
  v20._countAndFlagsBits = String.init<A>(describing:)(&v23, v14);
  v21 = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v21);
  return v25;
}

uint64_t initializeWithCopy for ServerFriend(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v10;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

__n128 sub_10001B6FC@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[9];

  sub_10001B754(a1, (uint64_t)v8);
  if (!v2)
  {
    v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10001B754@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  __n128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  unint64_t v27;
  __n128 v28;
  unint64_t v29;
  __n128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t result;
  double v43;
  int v44;
  double v45;
  uint64_t v46;
  double v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  char v54;

  v5 = sub_100037A5C(&qword_100265A00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10001BC50();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerConfig.CodingKeys, &type metadata for ServerConfig.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_10002BB90(a1);
  v54 = 0;
  KeyedDecodingContainer.decode(_:forKey:)(&v54, v5, v12);
  v14 = v13;
  v54 = 1;
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5);
  v54 = 2;
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5);
  v54 = 3;
  KeyedDecodingContainer.decode(_:forKey:)(&v54, v5, v17);
  v19 = v18;
  v54 = 4;
  v52 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5);
  v54 = 5;
  KeyedDecodingContainer.decode(_:forKey:)(&v54, v5, v20);
  v22 = v21.n128_u64[0];
  v54 = 6;
  KeyedDecodingContainer.decode(_:forKey:)(&v54, v5, v21);
  v24 = v23;
  v54 = 7;
  v53 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5);
  v54 = 8;
  KeyedDecodingContainer.decode(_:forKey:)(&v54, v5, v25);
  v27 = v26.n128_u64[0];
  v54 = 9;
  KeyedDecodingContainer.decode(_:forKey:)(&v54, v5, v26);
  v29 = v28.n128_u64[0];
  v54 = 10;
  KeyedDecodingContainer.decode(_:forKey:)(&v54, v5, v28);
  v31 = v30.n128_u64[0];
  v54 = 11;
  KeyedDecodingContainer.decode(_:forKey:)(&v54, v5, v30);
  v33 = v32;
  v54 = 12;
  v51 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5);
  v54 = 13;
  v50 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5);
  v54 = 14;
  v49 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5);
  v54 = 15;
  v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v5);
  v54 = 16;
  v47 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5, v34);
  v54 = 17;
  v46 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5);
  v54 = 18;
  v45 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5, v35);
  v54 = 19;
  v44 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5);
  v54 = 20;
  v43 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5, v36);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v37 = v16 & 1;
  v38 = v53 & 1;
  v39 = v51 & 1;
  v40 = v50 & 1;
  v41 = v49 & 1;
  v53 = v44 & 1;
  result = sub_10002BB90(a1);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v15;
  *(_BYTE *)(a2 + 16) = v37;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v52;
  *(_QWORD *)(a2 + 40) = v22;
  *(_QWORD *)(a2 + 48) = v24;
  *(_BYTE *)(a2 + 56) = v38;
  *(_QWORD *)(a2 + 64) = v27;
  *(_QWORD *)(a2 + 72) = v29;
  *(_QWORD *)(a2 + 80) = v31;
  *(_QWORD *)(a2 + 88) = v33;
  *(_BYTE *)(a2 + 96) = v39;
  *(_BYTE *)(a2 + 97) = v40;
  *(_BYTE *)(a2 + 98) = v41;
  *(_BYTE *)(a2 + 99) = v48;
  *(double *)(a2 + 104) = v47;
  *(_QWORD *)(a2 + 112) = v46;
  *(double *)(a2 + 120) = v45;
  *(_BYTE *)(a2 + 128) = v53;
  *(double *)(a2 + 136) = v43;
  return result;
}

unint64_t sub_10001BC50()
{
  unint64_t result;

  result = qword_100265A08;
  if (!qword_100265A08)
  {
    result = swift_getWitnessTable(&unk_1001F97C8, &type metadata for ServerConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265A08);
  }
  return result;
}

uint64_t sub_10001BC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t Priority;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v6 = (_QWORD **)v5;
  v29 = a2;
  v30 = a3;
  Priority = type metadata accessor for LocatePriority(0);
  v11 = *(_QWORD *)(Priority - 8);
  __chkstk_darwin(Priority);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_10001BE14(a4);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a5 & 1) != 0)
  {
LABEL_7:
    v22 = *v6;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (uint64_t *)(v22[7] + 24 * v16);
      v24 = v23[1];
      swift_bridgeObjectRelease(*v23);
      result = swift_release(v24);
      v26 = v29;
      *v23 = a1;
      v23[1] = v26;
      v23[2] = v30;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a5 & 1) == 0)
  {
    sub_1000F66C4();
    goto LABEL_7;
  }
  sub_1000075A4(v19, a5 & 1);
  v27 = sub_10001BE14(a4);
  if ((v20 & 1) != (v28 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(Priority);
    __break(1u);
    return result;
  }
  v16 = v27;
  v22 = *v6;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, Priority);
  return sub_10003C288(v16, (uint64_t)v13, a1, v29, v30, v22);
}

unint64_t sub_10001BE14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t Priority;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  Priority = type metadata accessor for LocatePriority(0);
  v6 = sub_100004EA8(&qword_1002625C0, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, Priority, v6);
  return sub_10001CC60(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, &qword_100261E00, (uint64_t)&protocol conformance descriptor for LocatePriority);
}

uint64_t sub_10001BEAC(uint64_t a1, unint64_t a2, uint64_t isUniquelyReferenced_nonNull_native)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  os_log_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  char *v59;
  __n128 v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(void);
  uint64_t v83;
  char *v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _BOOL8 v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t *v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t result;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  void (*v115)(unint64_t, uint64_t);
  void (*v116)(unint64_t, uint64_t, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t Priority;
  os_log_t v120;
  uint64_t v121;
  __int128 v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t);
  char *v135;
  void (*v136)(void);
  uint64_t v137;
  uint64_t v138;
  _BYTE v139[16];
  uint64_t v140[3];

  v6 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  __chkstk_darwin(v6);
  v130 = (char *)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for Handle(0);
  v129 = *(_QWORD *)(v133 - 8);
  v8 = __chkstk_darwin(v133);
  v10 = (uint64_t)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v131 = (uint64_t)&v112 - v11;
  Priority = type metadata accessor for LocatePriority(0);
  v124 = *(_QWORD *)(Priority - 8);
  v12 = __chkstk_darwin(Priority);
  v117 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (unint64_t)&v112 - v14;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (uint64_t)&v112 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v135 = (char *)&v112 - v22;
  v23 = __chkstk_darwin(v21);
  v127 = (char *)&v112 - v24;
  v25 = __chkstk_darwin(v23);
  v126 = (uint64_t *)((char *)&v112 - v26);
  __chkstk_darwin(v25);
  v28 = (uint64_t *)((char *)&v112 - v27);
  if (qword_10025F8D8 != -1)
    goto LABEL_53;
  while (1)
  {
    v29 = type metadata accessor for Logger(0);
    sub_100037A9C(v29, (uint64_t)qword_10027ABA8);
    v136 = *(void (**)(void))(v17 + 16);
    ((void (*)(_QWORD *, uint64_t, uint64_t))v136)(v28, a1, v16);
    v116 = *(void (**)(unint64_t, uint64_t, uint64_t))(v124 + 16);
    v116(v15, isUniquelyReferenced_nonNull_native, Priority);
    v30 = swift_bridgeObjectRetain_n(a2, 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    LODWORD(v122) = v32;
    v33 = os_log_type_enabled(v31, v32);
    v128 = a1;
    v125 = v17;
    v118 = isUniquelyReferenced_nonNull_native;
    v132 = v10;
    if (v33)
    {
      v34 = swift_slowAlloc(32, -1);
      v121 = swift_slowAlloc(96, -1);
      v140[0] = v121;
      *(_DWORD *)v34 = 136315650;
      v35 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v120 = v31;
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v16, v35);
      v38 = v37;
      v138 = sub_10002BA84(v36, v37, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease(v38);
      v134 = *(void (**)(_QWORD *, uint64_t))(v17 + 8);
      v134(v28, v16);
      *(_WORD *)(v34 + 12) = 2080;
      v39 = sub_100004EA8(&qword_100261E20, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
      v40 = Priority;
      v41 = dispatch thunk of CustomStringConvertible.description.getter(Priority, v39);
      v43 = v42;
      v138 = sub_10002BA84(v41, v42, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease(v43);
      v115 = *(void (**)(unint64_t, uint64_t))(v124 + 8);
      v115(v15, v40);
      *(_WORD *)(v34 + 22) = 2080;
      v44 = swift_bridgeObjectRetain(a2);
      v45 = Array.description.getter(v44);
      v47 = v46;
      swift_bridgeObjectRelease(a2);
      v138 = sub_10002BA84(v45, v47, v140);
      isUniquelyReferenced_nonNull_native = v118;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v34 + 24, v34 + 32);
      swift_bridgeObjectRelease_n(a2, 2);
      v48 = v47;
      v10 = v132;
      swift_bridgeObjectRelease(v48);
      v49 = v120;
      _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v122, "Track new legacyLocationSubscriptions: client: %s priority: %s handles: %s", (uint8_t *)v34, 0x20u);
      v50 = v121;
      swift_arrayDestroy(v121, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      v51 = v34;
      a1 = v128;
      swift_slowDealloc(v51, -1, -1);

      v52 = v40;
    }
    else
    {
      v134 = *(void (**)(_QWORD *, uint64_t))(v17 + 8);
      v134(v28, v16);
      v53 = v15;
      v52 = Priority;
      v115 = *(void (**)(unint64_t, uint64_t))(v124 + 8);
      v115(v53, Priority);

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v54 = (uint64_t *)(v123 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions);
    swift_beginAccess(v123 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions, v140, 0, 0);
    v114 = v54;
    v55 = *v54;
    if (!*(_QWORD *)(*v54 + 16))
      goto LABEL_20;
    swift_bridgeObjectRetain(*v54);
    v56 = sub_10001BE14(isUniquelyReferenced_nonNull_native);
    if ((v57 & 1) == 0)
      break;
    v58 = *(_QWORD *)(v55 + 56) + 24 * v56;
    v28 = *(_QWORD **)v58;
    v59 = *(char **)(v58 + 8);
    v132 = *(_QWORD *)(v58 + 16);
    v135 = v59;
    swift_retain(v59);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v55);
    v17 = *(_QWORD *)(a2 + 16);
    if (!v17)
    {
      v105 = (uint64_t)v117;
      v106 = (void (*)(uint64_t, uint64_t))v115;
      v107 = v114;
      v103 = (uint64_t)v135;
      v104 = v132;
      v116((unint64_t)v117, isUniquelyReferenced_nonNull_native, v52);
      goto LABEL_47;
    }
    v10 = a2 + ((*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80));
    v20 = *(_QWORD *)(v129 + 72);
    v15 = *(_QWORD *)(v129 + 16);
    v113 = a2;
    v60 = swift_bridgeObjectRetain(a2);
    isUniquelyReferenced_nonNull_native = v133;
    v61 = v131;
    v62 = v127;
    while (1)
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v15)(v61, v10, isUniquelyReferenced_nonNull_native, v60);
      ((void (*)(char *, uint64_t, uint64_t))v136)(v62, a1, v16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
      v138 = (uint64_t)v28;
      a2 = sub_10001CBC8(v61);
      v65 = v28[2];
      v66 = (v64 & 1) == 0;
      v67 = v65 + v66;
      if (__OFADD__(v65, v66))
        break;
      a1 = v64;
      if (v28[3] >= v67)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000F6918();
          v28 = (_QWORD *)v138;
        }
      }
      else
      {
        sub_10001CFE4(v67, isUniquelyReferenced_nonNull_native);
        v28 = (_QWORD *)v138;
        v68 = sub_10001CBC8(v131);
        if ((a1 & 1) != (v69 & 1))
          goto LABEL_55;
        a2 = v68;
      }
      isUniquelyReferenced_nonNull_native = v133;
      swift_bridgeObjectRelease(0x8000000000000000);
      if ((a1 & 1) == 0)
      {
        v28[(a2 >> 6) + 8] |= 1 << a2;
        ((void (*)(unint64_t, uint64_t, uint64_t))v15)(v28[6] + a2 * v20, v131, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(v28[7] + 8 * a2) = &_swiftEmptySetSingleton;
        v70 = v28[2];
        v71 = __OFADD__(v70, 1);
        v72 = v70 + 1;
        if (v71)
          goto LABEL_52;
        v28[2] = v72;
      }
      v63 = v126;
      v62 = v127;
      sub_100164FF0((uint64_t)v126, v127);
      v134(v63, v16);
      v61 = v131;
      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v131, isUniquelyReferenced_nonNull_native);
      v10 += v20;
      --v17;
      a1 = v128;
      if (!v17)
      {
        v105 = (uint64_t)v117;
        v106 = (void (*)(uint64_t, uint64_t))v115;
        v107 = v114;
        v103 = (uint64_t)v135;
        v104 = v132;
        goto LABEL_46;
      }
    }
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  }
  swift_bridgeObjectRelease(v55);
LABEL_20:
  v124 = *(_QWORD *)(a2 + 16);
  if (v124)
  {
    v123 = a2 + ((*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80));
    v73 = *(char **)(v129 + 72);
    v126 = *(_QWORD **)(v129 + 16);
    v127 = v73;
    v113 = a2;
    swift_bridgeObjectRetain(a2);
    v74 = 0;
    v28 = _swiftEmptyDictionarySingleton;
    v122 = xmmword_1001F35F0;
    isUniquelyReferenced_nonNull_native = v133;
    while (1)
    {
      v131 = v74;
      ((void (*)(uint64_t, unint64_t, uint64_t))v126)(v10, v123 + (_QWORD)v127 * v74, isUniquelyReferenced_nonNull_native);
      v76 = sub_100037A5C(&qword_100261E78);
      v77 = v125;
      v78 = *(_QWORD *)(v125 + 72);
      v79 = *(unsigned __int8 *)(v125 + 80);
      v80 = (v79 + 32) & ~v79;
      v17 = swift_allocObject(v76, v80 + v78, v79 | 7);
      *(_OWORD *)(v17 + 16) = v122;
      v81 = a1;
      v82 = v136;
      ((void (*)(uint64_t, uint64_t, uint64_t))v136)(v17 + v80, v81, v16);
      v83 = sub_100004EA8(&qword_1002676A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      a2 = Set.init(minimumCapacity:)(1, v16, v83);
      v84 = v130;
      v82();
      a1 = v77;
      v85 = *(NSObject **)(v77 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v85)(v84, 0, 1, v16);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(a1 + 48))(v84, 1, v16) == 1)
      {
        v86 = v17;
      }
      else
      {
        v120 = v85;
        v121 = v17;
        (*(void (**)(char *, char *, uint64_t))(a1 + 32))(v135, v84, v16);
        v87 = *(_QWORD *)(a2 + 40);
        swift_bridgeObjectRetain(a2);
        v88 = dispatch thunk of Hashable._rawHashValue(seed:)(v87, v16, v83);
        v89 = -1 << *(_BYTE *)(a2 + 32);
        v90 = v88 & ~v89;
        if (((*(_QWORD *)(a2 + 56 + ((v90 >> 3) & 0xFFFFFFFFFFFFF8)) >> v90) & 1) != 0)
        {
          a1 = ~v89;
          while (1)
          {
            ((void (*)(uint64_t, unint64_t, uint64_t))v136)(v20, *(_QWORD *)(a2 + 48) + v90 * v78, v16);
            v91 = sub_100004EA8(&qword_100261E80, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v92 = dispatch thunk of static Equatable.== infix(_:_:)(v20, v135, v16, v91);
            v134((_QWORD *)v20, v16);
            if ((v92 & 1) != 0)
              break;
            v90 = (v90 + 1) & a1;
            if (((*(_QWORD *)(a2 + 56 + ((v90 >> 3) & 0xFFFFFFFFFFFFF8)) >> v90) & 1) == 0)
              goto LABEL_30;
          }
          swift_bridgeObjectRelease(a2);
          v94 = v135;
        }
        else
        {
LABEL_30:
          swift_bridgeObjectRelease(a2);
          v93 = swift_isUniquelyReferenced_nonNull_native(a2);
          v94 = v135;
          ((void (*)(uint64_t, char *, uint64_t))v136)(v20, v135, v16);
          v138 = a2;
          sub_10001CD90(v20, v90, v93);
          a2 = v138;
          swift_bridgeObjectRelease(0x8000000000000000);
        }
        v134(v94, v16);
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v120)(v130, 1, 1, v16);
        v86 = v121;
      }
      swift_bridgeObjectRelease(v86);
      isUniquelyReferenced_nonNull_native = v133;
      v10 = swift_isUniquelyReferenced_nonNull_native(v28);
      v138 = (uint64_t)v28;
      v15 = sub_10001CBC8(v132);
      v96 = v28[2];
      v97 = (v95 & 1) == 0;
      v98 = v96 + v97;
      if (__OFADD__(v96, v97))
      {
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      a1 = v95;
      if (v28[3] >= v98)
      {
        if ((v10 & 1) == 0)
          sub_1000F6918();
        v10 = v132;
        v28 = (_QWORD *)v138;
        if ((a1 & 1) == 0)
          goto LABEL_41;
      }
      else
      {
        sub_10001CFE4(v98, v10);
        v10 = v132;
        v99 = sub_10001CBC8(v132);
        if ((a1 & 1) != (v100 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(isUniquelyReferenced_nonNull_native);
          __break(1u);
LABEL_55:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v133);
          __break(1u);
          return result;
        }
        v15 = v99;
        v28 = (_QWORD *)v138;
        if ((a1 & 1) == 0)
        {
LABEL_41:
          v28[(v15 >> 6) + 8] |= 1 << v15;
          ((void (*)(unint64_t, uint64_t, uint64_t))v126)(v28[6] + v15 * (_QWORD)v127, v10, isUniquelyReferenced_nonNull_native);
          *(_QWORD *)(v28[7] + 8 * v15) = a2;
          v101 = v28[2];
          v71 = __OFADD__(v101, 1);
          v102 = v101 + 1;
          if (v71)
            goto LABEL_50;
          v28[2] = v102;
          goto LABEL_23;
        }
      }
      v75 = v28[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v75 + 8 * v15));
      *(_QWORD *)(v75 + 8 * v15) = a2;
      isUniquelyReferenced_nonNull_native = v133;
LABEL_23:
      swift_bridgeObjectRelease(0x8000000000000000);
      v74 = v131 + 1;
      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v10, isUniquelyReferenced_nonNull_native);
      a1 = v128;
      if (v74 == v124)
      {
        v103 = 0;
        v104 = 0;
        v105 = (uint64_t)v117;
        v106 = (void (*)(uint64_t, uint64_t))v115;
        v107 = v114;
LABEL_46:
        swift_bridgeObjectRelease(v113);
        v52 = Priority;
        v116(v105, v118, Priority);
        goto LABEL_47;
      }
    }
  }
  v103 = 0;
  v104 = 0;
  v28 = _swiftEmptyDictionarySingleton;
  v105 = (uint64_t)v117;
  v106 = (void (*)(uint64_t, uint64_t))v115;
  v107 = v114;
  v116((unint64_t)v117, isUniquelyReferenced_nonNull_native, v52);
LABEL_47:
  swift_beginAccess(v107, &v138, 33, 0);
  swift_retain(v103);
  v108 = *v107;
  swift_bridgeObjectRetain(v28);
  v109 = swift_isUniquelyReferenced_nonNull_native(v108);
  v137 = *v107;
  *v107 = 0x8000000000000000;
  sub_10001BC94((uint64_t)v28, v103, v104, v105, v109);
  v110 = *v107;
  *v107 = v137;
  swift_bridgeObjectRelease(v110);
  v106(v105, v52);
  swift_endAccess(&v138);
  swift_release(v103);
  return swift_bridgeObjectRelease(v28);
}

unint64_t sub_10001CBC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for Handle(0);
  v6 = sub_100004EA8(&qword_1002605F8, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001CC60(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, &qword_1002605F0, (uint64_t)&protocol conformance descriptor for Handle);
}

unint64_t sub_10001CC60(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_100004EA8(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_10001CD90(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001656AC(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1002655E8, &qword_1002676A0, (uint64_t)&protocol conformance descriptor for UUID);
  }
  else
  {
    if (v11 > v10)
    {
      sub_10000D090((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1002655E8);
      goto LABEL_12;
    }
    sub_100166C9C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1002655E8, &qword_1002676A0, (uint64_t)&protocol conformance descriptor for UUID);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100004EA8(&qword_1002676A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100004EA8(&qword_100261E80, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_10001CFE4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for Handle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_100263478);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100004EA8(&qword_1002605F8, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

void sub_10001D378(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  char *v13;
  __n128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t refreshed;
  void (*v82)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  _BOOL4 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void (*v135)(uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  _BOOL4 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  void (*v198)(uint64_t, uint64_t);
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(uint64_t, unint64_t, uint64_t);
  void (*v213)(uint64_t, unint64_t, uint64_t);
  unint64_t v214;
  uint64_t v215;
  os_log_type_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t (*v219)(uint64_t, char *, uint64_t);
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224[14];

  v2 = *(_QWORD *)(v1 + 448);
  v3 = LocationRequest.toHandles.getter(a1);
  swift_bridgeObjectRetain(v2);
  v4 = (char *)sub_10001A4E4(v3, v2);
  swift_bridgeObjectRelease_n(v2, 2);
  v5 = swift_bridgeObjectRelease(v3);
  v207 = *((_QWORD *)v4 + 2);
  if (v207)
  {
    v181 = (_QWORD *)(v1 + 40);
    v188 = v1 + 56;
    v190 = (_QWORD *)(v1 + 48);
    v7 = *(_QWORD *)(v1 + 304);
    v6 = *(_QWORD *)(v1 + 312);
    v8 = *(_QWORD *)(v1 + 280);
    v9 = *(_QWORD *)(v1 + 288);
    v10 = *(_QWORD *)(v1 + 232);
    LocationRequest.priority.getter(v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v7, enum case for LocatePriority.backgroundProactive(_:), v8);
    v11 = sub_100004EA8(&qword_100261E00, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
    v196 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v7, v8, v11);
    v12 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v12(v7, v8);
    v198 = v12;
    v12(v6, v8);
    v13 = (char *)_swiftEmptyArrayStorage;
    v224[0] = (uint64_t)_swiftEmptyArrayStorage;
    v14 = swift_bridgeObjectRetain(v4);
    v15 = 0;
    while (v15 < *((_QWORD *)v4 + 2))
    {
      v16 = *(_QWORD *)(v10 + 72);
      v214 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v219 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 16);
      v17 = ((uint64_t (*)(_QWORD, char *, _QWORD, __n128))v219)(*(_QWORD *)(v1 + 272), &v4[v214 + v16 * v15], *(_QWORD *)(v1 + 224), v14);
      if ((Friend.isSecureLocationCapable.getter(v17) & 1) != 0)
      {
        v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
        v18(*(char **)(v1 + 264), *(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 224));
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        {
          sub_1000303C0(0, *((_QWORD *)v13 + 2) + 1, 1);
          v13 = (char *)v224[0];
        }
        v20 = *((_QWORD *)v13 + 2);
        v19 = *((_QWORD *)v13 + 3);
        if (v20 >= v19 >> 1)
        {
          sub_1000303C0(v19 > 1, v20 + 1, 1);
          v13 = (char *)v224[0];
        }
        v21 = *(_QWORD *)(v1 + 264);
        v22 = *(_QWORD *)(v1 + 224);
        *((_QWORD *)v13 + 2) = v20 + 1;
        v18(&v13[v214 + v20 * v16], v21, v22);
        v224[0] = (uint64_t)v13;
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 224));
      }
      if (v207 == ++v15)
      {
        swift_bridgeObjectRelease(v4);
        v23 = *((_QWORD *)v13 + 2);
        v200 = v4;
        if (v23)
        {
          v202 = v16;
          v24 = *(_QWORD *)(v1 + 168);
          v224[0] = (uint64_t)_swiftEmptyArrayStorage;
          sub_100018EBC(0, v23, 0);
          v25 = &v13[v214];
          v26 = _swiftEmptyArrayStorage;
          do
          {
            v27 = *(_QWORD *)(v1 + 256);
            v28 = *(_QWORD *)(v1 + 224);
            v29 = v219(v27, v25, v28);
            Friend.handle.getter(v29);
            v30 = v27;
            v31 = (uint64_t)v26;
            (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v30, v28);
            if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
            {
              sub_100018EBC(0, v26[2] + 1, 1);
              v31 = v224[0];
            }
            v33 = *(_QWORD *)(v31 + 16);
            v32 = *(_QWORD *)(v31 + 24);
            if (v33 >= v32 >> 1)
            {
              sub_100018EBC(v32 > 1, v33 + 1, 1);
              v31 = v224[0];
            }
            v34 = *(_QWORD *)(v1 + 216);
            v35 = *(_QWORD *)(v1 + 160);
            *(_QWORD *)(v31 + 16) = v33 + 1;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))(v31+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v33, v34, v35);
            v224[0] = v31;
            v25 += v202;
            --v23;
            v26 = (_QWORD *)v31;
          }
          while (v23);
          v192 = (_QWORD *)v31;
          swift_release(v13);
          v4 = v200;
          v16 = v202;
        }
        else
        {
          swift_release(v13);
          v192 = _swiftEmptyArrayStorage;
        }
        v50 = 0;
        v51 = (char *)_swiftEmptyArrayStorage;
        v224[0] = (uint64_t)_swiftEmptyArrayStorage;
        v52 = &v4[v214];
        do
        {
          if (v50 >= *((_QWORD *)v4 + 2))
            goto LABEL_80;
          v53 = v219(*(_QWORD *)(v1 + 248), v52, *(_QWORD *)(v1 + 224));
          if ((Friend.isLegacyLocationCapable.getter(v53) & 1) != 0)
          {
            v54 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
            v54(*(char **)(v1 + 240), *(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 224));
            if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
            {
              sub_1000303C0(0, *((_QWORD *)v51 + 2) + 1, 1);
              v51 = (char *)v224[0];
            }
            v56 = *((_QWORD *)v51 + 2);
            v55 = *((_QWORD *)v51 + 3);
            if (v56 >= v55 >> 1)
            {
              sub_1000303C0(v55 > 1, v56 + 1, 1);
              v51 = (char *)v224[0];
            }
            v57 = *(_QWORD *)(v1 + 240);
            v58 = *(_QWORD *)(v1 + 224);
            *((_QWORD *)v51 + 2) = v56 + 1;
            v54(&v51[v214 + v56 * v16], v57, v58);
            v224[0] = (uint64_t)v51;
            v4 = v200;
          }
          else
          {
            (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 224));
          }
          ++v50;
          v52 += v16;
        }
        while (v207 != v50);
        swift_bridgeObjectRelease(v4);
        v59 = *((_QWORD *)v51 + 2);
        if (v59)
        {
          v209 = v10;
          v60 = *(_QWORD *)(v1 + 168);
          v224[0] = (uint64_t)_swiftEmptyArrayStorage;
          sub_100018EBC(0, v59, 0);
          v61 = &v51[v214];
          v62 = _swiftEmptyArrayStorage;
          do
          {
            v63 = *(_QWORD *)(v1 + 256);
            v64 = *(_QWORD *)(v1 + 224);
            v65 = v219(v63, v61, v64);
            Friend.handle.getter(v65);
            (*(void (**)(uint64_t, uint64_t))(v209 + 8))(v63, v64);
            if ((swift_isUniquelyReferenced_nonNull_native(v62) & 1) == 0)
            {
              sub_100018EBC(0, v62[2] + 1, 1);
              v62 = (_QWORD *)v224[0];
            }
            v67 = v62[2];
            v66 = v62[3];
            if (v67 >= v66 >> 1)
            {
              sub_100018EBC(v66 > 1, v67 + 1, 1);
              v62 = (_QWORD *)v224[0];
            }
            v68 = *(_QWORD *)(v1 + 208);
            v69 = *(_QWORD *)(v1 + 160);
            v62[2] = v67 + 1;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v60 + 32))((unint64_t)v62+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v67, v68, v69);
            v224[0] = (uint64_t)v62;
            v61 += v16;
            --v59;
          }
          while (v59);
          v221 = v62;
          v70 = swift_release(v51);
        }
        else
        {
          v70 = swift_release(v51);
          v221 = _swiftEmptyArrayStorage;
        }
        v71 = LocationRequest.priority.getter(v70);
        v72 = LocationRequest.origin.getter(v71);
        if ((v196 & 1) != 0)
        {
          v187 = _swiftEmptyArrayStorage;
        }
        else
        {
          swift_bridgeObjectRetain(v221);
          v187 = (_QWORD *)v72;
        }
        v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 376);
        v204 = *(_QWORD *)(v1 + 336);
        v74 = *(_QWORD *)(v1 + 312);
        v210 = *(_QWORD *)(v1 + 320);
        v184 = *(_QWORD *)(v1 + 296);
        v75 = *(_QWORD *)(v1 + 280);
        v76 = *(_QWORD *)(v1 + 144);
        v77 = *(_QWORD *)(v1 + 152);
        v78 = *(_QWORD *)(v1 + 136);
        v79 = *(_QWORD *)(v1 + 80);
        v80 = LocationRequest.priority.getter(v72);
        LocatePriority.reason.getter(v80);
        v198(v74, v75);
        refreshed = type metadata accessor for LegacyRefreshCommandReason(0);
        v82 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(refreshed - 8) + 56);
        v82(v78, 0, 1, refreshed);
        v83 = LocationRequest.init(priority:origin:toHandles:reason:startRefreshingLocation:isCached:)(v184, v77, v187, v78, 1, 0);
        v84 = LocationRequest.priority.getter(v83);
        LocationRequest.origin.getter(v84);
        v82(v78, 1, 1, refreshed);
        swift_bridgeObjectRetain(v192);
        LocationRequest.init(priority:origin:toHandles:reason:startRefreshingLocation:isCached:)(v74, v76, v192, v78, 0, 0);
        v85 = v73(v204, v79, v210);
        v86 = Logger.logObject.getter(v85);
        v87 = static os_log_type_t.default.getter();
        v88 = os_log_type_enabled(v86, v87);
        v89 = *(void (**)(uint64_t, uint64_t))(v1 + 384);
        v90 = *(_QWORD *)(v1 + 336);
        if (v88)
        {
          v91 = *(_QWORD *)(v1 + 312);
          v92 = *(_QWORD *)(v1 + 280);
          v216 = v87;
          v211 = *(_QWORD *)(v1 + 320);
          v93 = (uint8_t *)swift_slowAlloc(12, -1);
          v205 = swift_slowAlloc(32, -1);
          v224[0] = v205;
          *(_DWORD *)v93 = 136446210;
          LocationRequest.priority.getter(v205);
          v94 = sub_100004EA8(&qword_100261E20, (uint64_t (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
          v95 = dispatch thunk of CustomStringConvertible.description.getter(v92, v94);
          v97 = v96;
          v198(v91, v92);
          *(_QWORD *)(v1 + 56) = sub_10002BA84(v95, v97, v224);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v188, v1 + 64, v93 + 4, v93 + 12);
          swift_bridgeObjectRelease(v97);
          v89(v90, v211);
          _os_log_impl((void *)&_mh_execute_header, v86, v216, "LocationService: Start Refresh Location with priority: %{public}s for", v93, 0xCu);
          swift_arrayDestroy(v205, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v205, -1, -1);
          swift_slowDealloc(v93, -1, -1);
        }
        else
        {
          v89(*(_QWORD *)(v1 + 336), *(_QWORD *)(v1 + 320));
        }

        swift_bridgeObjectRetain(v192);
        v99 = Logger.logObject.getter(v98);
        v100 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v99, v100))
        {
          v101 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v101 = 134217984;
          v102 = v192[2];
          swift_bridgeObjectRelease(v192);
          *v190 = v102;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v190, v188, v101 + 4, v101 + 12);
          swift_bridgeObjectRelease(v192);
          _os_log_impl((void *)&_mh_execute_header, v99, v100, "LocationService: validSecureLocationHandles count: %ld", v101, 0xCu);
          swift_slowDealloc(v101, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v192, 2);
        }

        swift_bridgeObjectRetain(v221);
        v104 = Logger.logObject.getter(v103);
        v105 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v104, v105))
        {
          v106 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v106 = 134217984;
          v107 = v221[2];
          swift_bridgeObjectRelease(v221);
          *v181 = v107;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v181, v190, v106 + 4, v106 + 12);
          swift_bridgeObjectRelease(v221);
          _os_log_impl((void *)&_mh_execute_header, v104, v105, "LocationService: legacyRefreshHandles count: %ld", v106, 0xCu);
          swift_slowDealloc(v106, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v221, 2);
        }

        v109 = LocationRequest.toHandles.getter(v108);
        v110 = *(_QWORD *)(v109 + 16);
        v111 = &unk_1001F3000;
        if (v110)
        {
          v112 = *(_QWORD *)(v1 + 168);
          v113 = v109 + ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80));
          v217 = *(_QWORD *)(v112 + 72);
          v222 = v112;
          v212 = *(void (**)(uint64_t, unint64_t, uint64_t))(v112 + 16);
          v194 = v109;
          swift_bridgeObjectRetain(v109);
          do
          {
            v116 = *(_QWORD *)(v1 + 192);
            v115 = *(_QWORD *)(v1 + 200);
            v117 = *(_QWORD *)(v1 + 160);
            v212(v115, v113, v117);
            v118 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v212)(v116, v115, v117);
            v119 = Logger.logObject.getter(v118);
            v120 = static os_log_type_t.default.getter();
            v121 = os_log_type_enabled(v119, v120);
            v122 = *(_QWORD *)(v1 + 192);
            v123 = *(_QWORD *)(v1 + 160);
            if (v121)
            {
              v124 = swift_slowAlloc(22, -1);
              v125 = swift_slowAlloc(32, -1);
              v224[0] = v125;
              *(_DWORD *)v124 = 141558275;
              *(_QWORD *)(v124 + 4) = 1752392040;
              *(_WORD *)(v124 + 12) = 2081;
              v126 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
              v127 = dispatch thunk of CustomStringConvertible.description.getter(v123, v126);
              v129 = v128;
              *(_QWORD *)(v124 + 14) = sub_10002BA84(v127, v128, v224);
              swift_bridgeObjectRelease(v129);
              v114 = *(void (**)(uint64_t, uint64_t))(v222 + 8);
              v114(v122, v123);
              _os_log_impl((void *)&_mh_execute_header, v119, v120, "LocationService: legacy location Request for: %{private,mask.hash}s", (uint8_t *)v124, 0x16u);
              swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v125, -1, -1);
              swift_slowDealloc(v124, -1, -1);
            }
            else
            {
              v114 = *(void (**)(uint64_t, uint64_t))(v222 + 8);
              v114(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 160));
            }

            v114(*(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 160));
            v113 += v217;
            --v110;
          }
          while (v110);
          v130 = swift_bridgeObjectRelease_n(v194, 2);
          v111 = (_QWORD *)&unk_1001F3000;
        }
        else
        {
          v130 = swift_bridgeObjectRelease(v109);
        }
        v131 = LocationRequest.toHandles.getter(v130);
        v132 = *(_QWORD *)(v131 + 16);
        if (v132)
        {
          v133 = *(_QWORD *)(v1 + 168);
          v134 = v131 + ((*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80));
          v218 = *(_QWORD *)(v133 + 72);
          v223 = v133;
          v213 = *(void (**)(uint64_t, unint64_t, uint64_t))(v133 + 16);
          v195 = v131;
          swift_bridgeObjectRetain(v131);
          v206 = v111[170];
          do
          {
            v137 = *(_QWORD *)(v1 + 176);
            v136 = *(_QWORD *)(v1 + 184);
            v138 = *(_QWORD *)(v1 + 160);
            v213(v136, v134, v138);
            v139 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v213)(v137, v136, v138);
            v140 = Logger.logObject.getter(v139);
            v141 = static os_log_type_t.default.getter();
            v142 = os_log_type_enabled(v140, v141);
            v143 = *(_QWORD *)(v1 + 176);
            v144 = *(_QWORD *)(v1 + 160);
            if (v142)
            {
              v145 = swift_slowAlloc(22, -1);
              v146 = swift_slowAlloc(32, -1);
              v224[0] = v146;
              *(_DWORD *)v145 = v206;
              *(_QWORD *)(v145 + 4) = 1752392040;
              *(_WORD *)(v145 + 12) = 2081;
              v147 = sub_100004EA8(&qword_100261A98, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
              v148 = dispatch thunk of CustomStringConvertible.description.getter(v144, v147);
              v150 = v149;
              *(_QWORD *)(v145 + 14) = sub_10002BA84(v148, v149, v224);
              swift_bridgeObjectRelease(v150);
              v135 = *(void (**)(uint64_t, uint64_t))(v223 + 8);
              v135(v143, v144);
              _os_log_impl((void *)&_mh_execute_header, v140, v141, "LocationService: secure location Request for: %{private,mask.hash}s", (uint8_t *)v145, 0x16u);
              swift_arrayDestroy(v146, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v146, -1, -1);
              swift_slowDealloc(v145, -1, -1);
            }
            else
            {
              v135 = *(void (**)(uint64_t, uint64_t))(v223 + 8);
              v135(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 160));
            }

            v135(*(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 160));
            v134 += v218;
            --v132;
          }
          while (v132);
          swift_bridgeObjectRelease_n(v195, 2);
          if ((v196 & 1) != 0)
            goto LABEL_78;
LABEL_72:
          type metadata accessor for Transaction(0);
          v151 = static Transaction.currentNSXPCConnection.getter();
          v152 = *(_QWORD *)(v1 + 112);
          v153 = *(_QWORD *)(v1 + 120);
          v154 = *(_QWORD *)(v1 + 104);
          if (v151)
          {
            v155 = (void *)v151;
            NSXPCConnection.id.getter();

            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v153 + 56))(v154, 0, 1, v152);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v154, 1, v152) != 1)
            {
              v156 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 120) + 32))(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
              goto LABEL_77;
            }
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v153 + 56))(*(_QWORD *)(v1 + 104), 1, 1, *(_QWORD *)(v1 + 112));
          }
          v157 = *(_QWORD *)(v1 + 104);
          v158 = type metadata accessor for LocationService(0);
          v159 = sub_100004EA8(&qword_100261E08, type metadata accessor for LocationService, (uint64_t)&unk_1001F4E1C);
          v160 = CustomStringConvertible<>.addressDescription.getter(v158, v159);
          v162 = v161;
          v163 = String.utf8Data.getter(v160);
          v165 = v164;
          swift_bridgeObjectRelease(v162);
          *(_QWORD *)(v1 + 16) = v163;
          *(_QWORD *)(v1 + 24) = v165;
          v166 = sub_10003EC14();
          DataProtocol.stableUUID.getter(&type metadata for Data, v166);
          sub_100037AB4(v163, v165);
          v156 = sub_1000087A0(v157, (uint64_t *)&unk_1002675F0);
LABEL_77:
          v167 = *(_QWORD *)(v1 + 312);
          v168 = *(_QWORD *)(v1 + 280);
          v170 = *(_QWORD *)(v1 + 120);
          v169 = *(_QWORD *)(v1 + 128);
          v171 = *(_QWORD *)(v1 + 112);
          v172 = LocationRequest.toHandles.getter(v156);
          LocationRequest.priority.getter(v172);
          sub_10001BEAC(v169, v172, v167);
          swift_bridgeObjectRelease(v172);
          v198(v167, v168);
          (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v169, v171);
        }
        else
        {
          swift_bridgeObjectRelease(v131);
          if ((v196 & 1) == 0)
            goto LABEL_72;
        }
LABEL_78:
        v174 = *(_QWORD *)(v1 + 344);
        v173 = *(_QWORD *)(v1 + 352);
        v175 = *(_QWORD *)(v1 + 88);
        v176 = *(_QWORD *)(v1 + 96);
        v177 = sub_100037A5C(&qword_100261858);
        v178 = sub_100004EA8(&qword_100260638, type metadata accessor for LocationService, (uint64_t)&unk_1001F4EA4);
        v179 = (_QWORD *)swift_task_alloc(48);
        *(_QWORD *)(v1 + 456) = v179;
        v179[2] = v173;
        v179[3] = v175;
        v179[4] = v174;
        v179[5] = v176;
        v180 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
        *(_QWORD *)(v1 + 464) = v180;
        *v180 = v1;
        v180[1] = sub_10009D00C;
        v224[12] = v177;
        withTaskGroup<A, B>(of:returning:isolation:body:)(v1 + 32, v177, v177, v175, v178, &unk_100261E18, v179, v177);
        return;
      }
    }
    __break(1u);
LABEL_80:
    __break(1u);
  }
  else
  {
    v36 = swift_bridgeObjectRelease(v4);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Start Refresh Location with empty handles", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }
    v40 = *(_QWORD *)(v1 + 416);

    v220 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    swift_release(v40);
    v41 = *(_QWORD *)(v1 + 352);
    v43 = *(_QWORD *)(v1 + 336);
    v42 = *(_QWORD *)(v1 + 344);
    v45 = *(_QWORD *)(v1 + 304);
    v44 = *(_QWORD *)(v1 + 312);
    v46 = *(_QWORD *)(v1 + 296);
    v47 = *(_QWORD *)(v1 + 264);
    v48 = *(_QWORD *)(v1 + 272);
    v49 = *(_QWORD *)(v1 + 256);
    v182 = *(_QWORD *)(v1 + 248);
    v183 = *(_QWORD *)(v1 + 240);
    v185 = *(_QWORD *)(v1 + 216);
    v186 = *(_QWORD *)(v1 + 208);
    v189 = *(_QWORD *)(v1 + 200);
    v191 = *(_QWORD *)(v1 + 192);
    v193 = *(_QWORD *)(v1 + 184);
    v197 = *(_QWORD *)(v1 + 176);
    v199 = *(_QWORD *)(v1 + 152);
    v201 = *(_QWORD *)(v1 + 144);
    v203 = *(_QWORD *)(v1 + 136);
    v208 = *(_QWORD *)(v1 + 128);
    v215 = *(_QWORD *)(v1 + 104);
    swift_task_dealloc(*(_QWORD *)(v1 + 360));
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v182);
    swift_task_dealloc(v183);
    swift_task_dealloc(v185);
    swift_task_dealloc(v186);
    swift_task_dealloc(v189);
    swift_task_dealloc(v191);
    swift_task_dealloc(v193);
    swift_task_dealloc(v197);
    swift_task_dealloc(v199);
    swift_task_dealloc(v201);
    swift_task_dealloc(v203);
    swift_task_dealloc(v208);
    swift_task_dealloc(v215);
    (*(void (**)(unint64_t))(v1 + 8))(v220);
  }
}

uint64_t destroy for ServerDevice(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[6]);
}

double sub_10001E5C8@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[10];

  sub_10001E620(a1, v10);
  if (!v2)
  {
    v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    result = *(double *)v10;
    v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

_QWORD *sub_10001E620@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __n128 v23;
  __n128 v24;
  unint64_t v25;
  __n128 v26;
  unint64_t v27;
  __n128 v28;
  unint64_t v29;
  double v30;
  __n128 v31;
  __n128 v32;
  unint64_t v33;
  __n128 v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *result;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[6];
  char v72;
  _BYTE v73[7];
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  double v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  _DWORD v89[3];
  _QWORD *v90;

  v5 = sub_100037A5C(&qword_10025FF08);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v90 = a1;
  sub_100036228(a1, v9);
  v11 = sub_10001EC98();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerContext.CodingKeys, &type metadata for ServerContext.CodingKeys, v11, v9, v10);
  if (v2)
    return (_QWORD *)sub_10002BB90(v90);
  v13 = v6;
  LOBYTE(v71[0]) = 0;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5, v12);
  LOBYTE(v71[0]) = 1;
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v71, v5);
  v17 = v16;
  v59 = v15;
  LOBYTE(v71[0]) = 2;
  v18 = swift_bridgeObjectRetain(v16);
  v19 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5, v18);
  LOBYTE(v71[0]) = 3;
  v58 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  LOBYTE(v71[0]) = 4;
  v21 = v20;
  swift_bridgeObjectRetain(v20);
  v22 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  v60 = v21;
  LODWORD(v57) = v22;
  LOBYTE(v71[0]) = 5;
  v24.n128_f64[0] = KeyedDecodingContainer.decode(_:forKey:)(v71, v5, v23);
  v25 = v24.n128_u64[0];
  LOBYTE(v71[0]) = 6;
  v26.n128_f64[0] = KeyedDecodingContainer.decode(_:forKey:)(v71, v5, v24);
  v27 = v26.n128_u64[0];
  LOBYTE(v71[0]) = 7;
  v28.n128_f64[0] = KeyedDecodingContainer.decode(_:forKey:)(v71, v5, v26);
  v29 = v28.n128_u64[0];
  LOBYTE(v71[0]) = 8;
  v30 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5, v28);
  LOBYTE(v71[0]) = 9;
  v56 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  LOBYTE(v71[0]) = 10;
  v32.n128_f64[0] = KeyedDecodingContainer.decode(_:forKey:)(v71, v5, v31);
  v33 = v32.n128_u64[0];
  LOBYTE(v71[0]) = 11;
  v34.n128_f64[0] = KeyedDecodingContainer.decode(_:forKey:)(v71, v5, v32);
  v35 = v34.n128_u64[0];
  LOBYTE(v71[0]) = 12;
  v36.n128_f64[0] = KeyedDecodingContainer.decode(_:forKey:)(v71, v5, v34);
  v55 = v36.n128_u64[0];
  LOBYTE(v71[0]) = 13;
  v54 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5, v36);
  LOBYTE(v71[0]) = 14;
  v53 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  v38 = v37;
  LOBYTE(v71[0]) = 15;
  swift_bridgeObjectRetain(v37);
  v52 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  v39 = sub_100037A5C(&qword_10025FF18);
  v87 = 16;
  v40 = sub_10001ECDC(&qword_10025FF20, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v88, v39, &v87, v5, v39, v40);
  LOBYTE(v39) = v57 & 1;
  HIDWORD(v51) = v57 & 1;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v5);
  v57 = v88;
  *(double *)&v61 = v14;
  v42 = v58;
  v41 = v59;
  *((_QWORD *)&v61 + 1) = v59;
  *(_QWORD *)&v62 = v17;
  *((double *)&v62 + 1) = v19;
  v43 = v60;
  *(_QWORD *)&v63 = v58;
  *((_QWORD *)&v63 + 1) = v60;
  LOBYTE(v64) = v39;
  *((_QWORD *)&v64 + 1) = v25;
  *(_QWORD *)&v65 = v27;
  *((_QWORD *)&v65 + 1) = v29;
  *(double *)&v66 = v30;
  v44 = v56;
  *((_QWORD *)&v66 + 1) = v56;
  *(_QWORD *)&v67 = v33;
  *((_QWORD *)&v67 + 1) = v35;
  *(_QWORD *)&v68 = v55;
  *((double *)&v68 + 1) = v54;
  *(_QWORD *)&v69 = v53;
  *((_QWORD *)&v69 + 1) = v38;
  *(_QWORD *)&v70 = v52;
  *((_QWORD *)&v70 + 1) = v88;
  sub_1000409A4(&v61);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v38);
  sub_10002BB90(v90);
  *(double *)v71 = v14;
  v71[1] = v41;
  v71[2] = v17;
  *(double *)&v71[3] = v19;
  v71[4] = v42;
  v71[5] = v43;
  v72 = BYTE4(v51);
  *(_DWORD *)v73 = v89[0];
  *(_DWORD *)&v73[3] = *(_DWORD *)((char *)v89 + 3);
  v74 = v25;
  v75 = v27;
  v76 = v29;
  v77 = v30;
  v78 = v44;
  v79 = v33;
  v80 = v35;
  v81 = v55;
  v82 = v54;
  v83 = v53;
  v84 = v38;
  v85 = v52;
  v86 = v57;
  result = sub_1000409F8(v71);
  v46 = v68;
  a2[6] = v67;
  a2[7] = v46;
  v47 = v70;
  a2[8] = v69;
  a2[9] = v47;
  v48 = v64;
  a2[2] = v63;
  a2[3] = v48;
  v49 = v66;
  a2[4] = v65;
  a2[5] = v49;
  v50 = v62;
  *a2 = v61;
  a2[1] = v50;
  return result;
}

unint64_t sub_10001EC98()
{
  unint64_t result;

  result = qword_10025FF10;
  if (!qword_10025FF10)
  {
    result = swift_getWitnessTable(&unk_1001F2EA8, &type metadata for ServerContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10025FF10);
  }
  return result;
}

uint64_t sub_10001ECDC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10003C1FC(&qword_10025FF18);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for ServerFriend(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[14]);
  return swift_bridgeObjectRelease(a1[17]);
}

uint64_t initializeWithCopy for ServerDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_10001EDF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027AD08);
  v4 = sub_10001F6A8(v2, v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 160);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 152);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v39 = v12;
    *(_DWORD *)v11 = 136315138;
    sub_10001F6A8(v8, v9);
    v13 = String.init<A>(describing:)(v9, v10);
    v15 = v14;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v13, v14, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    sub_10001F13C(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Request content: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    sub_10001F13C(*(_QWORD *)(v0 + 160));
  }

  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 80);
  v19 = *(_QWORD **)(v0 + 88);
  v21 = *(_QWORD *)(v0 + 72);
  v22 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = JSONEncoder.init()();
  *v19 = sub_100055760;
  v19[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v19, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v21);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v19);
  v24 = sub_100004EA8(&qword_100265C50, type metadata accessor for LegacyLocationServerRequestContext, (uint64_t)&unk_1001F9A3C);
  v25 = dispatch thunk of JSONEncoder.encode<A>(_:)(v17, v18, v24);
  v27 = v26;
  swift_release(v23);
  if (v16)
  {
    swift_errorRelease(v16);
    v25 = 0;
    v27 = 0xF000000000000000;
  }
  v28 = *(_QWORD *)(v0 + 168);
  v29 = *(_QWORD *)(v0 + 176);
  v30 = *(_QWORD *)(v0 + 152);
  v31 = *(_QWORD *)(v0 + 160);
  v32 = *(_QWORD *)(v0 + 104);
  v36 = *(_QWORD *)(v0 + 136);
  v37 = *(_QWORD *)(v0 + 112);
  v33 = *(_QWORD *)(v0 + 96);
  v38 = *(_QWORD *)(v0 + 88);
  v34 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  sub_10001F13C(v28);
  sub_10001F728(v25, v27);
  sub_100037AF8(0, 0xF000000000000000);
  swift_bridgeObjectRetain(v29);
  sub_10001F728(v25, v27);
  sub_100037AF8(v25, v27);
  swift_bridgeObjectRelease_n(v29, 2);
  sub_100037AF8(v25, v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v31);
  swift_task_dealloc(v30);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(v0 + 8))(*(_QWORD *)(v0 + 176), v25, v27);
}

uint64_t sub_10001F13C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LegacyLocationServerRequestContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001F178(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  uint64_t v9;

  v4 = a1[5];
  if (v4)
  {
    v5 = a1[2];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[19]);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[4]);
  swift_bridgeObjectRelease(v6[6]);
  swift_bridgeObjectRelease(v6[9]);
  swift_bridgeObjectRelease(v6[11]);
  swift_bridgeObjectRelease(v6[13]);
  v7 = (int *)type metadata accessor for ClientContext(0);
  v8 = (char *)v6 + v7[12];
  v9 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[21] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[22] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[23] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[26]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[27] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[28] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[29] + 8));
}

uint64_t sub_10001F2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v6 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    v9 = *(_QWORD *)(a2 + 136);
    v8 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v9;
    *(_QWORD *)(a1 + 144) = v8;
    v10 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v10;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  v16 = *(int *)(a3 + 20);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v84 = *(_QWORD *)(a2 + v16 + 8);
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = v84;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(a2 + v16 + 16);
  v19 = *(_QWORD *)(a2 + v16 + 32);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(a2 + v16 + 24);
  *(_QWORD *)(v17 + 32) = v19;
  v20 = *(_QWORD *)(a2 + v16 + 48);
  *(_QWORD *)(v17 + 40) = *(_QWORD *)(a2 + v16 + 40);
  *(_QWORD *)(v17 + 48) = v20;
  *(_BYTE *)(v17 + 56) = *(_BYTE *)(a2 + v16 + 56);
  v21 = *(_QWORD *)(a2 + v16 + 72);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(a2 + v16 + 64);
  *(_QWORD *)(v17 + 72) = v21;
  v22 = *(_QWORD *)(a2 + v16 + 88);
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(a2 + v16 + 80);
  *(_QWORD *)(v17 + 88) = v22;
  v23 = *(_QWORD *)(a2 + v16 + 104);
  *(_QWORD *)(v17 + 96) = *(_QWORD *)(a2 + v16 + 96);
  *(_QWORD *)(v17 + 104) = v23;
  v24 = (int *)type metadata accessor for ClientContext(0);
  v25 = v24[12];
  v80 = v18 + v25;
  v82 = v17 + v25;
  v26 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v78 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v26 - 8) + 16);
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  v27 = swift_bridgeObjectRetain(v23);
  v78(v82, v80, v26, v27);
  *(_QWORD *)(v17 + v24[13]) = *(_QWORD *)(v18 + v24[13]);
  v28 = v24[14];
  v29 = (_QWORD *)(v17 + v28);
  v30 = (_QWORD *)(v18 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  *(_BYTE *)(v17 + v24[15]) = *(_BYTE *)(v18 + v24[15]);
  v32 = v24[16];
  v33 = (_QWORD *)(v17 + v32);
  v34 = (_QWORD *)(v18 + v32);
  v85 = v34[1];
  *v33 = *v34;
  v33[1] = v85;
  v35 = v24[17];
  v36 = (_QWORD *)(v17 + v35);
  v37 = (_QWORD *)(v18 + v35);
  v83 = v37[1];
  *v36 = *v37;
  v36[1] = v83;
  v38 = v24[18];
  v39 = (_QWORD *)(v17 + v38);
  v40 = (_QWORD *)(v18 + v38);
  v81 = v40[1];
  *v39 = *v40;
  v39[1] = v81;
  v41 = v24[19];
  v42 = (_QWORD *)(v17 + v41);
  v43 = (_QWORD *)(v18 + v41);
  v79 = v43[1];
  *v42 = *v43;
  v42[1] = v79;
  v44 = v24[20];
  v45 = (_QWORD *)(v17 + v44);
  v46 = (_QWORD *)(v18 + v44);
  v77 = v46[1];
  *v45 = *v46;
  v45[1] = v77;
  v47 = v24[21];
  v48 = (_QWORD *)(v17 + v47);
  v49 = (_QWORD *)(v18 + v47);
  v50 = v49[1];
  *v48 = *v49;
  v48[1] = v50;
  v51 = v24[22];
  v52 = (_QWORD *)(v17 + v51);
  v53 = (_QWORD *)(v18 + v51);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = v24[23];
  v56 = (_QWORD *)(v17 + v55);
  v57 = (_QWORD *)(v18 + v55);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  v59 = v24[24];
  v60 = v17 + v59;
  v61 = v18 + v59;
  *(_QWORD *)v60 = *(_QWORD *)v61;
  *(_BYTE *)(v60 + 8) = *(_BYTE *)(v61 + 8);
  *(_BYTE *)(v17 + v24[25]) = *(_BYTE *)(v18 + v24[25]);
  v62 = v24[26];
  v63 = *(_QWORD *)(v18 + v62);
  *(_QWORD *)(v17 + v62) = v63;
  v64 = v24[27];
  v65 = (_QWORD *)(v17 + v64);
  v66 = (_QWORD *)(v18 + v64);
  v67 = v66[1];
  *v65 = *v66;
  v65[1] = v67;
  v68 = v24[28];
  v69 = (_QWORD *)(v17 + v68);
  v70 = (_QWORD *)(v18 + v68);
  v71 = v70[1];
  *v69 = *v70;
  v69[1] = v71;
  v72 = v24[29];
  v73 = (_QWORD *)(v17 + v72);
  v74 = (_QWORD *)(v18 + v72);
  v75 = v74[1];
  *v73 = *v74;
  v73[1] = v75;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v75);
  return a1;
}

uint64_t type metadata accessor for ClientContext(uint64_t a1)
{
  uint64_t result;

  result = qword_1002602B0;
  if (!qword_1002602B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClientContext);
  return result;
}

uint64_t sub_10001F6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LegacyLocationServerRequestContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for LegacyLocationServerRequestContext(uint64_t a1)
{
  uint64_t result;

  result = qword_100265CB0;
  if (!qword_100265CB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LegacyLocationServerRequestContext);
  return result;
}

uint64_t sub_10001F728(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10001A484(result, a2);
  return result;
}

uint64_t sub_10001F73C(uint64_t a1)
{
  return sub_10016B818(a1, (uint64_t (*)(uint64_t))&type metadata accessor for Device, &qword_100263890, (uint64_t)&protocol conformance descriptor for Device, (void (*)(char *, char *))sub_10001F760);
}

uint64_t sub_10001F760(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for Device(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100004EA8(&qword_100263890, v12, (uint64_t)&protocol conformance descriptor for Device);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100004EA8(&qword_100263368, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_10001F9BC((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_10001F9BC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for Device(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001656AC(v12, (uint64_t (*)(uint64_t))&type metadata accessor for Device, &qword_1002655D0, &qword_100263890, (uint64_t)&protocol conformance descriptor for Device);
  }
  else
  {
    if (v11 > v10)
    {
      sub_10000D090((uint64_t (*)(_QWORD))&type metadata accessor for Device, &qword_1002655D0);
      goto LABEL_12;
    }
    sub_100166C9C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for Device, &qword_1002655D0, &qword_100263890, (uint64_t)&protocol conformance descriptor for Device);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100004EA8(&qword_100263890, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100004EA8(&qword_100263368, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_10001FC14()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD v50[2];

  v50[0] = 0;
  v50[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(564);
  v1._object = (void *)0x8000000100200D30;
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v1);
  Double.write<A>(to:)(v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)v0);
  v2._countAndFlagsBits = 0x6C6C6F4678616D20;
  v2._object = (void *)0xEF203A737265776FLL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._object = (void *)0x8000000100200D50;
  v5._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v5);
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
    v6 = 1702195828;
  else
    v6 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
    v7 = 0xE400000000000000;
  else
    v7 = 0xE500000000000000;
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 0xD00000000000001ALL;
  v9._object = (void *)0x8000000100200D70;
  String.append(_:)(v9);
  Double.write<A>(to:)(v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 24));
  v10._countAndFlagsBits = 0x6569724678616D20;
  v10._object = (void *)0xED0000203A73646ELL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 0xD000000000000021;
  v13._object = (void *)0x8000000100200D90;
  String.append(_:)(v13);
  Double.write<A>(to:)(v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 40));
  v14._countAndFlagsBits = 0xD000000000000017;
  v14._object = (void *)0x8000000100200DC0;
  String.append(_:)(v14);
  Double.write<A>(to:)(v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 48));
  v15._countAndFlagsBits = 0xD000000000000020;
  v15._object = (void *)0x8000000100200DE0;
  String.append(_:)(v15);
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
    v16 = 1702195828;
  else
    v16 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
    v17 = 0xE400000000000000;
  else
    v17 = 0xE500000000000000;
  v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease(v17);
  v19._object = (void *)0x8000000100200E10;
  v19._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v19);
  Double.write<A>(to:)(v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 64));
  v20._countAndFlagsBits = 0xD00000000000001FLL;
  v20._object = (void *)0x8000000100200E30;
  String.append(_:)(v20);
  Double.write<A>(to:)(v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 72));
  v21._object = (void *)0x8000000100200E50;
  v21._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v21);
  Double.write<A>(to:)(v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 80));
  v22._object = (void *)0x8000000100200E70;
  v22._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v22);
  Double.write<A>(to:)(v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 88));
  v23._countAndFlagsBits = 0xD000000000000012;
  v23._object = (void *)0x8000000100200E90;
  String.append(_:)(v23);
  if ((*(_BYTE *)(v0 + 96) & 1) != 0)
    v24 = 1702195828;
  else
    v24 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 96) & 1) != 0)
    v25 = 0xE400000000000000;
  else
    v25 = 0xE500000000000000;
  v26 = v25;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease(v25);
  v27._countAndFlagsBits = 0xD000000000000019;
  v27._object = (void *)0x8000000100200EB0;
  String.append(_:)(v27);
  if ((*(_BYTE *)(v0 + 97) & 1) != 0)
    v28 = 1702195828;
  else
    v28 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 97) & 1) != 0)
    v29 = 0xE400000000000000;
  else
    v29 = 0xE500000000000000;
  v30 = v29;
  String.append(_:)(*(Swift::String *)&v28);
  swift_bridgeObjectRelease(v29);
  v31._countAndFlagsBits = 0xD000000000000022;
  v31._object = (void *)0x8000000100200ED0;
  String.append(_:)(v31);
  if ((*(_BYTE *)(v0 + 98) & 1) != 0)
    v32 = 1702195828;
  else
    v32 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 98) & 1) != 0)
    v33 = 0xE400000000000000;
  else
    v33 = 0xE500000000000000;
  v34 = v33;
  String.append(_:)(*(Swift::String *)&v32);
  swift_bridgeObjectRelease(v33);
  v35._countAndFlagsBits = 0x6F697461636F6C20;
  v35._object = (void *)0xEE00203A4C54546ELL;
  String.append(_:)(v35);
  Double.write<A>(to:)(v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 104));
  v36._object = (void *)0x8000000100200F00;
  v36._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v36);
  v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v38 = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v38);
  v39._object = (void *)0x8000000100200F20;
  v39._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v39);
  Double.write<A>(to:)(v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 120));
  v40._object = (void *)0x8000000100200F40;
  v40._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v40);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
    v41 = 1702195828;
  else
    v41 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
    v42 = 0xE400000000000000;
  else
    v42 = 0xE500000000000000;
  v43 = v42;
  String.append(_:)(*(Swift::String *)&v41);
  swift_bridgeObjectRelease(v42);
  v44._countAndFlagsBits = 0xD000000000000011;
  v44._object = (void *)0x8000000100200F70;
  String.append(_:)(v44);
  Double.write<A>(to:)(v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 136));
  v45._countAndFlagsBits = 0xD000000000000025;
  v45._object = (void *)0x8000000100200F90;
  String.append(_:)(v45);
  if ((*(_BYTE *)(v0 + 99) & 1) != 0)
    v46 = 1702195828;
  else
    v46 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 99) & 1) != 0)
    v47 = 0xE400000000000000;
  else
    v47 = 0xE500000000000000;
  v48 = v47;
  String.append(_:)(*(Swift::String *)&v46);
  swift_bridgeObjectRelease(v47);
  return v50[0];
}

uint64_t sub_100020220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((*(_BYTE *)(v0 + 200) & 1) != 0)
  {
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100037A9C(v1, (uint64_t)qword_10027ABA8);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 152);
    if (!v5)
      goto LABEL_13;
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v19 = v8;
    *(_DWORD *)v7 = 136446210;
    *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD00000000000001DLL, 0x80000001001FCF20, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Not %{public}s to server since no clients connected", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    v9 = v8;
    goto LABEL_12;
  }
  sub_100020530();
  v11 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRelease(v10);
  if (v11)
    return swift_task_switch(sub_10000CFC0, *(_QWORD *)(v0 + 152), 0);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100037A9C(v13, (uint64_t)qword_10027ABA8);
  v3 = Logger.logObject.getter(v14);
  v15 = static os_log_type_t.default.getter();
  v16 = os_log_type_enabled(v3, v15);
  v6 = *(_QWORD *)(v0 + 152);
  if (v16)
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v19 = v17;
    *(_DWORD *)v7 = 136446210;
    *(_QWORD *)(v0 + 56) = sub_10002BA84(0xD00000000000001DLL, 0x80000001001FCF20, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v15, "Not %{public}s to server since no client is interested legacy refresh", v7, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v9 = v17;
LABEL_12:
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
LABEL_13:
  swift_release(v6);

  v18 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_100020530()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;

  v17 = &_swiftEmptySetSingleton;
  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions, &v16, 0, 0);
  v2 = *v1;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(v2);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v7)
      goto LABEL_23;
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v7)
        goto LABEL_23;
      v13 = *(_QWORD *)(v3 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v7)
          goto LABEL_23;
        v13 = *(_QWORD *)(v3 + 8 * v8);
        if (!v13)
        {
          v8 = v12 + 3;
          if (v12 + 3 >= v7)
            goto LABEL_23;
          v13 = *(_QWORD *)(v3 + 8 * v8);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_5:
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 24 * v10));
    sub_100021644(v11);
  }
  v14 = v12 + 4;
  if (v14 >= v7)
  {
LABEL_23:
    swift_release(v2);
    v15 = v17;
    sub_100020F00((uint64_t)v17);
    swift_bridgeObjectRelease(v15);
    return;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v7)
      goto LABEL_23;
    v13 = *(_QWORD *)(v3 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1000206E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  char v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t);
  char *v108;
  uint64_t v109[3];

  v1 = *(_QWORD *)(v0 + 1240);
  v2 = *(_QWORD *)(v0 + 1232);
  v3 = *(_QWORD *)(v0 + 1224);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 1576);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1568));
    v5 = *(_QWORD *)(v0 + 840);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    sub_1000087A0(v3, &qword_100260580);
    if (qword_10025F8C0 != -1)
      swift_once(&qword_10025F8C0, sub_100098E4C);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100037A9C(v6, (uint64_t)qword_10027AB38);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing primary account to make Location Request!", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }
    v11 = *(_QWORD *)(v0 + 1608);
    v12 = *(_QWORD *)(v0 + 1520);

    v13 = sub_100082560();
    v106 = swift_allocError(&type metadata for LocationServiceError, v13, 0, 0);
    *v14 = 1;
    swift_willThrow(v106);
    swift_release(v11);
    swift_release(v12);
    v15 = *(_QWORD *)(v0 + 1464);
    v16 = *(_QWORD *)(v0 + 1456);
    v17 = *(_QWORD *)(v0 + 1448);
    v18 = *(_QWORD *)(v0 + 1440);
    v19 = *(_QWORD *)(v0 + 1416);
    v20 = *(_QWORD *)(v0 + 1408);
    v21 = *(_QWORD *)(v0 + 1400);
    v22 = *(_QWORD *)(v0 + 1392);
    v23 = *(_QWORD *)(v0 + 1384);
    v69 = *(_QWORD *)(v0 + 1360);
    v70 = *(_QWORD *)(v0 + 1352);
    v71 = *(_QWORD *)(v0 + 1344);
    v72 = *(_QWORD *)(v0 + 1336);
    v73 = *(_QWORD *)(v0 + 1312);
    v74 = *(_QWORD *)(v0 + 1288);
    v75 = *(_QWORD *)(v0 + 1264);
    v76 = *(_QWORD *)(v0 + 1256);
    v77 = *(_QWORD *)(v0 + 1248);
    v78 = *(_QWORD *)(v0 + 1224);
    v79 = *(_QWORD *)(v0 + 1216);
    v80 = *(_QWORD *)(v0 + 1192);
    v81 = *(_QWORD *)(v0 + 1184);
    v82 = *(_QWORD *)(v0 + 1160);
    v83 = *(_QWORD *)(v0 + 1144);
    v84 = *(_QWORD *)(v0 + 1120);
    v85 = *(_QWORD *)(v0 + 1112);
    v86 = *(_QWORD *)(v0 + 1104);
    v87 = *(_QWORD *)(v0 + 1080);
    v88 = *(_QWORD *)(v0 + 1072);
    v89 = *(_QWORD *)(v0 + 1048);
    v91 = *(_QWORD *)(v0 + 1040);
    v93 = *(_QWORD *)(v0 + 1032);
    v95 = *(_QWORD *)(v0 + 1008);
    v97 = *(_QWORD *)(v0 + 984);
    v99 = *(_QWORD *)(v0 + 976);
    v102 = *(_QWORD *)(v0 + 952);
    swift_task_dealloc(*(_QWORD *)(v0 + 1472));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v102);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 1568);
    v92 = *(_QWORD *)(v0 + 1304);
    v100 = *(_QWORD *)(v0 + 1296);
    v103 = *(_QWORD *)(v0 + 1288);
    v26 = *(_QWORD *)(v0 + 1216);
    v27 = *(_QWORD *)(v0 + 1208);
    v28 = *(_QWORD *)(v0 + 1200);
    v90 = *(_QWORD *)(v0 + 1192);
    v94 = *(_QWORD *)(v0 + 1176);
    v96 = *(_QWORD *)(v0 + 1184);
    v98 = *(_QWORD *)(v0 + 1168);
    v29 = *(_QWORD *)(v0 + 928);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 1264), v3, v2);
    v30 = OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority;
    *(_QWORD *)(v0 + 1632) = OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority;
    v31 = v29 + v30;
    swift_beginAccess(v29 + v30, v0 + 712, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v31, v28);
    swift_bridgeObjectRetain(v25);
    v33 = sub_100020F00(v32);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56))(v90, 1, 1, v100);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v94 + 104))(v96, enum case for ClientOrigin.other(_:), v98);
    RequestOrigin.init(_:)(v96);
    LocationRequest.init(priority:origin:toHandles:reason:startRefreshingLocation:isCached:)(v26, v103, v33, v90, 0, 0);
    if (qword_10025F8C0 != -1)
      swift_once(&qword_10025F8C0, sub_100098E4C);
    v34 = *(_QWORD *)(v0 + 1352);
    v35 = *(_QWORD *)(v0 + 1344);
    v36 = *(_QWORD *)(v0 + 1328);
    v37 = *(_QWORD *)(v0 + 1320);
    v38 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 1640) = sub_100037A9C(v38, (uint64_t)qword_10027AB38);
    v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
    v39 = v107(v35, v34, v37);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter();
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(_QWORD *)(v0 + 1344);
    v44 = *(_QWORD *)(v0 + 1320);
    if (v42)
    {
      v104 = *(_QWORD *)(v0 + 1328);
      v45 = swift_slowAlloc(32, -1);
      v46 = swift_slowAlloc(64, -1);
      v109[0] = v46;
      *(_DWORD *)v45 = 136446723;
      *(_QWORD *)(v0 + 880) = sub_10002BA84(0xD00000000000002FLL, 0x80000001001FD880, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 880, v0 + 888, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2160;
      *(_QWORD *)(v0 + 888) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 888, v0 + 896, v45 + 14, v45 + 22);
      *(_WORD *)(v45 + 22) = 2081;
      v47 = sub_100004EA8(&qword_100260660, (uint64_t (*)(uint64_t))&type metadata accessor for LocationRequest, (uint64_t)&protocol conformance descriptor for LocationRequest);
      v48 = dispatch thunk of CustomStringConvertible.description.getter(v44, v47);
      v50 = v49;
      *(_QWORD *)(v0 + 896) = sub_10002BA84(v48, v49, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 896, v0 + 904, v45 + 24, v45 + 32);
      swift_bridgeObjectRelease(v50);
      v51 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
      v51(v43, v44);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "CommandManager %{public}s request: %{private,mask.hash}s", (uint8_t *)v45, 0x20u);
      swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      v51 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1328) + 8);
      v51(*(_QWORD *)(v0 + 1344), *(_QWORD *)(v0 + 1320));
    }

    *(_QWORD *)(v0 + 1648) = v51;
    v52 = *(_QWORD *)(v0 + 1568);
    v53 = *(_QWORD *)(v0 + 1352);
    v54 = *(_QWORD *)(v0 + 1336);
    v101 = *(_QWORD *)(v0 + 1320);
    v105 = *(_QWORD *)(v0 + 1576);
    v55 = *(_QWORD *)(v0 + 1264);
    v56 = *(_QWORD *)(v0 + 1256);
    v57 = *(_QWORD *)(v0 + 1248);
    v58 = *(_QWORD *)(v0 + 1232);
    v59 = *(_QWORD *)(v0 + 1160);
    v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1240) + 16);
    v61 = v60(v56, v55, v58);
    v62 = LocationRequest.shallowLocatesOnly.getter(v61);
    sub_10000F618(v56, (v62 & 1) == 0, v59);
    v60(v57, v55, v58);
    v107(v54, v53, v101);
    swift_bridgeObjectRetain(v105);
    swift_bridgeObjectRetain(v52);
    v64 = sub_100020F00(v63);
    swift_bridgeObjectRelease(v52);
    v65 = *(_QWORD *)(v0 + 840);
    *(_QWORD *)(v0 + 1656) = v65;
    swift_bridgeObjectRetain(v65);
    v67 = sub_100009E04(v66);
    swift_bridgeObjectRelease(v65);
    v108 = (char *)&dword_100265C40 + dword_100265C40;
    v68 = (_QWORD *)swift_task_alloc(unk_100265C44);
    *(_QWORD *)(v0 + 1664) = v68;
    *v68 = v0;
    v68[1] = sub_10003E1CC;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD *, _QWORD *))v108)(*(_QWORD *)(v0 + 1248), *(_QWORD *)(v0 + 1336), *(unsigned __int8 *)(v0 + 1780), *(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 1576), v64, v67);
  }
}

_QWORD *sub_100020F00(uint64_t a1)
{
  return sub_10003346C(a1, &qword_100262658, (uint64_t (*)(_QWORD))&type metadata accessor for Handle);
}

void sub_100020F14()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __n128 v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t refreshed;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, unint64_t, uint64_t);
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101[2];

  v1 = v0[195];
  v2 = _swiftEmptyArrayStorage;
  v101[0] = (uint64_t)_swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = v0[179];
    v6 = (char *)_swiftEmptyArrayStorage;
    v95 = *(_QWORD *)(v1 + 16);
    v98 = v1;
    while (v4 < *(_QWORD *)(v1 + 16))
    {
      v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v8 = *(_QWORD *)(v5 + 72);
      v9 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v5 + 16))(v0[184], v0[195] + v7 + v8 * v4, v0[178]);
      if ((Friend.isLegacyLocationCapable.getter(v9) & 1) != 0)
      {
        v10 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
        v10((char *)v0[183], v0[184], v0[178]);
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        {
          sub_1000303C0(0, *((_QWORD *)v6 + 2) + 1, 1);
          v6 = (char *)v101[0];
        }
        v12 = *((_QWORD *)v6 + 2);
        v11 = *((_QWORD *)v6 + 3);
        if (v12 >= v11 >> 1)
        {
          sub_1000303C0(v11 > 1, v12 + 1, 1);
          v6 = (char *)v101[0];
        }
        v13 = v0[183];
        v14 = v0[178];
        *((_QWORD *)v6 + 2) = v12 + 1;
        v10(&v6[v7 + v12 * v8], v13, v14);
        v101[0] = (uint64_t)v6;
        v3 = v95;
        v1 = v98;
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v5 + 8))(v0[184], v0[178]);
      }
      if (v3 == ++v4)
      {
        v1 = v0[195];
        v2 = _swiftEmptyArrayStorage;
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_48;
  }
  v6 = (char *)_swiftEmptyArrayStorage;
LABEL_14:
  swift_bridgeObjectRelease(v1);
  v15 = *((_QWORD *)v6 + 2);
  if (v15)
  {
    v16 = v0[179];
    v17 = v0[172];
    v101[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_100018EBC(0, v15, 0);
    v18 = &v6[(*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)];
    v19 = v16;
    v96 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 16);
    v99 = *(_QWORD *)(v16 + 72);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v20 = v2;
      v21 = v0[182];
      v22 = v0[178];
      v23 = v96(v21, v18, v22);
      Friend.handle.getter(v23);
      v24 = v21;
      v2 = v20;
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v24, v22);
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      {
        sub_100018EBC(0, v20[2] + 1, 1);
        v2 = (_QWORD *)v101[0];
      }
      v26 = v2[2];
      v25 = v2[3];
      if (v26 >= v25 >> 1)
      {
        sub_100018EBC(v25 > 1, v26 + 1, 1);
        v2 = (_QWORD *)v101[0];
      }
      v27 = v0[177];
      v28 = v0[171];
      v2[2] = v26 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))((unint64_t)v2+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v26, v27, v28);
      v101[0] = (uint64_t)v2;
      v18 += v99;
      --v15;
    }
    while (v15);
  }
  swift_release(v6);
  v29 = *(_QWORD **)(v0[116] + v0[192]);
  v86 = v29[2];
  if (v86)
  {
    v97 = v0[172];
    v30 = v0[166];
    v84 = v0[160];
    v85 = v0[163];
    v83 = (char *)v29 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
    v31 = swift_bridgeObjectRetain(v29);
    v32 = 0;
    v33 = _swiftEmptyArrayStorage;
    v100 = &_swiftEmptySetSingleton;
    v90 = v2;
    v81 = v30;
    v82 = v29;
    while (v32 < v29[2])
    {
      v45 = (*(uint64_t (**)(_QWORD, char *, _QWORD, __n128))(v30 + 16))(v0[170], &v83[*(_QWORD *)(v30 + 72) * v32], v0[165], v31);
      v46 = LocationRequest.toHandles.getter(v45);
      v47 = *(_QWORD *)(v46 + 16);
      v48 = swift_bridgeObjectRelease(v46);
      if (v47)
      {
        v49 = LocationRequest.toHandles.getter(v48);
      }
      else
      {
        v49 = (uint64_t)v90;
        v50 = swift_bridgeObjectRetain(v90);
      }
      v51 = v0[164];
      v52 = v0[162];
      v53 = LocationRequest.refreshReason.getter(v50);
      refreshed = LegacyRefreshCommandReason.reason.getter(v53);
      v93 = v55;
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v51, v52);
      if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
        v33 = sub_10003C33C(0, v33[2] + 1, 1, v33);
      v57 = v33[2];
      v56 = v33[3];
      if (v57 >= v56 >> 1)
        v33 = sub_10003C33C((_QWORD *)(v56 > 1), v57 + 1, 1, v33);
      v33[2] = v57 + 1;
      v58 = &v33[2 * v57];
      v58[4] = refreshed;
      v58[5] = v93;
      v92 = *(_QWORD *)(v49 + 16);
      if (v92)
      {
        v88 = v32;
        v89 = v33;
        v59 = 0;
        v87 = v49;
        v91 = v49 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
        v60 = *(_QWORD *)(v97 + 72);
        v61 = *(void (**)(uint64_t, unint64_t, uint64_t))(v97 + 16);
        do
        {
          v67 = v0[171];
          v94 = v59;
          v61(v0[176], v91 + v59 * v60, v67);
          v68 = (uint64_t)v100;
          v69 = v100[5];
          v70 = sub_100004EA8(&qword_1002605F8, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
          swift_bridgeObjectRetain(v100);
          v71 = dispatch thunk of Hashable._rawHashValue(seed:)(v69, v67, v70);
          v72 = -1 << *((_BYTE *)v100 + 32);
          v73 = v71 & ~v72;
          if (((*(_QWORD *)((char *)v100 + ((v73 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v73) & 1) != 0)
          {
            v74 = ~v72;
            while (1)
            {
              v75 = v0[176];
              v76 = v0[175];
              v77 = v0[171];
              v61(v76, *(_QWORD *)(v68 + 48) + v73 * v60, v77);
              v78 = sub_100004EA8(&qword_1002605F0, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
              LOBYTE(v75) = dispatch thunk of static Equatable.== infix(_:_:)(v76, v75, v77, v78);
              v66 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
              v66(v76, v77);
              if ((v75 & 1) != 0)
                break;
              v73 = (v73 + 1) & v74;
              v68 = (uint64_t)v100;
              if (((*(_QWORD *)((char *)v100 + ((v73 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v73) & 1) == 0)
                goto LABEL_35;
            }
            swift_bridgeObjectRelease(v100);
          }
          else
          {
LABEL_35:
            v62 = v0[176];
            v63 = v0[175];
            v64 = v0[171];
            swift_bridgeObjectRelease(v68);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v68);
            v61(v63, v62, v64);
            v101[0] = v68;
            sub_100021AC4(v63, v73, isUniquelyReferenced_nonNull_native);
            v100 = (_QWORD *)v101[0];
            swift_bridgeObjectRelease(0x8000000000000000);
            v66 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
          }
          v66(v0[176], v0[171]);
          v59 = v94 + 1;
        }
        while (v94 + 1 != v92);
        v34 = swift_bridgeObjectRelease(v87);
        v30 = v81;
        v29 = v82;
        v32 = v88;
        v33 = v89;
      }
      else
      {
        v34 = swift_bridgeObjectRelease(v49);
      }
      v35 = v32 + 1;
      v36 = v0[170];
      v37 = v0[165];
      v38 = v0[161];
      v39 = v0[159];
      v40 = LocationRequest.origin.getter(v34);
      v41 = RequestOrigin.contextApp.getter(v40);
      v42 = v39;
      v32 = v35;
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v38, v42);
      v0[104] = v41;
      v43 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      sub_10003007C(v101, v43, v44);
      swift_bridgeObjectRelease(v101[1]);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v36, v37);
      if (v35 == v86)
      {
        swift_bridgeObjectRelease(v90);
        v2 = v29;
        v79 = v100;
        goto LABEL_46;
      }
    }
LABEL_48:
    __break(1u);
    return;
  }
  v33 = _swiftEmptyArrayStorage;
  v79 = &_swiftEmptySetSingleton;
LABEL_46:
  v0[197] = v33;
  v0[196] = v79;
  swift_bridgeObjectRelease(v2);
  v80 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[198] = v80;
  *v80 = v0;
  v80[1] = sub_100007E9C;
  daemon.getter();
}

uint64_t sub_100021644(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for Handle(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v24 - v8;
  result = __chkstk_darwin(v7);
  v12 = (char *)&v24 - v11;
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 64);
  v25 = a1 + 64;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_5;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v18)
      return swift_release(a1);
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v18)
        return swift_release(a1);
      v22 = *(_QWORD *)(v25 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v18)
          return swift_release(a1);
        v22 = *(_QWORD *)(v25 + 8 * v13);
        if (!v22)
        {
          v13 = v21 + 3;
          if (v21 + 3 >= v18)
            return swift_release(a1);
          v22 = *(_QWORD *)(v25 + 8 * v13);
          if (!v22)
            break;
        }
      }
    }
LABEL_22:
    v17 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v12, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * v20, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v2);
    sub_100021868((uint64_t)v9, v6);
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }
  v23 = v21 + 4;
  if (v23 >= v18)
    return swift_release(a1);
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v18)
      return swift_release(a1);
    v22 = *(_QWORD *)(v25 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100021868(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for Handle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100004EA8(&qword_1002605F8, v12, (uint64_t)&protocol conformance descriptor for Handle);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100004EA8(&qword_1002605F0, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100021AC4((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_100021AC4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for Handle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001656AC(v12, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, &qword_1002655F0, &qword_1002605F8, (uint64_t)&protocol conformance descriptor for Handle);
  }
  else
  {
    if (v11 > v10)
    {
      sub_10000D090((uint64_t (*)(_QWORD))&type metadata accessor for Handle, &qword_1002655F0);
      goto LABEL_12;
    }
    sub_100166C9C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, &qword_1002655F0, &qword_1002605F8, (uint64_t)&protocol conformance descriptor for Handle);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100004EA8(&qword_1002605F8, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100004EA8(&qword_1002605F0, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100021D18(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  return sub_100021D3C(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for Friend, (void (*)(BOOL, uint64_t, uint64_t))sub_1000303C0);
}

uint64_t sub_100021D3C(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(BOOL, uint64_t, uint64_t);
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;

  v22 = a5;
  v29 = a4(0);
  v9 = *(_QWORD *)(v29 - 8);
  v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  v28 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v14 = (char *)&v22 - v13;
  v15 = &_swiftEmptyArrayStorage;
  v30 = &_swiftEmptyArrayStorage;
  v27 = *(_QWORD *)(a3 + 16);
  if (v27)
  {
    v16 = 0;
    v24 = a2;
    v25 = a3;
    v23 = a1;
    while (v16 < *(_QWORD *)(a3 + 16))
    {
      v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v15 = *(void **)(v9 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v14, a3 + v17 + (_QWORD)v15 * v16, v29);
      v18 = a1(v14);
      if (v5)
      {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v29);
        swift_bridgeObjectRelease(a3);
        swift_release(v30);
        return (uint64_t)v15;
      }
      if ((v18 & 1) != 0)
      {
        v26 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v26(v28, v14, v29);
        v19 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
        {
          v22(0, v19[2] + 1, 1);
          v19 = v30;
        }
        v21 = v19[2];
        v20 = v19[3];
        if (v21 >= v20 >> 1)
        {
          v22(v20 > 1, v21 + 1, 1);
          v19 = v30;
        }
        v19[2] = v21 + 1;
        result = ((uint64_t (*)(char *, char *, uint64_t))v26)((char *)v19 + v17 + v21 * (_QWORD)v15, v28, v29);
        v30 = v19;
        a3 = v25;
        a1 = v23;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v29);
      }
      if (v27 == ++v16)
      {
        v15 = v30;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v15;
  }
  return result;
}

BOOL sub_100021F58(uint64_t a1)
{
  uint64_t v1;

  return sub_100021F74(a1, *(_QWORD *)(v1 + 16));
}

BOOL sub_100021F74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  os_log_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  os_log_t v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71[16];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v69 = a2;
  v68 = type metadata accessor for Friend(0);
  v3 = *(_QWORD *)(v68 - 8);
  v4 = __chkstk_darwin(v68);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v57 - v7;
  v9 = type metadata accessor for Handle(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v57 - v15;
  v67 = a1;
  v17 = Friend.handle.getter(v14);
  v18 = Handle.expiresByGroupId.getter(v17);
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v16, v9);
  v20 = v70;
  v72 = v69;
  v21 = sub_100022440((uint64_t)sub_100022C88, (uint64_t)v71, v18);
  v70 = v20;
  swift_bridgeObjectRelease(v18);
  v22 = *(_QWORD *)(v21 + 16);
  swift_release(v21);
  if (!v22)
  {
    v64 = v19;
    v65 = v13;
    v66 = v9;
    v69 = 0;
    v23 = v6;
    v24 = v67;
    v25 = v68;
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v26 = type metadata accessor for Logger(0);
    sub_100037A9C(v26, (uint64_t)qword_10027ACA0);
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v28 = v24;
    v29 = v24;
    v30 = v25;
    v27(v8, v29, v25);
    v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v27)(v23, v28, v25);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter();
    v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      v35 = swift_slowAlloc(52, -1);
      v67 = swift_slowAlloc(96, -1);
      v75 = v67;
      *(_DWORD *)v35 = 136447235;
      v63 = v32;
      v73 = sub_10002BA84(0xD000000000000025, 0x8000000100200A70, &v75);
      v61 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v35 + 4, v35 + 12);
      *(_WORD *)(v35 + 12) = 2160;
      v73 = 1752392040;
      v36 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v35 + 14, v35 + 22);
      *(_WORD *)(v35 + 22) = 2081;
      v59 = v35 + 24;
      v37 = v65;
      v38 = Friend.handle.getter(v36);
      v39 = Handle.identifier.getter(v38);
      v58 = v23;
      v41 = v40;
      v42 = v8;
      v62 = v34;
      v43 = v66;
      v44 = v64;
      v64(v37, v66);
      v73 = sub_10002BA84(v39, v41, &v75);
      v60 = &v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v59, v35 + 32);
      swift_bridgeObjectRelease(v41);
      v61 = *(_QWORD *)(v61 + 8);
      ((void (*)(char *, uint64_t))v61)(v42, v30);
      *(_WORD *)(v35 + 32) = 2160;
      v73 = 1752392040;
      v45 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v35 + 34, v35 + 42);
      *(_WORD *)(v35 + 42) = 2081;
      v59 = v35 + 44;
      v46 = v58;
      v47 = Friend.handle.getter(v45);
      v48 = Handle.expiresByGroupId.getter(v47);
      v44(v37, v43);
      type metadata accessor for GroupID(0);
      type metadata accessor for Date(0);
      sub_100004EA8(&qword_100263458, (uint64_t (*)(uint64_t))&type metadata accessor for GroupID, (uint64_t)&protocol conformance descriptor for GroupID);
      v50 = Dictionary.description.getter(v49);
      v52 = v51;
      swift_bridgeObjectRelease(v48);
      v73 = sub_10002BA84(v50, v52, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v60, v59, v35 + 52);
      swift_bridgeObjectRelease(v52);
      ((void (*)(char *, uint64_t))v61)(v46, v68);
      v53 = v63;
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v62, "%{public}s expired Friend:%{private,mask.hash}s\nexpiresByGroupId:%{private,mask.hash}s", (uint8_t *)v35, 0x34u);
      v54 = v67;
      swift_arrayDestroy(v67, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {
      v55 = *(void (**)(char *, uint64_t))(v3 + 8);
      v55(v8, v25);
      v55(v23, v25);

    }
    v22 = v69;
  }
  return v22 == 0;
}

uint64_t sub_100022440(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v6)(char *, char *);
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v6 = (uint64_t (*)(char *, char *))isStackAllocationSafe;
  v7 = *(_BYTE *)(a3 + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    v12 = sub_1000225B0((unint64_t *)((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0)), v10, (_QWORD *)a3, v6);
    if (v3)
      swift_willThrow(v12);
    else
      return v12;
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v11, -1);
    bzero(v13, v11);
    a2 = sub_1000225B0((unint64_t *)v13, v10, (_QWORD *)a3, v6);
    swift_slowDealloc(v13, -1, -1);
  }
  return a2;
}

uint64_t sub_1000225B0(unint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(char *, char *))
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, char *);
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;

  v42 = a4;
  v36 = a2;
  v37 = a1;
  v41 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for GroupID(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = __chkstk_darwin(v7);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v13 = 0;
  v43 = a3;
  v16 = a3[8];
  v15 = a3 + 8;
  v14 = v16;
  v17 = 1 << *((_BYTE *)v15 - 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v14;
  v39 = v15;
  v40 = (unint64_t)(v17 + 63) >> 6;
LABEL_4:
  v38 = v12;
  while (v19)
  {
    v45 = (v19 - 1) & v19;
    v46 = v13;
    v20 = __clz(__rbit64(v19)) | (v13 << 6);
    v21 = v44;
LABEL_18:
    v26 = v43;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v11, v43[6] + *(_QWORD *)(v8 + 72) * v20, v7);
    v27 = v26[7] + *(_QWORD *)(v21 + 72) * v20;
    v28 = *(void (**)(char *, unint64_t, uint64_t))(v21 + 16);
    v29 = v21;
    v30 = v41;
    v28(v6, v27, v41);
    v31 = v47;
    v32 = v42(v11, v6);
    v47 = v31;
    if (v31)
      goto LABEL_28;
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v30);
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v19 = v45;
    v13 = v46;
    if ((v33 & 1) != 0)
    {
      v34 = v38;
      *(unint64_t *)((char *)v37 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v22 = __OFADD__(v34, 1);
      v12 = v34 + 1;
      if (!v22)
        goto LABEL_4;
      __break(1u);
LABEL_28:
      (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
  }
  v22 = __OFADD__(v13, 1);
  v23 = v13 + 1;
  v21 = v44;
  if (v22)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v23 >= v40)
    return sub_10002289C(v37, v36, v38, v43);
  v24 = v39[v23];
  if (v24)
  {
LABEL_17:
    v45 = (v24 - 1) & v24;
    v46 = v23;
    v20 = __clz(__rbit64(v24)) + (v23 << 6);
    goto LABEL_18;
  }
  v25 = v23 + 1;
  if (v23 + 1 >= v40)
    return sub_10002289C(v37, v36, v38, v43);
  v24 = v39[v25];
  if (v24)
    goto LABEL_16;
  v25 = v23 + 2;
  if (v23 + 2 >= v40)
    return sub_10002289C(v37, v36, v38, v43);
  v24 = v39[v25];
  if (v24)
    goto LABEL_16;
  v25 = v23 + 3;
  if (v23 + 3 >= v40)
    return sub_10002289C(v37, v36, v38, v43);
  v24 = v39[v25];
  if (v24)
  {
LABEL_16:
    v23 = v25;
    goto LABEL_17;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v23 >= v40)
      return sub_10002289C(v37, v36, v38, v43);
    v24 = v39[v23];
    ++v25;
    if (v24)
      goto LABEL_17;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10002289C(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;

  v59 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v59 - 8);
  v8 = __chkstk_darwin(v59);
  v58 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v52 = (char *)&v46 - v10;
  v11 = type metadata accessor for GroupID(0);
  v51 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v57 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v50 = (char *)&v46 - v14;
  if (!a3)
    return (uint64_t)_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (uint64_t)a4;
  }
  sub_100037A5C(&qword_1002655E0);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v16 = result;
  v46 = a1;
  v47 = a2;
  if (a2 < 1)
    v17 = 0;
  else
    v17 = *a1;
  v18 = 0;
  v19 = result + 64;
  v48 = a4;
  v49 = result;
  v20 = v52;
  while (1)
  {
    v56 = a3;
    if (v17)
    {
      v54 = (v17 - 1) & v17;
      v55 = v18;
      v21 = __clz(__rbit64(v17)) | (v18 << 6);
    }
    else
    {
      v22 = v18 + 1;
      if (__OFADD__(v18, 1))
        goto LABEL_40;
      if (v22 >= v47)
        return v16;
      v23 = v46[v22];
      v24 = v18 + 1;
      if (!v23)
      {
        v24 = v18 + 2;
        if (v18 + 2 >= v47)
          return v16;
        v23 = v46[v24];
        if (!v23)
        {
          v24 = v18 + 3;
          if (v18 + 3 >= v47)
            return v16;
          v23 = v46[v24];
          if (!v23)
          {
            v25 = v18 + 4;
            if (v18 + 4 >= v47)
              return v16;
            v23 = v46[v25];
            if (!v23)
            {
              while (1)
              {
                v24 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v24 >= v47)
                  return v16;
                v23 = v46[v24];
                ++v25;
                if (v23)
                  goto LABEL_24;
              }
            }
            v24 = v18 + 4;
          }
        }
      }
LABEL_24:
      v54 = (v23 - 1) & v23;
      v55 = v24;
      v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    v26 = v50;
    v27 = v51;
    v28 = *(_QWORD *)(v51 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v50, a4[6] + v28 * v21, v11);
    v29 = a4[7];
    v30 = v53;
    v31 = *(_QWORD *)(v53 + 72);
    v32 = v29 + v31 * v21;
    v33 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v20, v32, v59);
    v34 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v34(v57, v26, v11);
    v35 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v35(v58, v20, v33);
    v16 = v49;
    v36 = *(_QWORD *)(v49 + 40);
    v37 = sub_100004EA8(&qword_100263458, (uint64_t (*)(uint64_t))&type metadata accessor for GroupID, (uint64_t)&protocol conformance descriptor for GroupID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v11, v37);
    v38 = -1 << *(_BYTE *)(v16 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v19 + 8 * (v39 >> 6))) != 0)
    {
      v41 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v19 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v44 = v40 == v43;
        if (v40 == v43)
          v40 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v19 + 8 * v40);
      }
      while (v45 == -1);
      v41 = __clz(__rbit64(~v45)) + (v40 << 6);
    }
    *(_QWORD *)(v19 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    v34((char *)(*(_QWORD *)(v16 + 48) + v41 * v28), v57, v11);
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v35)(*(_QWORD *)(v16 + 56) + v41 * v31, v58, v59);
    ++*(_QWORD *)(v16 + 16);
    a3 = v56 - 1;
    if (__OFSUB__(v56, 1))
      break;
    a4 = v48;
    v17 = v54;
    v18 = v55;
    if (v56 == 1)
      return v16;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100022C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return static Date.> infix(_:_:)(a2, *(_QWORD *)(v2 + 16));
}

uint64_t static Date.trustedNow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  char v17;
  _QWORD v18[4];

  v2 = sub_100037A5C((uint64_t *)&unk_100262930);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((static SystemInfo.underTest.getter(v3) & 1) != 0)
  {
    if (qword_10025FBB0 != -1)
      swift_once(&qword_10025FBB0, sub_1001D4F14);
    v6 = sub_100037A9C(v2, (uint64_t)qword_100267500);
    swift_beginAccess(v6, v18, 0, 0);
    sub_1000D6A78(v6, (uint64_t)v5);
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v5, v7);
    v9 = sub_1000087A0((uint64_t)v5, (uint64_t *)&unk_100262930);
  }
  else
  {
    valueOf(entitlement:)(v18, 0x6C7070612E6D6F63, 0xEF64656D69742E65);
    if (v18[3])
    {
      if ((swift_dynamicCast(&v17, v18, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
        && v17 == 1)
      {
        return static ReferenceClock.now.getter();
      }
    }
    else
    {
      sub_1000087A0((uint64_t)v18, &qword_1002615B8);
    }
    if (qword_10025FBB8 != -1)
      swift_once(&qword_10025FBB8, sub_1001D505C);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100037A9C(v11, (uint64_t)qword_10027B3B0);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Queried trustedNow but falling back to normal Date()", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

  }
  return Date.init()(v9);
}

uint64_t sub_100022EE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  _QWORD v40[2];
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;

  v3 = sub_100037A5C(&qword_100260950);
  __chkstk_darwin(v3);
  v41 = (uint64_t)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Friend(0);
  v49 = *(_QWORD **)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v50 = (char *)v40 - v10;
  result = __chkstk_darwin(v9);
  v44 = (char *)v40 - v12;
  v45 = v1;
  v46 = a1;
  v47 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v14 = a1 + 56;
  v13 = v15;
  v16 = -1 << *(_BYTE *)(v14 - 24);
  if (-v16 < 64)
    v17 = ~(-1 << -(char)v16);
  else
    v17 = -1;
  v18 = v17 & v13;
  v40[1] = -1 << *(_BYTE *)(v14 - 24);
  v42 = (unint64_t)(63 - v16) >> 6;
  v43 = v14;
  if ((v17 & v13) != 0)
    goto LABEL_7;
LABEL_8:
  v20 = v47 + 1;
  if (!__OFADD__(v47, 1))
  {
    if (v20 < v42)
    {
      v21 = *(_QWORD *)(v43 + 8 * v20);
      v22 = v47 + 1;
      if (v21)
        goto LABEL_21;
      v22 = v47 + 2;
      if (v47 + 2 >= v42)
        return sub_100086D50(v46);
      v21 = *(_QWORD *)(v43 + 8 * v22);
      if (v21)
        goto LABEL_21;
      v22 = v47 + 3;
      if (v47 + 3 >= v42)
        return sub_100086D50(v46);
      v21 = *(_QWORD *)(v43 + 8 * v22);
      if (v21)
      {
LABEL_21:
        v47 = v22;
        v48 = (v21 - 1) & v21;
        for (i = __clz(__rbit64(v21)) + (v22 << 6); ; i = __clz(__rbit64(v18)) | (v47 << 6))
        {
          v24 = v49;
          v25 = v49[9];
          v26 = (void (*)(char *, unint64_t, uint64_t))v49[2];
          v27 = v44;
          v26(v44, *(_QWORD *)(v46 + 48) + v25 * i, v5);
          ((void (*)(char *, char *, uint64_t))v24[4])(v50, v27, v5);
          v28 = *v1;
          if (*(_QWORD *)(*v1 + 16)
            && (v29 = *(_QWORD *)(v28 + 40),
                v30 = sub_100004EA8(&qword_1002608F8, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend), v31 = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30), v32 = -1 << *(_BYTE *)(v28 + 32), v33 = v31 & ~v32, ((*(_QWORD *)(v28 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) != 0))
          {
            v34 = ~v32;
            while (1)
            {
              v26(v8, *(_QWORD *)(v28 + 48) + v33 * v25, v5);
              v35 = sub_100004EA8(&qword_100263380, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
              v36 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v50, v5, v35);
              v37 = (void (*)(char *, uint64_t))v49[1];
              v37(v8, v5);
              if ((v36 & 1) != 0)
                break;
              v33 = (v33 + 1) & v34;
              if (((*(_QWORD *)(v28 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
                goto LABEL_6;
            }
            v38 = v41;
            v39 = v50;
            v1 = v45;
            sub_1000232C0((uint64_t)v50, v41);
            sub_1000087A0(v38, &qword_100260950);
            result = ((uint64_t (*)(char *, uint64_t))v37)(v39, v5);
            v18 = v48;
            if (!v48)
              goto LABEL_8;
          }
          else
          {
LABEL_6:
            v1 = v45;
            sub_100039A9C((uint64_t)v8, v50);
            result = ((uint64_t (*)(char *, uint64_t))v49[1])(v8, v5);
            v18 = v48;
            if (!v48)
              goto LABEL_8;
          }
LABEL_7:
          v48 = (v18 - 1) & v18;
        }
      }
      v23 = v47 + 4;
      if (v47 + 4 < v42)
      {
        v21 = *(_QWORD *)(v43 + 8 * v23);
        if (v21)
        {
          v22 = v47 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          v22 = v23 + 1;
          if (__OFADD__(v23, 1))
            goto LABEL_32;
          if (v22 >= v42)
            return sub_100086D50(v46);
          v21 = *(_QWORD *)(v43 + 8 * v22);
          ++v23;
          if (v21)
            goto LABEL_21;
        }
      }
    }
    return sub_100086D50(v46);
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1000232C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for Friend(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100004EA8(&qword_1002608F8, v12, (uint64_t)&protocol conformance descriptor for Friend);
  swift_bridgeObjectRetain(v10);
  v33 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v34 = v7;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_100004EA8(&qword_100263380, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v21);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v23 = 1;
        a2 = v32;
        v7 = v34;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v10);
    v24 = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v26 = *v24;
    v35 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10003C560();
      v26 = v35;
    }
    v27 = *(_QWORD *)(v26 + 48) + v20;
    v7 = v34;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 32))(v32, v27, v6);
    sub_100023B40(v16, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, &qword_1002608F8, (uint64_t)&protocol conformance descriptor for Friend);
    v28 = *v24;
    *v24 = v35;
    swift_bridgeObjectRelease(v28);
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v23 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
}

uint64_t sub_100023514(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  _QWORD v40[2];
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;

  v3 = sub_100037A5C(&qword_100260538);
  __chkstk_darwin(v3);
  v41 = (uint64_t)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Device(0);
  v49 = *(_QWORD **)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v50 = (char *)v40 - v10;
  result = __chkstk_darwin(v9);
  v44 = (char *)v40 - v12;
  v45 = v1;
  v46 = a1;
  v47 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v14 = a1 + 56;
  v13 = v15;
  v16 = -1 << *(_BYTE *)(v14 - 24);
  if (-v16 < 64)
    v17 = ~(-1 << -(char)v16);
  else
    v17 = -1;
  v18 = v17 & v13;
  v40[1] = -1 << *(_BYTE *)(v14 - 24);
  v42 = (unint64_t)(63 - v16) >> 6;
  v43 = v14;
  if ((v17 & v13) != 0)
    goto LABEL_7;
LABEL_8:
  v20 = v47 + 1;
  if (!__OFADD__(v47, 1))
  {
    if (v20 < v42)
    {
      v21 = *(_QWORD *)(v43 + 8 * v20);
      v22 = v47 + 1;
      if (v21)
        goto LABEL_21;
      v22 = v47 + 2;
      if (v47 + 2 >= v42)
        return sub_100086D50(v46);
      v21 = *(_QWORD *)(v43 + 8 * v22);
      if (v21)
        goto LABEL_21;
      v22 = v47 + 3;
      if (v47 + 3 >= v42)
        return sub_100086D50(v46);
      v21 = *(_QWORD *)(v43 + 8 * v22);
      if (v21)
      {
LABEL_21:
        v47 = v22;
        v48 = (v21 - 1) & v21;
        for (i = __clz(__rbit64(v21)) + (v22 << 6); ; i = __clz(__rbit64(v18)) | (v47 << 6))
        {
          v24 = v49;
          v25 = v49[9];
          v26 = (void (*)(char *, unint64_t, uint64_t))v49[2];
          v27 = v44;
          v26(v44, *(_QWORD *)(v46 + 48) + v25 * i, v5);
          ((void (*)(char *, char *, uint64_t))v24[4])(v50, v27, v5);
          v28 = *v1;
          if (*(_QWORD *)(*v1 + 16)
            && (v29 = *(_QWORD *)(v28 + 40),
                v30 = sub_100004EA8(&qword_100263890, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device), v31 = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30), v32 = -1 << *(_BYTE *)(v28 + 32), v33 = v31 & ~v32, ((*(_QWORD *)(v28 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) != 0))
          {
            v34 = ~v32;
            while (1)
            {
              v26(v8, *(_QWORD *)(v28 + 48) + v33 * v25, v5);
              v35 = sub_100004EA8(&qword_100263368, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
              v36 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v50, v5, v35);
              v37 = (void (*)(char *, uint64_t))v49[1];
              v37(v8, v5);
              if ((v36 & 1) != 0)
                break;
              v33 = (v33 + 1) & v34;
              if (((*(_QWORD *)(v28 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
                goto LABEL_6;
            }
            v38 = v41;
            v39 = v50;
            v1 = v45;
            sub_1000238EC((uint64_t)v50, v41);
            sub_1000087A0(v38, &qword_100260538);
            result = ((uint64_t (*)(char *, uint64_t))v37)(v39, v5);
            v18 = v48;
            if (!v48)
              goto LABEL_8;
          }
          else
          {
LABEL_6:
            v1 = v45;
            sub_10001F760((uint64_t)v8, v50);
            result = ((uint64_t (*)(char *, uint64_t))v49[1])(v8, v5);
            v18 = v48;
            if (!v48)
              goto LABEL_8;
          }
LABEL_7:
          v48 = (v18 - 1) & v18;
        }
      }
      v23 = v47 + 4;
      if (v47 + 4 < v42)
      {
        v21 = *(_QWORD *)(v43 + 8 * v23);
        if (v21)
        {
          v22 = v47 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          v22 = v23 + 1;
          if (__OFADD__(v23, 1))
            goto LABEL_32;
          if (v22 >= v42)
            return sub_100086D50(v46);
          v21 = *(_QWORD *)(v43 + 8 * v22);
          ++v23;
          if (v21)
            goto LABEL_21;
        }
      }
    }
    return sub_100086D50(v46);
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1000238EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for Device(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100004EA8(&qword_100263890, v12, (uint64_t)&protocol conformance descriptor for Device);
  swift_bridgeObjectRetain(v10);
  v33 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v34 = v7;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_100004EA8(&qword_100263368, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v21);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v23 = 1;
        a2 = v32;
        v7 = v34;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v10);
    v24 = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v26 = *v24;
    v35 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10003C574();
      v26 = v35;
    }
    v27 = *(_QWORD *)(v26 + 48) + v20;
    v7 = v34;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 32))(v32, v27, v6);
    sub_100023B40(v16, (uint64_t (*)(uint64_t))&type metadata accessor for Device, &qword_100263890, (uint64_t)&protocol conformance descriptor for Device);
    v28 = *v24;
    *v24 = v35;
    swift_bridgeObjectRelease(v28);
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v23 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
}

uint64_t sub_100023B40(int64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t (*v38)(uint64_t);
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a3;
  v40 = a4;
  v38 = a2;
  v6 = a2(0);
  v41 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v9 = (char *)&v34 - v8;
  v10 = *v4;
  v11 = *v4 + 56;
  v12 = -1 << *(_BYTE *)(*v4 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    v35 = v4;
    v14 = ~v12;
    swift_retain(v10);
    v15 = _HashTable.previousHole(before:)(a1, v11, v14);
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v37 = (v15 + 1) & v14;
      v16 = *(_QWORD *)(v41 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
      do
      {
        v17 = v11;
        v18 = v16;
        v19 = v16 * v13;
        v36(v9, *(_QWORD *)(v10 + 48) + v16 * v13, v6);
        v20 = *(_QWORD *)(v10 + 40);
        v21 = sub_100004EA8(v39, v38, v40);
        v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v6, v21);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v6);
        v23 = v22 & v14;
        if (a1 >= (uint64_t)v37)
        {
          if (v23 >= v37 && a1 >= (uint64_t)v23)
          {
LABEL_16:
            v26 = *(_QWORD *)(v10 + 48);
            v16 = v18;
            v27 = v18 * a1;
            v28 = v26 + v18 * a1;
            v29 = v26 + v19;
            if (v18 * a1 < v19 || v28 >= v29 + v18)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v29, 1, v6);
              a1 = v13;
            }
            else
            {
              a1 = v13;
              if (v27 != v19)
              {
                swift_arrayInitWithTakeBackToFront(v28);
                a1 = v13;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v23 >= v37 || a1 >= (uint64_t)v23)
        {
          goto LABEL_16;
        }
        v16 = v18;
LABEL_5:
        v13 = (v13 + 1) & v14;
        v11 = v17;
      }
      while (((*(_QWORD *)(v17 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    }
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v10);
    v4 = v35;
  }
  else
  {
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v30 = *v4;
  v31 = *(_QWORD *)(*v4 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v30 + 16) = v33;
    ++*(_DWORD *)(v30 + 36);
  }
  return result;
}

double sub_100023DC8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_100023E14(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100023E14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v5 = sub_100037A5C(&qword_100265B70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1000240B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerDevice.CodingKeys, &type metadata for ServerDevice.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_10002BB90(a1);
  v32 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  v31 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v5);
  v30 = 2;
  v26 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  v27 = v14;
  v29 = 3;
  swift_bridgeObjectRetain(v14);
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
  v25 = v15;
  v28 = 4;
  swift_bridgeObjectRetain(v15);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20 = v16;
  v19(v8, v5);
  v21 = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v21);
  sub_10002BB90(a1);
  swift_bridgeObjectRelease(v18);
  v22 = v25;
  swift_bridgeObjectRelease(v25);
  result = swift_bridgeObjectRelease(v21);
  *(_BYTE *)a2 = v12 & 1;
  *(_BYTE *)(a2 + 1) = v13 & 1;
  *(_QWORD *)(a2 + 8) = v26;
  *(_QWORD *)(a2 + 16) = v21;
  *(_QWORD *)(a2 + 24) = v24;
  *(_QWORD *)(a2 + 32) = v22;
  *(_QWORD *)(a2 + 40) = v20;
  *(_QWORD *)(a2 + 48) = v18;
  return result;
}

unint64_t sub_1000240B8()
{
  unint64_t result;

  result = qword_100265B78;
  if (!qword_100265B78)
  {
    result = swift_getWitnessTable(&unk_1001F9610, &type metadata for ServerDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265B78);
  }
  return result;
}

uint64_t sub_1000240FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v1 = *(_QWORD *)(v0 + 1760);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v20 = 1;
    goto LABEL_15;
  }
  v3 = *(_QWORD *)(v0 + 1432);
  v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v134 = *(_QWORD *)(v3 + 72);
  v5 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v3 + 16);
  v6 = swift_bridgeObjectRetain(v1);
  while (1)
  {
    v7 = *(_QWORD *)(v0 + 1392);
    v8 = *(_QWORD *)(v0 + 1376);
    v9 = *(_QWORD *)(v0 + 1368);
    v10 = *(_QWORD **)(v0 + 1104);
    v11 = v5(*(_QWORD *)(v0 + 1440), v4, *(_QWORD *)(v0 + 1424), v6);
    v12 = Friend.handle.getter(v11);
    v13 = Handle.serverID.getter(v12);
    v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    if (!v15)
      goto LABEL_3;
    v16 = v10[1];
    if (v13 == *v10 && v15 == v16)
      break;
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, *v10, v16, 0);
    swift_bridgeObjectRelease(v15);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(v0 + 1760);
      goto LABEL_14;
    }
LABEL_3:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1432) + 8))(*(_QWORD *)(v0 + 1440), *(_QWORD *)(v0 + 1424));
    v4 += v134;
    if (!--v2)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1760));
      v20 = 1;
      goto LABEL_15;
    }
  }
  v19 = *(_QWORD *)(v0 + 1760);
  swift_bridgeObjectRelease(v15);
LABEL_14:
  swift_bridgeObjectRelease(v19);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1432) + 32))(*(_QWORD *)(v0 + 1080), *(_QWORD *)(v0 + 1440), *(_QWORD *)(v0 + 1424));
  v20 = 0;
LABEL_15:
  v21 = *(_QWORD *)(v0 + 1760);
  v22 = *(_QWORD *)(v0 + 1432);
  v23 = *(_QWORD *)(v0 + 1424);
  v24 = *(_QWORD *)(v0 + 1080);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v24, v20, 1, v23);
  swift_bridgeObjectRelease(v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v24, 1, v23) == 1)
  {
    v25 = *(_QWORD *)(v0 + 1080);
    sub_100024990(*(_QWORD *)(v0 + 1104), type metadata accessor for ServerLocation);
    v26 = (uint64_t *)&unk_100260950;
    v27 = v25;
    goto LABEL_19;
  }
  v28 = *(_QWORD *)(v0 + 1104);
  v29 = *(_QWORD *)(v0 + 1088);
  v30 = *(_QWORD *)(v0 + 1064);
  v31 = *(_QWORD *)(v0 + 1056);
  v32 = *(_QWORD *)(v0 + 1048);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1432) + 32))(*(_QWORD *)(v0 + 1448), *(_QWORD *)(v0 + 1080), *(_QWORD *)(v0 + 1424));
  sub_10000E37C(v28 + *(int *)(v29 + 20), v32, &qword_100261820);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v32, 1, v31) == 1)
  {
    v33 = *(_QWORD *)(v0 + 1104);
    v34 = *(_QWORD *)(v0 + 1048);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1432) + 8))(*(_QWORD *)(v0 + 1448), *(_QWORD *)(v0 + 1424));
    sub_100024990(v33, type metadata accessor for ServerLocation);
    v26 = &qword_100261820;
    v27 = v34;
LABEL_19:
    result = sub_1000087A0(v27, v26);
    v36 = *(_QWORD *)(v0 + 1736);
  }
  else
  {
    v106 = *(_DWORD *)(v0 + 1776);
    v104 = *(_DWORD *)(v0 + 1772);
    v117 = *(_QWORD *)(v0 + 1736);
    v120 = *(_QWORD *)(v0 + 1448);
    v129 = *(_QWORD *)(v0 + 1432);
    v132 = *(_QWORD *)(v0 + 1424);
    v37 = *(_QWORD *)(v0 + 1384);
    v123 = *(_QWORD *)(v0 + 1376);
    v126 = *(_QWORD *)(v0 + 1368);
    v135 = *(_QWORD *)(v0 + 1104);
    v38 = *(_QWORD *)(v0 + 1072);
    v39 = *(int **)(v0 + 1056);
    v40 = *(_QWORD *)(v0 + 1040);
    v108 = *(_QWORD *)(v0 + 1024);
    v111 = *(_QWORD *)(v0 + 1032);
    v114 = *(_QWORD *)(v0 + 1016);
    v41 = *(_QWORD *)(v0 + 1008);
    v42 = *(_QWORD *)(v0 + 984);
    v43 = *(_QWORD *)(v0 + 976);
    v44 = *(_QWORD *)(v0 + 952);
    v96 = *(_QWORD *)(v0 + 968);
    v98 = *(_QWORD *)(v0 + 944);
    v100 = *(_QWORD *)(v0 + 960);
    v102 = *(_QWORD *)(v0 + 936);
    v45 = sub_10008268C(*(_QWORD *)(v0 + 1048), v38);
    v46 = Friend.handle.getter(v45);
    v47 = v39[7];
    v48 = *(double *)(v38 + v39[8]);
    v49 = *(double *)(v38 + v39[9]);
    if (*(_BYTE *)(v38 + v47 + 8))
      v50 = 0.0;
    else
      v50 = *(double *)(v38 + v47);
    v51 = v38 + v39[11];
    if (*(_BYTE *)(v51 + 8))
      v52 = 0.0;
    else
      v52 = *(double *)v51;
    v53 = v39[6];
    v54 = v38 + v39[5];
    if (*(_BYTE *)(v54 + 8))
      v55 = 0.0;
    else
      v55 = *(double *)v54;
    v56 = v38 + v53;
    v57 = *(_QWORD *)(v38 + v53);
    if (*(_BYTE *)(v56 + 8))
      v58 = 0;
    else
      v58 = v57;
    Date.init(timeIntervalSince1970:)(v46, *(double *)(v38 + v39[10]) / 1000.0);
    sub_10000E37C(v38, v42, &qword_100261818);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v96 + 104))(v43, v104, v100);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v98 + 104))(v44, v106, v102);
    Location.init(latitude:longitude:horizontalAccuracy:verticalAccuracy:speed:altitude:floor:timestamp:placemark:locationType:motionActivityState:customLabel:)(v58, v41, v42, v43, v44, 0, 0, v48, v49, v50, v52, 0.0, v55);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 32))(v111, v40, v114);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v117);
    sub_100163B08(v111, v37, isUniquelyReferenced_nonNull_native);
    v36 = v117;
    swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v37, v126);
    sub_100024990(v38, type metadata accessor for LegacyLocation);
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v120, v132);
    result = sub_100024990(v135, type metadata accessor for ServerLocation);
  }
  v60 = *(_QWORD *)(v0 + 1744) + 1;
  if (v60 == *(_QWORD *)(v0 + 1728))
  {
    v61 = *(_QWORD *)(v0 + 1720);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1568));
    swift_bridgeObjectRelease(v61);
    v62 = *(_QWORD *)(v0 + 1688);
    v63 = *(_QWORD *)(v0 + 1680);
    v64 = *(_QWORD *)(v0 + 1672);
    v124 = *(void (**)(uint64_t, uint64_t))(v0 + 1648);
    v65 = *(_QWORD *)(v0 + 1608);
    v66 = *(_QWORD *)(v0 + 1576);
    v67 = *(_QWORD *)(v0 + 1520);
    v68 = *(_QWORD *)(v0 + 1352);
    v109 = *(_QWORD *)(v0 + 1320);
    v112 = *(_QWORD *)(v0 + 1240);
    v118 = *(_QWORD *)(v0 + 1232);
    v121 = *(_QWORD *)(v0 + 1264);
    v136 = v36;
    v69 = *(_QWORD *)(v0 + 1160);
    v70 = *(_QWORD *)(v0 + 1008);
    v127 = *(_QWORD *)(v0 + 1000);
    v130 = *(_QWORD *)(v0 + 992);
    v115 = *(_QWORD *)(v0 + 928);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 840));
    v71 = swift_bridgeObjectRelease(v66);
    static Date.now.getter(v71);
    swift_release(v65);
    swift_release(v67);
    swift_bridgeObjectRelease(v64);
    sub_100037AF8(v63, v62);
    sub_100024990(v69, type metadata accessor for LocationEndpoint);
    v124(v68, v109);
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v121, v118);
    v72 = v115 + OBJC_IVAR____TtC13findmylocated14CommandManager_lastRefreshDate;
    swift_beginAccess(v115 + OBJC_IVAR____TtC13findmylocated14CommandManager_lastRefreshDate, v0 + 736, 33, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 40))(v72, v70, v130);
    swift_endAccess(v0 + 736);
    v73 = *(_QWORD *)(v0 + 1464);
    v74 = *(_QWORD *)(v0 + 1456);
    v75 = *(_QWORD *)(v0 + 1448);
    v76 = *(_QWORD *)(v0 + 1440);
    v77 = *(_QWORD *)(v0 + 1416);
    v78 = *(_QWORD *)(v0 + 1408);
    v79 = *(_QWORD *)(v0 + 1400);
    v80 = *(_QWORD *)(v0 + 1392);
    v81 = *(_QWORD *)(v0 + 1384);
    v84 = *(_QWORD *)(v0 + 1360);
    v85 = *(_QWORD *)(v0 + 1352);
    v86 = *(_QWORD *)(v0 + 1344);
    v87 = *(_QWORD *)(v0 + 1336);
    v88 = *(_QWORD *)(v0 + 1312);
    v89 = *(_QWORD *)(v0 + 1288);
    v90 = *(_QWORD *)(v0 + 1264);
    v91 = *(_QWORD *)(v0 + 1256);
    v92 = *(_QWORD *)(v0 + 1248);
    v93 = *(_QWORD *)(v0 + 1224);
    v94 = *(_QWORD *)(v0 + 1216);
    v95 = *(_QWORD *)(v0 + 1192);
    v97 = *(_QWORD *)(v0 + 1184);
    v99 = *(_QWORD *)(v0 + 1160);
    v101 = *(_QWORD *)(v0 + 1144);
    v103 = *(_QWORD *)(v0 + 1120);
    v105 = *(_QWORD *)(v0 + 1112);
    v107 = *(_QWORD *)(v0 + 1104);
    v110 = *(_QWORD *)(v0 + 1080);
    v113 = *(_QWORD *)(v0 + 1072);
    v116 = *(_QWORD *)(v0 + 1048);
    v119 = *(_QWORD *)(v0 + 1040);
    v122 = *(_QWORD *)(v0 + 1032);
    v125 = *(_QWORD *)(v0 + 1008);
    v128 = *(_QWORD *)(v0 + 984);
    v131 = *(_QWORD *)(v0 + 976);
    v133 = *(_QWORD *)(v0 + 952);
    swift_task_dealloc(*(_QWORD *)(v0 + 1472));
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v110);
    swift_task_dealloc(v113);
    swift_task_dealloc(v116);
    swift_task_dealloc(v119);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v128);
    swift_task_dealloc(v131);
    swift_task_dealloc(v133);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v136);
  }
  else
  {
    *(_QWORD *)(v0 + 1744) = v60;
    *(_QWORD *)(v0 + 1736) = v36;
    v82 = *(_QWORD *)(v0 + 1720);
    if (v60 >= *(_QWORD *)(v82 + 16))
    {
      __break(1u);
    }
    else
    {
      sub_100025C70(v82+ ((*(unsigned __int8 *)(v0 + 1768) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1768))+ *(_QWORD *)(*(_QWORD *)(v0 + 1096) + 72) * v60, *(_QWORD *)(v0 + 1104), type metadata accessor for ServerLocation);
      v83 = (_QWORD *)swift_task_alloc(dword_10026559C);
      *(_QWORD *)(v0 + 1752) = v83;
      *v83 = v0;
      v83[1] = sub_1000809E8;
      return sub_1000054C0();
    }
  }
  return result;
}

uint64_t sub_100024990(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1000249CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t);
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  _BOOL4 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  void (*v157)(uint64_t, uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __n128 v162;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(uint64_t, uint64_t);
  void (*v171)(uint64_t, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(uint64_t, uint64_t);
  void (*v178)(uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  NSObject *v181;
  os_log_type_t v182;
  _BOOL4 v183;
  uint64_t v184;
  uint8_t *v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v196;
  uint64_t v197;
  NSObject *log;
  os_log_type_t loga;
  os_log_t v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void (*v235)(uint64_t, uint64_t);
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  void (*v247)(uint64_t, uint64_t);
  void (*v248)(uint64_t, uint64_t);
  uint64_t v249;
  uint64_t v250;
  uint64_t (*v251)(_QWORD, char *, _QWORD);
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255[2];

  v1 = v0[75];
  v255[0] = (uint64_t)_swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = v0[63];
    v5 = _swiftEmptyArrayStorage;
    v250 = *(_QWORD *)(v1 + 16);
    do
    {
      if (v3 >= *(_QWORD *)(v1 + 16))
      {
LABEL_73:
        __break(1u);
        return;
      }
      v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v7 = *(_QWORD *)(v4 + 72);
      v8 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v4 + 16))(v0[70], v0[75] + v6 + v7 * v3, v0[62]);
      if ((Friend.isLegacyLocationCapable.getter(v8) & 1) != 0)
      {
        v9 = v1;
        v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
        v10(v0[69], v0[70], v0[62]);
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        {
          sub_1000303C0(0, v5[2] + 1, 1);
          v5 = (_QWORD *)v255[0];
        }
        v12 = v5[2];
        v11 = v5[3];
        v13 = (uint64_t)v5;
        if (v12 >= v11 >> 1)
        {
          sub_1000303C0(v11 > 1, v12 + 1, 1);
          v13 = v255[0];
        }
        v14 = v0[69];
        v15 = v0[62];
        *(_QWORD *)(v13 + 16) = v12 + 1;
        v10(v13 + v6 + v12 * v7, v14, v15);
        v255[0] = v13;
        v5 = (_QWORD *)v13;
        v1 = v9;
        v2 = v250;
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v4 + 8))(v0[70], v0[62]);
      }
      ++v3;
    }
    while (v2 != v3);
    v244 = v5;
    v1 = v0[75];
  }
  else
  {
    v244 = _swiftEmptyArrayStorage;
  }
  v16 = v0[63];
  v214 = v0 + 8;
  v17 = v0[60];
  v245 = v0[61];
  v201 = v0 + 11;
  v212 = v0 + 12;
  v205 = v0 + 14;
  v206 = v0 + 13;
  v204 = v0 + 15;
  v238 = v0[59];
  v202 = v0 + 17;
  v203 = v0 + 16;
  v246 = v0[55];
  v213 = v0 + 18;
  v211 = v0 + 19;
  v239 = v0[46];
  v209 = v0 + 21;
  v210 = v0 + 20;
  v220 = v0[39];
  v207 = v0 + 23;
  v208 = v0 + 22;
  v217 = v0[32];
  v218 = v0[35];
  v18 = v0[27];
  v19 = v0[28];
  swift_bridgeObjectRelease(v1);
  v20 = (_QWORD *)(v19 + OBJC_IVAR____TtC13findmylocated11DataManager_legacyLocationsForHandles);
  v21 = v244[2];
  v242 = v18 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  swift_bridgeObjectRetain(v18);
  v221 = v20;
  swift_beginAccess(v20, v0 + 2, 0, 0);
  v22 = 0;
  v241 = *(_QWORD *)(v17 + 72);
  v215 = enum case for MotionActivityState.unknown(_:);
  v216 = enum case for LocationType.legacy(_:);
  v23 = v0[72];
  v240 = v21;
  v219 = v16;
  while (2)
  {
    if (v22 == v23)
    {
      __break(1u);
      goto LABEL_73;
    }
    sub_100025C70(v242 + v22 * v241, v0[61], type metadata accessor for ServerLocation);
    if (!v21)
    {
LABEL_16:
      v24 = v0[61];
      goto LABEL_17;
    }
    v243 = v22;
    v25 = (char *)v244 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    swift_retain(v244);
    v26 = *(_QWORD *)(v16 + 72);
    v27 = v16;
    v251 = *(uint64_t (**)(_QWORD, char *, _QWORD))(v16 + 16);
    while (1)
    {
      v28 = (_QWORD *)v0[61];
      v29 = v0[58];
      v30 = v0[54];
      v31 = v251(v0[66], v25, v0[62]);
      v32 = Friend.handle.getter(v31);
      v33 = Handle.serverID.getter(v32);
      v35 = v34;
      v247 = *(void (**)(uint64_t, uint64_t))(v246 + 8);
      v247(v29, v30);
      if (!v35)
        goto LABEL_21;
      v36 = *(_QWORD *)(v245 + 8);
      if (v33 == *v28 && v35 == v36)
        break;
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, *v28, v36, 0);
      swift_bridgeObjectRelease(v35);
      if ((v38 & 1) != 0)
        goto LABEL_30;
LABEL_21:
      (*(void (**)(_QWORD, _QWORD))(v27 + 8))(v0[66], v0[62]);
      v25 += v26;
      if (!--v21)
      {
        swift_release(v244);
        v16 = v27;
        v21 = v240;
        v22 = v243;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease(v35);
LABEL_30:
    swift_release(v244);
    v39 = v0[68];
    v40 = v0[67];
    v42 = v0[61];
    v41 = v0[62];
    v43 = v0[44];
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
    v44(v40, v0[66], v41);
    v44(v39, v40, v41);
    sub_10000E37C(v42 + *(int *)(v238 + 20), v43, &qword_100261820);
    v45 = (int *)type metadata accessor for LegacyLocation(0);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v45 - 1) + 48))(v43, 1, v45);
    v47 = v0[68];
    if ((_DWORD)v46 == 1)
    {
      v24 = v0[61];
      v48 = v0[62];
      sub_1000087A0(v0[44], &qword_100261820);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v47, v48);
      v21 = v240;
      v22 = v243;
      v16 = v27;
      goto LABEL_17;
    }
    v49 = v0[52];
    v228 = v0[53];
    v50 = v0[44];
    v231 = v0[45];
    v51 = v0[43];
    v52 = v0[36];
    v53 = v0[37];
    v54 = v0[33];
    v222 = v0[34];
    v225 = v0[31];
    v55 = v45[7];
    v56 = *(double *)(v50 + v45[8]);
    if (*(_BYTE *)(v50 + v55 + 8))
      v57 = 0.0;
    else
      v57 = *(double *)(v50 + v55);
    v58 = v50 + v45[11];
    if (*(_BYTE *)(v58 + 8))
      v59 = 0.0;
    else
      v59 = *(double *)v58;
    v60 = v45[6];
    v61 = v50 + v45[5];
    if (*(_BYTE *)(v61 + 8))
      v62 = 0.0;
    else
      v62 = *(double *)v61;
    v63 = v50 + v60;
    v64 = *(_QWORD *)(v50 + v60);
    if (*(_BYTE *)(v63 + 8))
      v65 = 0;
    else
      v65 = v64;
    v66 = *(double *)(v50 + v45[9]);
    Date.init(timeIntervalSince1970:)(v46, *(double *)(v50 + v45[10]) / 1000.0);
    sub_10000E37C(v50, v53, &qword_100261818);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v218 + 104))(v52, v216, v222);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v217 + 104))(v54, v215, v225);
    Location.init(latitude:longitude:horizontalAccuracy:verticalAccuracy:speed:altitude:floor:timestamp:placemark:locationType:motionActivityState:customLabel:)(v65, v51, v53, v52, v54, 0, 0, v56, v66, v57, v59, 0.0, v62);
    sub_100024990(v50, type metadata accessor for LegacyLocation);
    v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v239 + 32);
    v68 = v67(v228, v49, v231);
    Friend.handle.getter(v68);
    v69 = *v221;
    if (*(_QWORD *)(*v221 + 16))
    {
      v70 = v0[57];
      swift_bridgeObjectRetain(*v221);
      v71 = sub_10001CBC8(v70);
      v72 = v0[45];
      v73 = v0[30];
      if ((v74 & 1) != 0)
      {
        (*(void (**)(_QWORD, unint64_t, _QWORD))(v239 + 16))(v0[30], *(_QWORD *)(v69 + 56) + *(_QWORD *)(v239 + 72) * v71, v0[45]);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v239 + 56))(v73, 0, 1, v72);
      }
      else
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v239 + 56))(v0[30], 1, 1, v72);
      }
      swift_bridgeObjectRelease(v69);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v239 + 56))(v0[30], 1, 1, v0[45]);
    }
    v75 = v0[45];
    v76 = v0[30];
    v247(v0[57], v0[54]);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v239 + 48))(v76, 1, v75) == 1)
    {
      v77 = sub_1000087A0(v0[30], &qword_100260600);
      goto LABEL_56;
    }
    v79 = v0[42];
    v78 = v0[43];
    v80 = v0[38];
    v81 = v67(v0[51], v0[30], v0[45]);
    v82 = Location.date.getter(v81);
    Location.date.getter(v82);
    v83 = static Date.< infix(_:_:)(v78, v79);
    v84 = *(void (**)(uint64_t, uint64_t))(v220 + 8);
    v84(v79, v80);
    v84(v78, v80);
    if ((v83 & 1) != 0)
    {
      v235 = v84;
      v85 = v0[53];
      v87 = v0[50];
      v86 = v0[51];
      v88 = v0[49];
      v89 = v0[45];
      v251(v0[65], (char *)v0[68], v0[62]);
      v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v239 + 16);
      v90(v87, v85, v89);
      v91 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v90)(v88, v86, v89);
      v92 = Logger.logObject.getter(v91);
      v93 = static os_log_type_t.error.getter(v92);
      v94 = os_log_type_enabled(v92, v93);
      v252 = v0[68];
      v95 = v0[65];
      v96 = v0[62];
      if (v94)
      {
        v97 = v0[56];
        v188 = v0[54];
        v226 = v0[53];
        v223 = v0[51];
        v190 = v0[50];
        v192 = v0[49];
        v232 = v0[45];
        v98 = v0[62];
        v196 = v98;
        v99 = v0[43];
        v229 = v0[38];
        v100 = swift_slowAlloc(62, -1);
        log = v92;
        v200 = (os_log_t)swift_slowAlloc(96, -1);
        v255[0] = (uint64_t)v200;
        *(_DWORD *)v100 = 141559299;
        v0[18] = 1752392040;
        v101 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v213, v211, v100 + 4, v100 + 12);
        *(_WORD *)(v100 + 12) = 2081;
        type = v93;
        v102 = Friend.handle.getter(v101);
        v103 = Handle.identifier.getter(v102);
        v105 = v104;
        v247(v97, v188);
        v0[19] = sub_10002BA84(v103, v105, v255);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v211, v210, v100 + 14, v100 + 22);
        swift_bridgeObjectRelease(v105);
        v248 = *(void (**)(uint64_t, uint64_t))(v219 + 8);
        v248(v95, v98);
        *(_WORD *)(v100 + 22) = 2160;
        v0[20] = 1752392040;
        v106 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v210, v209, v100 + 24, v100 + 32);
        *(_WORD *)(v100 + 32) = 2081;
        v107 = Location.date.getter(v106);
        v108 = Date.localISO8601.getter(v107);
        v110 = v109;
        v235(v99, v229);
        v0[21] = sub_10002BA84(v108, v110, v255);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v209, v208, v100 + 34, v100 + 42);
        swift_bridgeObjectRelease(v110);
        v111 = *(void (**)(uint64_t, uint64_t))(v239 + 8);
        v111(v190, v232);
        *(_WORD *)(v100 + 42) = 2160;
        v0[22] = 1752392040;
        v112 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v208, v207, v100 + 44, v100 + 52);
        *(_WORD *)(v100 + 52) = 2081;
        v113 = Location.date.getter(v112);
        v114 = Date.localISO8601.getter(v113);
        v116 = v115;
        v235(v99, v229);
        v0[23] = sub_10002BA84(v114, v116, v255);
        v16 = v219;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v207, v0 + 24, v100 + 54, v100 + 62);
        swift_bridgeObjectRelease(v116);
        v111(v192, v232);
        _os_log_impl((void *)&_mh_execute_header, log, type, "Not update cached legacy location for handle: %{private,mask.hash}s\nsince new location location date: %{private,mask.hash}s\nis older cached date: %{private,mask.hash}s.", (uint8_t *)v100, 0x3Eu);
        swift_arrayDestroy(v200, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v200, -1, -1);
        swift_slowDealloc(v100, -1, -1);

        v111(v223, v232);
        v111(v226, v232);
        v117 = v252;
        v118 = v196;
        goto LABEL_61;
      }
      v165 = v0[53];
      v167 = v0[50];
      v166 = v0[51];
      v168 = v0[49];
      v169 = v0[45];

      v170 = *(void (**)(uint64_t, uint64_t))(v239 + 8);
      v170(v168, v169);
      v170(v167, v169);
      v16 = v219;
      v171 = *(void (**)(uint64_t, uint64_t))(v219 + 8);
      v171(v95, v96);
      v170(v166, v169);
      v170(v165, v169);
      v171(v252, v96);
LABEL_66:
      v24 = v0[61];
    }
    else
    {
      v77 = (*(uint64_t (**)(_QWORD, _QWORD))(v239 + 8))(v0[51], v0[45]);
LABEL_56:
      v119 = v0[38];
      v120 = v0[29];
      Friend.createdAt.getter(v77);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v220 + 48))(v120, 1, v119) == 1)
      {
        v121 = sub_1000087A0(v0[29], (uint64_t *)&unk_100262930);
      }
      else
      {
        v123 = v0[42];
        v122 = v0[43];
        v124 = v0[41];
        v125 = v0[38];
        v126 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v220 + 32))(v124, v0[29], v125);
        v127 = Location.date.getter(v126);
        Date.addingTimeInterval(_:)(v127, 60.0);
        v128 = *(void (**)(uint64_t, uint64_t))(v220 + 8);
        v128(v123, v125);
        v129 = static Date.< infix(_:_:)(v122, v124);
        v128(v122, v125);
        if ((v129 & 1) != 0)
        {
          v130 = v0[53];
          v131 = v0[48];
          v132 = v0[45];
          v134 = v0[40];
          v133 = v0[41];
          v135 = v0[38];
          v251(v0[64], (char *)v0[68], v0[62]);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v220 + 16))(v134, v133, v135);
          v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v239 + 16))(v131, v130, v132);
          v137 = Logger.logObject.getter(v136);
          v138 = static os_log_type_t.error.getter(v137);
          v139 = os_log_type_enabled(v137, v138);
          v236 = v0[68];
          v140 = v0[64];
          v253 = v0[62];
          if (v139)
          {
            v141 = v0[56];
            v189 = v0[54];
            v233 = v0[53];
            v197 = v0[48];
            v227 = v0[45];
            *(_QWORD *)typea = v0[43];
            v230 = v0[41];
            v191 = v0[40];
            v193 = v0[38];
            v142 = swift_slowAlloc(62, -1);
            v224 = swift_slowAlloc(96, -1);
            v255[0] = v224;
            *(_DWORD *)v142 = 141559299;
            v0[12] = 1752392040;
            v143 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v212, v206, v142 + 4, v142 + 12);
            *(_WORD *)(v142 + 12) = 2081;
            loga = v138;
            v144 = Friend.handle.getter(v143);
            v145 = Handle.identifier.getter(v144);
            v147 = v146;
            v247(v141, v189);
            v0[13] = sub_10002BA84(v145, v147, v255);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v206, v205, v142 + 14, v142 + 22);
            swift_bridgeObjectRelease(v147);
            v248 = *(void (**)(uint64_t, uint64_t))(v219 + 8);
            v248(v140, v253);
            *(_WORD *)(v142 + 22) = 2160;
            v0[14] = 1752392040;
            v148 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v205, v204, v142 + 24, v142 + 32);
            *(_WORD *)(v142 + 32) = 2081;
            v149 = Date.localISO8601.getter(v148);
            v151 = v150;
            v0[15] = sub_10002BA84(v149, v150, v255);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v204, v203, v142 + 34, v142 + 42);
            swift_bridgeObjectRelease(v151);
            v128(v191, v193);
            *(_WORD *)(v142 + 42) = 2160;
            v0[16] = 1752392040;
            v152 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v203, v202, v142 + 44, v142 + 52);
            *(_WORD *)(v142 + 52) = 2081;
            v153 = Location.date.getter(v152);
            v154 = Date.localISO8601.getter(v153);
            v156 = v155;
            v128(*(_QWORD *)typea, v193);
            v0[17] = sub_10002BA84(v154, v156, v255);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v202, v213, v142 + 54, v142 + 62);
            swift_bridgeObjectRelease(v156);
            v157 = *(void (**)(uint64_t, uint64_t))(v239 + 8);
            v16 = v219;
            v157(v197, v227);
            _os_log_impl((void *)&_mh_execute_header, v137, loga, "Drop older legacy location for handle: %{private,mask.hash}s\ncreateAt: %{private,mask.hash}s\nlocation timestamp: %{private,mask.hash}s", (uint8_t *)v142, 0x3Eu);
            swift_arrayDestroy(v224, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v224, -1, -1);
            swift_slowDealloc(v142, -1, -1);

            v128(v230, v193);
            v157(v233, v227);
            v117 = v236;
            v118 = v253;
LABEL_61:
            v248(v117, v118);
          }
          else
          {
            v249 = v0[53];
            v172 = v0[48];
            v173 = v0[45];
            v175 = v0[40];
            v174 = v0[41];
            v176 = v0[38];

            v177 = *(void (**)(uint64_t, uint64_t))(v239 + 8);
            v177(v172, v173);
            v128(v175, v176);
            v16 = v219;
            v178 = *(void (**)(uint64_t, uint64_t))(v219 + 8);
            v178(v140, v253);
            v128(v174, v176);
            v177(v249, v173);
            v178(v236, v253);
          }
          goto LABEL_66;
        }
        v121 = ((uint64_t (*)(_QWORD, _QWORD))v128)(v0[41], v0[38]);
      }
      v24 = v0[61];
      v254 = v0[62];
      v158 = v0[56];
      v159 = v0[53];
      v234 = v0[54];
      v237 = v0[68];
      v160 = v0[47];
      v161 = v0[45];
      Friend.handle.getter(v121);
      v162 = swift_beginAccess(v221, v214, 33, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v239 + 16))(v160, v159, v161, v162);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v221);
      v255[0] = *v221;
      *v221 = 0x8000000000000000;
      sub_100163B08(v160, v158, isUniquelyReferenced_nonNull_native);
      v164 = *v221;
      *v221 = v255[0];
      swift_bridgeObjectRelease(v164);
      v247(v158, v234);
      swift_endAccess(v214);
      (*(void (**)(uint64_t, uint64_t))(v239 + 8))(v159, v161);
      v16 = v219;
      (*(void (**)(uint64_t, uint64_t))(v219 + 8))(v237, v254);
    }
    v21 = v240;
    v22 = v243;
LABEL_17:
    ++v22;
    sub_100024990(v24, type metadata accessor for ServerLocation);
    v23 = v0[72];
    if (v22 != v23)
      continue;
    break;
  }
  v179 = v0[28];
  swift_bridgeObjectRelease(v0[27]);
  swift_release(v244);
  v180 = swift_retain(v179);
  v181 = Logger.logObject.getter(v180);
  v182 = static os_log_type_t.default.getter(v181);
  v183 = os_log_type_enabled(v181, v182);
  v184 = v0[28];
  if (v183)
  {
    v185 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v185 = 134217984;
    swift_beginAccess(v221, v0 + 5, 0, 0);
    *v201 = *(_QWORD *)(*v221 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v201, v212, v185 + 4, v185 + 12);
    swift_release(v184);
    _os_log_impl((void *)&_mh_execute_header, v181, v182, "After process, current legacyLocations count: %ld.", v185, 0xCu);
    swift_slowDealloc(v185, -1, -1);
  }
  else
  {
    swift_release(v0[28]);
  }

  v186 = (_QWORD *)swift_task_alloc(dword_1002633F4);
  v0[76] = v186;
  *v186 = v0;
  v186[1] = sub_10003E8FC;
  v187 = v0[28];
  v186[8] = v187;
  swift_task_switch(sub_100006CDC, v187, 0);
}

uint64_t sub_100025C3C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100025C70(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100025CB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100025CC8(a1, a2);
}

uint64_t sub_100025CC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v4 = sub_100037A5C(&qword_100261820);
  __chkstk_darwin(v4);
  v39 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100037A5C(&qword_100265818);
  v6 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for ServerLocation(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[3];
  v13 = a1[4];
  sub_100036228(a1, v12);
  v14 = sub_1000262E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerLocation.CodingKeys, &type metadata for ServerLocation.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    v37 = v11;
    v15 = v6;
    v44 = 0;
    v17 = v39;
    v16 = v40;
    v18 = v8;
    v19 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v40);
    v20 = v37;
    *v37 = v19;
    v20[1] = v21;
    v22 = type metadata accessor for LegacyLocation(0);
    v43 = 1;
    v23 = sub_100004EA8(&qword_100265828, type metadata accessor for LegacyLocation, (uint64_t)&protocol conformance descriptor for LegacyLocation);
    v24 = (uint64_t)v17;
    v25 = v17;
    v26 = v18;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v25, v22, &v43, v16, v22, v23);
    sub_10000EF6C(v24, (uint64_t)v37 + v9[5], &qword_100261820);
    v42 = 2;
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v16);
    v28 = (uint64_t *)((char *)v37 + v9[6]);
    *v28 = v27;
    v28[1] = v29;
    v41 = 3;
    v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v16);
    v32 = v31;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v26, v16);
    v33 = (uint64_t)v37;
    v34 = v38;
    v35 = (uint64_t *)((char *)v37 + v9[7]);
    *v35 = v30;
    v35[1] = v32;
    sub_100026288(v33, v34);
  }
  return sub_10002BB90(a1);
}

_QWORD *sub_100025FAC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, int *, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for LegacyLocation(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_100037A5C(&qword_100261820);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for PlaceMark(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15))
    {
      v17 = sub_100037A5C(&qword_100261818);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v8, v9, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v15);
    }
    v18 = v10[5];
    v19 = &v8[v18];
    v20 = &v9[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v10[6];
    v22 = &v8[v21];
    v23 = &v9[v21];
    v22[8] = v23[8];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v24 = v10[7];
    v25 = &v8[v24];
    v26 = &v9[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    *(_QWORD *)&v8[v10[8]] = *(_QWORD *)&v9[v10[8]];
    *(_QWORD *)&v8[v10[9]] = *(_QWORD *)&v9[v10[9]];
    *(_QWORD *)&v8[v10[10]] = *(_QWORD *)&v9[v10[10]];
    v27 = v10[11];
    v28 = &v8[v27];
    v29 = &v9[v27];
    v28[8] = v29[8];
    *(_QWORD *)v28 = *(_QWORD *)v29;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
  }
  v30 = a3[6];
  v31 = a3[7];
  v32 = (_QWORD *)((char *)a1 + v30);
  v33 = (_QWORD *)((char *)a2 + v30);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = (_QWORD *)((char *)a1 + v31);
  v36 = (_QWORD *)((char *)a2 + v31);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v37);
  return a1;
}

uint64_t sub_1000261B0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for LegacyLocation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for PlaceMark(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
}

uint64_t getEnumTagSinglePayload for LegacyLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016F644);
}

uint64_t type metadata accessor for LegacyLocation(uint64_t a1)
{
  return sub_100025C3C(a1, (uint64_t *)&unk_1002656F8, (uint64_t)&nominal type descriptor for LegacyLocation);
}

uint64_t sub_100026288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ServerLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ServerLocation(uint64_t a1)
{
  return sub_100025C3C(a1, (uint64_t *)&unk_1002657D0, (uint64_t)&nominal type descriptor for ServerLocation);
}

unint64_t sub_1000262E0()
{
  unint64_t result;

  result = qword_100265820;
  if (!qword_100265820)
  {
    result = swift_getWitnessTable(&unk_1001F8594, &type metadata for ServerLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265820);
  }
  return result;
}

uint64_t type metadata accessor for FMFAPSMessage(uint64_t a1)
{
  return sub_100025C3C(a1, qword_1002636A8, (uint64_t)&nominal type descriptor for FMFAPSMessage);
}

uint64_t type metadata accessor for DataManager.State(uint64_t a1)
{
  return sub_100025C3C(a1, (uint64_t *)&unk_1002631F0, (uint64_t)&nominal type descriptor for DataManager.State);
}

uint64_t sub_10002634C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2 || (_DWORD)result == 1)
  {
    v5 = type metadata accessor for Friend(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v7 = a1;
    return v6(v7, v5);
  }
  if (!(_DWORD)result)
  {
    v3 = type metadata accessor for Device(0);
    v4 = *(_QWORD *)(v3 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
    if (!(_DWORD)result)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
      v7 = a1;
      v5 = v3;
      return v6(v7, v5);
    }
  }
  return result;
}

void *sub_1000263E8(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v10 = type metadata accessor for Friend(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = a1;
      v12 = a3;
      v13 = 2;
LABEL_11:
      swift_storeEnumTagMultiPayload(v11, v12, v13);
      return a1;
    case 1:
      v14 = type metadata accessor for Friend(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v11 = a1;
      v12 = a3;
      v13 = 1;
      goto LABEL_11;
    case 0:
      v7 = type metadata accessor for Device(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_100037A5C(&qword_100260538);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v11 = a1;
      v12 = a3;
      v13 = 0;
      goto LABEL_11;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t sub_100026544()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  void *v18;
  uint64_t v19;
  Swift::String v20;

  _StringGuts.grow(_:)(66);
  v1._countAndFlagsBits = 0x6143654D6F747561;
  v1._object = (void *)0xEE003A656C626170;
  String.append(_:)(v1);
  if ((*(_BYTE *)v0 & 1) != 0)
    v2 = 1702195828;
  else
    v2 = 0x65736C6166;
  if ((*(_BYTE *)v0 & 1) != 0)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE500000000000000;
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease(v3);
  v5._object = (void *)0x8000000100201090;
  v5._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v5);
  if ((*(_BYTE *)(v0 + 1) & 1) != 0)
    v6 = 1702195828;
  else
    v6 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 1) & 1) != 0)
    v7 = 0xE400000000000000;
  else
    v7 = 0xE500000000000000;
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 979659018;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  v10 = *(_QWORD *)(v0 + 8);
  v11 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain(v11);
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  v13._countAndFlagsBits = 0x697665447364690ALL;
  v13._object = (void *)0xED00003A64496563;
  String.append(_:)(v13);
  v14 = *(_QWORD *)(v0 + 24);
  v15 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain(v15);
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v15);
  v17._countAndFlagsBits = 0x3A656D616E0ALL;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  v19 = *(_QWORD *)(v0 + 40);
  v18 = *(void **)(v0 + 48);
  swift_bridgeObjectRetain(v18);
  v20._countAndFlagsBits = v19;
  v20._object = v18;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v18);
  return 0;
}

double sub_10002670C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[8];
  _BYTE v10[19];

  sub_10002677C(a1, (uint64_t)v9);
  if (!v2)
  {
    v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)v10;
    *(_DWORD *)(a2 + 143) = *(_DWORD *)&v10[15];
    v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = *(double *)v9;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

_QWORD *sub_10002677C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  __n128 v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *result;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[19];
  uint64_t v82;
  char v83;
  _BYTE v84[7];
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  int v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  _BYTE v103[7];
  uint64_t v104;
  char v105;
  char v106;
  char v107;
  char v108;
  _BYTE v109[7];
  char v110;
  int v111;
  __int16 v112;
  _BYTE v113[7];
  char v114;

  v5 = sub_100037A5C(&qword_100266D78);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v72 = a1;
  sub_100036228(a1, v9);
  v11 = sub_100027210();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerFriend.CodingKeys, &type metadata for ServerFriend.CodingKeys, v11, v9, v10);
  if (v2)
    return (_QWORD *)sub_10002BB90(v72);
  v68 = a2;
  LOBYTE(v82) = 0;
  v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v82, v5);
  v14 = v13;
  v114 = v13 & 1;
  LOBYTE(v82) = 1;
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v82, v5, v15);
  v17 = sub_100037A5C(&qword_100260360);
  LOBYTE(v73) = 2;
  v18 = sub_100027310(&qword_100260368, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v82, v17, &v73, v5, v17, v18);
  v19 = v82;
  LOBYTE(v82) = 3;
  v20 = v19;
  swift_bridgeObjectRetain(v19);
  v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v82, v5);
  v66 = v12;
  v67 = v20;
  LOBYTE(v82) = 4;
  v22 = v21;
  swift_bridgeObjectRetain(v21);
  v23 = KeyedDecodingContainer.decode(_:forKey:)(&v82, v5);
  v71 = v22;
  v63 = v23;
  v25 = v24;
  v26 = sub_100037A5C(&qword_1002625F8);
  LOBYTE(v73) = 5;
  v27 = sub_100027254(&qword_1002639C8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v70 = v25;
  swift_bridgeObjectRetain(v25);
  v64 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v82, v26, &v73, v5, v26, v27);
  LOBYTE(v73) = 6;
  v62 = v82;
  swift_bridgeObjectRetain(v82);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v82, v26, &v73, v5, v26, v64);
  v28 = v82;
  LOBYTE(v82) = 7;
  v61 = v28;
  swift_bridgeObjectRetain(v28);
  v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v82, v5);
  v60 = v26;
  LOBYTE(v82) = 8;
  v30 = v29;
  swift_bridgeObjectRetain(v29);
  v58 = KeyedDecodingContainer.decode(_:forKey:)(&v82, v5);
  v69 = v30;
  LOBYTE(v82) = 9;
  v57 = KeyedDecodingContainer.decode(_:forKey:)(&v82, v5);
  LOBYTE(v82) = 10;
  v56 = KeyedDecodingContainer.decode(_:forKey:)(&v82, v5);
  v32 = v31;
  LOBYTE(v82) = 11;
  swift_bridgeObjectRetain(v31);
  v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v82, v5);
  v55 = v33;
  v110 = v33 & 1;
  LOBYTE(v73) = 12;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v82, v60, &v73, v5, v60, v64);
  v34 = v82;
  LOBYTE(v82) = 13;
  v64 = v34;
  swift_bridgeObjectRetain(v34);
  LODWORD(v60) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v82, v5);
  LOBYTE(v82) = 14;
  v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v82, v5);
  v108 = 15;
  v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v108, v5);
  LOBYTE(v25) = v58 & 1;
  v51 = v58 & 1;
  v58 = v57 & 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)&v73 = v66;
  BYTE8(v73) = v14 & 1;
  *(double *)&v74 = v16;
  v35 = v67;
  *((_QWORD *)&v74 + 1) = v67;
  *(_QWORD *)&v75 = v65;
  v36 = v70;
  v37 = v71;
  v38 = v62;
  *((_QWORD *)&v75 + 1) = v71;
  *(_QWORD *)&v76 = v63;
  *((_QWORD *)&v76 + 1) = v70;
  *(_QWORD *)&v77 = v62;
  *((_QWORD *)&v77 + 1) = v61;
  *(_QWORD *)&v78 = v59;
  *((_QWORD *)&v78 + 1) = v69;
  LOBYTE(v79) = v25;
  BYTE1(v79) = v58;
  *((_QWORD *)&v79 + 1) = v56;
  *(_QWORD *)&v80 = v32;
  v50 = v32;
  *((_QWORD *)&v80 + 1) = v54;
  v81[0] = v55 & 1;
  v39 = v64;
  *(_QWORD *)&v81[8] = v64;
  v81[16] = v60;
  v81[17] = v53;
  v81[18] = v52;
  sub_100030788(&v73);
  v40 = v35;
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v38);
  v41 = v61;
  swift_bridgeObjectRelease(v61);
  v42 = v69;
  swift_bridgeObjectRelease(v69);
  v43 = v50;
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v39);
  sub_10002BB90(v72);
  v82 = v66;
  v83 = v114;
  *(_DWORD *)v84 = *(_DWORD *)v113;
  *(_DWORD *)&v84[3] = *(_DWORD *)&v113[3];
  v85 = v16;
  v86 = v40;
  v87 = v65;
  v88 = v37;
  v89 = v63;
  v90 = v70;
  v91 = v38;
  v92 = v41;
  v93 = v59;
  v94 = v42;
  v95 = v51;
  v96 = v58;
  v97 = v111;
  v98 = v112;
  v99 = v56;
  v100 = v43;
  v101 = v54;
  v102 = v110;
  *(_DWORD *)v103 = *(_DWORD *)v109;
  *(_DWORD *)&v103[3] = *(_DWORD *)&v109[3];
  v104 = v39;
  v105 = v60;
  v106 = v53;
  v107 = v52;
  result = sub_1000306F8(&v82);
  v45 = v80;
  v46 = v68;
  *(_OWORD *)(v68 + 96) = v79;
  *(_OWORD *)(v46 + 112) = v45;
  *(_OWORD *)(v46 + 128) = *(_OWORD *)v81;
  *(_DWORD *)(v46 + 143) = *(_DWORD *)&v81[15];
  v47 = v76;
  *(_OWORD *)(v46 + 32) = v75;
  *(_OWORD *)(v46 + 48) = v47;
  v48 = v78;
  *(_OWORD *)(v46 + 64) = v77;
  *(_OWORD *)(v46 + 80) = v48;
  v49 = v74;
  *(_OWORD *)v46 = v73;
  *(_OWORD *)(v46 + 16) = v49;
  return result;
}

unint64_t sub_100027210()
{
  unint64_t result;

  result = qword_100266D80;
  if (!qword_100266D80)
  {
    result = swift_getWitnessTable(&unk_1001FA9A4, &type metadata for ServerFriend.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266D80);
  }
  return result;
}

uint64_t sub_100027254(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10003C1FC(&qword_1002625F8);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000272B4(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10003C1FC(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100027310(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10003C1FC(&qword_100260360);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100027374(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, uint64_t, uint64_t);
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  _QWORD *v95;

  v91 = a2;
  v3 = type metadata accessor for Device(0);
  v83 = *(_QWORD *)(v3 - 8);
  v84 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v75 - v7;
  v9 = sub_100037A5C(&qword_1002670C8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v75 - v13;
  v15 = type metadata accessor for Row(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v75 - v20;
  v22 = v92;
  result = Connection.prepare(_:)(a1);
  if (!v22)
  {
    v91 = v12;
    v92 = v6;
    v79 = v8;
    v80 = v21;
    v82 = v16;
    v77 = 0;
    v78 = v14;
    v24 = result;
    swift_retain(result);
    v25 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
    v95 = _swiftEmptyArrayStorage;
    sub_100027D70(0, v25 & ~(v25 >> 63), 0);
    v26 = swift_retain(v24);
    v85 = dispatch thunk of _AnySequenceBox._makeIterator()(v26);
    v76 = v24;
    result = swift_release(v24);
    if (v25 < 0)
    {
      __break(1u);
LABEL_50:
      __break(1u);
      return result;
    }
    v81 = v15;
    v27 = v82;
    if (v25)
    {
      do
      {
        v28 = v91;
        dispatch thunk of _AnyIteratorBoxBase.next()(result);
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v28, 1, v15);
        if ((_DWORD)result == 1)
          goto LABEL_50;
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v19, v28, v15);
        if (qword_10025FAC0 != -1)
          swift_once(&qword_10025FAC0, sub_10014D33C);
        v29 = sub_100037A5C(&qword_100260DB8);
        v30 = sub_100037A9C(v29, (uint64_t)qword_10027B168);
        Row.subscript.getter(&v93, v30, &type metadata for String, &protocol witness table for String);
        v89 = v94;
        v90 = v93;
        if (qword_10025FAC8 != -1)
          swift_once(&qword_10025FAC8, sub_10014D3C8);
        v31 = sub_100037A9C(v29, (uint64_t)qword_10027B180);
        Row.subscript.getter(&v93, v31, &type metadata for String, &protocol witness table for String);
        v87 = (void (*)(char *, uint64_t, uint64_t))v94;
        v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v93;
        if (qword_10025FAD0 != -1)
          swift_once(&qword_10025FAD0, sub_10014D454);
        v32 = sub_100037A9C(v29, (uint64_t)qword_10027B198);
        Row.subscript.getter(&v93, v32, &type metadata for String, &protocol witness table for String);
        v33 = v94;
        v86 = v93;
        if (qword_10025FAD8 != -1)
          swift_once(&qword_10025FAD8, sub_10014D4E4);
        v34 = sub_100037A5C(&qword_100260D48);
        v35 = sub_100037A9C(v34, (uint64_t)qword_10027B1B0);
        Row.subscript.getter(&v93, v35, &type metadata for Bool, &protocol witness table for Bool);
        v36 = v93;
        if (qword_10025FAE0 != -1)
          swift_once(&qword_10025FAE0, sub_10014D578);
        v37 = sub_100037A9C(v34, (uint64_t)qword_10027B1C8);
        Row.subscript.getter(&v93, v37, &type metadata for Bool, &protocol witness table for Bool);
        v38 = v93;
        if (qword_10025FAE8 != -1)
          swift_once(&qword_10025FAE8, sub_10014D608);
        v39 = sub_100037A9C(v34, (uint64_t)qword_10027B1E0);
        Row.subscript.getter(&v93, v39, &type metadata for Bool, &protocol witness table for Bool);
        v40 = (char)v93;
        if (qword_10025FAF0 != -1)
          swift_once(&qword_10025FAF0, sub_10014D694);
        v41 = sub_100037A9C(v34, (uint64_t)qword_10027B1F8);
        Row.subscript.getter(&v93, v41, &type metadata for Bool, &protocol witness table for Bool);
        BYTE1(v74) = (_BYTE)v93;
        LOBYTE(v74) = v40;
        Device.init(identifier:deviceName:idsDeviceId:isActive:isThisDevice:isCompanion:isAutoMeCapable:)(v90, v89, v88, v87, v86, v33, v36, v38, v74);
        v15 = v81;
        v27 = v82;
        v42 = *(void (**)(char *, uint64_t))(v82 + 8);
        v42(v19, v81);
        v42(v91, v15);
        v43 = v95;
        if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0)
        {
          sub_100027D70(0, v43[2] + 1, 1);
          v43 = v95;
        }
        v44 = v83;
        v46 = v43[2];
        v45 = v43[3];
        if (v46 >= v45 >> 1)
        {
          sub_100027D70(v45 > 1, v46 + 1, 1);
          v43 = v95;
        }
        v43[2] = v46 + 1;
        result = (*(uint64_t (**)(unint64_t))(v44 + 32))((unint64_t)v43+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(_QWORD *)(v44 + 72) * v46);
        v95 = v43;
      }
      while (--v25);
    }
    v47 = (uint64_t)v78;
    dispatch thunk of _AnyIteratorBoxBase.next()(result);
    v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
    v48 = v88(v47, 1, v15);
    v49 = v80;
    if (v48 == 1)
    {
      v50 = v95;
    }
    else
    {
      v87 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 32);
      do
      {
        v87(v49, v47, v15);
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v19, v49, v15);
        if (qword_10025FAC0 != -1)
          swift_once(&qword_10025FAC0, sub_10014D33C);
        v52 = sub_100037A5C(&qword_100260DB8);
        v53 = sub_100037A9C(v52, (uint64_t)qword_10027B168);
        Row.subscript.getter(&v93, v53, &type metadata for String, &protocol witness table for String);
        v91 = v94;
        v92 = v93;
        if (qword_10025FAC8 != -1)
          swift_once(&qword_10025FAC8, sub_10014D3C8);
        v54 = sub_100037A9C(v52, (uint64_t)qword_10027B180);
        Row.subscript.getter(&v93, v54, &type metadata for String, &protocol witness table for String);
        v89 = v94;
        v90 = v93;
        if (qword_10025FAD0 != -1)
          swift_once(&qword_10025FAD0, sub_10014D454);
        v55 = sub_100037A9C(v52, (uint64_t)qword_10027B198);
        Row.subscript.getter(&v93, v55, &type metadata for String, &protocol witness table for String);
        v57 = v93;
        v56 = v94;
        if (qword_10025FAD8 != -1)
          swift_once(&qword_10025FAD8, sub_10014D4E4);
        v58 = sub_100037A5C(&qword_100260D48);
        v59 = sub_100037A9C(v58, (uint64_t)qword_10027B1B0);
        Row.subscript.getter(&v93, v59, &type metadata for Bool, &protocol witness table for Bool);
        v60 = v93;
        if (qword_10025FAE0 != -1)
          swift_once(&qword_10025FAE0, sub_10014D578);
        v61 = sub_100037A9C(v58, (uint64_t)qword_10027B1C8);
        Row.subscript.getter(&v93, v61, &type metadata for Bool, &protocol witness table for Bool);
        v62 = v93;
        if (qword_10025FAE8 != -1)
          swift_once(&qword_10025FAE8, sub_10014D608);
        v63 = sub_100037A9C(v58, (uint64_t)qword_10027B1E0);
        Row.subscript.getter(&v93, v63, &type metadata for Bool, &protocol witness table for Bool);
        v64 = (char)v93;
        if (qword_10025FAF0 != -1)
          swift_once(&qword_10025FAF0, sub_10014D694);
        v65 = sub_100037A9C(v58, (uint64_t)qword_10027B1F8);
        Row.subscript.getter(&v93, v65, &type metadata for Bool, &protocol witness table for Bool);
        BYTE1(v74) = (_BYTE)v93;
        LOBYTE(v74) = v64;
        v66 = v79;
        Device.init(identifier:deviceName:idsDeviceId:isActive:isThisDevice:isCompanion:isAutoMeCapable:)(v92, v91, v90, v89, v57, v56, v60, v62, v74);
        v15 = v81;
        v27 = v82;
        v67 = *(void (**)(char *, uint64_t))(v82 + 8);
        v67(v19, v81);
        v67(v80, v15);
        v50 = v95;
        if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0)
        {
          sub_100027D70(0, v50[2] + 1, 1);
          v66 = v79;
          v50 = v95;
        }
        v69 = v83;
        v68 = v84;
        v71 = v50[2];
        v70 = v50[3];
        if (v71 >= v70 >> 1)
        {
          sub_100027D70(v70 > 1, v71 + 1, 1);
          v66 = v79;
          v50 = v95;
        }
        v50[2] = v71 + 1;
        v72 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v69 + 32))((unint64_t)v50+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(_QWORD *)(v69 + 72) * v71, v66, v68);
        v95 = v50;
        v47 = (uint64_t)v78;
        dispatch thunk of _AnyIteratorBoxBase.next()(v72);
        v73 = v88(v47, 1, v15);
        v49 = v80;
      }
      while (v73 != 1);
    }
    swift_release(v85);
    sub_1000087A0(v47, &qword_1002670C8);
    swift_release_n(v76, 2);
    v51 = sub_100037A5C(&qword_1002679C8);
    result = swift_allocObject(v51, 24, 7);
    *(_QWORD *)(result + 16) = v50;
  }
  return result;
}

uint64_t sub_100027D70(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100032470(a1, a2, a3, (_QWORD *)*v3, &qword_1002679D0, (uint64_t (*)(_QWORD))&type metadata accessor for Device);
  *v3 = result;
  return result;
}

uint64_t sub_100027D9C()
{
  return sub_100027DEC();
}

uint64_t sub_100027DEC()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  void *v31;
  Swift::String v32;
  uint64_t v33;
  __n128 v34;
  Swift::String v35;
  void *v36;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];

  v40[0] = 0;
  v40[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(390);
  v39[0] = 0;
  v39[1] = 0xE000000000000000;
  v1._countAndFlagsBits = 0xD000000000000019;
  v1._object = (void *)0x80000001001FC6E0;
  String.append(_:)(v1);
  Double.write<A>(to:)(v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)v0);
  v2._countAndFlagsBits = 0x3A73657220;
  v2._object = (void *)0xE500000000000000;
  String.append(_:)(v2);
  sub_100028258(v0 + 8, (uint64_t)v40);
  sub_100028258((uint64_t)v40, (uint64_t)v38);
  sub_100028DAC((uint64_t)v40);
  v3 = sub_100037A5C(&qword_10025FF00);
  v4._countAndFlagsBits = String.init<A>(describing:)(v38, v3);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 0xD00000000000001CLL;
  v6._object = (void *)0x80000001001FC700;
  String.append(_:)(v6);
  Double.write<A>(to:)(v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 24));
  v7._countAndFlagsBits = 0x49746E65696C6320;
  v7._object = (void *)0xEA00000000003A64;
  String.append(_:)(v7);
  v8 = *(_QWORD *)(v0 + 32);
  v9 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 0xD000000000000024;
  v11._object = (void *)0x80000001001FC720;
  String.append(_:)(v11);
  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
    v12 = 1702195828;
  else
    v12 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
    v13 = 0xE400000000000000;
  else
    v13 = 0xE500000000000000;
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 0xD00000000000001FLL;
  v15._object = (void *)0x80000001001FC750;
  String.append(_:)(v15);
  Double.write<A>(to:)(v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 64));
  v16._countAndFlagsBits = 0xD000000000000022;
  v16._object = (void *)0x80000001001FC770;
  String.append(_:)(v16);
  Double.write<A>(to:)(v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 72));
  v17._countAndFlagsBits = 0xD00000000000001DLL;
  v17._object = (void *)0x80000001001FC7A0;
  String.append(_:)(v17);
  Double.write<A>(to:)(v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 80));
  v18._countAndFlagsBits = 0x3A644973727020;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v38[0] = *(_QWORD *)(v0 + 88);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v21._countAndFlagsBits = 0xD000000000000018;
  v21._object = (void *)0x80000001001FC7C0;
  String.append(_:)(v21);
  Double.write<A>(to:)(v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 96));
  v22._object = (void *)0x80000001001FC7E0;
  v22._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v22);
  Double.write<A>(to:)(v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 104));
  v23._countAndFlagsBits = 0xD000000000000017;
  v23._object = (void *)0x80000001001FC800;
  String.append(_:)(v23);
  Double.write<A>(to:)(v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 112));
  v24._countAndFlagsBits = 0xD00000000000001ALL;
  v24._object = (void *)0x80000001001FC820;
  String.append(_:)(v24);
  Double.write<A>(to:)(v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 120));
  v25._countAndFlagsBits = 0xD000000000000013;
  v25._object = (void *)0x80000001001FC840;
  String.append(_:)(v25);
  v26 = *(_QWORD *)(v0 + 128);
  v27 = *(void **)(v0 + 136);
  swift_bridgeObjectRetain(v27);
  v28._countAndFlagsBits = v26;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v27);
  v29._countAndFlagsBits = 0xD000000000000011;
  v29._object = (void *)0x80000001001FC860;
  String.append(_:)(v29);
  v38[0] = *(_QWORD *)(v0 + 144);
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v31 = v30._object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v31);
  v32._object = (void *)0x80000001001FC880;
  v32._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v32);
  v33 = *(_QWORD *)(v0 + 152);
  v34 = swift_bridgeObjectRetain(v33);
  v35._countAndFlagsBits = Dictionary.description.getter(v34);
  v36 = v35._object;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v36);
  return v39[0];
}

uint64_t sub_100028258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_10025FF00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000282A0()
{
  uint64_t v0;
  Swift::String v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v8;
  __n128 v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  void *v22;
  Swift::String v23;
  uint64_t v24;
  Swift::String v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  Swift::String v32;
  void *v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  void *v37;
  Swift::String v38;
  uint64_t v39;
  Swift::String v40;
  void *v41;
  Swift::String v42;
  uint64_t v43;
  Swift::String v44;
  void *v45;
  Swift::String v46;
  uint64_t v47;
  Swift::String v48;
  void *v49;
  Swift::String v50;
  uint64_t v51;
  Swift::String v52;
  void *v53;
  Swift::String v54;
  uint64_t v55;
  Swift::String v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  void *v60;
  Swift::String v61;
  Swift::String v62;
  void *v63;
  Swift::String v64;
  Swift::String v65;
  void *v66;
  uint64_t v68;
  _QWORD v69[18];
  _BYTE v70[160];
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[20];
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[5];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[4];
  _OWORD v86[6];

  v76[0] = 0;
  v76[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(276);
  v71 = 0;
  v72 = 0xE000000000000000;
  v1._countAndFlagsBits = 0x203A6F666E49796DLL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  v2 = *(_OWORD *)(v0 + 48);
  v86[2] = *(_OWORD *)(v0 + 32);
  v86[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v86[4] = *(_OWORD *)(v0 + 64);
  v86[5] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v86[0] = *(_OWORD *)v0;
  v86[1] = v4;
  sub_100029F34(v86);
  v5._countAndFlagsBits = sub_100028A7C();
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  sub_100029ECC(v86);
  v7._countAndFlagsBits = 0x736563697665640ALL;
  v7._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v7);
  v8 = *(_QWORD *)(v0 + 96);
  v9 = swift_bridgeObjectRetain(v8);
  v10._countAndFlagsBits = Array.description.getter(v9);
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v11);
  v12._countAndFlagsBits = 0x203A73666572700ALL;
  v12._object = (void *)0xE800000000000000;
  String.append(_:)(v12);
  sub_10000EF6C(v0 + 104, (uint64_t)v85, &qword_100260550);
  sub_10000EF6C((uint64_t)v85, (uint64_t)v76, &qword_100260550);
  sub_100028DD4(v85);
  v13 = sub_100037A5C(&qword_100260550);
  v14._countAndFlagsBits = String.init<A>(describing:)(v76, v13);
  v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  v16._object = (void *)0xEB000000003A7372;
  v16._countAndFlagsBits = 0x65776F6C6C6F660ALL;
  String.append(_:)(v16);
  sub_10000EF6C(v0 + 136, (uint64_t)&v84, &qword_1002659B8);
  sub_10000EF6C((uint64_t)&v84, (uint64_t)v76, &qword_1002659B8);
  sub_100176918(&v84);
  v17 = sub_100037A5C(&qword_1002659B8);
  v18._countAndFlagsBits = String.init<A>(describing:)(v76, v17);
  v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v19);
  v20._countAndFlagsBits = 0x69776F6C6C6F660ALL;
  v20._object = (void *)0xEB000000003A676ELL;
  String.append(_:)(v20);
  sub_10000EF6C(v0 + 144, (uint64_t)&v83, &qword_1002659B8);
  sub_10000EF6C((uint64_t)&v83, (uint64_t)v76, &qword_1002659B8);
  sub_100176918(&v83);
  v21._countAndFlagsBits = String.init<A>(describing:)(v76, v17);
  v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  v23._object = (void *)0x8000000100200C50;
  v23._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v23);
  sub_10000EF6C(v0 + 152, (uint64_t)&v82, &qword_1002659C0);
  sub_10000EF6C((uint64_t)&v82, (uint64_t)v76, &qword_1002659C0);
  sub_100176918(&v82);
  v24 = sub_100037A5C(&qword_1002659C0);
  v25._countAndFlagsBits = String.init<A>(describing:)(v76, v24);
  v26 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v26);
  v27._object = (void *)0x8000000100200C70;
  v27._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v27);
  sub_10000EF6C(v0 + 160, (uint64_t)&v81, &qword_1002659C0);
  sub_10000EF6C((uint64_t)&v81, (uint64_t)v76, &qword_1002659C0);
  sub_100176918(&v81);
  v28._countAndFlagsBits = String.init<A>(describing:)(v76, v24);
  v29 = v28._object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v29);
  v30._object = (void *)0x8000000100200C90;
  v30._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v30);
  sub_10000EF6C(v0 + 176, (uint64_t)v80, &qword_100261940);
  sub_10000EF6C((uint64_t)v80, (uint64_t)v76, &qword_100261940);
  sub_10003CB28(v80);
  v31 = sub_100037A5C(&qword_100261940);
  v32._countAndFlagsBits = String.init<A>(describing:)(v76, v31);
  v33 = v32._object;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(v33);
  v34._countAndFlagsBits = 0xD000000000000012;
  v34._object = (void *)0x8000000100200CB0;
  String.append(_:)(v34);
  sub_10000EF6C(v0 + 216, (uint64_t)&v79, &qword_1002659C8);
  sub_10000EF6C((uint64_t)&v79, (uint64_t)v76, &qword_1002659C8);
  sub_100176918(&v79);
  v35 = sub_100037A5C(&qword_1002659C8);
  v36._countAndFlagsBits = String.init<A>(describing:)(v76, v35);
  v37 = v36._object;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v37);
  v38._object = (void *)0xEB000000003A736ELL;
  v38._countAndFlagsBits = 0x6F697461636F6C0ALL;
  String.append(_:)(v38);
  sub_10000EF6C(v0 + 224, (uint64_t)&v78, &qword_1002659D0);
  sub_10000EF6C((uint64_t)&v78, (uint64_t)v76, &qword_1002659D0);
  sub_100176918(&v78);
  v39 = sub_100037A5C(&qword_1002659D0);
  v40._countAndFlagsBits = String.init<A>(describing:)(v76, v39);
  v41 = v40._object;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v41);
  v42._countAndFlagsBits = 0x745368637465660ALL;
  v42._object = (void *)0xED00003A73757461;
  String.append(_:)(v42);
  sub_10000EF6C(v0 + 232, (uint64_t)&v77, &qword_1002634E0);
  sub_10000EF6C((uint64_t)&v77, (uint64_t)v76, &qword_1002634E0);
  v43 = sub_100037A5C(&qword_1002634E0);
  v44._countAndFlagsBits = String.init<A>(describing:)(v76, v43);
  v45 = v44._object;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v45);
  v46._countAndFlagsBits = 0x437265767265730ALL;
  v46._object = (void *)0xEF3A747865746E6FLL;
  String.append(_:)(v46);
  sub_10000EF6C(v0 + 240, (uint64_t)v76, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v76, (uint64_t)v70, &qword_1002603B0);
  sub_10000EFB0(v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
  v47 = sub_100037A5C(&qword_1002603B0);
  v48._countAndFlagsBits = String.init<A>(describing:)(v70, v47);
  v49 = v48._object;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v49);
  v50._countAndFlagsBits = 0x3A6769666E6F630ALL;
  v50._object = (void *)0xE800000000000000;
  String.append(_:)(v50);
  sub_10000EF6C(v0 + 400, (uint64_t)v70, &qword_100260858);
  sub_10000EF6C((uint64_t)v70, (uint64_t)v69, &qword_100260858);
  v51 = sub_100037A5C(&qword_100260858);
  v52._countAndFlagsBits = String.init<A>(describing:)(v69, v51);
  v53 = v52._object;
  String.append(_:)(v52);
  swift_bridgeObjectRelease(v53);
  v54._countAndFlagsBits = 0xD000000000000013;
  v54._object = (void *)0x8000000100200CD0;
  String.append(_:)(v54);
  sub_10000EF6C(v0 + 544, (uint64_t)v69, &qword_1002659D8);
  sub_10000EF6C((uint64_t)v69, (uint64_t)&v75, &qword_1002659D8);
  sub_100176918(v69);
  v55 = sub_100037A5C(&qword_1002659D8);
  v56._countAndFlagsBits = String.init<A>(describing:)(&v75, v55);
  v57 = v56._object;
  String.append(_:)(v56);
  swift_bridgeObjectRelease(v57);
  v58._countAndFlagsBits = 0xD000000000000018;
  v58._object = (void *)0x8000000100200CF0;
  String.append(_:)(v58);
  sub_10000EF6C(v0 + 552, (uint64_t)&v75, &qword_1002659D8);
  sub_10000EF6C((uint64_t)&v75, (uint64_t)&v74, &qword_1002659D8);
  sub_100176918(&v75);
  v59._countAndFlagsBits = String.init<A>(describing:)(&v74, v55);
  v60 = v59._object;
  String.append(_:)(v59);
  swift_bridgeObjectRelease(v60);
  v61._countAndFlagsBits = 0x65636E6546796D0ALL;
  v61._object = (void *)0xEF203A7465534973;
  String.append(_:)(v61);
  sub_10000EF6C(v0 + 560, (uint64_t)&v74, &qword_1002659D8);
  sub_10000EF6C((uint64_t)&v74, (uint64_t)&v73, &qword_1002659D8);
  sub_100176918(&v74);
  v62._countAndFlagsBits = String.init<A>(describing:)(&v73, v55);
  v63 = v62._object;
  String.append(_:)(v62);
  swift_bridgeObjectRelease(v63);
  v64._countAndFlagsBits = 0xD000000000000014;
  v64._object = (void *)0x8000000100200D10;
  String.append(_:)(v64);
  sub_10000EF6C(v0 + 568, (uint64_t)&v73, &qword_1002659D8);
  sub_10000EF6C((uint64_t)&v73, (uint64_t)&v68, &qword_1002659D8);
  sub_100176918(&v73);
  v65._countAndFlagsBits = String.init<A>(describing:)(&v68, v55);
  v66 = v65._object;
  String.append(_:)(v65);
  swift_bridgeObjectRelease(v66);
  return v71;
}

uint64_t sub_100028A7C()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  __n128 v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  Swift::String v27;
  void *v28;
  _BYTE v30[16];
  _QWORD v31[2];
  _BYTE v32[16];
  _BYTE v33[16];
  _QWORD v34[2];

  v34[0] = 0;
  v34[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(129);
  v31[0] = 0;
  v31[1] = 0xE000000000000000;
  v1._object = (void *)0x8000000100200BD0;
  v1._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v1);
  sub_10000EF6C(v0, (uint64_t)v34, &qword_10025FF00);
  sub_10000EF6C((uint64_t)v34, (uint64_t)v33, &qword_10025FF00);
  sub_100028DAC((uint64_t)v34);
  v2 = sub_100037A5C(&qword_10025FF00);
  v3._countAndFlagsBits = String.init<A>(describing:)(v33, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0x496563697665640ALL;
  v5._object = (void *)0xEA00000000003A64;
  String.append(_:)(v5);
  sub_10000EF6C(v0 + 16, (uint64_t)v33, &qword_10025FF00);
  sub_10000EF6C((uint64_t)v33, (uint64_t)v32, &qword_10025FF00);
  sub_100028DAC((uint64_t)v33);
  v6._countAndFlagsBits = String.init<A>(describing:)(v32, v2);
  v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  v8._countAndFlagsBits = 0xD000000000000011;
  v8._object = (void *)0x8000000100200BF0;
  String.append(_:)(v8);
  Double.write<A>(to:)(v31, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 32));
  v9._countAndFlagsBits = 0xD000000000000010;
  v9._object = (void *)0x8000000100200C10;
  String.append(_:)(v9);
  if ((*(_BYTE *)(v0 + 40) & 1) != 0)
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 40) & 1) != 0)
    v11 = 0xE400000000000000;
  else
    v11 = 0xE500000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease(v11);
  v13._countAndFlagsBits = 0x3A736C69616D650ALL;
  v13._object = (void *)0xE900000000000020;
  String.append(_:)(v13);
  v14 = *(_QWORD *)(v0 + 48);
  v15 = swift_bridgeObjectRetain(v14);
  v16._countAndFlagsBits = Array.description.getter(v15);
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v17);
  v18._countAndFlagsBits = 0x614E74737269660ALL;
  v18._object = (void *)0xEB000000003A656DLL;
  String.append(_:)(v18);
  v19 = *(_QWORD *)(v0 + 56);
  v20 = *(void **)(v0 + 64);
  swift_bridgeObjectRetain(v20);
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v22._object = (void *)0x8000000100200C30;
  v22._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v22);
  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
    v23 = 1702195828;
  else
    v23 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
    v24 = 0xE400000000000000;
  else
    v24 = 0xE500000000000000;
  v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease(v24);
  v26._countAndFlagsBits = 0x6369766544656D0ALL;
  v26._object = (void *)0xEC0000003A644965;
  String.append(_:)(v26);
  sub_10000EF6C(v0 + 80, (uint64_t)v32, &qword_10025FF00);
  sub_10000EF6C((uint64_t)v32, (uint64_t)v30, &qword_10025FF00);
  sub_100028DAC((uint64_t)v32);
  v27._countAndFlagsBits = String.init<A>(describing:)(v30, v2);
  v28 = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  return v31[0];
}

uint64_t sub_100028DAC(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t *sub_100028DD4(uint64_t *a1)
{
  sub_10002BD68(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t sub_100028E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *log;
  uint64_t v110;
  unint64_t v111;
  unint64_t type;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _OWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134[3];

  v129 = (_QWORD *)(v0 + 3248);
  v1 = v0 + 4016;
  sub_10000EF6C(*(_QWORD *)(v0 + 5248) + 256, v0 + 4016, &qword_100260858);
  sub_10000EF6C(v0 + 4016, v0 + 4160, &qword_100260858);
  v119 = v0 + 3728;
  if (sub_10005EFC4(v0 + 4160) != 1)
    goto LABEL_4;
  sub_10000EF6C(v0 + 448, v0 + 1312, &qword_1002603A8);
  if (sub_100049214(v0 + 1312) == 1)
  {
    v1 = v0 + 3872;
    sub_10005D34C(v0 + 3872);
LABEL_4:
    v2 = v1;
    v3 = v0 + 3728;
    goto LABEL_6;
  }
  memcpy((void *)(v0 + 880), (const void *)(v0 + 1312), 0x1B0uLL);
  sub_10000EF6C(v0 + 1136, v0 + 4592, &qword_100260858);
  v2 = v0 + 4592;
  v3 = v0 + 3728;
LABEL_6:
  sub_10000EF6C(v2, v3, &qword_100260858);
  sub_10000EF6C(*(_QWORD *)(v0 + 5248) + 96, v0 + 3408, &qword_1002603B0);
  sub_10000EF6C(v0 + 3408, v0 + 3568, &qword_1002603B0);
  if (sub_10005EFE0(v0 + 3568) != 1)
  {
    v4 = v0 + 3408;
    goto LABEL_10;
  }
  sub_10000EF6C(v0 + 448, v0 + 2176, &qword_1002603A8);
  if (sub_100049214(v0 + 2176) == 1)
  {
    sub_10004922C((_OWORD *)(v0 + 3088));
    v4 = v0 + 3088;
LABEL_10:
    v5 = (_QWORD *)(v0 + 3248);
    v6 = v0 + 3248;
    goto LABEL_12;
  }
  memcpy((void *)(v0 + 1744), (const void *)(v0 + 2176), 0x1B0uLL);
  sub_10000EF6C(v0 + 1840, v0 + 2608, &qword_1002603B0);
  sub_10000EFB0((_QWORD *)(v0 + 2608), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
  v4 = v0 + 2608;
  v5 = (_QWORD *)(v0 + 3248);
  v6 = v0 + 3248;
LABEL_12:
  sub_10000EF6C(v4, v6, &qword_1002603B0);
  v7 = *(_QWORD **)(v0 + 5248);
  v8 = v7[51];
  if (v8)
  {
    v9 = v7[52];
    v10 = v7[53];
    v11 = v7[50];
  }
  else
  {
    sub_10000EF6C(v0 + 448, v0 + 16, &qword_1002603A8);
    if (sub_100049214(v0 + 16) == 1)
    {
      sub_10000EFB0((_QWORD *)(v0 + 3408), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
      v131 = 0;
      v132 = 0;
      v8 = 0;
      v127 = 0;
      goto LABEL_18;
    }
    v11 = *(_QWORD *)(v0 + 416);
    v8 = *(_QWORD *)(v0 + 424);
    v9 = *(_QWORD *)(v0 + 432);
    v10 = *(_QWORD *)(v0 + 440);
  }
  sub_10000EFB0((_QWORD *)(v0 + 3408), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
  v131 = v11;
  v132 = v10;
  v127 = v9;
  sub_10002BD68(v11, v8, v9, v10);
  sub_10000AF28(v0 + 448);
LABEL_18:
  v123 = (_OWORD *)(v0 + 4736);
  v121 = (_QWORD *)(v0 + 5184);
  v115 = v0 + 5208;
  v117 = v0 + 5224;
  if (qword_10025FBD0 != -1)
    swift_once(&qword_10025FBD0, sub_1001E4180);
  v12 = *(_QWORD *)(v0 + 5248);
  v113 = type metadata accessor for Logger(0);
  sub_100037A9C(v113, (uint64_t)qword_10027B3F8);
  sub_10002A0C4(v12);
  v13 = v132;
  sub_10002BD68(v131, v8, v127, v132);
  v14 = v8;
  sub_10000EFB0(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
  sub_10002A0C4(v12);
  sub_10002BD68(v131, v8, v127, v132);
  v15 = sub_10000EFB0(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v19 = *(_OWORD **)(v0 + 5248);
  v125 = v8;
  if (v18)
  {
    log = v16;
    v20 = swift_slowAlloc(72, -1);
    v110 = swift_slowAlloc(128, -1);
    v134[0] = v110;
    *(_DWORD *)v20 = 136447747;
    v21 = v19[1];
    *(_OWORD *)(v0 + 4928) = *v19;
    *(_OWORD *)(v0 + 4944) = v21;
    v22 = v19[5];
    v24 = v19[2];
    v23 = v19[3];
    *(_OWORD *)(v0 + 4992) = v19[4];
    *(_OWORD *)(v0 + 5008) = v22;
    *(_OWORD *)(v0 + 4960) = v24;
    *(_OWORD *)(v0 + 4976) = v23;
    sub_100029F34((_QWORD *)(v0 + 4928));
    v25 = sub_100028A7C();
    v27 = v26;
    sub_100029ECC((_QWORD *)(v0 + 4928));
    *(_QWORD *)(v0 + 5160) = sub_10002BA84(v25, v27, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5160, v0 + 5168, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease(v27);
    sub_100029F9C((uint64_t)v19);
    sub_100029F9C((uint64_t)v19);
    *(_WORD *)(v20 + 12) = 2160;
    *(_QWORD *)(v0 + 5152) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5152, v0 + 5160, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2081;
    v28 = v131;
    *(_QWORD *)(v0 + 5024) = v131;
    *(_QWORD *)(v0 + 5032) = v8;
    *(_QWORD *)(v0 + 5040) = v127;
    *(_QWORD *)(v0 + 5048) = v132;
    sub_10002BD68(v131, v8, v127, v132);
    v29 = sub_100037A5C(&qword_100260550);
    v30 = String.init<A>(describing:)(v0 + 5024, v29);
    v32 = v31;
    *(_QWORD *)(v0 + 5168) = sub_10002BA84(v30, v31, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5168, v0 + 5176, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease(v32);
    sub_10002BD98(v131, v14, v127, v132);
    sub_10002BD98(v131, v14, v127, v132);
    *(_WORD *)(v20 + 32) = 2160;
    *(_QWORD *)(v0 + 5176) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5176, v121, v20 + 34, v20 + 42);
    *(_WORD *)(v20 + 42) = 2081;
    sub_10000EF6C((uint64_t)v129, v0 + 2768, &qword_1002603B0);
    sub_10000EFB0(v129, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    v33 = sub_100037A5C(&qword_1002603B0);
    v34 = String.init<A>(describing:)(v0 + 2768, v33);
    v36 = v35;
    *(_QWORD *)(v0 + 5192) = sub_10002BA84(v34, v35, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5192, v0 + 5200, v20 + 44, v20 + 52);
    swift_bridgeObjectRelease(v36);
    sub_10000EFB0(v129, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
    sub_10000EFB0(v129, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
    *(_WORD *)(v20 + 52) = 2160;
    *(_QWORD *)(v0 + 5200) = 1752392040;
    v13 = v132;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5200, v115, v20 + 54, v20 + 62);
    *(_WORD *)(v20 + 62) = 2081;
    sub_10000EF6C(v119, v0 + 4448, &qword_100260858);
    v37 = sub_100037A5C(&qword_100260858);
    v38 = String.init<A>(describing:)(v0 + 4448, v37);
    v40 = v39;
    *(_QWORD *)(v0 + 5216) = sub_10002BA84(v38, v39, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5216, v117, v20 + 64, v20 + 72);
    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, log, v17, "LocalStorageService write new serverSettings\nmyInfo: %{public}s\nprefs: %{private,mask.hash}s\ncontext: %{private,mask.hash}s\nconfig: %{private,mask.hash}s", (uint8_t *)v20, 0x48u);
    swift_arrayDestroy(v110, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v110, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {
    sub_100029F9C((uint64_t)v19);
    sub_100029F9C((uint64_t)v19);
    v28 = v131;
    sub_10002BD98(v131, v8, v127, v132);
    sub_10002BD98(v131, v8, v127, v132);
    sub_10000EFB0(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
    sub_10000EFB0(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);

  }
  v41 = *(_QWORD *)(v0 + 5312);
  v42 = *(_OWORD **)(v0 + 5248);
  v43 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  v44 = PropertyListEncoder.init()();
  v45 = v42[1];
  *(_OWORD *)(v0 + 4832) = *v42;
  *(_OWORD *)(v0 + 4848) = v45;
  v46 = v42[2];
  v47 = v42[3];
  v48 = v42[5];
  *(_OWORD *)(v0 + 4896) = v42[4];
  *(_OWORD *)(v0 + 4912) = v48;
  *(_OWORD *)(v0 + 4864) = v46;
  *(_OWORD *)(v0 + 4880) = v47;
  v49 = v42[1];
  *v123 = *v42;
  *(_OWORD *)(v0 + 4752) = v49;
  v50 = v42[5];
  v52 = v42[2];
  v51 = v42[3];
  *(_OWORD *)(v0 + 4800) = v42[4];
  *(_OWORD *)(v0 + 4816) = v50;
  *(_OWORD *)(v0 + 4768) = v52;
  *(_OWORD *)(v0 + 4784) = v51;
  sub_100029F34((_QWORD *)(v0 + 4832));
  v53 = sub_10003E600();
  v54 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v123, &type metadata for ServerMyInfo, v53);
  v56 = v55;
  sub_100029ECC((_QWORD *)(v0 + 4832));
  swift_release(v44);
  if (v41)
  {
    sub_10000EFB0(v129, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
    sub_10002BD98(v28, v125, v127, v13);
    if (qword_10025FBD0 != -1)
      swift_once(&qword_10025FBD0, sub_1001E4180);
    sub_100037A9C(v113, (uint64_t)qword_10027B3F8);
    swift_errorRetain(v41);
    v57 = swift_errorRetain(v41);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = swift_slowAlloc(22, -1);
      v61 = swift_slowAlloc(64, -1);
      v134[0] = v61;
      *(_DWORD *)v60 = 136446466;
      *(_QWORD *)(v0 + 5232) = sub_10002BA84(0xD000000000000017, 0x80000001002021F0, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5232, v0 + 5240, v60 + 4, v60 + 12);
      *(_WORD *)(v60 + 12) = 2082;
      *(_QWORD *)(v0 + 5208) = v41;
      swift_errorRetain(v41);
      v62 = sub_100037A5C(&qword_100265260);
      v63 = String.init<A>(describing:)(v115, v62);
      v65 = v64;
      *(_QWORD *)(v0 + 5224) = sub_10002BA84(v63, v64, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v117, v0 + 5232, v60 + 14, v60 + 22);
      swift_bridgeObjectRelease(v65);
      swift_errorRelease(v41);
      swift_errorRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "%{public}s error: %{public}s", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);

      swift_errorRelease(v41);
    }
    else
    {
      swift_errorRelease(v41);
      swift_errorRelease(v41);
      swift_errorRelease(v41);

    }
    v72 = *(_QWORD *)(v0 + 5240);
    v73 = type metadata accessor for Insert(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v72, 1, 1, v73);
  }
  else
  {
    v118 = v56;
    v124 = v54;
    swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
    v66 = PropertyListEncoder.init()();
    sub_10000EF6C(v119, v0 + 4304, &qword_100260858);
    v67 = sub_100037A5C(&qword_100260858);
    v68 = sub_10002B370(&qword_100267A20, &qword_100260858, (void (*)(void))sub_1001D6828, (uint64_t)&protocol conformance descriptor for <A> A?);
    v69 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 4304, v67, v68);
    v71 = v70;
    swift_release(v66);
    v116 = v71;
    v120 = v69;
    swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
    v74 = PropertyListEncoder.init()();
    sub_10000EF6C((uint64_t)v129, v0 + 2928, &qword_1002603B0);
    v75 = sub_100037A5C(&qword_1002603B0);
    v76 = sub_10002B370(&qword_100267A28, &qword_1002603B0, (void (*)(void))sub_10003E3B0, (uint64_t)&protocol conformance descriptor for <A> A?);
    v77 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 2928, v75, v76);
    type = v78;
    v114 = v77;
    swift_release(v74);
    sub_10000EFB0(v129, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
    swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
    v79 = PropertyListEncoder.init()();
    *(_QWORD *)(v0 + 5056) = v131;
    *(_QWORD *)(v0 + 5064) = v125;
    *(_QWORD *)(v0 + 5072) = v127;
    *(_QWORD *)(v0 + 5080) = v132;
    v80 = sub_100037A5C(&qword_100260550);
    v81 = sub_10002B370(&qword_100267A30, &qword_100260550, (void (*)(void))sub_1001D686C, (uint64_t)&protocol conformance descriptor for <A> A?);
    v82 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 5056, v80, v81);
    v111 = v83;
    v130 = v82;
    swift_release(v79);
    sub_10002BD98(v131, v125, v127, v132);
    if (qword_10025F900 != -1)
      swift_once(&qword_10025F900, sub_1000CFDE8);
    v84 = *(_QWORD *)(v0 + 5296);
    v85 = *(_QWORD *)(v0 + 5288);
    v86 = *(_QWORD *)(v0 + 5280);
    v87 = *(_QWORD *)(v0 + 5272);
    v88 = *(_QWORD *)(v0 + 5264);
    v89 = *(_QWORD *)(v0 + 5256);
    v90 = sub_100037A9C(v86, (uint64_t)qword_10027AC20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v84, v90, v86);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v88 + 104))(v87, enum case for OnConflict.replace(_:), v89);
    v91 = sub_100037A5C(&qword_100267178);
    v92 = *(_QWORD *)(type metadata accessor for Setter(0) - 8);
    v93 = swift_allocObject(v91, ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))+ 5 * *(_QWORD *)(v92 + 72), *(unsigned __int8 *)(v92 + 80) | 7);
    *(_OWORD *)(v93 + 16) = xmmword_1001FC070;
    v133 = v93;
    if (qword_10025FAF8 != -1)
      swift_once(&qword_10025FAF8, sub_10014D720);
    v94 = sub_100037A5C(&qword_1002628F0);
    v95 = sub_100037A9C(v94, (uint64_t)qword_10027B210);
    *v121 = 0;
    <- infix<A>(_:_:)(v95, v121, &type metadata for Int, &protocol witness table for Int);
    if (qword_10025FB00 != -1)
      swift_once(&qword_10025FB00, sub_10014D7B0);
    v96 = sub_100037A5C(&qword_100260D68);
    v97 = sub_100037A9C(v96, (uint64_t)qword_10027B228);
    *(_QWORD *)(v0 + 5120) = v124;
    *(_QWORD *)(v0 + 5128) = v118;
    <- infix<A>(_:_:)(v97, v0 + 5120, &type metadata for Data, &protocol witness table for Data);
    if (qword_10025FB10 != -1)
      swift_once(&qword_10025FB10, sub_10014D8C8);
    v98 = sub_100037A5C(&qword_100260D60);
    v99 = sub_100037A9C(v98, (uint64_t)qword_10027B258);
    *(_QWORD *)(v0 + 5088) = v120;
    *(_QWORD *)(v0 + 5096) = v116;
    <- infix<A>(_:_:)(v99, v0 + 5088, &type metadata for Data, &protocol witness table for Data);
    if (qword_10025FB08 != -1)
      swift_once(&qword_10025FB08, sub_10014D834);
    v100 = sub_100037A9C(v98, (uint64_t)qword_10027B240);
    *(_QWORD *)(v0 + 5104) = v114;
    *(_QWORD *)(v0 + 5112) = type;
    <- infix<A>(_:_:)(v100, v0 + 5104, &type metadata for Data, &protocol witness table for Data);
    if (qword_10025FB18 != -1)
      swift_once(&qword_10025FB18, sub_10014D958);
    v101 = *(_QWORD *)(v0 + 5296);
    v128 = *(_QWORD *)(v0 + 5288);
    v102 = *(_QWORD *)(v0 + 5280);
    v103 = *(_QWORD *)(v0 + 5272);
    v122 = *(_QWORD *)(v0 + 5264);
    v126 = *(_QWORD *)(v0 + 5256);
    v104 = *(_QWORD *)(v0 + 5240);
    v105 = sub_100037A9C(v98, (uint64_t)qword_10027B270);
    *(_QWORD *)(v0 + 5136) = v130;
    *(_QWORD *)(v0 + 5144) = v111;
    <- infix<A>(_:_:)(v105, v0 + 5136, &type metadata for Data, &protocol witness table for Data);
    QueryType.insert(or:_:)(v103, v133, v102, &protocol witness table for Table);
    swift_bridgeObjectRelease(v133);
    sub_100037AF8(v130, v111);
    sub_100037AF8(v114, type);
    sub_100037AF8(v120, v116);
    sub_100037AB4(v124, v118);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v103, v126);
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v101, v102);
    v106 = type metadata accessor for Insert(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v104, 0, 1, v106);
  }
  v107 = *(_QWORD *)(v0 + 5272);
  swift_task_dealloc(*(_QWORD *)(v0 + 5296));
  swift_task_dealloc(v107);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100029ECC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[11];
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

_QWORD *sub_100029F34(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[8];
  swift_bridgeObjectRetain(a1[11]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_100029F9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 88);
  v24 = *(_QWORD *)(a1 + 104);
  v25 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a1 + 120);
  v23 = *(_QWORD *)(a1 + 112);
  v20 = *(_QWORD *)(a1 + 136);
  v21 = *(_QWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 152);
  v19 = *(_QWORD *)(a1 + 144);
  v15 = *(_OWORD *)(a1 + 176);
  v16 = *(_OWORD *)(a1 + 160);
  v13 = *(_OWORD *)(a1 + 208);
  v14 = *(_OWORD *)(a1 + 192);
  v12 = *(_OWORD *)(a1 + 224);
  v7 = *(_QWORD *)(a1 + 240);
  v6 = *(_QWORD *)(a1 + 248);
  v8 = *(_QWORD *)(a1 + 408);
  v17 = *(_QWORD *)(a1 + 400);
  v9 = *(_QWORD *)(a1 + 416);
  v10 = *(_QWORD *)(a1 + 424);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  sub_10002BF40(v25, v24, v23, v22, v21, v20, v19, v18, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v7,
    v6);
  sub_10002BD98(v17, v8, v9, v10);
  return a1;
}

uint64_t sub_10002A0C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v24 = *(_QWORD *)(a1 + 104);
  v25 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a1 + 120);
  v23 = *(_QWORD *)(a1 + 112);
  v20 = *(_QWORD *)(a1 + 136);
  v21 = *(_QWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 152);
  v19 = *(_QWORD *)(a1 + 144);
  v15 = *(_OWORD *)(a1 + 176);
  v16 = *(_OWORD *)(a1 + 160);
  v13 = *(_OWORD *)(a1 + 208);
  v14 = *(_OWORD *)(a1 + 192);
  v12 = *(_OWORD *)(a1 + 224);
  v7 = *(_QWORD *)(a1 + 240);
  v6 = *(_QWORD *)(a1 + 248);
  v8 = *(_QWORD *)(a1 + 408);
  v17 = *(_QWORD *)(a1 + 400);
  v9 = *(_QWORD *)(a1 + 416);
  v10 = *(_QWORD *)(a1 + 424);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 88));
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_10002C108(v25, v24, v23, v22, v21, v20, v19, v18, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v7,
    v6);
  sub_10002BD68(v17, v8, v9, v10);
  return a1;
}

uint64_t sub_10002A1F0@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t My;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned int v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  void *v122;
  _OWORD v123[36];
  _OWORD v124[36];
  char v125;
  _BYTE v126[151];
  char v127;
  _QWORD v128[20];
  _QWORD v129[20];
  char v130;
  uint64_t v131;
  _OWORD v132[36];

  v122 = a2;
  v4 = sub_100037A5C(&qword_100265A10);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100036228(a1, v8);
  v10 = sub_10002B8CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerBaseResponse.CodingKeys, &type metadata for ServerBaseResponse.CodingKeys, v10, v8, v9);
  if (v2)
    return sub_10002BB90(a1);
  LOBYTE(v123[0]) = 0;
  v11 = sub_100033428();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v124, &type metadata for ServerMyInfo, v123, v4, &type metadata for ServerMyInfo, v11);
  v116 = v5;
  v117 = a1;
  v13 = *((_QWORD *)&v124[0] + 1);
  *(_QWORD *)&v121 = v4;
  v14 = *((_QWORD *)&v124[1] + 1);
  v15 = *(_QWORD *)&v124[2];
  v16 = *(_QWORD *)&v124[3];
  v118 = 0;
  v17 = *(_QWORD *)&v124[4];
  v18 = *((_QWORD *)&v124[5] + 1);
  v113 = *(_QWORD *)&v124[1];
  v114 = *(_QWORD *)&v124[0];
  v132[0] = v124[0];
  v132[1] = v124[1];
  *(_QWORD *)&v132[2] = *(_QWORD *)&v124[2];
  v112 = BYTE8(v124[2]);
  BYTE8(v132[2]) = BYTE8(v124[2]);
  v132[3] = v124[3];
  v111 = *((_QWORD *)&v124[3] + 1);
  *(_QWORD *)&v132[4] = *(_QWORD *)&v124[4];
  v110 = BYTE8(v124[4]);
  BYTE8(v132[4]) = BYTE8(v124[4]);
  v109 = *(_QWORD *)&v124[5];
  v132[5] = v124[5];
  v19 = sub_100037A5C(&qword_100265A28);
  LOBYTE(v123[0]) = 1;
  v20 = sub_10002B370(&qword_100265A30, &qword_100265A28, (void (*)(void))sub_10017E390, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v120 = v13;
  v21 = v13;
  v22 = v14;
  v23 = v121;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  v119 = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  v24 = v20;
  v25 = v118;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v124, v19, v123, v23, v19, v24);
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v7, v23);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v119);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v120);
    sub_10002BB90(v117);
    v26 = *((_QWORD *)&v132[0] + 1);
    v27 = *((_QWORD *)&v132[1] + 1);
    v28 = *(_QWORD *)&v132[3];
    v29 = *((_QWORD *)&v132[5] + 1);
    swift_bridgeObjectRelease(*(_QWORD *)&v132[4]);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v27);
    return swift_bridgeObjectRelease(v29);
  }
  v106 = v17;
  v107 = v18;
  v103 = v22;
  v30 = *(_QWORD *)&v124[0];
  *(_QWORD *)&v132[6] = *(_QWORD *)&v124[0];
  LOBYTE(v123[0]) = 2;
  v31 = sub_10002B910();
  v108 = v30;
  swift_bridgeObjectRetain(v30);
  v115 = v7;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v124, &type metadata for ServerPreferences, v123, v23, &type metadata for ServerPreferences, v31);
  v33 = *((_QWORD *)&v124[0] + 1);
  v32 = *(_QWORD *)&v124[0];
  v34 = v124[1];
  *((_QWORD *)&v132[6] + 1) = *(_QWORD *)&v124[0];
  v132[7] = *(_OWORD *)((char *)v124 + 8);
  *(_QWORD *)&v132[8] = *((_QWORD *)&v124[1] + 1);
  v35 = sub_100037A5C(&qword_1002659B8);
  LOBYTE(v123[0]) = 3;
  v104 = v33;
  v105 = v32;
  v101 = *((_QWORD *)&v34 + 1);
  v102 = v34;
  sub_10002BD68(v32, v33, v34, *((uint64_t *)&v34 + 1));
  v36 = sub_10002B370(&qword_100265A48, &qword_1002659B8, (void (*)(void))sub_10017E3D4, (uint64_t)&protocol conformance descriptor for <A> A?);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v124, v35, v123, v121, v35, v36);
  *((_QWORD *)&v132[8] + 1) = *(_QWORD *)&v124[0];
  LOBYTE(v123[0]) = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v124, v35, v123, v121, v35, v36);
  *(_QWORD *)&v132[9] = *(_QWORD *)&v124[0];
  v37 = sub_100037A5C(&qword_100265A68);
  LOBYTE(v123[0]) = 5;
  v38 = sub_10002B370(&qword_100265A70, &qword_100265A68, (void (*)(void))sub_10017E43C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v124, v37, v123, v121, v37, v38);
  *((_QWORD *)&v132[9] + 1) = *(_QWORD *)&v124[0];
  LOBYTE(v123[0]) = 6;
  v100 = *(_QWORD *)&v124[0];
  swift_bridgeObjectRetain(*(_QWORD *)&v124[0]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v124, v37, v123, v121, v37, v38);
  v39 = *(_QWORD *)&v124[0];
  *(_QWORD *)&v132[10] = *(_QWORD *)&v124[0];
  v40 = sub_100037A5C(&qword_100265A80);
  LOBYTE(v123[0]) = 7;
  v41 = sub_10002B370(&qword_100265A88, &qword_100265A80, (void (*)(void))sub_10017E480, (uint64_t)&protocol conformance descriptor for <A> [A]);
  swift_bridgeObjectRetain(v39);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v124, v40, v123, v121, v40, v41);
  v42 = *(_QWORD *)&v124[0];
  v118 = v39;
  *((_QWORD *)&v132[10] + 1) = *(_QWORD *)&v124[0];
  LOBYTE(v123[0]) = 8;
  v43 = sub_10002B888();
  swift_bridgeObjectRetain(v42);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v124, &type metadata for ServerCommandResponse, v123, v121, &type metadata for ServerCommandResponse, v43);
  v99 = v42;
  v44 = *((_QWORD *)&v124[0] + 1);
  v45 = *(_QWORD *)&v124[0];
  v46 = v124[1];
  v47 = *(_QWORD *)&v124[2];
  v132[11] = v124[0];
  v132[12] = v124[1];
  *(_QWORD *)&v132[13] = *(_QWORD *)&v124[2];
  v48 = sub_100037A5C(&qword_100265AA0);
  LOBYTE(v123[0]) = 9;
  v96 = __PAIR128__(v44, v45);
  v95 = v46;
  v97 = v47;
  v98 = *((_QWORD *)&v46 + 1);
  sub_10002B848(v45, v44, v46, *((uint64_t *)&v46 + 1), v47);
  v49 = sub_10002B370(&qword_100265AA8, &qword_100265AA0, (void (*)(void))sub_10017E4C4, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v50 = v115;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v124, v48, v123, v121, v48, v49);
  v51 = *(_QWORD *)&v124[0];
  v52 = v120;
  v53 = v118;
  *((_QWORD *)&v132[13] + 1) = *(_QWORD *)&v124[0];
  v54 = sub_100037A5C(&qword_100265AB8);
  v130 = 10;
  v55 = sub_10017E508();
  swift_bridgeObjectRetain(v51);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v131, v54, &v130, v121, v54, v55);
  v56 = v131;
  *(_QWORD *)&v132[14] = v131;
  v127 = 12;
  v57 = sub_10002B9FC();
  swift_bridgeObjectRetain(v56);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v128, &type metadata for ServerContext, &v127, v121, &type metadata for ServerContext, v57);
  sub_10000EF6C((uint64_t)v128, (uint64_t)v124, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v124, (uint64_t)v129, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v129, (uint64_t)&v132[15], &qword_1002603B0);
  v125 = 13;
  sub_10000EFB0(v129, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
  v58 = sub_10002BA40();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v124, &type metadata for ServerConfig, &v125, v121, &type metadata for ServerConfig, v58);
  sub_10000EF6C((uint64_t)v124, (uint64_t)v123, &qword_100260858);
  sub_10000EF6C((uint64_t)v123, (uint64_t)v126, &qword_100260858);
  sub_10000EF6C((uint64_t)v126, (uint64_t)&v132[25], &qword_100260858);
  My = type metadata accessor for Feature.FindMy(0);
  *((_QWORD *)&v124[1] + 1) = My;
  *(_QWORD *)&v124[2] = sub_100004EA8(&qword_100261A08, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v60 = sub_10003276C(v124);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v60, enum case for Feature.FindMy.fencesMigration(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v124);
  sub_10002BB90(v124);
  v94 = v51;
  if ((My & 1) != 0)
  {
    v61 = v56;
    *(_QWORD *)&v132[34] = sub_100176630(14);
    *((_QWORD *)&v132[34] + 1) = sub_100176630(15);
    *(_QWORD *)&v132[35] = sub_100176630(16);
    v62 = sub_100176630(17);
  }
  else
  {
    v61 = v56;
    v62 = 0;
    memset(&v132[34], 0, 24);
  }
  *((_QWORD *)&v132[35] + 1) = v62;
  LOBYTE(v124[0]) = 11;
  result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v124, v121);
  v72 = v63;
  if (!v63)
    goto LABEL_10;
  v73 = HIBYTE(v63) & 0xF;
  v74 = result & 0xFFFFFFFFFFFFLL;
  if ((v72 & 0x2000000000000000) != 0)
    v75 = HIBYTE(v72) & 0xF;
  else
    v75 = result & 0xFFFFFFFFFFFFLL;
  if (!v75)
  {
    swift_bridgeObjectRelease(v72);
    goto LABEL_10;
  }
  if ((v72 & 0x1000000000000000) != 0)
  {
    v77 = (uint64_t)sub_1001EF3C8(result, v72, 10);
    v93 = v92;
    swift_bridgeObjectRelease(v72);
    if ((v93 & 1) == 0)
    {
      v52 = v120;
      v50 = v115;
LABEL_51:
      (*(void (**)(char *, _QWORD))(v116 + 8))(v50, v121);
      v64 = sub_10002B954(v77);
      if (v64 == 11)
      {
        v64 = 0;
        BYTE8(v132[14]) = 0;
        goto LABEL_12;
      }
LABEL_11:
      BYTE8(v132[14]) = v64;
LABEL_12:
      v65 = v114;
      v114 = *(_QWORD *)&v132[9];
      v115 = (char *)*((_QWORD *)&v132[8] + 1);
      v121 = v132[34];
      v116 = *((_QWORD *)&v132[35] + 1);
      v66 = *(_QWORD *)&v132[35];
      *(_QWORD *)&v123[0] = v65;
      *((_QWORD *)&v123[0] + 1) = v52;
      *(_QWORD *)&v123[1] = v113;
      *((_QWORD *)&v123[1] + 1) = v103;
      *(_QWORD *)&v123[2] = v15;
      BYTE8(v123[2]) = v112;
      *(_QWORD *)&v123[3] = v119;
      *((_QWORD *)&v123[3] + 1) = v111;
      *(_QWORD *)&v123[4] = v106;
      BYTE8(v123[4]) = v110;
      *(_QWORD *)&v123[5] = v109;
      *((_QWORD *)&v123[5] + 1) = v107;
      *(_QWORD *)&v123[6] = v108;
      *((_QWORD *)&v123[6] + 1) = v105;
      *(_QWORD *)&v123[7] = v104;
      *((_QWORD *)&v123[7] + 1) = v102;
      *(_QWORD *)&v123[8] = v101;
      *((_QWORD *)&v123[8] + 1) = *((_QWORD *)&v132[8] + 1);
      *(_QWORD *)&v123[9] = *(_QWORD *)&v132[9];
      *((_QWORD *)&v123[9] + 1) = v100;
      *(_QWORD *)&v123[10] = v53;
      *((_QWORD *)&v123[10] + 1) = v99;
      v67 = v96;
      v123[11] = v96;
      v68 = v94;
      v69 = v95;
      *(_QWORD *)&v123[12] = v95;
      *((_QWORD *)&v123[12] + 1) = v98;
      *(_QWORD *)&v123[13] = v97;
      *((_QWORD *)&v123[13] + 1) = v94;
      *(_QWORD *)&v123[14] = v61;
      BYTE8(v123[14]) = v64;
      sub_10000EF6C((uint64_t)v129, (uint64_t)&v123[15], &qword_1002603B0);
      sub_10000EF6C((uint64_t)v126, (uint64_t)&v123[25], &qword_100260858);
      v123[34] = v121;
      *(_QWORD *)&v123[35] = v66;
      *((_QWORD *)&v123[35] + 1) = v116;
      v70 = v114;
      swift_bridgeObjectRetain(v114);
      v71 = v115;
      swift_bridgeObjectRetain(v115);
      sub_10002B630((uint64_t)v123);
      sub_10000EFB0(v129, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
      swift_bridgeObjectRelease(v68);
      swift_bridgeObjectRelease(v61);
      sub_10002B5F4(v67, *((uint64_t *)&v67 + 1), v69, v98, v97);
      swift_bridgeObjectRelease(v71);
      swift_bridgeObjectRelease(v70);
      swift_bridgeObjectRelease(v100);
      swift_bridgeObjectRelease(v118);
      swift_bridgeObjectRelease(v99);
      sub_10002BD98(v105, v104, v102, v101);
      swift_bridgeObjectRelease(v107);
      swift_bridgeObjectRelease(v106);
      swift_bridgeObjectRelease(v119);
      swift_bridgeObjectRelease(v103);
      swift_bridgeObjectRelease(v120);
      swift_bridgeObjectRelease(v108);
      sub_10002BB90(v117);
      memcpy(v124, v132, sizeof(v124));
      sub_10002B3D4((uint64_t)v124);
      return (uint64_t)memcpy(v122, v123, 0x240uLL);
    }
    v52 = v120;
    v50 = v115;
LABEL_10:
    (*(void (**)(char *, _QWORD))(v116 + 8))(v50, v121);
    v64 = 10;
    goto LABEL_11;
  }
  if ((v72 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v76 = (unsigned __int8 *)((v72 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v76 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v72);
    v77 = (uint64_t)sub_1001EF3B4(v76, v74, 10);
    v79 = v78 & 1;
LABEL_50:
    swift_bridgeObjectRelease(v72);
    if ((v79 & 1) == 0)
      goto LABEL_51;
    goto LABEL_10;
  }
  *(_QWORD *)&v124[0] = result;
  *((_QWORD *)&v124[0] + 1) = v72 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v73)
    {
      if (v73 != 1 && (BYTE1(result) - 48) <= 9u)
      {
        v77 = (BYTE1(result) - 48);
        v84 = v73 - 2;
        if (v84)
        {
          v85 = (unsigned __int8 *)v124 + 2;
          while (1)
          {
            v86 = *v85 - 48;
            if (v86 > 9)
              goto LABEL_47;
            v87 = 10 * v77;
            if ((unsigned __int128)(v77 * (__int128)10) >> 64 != (10 * v77) >> 63)
              goto LABEL_47;
            v77 = v87 + v86;
            if (__OFADD__(v87, v86))
              goto LABEL_47;
            v79 = 0;
            ++v85;
            if (!--v84)
              goto LABEL_50;
          }
        }
        goto LABEL_49;
      }
      goto LABEL_47;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v73 && (result - 48) <= 9u)
      {
        v77 = (result - 48);
        v88 = v73 - 1;
        if (v88)
        {
          v89 = (unsigned __int8 *)v124 + 1;
          while (1)
          {
            v90 = *v89 - 48;
            if (v90 > 9)
              goto LABEL_47;
            v91 = 10 * v77;
            if ((unsigned __int128)(v77 * (__int128)10) >> 64 != (10 * v77) >> 63)
              goto LABEL_47;
            v77 = v91 + v90;
            if (__OFADD__(v91, v90))
              goto LABEL_47;
            v79 = 0;
            ++v89;
            if (!--v88)
              goto LABEL_50;
          }
        }
        goto LABEL_49;
      }
LABEL_47:
      v77 = 0;
      v79 = 1;
      goto LABEL_50;
    }
    if (v73)
    {
      if (v73 != 1 && (BYTE1(result) - 48) <= 9u)
      {
        v77 = -(uint64_t)(BYTE1(result) - 48);
        v80 = v73 - 2;
        if (v80)
        {
          v81 = (unsigned __int8 *)v124 + 2;
          while (1)
          {
            v82 = *v81 - 48;
            if (v82 > 9)
              goto LABEL_47;
            v83 = 10 * v77;
            if ((unsigned __int128)(v77 * (__int128)10) >> 64 != (10 * v77) >> 63)
              goto LABEL_47;
            v77 = v83 - v82;
            if (__OFSUB__(v83, v82))
              goto LABEL_47;
            v79 = 0;
            ++v81;
            if (!--v80)
              goto LABEL_50;
          }
        }
LABEL_49:
        v79 = 0;
        goto LABEL_50;
      }
      goto LABEL_47;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10002B370(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10003C1FC(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002B3D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 136);
  v13 = *(_QWORD *)(a1 + 144);
  v14 = *(_QWORD *)(a1 + 152);
  v15 = *(_QWORD *)(a1 + 160);
  v17 = *(_QWORD *)(a1 + 168);
  v23 = *(_QWORD *)(a1 + 184);
  v24 = *(_QWORD *)(a1 + 176);
  v21 = *(_QWORD *)(a1 + 200);
  v22 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 208);
  v26 = *(_QWORD *)(a1 + 216);
  v29 = *(_QWORD *)(a1 + 224);
  v39 = *(_QWORD *)(a1 + 248);
  v40 = *(_QWORD *)(a1 + 240);
  v37 = *(_QWORD *)(a1 + 264);
  v38 = *(_QWORD *)(a1 + 256);
  v35 = *(_QWORD *)(a1 + 280);
  v36 = *(_QWORD *)(a1 + 272);
  v33 = *(_QWORD *)(a1 + 296);
  v34 = *(_QWORD *)(a1 + 288);
  v30 = *(_OWORD *)(a1 + 304);
  v28 = *(_OWORD *)(a1 + 320);
  v27 = *(_OWORD *)(a1 + 336);
  v25 = *(_OWORD *)(a1 + 352);
  v19 = *(_OWORD *)(a1 + 368);
  v18 = *(_QWORD *)(a1 + 384);
  v16 = *(_QWORD *)(a1 + 392);
  v31 = *(_QWORD *)(a1 + 544);
  v32 = *(_QWORD *)(a1 + 552);
  v41 = *(_QWORD *)(a1 + 560);
  v42 = *(_QWORD *)(a1 + 568);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v6);
  sub_10002BD98(v7, v8, v9, v10);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v17);
  sub_10002B5F4(v24, v23, v22, v21, v20);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v29);
  sub_10002BF40(v40, v39, v38, v37, v36, v35, v34, v33, v30, *((uint64_t *)&v30 + 1), v28, *((uint64_t *)&v28 + 1), v27, *((uint64_t *)&v27 + 1), v25, *((uint64_t *)&v25 + 1), v19, *((uint64_t *)&v19 + 1), v18,
    v16);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v42);
  return a1;
}

uint64_t sub_10002B5F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

uint64_t sub_10002B630(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 136);
  v14 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(a1 + 152);
  v10 = *(_QWORD *)(a1 + 168);
  v18 = *(_QWORD *)(a1 + 160);
  v23 = *(_QWORD *)(a1 + 184);
  v24 = *(_QWORD *)(a1 + 176);
  v21 = *(_QWORD *)(a1 + 200);
  v22 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 208);
  v29 = *(_QWORD *)(a1 + 216);
  v26 = *(_QWORD *)(a1 + 224);
  v39 = *(_QWORD *)(a1 + 248);
  v40 = *(_QWORD *)(a1 + 240);
  v37 = *(_QWORD *)(a1 + 264);
  v38 = *(_QWORD *)(a1 + 256);
  v35 = *(_QWORD *)(a1 + 280);
  v36 = *(_QWORD *)(a1 + 272);
  v33 = *(_QWORD *)(a1 + 296);
  v34 = *(_QWORD *)(a1 + 288);
  v30 = *(_OWORD *)(a1 + 304);
  v28 = *(_OWORD *)(a1 + 320);
  v27 = *(_OWORD *)(a1 + 336);
  v25 = *(_OWORD *)(a1 + 352);
  v19 = *(_OWORD *)(a1 + 368);
  v16 = *(_QWORD *)(a1 + 392);
  v17 = *(_QWORD *)(a1 + 384);
  v41 = *(_QWORD *)(a1 + 552);
  v42 = *(_QWORD *)(a1 + 560);
  v31 = *(_QWORD *)(a1 + 568);
  v32 = *(_QWORD *)(a1 + 544);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 88));
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_10002BD68(v12, v7, v8, v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v18);
  sub_10002B848(v24, v23, v22, v21, v20);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v29);
  sub_10002C108(v40, v39, v38, v37, v36, v35, v34, v33, v30, *((uint64_t *)&v30 + 1), v28, *((uint64_t *)&v28 + 1), v27, *((uint64_t *)&v27 + 1), v25, *((uint64_t *)&v25 + 1), v19, *((uint64_t *)&v19 + 1), v17,
    v16);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  return a1;
}

uint64_t sub_10002B848(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  if (result != 1)
  {
    v6 = result;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(v6);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

unint64_t sub_10002B888()
{
  unint64_t result;

  result = qword_100265A98;
  if (!qword_100265A98)
  {
    result = swift_getWitnessTable(&unk_1001F8E44, &type metadata for ServerCommandResponse);
    atomic_store(result, (unint64_t *)&qword_100265A98);
  }
  return result;
}

unint64_t sub_10002B8CC()
{
  unint64_t result;

  result = qword_100265A18;
  if (!qword_100265A18)
  {
    result = swift_getWitnessTable(&unk_1001F9778, &type metadata for ServerBaseResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265A18);
  }
  return result;
}

unint64_t sub_10002B910()
{
  unint64_t result;

  result = qword_100265A40;
  if (!qword_100265A40)
  {
    result = swift_getWitnessTable(&unk_1001F8FAC, &type metadata for ServerPreferences);
    atomic_store(result, (unint64_t *)&qword_100265A40);
  }
  return result;
}

uint64_t sub_10002B954(uint64_t result)
{
  if (result <= 303)
  {
    if (result)
    {
      if (result == 200)
      {
        return 1;
      }
      else if (result == 217)
      {
        return 2;
      }
      else
      {
        return 11;
      }
    }
  }
  else
  {
    switch(result)
    {
      case 400:
        return 4;
      case 401:
        return 5;
      case 402:
      case 404:
      case 405:
      case 406:
      case 407:
      case 408:
      case 410:
      case 411:
      case 413:
      case 414:
      case 415:
      case 416:
      case 417:
      case 418:
      case 419:
      case 420:
      case 421:
      case 422:
        return 11;
      case 403:
        return 6;
      case 409:
        return 7;
      case 412:
        return 8;
      case 423:
        return 9;
      default:
        if (result == 304)
        {
          result = 3;
        }
        else
        {
          if (result != 500)
            return 11;
          result = 10;
        }
        break;
    }
  }
  return result;
}

unint64_t sub_10002B9FC()
{
  unint64_t result;

  result = qword_100260498;
  if (!qword_100260498)
  {
    result = swift_getWitnessTable(&unk_1001F2DBC, &type metadata for ServerContext);
    atomic_store(result, (unint64_t *)&qword_100260498);
  }
  return result;
}

unint64_t sub_10002BA40()
{
  unint64_t result;

  result = qword_100265AD0;
  if (!qword_100265AD0)
  {
    result = swift_getWitnessTable(&unk_1001F8F84, &type metadata for ServerConfig);
    atomic_store(result, (unint64_t *)&qword_100265AD0);
  }
  return result;
}

uint64_t sub_10002BA84(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10002BBB0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10002BB54((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10002BB54((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10002BB90(v12);
  return v7;
}

uint64_t sub_10002BB54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10002BB90(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10002BBB0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10002C1A0(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10002BD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_10002BD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_10002BDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t result;

  if (a7)
  {
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a12);
    sub_10002BF40(a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
    return sub_10002BD98(a51, a52, a53, a54);
  }
  return result;
}

uint64_t sub_10002BF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a18);
    swift_bridgeObjectRelease(a20);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_10002BF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t result;

  if (a7)
  {
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a9);
    sub_10002C108(a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
    return sub_10002BD68(a51, a52, a53, a54);
  }
  return result;
}

uint64_t sub_10002C108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a18);
    return swift_bridgeObjectRetain(a20);
  }
  return result;
}

uint64_t sub_10002C158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_1002603A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002C1A0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10002C234(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100051048(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100051048(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10002C234(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10002C3A8(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10002C3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100037A5C(&qword_100260520);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

void sub_10002C40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t refreshed;
  void *v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  void *object;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v72;
  unint64_t v73;
  uint64_t v74;
  _BOOL8 v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  _BOOL8 v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  Swift::String v97;
  void *v98;
  Swift::String v99;
  uint64_t v100;
  void *v101;
  Swift::String v102;
  Swift::String v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(_QWORD, unint64_t, _QWORD, __n128);
  uint64_t v112;
  uint64_t v113;

  v1 = ((uint64_t (*)(void))LocationRequest.toHandles.getter)();
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease(v1);
  v3 = *(_QWORD *)(v0 + 1872);
  if (v2)
  {
    v4 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1872));
    v3 = LocationRequest.toHandles.getter(v4);
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
  {
LABEL_19:
    *(_QWORD *)(v0 + 2024) = _swiftEmptyDictionarySingleton;
    v29 = *(_QWORD *)(v0 + 1992);
    v30 = *(_QWORD *)(v0 + 1984);
    v31 = *(_QWORD *)(v0 + 1976);
    v32 = *(_QWORD *)(v0 + 1968);
    v106 = *(_QWORD *)(v0 + 1960);
    v108 = *(_QWORD *)(v0 + 1952);
    v112 = *(_QWORD *)(v0 + 1864);
    v105 = *(_QWORD *)(v0 + 1856);
    v33 = *(_QWORD *)(v0 + 1848);
    v34 = *(unsigned __int8 *)(v0 + 2144);
    swift_bridgeObjectRelease(v3);
    if (v34)
      v35 = 0x646575657571;
    else
      v35 = 0x74616964656D6D69;
    if (v34)
      v36 = 0xE600000000000000;
    else
      v36 = 0xE900000000000065;
    v37 = v36;
    String.append(_:)(*(Swift::String *)&v35);
    swift_bridgeObjectRelease(v36);
    v38._countAndFlagsBits = 45;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    v39 = LocationRequest.type.getter();
    refreshed = LegacyRefreshSchedule.rawValue.getter(v39);
    v42 = v41;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    v43._countAndFlagsBits = refreshed;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v42);
    v44._countAndFlagsBits = 0x20726574666128;
    v44._object = (void *)0xE700000000000000;
    String.append(_:)(v44);
    v45._countAndFlagsBits = Duration.description.getter(v33, v105);
    object = v45._object;
    String.append(_:)(v45);
    swift_bridgeObjectRelease(object);
    v47._countAndFlagsBits = 41;
    v47._object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    *(_QWORD *)(v0 + 2032) = 0;
    *(_QWORD *)(v0 + 2040) = 0xE000000000000000;
    v48 = LocationRequest.refreshReason.getter();
    v49 = LegacyRefreshCommandReason.rawValue.getter(v48);
    v50 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
    v50(v32, v108);
    *(_QWORD *)(v0 + 1808) = v49;
    v51 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v53 = v52;
    swift_bridgeObjectRelease(0xE000000000000000);
    v113 = v53;
    v54._countAndFlagsBits = 2108704;
    v54._object = (void *)0xE300000000000000;
    String.append(_:)(v54);
    v55 = LocationRequest.refreshReason.getter();
    v56 = LegacyRefreshCommandReason.reason.getter(v55);
    v58 = v57;
    v50(v32, v108);
    v59._countAndFlagsBits = v56;
    v59._object = v58;
    String.append(_:)(v59);
    v60 = swift_bridgeObjectRelease(v58);
    *(_QWORD *)(v0 + 2048) = v51;
    *(_QWORD *)(v0 + 2056) = v113;
    *(_BYTE *)(v0 + 2145) = LocationRequest.shallowLocatesOnly.getter(v60) & 1;
    v61 = *(_QWORD *)(v112 + 16);
    if (!v61)
    {
LABEL_57:
      *(_QWORD *)(v0 + 2064) = _swiftEmptyDictionarySingleton;
      v94 = *(_QWORD *)(v0 + 1864);
      *(_QWORD *)(v0 + 1792) = 0;
      *(_QWORD *)(v0 + 1800) = 0xE000000000000000;
      swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
      sub_10000E4C8(v95);
      swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v96 = *(_QWORD *)(v112 + 16);
      swift_bridgeObjectRelease(v94);
      *(_QWORD *)(v0 + 1816) = v96;
      v97._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v98 = v97._object;
      String.append(_:)(v97);
      swift_bridgeObjectRelease(v98);
      v99._countAndFlagsBits = 2065706025;
      v99._object = (void *)0xE400000000000000;
      String.append(_:)(v99);
      v100 = *(_QWORD *)(v0 + 1792);
      v101 = *(void **)(v0 + 1800);
      swift_bridgeObjectRetain(v101);
      v102._countAndFlagsBits = v100;
      v102._object = v101;
      String.append(_:)(v102);
      swift_bridgeObjectRelease(v101);
      v103._countAndFlagsBits = 125;
      v103._object = (void *)0xE100000000000000;
      String.append(_:)(v103);
      *(_QWORD *)(v0 + 2072) = 0x203A6C61746F5428;
      *(_QWORD *)(v0 + 2080) = 0xE800000000000000;
      v104 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
      *(_QWORD *)(v0 + 2088) = v104;
      *v104 = v0;
      v104[1] = sub_100004DC0;
      daemon.getter();
      return;
    }
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1864));
    v63 = (uint64_t *)(v62 + 40);
    while (1)
    {
      v65 = *(v63 - 1);
      v64 = *v63;
      v66 = _swiftEmptyDictionarySingleton[2];
      swift_bridgeObjectRetain(*v63);
      if (v66 && (v67 = sub_10002FF38(v65, v64), (v68 & 1) != 0))
      {
        v69 = *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v67);
        v70 = v69 + 1;
        if (__OFADD__(v69, 1))
          goto LABEL_62;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
        v73 = sub_10002FF38(v65, v64);
        v74 = _swiftEmptyDictionarySingleton[2];
        v75 = (v72 & 1) == 0;
        v76 = v74 + v75;
        if (__OFADD__(v74, v75))
          goto LABEL_63;
        v77 = v72;
        if (_swiftEmptyDictionarySingleton[3] >= v76)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v72 & 1) == 0)
              goto LABEL_53;
          }
          else
          {
            sub_1000F6088();
            if ((v77 & 1) == 0)
              goto LABEL_53;
          }
        }
        else
        {
          sub_100006E10(v76, isUniquelyReferenced_nonNull_native);
          v78 = sub_10002FF38(v65, v64);
          if ((v77 & 1) != (v79 & 1))
            goto LABEL_55;
          v73 = v78;
          if ((v77 & 1) == 0)
          {
LABEL_53:
            _swiftEmptyDictionarySingleton[(v73 >> 6) + 8] |= 1 << v73;
            v92 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v73);
            *v92 = v65;
            v92[1] = v64;
            *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v73) = v70;
            v93 = _swiftEmptyDictionarySingleton[2];
            v27 = __OFADD__(v93, 1);
            v91 = v93 + 1;
            if (v27)
              goto LABEL_64;
            goto LABEL_54;
          }
        }
        *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v73) = v70;
      }
      else
      {
        v80 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
        v82 = sub_10002FF38(v65, v64);
        v83 = _swiftEmptyDictionarySingleton[2];
        v84 = (v81 & 1) == 0;
        v85 = v83 + v84;
        if (__OFADD__(v83, v84))
          goto LABEL_59;
        v86 = v81;
        if (_swiftEmptyDictionarySingleton[3] >= v85)
        {
          if ((v80 & 1) != 0)
          {
            if ((v81 & 1) == 0)
              goto LABEL_44;
          }
          else
          {
            sub_1000F6088();
            if ((v86 & 1) == 0)
              goto LABEL_44;
          }
        }
        else
        {
          sub_100006E10(v85, v80);
          v87 = sub_10002FF38(v65, v64);
          if ((v86 & 1) != (v88 & 1))
            goto LABEL_55;
          v82 = v87;
          if ((v86 & 1) == 0)
          {
LABEL_44:
            _swiftEmptyDictionarySingleton[(v82 >> 6) + 8] |= 1 << v82;
            v89 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v82);
            *v89 = v65;
            v89[1] = v64;
            *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v82) = 1;
            v90 = _swiftEmptyDictionarySingleton[2];
            v27 = __OFADD__(v90, 1);
            v91 = v90 + 1;
            if (v27)
              goto LABEL_61;
LABEL_54:
            _swiftEmptyDictionarySingleton[2] = v91;
            swift_bridgeObjectRetain(v64);
            goto LABEL_28;
          }
        }
        *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v82) = 1;
      }
LABEL_28:
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_bridgeObjectRelease(v64);
      v63 += 2;
      if (!--v61)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1864));
        goto LABEL_57;
      }
    }
  }
  v6 = *(_QWORD *)(v0 + 2008);
  v7 = v3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v109 = *(_QWORD *)(v6 + 72);
  v110 = v6;
  v111 = *(uint64_t (**)(_QWORD, unint64_t, _QWORD, __n128))(v6 + 16);
  v107 = v3;
  v8 = swift_bridgeObjectRetain(v3);
  while (1)
  {
    v11 = v111(*(_QWORD *)(v0 + 2016), v7, *(_QWORD *)(v0 + 2000), v8);
    v12 = Handle.identifier.getter(v11);
    v14 = v13;
    v15 = Handle.trackingTimestamp.getter();
    v16 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v18 = sub_10002FF38(v12, v14);
    v19 = _swiftEmptyDictionarySingleton[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (_swiftEmptyDictionarySingleton[3] >= v21)
    {
      if ((v16 & 1) != 0)
      {
        if ((v17 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        sub_1000F6234();
        if ((v22 & 1) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      sub_10002CC24(v21, v16);
      v23 = sub_10002FF38(v12, v14);
      if ((v22 & 1) != (v24 & 1))
      {
LABEL_55:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        return;
      }
      v18 = v23;
      if ((v22 & 1) == 0)
      {
LABEL_14:
        _swiftEmptyDictionarySingleton[(v18 >> 6) + 8] |= 1 << v18;
        v25 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v18);
        *v25 = v12;
        v25[1] = v14;
        *(double *)(_swiftEmptyDictionarySingleton[7] + 8 * v18) = v15;
        v26 = _swiftEmptyDictionarySingleton[2];
        v27 = __OFADD__(v26, 1);
        v28 = v26 + 1;
        if (v27)
          goto LABEL_60;
        _swiftEmptyDictionarySingleton[2] = v28;
        swift_bridgeObjectRetain(v14);
        goto LABEL_6;
      }
    }
    *(double *)(_swiftEmptyDictionarySingleton[7] + 8 * v18) = v15;
LABEL_6:
    v9 = *(_QWORD *)(v0 + 2016);
    v10 = *(_QWORD *)(v0 + 2000);
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRelease(v14);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v9, v10);
    v7 += v109;
    if (!--v5)
    {
      v3 = v107;
      swift_bridgeObjectRelease(v107);
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
}

Swift::Int sub_10002CC24(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100037A5C(&qword_1002633E0);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v31[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10002CF28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  char v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  NSObject *v115;
  os_log_type_t v116;
  uint64_t v117;
  _QWORD *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  _QWORD *v130;
  os_log_type_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  const char *v142;
  uint64_t v143;
  _QWORD *v144;
  os_log_type_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  char v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  os_log_type_t v164;
  uint8_t *v165;
  __n128 v166;
  int64_t v167;
  _QWORD *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  __n128 v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  int64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  NSObject *v220;
  os_log_type_t v221;
  uint64_t v222;
  _QWORD *v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  _QWORD *v231;
  char *v232;
  uint64_t v233;
  _QWORD *v234;
  os_log_type_t v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  NSObject *v243;
  os_log_type_t v244;
  const char *v245;
  uint64_t v246;
  _QWORD *v247;
  os_log_type_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  char v259;
  uint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  NSObject *v266;
  os_log_type_t v267;
  uint8_t *v268;
  uint64_t v269;
  uint64_t v270;
  __n128 v271;
  int64_t v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  double *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  double v302;
  char v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  __n128 v309;
  uint64_t v310;
  _QWORD *v311;
  int64_t v312;
  _QWORD *v313;
  unsigned int v314;
  _QWORD *v315;
  double v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  __n128 v324;
  uint64_t v325;
  uint64_t (*v326)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  NSObject *v337;
  os_log_type_t v338;
  uint8_t *v339;
  uint64_t v340;
  uint64_t v341;
  __n128 v342;
  int64_t v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  double *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  double v372;
  char v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  __n128 v379;
  _QWORD *v380;
  int64_t v381;
  _QWORD *v382;
  unsigned int v383;
  _QWORD *v384;
  double v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  __n128 v393;
  uint64_t v394;
  uint64_t (*v395)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  uint8_t *v404;
  uint64_t v405;
  NSObject *v406;
  os_log_type_t v407;
  uint8_t *v408;
  __n128 v409;
  int64_t v410;
  _QWORD *v411;
  uint64_t v412;
  uint8_t *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  _QWORD *v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  uint64_t v434;
  uint64_t v435;
  NSObject *v436;
  os_log_type_t v437;
  uint8_t *v438;
  uint64_t v439;
  uint64_t v440;
  __n128 v441;
  int64_t v442;
  _QWORD *v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  _QWORD *v463;
  int v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t *v467;
  uint64_t *v468;
  _QWORD *v469;
  uint64_t v470;
  uint64_t *v471;
  uint64_t v472;
  _QWORD *v473;
  _QWORD *v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  unsigned int v479;
  unsigned int v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  _QWORD *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint8_t **v497;
  _QWORD *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unsigned int v503;
  _QWORD *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unsigned int v508;
  unsigned int v509;
  _QWORD *v510;
  unsigned int v511;
  double v512;
  double v513;
  os_log_type_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  _QWORD *v518;
  uint8_t *v519;
  _QWORD *v520;
  uint64_t v521;
  uint64_t v522;
  char v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  NSObject *v528;
  _QWORD *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  os_log_type_t v533;
  uint8_t *v534;
  uint64_t v535;
  char v536;
  uint64_t v537;
  uint8_t *v538;
  os_log_type_t v539;
  uint8_t *v540;
  uint8_t *v541;
  uint8_t *v542;
  char v543;
  uint64_t v544;
  char v545;
  os_log_type_t v546;
  uint8_t *v547;
  uint8_t *v548;
  uint8_t *v549;
  uint8_t *v550;
  uint64_t v551;
  uint64_t *v552;
  uint8_t *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  NSObject *v557;
  os_log_type_t v558;
  char *v559;
  uint64_t v560;
  uint64_t v561;
  NSObject *v562;
  uint64_t v563;
  _QWORD *v564;
  uint8_t *v565;
  uint64_t v566;
  uint64_t (*v567)(uint64_t, unint64_t, uint64_t);
  uint64_t v568;
  uint64_t v569;
  NSObject *v570;
  uint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  uint64_t *v574;
  NSObject *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  _QWORD *v582;
  uint64_t v583;
  uint64_t *v584;
  uint64_t v585;
  uint64_t v586;
  _QWORD *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t (*v593)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v594)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v595)(uint64_t, uint8_t *, uint64_t);
  uint64_t (*v596)(uint64_t, char *, uint64_t);
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  int64_t v601;
  uint64_t v602;
  int64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  _QWORD *v608;
  uint64_t v609;
  _QWORD *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  _QWORD *v614;
  uint64_t v615;
  uint64_t v616[3];

  v1 = v0[220];
  v473 = _swiftEmptyArrayStorage;
  v0[217] = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + 136);
  v588 = v2;
  if (v2)
  {
    v606 = *(_QWORD *)(v2 + 16);
    if (v606)
    {
      v3 = v0 + 2;
      v597 = v2 + 32;
      swift_bridgeObjectRetain_n(v2, 2);
      v4 = 0;
      v5 = _swiftEmptyDictionarySingleton;
      while (1)
      {
        v8 = v597 + 152 * v4;
        v9 = *(_OWORD *)(v8 + 32);
        v10 = *(_OWORD *)(v8 + 48);
        v11 = *(_OWORD *)(v8 + 80);
        *((_OWORD *)v3 + 4) = *(_OWORD *)(v8 + 64);
        *((_OWORD *)v3 + 5) = v11;
        v12 = *(_OWORD *)(v8 + 96);
        v13 = *(_OWORD *)(v8 + 112);
        v14 = *(_OWORD *)(v8 + 128);
        *(_DWORD *)((char *)v3 + 143) = *(_DWORD *)(v8 + 143);
        *((_OWORD *)v3 + 7) = v13;
        *((_OWORD *)v3 + 8) = v14;
        *((_OWORD *)v3 + 6) = v12;
        v15 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)v3 = *(_OWORD *)v8;
        *((_OWORD *)v3 + 1) = v15;
        *((_OWORD *)v3 + 2) = v9;
        *((_OWORD *)v3 + 3) = v10;
        v16 = v0[11];
        v17 = *(_QWORD *)(v16 + 16);
        sub_100030788(v3);
        swift_bridgeObjectRetain(v16);
        v18 = Set.init(minimumCapacity:)(v17, &type metadata for String, &protocol witness table for String);
        v616[0] = v18;
        v19 = *(_QWORD *)(v16 + 16);
        if (v19)
        {
          v20 = (uint64_t *)(v16 + 40);
          do
          {
            v21 = *(v20 - 1);
            v22 = *v20;
            swift_bridgeObjectRetain(*v20);
            sub_10003007C((uint64_t *)&v614, v21, v22);
            swift_bridgeObjectRelease(v615);
            v20 += 2;
            --v19;
          }
          while (v19);
          swift_bridgeObjectRelease(v16);
          v23 = v616[0];
        }
        else
        {
          v23 = v18;
          swift_bridgeObjectRelease(v16);
        }
        v25 = *(_QWORD *)(v613 + 64);
        v24 = *(_QWORD *)(v613 + 72);
        v26 = v5[2];
        swift_bridgeObjectRetain(v24);
        if (v26)
        {
          swift_bridgeObjectRetain(v24);
          v27 = sub_10002FF38(v25, v24);
          if ((v28 & 1) != 0)
          {
            v29 = *(_QWORD *)(v5[7] + 8 * v27);
            swift_bridgeObjectRetain(v29);
            swift_bridgeObjectRelease(v24);
            v23 = sub_100030818(v23, v29);
          }
          else
          {
            swift_bridgeObjectRelease(v24);
          }
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
        v614 = v5;
        v32 = sub_10002FF38(v25, v24);
        v33 = v5[2];
        v34 = (v31 & 1) == 0;
        v35 = v33 + v34;
        if (__OFADD__(v33, v34))
        {
          __break(1u);
LABEL_236:
          __break(1u);
LABEL_237:
          __break(1u);
LABEL_238:
          __break(1u);
LABEL_239:
          __break(1u);
LABEL_240:
          __break(1u);
LABEL_241:
          swift_once(&qword_10025F928, sub_1000DF67C);
          goto LABEL_91;
        }
        v36 = v31;
        if (v5[3] >= v35)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v31 & 1) == 0)
              goto LABEL_22;
          }
          else
          {
            sub_1000F7854();
            v5 = v614;
            if ((v36 & 1) == 0)
              goto LABEL_22;
          }
        }
        else
        {
          sub_100030FDC(v35, isUniquelyReferenced_nonNull_native, &qword_1002633D8);
          v5 = v614;
          v37 = sub_10002FF38(v25, v24);
          if ((v36 & 1) != (v38 & 1))
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          v32 = v37;
          if ((v36 & 1) == 0)
          {
LABEL_22:
            v5[(v32 >> 6) + 8] |= 1 << v32;
            v39 = (uint64_t *)(v5[6] + 16 * v32);
            *v39 = v25;
            v39[1] = v24;
            *(_QWORD *)(v5[7] + 8 * v32) = v23;
            v40 = v5[2];
            v41 = __OFADD__(v40, 1);
            v42 = v40 + 1;
            if (v41)
              goto LABEL_237;
            v5[2] = v42;
            swift_bridgeObjectRetain(v24);
            goto LABEL_5;
          }
        }
        v6 = v5[7];
        v7 = 8 * v32;
        swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7));
        *(_QWORD *)(v6 + v7) = v23;
LABEL_5:
        swift_bridgeObjectRelease(0x8000000000000000);
        swift_bridgeObjectRelease(v24);
        ++v4;
        sub_1000306F8(v3);
        v0 = (_QWORD *)v613;
        if (v4 == v606)
        {
          v2 = v588;
          swift_bridgeObjectRelease_n(v588, 2);
          v1 = *(_QWORD *)(v613 + 1760);
          goto LABEL_28;
        }
      }
    }
  }
  v5 = _swiftEmptyDictionarySingleton;
LABEL_28:
  v43 = *(_QWORD *)(v1 + 144);
  v606 = v43;
  if (v43)
  {
    v598 = *(_QWORD *)(v43 + 16);
    if (v598)
    {
      v44 = v0 + 59;
      v576 = v43 + 32;
      swift_bridgeObjectRetain_n(v43, 2);
      v45 = 0;
      while (1)
      {
        v48 = v576 + 152 * v45;
        v49 = *(_OWORD *)(v48 + 32);
        v50 = *(_OWORD *)(v48 + 48);
        v51 = *(_OWORD *)(v48 + 80);
        *((_OWORD *)v44 + 4) = *(_OWORD *)(v48 + 64);
        *((_OWORD *)v44 + 5) = v51;
        v52 = *(_OWORD *)(v48 + 96);
        v53 = *(_OWORD *)(v48 + 112);
        v54 = *(_OWORD *)(v48 + 128);
        *(_DWORD *)((char *)v44 + 143) = *(_DWORD *)(v48 + 143);
        *((_OWORD *)v44 + 7) = v53;
        *((_OWORD *)v44 + 8) = v54;
        *((_OWORD *)v44 + 6) = v52;
        v55 = *(_OWORD *)(v48 + 16);
        *(_OWORD *)v44 = *(_OWORD *)v48;
        *((_OWORD *)v44 + 1) = v55;
        *((_OWORD *)v44 + 2) = v49;
        *((_OWORD *)v44 + 3) = v50;
        v56 = v0[67];
        v57 = *(_QWORD *)(v56 + 16);
        sub_100030788(v44);
        swift_bridgeObjectRetain(v56);
        v58 = Set.init(minimumCapacity:)(v57, &type metadata for String, &protocol witness table for String);
        v616[0] = v58;
        v59 = *(_QWORD *)(v56 + 16);
        if (v59)
        {
          v60 = (uint64_t *)(v56 + 40);
          do
          {
            v61 = *(v60 - 1);
            v62 = *v60;
            swift_bridgeObjectRetain(*v60);
            sub_10003007C((uint64_t *)&v614, v61, v62);
            swift_bridgeObjectRelease(v615);
            v60 += 2;
            --v59;
          }
          while (v59);
          swift_bridgeObjectRelease(v56);
          v63 = v616[0];
        }
        else
        {
          v63 = v58;
          swift_bridgeObjectRelease(v56);
        }
        v64 = *(_QWORD *)(v613 + 520);
        v65 = *(_QWORD *)(v613 + 528);
        v66 = v5[2];
        swift_bridgeObjectRetain(v65);
        if (v66)
        {
          swift_bridgeObjectRetain(v65);
          v67 = sub_10002FF38(v64, v65);
          if ((v68 & 1) != 0)
          {
            v69 = *(_QWORD *)(v5[7] + 8 * v67);
            swift_bridgeObjectRetain(v69);
            swift_bridgeObjectRelease(v65);
            v63 = sub_100030818(v63, v69);
          }
          else
          {
            swift_bridgeObjectRelease(v65);
          }
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
        v614 = v5;
        v71 = sub_10002FF38(v64, v65);
        v72 = v5[2];
        v73 = (v70 & 1) == 0;
        v74 = v72 + v73;
        if (__OFADD__(v72, v73))
          goto LABEL_236;
        v75 = v70;
        if (v5[3] >= v74)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v70 & 1) == 0)
              goto LABEL_49;
          }
          else
          {
            sub_1000F7854();
            v5 = v614;
            if ((v75 & 1) == 0)
              goto LABEL_49;
          }
        }
        else
        {
          sub_100030FDC(v74, isUniquelyReferenced_nonNull_native, &qword_1002633D8);
          v5 = v614;
          v76 = sub_10002FF38(v64, v65);
          if ((v75 & 1) != (v77 & 1))
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          v71 = v76;
          if ((v75 & 1) == 0)
          {
LABEL_49:
            v5[(v71 >> 6) + 8] |= 1 << v71;
            v78 = (uint64_t *)(v5[6] + 16 * v71);
            *v78 = v64;
            v78[1] = v65;
            *(_QWORD *)(v5[7] + 8 * v71) = v63;
            v79 = v5[2];
            v41 = __OFADD__(v79, 1);
            v80 = v79 + 1;
            if (v41)
              goto LABEL_238;
            v5[2] = v80;
            swift_bridgeObjectRetain(v65);
            goto LABEL_32;
          }
        }
        v46 = v5[7];
        v47 = 8 * v71;
        swift_bridgeObjectRelease(*(_QWORD *)(v46 + v47));
        *(_QWORD *)(v46 + v47) = v63;
LABEL_32:
        swift_bridgeObjectRelease(0x8000000000000000);
        swift_bridgeObjectRelease(v65);
        ++v45;
        sub_1000306F8(v44);
        v0 = (_QWORD *)v613;
        if (v45 == v598)
        {
          swift_bridgeObjectRelease_n(v606, 2);
          v43 = v606;
          v2 = v588;
          break;
        }
      }
    }
  }
  v559 = (char *)(v0 + 33);
  v468 = v0 + 213;
  v485 = v0 + 214;
  v0[253] = v5;
  if (!v2)
    goto LABEL_103;
  v552 = v0 + 211;
  v0[211] = _swiftEmptyArrayStorage;
  v82 = *(_QWORD *)(v2 + 16);
  if (!v82)
    goto LABEL_90;
  isUniquelyReferenced_nonNull_native = (uint64_t)(v0 + 21);
  v518 = v0 + 78;
  v510 = v0 + 116;
  v498 = v0 + 97;
  v566 = v0[243];
  v507 = v0[231];
  v503 = enum case for HandleType.follower(_:);
  swift_bridgeObjectRetain(v2);
  v83 = 32;
  v84 = qword_10027ACA0;
  do
  {
    v85 = *(_OWORD *)(v2 + v83 + 32);
    v86 = *(_OWORD *)(v2 + v83 + 48);
    v87 = *(_OWORD *)(v2 + v83 + 80);
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 64) = *(_OWORD *)(v2 + v83 + 64);
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 80) = v87;
    v88 = *(_OWORD *)(v2 + v83 + 96);
    v89 = *(_OWORD *)(v2 + v83 + 112);
    v90 = *(_OWORD *)(v2 + v83 + 128);
    *(_DWORD *)(isUniquelyReferenced_nonNull_native + 143) = *(_DWORD *)(v2 + v83 + 143);
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 112) = v89;
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 128) = v90;
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 96) = v88;
    v91 = *(_OWORD *)(v2 + v83 + 16);
    *(_OWORD *)isUniquelyReferenced_nonNull_native = *(_OWORD *)(v2 + v83);
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 16) = v91;
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 32) = v85;
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 48) = v86;
    v92 = v0[30];
    if (!*(_QWORD *)(v92 + 16))
    {
      sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
      if (qword_10025F928 != -1)
        swift_once(&qword_10025F928, sub_1000DF67C);
      v113 = type metadata accessor for Logger(0);
      sub_100037A9C(v113, (uint64_t)v84);
      v114 = sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
      v115 = Logger.logObject.getter(v114);
      v116 = static os_log_type_t.error.getter(v115);
      if (os_log_type_enabled(v115, v116))
      {
        v117 = swift_slowAlloc(12, -1);
        v118 = (_QWORD *)swift_slowAlloc(32, -1);
        v614 = v118;
        *(_DWORD *)v117 = 136315138;
        v119 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 112);
        *((_OWORD *)v518 + 6) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 96);
        *((_OWORD *)v518 + 7) = v119;
        *((_OWORD *)v518 + 8) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 128);
        *(_DWORD *)((char *)v518 + 143) = *(_DWORD *)(isUniquelyReferenced_nonNull_native + 143);
        v120 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 48);
        *((_OWORD *)v518 + 2) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 32);
        *((_OWORD *)v518 + 3) = v120;
        v121 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 80);
        *((_OWORD *)v518 + 4) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 64);
        *((_OWORD *)v518 + 5) = v121;
        v122 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 16);
        *(_OWORD *)v518 = *(_OWORD *)isUniquelyReferenced_nonNull_native;
        *((_OWORD *)v518 + 1) = v122;
        sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
        v123 = String.init<A>(describing:)(v518, &type metadata for ServerFriend);
        v125 = v124;
        *(_QWORD *)(v117 + 4) = sub_10002BA84(v123, v124, (uint64_t *)&v614);
        v126 = v125;
        v2 = v588;
        swift_bridgeObjectRelease(v126);
        sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
        sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
        v127 = v118;
        v128 = (char *)&type metadata for Any + 8;
LABEL_85:
        swift_arrayDestroy(v127, 1, v128);
        swift_slowDealloc(v118, -1, -1);
        swift_slowDealloc(v117, -1, -1);
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    v93 = (_QWORD *)v0[29];
    if (!v93[2])
    {
      sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
      if (qword_10025F928 != -1)
        swift_once(&qword_10025F928, sub_1000DF67C);
      v129 = type metadata accessor for Logger(0);
      sub_100037A9C(v129, (uint64_t)v84);
      v130 = sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
      v115 = Logger.logObject.getter(v130);
      v131 = static os_log_type_t.error.getter(v115);
      if (os_log_type_enabled(v115, v131))
      {
        v117 = swift_slowAlloc(12, -1);
        v118 = (_QWORD *)swift_slowAlloc(32, -1);
        v614 = v118;
        *(_DWORD *)v117 = 136315138;
        v132 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 112);
        *((_OWORD *)v498 + 6) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 96);
        *((_OWORD *)v498 + 7) = v132;
        *((_OWORD *)v498 + 8) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 128);
        *(_DWORD *)((char *)v498 + 143) = *(_DWORD *)(isUniquelyReferenced_nonNull_native + 143);
        v133 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 48);
        *((_OWORD *)v498 + 2) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 32);
        *((_OWORD *)v498 + 3) = v133;
        v134 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 80);
        *((_OWORD *)v498 + 4) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 64);
        *((_OWORD *)v498 + 5) = v134;
        v135 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 16);
        *(_OWORD *)v498 = *(_OWORD *)isUniquelyReferenced_nonNull_native;
        *((_OWORD *)v498 + 1) = v135;
        sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
        v136 = String.init<A>(describing:)(v498, &type metadata for ServerFriend);
        v138 = v137;
        *(_QWORD *)(v117 + 4) = sub_10002BA84(v136, v137, (uint64_t *)&v614);
        v139 = v138;
        v2 = v588;
        swift_bridgeObjectRelease(v139);
        sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
        sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
        v140 = v115;
        v141 = v131;
LABEL_84:
        _os_log_impl((void *)&_mh_execute_header, v140, v141, v142, (uint8_t *)v117, 0xCu);
        v128 = (char *)&type metadata for Any + 8;
        v127 = v118;
        goto LABEL_85;
      }
LABEL_58:
      sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
      sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
LABEL_59:

      v0 = (_QWORD *)v613;
      goto LABEL_60;
    }
    if (!v5[2])
    {
      sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
      goto LABEL_80;
    }
    v94 = v84;
    v95 = *(uint8_t **)(v92 + 40);
    v96 = v93[5];
    v577 = v93[4];
    v97 = v0[27];
    v98 = v0[28];
    sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRetain(v95);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v98);
    v99 = sub_10002FF38(v97, v98);
    if ((v100 & 1) == 0)
    {
      swift_bridgeObjectRelease(v98);
      swift_bridgeObjectRelease(v95);
      swift_bridgeObjectRelease(v96);
      v2 = v588;
      v84 = v94;
LABEL_80:
      if (qword_10025F928 != -1)
        swift_once(&qword_10025F928, sub_1000DF67C);
      v143 = type metadata accessor for Logger(0);
      sub_100037A9C(v143, (uint64_t)v84);
      v144 = sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
      v115 = Logger.logObject.getter(v144);
      v145 = static os_log_type_t.error.getter(v115);
      if (os_log_type_enabled(v115, v145))
      {
        v117 = swift_slowAlloc(12, -1);
        v118 = (_QWORD *)swift_slowAlloc(32, -1);
        v614 = v118;
        *(_DWORD *)v117 = 136315138;
        v146 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 112);
        *((_OWORD *)v510 + 6) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 96);
        *((_OWORD *)v510 + 7) = v146;
        *((_OWORD *)v510 + 8) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 128);
        *(_DWORD *)((char *)v510 + 143) = *(_DWORD *)(isUniquelyReferenced_nonNull_native + 143);
        v147 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 48);
        *((_OWORD *)v510 + 2) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 32);
        *((_OWORD *)v510 + 3) = v147;
        v148 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 80);
        *((_OWORD *)v510 + 4) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 64);
        *((_OWORD *)v510 + 5) = v148;
        v149 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 16);
        *(_OWORD *)v510 = *(_OWORD *)isUniquelyReferenced_nonNull_native;
        *((_OWORD *)v510 + 1) = v149;
        sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
        v150 = String.init<A>(describing:)(v510, &type metadata for ServerFriend);
        v152 = v151;
        *(_QWORD *)(v117 + 4) = sub_10002BA84(v150, v151, (uint64_t *)&v614);
        v153 = v152;
        v2 = v588;
        swift_bridgeObjectRelease(v153);
        sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
        sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
        v140 = v115;
        v141 = v145;
        goto LABEL_84;
      }
      goto LABEL_58;
    }
    v534 = v95;
    v101 = v0[252];
    v542 = (uint8_t *)v0[249];
    v102 = v0[242];
    v103 = v0[230];
    v104 = *(_QWORD *)(v5[7] + 8 * v99);
    swift_bridgeObjectRetain(v104);
    swift_bridgeObjectRelease(v98);
    v105 = sub_1000305E8((uint64_t)_swiftEmptyArrayStorage);
    Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)(v577, v96, 0, 0, _swiftEmptyArrayStorage, v105, _swiftEmptyArrayStorage, v106);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v507 + 56))(v101, 0, 1, v103);
    (*(void (**)(uint8_t *, _QWORD, uint64_t))(v566 + 104))(v542, v503, v102);
    v107 = *(_QWORD *)(v104 + 16);
    v527 = v82;
    if (v107)
    {
      v108 = sub_100037A5C(&qword_100265230);
      v109 = (_QWORD *)swift_allocObject(v108, 16 * v107 + 32, 7);
      v110 = j__malloc_size(v109);
      v111 = v110 - 32;
      if (v110 < 32)
        v111 = v110 - 17;
      v109[2] = v107;
      v109[3] = 2 * (v111 >> 4);
      v578 = sub_1000303EC((uint64_t)&v614, v109 + 4, v107, v104);
      v112 = (uint64_t)v614;
      swift_bridgeObjectRetain(v104);
      sub_100086D50(v112);
      if (v578 != v107)
        goto LABEL_239;
      swift_bridgeObjectRelease(v104);
    }
    else
    {
      swift_bridgeObjectRelease(v104);
      v109 = _swiftEmptyArrayStorage;
    }
    v0 = (_QWORD *)v613;
    v154 = *(_QWORD *)(v613 + 2016);
    v155 = *(_QWORD *)(v613 + 1992);
    v579 = *(_QWORD *)(v613 + 1936);
    v543 = *(_BYTE *)(v613 + 312) & 1;
    v523 = *(_BYTE *)(v613 + 313) & 1;
    v156 = v559[1];
    v157 = *v559;
    v158 = swift_task_alloc(64);
    *(_QWORD *)(v158 + 16) = isUniquelyReferenced_nonNull_native;
    *(_QWORD *)(v158 + 24) = v109;
    *(_QWORD *)(v158 + 32) = v155;
    *(_BYTE *)(v158 + 40) = v157;
    *(_BYTE *)(v158 + 41) = v156;
    *(_BYTE *)(v158 + 42) = v543;
    *(_BYTE *)(v158 + 43) = v523;
    *(_QWORD *)(v158 + 48) = v154;
    v159 = sub_100157BF0((void (*)(_QWORD *, __n128))sub_100030994, v158, (uint64_t)v109);
    swift_release(v109);
    swift_bridgeObjectRelease(v534);
    sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
    swift_task_dealloc(v158);
    (*(void (**)(uint64_t, uint64_t))(v566 + 8))(v155, v579);
    sub_1000087A0(v154, &qword_1002650A0);
    sub_10015D81C((uint64_t)v159, &qword_100265580, (uint64_t (*)(_QWORD))&type metadata accessor for Friend);
    v2 = v588;
    v84 = qword_10027ACA0;
    v82 = v527;
LABEL_60:
    v83 += 152;
    --v82;
  }
  while (v82);
  swift_bridgeObjectRelease(v2);
LABEL_90:
  isUniquelyReferenced_nonNull_native = (uint64_t)(v0 + 198);
  if (qword_10025F928 != -1)
    goto LABEL_241;
LABEL_91:
  v160 = type metadata accessor for Logger(0);
  sub_100037A9C(v160, (uint64_t)qword_10027ACA0);
  v161 = *v552;
  v162 = swift_bridgeObjectRetain_n(*v552, 2);
  v163 = Logger.logObject.getter(v162);
  v164 = static os_log_type_t.default.getter(v163);
  if (os_log_type_enabled(v163, v164))
  {
    v165 = (uint8_t *)swift_slowAlloc(12, -1);
    v544 = swift_slowAlloc(32, -1);
    v616[0] = v544;
    v166.n128_u64[0] = 136315138;
    *(_DWORD *)v165 = 136315138;
    v167 = *(_QWORD *)(v161 + 16);
    v168 = _swiftEmptyArrayStorage;
    if (v167)
    {
      v514 = v164;
      v519 = v165;
      v528 = v163;
      v535 = isUniquelyReferenced_nonNull_native;
      v169 = *(_QWORD *)(v613 + 1904);
      v589 = *(_QWORD *)(v613 + 1848);
      v614 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v161);
      sub_1000312EC(0, v167, 0);
      v524 = v161;
      v170 = v161 + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80));
      v599 = v169;
      v567 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v169 + 16);
      v580 = *(_QWORD *)(v169 + 72);
      do
      {
        v171 = *(_QWORD *)(v613 + 1928);
        v172 = *(_QWORD *)(v613 + 1896);
        v173 = *(_QWORD *)(v613 + 1888);
        v174 = *(_QWORD *)(v613 + 1840);
        v175 = v567(v171, v170, v172);
        v176 = Friend.handle.getter(v175);
        v177 = Handle.identifier.getter(v176);
        v179 = v178;
        (*(void (**)(uint64_t, uint64_t))(v589 + 8))(v173, v174);
        (*(void (**)(uint64_t, uint64_t))(v599 + 8))(v171, v172);
        v168 = v614;
        if ((swift_isUniquelyReferenced_nonNull_native(v614) & 1) == 0)
        {
          sub_1000312EC(0, v168[2] + 1, 1);
          v168 = v614;
        }
        v181 = v168[2];
        v180 = v168[3];
        if (v181 >= v180 >> 1)
        {
          sub_1000312EC(v180 > 1, v181 + 1, 1);
          v168 = v614;
        }
        v168[2] = v181 + 1;
        v182 = &v168[2 * v181];
        v182[4] = v177;
        v182[5] = v179;
        v170 += v580;
        --v167;
      }
      while (v167);
      v161 = v524;
      swift_bridgeObjectRelease(v524);
      v163 = v528;
      isUniquelyReferenced_nonNull_native = v535;
      v165 = v519;
      v164 = v514;
    }
    v183 = Array.description.getter(v166);
    v185 = v184;
    swift_bridgeObjectRelease(v168);
    *v468 = sub_10002BA84(v183, v185, v616);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v468, v485, v165 + 4, v165 + 12);
    swift_bridgeObjectRelease(v185);
    swift_bridgeObjectRelease_n(v161, 2);
    _os_log_impl((void *)&_mh_execute_header, v163, v164, "Server response with follower: %s", v165, 0xCu);
    swift_arrayDestroy(v544, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v544, -1, -1);
    swift_slowDealloc(v165, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v161, 2);
  }

  swift_beginAccess(v552, isUniquelyReferenced_nonNull_native, 0, 0);
  sub_10015D81C(*v552, &qword_100265580, (uint64_t (*)(_QWORD))&type metadata accessor for Friend);
  v43 = v606;
  v0 = (_QWORD *)v613;
LABEL_103:
  v467 = v0 + 206;
  v469 = v0 + 207;
  v474 = v0 + 216;
  v0[216] = _swiftEmptyArrayStorage;
  if (!v43)
    goto LABEL_151;
  v186 = *(_QWORD *)(v43 + 16);
  if (!v186)
    goto LABEL_137;
  isUniquelyReferenced_nonNull_native = (uint64_t)(v0 + 40);
  v529 = v0 + 135;
  v504 = v0 + 154;
  v520 = v0 + 173;
  v581 = v0[243];
  v515 = v0[231];
  v511 = enum case for HandleType.following(_:);
  swift_bridgeObjectRetain(v606);
  v187 = v606;
  v188 = 32;
  v189 = qword_10027ACA0;
  while (2)
  {
    v190 = *(_OWORD *)(v187 + v188 + 32);
    v191 = *(_OWORD *)(v187 + v188 + 48);
    v192 = *(_OWORD *)(v187 + v188 + 80);
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 64) = *(_OWORD *)(v187 + v188 + 64);
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 80) = v192;
    v193 = *(_OWORD *)(v187 + v188 + 96);
    v194 = *(_OWORD *)(v187 + v188 + 112);
    v195 = *(_OWORD *)(v187 + v188 + 128);
    *(_DWORD *)(isUniquelyReferenced_nonNull_native + 143) = *(_DWORD *)(v187 + v188 + 143);
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 112) = v194;
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 128) = v195;
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 96) = v193;
    v196 = *(_OWORD *)(v187 + v188 + 16);
    *(_OWORD *)isUniquelyReferenced_nonNull_native = *(_OWORD *)(v187 + v188);
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 16) = v196;
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 32) = v190;
    *(_OWORD *)(isUniquelyReferenced_nonNull_native + 48) = v191;
    v197 = v0[48];
    if (!*(_QWORD *)(v197 + 16))
    {
      sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
      if (qword_10025F928 != -1)
        swift_once(&qword_10025F928, sub_1000DF67C);
      v218 = type metadata accessor for Logger(0);
      sub_100037A9C(v218, (uint64_t)v189);
      v219 = sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
      v220 = Logger.logObject.getter(v219);
      v221 = static os_log_type_t.error.getter(v220);
      if (os_log_type_enabled(v220, v221))
      {
        v222 = swift_slowAlloc(12, -1);
        v223 = (_QWORD *)swift_slowAlloc(32, -1);
        v614 = v223;
        *(_DWORD *)v222 = 136315138;
        v224 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 112);
        *((_OWORD *)v529 + 6) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 96);
        *((_OWORD *)v529 + 7) = v224;
        *((_OWORD *)v529 + 8) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 128);
        *(_DWORD *)((char *)v529 + 143) = *(_DWORD *)(isUniquelyReferenced_nonNull_native + 143);
        v225 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 48);
        *((_OWORD *)v529 + 2) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 32);
        *((_OWORD *)v529 + 3) = v225;
        v226 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 80);
        *((_OWORD *)v529 + 4) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 64);
        *((_OWORD *)v529 + 5) = v226;
        v227 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 16);
        *(_OWORD *)v529 = *(_OWORD *)isUniquelyReferenced_nonNull_native;
        *((_OWORD *)v529 + 1) = v227;
        sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
        v228 = String.init<A>(describing:)(v529, &type metadata for ServerFriend);
        v230 = v229;
        *(_QWORD *)(v222 + 4) = sub_10002BA84(v228, v229, (uint64_t *)&v614);
        swift_bridgeObjectRelease(v230);
        sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
        sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
        v231 = v223;
        v232 = (char *)&type metadata for Any + 8;
LABEL_133:
        swift_arrayDestroy(v231, 1, v232);
        swift_slowDealloc(v223, -1, -1);
        swift_slowDealloc(v222, -1, -1);
        goto LABEL_107;
      }
      goto LABEL_106;
    }
    v198 = (_QWORD *)v0[49];
    if (!v198[2])
    {
      sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
      if (qword_10025F928 != -1)
        swift_once(&qword_10025F928, sub_1000DF67C);
      v233 = type metadata accessor for Logger(0);
      sub_100037A9C(v233, (uint64_t)v189);
      v234 = sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
      v220 = Logger.logObject.getter(v234);
      v235 = static os_log_type_t.error.getter(v220);
      if (os_log_type_enabled(v220, v235))
      {
        v222 = swift_slowAlloc(12, -1);
        v223 = (_QWORD *)swift_slowAlloc(32, -1);
        v614 = v223;
        *(_DWORD *)v222 = 136315138;
        v236 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 112);
        *((_OWORD *)v504 + 6) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 96);
        *((_OWORD *)v504 + 7) = v236;
        *((_OWORD *)v504 + 8) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 128);
        *(_DWORD *)((char *)v504 + 143) = *(_DWORD *)(isUniquelyReferenced_nonNull_native + 143);
        v237 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 48);
        *((_OWORD *)v504 + 2) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 32);
        *((_OWORD *)v504 + 3) = v237;
        v238 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 80);
        *((_OWORD *)v504 + 4) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 64);
        *((_OWORD *)v504 + 5) = v238;
        v239 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 16);
        *(_OWORD *)v504 = *(_OWORD *)isUniquelyReferenced_nonNull_native;
        *((_OWORD *)v504 + 1) = v239;
        sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
        v240 = String.init<A>(describing:)(v504, &type metadata for ServerFriend);
        v242 = v241;
        *(_QWORD *)(v222 + 4) = sub_10002BA84(v240, v241, (uint64_t *)&v614);
        swift_bridgeObjectRelease(v242);
        sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
        sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
        v243 = v220;
        v244 = v235;
LABEL_132:
        _os_log_impl((void *)&_mh_execute_header, v243, v244, v245, (uint8_t *)v222, 0xCu);
        v232 = (char *)&type metadata for Any + 8;
        v231 = v223;
        goto LABEL_133;
      }
LABEL_106:
      sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
      sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
LABEL_107:

      goto LABEL_108;
    }
    if (!v5[2])
    {
      sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
      goto LABEL_128;
    }
    v199 = v189;
    v200 = *(uint64_t **)(v197 + 40);
    v201 = v198[5];
    v590 = v198[4];
    v202 = v0[46];
    v203 = v0[47];
    sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRetain(v200);
    swift_bridgeObjectRetain(v201);
    swift_bridgeObjectRetain(v203);
    v204 = sub_10002FF38(v202, v203);
    if ((v205 & 1) == 0)
    {
      swift_bridgeObjectRelease(v203);
      swift_bridgeObjectRelease(v200);
      swift_bridgeObjectRelease(v201);
      v189 = v199;
LABEL_128:
      if (qword_10025F928 != -1)
        swift_once(&qword_10025F928, sub_1000DF67C);
      v246 = type metadata accessor for Logger(0);
      sub_100037A9C(v246, (uint64_t)v189);
      v247 = sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
      v220 = Logger.logObject.getter(v247);
      v248 = static os_log_type_t.error.getter(v220);
      if (os_log_type_enabled(v220, v248))
      {
        v222 = swift_slowAlloc(12, -1);
        v223 = (_QWORD *)swift_slowAlloc(32, -1);
        v614 = v223;
        *(_DWORD *)v222 = 136315138;
        v249 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 112);
        *((_OWORD *)v520 + 6) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 96);
        *((_OWORD *)v520 + 7) = v249;
        *((_OWORD *)v520 + 8) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 128);
        *(_DWORD *)((char *)v520 + 143) = *(_DWORD *)(isUniquelyReferenced_nonNull_native + 143);
        v250 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 48);
        *((_OWORD *)v520 + 2) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 32);
        *((_OWORD *)v520 + 3) = v250;
        v251 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 80);
        *((_OWORD *)v520 + 4) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 64);
        *((_OWORD *)v520 + 5) = v251;
        v252 = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 16);
        *(_OWORD *)v520 = *(_OWORD *)isUniquelyReferenced_nonNull_native;
        *((_OWORD *)v520 + 1) = v252;
        sub_100030788((_QWORD *)isUniquelyReferenced_nonNull_native);
        v253 = String.init<A>(describing:)(v520, &type metadata for ServerFriend);
        v255 = v254;
        *(_QWORD *)(v222 + 4) = sub_10002BA84(v253, v254, (uint64_t *)&v614);
        swift_bridgeObjectRelease(v255);
        sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
        sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
        v243 = v220;
        v244 = v248;
        goto LABEL_132;
      }
      goto LABEL_106;
    }
    v552 = v200;
    v206 = v0[251];
    v568 = v0[248];
    v207 = v0[242];
    v208 = v0[230];
    v209 = *(_QWORD *)(v5[7] + 8 * v204);
    swift_bridgeObjectRetain(v209);
    swift_bridgeObjectRelease(v203);
    v210 = sub_1000305E8((uint64_t)_swiftEmptyArrayStorage);
    Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)(v590, v201, 0, 0, _swiftEmptyArrayStorage, v210, _swiftEmptyArrayStorage, v211);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v515 + 56))(v206, 0, 1, v208);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v581 + 104))(v568, v511, v207);
    v212 = *(_QWORD *)(v209 + 16);
    if (v212)
    {
      v213 = sub_100037A5C(&qword_100265230);
      v214 = (_QWORD *)swift_allocObject(v213, 16 * v212 + 32, 7);
      v215 = j__malloc_size(v214);
      v216 = v215 - 32;
      if (v215 < 32)
        v216 = v215 - 17;
      v214[2] = v212;
      v214[3] = 2 * (v216 >> 4);
      v591 = sub_1000303EC((uint64_t)&v614, v214 + 4, v212, v209);
      v217 = (uint64_t)v614;
      swift_bridgeObjectRetain(v209);
      sub_100086D50(v217);
      if (v591 != v212)
        goto LABEL_240;
      swift_bridgeObjectRelease(v209);
    }
    else
    {
      swift_bridgeObjectRelease(v209);
      v214 = _swiftEmptyArrayStorage;
    }
    v256 = *(_QWORD *)(v613 + 2008);
    v257 = *(_QWORD *)(v613 + 1984);
    v569 = v257;
    v592 = *(_QWORD *)(v613 + 1936);
    v545 = *(_BYTE *)(v613 + 464) & 1;
    v536 = *(_BYTE *)(v613 + 465) & 1;
    v258 = v559[153];
    v259 = v559[152];
    v260 = swift_task_alloc(64);
    *(_QWORD *)(v260 + 16) = isUniquelyReferenced_nonNull_native;
    *(_QWORD *)(v260 + 24) = v214;
    *(_QWORD *)(v260 + 32) = v257;
    *(_BYTE *)(v260 + 40) = v259;
    *(_BYTE *)(v260 + 41) = v258;
    *(_BYTE *)(v260 + 42) = v545;
    *(_BYTE *)(v260 + 43) = v536;
    *(_QWORD *)(v260 + 48) = v256;
    v261 = sub_100157BF0((void (*)(_QWORD *, __n128))sub_100030994, v260, (uint64_t)v214);
    swift_release(v214);
    swift_bridgeObjectRelease(v552);
    sub_1000306F8((_QWORD *)isUniquelyReferenced_nonNull_native);
    swift_task_dealloc(v260);
    (*(void (**)(uint64_t, uint64_t))(v581 + 8))(v569, v592);
    sub_1000087A0(v256, &qword_1002650A0);
    sub_10015D81C((uint64_t)v261, &qword_100265580, (uint64_t (*)(_QWORD))&type metadata accessor for Friend);
    v189 = qword_10027ACA0;
LABEL_108:
    v188 += 152;
    --v186;
    v187 = v606;
    v0 = (_QWORD *)v613;
    if (v186)
      continue;
    break;
  }
  swift_bridgeObjectRelease(v606);
LABEL_137:
  v262 = v0 + 192;
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v263 = type metadata accessor for Logger(0);
  sub_100037A9C(v263, (uint64_t)qword_10027ACA0);
  v264 = *v474;
  v265 = swift_bridgeObjectRetain_n(*v474, 2);
  v266 = Logger.logObject.getter(v265);
  v267 = static os_log_type_t.default.getter(v266);
  if (os_log_type_enabled(v266, v267))
  {
    v268 = (uint8_t *)swift_slowAlloc(12, -1);
    v269 = swift_slowAlloc(32, -1);
    v270 = v269;
    v616[0] = v269;
    v271.n128_u64[0] = 136315138;
    *(_DWORD *)v268 = 136315138;
    v272 = *(_QWORD *)(v264 + 16);
    v273 = _swiftEmptyArrayStorage;
    if (v272)
    {
      v537 = v269;
      v546 = v267;
      v553 = v268;
      v570 = v266;
      v582 = v0 + 192;
      v274 = *(_QWORD *)(v613 + 1904);
      v607 = *(_QWORD *)(v613 + 1848);
      v614 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v264);
      sub_1000312EC(0, v272, 0);
      v560 = v264;
      v275 = v264 + ((*(unsigned __int8 *)(v274 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v274 + 80));
      v276 = v274;
      v593 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v274 + 16);
      v600 = *(_QWORD *)(v274 + 72);
      do
      {
        v277 = *(_QWORD *)(v613 + 1928);
        v278 = *(_QWORD *)(v613 + 1896);
        v279 = *(_QWORD *)(v613 + 1888);
        v280 = *(_QWORD *)(v613 + 1840);
        v281 = v593(v277, v275, v278);
        v282 = Friend.handle.getter(v281);
        v283 = Handle.identifier.getter(v282);
        v285 = v284;
        (*(void (**)(uint64_t, uint64_t))(v607 + 8))(v279, v280);
        (*(void (**)(uint64_t, uint64_t))(v276 + 8))(v277, v278);
        v273 = v614;
        if ((swift_isUniquelyReferenced_nonNull_native(v614) & 1) == 0)
        {
          sub_1000312EC(0, v273[2] + 1, 1);
          v273 = v614;
        }
        v287 = v273[2];
        v286 = v273[3];
        if (v287 >= v286 >> 1)
        {
          sub_1000312EC(v286 > 1, v287 + 1, 1);
          v273 = v614;
        }
        v273[2] = v287 + 1;
        v288 = &v273[2 * v287];
        v288[4] = v283;
        v288[5] = v285;
        v275 += v600;
        --v272;
      }
      while (v272);
      v264 = v560;
      swift_bridgeObjectRelease(v560);
      v266 = v570;
      v262 = v582;
      v268 = v553;
      v267 = v546;
      v270 = v537;
    }
    v289 = Array.description.getter(v271);
    v291 = v290;
    swift_bridgeObjectRelease(v273);
    *v467 = sub_10002BA84(v289, v291, v616);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v467, v469, v268 + 4, v268 + 12);
    swift_bridgeObjectRelease(v291);
    swift_bridgeObjectRelease_n(v264, 2);
    _os_log_impl((void *)&_mh_execute_header, v266, v267, "Server response with following: %s", v268, 0xCu);
    swift_arrayDestroy(v270, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v270, -1, -1);
    swift_slowDealloc(v268, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v264, 2);
  }

  swift_beginAccess(v474, v262, 0, 0);
  swift_bridgeObjectRetain(*v474);
  sub_10015D81C(v292, &qword_100265580, (uint64_t (*)(_QWORD))&type metadata accessor for Friend);
  v0 = (_QWORD *)v613;
LABEL_151:
  v466 = v0 + 205;
  v497 = (uint8_t **)(v0 + 210);
  v293 = v0[220];
  v0[214] = _swiftEmptyArrayStorage;
  v294 = *(_QWORD *)(v293 + 152);
  v472 = (uint64_t)(v0 + 218);
  if (!v294)
    goto LABEL_185;
  v483 = *(_QWORD *)(v294 + 16);
  if (!v483)
    goto LABEL_171;
  v525 = v0[243];
  v501 = v0[231];
  v505 = v0[238];
  v499 = v0[223];
  v481 = v294 + 32;
  v479 = enum case for HandleType.futureFollower(_:);
  v477 = enum case for ClientOrigin.messagesApp(_:);
  v475 = enum case for ClientOrigin.other(_:);
  v470 = *(_QWORD *)(v293 + 152);
  swift_bridgeObjectRetain(v294);
  v295 = 0;
  while (2)
  {
    v296 = (double *)(v481 + 96 * v295);
    v297 = *((_QWORD *)v296 + 1);
    v512 = *v296;
    v298 = *((_QWORD *)v296 + 2);
    v299 = *((_QWORD *)v296 + 3);
    v300 = *((_QWORD *)v296 + 5);
    v301 = *((_QWORD *)v296 + 7);
    v302 = v296[8];
    v303 = *((_BYTE *)v296 + 74);
    v305 = *((_QWORD *)v296 + 10);
    v304 = *((_QWORD *)v296 + 11);
    v306 = sub_100037A5C(&qword_100265230);
    v307 = swift_allocObject(v306, 48, 7);
    *(_OWORD *)(v307 + 16) = xmmword_1001F35F0;
    *(_QWORD *)(v307 + 32) = v298;
    *(_QWORD *)(v307 + 40) = v299;
    v521 = v297;
    if (v305)
    {
      v308 = *(_QWORD *)(v305 + 16);
      swift_bridgeObjectRetain(v304);
      if (v308)
      {
        swift_bridgeObjectRetain_n(v305, 2);
        swift_bridgeObjectRetain_n(v299, 3);
        swift_bridgeObjectRetain(v297);
        swift_bridgeObjectRetain(v300);
        swift_bridgeObjectRetain(v301);
        swift_bridgeObjectRelease(v307);
        v307 = v305;
        goto LABEL_161;
      }
      swift_bridgeObjectRetain_n(v299, 3);
      swift_bridgeObjectRetain(v297);
      swift_bridgeObjectRetain(v300);
      swift_bridgeObjectRetain(v301);
      v310 = v305;
    }
    else
    {
      swift_bridgeObjectRetain(v304);
      swift_bridgeObjectRetain_n(v299, 3);
      swift_bridgeObjectRetain(v297);
      swift_bridgeObjectRetain(v300);
      v310 = v301;
    }
    v309 = swift_bridgeObjectRetain(v310);
LABEL_161:
    v311 = (_QWORD *)v613;
    (*(void (**)(_QWORD, _QWORD, _QWORD, __n128))(v525 + 104))(*(_QWORD *)(v613 + 1976), v479, *(_QWORD *)(v613 + 1936), v309);
    v312 = *(_QWORD *)(v307 + 16);
    if (v312)
    {
      v486 = v299;
      v487 = v300;
      v489 = v301;
      v491 = v305;
      v493 = v304;
      v495 = v295;
      v614 = _swiftEmptyArrayStorage;
      sub_1000303C0(0, v312, 0);
      v311 = (_QWORD *)v613;
      v313 = v614;
      v314 = v477;
      if ((v303 & 1) == 0)
        v314 = v475;
      v508 = v314;
      v516 = v307;
      v315 = (_QWORD *)(v307 + 40);
      v316 = v302 / 1000.0;
      do
      {
        v608 = v313;
        v530 = v311[246];
        v538 = (uint8_t *)v311[242];
        v547 = (uint8_t *)v311[247];
        v601 = v312;
        v317 = v311[235];
        v318 = v311[234];
        v319 = v311[230];
        v320 = v311[229];
        v321 = v311[228];
        v554 = v318;
        v561 = v311[225];
        v571 = v311[222];
        v583 = v311[250];
        v322 = *(v315 - 1);
        v323 = *v315;
        swift_bridgeObjectRetain_n(*v315, 2);
        swift_bridgeObjectRetain(v521);
        v324 = swift_bridgeObjectRetain(v516);
        Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)(v322, v323, *(_QWORD *)&v512, v521, _swiftEmptyArrayStorage, _swiftEmptyDictionarySingleton, v516, v324);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v501 + 16))(v318, v317, v319);
        (*(void (**)(uint64_t, uint8_t *, uint8_t *))(v525 + 16))(v530, v547, v538);
        v325 = type metadata accessor for Date(0);
        v326 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v325 - 8) + 56);
        v327 = v326(v320, 1, 1, v325);
        Date.init(timeIntervalSince1970:)(v327, v316);
        v326(v321, 0, 1, v325);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v499 + 104))(v561, v508, v571);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v501 + 56))(v583, 1, 1, v319);
        LOBYTE(v464) = 0;
        v328 = v321;
        v313 = v608;
        Friend.init(handle:type:expiry:createdAt:origin:secureLocationsCapable:shallowOrLiveSecureLocationsCapable:fallbackToLegacyAllowed:fallbackToLegacy:ownerHandle:)(v554, v530, v320, v328, v561, 0, 0, 0, v464, v583);
        (*(void (**)(uint64_t, uint64_t))(v501 + 8))(v317, v319);
        swift_bridgeObjectRelease(v323);
        v614 = v608;
        v330 = v608[2];
        v329 = v608[3];
        if (v330 >= v329 >> 1)
        {
          sub_1000303C0(v329 > 1, v330 + 1, 1);
          v313 = v614;
        }
        v311 = (_QWORD *)v613;
        v331 = *(_QWORD *)(v613 + 1920);
        v332 = *(_QWORD *)(v613 + 1896);
        v313[2] = v330 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v505 + 32))((unint64_t)v313+ ((*(unsigned __int8 *)(v505 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v505 + 80))+ *(_QWORD *)(v505 + 72) * v330, v331, v332);
        v315 += 2;
        --v312;
      }
      while (v601 != 1);
      swift_bridgeObjectRelease(v521);
      swift_bridgeObjectRelease_n(v486, 2);
      swift_bridgeObjectRelease(v487);
      swift_bridgeObjectRelease(v489);
      swift_bridgeObjectRelease(v516);
      swift_bridgeObjectRelease(v491);
      swift_bridgeObjectRelease(v493);
      v295 = v495;
    }
    else
    {
      swift_bridgeObjectRelease(v521);
      swift_bridgeObjectRelease_n(v299, 2);
      swift_bridgeObjectRelease(v300);
      swift_bridgeObjectRelease(v301);
      swift_bridgeObjectRelease(v307);
      swift_bridgeObjectRelease(v305);
      swift_bridgeObjectRelease(v304);
      v313 = _swiftEmptyArrayStorage;
    }
    ++v295;
    (*(void (**)(_QWORD, _QWORD))(v525 + 8))(v311[247], v311[242]);
    sub_10015D81C((uint64_t)v313, &qword_100265580, (uint64_t (*)(_QWORD))&type metadata accessor for Friend);
    if (v295 != v483)
      continue;
    break;
  }
  swift_bridgeObjectRelease(v470);
  v0 = (_QWORD *)v613;
LABEL_171:
  v333 = v0 + 201;
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v334 = type metadata accessor for Logger(0);
  sub_100037A9C(v334, (uint64_t)qword_10027ACA0);
  v335 = *v485;
  v336 = swift_bridgeObjectRetain_n(*v485, 2);
  v337 = Logger.logObject.getter(v336);
  v338 = static os_log_type_t.default.getter(v337);
  if (os_log_type_enabled(v337, v338))
  {
    v584 = (uint64_t *)(v613 + 1632);
    v339 = (uint8_t *)swift_slowAlloc(12, -1);
    v340 = swift_slowAlloc(32, -1);
    v341 = v340;
    v616[0] = v340;
    v342.n128_u64[0] = 136315138;
    *(_DWORD *)v339 = 136315138;
    v343 = *(_QWORD *)(v335 + 16);
    v344 = _swiftEmptyArrayStorage;
    if (v343)
    {
      v531 = v340;
      v539 = v338;
      v548 = v339;
      v562 = v337;
      v572 = v0 + 201;
      v345 = *(_QWORD *)(v613 + 1904);
      v609 = *(_QWORD *)(v613 + 1848);
      v614 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v335);
      sub_1000312EC(0, v343, 0);
      v555 = v335;
      v346 = v335 + ((*(unsigned __int8 *)(v345 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v345 + 80));
      v347 = v345;
      v594 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v345 + 16);
      v602 = *(_QWORD *)(v345 + 72);
      do
      {
        v348 = *(_QWORD *)(v613 + 1928);
        v349 = *(_QWORD *)(v613 + 1896);
        v350 = *(_QWORD *)(v613 + 1888);
        v351 = *(_QWORD *)(v613 + 1840);
        v352 = v594(v348, v346, v349);
        v353 = Friend.handle.getter(v352);
        v354 = Handle.identifier.getter(v353);
        v356 = v355;
        (*(void (**)(uint64_t, uint64_t))(v609 + 8))(v350, v351);
        (*(void (**)(uint64_t, uint64_t))(v347 + 8))(v348, v349);
        v344 = v614;
        if ((swift_isUniquelyReferenced_nonNull_native(v614) & 1) == 0)
        {
          sub_1000312EC(0, v344[2] + 1, 1);
          v344 = v614;
        }
        v358 = v344[2];
        v357 = v344[3];
        if (v358 >= v357 >> 1)
        {
          sub_1000312EC(v357 > 1, v358 + 1, 1);
          v344 = v614;
        }
        v344[2] = v358 + 1;
        v359 = &v344[2 * v358];
        v359[4] = v354;
        v359[5] = v356;
        v346 += v602;
        --v343;
      }
      while (v343);
      v335 = v555;
      swift_bridgeObjectRelease(v555);
      v337 = v562;
      v333 = v572;
      v339 = v548;
      v338 = v539;
      v341 = v531;
    }
    v360 = Array.description.getter(v342);
    v362 = v361;
    swift_bridgeObjectRelease(v344);
    *v584 = sub_10002BA84(v360, v362, v616);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v584, v466, v339 + 4, v339 + 12);
    swift_bridgeObjectRelease(v362);
    swift_bridgeObjectRelease_n(v335, 2);
    _os_log_impl((void *)&_mh_execute_header, v337, v338, "Server response with futureFollowers: %s", v339, 0xCu);
    swift_arrayDestroy(v341, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v341, -1, -1);
    swift_slowDealloc(v339, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v335, 2);
  }

  swift_beginAccess(v485, v333, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(v613 + 1712));
  sub_10015D81C(v363, &qword_100265580, (uint64_t (*)(_QWORD))&type metadata accessor for Friend);
  v0 = (_QWORD *)v613;
  v293 = *(_QWORD *)(v613 + 1760);
LABEL_185:
  v471 = v0 + 219;
  *v497 = (uint8_t *)_swiftEmptyArrayStorage;
  v364 = *(_QWORD *)(v293 + 160);
  if (!v364)
    goto LABEL_218;
  v484 = *(_QWORD *)(v364 + 16);
  if (!v484)
    goto LABEL_204;
  v526 = v0[243];
  v502 = v0[231];
  v506 = v0[238];
  v500 = v0[223];
  v482 = v364 + 32;
  v480 = enum case for HandleType.futureFollowing(_:);
  v478 = enum case for ClientOrigin.messagesApp(_:);
  v476 = enum case for ClientOrigin.other(_:);
  v465 = *(_QWORD *)(v293 + 160);
  swift_bridgeObjectRetain(v364);
  v365 = 0;
  while (2)
  {
    v366 = (double *)(v482 + 96 * v365);
    v367 = *((_QWORD *)v366 + 1);
    v513 = *v366;
    v369 = *((_QWORD *)v366 + 3);
    v368 = *((_QWORD *)v366 + 4);
    v370 = *((_QWORD *)v366 + 5);
    v371 = *((_QWORD *)v366 + 7);
    v372 = v366[8];
    v373 = *((_BYTE *)v366 + 74);
    v375 = *((_QWORD *)v366 + 10);
    v374 = *((_QWORD *)v366 + 11);
    v376 = sub_100037A5C(&qword_100265230);
    v377 = swift_allocObject(v376, 48, 7);
    *(_OWORD *)(v377 + 16) = xmmword_1001F35F0;
    *(_QWORD *)(v377 + 32) = v368;
    *(_QWORD *)(v377 + 40) = v370;
    v522 = v367;
    if (v374)
    {
      v378 = *(_QWORD *)(v374 + 16);
      swift_bridgeObjectRetain(v375);
      swift_bridgeObjectRetain(v374);
      if (v378)
      {
        swift_bridgeObjectRetain(v374);
        swift_bridgeObjectRetain_n(v370, 3);
        swift_bridgeObjectRetain(v367);
        swift_bridgeObjectRetain(v369);
        swift_bridgeObjectRetain(v371);
        swift_bridgeObjectRelease(v377);
        v377 = v374;
        goto LABEL_194;
      }
    }
    else
    {
      swift_bridgeObjectRetain(v375);
    }
    swift_bridgeObjectRetain_n(v370, 3);
    swift_bridgeObjectRetain(v367);
    swift_bridgeObjectRetain(v369);
    v379 = swift_bridgeObjectRetain(v371);
LABEL_194:
    v380 = (_QWORD *)v613;
    (*(void (**)(_QWORD, _QWORD, _QWORD, __n128))(v526 + 104))(*(_QWORD *)(v613 + 1960), v480, *(_QWORD *)(v613 + 1936), v379);
    v381 = *(_QWORD *)(v377 + 16);
    if (v381)
    {
      v488 = v370;
      v490 = v371;
      v492 = v375;
      v494 = v374;
      v496 = v365;
      v614 = _swiftEmptyArrayStorage;
      sub_1000303C0(0, v381, 0);
      v380 = (_QWORD *)v613;
      v382 = v614;
      v383 = v478;
      if ((v373 & 1) == 0)
        v383 = v476;
      v509 = v383;
      v517 = v377;
      v384 = (_QWORD *)(v377 + 40);
      v385 = v372 / 1000.0;
      do
      {
        v610 = v382;
        v532 = v380[244];
        v540 = (uint8_t *)v380[242];
        v549 = (uint8_t *)v380[245];
        v603 = v381;
        v386 = v380[233];
        v387 = v380[232];
        v388 = v380[230];
        v389 = v380[227];
        v390 = v380[226];
        v556 = v387;
        v563 = v380[224];
        v573 = v380[222];
        v585 = v380[250];
        v391 = *(v384 - 1);
        v392 = *v384;
        swift_bridgeObjectRetain_n(*v384, 2);
        swift_bridgeObjectRetain(v522);
        v393 = swift_bridgeObjectRetain(v517);
        Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)(v391, v392, *(_QWORD *)&v513, v522, _swiftEmptyArrayStorage, _swiftEmptyDictionarySingleton, v517, v393);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v502 + 16))(v387, v386, v388);
        (*(void (**)(uint64_t, uint8_t *, uint8_t *))(v526 + 16))(v532, v549, v540);
        v394 = type metadata accessor for Date(0);
        v395 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v394 - 8) + 56);
        v396 = v395(v389, 1, 1, v394);
        Date.init(timeIntervalSince1970:)(v396, v385);
        v395(v390, 0, 1, v394);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v500 + 104))(v563, v509, v573);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v502 + 56))(v585, 1, 1, v388);
        LOBYTE(v464) = 0;
        Friend.init(handle:type:expiry:createdAt:origin:secureLocationsCapable:shallowOrLiveSecureLocationsCapable:fallbackToLegacyAllowed:fallbackToLegacy:ownerHandle:)(v556, v532, v389, v390, v563, 0, 0, 0, v464, v585);
        (*(void (**)(uint64_t, uint64_t))(v502 + 8))(v386, v388);
        v397 = v392;
        v382 = v610;
        swift_bridgeObjectRelease(v397);
        v614 = v610;
        v399 = v610[2];
        v398 = v610[3];
        if (v399 >= v398 >> 1)
        {
          sub_1000303C0(v398 > 1, v399 + 1, 1);
          v382 = v614;
        }
        v380 = (_QWORD *)v613;
        v400 = *(_QWORD *)(v613 + 1912);
        v401 = *(_QWORD *)(v613 + 1896);
        v382[2] = v399 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v506 + 32))((unint64_t)v382+ ((*(unsigned __int8 *)(v506 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v506 + 80))+ *(_QWORD *)(v506 + 72) * v399, v400, v401);
        v384 += 2;
        --v381;
      }
      while (v603 != 1);
      swift_bridgeObjectRelease(v522);
      swift_bridgeObjectRelease(v369);
      swift_bridgeObjectRelease_n(v488, 2);
      swift_bridgeObjectRelease(v490);
      swift_bridgeObjectRelease(v517);
      swift_bridgeObjectRelease(v492);
      swift_bridgeObjectRelease(v494);
      v365 = v496;
    }
    else
    {
      swift_bridgeObjectRelease(v522);
      swift_bridgeObjectRelease(v369);
      swift_bridgeObjectRelease_n(v370, 2);
      swift_bridgeObjectRelease(v371);
      swift_bridgeObjectRelease(v377);
      swift_bridgeObjectRelease(v375);
      swift_bridgeObjectRelease(v374);
      v382 = _swiftEmptyArrayStorage;
    }
    ++v365;
    (*(void (**)(_QWORD, _QWORD))(v526 + 8))(v380[245], v380[242]);
    sub_10015D81C((uint64_t)v382, &qword_100265580, (uint64_t (*)(_QWORD))&type metadata accessor for Friend);
    if (v365 != v484)
      continue;
    break;
  }
  swift_bridgeObjectRelease(v465);
  v0 = (_QWORD *)v613;
LABEL_204:
  v402 = v0 + 195;
  if (qword_10025F928 != -1)
    swift_once(&qword_10025F928, sub_1000DF67C);
  v403 = type metadata accessor for Logger(0);
  sub_100037A9C(v403, (uint64_t)qword_10027ACA0);
  v404 = *v497;
  v405 = swift_bridgeObjectRetain_n(*v497, 2);
  v406 = Logger.logObject.getter(v405);
  v407 = static os_log_type_t.default.getter(v406);
  if (os_log_type_enabled(v406, v407))
  {
    v574 = (uint64_t *)(v613 + 1696);
    v408 = (uint8_t *)swift_slowAlloc(12, -1);
    v586 = swift_slowAlloc(32, -1);
    v616[0] = v586;
    v409.n128_u64[0] = 136315138;
    *(_DWORD *)v408 = 136315138;
    v410 = *((_QWORD *)v404 + 2);
    v411 = _swiftEmptyArrayStorage;
    if (v410)
    {
      v533 = v407;
      v541 = v408;
      v557 = v406;
      v564 = v0 + 195;
      v412 = *(_QWORD *)(v613 + 1904);
      v611 = *(_QWORD *)(v613 + 1848);
      v614 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v404);
      sub_1000312EC(0, v410, 0);
      v550 = v404;
      v413 = &v404[(*(unsigned __int8 *)(v412 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v412 + 80)];
      v414 = v412;
      v595 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v412 + 16);
      v604 = *(_QWORD *)(v412 + 72);
      do
      {
        v415 = *(_QWORD *)(v613 + 1928);
        v416 = *(_QWORD *)(v613 + 1896);
        v417 = *(_QWORD *)(v613 + 1888);
        v418 = *(_QWORD *)(v613 + 1840);
        v419 = v595(v415, v413, v416);
        v420 = Friend.handle.getter(v419);
        v421 = Handle.identifier.getter(v420);
        v423 = v422;
        (*(void (**)(uint64_t, uint64_t))(v611 + 8))(v417, v418);
        (*(void (**)(uint64_t, uint64_t))(v414 + 8))(v415, v416);
        v411 = v614;
        if ((swift_isUniquelyReferenced_nonNull_native(v614) & 1) == 0)
        {
          sub_1000312EC(0, v411[2] + 1, 1);
          v411 = v614;
        }
        v425 = v411[2];
        v424 = v411[3];
        if (v425 >= v424 >> 1)
        {
          sub_1000312EC(v424 > 1, v425 + 1, 1);
          v411 = v614;
        }
        v411[2] = v425 + 1;
        v426 = &v411[2 * v425];
        v426[4] = v421;
        v426[5] = v423;
        v413 += v604;
        --v410;
      }
      while (v410);
      v404 = v550;
      swift_bridgeObjectRelease(v550);
      v406 = v557;
      v402 = v564;
      v408 = v541;
      v407 = v533;
    }
    v427 = Array.description.getter(v409);
    v429 = v428;
    swift_bridgeObjectRelease(v411);
    *v574 = sub_10002BA84(v427, v429, v616);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v574, v468, v408 + 4, v408 + 12);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease_n(v404, 2);
    _os_log_impl((void *)&_mh_execute_header, v406, v407, "Server response with futureFollowing: %s", v408, 0xCu);
    swift_arrayDestroy(v586, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v586, -1, -1);
    swift_slowDealloc(v408, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v404, 2);
  }

  swift_beginAccess(v497, v402, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(v613 + 1680));
  v473 = (_QWORD *)v430;
  sub_10015D81C(v430, &qword_100265580, (uint64_t (*)(_QWORD))&type metadata accessor for Friend);
  v293 = *(_QWORD *)(v613 + 1760);
LABEL_218:
  sub_10000EF6C(v293 + 168, v472, &qword_100265560);
  sub_10000EF6C(v472, (uint64_t)v471, &qword_100265560);
  v431 = *v471;
  if (*v471)
  {
    v432 = *(_QWORD *)(v613 + 1768);
    swift_retain(v432);
    v433 = sub_10016BAA4(v431);
    swift_release(v432);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(*(_QWORD *)(v613 + 1712));
    swift_bridgeObjectRelease(*(_QWORD *)(v613 + 1728));
    if (qword_10025F928 != -1)
      swift_once(&qword_10025F928, sub_1000DF67C);
    v434 = type metadata accessor for Logger(0);
    sub_100037A9C(v434, (uint64_t)qword_10027ACA0);
    v435 = swift_bridgeObjectRetain_n(v433, 2);
    v436 = Logger.logObject.getter(v435);
    v437 = static os_log_type_t.default.getter(v436);
    if (os_log_type_enabled(v436, v437))
    {
      v438 = (uint8_t *)swift_slowAlloc(12, -1);
      v439 = swift_slowAlloc(32, -1);
      v440 = v439;
      v616[0] = v439;
      v441.n128_u64[0] = 136315138;
      *(_DWORD *)v438 = 136315138;
      v442 = v433[2];
      v443 = _swiftEmptyArrayStorage;
      if (v442)
      {
        v551 = v439;
        v558 = v437;
        v565 = v438;
        v575 = v436;
        v444 = *(_QWORD *)(v613 + 1904);
        v612 = *(_QWORD *)(v613 + 1848);
        v614 = _swiftEmptyArrayStorage;
        sub_1000312EC(0, v442, 0);
        v587 = v433;
        v445 = (char *)v433
             + ((*(unsigned __int8 *)(v444 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v444 + 80));
        v446 = v444;
        v596 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v444 + 16);
        v605 = *(_QWORD *)(v444 + 72);
        do
        {
          v447 = *(_QWORD *)(v613 + 1928);
          v448 = *(_QWORD *)(v613 + 1896);
          v449 = *(_QWORD *)(v613 + 1888);
          v450 = *(_QWORD *)(v613 + 1840);
          v451 = v596(v447, v445, v448);
          v452 = Friend.handle.getter(v451);
          v453 = Handle.identifier.getter(v452);
          v455 = v454;
          (*(void (**)(uint64_t, uint64_t))(v612 + 8))(v449, v450);
          (*(void (**)(uint64_t, uint64_t))(v446 + 8))(v447, v448);
          v443 = v614;
          if ((swift_isUniquelyReferenced_nonNull_native(v614) & 1) == 0)
          {
            sub_1000312EC(0, v443[2] + 1, 1);
            v443 = v614;
          }
          v457 = v443[2];
          v456 = v443[3];
          if (v457 >= v456 >> 1)
          {
            sub_1000312EC(v456 > 1, v457 + 1, 1);
            v443 = v614;
          }
          v443[2] = v457 + 1;
          v458 = &v443[2 * v457];
          v458[4] = v453;
          v458[5] = v455;
          v445 += v605;
          --v442;
        }
        while (v442);
        v436 = v575;
        v433 = v587;
        v438 = v565;
        v437 = v558;
        v440 = v551;
      }
      v459 = Array.description.getter(v441);
      v461 = v460;
      swift_bridgeObjectRelease(v443);
      *v466 = sub_10002BA84(v459, v461, v616);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v466, v467, v438 + 4, v438 + 12);
      swift_bridgeObjectRelease(v461);
      swift_bridgeObjectRelease_n(v433, 2);
      _os_log_impl((void *)&_mh_execute_header, v436, v437, "Server response with pendingOffers: %s", v438, 0xCu);
      swift_arrayDestroy(v440, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v440, -1, -1);
      swift_slowDealloc(v438, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v433, 2);
    }

    sub_10015D81C((uint64_t)v433, &qword_100265580, (uint64_t (*)(_QWORD))&type metadata accessor for Friend);
  }
  else
  {
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(*v485);
    swift_bridgeObjectRelease(*v474);
  }
  v462 = *(_QWORD *)(v613 + 1736);
  *(_QWORD *)(v613 + 2032) = v462;
  v463 = (_QWORD *)swift_task_alloc(dword_10026556C);
  *(_QWORD *)(v613 + 2040) = v463;
  *v463 = v613;
  v463[1] = sub_100005F50;
  return sub_1000160F0(v462, *(_BYTE *)(v613 + 163));
}

unint64_t sub_10002FF38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10002FF9C(a1, a2, v5);
}

unint64_t sub_10002FF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_10003007C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100030228(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

void sub_100030228(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100165A0C(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100166738();
      goto LABEL_22;
    }
    sub_100005CA4(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

uint64_t sub_1000303C0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100032470(a1, a2, a3, (_QWORD *)*v3, &qword_100265580, (uint64_t (*)(_QWORD))&type metadata accessor for Friend);
  *v3 = result;
  return result;
}

uint64_t sub_1000303EC(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_1000305E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100037A5C(&qword_1002633E0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100160F64(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_1000306F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[14];
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *sub_100030788(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[14];
  v8 = a1[17];
  swift_bridgeObjectRetain(a1[11]);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_100030818(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[2];
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_10003007C(v17, v12, v13);
    result = swift_bridgeObjectRelease(v17[1]);
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100030994@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000309A8(a1, a2);
}

uint64_t sub_1000309A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000309E8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(unsigned __int8 *)(v2 + 40), *(unsigned __int8 *)(v2 + 41), *(unsigned __int8 *)(v2 + 42), *(unsigned __int8 *)(v2 + 43), a2, *(_QWORD *)(v2 + 48));
}

uint64_t sub_1000309E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t inited;
  void (*v39)(char *, _QWORD, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  char *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  double *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unsigned int *v61;
  char v62;
  char v63;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char v88[56];
  _BYTE v89[16];
  _BYTE v90[16];
  char *v91;
  Swift::String v92;

  v75 = a8;
  LODWORD(v10) = a7;
  LODWORD(v11) = a6;
  v74 = a5;
  v80 = a3;
  v81 = a4;
  v73 = a9;
  v14 = sub_100037A5C(&qword_1002650A0);
  __chkstk_darwin(v14);
  v72 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for ClientOrigin(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v71 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100037A5C((uint64_t *)&unk_100262930);
  v18 = __chkstk_darwin(v17);
  v91 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v82 = (char *)&v65 - v20;
  v79 = type metadata accessor for HandleType(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v87 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for GroupID(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Handle(0);
  v85 = *(_QWORD *)(v26 - 8);
  v86 = v26;
  v27 = __chkstk_darwin(v26);
  v83 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v84 = (char *)&v65 - v29;
  v30 = *a1;
  v31 = a1[1];
  v32 = *(_QWORD *)(a2 + 48);
  v33 = *(_QWORD *)(a2 + 56);
  v34 = *(_QWORD *)(a2 + 136);
  v35 = *(_QWORD *)(a2 + 24);
  v77 = v30;
  v76 = v32;
  if (v35)
  {
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    v36 = v35;
  }
  else
  {
    v37 = sub_100037A5C(&qword_100265570);
    inited = swift_initStackObject(v37, v88);
    v68 = (int)v10;
    v10 = (_QWORD *)inited;
    *(_OWORD *)(inited + 16) = xmmword_1001F35F0;
    v39 = *(void (**)(char *, _QWORD, uint64_t))(v23 + 104);
    v66 = v22;
    v39(v25, enum case for GroupID.oneToOne(_:), v22);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    v41 = GroupID.rawValue.getter(v40);
    v67 = v11;
    v11 = v42;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v66);
    v10[4] = v41;
    v10[5] = v11;
    LOBYTE(v11) = v67;
    v10[6] = *(_QWORD *)(a2 + 16);
    v43 = (uint64_t)v10;
    LOBYTE(v10) = v68;
    v36 = sub_1000DEE54(v43);
    v35 = 0;
  }
  swift_bridgeObjectRetain(v35);
  v44 = v80;
  v45 = swift_bridgeObjectRetain(v80);
  v46 = v84;
  Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)(v77, v31, v76, v33, v34, v36, v44, v45);
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v83, v46, v86);
  v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 16))(v87, v81, v79);
  v48 = *(double *)(a2 + 16);
  if (v48 == 0.0)
  {
    v49 = type metadata accessor for Date(0);
    v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v82, 1, 1, v49);
  }
  else
  {
    v51 = v82;
    Date.init(timeIntervalSince1970:)(v47, v48 / 1000.0);
    v52 = type metadata accessor for Date(0);
    v50 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 0, 1, v52);
  }
  v53 = (uint64_t)v72;
  v54 = v71;
  v55 = (double *)a2;
  if (*(_BYTE *)(a2 + 8) == 1
    && (sub_10000EF6C(a2 + 120, (uint64_t)v89, &qword_100265578),
        v55 = (double *)v90,
        v50 = sub_10000EF6C((uint64_t)v89, (uint64_t)v90, &qword_100265578),
        (v90[8] & 1) != 0))
  {
    v56 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v91, 1, 1, v56);
  }
  else
  {
    v57 = v91;
    Date.init(timeIntervalSince1970:)(v50, *v55 / 1000.0);
    v58 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
  }
  if ((*(_BYTE *)(a2 + 146) & 1) != 0)
  {
    v61 = (unsigned int *)&enum case for ClientOrigin.messagesApp(_:);
  }
  else
  {
    v60 = *(_QWORD *)(a2 + 104);
    v59 = *(void **)(a2 + 112);
    swift_bridgeObjectRetain(v59);
    v92._countAndFlagsBits = v60;
    v92._object = v59;
    if (((sub_100030F94(v92) - 3) & 0xFE) != 0)
      v61 = (unsigned int *)&enum case for ClientOrigin.findMyApp(_:);
    else
      v61 = (unsigned int *)&enum case for ClientOrigin.other(_:);
  }
  v62 = v75;
  v63 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v54, *v61, v70);
  sub_10000E37C(a10, v53, &qword_1002650A0);
  Friend.init(handle:type:expiry:createdAt:origin:secureLocationsCapable:shallowOrLiveSecureLocationsCapable:fallbackToLegacyAllowed:fallbackToLegacy:ownerHandle:)(v83, v87, v82, v91, v54, v63 & 1, v11 & 1, v10 & 1, v62 & 1, v53);
  return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v84, v86);
}

unint64_t sub_100030F94(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10024EED8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

Swift::Int sub_100030FDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100037A5C(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

uint64_t sub_1000312EC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100031308(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100031308(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100037A5C(&qword_100265230);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100031470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for Friend(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v16 - v9;
  v17 = a2;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(_QWORD *)(v5 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    do
    {
      v14(v8, v12, v4);
      sub_100039A9C((uint64_t)v10, v8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      v12 += v13;
      --v11;
    }
    while (v11);
    return v17;
  }
  return a2;
}

void sub_100031574(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *);
  uint64_t v48;
  uint64_t v49;

  v46 = a2;
  v47 = a1;
  v5 = sub_100037A5C(&qword_100260950);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Friend(0);
  v48 = *(_QWORD *)(v49 - 8);
  v8 = __chkstk_darwin(v49);
  v41 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v40 = (char *)&v37 - v10;
  v11 = type metadata accessor for FriendInfoOption(0);
  v45 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v37 - v15;
  v17 = *(_QWORD *)(a3 + 56);
  v43 = a3 + 56;
  v18 = 1 << *(_BYTE *)(a3 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v44 = (unint64_t)(v18 + 63) >> 6;
  v21 = a3;
  swift_bridgeObjectRetain(a3);
  v22 = 0;
  v42 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    if (v20)
    {
      v23 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v24 = v23 | (v22 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v22++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v22 >= v44)
      goto LABEL_32;
    v26 = *(_QWORD *)(v43 + 8 * v22);
    if (!v26)
      break;
LABEL_18:
    v20 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v22 << 6);
LABEL_19:
    sub_100025C70(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v45 + 72) * v24, (uint64_t)v16, type metadata accessor for FriendInfoOption);
    sub_1000321F4((uint64_t)v16, (uint64_t)v14, type metadata accessor for FriendInfoOption);
    v47(v14);
    if (v3)
    {
      sub_100024990((uint64_t)v14, type metadata accessor for FriendInfoOption);
      swift_bridgeObjectRelease(v42);
LABEL_32:
      swift_release(v21);
      return;
    }
    sub_100024990((uint64_t)v14, type metadata accessor for FriendInfoOption);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v7, 1, v49) == 1)
    {
      sub_1000087A0((uint64_t)v7, &qword_100260950);
    }
    else
    {
      v39 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
      v28 = v49;
      v39(v40, v7, v49);
      v29 = v28;
      v30 = v39;
      v39(v41, v40, v29);
      if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        v42 = (char *)sub_100031CE4(0, *((_QWORD *)v42 + 2) + 1, 1, (unint64_t)v42);
      v32 = *((_QWORD *)v42 + 2);
      v31 = *((_QWORD *)v42 + 3);
      v33 = v32 + 1;
      if (v32 >= v31 >> 1)
      {
        v37 = *((_QWORD *)v42 + 2);
        v38 = v32 + 1;
        v36 = (char *)sub_100031CE4(v31 > 1, v32 + 1, 1, (unint64_t)v42);
        v32 = v37;
        v33 = v38;
        v42 = v36;
      }
      v34 = v41;
      v35 = v42;
      *((_QWORD *)v42 + 2) = v33;
      v30(&v35[((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(_QWORD *)(v48 + 72) * v32], v34, v49);
    }
  }
  v27 = v22 + 1;
  if (v22 + 1 >= v44)
    goto LABEL_32;
  v26 = *(_QWORD *)(v43 + 8 * v27);
  if (v26)
    goto LABEL_17;
  v27 = v22 + 2;
  if (v22 + 2 >= v44)
    goto LABEL_32;
  v26 = *(_QWORD *)(v43 + 8 * v27);
  if (v26)
    goto LABEL_17;
  v27 = v22 + 3;
  if (v22 + 3 >= v44)
    goto LABEL_32;
  v26 = *(_QWORD *)(v43 + 8 * v27);
  if (v26)
    goto LABEL_17;
  v27 = v22 + 4;
  if (v22 + 4 >= v44)
    goto LABEL_32;
  v26 = *(_QWORD *)(v43 + 8 * v27);
  if (v26)
  {
LABEL_17:
    v22 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v44)
      goto LABEL_32;
    v26 = *(_QWORD *)(v43 + 8 * v22);
    ++v27;
    if (v26)
      goto LABEL_18;
  }
LABEL_34:
  __break(1u);
}

_QWORD *sub_100031980(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  void (*v40)(char *);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v40 = a1;
  v41 = a2;
  v5 = sub_100037A5C(&qword_100260950);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Friend(0);
  v36 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v39 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v35 = (char *)&v34 - v11;
  v12 = type metadata accessor for FriendRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100037A5C(&qword_100260940);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_retain(a3);
  v20 = dispatch thunk of _AnySequenceBox._makeIterator()(v19);
  v21 = swift_release(a3);
  v42 = v20;
  dispatch thunk of _AnyIteratorBoxBase.next()(v21);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v38 = v12;
  if (v37(v18, 1, v12) == 1)
  {
    v44 = _swiftEmptyArrayStorage;
  }
  else
  {
    v43 = v8;
    v44 = _swiftEmptyArrayStorage;
    v22 = type metadata accessor for FriendRecord;
    v23 = v36;
    v34 = v15;
    v24 = v8;
    while (1)
    {
      sub_1000321F4((uint64_t)v18, (uint64_t)v15, v22);
      v40(v15);
      if (v3)
        break;
      v26 = v22;
      sub_100024990((uint64_t)v15, v22);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v24) == 1)
      {
        v25 = sub_1000087A0((uint64_t)v7, &qword_100260950);
      }
      else
      {
        v27 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
        v28 = v35;
        v27(v35, v7, v24);
        v27(v39, v28, v24);
        if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
          v44 = (_QWORD *)sub_100031CE4(0, v44[2] + 1, 1, (unint64_t)v44);
        v30 = v44[2];
        v29 = v44[3];
        if (v30 >= v29 >> 1)
          v44 = (_QWORD *)sub_100031CE4(v29 > 1, v30 + 1, 1, (unint64_t)v44);
        v15 = v34;
        v31 = v44;
        v44[2] = v30 + 1;
        v32 = (unint64_t)v31
            + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))
            + *(_QWORD *)(v36 + 72) * v30;
        v23 = v36;
        v25 = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(v32, v39, v43);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()(v25);
      v22 = v26;
      if (v37(v18, 1, v38) == 1)
        goto LABEL_14;
    }
    sub_100024990((uint64_t)v15, type metadata accessor for FriendRecord);
    swift_bridgeObjectRelease(v44);
  }
LABEL_14:
  swift_release(v42);
  return v44;
}

uint64_t sub_100031CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100101004);
}

uint64_t sub_100031CE4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100032264(a1, a2, a3, a4, &qword_100265580, (uint64_t (*)(_QWORD))&type metadata accessor for Friend);
}

uint64_t sub_100031CF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  _QWORD *v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  v3 = type metadata accessor for FriendRecord(0);
  v52 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v51 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v48 = (uint64_t)&v44 - v6;
  v7 = sub_100037A5C(&qword_1002670C8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v49 = (char *)&v44 - v11;
  v12 = type metadata accessor for Row(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v44 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v44 - v20;
  result = Connection.prepare(_:)(a1);
  if (!v1)
  {
    v23 = result;
    v50 = v16;
    v46 = v21;
    v47 = v19;
    swift_retain(result);
    v24 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
    v54 = _swiftEmptyArrayStorage;
    sub_100032238(0, v24 & ~(v24 >> 63), 0);
    v25 = swift_retain(v23);
    v53 = dispatch thunk of _AnySequenceBox._makeIterator()(v25);
    v45 = v23;
    result = swift_release(v23);
    if (v24 < 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      return result;
    }
    if (v24)
    {
      v26 = v51;
      do
      {
        dispatch thunk of _AnyIteratorBoxBase.next()(result);
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12);
        if ((_DWORD)result == 1)
          goto LABEL_22;
        v27 = (uint64_t)v50;
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v10, v12);
        sub_10003632C(v27, v26);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
        v28 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_100032238(0, v28[2] + 1, 1);
          v28 = v54;
        }
        v30 = v28[2];
        v29 = v28[3];
        if (v30 >= v29 >> 1)
        {
          sub_100032238(v29 > 1, v30 + 1, 1);
          v28 = v54;
        }
        v28[2] = v30 + 1;
        v31 = (uint64_t)v28
            + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))
            + *(_QWORD *)(v52 + 72) * v30;
        v26 = v51;
        result = sub_1000321F4(v51, v31, type metadata accessor for FriendRecord);
      }
      while (--v24);
    }
    v32 = (uint64_t)v49;
    dispatch thunk of _AnyIteratorBoxBase.next()(result);
    v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (v33(v32, 1, v12) != 1)
    {
      v36 = *(void (**)(void))(v13 + 32);
      v37 = v48;
      do
      {
        v38 = v46;
        v36();
        v39 = (uint64_t)v47;
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v47, v38, v12);
        sub_10003632C(v39, v37);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
        v40 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_100032238(0, v40[2] + 1, 1);
          v40 = v54;
        }
        v42 = v40[2];
        v41 = v40[3];
        if (v42 >= v41 >> 1)
        {
          sub_100032238(v41 > 1, v42 + 1, 1);
          v40 = v54;
        }
        v40[2] = v42 + 1;
        v37 = v48;
        v43 = sub_1000321F4(v48, (uint64_t)v40+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v42, type metadata accessor for FriendRecord);
        v32 = (uint64_t)v49;
        dispatch thunk of _AnyIteratorBoxBase.next()(v43);
      }
      while (v33(v32, 1, v12) != 1);
    }
    swift_release(v53);
    sub_1000087A0(v32, &qword_1002670C8);
    swift_release_n(v45, 2);
    v34 = v54;
    v35 = sub_100037A5C(&qword_100267A78);
    result = swift_allocObject(v35, 24, 7);
    *(_QWORD *)(result + 16) = v34;
  }
  return result;
}

uint64_t sub_1000321F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100032238(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100032470(a1, a2, a3, (_QWORD *)*v3, &qword_1002655B8, type metadata accessor for FriendRecord);
  *v3 = result;
  return result;
}

uint64_t sub_100032264(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100037A5C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100032654(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_100032470(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100037A5C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100032654(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_10003276C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

_QWORD *sub_1000327A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *result;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  int v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t i;
  uint64_t v43;
  _BYTE v44[432];
  _BYTE v45[440];
  _QWORD *v46;

  v2 = sub_100037A5C(&qword_1002670C8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)&v37 - v6;
  v7 = type metadata accessor for Row(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v37 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v37 - v15;
  v17 = v43;
  result = (_QWORD *)Connection.prepare(_:)(a1);
  if (!v17)
  {
    v41 = v11;
    v38 = v16;
    v39 = v14;
    v19 = result;
    swift_retain(result);
    v20 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
    v46 = _swiftEmptyArrayStorage;
    sub_100032C18(0, v20 & ~(v20 >> 63), 0);
    v21 = v19;
    v22 = v46;
    v23 = swift_retain(v21);
    v43 = dispatch thunk of _AnySequenceBox._makeIterator()(v23);
    v37 = v21;
    result = (_QWORD *)swift_release(v21);
    if (v20 < 0)
    {
      __break(1u);
LABEL_21:
      __break(1u);
      return result;
    }
    for (i = v8; v20; v8 = i)
    {
      dispatch thunk of _AnyIteratorBoxBase.next()(result);
      result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
      if ((_DWORD)result == 1)
        goto LABEL_21;
      v24 = (uint64_t)v41;
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v41, v5, v7);
      sub_100032DB8(v24, v45);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
      v22 = v46;
      if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
      {
        sub_100032C18(0, v22[2] + 1, 1);
        v22 = v46;
      }
      v26 = v22[2];
      v25 = v22[3];
      if (v26 >= v25 >> 1)
      {
        sub_100032C18(v25 > 1, v26 + 1, 1);
        v22 = v46;
      }
      v22[2] = v26 + 1;
      result = memcpy(&v22[54 * v26 + 4], v45, 0x1B0uLL);
      --v20;
    }
    v27 = (uint64_t)v40;
    dispatch thunk of _AnyIteratorBoxBase.next()(result);
    v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (v28(v27, 1, v7) != 1)
    {
      v30 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
      do
      {
        v31 = v38;
        v30(v38, v27, v7);
        v32 = (uint64_t)v39;
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v39, v31, v7);
        sub_100032DB8(v32, v44);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v31, v7);
        v22 = v46;
        if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
        {
          sub_100032C18(0, v22[2] + 1, 1);
          v22 = v46;
        }
        v34 = v22[2];
        v33 = v22[3];
        if (v34 >= v33 >> 1)
        {
          sub_100032C18(v33 > 1, v34 + 1, 1);
          v22 = v46;
        }
        v22[2] = v34 + 1;
        v35 = memcpy(&v22[54 * v34 + 4], v44, 0x1B0uLL);
        v27 = (uint64_t)v40;
        dispatch thunk of _AnyIteratorBoxBase.next()(v35);
        v36 = v28(v27, 1, v7);
        v8 = i;
      }
      while (v36 != 1);
    }
    swift_release(v43);
    sub_1000087A0(v27, &qword_1002670C8);
    swift_release_n(v37, 2);
    v29 = sub_100037A5C(&qword_1002679E0);
    result = (_QWORD *)swift_allocObject(v29, 24, 7);
    result[2] = v22;
  }
  return result;
}

uint64_t sub_100032C18(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100032C34(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100032C34(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100037A5C(&qword_100267A00);
    v11 = (char *)swift_allocObject(v10, 432 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 432);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[432 * v8])
      memmove(v13, v14, 432 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[432 * v8] || v13 >= &v14[432 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void *sub_100032DB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *__dst;
  _BYTE v44[160];
  _QWORD v45[18];
  _OWORD v46[2];
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  _OWORD __src[27];
  uint64_t v54;
  unint64_t v55;
  _QWORD v56[20];
  _OWORD v57[10];
  uint64_t v58;

  v3 = v2;
  sub_10004922C(v57);
  if (qword_10025FB08 != -1)
    swift_once(&qword_10025FB08, sub_10014D834);
  v6 = sub_100037A5C(&qword_100260D60);
  v7 = sub_100037A9C(v6, (uint64_t)qword_10027B240);
  Row.subscript.getter(__src, v7, &type metadata for Data, &protocol witness table for Data);
  v8 = *((_QWORD *)&__src[0] + 1);
  if (*((_QWORD *)&__src[0] + 1) >> 60 == 15)
  {
    v9 = v57;
  }
  else
  {
    v10 = *(_QWORD *)&__src[0];
    v11 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v12 = PropertyListDecoder.init()();
    v13 = sub_100037A5C(&qword_1002603B0);
    v14 = sub_10002B370(&qword_1002679F8, &qword_1002603B0, (void (*)(void))sub_10002B9FC, (uint64_t)&protocol conformance descriptor for <A> A?);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v13, v10, v8, v13, v14);
    if (v2)
    {
      v15 = type metadata accessor for Row(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
      swift_release(v12);
      return (void *)sub_100037AF8(v10, v8);
    }
    sub_100037AF8(v10, v8);
    swift_release(v12);
    sub_10000EF6C((uint64_t)__src, (uint64_t)v44, &qword_1002603B0);
    v9 = v44;
  }
  sub_10000EF6C((uint64_t)v9, (uint64_t)v56, &qword_1002603B0);
  if (qword_10025FB10 != -1)
    swift_once(&qword_10025FB10, sub_10014D8C8);
  v17 = sub_100037A9C(v6, (uint64_t)qword_10027B258);
  Row.subscript.getter(&v54, v17, &type metadata for Data, &protocol witness table for Data);
  v18 = v55;
  if (v55 >> 60 == 15)
  {
    sub_10005D34C((uint64_t)__src);
  }
  else
  {
    v19 = v54;
    v20 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    v21 = PropertyListDecoder.init()();
    v22 = sub_100037A5C(&qword_100260858);
    v23 = sub_10002B370(&qword_1002679F0, &qword_100260858, (void (*)(void))sub_10002BA40, (uint64_t)&protocol conformance descriptor for <A> A?);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v22, v19, v18, v22, v23);
    if (v2)
    {
      swift_errorRelease(v2);
      sub_100037AF8(v19, v18);
      swift_release(v21);
      sub_10005D34C((uint64_t)v45);
      sub_10000EF6C((uint64_t)v45, (uint64_t)__src, &qword_100260858);
      v3 = 0;
    }
    else
    {
      sub_100037AF8(v19, v18);
      swift_release(v21);
      sub_10000EF6C((uint64_t)v46, (uint64_t)v45, &qword_100260858);
      sub_10000EF6C((uint64_t)v45, (uint64_t)__src, &qword_100260858);
    }
  }
  sub_10000EF6C((uint64_t)__src, (uint64_t)v44, &qword_100260858);
  if (qword_10025FB18 != -1)
    swift_once(&qword_10025FB18, sub_10014D958);
  v24 = sub_100037A9C(v6, (uint64_t)qword_10027B270);
  Row.subscript.getter(__src, v24, &type metadata for Data, &protocol witness table for Data);
  v25 = *((_QWORD *)&__src[0] + 1);
  if (*((_QWORD *)&__src[0] + 1) >> 60 == 15)
  {
    __dst = a2;
    v58 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
  }
  else
  {
    v29 = *(_QWORD *)&__src[0];
    v30 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    v31 = PropertyListDecoder.init()();
    v32 = sub_100037A5C(&qword_100260550);
    v33 = sub_10002B370(&qword_1002679E8, &qword_100260550, (void (*)(void))sub_10002B910, (uint64_t)&protocol conformance descriptor for <A> A?);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v32, v29, v25, v32, v33);
    if (v3)
    {
      v34 = type metadata accessor for Row(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(a1, v34);
      sub_10000EFB0(v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
      swift_release(v31);
      return (void *)sub_100037AF8(v29, v25);
    }
    __dst = a2;
    sub_100037AF8(v29, v25);
    swift_release(v31);
    v26 = *((_QWORD *)&__src[0] + 1);
    v58 = *(_QWORD *)&__src[0];
    v28 = *((_QWORD *)&__src[1] + 1);
    v27 = *(_QWORD *)&__src[1];
  }
  v35 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v36 = PropertyListDecoder.init()();
  if (qword_10025FB00 != -1)
    swift_once(&qword_10025FB00, sub_10014D7B0);
  v37 = sub_100037A5C(&qword_100260D68);
  v38 = sub_100037A9C(v37, (uint64_t)qword_10027B228);
  Row.subscript.getter(v45, v38, &type metadata for Data, &protocol witness table for Data);
  v39 = v45[0];
  v40 = v45[1];
  v41 = sub_100033428();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&type metadata for ServerMyInfo, v39, v40, &type metadata for ServerMyInfo, v41);
  v42 = type metadata accessor for Row(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(a1, v42);
  if (v3)
  {
    sub_10002BD98(v58, v26, v27, v28);
    sub_10000EFB0(v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
    sub_100037AB4(v39, v40);
    return (void *)swift_release(v36);
  }
  else
  {
    swift_release(v36);
    sub_100037AB4(v39, v40);
    __src[0] = v46[0];
    __src[1] = v46[1];
    *(_QWORD *)&__src[2] = v47;
    BYTE8(__src[2]) = v48;
    __src[3] = v49;
    *(_QWORD *)&__src[4] = v50;
    BYTE8(__src[4]) = v51;
    __src[5] = v52;
    sub_10000EF6C((uint64_t)v56, (uint64_t)&__src[6], &qword_1002603B0);
    sub_10000EF6C((uint64_t)v44, (uint64_t)&__src[16], &qword_100260858);
    *(_QWORD *)&__src[25] = v58;
    *((_QWORD *)&__src[25] + 1) = v26;
    *(_QWORD *)&__src[26] = v27;
    *((_QWORD *)&__src[26] + 1) = v28;
    return memcpy(__dst, __src, 0x1B0uLL);
  }
}

unint64_t sub_100033428()
{
  unint64_t result;

  result = qword_100265A20;
  if (!qword_100265A20)
  {
    result = swift_getWitnessTable(&unk_1001F8FD4, &type metadata for ServerMyInfo);
    atomic_store(result, (unint64_t *)&qword_100265A20);
  }
  return result;
}

_QWORD *sub_10003346C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v6 = sub_100037A5C(a2);
  v7 = *(_QWORD *)(a3(0) - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = (_QWORD *)swift_allocObject(v6, v10 + v8 * v3, v9 | 7);
  result = (_QWORD *)j__malloc_size(v11);
  if (v8)
  {
    if ((_QWORD *)((char *)result - v10) != (_QWORD *)0x8000000000000000 || v8 != -1)
    {
      v11[2] = v3;
      v11[3] = 2 * (((uint64_t)result - v10) / v8);
      v14 = sub_100033588(&v16, (uint64_t)v11 + v10, v3, a1, a3);
      v15 = v16;
      swift_bridgeObjectRetain(a1);
      sub_100086D50(v15);
      if (v14 == v3)
        return v11;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100033588(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = a5(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v11);
  v16 = (char *)&v33 - v15;
  v40 = a4;
  v19 = *(_QWORD *)(a4 + 56);
  v18 = a4 + 56;
  v17 = v19;
  v38 = v18;
  v20 = -1 << *(_BYTE *)(v18 - 24);
  if (-v20 < 64)
    v21 = ~(-1 << -(char)v20);
  else
    v21 = -1;
  v22 = v21 & v17;
  if (!a2)
  {
    v23 = 0;
    a3 = 0;
LABEL_38:
    v32 = v38;
    *a1 = v40;
    a1[1] = v32;
    a1[2] = ~v20;
    a1[3] = v23;
    a1[4] = v22;
    return a3;
  }
  if (!a3)
  {
    v23 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v35 = -1 << *(_BYTE *)(v18 - 24);
  v36 = a1;
  v23 = 0;
  v24 = 0;
  v37 = (unint64_t)(63 - v20) >> 6;
  v34 = v37 - 1;
  v39 = a3;
  if (!v22)
    goto LABEL_9;
LABEL_8:
  v25 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  v26 = v25 | (v23 << 6);
  while (1)
  {
    ++v24;
    v30 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v13, *(_QWORD *)(v40 + 48) + v30 * v26, v9);
    v31 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v31(v16, v13, v9);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v31)(a2, v16, v9);
    a3 = v39;
    if (v24 == v39)
      goto LABEL_37;
    a2 += v30;
    if (v22)
      goto LABEL_8;
LABEL_9:
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v27 >= v37)
      goto LABEL_32;
    v28 = *(_QWORD *)(v38 + 8 * v27);
    if (!v28)
      break;
LABEL_18:
    v22 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v27 << 6);
    v23 = v27;
  }
  v23 += 2;
  if (v27 + 1 >= v37)
  {
    v22 = 0;
    v23 = v27;
    goto LABEL_36;
  }
  v28 = *(_QWORD *)(v38 + 8 * v23);
  if (v28)
    goto LABEL_14;
  v29 = v27 + 2;
  if (v27 + 2 >= v37)
    goto LABEL_32;
  v28 = *(_QWORD *)(v38 + 8 * v29);
  if (v28)
    goto LABEL_17;
  v23 = v27 + 3;
  if (v27 + 3 >= v37)
  {
    v22 = 0;
    v23 = v27 + 2;
    goto LABEL_36;
  }
  v28 = *(_QWORD *)(v38 + 8 * v23);
  if (v28)
  {
LABEL_14:
    v27 = v23;
    goto LABEL_18;
  }
  v29 = v27 + 4;
  if (v27 + 4 >= v37)
  {
LABEL_32:
    v22 = 0;
LABEL_36:
    a3 = v24;
LABEL_37:
    v20 = v35;
    a1 = v36;
    goto LABEL_38;
  }
  v28 = *(_QWORD *)(v38 + 8 * v29);
  if (v28)
  {
LABEL_17:
    v27 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v37)
    {
      v22 = 0;
      v23 = v34;
      goto LABEL_36;
    }
    v28 = *(_QWORD *)(v38 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_100033850(uint64_t a1)
{
  return sub_10003346C(a1, &qword_100265580, (uint64_t (*)(_QWORD))&type metadata accessor for Friend);
}

uint64_t sub_100033864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _DWORD *v10;
  __n128 v11;
  int64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  char v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  unint64_t v74;
  int64_t v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, unint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  _QWORD *v102;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _BOOL8 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int64_t v127;
  unint64_t v128;
  int64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  void (*v136)(uint64_t, unint64_t, uint64_t);
  void (*v137)(uint64_t, uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  char v147;
  void (*v148)(uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t (*v168)(uint64_t);
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  NSObject *log;
  os_log_t loga;
  uint64_t v191;
  _DWORD *v192;
  uint64_t v193;
  os_log_type_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  _QWORD *v206;
  unsigned int i;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  int64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  char v232;
  int64_t v233;
  int64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int64_t v242;
  int64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  _QWORD *v247;

  *(_QWORD *)(v0 + 16) = _swiftEmptyDictionarySingleton;
  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 48);
  v197 = (uint64_t *)(v0 + 16);
  swift_bridgeObjectRetain(v2);
  v4 = sub_10016B818(v3, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, &qword_1002608F8, (uint64_t)&protocol conformance descriptor for Friend, (void (*)(char *, char *))sub_100039A9C);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v1);
  v6 = sub_10016B818(v5, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, &qword_1002608F8, (uint64_t)&protocol conformance descriptor for Friend, (void (*)(char *, char *))sub_100039A9C);
  swift_bridgeObjectRelease(v1);
  if (qword_10025F928 != -1)
    goto LABEL_118;
LABEL_2:
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027ACA0);
  swift_bridgeObjectRetain_n(v6, 2);
  v8 = swift_bridgeObjectRetain_n(v4, 2);
  v9 = Logger.logObject.getter(v8);
  v194 = static os_log_type_t.default.getter(v9);
  v240 = v4;
  v219 = v6;
  if (os_log_type_enabled(v9, v194))
  {
    log = v9;
    v10 = (_DWORD *)swift_slowAlloc(22, -1);
    v187 = swift_slowAlloc(64, -1);
    v246 = v187;
    v11.n128_u64[0] = 136315394;
    v192 = v10;
    *v10 = 136315394;
    v12 = *(_QWORD *)(v6 + 16);
    v13 = _swiftEmptyArrayStorage;
    if (v12)
    {
      v209 = *(_QWORD *)(v0 + 368);
      v214 = *(_QWORD *)(v0 + 384);
      v202 = *(_QWORD *)(v0 + 272);
      v199 = *(_QWORD *)(v0 + 248);
      v247 = _swiftEmptyArrayStorage;
      sub_100034F30(0, v12, 0);
      v15 = sub_10003513C(v6);
      v17 = v16 & 1;
      v221 = v6 + 56;
      do
      {
        if (v15 < 0 || v15 >= 1 << *(_BYTE *)(v6 + 32))
          goto LABEL_109;
        if (((*(_QWORD *)(v221 + (((unint64_t)v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          goto LABEL_110;
        if (*(_DWORD *)(v6 + 36) != (_DWORD)v14)
          goto LABEL_111;
        v231 = v17;
        v236 = v14;
        v242 = v12;
        v18 = *(uint64_t **)(v0 + 384);
        v20 = *(_QWORD *)(v0 + 344);
        v19 = *(_QWORD *)(v0 + 352);
        v21 = *(_QWORD *)(v0 + 256);
        v22 = *(_QWORD *)(v0 + 264);
        v226 = *(_QWORD *)(v0 + 240);
        (*(void (**)(uint64_t, int64_t, uint64_t))(v202 + 16))(v19, *(_QWORD *)(v6 + 48) + *(_QWORD *)(v202 + 72) * v15, v22);
        v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v202 + 32))(v20, v19, v22);
        v24 = Friend.handle.getter(v23);
        v25 = Handle.identifier.getter(v24);
        v27 = v26;
        v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v199 + 8))(v21, v226);
        *v18 = v25;
        *(_QWORD *)(v214 + 8) = v27;
        Friend.type.getter(v28);
        (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v20, v22);
        v13 = v247;
        if ((swift_isUniquelyReferenced_nonNull_native(v247) & 1) == 0)
        {
          sub_100034F30(0, v13[2] + 1, 1);
          v13 = v247;
        }
        v4 = v240;
        v30 = v13[2];
        v29 = v13[3];
        v6 = v219;
        if (v30 >= v29 >> 1)
        {
          sub_100034F30(v29 > 1, v30 + 1, 1);
          v13 = v247;
        }
        v31 = *(_QWORD *)(v0 + 384);
        v13[2] = v30 + 1;
        sub_10000EF6C(v31, (uint64_t)v13+ ((*(unsigned __int8 *)(v209 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80))+ *(_QWORD *)(v209 + 72) * v30, &qword_100265590);
        v32 = sub_100034B6C(v15, v236, v231 & 1, v219);
        v15 = v32;
        v17 = v33 & 1;
        v12 = v242 - 1;
      }
      while (v242 != 1);
      sub_10016CEA0(v32, v14, v17);
    }
    v34 = Array.description.getter(v11);
    v36 = v35;
    swift_bridgeObjectRelease(v13);
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v34, v36, &v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v192 + 1, v192 + 3);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease_n(v6, 2);
    *((_WORD *)v192 + 6) = 2080;
    v38 = *(_QWORD *)(v4 + 16);
    v39 = _swiftEmptyArrayStorage;
    if (v38)
    {
      v210 = *(_QWORD *)(v0 + 368);
      v215 = *(_QWORD *)(v0 + 376);
      v203 = *(_QWORD *)(v0 + 272);
      v200 = *(_QWORD *)(v0 + 248);
      v247 = _swiftEmptyArrayStorage;
      sub_100034F30(0, v38, 0);
      v40 = sub_10003513C(v4);
      v42 = v4;
      v4 = v40;
      v44 = v43 & 1;
      v222 = v42 + 56;
      do
      {
        if (v4 < 0 || v4 >= 1 << *(_BYTE *)(v240 + 32))
          goto LABEL_113;
        if (((*(_QWORD *)(v222 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
          goto LABEL_114;
        if (*(_DWORD *)(v240 + 36) != (_DWORD)v41)
          goto LABEL_115;
        v232 = v44;
        v237 = v41;
        v243 = v38;
        v45 = *(uint64_t **)(v0 + 376);
        v47 = *(_QWORD *)(v0 + 344);
        v46 = *(_QWORD *)(v0 + 352);
        v49 = *(_QWORD *)(v0 + 256);
        v48 = *(_QWORD *)(v0 + 264);
        v227 = *(_QWORD *)(v0 + 240);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v203 + 16))(v46, *(_QWORD *)(v240 + 48) + *(_QWORD *)(v203 + 72) * v4, v48);
        v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v203 + 32))(v47, v46, v48);
        v51 = Friend.handle.getter(v50);
        v52 = Handle.identifier.getter(v51);
        v54 = v53;
        v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v200 + 8))(v49, v227);
        *v45 = v52;
        *(_QWORD *)(v215 + 8) = v54;
        Friend.type.getter(v55);
        (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v47, v48);
        v39 = v247;
        if ((swift_isUniquelyReferenced_nonNull_native(v247) & 1) == 0)
        {
          sub_100034F30(0, v39[2] + 1, 1);
          v39 = v247;
        }
        v6 = v219;
        v57 = v39[2];
        v56 = v39[3];
        if (v57 >= v56 >> 1)
        {
          sub_100034F30(v56 > 1, v57 + 1, 1);
          v39 = v247;
        }
        v58 = *(_QWORD *)(v0 + 376);
        v39[2] = v57 + 1;
        sub_10000EF6C(v58, (uint64_t)v39+ ((*(unsigned __int8 *)(v210 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v210 + 80))+ *(_QWORD *)(v210 + 72) * v57, &qword_100265590);
        v59 = sub_100034B6C(v4, v237, v232 & 1, v240);
        v4 = v59;
        v44 = v60 & 1;
        v38 = v243 - 1;
      }
      while (v243 != 1);
      sub_10016CEA0(v59, v41, v44);
      v4 = v240;
    }
    v61 = Array.description.getter(v37);
    v63 = v62;
    swift_bridgeObjectRelease(v39);
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v61, v63, &v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, (char *)v192 + 14, (char *)v192 + 22);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease_n(v4, 2);
    v9 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v194, "cachedFriends: %s\ncurrentFriends: %s", (uint8_t *)v192, 0x16u);
    swift_arrayDestroy(v187, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v187, -1, -1);
    swift_slowDealloc(v192, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease_n(v4, 2);
  }

  v64 = v6;
  v6 = *(_QWORD *)(v0 + 272);
  v238 = *(_QWORD *)(v0 + 200);
  v247 = (_QWORD *)v4;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v4);
  sub_100022EE8(v64);
  v65 = 0;
  v206 = v247 + 7;
  v216 = v247;
  v66 = -1 << *((_BYTE *)v247 + 32);
  if (-v66 < 64)
    v67 = ~(-1 << -(char)v66);
  else
    v67 = -1;
  v68 = v67 & v247[7];
  v211 = (unint64_t)(63 - v66) >> 6;
  v244 = v4 + 56;
  v204 = enum case for FriendshipAction.add(_:);
  v223 = enum case for FriendshipAction.remove(_:);
  while (1)
  {
    if (v68)
    {
      v228 = (v68 - 1) & v68;
      v233 = v65;
      v74 = __clz(__rbit64(v68)) | (v65 << 6);
      goto LABEL_51;
    }
    v75 = v65 + 1;
    if (__OFADD__(v65, 1))
      goto LABEL_108;
    if (v75 >= v211)
      break;
    v76 = v206[v75];
    v77 = v65 + 1;
    if (!v76)
    {
      v77 = v65 + 2;
      if (v65 + 2 >= v211)
        break;
      v76 = v206[v77];
      if (!v76)
      {
        v77 = v65 + 3;
        if (v65 + 3 >= v211)
          break;
        v76 = v206[v77];
        if (!v76)
        {
          v78 = v65 + 4;
          if (v65 + 4 >= v211)
            break;
          v76 = v206[v78];
          if (!v76)
          {
            while (1)
            {
              v77 = v78 + 1;
              if (__OFADD__(v78, 1))
                break;
              if (v77 >= v211)
                goto LABEL_69;
              v76 = v206[v77];
              ++v78;
              if (v76)
                goto LABEL_50;
            }
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            swift_once(&qword_10025F928, sub_1000DF67C);
            goto LABEL_2;
          }
          v77 = v65 + 4;
        }
      }
    }
LABEL_50:
    v228 = (v76 - 1) & v76;
    v233 = v77;
    v74 = __clz(__rbit64(v76)) + (v77 << 6);
LABEL_51:
    v80 = *(_QWORD *)(v0 + 328);
    v79 = *(_QWORD *)(v0 + 336);
    v81 = *(_QWORD *)(v0 + 320);
    v82 = *(_QWORD *)(v0 + 264);
    v83 = *(_QWORD *)(v6 + 72);
    v84 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    v84(v79, v216[6] + v83 * v74, v82);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v80, v79, v82);
    v84(v81, v80, v82);
    v85 = v223;
    if (*(_QWORD *)(v4 + 16))
    {
      v86 = *(_QWORD *)(v0 + 264);
      v87 = *(_QWORD *)(v4 + 40);
      v88 = sub_100004EA8(&qword_1002608F8, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v89 = dispatch thunk of Hashable._rawHashValue(seed:)(v87, v86, v88);
      v90 = -1 << *(_BYTE *)(v4 + 32);
      v91 = v89 & ~v90;
      v85 = v223;
      if (((*(_QWORD *)(v244 + ((v91 >> 3) & 0xFFFFFFFFFFFFF8)) >> v91) & 1) != 0)
      {
        v92 = ~v90;
        while (1)
        {
          v93 = *(_QWORD *)(v0 + 352);
          v94 = *(_QWORD *)(v0 + 328);
          v95 = *(_QWORD *)(v0 + 264);
          v84(v93, *(_QWORD *)(v4 + 48) + v91 * v83, v95);
          v96 = sub_100004EA8(&qword_100263380, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
          LOBYTE(v94) = dispatch thunk of static Equatable.== infix(_:_:)(v93, v94, v95, v96);
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v93, v95);
          if ((v94 & 1) != 0)
            break;
          v91 = (v91 + 1) & v92;
          if (((*(_QWORD *)(v244 + ((v91 >> 3) & 0xFFFFFFFFFFFFF8)) >> v91) & 1) == 0)
          {
            v85 = v223;
            goto LABEL_58;
          }
        }
        v85 = v204;
      }
    }
LABEL_58:
    v97 = *(_QWORD *)(v0 + 320);
    v99 = *(_QWORD *)(v0 + 224);
    v98 = *(_QWORD *)(v0 + 232);
    v100 = *(_QWORD *)(v0 + 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v238 + 104))(v98, v85, v100);
    v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v238 + 32);
    v101(v99, v98, v100);
    v102 = *(_QWORD **)(v0 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v102);
    v247 = v102;
    *(_QWORD *)(v0 + 16) = 0x8000000000000000;
    v105 = sub_1000F40AC(v97);
    v106 = v102[2];
    v107 = (v104 & 1) == 0;
    v108 = v106 + v107;
    if (__OFADD__(v106, v107))
    {
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
      goto LABEL_116;
    }
    v4 = v104;
    if (v102[3] >= v108)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v104 & 1) != 0)
          goto LABEL_33;
      }
      else
      {
        sub_1000F7374();
        v102 = v247;
        if ((v4 & 1) != 0)
          goto LABEL_33;
      }
    }
    else
    {
      v109 = *(_QWORD *)(v0 + 320);
      sub_100162D64(v108, isUniquelyReferenced_nonNull_native);
      v102 = v247;
      v110 = sub_1000F40AC(v109);
      if ((v4 & 1) != (v111 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 264));
      v105 = v110;
      if ((v4 & 1) != 0)
      {
LABEL_33:
        (*(void (**)(unint64_t, _QWORD, _QWORD))(v238 + 40))(v102[7] + *(_QWORD *)(v238 + 72) * v105, *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 192));
        goto LABEL_34;
      }
    }
    v112 = *(_QWORD *)(v0 + 320);
    v113 = *(_QWORD *)(v0 + 264);
    v114 = *(_QWORD *)(v0 + 224);
    v115 = *(_QWORD *)(v0 + 192);
    v102[(v105 >> 6) + 8] |= 1 << v105;
    v84(v102[6] + v105 * v83, v112, v113);
    v101(v102[7] + *(_QWORD *)(v238 + 72) * v105, v114, v115);
    v116 = v102[2];
    v117 = __OFADD__(v116, 1);
    v118 = v116 + 1;
    if (v117)
      goto LABEL_107;
    v102[2] = v118;
LABEL_34:
    v70 = *(_QWORD *)(v0 + 320);
    v69 = *(_QWORD *)(v0 + 328);
    v71 = *(_QWORD *)(v0 + 264);
    v72 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v102;
    swift_bridgeObjectRelease(v72);
    v73 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v73(v70, v71);
    v73(v69, v71);
    v4 = v240;
    v65 = v233;
    v68 = v228;
  }
LABEL_69:
  swift_release(v216);
  v119 = 0;
  v120 = 0;
  v229 = *(_QWORD *)(v0 + 272);
  v121 = -1;
  v122 = -1 << *(_BYTE *)(v4 + 32);
  if (-v122 < 64)
    v121 = ~(-1 << -(char)v122);
  v123 = v121 & *(_QWORD *)(v4 + 56);
  v217 = (unint64_t)(63 - v122) >> 6;
  for (i = enum case for FriendshipAction.modify(_:); v123; v120 = v234)
  {
    while (1)
    {
      v125 = __clz(__rbit64(v123));
      v123 &= v123 - 1;
      v234 = v120;
      v126 = v125 | (v120 << 6);
LABEL_89:
      v132 = *(_QWORD *)(v0 + 304);
      v131 = *(_QWORD *)(v0 + 312);
      v133 = *(_QWORD *)(v0 + 264);
      v134 = *(char **)(v0 + 184);
      v135 = *(_QWORD *)(v4 + 48) + *(_QWORD *)(v6 + 72) * v126;
      v136 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
      v136(v131, v135, v133);
      v137 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
      v137(v132, v131, v133);
      v138 = swift_task_alloc(32);
      *(_QWORD *)(v138 + 16) = v132;
      sub_100034C50((uint64_t (*)(char *))sub_100034F04, v219, v134);
      swift_task_dealloc(v138);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v229 + 48))(v134, 1, v133) != 1)
        break;
      v124 = *(_QWORD *)(v0 + 184);
      (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 264));
      sub_1000087A0(v124, &qword_100260950);
      v4 = v240;
      v120 = v234;
      if (!v123)
        goto LABEL_75;
    }
    v224 = v119;
    v139 = *(_QWORD *)(v0 + 296);
    v137(v139, *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 264));
    if ((Friend.checkFriendUpdateNeeded(with:)(v139) & 1) != 0)
    {
      v140 = *(_QWORD *)(v0 + 352);
      v141 = *(_QWORD *)(v0 + 304);
      v212 = *(_QWORD *)(v0 + 296);
      v142 = *(_QWORD *)(v0 + 264);
      v144 = *(_QWORD *)(v0 + 208);
      v143 = *(_QWORD *)(v0 + 216);
      v145 = *(_QWORD *)(v0 + 192);
      v136(v140, v141, v142);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v238 + 104))(v143, i, v145);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v238 + 32))(v144, v143, v145);
      v146 = *(_QWORD **)(v0 + 16);
      v147 = swift_isUniquelyReferenced_nonNull_native(v146);
      v247 = v146;
      sub_1001643B0(v144, v140, v147);
      *(_QWORD *)(v0 + 16) = v247;
      swift_bridgeObjectRelease(0x8000000000000000);
      v148 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v148(v140, v142);
      v148(v212, v142);
      v148(v141, v142);
    }
    else
    {
      v149 = *(_QWORD *)(v0 + 304);
      v150 = *(_QWORD *)(v0 + 264);
      v151 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v151(*(_QWORD *)(v0 + 296), v150);
      v151(v149, v150);
    }
    v4 = v240;
    v119 = v224;
  }
LABEL_75:
  v127 = v120 + 1;
  if (__OFADD__(v120, 1))
    goto LABEL_112;
  if (v127 < v217)
  {
    v128 = *(_QWORD *)(v244 + 8 * v127);
    v129 = v120 + 1;
    if (v128)
      goto LABEL_88;
    v129 = v120 + 2;
    if (v120 + 2 < v217)
    {
      v128 = *(_QWORD *)(v244 + 8 * v129);
      if (v128)
        goto LABEL_88;
      v129 = v120 + 3;
      if (v120 + 3 < v217)
      {
        v128 = *(_QWORD *)(v244 + 8 * v129);
        if (v128)
          goto LABEL_88;
        v130 = v120 + 4;
        if (v120 + 4 < v217)
        {
          v128 = *(_QWORD *)(v244 + 8 * v130);
          if (!v128)
          {
            while (1)
            {
              v129 = v130 + 1;
              if (__OFADD__(v130, 1))
                goto LABEL_117;
              if (v129 >= v217)
                goto LABEL_95;
              v128 = *(_QWORD *)(v244 + 8 * v129);
              ++v130;
              if (v128)
                goto LABEL_88;
            }
          }
          v129 = v120 + 4;
LABEL_88:
          v123 = (v128 - 1) & v128;
          v234 = v129;
          v126 = __clz(__rbit64(v128)) + (v129 << 6);
          goto LABEL_89;
        }
      }
    }
  }
LABEL_95:
  swift_release(v4);
  swift_bridgeObjectRelease(v219);
  v152 = *v197;
  if (*(_QWORD *)(*v197 + 16))
  {
    if ((*(_BYTE *)(v0 + 440) & 1) == 0)
    {
      v153 = *(_QWORD *)(v0 + 56);
      swift_retain(v153);
      swift_bridgeObjectRetain(v152);
      v155 = sub_10016C760(v154, v153, v197);
      swift_release(v153);
      swift_bridgeObjectRelease(v152);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
      v152 = v155;
    }
    v156 = *(_QWORD *)(v0 + 400);
    swift_bridgeObjectRetain(v152);
    v158 = sub_1001678AC(v157, (unsigned int *)&enum case for HandleType.follower(_:), (unsigned int *)&enum case for FriendshipAction.add(_:));
    swift_bridgeObjectRelease(v152);
    v159 = sub_100157D64((uint64_t)v158);
    swift_release(v158);
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRetain(v152);
    v161 = sub_10016CC00(v160, v159);
    *(_QWORD *)(v0 + 408) = v119;
    swift_bridgeObjectRelease_n(v159, 2);
    swift_bridgeObjectRelease(v152);
    *(_QWORD *)(v0 + 16) = v161;
    swift_bridgeObjectRelease(v152);
    v162 = *(_QWORD *)(v156 + 16);
    swift_bridgeObjectRelease(v156);
    if (v162)
    {
      v163 = *(_QWORD *)(v0 + 16);
      *(_QWORD *)(v0 + 424) = v163;
      v164 = dword_1002655A4;
      swift_bridgeObjectRetain(v163);
      v165 = (_QWORD *)swift_task_alloc(v164);
      *(_QWORD *)(v0 + 432) = v165;
      *v165 = v0;
      v165[1] = sub_10015EA6C;
      v166 = *(_QWORD *)(v0 + 56);
      v165[4] = v163;
      v165[5] = v166;
      v167 = (uint64_t *)swift_task_alloc(async function pointer to daemon.getter[1]);
      v165[6] = v167;
      v168 = sub_100160288;
      *v167 = (uint64_t)v165;
    }
    else
    {
      v183 = swift_task_alloc(dword_1002655AC);
      *(_QWORD *)(v0 + 416) = v183;
      *(_QWORD *)v183 = v0;
      *(_QWORD *)(v183 + 8) = sub_10015DF5C;
      *(_OWORD *)(v183 + 32) = *(_OWORD *)(v0 + 48);
      v167 = (uint64_t *)swift_task_alloc(async function pointer to daemon.getter[1]);
      *(_QWORD *)(v183 + 48) = v167;
      v168 = sub_10015FC60;
      *v167 = v183;
    }
    v167[1] = (uint64_t)v168;
    return daemon.getter();
  }
  else
  {
    v170 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 400));
    v171 = Logger.logObject.getter(v170);
    v172 = static os_log_type_t.default.getter(v171);
    if (os_log_type_enabled(v171, v172))
    {
      v173 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v173 = 0;
      _os_log_impl((void *)&_mh_execute_header, v171, v172, "No friends to update.", v173, 2u);
      swift_slowDealloc(v173, -1, -1);
    }

    v245 = sub_10003C798((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
    v174 = *(_QWORD *)(v0 + 376);
    v176 = *(_QWORD *)(v0 + 344);
    v175 = *(_QWORD *)(v0 + 352);
    v177 = *(_QWORD *)(v0 + 328);
    v178 = *(_QWORD *)(v0 + 336);
    v180 = *(_QWORD *)(v0 + 312);
    v179 = *(_QWORD *)(v0 + 320);
    v182 = *(_QWORD *)(v0 + 296);
    v181 = *(_QWORD *)(v0 + 304);
    v184 = *(_QWORD *)(v0 + 288);
    v185 = *(_QWORD *)(v0 + 280);
    v186 = *(_QWORD *)(v0 + 256);
    v188 = *(_QWORD *)(v0 + 232);
    loga = *(os_log_t *)(v0 + 224);
    v191 = *(_QWORD *)(v0 + 216);
    v193 = *(_QWORD *)(v0 + 208);
    v195 = *(_QWORD *)(v0 + 184);
    v196 = *(_QWORD *)(v0 + 176);
    v198 = *(_QWORD *)(v0 + 168);
    v201 = *(_QWORD *)(v0 + 160);
    v205 = *(_QWORD *)(v0 + 152);
    v208 = *(_QWORD *)(v0 + 144);
    v213 = *(_QWORD *)(v0 + 136);
    v218 = *(_QWORD *)(v0 + 128);
    v220 = *(_QWORD *)(v0 + 120);
    v225 = *(_QWORD *)(v0 + 96);
    v230 = *(_QWORD *)(v0 + 88);
    v235 = *(_QWORD *)(v0 + 80);
    v239 = *(_QWORD *)(v0 + 72);
    v241 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 384));
    swift_task_dealloc(v174);
    swift_task_dealloc(v175);
    swift_task_dealloc(v176);
    swift_task_dealloc(v178);
    swift_task_dealloc(v177);
    swift_task_dealloc(v179);
    swift_task_dealloc(v180);
    swift_task_dealloc(v181);
    swift_task_dealloc(v182);
    swift_task_dealloc(v184);
    swift_task_dealloc(v185);
    swift_task_dealloc(v186);
    swift_task_dealloc(v188);
    swift_task_dealloc(loga);
    swift_task_dealloc(v191);
    swift_task_dealloc(v193);
    swift_task_dealloc(v195);
    swift_task_dealloc(v196);
    swift_task_dealloc(v198);
    swift_task_dealloc(v201);
    swift_task_dealloc(v205);
    swift_task_dealloc(v208);
    swift_task_dealloc(v213);
    swift_task_dealloc(v218);
    swift_task_dealloc(v220);
    swift_task_dealloc(v225);
    swift_task_dealloc(v230);
    swift_task_dealloc(v235);
    swift_task_dealloc(v239);
    swift_task_dealloc(v241);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v245);
  }
}

int64_t sub_100034B6C(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100034C50@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t (*v30)(char *);
  uint64_t v31;

  v30 = a1;
  v27 = a3;
  v5 = type metadata accessor for Friend(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v27 - v10;
  v12 = *(_QWORD *)(a2 + 56);
  v28 = a2 + 56;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v29 = (unint64_t)(v13 + 63) >> 6;
  v31 = a2;
  result = swift_bridgeObjectRetain(a2);
  v17 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(_QWORD *)(v31 + 48) + *(_QWORD *)(v6 + 72) * i, v5);
    v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v23(v9, v11, v5);
    v24 = v30(v9);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      return swift_release(v31);
    }
    if ((v24 & 1) != 0)
    {
      swift_release(v31);
      v25 = v27;
      v23(v27, v9, v5);
      v26 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v25, v26, 1, v5);
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if (v15)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v17++, 1))
      break;
    if (v17 >= v29)
      goto LABEL_28;
    v21 = *(_QWORD *)(v28 + 8 * v17);
    if (!v21)
    {
      v22 = v17 + 1;
      if (v17 + 1 >= v29)
        goto LABEL_28;
      v21 = *(_QWORD *)(v28 + 8 * v22);
      if (v21)
        goto LABEL_16;
      v22 = v17 + 2;
      if (v17 + 2 >= v29)
        goto LABEL_28;
      v21 = *(_QWORD *)(v28 + 8 * v22);
      if (v21)
        goto LABEL_16;
      v22 = v17 + 3;
      if (v17 + 3 >= v29)
        goto LABEL_28;
      v21 = *(_QWORD *)(v28 + 8 * v22);
      if (v21)
      {
LABEL_16:
        v17 = v22;
        goto LABEL_17;
      }
      v22 = v17 + 4;
      if (v17 + 4 < v29)
      {
        v21 = *(_QWORD *)(v28 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v17 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_31;
            if (v17 >= v29)
              goto LABEL_28;
            v21 = *(_QWORD *)(v28 + 8 * v17);
            ++v22;
            if (v21)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      v25 = v27;
      swift_release(v31);
      v26 = 1;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v25, v26, 1, v5);
    }
LABEL_17:
    v15 = (v21 - 1) & v21;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100034F04(uint64_t a1)
{
  uint64_t v1;

  return static Friend.== infix(_:_:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_100034F30(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100034F5C(a1, a2, a3, (_QWORD *)*v3, &qword_100267A38, &qword_100265590);
  *v3 = result;
  return result;
}

uint64_t sub_100034F5C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100037A5C(a5);
  v14 = *(_QWORD *)(sub_100037A5C(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_100037A5C(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003513C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1000351DC(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_100035338((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = swift_release(v2);
    if (v1)
      swift_willThrow(v9);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v7, -1);
    bzero(v10, v7);
    v8 = sub_100035338((unint64_t *)v10, v6, v2);
    swift_release(v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v8;
}

uint64_t sub_100035338(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a2;
  v24 = a1;
  v4 = type metadata accessor for Device(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = 0;
  v9 = 0;
  v10 = *(_QWORD *)(a3 + 56);
  v26 = a3 + 56;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v9 << 6);
      goto LABEL_5;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v14)
      goto LABEL_24;
    v20 = *(_QWORD *)(v26 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_24;
      v20 = *(_QWORD *)(v26 + 8 * v9);
      if (!v20)
      {
        v9 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_24;
        v20 = *(_QWORD *)(v26 + 8 * v9);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_5:
    v17 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v5 + 72) * v16, v4);
    v18 = Device.isActive.getter(v17);
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if ((v18 & 1) != 0)
    {
      *(unint64_t *)((char *)v24 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return sub_100035718(v24, v23, v25, a3);
      }
    }
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_24;
  v20 = *(_QWORD *)(v26 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v14)
      goto LABEL_24;
    v20 = *(_QWORD *)(v26 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10003554C(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v10, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain(a2);
    v12 = a3((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a1, a2);
    swift_release(a1);
    v13 = swift_bridgeObjectRelease(a2);
    if (v3)
      swift_willThrow(v13);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v14 = (void *)swift_slowAlloc(v10, -1);
    bzero(v14, v10);
    swift_bridgeObjectRetain(a2);
    v12 = a3((char *)v14, v9, a1, a2);
    swift_release(a1);
    swift_bridgeObjectRelease(a2);
    swift_slowDealloc(v14, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v12;
}

uint64_t sub_100035718(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  v8 = type metadata accessor for Device(0);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  v40 = v9;
  sub_100037A5C(&qword_1002655D0);
  result = static _SetStorage.allocate(capacity:)(a3);
  v12 = result;
  v38 = a1;
  v39 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = result + 56;
  v17 = v40;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v15 << 6);
    }
    else
    {
      v20 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_40;
      if (v20 >= v39)
      {
LABEL_37:
        swift_release(a4);
        return v12;
      }
      v21 = v38[v20];
      ++v15;
      if (!v21)
      {
        v15 = v20 + 1;
        if (v20 + 1 >= v39)
          goto LABEL_37;
        v21 = v38[v15];
        if (!v21)
        {
          v15 = v20 + 2;
          if (v20 + 2 >= v39)
            goto LABEL_37;
          v21 = v38[v15];
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v39)
              goto LABEL_37;
            v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                v15 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v15 >= v39)
                  goto LABEL_37;
                v21 = v38[v15];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v15 = v22;
          }
        }
      }
LABEL_24:
      v14 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }
    v23 = a4;
    v24 = *(_QWORD *)(a4 + 48);
    v25 = *(_QWORD *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    v26 = *(_QWORD *)(v12 + 40);
    v27 = sub_100004EA8(&qword_100263890, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      v17 = v40;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      v17 = v40;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v30 == v33;
        if (v30 == v33)
          v30 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v35 == -1);
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v12 + 48) + v31 * v25, v11, v8);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v23;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100035A1C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FriendInfoOption.init(from:)(a1, a2);
}

uint64_t FriendInfoOption.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  int *v60;
  char v61;
  uint64_t v62;

  v49 = a2;
  v3 = sub_100037A5C(&qword_1002650A0);
  __chkstk_darwin(v3);
  v50 = (uint64_t *)((char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100037A5C((uint64_t *)&unk_100262930);
  v6 = __chkstk_darwin(v5);
  v51 = (uint64_t *)((char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v9 = (char *)&v48 - v8;
  v55 = type metadata accessor for ClientOrigin(0);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v11 = (uint64_t *)((char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for HandleType(0);
  v56 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = sub_100037A5C(&qword_100263750);
  v15 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = (int *)type metadata accessor for FriendInfoOption(0);
  __chkstk_darwin(v60);
  v59 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v20 = a1[4];
  v57 = a1;
  sub_100036228(a1, v19);
  v21 = sub_1000362E8();
  v52 = v17;
  v22 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FriendInfoOption.CodingKeys, &type metadata for FriendInfoOption.CodingKeys, v21, v19, v20);
  if (v22)
    return sub_10002BB90(v57);
  v23 = v9;
  v58 = v15;
  LOBYTE(v62) = 0;
  v24 = sub_100004EA8(&qword_100263758, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
  v25 = v54;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v14, v12, &v62, v54, v12, v24);
  v26 = v59;
  (*(void (**)(char *, _QWORD *))(v56 + 32))(v59, v14);
  LOBYTE(v62) = 1;
  v27 = sub_100004EA8(&qword_100263760, (uint64_t (*)(uint64_t))&type metadata accessor for ClientOrigin, (uint64_t)&protocol conformance descriptor for ClientOrigin);
  v28 = v55;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v11, v55, &v62, v25, v55, v27);
  v29 = v60;
  (*(void (**)(char *, _QWORD *, uint64_t))(v53 + 32))(&v26[v60[5]], v11, v28);
  v30 = sub_100037A5C(&qword_100263738);
  v61 = 2;
  v31 = sub_10003624C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v62, v30, &v61, v54, v30, v31);
  *(_QWORD *)&v26[v29[6]] = v62;
  v32 = type metadata accessor for Date(0);
  LOBYTE(v62) = 3;
  v33 = sub_100004EA8(&qword_100260B90, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v34 = (uint64_t)v23;
  v35 = v23;
  v36 = v33;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v35, v32, &v62, v54, v32, v33);
  sub_10000EF6C(v34, (uint64_t)&v26[v29[7]], (uint64_t *)&unk_100262930);
  LOBYTE(v62) = 4;
  v37 = v51;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v51, v32, &v62, v54, v32, v36);
  sub_10000EF6C((uint64_t)v37, (uint64_t)&v26[v29[8]], (uint64_t *)&unk_100262930);
  LOBYTE(v62) = 5;
  v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v62, v54);
  v39 = (uint64_t *)&v26[v29[9]];
  *v39 = v38;
  v39[1] = v40;
  v41 = type metadata accessor for Handle(0);
  LOBYTE(v62) = 6;
  v42 = sub_100004EA8(&qword_100263778, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
  v43 = v50;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v50, v41, &v62, v54, v41, v42);
  sub_10000EF6C((uint64_t)v43, (uint64_t)&v26[v29[10]], &qword_1002650A0);
  LOBYTE(v62) = 7;
  v26[v29[11]] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v62, v54);
  LOBYTE(v62) = 8;
  v26[v29[12]] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v62, v54);
  LOBYTE(v62) = 9;
  v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v62, v54);
  v59[v60[13]] = v44;
  LOBYTE(v62) = 10;
  v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v62, v54);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v52, v54);
  v46 = (uint64_t)v59;
  v59[v60[14]] = v45;
  sub_100025C70(v46, v49, type metadata accessor for FriendInfoOption);
  sub_10002BB90(v57);
  return sub_100024990(v46, type metadata accessor for FriendInfoOption);
}

_QWORD *sub_100036228(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10003624C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100263768;
  if (!qword_100263768)
  {
    v1 = sub_10003C1FC(&qword_100263738);
    sub_100004EA8(&qword_100263770, (uint64_t (*)(uint64_t))&type metadata accessor for GroupID, (uint64_t)&protocol conformance descriptor for GroupID);
    sub_100004EA8(&qword_100260B90, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100263768);
  }
  return result;
}

unint64_t sub_1000362E8()
{
  unint64_t result;

  result = qword_100263720;
  if (!qword_100263720)
  {
    result = swift_getWitnessTable(&unk_1001F5D3C, &type metadata for FriendInfoOption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100263720);
  }
  return result;
}

uint64_t sub_10003632C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint8_t *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, __n128);
  __n128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, __n128);
  __n128 v119;
  uint64_t v120;
  _QWORD *v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t (*v135)(uint64_t, uint64_t, uint64_t, uint8_t *);
  uint8_t *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD v155[2];

  v5 = sub_100037A5C(&qword_100263870);
  __chkstk_darwin(v5);
  v134 = (uint64_t)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_1002650A0);
  __chkstk_darwin(v7);
  v133 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for FriendRecord(0);
  v10 = (_QWORD *)(a2 + v9[16]);
  *v10 = 0;
  v10[1] = 0;
  v11 = a2 + v9[36];
  v12 = type metadata accessor for Handle(0);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint8_t *))(*(_QWORD *)(v12 - 8) + 56);
  v150 = v11;
  v136 = (uint8_t *)v12;
  v135 = v13;
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(v11, 1, 1);
  if (qword_10025F9C0 != -1)
    swift_once(&qword_10025F9C0, sub_10014C1AC);
  v153 = v2;
  v152 = sub_100037A5C(&qword_100260DB8);
  v14 = sub_100037A9C(v152, (uint64_t)qword_10027AE68);
  Row.subscript.getter(v155, v14, &type metadata for String, &protocol witness table for String);
  v15 = *((_QWORD *)&v155[0] + 1);
  *(_QWORD *)a2 = *(_QWORD *)&v155[0];
  *(_QWORD *)(a2 + 8) = v15;
  if (qword_10025F9C8 != -1)
    swift_once(&qword_10025F9C8, sub_10014C238);
  v16 = sub_100037A5C(&qword_1002628E0);
  v17 = sub_100037A9C(v16, (uint64_t)qword_10027AE80);
  Row.subscript.getter(v155, v17, &type metadata for String, &protocol witness table for String);
  *(_OWORD *)(a2 + 16) = v155[0];
  if (qword_10025F9D0 != -1)
    swift_once(&qword_10025F9D0, sub_10014C2C4);
  v18 = sub_100037A5C(&qword_1002628E8);
  v19 = sub_100037A9C(v18, (uint64_t)qword_10027AE98);
  Row.subscript.getter(v155, v19, &type metadata for Int, &protocol witness table for Int);
  if (BYTE8(v155[0]) == 1)
  {
    v20 = a2 + v9[6];
    v21 = type metadata accessor for IDSStatus(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  }
  else
  {
    IDSStatus.init(rawValue:)(*(_QWORD *)&v155[0]);
  }
  if (qword_10025F9D8 != -1)
    swift_once(&qword_10025F9D8, sub_10014C358);
  v22 = sub_100037A9C(v16, (uint64_t)qword_10027AEB0);
  Row.subscript.getter(v155, v22, &type metadata for String, &protocol witness table for String);
  v143 = a2 + v9[7];
  *(_OWORD *)v143 = v155[0];
  if (qword_10025F9E0 != -1)
    swift_once(&qword_10025F9E0, sub_10014C3E4);
  v23 = sub_100037A5C(&qword_1002628F8);
  v24 = sub_100037A9C(v23, (uint64_t)qword_10027AEC8);
  Row.subscript.getter(v155, v24, &type metadata for Double, &protocol witness table for Double);
  *(_QWORD *)(a2 + v9[8]) = *(_QWORD *)&v155[0];
  if (qword_10025F9E8 != -1)
    swift_once(&qword_10025F9E8, sub_10014C470);
  v25 = sub_100037A9C(v16, (uint64_t)qword_10027AEE0);
  Row.subscript.getter(v155, v25, &type metadata for String, &protocol witness table for String);
  v142 = a2 + v9[9];
  *(_OWORD *)v142 = v155[0];
  if (qword_10025F9F0 != -1)
    swift_once(&qword_10025F9F0, sub_10014C4FC);
  v26 = sub_100037A9C(v16, (uint64_t)qword_10027AEF8);
  Row.subscript.getter(v155, v26, &type metadata for String, &protocol witness table for String);
  v141 = a2 + v9[10];
  *(_OWORD *)v141 = v155[0];
  if (qword_10025F9F8 != -1)
    swift_once(&qword_10025F9F8, sub_10014C588);
  v151 = (uint64_t *)sub_100037A5C(&qword_100262900);
  v27 = sub_100037A9C((uint64_t)v151, (uint64_t)qword_10027AF10);
  Row.subscript.getter(v155, v27, &type metadata for Bool, &protocol witness table for Bool);
  *(_BYTE *)(a2 + v9[11]) = v155[0];
  if (qword_10025FA08 != -1)
    swift_once(&qword_10025FA08, sub_10014C6A8);
  v28 = sub_100037A9C(v16, (uint64_t)qword_10027AF40);
  Row.subscript.getter(v155, v28, &type metadata for String, &protocol witness table for String);
  v140 = a2 + v9[13];
  *(_OWORD *)v140 = v155[0];
  if (qword_10025FA10 != -1)
    swift_once(&qword_10025FA10, sub_10014C734);
  v29 = sub_100037A9C(v16, (uint64_t)qword_10027AF58);
  Row.subscript.getter(v155, v29, &type metadata for String, &protocol witness table for String);
  v139 = a2 + v9[14];
  *(_OWORD *)v139 = v155[0];
  if (qword_10025FA20 != -1)
    swift_once(&qword_10025FA20, sub_10014C84C);
  v30 = sub_100037A9C(v16, (uint64_t)qword_10027AF88);
  Row.subscript.getter(v155, v30, &type metadata for String, &protocol witness table for String);
  v31 = v155[0];
  swift_bridgeObjectRelease(v10[1]);
  *(_OWORD *)v10 = v31;
  v144 = v10;
  if (qword_10025FA00 != -1)
    swift_once(&qword_10025FA00, sub_10014C61C);
  v32 = sub_100037A5C(&qword_100260D60);
  v33 = sub_100037A9C(v32, (uint64_t)qword_10027AF28);
  Row.subscript.getter(v155, v33, &type metadata for Data, &protocol witness table for Data);
  v34 = *((_QWORD *)&v155[0] + 1);
  if (*((_QWORD *)&v155[0] + 1) >> 60 == 15)
  {
    v35 = 0;
  }
  else
  {
    v149 = v32;
    v36 = v18;
    v37 = *(_QWORD *)&v155[0];
    v38 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    v39 = PropertyListDecoder.init()();
    v40 = sub_100037A5C(&qword_1002625F8);
    v41 = sub_100027254(&qword_1002639C8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v42 = v153;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v40, v37, v34, v40, v41);
    if (v42)
    {
      swift_errorRelease(v42);
      sub_100037AF8(v37, v34);
      swift_release(v39);
      v35 = 0;
      v153 = 0;
    }
    else
    {
      v153 = 0;
      sub_100037AF8(v37, v34);
      swift_release(v39);
      v35 = *(_QWORD *)&v155[0];
    }
    v18 = v36;
    v32 = v149;
  }
  *(_QWORD *)(a2 + v9[12]) = v35;
  if (qword_10025FA18 != -1)
    swift_once(&qword_10025FA18, sub_10014C7C0);
  v43 = sub_100037A9C(v152, (uint64_t)qword_10027AF70);
  Row.subscript.getter(v155, v43, &type metadata for String, &protocol witness table for String);
  v44 = *((_QWORD *)&v155[0] + 1);
  v45 = (_QWORD *)(a2 + v9[15]);
  *v45 = *(_QWORD *)&v155[0];
  v45[1] = v44;
  v138 = v45;
  if (qword_10025FA28 != -1)
    swift_once(&qword_10025FA28, sub_10014C8D8);
  v46 = sub_100037A9C(v16, (uint64_t)qword_10027AFA0);
  Row.subscript.getter(v155, v46, &type metadata for String, &protocol witness table for String);
  v152 = a2 + v9[17];
  *(_OWORD *)v152 = v155[0];
  if (qword_10025FA30 != -1)
    swift_once(&qword_10025FA30, sub_10014C964);
  v47 = sub_100037A9C(v16, (uint64_t)qword_10027AFB8);
  Row.subscript.getter(v155, v47, &type metadata for String, &protocol witness table for String);
  v149 = a2 + v9[18];
  *(_OWORD *)v149 = v155[0];
  if (qword_10025FA38 != -1)
    swift_once(&qword_10025FA38, sub_10014C9F0);
  v48 = sub_100037A9C(v18, (uint64_t)qword_10027AFD0);
  Row.subscript.getter(v155, v48, &type metadata for Int, &protocol witness table for Int);
  if (BYTE8(v155[0]) == 1)
  {
    v49 = a2 + v9[19];
    v50 = type metadata accessor for IDSStatus(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 1, 1, v50);
  }
  else
  {
    IDSStatus.init(rawValue:)(*(_QWORD *)&v155[0]);
  }
  if (qword_10025FA40 != -1)
    swift_once(&qword_10025FA40, sub_10014CA7C);
  v51 = sub_100037A9C(v16, (uint64_t)qword_10027AFE8);
  Row.subscript.getter(v155, v51, &type metadata for String, &protocol witness table for String);
  v148 = a2 + v9[20];
  *(_OWORD *)v148 = v155[0];
  if (qword_10025FA50 != -1)
    swift_once(&qword_10025FA50, sub_10014CB9C);
  v52 = sub_100037A5C(&qword_100262908);
  v53 = sub_100037A9C(v52, (uint64_t)qword_10027B018);
  Row.subscript.getter(v155, v53, &type metadata for Double, &protocol witness table for Double);
  v54 = BYTE8(v155[0]);
  v55 = a2 + v9[22];
  *(_QWORD *)v55 = *(_QWORD *)&v155[0];
  *(_BYTE *)(v55 + 8) = v54;
  if (qword_10025FA58 != -1)
    swift_once(&qword_10025FA58, sub_10014CC28);
  v56 = sub_100037A9C(v16, (uint64_t)qword_10027B030);
  Row.subscript.getter(v155, v56, &type metadata for String, &protocol witness table for String);
  v137 = a2 + v9[23];
  *(_OWORD *)v137 = v155[0];
  if (qword_10025FA60 != -1)
    swift_once(&qword_10025FA60, sub_10014CCB4);
  v57 = sub_100037A9C(v16, (uint64_t)qword_10027B048);
  Row.subscript.getter(v155, v57, &type metadata for String, &protocol witness table for String);
  v147 = (uint64_t *)(a2 + v9[24]);
  *(_OWORD *)v147 = v155[0];
  if (qword_10025FA68 != -1)
    swift_once(&qword_10025FA68, sub_10014CD40);
  v58 = sub_100037A9C((uint64_t)v151, (uint64_t)qword_10027B060);
  Row.subscript.getter(v155, v58, &type metadata for Bool, &protocol witness table for Bool);
  v132 = v9[25];
  *(_BYTE *)(a2 + v132) = v155[0];
  if (qword_10025FA78 != -1)
    swift_once(&qword_10025FA78, sub_10014CE58);
  v59 = sub_100037A9C(v16, (uint64_t)qword_10027B090);
  Row.subscript.getter(v155, v59, &type metadata for String, &protocol witness table for String);
  v151 = (uint64_t *)(a2 + v9[27]);
  *(_OWORD *)v151 = v155[0];
  if (qword_10025FA80 != -1)
    swift_once(&qword_10025FA80, sub_10014CEE4);
  v60 = sub_100037A9C(v16, (uint64_t)qword_10027B0A8);
  Row.subscript.getter(v155, v60, &type metadata for String, &protocol witness table for String);
  v146 = a2 + v9[28];
  *(_OWORD *)v146 = v155[0];
  if (qword_10025FA88 != -1)
    swift_once(&qword_10025FA88, sub_10014CF70);
  v61 = sub_100037A9C(v16, (uint64_t)qword_10027B0C0);
  Row.subscript.getter(v155, v61, &type metadata for String, &protocol witness table for String);
  v145 = (uint64_t *)(a2 + v9[29]);
  *(_OWORD *)v145 = v155[0];
  if (qword_10025FA70 != -1)
    swift_once(&qword_10025FA70, sub_10014CDCC);
  v62 = sub_100037A9C(v32, (uint64_t)qword_10027B078);
  Row.subscript.getter(v155, v62, &type metadata for Data, &protocol witness table for Data);
  v63 = *((_QWORD *)&v155[0] + 1);
  if (*((_QWORD *)&v155[0] + 1) >> 60 == 15)
  {
    v64 = 0;
    v65 = v153;
  }
  else
  {
    v66 = *(_QWORD *)&v155[0];
    v67 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
    v68 = PropertyListDecoder.init()();
    v69 = sub_100037A5C(&qword_1002625F8);
    v70 = sub_100027254(&qword_1002639C8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v71 = v153;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v69, v66, v63, v69, v70);
    v65 = v71;
    if (v71)
    {
      swift_errorRelease(v71);
      sub_100037AF8(v66, v63);
      swift_release(v68);
      v64 = 0;
      v65 = 0;
    }
    else
    {
      sub_100037AF8(v66, v63);
      swift_release(v68);
      v64 = *(_QWORD *)&v155[0];
    }
  }
  *(_QWORD *)(a2 + v9[26]) = v64;
  if (qword_10025FA48 != -1)
    swift_once(&qword_10025FA48, sub_10014CB10);
  v72 = sub_100037A9C(v32, (uint64_t)qword_10027B000);
  Row.subscript.getter(v155, v72, &type metadata for Data, &protocol witness table for Data);
  v73 = *((_QWORD *)&v155[0] + 1);
  if (*((_QWORD *)&v155[0] + 1) >> 60 == 15)
  {
    v74 = 0;
  }
  else
  {
    v75 = *(_QWORD *)&v155[0];
    v76 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v76, *(unsigned int *)(v76 + 48), *(unsigned __int16 *)(v76 + 52));
    v77 = PropertyListDecoder.init()();
    v78 = sub_100037A5C(&qword_100263738);
    v79 = sub_10003624C();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v78, v75, v73, v78, v79);
    if (v65)
    {
      swift_errorRelease(v65);
      sub_100037AF8(v75, v73);
      swift_release(v77);
      v74 = 0;
      v65 = 0;
    }
    else
    {
      sub_100037AF8(v75, v73);
      swift_release(v77);
      v74 = *(_QWORD *)&v155[0];
    }
  }
  *(_QWORD *)(a2 + v9[21]) = v74;
  if (qword_10025FA90 != -1)
    swift_once(&qword_10025FA90, sub_10014CFFC);
  v80 = sub_100037A5C(&qword_100260D48);
  v81 = sub_100037A9C(v80, (uint64_t)qword_10027B0D8);
  Row.subscript.getter(v155, v81, &type metadata for Bool, &protocol witness table for Bool);
  *(_BYTE *)(a2 + v9[30]) = v155[0];
  if (qword_10025FA98 != -1)
    swift_once(&qword_10025FA98, sub_10014D088);
  v82 = sub_100037A9C(v80, (uint64_t)qword_10027B0F0);
  Row.subscript.getter(v155, v82, &type metadata for Bool, &protocol witness table for Bool);
  *(_BYTE *)(a2 + v9[31]) = v155[0];
  if (qword_10025FAA0 != -1)
    swift_once(&qword_10025FAA0, sub_10014D114);
  v83 = sub_100037A9C(v80, (uint64_t)qword_10027B108);
  Row.subscript.getter(v155, v83, &type metadata for Bool, &protocol witness table for Bool);
  *(_BYTE *)(a2 + v9[32]) = v155[0];
  if (qword_10025FAA8 != -1)
    swift_once(&qword_10025FAA8, sub_10014D1A0);
  v84 = sub_100037A9C(v80, (uint64_t)qword_10027B120);
  Row.subscript.getter(v155, v84, &type metadata for Bool, &protocol witness table for Bool);
  *(_BYTE *)(a2 + v9[33]) = v155[0];
  if (qword_10025FAB0 != -1)
    swift_once(&qword_10025FAB0, sub_10014D22C);
  v85 = sub_100037A5C(&qword_100260D68);
  v86 = sub_100037A9C(v85, (uint64_t)qword_10027B138);
  Row.subscript.getter(v155, v86, &type metadata for Data, &protocol witness table for Data);
  v87 = v155[0];
  v88 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v88, *(unsigned int *)(v88 + 48), *(unsigned __int16 *)(v88 + 52));
  v89 = PropertyListDecoder.init()();
  v90 = sub_100037A5C(&qword_100267A80);
  v91 = sub_100039F4C();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v90, v87, *((_QWORD *)&v87 + 1), v90, v91);
  if (!v65)
  {
    swift_release(v89);
    v102 = *(_QWORD *)&v155[0];
    v103 = sub_10003956C(*(uint64_t *)&v155[0]);
    swift_bridgeObjectRelease(v102);
    *(_QWORD *)(a2 + v9[34]) = v103;
    if (qword_10025FAB8 != -1)
      swift_once(&qword_10025FAB8, sub_10014D2B8);
    v104 = sub_100037A5C(&qword_100262910);
    v105 = sub_100037A9C(v104, (uint64_t)qword_10027B150);
    v106 = sub_100039528();
    Row.subscript.getter(v155, v105, &type metadata for UInt64, v106);
    *(_QWORD *)(a2 + v9[35]) = *(_QWORD *)&v155[0];
    v107 = *(_QWORD *)(v152 + 8);
    if (v107)
    {
      v108 = *(_QWORD *)(a2 + v9[21]);
      if (v108)
      {
        if ((*(_BYTE *)(v55 + 8) & 1) == 0)
        {
          v121 = *(_QWORD **)v152;
          v122 = *(double *)v55;
          v123 = *(_QWORD *)(v149 + 8);
          v143 = *(_QWORD *)v149;
          v144 = v121;
          v124 = v145[1];
          v149 = *v145;
          v152 = v124;
          v153 = v123;
          sub_10000E37C(a2 + v9[19], v134, &qword_100263870);
          v125 = *(_QWORD *)(v148 + 8);
          v145 = *(uint64_t **)v148;
          v126 = v147[1];
          v148 = *v147;
          v139 = v126;
          LODWORD(v147) = *(unsigned __int8 *)(a2 + v132);
          v127 = *(_QWORD *)(a2 + v9[26]);
          v128 = v151[1];
          v142 = *v151;
          v140 = v127;
          v141 = v128;
          v151 = 0;
          swift_bridgeObjectRetain(*(_QWORD *)(v146 + 8));
          swift_bridgeObjectRetain_n(v125, 2);
          swift_bridgeObjectRetain(v107);
          swift_bridgeObjectRetain(v108);
          swift_bridgeObjectRetain(v153);
          swift_bridgeObjectRetain(v152);
          swift_bridgeObjectRetain(v139);
          swift_bridgeObjectRetain(v140);
          swift_bridgeObjectRetain(v141);
          v129 = (uint64_t)v133;
          Handle.init(withID:qualifiedIdentifier:serverID:idsStatus:dsid:expiresByGroupId:trackingTimestamp:hashedDSID:favoriteOrder:reachable:pushIdentifiers:prettyName:contactIdentifier:siblingIdentifiers:)(v144, v107, v143, v153, v149, v152, v134, v122);
          sub_100037AB4(v87, *((unint64_t *)&v87 + 1));
          v130 = type metadata accessor for Row(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 8))(a1, v130);
          v135(v129, 0, 1, v136);
          return sub_100039FC8(v129, v150);
        }
        v109 = type metadata accessor for Row(0);
        v110 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v109 - 8) + 8);
        swift_bridgeObjectRetain(v107);
        v111 = swift_bridgeObjectRetain(v108);
        v110(a1, v109, v111);
        sub_100037AB4(v87, *((unint64_t *)&v87 + 1));
        swift_bridgeObjectRelease(v107);
        v112 = v108;
      }
      else
      {
        v117 = type metadata accessor for Row(0);
        v118 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v117 - 8) + 8);
        v119 = swift_bridgeObjectRetain(v107);
        v118(a1, v117, v119);
        sub_100037AB4(v87, *((unint64_t *)&v87 + 1));
        v112 = v107;
      }
      swift_bridgeObjectRelease(v112);
    }
    else
    {
      v116 = type metadata accessor for Row(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 8))(a1, v116);
      sub_100037AB4(v87, *((unint64_t *)&v87 + 1));
    }
    v120 = v150;
    sub_1000087A0(v150, &qword_1002650A0);
    return v135(v120, 1, 1, v136);
  }
  sub_100037AB4(v87, *((unint64_t *)&v87 + 1));
  swift_release(v89);
  if (qword_10025FBD0 != -1)
    swift_once(&qword_10025FBD0, sub_1001E4180);
  v92 = type metadata accessor for Logger(0);
  sub_100037A9C(v92, (uint64_t)qword_10027B3F8);
  swift_errorRetain(v65);
  v93 = swift_errorRetain(v65);
  v94 = Logger.logObject.getter(v93);
  v95 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v94, v95))
  {
    v96 = (uint8_t *)swift_slowAlloc(12, -1);
    v153 = swift_slowAlloc(32, -1);
    v154 = v65;
    *(_QWORD *)&v155[0] = v153;
    *(_DWORD *)v96 = 136446210;
    v136 = v96 + 4;
    swift_errorRetain(v65);
    v97 = sub_100037A5C(&qword_100265260);
    v98 = String.init<A>(describing:)(&v154, v97);
    v100 = v99;
    v154 = sub_10002BA84(v98, v99, (uint64_t *)v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, v155, v136, v96 + 12);
    swift_bridgeObjectRelease(v100);
    swift_errorRelease(v65);
    swift_errorRelease(v65);
    _os_log_impl((void *)&_mh_execute_header, v94, v95, "Read FriendRecord error: %{public}s", v96, 0xCu);
    v101 = v153;
    swift_arrayDestroy(v153, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v101, -1, -1);
    swift_slowDealloc(v96, -1, -1);
  }
  else
  {
    swift_errorRelease(v65);
    swift_errorRelease(v65);
  }

  swift_willThrow(v113);
  v114 = type metadata accessor for Row(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 8))(a1, v114);
  swift_bridgeObjectRelease(*(_QWORD *)(a2 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a2 + 24));
  sub_1000087A0(a2 + v9[6], &qword_100263870);
  swift_bridgeObjectRelease(*(_QWORD *)(v143 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v142 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v141 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a2 + v9[12]));
  swift_bridgeObjectRelease(*(_QWORD *)(v140 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v139 + 8));
  swift_bridgeObjectRelease(v138[1]);
  swift_bridgeObjectRelease(v144[1]);
  swift_bridgeObjectRelease(*(_QWORD *)(v152 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v149 + 8));
  sub_1000087A0(a2 + v9[19], &qword_100263870);
  swift_bridgeObjectRelease(*(_QWORD *)(v148 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a2 + v9[21]));
  swift_bridgeObjectRelease(*(_QWORD *)(v137 + 8));
  swift_bridgeObjectRelease(v147[1]);
  swift_bridgeObjectRelease(*(_QWORD *)(a2 + v9[26]));
  swift_bridgeObjectRelease(v151[1]);
  swift_bridgeObjectRelease(*(_QWORD *)(v146 + 8));
  swift_bridgeObjectRelease(v145[1]);
  return sub_1000087A0(v150, &qword_1002650A0);
}

uint64_t sub_100037A5C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100037A9C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100037AB4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100037AF8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100037AB4(result, a2);
  return result;
}

uint64_t sub_100037B0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  int *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v97 = a1;
  v98 = a2;
  v3 = type metadata accessor for ClientOrigin(0);
  v83 = *(_QWORD *)(v3 - 8);
  v84 = v3;
  __chkstk_darwin(v3);
  v93 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C((uint64_t *)&unk_100262930);
  v6 = __chkstk_darwin(v5);
  v88 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v92 = (uint64_t)&v75 - v8;
  v80 = type metadata accessor for HandleType(0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v91 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FriendRecord(0);
  v11 = __chkstk_darwin(v10);
  v87 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v85 = (char *)&v75 - v14;
  v15 = __chkstk_darwin(v13);
  v82 = (char *)&v75 - v16;
  v17 = __chkstk_darwin(v15);
  v81 = (uint64_t)&v75 - v18;
  __chkstk_darwin(v17);
  v78 = (uint64_t)&v75 - v19;
  v20 = sub_100037A5C(&qword_1002650A0);
  v21 = __chkstk_darwin(v20);
  v86 = (uint64_t)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v77 = (uint64_t)&v75 - v24;
  v25 = __chkstk_darwin(v23);
  v90 = (char *)&v75 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v75 - v27;
  v29 = type metadata accessor for Handle(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v89 = (char *)&v75 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v96 = (char *)&v75 - v33;
  v34 = sub_100037A5C(&qword_100263858);
  __chkstk_darwin(v34);
  v36 = (char *)&v75 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = (int *)type metadata accessor for FriendInfoOption(0);
  v38 = *((_QWORD *)v37 - 1);
  __chkstk_darwin(v37);
  v40 = (char *)&v75 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = (int *)v10;
  v95 = v2;
  v41 = *(_QWORD *)(v2 + *(int *)(v10 + 136));
  v42 = v97;
  v99 = v97;
  swift_bridgeObjectRetain(v41);
  sub_10003920C((uint64_t (*)(char *))sub_1000394B8, v41, (uint64_t)v36);
  swift_bridgeObjectRelease(v41);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37) == 1)
  {
    sub_1000087A0((uint64_t)v36, &qword_100263858);
    v43 = type metadata accessor for Friend(0);
    v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
    v45 = v98;
LABEL_5:
    v49 = 1;
    return v44(v45, v49, 1, v43);
  }
  v46 = v98;
  sub_100038AE8((uint64_t)v36, (uint64_t)v40);
  v47 = v42;
  sub_100038D9C(v42, (uint64_t)v28);
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v48(v28, 1, v29) == 1)
  {
    sub_100024990((uint64_t)v40, type metadata accessor for FriendInfoOption);
    sub_1000087A0((uint64_t)v28, &qword_1002650A0);
    v43 = type metadata accessor for Friend(0);
    v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
    v45 = v46;
    goto LABEL_5;
  }
  v50 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v50(v96, v28, v29);
  v51 = v77;
  sub_10000E37C((uint64_t)&v40[v37[10]], v77, &qword_1002650A0);
  v52 = v95;
  v53 = v78;
  sub_100025C70(v95, v78, type metadata accessor for FriendRecord);
  if (v48((char *)v51, 1, v29) == 1)
  {
    sub_10000E37C(v53 + v94[36], (uint64_t)v90, &qword_1002650A0);
    sub_100024990(v53, type metadata accessor for FriendRecord);
    sub_1000087A0(v51, &qword_1002650A0);
  }
  else
  {
    sub_100024990(v53, type metadata accessor for FriendRecord);
    v54 = (uint64_t)v90;
    v50(v90, (char *)v51, v29);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v54, 0, 1, v29);
  }
  v55 = v93;
  v56 = (uint64_t)v88;
  v57 = (uint64_t)v85;
  v58 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v88 = (char *)v29;
  v58(v89, v96, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v91, v47, v80);
  sub_10000E37C((uint64_t)&v40[v37[8]], v92, (uint64_t *)&unk_100262930);
  sub_10000E37C((uint64_t)&v40[v37[7]], v56, (uint64_t *)&unk_100262930);
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v55, &v40[v37[5]], v84);
  v59 = v40[v37[12]];
  v60 = v81;
  sub_100025C70(v52, v81, type metadata accessor for FriendRecord);
  v61 = (uint64_t)v82;
  v76 = v30;
  if (v59 == 2)
    v62 = *(unsigned __int8 *)(v60 + v94[30]);
  else
    v62 = v59 & 1;
  sub_100024990(v60, type metadata accessor for FriendRecord);
  v63 = v40[v37[11]];
  sub_100025C70(v52, v61, type metadata accessor for FriendRecord);
  if (v63 == 2)
    v64 = *(unsigned __int8 *)(v61 + v94[31]);
  else
    v64 = v63 & 1;
  sub_100024990(v61, type metadata accessor for FriendRecord);
  v65 = v40[v37[14]];
  sub_100025C70(v52, v57, type metadata accessor for FriendRecord);
  if (v65 == 2)
    v66 = *(unsigned __int8 *)(v57 + v94[32]);
  else
    v66 = v65 & 1;
  sub_100024990(v57, type metadata accessor for FriendRecord);
  v67 = v40[v37[13]];
  v68 = v87;
  sub_100025C70(v52, v87, type metadata accessor for FriendRecord);
  if (v67 == 2)
    v69 = *(_BYTE *)(v68 + v94[33]);
  else
    v69 = v67 & 1;
  sub_100024990(v68, type metadata accessor for FriendRecord);
  v70 = (uint64_t)v90;
  v71 = v86;
  sub_10000E37C((uint64_t)v90, v86, &qword_1002650A0);
  v74 = v69;
  v72 = v98;
  Friend.init(handle:type:expiry:createdAt:origin:secureLocationsCapable:shallowOrLiveSecureLocationsCapable:fallbackToLegacyAllowed:fallbackToLegacy:ownerHandle:)(v89, v91, v92, v56, v93, v62, v64, v66, v74, v71);
  sub_1000087A0(v70, &qword_1002650A0);
  (*(void (**)(char *, char *))(v76 + 8))(v96, v88);
  sub_100024990((uint64_t)v40, type metadata accessor for FriendInfoOption);
  v43 = type metadata accessor for Friend(0);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
  v45 = v72;
  v49 = 0;
  return v44(v45, v49, 1, v43);
}

uint64_t type metadata accessor for FriendRecord(uint64_t a1)
{
  return sub_100025C3C(a1, (uint64_t *)&unk_1002638F0, (uint64_t)&nominal type descriptor for FriendRecord);
}

uint64_t destroy for FriendInfoOption(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v4 = type metadata accessor for HandleType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for ClientOrigin(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  v7 = a1 + a2[7];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v11 = a1 + a2[8];
  if (!v10(v11, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  v12 = a1 + a2[10];
  v13 = type metadata accessor for Handle(0);
  v14 = *(_QWORD *)(v13 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  return result;
}

_QWORD *sub_100038424(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, void *, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  uint64_t v95;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unsigned int (*v100)(char *, uint64_t, uint64_t, __n128);
  uint64_t v101;
  uint64_t v102;
  char *__dst;
  void *__dsta;
  void *v105;
  char *v106;
  unsigned int (*v107)(char *, uint64_t, void *, __n128);
  uint64_t v108;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for IDSStatus(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, void *, __n128))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  v14 = swift_bridgeObjectRetain(v7);
  v107 = v13;
  v97 = v12;
  v105 = (void *)v11;
  if (v13(v10, 1, (void *)v11, v14))
  {
    v15 = sub_100037A5C(&qword_100263870);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v16 = a3[7];
  v17 = a3[8];
  v18 = (_QWORD *)((char *)a1 + v16);
  v19 = (_QWORD *)((char *)a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  v21 = a3[9];
  v22 = a3[10];
  v23 = (_QWORD *)((char *)a1 + v21);
  v24 = (_QWORD *)((char *)a2 + v21);
  v99 = v24[1];
  *v23 = *v24;
  v23[1] = v99;
  v25 = (_QWORD *)((char *)a1 + v22);
  v26 = (_QWORD *)((char *)a2 + v22);
  v101 = v26[1];
  *v25 = *v26;
  v25[1] = v101;
  v27 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v28 = *(_QWORD *)((char *)a2 + v27);
  *(_QWORD *)((char *)a1 + v27) = v28;
  v29 = a3[13];
  v30 = a3[14];
  v31 = (_QWORD *)((char *)a1 + v29);
  v32 = (_QWORD *)((char *)a2 + v29);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = (_QWORD *)((char *)a1 + v30);
  v35 = (_QWORD *)((char *)a2 + v30);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  v37 = a3[15];
  v38 = a3[16];
  v39 = (_QWORD *)((char *)a1 + v37);
  v40 = (_QWORD *)((char *)a2 + v37);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = (_QWORD *)((char *)a1 + v38);
  v43 = (_QWORD *)((char *)a2 + v38);
  v44 = v43[1];
  *v42 = *v43;
  v42[1] = v44;
  v45 = a3[17];
  v46 = a3[18];
  v47 = (_QWORD *)((char *)a1 + v45);
  v48 = (_QWORD *)((char *)a2 + v45);
  v49 = v48[1];
  *v47 = *v48;
  v47[1] = v49;
  v50 = (_QWORD *)((char *)a1 + v46);
  v51 = (_QWORD *)((char *)a2 + v46);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = a3[19];
  __dst = (char *)a1 + v53;
  v98 = (char *)a2 + v53;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v49);
  v54 = swift_bridgeObjectRetain(v52);
  if (v107(v98, 1, v105, v54))
  {
    v55 = sub_100037A5C(&qword_100263870);
    memcpy(__dst, v98, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, void *))(v97 + 16))(__dst, v98, v105);
    (*(void (**)(char *, _QWORD, uint64_t, void *))(v97 + 56))(__dst, 0, 1, v105);
  }
  v56 = a3[20];
  v57 = a3[21];
  v58 = (_QWORD *)((char *)a1 + v56);
  v59 = (_QWORD *)((char *)a2 + v56);
  __dsta = (void *)v59[1];
  *v58 = *v59;
  v58[1] = __dsta;
  v108 = *(_QWORD *)((char *)a2 + v57);
  *(_QWORD *)((char *)a1 + v57) = v108;
  v60 = a3[22];
  v61 = a3[23];
  v62 = (char *)a1 + v60;
  v63 = (char *)a2 + v60;
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v62[8] = v63[8];
  v64 = (_QWORD *)((char *)a1 + v61);
  v65 = (_QWORD *)((char *)a2 + v61);
  v102 = v65[1];
  *v64 = *v65;
  v64[1] = v102;
  v66 = a3[24];
  v67 = a3[25];
  v68 = (_QWORD *)((char *)a1 + v66);
  v69 = (_QWORD *)((char *)a2 + v66);
  v70 = v69[1];
  *v68 = *v69;
  v68[1] = v70;
  *((_BYTE *)a1 + v67) = *((_BYTE *)a2 + v67);
  v71 = a3[26];
  v72 = a3[27];
  v73 = *(_QWORD *)((char *)a2 + v71);
  *(_QWORD *)((char *)a1 + v71) = v73;
  v74 = (_QWORD *)((char *)a1 + v72);
  v75 = (_QWORD *)((char *)a2 + v72);
  v76 = v75[1];
  *v74 = *v75;
  v74[1] = v76;
  v77 = a3[28];
  v78 = a3[29];
  v79 = (_QWORD *)((char *)a1 + v77);
  v80 = (_QWORD *)((char *)a2 + v77);
  v81 = v80[1];
  *v79 = *v80;
  v79[1] = v81;
  v82 = (_QWORD *)((char *)a1 + v78);
  v83 = (_QWORD *)((char *)a2 + v78);
  v84 = v83[1];
  *v82 = *v83;
  v82[1] = v84;
  v85 = a3[31];
  *((_BYTE *)a1 + a3[30]) = *((_BYTE *)a2 + a3[30]);
  *((_BYTE *)a1 + v85) = *((_BYTE *)a2 + v85);
  v86 = a3[33];
  *((_BYTE *)a1 + a3[32]) = *((_BYTE *)a2 + a3[32]);
  *((_BYTE *)a1 + v86) = *((_BYTE *)a2 + v86);
  v87 = a3[34];
  v88 = a3[35];
  v89 = *(_QWORD *)((char *)a2 + v87);
  *(_QWORD *)((char *)a1 + v87) = v89;
  v90 = a3[36];
  v106 = (char *)a1 + v90;
  v91 = (char *)a2 + v90;
  *(_QWORD *)((char *)a1 + v88) = *(_QWORD *)((char *)a2 + v88);
  v92 = type metadata accessor for Handle(0);
  v93 = *(_QWORD *)(v92 - 8);
  v100 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v93 + 48);
  swift_bridgeObjectRetain(__dsta);
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v84);
  v94 = swift_bridgeObjectRetain(v89);
  if (v100(v91, 1, v92, v94))
  {
    v95 = sub_100037A5C(&qword_1002650A0);
    memcpy(v106, v91, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v106, v91, v92);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v106, 0, 1, v92);
  }
  return a1;
}

uint64_t sub_100038888(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for IDSStatus(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[15] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[18] + 8));
  v8 = a1 + a2[19];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[21]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[23] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[24] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[26]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[27] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[28] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[29] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[34]));
  v9 = a1 + a2[36];
  v10 = type metadata accessor for Handle(0);
  v11 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  return result;
}

uint64_t sub_100038AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FriendInfoOption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100038AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FriendInfoOption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for FriendInfoOption(uint64_t a1)
{
  return sub_100025C3C(a1, qword_1002637E0, (uint64_t)&nominal type descriptor for FriendInfoOption);
}

uint64_t initializeWithCopy for FriendInfoOption(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = type metadata accessor for HandleType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ClientOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v13;
  v14 = (void *)(a1 + v12);
  v15 = (const void *)(a2 + v12);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v17 + 48);
  v19 = swift_bridgeObjectRetain(v13);
  if (v18(v15, 1, v16, v19))
  {
    v20 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v21 = a3[8];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v18)(a2 + v21, 1, v16))
  {
    v24 = sub_100037A5C((uint64_t *)&unk_100262930);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v22, v23, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v22, 0, 1, v16);
  }
  v25 = a3[9];
  v26 = a3[10];
  v27 = (_QWORD *)(a1 + v25);
  v28 = (_QWORD *)(a2 + v25);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = (void *)(a1 + v26);
  v31 = (const void *)(a2 + v26);
  v32 = type metadata accessor for Handle(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v33 + 48);
  v35 = swift_bridgeObjectRetain(v29);
  if (v34(v31, 1, v32, v35))
  {
    v36 = sub_100037A5C(&qword_1002650A0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  v37 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v37) = *(_BYTE *)(a2 + v37);
  v38 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v38) = *(_BYTE *)(a2 + v38);
  return a1;
}

uint64_t sub_100038D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[6];

  v3 = v2;
  v63 = a2;
  v5 = sub_100037A5C(&qword_100263870);
  __chkstk_darwin(v5);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for FriendRecord(0);
  __chkstk_darwin(v8);
  v61 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HandleType(0);
  v59 = *(_QWORD *)(v10 - 8);
  v60 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100037A5C(&qword_100263858);
  __chkstk_darwin(v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FriendInfoOption(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(uint64_t *)((char *)v3 + v8[34]);
  v62 = a1;
  v64 = a1;
  swift_bridgeObjectRetain(v20);
  sub_10003920C((uint64_t (*)(char *))sub_1000394A0, v20, (uint64_t)v15);
  swift_bridgeObjectRelease(v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1000087A0((uint64_t)v15, &qword_100263858);
    v21 = type metadata accessor for Handle(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v63, 1, 1, v21);
  }
  else
  {
    v23 = (uint64_t)v7;
    sub_100038AE8((uint64_t)v15, (uint64_t)v19);
    v24 = (uint64_t *)((char *)v3 + v8[15]);
    v26 = *v24;
    v25 = v24[1];
    v65[2] = v26;
    v65[3] = v25;
    v65[0] = 44;
    v65[1] = 0xE100000000000000;
    v27 = sub_1000394E4();
    v58 = StringProtocol.components<A>(separatedBy:)(v65, &type metadata for String, &type metadata for String, v27, v27);
    v29 = v59;
    v28 = v60;
    (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v12, enum case for HandleType.pendingOffer(_:), v60);
    v30 = static HandleType.== infix(_:_:)(v62, v12);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v28);
    v31 = &v19[*(int *)(v16 + 36)];
    v33 = *(_QWORD *)v31;
    v32 = *((_QWORD *)v31 + 1);
    v34 = v61;
    sub_100025C70((uint64_t)v3, v61, type metadata accessor for FriendRecord);
    if (v32)
      v35 = v33;
    else
      v35 = 0;
    v62 = v35;
    v36 = (uint64_t)v19;
    v37 = v32;
    if (!v32 && (v30 & 1) == 0)
    {
      v38 = (uint64_t *)(v34 + v8[16]);
      v39 = v38[1];
      v62 = *v38;
      swift_bridgeObjectRetain(v39);
    }
    v56 = v23;
    v57 = v37;
    swift_bridgeObjectRetain(v32);
    sub_100024990(v34, type metadata accessor for FriendRecord);
    v40 = v3[1];
    v61 = *v3;
    v53 = v40;
    v41 = v3[3];
    v60 = v3[2];
    sub_10000E37C((uint64_t)v3 + v8[6], v23, &qword_100263870);
    v42 = *(uint64_t *)((char *)v3 + v8[7] + 8);
    v43 = *(_QWORD *)(v36 + *(int *)(v16 + 24));
    v44 = *(double *)((char *)v3 + v8[8]);
    v45 = (uint64_t *)((char *)v3 + v8[10]);
    v54 = *((unsigned __int8 *)v3 + v8[11]);
    v55 = *v45;
    v59 = v36;
    v46 = v45[1];
    v47 = *(uint64_t *)((char *)v3 + v8[12]);
    v48 = (uint64_t *)((char *)v3 + v8[13]);
    v49 = v48[1];
    v52 = *v48;
    swift_bridgeObjectRetain(*(uint64_t *)((char *)v3 + v8[14] + 8));
    swift_bridgeObjectRetain_n(v42, 2);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v49);
    v50 = v63;
    Handle.init(withID:qualifiedIdentifier:serverID:idsStatus:dsid:expiresByGroupId:trackingTimestamp:hashedDSID:favoriteOrder:reachable:pushIdentifiers:prettyName:contactIdentifier:siblingIdentifiers:)(v61, v53, v60, v41, v62, v57, v56, v44);
    sub_100024990(v59, type metadata accessor for FriendInfoOption);
    v51 = type metadata accessor for Handle(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 0, 1, v51);
  }
}

uint64_t getEnumTagSinglePayload for FriendInfoOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FB2C4);
}

void sub_10003920C(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  unint64_t v20;
  int64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;

  v28 = a3;
  v27 = type metadata accessor for FriendInfoOption(0);
  v6 = *(_QWORD *)(v27 - 8);
  v7 = __chkstk_darwin(v27);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v26 - v10;
  v12 = *(_QWORD *)(a2 + 56);
  v29 = a2 + 56;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v30 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v16 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v17 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v17 | (v16 << 6); ; i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    sub_100038AA4(*(_QWORD *)(a2 + 48) + *(_QWORD *)(v6 + 72) * i, (uint64_t)v11);
    sub_100038AE8((uint64_t)v11, (uint64_t)v9);
    v22 = a1(v9);
    if (v3)
    {
      sub_100039674((uint64_t)v9);
      swift_release(a2);
      return;
    }
    if ((v22 & 1) != 0)
    {
      swift_release(a2);
      v23 = v28;
      sub_100038AE8((uint64_t)v9, v28);
      v24 = 0;
      v25 = v27;
      goto LABEL_29;
    }
    sub_100039674((uint64_t)v9);
    if (v15)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v16++, 1))
      break;
    if (v16 >= v30)
      goto LABEL_28;
    v20 = *(_QWORD *)(v29 + 8 * v16);
    if (!v20)
    {
      v21 = v16 + 1;
      if (v16 + 1 >= v30)
        goto LABEL_28;
      v20 = *(_QWORD *)(v29 + 8 * v21);
      if (v20)
        goto LABEL_16;
      v21 = v16 + 2;
      if (v16 + 2 >= v30)
        goto LABEL_28;
      v20 = *(_QWORD *)(v29 + 8 * v21);
      if (v20)
        goto LABEL_16;
      v21 = v16 + 3;
      if (v16 + 3 >= v30)
        goto LABEL_28;
      v20 = *(_QWORD *)(v29 + 8 * v21);
      if (v20)
      {
LABEL_16:
        v16 = v21;
        goto LABEL_17;
      }
      v21 = v16 + 4;
      if (v16 + 4 < v30)
      {
        v20 = *(_QWORD *)(v29 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v16 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_31;
            if (v16 >= v30)
              goto LABEL_28;
            v20 = *(_QWORD *)(v29 + 8 * v16);
            ++v21;
            if (v20)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      v25 = v27;
      v23 = v28;
      swift_release(a2);
      v24 = 1;
LABEL_29:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v23, v24, 1, v25);
      return;
    }
LABEL_17:
    v15 = (v20 - 1) & v20;
  }
  __break(1u);
LABEL_31:
  __break(1u);
}

uint64_t storeEnumTagSinglePayload for FriendInfoOption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FB3BC);
}

uint64_t sub_1000394A0(uint64_t a1)
{
  return sub_1000394B8(a1) & 1;
}

uint64_t sub_1000394B8(uint64_t a1)
{
  uint64_t v1;

  return static HandleType.== infix(_:_:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

unint64_t sub_1000394E4()
{
  unint64_t result;

  result = qword_10025FC20;
  if (!qword_10025FC20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10025FC20);
  }
  return result;
}

unint64_t sub_100039528()
{
  unint64_t result;

  result = qword_100262918;
  if (!qword_100262918)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_100262918);
  }
  return result;
}

uint64_t sub_10003956C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for FriendInfoOption(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_100004EA8(&qword_100260948, v10, (uint64_t)&protocol conformance descriptor for FriendInfoOption);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v16 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_100038AA4(v13, (uint64_t)v6);
      sub_1000396B0((uint64_t)v8, (uint64_t)v6);
      sub_100039674((uint64_t)v8);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

uint64_t sub_100039674(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FriendInfoOption(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000396B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[9];

  v3 = v2;
  v6 = type metadata accessor for FriendInfoOption(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  Hasher.init(_seed:)(v23, *(_QWORD *)(*v2 + 40));
  v11 = type metadata accessor for HandleType(0);
  v12 = sub_100004EA8(&qword_100263710, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
  swift_bridgeObjectRetain(v10);
  dispatch thunk of Hashable.hash(into:)(v23, v11, v12);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v10 + 32);
  v15 = v13 & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v22 = a1;
    v16 = ~v14;
    v17 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_100038AA4(*(_QWORD *)(v10 + 48) + v17 * v15, (uint64_t)v9);
      v18 = static HandleType.== infix(_:_:)(v9, a2);
      sub_100039674((uint64_t)v9);
      if ((v18 & 1) != 0)
        break;
      v15 = (v15 + 1) & v16;
      if (((*(_QWORD *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        a1 = v22;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v10);
    sub_100039674(a2);
    sub_100038AA4(*(_QWORD *)(*v3 + 48) + v17 * v15, v22);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_100038AA4(a2, (uint64_t)v9);
    v23[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_1000398B0((uint64_t)v9, v15, isUniquelyReferenced_nonNull_native);
    v20 = *v3;
    *v3 = v23[0];
    swift_bridgeObjectRelease(v20);
    sub_100038AE8(a2, a1);
    return 1;
  }
}

uint64_t sub_1000398B0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[9];

  v4 = v3;
  v8 = type metadata accessor for FriendInfoOption(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100165CE8(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_1001668E8();
      goto LABEL_12;
    }
    sub_100166FB8(v14);
  }
  v15 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  v16 = type metadata accessor for HandleType(0);
  v17 = sub_100004EA8(&qword_100263710, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
  dispatch thunk of Hashable.hash(into:)(v29, v16, v17);
  v18 = Hasher._finalize()();
  v19 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v18 & ~v19;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v28 = v8;
    v20 = ~v19;
    v21 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_100038AA4(*(_QWORD *)(v15 + 48) + v21 * a2, (uint64_t)v11);
      v22 = static HandleType.== infix(_:_:)(v11, a1);
      sub_100039674((uint64_t)v11);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v20;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_100038AE8(a1, *(_QWORD *)(v23 + 48) + *(_QWORD *)(v9 + 72) * a2);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
  return result;
}

uint64_t sub_100039A9C(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for Friend(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100004EA8(&qword_1002608F8, v12, (uint64_t)&protocol conformance descriptor for Friend);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100004EA8(&qword_100263380, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100039CF8((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_100039CF8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for Friend(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001656AC(v12, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, &qword_1002655C8, &qword_1002608F8, (uint64_t)&protocol conformance descriptor for Friend);
  }
  else
  {
    if (v11 > v10)
    {
      sub_10000D090((uint64_t (*)(_QWORD))&type metadata accessor for Friend, &qword_1002655C8);
      goto LABEL_12;
    }
    sub_100166C9C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, &qword_1002655C8, &qword_1002608F8, (uint64_t)&protocol conformance descriptor for Friend);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100004EA8(&qword_1002608F8, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100004EA8(&qword_100263380, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

unint64_t sub_100039F4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100267A88;
  if (!qword_100267A88)
  {
    v1 = sub_10003C1FC(&qword_100267A80);
    sub_100004EA8(&qword_1002639E0, type metadata accessor for FriendInfoOption, (uint64_t)&protocol conformance descriptor for FriendInfoOption);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, &qword_100267A88);
  }
  return result;
}

uint64_t sub_100039FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_1002650A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_BYTE *initializeBufferWithCopyOfBuffer for ServerContext.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_10003A020()
{
  unsigned __int8 *v0;

  return sub_10003A028(*v0);
}

uint64_t sub_10003A028(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003A054 + 4 * byte_1001F5B30[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_10003A054()
{
  return 0x6E696769726FLL;
}

unint64_t sub_10003A068()
{
  return 0xD000000000000010;
}

unint64_t sub_10003A10C()
{
  return 0xD000000000000017;
}

void sub_10003A124()
{
  JUMPOUT(0x10003A138);
}

uint64_t sub_10003A144()
{
  unsigned __int8 *v0;

  return sub_10003A14C(*v0);
}

uint64_t sub_10003A14C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003A18C + 4 * byte_1001FA4E0[a1]))(0x6954657461657263, 0xEF706D617473656DLL);
}

uint64_t sub_10003A18C()
{
  return 0x73657269707865;
}

unint64_t sub_10003A1A4()
{
  return 0xD000000000000010;
}

uint64_t sub_10003A2F0()
{
  return 0x654D6D6F72467369;
}

uint64_t storeEnumTagSinglePayload for ServerFriend.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_10003A360 + 4 * byte_1001FA511[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_10003A394 + 4 * byte_1001FA50C[v4]))();
}

uint64_t sub_10003A394(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A39C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003A3A4);
  return result;
}

uint64_t sub_10003A3B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003A3B8);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_10003A3BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A3C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

__n128 initializeWithTake for ServerDevice(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10003A3EC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003A428 + 4 * byte_1001F8B48[*v0]))(0x6143654D6F747561, 0xED0000656C626170);
}

unint64_t sub_10003A428()
{
  return 0xD000000000000010;
}

uint64_t sub_10003A444()
{
  return 25705;
}

uint64_t sub_10003A450()
{
  return 0x6369766544736469;
}

uint64_t sub_10003A470()
{
  return 1701667182;
}

uint64_t sub_10003A480()
{
  unsigned __int8 *v0;

  return sub_10003A488(*v0);
}

uint64_t sub_10003A488(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10003A4C4 + 4 * byte_1001F8B4D[a1]))(0xD00000000000001ALL, 0x80000001002010F0);
}

uint64_t sub_10003A4C4()
{
  return 0x6F6C6C6F4678616DLL;
}

unint64_t sub_10003A4E4()
{
  return 0xD000000000000012;
}

uint64_t sub_10003A588()
{
  uint64_t v0;

  return v0 + 6;
}

uint64_t sub_10003A598()
{
  return 0x464D466B636F6C62;
}

uint64_t sub_10003A5BC()
{
  uint64_t v0;

  return v0 + 4;
}

uint64_t sub_10003A5CC()
{
  uint64_t v0;

  return v0 + 13;
}

uint64_t sub_10003A5DC()
{
  uint64_t v0;

  return v0 + 16;
}

uint64_t sub_10003A5EC()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_10003A60C()
{
  uint64_t v0;

  return v0 + 6;
}

uint64_t sub_10003A61C()
{
  uint64_t v0;

  return v0 + 3;
}

void sub_10003A62C()
{
  JUMPOUT(0x10003A638);
}

uint64_t sub_10003A644()
{
  return 0x5465636172474C65;
}

uint64_t sub_10003A668()
{
  unsigned __int8 *v0;

  return sub_10003A670(*v0);
}

uint64_t sub_10003A670(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10003A6AC + 4 * byte_1001F2D18[a1]))(0xD000000000000017, 0x80000001001FC8A0);
}

uint64_t sub_10003A6AC()
{
  return 7562610;
}

uint64_t sub_10003A6BC()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_10003A79C()
{
  return 0x6F69746172657469;
}

uint64_t storeEnumTagSinglePayload for ServerDevice.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10003A828 + 4 * byte_1001F8BC8[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10003A85C + 4 * byte_1001F8BC3[v4]))();
}

uint64_t sub_10003A85C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A864(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003A86CLL);
  return result;
}

uint64_t sub_10003A878(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003A880);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10003A884(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A88C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

__n128 initializeWithTake for ServerFriend(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 143) = *(_DWORD *)(a2 + 143);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ServerFriend.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_10003A95C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003A980 + 4 * byte_1001F7F60[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_10003A980()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_10003A9AC()
{
  return 0x737574617473;
}

uint64_t sub_10003A9C0()
{
  unsigned __int8 *v0;

  return sub_10003A9C8(*v0);
}

uint64_t sub_10003A9C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10003AA00 + 4 * byte_1001F8B40[a1]))(0xD000000000000011, 0x80000001002010B0);
}

uint64_t sub_10003AA00()
{
  return 0x6449656369766564;
}

uint64_t sub_10003AA18()
{
  return 0x6954656369766564;
}

uint64_t sub_10003AA3C()
{
  return 0x656C626967696C65;
}

uint64_t sub_10003AA60()
{
  return 0x736C69616D65;
}

uint64_t sub_10003AA74()
{
  return 0x6D614E7473726966;
}

uint64_t sub_10003AAA4()
{
  return 0x656369766544656DLL;
}

__n128 initializeWithTake for ServerLocationInProgress(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ServerContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for ServerLocationInProgress(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10003AB5C()
{
  _BYTE *v0;

  if (*v0)
    return 0x737574617473;
  else
    return 25705;
}

uint64_t sub_10003AB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001010AC);
}

uint64_t sub_10003AB94()
{
  unsigned __int8 *v0;

  return sub_10003AB9C(*v0);
}

uint64_t sub_10003AB9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003ABCC + 4 * byte_1001F8BB1[a1]))(0x6F666E49796DLL, 0xE600000000000000);
}

uint64_t sub_10003ABCC()
{
  return 0x73656369766564;
}

uint64_t sub_10003ABE4()
{
  return 0x7366657270;
}

uint64_t sub_10003ABF8()
{
  return 0x7265776F6C6C6F66;
}

uint64_t sub_10003ACD4()
{
  return 0x6174536863746566;
}

uint64_t sub_10003ACF4()
{
  return 0x6F43726576726573;
}

uint64_t sub_10003AD18()
{
  return 0x6769666E6F63;
}

unint64_t sub_10003AD44()
{
  return 0xD000000000000015;
}

uint64_t storeEnumTagSinglePayload for ServerLocationInProgress(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ServerContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

__n128 initializeWithCopy for ServerConfig(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t storeEnumTagSinglePayload for ServerLocationInProgress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003AEC0 + 4 * byte_1001F7F83[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003AEF4 + 4 * byte_1001F7F7E[v4]))();
}

uint64_t sub_10003AEF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AEFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003AF04);
  return result;
}

uint64_t sub_10003AF10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003AF18);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003AF1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AF24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for ServerContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_10003AF7C + 4 * byte_1001F2D2E[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_10003AFB0 + 4 * byte_1001F2D29[v4]))();
}

uint64_t sub_10003AFB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AFB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003AFC0);
  return result;
}

uint64_t sub_10003AFCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003AFD4);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_10003AFD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AFE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

__n128 initializeWithTake for ServerContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t storeEnumTagSinglePayload for ServerConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_10003B064 + 4 * byte_1001F8BFA[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_10003B098 + 4 * byte_1001F8BF5[v4]))();
}

uint64_t sub_10003B098(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B0A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003B0A8);
  return result;
}

uint64_t sub_10003B0B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003B0BCLL);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_10003B0C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B0C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for ServerBaseResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_10003B120 + 4 * byte_1001F8BF0[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_10003B154 + 4 * byte_1001F8BEB[v4]))();
}

uint64_t sub_10003B154(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B15C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003B164);
  return result;
}

uint64_t sub_10003B170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003B178);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_10003B17C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B184(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for ServerConfig(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t getEnumTagSinglePayload for ServerBaseResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_10003B274()
{
  unsigned __int8 *v0;

  return sub_10003B27C(*v0);
}

uint64_t sub_10003B27C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003B2B0 + 4 * byte_1001F3068[a1]))(0x656D614E707061, 0xE700000000000000);
}

uint64_t sub_10003B2B0()
{
  return 0x707041464D467369;
}

uint64_t sub_10003B2D4()
{
  return 0x4455656369766564;
}

uint64_t sub_10003B2F0()
{
  return 0x6C43656369766564;
}

unint64_t sub_10003B310()
{
  return 0xD000000000000011;
}

uint64_t sub_10003B554()
{
  return 1701869940;
}

uint64_t sub_10003B564()
{
  return 0x6E6F73616572;
}

uint64_t sub_10003B578()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0x61636F4C65646968;
}

uint64_t storeEnumTagSinglePayload for ServerLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10003B60C + 4 * byte_1001F7F8D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003B640 + 4 * byte_1001F7F88[v4]))();
}

uint64_t sub_10003B640(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B648(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003B650);
  return result;
}

uint64_t sub_10003B65C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003B664);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10003B668(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B670(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for LegacyLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016F684);
}

uint64_t storeEnumTagSinglePayload for ServerConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 144) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

uint64_t sub_10003B6F0()
{
  uint64_t v0;

  return sub_10001A2F8(*(_QWORD *)v0, *(void **)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t storeEnumTagSinglePayload for ServerSettingsRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 424) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 432) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 432) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ServerMyInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10003B7FC + 4 * byte_1001F8C0E[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10003B830 + 4 * byte_1001F8C09[v4]))();
}

uint64_t sub_10003B830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003B840);
  return result;
}

uint64_t sub_10003B84C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003B854);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10003B858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

__n128 initializeWithTake for ServerMyInfo(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t storeEnumTagSinglePayload for ServerMyInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ServerMyInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10003B928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for LocalStorageDatabase(0);
  v2 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  *(_QWORD *)(v0 + 952) = Database.readConnection.getter(v1, v2);
  return swift_task_switch(sub_10000C8DC, 0, 0);
}

uint64_t sub_10003B998()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 928) + 112);
  *(_QWORD *)(v0 + 936) = v1;
  return swift_task_switch(sub_100011EAC, v1, 0);
}

uint64_t getEnumTagSinglePayload for ServerCommandResponse(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t getEnumTagSinglePayload for ServerSettingsRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 432))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerPreferences.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003BAA4 + 4 * byte_1001F8C04[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003BAD8 + 4 * byte_1001F8BFF[v4]))();
}

uint64_t sub_10003BAD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BAE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003BAE8);
  return result;
}

uint64_t sub_10003BAF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003BAFCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003BB00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BB08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BB14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 928) = v1;
  *(_QWORD *)(v2 + 920) = a1;
  return swift_task_switch(sub_10003B998, 0, 0);
}

uint64_t sub_10003BB30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for LocalStorageDatabase(0);
  v2 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  *(_QWORD *)(v0 + 208) = Database.readConnection.getter(v1, v2);
  return swift_task_switch(sub_10000BBBC, 0, 0);
}

uint64_t sub_10003BBA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 112);
  *(_QWORD *)(v0 + 192) = v1;
  return swift_task_switch(sub_100011E00, v1, 0);
}

void *initializeWithTake for ServerSettingsRecord(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1B0uLL);
}

uint64_t sub_10003BBCC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F43746E65696C63;
  else
    return 0x6F43726576726573;
}

uint64_t sub_10003BC0C()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 112));
}

uint64_t storeEnumTagSinglePayload for ServerCommandResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t _s13findmylocated21LocationServerRequestV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003BCBC + 4 * byte_1001F98D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003BCF0 + 4 * byte_1001F98D0[v4]))();
}

uint64_t sub_10003BCF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BCF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003BD00);
  return result;
}

uint64_t sub_10003BD0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003BD14);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003BD18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BD20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for InitClientRequestContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_10003BDBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = sub_1000570BC;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 24);
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v5 = sub_10005975C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10003BE30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for LocalStorageDatabase(0);
  v2 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  *(_QWORD *)(v0 + 80) = Database.readConnection.getter(v1, v2);
  return swift_task_switch(sub_100004FE0, 0, 0);
}

uint64_t sub_10003BEA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 112);
  *(_QWORD *)(v0 + 64) = v1;
  return swift_task_switch(sub_100011D28, v1, 0);
}

uint64_t sub_10003BEBC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_10003BEA0, 0, 0);
}

uint64_t sub_10003BED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for LocalStorageDatabase(0);
  v2 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  *(_QWORD *)(v0 + 80) = Database.readConnection.getter(v1, v2);
  return swift_task_switch(sub_10000687C, 0, 0);
}

uint64_t sub_10003BF44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 112);
  *(_QWORD *)(v0 + 64) = v1;
  return swift_task_switch(sub_100011D94, v1, 0);
}

uint64_t sub_10003BF60()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_10003BF44, 0, 0);
}

uint64_t sub_10003BF80()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t getEnumTagSinglePayload for ServerContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 25 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 25) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE6)
    return ((uint64_t (*)(void))((char *)&loc_10003C068 + 4 * byte_1001F3087[v4]))();
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_10003C09C + 4 * byte_1001F3082[v4]))();
}

uint64_t sub_10003C09C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C0A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003C0ACLL);
  return result;
}

uint64_t sub_10003C0B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003C0C0);
  *(_BYTE *)result = a2 + 25;
  return result;
}

uint64_t sub_10003C0C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C0CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for ClientContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE7)
    goto LABEL_17;
  if (a2 + 25 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 25) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 25;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 25;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 25;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1A;
  v8 = v6 - 26;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for LegacyLocation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_10003C1FC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10003C240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_1002615B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003C288(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t Priority;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  v12 = a6[6];
  Priority = type metadata accessor for LocatePriority(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(Priority - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)(Priority - 8) + 72) * a1, a2, Priority);
  v15 = (_QWORD *)(a6[7] + 24 * a1);
  *v15 = a3;
  v15[1] = a4;
  v15[2] = a5;
  v16 = a6[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    a6[2] = v18;
  return result;
}

_QWORD *sub_10003C33C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100037A5C(&qword_100265230);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10003C470(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10003C448(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100032264(a1, a2, a3, a4, &qword_1002655F8, (uint64_t (*)(_QWORD))&type metadata accessor for LocationRequest);
}

uint64_t sub_10003C45C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100032264(a1, a2, a3, a4, &qword_100265640, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

uint64_t sub_10003C470(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

void *sub_10003C560()
{
  return sub_10000D090((uint64_t (*)(_QWORD))&type metadata accessor for Friend, &qword_1002655C8);
}

void *sub_10003C574()
{
  return sub_10000D090((uint64_t (*)(_QWORD))&type metadata accessor for Device, &qword_1002655D0);
}

void sub_10003C58C(uint64_t a1)
{
  uint64_t v1;

  sub_10003C594(a1, *(_QWORD *)(v1 + 16));
}

void sub_10003C594(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

unint64_t sub_10003C5E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_100037A5C(&qword_100261DD0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_100037A5C(&qword_100263350);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10000E37C(v13, (uint64_t)v5, &qword_100261DD0);
    result = sub_10001CBC8((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for Handle(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = type metadata accessor for Location(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17, v10, v21);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10003C798(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_100037A5C(&qword_100263370);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_100037A5C(&qword_100263378);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10000E37C(v13, (uint64_t)v5, &qword_100263370);
    result = sub_1000F40AC((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for Friend(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = type metadata accessor for FriendshipAction(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17, v10, v21);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10003C950(_QWORD *a1)
{
  return sub_1000048AC(a1);
}

unint64_t sub_10003C964()
{
  unint64_t result;

  result = qword_100265D08;
  if (!qword_100265D08)
  {
    result = swift_getWitnessTable(&unk_1001F9C60, &type metadata for LegacyLocationServerRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265D08);
  }
  return result;
}

uint64_t sub_10003C9A8()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000EF6C(v0 + 880, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1)
  {
    v1 = v0 + 1632;
    sub_10004922C((_OWORD *)(v0 + 1632));
  }
  else
  {
    v1 = v0 + 1312;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_10000EF6C(v0 + 112, v0 + 1312, &qword_1002603B0);
    sub_10000EFB0((_QWORD *)(v0 + 1312), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_10000AF28(v0 + 880);
  }
  sub_10000EF6C(v1, v0 + 1472, &qword_1002603B0);
  return swift_task_switch(sub_10000E204, 0, 0);
}

uint64_t sub_10003CA74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2128));
  return swift_task_switch(sub_10003C9A8, v1, 0);
}

uint64_t sub_10003CACC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for FriendshipServiceClient();
  v4 = sub_100018A7C(&qword_100264840, v3, (uint64_t (*)(uint64_t))type metadata accessor for FriendshipServiceClient, (uint64_t)&unk_1001F6EF0);
  return XPCAcceptedClient.hash(into:)(a1, v2, v4);
}

uint64_t *sub_10003CB28(uint64_t *a1)
{
  sub_10002B848(*a1, a1[1], a1[2], a1[3], a1[4]);
  return a1;
}

uint64_t type metadata accessor for RefreshClientEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_100267570;
  if (!qword_100267570)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RefreshClientEndpoint);
  return result;
}

uint64_t sub_10003CB94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for LocationServiceClient();
  v4 = sub_100018A7C(&qword_100262440, v3, (uint64_t (*)(uint64_t))type metadata accessor for LocationServiceClient, (uint64_t)&unk_1001F4F64);
  return XPCAcceptedClient.hash(into:)(a1, v2, v4);
}

uint64_t sub_10003CBF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000825A4();
  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_10003CC18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 176));
    v4 = sub_100180144;
  }
  else
  {
    v4 = sub_10001EDF0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10003CC84()
{
  const void *v0;
  _BYTE v2[432];

  memcpy(v2, v0, sizeof(v2));
  return sub_100013B7C();
}

uint64_t sub_10003CCBC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch(sub_100004F08, v1, 0);
}

uint64_t sub_10003CCDC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch(sub_10000814C, v1, 0);
}

unint64_t sub_10003CCFC()
{
  unint64_t result;

  result = qword_1002632C0;
  if (!qword_1002632C0)
  {
    result = swift_getWitnessTable(&unk_1001F8F5C, &type metadata for ServerBaseResponse);
    atomic_store(result, &qword_1002632C0);
  }
  return result;
}

uint64_t sub_10003CD44(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100008678(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10003CD60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 5304);
  *(_QWORD *)(*(_QWORD *)v1 + 5312) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001E53AC;
  else
    v3 = sub_100028E04;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003CDC4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(v0 + 80))
  {
    v1 = (_QWORD *)swift_task_alloc(dword_100267A1C);
    *(_QWORD *)(v0 + 88) = v1;
    *v1 = v0;
    v1[1] = sub_1001E4030;
    return sub_100008B0C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 16));
  }
  else
  {
    v3 = type metadata accessor for DatabaseError(0);
    v4 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v3, v4, 0, 0);
    v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v5, enum case for DatabaseError.notConnected(_:), v3);
    swift_willThrow(v6);
    v7 = *(_QWORD *)(v0 + 32);
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10003CEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for LocalStorageDatabase(0);
  v2 = sub_100004EA8(&qword_100260A80, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  *(_QWORD *)(v0 + 80) = Database.writeConnection.getter(v1, v2);
  return swift_task_switch(sub_10003CDC4, 0, 0);
}

uint64_t sub_10003CF2C()
{
  uint64_t v0;

  sub_1000D0754();
  *(_QWORD *)(v0 + 72) = 0;
  return swift_task_switch(sub_10003CEBC, *(_QWORD *)(v0 + 64), 0);
}

uint64_t sub_10003CFAC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  *(_QWORD *)(v0 + 64) = v1;
  return swift_task_switch(sub_10003CF2C, v1, 0);
}

uint64_t sub_10003CFC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*(_QWORD *)(v0 + 312))
  {
    if (qword_10025F8F8 != -1)
      swift_once(&qword_10025F8F8, sub_1000CFDC8);
    v1 = *(_QWORD *)(v0 + 296);
    v2 = *(_QWORD *)(v0 + 272);
    v3 = *(_QWORD *)(v0 + 280);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = sub_100037A9C(v2, (uint64_t)qword_10027AC08);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v2);
    swift_bridgeObjectRetain(v4);
    *(_QWORD *)(v0 + 320) = sub_10001F73C(v6);
    swift_bridgeObjectRelease(v4);
    v7 = (_QWORD *)swift_task_alloc(dword_1002679C4);
    *(_QWORD *)(v0 + 328) = v7;
    *v7 = v0;
    v7[1] = sub_1001E27F8;
    v7[7] = *(_QWORD *)(v0 + 80);
    return swift_task_switch(sub_10003BEA0, 0, 0);
  }
  else
  {
    v9 = type metadata accessor for DatabaseError(0);
    v10 = sub_100004EA8(&qword_1002670C0, (uint64_t (*)(uint64_t))&type metadata accessor for DatabaseError, (uint64_t)&protocol conformance descriptor for DatabaseError);
    swift_allocError(v9, v10, 0, 0);
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, enum case for DatabaseError.notConnected(_:), v9);
    swift_willThrow(v12);
    v13 = *(_QWORD *)(v0 + 288);
    v15 = *(_QWORD *)(v0 + 256);
    v14 = *(_QWORD *)(v0 + 264);
    v17 = *(_QWORD *)(v0 + 240);
    v16 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 224);
    v18 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 216);
    v21 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 184);
    v23 = *(_QWORD *)(v0 + 176);
    v24 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10003D1F8()
{
  uint64_t v0;

  sub_1000D0754();
  return swift_task_switch(sub_1001E2788, *(_QWORD *)(v0 + 304), 0);
}

uint64_t sub_10003D330(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_10003D380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100264944);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003D330;
  return sub_10003D3D0(a1, v1);
}

uint64_t sub_10003D3D0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_100037A5C((uint64_t *)&unk_100265180);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10000CCF4, 0, 0);
}

uint64_t sub_10003D42C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:)
                                      + async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:)
                                  + 1));
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_100005AC8;
  return v3(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10003D49C()
{
  uint64_t v0;

  return sub_10006F6F0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003D4B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 56)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of FriendshipProtocol.startFriendsUpdate()[1]);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_10000608C;
    return dispatch thunk of FriendshipProtocol.startFriendsUpdate()(v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 32))(0);
    v6 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10003D558()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 112);
  return swift_task_switch(sub_10003D4B0, 0, 0);
}

uint64_t sub_10003D59C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (_QWORD *)v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10026412C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003BF7C;
  return sub_1000090BC(v2, v3, v4);
}

uint64_t sub_10003D5FC(uint64_t a1, int a2, void *a3)
{
  return sub_100009874(a1, a2, a3, (uint64_t)&unk_100253F08, (uint64_t)sub_10003C588, (void (*)(uint64_t, uint64_t))sub_10003D618);
}

uint64_t sub_10003D618(uint64_t a1, uint64_t a2)
{
  return sub_10000890C(a1, a2, (uint64_t)&unk_100253C38, (uint64_t)"startFriendsUpdate(completion:)", 31, (uint64_t)&unk_100264130);
}

uint64_t getEnumTagSinglePayload for FriendInfoOption.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

void sub_10003D6CC()
{
  char *v0;

  sub_10000C628(*v0);
}

uint64_t type metadata accessor for LocationEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_100265368;
  if (!qword_100265368)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationEndpoint);
  return result;
}

uint64_t sub_10003D710(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100262704);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003D330;
  return sub_1000A9240(a1, v1);
}

uint64_t sub_10003D760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 24);
    swift_errorRetain(v1);
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v2 = type metadata accessor for Logger(0);
    sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
    swift_errorRetain(v1);
    v3 = swift_errorRetain(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter();
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 24);
    if (v6)
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      v13 = swift_slowAlloc(32, -1);
      v14 = v13;
      *(_DWORD *)v8 = 136446466;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000023, 0x80000001001FE0D0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2114;
      swift_errorRetain(v1);
      v10 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(_QWORD *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 14, v8 + 22);
      *v9 = v10;
      sub_10007E9BC(v7, 1);
      sub_10007E9BC(v7, 1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error: %{public}@", (uint8_t *)v8, 0x16u);
      v11 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      sub_10007E9BC(v7, 1);
    }
    else
    {
      sub_10007E9BC(*(_QWORD *)(v0 + 24), 1);
      sub_10007E9BC(v7, 1);
      swift_errorRelease(v1);

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D9C8(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 32) = a2;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_10003D760, 0, 0);
}

uint64_t sub_10003D9E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:)
                                      + async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:)
                                  + 1));
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_100006710;
  return v3(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10003DA54(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100261DFC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100050D74;
  return sub_10001593C(a1);
}

uint64_t sub_10003DAA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void (*v6)(_QWORD, unint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  if (*(_QWORD *)(v0 + 128))
  {
    v1 = *(_QWORD *)(v0 + 88);
    v2 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 96)) + 0x50);
    v3 = *(_QWORD *)((v1 & *(_QWORD *)(v0 + 96)) + 0x58);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of LocationProtocol.startRefreshingLocation(_:)[1]);
    *(_QWORD *)(v0 + 136) = v4;
    *v4 = v0;
    v4[1] = sub_10011D9D4;
    return dispatch thunk of LocationProtocol.startRefreshingLocation(_:)(*(_QWORD *)(v0 + 120), v2, v3);
  }
  else
  {
    v6 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 72);
    v7 = sub_100082560();
    v8 = swift_allocError(&type metadata for LocationServiceError, v7, 0, 0);
    *v9 = 0;
    v6(0, 0xF000000000000000, v8);
    swift_errorRelease(v8);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10003DB84()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 64) + 112);
  return swift_task_switch(sub_10003DAA0, 0, 0);
}

uint64_t sub_10003DBC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (_QWORD *)v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_100263F14);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_10003BF7C;
  return sub_1000085B4(v2, v3, v4, v5, v6);
}

uint64_t sub_10003DC3C(uint64_t a1, int a2, void *a3, void *a4)
{
  return sub_10000CC38(a1, a2, a3, a4, (uint64_t)&unk_100253890, (uint64_t)sub_100121090, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10003DC58);
}

uint64_t sub_10003DC58(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BA58(a1, a2, a3, a4, (uint64_t)&unk_1002537A0, (uint64_t)"refreshingLocation(handles:priority:completion:)", 48, (uint64_t)&unk_100263F18);
}

uint64_t sub_10003DC78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  return swift_task_switch(sub_100009CB8, v1, 0);
}

uint64_t sub_10003DCD0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_BYTE *)(*(_QWORD *)v1 + 252) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100011208, v3, 0);
}

uint64_t type metadata accessor for CommandManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100261B80;
  if (!qword_100261B80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CommandManager);
  return result;
}

uint64_t sub_10003DD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 928);
  v2 = OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands;
  *(_QWORD *)(v0 + 1536) = OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands;
  v3 = v1 + v2;
  swift_beginAccess(v1 + v2, v0 + 784, 1, 0);
  if (*(_QWORD *)(*(_QWORD *)v3 + 16))
  {
    v4 = *(_QWORD *)(v0 + 1520);
    *(_QWORD *)(v0 + 840) = &_swiftEmptySetSingleton;
    return swift_task_switch(sub_100005FBC, v4, 0);
  }
  else
  {
    if (qword_10025F8C0 != -1)
      swift_once(&qword_10025F8C0, sub_100098E4C);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100037A9C(v6, (uint64_t)qword_10027AB38);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v50 = v11;
      *(_DWORD *)v10 = 136446210;
      *(_QWORD *)(v0 + 904) = sub_10002BA84(0xD00000000000002FLL, 0x80000001001FD880, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 904, v0 + 912, v10 + 4, v10 + 12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "CommandManager %{public}s no refresh request left in the coalescedCommands", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

    v12 = *(_QWORD *)(v0 + 1520);
    v49 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    swift_release(v12);
    v13 = *(_QWORD *)(v0 + 1464);
    v14 = *(_QWORD *)(v0 + 1456);
    v15 = *(_QWORD *)(v0 + 1448);
    v16 = *(_QWORD *)(v0 + 1440);
    v17 = *(_QWORD *)(v0 + 1416);
    v18 = *(_QWORD *)(v0 + 1408);
    v19 = *(_QWORD *)(v0 + 1400);
    v20 = *(_QWORD *)(v0 + 1392);
    v21 = *(_QWORD *)(v0 + 1384);
    v22 = *(_QWORD *)(v0 + 1360);
    v23 = *(_QWORD *)(v0 + 1352);
    v24 = *(_QWORD *)(v0 + 1344);
    v25 = *(_QWORD *)(v0 + 1336);
    v26 = *(_QWORD *)(v0 + 1312);
    v27 = *(_QWORD *)(v0 + 1288);
    v28 = *(_QWORD *)(v0 + 1264);
    v29 = *(_QWORD *)(v0 + 1256);
    v30 = *(_QWORD *)(v0 + 1248);
    v31 = *(_QWORD *)(v0 + 1224);
    v32 = *(_QWORD *)(v0 + 1216);
    v33 = *(_QWORD *)(v0 + 1192);
    v34 = *(_QWORD *)(v0 + 1184);
    v35 = *(_QWORD *)(v0 + 1160);
    v36 = *(_QWORD *)(v0 + 1144);
    v37 = *(_QWORD *)(v0 + 1120);
    v38 = *(_QWORD *)(v0 + 1112);
    v39 = *(_QWORD *)(v0 + 1104);
    v40 = *(_QWORD *)(v0 + 1080);
    v41 = *(_QWORD *)(v0 + 1072);
    v42 = *(_QWORD *)(v0 + 1048);
    v43 = *(_QWORD *)(v0 + 1040);
    v44 = *(_QWORD *)(v0 + 1032);
    v45 = *(_QWORD *)(v0 + 1008);
    v46 = *(_QWORD *)(v0 + 984);
    v47 = *(_QWORD *)(v0 + 976);
    v48 = *(_QWORD *)(v0 + 952);
    swift_task_dealloc(*(_QWORD *)(v0 + 1472));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v49);
  }
}

uint64_t sub_10003E174()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 928);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1624));
  return swift_task_switch(sub_1000206E4, v1, 0);
}

uint64_t sub_10003E1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 1664);
  v5[209] = a1;
  v5[210] = a2;
  v5[211] = a3;
  v5[212] = v3;
  swift_task_dealloc(v6);
  if (v3)
  {
    v7 = v5[207];
    v8 = v5[197];
    v9 = v5[196];
    v10 = v5[116];
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v9);
    v11 = sub_10000B698;
    v12 = v10;
  }
  else
  {
    v12 = v5[116];
    v11 = sub_10000B018;
  }
  return swift_task_switch(v11, v12, 0);
}

uint64_t sub_10003E274()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2016);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2144));
  return swift_task_switch(sub_10000EDE4, v1, 0);
}

uint64_t sub_10003E2CC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2072);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1840);
  *(_BYTE *)(*(_QWORD *)v1 + 2200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100010540, v3, 0);
}

uint64_t type metadata accessor for AccountService(uint64_t a1)
{
  return sub_100025C3C(a1, (uint64_t *)&unk_1002612D0, (uint64_t)&nominal type descriptor for AccountService);
}

uint64_t sub_10003E340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100006AB8, v2, 0);
}

ValueMetadata *type metadata accessor for ServerContext()
{
  return &type metadata for ServerContext;
}

unint64_t sub_10003E3B0()
{
  unint64_t result;

  result = qword_100260480;
  if (!qword_100260480)
  {
    result = swift_getWitnessTable(&unk_1001F2D94, &type metadata for ServerContext);
    atomic_store(result, (unint64_t *)&qword_100260480);
  }
  return result;
}

uint64_t sub_10003E3F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100013758(a1, a2);
}

uint64_t storeEnumTagSinglePayload for FMFAPSMessage.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10003E448 + 4 * byte_1001F5650[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10003E468 + 4 * byte_1001F5655[v4]))();
}

_BYTE *sub_10003E448(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10003E468(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003E470(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003E478(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003E480(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003E488(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10003E494()
{
  return 0x54646E6553706174;
}

unint64_t sub_10003E4B0()
{
  unint64_t result;

  result = qword_1002636E8;
  if (!qword_1002636E8)
  {
    result = swift_getWitnessTable(&unk_1001F5AD0, &type metadata for FMFAPSMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002636E8);
  }
  return result;
}

uint64_t sub_10003E4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClientContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E538(_QWORD *a1)
{
  return sub_100015154(a1);
}

uint64_t sub_10003E54C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = (uint64_t *)(v0[30] + OBJC_IVAR____TtC13findmylocated11DataManager_apnsToken);
  v2 = *v1;
  v0[32] = *v1;
  v3 = v1[1];
  v0[33] = v3;
  sub_10001F728(v2, v3);
  return swift_task_switch(sub_10000C408, 0, 0);
}

unint64_t sub_10003E5A8()
{
  unint64_t result;

  result = qword_100260350;
  if (!qword_100260350)
  {
    result = swift_getWitnessTable(&unk_1001F3244, &type metadata for ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260350);
  }
  return result;
}

uint64_t sub_10003E5EC(_QWORD *a1)
{
  return sub_10000F9C0(a1);
}

unint64_t sub_10003E600()
{
  unint64_t result;

  result = qword_1002675C0;
  if (!qword_1002675C0)
  {
    result = swift_getWitnessTable(&unk_1001F8F34, &type metadata for ServerMyInfo);
    atomic_store(result, (unint64_t *)&qword_1002675C0);
  }
  return result;
}

uint64_t sub_10003E644(_QWORD *a1)
{
  return sub_10001334C(a1);
}

uint64_t sub_10003E658(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000C1A4, v3, 0);
}

uint64_t sub_10003E6B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v4 = sub_100173830;
  else
    v4 = sub_10000C320;
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_10003E720(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[4] = a1;
  v2[5] = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v2[6] = v3;
  *v3 = v2;
  v3[1] = sub_100009AE8;
  return daemon.getter();
}

uint64_t sub_10003E76C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DataManager.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003E7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DataManager.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E7EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2936);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 3072));
  return swift_task_switch(sub_100017C98, v1, 0);
}

uint64_t sub_10003E844()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2936);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 3064));
  return swift_task_switch(sub_100017A50, v1, 0);
}

uint64_t sub_10003E89C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 3040);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2936);
  *(_QWORD *)(*(_QWORD *)v1 + 3048) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000163CC, v3, 0);
}

uint64_t sub_10003E8FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v1 = *(_QWORD **)v0;
  v32 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 608));
  v2 = v1[70];
  v3 = v1[69];
  v4 = v1[68];
  v5 = v1[67];
  v6 = v1[66];
  v7 = v1[65];
  v8 = v1[64];
  v9 = v1[61];
  v10 = v1[57];
  v11 = v1[58];
  v15 = v1[56];
  v16 = v1[53];
  v17 = v1[52];
  v18 = v1[51];
  v19 = v1[50];
  v20 = v1[49];
  v21 = v1[48];
  v22 = v1[47];
  v23 = v1[44];
  v24 = v1[43];
  v25 = v1[42];
  v26 = v1[41];
  v27 = v1[40];
  v28 = v1[37];
  v29 = v1[36];
  v30 = v1[33];
  v13 = v1 + 29;
  v12 = v1[29];
  v31 = v13[1];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v12);
  return ((uint64_t (*)(void))v32[1])();
}

uint64_t sub_10003EAD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100033864, v3, 0);
}

uint64_t sub_10003EB30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v4 = sub_100173450;
  else
    v4 = sub_10001017C;
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_10003EB98(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[5] = a1;
  v2[6] = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v2[7] = v3;
  *v3 = v2;
  v3[1] = sub_100008824;
  return daemon.getter();
}

uint64_t sub_10003EBE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10003EC14()
{
  unint64_t result;

  result = qword_10025FD20;
  if (!qword_10025FD20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10025FD20);
  }
  return result;
}

void *sub_10003EC58()
{
  return &protocol witness table for String;
}

uint64_t sub_10003EC64()
{
  return 1;
}

Swift::Int sub_10003EC6C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10003ECAC()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10003ECD0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_10003ED0C()
{
  return 1635017060;
}

uint64_t sub_10003ED1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10003EDA0()
{
  return 0;
}

void sub_10003EDAC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10003EDB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003F930();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003EDE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003F930();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003EE08(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v6 = sub_100037A5C(&qword_10025FD40);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_100036228(a1, v10);
  v12 = sub_10003F930();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharedSecretKey.CodingKeys, &type metadata for SharedSecretKey.CodingKeys, v12, v10, v11);
  v16[0] = a2;
  v16[1] = a3;
  v13 = sub_10003F9B8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

_QWORD *sub_10003EF0C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_10003F2A0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10003EF34(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10003EE08(a1, *v1, v1[1]);
}

Swift::Int sub_10003EF4C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  sub_10001A484(v1, v2);
  Data.hash(into:)(v4, v1, v2);
  sub_100037AB4(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10003EFAC(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  sub_10001A484(v4, v3);
  Data.hash(into:)(a1, v4, v3);
  return sub_100037AB4(v4, v3);
}

Swift::Int sub_10003EFF8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  sub_10001A484(v2, v3);
  Data.hash(into:)(v5, v2, v3);
  sub_100037AB4(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10003F054(uint64_t a1, uint64_t a2)
{
  Swift::String v2;
  unint64_t v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  uint64_t v8;

  v8 = CustomStringConvertible.typeDescription.getter(a1, a2);
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3 = sub_10003EC14();
  v4._countAndFlagsBits = DataProtocol.hexString.getter(&type metadata for Data, v3);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v8;
}

void sub_10003F0E4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  sub_10003F220(*a1, a1[1]);
  *a2 = v3;
  a2[1] = v4;
}

uint64_t sub_10003F110@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_10001A484(v2, v3);
}

void sub_10003F11C(uint64_t *a1)
{
  sub_10010961C(*a1, a1[1]);
}

void sub_10003F130(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  sub_10003F3C4(*a1, a1[1]);
  *a2 = v3;
  a2[1] = v4;
}

unint64_t sub_10003F160()
{
  unint64_t result;

  result = qword_10025FC10;
  if (!qword_10025FC10)
  {
    result = swift_getWitnessTable(&unk_1001F298C, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_10025FC10);
  }
  return result;
}

void *sub_10003F1A4()
{
  return &protocol witness table for String;
}

unint64_t sub_10003F1B4()
{
  unint64_t result;

  result = qword_10025FC18;
  if (!qword_10025FC18)
  {
    result = swift_getWitnessTable(&unk_1001F29C4, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_10025FC18);
  }
  return result;
}

void *sub_10003F1F8()
{
  return &protocol witness table for String;
}

_QWORD *sub_10003F204@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10003F214(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void sub_10003F220(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10003F244(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 32)
  {
    sub_100037AB4(result, a2);
    return 0;
  }
  return result;
}

_QWORD *sub_10003F2A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v3 = sub_100037A5C(&qword_10025FD28);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100036228(a1, v7);
  v10 = sub_10003F930();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SharedSecretKey.CodingKeys, &type metadata for SharedSecretKey.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_10002BB90(a1);
  }
  else
  {
    v11 = sub_10003F974();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    sub_10002BB90(a1);
  }
  return v9;
}

void sub_10003F3C4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = a1;
  v4[1] = a2;
  v2 = sub_1000394E4();
  Data.init<A>(hexString:)(v4, &type metadata for String, v2);
  if (v3 >> 60 != 15)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x10003F46CLL);
}

unint64_t sub_10003F57C()
{
  unint64_t result;

  result = qword_10025FC28;
  if (!qword_10025FC28)
  {
    result = swift_getWitnessTable(&unk_1001F2BB8, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_10025FC28);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SharedSecretKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_10001A484(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for SharedSecretKey(uint64_t a1)
{
  return sub_100037AB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for SharedSecretKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_10001A484(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100037AB4(v5, v6);
  return a1;
}

__n128 initializeWithTake for SharedSecretKey(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for SharedSecretKey(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100037AB4(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharedSecretKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SharedSecretKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharedSecretKey()
{
  return &type metadata for SharedSecretKey;
}

void type metadata accessor for NIFindingRole()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_10025FCF0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_10024F5A0);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10025FCF0);
  }
}

unint64_t sub_10003F798()
{
  unint64_t result;

  result = qword_10025FCF8;
  if (!qword_10025FCF8)
  {
    result = swift_getWitnessTable(&unk_1001F2AAC, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_10025FCF8);
  }
  return result;
}

unint64_t sub_10003F7DC(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_10003F57C();
  a1[2] = sub_10003F820();
  a1[3] = sub_10003F864();
  a1[4] = sub_10003F8A8();
  result = sub_10003F8EC();
  a1[5] = result;
  return result;
}

unint64_t sub_10003F820()
{
  unint64_t result;

  result = qword_10025FD00;
  if (!qword_10025FD00)
  {
    result = swift_getWitnessTable(&unk_1001F2B74, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_10025FD00);
  }
  return result;
}

unint64_t sub_10003F864()
{
  unint64_t result;

  result = qword_10025FD08;
  if (!qword_10025FD08)
  {
    result = swift_getWitnessTable(&unk_1001F2B4C, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_10025FD08);
  }
  return result;
}

unint64_t sub_10003F8A8()
{
  unint64_t result;

  result = qword_10025FD10;
  if (!qword_10025FD10)
  {
    result = swift_getWitnessTable(&unk_1001F2B0C, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_10025FD10);
  }
  return result;
}

unint64_t sub_10003F8EC()
{
  unint64_t result;

  result = qword_10025FD18;
  if (!qword_10025FD18)
  {
    result = swift_getWitnessTable(&unk_1001F2AD4, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_10025FD18);
  }
  return result;
}

unint64_t sub_10003F930()
{
  unint64_t result;

  result = qword_10025FD30;
  if (!qword_10025FD30)
  {
    result = swift_getWitnessTable(&unk_1001F2CA4, &type metadata for SharedSecretKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10025FD30);
  }
  return result;
}

unint64_t sub_10003F974()
{
  unint64_t result;

  result = qword_10025FD38;
  if (!qword_10025FD38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10025FD38);
  }
  return result;
}

unint64_t sub_10003F9B8()
{
  unint64_t result;

  result = qword_10025FD48;
  if (!qword_10025FD48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10025FD48);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SharedSecretKey.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for SharedSecretKey.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10003FA8C + 4 * byte_1001F2980[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10003FAAC + 4 * byte_1001F2985[v4]))();
}

_BYTE *sub_10003FA8C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10003FAAC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003FAB4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003FABC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003FAC4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003FACC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10003FAD8()
{
  return 0;
}

ValueMetadata *type metadata accessor for SharedSecretKey.CodingKeys()
{
  return &type metadata for SharedSecretKey.CodingKeys;
}

unint64_t sub_10003FAF8()
{
  unint64_t result;

  result = qword_10025FD50;
  if (!qword_10025FD50)
  {
    result = swift_getWitnessTable(&unk_1001F2C7C, &type metadata for SharedSecretKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10025FD50);
  }
  return result;
}

unint64_t sub_10003FB40()
{
  unint64_t result;

  result = qword_10025FD58;
  if (!qword_10025FD58)
  {
    result = swift_getWitnessTable(&unk_1001F2BEC, &type metadata for SharedSecretKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10025FD58);
  }
  return result;
}

unint64_t sub_10003FB88()
{
  unint64_t result;

  result = qword_10025FD60;
  if (!qword_10025FD60)
  {
    result = swift_getWitnessTable(&unk_1001F2C14, &type metadata for SharedSecretKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10025FD60);
  }
  return result;
}

uint64_t sub_10003FBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
                                                                   + async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:));
  v9 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
                                  + 1));
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1000087DC;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_10003FC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ServerInteractionController.upload(endpoint:content:credential:)
                                                                   + async function pointer to dispatch thunk of ServerInteractionController.upload(endpoint:content:credential:));
  v9 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of ServerInteractionController.upload(endpoint:content:credential:)
                                  + 1));
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10003BF7C;
  return v11(a1, a2, a3, a4);
}

uint64_t assignWithCopy for ServerContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v8 = *(_QWORD *)(a2 + 136);
  v9 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v10 = *(_QWORD *)(a2 + 152);
  v11 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t assignWithTake for ServerContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  v9 = *(_QWORD *)(a2 + 136);
  v10 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 152);
  v12 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

BOOL sub_10003FE9C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10003FEB0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10003FEF4()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10003FF1C(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10003FF5C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100040364(a1, a2);
  *a3 = result;
  return result;
}

void sub_10003FF80(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_10003FF8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001EC98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003FFB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001EC98();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10003FFDC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[10];
  _OWORD v14[10];

  v2 = a1[7];
  v13[6] = a1[6];
  v13[7] = v2;
  v3 = a1[9];
  v13[8] = a1[8];
  v13[9] = v3;
  v4 = a1[3];
  v13[2] = a1[2];
  v13[3] = v4;
  v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  v7 = a2[7];
  v14[6] = a2[6];
  v14[7] = v7;
  v8 = a2[9];
  v14[8] = a2[8];
  v14[9] = v8;
  v9 = a2[3];
  v14[2] = a2[2];
  v14[3] = v9;
  v10 = a2[5];
  v14[4] = a2[4];
  v14[5] = v10;
  v11 = a2[1];
  v14[0] = *a2;
  v14[1] = v11;
  return sub_1000401DC((uint64_t)v13, (uint64_t)v14) & 1;
}

unint64_t sub_10004005C(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = 8 * v11;
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v15);
    result = sub_1000F3F1C(*(_QWORD *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result) != v16)
      return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_1000401DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    v8 = v6 == v7 && v4 == v5;
    if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, v7, v5, 0) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (*(double *)(a1 + 24) == *(double *)(a2 + 24))
  {
    if ((v9 = *(_QWORD *)(a1 + 32),
          v10 = *(_QWORD *)(a1 + 40),
          v11 = *(_QWORD *)(a2 + 32),
          v12 = *(_QWORD *)(a2 + 40),
          v9 == v11)
      && v10 == v12
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v11, v12, 0) & 1) != 0)
    {
      if (((*(unsigned __int8 *)(a1 + 48) ^ *(unsigned __int8 *)(a2 + 48)) & 1) == 0
        && *(double *)(a1 + 56) == *(double *)(a2 + 56)
        && *(double *)(a1 + 64) == *(double *)(a2 + 64)
        && *(double *)(a1 + 72) == *(double *)(a2 + 72)
        && *(double *)(a1 + 80) == *(double *)(a2 + 80)
        && *(_QWORD *)(a1 + 88) == *(_QWORD *)(a2 + 88)
        && *(double *)(a1 + 96) == *(double *)(a2 + 96)
        && *(double *)(a1 + 104) == *(double *)(a2 + 104)
        && *(double *)(a1 + 112) == *(double *)(a2 + 112)
        && *(double *)(a1 + 120) == *(double *)(a2 + 120))
      {
        if ((v13 = *(_QWORD *)(a1 + 128),
              v14 = *(_QWORD *)(a1 + 136),
              v15 = *(_QWORD *)(a2 + 128),
              v16 = *(_QWORD *)(a2 + 136),
              v13 == v15)
          && v14 == v16
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0) & 1) != 0)
        {
          if (*(_QWORD *)(a1 + 144) == *(_QWORD *)(a2 + 144))
            return sub_10004005C(*(_QWORD *)(a1 + 152), *(_QWORD *)(a2 + 152));
        }
      }
    }
  }
  return 0;
}

uint64_t sub_100040364(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  if (a1 == 0xD000000000000017)
  {
    v4 = 0x80000001001FC8A0;
    if (a2 == 0x80000001001FC8A0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001001FC8A0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 7562610 && a2 == 0xE300000000000000)
  {
    v6 = 0xE300000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7562610, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x80000001001FC8C0)
  {
    v7 = 0x80000001001FC8C0;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000001001FC8C0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E65696C63, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x80000001001FC8E0)
  {
    v9 = 0x80000001001FC8E0;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x80000001001FC8E0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0xD000000000000017)
  {
    v10 = 0x80000001001FC910;
    if (a2 == 0x80000001001FC910)
      goto LABEL_34;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001001FC910, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x80000001001FC930)
  {
    v11 = 0x80000001001FC930;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x80000001001FC930, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_40;
  }
  if (a1 == 0xD000000000000020 && a2 == 0x80000001001FC950)
  {
    v12 = 0x80000001001FC950;
LABEL_46:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x80000001001FC950, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_46;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x80000001001FC980)
  {
    v13 = 0x80000001001FC980;
LABEL_52:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000001001FC980, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_52;
  }
  if (a1 == 0x6449737270 && a2 == 0xE500000000000000)
  {
    v14 = 0xE500000000000000;
LABEL_58:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449737270, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_58;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000001001FC9A0)
  {
    v15 = 0x80000001001FC9A0;
LABEL_64:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001001FC9A0, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_64;
  }
  if (a1 == 0xD000000000000014)
  {
    v16 = 0x80000001001FC9C0;
    if (a2 == 0x80000001001FC9C0)
      goto LABEL_69;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001001FC9C0, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_69:
    swift_bridgeObjectRelease(v16);
    return 11;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000001001FC9E0)
  {
    v17 = 0x80000001001FC9E0;
LABEL_75:
    swift_bridgeObjectRelease(v17);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001001FC9E0, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_75;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000001001FCA00)
  {
    v18 = 0x80000001001FCA00;
LABEL_81:
    swift_bridgeObjectRelease(v18);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001001FCA00, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_81;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001001FCA20)
  {
    v19 = 0x80000001001FCA20;
LABEL_87:
    swift_bridgeObjectRelease(v19);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001FCA20, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_87;
  }
  if (a1 == 0x6F69746172657469 && a2 == 0xEF7265626D754E6ELL)
  {
    v20 = 0xEF7265626D754E6ELL;
LABEL_93:
    swift_bridgeObjectRelease(v20);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69746172657469, 0xEF7265626D754E6ELL, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_93;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001001FCA40)
  {
    swift_bridgeObjectRelease(0x80000001001FCA40);
    return 16;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001001FCA40, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0)
      return 16;
    else
      return 17;
  }
}

_QWORD *sub_1000409A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[5];
  v3 = a1[17];
  v4 = a1[19];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_1000409F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  v3 = a1[5];
  v4 = a1[17];
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100040A4C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100040A54(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ServerContext.CodingKeys()
{
  return &type metadata for ServerContext.CodingKeys;
}

unint64_t sub_100040A70()
{
  unint64_t result;

  result = qword_10025FF38;
  if (!qword_10025FF38)
  {
    result = swift_getWitnessTable(&unk_1001F2E80, &type metadata for ServerContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10025FF38);
  }
  return result;
}

unint64_t sub_100040AB8()
{
  unint64_t result;

  result = qword_10025FF40;
  if (!qword_10025FF40)
  {
    result = swift_getWitnessTable(&unk_1001F2DF0, &type metadata for ServerContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10025FF40);
  }
  return result;
}

unint64_t sub_100040B00()
{
  unint64_t result;

  result = qword_10025FF48;
  if (!qword_10025FF48)
  {
    result = swift_getWitnessTable(&unk_1001F2E18, &type metadata for ServerContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10025FF48);
  }
  return result;
}

uint64_t sub_100040B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027A940);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027A940);
  if (qword_10025F828 != -1)
    swift_once(&qword_10025F828, sub_100043E38);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027A958);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100040BD4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100040BEC, v0, 0);
}

uint64_t sub_100040BEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[2];
  v0[3] = *(_QWORD *)(v1 + 128);
  swift_retain(v1);
  v2 = sub_100037A5C(&qword_1002600E0);
  v3 = sub_100041E2C();
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  v0[4] = v4;
  v0[5] = v5;
  return swift_task_switch(sub_100040C58, v4, v5);
}

uint64_t sub_100040C58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  dispatch thunk of InternetMessaging.set(didDeliverCallback:)(&unk_100260118, v1);
  swift_release(v1);
  return swift_task_switch(sub_100040CA8, v1, 0);
}

uint64_t sub_100040CA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  swift_retain(v0[2]);
  return swift_task_switch(sub_100040CE8, v1, v2);
}

uint64_t sub_100040CE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  dispatch thunk of InternetMessaging.set(messageReceivedCallback:)(&unk_100260128, v1);
  swift_release(v1);
  return swift_task_switch(sub_100040D38, v1, 0);
}

uint64_t sub_100040D38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  swift_retain(v0[2]);
  return swift_task_switch(sub_100040D78, v1, v2);
}

uint64_t sub_100040D78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  dispatch thunk of InternetMessaging.set(dictionaryReceivedCallback:)(&unk_100260138, v1);
  swift_release(v1);
  return swift_task_switch(sub_100040DC8, v1, 0);
}

uint64_t sub_100040DC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  swift_retain(v0[2]);
  return swift_task_switch(sub_100040E08, v1, v2);
}

uint64_t sub_100040E08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  dispatch thunk of InternetMessaging.set(accountChangedCallback:)(&unk_100260148, v1);
  swift_release(v1);
  return swift_task_switch(sub_100040E58, v1, 0);
}

uint64_t sub_100040E58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  swift_retain(v0[2]);
  return swift_task_switch(sub_100040E98, v1, v2);
}

uint64_t sub_100040E98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  dispatch thunk of InternetMessaging.set(devicesChangedCallback:)(&unk_100260158, v1);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100040EFC, a4, 0);
}

uint64_t sub_100040EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v2 + 32);
  v3 = *(_QWORD *)(v2 + 40);
  v5 = sub_100018A7C(qword_1002600B0, a2, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F3038);
  v6 = swift_task_alloc(48);
  *(_QWORD *)(v2 + 48) = v6;
  v7 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v6 + 16) = v3;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 40) = v4;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v2 + 56) = v8;
  *v8 = v2;
  v8[1] = sub_100040FBC;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v8, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v3, v5, &unk_100260210, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_100040FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10004101C, v2, 0);
}

uint64_t sub_10004101C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch(sub_100041044, a6, 0);
}

uint64_t sub_100041044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v2 + 48);
  v3 = *(_QWORD *)(v2 + 56);
  v5 = sub_100018A7C(qword_1002600B0, a2, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F3038);
  v6 = swift_task_alloc(64);
  *(_QWORD *)(v2 + 64) = v6;
  v7 = *(_OWORD *)(v2 + 16);
  v8 = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v6 + 16) = v3;
  *(_OWORD *)(v6 + 24) = v7;
  *(_OWORD *)(v6 + 40) = v8;
  *(_QWORD *)(v6 + 56) = v4;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v2 + 72) = v9;
  *v9 = v2;
  v9[1] = sub_100041108;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v9, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v3, v5, &unk_1002601E0, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_100041108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10004101C, v2, 0);
}

uint64_t sub_100041168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_100041188, a5, 0);
}

uint64_t sub_100041188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = sub_100018A7C(qword_1002600B0, a2, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F3038);
  v5 = swift_task_alloc(64);
  *(_QWORD *)(v2 + 56) = v5;
  v6 = *(_OWORD *)(v2 + 16);
  v7 = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = v6;
  *(_OWORD *)(v5 + 40) = v7;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v2 + 64) = v8;
  *v8 = v2;
  v8[1] = sub_100041248;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v8, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v3, v4, &unk_1002601B8, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_100041248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10004101C, v2, 0);
}

uint64_t sub_1000412A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000412BC, a2, 0);
}

uint64_t sub_1000412BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v2[2];
  v3 = v2[3];
  v5 = sub_100018A7C(qword_1002600B0, a2, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F3038);
  v6 = swift_task_alloc(32);
  v2[4] = v6;
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v2[5] = v7;
  *v7 = v2;
  v7[1] = sub_100041370;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v7, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v3, v5, &unk_100260190, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_100041370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100044CD4, v2, 0);
}

uint64_t sub_1000413D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000413E4, a2, 0);
}

uint64_t sub_1000413E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v2[2];
  v3 = v2[3];
  v5 = sub_100018A7C(qword_1002600B0, a2, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F3038);
  v6 = swift_task_alloc(32);
  v2[4] = v6;
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v2[5] = v7;
  *v7 = v2;
  v7[1] = sub_100041498;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v7, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v3, v5, &unk_100260168, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_100041498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10004101C, v2, 0);
}

uint64_t sub_1000414F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[4] = a1;
  v3[5] = a2;
  v4 = type metadata accessor for SystemVersionNumber(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[8] = swift_task_alloc(v6);
  v3[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_100041568, v2, 0);
}

uint64_t sub_100041568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  NSObject *log;
  uint64_t v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;

  if (qword_10025F820 != -1)
    swift_once(&qword_10025F820, sub_100040B44);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027A940);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v2, v1, v4);
  v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v3, v6, v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  v12 = os_log_type_enabled(v10, v11);
  v14 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 48);
  v15 = *(_QWORD *)(v0 + 56);
  if (v12)
  {
    v30 = *(_QWORD *)(v0 + 64);
    type = v11;
    v17 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v33 = v32;
    *(_DWORD *)v17 = 136315394;
    log = v10;
    v18 = sub_100018A7C(&qword_100260108, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v21 = v20;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(v19, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v13, v16);
    *(_WORD *)(v17 + 12) = 2080;
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v25 = v24;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v23, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v25);
    v22(v30, v16);
    _os_log_impl((void *)&_mh_execute_header, log, type, "STUB: migrate from %s to %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v26 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v26(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48));
    v26(v14, v16);

  }
  v27 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000417FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[14] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[15] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v6);
  v3[17] = swift_task_alloc(v6);
  return swift_task_switch(sub_100041870, v2, 0);
}

uint64_t sub_100041870(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(v1 + 88);
  v3 = *(_QWORD *)(v1 + 136);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 96);
  v7 = *(_QWORD *)(v1 + 104);
  UUID.init()(a1);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v3, v2, v4);
  sub_100043ECC(v6, v1 + 16);
  swift_beginAccess(v7 + 144, v1 + 56, 33, 0);
  sub_1000DDFF8(v1 + 16, v3);
  swift_endAccess(v1 + 56);
  if (qword_10025F820 != -1)
    swift_once(&qword_10025F820, sub_100040B44);
  v9 = *(_QWORD *)(v1 + 128);
  v10 = *(_QWORD *)(v1 + 112);
  v11 = *(_QWORD *)(v1 + 88);
  v12 = type metadata accessor for Logger(0);
  sub_100037A9C(v12, (uint64_t)qword_10027A940);
  v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, v11, v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v1 + 128);
  v18 = *(_QWORD *)(v1 + 112);
  if (v16)
  {
    v27 = *(_QWORD *)(v1 + 120);
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v28 = v20;
    *(_DWORD *)v19 = 136446210;
    v21 = sub_100018A7C(&qword_100260100, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v18, v21);
    v24 = v23;
    *(_QWORD *)(v1 + 80) = sub_10002BA84(v22, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v17, v18);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Added client: %{public}s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 120) + 8))(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 112));
  }

  v25 = *(_QWORD *)(v1 + 128);
  swift_task_dealloc(*(_QWORD *)(v1 + 136));
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100041AEC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for IDSTransportServiceFMF()
{
  return objc_opt_self(_TtC13findmylocated22IDSTransportServiceFMF);
}

uint64_t sub_100041B50()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100041B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.initialLaunchProcessing()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for IDSTransportServiceFMF();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_100041BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10025FF84);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_1000414F8(a1, a2);
}

uint64_t sub_100041C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for IDSTransportServiceFMF();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_100041C78()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10025FF7C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1000087DC;
  v2[2] = v0;
  return swift_task_switch(sub_100040BEC, v0, 0);
}

uint64_t sub_100041CD4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100041CEC, v0, 0);
}

uint64_t sub_100041CEC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 128);
  v1 = sub_100037A5C(&qword_1002600E0);
  v2 = sub_100041E2C();
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_100041D54, v3, v4);
}

uint64_t sub_100041D54()
{
  uint64_t v0;

  dispatch thunk of InternetMessaging.start()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for IDSTransportServiceFMF();
  v2 = sub_100018A7C(&qword_1002600F0, v1, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F2FD8);
  return ActorServiceProtocol.description.getter(v0, v2);
}

uint64_t sub_100041DD4(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(&qword_1002600A8, a2, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F2FB0);
}

uint64_t sub_100041E00(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(qword_1002600B0, a2, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF, (uint64_t)&unk_1001F3038);
}

unint64_t sub_100041E2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002600E8;
  if (!qword_1002600E8)
  {
    v1 = sub_10003C1FC(&qword_1002600E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for InternetMessaging<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002600E8);
  }
  return result;
}

uint64_t sub_100041E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v6[25] = a5;
  v6[26] = a6;
  v6[23] = a3;
  v6[24] = a4;
  v6[22] = a2;
  v8 = type metadata accessor for Destination(0);
  v6[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[28] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v6[29] = v10;
  v6[30] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v6[31] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[32] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v6[33] = v13;
  v6[34] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Account(0);
  v6[35] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v6[36] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v6[37] = v16;
  v6[38] = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[39] = swift_task_alloc(v17);
  v6[40] = swift_task_alloc(v17);
  return swift_task_switch(sub_100041F74, a3, 0);
}

void sub_100041F74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;

  v53 = (__int128 *)(v0 + 16);
  v69 = (__int128 *)(v0 + 56);
  v52 = *(_QWORD *)(v0 + 288);
  v50 = *(_QWORD *)(v0 + 224);
  v51 = *(_QWORD *)(v0 + 256);
  v1 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v1 + 144, v0 + 128, 0, 0);
  v2 = *(_QWORD *)(v1 + 144);
  v48 = v2 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v2 + 64);
  v49 = (unint64_t)(63 - v4) >> 6;
  v54 = *(_QWORD *)(v1 + 144);
  swift_bridgeObjectRetain(v2);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v55 = (v5 - 1) & v5;
      v56 = v6;
      v9 = __clz(__rbit64(v5)) | (v6 << 6);
      goto LABEL_23;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v10 >= v49)
      goto LABEL_31;
    v11 = *(_QWORD *)(v48 + 8 * v10);
    v12 = v6 + 1;
    if (!v11)
    {
      v12 = v6 + 2;
      if (v6 + 2 >= v49)
        goto LABEL_31;
      v11 = *(_QWORD *)(v48 + 8 * v12);
      if (!v11)
      {
        v12 = v6 + 3;
        if (v6 + 3 >= v49)
          goto LABEL_31;
        v11 = *(_QWORD *)(v48 + 8 * v12);
        if (!v11)
        {
          v12 = v6 + 4;
          if (v6 + 4 >= v49)
            goto LABEL_31;
          v11 = *(_QWORD *)(v48 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v55 = (v11 - 1) & v11;
    v56 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
    v14 = *(_QWORD *)(v0 + 320);
    v68 = *(_QWORD *)(v0 + 312);
    v15 = *(_QWORD *)(v0 + 304);
    v63 = *(_QWORD *)(v0 + 296);
    v17 = *(_QWORD *)(v0 + 272);
    v16 = *(_QWORD *)(v0 + 280);
    v65 = *(_QWORD *)(v0 + 264);
    v18 = *(_QWORD *)(v0 + 240);
    v19 = *(_QWORD *)(v0 + 248);
    v60 = v19;
    v62 = v18;
    v64 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 216);
    v61 = v20;
    v58 = *(_QWORD *)(v0 + 200);
    v59 = *(_QWORD *)(v0 + 208);
    v57 = *(_QWORD *)(v0 + 192);
    sub_100043ECC(*(_QWORD *)(v54 + 56) + 40 * v9, (uint64_t)v53);
    v21 = type metadata accessor for TaskPriority(0);
    v67 = *(_QWORD *)(v21 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v14, 1, 1, v21);
    sub_10001A4CC(v53, (uint64_t)v69);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v15, v57, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v17, v58, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v18, v59, v20);
    v22 = *(unsigned __int8 *)(v52 + 80);
    v23 = (v22 + 72) & ~v22;
    v24 = *(unsigned __int8 *)(v51 + 80);
    v25 = (v63 + v24 + v23) & ~v24;
    v26 = *(unsigned __int8 *)(v50 + 80);
    v27 = (v65 + v26 + v25) & ~v26;
    v28 = swift_allocObject(&unk_10024FB30, v27 + v64, v22 | v24 | v26 | 7);
    *(_QWORD *)(v28 + 16) = 0;
    v66 = (_QWORD *)(v28 + 16);
    *(_QWORD *)(v28 + 24) = 0;
    sub_10001A4CC(v69, v28 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v28 + v23, v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v28 + v25, v17, v60);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v28 + v27, v62, v61);
    sub_100044264(v14, v68);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v68, 1, v21);
    v31 = *(_QWORD *)(v0 + 312);
    if (v29 == 1)
    {
      sub_1000442AC(*(_QWORD *)(v0 + 312));
      v32 = 0;
    }
    else
    {
      v33 = TaskPriority.rawValue.getter(v30);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v31, v21);
      v32 = v33;
    }
    v5 = v55;
    v6 = v56;
    v34 = *v66;
    if (*v66)
    {
      v35 = *(_QWORD *)(v28 + 24);
      ObjectType = swift_getObjectType(*v66);
      swift_unknownObjectRetain(v34);
      v37 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v35);
      v39 = v38;
      swift_unknownObjectRelease(v34);
    }
    else
    {
      v37 = 0;
      v39 = 0;
    }
    v40 = **(_QWORD **)(v0 + 176);
    v41 = swift_allocObject(&unk_10024FB58, 32, 7);
    *(_QWORD *)(v41 + 16) = &unk_100260220;
    *(_QWORD *)(v41 + 24) = v28;
    v42 = v39 | v37;
    if (v39 | v37)
    {
      v42 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v37;
      *(_QWORD *)(v0 + 120) = v39;
    }
    v7 = *(_QWORD *)(v0 + 320);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v42;
    *(_QWORD *)(v0 + 168) = v40;
    v8 = swift_task_create(v32 | 0x3100, v0 + 152, (char *)&type metadata for () + 8, &unk_100260228, v41);
    swift_release(v8);
    sub_1000442AC(v7);
  }
  v13 = v6 + 5;
  if (v6 + 5 >= v49)
  {
LABEL_31:
    v43 = *(_QWORD *)(v0 + 312);
    v44 = *(_QWORD *)(v0 + 320);
    v45 = *(_QWORD *)(v0 + 304);
    v46 = *(_QWORD *)(v0 + 272);
    v47 = *(_QWORD *)(v0 + 240);
    swift_release(v54);
    swift_task_dealloc(v44);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v11 = *(_QWORD *)(v48 + 8 * v13);
  if (v11)
  {
    v12 = v6 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v49)
      goto LABEL_31;
    v11 = *(_QWORD *)(v48 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_100042464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_100042480, 0, 0);
}

uint64_t sub_100042480()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[2];
  v2 = v1[3];
  v3 = v1[4];
  sub_100036228(v1, v2);
  v4 = *(int **)(v3 + 24);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[6] = v5;
  *v5 = v0;
  v5[1] = sub_100042504;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v7)(v0[3], v0[4], v0[5], v2, v3);
}

uint64_t sub_100042504()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10004254C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v8[27] = a7;
  v8[28] = a8;
  v8[25] = a5;
  v8[26] = a6;
  v8[23] = a3;
  v8[24] = a4;
  v8[22] = a2;
  v10 = type metadata accessor for MessageContext(0);
  v8[29] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[30] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v8[31] = v12;
  v8[32] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100037A5C(&qword_1002601E8);
  v8[33] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[34] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v8[35] = v15;
  v8[36] = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Destination(0);
  v8[37] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v8[38] = v17;
  v18 = *(_QWORD *)(v17 + 64);
  v8[39] = v18;
  v8[40] = swift_task_alloc((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Account(0);
  v8[41] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v8[42] = v20;
  v21 = *(_QWORD *)(v20 + 64);
  v8[43] = v21;
  v8[44] = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[45] = swift_task_alloc(v22);
  v8[46] = swift_task_alloc(v22);
  return swift_task_switch(sub_10004267C, a3, 0);
}

void sub_10004267C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;

  v58 = (__int128 *)(v0 + 16);
  v79 = (__int128 *)(v0 + 56);
  v57 = *(_QWORD *)(v0 + 336);
  v1 = *(_QWORD *)(v0 + 280);
  v55 = *(_QWORD *)(v0 + 272);
  v56 = *(_QWORD *)(v0 + 304);
  v54 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v2 + 144, v0 + 128, 0, 0);
  v3 = *(_QWORD *)(v2 + 144);
  v51 = v3 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v3 + 64);
  v52 = (unint64_t)(63 - v5) >> 6;
  v53 = v1 + 7;
  v59 = *(_QWORD *)(v2 + 144);
  swift_bridgeObjectRetain(v3);
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v60 = (v6 - 1) & v6;
      v61 = v7;
      v10 = __clz(__rbit64(v6)) | (v7 << 6);
      goto LABEL_23;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v52)
      goto LABEL_31;
    v12 = *(_QWORD *)(v51 + 8 * v11);
    v13 = v7 + 1;
    if (!v12)
    {
      v13 = v7 + 2;
      if (v7 + 2 >= v52)
        goto LABEL_31;
      v12 = *(_QWORD *)(v51 + 8 * v13);
      if (!v12)
      {
        v13 = v7 + 3;
        if (v7 + 3 >= v52)
          goto LABEL_31;
        v12 = *(_QWORD *)(v51 + 8 * v13);
        if (!v12)
        {
          v13 = v7 + 4;
          if (v7 + 4 >= v52)
            goto LABEL_31;
          v12 = *(_QWORD *)(v51 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v60 = (v12 - 1) & v12;
    v61 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    v15 = *(_QWORD *)(v0 + 368);
    v78 = *(_QWORD *)(v0 + 360);
    v16 = *(_QWORD *)(v0 + 352);
    v66 = v16;
    v70 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 320);
    v18 = *(_QWORD *)(v0 + 328);
    v68 = v17;
    v71 = *(_QWORD *)(v0 + 312);
    v20 = *(_QWORD *)(v0 + 288);
    v19 = *(_QWORD *)(v0 + 296);
    v67 = v19;
    v21 = *(_QWORD *)(v0 + 264);
    v69 = v21;
    v73 = *(_QWORD *)(v0 + 248);
    v80 = *(_QWORD *)(v0 + 256);
    v81 = *(_QWORD *)(v0 + 232);
    v65 = *(_QWORD *)(v0 + 224);
    v77 = *(_QWORD *)(v0 + 216);
    v63 = *(_QWORD *)(v0 + 200);
    v64 = *(_QWORD *)(v0 + 208);
    v62 = *(_QWORD *)(v0 + 192);
    sub_100043ECC(*(_QWORD *)(v59 + 56) + 40 * v10, (uint64_t)v58);
    v22 = type metadata accessor for TaskPriority(0);
    v75 = *(_QWORD *)(v22 - 8);
    v76 = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v15, 1, 1, v22);
    sub_10001A4CC(v58, (uint64_t)v79);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v16, v62, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v17, v63, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v20, v64, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v80, v65, v81);
    v23 = *(unsigned __int8 *)(v57 + 80);
    v24 = (v23 + 72) & ~v23;
    v25 = *(unsigned __int8 *)(v56 + 80);
    v26 = (v70 + v25 + v24) & ~v25;
    v27 = *(unsigned __int8 *)(v55 + 80);
    v28 = (v71 + v27 + v26) & ~v27;
    v72 = (v53 + v28) & 0xFFFFFFFFFFFFFFF8;
    v29 = *(unsigned __int8 *)(v54 + 80);
    v30 = (v29 + v72 + 8) & ~v29;
    v31 = swift_allocObject(&unk_10024FAE0, v30 + v73, v23 | v25 | v27 | v29 | 7);
    *(_QWORD *)(v31 + 16) = 0;
    v74 = (_QWORD *)(v31 + 16);
    *(_QWORD *)(v31 + 24) = 0;
    sub_10001A4CC(v79, v31 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v31 + v24, v66, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v31 + v26, v68, v67);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v31 + v28, v20, v69);
    *(_QWORD *)(v31 + v72) = v77;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v31 + v30, v80, v81);
    sub_100044264(v15, v78);
    LODWORD(v24) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v78, 1, v76);
    v32 = swift_bridgeObjectRetain(v77);
    v33 = *(_QWORD *)(v0 + 360);
    if ((_DWORD)v24 == 1)
    {
      sub_1000442AC(*(_QWORD *)(v0 + 360));
      v34 = 0;
    }
    else
    {
      v35 = TaskPriority.rawValue.getter(v32);
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v33, v76);
      v34 = v35;
    }
    v6 = v60;
    v7 = v61;
    v36 = *v74;
    if (*v74)
    {
      v37 = *(_QWORD *)(v31 + 24);
      ObjectType = swift_getObjectType(*v74);
      swift_unknownObjectRetain(v36);
      v39 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v37);
      v41 = v40;
      swift_unknownObjectRelease(v36);
    }
    else
    {
      v39 = 0;
      v41 = 0;
    }
    v42 = **(_QWORD **)(v0 + 176);
    v43 = swift_allocObject(&unk_10024FB08, 32, 7);
    *(_QWORD *)(v43 + 16) = &unk_1002601F8;
    *(_QWORD *)(v43 + 24) = v31;
    v44 = v41 | v39;
    if (v41 | v39)
    {
      v44 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v39;
      *(_QWORD *)(v0 + 120) = v41;
    }
    v8 = *(_QWORD *)(v0 + 368);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v44;
    *(_QWORD *)(v0 + 168) = v42;
    v9 = swift_task_create(v34 | 0x3100, v0 + 152, (char *)&type metadata for () + 8, &unk_100260200, v43);
    swift_release(v9);
    sub_1000442AC(v8);
  }
  v14 = v7 + 5;
  if (v7 + 5 >= v52)
  {
LABEL_31:
    v45 = *(_QWORD *)(v0 + 360);
    v46 = *(_QWORD *)(v0 + 368);
    v47 = *(_QWORD *)(v0 + 352);
    v48 = *(_QWORD *)(v0 + 320);
    v49 = *(_QWORD *)(v0 + 288);
    v50 = *(_QWORD *)(v0 + 256);
    swift_release(v59);
    swift_task_dealloc(v46);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v12 = *(_QWORD *)(v51 + 8 * v14);
  if (v12)
  {
    v13 = v7 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v52)
      goto LABEL_31;
    v12 = *(_QWORD *)(v51 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_100042C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[6] = a8;
  v8[7] = v10;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  return swift_task_switch(sub_100042C30, 0, 0);
}

uint64_t sub_100042C30()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[2];
  v2 = v1[3];
  v3 = v1[4];
  sub_100036228(v1, v2);
  v4 = *(int **)(v3 + 32);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[8] = v5;
  *v5 = v0;
  v5[1] = sub_100042CB8;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v7)(v0[3], v0[4], v0[5], v0[6], v0[7], v2, v3);
}

uint64_t sub_100042CB8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100042D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v7[26] = a6;
  v7[27] = a7;
  v7[24] = a4;
  v7[25] = a5;
  v7[22] = a2;
  v7[23] = a3;
  v9 = type metadata accessor for MessageContext(0);
  v7[28] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[29] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[30] = v11;
  v7[31] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Destination(0);
  v7[32] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[33] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v7[34] = v14;
  v7[35] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Account(0);
  v7[36] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v7[37] = v16;
  v17 = *(_QWORD *)(v16 + 64);
  v7[38] = v17;
  v7[39] = swift_task_alloc((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[40] = swift_task_alloc(v18);
  v7[41] = swift_task_alloc(v18);
  return swift_task_switch(sub_100042DFC, a3, 0);
}

void sub_100042DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v54 = (__int128 *)(v0 + 56);
  v55 = (__int128 *)(v0 + 16);
  v53 = *(_QWORD *)(v0 + 296);
  v1 = *(_QWORD *)(v0 + 272);
  v51 = *(_QWORD *)(v0 + 232);
  v52 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v2 + 144, v0 + 128, 0, 0);
  v3 = *(_QWORD *)(v2 + 144);
  v48 = v3 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v3 + 64);
  v49 = (unint64_t)(63 - v5) >> 6;
  v50 = v1 + 7;
  v56 = *(_QWORD *)(v2 + 144);
  swift_bridgeObjectRetain(v3);
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v57 = (v6 - 1) & v6;
      v58 = v7;
      v10 = __clz(__rbit64(v6)) | (v7 << 6);
      goto LABEL_23;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v49)
      goto LABEL_31;
    v12 = *(_QWORD *)(v48 + 8 * v11);
    v13 = v7 + 1;
    if (!v12)
    {
      v13 = v7 + 2;
      if (v7 + 2 >= v49)
        goto LABEL_31;
      v12 = *(_QWORD *)(v48 + 8 * v13);
      if (!v12)
      {
        v13 = v7 + 3;
        if (v7 + 3 >= v49)
          goto LABEL_31;
        v12 = *(_QWORD *)(v48 + 8 * v13);
        if (!v12)
        {
          v13 = v7 + 4;
          if (v7 + 4 >= v49)
            goto LABEL_31;
          v12 = *(_QWORD *)(v48 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v57 = (v12 - 1) & v12;
    v58 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    v15 = *(_QWORD *)(v0 + 328);
    v72 = *(_QWORD *)(v0 + 320);
    v16 = *(_QWORD *)(v0 + 312);
    v66 = *(_QWORD *)(v0 + 304);
    v18 = *(_QWORD *)(v0 + 280);
    v17 = *(_QWORD *)(v0 + 288);
    v62 = v17;
    v19 = *(_QWORD *)(v0 + 248);
    v20 = *(_QWORD *)(v0 + 256);
    v63 = v18;
    v67 = *(_QWORD *)(v0 + 240);
    v21 = *(_QWORD *)(v0 + 224);
    v64 = v21;
    v65 = v19;
    v61 = *(_QWORD *)(v0 + 216);
    v71 = *(_QWORD *)(v0 + 208);
    v59 = *(_QWORD *)(v0 + 192);
    v60 = *(_QWORD *)(v0 + 200);
    sub_100043ECC(*(_QWORD *)(v56 + 56) + 40 * v10, (uint64_t)v55);
    v69 = type metadata accessor for TaskPriority(0);
    v70 = *(_QWORD *)(v69 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v15, 1, 1, v69);
    sub_10001A4CC(v55, (uint64_t)v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v16, v59, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v18, v60, v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v19, v61, v21);
    v22 = *(unsigned __int8 *)(v53 + 80);
    v23 = (v22 + 72) & ~v22;
    v24 = *(unsigned __int8 *)(v52 + 80);
    v25 = (v66 + v24 + v23) & ~v24;
    v26 = (v50 + v25) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(unsigned __int8 *)(v51 + 80);
    v28 = (v27 + v26 + 8) & ~v27;
    v29 = swift_allocObject(&unk_10024FA90, v28 + v67, v22 | v24 | v27 | 7);
    *(_QWORD *)(v29 + 16) = 0;
    v68 = (_QWORD *)(v29 + 16);
    *(_QWORD *)(v29 + 24) = 0;
    sub_10001A4CC(v54, v29 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v29 + v23, v16, v62);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v29 + v25, v63, v20);
    *(_QWORD *)(v29 + v26) = v71;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v29 + v28, v65, v64);
    sub_100044264(v15, v72);
    LODWORD(v26) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v72, 1, v69);
    v30 = swift_bridgeObjectRetain(v71);
    v31 = *(_QWORD *)(v0 + 320);
    if ((_DWORD)v26 == 1)
    {
      sub_1000442AC(*(_QWORD *)(v0 + 320));
      v32 = 0;
    }
    else
    {
      v33 = TaskPriority.rawValue.getter(v30);
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v31, v69);
      v32 = v33;
    }
    v6 = v57;
    v7 = v58;
    v34 = *v68;
    if (*v68)
    {
      v35 = *(_QWORD *)(v29 + 24);
      ObjectType = swift_getObjectType(*v68);
      swift_unknownObjectRetain(v34);
      v37 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v35);
      v39 = v38;
      swift_unknownObjectRelease(v34);
    }
    else
    {
      v37 = 0;
      v39 = 0;
    }
    v40 = **(_QWORD **)(v0 + 176);
    v41 = swift_allocObject(&unk_10024FAB8, 32, 7);
    *(_QWORD *)(v41 + 16) = &unk_1002601C8;
    *(_QWORD *)(v41 + 24) = v29;
    v42 = v39 | v37;
    if (v39 | v37)
    {
      v42 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v37;
      *(_QWORD *)(v0 + 120) = v39;
    }
    v8 = *(_QWORD *)(v0 + 328);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v42;
    *(_QWORD *)(v0 + 168) = v40;
    v9 = swift_task_create(v32 | 0x3100, v0 + 152, (char *)&type metadata for () + 8, &unk_1002601D0, v41);
    swift_release(v9);
    sub_1000442AC(v8);
  }
  v14 = v7 + 5;
  if (v7 + 5 >= v49)
  {
LABEL_31:
    v43 = *(_QWORD *)(v0 + 320);
    v44 = *(_QWORD *)(v0 + 328);
    v45 = *(_QWORD *)(v0 + 312);
    v46 = *(_QWORD *)(v0 + 280);
    v47 = *(_QWORD *)(v0 + 248);
    swift_release(v56);
    swift_task_dealloc(v44);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v12 = *(_QWORD *)(v48 + 8 * v14);
  if (v12)
  {
    v13 = v7 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v49)
      goto LABEL_31;
    v12 = *(_QWORD *)(v48 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_100043308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch(sub_100043328, 0, 0);
}

uint64_t sub_100043328()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[2];
  v2 = v1[3];
  v3 = v1[4];
  sub_100036228(v1, v2);
  v4 = *(int **)(v3 + 40);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[7] = v5;
  *v5 = v0;
  v5[1] = sub_1000433AC;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v7)(v0[3], v0[4], v0[5], v0[6], v2, v3);
}

uint64_t sub_1000433AC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000433F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v6;

  v4[23] = a3;
  v4[24] = a4;
  v4[22] = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[25] = swift_task_alloc(v6);
  v4[26] = swift_task_alloc(v6);
  return swift_task_switch(sub_100043468, a3, 0);
}

void sub_100043468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;

  v40 = (__int128 *)(v0 + 56);
  v41 = (__int128 *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v1 + 144, v0 + 128, 0, 0);
  v2 = *(_QWORD *)(v1 + 144);
  v38 = v2 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v2 + 64);
  v39 = (unint64_t)(63 - v4) >> 6;
  v42 = *(_QWORD *)(v1 + 144);
  swift_bridgeObjectRetain(v2);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v43 = (v5 - 1) & v5;
      v10 = v6;
      v11 = v9 | (v6 << 6);
      goto LABEL_23;
    }
    v12 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v12 >= v39)
      goto LABEL_31;
    v13 = *(_QWORD *)(v38 + 8 * v12);
    v14 = v6 + 1;
    if (!v13)
    {
      v14 = v6 + 2;
      if (v6 + 2 >= v39)
        goto LABEL_31;
      v13 = *(_QWORD *)(v38 + 8 * v14);
      if (!v13)
      {
        v14 = v6 + 3;
        if (v6 + 3 >= v39)
          goto LABEL_31;
        v13 = *(_QWORD *)(v38 + 8 * v14);
        if (!v13)
        {
          v14 = v6 + 4;
          if (v6 + 4 >= v39)
            goto LABEL_31;
          v13 = *(_QWORD *)(v38 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v43 = (v13 - 1) & v13;
    v10 = v14;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_23:
    v16 = *(_QWORD *)(v0 + 200);
    v17 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 192);
    sub_100043ECC(*(_QWORD *)(v42 + 56) + 40 * v11, (uint64_t)v41);
    v19 = type metadata accessor for TaskPriority(0);
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v17, 1, 1, v19);
    sub_10001A4CC(v41, (uint64_t)v40);
    v21 = (_QWORD *)swift_allocObject(&unk_10024FA40, 80, 7);
    v21[2] = 0;
    v22 = v21 + 2;
    v21[3] = 0;
    sub_10001A4CC(v40, (uint64_t)(v21 + 4));
    v21[9] = v18;
    sub_100044264(v17, v16);
    LODWORD(v16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v16, 1, v19);
    v23 = swift_bridgeObjectRetain(v18);
    v24 = *(_QWORD *)(v0 + 200);
    if ((_DWORD)v16 == 1)
    {
      sub_1000442AC(*(_QWORD *)(v0 + 200));
      v25 = 0;
    }
    else
    {
      v26 = TaskPriority.rawValue.getter(v23);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v19);
      v25 = v26;
    }
    v6 = v10;
    v5 = v43;
    v27 = *v22;
    if (*v22)
    {
      v28 = v21[3];
      ObjectType = swift_getObjectType(*v22);
      swift_unknownObjectRetain(v27);
      v30 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v28);
      v32 = v31;
      swift_unknownObjectRelease(v27);
    }
    else
    {
      v30 = 0;
      v32 = 0;
    }
    v33 = **(_QWORD **)(v0 + 176);
    v34 = swift_allocObject(&unk_10024FA68, 32, 7);
    *(_QWORD *)(v34 + 16) = &unk_1002601A0;
    *(_QWORD *)(v34 + 24) = v21;
    v35 = v32 | v30;
    if (v32 | v30)
    {
      v35 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v30;
      *(_QWORD *)(v0 + 120) = v32;
    }
    v7 = *(_QWORD *)(v0 + 208);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v35;
    *(_QWORD *)(v0 + 168) = v33;
    v8 = swift_task_create(v25 | 0x3100, v0 + 152, (char *)&type metadata for () + 8, &unk_1002601A8, v34);
    swift_release(v8);
    sub_1000442AC(v7);
  }
  v15 = v6 + 5;
  if (v6 + 5 >= v39)
  {
LABEL_31:
    v36 = *(_QWORD *)(v0 + 200);
    v37 = *(_QWORD *)(v0 + 208);
    swift_release(v42);
    swift_task_dealloc(v37);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v13 = *(_QWORD *)(v38 + 8 * v15);
  if (v13)
  {
    v14 = v6 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v39)
      goto LABEL_31;
    v13 = *(_QWORD *)(v38 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_100043820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_100043838, 0, 0);
}

uint64_t sub_100043838()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[2];
  v2 = v1[3];
  v3 = v1[4];
  sub_100036228(v1, v2);
  v4 = *(int **)(v3 + 48);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[4] = v5;
  *v5 = v0;
  v5[1] = sub_1000438B8;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v7)(v0[3], v2, v3);
}

uint64_t sub_1000438B8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100043900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v6;

  v4[23] = a3;
  v4[24] = a4;
  v4[22] = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C((uint64_t *)&unk_100265180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[25] = swift_task_alloc(v6);
  v4[26] = swift_task_alloc(v6);
  return swift_task_switch(sub_100043974, a3, 0);
}

void sub_100043974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;

  v40 = (__int128 *)(v0 + 56);
  v41 = (__int128 *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v1 + 144, v0 + 128, 0, 0);
  v2 = *(_QWORD *)(v1 + 144);
  v38 = v2 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v2 + 64);
  v39 = (unint64_t)(63 - v4) >> 6;
  v42 = *(_QWORD *)(v1 + 144);
  swift_bridgeObjectRetain(v2);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v43 = (v5 - 1) & v5;
      v10 = v6;
      v11 = v9 | (v6 << 6);
      goto LABEL_23;
    }
    v12 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v12 >= v39)
      goto LABEL_31;
    v13 = *(_QWORD *)(v38 + 8 * v12);
    v14 = v6 + 1;
    if (!v13)
    {
      v14 = v6 + 2;
      if (v6 + 2 >= v39)
        goto LABEL_31;
      v13 = *(_QWORD *)(v38 + 8 * v14);
      if (!v13)
      {
        v14 = v6 + 3;
        if (v6 + 3 >= v39)
          goto LABEL_31;
        v13 = *(_QWORD *)(v38 + 8 * v14);
        if (!v13)
        {
          v14 = v6 + 4;
          if (v6 + 4 >= v39)
            goto LABEL_31;
          v13 = *(_QWORD *)(v38 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v43 = (v13 - 1) & v13;
    v10 = v14;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_23:
    v16 = *(_QWORD *)(v0 + 200);
    v17 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 192);
    sub_100043ECC(*(_QWORD *)(v42 + 56) + 40 * v11, (uint64_t)v41);
    v19 = type metadata accessor for TaskPriority(0);
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v17, 1, 1, v19);
    sub_10001A4CC(v41, (uint64_t)v40);
    v21 = (_QWORD *)swift_allocObject(&unk_10024F9F0, 80, 7);
    v21[2] = 0;
    v22 = v21 + 2;
    v21[3] = 0;
    sub_10001A4CC(v40, (uint64_t)(v21 + 4));
    v21[9] = v18;
    sub_100044264(v17, v16);
    LODWORD(v16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v16, 1, v19);
    v23 = swift_bridgeObjectRetain(v18);
    v24 = *(_QWORD *)(v0 + 200);
    if ((_DWORD)v16 == 1)
    {
      sub_1000442AC(*(_QWORD *)(v0 + 200));
      v25 = 0;
    }
    else
    {
      v26 = TaskPriority.rawValue.getter(v23);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v19);
      v25 = v26;
    }
    v6 = v10;
    v5 = v43;
    v27 = *v22;
    if (*v22)
    {
      v28 = v21[3];
      ObjectType = swift_getObjectType(*v22);
      swift_unknownObjectRetain(v27);
      v30 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v28);
      v32 = v31;
      swift_unknownObjectRelease(v27);
    }
    else
    {
      v30 = 0;
      v32 = 0;
    }
    v33 = **(_QWORD **)(v0 + 176);
    v34 = swift_allocObject(&unk_10024FA18, 32, 7);
    *(_QWORD *)(v34 + 16) = &unk_100260178;
    *(_QWORD *)(v34 + 24) = v21;
    v35 = v32 | v30;
    if (v32 | v30)
    {
      v35 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v30;
      *(_QWORD *)(v0 + 120) = v32;
    }
    v7 = *(_QWORD *)(v0 + 208);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v35;
    *(_QWORD *)(v0 + 168) = v33;
    v8 = swift_task_create(v25 | 0x3100, v0 + 152, (char *)&type metadata for () + 8, &unk_100260180, v34);
    swift_release(v8);
    sub_1000442AC(v7);
  }
  v15 = v6 + 5;
  if (v6 + 5 >= v39)
  {
LABEL_31:
    v36 = *(_QWORD *)(v0 + 200);
    v37 = *(_QWORD *)(v0 + 208);
    swift_release(v42);
    swift_task_dealloc(v37);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v13 = *(_QWORD *)(v38 + 8 * v15);
  if (v13)
  {
    v14 = v6 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v39)
      goto LABEL_31;
    v13 = *(_QWORD *)(v38 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_100043D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_100043D44, 0, 0);
}

uint64_t sub_100043D44()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[2];
  v2 = v0[3];
  v3 = v1[3];
  v4 = v1[4];
  sub_100036228(v1, v3);
  swift_bridgeObjectRetain(v2);
  v6 = sub_10016B590(v5);
  v0[4] = v6;
  swift_bridgeObjectRelease(v2);
  v7 = *(int **)(v4 + 56);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  v0[5] = v8;
  *v8 = v0;
  v8[1] = sub_100043DE8;
  return v10(v6, v3, v4);
}

uint64_t sub_100043DE8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 32);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100043E38()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027A958);
  sub_100037A9C(v0, (uint64_t)qword_10027A958);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0xD000000000000017, 0x80000001001FCB00);
}

uint64_t sub_100043EB8()
{
  uint64_t v0;

  return sub_100043EC4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100043EC4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100043ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *sub_100043F10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100043F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc(dword_100260114);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_10003BF7C;
  v8[4] = a3;
  v8[5] = v3;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch(sub_100040EFC, v3, 0);
}

uint64_t sub_100043FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;

  v12 = (_QWORD *)swift_task_alloc(dword_100260124);
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_10003BF7C;
  v12[6] = a5;
  v12[7] = v5;
  v12[4] = a3;
  v12[5] = a4;
  v12[2] = a1;
  v12[3] = a2;
  return swift_task_switch(sub_100041044, v5, 0);
}

uint64_t sub_10004404C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc(dword_100260134);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_10003BF7C;
  v10[5] = a4;
  v10[6] = v4;
  v10[3] = a2;
  v10[4] = a3;
  v10[2] = a1;
  return swift_task_switch(sub_100041188, v4, 0);
}

uint64_t sub_1000440D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100260144);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_1000412BC, v1, 0);
}

uint64_t sub_100044130(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100260154);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_1000413E4, v1, 0);
}

uint64_t sub_100044190(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_100260164);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_10003BF7C;
  return sub_100043900(a1, a2, v7, v6);
}

uint64_t sub_100044200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 32;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = (_QWORD *)swift_task_alloc(dword_100260174);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10003BF7C;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_100043D44, 0, 0);
}

uint64_t sub_100044264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C((uint64_t *)&unk_100265180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000442AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100037A5C((uint64_t *)&unk_100265180);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000442EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100044310(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100261984);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100261980 + dword_100261980))(a1, v4);
}

uint64_t sub_100044380(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_10026018C);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_1000087DC;
  return sub_1000433F4(a1, a2, v7, v6);
}

uint64_t sub_1000443F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 32;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = (_QWORD *)swift_task_alloc(dword_10026019C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10003BF7C;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_100043838, 0, 0);
}

uint64_t sub_100044454(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100261984);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000087DC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100261980 + dword_100261980))(a1, v4);
}

uint64_t sub_1000444C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = (_QWORD *)swift_task_alloc(dword_1002601B4);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_10003BF7C;
  return sub_100042D00(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_100044554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = type metadata accessor for Account(0);
  v1 = *(_QWORD *)(v18 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 72) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v17 = type metadata accessor for Destination(0);
  v5 = *(_QWORD *)(v17 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = (*(_QWORD *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = type metadata accessor for MessageContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v8 + v11 + 8) & ~v11;
  v15 = v12 + *(_QWORD *)(v10 + 64);
  v16 = v9;
  v13 = v2 | v6 | v11 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10002BB90((_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v18);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v17);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8));
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v16);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_10004466C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = *(_QWORD *)(type metadata accessor for Account(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for Destination(0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessageContext(0) - 8) + 80);
  v9 = v7 + v8 + 8;
  v10 = v0 + 32;
  v11 = v0 + v3;
  v12 = v0 + v6;
  v13 = *(_QWORD *)(v0 + v7);
  v14 = v0 + (v9 & ~v8);
  v15 = (_QWORD *)swift_task_alloc(dword_1002601C4);
  *(_QWORD *)(v1 + 16) = v15;
  *v15 = v1;
  v15[1] = sub_10003BF7C;
  v15[5] = v13;
  v15[6] = v14;
  v15[3] = v11;
  v15[4] = v12;
  v15[2] = v10;
  return swift_task_switch(sub_100043328, 0, 0);
}

uint64_t sub_100044758(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v11 = v2[6];
  v10 = v2[7];
  v12 = (_QWORD *)swift_task_alloc(dword_1002601DC);
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_10003BF7C;
  return sub_10004254C(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_1000447EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = type metadata accessor for Account(0);
  v1 = *(_QWORD *)(v24 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v19 = (v2 + 72) & ~v2;
  v3 = *(_QWORD *)(v1 + 64);
  v23 = type metadata accessor for Destination(0);
  v4 = *(_QWORD *)(v23 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v18 = (v19 + v3 + v5) & ~v5;
  v6 = *(_QWORD *)(v4 + 64);
  v22 = sub_100037A5C(&qword_1002601E8);
  v7 = *(_QWORD *)(v22 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v18 + v6 + v8) & ~v8;
  v10 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = v10;
  v11 = type metadata accessor for MessageContext(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v10 + v13 + 8) & ~v13;
  v20 = v14 + *(_QWORD *)(v12 + 64);
  v21 = v11;
  v15 = v2 | v5 | v13 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10002BB90((_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v19, v24);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v18, v23);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v22);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v17));
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0 + v14, v21);
  return swift_deallocObject(v0, v20, v15);
}

uint64_t sub_100044958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = *(_QWORD *)(type metadata accessor for Account(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for Destination(0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_100037A5C(&qword_1002601E8) - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessageContext(0) - 8) + 80);
  v12 = v10 + v11 + 8;
  v13 = v0 + 32;
  v14 = v0 + v3;
  v15 = v0 + v6;
  v16 = v0 + v9;
  v17 = *(_QWORD *)(v0 + v10);
  v18 = v0 + (v12 & ~v11);
  v19 = (_QWORD *)swift_task_alloc(dword_1002601F4);
  *(_QWORD *)(v1 + 16) = v19;
  *v19 = v1;
  v19[1] = sub_10003BF7C;
  v19[6] = v17;
  v19[7] = v18;
  v19[4] = v15;
  v19[5] = v16;
  v19[2] = v13;
  v19[3] = v14;
  return swift_task_switch(sub_100042C30, 0, 0);
}

uint64_t sub_100044A6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_10026020C);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10003BF7C;
  return sub_100041E78(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_100044AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = type metadata accessor for Account(0);
  v1 = *(_QWORD *)(v17 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 72) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v16 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v16 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = type metadata accessor for Destination(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + v11) & ~v11;
  v15 = v12 + *(_QWORD *)(v10 + 64);
  v13 = v2 | v6 | v11 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10002BB90((_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_100044BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v2 = *(_QWORD *)(type metadata accessor for Account(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Destination(0) - 8) + 80);
  v9 = v6 + v7 + v8;
  v10 = v0 + 32;
  v11 = v0 + v3;
  v12 = v0 + v6;
  v13 = v0 + (v9 & ~v8);
  v14 = (_QWORD *)swift_task_alloc(dword_10026021C);
  *(_QWORD *)(v1 + 16) = v14;
  *v14 = v1;
  v14[1] = sub_10003BF7C;
  v14[4] = v12;
  v14[5] = v13;
  v14[2] = v10;
  v14[3] = v11;
  return swift_task_switch(sub_100042480, 0, 0);
}

uint64_t sub_100044CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[8] = a3;
  v5[9] = a4;
  v5[6] = a1;
  v5[7] = a2;
  v7 = sub_100037A5C(&qword_100260238);
  v5[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Account(0);
  v5[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[12] = v9;
  v5[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_1002650A0);
  v5[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v5[15] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[16] = v12;
  v5[17] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease(a5);
  return swift_task_switch(sub_100044DB8, 0, 0);
}

void sub_100044DB8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;

  v1 = (_QWORD *)v0[6];
  sub_10000F014(0);
  *v1 = v2;
  v1[1] = v3;
  v4 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (!v4)
  {
    __break(1u);
    goto LABEL_15;
  }
  v5 = v4;
  v7 = v0[16];
  v6 = v0[17];
  v8 = v0[15];
  v9 = v0[6];
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v5, "applicationIsInstalled:", v10);

  *(_BYTE *)(v9 + 16) = v11 ^ 1;
  *(_QWORD *)(v9 + 24) = static SystemInfo.uniqueDeviceID.getter();
  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 40) = static SystemInfo.deviceClass.getter();
  *(_QWORD *)(v9 + 48) = v13;
  *(_BYTE *)(v9 + 56) = 1;
  *(_QWORD *)(v9 + 64) = static SystemInfo.productType.getter();
  *(_QWORD *)(v9 + 72) = v14;
  *(_QWORD *)(v9 + 80) = static SystemInfo.osVersion.getter();
  *(_QWORD *)(v9 + 88) = v15;
  *(_QWORD *)(v9 + 96) = static SystemInfo.buildVersion.getter();
  *(_QWORD *)(v9 + 104) = v16;
  v17 = (int *)type metadata accessor for ClientContext(0);
  v0[18] = v17;
  v18 = static SystemInfo.lockState.getter();
  v19 = static Date.now.getter(v18);
  v20 = Date.timeIntervalSince1970.getter(v19);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  *(double *)(v9 + v17[13]) = v20 * 1000.0;
  v21 = sub_100011058();
  v22 = (uint64_t *)(v9 + v17[14]);
  *v22 = v21;
  v22[1] = v23;
  *(_BYTE *)(v9 + v17[15]) = 1;
  v24 = (_QWORD *)(v9 + v17[16]);
  *v24 = 3157559;
  v24[1] = 0xE300000000000000;
  v25 = static SystemInfo.platform.getter();
  v26 = (uint64_t *)(v9 + v17[17]);
  *v26 = v25;
  v26[1] = v27;
  v28 = objc_msgSend((id)objc_opt_self(GEOCountryConfiguration), "sharedConfiguration");
  if (!v28)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v29 = v28;
  v30 = objc_msgSend(v28, "countryCode");

  if (v30)
  {
    v31 = v0[14];
    v32 = v0[9];
    v33 = v0[6];
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v36 = v35;

    v37 = (uint64_t *)(v33 + v17[18]);
    *v37 = v34;
    v37[1] = v36;
    v38 = static SystemInfo.regionCode.getter();
    v39 = (uint64_t *)(v33 + v17[19]);
    *v39 = v38;
    v39[1] = v40;
    v41 = Account.icloudIdentifier.getter(v38);
    v42 = (uint64_t *)(v33 + v17[20]);
    *v42 = v41;
    v42[1] = v43;
    sub_10000E37C(v32, v31, &qword_1002650A0);
    v44 = type metadata accessor for Handle(0);
    v45 = *(_QWORD *)(v44 - 8);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v31, 1, v44);
    v47 = v0[13];
    v48 = v0[14];
    v50 = v0[11];
    v49 = v0[12];
    v51 = v0[7];
    if ((_DWORD)v46 == 1)
    {
      sub_1000087A0(v0[14], &qword_1002650A0);
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v47, v51, v50);
    }
    else
    {
      v81 = v0[13];
      v53 = Handle.identifier.getter(v46);
      v55 = v54;
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v48, v44);
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v81, v51, v50);
      if (v55)
        goto LABEL_8;
    }
    v53 = Account.icloudIdentifier.getter(v52);
    v55 = v56;
LABEL_8:
    v57 = v0[13];
    v59 = v0[10];
    v58 = v0[11];
    v60 = v0[8];
    v61 = v0[6];
    v62 = *(void (**)(uint64_t, uint64_t))(v0[12] + 8);
    v0[19] = v62;
    v62(v57, v58);
    v63 = (uint64_t *)(v61 + v17[22]);
    *v63 = v53;
    v63[1] = v55;
    v64 = v61 + v17[24];
    *(_QWORD *)v64 = 0;
    *(_BYTE *)(v64 + 8) = 1;
    sub_10000E37C(v60, v59, &qword_100260238);
    v65 = type metadata accessor for RequestOrigin(0);
    v66 = *(_QWORD *)(v65 - 8);
    v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v59, 1, v65);
    v68 = v0[10];
    if (v67 == 1)
    {
      sub_1000087A0(v0[10], &qword_100260238);
    }
    else
    {
      v69 = RequestOrigin.contextBundleApp.getter();
      v71 = v70;
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v68, v65);
      if (v71)
      {
        v72 = v17[23];
        *(_QWORD *)(v0[6] + v72) = v69;
LABEL_13:
        v76 = v0[6];
        *(_QWORD *)(v76 + v72 + 8) = v71;
        *(_BYTE *)(v76 + v17[25]) = 2;
        *(_QWORD *)(v76 + v17[26]) = 0;
        v77 = (_QWORD *)(v76 + v17[27]);
        *v77 = 0;
        v77[1] = 0;
        v78 = (_QWORD *)(v76 + v17[28]);
        *v78 = 0;
        v78[1] = 0;
        v79 = (_QWORD *)(v76 + v17[29]);
        *v79 = 0;
        v79[1] = 0;
        v80 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
        v0[20] = v80;
        *v80 = v0;
        v80[1] = sub_1000451FC;
        daemon.getter();
        return;
      }
    }
    v73 = v0[6];
    sub_10000F014(3);
    v71 = v74;
    v72 = v17[23];
    *(_QWORD *)(v73 + v72) = v75;
    goto LABEL_13;
  }
LABEL_16:
  __break(1u);
}

uint64_t sub_1000451FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 160);
  v5 = *v1;
  *(_QWORD *)(*v1 + 168) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 176) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1000452E4;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000452E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 176);
  v4[23] = a1;
  v4[24] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10004551C;
    v7 = 0;
  }
  else
  {
    swift_release(v4[21]);
    v6 = sub_100045360;
    v7 = a1;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100045360()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = (uint64_t *)(v0[23] + OBJC_IVAR____TtC13findmylocated11DataManager_apnsToken);
  v2 = *v1;
  v0[25] = *v1;
  v3 = v1[1];
  v0[26] = v3;
  sub_10001F728(v2, v3);
  return swift_task_switch(sub_1000453BC, 0, 0);
}

uint64_t sub_1000453BC()
{
  uint64_t v0;
  unint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 208);
  if (v1 >> 60 == 15)
  {
    v2 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    v3 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 56);
    swift_release(*(_QWORD *)(v0 + 184));
    sub_1000087A0(v4, &qword_1002650A0);
    sub_1000087A0(v5, &qword_100260238);
    v2(v6, v3);
    v7 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 184);
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    v11 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 24) = v1;
    v15 = sub_10003EC14();
    v7 = DataProtocol.hexString.getter(&type metadata for Data, v15);
    v8 = v16;
    swift_release(v9);
    sub_1000087A0(v12, &qword_1002650A0);
    sub_1000087A0(v13, &qword_100260238);
    v10(v14, v11);
    sub_100037AB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  }
  v17 = (uint64_t *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 144) + 84));
  *v17 = v7;
  v17[1] = v8;
  v18 = *(_QWORD *)(v0 + 104);
  v19 = *(_QWORD *)(v0 + 112);
  v20 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004551C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;

  swift_release(*(_QWORD *)(v0 + 168));
  if (qword_10025F8C8 != -1)
    swift_once(&qword_10025F8C8, sub_1000A27C4);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB78);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 192);
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 56);
  if (v6)
  {
    v25 = *(_QWORD *)(v0 + 88);
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    v24 = *(_QWORD *)(v0 + 56);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v27 = v14;
    *(_DWORD *)v13 = 136446210;
    *(_QWORD *)(v0 + 32) = v7;
    swift_errorRetain(v7);
    v15 = sub_100037A5C(&qword_100265260);
    v16 = String.init<A>(describing:)(v0 + 32, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v16, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ERROR: %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v7);
    sub_1000087A0(v11, &qword_1002650A0);
    sub_1000087A0(v10, &qword_100260238);
    v26(v24, v25);
  }
  else
  {

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    sub_1000087A0(v11, &qword_1002650A0);
    sub_1000087A0(v10, &qword_100260238);
    v8(v12, v9);
  }
  v19 = (_QWORD *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 144) + 84));
  *v19 = 0;
  v19[1] = 0;
  v20 = *(_QWORD *)(v0 + 104);
  v21 = *(_QWORD *)(v0 + 112);
  v22 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000457C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;

  swift_release(*(_QWORD *)(v0 + 224));
  if (qword_10025F8C8 != -1)
    swift_once(&qword_10025F8C8, sub_1000A27C4);
  v1 = *(_QWORD *)(v0 + 248);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB78);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 248);
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 56);
  if (v6)
  {
    v25 = *(_QWORD *)(v0 + 144);
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    v24 = *(_QWORD *)(v0 + 56);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v27 = v14;
    *(_DWORD *)v13 = 136446210;
    *(_QWORD *)(v0 + 32) = v7;
    swift_errorRetain(v7);
    v15 = sub_100037A5C(&qword_100265260);
    v16 = String.init<A>(describing:)(v0 + 32, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v16, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ERROR: %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v7);
    sub_1000087A0(v11, &qword_1002650A0);
    sub_1000087A0(v10, &qword_100260238);
    v26(v24, v25);
  }
  else
  {

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    sub_1000087A0(v11, &qword_1002650A0);
    sub_1000087A0(v10, &qword_100260238);
    v8(v12, v9);
  }
  v19 = (_QWORD *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 200) + 84));
  *v19 = 0;
  v19[1] = 0;
  v20 = *(_QWORD *)(v0 + 160);
  v21 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100045A74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  int *v79;
  char v80;
  uint64_t v81;

  v5 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v76 = *(_QWORD *)(v5 - 8);
  v77 = v5;
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v75 = sub_100037A5C(&qword_100260348);
  v8 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = (int *)type metadata accessor for ClientContext(0);
  __chkstk_darwin(v79);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v78 = a1;
  sub_100036228(a1, v13);
  v15 = sub_10003E5A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ClientContext.CodingKeys, &type metadata for ClientContext.CodingKeys, v15, v13, v14);
  if (v2)
    return sub_10002BB90(v78);
  v73 = a2;
  v74 = v8;
  LOBYTE(v81) = 0;
  v16 = v75;
  *(_QWORD *)v12 = KeyedDecodingContainer.decode(_:forKey:)(&v81, v75);
  *((_QWORD *)v12 + 1) = v17;
  LOBYTE(v81) = 1;
  v18 = KeyedDecodingContainer.decode(_:forKey:)(&v81, v16);
  v19 = v79;
  v12[16] = v18 & 1;
  LOBYTE(v81) = 2;
  *((_QWORD *)v12 + 3) = KeyedDecodingContainer.decode(_:forKey:)(&v81, v16);
  *((_QWORD *)v12 + 4) = v20;
  LOBYTE(v81) = 3;
  *((_QWORD *)v12 + 5) = KeyedDecodingContainer.decode(_:forKey:)(&v81, v16);
  *((_QWORD *)v12 + 6) = v21;
  LOBYTE(v81) = 4;
  v12[56] = KeyedDecodingContainer.decode(_:forKey:)(&v81, v16) & 1;
  LOBYTE(v81) = 5;
  *((_QWORD *)v12 + 8) = KeyedDecodingContainer.decode(_:forKey:)(&v81, v16);
  *((_QWORD *)v12 + 9) = v22;
  LOBYTE(v81) = 6;
  *((_QWORD *)v12 + 10) = KeyedDecodingContainer.decode(_:forKey:)(&v81, v16);
  *((_QWORD *)v12 + 11) = v23;
  LOBYTE(v81) = 7;
  *((_QWORD *)v12 + 12) = KeyedDecodingContainer.decode(_:forKey:)(&v81, v16);
  *((_QWORD *)v12 + 13) = v24;
  LOBYTE(v81) = 8;
  v25 = sub_100004EA8(&qword_100260358, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v77, &v81, v16, v77, v25);
  v26.n128_f64[0] = (*(double (**)(char *, _QWORD *, uint64_t))(v76 + 32))(&v12[v19[12]], v7, v77);
  LOBYTE(v81) = 9;
  v27 = KeyedDecodingContainer.decode(_:forKey:)(&v81, v16, v26);
  *(double *)&v12[v79[13]] = v27;
  LOBYTE(v81) = 10;
  v28 = KeyedDecodingContainer.decode(_:forKey:)(&v81, v75);
  v29 = (uint64_t *)&v12[v79[14]];
  *v29 = v28;
  v29[1] = v30;
  LOBYTE(v81) = 11;
  v31 = KeyedDecodingContainer.decode(_:forKey:)(&v81, v75);
  v12[v79[15]] = v31 & 1;
  LOBYTE(v81) = 12;
  v32 = KeyedDecodingContainer.decode(_:forKey:)(&v81, v75);
  v33 = (uint64_t *)&v12[v79[16]];
  *v33 = v32;
  v33[1] = v34;
  LOBYTE(v81) = 13;
  v35 = KeyedDecodingContainer.decode(_:forKey:)(&v81, v75);
  v36 = (uint64_t *)&v12[v79[17]];
  *v36 = v35;
  v36[1] = v37;
  LOBYTE(v81) = 14;
  v38 = KeyedDecodingContainer.decode(_:forKey:)(&v81, v75);
  v39 = (uint64_t *)&v12[v79[18]];
  *v39 = v38;
  v39[1] = v40;
  LOBYTE(v81) = 15;
  v41 = KeyedDecodingContainer.decode(_:forKey:)(&v81, v75);
  v42 = (uint64_t *)&v12[v79[19]];
  *v42 = v41;
  v42[1] = v43;
  LOBYTE(v81) = 16;
  v44 = KeyedDecodingContainer.decode(_:forKey:)(&v81, v75);
  v45 = (uint64_t *)&v12[v79[20]];
  *v45 = v44;
  v45[1] = v46;
  LOBYTE(v81) = 17;
  v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v75);
  v48 = (uint64_t *)&v12[v79[21]];
  *v48 = v47;
  v48[1] = v49;
  LOBYTE(v81) = 18;
  v50 = KeyedDecodingContainer.decode(_:forKey:)(&v81, v75);
  v51 = (uint64_t *)&v12[v79[22]];
  *v51 = v50;
  v51[1] = v52;
  LOBYTE(v81) = 19;
  v53 = KeyedDecodingContainer.decode(_:forKey:)(&v81, v75);
  v54 = (uint64_t *)&v12[v79[23]];
  *v54 = v53;
  v54[1] = v55;
  LOBYTE(v81) = 20;
  v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v75);
  v57 = &v12[v79[24]];
  *(_QWORD *)v57 = v56;
  v57[8] = v58 & 1;
  LOBYTE(v81) = 21;
  v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v75);
  v12[v79[25]] = v59;
  v60 = sub_100037A5C(&qword_100260360);
  v80 = 22;
  v61 = sub_100027310(&qword_100260368, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v81, v60, &v80, v75, v60, v61);
  *(_QWORD *)&v12[v79[26]] = v81;
  LOBYTE(v81) = 23;
  v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v75);
  v63 = (uint64_t *)&v12[v79[27]];
  *v63 = v62;
  v63[1] = v64;
  LOBYTE(v81) = 24;
  v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v75);
  v66 = (uint64_t *)&v12[v79[28]];
  *v66 = v65;
  v66[1] = v67;
  LOBYTE(v81) = 25;
  v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v75);
  v70 = v69;
  (*(void (**)(char *, uint64_t))(v74 + 8))(v10, v75);
  v71 = (uint64_t *)&v12[v79[29]];
  *v71 = v68;
  v71[1] = v70;
  sub_1000472D8((uint64_t)v12, v73);
  sub_10002BB90(v78);
  return sub_10004731C((uint64_t)v12);
}

uint64_t sub_100046648@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100047440(a1, a2);
  *a3 = result;
  return result;
}

void sub_10004666C(_BYTE *a1@<X8>)
{
  *a1 = 26;
}

uint64_t sub_100046678(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003E5A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000466A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003E5A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000466C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100045A74(a1, a2);
}

_QWORD *sub_1000466DC(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v64 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v64 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v64);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v10 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v10;
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    v12 = a2[13];
    v13 = a3[12];
    v69 = (uint64_t)a2 + v13;
    v71 = a1 + v13;
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v12;
    v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
    v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    v67(v71, v69, v14);
    v15 = a3[14];
    *(_QWORD *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    v16 = (_QWORD *)((char *)v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = a3[16];
    *((_BYTE *)v4 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    v20 = (_QWORD *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v72 = v21[1];
    *v20 = *v21;
    v20[1] = v72;
    v22 = a3[17];
    v23 = a3[18];
    v24 = (_QWORD *)((char *)v4 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v68 = v25[1];
    *v24 = *v25;
    v24[1] = v68;
    v26 = (_QWORD *)((char *)v4 + v23);
    v27 = (uint64_t *)((char *)a2 + v23);
    v70 = v27[1];
    *v26 = *v27;
    v26[1] = v70;
    v28 = a3[19];
    v29 = a3[20];
    v30 = (_QWORD *)((char *)v4 + v28);
    v31 = (uint64_t *)((char *)a2 + v28);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = (_QWORD *)((char *)v4 + v29);
    v34 = (uint64_t *)((char *)a2 + v29);
    v66 = v34[1];
    *v33 = *v34;
    v33[1] = v66;
    v35 = a3[21];
    v36 = a3[22];
    v37 = (_QWORD *)((char *)v4 + v35);
    v38 = (uint64_t *)((char *)a2 + v35);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = (_QWORD *)((char *)v4 + v36);
    v41 = (uint64_t *)((char *)a2 + v36);
    v42 = v41[1];
    *v40 = *v41;
    v40[1] = v42;
    v43 = a3[23];
    v44 = a3[24];
    v45 = (_QWORD *)((char *)v4 + v43);
    v46 = (uint64_t *)((char *)a2 + v43);
    v47 = v46[1];
    *v45 = *v46;
    v45[1] = v47;
    v48 = (char *)v4 + v44;
    v49 = (uint64_t)a2 + v44;
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = *(_BYTE *)(v49 + 8);
    v50 = a3[26];
    *((_BYTE *)v4 + a3[25]) = *((_BYTE *)a2 + a3[25]);
    v51 = *(uint64_t *)((char *)a2 + v50);
    *(_QWORD *)((char *)v4 + v50) = v51;
    v52 = a3[27];
    v53 = a3[28];
    v54 = (_QWORD *)((char *)v4 + v52);
    v55 = (uint64_t *)((char *)a2 + v52);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    v57 = (_QWORD *)((char *)v4 + v53);
    v58 = (uint64_t *)((char *)a2 + v53);
    v59 = v58[1];
    *v57 = *v58;
    v57[1] = v59;
    v60 = a3[29];
    v61 = (_QWORD *)((char *)v4 + v60);
    v62 = (uint64_t *)((char *)a2 + v60);
    v63 = v62[1];
    *v61 = *v62;
    v61[1] = v63;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v63);
  }
  return v4;
}

uint64_t sub_100046990(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a3[12];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v22 = a3[14];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v27 = a3[16];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[17];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v35 = v34[1];
  v36 = v33[1];
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = a3[18];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  *v38 = *v39;
  v40 = v39[1];
  v41 = v38[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = a3[19];
  v43 = (_QWORD *)(a1 + v42);
  v44 = (_QWORD *)(a2 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = a3[20];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (_QWORD *)(a2 + v47);
  *v48 = *v49;
  v50 = v49[1];
  v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  v52 = a3[21];
  v53 = (_QWORD *)(a1 + v52);
  v54 = (_QWORD *)(a2 + v52);
  *v53 = *v54;
  v55 = v54[1];
  v56 = v53[1];
  v53[1] = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  v57 = a3[22];
  v58 = (_QWORD *)(a1 + v57);
  v59 = (_QWORD *)(a2 + v57);
  *v58 = *v59;
  v60 = v59[1];
  v61 = v58[1];
  v58[1] = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61);
  v62 = a3[23];
  v63 = (_QWORD *)(a1 + v62);
  v64 = (_QWORD *)(a2 + v62);
  *v63 = *v64;
  v65 = v64[1];
  v66 = v63[1];
  v63[1] = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  v67 = a3[24];
  v68 = a1 + v67;
  v69 = (uint64_t *)(a2 + v67);
  v70 = *v69;
  *(_BYTE *)(v68 + 8) = *((_BYTE *)v69 + 8);
  *(_QWORD *)v68 = v70;
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  v71 = a3[26];
  v72 = *(_QWORD *)(a1 + v71);
  v73 = *(_QWORD *)(a2 + v71);
  *(_QWORD *)(a1 + v71) = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v72);
  v74 = a3[27];
  v75 = (_QWORD *)(a1 + v74);
  v76 = (_QWORD *)(a2 + v74);
  *v75 = *v76;
  v77 = v76[1];
  v78 = v75[1];
  v75[1] = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRelease(v78);
  v79 = a3[28];
  v80 = (_QWORD *)(a1 + v79);
  v81 = (_QWORD *)(a2 + v79);
  *v80 = *v81;
  v82 = v81[1];
  v83 = v80[1];
  v80[1] = v82;
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRelease(v83);
  v84 = a3[29];
  v85 = (_QWORD *)(a1 + v84);
  v86 = (_QWORD *)(a2 + v84);
  *v85 = *v86;
  v87 = v86[1];
  v88 = v85[1];
  v85[1] = v87;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRelease(v88);
  return a1;
}

uint64_t sub_100046D30(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = a3[12];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v10 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v13 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v14 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  v15 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  v16 = a3[24];
  *(_OWORD *)(a1 + a3[23]) = *(_OWORD *)(a2 + a3[23]);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[26];
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  v20 = a3[28];
  *(_OWORD *)(a1 + a3[27]) = *(_OWORD *)(a2 + a3[27]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  *(_OWORD *)(a1 + a3[29]) = *(_OWORD *)(a2 + a3[29]);
  return a1;
}

uint64_t sub_100046E88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = a3[12];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  v22 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  v27 = v23[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  v28 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v29 = (_QWORD *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  v33 = v29[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease(v33);
  v34 = a3[17];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  v39 = v35[1];
  *v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease(v39);
  v40 = a3[18];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (uint64_t *)(a2 + v40);
  v44 = *v42;
  v43 = v42[1];
  v45 = v41[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  v46 = a3[19];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (uint64_t *)(a2 + v46);
  v50 = *v48;
  v49 = v48[1];
  v51 = v47[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  v52 = a3[20];
  v53 = (_QWORD *)(a1 + v52);
  v54 = (uint64_t *)(a2 + v52);
  v56 = *v54;
  v55 = v54[1];
  v57 = v53[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  v58 = a3[21];
  v59 = (_QWORD *)(a1 + v58);
  v60 = (uint64_t *)(a2 + v58);
  v62 = *v60;
  v61 = v60[1];
  v63 = v59[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  v64 = a3[22];
  v65 = (_QWORD *)(a1 + v64);
  v66 = (uint64_t *)(a2 + v64);
  v68 = *v66;
  v67 = v66[1];
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = a3[23];
  v71 = (_QWORD *)(a1 + v70);
  v72 = (uint64_t *)(a2 + v70);
  v74 = *v72;
  v73 = v72[1];
  v75 = v71[1];
  *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease(v75);
  v76 = a3[24];
  v77 = a3[25];
  v78 = a1 + v76;
  v79 = a2 + v76;
  *(_QWORD *)v78 = *(_QWORD *)v79;
  *(_BYTE *)(v78 + 8) = *(_BYTE *)(v79 + 8);
  *(_BYTE *)(a1 + v77) = *(_BYTE *)(a2 + v77);
  v80 = a3[26];
  v81 = *(_QWORD *)(a1 + v80);
  *(_QWORD *)(a1 + v80) = *(_QWORD *)(a2 + v80);
  swift_bridgeObjectRelease(v81);
  v82 = a3[27];
  v83 = (_QWORD *)(a1 + v82);
  v84 = (uint64_t *)(a2 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  v88 = a3[28];
  v89 = (_QWORD *)(a1 + v88);
  v90 = (uint64_t *)(a2 + v88);
  v92 = *v90;
  v91 = v90[1];
  v93 = v89[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease(v93);
  v94 = a3[29];
  v95 = (_QWORD *)(a1 + v94);
  v96 = (uint64_t *)(a2 + v94);
  v98 = *v96;
  v97 = v96[1];
  v99 = v95[1];
  *v95 = v98;
  v95[1] = v97;
  swift_bridgeObjectRelease(v99);
  return a1;
}

uint64_t sub_1000470F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100047100);
}

uint64_t sub_100047100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SystemInfo.DeviceLockState(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t sub_10004717C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100047188);
}

uint64_t sub_100047188(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SystemInfo.DeviceLockState(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000471FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[26];

  v4[0] = &unk_1001F30A0;
  v4[1] = &unk_1001F30B8;
  v4[2] = &unk_1001F30A0;
  v4[3] = &unk_1001F30A0;
  v4[4] = &unk_1001F30B8;
  v4[5] = &unk_1001F30A0;
  v4[6] = &unk_1001F30A0;
  v4[7] = &unk_1001F30A0;
  result = type metadata accessor for SystemInfo.DeviceLockState(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(result - 8) + 64;
    v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[10] = &unk_1001F30A0;
    v4[11] = &unk_1001F30B8;
    v4[12] = &unk_1001F30A0;
    v4[13] = &unk_1001F30A0;
    v4[14] = &unk_1001F30A0;
    v4[15] = &unk_1001F30A0;
    v4[16] = &unk_1001F30A0;
    v4[17] = &unk_1001F30D0;
    v4[18] = &unk_1001F30A0;
    v4[19] = &unk_1001F30A0;
    v4[20] = &unk_1001F30E8;
    v4[21] = &unk_1001F3100;
    v4[22] = &unk_1001F3118;
    v4[23] = &unk_1001F30D0;
    v4[24] = &unk_1001F30D0;
    v4[25] = &unk_1001F30D0;
    swift_initStructMetadata(a1, 256, 26, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000472D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClientContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004731C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ClientContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for ClientContext.CodingKeys()
{
  return &type metadata for ClientContext.CodingKeys;
}

unint64_t sub_10004736C()
{
  unint64_t result;

  result = qword_100260388;
  if (!qword_100260388)
  {
    result = swift_getWitnessTable(&unk_1001F321C, &type metadata for ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260388);
  }
  return result;
}

unint64_t sub_1000473B4()
{
  unint64_t result;

  result = qword_100260390;
  if (!qword_100260390)
  {
    result = swift_getWitnessTable(&unk_1001F318C, &type metadata for ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260390);
  }
  return result;
}

unint64_t sub_1000473FC()
{
  unint64_t result;

  result = qword_100260398;
  if (!qword_100260398)
  {
    result = swift_getWitnessTable(&unk_1001F31B4, &type metadata for ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260398);
  }
  return result;
}

uint64_t sub_100047440(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;

  if (a1 == 0x656D614E707061 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E707061, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x707041464D467369 && a2 == 0xEF6465766F6D6552)
  {
    v7 = 0xEF6465766F6D6552;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x707041464D467369, 0xEF6465766F6D6552, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x4455656369766564 && a2 == 0xEA00000000004449)
  {
    v8 = 0xEA00000000004449;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4455656369766564, 0xEA00000000004449, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6C43656369766564 && a2 == 0xEB00000000737361)
  {
    v9 = 0xEB00000000737361;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C43656369766564, 0xEB00000000737361, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000011)
  {
    v10 = 0x80000001001FCB20;
    if (a2 == 0x80000001001FCB20)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001FCB20, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x54746375646F7270 && a2 == 0xEB00000000657079)
  {
    v11 = 0xEB00000000657079;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54746375646F7270, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x6F6973726556736FLL && a2 == 0xE90000000000006ELL)
  {
    v12 = 0xE90000000000006ELL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6973726556736FLL, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x726556646C697562 && a2 == 0xEC0000006E6F6973)
  {
    v13 = 0xEC0000006E6F6973;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726556646C697562, 0xEC0000006E6F6973, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x74536B636F6C6E75 && a2 == 0xEB00000000657461)
  {
    v14 = 0xEB00000000657461;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74536B636F6C6E75, 0xEB00000000657461, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x54746E6572727563 && a2 == 0xEB00000000656D69)
  {
    v15 = 0xEB00000000656D69;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54746E6572727563, 0xEB00000000656D69, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x656E6F7A656D6974 && a2 == 0xE800000000000000)
  {
    v16 = 0xE800000000000000;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E6F7A656D6974, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x45676E69636E6566 && a2 == 0xEE0064656C62616ELL)
  {
    v17 = 0xEE0064656C62616ELL;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x45676E69636E6566, 0xEE0064656C62616ELL, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0x6973726556707061 && a2 == 0xEA00000000006E6FLL)
  {
    v18 = 0xEA00000000006E6FLL;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6973726556707061, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0x6D726F6674616C70 && a2 == 0xE800000000000000)
  {
    v19 = 0xE800000000000000;
LABEL_85:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D726F6674616C70, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_85;
  }
  if (a1 == 0x437972746E756F63 && a2 == 0xEB0000000065646FLL)
  {
    v20 = 0xEB0000000065646FLL;
LABEL_91:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x437972746E756F63, 0xEB0000000065646FLL, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_91;
  }
  if (a1 == 0x6F436E6F69676572 && a2 == 0xEA00000000006564)
  {
    v21 = 0xEA00000000006564;
LABEL_97:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F436E6F69676572, 0xEA00000000006564, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_97;
  }
  if (a1 == 0x6E4964656E676973 && a2 == 0xEA00000000007341)
  {
    v22 = 0xEA00000000007341;
LABEL_103:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E4964656E676973, 0xEA00000000007341, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_103;
  }
  if (a1 == 0x6E656B6F54737061 && a2 == 0xE800000000000000)
  {
    v23 = 0xE800000000000000;
LABEL_109:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F54737061, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_109;
  }
  if (a1 == 0x644972656C6C6163 && a2 == 0xEE00656C646E6148)
  {
    v24 = 0xEE00656C646E6148;
LABEL_115:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644972656C6C6163, 0xEE00656C646E6148, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
    goto LABEL_115;
  }
  if (a1 == 0xD000000000000010)
  {
    v25 = 0x80000001001FCB40;
    if (a2 == 0x80000001001FCB40)
      goto LABEL_120;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001FCB40, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
LABEL_120:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000001001FCB60)
  {
    v26 = 0x80000001001FCB60;
LABEL_126:
    swift_bridgeObjectRelease(v26);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001001FCB60, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_126;
  }
  if (a1 == 0xD000000000000012)
  {
    v27 = 0x80000001001FCB80;
    if (a2 == 0x80000001001FCB80)
      goto LABEL_131;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001001FCB80, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
LABEL_131:
    swift_bridgeObjectRelease(v27);
    return 21;
  }
  if (a1 == 0xD000000000000012)
  {
    v28 = 0x80000001001FCBA0;
    if (a2 == 0x80000001001FCBA0)
      goto LABEL_136;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001001FCBA0, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
LABEL_136:
    swift_bridgeObjectRelease(v28);
    return 22;
  }
  if (a1 == 0xD000000000000010)
  {
    v29 = 0x80000001001FCBC0;
    if (a2 == 0x80000001001FCBC0)
      goto LABEL_141;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001FCBC0, a1, a2, 0) & 1) != 0)
  {
    v29 = a2;
LABEL_141:
    swift_bridgeObjectRelease(v29);
    return 23;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v30 = 0xE400000000000000;
LABEL_147:
    swift_bridgeObjectRelease(v30);
    return 24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v30 = a2;
    goto LABEL_147;
  }
  if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 25;
  }
  else
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F73616572, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v31 & 1) != 0)
      return 25;
    else
      return 26;
  }
}

uint64_t sub_100047EFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_10001F728(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t sub_100047F30()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_100047F38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004AC40();
  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_100047F60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v25[160];
  _BYTE v26[168];
  char v27;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100260470);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_10004ABFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RespondToInviteRequestContent.CodingKeys, &type metadata for RespondToInviteRequestContent.CodingKeys, v11, v9, v10);
  sub_10000EF6C(v3, (uint64_t)v26, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v26, (uint64_t)v25, &qword_1002603B0);
  v27 = 0;
  v12 = sub_10003E3B0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v27, v5, &type metadata for ServerContext, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for RespondToInviteRequestContent(0);
    v14 = v3 + v13[5];
    v25[0] = 1;
    v15 = type metadata accessor for ClientContext(0);
    v16 = sub_100004EA8(&qword_100260488, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3130);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, v25, v5, v15, v16);
    v17 = (uint64_t *)(v3 + v13[6]);
    v18 = *v17;
    v19 = v17[1];
    v25[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, v25, v5);
    v20 = (uint64_t *)(v3 + v13[7]);
    v21 = *v20;
    v22 = v20[1];
    v25[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, v25, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10004815C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _BYTE v36[160];
  _BYTE v37[160];
  _QWORD v38[21];
  char v39;

  v30 = a2;
  v31 = type metadata accessor for ClientContext(0);
  __chkstk_darwin(v31);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100037A5C(&qword_100260490);
  v5 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for RespondToInviteRequestContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v34 = a1;
  sub_100036228(a1, v11);
  v13 = sub_10004ABFC();
  v32 = v7;
  v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RespondToInviteRequestContent.CodingKeys, &type metadata for RespondToInviteRequestContent.CodingKeys, v13, v11, v12);
  if (v14)
    return sub_10002BB90(v34);
  v15 = v4;
  v35 = v5;
  v16 = (uint64_t)v10;
  v39 = 0;
  v17 = sub_10002B9FC();
  v18 = v32;
  v19 = v33;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v38, &type metadata for ServerContext, &v39, v33, &type metadata for ServerContext, v17);
  sub_10000EF6C((uint64_t)v38, (uint64_t)v37, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v37, v16, &qword_1002603B0);
  v36[0] = 1;
  v20 = sub_100004EA8(&qword_1002604A0, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3158);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15, v31, v36, v19, v31, v20);
  sub_10003E4F4((uint64_t)v15, v16 + v8[5]);
  v36[0] = 2;
  v21 = KeyedDecodingContainer.decode(_:forKey:)(v36, v19);
  v22 = (uint64_t *)(v16 + v8[6]);
  *v22 = v21;
  v22[1] = v23;
  v36[0] = 3;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(v36, v19);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v33);
  v27 = (uint64_t *)(v16 + v8[7]);
  *v27 = v24;
  v27[1] = v26;
  sub_100025C70(v16, v30, type metadata accessor for RespondToInviteRequestContent);
  sub_10002BB90(v34);
  return sub_100024990(v16, type metadata accessor for RespondToInviteRequestContent);
}

uint64_t sub_1000484E0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10004851C + 4 * byte_1001F32A0[*v0]))(0x6F43726576726573, 0xED0000747865746ELL);
}

uint64_t sub_10004851C()
{
  return 0x6F43746E65696C63;
}

uint64_t sub_100048530()
{
  return 25705;
}

uint64_t sub_10004853C()
{
  return 0x6465747065636361;
}

uint64_t sub_100048554@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10004AEB8(a1, a2);
  *a3 = result;
  return result;
}

void sub_100048578(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100048584(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004ABFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000485AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004ABFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000485D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004815C(a1, a2);
}

uint64_t sub_1000485E8(_QWORD *a1)
{
  return sub_100047F60(a1);
}

uint64_t sub_1000485FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *(_QWORD *)(v6 + 1832) = a6;
  *(_QWORD *)(v6 + 1824) = a5;
  *(_BYTE *)(v6 + 2040) = a4;
  *(_QWORD *)(v6 + 1816) = a3;
  *(_QWORD *)(v6 + 1808) = a2;
  *(_QWORD *)(v6 + 1800) = a1;
  v7 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  *(_QWORD *)(v6 + 1840) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 1848) = v8;
  *(_QWORD *)(v6 + 1856) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RespondToInviteRequestContent(0);
  *(_QWORD *)(v6 + 1864) = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 1872) = swift_task_alloc(v10);
  *(_QWORD *)(v6 + 1880) = swift_task_alloc(v10);
  *(_QWORD *)(v6 + 1888) = swift_task_alloc(v10);
  v11 = sub_100037A5C(&qword_1002650A0);
  *(_QWORD *)(v6 + 1896) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Account(0);
  *(_QWORD *)(v6 + 1904) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 1912) = v13;
  *(_QWORD *)(v6 + 1920) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260238) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 1928) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 1936) = swift_task_alloc(v14);
  v15 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ClientContext(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 1944) = swift_task_alloc(v15);
  *(_QWORD *)(v6 + 1952) = swift_task_alloc(v15);
  return swift_task_switch(sub_100048760, 0, 0);
}

uint64_t sub_100048760()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[242];
  v2 = v0[240];
  v3 = v0[239];
  v4 = v0[238];
  v15 = v0[241];
  v16 = v0[237];
  v5 = v0[229];
  v14 = v0[228];
  v6 = v0[225];
  v7 = sub_10003D638();
  v0[245] = v7;
  v8 = type metadata accessor for RequestOrigin(0);
  v0[246] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v0[247] = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v1, v5, v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v1, 0, 1, v8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16);
  v11 = swift_bridgeObjectRetain(v7);
  v10(v2, v6, v4, v11);
  sub_10000E37C(v1, v15, &qword_100260238);
  sub_10000E37C(v14, v16, &qword_1002650A0);
  v12 = (_QWORD *)swift_task_alloc(dword_100260234);
  v0[248] = v12;
  *v12 = v0;
  v12[1] = sub_1000488A0;
  return sub_100044CD8(v0[244], v0[240], v0[241], v0[237], (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1000488A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 1952);
  v3 = *(_QWORD *)(*v0 + 1944);
  v4 = *(_QWORD *)(*v0 + 1936);
  v7 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1984));
  sub_1000087A0(v4, &qword_100260238);
  sub_100025C70(v2, v3, type metadata accessor for ClientContext);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 1992) = v5;
  *v5 = v7;
  v5[1] = sub_10004893C;
  return daemon.getter();
}

uint64_t sub_10004893C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1992);
  v5 = *v1;
  *(_QWORD *)(*v1 + 2000) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 2008) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100048A24;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100048A24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 2008);
  v5 = *(_QWORD **)v2;
  v5[252] = a1;
  v5[253] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100048BFC, 0, 0);
  swift_release(v5[250]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[254] = v7;
  *v7 = v5;
  v7[1] = sub_100048AD8;
  return sub_10000AFC8((uint64_t)(v5 + 110));
}

uint64_t sub_100048AD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2016);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2032));
  return swift_task_switch(sub_100048B30, v1, 0);
}

uint64_t sub_100048B30()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000EF6C(v0 + 880, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1)
  {
    v1 = v0 + 1472;
    sub_10004922C((_OWORD *)(v0 + 1472));
  }
  else
  {
    v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_10000EF6C(v0 + 112, v0 + 1632, &qword_1002603B0);
    sub_10000EFB0((_QWORD *)(v0 + 1632), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_10000AF28(v0 + 880);
  }
  sub_10000EF6C(v1, v0 + 1312, &qword_1002603B0);
  return swift_task_switch(sub_100048D68, 0, 0);
}

uint64_t sub_100048BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 1976);
  v2 = *(_QWORD *)(v0 + 1968);
  v3 = *(_QWORD *)(v0 + 1960);
  v4 = *(_QWORD *)(v0 + 1952);
  v5 = *(_QWORD *)(v0 + 1944);
  v13 = *(_QWORD *)(v0 + 1936);
  v14 = *(_QWORD *)(v0 + 1928);
  v11 = *(_QWORD *)(v0 + 1912);
  v12 = *(_QWORD *)(v0 + 1904);
  v15 = *(_QWORD *)(v0 + 1920);
  v16 = *(_QWORD *)(v0 + 1896);
  v17 = *(_QWORD *)(v0 + 1888);
  v18 = *(_QWORD *)(v0 + 1880);
  v19 = *(_QWORD *)(v0 + 1872);
  v20 = *(_QWORD *)(v0 + 1856);
  v6 = *(_QWORD *)(v0 + 1832);
  v7 = *(_QWORD *)(v0 + 1824);
  v8 = *(_QWORD *)(v0 + 1816);
  v9 = *(_QWORD *)(v0 + 1800);
  swift_release(*(_QWORD *)(v0 + 2000));
  swift_bridgeObjectRelease(v8);
  sub_100024990(v5, type metadata accessor for ClientContext);
  swift_bridgeObjectRelease(v3);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v6, v2);
  sub_1000087A0(v7, &qword_1002650A0);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v12);
  sub_100024990(v4, type metadata accessor for ClientContext);
  swift_bridgeObjectRelease(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100048D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = *(_QWORD *)(v0 + 1944);
  v2 = *(_QWORD *)(v0 + 1888);
  v3 = *(int **)(v0 + 1864);
  v4 = *(unsigned __int8 *)(v0 + 2040);
  v5 = *(_QWORD *)(v0 + 1816);
  v6 = *(_QWORD *)(v0 + 1808);
  swift_release(*(_QWORD *)(v0 + 2016));
  sub_10000EF6C(v0 + 1312, v2, &qword_1002603B0);
  sub_100025C70(v1, v2 + v3[5], type metadata accessor for ClientContext);
  v7 = (_QWORD *)(v2 + v3[6]);
  *v7 = v6;
  v7[1] = v5;
  v8 = v4 == 0;
  if (v4)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if (v8)
    v10 = 0xE500000000000000;
  else
    v10 = 0xE400000000000000;
  sub_100024990(v1, type metadata accessor for ClientContext);
  v11 = (uint64_t *)(v2 + v3[7]);
  *v11 = v9;
  v11[1] = v10;
  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v12 = *(_QWORD *)(v0 + 1888);
  v13 = *(_QWORD *)(v0 + 1880);
  v14 = type metadata accessor for Logger(0);
  sub_100037A9C(v14, (uint64_t)qword_10027AD08);
  v15 = sub_100025C70(v12, v13, type metadata accessor for RespondToInviteRequestContent);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  v18 = os_log_type_enabled(v16, v17);
  v19 = *(_QWORD *)(v0 + 1880);
  if (v18)
  {
    v20 = *(_QWORD *)(v0 + 1872);
    v21 = *(_QWORD *)(v0 + 1864);
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v55 = v23;
    *(_DWORD *)v22 = 136315138;
    sub_100025C70(v19, v20, type metadata accessor for RespondToInviteRequestContent);
    v24 = String.init<A>(describing:)(v20, v21);
    v26 = v25;
    *(_QWORD *)(v0 + 1792) = sub_10002BA84(v24, v25, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1792, v0 + 1800, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v26);
    sub_100024990(v19, type metadata accessor for RespondToInviteRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Request content: %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_100024990(*(_QWORD *)(v0 + 1880), type metadata accessor for RespondToInviteRequestContent);
  }

  v27 = *(_QWORD *)(v0 + 2024);
  v28 = *(_QWORD *)(v0 + 1888);
  v29 = *(_QWORD *)(v0 + 1864);
  v30 = *(_QWORD **)(v0 + 1856);
  v31 = *(_QWORD *)(v0 + 1848);
  v32 = *(_QWORD *)(v0 + 1840);
  v33 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  v34 = JSONEncoder.init()();
  *v30 = sub_100055760;
  v30[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v31 + 104))(v30, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v32);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v30);
  v35 = sub_100004EA8(&qword_1002603B8, type metadata accessor for RespondToInviteRequestContent, (uint64_t)&unk_1001F33CC);
  v36 = dispatch thunk of JSONEncoder.encode<A>(_:)(v28, v29, v35);
  v38 = v37;
  swift_release(v34);
  if (v27)
  {
    swift_errorRelease(v27);
    v36 = 0;
    v38 = 0xF000000000000000;
  }
  v39 = *(_QWORD *)(v0 + 1960);
  v40 = *(_QWORD *)(v0 + 1952);
  v47 = *(_QWORD *)(v0 + 1944);
  v48 = *(_QWORD *)(v0 + 1936);
  v49 = *(_QWORD *)(v0 + 1928);
  v50 = *(_QWORD *)(v0 + 1920);
  v41 = *(_QWORD *)(v0 + 1912);
  v42 = *(_QWORD *)(v0 + 1904);
  v43 = *(_QWORD *)(v0 + 1888);
  v51 = *(_QWORD *)(v0 + 1896);
  v52 = *(_QWORD *)(v0 + 1880);
  v53 = *(_QWORD *)(v0 + 1872);
  v54 = *(_QWORD *)(v0 + 1856);
  v44 = *(_QWORD *)(v0 + 1824);
  v45 = *(_QWORD *)(v0 + 1800);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1976) + 8))(*(_QWORD *)(v0 + 1832), *(_QWORD *)(v0 + 1968));
  sub_1000087A0(v44, &qword_1002650A0);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v45, v42);
  sub_100024990(v43, type metadata accessor for RespondToInviteRequestContent);
  sub_100024990(v40, type metadata accessor for ClientContext);
  swift_bridgeObjectRetain(v39);
  sub_10001F728(v36, v38);
  swift_bridgeObjectRelease_n(v39, 2);
  sub_100037AF8(v36, v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v43);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(v0 + 8))(*(_QWORD *)(v0 + 1960), v36, v38);
}

uint64_t type metadata accessor for RespondToInviteRequestContent(uint64_t a1)
{
  uint64_t result;

  result = qword_100260418;
  if (!qword_100260418)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RespondToInviteRequestContent);
  return result;
}

uint64_t sub_100049214(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_10004922C(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

_OWORD *sub_100049248(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _OWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t, __n128);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = a2[5];
    if (v7)
    {
      *a1 = *(_OWORD *)a2;
      v8 = a2[2];
      *((_QWORD *)v4 + 2) = v8;
      *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 3);
      *((_QWORD *)v4 + 5) = v7;
      *((_BYTE *)v4 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)((char *)v4 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)((char *)v4 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)((char *)v4 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)((char *)v4 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)((char *)v4 + 120) = *(_OWORD *)(a2 + 15);
      v10 = a2[17];
      v9 = a2[18];
      *((_QWORD *)v4 + 17) = v10;
      *((_QWORD *)v4 + 18) = v9;
      v11 = a2[19];
      *((_QWORD *)v4 + 19) = v11;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      a1[6] = *((_OWORD *)a2 + 6);
      a1[7] = v13;
      v14 = *((_OWORD *)a2 + 9);
      a1[8] = *((_OWORD *)a2 + 8);
      a1[9] = v14;
      v15 = *((_OWORD *)a2 + 3);
      a1[2] = *((_OWORD *)a2 + 2);
      a1[3] = v15;
      v16 = *((_OWORD *)a2 + 5);
      a1[4] = *((_OWORD *)a2 + 4);
      a1[5] = v16;
      v17 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v17;
    }
    v18 = *(int *)(a3 + 20);
    v19 = (char *)v4 + v18;
    v20 = (uint64_t)a2 + v18;
    v94 = *(uint64_t *)((char *)a2 + v18 + 8);
    v96 = a3;
    *(_QWORD *)v19 = *(uint64_t *)((char *)a2 + v18);
    *((_QWORD *)v19 + 1) = v94;
    v19[16] = *((_BYTE *)a2 + v18 + 16);
    v92 = *(uint64_t *)((char *)a2 + v18 + 32);
    *((_QWORD *)v19 + 3) = *(uint64_t *)((char *)a2 + v18 + 24);
    *((_QWORD *)v19 + 4) = v92;
    v21 = *(uint64_t *)((char *)a2 + v18 + 48);
    *((_QWORD *)v19 + 5) = *(uint64_t *)((char *)a2 + v18 + 40);
    *((_QWORD *)v19 + 6) = v21;
    v19[56] = *((_BYTE *)a2 + v18 + 56);
    v22 = *(uint64_t *)((char *)a2 + v18 + 72);
    *((_QWORD *)v19 + 8) = *(uint64_t *)((char *)a2 + v18 + 64);
    *((_QWORD *)v19 + 9) = v22;
    v23 = *(uint64_t *)((char *)a2 + v18 + 88);
    *((_QWORD *)v19 + 10) = *(uint64_t *)((char *)a2 + v18 + 80);
    *((_QWORD *)v19 + 11) = v23;
    v24 = *(uint64_t *)((char *)a2 + v18 + 104);
    *((_QWORD *)v19 + 12) = *(uint64_t *)((char *)a2 + v18 + 96);
    *((_QWORD *)v19 + 13) = v24;
    v25 = (int *)type metadata accessor for ClientContext(0);
    v26 = v25[12];
    v88 = v20 + v26;
    v90 = &v19[v26];
    v27 = type metadata accessor for SystemInfo.DeviceLockState(0);
    v86 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v27 - 8) + 16);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v28 = swift_bridgeObjectRetain(v24);
    v86(v90, v88, v27, v28);
    *(_QWORD *)&v19[v25[13]] = *(_QWORD *)(v20 + v25[13]);
    v29 = v25[14];
    v30 = &v19[v29];
    v31 = (_QWORD *)(v20 + v29);
    v32 = v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v32;
    v19[v25[15]] = *(_BYTE *)(v20 + v25[15]);
    v33 = v25[16];
    v34 = &v19[v33];
    v35 = (_QWORD *)(v20 + v33);
    v95 = v35[1];
    *(_QWORD *)v34 = *v35;
    *((_QWORD *)v34 + 1) = v95;
    v36 = v25[17];
    v37 = &v19[v36];
    v38 = (_QWORD *)(v20 + v36);
    v93 = v38[1];
    *(_QWORD *)v37 = *v38;
    *((_QWORD *)v37 + 1) = v93;
    v39 = v25[18];
    v40 = &v19[v39];
    v41 = (_QWORD *)(v20 + v39);
    v91 = v41[1];
    *(_QWORD *)v40 = *v41;
    *((_QWORD *)v40 + 1) = v91;
    v42 = v25[19];
    v43 = &v19[v42];
    v44 = (_QWORD *)(v20 + v42);
    v89 = v44[1];
    *(_QWORD *)v43 = *v44;
    *((_QWORD *)v43 + 1) = v89;
    v45 = v25[20];
    v46 = &v19[v45];
    v47 = (_QWORD *)(v20 + v45);
    v87 = v47[1];
    *(_QWORD *)v46 = *v47;
    *((_QWORD *)v46 + 1) = v87;
    v48 = v25[21];
    v49 = &v19[v48];
    v50 = (_QWORD *)(v20 + v48);
    v85 = v50[1];
    *(_QWORD *)v49 = *v50;
    *((_QWORD *)v49 + 1) = v85;
    v51 = v25[22];
    v52 = &v19[v51];
    v53 = (_QWORD *)(v20 + v51);
    v84 = v53[1];
    *(_QWORD *)v52 = *v53;
    *((_QWORD *)v52 + 1) = v84;
    v54 = v25[23];
    v55 = &v19[v54];
    v56 = (_QWORD *)(v20 + v54);
    v57 = v56[1];
    *(_QWORD *)v55 = *v56;
    *((_QWORD *)v55 + 1) = v57;
    v58 = v25[24];
    v59 = &v19[v58];
    v60 = v20 + v58;
    *(_QWORD *)v59 = *(_QWORD *)v60;
    v59[8] = *(_BYTE *)(v60 + 8);
    v19[v25[25]] = *(_BYTE *)(v20 + v25[25]);
    v61 = v25[26];
    v62 = *(_QWORD *)(v20 + v61);
    *(_QWORD *)&v19[v61] = v62;
    v63 = v25[27];
    v64 = &v19[v63];
    v65 = (_QWORD *)(v20 + v63);
    v66 = v65[1];
    *(_QWORD *)v64 = *v65;
    *((_QWORD *)v64 + 1) = v66;
    v67 = v25[28];
    v68 = &v19[v67];
    v69 = (_QWORD *)(v20 + v67);
    v70 = v69[1];
    *(_QWORD *)v68 = *v69;
    *((_QWORD *)v68 + 1) = v70;
    v71 = v25[29];
    v72 = &v19[v71];
    v73 = (_QWORD *)(v20 + v71);
    v74 = v73[1];
    *(_QWORD *)v72 = *v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = *(int *)(v96 + 24);
    v76 = *(int *)(v96 + 28);
    v77 = (_QWORD *)((char *)v4 + v75);
    v78 = (uint64_t *)((char *)a2 + v75);
    v79 = v78[1];
    *v77 = *v78;
    v77[1] = v79;
    v80 = (_QWORD *)((char *)v4 + v76);
    v81 = (uint64_t *)((char *)a2 + v76);
    v82 = v81[1];
    *v80 = *v81;
    v80[1] = v82;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v95);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v82);
  }
  return v4;
}

uint64_t sub_10004962C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  uint64_t v9;

  v4 = a1[5];
  if (v4)
  {
    v5 = a1[2];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[19]);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[4]);
  swift_bridgeObjectRelease(v6[6]);
  swift_bridgeObjectRelease(v6[9]);
  swift_bridgeObjectRelease(v6[11]);
  swift_bridgeObjectRelease(v6[13]);
  v7 = (int *)type metadata accessor for ClientContext(0);
  v8 = (char *)v6 + v7[12];
  v9 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[21] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[22] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[23] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[26]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[27] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[28] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[29] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[6] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7] + 8));
}

uint64_t sub_1000497D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v6 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    v9 = *(_QWORD *)(a2 + 136);
    v8 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v9;
    *(_QWORD *)(a1 + 144) = v8;
    v10 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v10;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  v16 = *(int *)(a3 + 20);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v92 = *(_QWORD *)(a2 + v16 + 8);
  v94 = a3;
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = v92;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(a2 + v16 + 16);
  v90 = *(_QWORD *)(a2 + v16 + 32);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(a2 + v16 + 24);
  *(_QWORD *)(v17 + 32) = v90;
  v19 = *(_QWORD *)(a2 + v16 + 48);
  *(_QWORD *)(v17 + 40) = *(_QWORD *)(a2 + v16 + 40);
  *(_QWORD *)(v17 + 48) = v19;
  *(_BYTE *)(v17 + 56) = *(_BYTE *)(a2 + v16 + 56);
  v20 = *(_QWORD *)(a2 + v16 + 72);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(a2 + v16 + 64);
  *(_QWORD *)(v17 + 72) = v20;
  v21 = *(_QWORD *)(a2 + v16 + 88);
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(a2 + v16 + 80);
  *(_QWORD *)(v17 + 88) = v21;
  v22 = *(_QWORD *)(a2 + v16 + 104);
  *(_QWORD *)(v17 + 96) = *(_QWORD *)(a2 + v16 + 96);
  *(_QWORD *)(v17 + 104) = v22;
  v23 = (int *)type metadata accessor for ClientContext(0);
  v24 = v23[12];
  v86 = v18 + v24;
  v88 = v17 + v24;
  v25 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v84 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  v26 = swift_bridgeObjectRetain(v22);
  v84(v88, v86, v25, v26);
  *(_QWORD *)(v17 + v23[13]) = *(_QWORD *)(v18 + v23[13]);
  v27 = v23[14];
  v28 = (_QWORD *)(v17 + v27);
  v29 = (_QWORD *)(v18 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  *(_BYTE *)(v17 + v23[15]) = *(_BYTE *)(v18 + v23[15]);
  v31 = v23[16];
  v32 = (_QWORD *)(v17 + v31);
  v33 = (_QWORD *)(v18 + v31);
  v93 = v33[1];
  *v32 = *v33;
  v32[1] = v93;
  v34 = v23[17];
  v35 = (_QWORD *)(v17 + v34);
  v36 = (_QWORD *)(v18 + v34);
  v91 = v36[1];
  *v35 = *v36;
  v35[1] = v91;
  v37 = v23[18];
  v38 = (_QWORD *)(v17 + v37);
  v39 = (_QWORD *)(v18 + v37);
  v89 = v39[1];
  *v38 = *v39;
  v38[1] = v89;
  v40 = v23[19];
  v41 = (_QWORD *)(v17 + v40);
  v42 = (_QWORD *)(v18 + v40);
  v87 = v42[1];
  *v41 = *v42;
  v41[1] = v87;
  v43 = v23[20];
  v44 = (_QWORD *)(v17 + v43);
  v45 = (_QWORD *)(v18 + v43);
  v85 = v45[1];
  *v44 = *v45;
  v44[1] = v85;
  v46 = v23[21];
  v47 = (_QWORD *)(v17 + v46);
  v48 = (_QWORD *)(v18 + v46);
  v83 = v48[1];
  *v47 = *v48;
  v47[1] = v83;
  v49 = v23[22];
  v50 = (_QWORD *)(v17 + v49);
  v51 = (_QWORD *)(v18 + v49);
  v82 = v51[1];
  *v50 = *v51;
  v50[1] = v82;
  v52 = v23[23];
  v53 = (_QWORD *)(v17 + v52);
  v54 = (_QWORD *)(v18 + v52);
  v55 = v54[1];
  *v53 = *v54;
  v53[1] = v55;
  v56 = v23[24];
  v57 = v17 + v56;
  v58 = v18 + v56;
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
  *(_BYTE *)(v17 + v23[25]) = *(_BYTE *)(v18 + v23[25]);
  v59 = v23[26];
  v60 = *(_QWORD *)(v18 + v59);
  *(_QWORD *)(v17 + v59) = v60;
  v61 = v23[27];
  v62 = (_QWORD *)(v17 + v61);
  v63 = (_QWORD *)(v18 + v61);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  v65 = v23[28];
  v66 = (_QWORD *)(v17 + v65);
  v67 = (_QWORD *)(v18 + v65);
  v68 = v67[1];
  *v66 = *v67;
  v66[1] = v68;
  v69 = v23[29];
  v70 = (_QWORD *)(v17 + v69);
  v71 = (_QWORD *)(v18 + v69);
  v72 = v71[1];
  *v70 = *v71;
  v70[1] = v72;
  v73 = *(int *)(v94 + 24);
  v74 = *(int *)(v94 + 28);
  v75 = (_QWORD *)(a1 + v73);
  v76 = (_QWORD *)(a2 + v73);
  v77 = v76[1];
  *v75 = *v76;
  v75[1] = v77;
  v78 = (_QWORD *)(a1 + v74);
  v79 = (_QWORD *)(a2 + v74);
  v80 = v79[1];
  *v78 = *v79;
  v78[1] = v80;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v80);
  return a1;
}

uint64_t sub_100049B8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;

  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v10);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v11 = *(_QWORD *)(a2 + 136);
      v12 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v13 = *(_QWORD *)(a2 + 152);
      v14 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      sub_10004A1B8((_QWORD *)a1);
      v19 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v19;
      v20 = *(_OWORD *)(a2 + 80);
      v22 = *(_OWORD *)(a2 + 32);
      v21 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v20;
      *(_OWORD *)(a1 + 32) = v22;
      *(_OWORD *)(a1 + 48) = v21;
      v23 = *(_OWORD *)(a2 + 144);
      v25 = *(_OWORD *)(a2 + 96);
      v24 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v23;
      *(_OWORD *)(a1 + 96) = v25;
      *(_OWORD *)(a1 + 112) = v24;
    }
  }
  else if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v16;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v17 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v17;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v18 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v18;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v26;
    v27 = *(_OWORD *)(a2 + 32);
    v28 = *(_OWORD *)(a2 + 48);
    v29 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v29;
    *(_OWORD *)(a1 + 32) = v27;
    *(_OWORD *)(a1 + 48) = v28;
    v30 = *(_OWORD *)(a2 + 96);
    v31 = *(_OWORD *)(a2 + 112);
    v32 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v32;
    *(_OWORD *)(a1 + 96) = v30;
    *(_OWORD *)(a1 + 112) = v31;
  }
  v33 = a3[5];
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_QWORD *)v34 = *(_QWORD *)(a2 + v33);
  v36 = *(_QWORD *)(a2 + v33 + 8);
  v37 = *(_QWORD *)(a1 + v33 + 8);
  *(_QWORD *)(v34 + 8) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_BYTE *)(v34 + 16) = *(_BYTE *)(v35 + 16);
  *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
  v38 = *(_QWORD *)(v35 + 32);
  v39 = *(_QWORD *)(v34 + 32);
  *(_QWORD *)(v34 + 32) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  *(_QWORD *)(v34 + 40) = *(_QWORD *)(v35 + 40);
  v40 = *(_QWORD *)(v35 + 48);
  v41 = *(_QWORD *)(v34 + 48);
  *(_QWORD *)(v34 + 48) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *(_BYTE *)(v34 + 56) = *(_BYTE *)(v35 + 56);
  *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
  v42 = *(_QWORD *)(v35 + 72);
  v43 = *(_QWORD *)(v34 + 72);
  *(_QWORD *)(v34 + 72) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *(_QWORD *)(v34 + 80) = *(_QWORD *)(v35 + 80);
  v44 = *(_QWORD *)(v35 + 88);
  v45 = *(_QWORD *)(v34 + 88);
  *(_QWORD *)(v34 + 88) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_QWORD *)(v34 + 96) = *(_QWORD *)(v35 + 96);
  v46 = *(_QWORD *)(v35 + 104);
  v47 = *(_QWORD *)(v34 + 104);
  *(_QWORD *)(v34 + 104) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = (int *)type metadata accessor for ClientContext(0);
  v49 = v48[12];
  v50 = v34 + v49;
  v51 = v35 + v49;
  v52 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v50, v51, v52);
  *(_QWORD *)(v34 + v48[13]) = *(_QWORD *)(v35 + v48[13]);
  v53 = v48[14];
  v54 = (_QWORD *)(v34 + v53);
  v55 = (_QWORD *)(v35 + v53);
  *v54 = *v55;
  v56 = v55[1];
  v57 = v54[1];
  v54[1] = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *(_BYTE *)(v34 + v48[15]) = *(_BYTE *)(v35 + v48[15]);
  v58 = v48[16];
  v59 = (_QWORD *)(v34 + v58);
  v60 = (_QWORD *)(v35 + v58);
  *v59 = *v60;
  v61 = v60[1];
  v62 = v59[1];
  v59[1] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  v63 = v48[17];
  v64 = (_QWORD *)(v34 + v63);
  v65 = (_QWORD *)(v35 + v63);
  *v64 = *v65;
  v66 = v65[1];
  v67 = v64[1];
  v64[1] = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  v68 = v48[18];
  v69 = (_QWORD *)(v34 + v68);
  v70 = (_QWORD *)(v35 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v72 = v69[1];
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v73 = v48[19];
  v74 = (_QWORD *)(v34 + v73);
  v75 = (_QWORD *)(v35 + v73);
  *v74 = *v75;
  v76 = v75[1];
  v77 = v74[1];
  v74[1] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  v78 = v48[20];
  v79 = (_QWORD *)(v34 + v78);
  v80 = (_QWORD *)(v35 + v78);
  *v79 = *v80;
  v81 = v80[1];
  v82 = v79[1];
  v79[1] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  v83 = v48[21];
  v84 = (_QWORD *)(v34 + v83);
  v85 = (_QWORD *)(v35 + v83);
  *v84 = *v85;
  v86 = v85[1];
  v87 = v84[1];
  v84[1] = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  v88 = v48[22];
  v89 = (_QWORD *)(v34 + v88);
  v90 = (_QWORD *)(v35 + v88);
  *v89 = *v90;
  v91 = v90[1];
  v92 = v89[1];
  v89[1] = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v92);
  v93 = v48[23];
  v94 = (_QWORD *)(v34 + v93);
  v95 = (_QWORD *)(v35 + v93);
  *v94 = *v95;
  v96 = v95[1];
  v97 = v94[1];
  v94[1] = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  v98 = v48[24];
  v99 = v34 + v98;
  v100 = (uint64_t *)(v35 + v98);
  v101 = *v100;
  *(_BYTE *)(v99 + 8) = *((_BYTE *)v100 + 8);
  *(_QWORD *)v99 = v101;
  *(_BYTE *)(v34 + v48[25]) = *(_BYTE *)(v35 + v48[25]);
  v102 = v48[26];
  v103 = *(_QWORD *)(v34 + v102);
  v104 = *(_QWORD *)(v35 + v102);
  *(_QWORD *)(v34 + v102) = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v103);
  v105 = v48[27];
  v106 = (_QWORD *)(v34 + v105);
  v107 = (_QWORD *)(v35 + v105);
  *v106 = *v107;
  v108 = v107[1];
  v109 = v106[1];
  v106[1] = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  v110 = v48[28];
  v111 = (_QWORD *)(v34 + v110);
  v112 = (_QWORD *)(v35 + v110);
  *v111 = *v112;
  v113 = v112[1];
  v114 = v111[1];
  v111[1] = v113;
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRelease(v114);
  v115 = v48[29];
  v116 = (_QWORD *)(v34 + v115);
  v117 = (_QWORD *)(v35 + v115);
  *v116 = *v117;
  v118 = v117[1];
  v119 = v116[1];
  v116[1] = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease(v119);
  v120 = a3[6];
  v121 = (_QWORD *)(a1 + v120);
  v122 = (_QWORD *)(a2 + v120);
  *v121 = *v122;
  v123 = v122[1];
  v124 = v121[1];
  v121[1] = v123;
  swift_bridgeObjectRetain(v123);
  swift_bridgeObjectRelease(v124);
  v125 = a3[7];
  v126 = (_QWORD *)(a1 + v125);
  v127 = (_QWORD *)(a2 + v125);
  *v126 = *v127;
  v128 = v127[1];
  v129 = v126[1];
  v126[1] = v128;
  swift_bridgeObjectRetain(v128);
  swift_bridgeObjectRelease(v129);
  return a1;
}

_QWORD *sub_10004A1B8(_QWORD *a1)
{
  destroy for ServerContext(a1);
  return a1;
}

_OWORD *sub_10004A1EC(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  v11 = a3[5];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_OWORD *)v12 = *(_OWORD *)((char *)a2 + v11);
  v12[16] = *((_BYTE *)a2 + v11 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)((char *)a2 + v11 + 40);
  v12[56] = *((_BYTE *)a2 + v11 + 56);
  v14 = *(_OWORD *)((char *)a2 + v11 + 80);
  *((_OWORD *)v12 + 4) = *(_OWORD *)((char *)a2 + v11 + 64);
  *((_OWORD *)v12 + 5) = v14;
  *((_OWORD *)v12 + 6) = *(_OWORD *)((char *)a2 + v11 + 96);
  v15 = (int *)type metadata accessor for ClientContext(0);
  v16 = v15[12];
  v17 = &v12[v16];
  v18 = &v13[v16];
  v19 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_QWORD *)&v12[v15[13]] = *(_QWORD *)&v13[v15[13]];
  *(_OWORD *)&v12[v15[14]] = *(_OWORD *)&v13[v15[14]];
  v12[v15[15]] = v13[v15[15]];
  *(_OWORD *)&v12[v15[16]] = *(_OWORD *)&v13[v15[16]];
  *(_OWORD *)&v12[v15[17]] = *(_OWORD *)&v13[v15[17]];
  *(_OWORD *)&v12[v15[18]] = *(_OWORD *)&v13[v15[18]];
  *(_OWORD *)&v12[v15[19]] = *(_OWORD *)&v13[v15[19]];
  *(_OWORD *)&v12[v15[20]] = *(_OWORD *)&v13[v15[20]];
  *(_OWORD *)&v12[v15[21]] = *(_OWORD *)&v13[v15[21]];
  *(_OWORD *)&v12[v15[22]] = *(_OWORD *)&v13[v15[22]];
  *(_OWORD *)&v12[v15[23]] = *(_OWORD *)&v13[v15[23]];
  v20 = v15[24];
  v21 = &v12[v20];
  v22 = &v13[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v12[v15[25]] = v13[v15[25]];
  *(_QWORD *)&v12[v15[26]] = *(_QWORD *)&v13[v15[26]];
  *(_OWORD *)&v12[v15[27]] = *(_OWORD *)&v13[v15[27]];
  *(_OWORD *)&v12[v15[28]] = *(_OWORD *)&v13[v15[28]];
  *(_OWORD *)&v12[v15[29]] = *(_OWORD *)&v13[v15[29]];
  v23 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  return a1;
}

uint64_t sub_10004A3C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_5;
  if (!*(_QWORD *)(a2 + 40))
  {
    sub_10004A1B8((_QWORD *)a1);
LABEL_5:
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v17;
    v18 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v18;
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v19;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  swift_bridgeObjectRelease(v14);
LABEL_6:
  v20 = a3[5];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20 + 8);
  v24 = *(_QWORD *)(a1 + v20 + 8);
  *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(v21 + 8) = v23;
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  v25 = *(_QWORD *)(v22 + 32);
  v26 = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v21 + 32) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(v22 + 48);
  v28 = *(_QWORD *)(v21 + 48);
  *(_QWORD *)(v21 + 40) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v21 + 48) = v27;
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(v21 + 56) = *(_BYTE *)(v22 + 56);
  v29 = *(_QWORD *)(v22 + 72);
  v30 = *(_QWORD *)(v21 + 72);
  *(_QWORD *)(v21 + 64) = *(_QWORD *)(v22 + 64);
  *(_QWORD *)(v21 + 72) = v29;
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(v22 + 88);
  v32 = *(_QWORD *)(v21 + 88);
  *(_QWORD *)(v21 + 80) = *(_QWORD *)(v22 + 80);
  *(_QWORD *)(v21 + 88) = v31;
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(v22 + 104);
  v34 = *(_QWORD *)(v21 + 104);
  *(_QWORD *)(v21 + 96) = *(_QWORD *)(v22 + 96);
  *(_QWORD *)(v21 + 104) = v33;
  swift_bridgeObjectRelease(v34);
  v35 = (int *)type metadata accessor for ClientContext(0);
  v36 = v35[12];
  v37 = v21 + v36;
  v38 = v22 + v36;
  v39 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  *(_QWORD *)(v21 + v35[13]) = *(_QWORD *)(v22 + v35[13]);
  v40 = v35[14];
  v41 = (_QWORD *)(v21 + v40);
  v42 = (uint64_t *)(v22 + v40);
  v44 = *v42;
  v43 = v42[1];
  v45 = v41[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  *(_BYTE *)(v21 + v35[15]) = *(_BYTE *)(v22 + v35[15]);
  v46 = v35[16];
  v47 = (_QWORD *)(v21 + v46);
  v48 = (uint64_t *)(v22 + v46);
  v50 = *v48;
  v49 = v48[1];
  v51 = v47[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  v52 = v35[17];
  v53 = (_QWORD *)(v21 + v52);
  v54 = (uint64_t *)(v22 + v52);
  v56 = *v54;
  v55 = v54[1];
  v57 = v53[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  v58 = v35[18];
  v59 = (_QWORD *)(v21 + v58);
  v60 = (uint64_t *)(v22 + v58);
  v62 = *v60;
  v61 = v60[1];
  v63 = v59[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  v64 = v35[19];
  v65 = (_QWORD *)(v21 + v64);
  v66 = (uint64_t *)(v22 + v64);
  v68 = *v66;
  v67 = v66[1];
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = v35[20];
  v71 = (_QWORD *)(v21 + v70);
  v72 = (uint64_t *)(v22 + v70);
  v74 = *v72;
  v73 = v72[1];
  v75 = v71[1];
  *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease(v75);
  v76 = v35[21];
  v77 = (_QWORD *)(v21 + v76);
  v78 = (uint64_t *)(v22 + v76);
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  v82 = v35[22];
  v83 = (_QWORD *)(v21 + v82);
  v84 = (uint64_t *)(v22 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  v88 = v35[23];
  v89 = (_QWORD *)(v21 + v88);
  v90 = (uint64_t *)(v22 + v88);
  v92 = *v90;
  v91 = v90[1];
  v93 = v89[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease(v93);
  v94 = v35[24];
  v95 = v21 + v94;
  v96 = v22 + v94;
  *(_QWORD *)v95 = *(_QWORD *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  *(_BYTE *)(v21 + v35[25]) = *(_BYTE *)(v22 + v35[25]);
  v97 = v35[26];
  v98 = *(_QWORD *)(v21 + v97);
  *(_QWORD *)(v21 + v97) = *(_QWORD *)(v22 + v97);
  swift_bridgeObjectRelease(v98);
  v99 = v35[27];
  v100 = (_QWORD *)(v21 + v99);
  v101 = (uint64_t *)(v22 + v99);
  v103 = *v101;
  v102 = v101[1];
  v104 = v100[1];
  *v100 = v103;
  v100[1] = v102;
  swift_bridgeObjectRelease(v104);
  v105 = v35[28];
  v106 = (_QWORD *)(v21 + v105);
  v107 = (uint64_t *)(v22 + v105);
  v109 = *v107;
  v108 = v107[1];
  v110 = v106[1];
  *v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease(v110);
  v111 = v35[29];
  v112 = (_QWORD *)(v21 + v111);
  v113 = (uint64_t *)(v22 + v111);
  v115 = *v113;
  v114 = v113[1];
  v116 = v112[1];
  *v112 = v115;
  v112[1] = v114;
  swift_bridgeObjectRelease(v116);
  v117 = a3[6];
  v118 = (_QWORD *)(a1 + v117);
  v119 = (uint64_t *)(a2 + v117);
  v121 = *v119;
  v120 = v119[1];
  v122 = v118[1];
  *v118 = v121;
  v118[1] = v120;
  swift_bridgeObjectRelease(v122);
  v123 = a3[7];
  v124 = (_QWORD *)(a1 + v123);
  v125 = (uint64_t *)(a2 + v123);
  v127 = *v125;
  v126 = v125[1];
  v128 = v124[1];
  *v124 = v127;
  v124[1] = v126;
  swift_bridgeObjectRelease(v128);
  return a1;
}

uint64_t sub_10004A74C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004A758);
}

uint64_t sub_10004A758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ClientContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10004A7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004A7E8);
}

uint64_t sub_10004A7E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ClientContext(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10004A868(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1001F32D0;
  result = type metadata accessor for ClientContext(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1001F32E8;
    v4[3] = &unk_1001F32E8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *assignWithCopy for RespondToInviteRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2 + 1;
  v7 = a2[2];
  if ((unint64_t)a1[2] >> 60 != 15)
  {
    if (v7 >> 60 != 15)
    {
      v9 = *v6;
      sub_10001A484(*v6, v7);
      v10 = a1[1];
      v11 = a1[2];
      a1[1] = v9;
      a1[2] = v7;
      sub_100037AB4(v10, v11);
      return a1;
    }
    sub_10004A9A8((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v6;
    return a1;
  }
  v8 = *v6;
  sub_10001A484(*v6, v7);
  a1[1] = v8;
  a1[2] = v7;
  return a1;
}

uint64_t sub_10004A9A8(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

__n128 initializeWithTake for RespondToInviteRequest(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for RespondToInviteRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2 + 1;
  v6 = a1[2];
  if (v6 >> 60 != 15)
  {
    v7 = a2[2];
    if (v7 >> 60 != 15)
    {
      v8 = a1[1];
      a1[1] = *v5;
      a1[2] = v7;
      sub_100037AB4(v8, v6);
      return a1;
    }
    sub_10004A9A8((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for RespondToInviteRequest(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RespondToInviteRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RespondToInviteRequest()
{
  return &type metadata for RespondToInviteRequest;
}

unint64_t sub_10004AB14()
{
  unint64_t result;

  result = qword_100260458;
  if (!qword_100260458)
  {
    result = swift_getWitnessTable(&unk_1001F3318, &type metadata for RespondToInviteRequest);
    atomic_store(result, (unint64_t *)&qword_100260458);
  }
  return result;
}

uint64_t sub_10004AB58(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004EA8(&qword_100260460, type metadata accessor for RespondToInviteRequestContent, (uint64_t)&unk_1001F3388);
  result = sub_100004EA8(&qword_1002603B8, type metadata accessor for RespondToInviteRequestContent, (uint64_t)&unk_1001F33CC);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10004ABB8()
{
  unint64_t result;

  result = qword_100260468;
  if (!qword_100260468)
  {
    result = swift_getWitnessTable(&unk_1001F3340, &type metadata for RespondToInviteRequest);
    atomic_store(result, (unint64_t *)&qword_100260468);
  }
  return result;
}

unint64_t sub_10004ABFC()
{
  unint64_t result;

  result = qword_100260478;
  if (!qword_100260478)
  {
    result = swift_getWitnessTable(&unk_1001F34E8, &type metadata for RespondToInviteRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260478);
  }
  return result;
}

unint64_t sub_10004AC40()
{
  unint64_t result;

  result = qword_1002604A8;
  if (!qword_1002604A8)
  {
    result = swift_getWitnessTable(&unk_1001F33F4, &type metadata for RespondToInviteRequest);
    atomic_store(result, (unint64_t *)&qword_1002604A8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RespondToInviteRequestContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RespondToInviteRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10004AD60 + 4 * byte_1001F32A9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10004AD94 + 4 * byte_1001F32A4[v4]))();
}

uint64_t sub_10004AD94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004AD9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004ADA4);
  return result;
}

uint64_t sub_10004ADB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004ADB8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10004ADBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004ADC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RespondToInviteRequestContent.CodingKeys()
{
  return &type metadata for RespondToInviteRequestContent.CodingKeys;
}

unint64_t sub_10004ADE4()
{
  unint64_t result;

  result = qword_1002604B0;
  if (!qword_1002604B0)
  {
    result = swift_getWitnessTable(&unk_1001F34C0, &type metadata for RespondToInviteRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002604B0);
  }
  return result;
}

unint64_t sub_10004AE2C()
{
  unint64_t result;

  result = qword_1002604B8;
  if (!qword_1002604B8)
  {
    result = swift_getWitnessTable(&unk_1001F3430, &type metadata for RespondToInviteRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002604B8);
  }
  return result;
}

unint64_t sub_10004AE74()
{
  unint64_t result;

  result = qword_1002604C0[0];
  if (!qword_1002604C0[0])
  {
    result = swift_getWitnessTable(&unk_1001F3458, &type metadata for RespondToInviteRequestContent.CodingKeys);
    atomic_store(result, qword_1002604C0);
  }
  return result;
}

uint64_t sub_10004AEB8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL)
  {
    v5 = 0xED0000747865746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43726576726573, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    v7 = 0xED0000747865746ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v8 = 0xE200000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6465747065636361 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6465747065636361, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10004B098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3[97] = v2;
  v3[96] = a2;
  v3[95] = a1;
  v4 = type metadata accessor for URLComponents(0);
  v3[98] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[99] = v5;
  v3[100] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SavePreferencesEndpoint(0);
  v3[101] = v6;
  v3[102] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100260580);
  v3[103] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Account(0);
  v3[104] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[105] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[106] = swift_task_alloc(v10);
  v3[107] = swift_task_alloc(v10);
  v3[108] = swift_task_alloc(v10);
  return swift_task_switch(sub_10004B18C, v2, 0);
}

uint64_t sub_10004B18C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = v0[96];
  v2 = type metadata accessor for Logger(0);
  v0[109] = sub_100037A9C(v2, (uint64_t)qword_10027B318);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[96];
  if (v6)
  {
    v8 = v0[95];
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v13 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    v0[94] = sub_10002BA84(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 94, v0 + 95, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "setActiveLocationSharingDevice: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[96], 2);
  }

  v11 = (_QWORD *)swift_task_alloc(dword_10026051C);
  v0[110] = v11;
  *v11 = v0;
  v11[1] = sub_10004B368;
  return sub_10004C2E8();
}

uint64_t sub_10004B368()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 880);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = v2[108];
    v6 = v2[107];
    v7 = v2[106];
    v8 = v2[103];
    v9 = v2[102];
    v10 = v2[100];
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v12 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    v2[111] = v12;
    *v12 = v4;
    v12[1] = sub_10004B440;
    return daemon.getter();
  }
}

uint64_t sub_10004B440(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 888);
  v5 = *v1;
  *(_QWORD *)(*v1 + 896) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[113] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[114] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[115] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10004B538;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10004B538(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 904);
  v5 = *(_QWORD **)v2;
  v5[116] = a1;
  v5[117] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10004C0C0, v5[97], 0);
  swift_release(v5[112]);
  v7 = (_QWORD *)swift_task_alloc(dword_10026599C);
  v5[118] = v7;
  *v7 = v5;
  v7[1] = sub_10004B5E0;
  return sub_1000059F0();
}

uint64_t sub_10004B5E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 944);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 776);
  *(_QWORD *)(*(_QWORD *)v1 + 952) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10004B640, v3, 0);
}

uint64_t sub_10004B640()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  swift_bridgeObjectRetain(v0[119]);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[119];
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    type metadata accessor for Device(0);
    v7 = swift_bridgeObjectRetain(v4);
    v8 = Array.description.getter(v7);
    v10 = v9;
    swift_bridgeObjectRelease(v4);
    v0[93] = sub_10002BA84(v8, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 93, v0 + 94, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease_n(v4, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "All devices: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[119], 2);
  }

  v11 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[120] = v11;
  *v11 = v0;
  v11[1] = sub_10004B7F4;
  return daemon.getter();
}

uint64_t sub_10004B7F4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 960);
  v5 = *v1;
  *(_QWORD *)(*v1 + 968) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[122] = v6;
  v7 = type metadata accessor for AccountService(0);
  v8 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_10004B8A0;
  return ActorServiceDaemon.getService<A>()(v3[114], v7, v3[115], v8);
}

uint64_t sub_10004B8A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 976);
  v5 = *(_QWORD **)v2;
  v5[123] = a1;
  v5[124] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10004C148, v5[97], 0);
  swift_release(v5[121]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002612E4);
  v5[125] = v7;
  *v7 = v5;
  v7[1] = sub_10004B950;
  return sub_1000069E8(v5[103]);
}

uint64_t sub_10004B950()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 776);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1000));
  return swift_task_switch(sub_10004B9A8, v1, 0);
}

uint64_t sub_10004B9A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  void (*v23)(uint64_t, _QWORD);
  Swift::String v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 840);
  v2 = *(_QWORD *)(v0 + 832);
  v3 = *(_QWORD *)(v0 + 824);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = sub_1000087A0(v3, &qword_100260580);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing primary account to setActiveLocationSharingDevice!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 984);
    v9 = *(_QWORD *)(v0 + 928);

    v10 = sub_100051194();
    v11 = swift_allocError(&type metadata for SettingsService.Error, v10, 0, 0);
    *v12 = 3;
    swift_willThrow(v11);
    swift_release(v8);
    swift_release(v9);
    v13 = *(_QWORD *)(v0 + 856);
    v14 = *(_QWORD *)(v0 + 848);
    v15 = *(_QWORD *)(v0 + 824);
    v16 = *(_QWORD *)(v0 + 816);
    v17 = *(_QWORD *)(v0 + 800);
    swift_task_dealloc(*(_QWORD *)(v0 + 864));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 864);
    v20 = *(_QWORD *)(v0 + 856);
    v30 = *(_QWORD *)(v0 + 816);
    v31 = *(_QWORD *)(v0 + 848);
    v21 = *(_QWORD *)(v0 + 800);
    v28 = *(_QWORD *)(v0 + 792);
    v29 = *(_QWORD *)(v0 + 784);
    v33 = *(_QWORD *)(v0 + 768);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v19, v3, v2);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    v22(v20, v19, v2);
    sub_10000E6E4(v21);
    v23 = (void (*)(uint64_t, _QWORD))URLComponents.path.modify(v0 + 712);
    v24._countAndFlagsBits = 0x657250657661732FLL;
    v24._object = (void *)0xEA00000000007366;
    String.append(_:)(v24);
    v23(v0 + 712, 0);
    v25 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    *(_QWORD *)(v0 + 1008) = v25;
    v25(v20, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v30, v21, v29);
    v22(v31, v19, v2);
    v26 = unk_1002610AC;
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1002610A8 + dword_1002610A8);
    swift_bridgeObjectRetain(v33);
    v27 = (_QWORD *)swift_task_alloc(v26);
    *(_QWORD *)(v0 + 1016) = v27;
    *v27 = v0;
    v27[1] = sub_10004BC6C;
    return v32(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 768));
  }
}

uint64_t sub_10004BC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 1016);
  v5[128] = a1;
  v5[129] = a2;
  v5[130] = a3;
  v5[131] = v3;
  swift_task_dealloc(v6);
  if (v3)
    v7 = sub_10004BF0C;
  else
    v7 = sub_10004BCE4;
  return swift_task_switch(v7, v5[97], 0);
}

uint64_t sub_10004BCE4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[130];
  v2 = v0[129];
  v3 = v0[128];
  v4 = v0[102];
  v0[82] = v0[101];
  v0[83] = sub_100004EA8(&qword_100260588, type metadata accessor for SavePreferencesEndpoint, (uint64_t)&unk_1001F6CB8);
  v5 = sub_10003276C(v0 + 79);
  sub_100025C70(v4, (uint64_t)v5, type metadata accessor for SavePreferencesEndpoint);
  v0[77] = &type metadata for SavePreferencesRequest;
  v0[78] = sub_1000511D8();
  v0[74] = v3;
  v0[75] = v2;
  v0[76] = v1;
  swift_bridgeObjectRetain(v3);
  v6 = sub_10001F728(v2, v1);
  v7 = Account.dsid.getter(v6);
  v9 = v8;
  v10 = Account.appToken.getter();
  v12 = v11;
  v0[87] = type metadata accessor for BasicCredential(0);
  v0[88] = &protocol witness table for BasicCredential;
  sub_10003276C(v0 + 84);
  BasicCredential.init(username:password:)(v7, v9, v10, v12);
  v13 = (_QWORD *)swift_task_alloc(dword_100263274);
  v0[132] = v13;
  *v13 = v0;
  v13[1] = sub_10004BE50;
  return sub_1000DE6C4((uint64_t)(v0 + 2), (uint64_t)(v0 + 79), (uint64_t)(v0 + 74), (uint64_t)(v0 + 84));
}

uint64_t sub_10004BE50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)v1 + 672;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 1056);
  *(_QWORD *)(*(_QWORD *)v1 + 1064) = v0;
  swift_task_dealloc(v4);
  if (v0)
  {
    v5 = v2[97];
    sub_1000087A0((uint64_t)(v2 + 84), &qword_100260598);
    v6 = sub_10004C1DC;
    v7 = v5;
  }
  else
  {
    v8 = (uint64_t)(v2 + 2);
    v9 = v2 + 79;
    v10 = v2 + 74;
    v11 = v2[97];
    sub_10002B3D4(v8);
    sub_1000087A0(v3, &qword_100260598);
    sub_10002BB90(v10);
    sub_10002BB90(v9);
    v6 = sub_10004BFCC;
    v7 = v11;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_10004BF0C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
  v2 = *(_QWORD *)(v0 + 928);
  v3 = *(_QWORD *)(v0 + 864);
  v4 = *(_QWORD *)(v0 + 832);
  v5 = *(_QWORD *)(v0 + 816);
  swift_release(*(_QWORD *)(v0 + 984));
  swift_release(v2);
  sub_100024990(v5, type metadata accessor for SavePreferencesEndpoint);
  v1(v3, v4);
  v6 = *(_QWORD *)(v0 + 856);
  v7 = *(_QWORD *)(v0 + 848);
  v8 = *(_QWORD *)(v0 + 824);
  v9 = *(_QWORD *)(v0 + 816);
  v10 = *(_QWORD *)(v0 + 800);
  swift_task_dealloc(*(_QWORD *)(v0 + 864));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004BFCC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 1040);
  v2 = *(_QWORD *)(v0 + 1032);
  v3 = *(_QWORD *)(v0 + 1024);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
  v5 = *(_QWORD *)(v0 + 928);
  v6 = *(_QWORD *)(v0 + 864);
  v7 = *(_QWORD *)(v0 + 856);
  v8 = *(_QWORD *)(v0 + 832);
  v11 = *(_QWORD *)(v0 + 848);
  v12 = *(_QWORD *)(v0 + 824);
  v9 = *(_QWORD *)(v0 + 816);
  v13 = *(_QWORD *)(v0 + 800);
  swift_release(*(_QWORD *)(v0 + 984));
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v9, type metadata accessor for SavePreferencesEndpoint);
  v4(v6, v8);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v9);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C0C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 896));
  v1 = *(_QWORD *)(v0 + 856);
  v2 = *(_QWORD *)(v0 + 848);
  v3 = *(_QWORD *)(v0 + 824);
  v4 = *(_QWORD *)(v0 + 816);
  v5 = *(_QWORD *)(v0 + 800);
  swift_task_dealloc(*(_QWORD *)(v0 + 864));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 928);
  swift_release(*(_QWORD *)(v0 + 968));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 856);
  v3 = *(_QWORD *)(v0 + 848);
  v4 = *(_QWORD *)(v0 + 824);
  v5 = *(_QWORD *)(v0 + 816);
  v6 = *(_QWORD *)(v0 + 800);
  swift_task_dealloc(*(_QWORD *)(v0 + 864));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C1DC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 1040);
  v2 = *(_QWORD *)(v0 + 1032);
  v3 = *(_QWORD *)(v0 + 1024);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
  v5 = *(_QWORD *)(v0 + 928);
  v6 = *(_QWORD *)(v0 + 864);
  v7 = *(_QWORD *)(v0 + 832);
  v8 = *(_QWORD *)(v0 + 816);
  swift_release(*(_QWORD *)(v0 + 984));
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v8, type metadata accessor for SavePreferencesEndpoint);
  v4(v6, v7);
  sub_10002BB90((_QWORD *)(v0 + 592));
  sub_10002BB90((_QWORD *)(v0 + 632));
  v9 = *(_QWORD *)(v0 + 856);
  v10 = *(_QWORD *)(v0 + 848);
  v11 = *(_QWORD *)(v0 + 824);
  v12 = *(_QWORD *)(v0 + 816);
  v13 = *(_QWORD *)(v0 + 800);
  swift_task_dealloc(*(_QWORD *)(v0 + 864));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C2E8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v1[7] = v0;
  v2 = type metadata accessor for DataManager.State(0);
  v1[8] = v2;
  v3 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v3);
  v1[10] = swift_task_alloc(v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v1[11] = v4;
  *v4 = v1;
  v4[1] = sub_10004C368;
  return daemon.getter();
}

uint64_t sub_10004C368(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *v1;
  *(_QWORD *)(*v1 + 96) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[13] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[14] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[15] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10004C460;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10004C460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 104);
  v4[16] = a1;
  v4[17] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[7];
    v7 = sub_10004CB00;
  }
  else
  {
    swift_release(v4[12]);
    v7 = sub_10004C4DC;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10004C4DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[10];
  v2 = v0[7];
  v3 = v0[16] + OBJC_IVAR____TtC13findmylocated11DataManager_state;
  swift_beginAccess(v3, v0 + 2, 0, 0);
  sub_100025C70(v3, v1, type metadata accessor for DataManager.State);
  return swift_task_switch(sub_10004C55C, v2, 0);
}

uint64_t sub_10004C55C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  swift_storeEnumTagMultiPayload(v2, *(_QWORD *)(v0 + 64), 6);
  sub_100050DC8(v1);
  v4 = v3;
  sub_100024990(v2, type metadata accessor for DataManager.State);
  sub_100024990(v1, type metadata accessor for DataManager.State);
  if ((v4 & 1) != 0)
  {
    if (qword_10025FB68 != -1)
      swift_once(&qword_10025FB68, sub_10019F540);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100037A9C(v5, (uint64_t)qword_10027B318);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 128);
    if (v9)
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v22 = v12;
      *(_DWORD *)v11 = 136446210;
      *(_QWORD *)(v0 + 48) = sub_10002BA84(0xD000000000000019, 0x80000001001FCE20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v11 + 4, v11 + 12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s DataManager is ready", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_release(v10);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 128));

    }
    v21 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_10025FB68 != -1)
      swift_once(&qword_10025FB68, sub_10019F540);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100037A9C(v13, (uint64_t)qword_10027B318);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v22 = v18;
      *(_DWORD *)v17 = 136446210;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(0xD000000000000019, 0x80000001001FCE20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v17 + 4, v17 + 12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s DataManager is not ready. Retry initClient.", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    v19 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 144) = v19;
    *v19 = v0;
    v19[1] = sub_10004C8C4;
    return daemon.getter();
  }
}

uint64_t sub_10004C8C4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 144);
  v5 = *v1;
  *(_QWORD *)(*v1 + 152) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[20] = v6;
  v7 = type metadata accessor for AccountService(0);
  v8 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_10004C96C;
  return ActorServiceDaemon.getService<A>()(v3[14], v7, v3[15], v8);
}

uint64_t sub_10004C96C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 160);
  v5 = *(_QWORD **)v2;
  v5[21] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10004CB44, v5[7], 0);
  swift_release(v5[19]);
  v5[22] = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_1002612F4);
  v5[23] = v7;
  *v7 = v5;
  v7[1] = sub_10004CA14;
  return sub_1000797AC();
}

uint64_t sub_10004CA14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  return swift_task_switch(sub_10004CA6C, v1, 0);
}

uint64_t sub_10004CA6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = sub_100051194();
  v4 = swift_allocError(&type metadata for SettingsService.Error, v3, 0, 0);
  *v5 = 11;
  swift_willThrow(v4);
  swift_release(v1);
  swift_release(v2);
  v6 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004CB00()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004CB44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004CB94(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v2 + 744) = v1;
  *(_BYTE *)(v2 + 1020) = a1;
  v3 = type metadata accessor for URLComponents(0);
  *(_QWORD *)(v2 + 752) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 760) = v4;
  *(_QWORD *)(v2 + 768) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SavePreferencesEndpoint(0);
  *(_QWORD *)(v2 + 776) = v5;
  *(_QWORD *)(v2 + 784) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_100260580);
  *(_QWORD *)(v2 + 792) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Account(0);
  *(_QWORD *)(v2 + 800) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 808) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 816) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 824) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 832) = swift_task_alloc(v9);
  return swift_task_switch(sub_10004CC84, v1, 0);
}

uint64_t sub_10004CC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;
  _QWORD *v7;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B318);
  *(_QWORD *)(v0 + 840) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 1020);
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    *(_DWORD *)(v0 + 1016) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1016, v0 + 1020, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "hideMyLocation: %{BOOL}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 848) = v7;
  *v7 = v0;
  v7[1] = sub_10004CDC4;
  return daemon.getter();
}

uint64_t sub_10004CDC4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 848);
  v5 = *v1;
  *(_QWORD *)(*v1 + 856) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[108] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[109] = v7;
  v8 = type metadata accessor for AccountService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[110] = v9;
  v10 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_10004CEBC;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10004CEBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 864);
  v5 = *(_QWORD **)v2;
  v5[111] = a1;
  v5[112] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10004D7FC, v5[93], 0);
  swift_release(v5[107]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002612E4);
  v5[113] = v7;
  *v7 = v5;
  v7[1] = sub_10004CF6C;
  return sub_1000069E8(v5[99]);
}

uint64_t sub_10004CF6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 744);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 904));
  return swift_task_switch(sub_10004CFC4, v1, 0);
}

uint64_t sub_10004CFC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  void (*v22)(uint64_t, _QWORD);
  Swift::String v23;
  void (*v24)(uint64_t, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, char);

  v1 = *(_QWORD *)(v0 + 808);
  v2 = *(_QWORD *)(v0 + 800);
  v3 = *(_QWORD *)(v0 + 792);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = sub_1000087A0(v3, &qword_100260580);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing primary account to hideMyLocation!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 888);

    v9 = sub_100051194();
    v10 = swift_allocError(&type metadata for SettingsService.Error, v9, 0, 0);
    *v11 = 3;
    swift_willThrow(v10);
    swift_release(v8);
    v12 = *(_QWORD *)(v0 + 824);
    v13 = *(_QWORD *)(v0 + 816);
    v14 = *(_QWORD *)(v0 + 792);
    v15 = *(_QWORD *)(v0 + 784);
    v16 = *(_QWORD *)(v0 + 768);
    swift_task_dealloc(*(_QWORD *)(v0 + 832));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 832);
    v19 = *(_QWORD *)(v0 + 824);
    v28 = *(_QWORD *)(v0 + 784);
    v29 = *(_QWORD *)(v0 + 816);
    v20 = *(_QWORD *)(v0 + 768);
    v26 = *(_QWORD *)(v0 + 760);
    v27 = *(_QWORD *)(v0 + 752);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v18, v3, v2);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    v21(v19, v18, v2);
    sub_10000E6E4(v20);
    v22 = (void (*)(uint64_t, _QWORD))URLComponents.path.modify(v0 + 712);
    v23._object = (void *)0x80000001001FCED0;
    v23._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v23);
    v22(v0 + 712, 0);
    v24 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    *(_QWORD *)(v0 + 912) = v24;
    v24(v19, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v28, v20, v27);
    v21(v29, v18, v2);
    v30 = (uint64_t (*)(uint64_t, char))((char *)&dword_100261098 + dword_100261098);
    v25 = (_QWORD *)swift_task_alloc(unk_10026109C);
    *(_QWORD *)(v0 + 920) = v25;
    *v25 = v0;
    v25[1] = sub_10004D264;
    return v30(*(_QWORD *)(v0 + 816), *(_BYTE *)(v0 + 1020));
  }
}

uint64_t sub_10004D264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 920);
  v6 = *(_QWORD **)v4;
  v6[116] = a1;
  v6[117] = a2;
  v6[118] = a3;
  v6[119] = v3;
  swift_task_dealloc(v5);
  if (v3)
    return swift_task_switch(sub_10004D42C, v6[93], 0);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v6[120] = v8;
  *v8 = v6;
  v8[1] = sub_10004D304;
  return daemon.getter();
}

uint64_t sub_10004D304(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 960);
  v5 = *v1;
  *(_QWORD *)(*v1 + 968) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[122] = v6;
  v7 = type metadata accessor for DataManager(0);
  v8 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10004D3B0;
  return ActorServiceDaemon.getService<A>()(v3[109], v7, v3[110], v8);
}

uint64_t sub_10004D3B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 976);
  v3[123] = a1;
  v3[124] = v1;
  swift_task_dealloc(v4);
  v5 = v3[121];
  v6 = v3[93];
  swift_release(v5);
  if (v1)
    v7 = sub_10004D884;
  else
    v7 = sub_10004D4E0;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10004D42C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 912);
  v2 = *(_QWORD *)(v0 + 832);
  v3 = *(_QWORD *)(v0 + 800);
  v4 = *(_QWORD *)(v0 + 784);
  swift_release(*(_QWORD *)(v0 + 888));
  sub_100024990(v4, type metadata accessor for SavePreferencesEndpoint);
  v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 824);
  v6 = *(_QWORD *)(v0 + 816);
  v7 = *(_QWORD *)(v0 + 792);
  v8 = *(_QWORD *)(v0 + 784);
  v9 = *(_QWORD *)(v0 + 768);
  swift_task_dealloc(*(_QWORD *)(v0 + 832));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D4E0()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[118];
  v2 = v0[117];
  v3 = v0[116];
  v4 = v0[98];
  v0[77] = v0[97];
  v0[78] = sub_100004EA8(&qword_100260588, type metadata accessor for SavePreferencesEndpoint, (uint64_t)&unk_1001F6CB8);
  v5 = sub_10003276C(v0 + 74);
  sub_100025C70(v4, (uint64_t)v5, type metadata accessor for SavePreferencesEndpoint);
  v0[82] = &type metadata for SavePreferencesRequest;
  v0[83] = sub_1000511D8();
  v0[79] = v3;
  v0[80] = v2;
  v0[81] = v1;
  swift_bridgeObjectRetain(v3);
  v6 = sub_10001F728(v2, v1);
  v7 = Account.dsid.getter(v6);
  v9 = v8;
  v10 = Account.appToken.getter();
  v12 = v11;
  v0[87] = type metadata accessor for BasicCredential(0);
  v0[88] = &protocol witness table for BasicCredential;
  sub_10003276C(v0 + 84);
  BasicCredential.init(username:password:)(v7, v9, v10, v12);
  v13 = (_QWORD *)swift_task_alloc(dword_100263274);
  v0[125] = v13;
  *v13 = v0;
  v13[1] = sub_10004D64C;
  return sub_1000DE6C4((uint64_t)(v0 + 2), (uint64_t)(v0 + 74), (uint64_t)(v0 + 79), (uint64_t)(v0 + 84));
}

uint64_t sub_10004D64C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)v1 + 672;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 1000);
  *(_QWORD *)(*(_QWORD *)v1 + 1008) = v0;
  swift_task_dealloc(v4);
  if (v0)
  {
    v5 = v2[93];
    sub_1000087A0((uint64_t)(v2 + 84), &qword_100260598);
    v6 = sub_10004D960;
    v7 = v5;
  }
  else
  {
    v8 = (uint64_t)(v2 + 2);
    v9 = v2 + 79;
    v10 = v2 + 74;
    v11 = v2[93];
    sub_10002B3D4(v8);
    sub_1000087A0(v3, &qword_100260598);
    sub_10002BB90(v9);
    sub_10002BB90(v10);
    v6 = sub_10004D708;
    v7 = v11;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_10004D708()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 944);
  v2 = *(_QWORD *)(v0 + 936);
  v3 = *(_QWORD *)(v0 + 928);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 912);
  v5 = *(_QWORD *)(v0 + 888);
  v6 = *(_QWORD *)(v0 + 832);
  v7 = *(_QWORD *)(v0 + 824);
  v8 = *(_QWORD *)(v0 + 800);
  v11 = *(_QWORD *)(v0 + 816);
  v12 = *(_QWORD *)(v0 + 792);
  v9 = *(_QWORD *)(v0 + 784);
  v13 = *(_QWORD *)(v0 + 768);
  swift_release(*(_QWORD *)(v0 + 984));
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v9, type metadata accessor for SavePreferencesEndpoint);
  v4(v6, v8);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v9);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D7FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 856));
  v1 = *(_QWORD *)(v0 + 824);
  v2 = *(_QWORD *)(v0 + 816);
  v3 = *(_QWORD *)(v0 + 792);
  v4 = *(_QWORD *)(v0 + 784);
  v5 = *(_QWORD *)(v0 + 768);
  swift_task_dealloc(*(_QWORD *)(v0 + 832));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D884()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 944);
  v2 = *(_QWORD *)(v0 + 936);
  v3 = *(_QWORD *)(v0 + 928);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 912);
  v5 = *(_QWORD *)(v0 + 832);
  v6 = *(_QWORD *)(v0 + 800);
  v7 = *(_QWORD *)(v0 + 784);
  swift_release(*(_QWORD *)(v0 + 888));
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v7, type metadata accessor for SavePreferencesEndpoint);
  v4(v5, v6);
  v8 = *(_QWORD *)(v0 + 824);
  v9 = *(_QWORD *)(v0 + 816);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 768);
  swift_task_dealloc(*(_QWORD *)(v0 + 832));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D960()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 944);
  v2 = *(_QWORD *)(v0 + 936);
  v3 = *(_QWORD *)(v0 + 928);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 912);
  v5 = *(_QWORD *)(v0 + 888);
  v6 = *(_QWORD *)(v0 + 832);
  v7 = *(_QWORD *)(v0 + 800);
  v8 = *(_QWORD *)(v0 + 784);
  swift_release(*(_QWORD *)(v0 + 984));
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v8, type metadata accessor for SavePreferencesEndpoint);
  v4(v6, v7);
  sub_10002BB90((_QWORD *)(v0 + 632));
  sub_10002BB90((_QWORD *)(v0 + 592));
  v9 = *(_QWORD *)(v0 + 824);
  v10 = *(_QWORD *)(v0 + 816);
  v11 = *(_QWORD *)(v0 + 792);
  v12 = *(_QWORD *)(v0 + 784);
  v13 = *(_QWORD *)(v0 + 768);
  swift_task_dealloc(*(_QWORD *)(v0 + 832));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004DA6C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v2 + 744) = v1;
  *(_BYTE *)(v2 + 1020) = a1;
  v3 = type metadata accessor for URLComponents(0);
  *(_QWORD *)(v2 + 752) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 760) = v4;
  *(_QWORD *)(v2 + 768) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SavePreferencesEndpoint(0);
  *(_QWORD *)(v2 + 776) = v5;
  *(_QWORD *)(v2 + 784) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_100260580);
  *(_QWORD *)(v2 + 792) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Account(0);
  *(_QWORD *)(v2 + 800) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 808) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 816) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 824) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 832) = swift_task_alloc(v9);
  return swift_task_switch(sub_10004DB5C, v1, 0);
}

uint64_t sub_10004DB5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;
  _QWORD *v7;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B318);
  *(_QWORD *)(v0 + 840) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 1020);
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    *(_DWORD *)(v0 + 1016) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1016, v0 + 1020, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "allowFriendshipRequests: %{BOOL}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 848) = v7;
  *v7 = v0;
  v7[1] = sub_10004DC9C;
  return daemon.getter();
}

uint64_t sub_10004DC9C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 848);
  v5 = *v1;
  *(_QWORD *)(*v1 + 856) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[108] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[109] = v7;
  v8 = type metadata accessor for AccountService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[110] = v9;
  v10 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  *v6 = v5;
  v6[1] = sub_10004DD94;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10004DD94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 864);
  v5 = *(_QWORD **)v2;
  v5[111] = a1;
  v5[112] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10004D7FC, v5[93], 0);
  swift_release(v5[107]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002612E4);
  v5[113] = v7;
  *v7 = v5;
  v7[1] = sub_10004DE44;
  return sub_1000069E8(v5[99]);
}

uint64_t sub_10004DE44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 744);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 904));
  return swift_task_switch(sub_10004DE9C, v1, 0);
}

uint64_t sub_10004DE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;

  v1 = *(_QWORD *)(v0 + 808);
  v2 = *(_QWORD *)(v0 + 800);
  v3 = *(_QWORD *)(v0 + 792);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = sub_1000087A0(v3, &qword_100260580);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing primary account to hideMyLocation!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 888);

    v9 = sub_100051194();
    v10 = swift_allocError(&type metadata for SettingsService.Error, v9, 0, 0);
    *v11 = 3;
    swift_willThrow(v10);
    swift_release(v8);
    v12 = *(_QWORD *)(v0 + 824);
    v13 = *(_QWORD *)(v0 + 816);
    v14 = *(_QWORD *)(v0 + 792);
    v15 = *(_QWORD *)(v0 + 784);
    v16 = *(_QWORD *)(v0 + 768);
    swift_task_dealloc(*(_QWORD *)(v0 + 832));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 832), v3, v2);
    v18 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 912) = v18;
    *v18 = v0;
    v18[1] = sub_10004E058;
    return daemon.getter();
  }
}

uint64_t sub_10004E058(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 912);
  v5 = *v1;
  *(_QWORD *)(*v1 + 920) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[116] = v6;
  v7 = type metadata accessor for DataManager(0);
  v8 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10004E104;
  return ActorServiceDaemon.getService<A>()(v3[109], v7, v3[110], v8);
}

uint64_t sub_10004E104(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 928);
  v3[117] = a1;
  v3[118] = v1;
  swift_task_dealloc(v4);
  v5 = v3[115];
  v6 = v3[93];
  swift_release(v5);
  if (v1)
    v7 = sub_10004E71C;
  else
    v7 = sub_10004E180;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10004E180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  void (*v7)(uint64_t, _QWORD);
  Swift::String v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, char);

  v1 = *(_QWORD *)(v0 + 832);
  v2 = *(_QWORD *)(v0 + 824);
  v3 = *(_QWORD *)(v0 + 808);
  v4 = *(_QWORD *)(v0 + 800);
  v14 = *(_QWORD *)(v0 + 784);
  v15 = *(_QWORD *)(v0 + 816);
  v5 = *(_QWORD *)(v0 + 768);
  v12 = *(_QWORD *)(v0 + 760);
  v13 = *(_QWORD *)(v0 + 752);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v2, v1, v4);
  sub_10000E6E4(v5);
  v7 = (void (*)(uint64_t, _QWORD))URLComponents.path.modify(v0 + 712);
  v8._object = (void *)0x80000001001FCE70;
  v8._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v8);
  v7(v0 + 712, 0);
  v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 952) = v9;
  v9(v2, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v14, v5, v13);
  v6(v15, v1, v4);
  v16 = (uint64_t (*)(uint64_t, char))((char *)&dword_100261068 + dword_100261068);
  v10 = (_QWORD *)swift_task_alloc(unk_10026106C);
  *(_QWORD *)(v0 + 960) = v10;
  *v10 = v0;
  v10[1] = sub_10004E2C8;
  return v16(*(_QWORD *)(v0 + 816), *(_BYTE *)(v0 + 1020));
}

uint64_t sub_10004E2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 960);
  v5[121] = a1;
  v5[122] = a2;
  v5[123] = a3;
  v5[124] = v3;
  swift_task_dealloc(v6);
  if (v3)
    v7 = sub_10004E568;
  else
    v7 = sub_10004E340;
  return swift_task_switch(v7, v5[93], 0);
}

uint64_t sub_10004E340()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[123];
  v2 = v0[122];
  v3 = v0[121];
  v4 = v0[98];
  v0[77] = v0[97];
  v0[78] = sub_100004EA8(&qword_100260588, type metadata accessor for SavePreferencesEndpoint, (uint64_t)&unk_1001F6CB8);
  v5 = sub_10003276C(v0 + 74);
  sub_100025C70(v4, (uint64_t)v5, type metadata accessor for SavePreferencesEndpoint);
  v0[82] = &type metadata for SavePreferencesRequest;
  v0[83] = sub_1000511D8();
  v0[79] = v3;
  v0[80] = v2;
  v0[81] = v1;
  swift_bridgeObjectRetain(v3);
  v6 = sub_10001F728(v2, v1);
  v7 = Account.dsid.getter(v6);
  v9 = v8;
  v10 = Account.appToken.getter();
  v12 = v11;
  v0[87] = type metadata accessor for BasicCredential(0);
  v0[88] = &protocol witness table for BasicCredential;
  sub_10003276C(v0 + 84);
  BasicCredential.init(username:password:)(v7, v9, v10, v12);
  v13 = (_QWORD *)swift_task_alloc(dword_100263274);
  v0[125] = v13;
  *v13 = v0;
  v13[1] = sub_10004E4AC;
  return sub_1000DE6C4((uint64_t)(v0 + 2), (uint64_t)(v0 + 74), (uint64_t)(v0 + 79), (uint64_t)(v0 + 84));
}

uint64_t sub_10004E4AC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)v1 + 672;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 1000);
  *(_QWORD *)(*(_QWORD *)v1 + 1008) = v0;
  swift_task_dealloc(v4);
  if (v0)
  {
    v5 = v2[93];
    sub_1000087A0((uint64_t)(v2 + 84), &qword_100260598);
    v6 = sub_10004E7C0;
    v7 = v5;
  }
  else
  {
    v8 = (uint64_t)(v2 + 2);
    v9 = v2 + 79;
    v10 = v2 + 74;
    v11 = v2[93];
    sub_10002B3D4(v8);
    sub_1000087A0(v3, &qword_100260598);
    sub_10002BB90(v9);
    sub_10002BB90(v10);
    v6 = sub_10004E628;
    v7 = v11;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_10004E568()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
  v2 = *(_QWORD *)(v0 + 888);
  v3 = *(_QWORD *)(v0 + 832);
  v4 = *(_QWORD *)(v0 + 800);
  v5 = *(_QWORD *)(v0 + 784);
  swift_release(*(_QWORD *)(v0 + 936));
  swift_release(v2);
  sub_100024990(v5, type metadata accessor for SavePreferencesEndpoint);
  v1(v3, v4);
  v6 = *(_QWORD *)(v0 + 824);
  v7 = *(_QWORD *)(v0 + 816);
  v8 = *(_QWORD *)(v0 + 792);
  v9 = *(_QWORD *)(v0 + 784);
  v10 = *(_QWORD *)(v0 + 768);
  swift_task_dealloc(*(_QWORD *)(v0 + 832));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E628()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 984);
  v2 = *(_QWORD *)(v0 + 976);
  v3 = *(_QWORD *)(v0 + 968);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
  v5 = *(_QWORD *)(v0 + 888);
  v6 = *(_QWORD *)(v0 + 832);
  v7 = *(_QWORD *)(v0 + 824);
  v8 = *(_QWORD *)(v0 + 800);
  v11 = *(_QWORD *)(v0 + 816);
  v12 = *(_QWORD *)(v0 + 792);
  v9 = *(_QWORD *)(v0 + 784);
  v13 = *(_QWORD *)(v0 + 768);
  swift_release(*(_QWORD *)(v0 + 936));
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v9, type metadata accessor for SavePreferencesEndpoint);
  v4(v6, v8);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v9);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E71C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 832);
  v2 = *(_QWORD *)(v0 + 808);
  v3 = *(_QWORD *)(v0 + 800);
  swift_release(*(_QWORD *)(v0 + 888));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 824);
  v5 = *(_QWORD *)(v0 + 816);
  v6 = *(_QWORD *)(v0 + 792);
  v7 = *(_QWORD *)(v0 + 784);
  v8 = *(_QWORD *)(v0 + 768);
  swift_task_dealloc(*(_QWORD *)(v0 + 832));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E7C0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 984);
  v2 = *(_QWORD *)(v0 + 976);
  v3 = *(_QWORD *)(v0 + 968);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
  v5 = *(_QWORD *)(v0 + 888);
  v6 = *(_QWORD *)(v0 + 832);
  v7 = *(_QWORD *)(v0 + 800);
  v8 = *(_QWORD *)(v0 + 784);
  swift_release(*(_QWORD *)(v0 + 936));
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v8, type metadata accessor for SavePreferencesEndpoint);
  v4(v6, v7);
  sub_10002BB90((_QWORD *)(v0 + 632));
  sub_10002BB90((_QWORD *)(v0 + 592));
  v9 = *(_QWORD *)(v0 + 824);
  v10 = *(_QWORD *)(v0 + 816);
  v11 = *(_QWORD *)(v0 + 792);
  v12 = *(_QWORD *)(v0 + 784);
  v13 = *(_QWORD *)(v0 + 768);
  swift_task_dealloc(*(_QWORD *)(v0 + 832));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E8CC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v3 + 196) = a2;
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = v2;
  v4 = type metadata accessor for Device(0);
  *(_QWORD *)(v3 + 56) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 64) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 72) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 80) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 88) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 96) = swift_task_alloc(v6);
  v7 = sub_100037A5C(&qword_100260538);
  *(_QWORD *)(v3 + 104) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004E97C, v2, 0);
}

uint64_t sub_10004E97C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;
  _QWORD *v7;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B318);
  *(_QWORD *)(v0 + 112) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 196);
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    *(_DWORD *)(v0 + 192) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 196, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "activeLocationSharingDevice cached: %{BOOL}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_10026051C);
  *(_QWORD *)(v0 + 120) = v7;
  *v7 = v0;
  v7[1] = sub_10004EABC;
  return sub_10004C2E8();
}

uint64_t sub_10004EABC()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 120);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    v6 = v2[12];
    v5 = v2[13];
    v8 = v2[10];
    v7 = v2[11];
    v9 = v2[9];
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v11 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    v2[16] = v11;
    *v11 = v4;
    v11[1] = sub_10004EB80;
    return daemon.getter();
  }
}

uint64_t sub_10004EB80(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 128);
  v5 = *v1;
  *(_QWORD *)(*v1 + 136) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 144) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10004EC68;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10004EC68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 144);
  v5 = *(_QWORD **)v2;
  v5[19] = a1;
  v5[20] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10004F384, v5[6], 0);
  swift_release(v5[17]);
  v7 = (_QWORD *)swift_task_alloc(dword_10026599C);
  v5[21] = v7;
  *v7 = v5;
  v7[1] = sub_10004ED0C;
  return sub_1000059F0();
}

uint64_t sub_10004ED0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10004ED6C, v3, 0);
}

uint64_t sub_10004ED6C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *log;
  uint64_t v75;
  os_log_type_t type;
  uint64_t v77;
  uint64_t v78[2];

  v1 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 176), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 176);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v78[0] = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = swift_bridgeObjectRetain(v4);
    v8 = Array.description.getter(v7);
    v10 = v9;
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v8, v10, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease_n(v4, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "All devices: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 176), 2);
  }

  v11 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(v0 + 64);
    v14 = v11 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v15 = *(_QWORD *)(v13 + 72);
    v16 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v13 + 16);
    v17 = swift_bridgeObjectRetain(v11);
    while (1)
    {
      v18 = v16(*(_QWORD *)(v0 + 96), v14, *(_QWORD *)(v0 + 56), v17);
      if ((Device.isActive.getter(v18) & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
      v14 += v15;
      if (!--v12)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
        goto LABEL_9;
      }
    }
    v20 = *(_QWORD *)(v0 + 96);
    v21 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 56);
    v23 = *(_QWORD *)(v0 + 64);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v21, v20, v22);
    v19 = 0;
  }
  else
  {
LABEL_9:
    v19 = 1;
  }
  v24 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 104);
  v26 = *(_QWORD *)(v0 + 56);
  v27 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v25, v19, 1, v26);
  swift_bridgeObjectRelease(v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    v28 = sub_1000087A0(*(_QWORD *)(v0 + 104), &qword_100260538);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Missing meDevice)", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }
    v32 = *(_QWORD *)(v0 + 152);

    v33 = sub_100051194();
    v34 = swift_allocError(&type metadata for SettingsService.Error, v33, 0, 0);
    *v35 = 8;
    swift_willThrow(v34);
    swift_release(v32);
    v36 = *(_QWORD *)(v0 + 96);
    v38 = *(_QWORD *)(v0 + 80);
    v37 = *(_QWORD *)(v0 + 88);
    v39 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    v40 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v42 = *(_QWORD *)(v0 + 80);
    v41 = *(_QWORD *)(v0 + 88);
    v44 = *(_QWORD *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v45 = *(_QWORD *)(v0 + 56);
    v46 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 32))(v46, *(_QWORD *)(v0 + 104), v45);
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
    v47(v41, v46, v45);
    v47(v42, v46, v45);
    v48 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v47)(v43, v46, v45);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter();
    v51 = os_log_type_enabled(v49, v50);
    v52 = *(_QWORD *)(v0 + 152);
    v54 = *(_QWORD *)(v0 + 80);
    v53 = *(_QWORD *)(v0 + 88);
    v55 = *(_QWORD *)(v0 + 64);
    v56 = *(_QWORD *)(v0 + 72);
    v57 = *(_QWORD *)(v0 + 56);
    if (v51)
    {
      type = v50;
      v77 = *(_QWORD *)(v0 + 152);
      v58 = swift_slowAlloc(34, -1);
      v75 = swift_slowAlloc(32, -1);
      v78[0] = v75;
      *(_DWORD *)v58 = 141558787;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v58 + 4, v58 + 12);
      *(_WORD *)(v58 + 12) = 2081;
      v59 = sub_100004EA8(&qword_100260570, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
      v60 = dispatch thunk of CustomStringConvertible.description.getter(v57, v59);
      log = v49;
      v62 = v61;
      *(_QWORD *)(v0 + 24) = sub_10002BA84(v60, v61, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v58 + 14, v58 + 22);
      swift_bridgeObjectRelease(v62);
      v63 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8);
      v64 = v63(v53, v57);
      *(_WORD *)(v58 + 22) = 1026;
      v65 = Device.isThisDevice.getter(v64) & 1;
      v63(v54, v57);
      *(_DWORD *)(v0 + 184) = v65;
      v66 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 188, v58 + 24, v58 + 28);
      *(_WORD *)(v58 + 28) = 1026;
      v67 = Device.isActive.getter(v66) & 1;
      v63(v56, v57);
      *(_DWORD *)(v0 + 188) = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 188, v0 + 192, v58 + 30, v58 + 34);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Me device: %{private,mask.hash}s\nisThisDevice? %{BOOL,public}d\nisActive? %{BOOL,public}d", (uint8_t *)v58, 0x22u);
      swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v58, -1, -1);
      swift_release(v77);

    }
    else
    {
      v68 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v68(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
      v68(v54, v57);
      v68(v53, v57);
      swift_release(v52);

    }
    v69 = *(_QWORD *)(v0 + 96);
    v71 = *(_QWORD *)(v0 + 80);
    v70 = *(_QWORD *)(v0 + 88);
    v72 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    v40 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v40();
}

uint64_t sub_10004F384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004F3F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_10004F410, v1, 0);
}

uint64_t sub_10004F410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B318);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "thisDeviceWithCompanion", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_10026051C);
  *(_QWORD *)(v0 + 32) = v6;
  *v6 = v0;
  v6[1] = sub_10004F50C;
  return sub_10004C2E8();
}

uint64_t sub_10004F50C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 32);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(void))(v4 + 8))();
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v2 + 40) = v6;
  *v6 = v4;
  v6[1] = sub_10004F588;
  return daemon.getter();
}

uint64_t sub_10004F588(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 40);
  v5 = *v1;
  *(_QWORD *)(*v1 + 48) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 56) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10004F670;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10004F670(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[7];
  v5 = *v2;
  v5[8] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10004F7AC, v5[3], 0);
  swift_release(v5[6]);
  v5[9] = a1;
  v7 = (uint64_t **)swift_task_alloc(dword_100262D94);
  v5[10] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_10004F720;
  return sub_1000E02D8(v5[2]);
}

uint64_t sub_10004F720()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  return swift_task_switch(sub_10004F778, v1, 0);
}

uint64_t sub_10004F778()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004F7AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004F7E0(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 1472) = v1;
  *(_BYTE *)(v2 + 1540) = a1;
  return swift_task_switch(sub_10004F7FC, v1, 0);
}

uint64_t sub_10004F7FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;
  _QWORD *v7;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B318);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 1540);
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    *(_DWORD *)(v0 + 1536) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1536, v0 + 1540, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "isMyLocationEnabled cached: %{BOOL}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_10026051C);
  *(_QWORD *)(v0 + 1480) = v7;
  *v7 = v0;
  v7[1] = sub_10004F938;
  return sub_10004C2E8();
}

uint64_t sub_10004F938()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1480);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(_QWORD))(v4 + 8))(0);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v2 + 1488) = v6;
  *v6 = v4;
  v6[1] = sub_10004F9B8;
  return daemon.getter();
}

uint64_t sub_10004F9B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1488);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1496) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1504) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10004FAA0;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10004FAA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1504);
  v5 = *(_QWORD **)v2;
  v5[189] = a1;
  v5[190] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10004FD28, v5[184], 0);
  swift_release(v5[187]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[191] = v7;
  *v7 = v5;
  v7[1] = sub_10004FB54;
  return sub_10000AFC8((uint64_t)(v5 + 56));
}

uint64_t sub_10004FB54()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1512);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1528));
  return swift_task_switch(sub_10004FBAC, v1, 0);
}

uint64_t sub_10004FBAC()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;

  sub_10000EF6C(v0 + 448, v0 + 880, &qword_1002603A8);
  if (sub_100049214(v0 + 880) == 1
    || (memcpy((void *)(v0 + 16), (const void *)(v0 + 880), 0x1B0uLL),
        sub_10000EF6C(v0 + 416, v0 + 1376, &qword_100260550),
        sub_100028DD4((uint64_t *)(v0 + 1376)),
        sub_10000AF28(v0 + 448),
        sub_10000EF6C(v0 + 1376, v0 + 1344, &qword_100260550),
        !*(_QWORD *)(v0 + 1352)))
  {
    v5 = 0;
  }
  else
  {
    v1 = *(_OWORD *)(v0 + 1344);
    v2 = *(_OWORD *)(v0 + 1360);
    *(_OWORD *)(v0 + 1312) = v1;
    *(_OWORD *)(v0 + 1328) = v2;
    *(_OWORD *)(v0 + 1424) = v1;
    *(_OWORD *)(v0 + 1440) = v1;
    *(_QWORD *)(v0 + 1456) = 28494;
    *(_QWORD *)(v0 + 1464) = 0xE200000000000000;
    v3 = sub_1000394E4();
    v4 = StringProtocol.caseInsensitiveCompare<A>(_:)(v0 + 1456, &type metadata for String, &type metadata for String, v3, v3);
    sub_100017F44(v0 + 1424);
    v5 = v4 == 0;
    *(_OWORD *)(v0 + 1408) = *(_OWORD *)(v0 + 1328);
    sub_100017F44(v0 + 1408);
  }
  *(_BYTE *)(v0 + 1541) = v5;
  return swift_task_switch(sub_10004FCF0, *(_QWORD *)(v0 + 1472), 0);
}

uint64_t sub_10004FCF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1512));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 1541));
}

uint64_t sub_10004FD28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1496));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10004FD60(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 1472) = v1;
  *(_BYTE *)(v2 + 1540) = a1;
  return swift_task_switch(sub_10004FD7C, v1, 0);
}

uint64_t sub_10004FD7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;
  _QWORD *v7;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B318);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 1540);
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    *(_DWORD *)(v0 + 1536) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1536, v0 + 1540, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "areFriendshipRequestsAllowed cached: %{BOOL}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_10026051C);
  *(_QWORD *)(v0 + 1480) = v7;
  *v7 = v0;
  v7[1] = sub_10004FEB8;
  return sub_10004C2E8();
}

uint64_t sub_10004FEB8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1480);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(_QWORD))(v4 + 8))(0);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v2 + 1488) = v6;
  *v6 = v4;
  v6[1] = sub_10004FF38;
  return daemon.getter();
}

uint64_t sub_10004FF38(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1488);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1496) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1504) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100050020;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100050020(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1504);
  v5 = *(_QWORD **)v2;
  v5[189] = a1;
  v5[190] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100051220, v5[184], 0);
  swift_release(v5[187]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[191] = v7;
  *v7 = v5;
  v7[1] = sub_1000500D4;
  return sub_10000AFC8((uint64_t)(v5 + 56));
}

uint64_t sub_1000500D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1512);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1528));
  return swift_task_switch(sub_10005012C, v1, 0);
}

uint64_t sub_10005012C()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  unint64_t v3;
  BOOL v4;

  sub_10000EF6C(v0 + 448, v0 + 880, &qword_1002603A8);
  if (sub_100049214(v0 + 880) == 1
    || (memcpy((void *)(v0 + 16), (const void *)(v0 + 880), 0x1B0uLL),
        sub_10000EF6C(v0 + 416, v0 + 1376, &qword_100260550),
        sub_100028DD4((uint64_t *)(v0 + 1376)),
        sub_10000AF28(v0 + 448),
        sub_10000EF6C(v0 + 1376, v0 + 1344, &qword_100260550),
        !*(_QWORD *)(v0 + 1352)))
  {
    v4 = 0;
  }
  else
  {
    v1 = *(_OWORD *)(v0 + 1360);
    *(_OWORD *)(v0 + 1312) = *(_OWORD *)(v0 + 1344);
    *(_OWORD *)(v0 + 1328) = v1;
    v2 = *(_OWORD *)(v0 + 1328);
    *(_OWORD *)(v0 + 1424) = v2;
    *(_OWORD *)(v0 + 1440) = v2;
    *(_QWORD *)(v0 + 1456) = 7562585;
    *(_QWORD *)(v0 + 1464) = 0xE300000000000000;
    v3 = sub_1000394E4();
    v4 = StringProtocol.caseInsensitiveCompare<A>(_:)(v0 + 1456, &type metadata for String, &type metadata for String, v3, v3) == 0;
    *(_OWORD *)(v0 + 1408) = *(_OWORD *)(v0 + 1312);
    sub_100017F44(v0 + 1408);
    sub_100017F44(v0 + 1424);
  }
  *(_BYTE *)(v0 + 1541) = v4;
  return swift_task_switch(sub_10005121C, *(_QWORD *)(v0 + 1472), 0);
}

uint64_t sub_10005027C()
{
  uint64_t v0;

  return swift_task_switch(sub_100050290, v0, 0);
}

uint64_t sub_100050290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v8;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B318);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v8 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD00000000000002BLL, 0x80000001001FCE40, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: Keep SettingsConnection active", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005040C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = v1;
  *(_BYTE *)(v2 + 116) = a1;
  return swift_task_switch(sub_100050428, v1, 0);
}

uint64_t sub_100050428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;
  _QWORD *v7;

  if (qword_10025FB68 != -1)
    swift_once(&qword_10025FB68, sub_10019F540);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027B318);
  *(_QWORD *)(v0 + 40) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 116);
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    *(_DWORD *)(v0 + 112) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 116, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "allDevices cached: %{BOOL}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_10026051C);
  *(_QWORD *)(v0 + 48) = v7;
  *v7 = v0;
  v7[1] = sub_100050568;
  return sub_10004C2E8();
}

uint64_t sub_100050568()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(void))(v4 + 8))();
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v2 + 56) = v6;
  *v6 = v4;
  v6[1] = sub_1000505E4;
  return daemon.getter();
}

uint64_t sub_1000505E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = *v1;
  *(_QWORD *)(*v1 + 64) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 72) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_1000506CC;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000506CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 72);
  v5 = *(_QWORD **)v2;
  v5[10] = a1;
  v5[11] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000509AC, v5[4], 0);
  swift_release(v5[8]);
  v7 = (_QWORD *)swift_task_alloc(dword_10026599C);
  v5[12] = v7;
  *v7 = v5;
  v7[1] = sub_100050770;
  return sub_1000059F0();
}

uint64_t sub_100050770(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000507D0, v3, 0);
}

uint64_t sub_1000507D0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 104), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 80);
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 16) = 1752392040;
    v15 = v6;
    *(_DWORD *)v5 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2081;
    type metadata accessor for Device(0);
    v7 = swift_bridgeObjectRetain(v4);
    v8 = Array.description.getter(v7);
    v10 = v9;
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v8, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease_n(v4, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "All devices: %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
    v11 = v14;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 104), 2);
    v11 = v12;
  }
  swift_release(v11);

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 104));
}

uint64_t sub_1000509AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000509E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1002605BC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_10004B098(a1, a2);
}

uint64_t sub_100050A3C(char a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1002605B4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000087DC;
  return sub_10004CB94(a1);
}

uint64_t sub_100050A88(char a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10026057C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  return sub_10004DA6C(a1);
}

uint64_t sub_100050AD4(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10026056C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_10004E8CC(a1, a2);
}

uint64_t sub_100050B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100260564);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_10004F410, v1, 0);
}

uint64_t sub_100050B94(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_10026055C);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_100050BF8;
  *(_QWORD *)(v4 + 1472) = v1;
  *(_BYTE *)(v4 + 1540) = a1;
  return swift_task_switch(sub_10004F7FC, v1, 0);
}

uint64_t sub_100050BF8(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc(v4);
  if (v1)
    v6 = 0;
  else
    v6 = a1 & 1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_100050C54(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_10026054C);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_100051224;
  *(_QWORD *)(v4 + 1472) = v1;
  *(_BYTE *)(v4 + 1540) = a1;
  return swift_task_switch(sub_10004FD7C, v1, 0);
}

uint64_t sub_100050CB8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100260544);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return swift_task_switch(sub_100050290, v0, 0);
}

uint64_t sub_100050D10(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_100260514);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_100050D74;
  *(_QWORD *)(v4 + 32) = v1;
  *(_BYTE *)(v4 + 116) = a1;
  return swift_task_switch(sub_100050428, v1, 0);
}

uint64_t sub_100050D74(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

void sub_100050DC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v2 = type metadata accessor for DataManager.State(0);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - v4;
  sub_100025C70(a1, (uint64_t)&v8 - v4, v6);
  v7 = (char *)sub_100050E78 + 4 * byte_1001F3558[swift_getEnumCaseMultiPayload(v5, v2)];
  __asm { BR              X10 }
}

uint64_t sub_100050E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;

  sub_1000087A0(v3, &qword_100260538);
  sub_100025C70(v2, v0, type metadata accessor for DataManager.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0, v1);
  return ((uint64_t (*)(void))((char *)sub_100050F34 + 4 * byte_1001F3560[EnumCaseMultiPayload]))();
}

BOOL sub_100050F34()
{
  uint64_t v0;
  unint64_t v1;

  sub_1000087A0(v0, &qword_100260538);
  return v1 >= 2;
}

uint64_t sub_100050FD0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_100051048(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100037A5C(&qword_100260520);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_100051194()
{
  unint64_t result;

  result = qword_100260530;
  if (!qword_100260530)
  {
    result = swift_getWitnessTable(&unk_1001FA290, &type metadata for SettingsService.Error);
    atomic_store(result, (unint64_t *)&qword_100260530);
  }
  return result;
}

unint64_t sub_1000511D8()
{
  unint64_t result;

  result = qword_100260590;
  if (!qword_100260590)
  {
    result = swift_getWitnessTable(&unk_1001F4360, &type metadata for SavePreferencesRequest);
    atomic_store(result, (unint64_t *)&qword_100260590);
  }
  return result;
}

uint64_t sub_100051228(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Priority;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2[14] = a1;
  v2[15] = v1;
  v2[16] = *v1;
  v3 = type metadata accessor for Location(0);
  v2[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[18] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[19] = swift_task_alloc(v5);
  v2[20] = swift_task_alloc(v5);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002605C8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[21] = swift_task_alloc(v6);
  v2[22] = swift_task_alloc(v6);
  v7 = type metadata accessor for ClientOrigin(0);
  v2[23] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[24] = v8;
  v2[25] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RequestOrigin(0);
  v2[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_1002605D0);
  v2[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Priority = type metadata accessor for LocatePriority(0);
  v2[28] = Priority;
  v12 = *(_QWORD *)(Priority - 8);
  v2[29] = v12;
  v2[30] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocationRequest(0);
  v2[31] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[32] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[33] = swift_task_alloc(v15);
  v2[34] = swift_task_alloc(v15);
  v16 = type metadata accessor for Handle(0);
  v2[35] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[36] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[37] = swift_task_alloc(v18);
  v2[38] = swift_task_alloc(v18);
  v2[39] = swift_task_alloc(v18);
  v2[40] = swift_task_alloc(v18);
  v2[41] = swift_task_alloc(v18);
  v19 = type metadata accessor for Date(0);
  v2[42] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v2[43] = v20;
  v2[44] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100051424, v1, 0);
}

uint64_t sub_100051424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t type[8];
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 112);
  v2 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 360) = sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 112);
    v7 = swift_slowAlloc(32, -1);
    v38 = swift_slowAlloc(64, -1);
    v40 = v38;
    *(_DWORD *)v7 = 136446723;
    *(_QWORD *)(v0 + 88) = sub_10002BA84(0xD000000000000023, 0x80000001001FCEF0, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2160;
    *(_QWORD *)(v0 + 96) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v7 + 14, v7 + 22);
    *(_WORD *)(v7 + 22) = 2081;
    v8 = swift_bridgeObjectRetain(v6);
    v9 = Array.description.getter(v8);
    v11 = v10;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v0 + 104) = sub_10002BA84(v9, v11, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v7 + 24, v7 + 32);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s handles: %{private,mask.hash}s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 112), 2);
  }

  v13 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 16);
  *(_QWORD *)(v0 + 368) = v13;
  if (v13)
  {
    v15 = *(_QWORD *)(v0 + 344);
    v14 = *(_QWORD *)(v0 + 352);
    v16 = *(_QWORD *)(v0 + 336);
    *(_QWORD *)(v0 + 40) = _swiftEmptyDictionarySingleton;
    v17 = static Date.trustedNow.getter(v14);
    *(double *)(v0 + 376) = Date.timeIntervalSince1970.getter(v17);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    v18 = (_QWORD *)swift_task_alloc(dword_1002605DC);
    *(_QWORD *)(v0 + 384) = v18;
    *v18 = v0;
    v18[1] = sub_100051838;
    return sub_100006B20(*(_QWORD *)(v0 + 112));
  }
  else
  {
    v20 = Logger.logObject.getter(v12);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "start retrieve legacy location called with empty handles!", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v39 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    v24 = *(_QWORD *)(v0 + 320);
    v23 = *(_QWORD *)(v0 + 328);
    v26 = *(_QWORD *)(v0 + 304);
    v25 = *(_QWORD *)(v0 + 312);
    v27 = *(_QWORD *)(v0 + 296);
    v28 = *(_QWORD *)(v0 + 264);
    v29 = *(_QWORD *)(v0 + 272);
    v30 = *(_QWORD *)(v0 + 240);
    v31 = *(_QWORD *)(v0 + 216);
    v32 = *(_QWORD *)(v0 + 208);
    v33 = *(_QWORD *)(v0 + 200);
    v34 = *(_QWORD *)(v0 + 176);
    v35 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)type = *(_QWORD *)(v0 + 160);
    v37 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v29);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(*(_QWORD *)type);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v39);
  }
}

uint64_t sub_100051838(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 384);
  *(_QWORD *)(*v2 + 392) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 120);
  if (v1)
  {
    v7 = sub_100052A54;
  }
  else
  {
    *(_QWORD *)(v4 + 400) = a1;
    v7 = sub_1000518AC;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000518AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t refreshed;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = (_QWORD *)swift_task_alloc(48);
  v5[2] = v4;
  v5[3] = v2;
  v5[4] = v0 + 40;
  v5[5] = v3;
  sub_1000552D0(v1, (void (*)(char *, char *))sub_100054640);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v5);
  v6 = (char *)_swiftEmptyArrayStorage;
  v7 = *(_QWORD *)(v0 + 112);
  v53 = *(_QWORD *)(v0 + 288);
  v55 = (char *)_swiftEmptyArrayStorage;
  v8 = *(_DWORD *)(v53 + 80);
  *(_DWORD *)(v0 + 488) = v8;
  v9 = *(_QWORD *)(v53 + 72);
  *(_QWORD *)(v0 + 408) = v9;
  v50 = (v8 + 32) & ~(unint64_t)v8;
  v10 = v7 + v50;
  v11 = *(void (**)(_QWORD, uint64_t, _QWORD, __n128))(v53 + 16);
  *(_QWORD *)(v0 + 416) = v11;
  v12 = swift_bridgeObjectRetain(v7);
  v13 = 0;
  do
  {
    v11(*(_QWORD *)(v0 + 328), v10, *(_QWORD *)(v0 + 280), v12);
    v14 = *(_QWORD *)(v0 + 40);
    if (*(_QWORD *)(v14 + 16)
      && (v15 = *(_QWORD *)(v0 + 328),
          swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40)),
          sub_10001CBC8(v15),
          LOBYTE(v15) = v16,
          swift_bridgeObjectRelease(v14),
          (v15 & 1) != 0))
    {
      (*(void (**)(_QWORD, _QWORD))(v53 + 8))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 280));
    }
    else
    {
      v17 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 32);
      v17(*(char **)(v0 + 320), *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 280));
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        sub_100018EBC(0, *((_QWORD *)v6 + 2) + 1, 1);
        v6 = v55;
      }
      v19 = *((_QWORD *)v6 + 2);
      v18 = *((_QWORD *)v6 + 3);
      if (v19 >= v18 >> 1)
      {
        sub_100018EBC(v18 > 1, v19 + 1, 1);
        v6 = v55;
      }
      v20 = *(_QWORD *)(v0 + 320);
      v21 = *(_QWORD *)(v0 + 280);
      *((_QWORD *)v6 + 2) = v19 + 1;
      v17(&v6[v50 + v19 * v9], v20, v21);
      v55 = v6;
    }
    ++v13;
    v10 += v9;
  }
  while (v13 != *(_QWORD *)(v0 + 368));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  if (*((_QWORD *)v6 + 2))
  {
    v22 = *(_QWORD *)(v0 + 240);
    v23 = *(_QWORD *)(v0 + 216);
    v25 = *(_QWORD *)(v0 + 200);
    v24 = *(_QWORD *)(v0 + 208);
    v26 = *(_QWORD *)(v0 + 192);
    v51 = *(_QWORD *)(v0 + 184);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 104))(v22, enum case for LocatePriority.live(_:), *(_QWORD *)(v0 + 224));
    v27 = enum case for LegacyRefreshCommandReason.deepLocate(_:);
    refreshed = type metadata accessor for LegacyRefreshCommandReason(0);
    v29 = *(_QWORD *)(refreshed - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 104))(v23, v27, refreshed);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v23, 0, 1, refreshed);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v25, enum case for ClientOrigin.other(_:), v51);
    RequestOrigin.init(_:)(v25);
    LocationRequest.init(priority:origin:toHandles:reason:startRefreshingLocation:isCached:)(v22, v24, v6, v23, 0, 0);
    v30 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 424) = v30;
    *v30 = v0;
    v30[1] = sub_100051D14;
    return daemon.getter();
  }
  else
  {
    v32 = swift_release(v6);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v35 = 134217984;
      *(_QWORD *)(v0 + 64) = 0x404E000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v35 + 4, v35 + 12);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "All cached legacy locations < %fs. Just return cached loactions", v35, 0xCu);
      swift_slowDealloc(v35, -1, -1);
    }

    v54 = *(_QWORD *)(v0 + 40);
    v37 = *(_QWORD *)(v0 + 320);
    v36 = *(_QWORD *)(v0 + 328);
    v39 = *(_QWORD *)(v0 + 304);
    v38 = *(_QWORD *)(v0 + 312);
    v40 = *(_QWORD *)(v0 + 296);
    v41 = *(_QWORD *)(v0 + 264);
    v42 = *(_QWORD *)(v0 + 272);
    v43 = *(_QWORD *)(v0 + 240);
    v44 = *(_QWORD *)(v0 + 216);
    v45 = *(_QWORD *)(v0 + 208);
    v46 = *(_QWORD *)(v0 + 200);
    v47 = *(_QWORD *)(v0 + 176);
    v48 = *(_QWORD *)(v0 + 168);
    v49 = *(_QWORD *)(v0 + 160);
    v52 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v42);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v52);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v54);
  }
}

uint64_t sub_100051D14(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 424);
  v5 = *v1;
  *(_QWORD *)(*v1 + 432) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 440) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for CommandManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002605E0, type metadata accessor for CommandManager, (uint64_t)&unk_1001F4950);
  *v6 = v5;
  v6[1] = sub_100051DFC;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100051DFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 440);
  v4[56] = a1;
  v4[57] = v1;
  swift_task_dealloc(v5);
  v6 = v4[54];
  if (v1)
  {
    v7 = v4[15];
    swift_release(v6);
    v8 = sub_100052FD0;
    v9 = v7;
  }
  else
  {
    swift_release(v6);
    v8 = sub_100051E80;
    v9 = a1;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_100051E80()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[56];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[32] + 16))(v0[33], v0[34], v0[31]);
  v2 = (unint64_t *)(v1 + OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands);
  swift_beginAccess(v2, v0 + 2, 33, 0);
  v3 = *v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  *v2 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v3 = sub_10003C448(0, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v2 = v3;
  }
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    v3 = sub_10003C448(v5 > 1, v6 + 1, 1, v3);
    *v2 = v3;
  }
  v8 = v0[32];
  v7 = v0[33];
  v9 = v0[31];
  *(_QWORD *)(v3 + 16) = v6 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))(v3+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v6, v7, v9);
  swift_endAccess(v0 + 2);
  v10 = (_QWORD *)swift_task_alloc(dword_100261814);
  v0[58] = v10;
  *v10 = v0;
  v10[1] = sub_100051FC0;
  return sub_100018EE8(1, 0, 0);
}

uint64_t sub_100051FC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 464);
  v3[59] = a1;
  v3[60] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10005202C;
  else
    v5 = sub_10005216C;
  return swift_task_switch(v5, v3[15], 0);
}

uint64_t sub_10005202C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 448));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 328);
  v8 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 264);
  v10 = *(_QWORD *)(v0 + 272);
  v12 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 160);
  v20 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10005216C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  void (*v64)(unint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;

  v1 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 472), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 472);
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 48) = 1752392040;
    v111 = (_QWORD *)v6;
    *(_DWORD *)v5 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2081;
    sub_100004EA8(&qword_1002605F8, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    v7 = swift_bridgeObjectRetain(v4);
    v8 = Dictionary.description.getter(v7);
    v10 = v9;
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v0 + 56) = sub_10002BA84(v8, v10, (uint64_t *)&v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease_n(v4, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Server returned legacy locations < %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 472), 2);
  }

  v11 = *(_QWORD *)(v0 + 472);
  v97 = *(_QWORD *)(v0 + 368);
  v109 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v11 + 64);
  v94 = v11 + 64;
  v13 = -1;
  v99 = v11;
  v101 = 0;
  v14 = -1 << *(_BYTE *)(v11 + 32);
  if (-v14 < 64)
    v13 = ~(-1 << -(char)v14);
  v15 = v13 & v12;
  v96 = (unint64_t)(63 - v14) >> 6;
  v95 = *(_QWORD *)(v0 + 112)
      + *(_QWORD *)(v0 + 408)
      + ((*(unsigned __int8 *)(v0 + 488) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 488));
  while (v15)
  {
    v18 = __clz(__rbit64(v15));
    v19 = (v15 - 1) & v15;
    v20 = v18 | (v101 << 6);
LABEL_11:
    v21 = *(_QWORD *)(v0 + 168);
    v22 = *(_QWORD *)(v0 + 136);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 416))(v21, *(_QWORD *)(v99 + 48) + *(_QWORD *)(v0 + 408) * v20, *(_QWORD *)(v0 + 280));
    v23 = *(_QWORD *)(v99 + 56) + *(_QWORD *)(v109 + 72) * v20;
    v24 = sub_100037A5C(&qword_1002605E8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v109 + 16))(v21 + *(int *)(v24 + 48), v23, v22);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v21, 0, 1, v24);
LABEL_30:
    v30 = *(_QWORD *)(v0 + 176);
    sub_1000545F8(*(_QWORD *)(v0 + 168), v30);
    v31 = sub_100037A5C(&qword_1002605E8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31) == 1)
    {
      v81 = *(_QWORD *)(v0 + 472);
      v82 = *(_QWORD *)(v0 + 272);
      v83 = *(_QWORD *)(v0 + 248);
      v84 = *(_QWORD *)(v0 + 256);
      swift_release(*(_QWORD *)(v0 + 448));
      swift_release(v81);
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v82, v83);
      v110 = *(_QWORD *)(v0 + 40);
      v86 = *(_QWORD *)(v0 + 320);
      v85 = *(_QWORD *)(v0 + 328);
      v88 = *(_QWORD *)(v0 + 304);
      v87 = *(_QWORD *)(v0 + 312);
      v89 = *(_QWORD *)(v0 + 296);
      v90 = *(_QWORD *)(v0 + 264);
      v91 = *(_QWORD *)(v0 + 272);
      v92 = *(_QWORD *)(v0 + 240);
      v93 = *(_QWORD *)(v0 + 216);
      v98 = *(_QWORD *)(v0 + 208);
      v100 = *(_QWORD *)(v0 + 200);
      v102 = *(_QWORD *)(v0 + 176);
      v104 = *(_QWORD *)(v0 + 168);
      v106 = *(_QWORD *)(v0 + 160);
      v108 = *(_QWORD *)(v0 + 152);
      swift_task_dealloc(*(_QWORD *)(v0 + 352));
      swift_task_dealloc(v85);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v88);
      swift_task_dealloc(v89);
      swift_task_dealloc(v91);
      swift_task_dealloc(v90);
      swift_task_dealloc(v92);
      swift_task_dealloc(v93);
      swift_task_dealloc(v98);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v104);
      swift_task_dealloc(v106);
      swift_task_dealloc(v108);
      (*(void (**)(uint64_t))(v0 + 8))(v110);
      return;
    }
    v105 = v19;
    v107 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
    v33 = *(_QWORD *)(v0 + 304);
    v32 = *(_QWORD *)(v0 + 312);
    v34 = *(_QWORD *)(v0 + 280);
    v35 = *(_QWORD *)(v0 + 288);
    v36 = *(_QWORD *)(v0 + 160);
    v37 = *(_QWORD *)(v0 + 136);
    v38 = *(_QWORD *)(v0 + 112);
    v39 = v38 + ((*(unsigned __int8 *)(v0 + 488) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 488));
    v40 = *(_QWORD *)(v0 + 176) + *(int *)(v31 + 48);
    (*(void (**)(uint64_t))(v35 + 32))(v32);
    v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 32);
    v103(v36, v40, v37);
    v107(v33, v39, v34);
    v41 = sub_100004EA8(&qword_1002605F0, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    swift_bridgeObjectRetain(v38);
    LOBYTE(v40) = dispatch thunk of static Equatable.== infix(_:_:)(v33, v32, v34, v41);
    v42 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v42(v33, v34);
    if ((v40 & 1) == 0)
    {
      if (v97 == 1)
        goto LABEL_7;
      v43 = *(_QWORD *)(v0 + 304);
      v44 = *(_QWORD *)(v0 + 312);
      v45 = *(_QWORD *)(v0 + 280);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 416))(v43, v95, v45);
      LOBYTE(v44) = dispatch thunk of static Equatable.== infix(_:_:)(v43, v44, v45, v41);
      v42(v43, v45);
      if ((v44 & 1) == 0)
      {
        if (v97 != 2)
        {
          v76 = 2;
          while (1)
          {
            (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 416))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 112)+ ((*(unsigned __int8 *)(v0 + 488) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 488))+ *(_QWORD *)(v0 + 408) * v76, *(_QWORD *)(v0 + 280));
            v77 = v76 + 1;
            if (__OFADD__(v76, 1))
              break;
            v78 = *(_QWORD *)(v0 + 304);
            v79 = *(_QWORD *)(v0 + 280);
            v80 = dispatch thunk of static Equatable.== infix(_:_:)(v78, *(_QWORD *)(v0 + 312), v79, v41);
            v42(v78, v79);
            if ((v80 & 1) != 0)
              goto LABEL_34;
            ++v76;
            if (v77 == *(_QWORD *)(v0 + 368))
              goto LABEL_7;
          }
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
LABEL_7:
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
        v15 = v105;
        goto LABEL_8;
      }
    }
LABEL_34:
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
    v47 = *(_QWORD *)(v0 + 312);
    v48 = *(_QWORD *)(v0 + 296);
    v49 = *(_QWORD *)(v0 + 280);
    v51 = *(_QWORD *)(v0 + 152);
    v50 = *(_QWORD *)(v0 + 160);
    v52 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
    v46(v48, v47, v49);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 16))(v51, v50, v52);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 40));
    v111 = *(_QWORD **)(v0 + 40);
    v54 = v111;
    *(_QWORD *)(v0 + 40) = 0x8000000000000000;
    v56 = sub_10001CBC8(v48);
    v57 = v54[2];
    v58 = (v55 & 1) == 0;
    v59 = v57 + v58;
    if (__OFADD__(v57, v58))
      goto LABEL_55;
    v60 = v55;
    if (v54[3] >= v59)
    {
      v15 = v105;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v55 & 1) == 0)
          goto LABEL_38;
      }
      else
      {
        sub_1000F63E0();
        v54 = v111;
        if ((v60 & 1) == 0)
          goto LABEL_38;
      }
    }
    else
    {
      v61 = *(_QWORD *)(v0 + 296);
      sub_100161478(v59, isUniquelyReferenced_nonNull_native);
      v54 = v111;
      v62 = sub_10001CBC8(v61);
      v15 = v105;
      if ((v60 & 1) != (v63 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 280));
        return;
      }
      v56 = v62;
      if ((v60 & 1) == 0)
      {
LABEL_38:
        v65 = *(_QWORD *)(v0 + 408);
        v64 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 416);
        v66 = *(_QWORD *)(v0 + 296);
        v67 = *(_QWORD *)(v0 + 280);
        v68 = *(_QWORD *)(v0 + 152);
        v69 = *(_QWORD *)(v0 + 136);
        v54[(v56 >> 6) + 8] |= 1 << v56;
        v64(v54[6] + v65 * v56, v66, v67);
        v103(v54[7] + *(_QWORD *)(v109 + 72) * v56, v68, v69);
        v70 = v54[2];
        v71 = __OFADD__(v70, 1);
        v72 = v70 + 1;
        if (v71)
          goto LABEL_57;
        v54[2] = v72;
        goto LABEL_43;
      }
    }
    (*(void (**)(unint64_t, _QWORD, _QWORD))(v109 + 40))(v54[7] + *(_QWORD *)(v109 + 72) * v56, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
LABEL_43:
    v73 = *(_QWORD *)(v0 + 296);
    v74 = *(_QWORD *)(v0 + 280);
    v75 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 40) = v54;
    swift_bridgeObjectRelease(v75);
    v42(v73, v74);
LABEL_8:
    v16 = *(_QWORD *)(v0 + 312);
    v17 = *(_QWORD *)(v0 + 280);
    (*(void (**)(_QWORD, _QWORD))(v109 + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
    v42(v16, v17);
  }
  v25 = v101 + 1;
  if (__OFADD__(v101, 1))
    goto LABEL_56;
  if (v25 >= v96)
  {
LABEL_29:
    v28 = *(_QWORD *)(v0 + 168);
    v29 = sub_100037A5C(&qword_1002605E8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
    v19 = 0;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(v94 + 8 * v25);
  if (v26)
  {
LABEL_15:
    v19 = (v26 - 1) & v26;
    v20 = __clz(__rbit64(v26)) + (v25 << 6);
    v101 = v25;
    goto LABEL_11;
  }
  v27 = v101 + 2;
  ++v101;
  if (v25 + 1 >= v96)
    goto LABEL_29;
  v26 = *(_QWORD *)(v94 + 8 * v27);
  if (v26)
    goto LABEL_18;
  v101 = v25 + 1;
  if (v25 + 2 >= v96)
    goto LABEL_29;
  v26 = *(_QWORD *)(v94 + 8 * (v25 + 2));
  if (v26)
  {
    v25 += 2;
    goto LABEL_15;
  }
  v27 = v25 + 3;
  v101 = v25 + 2;
  if (v25 + 3 >= v96)
    goto LABEL_29;
  v26 = *(_QWORD *)(v94 + 8 * v27);
  if (v26)
  {
LABEL_18:
    v25 = v27;
    goto LABEL_15;
  }
  while (1)
  {
    v25 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v25 >= v96)
    {
      v101 = v96 - 1;
      goto LABEL_29;
    }
    v26 = *(_QWORD *)(v94 + 8 * v25);
    ++v27;
    if (v26)
      goto LABEL_15;
  }
LABEL_58:
  __break(1u);
}

uint64_t sub_100052A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t refreshed;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;

  v1 = *(_QWORD *)(v0 + 392);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 392);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (char *)swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136446210;
    v62 = v7;
    *(_QWORD *)(v0 + 72) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 72, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 80) = sub_10002BA84(v9, v10, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetch cached server location failed with error: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 392);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  v13 = (char *)_swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(v0 + 112);
  v60 = *(_QWORD *)(v0 + 288);
  v62 = (char *)_swiftEmptyArrayStorage;
  v15 = *(_DWORD *)(v60 + 80);
  *(_DWORD *)(v0 + 488) = v15;
  v16 = *(_QWORD *)(v60 + 72);
  *(_QWORD *)(v0 + 408) = v16;
  v57 = (v15 + 32) & ~(unint64_t)v15;
  v17 = v14 + v57;
  v18 = *(void (**)(_QWORD, uint64_t, _QWORD, __n128))(v60 + 16);
  *(_QWORD *)(v0 + 416) = v18;
  v19 = swift_bridgeObjectRetain(v14);
  v20 = 0;
  do
  {
    v18(*(_QWORD *)(v0 + 328), v17, *(_QWORD *)(v0 + 280), v19);
    v21 = *(_QWORD *)(v0 + 40);
    if (*(_QWORD *)(v21 + 16)
      && (v22 = *(_QWORD *)(v0 + 328),
          swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40)),
          sub_10001CBC8(v22),
          LOBYTE(v22) = v23,
          swift_bridgeObjectRelease(v21),
          (v22 & 1) != 0))
    {
      (*(void (**)(_QWORD, _QWORD))(v60 + 8))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 280));
    }
    else
    {
      v24 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 32);
      v24(*(char **)(v0 + 320), *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 280));
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      {
        sub_100018EBC(0, *((_QWORD *)v13 + 2) + 1, 1);
        v13 = v62;
      }
      v26 = *((_QWORD *)v13 + 2);
      v25 = *((_QWORD *)v13 + 3);
      if (v26 >= v25 >> 1)
      {
        sub_100018EBC(v25 > 1, v26 + 1, 1);
        v13 = v62;
      }
      v27 = *(_QWORD *)(v0 + 320);
      v28 = *(_QWORD *)(v0 + 280);
      *((_QWORD *)v13 + 2) = v26 + 1;
      v24(&v13[v57 + v26 * v16], v27, v28);
      v62 = v13;
    }
    ++v20;
    v17 += v16;
  }
  while (v20 != *(_QWORD *)(v0 + 368));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  if (*((_QWORD *)v13 + 2))
  {
    v29 = *(_QWORD *)(v0 + 240);
    v30 = *(_QWORD *)(v0 + 216);
    v32 = *(_QWORD *)(v0 + 200);
    v31 = *(_QWORD *)(v0 + 208);
    v33 = *(_QWORD *)(v0 + 192);
    v58 = *(_QWORD *)(v0 + 184);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 104))(v29, enum case for LocatePriority.live(_:), *(_QWORD *)(v0 + 224));
    v34 = enum case for LegacyRefreshCommandReason.deepLocate(_:);
    refreshed = type metadata accessor for LegacyRefreshCommandReason(0);
    v36 = *(_QWORD *)(refreshed - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 104))(v30, v34, refreshed);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v30, 0, 1, refreshed);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 104))(v32, enum case for ClientOrigin.other(_:), v58);
    RequestOrigin.init(_:)(v32);
    LocationRequest.init(priority:origin:toHandles:reason:startRefreshingLocation:isCached:)(v29, v31, v13, v30, 0, 0);
    v37 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 424) = v37;
    *v37 = v0;
    v37[1] = sub_100051D14;
    return daemon.getter();
  }
  else
  {
    v39 = swift_release(v13);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v42 = 134217984;
      *(_QWORD *)(v0 + 64) = 0x404E000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v42 + 4, v42 + 12);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "All cached legacy locations < %fs. Just return cached loactions", v42, 0xCu);
      swift_slowDealloc(v42, -1, -1);
    }

    v61 = *(_QWORD *)(v0 + 40);
    v44 = *(_QWORD *)(v0 + 320);
    v43 = *(_QWORD *)(v0 + 328);
    v46 = *(_QWORD *)(v0 + 304);
    v45 = *(_QWORD *)(v0 + 312);
    v47 = *(_QWORD *)(v0 + 296);
    v48 = *(_QWORD *)(v0 + 264);
    v49 = *(_QWORD *)(v0 + 272);
    v50 = *(_QWORD *)(v0 + 240);
    v51 = *(_QWORD *)(v0 + 216);
    v52 = *(_QWORD *)(v0 + 208);
    v53 = *(_QWORD *)(v0 + 200);
    v54 = *(_QWORD *)(v0 + 176);
    v55 = *(_QWORD *)(v0 + 168);
    v56 = *(_QWORD *)(v0 + 160);
    v59 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v59);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v61);
  }
}

uint64_t sub_100052FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 248));
  v1 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 296);
  v8 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 240);
  v11 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 168);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100053100()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100053140(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  char v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, unint64_t, uint64_t);
  unint64_t v43;

  v10 = sub_100037A5C(&qword_100260600);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Handle(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v41 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v36 - v17;
  v19 = *(_QWORD *)(a3 + 16);
  if (v19)
  {
    v38 = v12;
    v39 = a2;
    v40 = a4;
    v20 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v42 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    v42((char *)&v36 - v17, a3 + v20, v13);
    v21 = a1;
    v22 = sub_100004EA8(&qword_1002605F0, (uint64_t (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
    swift_bridgeObjectRetain(a3);
    v43 = v21;
    LOBYTE(v21) = dispatch thunk of static Equatable.== infix(_:_:)(v18, v21, v13, v22);
    v23 = *(void (**)(char *, uint64_t))(v14 + 8);
    v23(v18, v13);
    if ((v21 & 1) != 0)
      goto LABEL_5;
    if (v19 == 1)
      goto LABEL_12;
    v37 = *(_QWORD *)(v14 + 72);
    v42(v18, a3 + v20 + v37, v13);
    v24 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v43, v13, v22);
    v23(v18, v13);
    if ((v24 & 1) != 0)
    {
LABEL_5:
      v25 = swift_bridgeObjectRelease(a3);
      v26 = v39;
      v27 = Location.timestamp.getter(v25);
      v28 = (uint64_t)v38;
      if (a5 - v27 < 60.0)
      {
        v29 = (uint64_t)v41;
        v42(v41, v43, v13);
        v30 = type metadata accessor for Location(0);
        v31 = *(_QWORD *)(v30 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v28, v26, v30);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
        sub_1000DE0E0(v28, v29);
      }
      return;
    }
    if (v19 == 2)
    {
LABEL_12:
      swift_bridgeObjectRelease(a3);
      return;
    }
    v32 = a3 + v20 + 2 * v37;
    v33 = 2;
    while (1)
    {
      v42(v18, v32, v13);
      v34 = v33 + 1;
      if (__OFADD__(v33, 1))
        break;
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v43, v13, v22);
      v23(v18, v13);
      if ((v35 & 1) != 0)
        goto LABEL_5;
      ++v33;
      v32 += v37;
      if (v34 == v19)
        goto LABEL_12;
    }
    __break(1u);
  }
}

uint64_t sub_100053424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 224);
  v3[29] = a1;
  v3[30] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100053810;
  else
    v5 = sub_100053490;
  return swift_task_switch(v5, v3[9], 0);
}

uint64_t sub_100053490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 72);
  v25 = OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask;
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask);
  v3 = v1;
  if (v2)
  {
    swift_retain(*(_QWORD *)(v1 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationTask));
    Task.cancel()();
    swift_release(v2);
    v3 = *(_QWORD *)(v0 + 72);
  }
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 176);
  v24 = *(_QWORD *)(v0 + 208);
  v4 = *(unsigned __int8 *)(v0 + 248);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 160);
  v6 = *(_QWORD *)(v0 + 112);
  v22 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 80);
  v9 = v4 | 7;
  v10 = *(_QWORD *)(v0 + 64);
  (*(void (**)(void))(v0 + 152))();
  v5(v6, v10, v8);
  v11 = (v4 + 32) & ~v4;
  v12 = (v11 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject(&unk_100250008, v13 + 8, v9);
  *(_QWORD *)(v14 + 16) = v3;
  *(_QWORD *)(v14 + 24) = v20;
  v23(v14 + v11, v6, v8);
  *(_QWORD *)(v14 + v12) = v3;
  *(_QWORD *)(v14 + v13) = v21;
  swift_retain_n(v3, 2);
  v15 = sub_10005582C(v22, (uint64_t)&unk_100260650, v14);
  swift_release(v24);
  v16 = *(_QWORD *)(v1 + v25);
  *(_QWORD *)(v1 + v25) = v15;
  swift_release(v16);
  v17 = *(_QWORD *)(v0 + 232);
  v18 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v17);
}

uint64_t sub_10005362C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(32, -1);
    v14 = v6;
    *(_DWORD *)v5 = 141558275;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2081;
    *(_QWORD *)(v0 + 32) = v1;
    swift_errorRetain(v1);
    v7 = sub_100037A5C(&qword_100265260);
    v8 = String.init<A>(describing:)(v0 + 32, v7);
    v10 = v9;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "legacyRefreshLocation call failed: %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease(v1);
  v12 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v11);
}

uint64_t sub_100053810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release(*(_QWORD *)(v0 + 208));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(32, -1);
    v14 = v6;
    *(_DWORD *)v5 = 141558275;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2081;
    *(_QWORD *)(v0 + 32) = v1;
    swift_errorRetain(v1);
    v7 = sub_100037A5C(&qword_100265260);
    v8 = String.init<A>(describing:)(v0 + 32, v7);
    v10 = v9;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "legacyRefreshLocation call failed: %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease(v1);
  v12 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v11);
}

uint64_t sub_1000539F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  swift_release(*(_QWORD *)(v0 + 136));
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = *(_QWORD *)(v0 + 160);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v8 = swift_slowAlloc(32, -1);
    v9 = swift_slowAlloc(64, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136446723;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD00000000000001DLL, 0x80000001001FCF20, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2160;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2081;
    *(_QWORD *)(v0 + 32) = v7;
    swift_errorRetain(v7);
    v10 = sub_100037A5C(&qword_100265260);
    v11 = String.init<A>(describing:)(v0 + 32, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error: %{private,mask.hash}s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 160));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v14 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100053C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_100053C8C, a4, 0);
}

uint64_t sub_100053C8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = LocationRequest.toHandles.getter(a1);
  *(_QWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc(dword_1002605DC);
  *(_QWORD *)(v1 + 40) = v3;
  *v3 = v1;
  v3[1] = sub_100053CE8;
  return sub_100006B20(v2);
}

uint64_t sub_100053CE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  v5 = *(_QWORD **)v2;
  v5[6] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100053DE8, v5[2], 0);
  swift_bridgeObjectRelease(v5[4]);
  v5[7] = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_100262124);
  v5[8] = v7;
  *v7 = v5;
  v7[1] = sub_100053D94;
  return sub_100009814(a1);
}

uint64_t sub_100053D94()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 56);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100053DE8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100053E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[5] = a4;
  v5[6] = a5;
  v7 = type metadata accessor for LocationRequest(0);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContinuousClock(0);
  v5[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100053EA8, a5, 0);
}

uint64_t sub_100053EA8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = static Task<>.checkCancellation()();
  ContinuousClock.init()(v1);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1002618A0 + dword_1002618A0);
  v2 = (_QWORD *)swift_task_alloc(unk_1002618A4);
  *(_QWORD *)(v0 + 104) = v2;
  *v2 = v0;
  v2[1] = sub_100054104;
  return v4(0x8155A43676E00000, 6, 0, 0, 1);
}

uint64_t sub_100054104()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v3);
  v5 = v2[11];
  v4 = v2[12];
  v6 = v2[10];
  v7 = v2[6];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v8 = sub_10005417C;
  else
    v8 = sub_100054354;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_10005417C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 112);
  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ABA8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "legacyLocationTask error: %{public}@", v6, 0xCu);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100054354()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_10025F8D8 != -1)
    swift_once(&qword_10025F8D8, sub_1000A7D34);
  v1 = v0[5];
  v3 = v0[8];
  v2 = v0[9];
  v4 = v0[7];
  v5 = type metadata accessor for Logger(0);
  sub_100037A9C(v5, (uint64_t)qword_10027ABA8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[9];
  v11 = v0[7];
  if (v9)
  {
    v19 = v0[8];
    v12 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(32, -1);
    v21 = v20;
    *(_DWORD *)v12 = 141558275;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v13 = sub_100004EA8(&qword_100260660, (uint64_t (*)(uint64_t))&type metadata accessor for LocationRequest, (uint64_t)&protocol conformance descriptor for LocationRequest);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    v16 = v15;
    v0[4] = sub_10002BA84(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v16);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Schedule next refresh call request: %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[7]);
  }

  v17 = (_QWORD *)swift_task_alloc(dword_10026062C);
  v0[15] = v17;
  *v17 = v0;
  v17[1] = sub_100054594;
  return sub_1000099EC(v0[5]);
}

uint64_t sub_100054594(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *v1;
  v6 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  swift_bridgeObjectRelease(a1);
  v4 = *(_QWORD *)(v3 + 72);
  swift_task_dealloc(*(_QWORD *)(v3 + 96));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000545F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_1002605C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100054640(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100053140(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), *(double *)(v2 + 24));
}

uint64_t sub_100054650(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v25;
  _QWORD v26[9];

  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 1;
  v25 = a1 + 32;
  v4 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  for (i = 0; i != v2; ++i)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v6 = (uint64_t *)(v25 + 16 * i);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v26, v8, v7);
      v9 = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(a2 + 32);
      v11 = v9 & ~v10;
      if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        v12 = *(_QWORD *)(a2 + 48);
        v13 = (_QWORD *)(v12 + 16 * v11);
        v14 = v13[1];
        v15 = *v13 == v8 && v14 == v7;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, v8, v7, 0) & 1) != 0)
        {
LABEL_22:
          swift_bridgeObjectRelease(a1);
          v22 = 0;
          goto LABEL_23;
        }
        v16 = ~v10;
        for (j = v11 + 1; ; j = v18 + 1)
        {
          v18 = j & v16;
          if (((*(_QWORD *)(v4 + (((j & v16) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v16)) & 1) == 0)
            break;
          v19 = (_QWORD *)(v12 + 16 * v18);
          v20 = v19[1];
          v21 = *v19 == v8 && v20 == v7;
          if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, v8, v7, 0) & 1) != 0)
            goto LABEL_22;
        }
      }
      swift_bridgeObjectRelease(v7);
    }
  }
  v22 = 1;
  v7 = a1;
LABEL_23:
  swift_bridgeObjectRelease(v7);
  return v22;
}

uint64_t sub_1000547DC(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t inited;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  Class isa;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t (*v55)(char *, char *, uint64_t, __n128);
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  os_log_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  os_log_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138[56];

  v131 = a4;
  v132 = a3;
  v124 = a2;
  v5 = type metadata accessor for Location(0);
  v122 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v121 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C((uint64_t *)&unk_100262930);
  __chkstk_darwin(v7);
  v126 = (char *)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v127 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v120 = (char *)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v123 = (char *)&v117 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v117 - v14;
  v16 = type metadata accessor for Handle(0);
  v135 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v117 - v21;
  v23 = __chkstk_darwin(v20);
  v129 = (char *)&v117 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v117 - v25;
  v130 = type metadata accessor for Friend(0);
  v133 = *(_QWORD *)(v130 - 8);
  v27 = __chkstk_darwin(v130);
  v29 = (char *)&v117 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v27);
  v125 = (char *)&v117 - v31;
  __chkstk_darwin(v30);
  v128 = (char *)&v117 - v32;
  v33 = sub_100037A5C(&qword_100265230);
  inited = swift_initStackObject(v33, v138);
  *(_OWORD *)(inited + 16) = xmmword_1001F35F0;
  *(_QWORD *)(inited + 32) = Handle.identifier.getter(inited);
  *(_QWORD *)(inited + 40) = v35;
  v134 = a1;
  v36 = Handle.siblingIdentifiers.getter();
  v137 = inited;
  sub_10015CEF8(v36);
  v37 = v137;
  v38 = sub_10016B5B4(v137);
  swift_bridgeObjectRelease(v37);
  LOBYTE(v37) = sub_100054650(v132, v38);
  swift_bridgeObjectRelease(v38);
  if ((v37 & 1) != 0)
  {
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v39 = type metadata accessor for Logger(0);
    sub_100037A9C(v39, (uint64_t)qword_10027ABA8);
    v40 = v135;
    v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v135 + 16))(v19, v134, v16);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v42, v43))
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v16);
      goto LABEL_18;
    }
    v44 = swift_slowAlloc(22, -1);
    v45 = swift_slowAlloc(32, -1);
    *(_DWORD *)v44 = 141558275;
    v136 = 1752392040;
    v137 = v45;
    v46 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v44 + 4, v44 + 12);
    *(_WORD *)(v44 + 12) = 2081;
    v47 = Handle.identifier.getter(v46);
    v49 = v48;
    v136 = sub_10002BA84(v47, v48, &v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v44 + 14, v44 + 22);
    swift_bridgeObjectRelease(v49);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v16);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Not sending legacy location for handle: %{private,mask.hash}s\nsince current client is not interested", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    v50 = v44;
LABEL_15:
    swift_slowDealloc(v50, -1, -1);
LABEL_18:

    return 0;
  }
  v132 = v5;
  v119 = v15;
  isa = v131[2].isa;
  if (!isa)
  {
LABEL_11:
    if (qword_10025F8D8 != -1)
      swift_once(&qword_10025F8D8, sub_1000A7D34);
    v61 = type metadata accessor for Logger(0);
    sub_100037A9C(v61, (uint64_t)qword_10027ABA8);
    v62 = v135;
    v63 = v129;
    v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v135 + 16))(v129, v134, v16);
    v42 = Logger.logObject.getter(v64);
    v65 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v42, v65))
    {
      (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v16);
      goto LABEL_18;
    }
    v66 = swift_slowAlloc(22, -1);
    v67 = swift_slowAlloc(32, -1);
    *(_DWORD *)v66 = 141558275;
    v136 = 1752392040;
    v137 = v67;
    v68 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v66 + 4, v66 + 12);
    *(_WORD *)(v66 + 12) = 2081;
    v69 = Handle.identifier.getter(v68);
    v71 = v70;
    v136 = sub_10002BA84(v69, v70, &v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v66 + 14, v66 + 22);
    swift_bridgeObjectRelease(v71);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v16);
    _os_log_impl((void *)&_mh_execute_header, v42, v65, "Not sending legacy location for handle: %{private,mask.hash}s\nsince handle is not following", (uint8_t *)v66, 0x16u);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    v50 = v66;
    goto LABEL_15;
  }
  v117 = v22;
  v118 = v9;
  v52 = v16;
  v53 = (char *)v131 + ((*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80));
  v54 = *(_QWORD *)(v133 + 72);
  v55 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v133 + 16);
  v56 = swift_bridgeObjectRetain(v131);
  v57 = v130;
  while (1)
  {
    v58 = v55(v29, v53, v57, v56);
    Friend.handle.getter(v58);
    v59 = static Handle.== infix(_:_:)(v26, v134);
    v60 = *(void (**)(char *, uint64_t))(v135 + 8);
    v60(v26, v52);
    if ((v59 & 1) != 0)
      break;
    (*(void (**)(char *, uint64_t))(v133 + 8))(v29, v57);
    v53 += v54;
    isa = (Class)((char *)isa - 1);
    if (!isa)
    {
      swift_bridgeObjectRelease(v131);
      v16 = v52;
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease(v131);
  v73 = v133;
  v74 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
  v75 = v125;
  v74(v125, v29, v57);
  v76 = v128;
  v77 = ((uint64_t (*)(char *, char *, uint64_t))v74)(v128, v75, v57);
  v78 = (uint64_t)v126;
  Friend.createdAt.getter(v77);
  v79 = v127;
  v80 = v118;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v78, 1, v118) == 1)
  {
    (*(void (**)(char *, uint64_t))(v73 + 8))(v76, v57);
    sub_1000087A0(v78, (uint64_t *)&unk_100262930);
    return 1;
  }
  else
  {
    v81 = v119;
    v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 32))(v119, v78, v80);
    v83 = v123;
    Location.date.getter(v82);
    v84 = static Date.< infix(_:_:)(v83, v81);
    v85 = *(void (**)(char *, uint64_t))(v79 + 8);
    v85(v83, v80);
    if ((v84 & 1) != 0)
    {
      if (qword_10025F8D8 != -1)
        swift_once(&qword_10025F8D8, sub_1000A7D34);
      v86 = type metadata accessor for Logger(0);
      sub_100037A9C(v86, (uint64_t)qword_10027ABA8);
      v87 = v117;
      v88 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v117, v134, v52);
      v89 = v120;
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v120, v81, v80);
      v90 = v122;
      v91 = v121;
      v92 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v122 + 16))(v121, v124, v132);
      v93 = Logger.logObject.getter(v92);
      v94 = static os_log_type_t.error.getter();
      LODWORD(v135) = v94;
      if (os_log_type_enabled(v93, v94))
      {
        v95 = swift_slowAlloc(62, -1);
        v96 = swift_slowAlloc(96, -1);
        v134 = v96;
        *(_DWORD *)v95 = 141559299;
        v136 = 1752392040;
        v137 = v96;
        v97 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v95 + 4, v95 + 12);
        *(_WORD *)(v95 + 12) = 2081;
        v98 = v80;
        v131 = v93;
        v99 = Handle.identifier.getter(v97);
        v101 = v100;
        v136 = sub_10002BA84(v99, v100, &v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v95 + 14, v95 + 22);
        swift_bridgeObjectRelease(v101);
        v60(v87, v88);
        *(_WORD *)(v95 + 22) = 2160;
        v136 = 1752392040;
        v102 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v95 + 24, v95 + 32);
        *(_WORD *)(v95 + 32) = 2081;
        v103 = Date.localISO8601.getter(v102);
        v105 = v104;
        v136 = sub_10002BA84(v103, v104, &v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v95 + 34, v95 + 42);
        swift_bridgeObjectRelease(v105);
        v85(v89, v80);
        *(_WORD *)(v95 + 42) = 2160;
        v136 = 1752392040;
        v106 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v95 + 44, v95 + 52);
        *(_WORD *)(v95 + 52) = 2081;
        v107 = v123;
        v108 = v121;
        v109 = Location.date.getter(v106);
        v110 = Date.localISO8601.getter(v109);
        v112 = v111;
        v85(v107, v98);
        v136 = sub_10002BA84(v110, v112, &v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v95 + 54, v95 + 62);
        swift_bridgeObjectRelease(v112);
        (*(void (**)(char *, uint64_t))(v122 + 8))(v108, v132);
        v113 = v131;
        _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)v135, "Drop older legacy location for handle: %{private,mask.hash}s\ncreateAt: %{private,mask.hash}s\nlocation timestamp: %{private,mask.hash}s", (uint8_t *)v95, 0x3Eu);
        v114 = v134;
        swift_arrayDestroy(v134, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v114, -1, -1);
        swift_slowDealloc(v95, -1, -1);

        v115 = v119;
        v116 = v98;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v132);
        v85(v89, v80);
        v60(v87, v88);
        v115 = v81;
        v116 = v80;
      }
      v85(v115, v116);
      (*(void (**)(char *, uint64_t))(v133 + 8))(v128, v130);
      return 0;
    }
    v85(v81, v80);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v76, v130);
    return 1;
  }
}

void sub_1000552D0(uint64_t a1, void (*a2)(char *, char *))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  v4 = sub_100037A5C(&qword_1002605E8);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 64);
  v25 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v26 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26)
      goto LABEL_23;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v26)
        goto LABEL_23;
      v22 = *(_QWORD *)(v25 + 8 * v11);
      if (!v22)
      {
        v11 = v21 + 2;
        if (v21 + 2 >= v26)
          goto LABEL_23;
        v22 = *(_QWORD *)(v25 + 8 * v11);
        if (!v22)
        {
          v11 = v21 + 3;
          if (v21 + 3 >= v26)
            goto LABEL_23;
          v22 = *(_QWORD *)(v25 + 8 * v11);
          if (!v22)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v22 - 1) & v22;
    v13 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(a1 + 48);
    v15 = type metadata accessor for Handle(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v6, v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v13, v15);
    v16 = *(_QWORD *)(a1 + 56);
    v17 = type metadata accessor for Location(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = v16 + *(_QWORD *)(v18 + 72) * v13;
    v20 = &v6[*(int *)(v4 + 48)];
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v19, v17);
    a2(v6, v20);
    sub_1000087A0((uint64_t)v6, &qword_1002605E8);
  }
  v23 = v21 + 4;
  if (v23 >= v26)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v26)
      goto LABEL_23;
    v22 = *(_QWORD *)(v25 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10005551C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for LocationRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100055598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationRequest(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_100260634);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000087DC;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_100053C8C, v3, 0);
}

uint64_t sub_100055614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for LocationRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1000556AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for LocationRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_10026064C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1000087DC;
  return sub_100053E1C(a1, v6, v7, v8, v9);
}

uint64_t sub_100055760(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v2 = a2[3];
  v3 = a2[4];
  sub_100036228(a2, v2);
  v4 = dispatch thunk of Encoder.singleValueContainer()(v9, v2, v3);
  v5 = Date.epoch.getter(v4);
  v6 = v10;
  v7 = v11;
  sub_100055804((uint64_t)v9, v10);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v5, v6, v7);
  return sub_10002BB90(v9);
}

uint64_t sub_100055804(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10005582C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000087A0(a1, (uint64_t *)&unk_100265180);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100250058, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100260800, v16);
}

uint64_t sub_100055978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000559B0(a1, a2, a3, (uint64_t)&unk_1002502D8, &qword_1002609C8, (uint64_t)&unk_1002609C0);
}

uint64_t sub_100055994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000559B0(a1, a2, a3, (uint64_t)&unk_100250300, &qword_1002609E0, (uint64_t)&unk_1002609D8);
}

uint64_t sub_1000559B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v27[4];

  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v12) == 1)
  {
    sub_1000087A0(a1, (uint64_t *)&unk_100265180);
    v15 = 7168;
    v16 = *(_QWORD *)(a3 + 16);
    if (v16)
    {
LABEL_3:
      v17 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v16);
      swift_unknownObjectRetain(v16);
      v19 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      v21 = v20;
      swift_unknownObjectRelease(v16);
      goto LABEL_6;
    }
  }
  else
  {
    v22 = TaskPriority.rawValue.getter(v14);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    v15 = v22 | 0x1C00;
    v16 = *(_QWORD *)(a3 + 16);
    if (v16)
      goto LABEL_3;
  }
  v19 = 0;
  v21 = 0;
LABEL_6:
  v23 = swift_allocObject(a4, 32, 7);
  *(_QWORD *)(v23 + 16) = a2;
  *(_QWORD *)(v23 + 24) = a3;
  v24 = sub_100037A5C(a5);
  if (v21 | v19)
  {
    v27[0] = 0;
    v27[1] = 0;
    v25 = v27;
    v27[2] = v19;
    v27[3] = v21;
  }
  else
  {
    v25 = 0;
  }
  return swift_task_create(v15, v25, v24, a6, v23);
}

uint64_t sub_100055B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027A970);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027A970);
  if (qword_10025F838 != -1)
    swift_once(&qword_10025F838, sub_10005CF40);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027A988);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100055B9C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v1[2] = v0;
  v2 = type metadata accessor for URL(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[5] = v4;
  v5 = type metadata accessor for UUID(0);
  v6 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[6] = v6;
  swift_defaultActor_initialize(v0);
  v0[14] = 0xD000000000000013;
  v0[15] = 0x80000001001F3630;
  v7 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v7);
  v8 = WorkItemQueue.__allocating_init(identifier:)(v6);
  v0[17] = v8;
  UUID.init()(v8);
  v9 = WorkItemQueue.__allocating_init(identifier:)(v6);
  v0[18] = v9;
  UUID.init()(v9);
  v10 = WorkItemQueue.__allocating_init(identifier:)(v6);
  v0[19] = v10;
  UUID.init()(v10);
  v0[20] = WorkItemQueue.__allocating_init(identifier:)(v6);
  if (qword_10025F978 != -1)
    swift_once(&qword_10025F978, sub_1001377B0);
  v11 = sub_100037A9C(v2, (uint64_t)qword_10027AD90);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v12(v4, v11, v2);
  v13 = type metadata accessor for LocalStorageDatabase(0);
  v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v1[7] = v14;
  swift_defaultActor_initialize(v14);
  *(_QWORD *)(v14 + 112) = 0;
  *(_BYTE *)(v14 + 120) = 0;
  *(_DWORD *)(v14 + OBJC_IVAR____TtC13findmylocated20LocalStorageDatabase_currentVersion) = 4;
  v12(v14 + OBJC_IVAR____TtC13findmylocated20LocalStorageDatabase_baseContainerURL, v4, v2);
  *(_BYTE *)(v14 + OBJC_IVAR____TtC13findmylocated20LocalStorageDatabase_temporary) = 0;
  return swift_task_switch(sub_100055D70, v14, 0);
}

uint64_t sub_100055D70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[7];
  (*(void (**)(_QWORD, _QWORD))(v0[4] + 8))(v0[5], v0[3]);
  v2 = type metadata accessor for LocalStorageStore();
  v3 = (_QWORD *)swift_allocObject(v2, 136, 15);
  v0[8] = v3;
  swift_retain(v1);
  swift_defaultActor_initialize(v3);
  v3[15] = 0xD000000000000011;
  v3[16] = 0x80000001001FD0E0;
  v3[14] = v1;
  return swift_task_switch(sub_100055E04, v3, 0);
}

uint64_t sub_100055E04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 128) = *(_QWORD *)(v0 + 64);
  return swift_task_switch(sub_100055E20, v1, 0);
}

uint64_t sub_100055E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100055E68()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100055EB4;
  return daemon.getter();
}

uint64_t sub_100055EB4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t UnlockService;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 24);
  v5 = *v1;
  *(_QWORD *)(*v1 + 32) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 40) = v6;
  v7 = type metadata accessor for Daemon(0);
  UnlockService = type metadata accessor for FirstUnlockService(0);
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100260A88, 255, (uint64_t (*)(uint64_t))&type metadata accessor for FirstUnlockService, (uint64_t)&protocol conformance descriptor for FirstUnlockService);
  *v6 = v5;
  v6[1] = sub_100055FA4;
  return ActorServiceDaemon.getService<A>()(v7, UnlockService, v9, v10);
}

uint64_t sub_100055FA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v8)(void);

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  v5 = *(_QWORD **)v2;
  v5[6] = a1;
  v5[7] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000564D4, v5[2], 0);
  swift_release(v5[4]);
  v8 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock()
                         + async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock());
  v7 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock()
                                  + 1));
  v5[8] = v7;
  *v7 = v5;
  v7[1] = sub_10005605C;
  return v8();
}

uint64_t sub_10005605C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_1000560B4, v1, 0);
}

uint64_t sub_1000560B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 128);
  *(_QWORD *)(v0 + 72) = v1;
  return swift_task_switch(sub_1000560D0, v1, 0);
}

uint64_t sub_1000560D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 112);
  *(_QWORD *)(v0 + 80) = v1;
  return swift_task_switch(sub_1000560EC, v1, 0);
}

uint64_t sub_1000560EC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = v0[7];
  sub_1000D0754();
  if (v1)
  {
    v0[13] = v1;
    return swift_task_switch(sub_100056408, v0[2], 0);
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc(dword_100267B24);
    v0[11] = v3;
    *v3 = v0;
    v3[1] = sub_100056174;
    return sub_1001E49B0();
  }
}

uint64_t sub_100056174()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 88));
  if (v0)
  {
    v2[13] = v0;
    v3 = v2[2];
    v4 = sub_100056408;
  }
  else
  {
    v3 = v2[9];
    v4 = sub_1000561DC;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000561DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 112);
  *(_QWORD *)(v0 + 96) = v1;
  return swift_task_switch(sub_1000561F8, v1, 0);
}

uint64_t sub_1000561F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v0 + 128) = *(_BYTE *)(*(_QWORD *)(v0 + 96) + 120);
  return swift_task_switch(sub_100056218, v1, 0);
}

uint64_t sub_100056218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint8_t *v15;

  if (*(_BYTE *)(v0 + 128) == 1)
  {
    if (qword_10025F830 != -1)
      swift_once(&qword_10025F830, sub_100055B0C);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100037A9C(v1, (uint64_t)qword_10027A970);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "There's localDB migration performed, forceRefreshClientIfNeeded", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    v6 = (_QWORD *)swift_task_alloc(dword_1002606AC);
    *(_QWORD *)(v0 + 112) = v6;
    *v6 = v0;
    v6[1] = sub_10005643C;
    v7 = *(_QWORD **)(v0 + 16);
    v6[384] = v7;
    v6[385] = *v7;
    return swift_task_switch(sub_100056700, v7, 0);
  }
  else
  {
    if (qword_10025F830 != -1)
      swift_once(&qword_10025F830, sub_100055B0C);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100037A9C(v9, (uint64_t)qword_10027A970);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 48);
    if (v13)
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "There's no localDB migration performed, not force refreshClient", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    swift_release(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100056408()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005643C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100056508;
  else
    v4 = sub_1000564A0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 16), 0);
}

uint64_t sub_1000564A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000564D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056508()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005653C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100056554, v0, 0);
}

uint64_t sub_100056554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_10025F830 != -1)
    swift_once(&qword_10025F830, sub_100055B0C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027A970);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Reset Local DB", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 16);

  v7 = *(_QWORD *)(v6 + 128);
  *(_QWORD *)(v0 + 24) = v7;
  return swift_task_switch(sub_100056644, v7, 0);
}

uint64_t sub_100056644()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  *(_QWORD *)(v0 + 32) = v1;
  return swift_task_switch(sub_100056660, v1, 0);
}

uint64_t sub_100056660()
{
  uint64_t v0;

  type metadata accessor for LocalStorageDatabase(0);
  sub_100018A7C(&qword_100260A80, 255, type metadata accessor for LocalStorageDatabase, (uint64_t)&unk_1001F5218);
  Database.reset()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000566E0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 3072) = v0;
  *(_QWORD *)(v1 + 3080) = *v0;
  return swift_task_switch(sub_100056700, v0, 0);
}

uint64_t sub_100056700(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v8;

  v3 = sub_100018A7C(qword_1002607A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v2 + 3088) = v4;
  v8 = *(_OWORD *)(v2 + 3072);
  *(_OWORD *)(v4 + 16) = v8;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v2 + 3096) = v5;
  v6 = sub_100037A5C(&qword_1002603A8);
  *(_QWORD *)(v2 + 3104) = v6;
  *v5 = v2;
  v5[1] = sub_1000567E4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2 + 592, v8, v3, 0xD000000000000014, 0x80000001001FD060, sub_10005F010, v4, v6);
}

uint64_t sub_1000567E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 3096);
  *(_QWORD *)(*v1 + 3112) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100056C28;
  else
    v4 = sub_10005684C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 3072), 0);
}

uint64_t sub_10005684C()
{
  uint64_t v0;
  _BOOL4 v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;

  sub_10000EF6C(v0 + 592, v0 + 1456, &qword_1002603A8);
  sub_10000EF6C(v0 + 1456, v0 + 1024, &qword_1002603A8);
  if (sub_100049214(v0 + 1024) == 1)
  {
    v1 = 1;
  }
  else
  {
    sub_10000EF6C(v0 + 1280, v0 + 2912, &qword_100260858);
    v1 = sub_10005EFC4(v0 + 2912) == 1
      && (sub_10000EF6C(v0 + 1456, v0 + 2320, &qword_1002603A8),
          sub_10000EF6C(v0 + 2416, v0 + 2752, &qword_1002603B0),
          sub_10005EFE0(v0 + 2752) == 1)
      && *(_QWORD *)(v0 + 2728) == 0;
  }
  if (qword_10025F830 != -1)
    swift_once(&qword_10025F830, sub_100055B0C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027A970);
  v3 = sub_1000179AC(v0 + 1456, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF90);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v4, v5))
  {
    sub_1000179AC(v0 + 1456, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 1456, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);

    if (!v1)
      goto LABEL_11;
LABEL_15:
    v16 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 3120) = v16;
    *v16 = v0;
    v16[1] = sub_100056C5C;
    return daemon.getter();
  }
  v17 = *(_QWORD *)(v0 + 3104);
  v18 = v1;
  v6 = swift_slowAlloc(28, -1);
  v7 = swift_slowAlloc(32, -1);
  v19 = v7;
  *(_DWORD *)v6 = 67240707;
  *(_DWORD *)(v0 + 3168) = v18;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3168, v0 + 3172, v6 + 4, v6 + 8);
  *(_WORD *)(v6 + 8) = 2160;
  *(_QWORD *)(v0 + 3064) = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3064, v0 + 3072, v6 + 10, v6 + 18);
  *(_WORD *)(v6 + 18) = 2081;
  sub_10000EF6C(v0 + 1456, v0 + 1888, &qword_1002603A8);
  sub_1000179AC(v0 + 1456, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF90);
  v8 = String.init<A>(describing:)(v0 + 1888, v17);
  v10 = v9;
  *(_QWORD *)(v0 + 3056) = sub_10002BA84(v8, v9, &v19);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3056, v0 + 3064, v6 + 20, v6 + 28);
  swift_bridgeObjectRelease(v10);
  sub_1000179AC(v0 + 1456, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
  sub_1000179AC(v0 + 1456, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "LocalStorageService shouldForceRefreshClient: %{BOOL,public}dsettings %{private,mask.hash}s", (uint8_t *)v6, 0x1Cu);
  swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1, -1);
  swift_slowDealloc(v6, -1, -1);

  if (v18)
    goto LABEL_15;
LABEL_11:
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "serverSettings is not nil after migrating local DB version, not force refreshClient", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 3088));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056C28()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 3088));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056C5C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 3120);
  v5 = *v1;
  *(_QWORD *)(*v1 + 3128) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 3136) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100018A7C(&qword_100260240, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100018A7C(&qword_100260248, 255, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100056D4C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100056D4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 3136);
  v5 = *(_QWORD **)v2;
  v5[393] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100056EA0, v5[384], 0);
  swift_release(v5[391]);
  v5[394] = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_100262DBC);
  v5[395] = v7;
  *v7 = v5;
  v7[1] = sub_100056E00;
  return sub_1000E3CBC((uint64_t)(v5 + 2));
}

uint64_t sub_100056E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)v0 + 16;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 3072);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 3160));
  sub_10005EC64(v1);
  return swift_task_switch(sub_100056E64, v2, 0);
}

uint64_t sub_100056E64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 3152));
  swift_task_dealloc(*(_QWORD *)(v0 + 3088));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056EA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 3088);
  swift_release(*(_QWORD *)(v0 + 3128));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 904);
  v2 = *(_QWORD *)(v0 + 880);
  sub_10000EF6C(v0 + 16, v0 + 448, &qword_1002603A8);
  sub_10000EF6C(v0 + 448, v2, &qword_1002603A8);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056F50()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 904));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056F84(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch(sub_100056FA4, 0, 0);
}

uint64_t sub_100056FA4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  v3 = sub_100037A5C(&qword_100260A48);
  *v2 = v0;
  v2[1] = sub_100057048;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), 0, 0, 0xD000000000000019, 0x80000001001FD0C0, sub_10005EA60, v1, v3);
}

uint64_t sub_100057048()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000570BC, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000570BC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000570F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for UUID(0);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100260A50);
  v6[6] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[7] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v6[8] = v10;
  v6[9] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005717C, 0, 0);
}

uint64_t sub_10005717C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  v16 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v6, v3);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = (v2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_1002503F0, v11 + 8, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v9, v1, v3);
  *(_QWORD *)(v12 + v10) = v7;
  *(_QWORD *)(v12 + v11) = v16;
  v13 = swift_retain(v7);
  UUID.init()(v13);
  v14 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v5, &unk_100260A70, v12, &unk_100260A78, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v14);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000572B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[6] = a1;
  v2[7] = a2;
  v3 = sub_100037A5C(&qword_100260A48);
  v2[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005730C, 0, 0);
}

uint64_t sub_10005730C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100267B04);
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_100057360;
  return sub_1001DA8F8(*(_QWORD *)(v0 + 64));
}

uint64_t sub_100057360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100057418;
  else
    v3 = sub_1000573C4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000573C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = sub_100037A5C(&qword_100260A50);
  CheckedContinuation.resume(returning:)(v1, v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_10025F830 != -1)
    swift_once(&qword_10025F830, sub_100055B0C);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027A970);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 80);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD000000000000019, 0x80000001001FD0C0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2082;
    *(_QWORD *)(v0 + 32) = v7;
    swift_errorRetain(v7);
    v10 = sub_100037A5C(&qword_100265260);
    v11 = String.init<A>(describing:)(v0 + 32, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 40) = sub_10002BA84(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error: %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v7);
  }

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 80);
  v14 = sub_100037A5C(&qword_100260A50);
  CheckedContinuation.resume(throwing:)(v0 + 16, v14);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057668(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch(sub_100057688, v1, 0);
}

uint64_t sub_100057688(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[2];
  v6 = sub_100018A7C(qword_1002607A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
  v7 = (_QWORD *)swift_task_alloc(48);
  v2[5] = v7;
  v7[2] = v3;
  v7[3] = v5;
  v7[4] = v4;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v2[6] = v8;
  *v8 = v2;
  v8[1] = sub_100057760;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, v3, v6, 0x7228747265736E69, 0xEF293A64726F6365, sub_10005E684, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_100057760()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = sub_10005EFFC;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 24);
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v5 = sub_10003BF78;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000577D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a2;
  v32 = a4;
  v30 = a1;
  v5 = sub_100037A5C(&qword_100260868);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnerSharedSecretsRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  sub_100025C70(a3, (uint64_t)v12, type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v30, v5);
  v18 = sub_100018A7C(qword_1002607A0, v17, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = (v19 + 40) & ~v19;
  v21 = *(unsigned __int8 *)(v6 + 80);
  v22 = (v11 + v21 + v20) & ~v21;
  v23 = (v7 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (char *)swift_allocObject(&unk_100250378, v23 + 8, v19 | v21 | 7);
  v25 = v31;
  *((_QWORD *)v24 + 2) = v31;
  *((_QWORD *)v24 + 3) = v18;
  *((_QWORD *)v24 + 4) = v25;
  v26 = v25;
  sub_1000321F4((uint64_t)v12, (uint64_t)&v24[v20], type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v24[v22], v8, v5);
  *(_QWORD *)&v24[v23] = v32;
  swift_retain_n(v26, 2);
  v27 = sub_10005582C((uint64_t)v15, (uint64_t)&unk_100260A28, (uint64_t)v24);
  return swift_release(v27);
}

uint64_t sub_1000579E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v9 = type metadata accessor for UUID(0);
  v7[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100260868);
  v7[7] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[8] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v7[9] = v12;
  v7[10] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(type metadata accessor for OwnerSharedSecretsRecord(0) - 8);
  v7[11] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v7[12] = v14;
  v7[13] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100057A98, a4, 0);
}

uint64_t sub_100057A98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v20 = v4;
  v21 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 32);
  v22 = *(_QWORD *)(v0 + 40);
  v23 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 16);
  v9 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  sub_100025C70(v9, v1, type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  v10 = *(unsigned __int8 *)(v3 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = (v2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = (v13 + v12 + 8) & ~v13;
  v15 = (v21 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_1002503A0, v15 + 8, v10 | v13 | 7);
  sub_1000321F4(v1, v16 + v11, type metadata accessor for OwnerSharedSecretsRecord);
  *(_QWORD *)(v16 + v12) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v16 + v14, v20, v6);
  *(_QWORD *)(v16 + v15) = v22;
  v17 = swift_retain(v8);
  UUID.init()(v17);
  v18 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v23, &unk_100260A38, v16, &unk_100260A40, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v18);
  swift_release(v18);
  swift_task_dealloc(v1);
  swift_task_dealloc(v20);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = type metadata accessor for OwnerSharedSecretsRecord(0);
  v3[9] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[10] = swift_task_alloc(v5);
  v3[11] = swift_task_alloc(v5);
  return swift_task_switch(sub_100057C9C, 0, 0);
}

uint64_t sub_100057C9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_10025F830 != -1)
    swift_once(&qword_10025F830, sub_100055B0C);
  v1 = v0[6];
  v2 = v0[11];
  v3 = type metadata accessor for Logger(0);
  v0[12] = sub_100037A9C(v3, (uint64_t)qword_10027A970);
  v4 = sub_100025C70(v1, v2, type metadata accessor for OwnerSharedSecretsRecord);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[11];
  if (v7)
  {
    v9 = v0[10];
    v17 = v0[9];
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v18 = v11;
    *(_DWORD *)v10 = 136315138;
    sub_100025C70(v8, v9, type metadata accessor for OwnerSharedSecretsRecord);
    v12 = String.init<A>(describing:)(v9, v17);
    v14 = v13;
    v0[5] = sub_10002BA84(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v14);
    sub_100024990(v8, type metadata accessor for OwnerSharedSecretsRecord);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Inserting OwnerSharedSecretsRecord: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_100024990(v0[11], type metadata accessor for OwnerSharedSecretsRecord);
  }

  v15 = (_QWORD *)swift_task_alloc(dword_100267AF4);
  v0[13] = v15;
  *v15 = v0;
  v15[1] = sub_100057EB4;
  return sub_1001DB190(v0[6]);
}

uint64_t sub_100057EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100057F6C;
  else
    v3 = sub_100057F18;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100057F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_100037A5C(&qword_100260868);
  CheckedContinuation.resume(returning:)(v1, v1);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 112);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 112);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136446210;
    v16 = v7;
    *(_QWORD *)(v0 + 24) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unable to insert OwnerSharedSecretsRecord: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 112);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 112);
  v13 = sub_100037A5C(&qword_100260868);
  CheckedContinuation.resume(throwing:)(v0 + 16, v13);
  v14 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100058148()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_release(v0[18]);
  swift_release(v0[19]);
  swift_release(v0[20]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100058194(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.initialLaunchProcessing()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for LocalStorageService();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_1000581F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.migrate(from:to:)[1]);
  *(_QWORD *)(v4 + 16) = v8;
  v9 = type metadata accessor for LocalStorageService();
  *v8 = v4;
  v8[1] = sub_10003BF7C;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_100058270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for LocalStorageService();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_1000582D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.startup()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for LocalStorageService();
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_100058330()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)swift_task_alloc(dword_10026069C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1000087DC;
  v2[2] = v0;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v2[3] = v3;
  *v3 = v2;
  v3[1] = sub_100055EB4;
  return daemon.getter();
}

uint64_t sub_10005839C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for LocalStorageService();
  v2 = sub_100018A7C(&qword_1002609B0, v1, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F368C);
  return ActorServiceProtocol.description.getter(v0, v2);
}

uint64_t sub_1000583E8(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(&qword_100260798, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F3664);
}

uint64_t sub_100058414(uint64_t a1, uint64_t a2)
{
  return sub_100018A7C(qword_1002607A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
}

uint64_t sub_100058440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v6 = sub_100037A5C(&qword_100260910);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 48) & ~v13;
  v15 = (char *)swift_allocObject(&unk_100250288, v14 + v8, v13 | 7);
  *((_QWORD *)v15 + 2) = 0;
  *((_QWORD *)v15 + 3) = 0;
  *((_QWORD *)v15 + 4) = a2;
  *((_QWORD *)v15 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v15[v14], (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  swift_bridgeObjectRetain(a2);
  swift_retain(a3);
  v16 = sub_10005582C((uint64_t)v11, (uint64_t)&unk_100260990, (uint64_t)v15);
  return swift_release(v16);
}

uint64_t sub_10005859C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for UUID(0);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100260910);
  v6[6] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[7] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v6[8] = v10;
  v6[9] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100058628, 0, 0);
}

uint64_t sub_100058628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v6, v3);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(&unk_1002502B0, v10 + v2, v9 | 7);
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v10, v1, v3);
  swift_bridgeObjectRetain(v8);
  v12 = swift_retain(v7);
  UUID.init()(v12);
  v13 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v5, &unk_1002609A0, v11, &unk_1002609A8, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v13);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005873C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  v4 = type metadata accessor for HandleType(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000587A0, 0, 0);
}

uint64_t sub_1000587A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;
  _QWORD *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 80) = v2;
  if (v2)
  {
    *(_QWORD *)(v0 + 88) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 128);
    v4 = *(_QWORD *)(v0 + 56);
    v3 = *(_QWORD *)(v0 + 64);
    v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 96) = *(_QWORD *)(v3 + 72);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16);
    *(_QWORD *)(v0 + 120) = 0;
    *(_QWORD *)(v0 + 104) = v6;
    *(_QWORD *)(v0 + 112) = &_swiftEmptySetSingleton;
    v7 = *(_QWORD *)(v0 + 72);
    v8 = v1 + ((v5 + 32) & ~(unint64_t)v5);
    v9 = swift_bridgeObjectRetain(v1);
    v6(v7, v8, v4, v9);
    v10 = (_QWORD *)swift_task_alloc(dword_100267AAC);
    *(_QWORD *)(v0 + 128) = v10;
    *v10 = v0;
    v10[1] = sub_1000588C8;
    return sub_100018ABC(*(_QWORD *)(v0 + 72));
  }
  else
  {
    v12 = sub_100033850((uint64_t)&_swiftEmptySetSingleton);
    swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
    *(_QWORD *)(v0 + 24) = v12;
    v13 = sub_100037A5C(&qword_100260910);
    CheckedContinuation.resume(returning:)(v0 + 24, v13);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000588C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 128);
  *(_QWORD *)(*(_QWORD *)v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[14];
    swift_bridgeObjectRelease(v4[4]);
    swift_bridgeObjectRelease(v6);
    v7 = sub_100058AE0;
  }
  else
  {
    v4[18] = a1;
    v7 = sub_100058950;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100058950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 120) + 1;
  v8 = swift_task_alloc(32);
  *(_QWORD *)(v8 + 16) = v3;
  v9 = sub_100031980((void (*)(char *))sub_10005E134, v8, v1);
  swift_task_dealloc(v8);
  v10 = sub_100031470((uint64_t)v9, v2);
  swift_bridgeObjectRelease(v9);
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  if (v7 == v4)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
    v11 = sub_100033850(v10);
    swift_bridgeObjectRelease(v10);
    *(_QWORD *)(v0 + 24) = v11;
    v12 = sub_100037A5C(&qword_100260910);
    CheckedContinuation.resume(returning:)(v0 + 24, v12);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 120) + 1;
    *(_QWORD *)(v0 + 112) = v10;
    *(_QWORD *)(v0 + 120) = v14;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 104))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 32)+ ((*(unsigned __int8 *)(v0 + 152) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 152))+ *(_QWORD *)(v0 + 96) * v14, *(_QWORD *)(v0 + 56));
    v15 = (_QWORD *)swift_task_alloc(dword_100267AAC);
    *(_QWORD *)(v0 + 128) = v15;
    *v15 = v0;
    v15[1] = sub_1000588C8;
    return sub_100018ABC(*(_QWORD *)(v0 + 72));
  }
}

uint64_t sub_100058AE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100037A5C(&qword_100260910);
  CheckedContinuation.resume(throwing:)(v0 + 16, v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100058B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  return swift_task_switch(sub_100058B74, 0, 0);
}

uint64_t sub_100058B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 56) = v3;
  v4 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  *(_QWORD *)(v3 + 40) = v1;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 64) = v5;
  v6 = sub_100037A5C(&qword_100260950);
  *v5 = v0;
  v5[1] = sub_100058C2C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), 0, 0, 0xD000000000000012, 0x80000001001FD0A0, sub_10005E268, v3, v6);
}

uint64_t sub_100058C2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 64);
  v3 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100058CA0, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 56));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100058CA0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100058CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  v36 = a2;
  v37 = a5;
  v34 = a1;
  v35 = a4;
  v33 = a3;
  v40 = type metadata accessor for HandleType(0);
  v38 = *(_QWORD *)(v40 - 8);
  v5 = *(_QWORD *)(v38 + 64);
  __chkstk_darwin(v40);
  v39 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_1002609F0);
  v7 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v32 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Handle(0);
  v10 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v33, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v6);
  v17 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, v35, v40);
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = (v18 + 40) & ~v18;
  v20 = *(unsigned __int8 *)(v7 + 80);
  v21 = (v11 + v20 + v19) & ~v20;
  v22 = *(unsigned __int8 *)(v17 + 80);
  v23 = (v8 + v22 + v21) & ~v22;
  v24 = (v5 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (char *)swift_allocObject(&unk_100250328, v24 + 8, v18 | v22 | v20 | 7);
  *((_QWORD *)v25 + 2) = 0;
  *((_QWORD *)v25 + 3) = 0;
  v26 = v36;
  *((_QWORD *)v25 + 4) = v36;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v25[v19], v12, v30);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v25[v21], v32, v31);
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v25[v23], v39, v40);
  *(_QWORD *)&v25[v24] = v37;
  swift_retain(v26);
  v27 = sub_10005582C((uint64_t)v15, (uint64_t)&unk_100260A00, (uint64_t)v25);
  return swift_release(v27);
}

uint64_t sub_100058F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v9 = type metadata accessor for UUID(0);
  v8[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HandleType(0);
  v8[8] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[9] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v8[10] = v12;
  v8[11] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100037A5C(&qword_1002609F0);
  v8[12] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[13] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v8[14] = v15;
  v8[15] = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Handle(0);
  v8[16] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v8[17] = v17;
  v18 = *(_QWORD *)(v17 + 64);
  v8[18] = v18;
  v8[19] = swift_task_alloc((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100059024, 0, 0);
}

uint64_t sub_100059024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v27 = v3;
  v28 = v1;
  v4 = *(_QWORD *)(v0 + 120);
  v25 = *(_QWORD *)(v0 + 144);
  v26 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 96);
  v22 = *(_QWORD *)(v0 + 104);
  v29 = v4;
  v6 = *(_QWORD *)(v0 + 88);
  v30 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  v32 = *(_QWORD *)(v0 + 48);
  v33 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 32);
  v23 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 24);
  v31 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v9, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v4, v8, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v6, v23, v7);
  v10 = v2;
  v11 = *(unsigned __int8 *)(v2 + 80);
  v12 = (v11 + 24) & ~v11;
  v13 = *(unsigned __int8 *)(v22 + 80);
  v14 = (v25 + v13 + v12) & ~v13;
  v15 = *(unsigned __int8 *)(v24 + 80);
  v16 = (v26 + v15 + v14) & ~v15;
  v17 = (v30 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_100250350, v17 + 8, v11 | v13 | v15 | 7);
  *(_QWORD *)(v18 + 16) = v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v18 + v12, v28, v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v18 + v14, v29, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v18 + v16, v6, v7);
  *(_QWORD *)(v18 + v17) = v32;
  v19 = swift_retain(v31);
  UUID.init()(v19);
  v20 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v33, &unk_100260A10, v18, &unk_100260A18, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v20);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v6);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005922C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v5 = sub_100037A5C(&qword_100260950);
  v4[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Handle(0);
  v4[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[11] = v7;
  v4[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100260940);
  v4[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FriendRecord(0);
  v4[14] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[15] = v10;
  v4[16] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100059300, 0, 0);
}

uint64_t sub_100059300(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;

  v2 = Handle.identifier.getter(a1);
  v4 = v3;
  v1[17] = v3;
  v5 = (uint64_t **)swift_task_alloc(dword_100267A74);
  v1[18] = (uint64_t)v5;
  *v5 = v1;
  v5[1] = (uint64_t *)sub_100059378;
  return sub_1001DB4BC(v1[13], v2, v4);
}

uint64_t sub_100059378()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000596D0;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 136));
    v4 = sub_1000593E4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000593E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 48))(v1, 1, *(_QWORD *)(v0 + 112)) == 1)
  {
    sub_1000087A0(v1, &qword_100260940);
    if (qword_10025F830 != -1)
      swift_once(&qword_10025F830, sub_100055B0C);
    v3 = *(_QWORD *)(v0 + 88);
    v2 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 48);
    v6 = type metadata accessor for Logger(0);
    sub_100037A9C(v6, (uint64_t)qword_10027A970);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    v10 = os_log_type_enabled(v8, v9);
    v12 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 96);
    if (v10)
    {
      v30 = *(_QWORD *)(v0 + 80);
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(32, -1);
      v31 = v14;
      *(_DWORD *)v13 = 141558275;
      *(_QWORD *)(v0 + 24) = 1752392040;
      v15 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2081;
      v16 = Handle.identifier.getter(v15);
      v18 = v17;
      *(_QWORD *)(v0 + 32) = sub_10002BA84(v16, v17, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease(v18);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v30);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No friend matching handle %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    }

    v23 = *(_QWORD *)(v0 + 72);
    v24 = type metadata accessor for Friend(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
    v25 = sub_100037A5C(&qword_1002609F0);
    CheckedContinuation.resume(returning:)(v23, v25);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 128);
    v21 = *(_QWORD *)(v0 + 64);
    v20 = *(_QWORD *)(v0 + 72);
    sub_1000321F4(v1, v19, type metadata accessor for FriendRecord);
    sub_100037B0C(v21, v20);
    v22 = sub_100037A5C(&qword_1002609F0);
    CheckedContinuation.resume(returning:)(v20, v22);
    sub_100024990(v19, type metadata accessor for FriendRecord);
  }
  v26 = *(_QWORD *)(v0 + 96);
  v27 = *(_QWORD *)(v0 + 104);
  v28 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v27);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000596D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100037A5C(&qword_1002609F0);
  CheckedContinuation.resume(throwing:)(v0 + 16, v2);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005975C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100059768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v11 = sub_100037A5C(a4);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v19 = *(unsigned __int8 *)(v12 + 80);
  v20 = (v19 + 40) & ~v19;
  v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (char *)swift_allocObject(a5, v21 + 8, v19 | 7);
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = 0;
  *((_QWORD *)v22 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v22[v20], v14, v11);
  *(_QWORD *)&v22[v21] = a3;
  swift_retain(a2);
  v23 = sub_10005582C((uint64_t)v17, a6, (uint64_t)v22);
  return swift_release(v23);
}

uint64_t sub_1000598C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for UUID(0);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100260910);
  v6[6] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[7] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v6[8] = v10;
  v6[9] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100059954, 0, 0);
}

uint64_t sub_100059954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v8, v3);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 24) & ~v9;
  v11 = (v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_100250210, v11 + 8, v9 | 7);
  *(_QWORD *)(v12 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v1, v3);
  *(_QWORD *)(v12 + v11) = v6;
  v13 = swift_retain(v7);
  UUID.init()(v13);
  v14 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v5, &unk_100260930, v12, &unk_100260938, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v14);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100059A70(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2[8] = a1;
  v2[9] = a2;
  v3 = type metadata accessor for FriendRecord(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v5);
  v2[13] = swift_task_alloc(v5);
  v2[14] = swift_task_alloc(v5);
  v6 = sub_100037A5C(&qword_100260940);
  v2[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100059B10, 0, 0);
}

uint64_t sub_100059B10()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100267A94);
  *(_QWORD *)(v0 + 128) = v1;
  *v1 = v0;
  v1[1] = sub_100059B5C;
  return sub_10003BF60();
}

uint64_t sub_100059B5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(v3 + 136) = a1;
  *(_QWORD *)(v3 + 144) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10005A0B0;
  else
    v5 = sub_100059BC8;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100059BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t type;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[2];

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = swift_retain(v1);
  v6 = dispatch thunk of _AnySequenceBox._makeIterator()(v5);
  swift_release(v1);
  v7 = swift_retain(v6);
  v57 = v6;
  dispatch thunk of _AnyIteratorBoxBase.next()(v7);
  v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v56(v2, 1, v3) == 1)
  {
    v8 = &_swiftEmptySetSingleton;
  }
  else
  {
    v50 = (uint64_t *)(v0 + 40);
    v51 = (_QWORD *)(v0 + 32);
    v48 = (uint64_t *)(v0 + 56);
    v49 = (_QWORD *)(v0 + 48);
    v47 = *(_QWORD *)(v0 + 104);
    v8 = &_swiftEmptySetSingleton;
    v16 = type metadata accessor for FriendRecord;
    v55 = *(_QWORD *)(v0 + 80);
    do
    {
      v58 = (uint64_t)v8;
      sub_1000321F4(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 112), v16);
      if (qword_10025F830 != -1)
        swift_once(&qword_10025F830, sub_100055B0C);
      v26 = *(_QWORD *)(v0 + 104);
      v27 = *(_QWORD *)(v0 + 112);
      v28 = *(_QWORD *)(v0 + 96);
      v29 = type metadata accessor for Logger(0);
      sub_100037A9C(v29, (uint64_t)qword_10027A970);
      sub_100025C70(v27, v26, v16);
      v30 = sub_100025C70(v27, v28, v16);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter();
      v33 = os_log_type_enabled(v31, v32);
      v34 = v16;
      v35 = *(_QWORD *)(v0 + 96);
      v36 = *(uint64_t **)(v0 + 104);
      if (v33)
      {
        type = v32;
        v37 = swift_slowAlloc(42, -1);
        v53 = swift_slowAlloc(64, -1);
        v59[0] = v53;
        *(_DWORD *)v37 = 141558787;
        *v51 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v50, v37 + 4, v37 + 12);
        *(_WORD *)(v37 + 12) = 2081;
        v52 = v35;
        v38 = *v36;
        v39 = *(_QWORD *)(v47 + 8);
        swift_bridgeObjectRetain(v39);
        *v50 = sub_10002BA84(v38, v39, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v50, v49, v37 + 14, v37 + 22);
        swift_bridgeObjectRelease(v39);
        sub_100024990((uint64_t)v36, v34);
        *(_WORD *)(v37 + 22) = 2160;
        *v49 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, v48, v37 + 24, v37 + 32);
        *(_WORD *)(v37 + 32) = 2081;
        v17 = v55;
        v40 = *(_QWORD *)(v52 + *(int *)(v55 + 136));
        v41 = type metadata accessor for FriendInfoOption(0);
        v42 = sub_100018A7C(&qword_100260948, 255, type metadata accessor for FriendInfoOption, (uint64_t)&protocol conformance descriptor for FriendInfoOption);
        swift_bridgeObjectRetain(v40);
        v44 = Set.description.getter(v43, v41, v42);
        v46 = v45;
        swift_bridgeObjectRelease(v40);
        *v48 = sub_10002BA84(v44, v46, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v48, v0 + 64, v37 + 34, v37 + 42);
        swift_bridgeObjectRelease(v46);
        sub_100024990(v52, v34);
        _os_log_impl((void *)&_mh_execute_header, v31, type, "Local storage service record:\nid:%{private,mask.hash}s\ntypes:%{private,mask.hash}s", (uint8_t *)v37, 0x2Au);
        swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v37, -1, -1);

      }
      else
      {
        sub_100024990(*(_QWORD *)(v0 + 104), v34);
        sub_100024990(v35, v34);

        v17 = v55;
      }
      v16 = v34;
      v19 = *(_QWORD *)(v0 + 112);
      v18 = *(_QWORD *)(v0 + 120);
      v20 = *(_QWORD *)(v0 + 80);
      v21 = *(_QWORD *)(v19 + *(int *)(v17 + 136));
      v22 = swift_task_alloc(32);
      *(_QWORD *)(v22 + 16) = v19;
      swift_bridgeObjectRetain(v21);
      sub_100031574((void (*)(char *))sub_10005DBA0, v22, v21);
      v24 = v23;
      swift_bridgeObjectRelease(v21);
      swift_task_dealloc(v22);
      v8 = (void *)sub_100031470(v24, v58);
      swift_bridgeObjectRelease(v24);
      v25 = sub_100024990(v19, v16);
      dispatch thunk of _AnyIteratorBoxBase.next()(v25);
    }
    while (v56(v18, 1, v20) != 1);
  }
  v9 = *(_QWORD *)(v0 + 136);
  swift_release_n(v57, 2);
  v10 = sub_100033850((uint64_t)v8);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(v0 + 24) = v10;
  v11 = sub_100037A5C(&qword_100260910);
  CheckedContinuation.resume(returning:)(v0 + 24, v11);
  swift_release(v9);
  v12 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 96);
  v13 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005A0B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 144);
  v1 = sub_100037A5C(&qword_100260910);
  CheckedContinuation.resume(throwing:)(v0 + 16, v1);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005A130(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch(sub_10005A150, v1, 0);
}

uint64_t sub_10005A150(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = sub_100018A7C(qword_1002607A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
  v5 = swift_task_alloc(48);
  *(_QWORD *)(v2 + 40) = v5;
  v8 = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = v8;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v2 + 48) = v6;
  *v6 = v2;
  v6[1] = sub_100057760;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, v8, v4, 0x7266286574697277, 0xEF293A73646E6569, sub_10005D6B4, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_10005A228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v9 = type metadata accessor for UUID(0);
  v7[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100260868);
  v7[7] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[8] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v7[9] = v12;
  v7[10] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005A2B8, a5, 0);
}

uint64_t sub_10005A2B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  v16 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = (v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_100250170, v11 + 8, v9 | 7);
  *(_QWORD *)(v12 + 16) = v8;
  *(_QWORD *)(v12 + 24) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v1, v3);
  *(_QWORD *)(v12 + v11) = v16;
  swift_bridgeObjectRetain(v8);
  v13 = swift_retain(v6);
  UUID.init()(v13);
  v14 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v5, &unk_1002608B8, v12, &unk_1002608C0, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v14);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005A3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return swift_task_switch(sub_10005A404, 0, 0);
}

uint64_t sub_10005A404()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  if (qword_10025F830 != -1)
    swift_once(&qword_10025F830, sub_100055B0C);
  v1 = v0[6];
  v2 = type metadata accessor for Logger(0);
  v0[9] = sub_100037A9C(v2, (uint64_t)qword_10027A970);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[6];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136315138;
    type metadata accessor for Friend(0);
    v10 = swift_bridgeObjectRetain(v7);
    v11 = Array.description.getter(v10);
    v13 = v12;
    swift_bridgeObjectRelease(v7);
    v0[5] = sub_10002BA84(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "LocalStorage Service write with friends: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[6], 2);
  }

  v14 = (_QWORD *)swift_task_alloc(dword_100267A44);
  v0[10] = v14;
  *v14 = v0;
  v14[1] = sub_10005A618;
  return sub_1001DB968(v0[6]);
}

uint64_t sub_10005A618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10005A67C;
  else
    v3 = sub_10005EFF8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10005A67C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 88);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 88);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136446210;
    v15 = v7;
    *(_QWORD *)(v0 + 24) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocalStorage Service write with friends error:%{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 88);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 88);
  v13 = sub_100037A5C(&qword_100260868);
  CheckedContinuation.resume(throwing:)(v0 + 16, v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005A848(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch(sub_10005A868, v1, 0);
}

uint64_t sub_10005A868(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = sub_100018A7C(qword_1002607A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
  v5 = swift_task_alloc(48);
  *(_QWORD *)(v2 + 40) = v5;
  v8 = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = v8;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v2 + 48) = v6;
  *v6 = v2;
  v6[1] = sub_100057760;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, v8, v4, 0x7728657461647075, 0xED0000293A687469, sub_10005D828, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_10005A940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v9 = type metadata accessor for UUID(0);
  v7[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100260868);
  v7[7] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[8] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v7[9] = v12;
  v7[10] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005A9D0, a5, 0);
}

uint64_t sub_10005A9D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  v16 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = (v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_1002501C0, v11 + 8, v9 | 7);
  *(_QWORD *)(v12 + 16) = v8;
  *(_QWORD *)(v12 + 24) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v1, v3);
  *(_QWORD *)(v12 + v11) = v16;
  swift_bridgeObjectRetain(v8);
  v13 = swift_retain(v6);
  UUID.init()(v13);
  v14 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v5, &unk_1002608E8, v12, &unk_1002608F0, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v14);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005AB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return swift_task_switch(sub_10005AB1C, 0, 0);
}

uint64_t sub_10005AB1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  if (qword_10025F830 != -1)
    swift_once(&qword_10025F830, sub_100055B0C);
  v1 = v0[6];
  v2 = type metadata accessor for Logger(0);
  v0[9] = sub_100037A9C(v2, (uint64_t)qword_10027A970);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[6];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v16 = v15;
    *(_DWORD *)v8 = 136315138;
    type metadata accessor for Friend(0);
    type metadata accessor for FriendshipAction(0);
    sub_100018A7C(&qword_1002608F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
    v9 = swift_bridgeObjectRetain(v7);
    v10 = Dictionary.description.getter(v9);
    v12 = v11;
    swift_bridgeObjectRelease(v7);
    v0[5] = sub_10002BA84(v10, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "LocalStorage Service update with changes: %s", v8, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[6], 2);
  }

  v13 = (_QWORD *)swift_task_alloc(dword_100267A6C);
  v0[10] = v13;
  *v13 = v0;
  v13[1] = sub_10005AD6C;
  return sub_1001DC21C(v0[6]);
}

uint64_t sub_10005AD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10005ADD0;
  else
    v3 = sub_10005EFF8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10005ADD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 88);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 88);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136446210;
    v15 = v7;
    *(_QWORD *)(v0 + 24) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocalStorage Service update with changes error:%{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 88);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 88);
  v13 = sub_100037A5C(&qword_100260868);
  CheckedContinuation.resume(throwing:)(v0 + 16, v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005AF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v9 = type metadata accessor for UUID(0);
  v7[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100260868);
  v7[7] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[8] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v7[9] = v12;
  v7[10] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005B02C, a5, 0);
}

uint64_t sub_10005B02C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  v16 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = (v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_100250260, v11 + 8, v9 | 7);
  *(_QWORD *)(v12 + 16) = v8;
  *(_QWORD *)(v12 + 24) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v1, v3);
  *(_QWORD *)(v12 + v11) = v16;
  swift_bridgeObjectRetain(v8);
  v13 = swift_retain(v6);
  UUID.init()(v13);
  v14 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v5, &unk_100260978, v12, &unk_100260980, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v14);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005B15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return swift_task_switch(sub_10005B178, 0, 0);
}

uint64_t sub_10005B178()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  if (qword_10025F830 != -1)
    swift_once(&qword_10025F830, sub_100055B0C);
  v1 = v0[6];
  v2 = type metadata accessor for Logger(0);
  v0[9] = sub_100037A9C(v2, (uint64_t)qword_10027A970);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[6];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136315138;
    type metadata accessor for Device(0);
    v10 = swift_bridgeObjectRetain(v7);
    v11 = Array.description.getter(v10);
    v13 = v12;
    swift_bridgeObjectRelease(v7);
    v0[5] = sub_10002BA84(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "LocalStorage Service write with devices: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[6], 2);
  }

  v14 = (_QWORD *)swift_task_alloc(dword_100267A9C);
  v0[10] = v14;
  *v14 = v0;
  v14[1] = sub_10005B38C;
  return sub_100012F34(v0[6]);
}

uint64_t sub_10005B38C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10005B434;
  else
    v3 = sub_10005B3F0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10005B3F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100037A5C(&qword_100260868);
  CheckedContinuation.resume(returning:)(v1, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005B434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 88);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 88);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136446210;
    v15 = v7;
    *(_QWORD *)(v0 + 24) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocalStorage Service write with devices error:%{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 88);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 88);
  v13 = sub_100037A5C(&qword_100260868);
  CheckedContinuation.resume(throwing:)(v0 + 16, v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005B600(uint64_t a1)
{
  uint64_t v1;

  return sub_10005C1E4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1002607E0, (uint64_t)&unk_100250030, (uint64_t)&unk_1002607F0);
}

uint64_t sub_10005B630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v8 = type metadata accessor for UUID(0);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_1002607E0);
  v6[6] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[7] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v6[8] = v11;
  v6[9] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005B6C0, a4, 0);
}

uint64_t sub_10005B6C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v8, v3);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 24) & ~v9;
  v11 = (v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_100250080, v11 + 8, v9 | 7);
  *(_QWORD *)(v12 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v1, v3);
  *(_QWORD *)(v12 + v11) = v6;
  v13 = swift_retain(v7);
  UUID.init()(v13);
  v14 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v5, &unk_100260810, v12, &unk_100260818, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v14);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005B7DC()
{
  return sub_10001A008(&qword_1002607E0);
}

uint64_t sub_10005B7E8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_1002607E0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_1002607EC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10003BF7C;
  return sub_10005B630(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_10005B898(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return swift_task_switch(sub_10005B8B0, 0, 0);
}

uint64_t sub_10005B8B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025F830 != -1)
    swift_once(&qword_10025F830, sub_100055B0C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027A970);
  *(_QWORD *)(v0 + 64) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocalStorage Service read all devices", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_1002679C4);
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = sub_10005B9B4;
  return sub_10003BEBC();
}

uint64_t sub_10005B9B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 72);
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10005BAAC;
  }
  else
  {
    *(_QWORD *)(v4 + 88) = a1;
    v6 = sub_10005BA28;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10005BA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = swift_retain(v1);
  v3 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v2);
  swift_release(v1);
  *(_QWORD *)(v0 + 40) = v3;
  v4 = sub_100037A5C(&qword_1002607E0);
  CheckedContinuation.resume(returning:)(v0 + 40, v4);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005BAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 80);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 80);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136446210;
    v15 = v7;
    *(_QWORD *)(v0 + 24) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocalStorage Service read with devices error:%{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 80);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 80);
  v13 = sub_100037A5C(&qword_1002607E0);
  CheckedContinuation.resume(throwing:)(v0 + 16, v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005BC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v9 = type metadata accessor for UUID(0);
  v7[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C(&qword_100260868);
  v7[7] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[8] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v7[9] = v12;
  v7[10] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005BD08, a4, 0);
}

uint64_t sub_10005BD08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  v16 = *(_QWORD *)(v0 + 40);
  v7 = *(const void **)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v6, v3);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 456) & ~v9;
  v11 = (v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_100250120, v11 + 8, v9 | 7);
  *(_QWORD *)(v12 + 16) = v8;
  memcpy((void *)(v12 + 24), v7, 0x1B0uLL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v1, v3);
  *(_QWORD *)(v12 + v11) = v16;
  swift_retain(v8);
  v13 = sub_10002A0C4((uint64_t)v7);
  UUID.init()(v13);
  v14 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v5, &unk_100260888, v12, &unk_100260890, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v14);
  swift_release(v14);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005BE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch(sub_10005BE64, 0, 0);
}

uint64_t sub_10005BE64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t **v6;

  if (qword_10025F830 != -1)
    swift_once(&qword_10025F830, sub_100055B0C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027A970);
  v0[8] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocalStorage Service write serverSettings", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (uint64_t **)swift_task_alloc(dword_100267A0C);
  v0[9] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = (uint64_t *)sub_10005BF70;
  return sub_10000530C(v0[6]);
}

uint64_t sub_10005BF70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10005C018;
  else
    v3 = sub_10005BFD4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10005BFD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100037A5C(&qword_100260868);
  CheckedContinuation.resume(returning:)(v1, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005C018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 80);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 80);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136446210;
    v15 = v7;
    *(_QWORD *)(v0 + 24) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 24, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocalStorage Service write serverSettings:%{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 80);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 80);
  v13 = sub_100037A5C(&qword_100260868);
  CheckedContinuation.resume(throwing:)(v0 + 16, v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005C1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v27 = a6;
  v10 = sub_100037A5C(a4);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v19 = sub_100018A7C(qword_1002607A0, v18, (uint64_t (*)(uint64_t))type metadata accessor for LocalStorageService, (uint64_t)&unk_1001F36EC);
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v20 + 40) & ~v20;
  v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (char *)swift_allocObject(a5, v22 + 8, v20 | 7);
  *((_QWORD *)v23 + 2) = a2;
  *((_QWORD *)v23 + 3) = v19;
  *((_QWORD *)v23 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v23[v21], v13, v10);
  *(_QWORD *)&v23[v22] = a3;
  swift_retain_n(a2, 2);
  v24 = sub_10005582C((uint64_t)v16, v27, (uint64_t)v23);
  return swift_release(v24);
}

uint64_t sub_10005C36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v8 = type metadata accessor for UUID(0);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_100260828);
  v6[6] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[7] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v6[8] = v11;
  v6[9] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005C3FC, a4, 0);
}

uint64_t sub_10005C3FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v8, v3);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 24) & ~v9;
  v11 = (v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_1002500D0, v11 + 8, v9 | 7);
  *(_QWORD *)(v12 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v1, v3);
  *(_QWORD *)(v12 + v11) = v6;
  v13 = swift_retain(v7);
  UUID.init()(v13);
  v14 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v5, &unk_100260848, v12, &unk_100260850, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v14);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005C518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 4904) = a2;
  *(_QWORD *)(v2 + 4896) = a1;
  return swift_task_switch(sub_10005C534, 0, 0);
}

uint64_t sub_10005C534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025F830 != -1)
    swift_once(&qword_10025F830, sub_100055B0C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027A970);
  *(_QWORD *)(v0 + 4912) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocalStorage Service read all server settings", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_1002679DC);
  *(_QWORD *)(v0 + 4920) = v6;
  *v6 = v0;
  v6[1] = sub_10005C644;
  return sub_10003BB14(v0 + 3040);
}

uint64_t sub_10005C644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 4920);
  *(_QWORD *)(*(_QWORD *)v1 + 4928) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10005CD64;
  else
    v3 = sub_10005C6A8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10005C6A8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  const void *v37;
  const void *v38;
  uint64_t v39;
  os_log_type_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF90);
  sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF90);
  sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF90);
  sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF90);
  sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF90);
  sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF90);
  sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF90);
  v1 = sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF90);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v40 = v3;
    v37 = (const void *)(v0 + 1744);
    v34 = v0 + 4824;
    v41 = (_QWORD *)(v0 + 4856);
    v42 = v0 + 4872;
    v4 = swift_slowAlloc(72, -1);
    v39 = swift_slowAlloc(128, -1);
    v43 = v39;
    *(_DWORD *)v4 = 136447747;
    sub_10000EF6C(v0 + 3040, v0 + 448, &qword_1002603A8);
    if (sub_100049214(v0 + 448) == 1)
    {
      v5 = 0;
      v6 = 0xE000000000000000;
    }
    else
    {
      v7 = *(_OWORD *)(v0 + 496);
      *(_OWORD *)(v0 + 4720) = *(_OWORD *)(v0 + 480);
      *(_OWORD *)(v0 + 4736) = v7;
      v8 = *(_OWORD *)(v0 + 528);
      *(_OWORD *)(v0 + 4752) = *(_OWORD *)(v0 + 512);
      *(_OWORD *)(v0 + 4768) = v8;
      v9 = *(_OWORD *)(v0 + 464);
      *(_OWORD *)(v0 + 4688) = *(_OWORD *)(v0 + 448);
      *(_OWORD *)(v0 + 4704) = v9;
      v5 = sub_100028A7C();
      v6 = v10;
    }
    v38 = (const void *)(v0 + 2608);
    v32 = v0 + 3792;
    v35 = (uint64_t *)(v0 + 4840);
    v11 = (_QWORD *)(v0 + 4848);
    *(_QWORD *)(v0 + 4864) = sub_10002BA84(v5, v6, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4864, v42, v4 + 4, v4 + 12);
    swift_bridgeObjectRelease(v6);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    *(_WORD *)(v4 + 12) = 2160;
    *v41 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, v0 + 4864, v4 + 14, v4 + 22);
    *(_WORD *)(v4 + 22) = 2081;
    sub_10000EF6C(v0 + 3040, v0 + 880, &qword_1002603A8);
    if (sub_100049214(v0 + 880) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
    }
    else
    {
      v12 = *(_QWORD *)(v0 + 1280);
      v13 = *(_QWORD *)(v0 + 1288);
      v14 = *(_QWORD *)(v0 + 1296);
      v15 = *(_QWORD *)(v0 + 1304);
      sub_10002BD68(v12, v13, v14, v15);
    }
    v36 = v0 + 4112;
    *(_QWORD *)(v0 + 4784) = v12;
    v33 = v0 + 4544;
    *(_QWORD *)(v0 + 4792) = v13;
    *(_QWORD *)(v0 + 4800) = v14;
    *(_QWORD *)(v0 + 4808) = v15;
    v16 = sub_100037A5C(&qword_100260550);
    v17 = String.init<A>(describing:)(v0 + 4784, v16);
    v19 = v18;
    *(_QWORD *)(v0 + 4816) = sub_10002BA84(v17, v18, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4816, v34, v4 + 24, v4 + 32);
    swift_bridgeObjectRelease(v19);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    *(_WORD *)(v4 + 32) = 2160;
    *(_QWORD *)(v0 + 4824) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v0 + 4832, v4 + 34, v4 + 42);
    *(_WORD *)(v4 + 42) = 2081;
    sub_10000EF6C(v0 + 3040, (uint64_t)v37, &qword_1002603A8);
    if (sub_100049214((uint64_t)v37) == 1)
    {
      v20 = v0 + 3632;
      sub_10004922C((_OWORD *)(v0 + 3632));
    }
    else
    {
      v20 = v0 + 3472;
      memcpy((void *)(v0 + 1312), v37, 0x1B0uLL);
      sub_10000EF6C(v0 + 1408, v0 + 3472, &qword_1002603B0);
      sub_100009FE4((uint64_t *)(v0 + 3472));
    }
    sub_10000EF6C(v20, v0 + 3952, &qword_1002603B0);
    sub_10000EF6C(v0 + 3952, v32, &qword_1002603B0);
    v21 = sub_100037A5C(&qword_1002603B0);
    v22 = String.init<A>(describing:)(v32, v21);
    v24 = v23;
    *v35 = sub_10002BA84(v22, v23, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v11, v4 + 44, v4 + 52);
    swift_bridgeObjectRelease(v24);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    *(_WORD *)(v4 + 52) = 2160;
    *v11 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v11, v41, v4 + 54, v4 + 62);
    *(_WORD *)(v4 + 62) = 2081;
    sub_10000EF6C(v0 + 3040, (uint64_t)v38, &qword_1002603A8);
    if (sub_100049214((uint64_t)v38) == 1)
    {
      v25 = v0 + 4256;
      sub_10005D34C(v0 + 4256);
    }
    else
    {
      v25 = v0 + 4400;
      memcpy((void *)(v0 + 2176), v38, 0x1B0uLL);
      sub_10000EF6C(v0 + 2432, v0 + 4400, &qword_100260858);
    }
    sub_10000EF6C(v25, v33, &qword_100260858);
    sub_10000EF6C(v33, v36, &qword_100260858);
    v26 = sub_100037A5C(&qword_100260858);
    v27 = String.init<A>(describing:)(v36, v26);
    v29 = v28;
    *(_QWORD *)(v0 + 4872) = sub_10002BA84(v27, v28, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v42, v0 + 4880, v4 + 64, v4 + 72);
    swift_bridgeObjectRelease(v29);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    _os_log_impl((void *)&_mh_execute_header, v2, v40, "Read LocalStorage serverSettings:\nmyInfo: %{public}s\nprefs: %{private,mask.hash}s\ncontext: %{private,mask.hash}s\nconfig: %{private,mask.hash}s", (uint8_t *)v4, 0x48u);
    swift_arrayDestroy(v39, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }
  else
  {
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
    sub_1000179AC(v0 + 3040, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BDC8);
  }

  sub_10000EF6C(v0 + 3040, v0 + 16, &qword_1002603A8);
  v30 = sub_100037A5C(&qword_100260828);
  CheckedContinuation.resume(returning:)(v0 + 16, v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005CD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 4928);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 4928);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 4888) = v5;
    swift_errorRetain(v5);
    v8 = sub_100037A5C(&qword_100265260);
    v9 = String.init<A>(describing:)(v0 + 4888, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 4880) = sub_10002BA84(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4880, v0 + 4888, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocalStorage Service write with serverSettings error:%{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 4928);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  *(_QWORD *)(v0 + 4832) = *(_QWORD *)(v0 + 4928);
  v13 = sub_100037A5C(&qword_100260828);
  CheckedContinuation.resume(throwing:)(v0 + 4832, v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005CF40()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027A988);
  sub_100037A9C(v0, (uint64_t)qword_10027A988);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0xD000000000000013, 0x80000001001F3630);
}

uint64_t sub_10005CFC0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10005F000;
  return v6(a1);
}

uint64_t sub_10005D024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1002607FC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002607F8 + dword_1002607F8))(a1, v4);
}

uint64_t sub_10005D094()
{
  return sub_10005DA94(&qword_1002607E0);
}

uint64_t sub_10005D0A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_1002607E0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_10026080C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003BF7C;
  v5[6] = v3;
  v5[7] = v4;
  return swift_task_switch(sub_10005B8B0, 0, 0);
}

uint64_t sub_10005D120(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10005D184;
  return v6(a1);
}

uint64_t sub_10005D184()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10005D1D0(uint64_t a1)
{
  uint64_t v1;

  return sub_10005C1E4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), &qword_100260828, (uint64_t)&unk_1002500A8, (uint64_t)&unk_100260838);
}

uint64_t sub_10005D200()
{
  return sub_10001A008(&qword_100260828);
}

uint64_t sub_10005D20C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100260828) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_100260834);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10003BF7C;
  return sub_10005C36C(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_10005D2BC()
{
  return sub_10005DA94(&qword_100260828);
}

uint64_t sub_10005D2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_100260828) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_100260844);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003BF7C;
  v5[613] = v4;
  v5[612] = v3;
  return swift_task_switch(sub_10005C534, 0, 0);
}

double sub_10005D34C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 2;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

uint64_t sub_10005D380(uint64_t a1)
{
  uint64_t v1;

  return sub_10000D2B4(a1, *(_QWORD *)(v1 + 16), *(const void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10005D38C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = sub_100037A5C(&qword_100260868);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 6));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 8));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 11));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 13));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 16));
  if (*((_QWORD *)v0 + 22))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v0 + 19));
    swift_bridgeObjectRelease(*((_QWORD *)v0 + 22));
    swift_bridgeObjectRelease(*((_QWORD *)v0 + 34));
    swift_bridgeObjectRelease(*((_QWORD *)v0 + 36));
  }
  v5 = *((_QWORD *)v0 + 56);
  if (v5)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(*((_QWORD *)v0 + 58));
  }
  v6 = (v3 + 472) & ~v3;
  v7 = ((v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v6], v1);
  return swift_deallocObject(v0, v7, v3 | 7);
}

uint64_t sub_10005D47C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100260868) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 472) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)(v1 + 5);
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_100260874);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10003BF7C;
  return sub_10005BC78(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10005D53C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = sub_100037A5C(&qword_100260868);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_release(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 4));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 6));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 9));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 11));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 14));
  if (*((_QWORD *)v0 + 20))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v0 + 17));
    swift_bridgeObjectRelease(*((_QWORD *)v0 + 20));
    swift_bridgeObjectRelease(*((_QWORD *)v0 + 32));
    swift_bridgeObjectRelease(*((_QWORD *)v0 + 34));
  }
  v5 = *((_QWORD *)v0 + 54);
  if (v5)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(*((_QWORD *)v0 + 56));
  }
  v6 = (v3 + 456) & ~v3;
  v7 = ((v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v6], v1);
  return swift_deallocObject(v0, v7, v3 | 7);
}

uint64_t sub_10005D624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_100260868) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + 24;
  v5 = v0 + ((v2 + 456) & ~v2);
  v6 = (_QWORD *)swift_task_alloc(dword_100260884);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10003BF7C;
  v6[6] = v4;
  v6[7] = v5;
  v6[5] = v3;
  return swift_task_switch(sub_10005BE64, 0, 0);
}

uint64_t sub_10005D6B4(uint64_t a1)
{
  uint64_t *v1;

  return sub_10000D520(a1, v1[2], v1[3], v1[4], (uint64_t)&unk_100250148, (uint64_t)&unk_1002608A8);
}

uint64_t sub_10005D6E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100260868) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_1002608A4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10003BF7C;
  return sub_10005A228(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10005D7A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_100260868) - 8) + 80);
  v3 = v0 + ((v2 + 32) & ~v2);
  v4 = swift_task_alloc(dword_1002608B4);
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10003BF7C;
  *(_QWORD *)(v4 + 64) = v3;
  *(_OWORD *)(v4 + 48) = v5;
  return swift_task_switch(sub_10005A404, 0, 0);
}

uint64_t sub_10005D828(uint64_t a1)
{
  uint64_t *v1;

  return sub_10000D520(a1, v1[2], v1[3], v1[4], (uint64_t)&unk_100250198, (uint64_t)&unk_1002608D8);
}

uint64_t sub_10005D858(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100260868) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_1002608D4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10003BF7C;
  return sub_10005A940(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10005D918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_100260868) - 8) + 80);
  v3 = v0 + ((v2 + 32) & ~v2);
  v4 = swift_task_alloc(dword_1002608E4);
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10003BF7C;
  *(_QWORD *)(v4 + 64) = v3;
  *(_OWORD *)(v4 + 48) = v5;
  return swift_task_switch(sub_10005AB1C, 0, 0);
}

uint64_t sub_10005D99C(uint64_t a1)
{
  uint64_t v1;

  return sub_100059768(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), &qword_100260910, (uint64_t)&unk_1002501E8, (uint64_t)&unk_100260920);
}

uint64_t sub_10005D9CC()
{
  return sub_10001A008(&qword_100260910);
}

uint64_t sub_10005D9D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100260910) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_10026091C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000087DC;
  return sub_1000598C8(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_10005DA88()
{
  return sub_10005DA94(&qword_100260910);
}

uint64_t sub_10005DA94(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = sub_100037A5C(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = v4 | 7;
  v7 = ((*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v7, v6);
}

uint64_t sub_10005DB10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(sub_100037A5C(&qword_100260910) - 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5 = (_QWORD *)swift_task_alloc(dword_10026092C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000087DC;
  return sub_100059A70(v3, v4);
}

uint64_t sub_10005DBA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100037B0C(a1, a2);
}

uint64_t sub_10005DBC8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_10005DC30;
  return v5(v2 + 32);
}

uint64_t sub_10005DC30()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10005DC80(uint64_t a1)
{
  uint64_t *v1;

  return sub_10000D520(a1, v1[2], v1[3], v1[4], (uint64_t)&unk_100250238, (uint64_t)&unk_100260968);
}

uint64_t sub_10005DCB0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100037A5C(&qword_100260868);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10005DD44(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100260868) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_100260964);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10003BF7C;
  return sub_10005AF9C(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10005DE04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100037A5C(&qword_100260868);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10005DE90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_100260868) - 8) + 80);
  v3 = v0 + ((v2 + 32) & ~v2);
  v4 = swift_task_alloc(dword_100260974);
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10003BF7C;
  *(_QWORD *)(v4 + 64) = v3;
  *(_OWORD *)(v4 + 48) = v5;
  return swift_task_switch(sub_10005B178, 0, 0);
}

uint64_t sub_10005DF14()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100037A5C(&qword_100260910);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10005DF9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_100260910) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = (uint64_t)v1 + ((v4 + 48) & ~v4);
  v10 = (_QWORD *)swift_task_alloc(dword_10026098C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003BF7C;
  return sub_10005859C(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_10005E038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100037A5C(&qword_100260910);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10005E0B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_100037A5C(&qword_100260910) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = v0 + ((v2 + 32) & ~v2);
  v6 = (_QWORD *)swift_task_alloc(dword_10026099C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10003BF7C;
  return sub_10005873C(v3, v4, v5);
}

uint64_t sub_10005E134@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100037B0C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10005E164(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1002609BC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002609B8 + dword_1002609B8))(a1, v4);
}

uint64_t sub_10005E1D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005E1F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1002609D4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002609D0 + dword_1002609D0))(a1, v4);
}

uint64_t sub_10005E268(uint64_t a1)
{
  uint64_t *v1;

  return sub_100058CD4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10005E274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = type metadata accessor for Handle(0);
  v1 = *(_QWORD *)(v17 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v16 = sub_100037A5C(&qword_1002609F0);
  v5 = *(_QWORD *)(v16 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = type metadata accessor for HandleType(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + v11) & ~v11;
  v13 = v2 | v11 | v6 | 7;
  v14 = ((*(_QWORD *)(v10 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v14, v13);
}

uint64_t sub_10005E388(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_100037A5C(&qword_1002609F0) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(type metadata accessor for HandleType(0) - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = v1[2];
  v13 = v1[3];
  v14 = v1[4];
  v15 = (uint64_t)v1 + v5;
  v16 = (uint64_t)v1 + v8;
  v17 = (uint64_t)v1 + v11;
  v18 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFF8));
  v19 = (_QWORD *)swift_task_alloc(dword_1002609FC);
  *(_QWORD *)(v2 + 16) = v19;
  *v19 = v2;
  v19[1] = sub_10003BF7C;
  return sub_100058F3C(a1, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_10005E490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = type metadata accessor for Handle(0);
  v1 = *(_QWORD *)(v17 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v16 = sub_100037A5C(&qword_1002609F0);
  v5 = *(_QWORD *)(v16 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = type metadata accessor for HandleType(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + v11) & ~v11;
  v13 = v2 | v11 | v6 | 7;
  v14 = ((*(_QWORD *)(v10 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v14, v13);
}

uint64_t sub_10005E59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(type metadata accessor for Handle(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_100037A5C(&qword_1002609F0) - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(type metadata accessor for HandleType(0) - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v0 + 16);
  v11 = v0 + v9;
  v12 = (_QWORD *)swift_task_alloc(dword_100260A0C);
  *(_QWORD *)(v1 + 16) = v12;
  *v12 = v1;
  v12[1] = sub_10003BF7C;
  return sub_10005922C(v10, v0 + v3, v0 + v6, v11);
}

uint64_t sub_10005E684(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000577D4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10005E690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for OwnerSharedSecretsRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_100037A5C(&qword_100260868);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v12 = v0 + v4;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  sub_100037AB4(*(_QWORD *)(v12 + *(int *)(v1 + 24)), *(_QWORD *)(v12 + *(int *)(v1 + 24) + 8));
  v14 = v12 + *(int *)(v1 + 28);
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_10005E7A0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for OwnerSharedSecretsRecord(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_100037A5C(&qword_100260868) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + v8;
  v14 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc(dword_100260A24);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_10003BF7C;
  return sub_1000579E0(a1, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_10005E880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for OwnerSharedSecretsRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = sub_100037A5C(&qword_100260868);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v12 = v0 + v4;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  sub_100037AB4(*(_QWORD *)(v12 + *(int *)(v1 + 24)), *(_QWORD *)(v12 + *(int *)(v1 + 24) + 8));
  v14 = v12 + *(int *)(v1 + 28);
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_release(*(_QWORD *)(v0 + v5));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_10005E99C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for OwnerSharedSecretsRecord(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(sub_100037A5C(&qword_100260868) - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v0 + v4);
  v8 = v0 + v6;
  v9 = (_QWORD *)swift_task_alloc(dword_100260A34);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_10003BF7C;
  return sub_100057C2C(v0 + v3, v7, v8);
}

uint64_t sub_10005EA60(uint64_t a1)
{
  uint64_t v1;

  return sub_100059768(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), &qword_100260A50, (uint64_t)&unk_1002503C8, (uint64_t)&unk_100260A60);
}

uint64_t sub_10005EA90()
{
  return sub_10001A008(&qword_100260A50);
}

uint64_t sub_10005EA9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100260A50) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_100260A5C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10003BF7C;
  return sub_1000570F0(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_10005EB4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100037A5C(&qword_100260A50);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_10005EBCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(sub_100037A5C(&qword_100260A50) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc(dword_100260A6C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10003BF7C;
  return sub_1000572B0(v4, v5);
}

uint64_t sub_10005EC64(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v17 = *(_OWORD *)(a1 + 464);
  v18 = *(_OWORD *)(a1 + 480);
  v15 = *(_OWORD *)(a1 + 432);
  v16 = *(_OWORD *)(a1 + 448);
  v13 = *(_OWORD *)(a1 + 400);
  v14 = *(_OWORD *)(a1 + 416);
  v11 = *(_OWORD *)(a1 + 368);
  v12 = *(_OWORD *)(a1 + 384);
  v9 = *(_OWORD *)(a1 + 336);
  v10 = *(_OWORD *)(a1 + 352);
  v7 = *(_OWORD *)(a1 + 304);
  v8 = *(_OWORD *)(a1 + 320);
  v5 = *(_OWORD *)(a1 + 272);
  v6 = *(_OWORD *)(a1 + 288);
  v3 = *(_OWORD *)(a1 + 240);
  v4 = *(_OWORD *)(a1 + 256);
  sub_10005ED50(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(_QWORD *)(a1 + 496));
  return a1;
}

uint64_t sub_10005ED50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t a70;
  uint64_t a71;
  uint64_t a72;
  uint64_t result;

  if (a7)
  {
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a13);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a12);
    sub_10002BD98(a14, a15, a16, a17);
    swift_bridgeObjectRelease(a18);
    swift_bridgeObjectRelease(a19);
    swift_bridgeObjectRelease(a20);
    swift_bridgeObjectRelease(a21);
    swift_bridgeObjectRelease(a22);
    sub_10002B5F4(a23, a24, a25, a26, a27);
    swift_bridgeObjectRelease(a28);
    swift_bridgeObjectRelease(a29);
    sub_10002BF40(a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50);
    swift_bridgeObjectRelease(a69);
    swift_bridgeObjectRelease(a70);
    swift_bridgeObjectRelease(a71);
    return swift_bridgeObjectRelease(a72);
  }
  return result;
}

uint64_t sub_10005EFC4(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

uint64_t sub_10005EFE0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_10005F014()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v1 = type metadata accessor for HashAlgorithm(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v5 = type metadata accessor for FindingTokenEnvelopeV1(0);
  v6 = sub_100004EA8(&qword_100260A98, type metadata accessor for FindingTokenEnvelopeV1, (uint64_t)&unk_1001F37D0);
  v7._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v5, v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._object = (void *)0x80000001001FD100;
  v9._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v9);
  v10 = *v0;
  v11 = (void *)v0[1];
  swift_bridgeObjectRetain(v11);
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  v13._countAndFlagsBits = 0x7461446573616220;
  v13._object = (void *)0xEB00000000203A65;
  String.append(_:)(v13);
  v14 = type metadata accessor for Date(0);
  v15 = sub_100004EA8(&qword_100260AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  v18._countAndFlagsBits = 0x5364657261687320;
  v18._object = (void *)0xEF203A7465726365;
  String.append(_:)(v18);
  v19 = (uint64_t *)((char *)v0 + *(int *)(v5 + 24));
  v21 = v19[1];
  v31 = *v19;
  v20 = v31;
  v32 = v21;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for HashAlgorithm.sha256(_:), v1);
  sub_10001A484(v20, v21);
  v22 = sub_10003EC14();
  v23 = DataProtocol.hash(algorithm:)(v4, &type metadata for Data, v22);
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_100037AB4(v31, v32);
  v31 = v23;
  v32 = v25;
  v26 = DataProtocol.hexString.getter(&type metadata for Data, v22);
  v28 = v27;
  sub_100037AB4(v23, v25);
  v29._countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v28);
  return v33;
}

uint64_t type metadata accessor for FindingTokenEnvelopeV1(uint64_t a1)
{
  uint64_t result;

  result = qword_100260B10;
  if (!qword_100260B10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FindingTokenEnvelopeV1);
  return result;
}

uint64_t sub_10005F2B8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  char v21;
  __int128 v22;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100260B98);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1000604D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FindingTokenEnvelopeV1.CodingKeys, &type metadata for FindingTokenEnvelopeV1.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v22) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = type metadata accessor for FindingTokenEnvelopeV1(0);
    v15 = (char *)v3 + *(int *)(v14 + 20);
    LOBYTE(v22) = 1;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100004EA8(&qword_100260BA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v22, v5, v16, v17);
    v22 = *(_OWORD *)((char *)v3 + *(int *)(v14 + 24));
    v21 = 2;
    v18 = sub_10003F9B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005F454@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;

  v22 = a2;
  v3 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_100037A5C(&qword_100260B80);
  v6 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FindingTokenEnvelopeV1(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100036228(a1, v12);
  v14 = sub_1000604D0();
  v25 = v8;
  v15 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FindingTokenEnvelopeV1.CodingKeys, &type metadata for FindingTokenEnvelopeV1.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_10002BB90(a1);
  v16 = v6;
  v17 = v24;
  LOBYTE(v28) = 0;
  *(_QWORD *)v11 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v26);
  *((_QWORD *)v11 + 1) = v18;
  LOBYTE(v28) = 1;
  v19 = sub_100004EA8(&qword_100260B90, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v17, &v28, v26, v17, v19);
  (*(void (**)(char *, _QWORD *, uint64_t))(v23 + 32))(&v11[*(int *)(v9 + 20)], v5, v17);
  v29 = 2;
  v20 = sub_10003F974();
  v27 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for Data, &v29, v26, &type metadata for Data, v20);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v25, v26);
  *(_OWORD *)&v11[*(int *)(v9 + 24)] = v28;
  sub_100060514((uint64_t)v11, v22);
  sub_10002BB90(a1);
  return sub_100060558((uint64_t)v11);
}

uint64_t sub_10005F714()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6574614465736162;
  if (*v0 != 1)
    v1 = 0x6553646572616873;
  if (*v0)
    return v1;
  else
    return 0x6449726576726573;
}

uint64_t sub_10005F778@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100060A2C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005F79C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10005F7A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000604D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005F7D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000604D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005F7F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005F454(a1, a2);
}

uint64_t sub_10005F80C(_QWORD *a1)
{
  return sub_10005F2B8(a1);
}

uint64_t sub_10005F82C()
{
  return 0x6449726576726573;
}

uint64_t sub_10005F848(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100060448();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005F870(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100060448();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005F898@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10005FB34(a1, &qword_100260B50, (uint64_t (*)(void))sub_100060448, (uint64_t)&type metadata for FindingTokenRequestEnvelopeV1.CodingKeys, a2);
}

uint64_t sub_10005F8C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_10005FC90(a1, a2, a3, &qword_100260B60, (uint64_t (*)(void))sub_100060448, (uint64_t)&type metadata for FindingTokenRequestEnvelopeV1.CodingKeys);
}

uint64_t sub_10005F8F0()
{
  uint64_t v0;

  return sub_10005F95C(*(_QWORD *)v0, *(void **)(v0 + 8), (uint64_t (*)(uint64_t, uint64_t))sub_10005F918, (uint64_t)&type metadata for FindingTokenRequestEnvelopeV1);
}

unint64_t sub_10005F918()
{
  unint64_t result;

  result = qword_100260AA8;
  if (!qword_100260AA8)
  {
    result = swift_getWitnessTable(&unk_1001F3848, &type metadata for FindingTokenRequestEnvelopeV1);
    atomic_store(result, (unint64_t *)&qword_100260AA8);
  }
  return result;
}

uint64_t sub_10005F95C(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;

  _StringGuts.grow(_:)(22);
  v10 = a3(v8, v9);
  v11 = CustomStringConvertible.typeDescription.getter(a4, v10);
  swift_bridgeObjectRelease(0xE000000000000000);
  v12._object = (void *)0x80000001001FD100;
  v12._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v12);
  swift_bridgeObjectRetain(a2);
  v13._countAndFlagsBits = a1;
  v13._object = a2;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(a2);
  return v11;
}

uint64_t sub_10005FA24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6449726576726573 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449726576726573, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10005FAB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006048C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005FAE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006048C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005FB08@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10005FB34(a1, &qword_100260B68, (uint64_t (*)(void))sub_10006048C, (uint64_t)&type metadata for FindingTokenRevokeEnvelopeV1.CodingKeys, a2);
}

uint64_t sub_10005FB34@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v23 = a5;
  v24 = sub_100037A5C(a2);
  v9 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100036228(a1, v12);
  v14 = a3();
  v15 = dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (v5)
    return sub_10002BB90(a1);
  v16 = v23;
  v17 = v24;
  v18 = KeyedDecodingContainer.decode(_:forKey:)(v15, v24);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v17);
  result = sub_10002BB90(a1);
  *v16 = v18;
  v16[1] = v20;
  return result;
}

uint64_t sub_10005FC64(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_10005FC90(a1, a2, a3, &qword_100260B78, (uint64_t (*)(void))sub_10006048C, (uint64_t)&type metadata for FindingTokenRevokeEnvelopeV1.CodingKeys);
}

uint64_t sub_10005FC90(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t (*v20)(void);

  v20 = a5;
  v9 = sub_100037A5C(a4);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v6[1];
  v19 = *v6;
  v15 = a1[3];
  v14 = a1[4];
  sub_100036228(a1, v15);
  v16 = v20();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v16, v15, v14);
  KeyedEncodingContainer.encode(_:forKey:)(v19, v13, v17, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10005FD88()
{
  uint64_t v0;

  return sub_10005F95C(*(_QWORD *)v0, *(void **)(v0 + 8), (uint64_t (*)(uint64_t, uint64_t))sub_10005FDB0, (uint64_t)&type metadata for FindingTokenRevokeEnvelopeV1);
}

unint64_t sub_10005FDB0()
{
  unint64_t result;

  result = qword_100260AB0;
  if (!qword_100260AB0)
  {
    result = swift_getWitnessTable(&unk_1001F3870, &type metadata for FindingTokenRevokeEnvelopeV1);
    atomic_store(result, (unint64_t *)&qword_100260AB0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FindingTokenRevokeEnvelopeV1(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for FindingTokenRevokeEnvelopeV1(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithTake for FindingTokenRevokeEnvelopeV1(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for FindingTokenRevokeEnvelopeV1()
{
  return &type metadata for FindingTokenRevokeEnvelopeV1;
}

uint64_t *sub_10005FE74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11, v13);
    v14 = *(int *)(a3 + 24);
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = *v16;
    v18 = v16[1];
    sub_10001A484(*v16, v18);
    *v15 = v17;
    v15[1] = v18;
  }
  return v4;
}

uint64_t sub_10005FF40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return sub_100037AB4(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *sub_10005FFA0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v12 = swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10, v12);
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = *v15;
  v17 = v15[1];
  sub_10001A484(*v15, v17);
  *v14 = v16;
  v14[1] = v17;
  return a1;
}

_QWORD *sub_100060040(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  sub_10001A484(*v14, v16);
  v17 = *v13;
  v18 = v13[1];
  *v13 = v15;
  v13[1] = v16;
  sub_100037AB4(v17, v18);
  return a1;
}

_OWORD *sub_1000600EC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_100060164(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)((char *)a1 + v12);
  v14 = *(_QWORD *)((char *)a1 + v12 + 8);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  sub_100037AB4(v13, v14);
  return a1;
}

uint64_t sub_1000601F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000601FC);
}

uint64_t sub_1000601FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100060278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100060284);
}

uint64_t sub_100060284(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000602F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1001F3778;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1001F3790;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *assignWithCopy for CloudStorageStore.Error(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudStorageStore.Error(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudStorageStore.Error(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FindingTokenRequestEnvelopeV1()
{
  return &type metadata for FindingTokenRequestEnvelopeV1;
}

unint64_t sub_100060448()
{
  unint64_t result;

  result = qword_100260B58;
  if (!qword_100260B58)
  {
    result = swift_getWitnessTable(&unk_1001F3C0C, &type metadata for FindingTokenRequestEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260B58);
  }
  return result;
}

unint64_t sub_10006048C()
{
  unint64_t result;

  result = qword_100260B70;
  if (!qword_100260B70)
  {
    result = swift_getWitnessTable(&unk_1001F3BBC, &type metadata for FindingTokenRevokeEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260B70);
  }
  return result;
}

unint64_t sub_1000604D0()
{
  unint64_t result;

  result = qword_100260B88;
  if (!qword_100260B88)
  {
    result = swift_getWitnessTable(&unk_1001F3B6C, &type metadata for FindingTokenEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260B88);
  }
  return result;
}

uint64_t sub_100060514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FindingTokenEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100060558(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FindingTokenEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for FindingTokenEnvelopeV1.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FindingTokenEnvelopeV1.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100060670 + 4 * byte_1001F3725[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000606A4 + 4 * byte_1001F3720[v4]))();
}

uint64_t sub_1000606A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000606AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000606B4);
  return result;
}

uint64_t sub_1000606C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000606C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000606CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000606D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FindingTokenEnvelopeV1.CodingKeys()
{
  return &type metadata for FindingTokenEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for FindingTokenRevokeEnvelopeV1.CodingKeys()
{
  return &type metadata for FindingTokenRevokeEnvelopeV1.CodingKeys;
}

uint64_t _s13findmylocated28FindingTokenRevokeEnvelopeV1V10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100060748 + 4 * byte_1001F372A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100060768 + 4 * byte_1001F372F[v4]))();
}

_BYTE *sub_100060748(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100060768(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100060770(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100060778(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100060780(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100060788(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FindingTokenRequestEnvelopeV1.CodingKeys()
{
  return &type metadata for FindingTokenRequestEnvelopeV1.CodingKeys;
}

unint64_t sub_1000607A8()
{
  unint64_t result;

  result = qword_100260BA8;
  if (!qword_100260BA8)
  {
    result = swift_getWitnessTable(&unk_1001F39D4, &type metadata for FindingTokenRequestEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260BA8);
  }
  return result;
}

unint64_t sub_1000607F0()
{
  unint64_t result;

  result = qword_100260BB0;
  if (!qword_100260BB0)
  {
    result = swift_getWitnessTable(&unk_1001F3A8C, &type metadata for FindingTokenRevokeEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260BB0);
  }
  return result;
}

unint64_t sub_100060838()
{
  unint64_t result;

  result = qword_100260BB8;
  if (!qword_100260BB8)
  {
    result = swift_getWitnessTable(&unk_1001F3B44, &type metadata for FindingTokenEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260BB8);
  }
  return result;
}

unint64_t sub_100060880()
{
  unint64_t result;

  result = qword_100260BC0;
  if (!qword_100260BC0)
  {
    result = swift_getWitnessTable(&unk_1001F3AB4, &type metadata for FindingTokenEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260BC0);
  }
  return result;
}

unint64_t sub_1000608C8()
{
  unint64_t result;

  result = qword_100260BC8;
  if (!qword_100260BC8)
  {
    result = swift_getWitnessTable(&unk_1001F3ADC, &type metadata for FindingTokenEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260BC8);
  }
  return result;
}

unint64_t sub_100060910()
{
  unint64_t result;

  result = qword_100260BD0;
  if (!qword_100260BD0)
  {
    result = swift_getWitnessTable(&unk_1001F39FC, &type metadata for FindingTokenRevokeEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260BD0);
  }
  return result;
}

unint64_t sub_100060958()
{
  unint64_t result;

  result = qword_100260BD8;
  if (!qword_100260BD8)
  {
    result = swift_getWitnessTable(&unk_1001F3A24, &type metadata for FindingTokenRevokeEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260BD8);
  }
  return result;
}

unint64_t sub_1000609A0()
{
  unint64_t result;

  result = qword_100260BE0;
  if (!qword_100260BE0)
  {
    result = swift_getWitnessTable(&unk_1001F3944, &type metadata for FindingTokenRequestEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260BE0);
  }
  return result;
}

unint64_t sub_1000609E8()
{
  unint64_t result;

  result = qword_100260BE8;
  if (!qword_100260BE8)
  {
    result = swift_getWitnessTable(&unk_1001F396C, &type metadata for FindingTokenRequestEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260BE8);
  }
  return result;
}

uint64_t sub_100060A2C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6449726576726573 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449726576726573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6574614465736162 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574614465736162, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263)
  {
    swift_bridgeObjectRelease(0xEC00000074657263);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6553646572616873, 0xEC00000074657263, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100060BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_100260BF0);
  v1 = sub_100037A9C(v0, (uint64_t)qword_100260BF0);
  if (qword_10025FBA8 != -1)
    swift_once(&qword_10025FBA8, sub_1001CED84);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027B398);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100060C38(uint64_t a1)
{
  return sub_100060C78(a1, qword_10027A9A0, 0x65636E6546, 0xE500000000000000);
}

uint64_t sub_100060C54(uint64_t a1)
{
  return sub_100060C78(a1, qword_10027A9B8, 0xD000000000000013, 0x80000001001FD2D0);
}

uint64_t sub_100060C78(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Table(0);
  sub_100043F10(v7, a2);
  sub_100037A9C(v7, (uint64_t)a2);
  return Table.init(_:database:)(a3, a4, 0, 0);
}

uint64_t sub_100060CDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_connectionPair));
  v3 = v0 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_baseContainerURL;
  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100060D60()
{
  return type metadata accessor for CloudStorageDatabase(0);
}

uint64_t type metadata accessor for CloudStorageDatabase(uint64_t a1)
{
  uint64_t result;

  result = qword_100260C30;
  if (!qword_100260C30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudStorageDatabase);
  return result;
}

uint64_t sub_100060DA4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_1001F3CA0;
    result = type metadata accessor for URL(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      v5[4] = &unk_1001F3CB8;
      v5[5] = (char *)&value witness table for Builtin.Int32 + 64;
      result = swift_updateClassMetadata2(a1, 256, 6, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_100060E58()
{
  return sub_10006286C((unint64_t *)&unk_100260CF8, (uint64_t)&unk_1001F3DC8);
}

uint64_t sub_100060E7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_baseContainerURL;
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100060EC0()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_connectionPair);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_connectionPair, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t sub_100060F08(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_connectionPair);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

void *sub_100060F58(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13findmylocated20CloudStorageDatabase_connectionPair, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_100060FA0()
{
  return sub_1000626AC();
}

uint64_t sub_100060FB4()
{
  URL.appendingPathComponent(_:isDirectory:)(0x6F745364756F6C43, 0xEF62642E65676172, 0);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x80000001001FD2F0, 0);
  return URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x80000001001FD310, 0);
}

void sub_10006105C()
{
  type metadata accessor for CloudStorageDatabase(0);
  Database.startup()();
}

void sub_100061090()
{
  type metadata accessor for CloudStorageDatabase(0);
  Database.databaseAvailable()();
}

void sub_1000610B8(int a1, int a2)
{
  sub_1000610CC(a1, a2);
}

void sub_1000610CC(int a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  void *object;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  int v34;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v31 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F840 != -1)
    swift_once(&qword_10025F840, sub_100060BA8);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100037A9C(v8, (uint64_t)qword_100260BF0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (_DWORD *)swift_slowAlloc(14, -1);
    v30 = v2;
    v13 = v6;
    v14 = v5;
    v15 = v12;
    *v12 = 67109376;
    LODWORD(v32) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 4, v12 + 1, v12 + 2);
    *((_WORD *)v15 + 4) = 1024;
    LODWORD(v32) = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 4, (char *)v15 + 10, (char *)v15 + 14);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Migrate schema %d -> %d", (uint8_t *)v15, 0xEu);
    v16 = v15;
    v5 = v14;
    v6 = v13;
    swift_slowDealloc(v16, -1, -1);
  }

  if (a2 == 1)
  {
    v17._countAndFlagsBits = 0xD00000000000001FLL;
    v17._object = (void *)0x80000001001FD1F0;
    Connection.execute(_:)(v17);
    if (!v18)
    {
      v19._countAndFlagsBits = 0xD000000000000018;
      v19._object = (void *)0x80000001001FD210;
      Connection.execute(_:)(v19);
      if (!v21)
      {
        v22 = __chkstk_darwin(v20);
        v23 = v31;
        v24 = UUID.init()(v22);
        v25 = UUID.uuidString.getter(v24);
        v27 = v26;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v23, v5);
        Connection.savepoint(_:block:)(v25, v27, sub_10006175C, &v30 - 4);
        swift_bridgeObjectRelease(v27);
      }
    }
  }
  else
  {
    v32 = 0;
    v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease(v33);
    v32 = 0xD000000000000013;
    v33 = 0x80000001001FD1D0;
    v34 = a2;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v28._object;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(object);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v32, v33, "findmylocated/CloudStorageDatabase.swift", 40, 2, 101, 0);
    __break(1u);
  }
}

void sub_1000613FC()
{
  type metadata accessor for CloudStorageDatabase(0);
  Database.purge()();
}

void sub_100061430()
{
  type metadata accessor for CloudStorageDatabase(0);
  Database.reset()();
}

void sub_100061464()
{
  type metadata accessor for CloudStorageDatabase(0);
  Database.createIfNecessary()();
}

uint64_t sub_100061498()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for CloudStorageDatabase(0);
  v1 = sub_10006286C(&qword_100260DD0, (uint64_t)&unk_1001F3D28);
  return Database.description.getter(v0, v1);
}

uint64_t sub_1000614E0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to Database.isolatedDescription.getter[1]);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = type metadata accessor for CloudStorageDatabase(0);
  v3 = sub_10006286C(&qword_100260DD0, (uint64_t)&unk_1001F3D28);
  *v1 = v0;
  v1[1] = sub_10006155C;
  return Database.isolatedDescription.getter(v2, v3);
}

uint64_t sub_10006155C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_1000615B4()
{
  return sub_10006286C(&qword_100260D08, (uint64_t)&unk_1001F3CD0);
}

uint64_t sub_1000615D8()
{
  return sub_10006286C(&qword_100260D10, (uint64_t)&unk_1001F3D00);
}

uint64_t sub_1000615FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (qword_10025F848 != -1)
    swift_once(&qword_10025F848, sub_100060C38);
  v1 = type metadata accessor for Table(0);
  sub_100037A9C(v1, (uint64_t)qword_10027A9A0);
  v2 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_100061774, 0);
  v4 = v3;
  v5 = Connection.run(_:_:)(v2);
  if (v0)
    return swift_bridgeObjectRelease(v4);
  v6 = v5;
  swift_bridgeObjectRelease(v4);
  swift_release(v6);
  if (qword_10025F850 != -1)
    swift_once(&qword_10025F850, sub_100060C54);
  sub_100037A9C(v1, (uint64_t)qword_10027A9B8);
  v7 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_100061B64, 0);
  v9 = v8;
  v10 = Connection.run(_:_:)(v7);
  swift_bridgeObjectRelease(v9);
  return swift_release(v10);
}

uint64_t sub_10006175C()
{
  return sub_1000615FC();
}

uint64_t sub_100061774()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;

  v0 = sub_100037A5C(&qword_100260D20);
  __chkstk_darwin(v0);
  v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100037A5C(&qword_100260DB0);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_100260D30);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_100260D38);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F858 != -1)
    swift_once(&qword_10025F858, sub_1000621E4);
  v12 = sub_100037A5C(&qword_100260D40);
  v13 = sub_100037A9C(v12, (uint64_t)qword_10027A9D0);
  v14 = sub_100037A5C(&qword_100260D48);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v11, 1, 1, v14);
  v16 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v8, 1, 1, v12);
  v17 = type metadata accessor for UUID(0);
  v27 = v13;
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)(v13, 1, v11, v8, v17, &protocol witness table for UUID);
  sub_1000087A0((uint64_t)v8, &qword_100260D30);
  sub_1000087A0((uint64_t)v11, &qword_100260D38);
  if (qword_10025F860 != -1)
    swift_once(&qword_10025F860, sub_100062268);
  v18 = sub_100037A5C(&qword_100260DB8);
  v19 = sub_100037A9C(v18, (uint64_t)qword_10027A9E8);
  v15(v11, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v5, 1, 1, v18);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v19, 0, v11, v5, &type metadata for String, &protocol witness table for String);
  sub_1000087A0((uint64_t)v5, &qword_100260DB0);
  sub_1000087A0((uint64_t)v11, &qword_100260D38);
  if (qword_10025F868 != -1)
    swift_once(&qword_10025F868, sub_1000622F4);
  v20 = sub_100037A5C(&qword_100260D68);
  v21 = sub_100037A9C(v20, (uint64_t)qword_10027AA00);
  v15(v11, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v2, 1, 1, v20);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v21, 0, v11, v2, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0((uint64_t)v2, &qword_100260D20);
  sub_1000087A0((uint64_t)v11, &qword_100260D38);
  v22 = sub_100037A5C(&qword_100260D80);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1001F35F0;
  *(_QWORD *)(v23 + 56) = v12;
  *(_QWORD *)(v23 + 64) = sub_10001013C(&qword_100260D88, &qword_100260D40, (uint64_t)&protocol conformance descriptor for Expression<A>);
  v24 = sub_10003276C((_QWORD *)(v23 + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v16 + 16))(v24, v27, v12);
  TableBuilder.unique(_:)(v23);
  return swift_bridgeObjectRelease(v23);
}

uint64_t sub_100061B64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;

  v0 = sub_100037A5C(&qword_100260D18);
  __chkstk_darwin(v0);
  v46 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100037A5C(&qword_100260D20);
  __chkstk_darwin(v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100260D28);
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100037A5C(&qword_100260D30);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100037A5C(&qword_100260D38);
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10025F858 != -1)
    swift_once(&qword_10025F858, sub_1000621E4);
  v14 = sub_100037A5C(&qword_100260D40);
  v15 = sub_100037A9C(v14, (uint64_t)qword_10027A9D0);
  v16 = sub_100037A5C(&qword_100260D48);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(v13, 1, 1, v16);
  v43 = *(_QWORD *)(v14 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
  v45 = v14;
  v18(v10, 1, 1, v14);
  v19 = type metadata accessor for UUID(0);
  v44 = v15;
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)(v15, 1, v13, v10, v19, &protocol witness table for UUID);
  sub_1000087A0((uint64_t)v10, &qword_100260D30);
  sub_1000087A0((uint64_t)v13, &qword_100260D38);
  if (qword_10025F870 != -1)
    swift_once(&qword_10025F870, sub_100062384);
  v20 = sub_100037A5C(&qword_100260D50);
  v21 = sub_100037A9C(v20, (uint64_t)qword_10027AA18);
  v17(v13, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v7, 1, 1, v20);
  v22 = sub_100062668();
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v21, 0, v13, v7, &type metadata for UInt8, v22);
  sub_1000087A0((uint64_t)v7, &qword_100260D28);
  sub_1000087A0((uint64_t)v13, &qword_100260D38);
  if (qword_10025F878 != -1)
    swift_once(&qword_10025F878, sub_100062418);
  v41 = sub_100037A5C(&qword_100260D60);
  v23 = sub_100037A9C(v41, (uint64_t)qword_10027AA30);
  v17(v13, 1, 1, v16);
  v24 = sub_100037A5C(&qword_100260D68);
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v40(v4, 1, 1, v24);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v23, 0, v13, v4, &type metadata for Data, &protocol witness table for Data);
  v42 = v4;
  sub_1000087A0((uint64_t)v4, &qword_100260D20);
  sub_1000087A0((uint64_t)v13, &qword_100260D38);
  if (qword_10025F880 != -1)
    swift_once(&qword_10025F880, sub_1000624AC);
  v39 = sub_100037A5C(&qword_100260D70);
  v25 = sub_100037A9C(v39, (uint64_t)qword_10027AA48);
  v17(v13, 1, 1, v16);
  v26 = sub_100037A5C(&qword_100260D78);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v28 = (uint64_t)v46;
  v27(v46, 1, 1, v26);
  v29 = type metadata accessor for Date(0);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v25, 0, v13, v28, v29, &protocol witness table for Date);
  sub_1000087A0(v28, &qword_100260D18);
  sub_1000087A0((uint64_t)v13, &qword_100260D38);
  if (qword_10025F888 != -1)
    swift_once(&qword_10025F888, sub_100062540);
  v30 = sub_100037A9C(v41, (uint64_t)qword_10027AA60);
  v17(v13, 1, 1, v16);
  v31 = (uint64_t)v42;
  v40(v42, 1, 1, v24);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v30, 0, v13, v31, &type metadata for Data, &protocol witness table for Data);
  sub_1000087A0(v31, &qword_100260D20);
  sub_1000087A0((uint64_t)v13, &qword_100260D38);
  if (qword_10025F890 != -1)
    swift_once(&qword_10025F890, sub_1000625D4);
  v32 = sub_100037A9C(v39, (uint64_t)qword_10027AA78);
  v17(v13, 1, 1, v16);
  v33 = (uint64_t)v46;
  v27(v46, 1, 1, v26);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v32, 0, v13, v33, v29, &protocol witness table for Date);
  sub_1000087A0(v33, &qword_100260D18);
  sub_1000087A0((uint64_t)v13, &qword_100260D38);
  v34 = sub_100037A5C(&qword_100260D80);
  v35 = swift_allocObject(v34, 72, 7);
  *(_OWORD *)(v35 + 16) = xmmword_1001F35F0;
  v36 = v45;
  *(_QWORD *)(v35 + 56) = v45;
  *(_QWORD *)(v35 + 64) = sub_10001013C(&qword_100260D88, &qword_100260D40, (uint64_t)&protocol conformance descriptor for Expression<A>);
  v37 = sub_10003276C((_QWORD *)(v35 + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v43 + 16))(v37, v44, v36);
  TableBuilder.unique(_:)(v35);
  return swift_bridgeObjectRelease(v35);
}

uint64_t sub_1000621E4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D40);
  sub_100043F10(v0, qword_10027A9D0);
  sub_100037A9C(v0, (uint64_t)qword_10027A9D0);
  v1 = sub_10001013C(&qword_100260DA8, &qword_100260D40, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(25705, 0xE200000000000000, v0, v1);
}

uint64_t sub_100062268()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260DB8);
  sub_100043F10(v0, qword_10027A9E8);
  sub_100037A9C(v0, (uint64_t)qword_10027A9E8);
  v1 = sub_10001013C(&qword_100260DC8, &qword_100260DB8, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6C6562616CLL, 0xE500000000000000, v0, v1);
}

uint64_t sub_1000622F4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D68);
  sub_100043F10(v0, qword_10027AA00);
  sub_100037A9C(v0, (uint64_t)qword_10027AA00);
  v1 = sub_10001013C(&qword_100260DC0, &qword_100260D68, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6E6F697461636F6CLL, 0xE800000000000000, v0, v1);
}

uint64_t sub_100062384()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D50);
  sub_100043F10(v0, qword_10027AA18);
  sub_100037A9C(v0, (uint64_t)qword_10027AA18);
  v1 = sub_10001013C(&qword_100260DA0, &qword_100260D50, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000010, 0x80000001001FD2B0, v0, v1);
}

uint64_t sub_100062418()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D60);
  sub_100043F10(v0, qword_10027AA30);
  sub_100037A9C(v0, (uint64_t)qword_10027AA30);
  v1 = sub_10001013C(&qword_100260D98, &qword_100260D60, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000014, 0x80000001001FD290, v0, v1);
}

uint64_t sub_1000624AC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D70);
  sub_100043F10(v0, qword_10027AA48);
  sub_100037A9C(v0, (uint64_t)qword_10027AA48);
  v1 = sub_10001013C(&qword_100260D90, &qword_100260D70, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000010, 0x80000001001FD270, v0, v1);
}

uint64_t sub_100062540()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D60);
  sub_100043F10(v0, qword_10027AA60);
  sub_100037A9C(v0, (uint64_t)qword_10027AA60);
  v1 = sub_10001013C(&qword_100260D98, &qword_100260D60, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000014, 0x80000001001FD250, v0, v1);
}

uint64_t sub_1000625D4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100037A5C(&qword_100260D70);
  sub_100043F10(v0, qword_10027AA78);
  sub_100037A9C(v0, (uint64_t)qword_10027AA78);
  v1 = sub_10001013C(&qword_100260D90, &qword_100260D70, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000010, 0x80000001001FD230, v0, v1);
}

unint64_t sub_100062668()
{
  unint64_t result;

  result = qword_100260D58;
  if (!qword_100260D58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_100260D58);
  }
  return result;
}

uint64_t sub_1000626AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v12[2];

  v2 = type metadata accessor for Keychain.DataProtectionClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static Keychain.data(account:service:)(0x6F6C796D646E6966, 0xEC00000065746163, 0x6F745364756F6C43, 0xEC00000065676172);
  if (!v1)
  {
    if (v7 >> 60 == 15)
    {
      v0 = static Data.randomBytes(count:)(32);
      v9 = v8;
      v12[0] = v0;
      v12[1] = v8;
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Keychain.DataProtectionClass.c(_:), v2);
      sub_10001A484(v0, v9);
      v10 = sub_10003EC14();
      static Keychain.set<A>(data:account:service:dataProtectionClass:)(v12, 0x6F6C796D646E6966, 0xEC00000065746163, 0x6F745364756F6C43, 0xEC00000065676172, v5, &type metadata for Data, v10);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_100037AB4(v0, v9);
    }
    else
    {
      return v6;
    }
  }
  return v0;
}

uint64_t sub_10006286C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CloudStorageDatabase(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000628AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[160];
  _BYTE v19[168];
  char v20;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100260E90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1000646A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InitClientRequestContent.CodingKeys, &type metadata for InitClientRequestContent.CodingKeys, v11, v9, v10);
  sub_10000EF6C(v3, (uint64_t)v19, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v19, (uint64_t)v18, &qword_1002603B0);
  v20 = 0;
  v12 = sub_10003E3B0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v20, v5, &type metadata for ServerContext, v12);
  if (!v2)
  {
    v13 = v3 + *(int *)(type metadata accessor for InitClientRequestContent(0) + 20);
    v18[0] = 1;
    v14 = type metadata accessor for ClientContext(0);
    v15 = sub_100004EA8(&qword_100260488, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3130);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100062A44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t inited;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v29[160];
  _QWORD v30[21];
  char v31;
  char v32;

  v23 = a2;
  v24 = type metadata accessor for ClientContext(0);
  __chkstk_darwin(v24);
  v4 = (uint64_t *)((char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_100037A5C(&qword_100260EA0);
  v5 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  inited = type metadata accessor for InitClientRequestContent(0);
  __chkstk_darwin(inited);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  v27 = a1;
  sub_100036228(a1, v12);
  v13 = sub_1000646A4();
  v25 = v7;
  v14 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InitClientRequestContent.CodingKeys, &type metadata for InitClientRequestContent.CodingKeys, v13, v12, v11);
  if (v14)
    return sub_10002BB90(v27);
  v22 = inited;
  v28 = v5;
  v15 = v24;
  v16 = (uint64_t)v10;
  v32 = 0;
  v17 = sub_10002B9FC();
  v18 = v25;
  v19 = v26;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, &type metadata for ServerContext, &v32, v26, &type metadata for ServerContext, v17);
  sub_10000EF6C((uint64_t)v30, (uint64_t)v29, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v29, v16, &qword_1002603B0);
  v31 = 1;
  v20 = sub_100004EA8(&qword_1002604A0, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3158);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v15, &v31, v19, v15, v20);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v19);
  sub_10003E4F4((uint64_t)v4, v16 + *(int *)(v22 + 20));
  sub_100025C70(v16, v23, type metadata accessor for InitClientRequestContent);
  sub_10002BB90(v27);
  return sub_100024990(v16, type metadata accessor for InitClientRequestContent);
}

uint64_t sub_100062D08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000646E8();
  return RequestContentRepresentable.description.getter(a1, v2);
}

BOOL sub_100062D30(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100062D48@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000648DC(a1, a2);
  *a3 = result;
  return result;
}

void sub_100062D6C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100062D78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000646A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100062DA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000646A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100062DC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100062A44(a1, a2);
}

uint64_t sub_100062DDC(_QWORD *a1)
{
  return sub_1000628AC(a1);
}

uint64_t sub_100062DF0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1[225] = a1;
  v2 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  v1[226] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[227] = v3;
  v1[228] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  inited = type metadata accessor for InitClientRequestContent(0);
  v1[229] = inited;
  v5 = (*(_QWORD *)(*(_QWORD *)(inited - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[230] = swift_task_alloc(v5);
  v1[231] = swift_task_alloc(v5);
  v1[232] = swift_task_alloc(v5);
  v6 = type metadata accessor for Account(0);
  v1[233] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[234] = v7;
  v1[235] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260238) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[236] = swift_task_alloc(v8);
  v1[237] = swift_task_alloc(v8);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[238] = swift_task_alloc(v9);
  v1[239] = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ClientContext(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[240] = swift_task_alloc(v10);
  v1[241] = swift_task_alloc(v10);
  return swift_task_switch(sub_100062F50, 0, 0);
}

uint64_t sub_100062F50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v13;
  _QWORD *v14;

  v1 = v0[239];
  v2 = v0[238];
  v3 = v0[237];
  v4 = v0[236];
  v5 = v0[235];
  v6 = v0[234];
  v7 = v0[233];
  v8 = v0[225];
  v9 = sub_10003D638();
  v0[242] = v9;
  v10 = type metadata accessor for Handle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v1, 1, 1, v10);
  v11 = type metadata accessor for RequestOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v3, 1, 1, v11);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v6 + 16);
  v13 = swift_bridgeObjectRetain(v9);
  v12(v5, v8, v7, v13);
  sub_10000E37C(v3, v4, &qword_100260238);
  sub_10000E37C(v1, v2, &qword_1002650A0);
  v14 = (_QWORD *)swift_task_alloc(dword_100260234);
  v0[243] = v14;
  *v14 = v0;
  v14[1] = sub_100063088;
  return sub_100044CD8(v0[241], v0[235], v0[236], v0[238], (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_100063088()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 1928);
  v3 = *(_QWORD *)(*v0 + 1920);
  v4 = *(_QWORD *)(*v0 + 1912);
  v5 = *(_QWORD *)(*v0 + 1896);
  v8 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1944));
  sub_1000087A0(v5, &qword_100260238);
  sub_1000087A0(v4, &qword_1002650A0);
  sub_100025C70(v2, v3, type metadata accessor for ClientContext);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 1952) = v6;
  *v6 = v8;
  v6[1] = sub_100063140;
  return daemon.getter();
}

uint64_t sub_100063140(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1952);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1960) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1968) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100063228;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100063228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1968);
  v5 = *(_QWORD **)v2;
  v5[247] = a1;
  v5[248] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100063400, 0, 0);
  swift_release(v5[245]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[249] = v7;
  *v7 = v5;
  v7[1] = sub_1000632DC;
  return sub_10000AFC8((uint64_t)(v5 + 110));
}

uint64_t sub_1000632DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1976);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1992));
  return swift_task_switch(sub_100063334, v1, 0);
}

uint64_t sub_100063334()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000EF6C(v0 + 880, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1)
  {
    v1 = v0 + 1472;
    sub_10004922C((_OWORD *)(v0 + 1472));
  }
  else
  {
    v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_10000EF6C(v0 + 112, v0 + 1632, &qword_1002603B0);
    sub_10000EFB0((_QWORD *)(v0 + 1632), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_10000AF28(v0 + 880);
  }
  sub_10000EF6C(v1, v0 + 1312, &qword_1002603B0);
  return swift_task_switch(sub_100063538, 0, 0);
}

uint64_t sub_100063400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 1936);
  v2 = *(_QWORD *)(v0 + 1928);
  v3 = *(_QWORD *)(v0 + 1920);
  v4 = *(_QWORD *)(v0 + 1912);
  v5 = *(_QWORD *)(v0 + 1904);
  v10 = *(_QWORD *)(v0 + 1896);
  v11 = *(_QWORD *)(v0 + 1888);
  v6 = *(_QWORD *)(v0 + 1872);
  v7 = *(_QWORD *)(v0 + 1864);
  v12 = *(_QWORD *)(v0 + 1880);
  v13 = *(_QWORD *)(v0 + 1856);
  v14 = *(_QWORD *)(v0 + 1848);
  v15 = *(_QWORD *)(v0 + 1840);
  v16 = *(_QWORD *)(v0 + 1824);
  v8 = *(_QWORD *)(v0 + 1800);
  swift_release(*(_QWORD *)(v0 + 1960));
  sub_100024990(v3, type metadata accessor for ClientContext);
  swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  sub_100024990(v2, type metadata accessor for ClientContext);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100063538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 1920);
  v2 = *(_QWORD *)(v0 + 1856);
  v3 = *(_QWORD *)(v0 + 1832);
  swift_release(*(_QWORD *)(v0 + 1976));
  sub_10000EF6C(v0 + 1312, v2, &qword_1002603B0);
  sub_10003E4F4(v1, v2 + *(int *)(v3 + 20));
  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v4 = *(_QWORD *)(v0 + 1856);
  v5 = *(_QWORD *)(v0 + 1848);
  v6 = type metadata accessor for Logger(0);
  sub_100037A9C(v6, (uint64_t)qword_10027AD08);
  v7 = sub_100025C70(v4, v5, type metadata accessor for InitClientRequestContent);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 1848);
  if (v10)
  {
    v12 = *(_QWORD *)(v0 + 1840);
    v13 = *(_QWORD *)(v0 + 1832);
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v44 = v15;
    *(_DWORD *)v14 = 136315138;
    sub_100025C70(v11, v12, type metadata accessor for InitClientRequestContent);
    v16 = String.init<A>(describing:)(v12, v13);
    v18 = v17;
    *(_QWORD *)(v0 + 1792) = sub_10002BA84(v16, v17, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1792, v0 + 1800, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    sub_100024990(v11, type metadata accessor for InitClientRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Request content: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    sub_100024990(*(_QWORD *)(v0 + 1848), type metadata accessor for InitClientRequestContent);
  }

  v19 = *(_QWORD *)(v0 + 1984);
  v20 = *(_QWORD *)(v0 + 1856);
  v21 = *(_QWORD *)(v0 + 1832);
  v22 = *(_QWORD **)(v0 + 1824);
  v23 = *(_QWORD *)(v0 + 1816);
  v24 = *(_QWORD *)(v0 + 1808);
  v25 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = JSONEncoder.init()();
  *v22 = sub_100055760;
  v22[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v22, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v24);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v22);
  v27 = sub_100004EA8(&qword_100260DE0, type metadata accessor for InitClientRequestContent, (uint64_t)&unk_1001F3F48);
  v28 = dispatch thunk of JSONEncoder.encode<A>(_:)(v20, v21, v27);
  v30 = v29;
  swift_release(v26);
  if (v19)
  {
    swift_errorRelease(v19);
    v28 = 0;
    v30 = 0xF000000000000000;
  }
  v31 = *(_QWORD *)(v0 + 1936);
  v32 = *(_QWORD *)(v0 + 1928);
  v33 = *(_QWORD *)(v0 + 1920);
  v34 = *(_QWORD *)(v0 + 1912);
  v35 = *(_QWORD *)(v0 + 1904);
  v36 = *(_QWORD *)(v0 + 1896);
  v39 = *(_QWORD *)(v0 + 1888);
  v40 = *(_QWORD *)(v0 + 1880);
  v37 = *(_QWORD *)(v0 + 1856);
  v41 = *(_QWORD *)(v0 + 1848);
  v42 = *(_QWORD *)(v0 + 1840);
  v43 = *(_QWORD *)(v0 + 1824);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1872) + 8))(*(_QWORD *)(v0 + 1800), *(_QWORD *)(v0 + 1864));
  sub_100024990(v37, type metadata accessor for InitClientRequestContent);
  sub_100024990(v32, type metadata accessor for ClientContext);
  swift_bridgeObjectRetain(v31);
  sub_10001F728(v28, v30);
  swift_bridgeObjectRelease_n(v31, 2);
  sub_100037AF8(v28, v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v37);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(v0 + 8))(*(_QWORD *)(v0 + 1936), v28, v30);
}

uint64_t type metadata accessor for InitClientRequestContent(uint64_t a1)
{
  uint64_t result;

  result = qword_100260E40;
  if (!qword_100260E40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InitClientRequestContent);
  return result;
}

uint64_t sub_100063958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;

  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v10);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v11 = *(_QWORD *)(a2 + 136);
      v12 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v13 = *(_QWORD *)(a2 + 152);
      v14 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      sub_10004A1B8((_QWORD *)a1);
      v19 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v19;
      v20 = *(_OWORD *)(a2 + 80);
      v22 = *(_OWORD *)(a2 + 32);
      v21 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v20;
      *(_OWORD *)(a1 + 32) = v22;
      *(_OWORD *)(a1 + 48) = v21;
      v23 = *(_OWORD *)(a2 + 144);
      v25 = *(_OWORD *)(a2 + 96);
      v24 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v23;
      *(_OWORD *)(a1 + 96) = v25;
      *(_OWORD *)(a1 + 112) = v24;
    }
  }
  else if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v16;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v17 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v17;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v18 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v18;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v26;
    v27 = *(_OWORD *)(a2 + 32);
    v28 = *(_OWORD *)(a2 + 48);
    v29 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v29;
    *(_OWORD *)(a1 + 32) = v27;
    *(_OWORD *)(a1 + 48) = v28;
    v30 = *(_OWORD *)(a2 + 96);
    v31 = *(_OWORD *)(a2 + 112);
    v32 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v32;
    *(_OWORD *)(a1 + 96) = v30;
    *(_OWORD *)(a1 + 112) = v31;
  }
  v33 = *(int *)(a3 + 20);
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_QWORD *)v34 = *(_QWORD *)(a2 + v33);
  v36 = *(_QWORD *)(a2 + v33 + 8);
  v37 = *(_QWORD *)(a1 + v33 + 8);
  *(_QWORD *)(v34 + 8) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_BYTE *)(v34 + 16) = *(_BYTE *)(v35 + 16);
  *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
  v38 = *(_QWORD *)(v35 + 32);
  v39 = *(_QWORD *)(v34 + 32);
  *(_QWORD *)(v34 + 32) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  *(_QWORD *)(v34 + 40) = *(_QWORD *)(v35 + 40);
  v40 = *(_QWORD *)(v35 + 48);
  v41 = *(_QWORD *)(v34 + 48);
  *(_QWORD *)(v34 + 48) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *(_BYTE *)(v34 + 56) = *(_BYTE *)(v35 + 56);
  *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
  v42 = *(_QWORD *)(v35 + 72);
  v43 = *(_QWORD *)(v34 + 72);
  *(_QWORD *)(v34 + 72) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *(_QWORD *)(v34 + 80) = *(_QWORD *)(v35 + 80);
  v44 = *(_QWORD *)(v35 + 88);
  v45 = *(_QWORD *)(v34 + 88);
  *(_QWORD *)(v34 + 88) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_QWORD *)(v34 + 96) = *(_QWORD *)(v35 + 96);
  v46 = *(_QWORD *)(v35 + 104);
  v47 = *(_QWORD *)(v34 + 104);
  *(_QWORD *)(v34 + 104) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = (int *)type metadata accessor for ClientContext(0);
  v49 = v48[12];
  v50 = v34 + v49;
  v51 = v35 + v49;
  v52 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v50, v51, v52);
  *(_QWORD *)(v34 + v48[13]) = *(_QWORD *)(v35 + v48[13]);
  v53 = v48[14];
  v54 = (_QWORD *)(v34 + v53);
  v55 = (_QWORD *)(v35 + v53);
  *v54 = *v55;
  v56 = v55[1];
  v57 = v54[1];
  v54[1] = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *(_BYTE *)(v34 + v48[15]) = *(_BYTE *)(v35 + v48[15]);
  v58 = v48[16];
  v59 = (_QWORD *)(v34 + v58);
  v60 = (_QWORD *)(v35 + v58);
  *v59 = *v60;
  v61 = v60[1];
  v62 = v59[1];
  v59[1] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  v63 = v48[17];
  v64 = (_QWORD *)(v34 + v63);
  v65 = (_QWORD *)(v35 + v63);
  *v64 = *v65;
  v66 = v65[1];
  v67 = v64[1];
  v64[1] = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  v68 = v48[18];
  v69 = (_QWORD *)(v34 + v68);
  v70 = (_QWORD *)(v35 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v72 = v69[1];
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v73 = v48[19];
  v74 = (_QWORD *)(v34 + v73);
  v75 = (_QWORD *)(v35 + v73);
  *v74 = *v75;
  v76 = v75[1];
  v77 = v74[1];
  v74[1] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  v78 = v48[20];
  v79 = (_QWORD *)(v34 + v78);
  v80 = (_QWORD *)(v35 + v78);
  *v79 = *v80;
  v81 = v80[1];
  v82 = v79[1];
  v79[1] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  v83 = v48[21];
  v84 = (_QWORD *)(v34 + v83);
  v85 = (_QWORD *)(v35 + v83);
  *v84 = *v85;
  v86 = v85[1];
  v87 = v84[1];
  v84[1] = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  v88 = v48[22];
  v89 = (_QWORD *)(v34 + v88);
  v90 = (_QWORD *)(v35 + v88);
  *v89 = *v90;
  v91 = v90[1];
  v92 = v89[1];
  v89[1] = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v92);
  v93 = v48[23];
  v94 = (_QWORD *)(v34 + v93);
  v95 = (_QWORD *)(v35 + v93);
  *v94 = *v95;
  v96 = v95[1];
  v97 = v94[1];
  v94[1] = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  v98 = v48[24];
  v99 = v34 + v98;
  v100 = (uint64_t *)(v35 + v98);
  v101 = *v100;
  *(_BYTE *)(v99 + 8) = *((_BYTE *)v100 + 8);
  *(_QWORD *)v99 = v101;
  *(_BYTE *)(v34 + v48[25]) = *(_BYTE *)(v35 + v48[25]);
  v102 = v48[26];
  v103 = *(_QWORD *)(v34 + v102);
  v104 = *(_QWORD *)(v35 + v102);
  *(_QWORD *)(v34 + v102) = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v103);
  v105 = v48[27];
  v106 = (_QWORD *)(v34 + v105);
  v107 = (_QWORD *)(v35 + v105);
  *v106 = *v107;
  v108 = v107[1];
  v109 = v106[1];
  v106[1] = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  v110 = v48[28];
  v111 = (_QWORD *)(v34 + v110);
  v112 = (_QWORD *)(v35 + v110);
  *v111 = *v112;
  v113 = v112[1];
  v114 = v111[1];
  v111[1] = v113;
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRelease(v114);
  v115 = v48[29];
  v116 = (_QWORD *)(v34 + v115);
  v117 = (_QWORD *)(v35 + v115);
  *v116 = *v117;
  v118 = v117[1];
  v119 = v116[1];
  v116[1] = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease(v119);
  return a1;
}

_OWORD *sub_100063F24(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[9];
  a1[8] = a2[8];
  a1[9] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  *(_OWORD *)v10 = *(_OWORD *)((char *)a2 + v9);
  v10[16] = *((_BYTE *)a2 + v9 + 16);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)((char *)a2 + v9 + 24);
  *(_OWORD *)(v10 + 40) = *(_OWORD *)((char *)a2 + v9 + 40);
  v10[56] = *((_BYTE *)a2 + v9 + 56);
  v12 = *(_OWORD *)((char *)a2 + v9 + 80);
  *((_OWORD *)v10 + 4) = *(_OWORD *)((char *)a2 + v9 + 64);
  *((_OWORD *)v10 + 5) = v12;
  *((_OWORD *)v10 + 6) = *(_OWORD *)((char *)a2 + v9 + 96);
  v13 = (int *)type metadata accessor for ClientContext(0);
  v14 = v13[12];
  v15 = &v10[v14];
  v16 = &v11[v14];
  v17 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  *(_QWORD *)&v10[v13[13]] = *(_QWORD *)&v11[v13[13]];
  *(_OWORD *)&v10[v13[14]] = *(_OWORD *)&v11[v13[14]];
  v10[v13[15]] = v11[v13[15]];
  *(_OWORD *)&v10[v13[16]] = *(_OWORD *)&v11[v13[16]];
  *(_OWORD *)&v10[v13[17]] = *(_OWORD *)&v11[v13[17]];
  *(_OWORD *)&v10[v13[18]] = *(_OWORD *)&v11[v13[18]];
  *(_OWORD *)&v10[v13[19]] = *(_OWORD *)&v11[v13[19]];
  *(_OWORD *)&v10[v13[20]] = *(_OWORD *)&v11[v13[20]];
  *(_OWORD *)&v10[v13[21]] = *(_OWORD *)&v11[v13[21]];
  *(_OWORD *)&v10[v13[22]] = *(_OWORD *)&v11[v13[22]];
  *(_OWORD *)&v10[v13[23]] = *(_OWORD *)&v11[v13[23]];
  v18 = v13[24];
  v19 = &v10[v18];
  v20 = &v11[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v10[v13[25]] = v11[v13[25]];
  *(_QWORD *)&v10[v13[26]] = *(_QWORD *)&v11[v13[26]];
  *(_OWORD *)&v10[v13[27]] = *(_OWORD *)&v11[v13[27]];
  *(_OWORD *)&v10[v13[28]] = *(_OWORD *)&v11[v13[28]];
  *(_OWORD *)&v10[v13[29]] = *(_OWORD *)&v11[v13[29]];
  return a1;
}

uint64_t sub_1000640D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_5;
  if (!*(_QWORD *)(a2 + 40))
  {
    sub_10004A1B8((_QWORD *)a1);
LABEL_5:
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v17;
    v18 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v18;
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v19;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  swift_bridgeObjectRelease(v14);
LABEL_6:
  v20 = *(int *)(a3 + 20);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20 + 8);
  v24 = *(_QWORD *)(a1 + v20 + 8);
  *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(v21 + 8) = v23;
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  v25 = *(_QWORD *)(v22 + 32);
  v26 = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v21 + 32) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(v22 + 48);
  v28 = *(_QWORD *)(v21 + 48);
  *(_QWORD *)(v21 + 40) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v21 + 48) = v27;
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(v21 + 56) = *(_BYTE *)(v22 + 56);
  v29 = *(_QWORD *)(v22 + 72);
  v30 = *(_QWORD *)(v21 + 72);
  *(_QWORD *)(v21 + 64) = *(_QWORD *)(v22 + 64);
  *(_QWORD *)(v21 + 72) = v29;
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(v22 + 88);
  v32 = *(_QWORD *)(v21 + 88);
  *(_QWORD *)(v21 + 80) = *(_QWORD *)(v22 + 80);
  *(_QWORD *)(v21 + 88) = v31;
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(v22 + 104);
  v34 = *(_QWORD *)(v21 + 104);
  *(_QWORD *)(v21 + 96) = *(_QWORD *)(v22 + 96);
  *(_QWORD *)(v21 + 104) = v33;
  swift_bridgeObjectRelease(v34);
  v35 = (int *)type metadata accessor for ClientContext(0);
  v36 = v35[12];
  v37 = v21 + v36;
  v38 = v22 + v36;
  v39 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  *(_QWORD *)(v21 + v35[13]) = *(_QWORD *)(v22 + v35[13]);
  v40 = v35[14];
  v41 = (_QWORD *)(v21 + v40);
  v42 = (uint64_t *)(v22 + v40);
  v44 = *v42;
  v43 = v42[1];
  v45 = v41[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  *(_BYTE *)(v21 + v35[15]) = *(_BYTE *)(v22 + v35[15]);
  v46 = v35[16];
  v47 = (_QWORD *)(v21 + v46);
  v48 = (uint64_t *)(v22 + v46);
  v50 = *v48;
  v49 = v48[1];
  v51 = v47[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  v52 = v35[17];
  v53 = (_QWORD *)(v21 + v52);
  v54 = (uint64_t *)(v22 + v52);
  v56 = *v54;
  v55 = v54[1];
  v57 = v53[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  v58 = v35[18];
  v59 = (_QWORD *)(v21 + v58);
  v60 = (uint64_t *)(v22 + v58);
  v62 = *v60;
  v61 = v60[1];
  v63 = v59[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  v64 = v35[19];
  v65 = (_QWORD *)(v21 + v64);
  v66 = (uint64_t *)(v22 + v64);
  v68 = *v66;
  v67 = v66[1];
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = v35[20];
  v71 = (_QWORD *)(v21 + v70);
  v72 = (uint64_t *)(v22 + v70);
  v74 = *v72;
  v73 = v72[1];
  v75 = v71[1];
  *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease(v75);
  v76 = v35[21];
  v77 = (_QWORD *)(v21 + v76);
  v78 = (uint64_t *)(v22 + v76);
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  v82 = v35[22];
  v83 = (_QWORD *)(v21 + v82);
  v84 = (uint64_t *)(v22 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  v88 = v35[23];
  v89 = (_QWORD *)(v21 + v88);
  v90 = (uint64_t *)(v22 + v88);
  v92 = *v90;
  v91 = v90[1];
  v93 = v89[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease(v93);
  v94 = v35[24];
  v95 = v21 + v94;
  v96 = v22 + v94;
  *(_QWORD *)v95 = *(_QWORD *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  *(_BYTE *)(v21 + v35[25]) = *(_BYTE *)(v22 + v35[25]);
  v97 = v35[26];
  v98 = *(_QWORD *)(v21 + v97);
  *(_QWORD *)(v21 + v97) = *(_QWORD *)(v22 + v97);
  swift_bridgeObjectRelease(v98);
  v99 = v35[27];
  v100 = (_QWORD *)(v21 + v99);
  v101 = (uint64_t *)(v22 + v99);
  v103 = *v101;
  v102 = v101[1];
  v104 = v100[1];
  *v100 = v103;
  v100[1] = v102;
  swift_bridgeObjectRelease(v104);
  v105 = v35[28];
  v106 = (_QWORD *)(v21 + v105);
  v107 = (uint64_t *)(v22 + v105);
  v109 = *v107;
  v108 = v107[1];
  v110 = v106[1];
  *v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease(v110);
  v111 = v35[29];
  v112 = (_QWORD *)(v21 + v111);
  v113 = (uint64_t *)(v22 + v111);
  v115 = *v113;
  v114 = v113[1];
  v116 = v112[1];
  *v112 = v115;
  v112[1] = v114;
  swift_bridgeObjectRelease(v116);
  return a1;
}

uint64_t sub_100064420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006442C);
}

uint64_t sub_10006442C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for ClientContext(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t sub_1000644B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000644C0);
}

uint64_t sub_1000644C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 40) = a2;
  }
  else
  {
    v7 = type metadata accessor for ClientContext(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100064534(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1001F3E60;
  result = type metadata accessor for ClientContext(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitClientRequest()
{
  return &type metadata for InitClientRequest;
}

unint64_t sub_1000645BC()
{
  unint64_t result;

  result = qword_100260E78;
  if (!qword_100260E78)
  {
    result = swift_getWitnessTable(&unk_1001F3E94, &type metadata for InitClientRequest);
    atomic_store(result, (unint64_t *)&qword_100260E78);
  }
  return result;
}

uint64_t sub_100064600(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004EA8(&qword_100260E80, type metadata accessor for InitClientRequestContent, (uint64_t)&unk_1001F3F04);
  result = sub_100004EA8(&qword_100260DE0, type metadata accessor for InitClientRequestContent, (uint64_t)&unk_1001F3F48);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100064660()
{
  unint64_t result;

  result = qword_100260E88;
  if (!qword_100260E88)
  {
    result = swift_getWitnessTable(&unk_1001F3EBC, &type metadata for InitClientRequest);
    atomic_store(result, (unint64_t *)&qword_100260E88);
  }
  return result;
}

unint64_t sub_1000646A4()
{
  unint64_t result;

  result = qword_100260E98;
  if (!qword_100260E98)
  {
    result = swift_getWitnessTable(&unk_1001F4064, &type metadata for InitClientRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260E98);
  }
  return result;
}

unint64_t sub_1000646E8()
{
  unint64_t result;

  result = qword_100260EA8;
  if (!qword_100260EA8)
  {
    result = swift_getWitnessTable(&unk_1001F3F70, &type metadata for InitClientRequest);
    atomic_store(result, (unint64_t *)&qword_100260EA8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InitClientRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100064778 + 4 * byte_1001F3E35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000647AC + 4 * asc_1001F3E30[v4]))();
}

uint64_t sub_1000647AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000647B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000647BCLL);
  return result;
}

uint64_t sub_1000647C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000647D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000647D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000647DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000647E8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InitClientRequestContent.CodingKeys()
{
  return &type metadata for InitClientRequestContent.CodingKeys;
}

unint64_t sub_100064808()
{
  unint64_t result;

  result = qword_100260EB0;
  if (!qword_100260EB0)
  {
    result = swift_getWitnessTable(&unk_1001F403C, &type metadata for InitClientRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260EB0);
  }
  return result;
}

unint64_t sub_100064850()
{
  unint64_t result;

  result = qword_100260EB8;
  if (!qword_100260EB8)
  {
    result = swift_getWitnessTable(&unk_1001F3FAC, &type metadata for InitClientRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100260EB8);
  }
  return result;
}

unint64_t sub_100064898()
{
  unint64_t result;

  result = qword_100260EC0[0];
  if (!qword_100260EC0[0])
  {
    result = swift_getWitnessTable(&unk_1001F3FD4, &type metadata for InitClientRequestContent.CodingKeys);
    atomic_store(result, qword_100260EC0);
  }
  return result;
}

uint64_t sub_1000648DC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL)
  {
    v5 = 0xED0000747865746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43726576726573, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    swift_bridgeObjectRelease(0xED0000747865746ELL);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100064A0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return swift_task_switch(sub_100064A24, v1, 0);
}

uint64_t sub_100064A24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = v0[4];
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027ADC0);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[4];
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v16 = v15;
    *(_DWORD *)v8 = 136446466;
    v0[2] = sub_10002BA84(0x2873646E65697266, 0xEE00293A68746977, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    type metadata accessor for HandleType(0);
    v9 = swift_bridgeObjectRetain(v7);
    v10 = Array.description.getter(v9);
    v12 = v11;
    swift_bridgeObjectRelease(v7);
    v0[3] = sub_10002BA84(v10, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s with types: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[4], 2);
  }

  v13 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[6] = v13;
  *v13 = v0;
  v13[1] = sub_100064C68;
  return daemon.getter();
}

uint64_t sub_100064C68(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  *(_QWORD *)(*v1 + 56) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100064D50;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100064D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[8];
  v5 = *v2;
  v5[9] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100064E9C, v5[5], 0);
  swift_release(v5[7]);
  v5[10] = a1;
  v7 = (uint64_t **)swift_task_alloc(dword_1002655DC);
  v5[11] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_100064E04;
  return sub_1000196E8(v5[4], 1);
}

uint64_t sub_100064E04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100064E64, v3, 0);
}

uint64_t sub_100064E64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96));
}

uint64_t sub_100064E9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100064ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for ClientOrigin(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v6);
  v3[8] = swift_task_alloc(v6);
  v7 = type metadata accessor for RequestOrigin(0);
  v3[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[10] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v9);
  v3[12] = swift_task_alloc(v9);
  v10 = type metadata accessor for GroupID(0);
  v3[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[14] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v12);
  v3[16] = swift_task_alloc(v12);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260950) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[17] = swift_task_alloc(v13);
  v3[18] = swift_task_alloc(v13);
  v14 = type metadata accessor for Friend(0);
  v3[19] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[20] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[21] = swift_task_alloc(v16);
  v3[22] = swift_task_alloc(v16);
  v3[23] = swift_task_alloc(v16);
  v3[24] = swift_task_alloc(v16);
  v17 = type metadata accessor for FollowerState(0);
  v3[25] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[26] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[27] = swift_task_alloc(v19);
  v3[28] = swift_task_alloc(v19);
  v3[29] = swift_task_alloc(v19);
  v3[30] = swift_task_alloc(v19);
  v20 = type metadata accessor for FollowingState(0);
  v3[31] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v3[32] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[33] = swift_task_alloc(v22);
  v3[34] = swift_task_alloc(v22);
  v3[35] = swift_task_alloc(v22);
  v23 = type metadata accessor for Handle(0);
  v3[36] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v3[37] = v24;
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[38] = swift_task_alloc(v25);
  v3[39] = swift_task_alloc(v25);
  v3[40] = swift_task_alloc(v25);
  v3[41] = swift_task_alloc(v25);
  v26 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v3[42] = v26;
  *v26 = v3;
  v26[1] = sub_100065130;
  return daemon.getter();
}

uint64_t sub_100065130(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 336);
  v5 = *v1;
  *(_QWORD *)(*v1 + 344) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[44] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[45] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[46] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100065228;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100065228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 352);
  v3[47] = a1;
  v3[48] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[4];
    v6 = sub_100066014;
  }
  else
  {
    v7 = v3[4];
    swift_release(v3[43]);
    v6 = sub_1000652A4;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000652A4()
{
  uint64_t v0;
  _QWORD *v1;

  FriendshipCanShareLocationRequest.handle.getter();
  v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 392) = v1;
  *v1 = v0;
  v1[1] = sub_1000652F8;
  return daemon.getter();
}

uint64_t sub_1000652F8(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 392);
  v5 = *v1;
  *(_QWORD *)(*v1 + 400) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[51] = v6;
  v7 = type metadata accessor for CloudStorageService();
  v8 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_1000653A0;
  return ActorServiceDaemon.getService<A>()(v3[45], v7, v3[46], v8);
}

uint64_t sub_1000653A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 400);
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 408);
  v6 = *(_QWORD **)v2;
  v6[52] = a1;
  v6[53] = v1;
  swift_task_dealloc(v4);
  swift_release(v5);
  if (v1)
    return swift_task_switch(sub_100066188, v6[4], 0);
  v8 = (_QWORD *)swift_task_alloc(dword_10026772C);
  v6[54] = v8;
  *v8 = v6;
  v8[1] = sub_100065444;
  return sub_1001D9244();
}

uint64_t sub_100065444(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 432);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_BYTE *)(*(_QWORD *)v1 + 524) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000654A4, v3, 0);
}

uint64_t sub_1000654A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  _QWORD *v10;

  v1 = sub_100037A5C(&qword_100260620);
  *(_QWORD *)(v0 + 440) = v1;
  v2 = type metadata accessor for HandleType(0);
  *(_QWORD *)(v0 + 448) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v0 + 456) = v4;
  LODWORD(v5) = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 520) = v5;
  v5 = v5;
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + v4, v5 | 7);
  *(_QWORD *)(v0 + 464) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1001F35F0;
  v8 = enum case for HandleType.following(_:);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  *(_QWORD *)(v0 + 472) = v9;
  v9(v7 + v6, v8, v2);
  v10 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 480) = v10;
  *v10 = v0;
  v10[1] = sub_10006558C;
  return sub_1000196E8(v7, 1);
}

uint64_t sub_10006558C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 464);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 488) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000655F8, v4, 0);
}

uint64_t sub_1000655F8()
{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 472);
  v2 = *(unsigned __int8 *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 448);
  v4 = (v2 + 32) & ~v2;
  v5 = swift_allocObject(*(_QWORD *)(v0 + 440), v4 + *(_QWORD *)(v0 + 456), v2 | 7);
  *(_QWORD *)(v0 + 496) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_1001F35F0;
  v1(v5 + v4, enum case for HandleType.follower(_:), v3);
  v6 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 504) = v6;
  *v6 = v0;
  v6[1] = sub_1000656A0;
  return sub_1000196E8(v5, 1);
}

uint64_t sub_1000656A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 504);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 512) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100065708, v4, 0);
}

uint64_t sub_100065708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_QWORD, _QWORD, _QWORD);
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t CanShareLocation;
  int v37;
  void (*v38)(uint64_t, _QWORD, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  unsigned int (*v144)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v145)(_QWORD, _QWORD, _QWORD);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v1 = *(_QWORD *)(v0 + 512);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v147 = *(_QWORD *)(v0 + 296);
    v3 = *(_QWORD *)(v0 + 160);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v3 + 16);
    v7 = swift_bridgeObjectRetain(v1);
    while (1)
    {
      v9 = *(_QWORD *)(v0 + 320);
      v8 = *(_QWORD *)(v0 + 328);
      v10 = *(_QWORD *)(v0 + 288);
      v11 = v6(*(_QWORD *)(v0 + 184), v4, *(_QWORD *)(v0 + 152), v7);
      Friend.handle.getter(v11);
      v12 = static Handle.== infix(_:_:)(v9, v8);
      (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v9, v10);
      if ((v12 & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v3 + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 152));
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 512));
        goto LABEL_6;
      }
    }
    v14 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 144);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 512));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v17, v14, v15);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v13(v17, 0, 1, v15);
  }
  else
  {
LABEL_6:
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 160) + 56);
    v13(*(_QWORD *)(v0 + 144), 1, 1, *(_QWORD *)(v0 + 152));
  }
  v18 = *(_QWORD *)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 160);
  v20 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 512));
  v21 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v19 + 48);
  if (v21(v20, 1, v18) != 1)
  {
    v28 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 32))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
    if ((FriendshipCanShareLocationRequest.isFromGroup.getter(v28) & 1) == 0)
    {
      v29 = *(_QWORD *)(v0 + 240);
      v30 = *(_QWORD *)(v0 + 200);
      v31 = *(_QWORD *)(v0 + 208);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 152));
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v31 + 104))(v29, enum case for FollowerState.shared(_:), v30);
      goto LABEL_26;
    }
    v32 = *(_QWORD *)(v0 + 112);
    v33 = *(_QWORD *)(v0 + 64);
    v34 = *(_QWORD *)(v0 + 40);
    v35 = *(_QWORD *)(v0 + 48);
    CanShareLocation = FriendshipCanShareLocationRequest.origin.getter();
    RequestOrigin.origin.getter(CanShareLocation);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 88))(v33, v34);
    v38 = *(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104);
    v39 = *(_QWORD *)(v0 + 128);
    v40 = *(_QWORD *)(v0 + 104);
    v144 = v21;
    if (v37 == enum case for ClientOrigin.messagesApp(_:))
    {
      v38(v39, enum case for GroupID.group(_:), v40);
    }
    else
    {
      v41 = *(_QWORD *)(v0 + 64);
      v42 = *(_QWORD *)(v0 + 40);
      v43 = *(_QWORD *)(v0 + 48);
      v38(v39, enum case for GroupID.oneToOne(_:), v40);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
    }
    v44 = *(_QWORD *)(v0 + 312);
    v45 = *(_QWORD *)(v0 + 288);
    v46 = *(_QWORD *)(v0 + 296);
    v47 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
    v48 = Friend.handle.getter(v47);
    v49 = Handle.expiresByGroupId.getter(v48);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
    v50 = *(_QWORD *)(v0 + 192);
    v51 = *(_QWORD *)(v0 + 152);
    v52 = *(_QWORD *)(v0 + 160);
    v53 = *(_QWORD *)(v0 + 128);
    v54 = *(_QWORD *)(v0 + 104);
    v55 = *(_QWORD *)(v0 + 112);
    if (*(_QWORD *)(v49 + 16))
    {
      sub_1000F4014(*(_QWORD *)(v0 + 128));
      v57 = v56;
      swift_bridgeObjectRelease(v49);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
      if ((v57 & 1) != 0)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 104))(*(_QWORD *)(v0 + 232), enum case for FollowerState.shared(_:), *(_QWORD *)(v0 + 200));
        v21 = v144;
LABEL_25:
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 32))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 200));
        goto LABEL_26;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v49);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
    }
    v21 = v144;
    if (*(_BYTE *)(v0 + 524) == 1)
      v58 = (unsigned int *)&enum case for FollowerState.notShared(_:);
    else
      v58 = (unsigned int *)&enum case for FollowerState.notEligible(_:);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 104))(*(_QWORD *)(v0 + 232), *v58, *(_QWORD *)(v0 + 200));
    goto LABEL_25;
  }
  v22 = *(unsigned __int8 *)(v0 + 524);
  v23 = *(_QWORD *)(v0 + 240);
  v24 = *(_QWORD *)(v0 + 224);
  v25 = *(_QWORD *)(v0 + 200);
  v26 = *(_QWORD *)(v0 + 208);
  sub_1000087A0(*(_QWORD *)(v0 + 144), &qword_100260950);
  v27 = (unsigned int *)&enum case for FollowerState.notShared(_:);
  if (!v22)
    v27 = (unsigned int *)&enum case for FollowerState.notEligible(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v24, *v27, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v23, v24, v25);
LABEL_26:
  v59 = *(_QWORD *)(v0 + 488);
  v60 = *(_QWORD *)(v59 + 16);
  if (v60)
  {
    v142 = v13;
    v145 = v21;
    v148 = *(_QWORD *)(v0 + 296);
    v61 = *(_QWORD *)(v0 + 160);
    v62 = v59 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
    v63 = *(_QWORD *)(v61 + 72);
    v64 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v61 + 16);
    v65 = swift_bridgeObjectRetain(v59);
    while (1)
    {
      v67 = *(_QWORD *)(v0 + 320);
      v66 = *(_QWORD *)(v0 + 328);
      v68 = *(_QWORD *)(v0 + 288);
      v69 = v64(*(_QWORD *)(v0 + 168), v62, *(_QWORD *)(v0 + 152), v65);
      Friend.handle.getter(v69);
      v70 = static Handle.== infix(_:_:)(v67, v66);
      (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v67, v68);
      if ((v70 & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v61 + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
      v62 += v63;
      if (!--v60)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 488));
        v71 = 1;
        goto LABEL_33;
      }
    }
    v73 = *(_QWORD *)(v0 + 160);
    v72 = *(_QWORD *)(v0 + 168);
    v74 = *(_QWORD *)(v0 + 152);
    v75 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 488));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 32))(v75, v72, v74);
    v71 = 0;
LABEL_33:
    v13 = v142;
    v21 = v145;
  }
  else
  {
    v71 = 1;
  }
  v76 = *(_QWORD *)(v0 + 488);
  v77 = *(_QWORD *)(v0 + 152);
  v78 = *(_QWORD *)(v0 + 136);
  v13(v78, v71, 1, v77);
  swift_bridgeObjectRelease(v76);
  if (v21(v78, 1, v77) != 1)
  {
    v83 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 32))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 152));
    v84 = FriendshipCanShareLocationRequest.isFromGroup.getter(v83);
    if (v84 == 2)
    {
      v79 = *(_QWORD *)(v0 + 280);
      v80 = *(_QWORD *)(v0 + 248);
      v81 = *(_QWORD *)(v0 + 256);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152));
      v82 = (unsigned int *)&enum case for FollowingState.shared(_:);
      goto LABEL_38;
    }
    v85 = v84;
    v87 = *(_QWORD *)(v0 + 48);
    v86 = *(_QWORD *)(v0 + 56);
    v88 = *(_QWORD *)(v0 + 40);
    v89 = FriendshipCanShareLocationRequest.origin.getter();
    RequestOrigin.origin.getter(v89);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v87 + 88))(v86, v88) == enum case for ClientOrigin.messagesApp(_:))
    {
      if ((v85 & 1) != 0)
        v90 = (unsigned int *)&enum case for GroupID.group(_:);
      else
        v90 = (unsigned int *)&enum case for GroupID.oneToOne(_:);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(*(_QWORD *)(v0 + 120), *v90, *(_QWORD *)(v0 + 104));
    }
    else
    {
      v92 = *(_QWORD *)(v0 + 48);
      v91 = *(_QWORD *)(v0 + 56);
      v93 = *(_QWORD *)(v0 + 40);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(*(_QWORD *)(v0 + 120), enum case for GroupID.oneToOne(_:), *(_QWORD *)(v0 + 104));
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
    }
    v95 = *(_QWORD *)(v0 + 296);
    v94 = *(_QWORD *)(v0 + 304);
    v96 = *(_QWORD *)(v0 + 288);
    v97 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    v98 = Friend.handle.getter(v97);
    v99 = Handle.expiresByGroupId.getter(v98);
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v96);
    v100 = *(_QWORD *)(v0 + 176);
    v101 = *(_QWORD *)(v0 + 152);
    v102 = *(_QWORD *)(v0 + 160);
    v104 = *(_QWORD *)(v0 + 112);
    v103 = *(_QWORD *)(v0 + 120);
    v105 = *(_QWORD *)(v0 + 104);
    if (*(_QWORD *)(v99 + 16))
    {
      sub_1000F4014(*(_QWORD *)(v0 + 120));
      v107 = v106;
      swift_bridgeObjectRelease(v99);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v103, v105);
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v100, v101);
      if ((v107 & 1) != 0)
      {
        v108 = (unsigned int *)&enum case for FollowingState.shared(_:);
LABEL_50:
        v109 = *(_QWORD *)(v0 + 272);
        v110 = *(_QWORD *)(v0 + 280);
        v111 = *(_QWORD *)(v0 + 248);
        v112 = *(_QWORD *)(v0 + 256);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v112 + 104))(v109, *v108, v111);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 32))(v110, v109, v111);
        goto LABEL_51;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v99);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v103, v105);
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v100, v101);
    }
    v108 = (unsigned int *)&enum case for FollowingState.notShared(_:);
    goto LABEL_50;
  }
  v79 = *(_QWORD *)(v0 + 280);
  v80 = *(_QWORD *)(v0 + 248);
  v81 = *(_QWORD *)(v0 + 256);
  sub_1000087A0(*(_QWORD *)(v0 + 136), &qword_100260950);
  v82 = (unsigned int *)&enum case for FollowingState.notShared(_:);
LABEL_38:
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v81 + 104))(v79, *v82, v80);
LABEL_51:
  v122 = *(_QWORD *)(v0 + 376);
  v123 = *(_QWORD *)(v0 + 416);
  v126 = *(_QWORD *)(v0 + 328);
  v127 = *(_QWORD *)(v0 + 320);
  v128 = *(_QWORD *)(v0 + 312);
  v129 = *(_QWORD *)(v0 + 304);
  v113 = *(_QWORD *)(v0 + 280);
  v124 = *(_QWORD *)(v0 + 296);
  v125 = *(_QWORD *)(v0 + 288);
  v114 = *(_QWORD *)(v0 + 264);
  v116 = *(_QWORD *)(v0 + 248);
  v115 = *(_QWORD *)(v0 + 256);
  v117 = *(_QWORD *)(v0 + 240);
  v130 = *(_QWORD *)(v0 + 272);
  v131 = *(_QWORD *)(v0 + 232);
  v118 = *(_QWORD *)(v0 + 216);
  v120 = *(_QWORD *)(v0 + 200);
  v119 = *(_QWORD *)(v0 + 208);
  v132 = *(_QWORD *)(v0 + 224);
  v133 = *(_QWORD *)(v0 + 192);
  v134 = *(_QWORD *)(v0 + 184);
  v135 = *(_QWORD *)(v0 + 176);
  v136 = *(_QWORD *)(v0 + 168);
  v137 = *(_QWORD *)(v0 + 144);
  v138 = *(_QWORD *)(v0 + 136);
  v139 = *(_QWORD *)(v0 + 128);
  v140 = *(_QWORD *)(v0 + 120);
  v141 = *(_QWORD *)(v0 + 96);
  v143 = *(_QWORD *)(v0 + 88);
  v146 = *(_QWORD *)(v0 + 64);
  v149 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16))(v118, v117, v120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 16))(v114, v113, v116);
  FriendshipState.init(followerState:followingState:)(v118, v114);
  swift_release(v122);
  swift_release(v123);
  (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v117, v120);
  (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v113, v116);
  (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v126, v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v113);
  swift_task_dealloc(v130);
  swift_task_dealloc(v114);
  swift_task_dealloc(v117);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  swift_task_dealloc(v118);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v135);
  swift_task_dealloc(v136);
  swift_task_dealloc(v137);
  swift_task_dealloc(v138);
  swift_task_dealloc(v139);
  swift_task_dealloc(v140);
  swift_task_dealloc(v141);
  swift_task_dealloc(v143);
  swift_task_dealloc(v146);
  swift_task_dealloc(v149);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100066014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  swift_release(*(_QWORD *)(v0 + 344));
  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 224);
  v11 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 192);
  v13 = *(_QWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 168);
  v16 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 136);
  v18 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 120);
  v20 = *(_QWORD *)(v0 + 96);
  v21 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100066188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 296);
  swift_release(*(_QWORD *)(v0 + 376));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 264);
  v11 = *(_QWORD *)(v0 + 232);
  v10 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 224);
  v14 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 88);
  v25 = *(_QWORD *)(v0 + 64);
  v26 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100066314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for Handle(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[9] = swift_task_alloc(v8);
  v5[10] = swift_task_alloc(v8);
  v9 = sub_100037A5C(&qword_100260950);
  v5[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Friend(0);
  v5[12] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[13] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[14] = swift_task_alloc(v12);
  v5[15] = swift_task_alloc(v12);
  v13 = sub_100037A5C(&qword_100261048);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for GroupID(0);
  v5[17] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v5[18] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[19] = swift_task_alloc(v16);
  v5[20] = swift_task_alloc(v16);
  v17 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v5[21] = v17;
  *v17 = v5;
  v17[1] = sub_100066458;
  return daemon.getter();
}

uint64_t sub_100066458(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 168);
  v5 = *v1;
  *(_QWORD *)(*v1 + 176) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 184) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100066540;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100066540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 184);
  v3[24] = a1;
  v3[25] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[6];
    v6 = sub_100066B90;
  }
  else
  {
    v7 = v3[6];
    swift_release(v3[22]);
    v6 = sub_1000665BC;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000665BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0[5];
  if (v1)
  {
    v2 = v0[4];
    v3 = v0[5];
  }
  else
  {
    v5 = v0[18];
    v4 = v0[19];
    v6 = v0[17];
    v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for GroupID.oneToOne(_:), v6);
    v2 = GroupID.rawValue.getter(v7);
    v3 = v8;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v1 = 0;
  }
  v9 = v0[17];
  v10 = v0[18];
  v11 = v0[16];
  v12 = swift_bridgeObjectRetain(v1);
  GroupID.init(rawValue:)(v2, v3, v12);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9);
  v14 = v0[20];
  v15 = v0[17];
  v16 = v0[18];
  v17 = v0[16];
  if (v13 == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v14, enum case for GroupID.defaultId(_:), v15);
    sub_1000087A0(v17, &qword_100261048);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 32))(v14, v0[16], v15);
  }
  return swift_task_switch(sub_1000666D8, v0[24], 0);
}

uint64_t sub_1000666D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 208) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.follower(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 216) = v7;
  *v7 = v0;
  v7[1] = sub_1000667A8;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_1000667A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100066810, v4, 0);
}

uint64_t sub_100066810()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v1 = v0[28];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[13];
    v65 = v0[8];
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v3 + 16);
    v7 = swift_bridgeObjectRetain(v1);
    while (1)
    {
      v8 = v0[10];
      v9 = v0[7];
      v10 = v0[3];
      v11 = v6(v0[14], v4, v0[12], v7);
      Friend.handle.getter(v11);
      v12 = static Handle.== infix(_:_:)(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v8, v9);
      if ((v12 & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v3 + 8))(v0[14], v0[12]);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease(v0[28]);
        goto LABEL_6;
      }
    }
    v15 = v0[13];
    v14 = v0[14];
    v17 = v0[11];
    v16 = v0[12];
    swift_bridgeObjectRelease(v0[28]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v17, v14, v16);
    v13 = 0;
  }
  else
  {
LABEL_6:
    v13 = 1;
  }
  v18 = v0[28];
  v19 = v0[12];
  v20 = v0[13];
  v21 = v0[11];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v21, v13, 1, v19);
  swift_bridgeObjectRelease(v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19) == 1)
  {
    v22 = v0[24];
    v23 = v0[20];
    v24 = v0[17];
    v25 = v0[18];
    sub_1000087A0(v0[11], &qword_100260950);
    v26 = sub_10006F520();
    v27 = swift_allocError(&type metadata for FriendshipServiceError, v26, 0, 0);
    *v28 = 14;
    swift_willThrow(v27);
    swift_release(v22);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
    v29 = v0[19];
    v31 = v0[15];
    v30 = v0[16];
    v32 = v0[14];
    v34 = v0[10];
    v33 = v0[11];
    v35 = v0[9];
    swift_task_dealloc(v0[20]);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    v36 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v38 = v0[8];
    v37 = v0[9];
    v39 = v0[7];
    v40 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[13] + 32))(v0[15], v0[11], v0[12]);
    v41 = Friend.handle.getter(v40);
    v42 = Handle.expiresByGroupId.getter(v41);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    v66 = v42;
    if (*(_QWORD *)(v42 + 16) && (v43 = sub_1000F4014(v0[20]), (v44 & 1) != 0))
    {
      v45 = v43;
      v46 = v0[2];
      v47 = *(_QWORD *)(v42 + 56);
      v48 = type metadata accessor for Date(0);
      v49 = *(_QWORD *)(v48 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v49 + 16))(v46, v47 + *(_QWORD *)(v49 + 72) * v45, v48);
      v50 = 0;
    }
    else
    {
      v48 = type metadata accessor for Date(0);
      v49 = *(_QWORD *)(v48 - 8);
      v50 = 1;
    }
    v51 = v0[24];
    v52 = v0[20];
    v54 = v0[17];
    v53 = v0[18];
    v55 = v0[15];
    v59 = v0[19];
    v60 = v0[16];
    v56 = v0[13];
    v57 = v0[12];
    v61 = v0[14];
    v62 = v0[11];
    v63 = v0[10];
    v64 = v0[9];
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v49 + 56))(v0[2], v50, 1, v48);
    swift_bridgeObjectRelease(v66);
    swift_release(v51);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
    swift_task_dealloc(v52);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v55);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    v36 = (uint64_t (*)(void))v0[1];
  }
  return v36();
}

uint64_t sub_100066B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 176));
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100066C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for FriendshipRequestResult(0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100066C90, v2, 0);
}

uint64_t sub_100066C90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v0[12] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[5] = sub_10002BA84(0xD000000000000017, 0x80000001001FD450, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending %{public}s to server", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[13] = v7;
  *v7 = v0;
  v7[1] = sub_100066E2C;
  return daemon.getter();
}

uint64_t sub_100066E2C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 104);
  v5 = *v1;
  *(_QWORD *)(*v1 + 112) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[15] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[16] = v7;
  v8 = type metadata accessor for CloudStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[17] = v9;
  v10 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_100066F24;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100066F24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 120);
  v5 = *(_QWORD **)v2;
  v5[18] = a1;
  v5[19] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000675D4, v5[8], 0);
  swift_release(v5[14]);
  v7 = (_QWORD *)swift_task_alloc(dword_10026772C);
  v5[20] = v7;
  *v7 = v5;
  v7[1] = sub_100066FC8;
  return sub_1001D9244();
}

uint64_t sub_100066FC8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_BYTE *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100067028, v3, 0);
}

uint64_t sub_100067028(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  if (*(_BYTE *)(v1 + 224) == 1)
  {
    v2 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v1 + 168) = v2;
    *v2 = v1;
    v2[1] = sub_1000671F8;
    return daemon.getter();
  }
  else
  {
    v4 = Logger.logObject.getter(a1);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v12 = v7;
      *(_DWORD *)v6 = 136446210;
      *(_QWORD *)(v1 + 16) = sub_10002BA84(0xD000000000000017, 0x80000001001FD450, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v6 + 4, v6 + 12);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Manatee is not available!", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    v8 = *(_QWORD *)(v1 + 144);
    v9 = sub_10006F520();
    v10 = swift_allocError(&type metadata for FriendshipServiceError, v9, 0, 0);
    *v11 = 15;
    swift_willThrow(v10);
    swift_release(v8);
    swift_task_dealloc(*(_QWORD *)(v1 + 88));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000671F8(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 168);
  v5 = *v1;
  *(_QWORD *)(*v1 + 176) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[23] = v6;
  v7 = type metadata accessor for CommandManager(0);
  v8 = sub_100004EA8(&qword_1002605E0, type metadata accessor for CommandManager, (uint64_t)&unk_1001F4950);
  *v6 = v5;
  v6[1] = sub_1000672A0;
  return ActorServiceDaemon.getService<A>()(v3[16], v7, v3[17], v8);
}

uint64_t sub_1000672A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[23];
  v5 = *v2;
  v5[24] = a1;
  v5[25] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100067610, v5[8], 0);
  swift_release(v5[22]);
  v7 = (uint64_t **)swift_task_alloc(dword_1002662AC);
  v5[26] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_10006734C;
  return sub_100191284(v5[6], v5[7]);
}

uint64_t sub_10006734C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100067658;
  else
    v4 = sub_1000673B0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), 0);
}

uint64_t sub_1000673B0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 16))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 72));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v17 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 88);
    v15 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 72);
    v6 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v19 = v16;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(0xD000000000000017, 0x80000001001FD450, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2080;
    v7 = sub_100004EA8(&qword_100261030, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipRequestResult, (uint64_t)&protocol conformance descriptor for FriendshipRequestResult);
    v8 = dispatch thunk of CustomStringConvertible.description.getter(v5, v7);
    v10 = v9;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v10);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s result %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v6, -1, -1);
    swift_release(v17);
    v11 = v18;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 192);
    v13 = *(_QWORD *)(v0 + 144);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    swift_release(v12);
    v11 = v13;
  }
  swift_release(v11);

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000675D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067610()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 176));
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067658()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000676A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v4 = type metadata accessor for FriendshipRequestResult(0);
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[9] = v5;
  v3[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100067704, v2, 0);
}

uint64_t sub_100067704()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v0[11] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[4] = sub_10002BA84(0xD000000000000018, 0x80000001001FD430, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending %{public}s to server", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_1000678A0;
  return daemon.getter();
}

uint64_t sub_1000678A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 96);
  v5 = *v1;
  *(_QWORD *)(*v1 + 104) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 112) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for CommandManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002605E0, type metadata accessor for CommandManager, (uint64_t)&unk_1001F4950);
  *v6 = v5;
  v6[1] = sub_100067988;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100067988(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[14];
  v5 = *v2;
  v5[15] = a1;
  v5[16] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100067CA4, v5[7], 0);
  swift_release(v5[13]);
  v7 = (uint64_t **)swift_task_alloc(dword_1002662AC);
  v5[17] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_100067A34;
  return sub_100191284(v5[5], v5[6]);
}

uint64_t sub_100067A34()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100067CE4;
  else
    v4 = sub_100067A98;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), 0);
}

uint64_t sub_100067A98()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 16))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 64));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v16 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 80);
    v14 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 64);
    v6 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v17 = v15;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000018, 0x80000001001FD430, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2080;
    v7 = sub_100004EA8(&qword_100261030, (uint64_t (*)(uint64_t))&type metadata accessor for FriendshipRequestResult, (uint64_t)&protocol conformance descriptor for FriendshipRequestResult);
    v8 = dispatch thunk of CustomStringConvertible.description.getter(v5, v7);
    v10 = v9;
    *(_QWORD *)(v0 + 24) = sub_10002BA84(v8, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v10);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s result %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v6, -1, -1);
    v11 = v16;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 120);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    v11 = v12;
  }
  swift_release(v11);

  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067CA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067CE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067D24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch(sub_100067D40, v2, 0);
}

uint64_t sub_100067D40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v0[7] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[3] = sub_10002BA84(0xD00000000000001ALL, 0x80000001001FD470, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending %{public}s to server", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[8] = v7;
  *v7 = v0;
  v7[1] = sub_100067EDC;
  return daemon.getter();
}

uint64_t sub_100067EDC(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(*v1 + 72) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[10] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[11] = v7;
  v8 = type metadata accessor for CloudStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[12] = v9;
  v10 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_100067FD4;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100067FD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v5 = *(_QWORD **)v2;
  v5[13] = a1;
  v5[14] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100068498, v5[6], 0);
  swift_release(v5[9]);
  v7 = (_QWORD *)swift_task_alloc(dword_10026772C);
  v5[15] = v7;
  *v7 = v5;
  v7[1] = sub_100068078;
  return sub_1001D9244();
}

uint64_t sub_100068078(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_BYTE *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000680D8, v3, 0);
}

uint64_t sub_1000680D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  if (*(_BYTE *)(v1 + 184) == 1)
  {
    v2 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v1 + 128) = v2;
    *v2 = v1;
    v2[1] = sub_1000682A0;
    return daemon.getter();
  }
  else
  {
    v4 = Logger.logObject.getter(a1);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v12 = v7;
      *(_DWORD *)v6 = 136446210;
      *(_QWORD *)(v1 + 16) = sub_10002BA84(0xD00000000000001ALL, 0x80000001001FD470, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v6 + 4, v6 + 12);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Manatee is not available!", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    v8 = *(_QWORD *)(v1 + 104);
    v9 = sub_10006F520();
    v10 = swift_allocError(&type metadata for FriendshipServiceError, v9, 0, 0);
    *v11 = 15;
    swift_willThrow(v10);
    swift_release(v8);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000682A0(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 128);
  v5 = *v1;
  *(_QWORD *)(*v1 + 136) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[18] = v6;
  v7 = type metadata accessor for CommandManager(0);
  v8 = sub_100004EA8(&qword_1002605E0, type metadata accessor for CommandManager, (uint64_t)&unk_1001F4950);
  *v6 = v5;
  v6[1] = sub_100068348;
  return ActorServiceDaemon.getService<A>()(v3[11], v7, v3[12], v8);
}

uint64_t sub_100068348(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[18];
  v5 = *v2;
  v5[19] = a1;
  v5[20] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000684CC, v5[6], 0);
  swift_release(v5[17]);
  v7 = (uint64_t **)swift_task_alloc(dword_1002662D4);
  v5[21] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_1000683F4;
  return sub_100193438(v5[4], v5[5]);
}

uint64_t sub_1000683F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10006850C;
  else
    v4 = sub_100068458;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 48), 0);
}

uint64_t sub_100068458()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100068498()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000684CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006850C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006854C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch(sub_100068568, v2, 0);
}

uint64_t sub_100068568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000019, 0x80000001001FD410, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending %{public}s to server", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 48) = v7;
  *v7 = v0;
  v7[1] = sub_100068700;
  return daemon.getter();
}

uint64_t sub_100068700(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  *(_QWORD *)(*v1 + 56) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for CommandManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_1002605E0, type metadata accessor for CommandManager, (uint64_t)&unk_1001F4950);
  *v6 = v5;
  v6[1] = sub_1000687E8;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_1000687E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[8];
  v5 = *v2;
  v5[9] = a1;
  v5[10] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000688F8, v5[5], 0);
  swift_release(v5[7]);
  v7 = (uint64_t **)swift_task_alloc(dword_10026628C);
  v5[11] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_100068894;
  return sub_1001978B8(v5[3], v5[4]);
}

uint64_t sub_100068894()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10006892C;
  else
    v4 = sub_10004F778;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), 0);
}

uint64_t sub_1000688F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006892C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100068960(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for Handle(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  v2[12] = swift_task_alloc(v5);
  v6 = sub_100037A5C(&qword_100260950);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Friend(0);
  v2[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[15] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v9);
  v2[17] = swift_task_alloc(v9);
  return swift_task_switch(sub_100068A38, v1, 0);
}

uint64_t sub_100068A38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v0[18] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[5] = sub_10002BA84(0xD000000000000015, 0x80000001001FD3F0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[19] = v7;
  *v7 = v0;
  v7[1] = sub_100068BD4;
  return daemon.getter();
}

uint64_t sub_100068BD4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 152);
  v5 = *v1;
  *(_QWORD *)(*v1 + 160) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[21] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[22] = v7;
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[23] = v9;
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100068CCC;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100068CCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 168);
  v4[24] = a1;
  v4[25] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[7];
    v7 = sub_100069518;
  }
  else
  {
    swift_release(v4[20]);
    v7 = sub_100068D48;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100068D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 208) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 216) = v7;
  *v7 = v0;
  v7[1] = sub_100068E18;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_100068E18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100068E80, v4, 0);
}

uint64_t sub_100068E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 120);
    v49 = *(_QWORD *)(v0 + 72);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v3 + 16);
    v7 = swift_bridgeObjectRetain(v1);
    while (1)
    {
      v8 = *(_QWORD *)(v0 + 96);
      v9 = *(_QWORD *)(v0 + 64);
      v10 = *(_QWORD *)(v0 + 48);
      v11 = v6(*(_QWORD *)(v0 + 128), v4, *(_QWORD *)(v0 + 112), v7);
      Friend.handle.getter(v11);
      v12 = static Handle.== infix(_:_:)(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v8, v9);
      if ((v12 & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v3 + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 224));
        goto LABEL_6;
      }
    }
    v15 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 224));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v17, v14, v16);
    v13 = 0;
  }
  else
  {
LABEL_6:
    v13 = 1;
  }
  v18 = *(_QWORD *)(v0 + 224);
  v19 = *(_QWORD *)(v0 + 112);
  v20 = *(_QWORD *)(v0 + 120);
  v21 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v21, v13, 1, v19);
  swift_bridgeObjectRelease(v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19) == 1)
  {
    v23 = *(_QWORD *)(v0 + 72);
    v22 = *(_QWORD *)(v0 + 80);
    v24 = *(_QWORD *)(v0 + 64);
    v25 = *(_QWORD *)(v0 + 48);
    sub_1000087A0(*(_QWORD *)(v0 + 104), &qword_100260950);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v25, v24);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    v29 = os_log_type_enabled(v27, v28);
    v31 = *(_QWORD *)(v0 + 72);
    v30 = *(_QWORD *)(v0 + 80);
    if (v29)
    {
      v50 = *(_QWORD *)(v0 + 64);
      v32 = swift_slowAlloc(32, -1);
      v33 = swift_slowAlloc(64, -1);
      v51[0] = v33;
      *(_DWORD *)v32 = 136446723;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000015, 0x80000001001FD3F0, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2160;
      *(_QWORD *)(v0 + 24) = 1752392040;
      v34 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v32 + 14, v32 + 22);
      *(_WORD *)(v32 + 22) = 2081;
      v35 = Handle.identifier.getter(v34);
      v37 = v36;
      *(_QWORD *)(v0 + 32) = sub_10002BA84(v35, v36, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v32 + 24, v32 + 32);
      swift_bridgeObjectRelease(v37);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v50);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s missing following serverID for %{private,mask.hash}s!", (uint8_t *)v32, 0x20u);
      swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v31 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    }

    v40 = *(_QWORD *)(v0 + 192);
    v41 = sub_10006F520();
    v42 = swift_allocError(&type metadata for FriendshipServiceError, v41, 0, 0);
    *v43 = 7;
    swift_willThrow(v42);
    swift_release(v40);
    v44 = *(_QWORD *)(v0 + 128);
    v46 = *(_QWORD *)(v0 + 96);
    v45 = *(_QWORD *)(v0 + 104);
    v48 = *(_QWORD *)(v0 + 80);
    v47 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    v38 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
    *(_QWORD *)(v0 + 232) = v38;
    *v38 = v0;
    v38[1] = sub_100069274;
    return daemon.getter();
  }
}

uint64_t sub_100069274(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 232);
  v5 = *v1;
  *(_QWORD *)(*v1 + 240) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[31] = v6;
  v7 = type metadata accessor for NIRangingService(0);
  v8 = sub_100004EA8(&qword_100260FE0, type metadata accessor for NIRangingService, (uint64_t)&unk_1001F6C08);
  *v6 = v5;
  v6[1] = sub_10006931C;
  return ActorServiceDaemon.getService<A>()(v3[22], v7, v3[23], v8);
}

uint64_t sub_10006931C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 248);
  v3[32] = a1;
  v3[33] = v1;
  swift_task_dealloc(v4);
  v5 = v3[30];
  v6 = v3[7];
  swift_release(v5);
  if (v1)
    v7 = sub_100069594;
  else
    v7 = sub_100069394;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100069394(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  Friend.handle.getter(a1);
  v2 = (_QWORD *)swift_task_alloc(dword_100264214);
  *(_QWORD *)(v1 + 272) = v2;
  *v2 = v1;
  v2[1] = sub_1000693F0;
  return sub_100129CCC(*(_QWORD *)(v1 + 88));
}

uint64_t sub_1000693F0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v3);
  v4 = v2[11];
  v5 = v2[8];
  v6 = v2[9];
  v7 = v2[7];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  if (v0)
    v8 = sub_100069628;
  else
    v8 = sub_100069468;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_100069468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 256));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100069518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 160));
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100069594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 192));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100069628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 256));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000696C8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch(sub_1000696E0, v0, 0);
}

uint64_t sub_1000696E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000013, 0x80000001001FD3D0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 32) = v7;
  *v7 = v0;
  v7[1] = sub_100069878;
  return daemon.getter();
}

uint64_t sub_100069878(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 32);
  v5 = *v1;
  *(_QWORD *)(*v1 + 40) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 48) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for NIRangingService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260FE0, type metadata accessor for NIRangingService, (uint64_t)&unk_1001F6C08);
  *v6 = v5;
  v6[1] = sub_100069960;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100069960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  v5 = *(_QWORD **)v2;
  v5[7] = a1;
  v5[8] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10006F70C, v5[3], 0);
  swift_release(v5[5]);
  v7 = (_QWORD *)swift_task_alloc(dword_10026421C);
  v5[9] = v7;
  *v7 = v5;
  v7[1] = sub_100069A04;
  return sub_10012A9FC();
}

uint64_t sub_100069A04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10006F710;
  else
    v4 = sub_10006F6FC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 24), 0);
}

uint64_t sub_100069A68()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch(sub_100069A80, v0, 0);
}

uint64_t sub_100069A80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0x676E6152706F7473, 0xED00002928676E69, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 32) = v7;
  *v7 = v0;
  v7[1] = sub_100069C20;
  return daemon.getter();
}

uint64_t sub_100069C20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 32);
  v5 = *v1;
  *(_QWORD *)(*v1 + 40) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 48) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for NIRangingService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260FE0, type metadata accessor for NIRangingService, (uint64_t)&unk_1001F6C08);
  *v6 = v5;
  v6[1] = sub_100069D08;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100069D08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  v5 = *(_QWORD **)v2;
  v5[7] = a1;
  v5[8] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100069E44, v5[3], 0);
  swift_release(v5[5]);
  v7 = (_QWORD *)swift_task_alloc(dword_10026422C);
  v5[9] = v7;
  *v7 = v5;
  v7[1] = sub_100069DAC;
  return sub_10012C630();
}

uint64_t sub_100069DAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000688F8;
  else
    v4 = sub_100069E10;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 24), 0);
}

uint64_t sub_100069E10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100069E44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100069E78()
{
  uint64_t v0;

  return swift_task_switch(sub_100069E8C, v0, 0);
}

uint64_t sub_100069E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v8;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v8 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD00000000000001ALL, 0x80000001001FD330, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s NOT stopping config ranging session. App needs to stop calling this", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A008()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10006A028, v0, 0);
}

uint64_t sub_10006A028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000014, 0x80000001001FD3B0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 40) = v7;
  *v7 = v0;
  v7[1] = sub_10006A1C0;
  return daemon.getter();
}

uint64_t sub_10006A1C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 40);
  v5 = *v1;
  *(_QWORD *)(*v1 + 48) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 56) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for CloudStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_10006A2A8;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10006A2A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 56);
  v3[8] = a1;
  v3[9] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[3];
    v6 = sub_10006A5D4;
  }
  else
  {
    v7 = v3[3];
    swift_release(v3[6]);
    v6 = sub_10006A324;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10006A324()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[8];
  v2 = v0[4];
  v3 = swift_allocObject(&unk_100250B40, 32, 7);
  v0[10] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v1);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[11] = v5;
  *v5 = v0;
  v5[1] = sub_10006A3D0;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_10006A3D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = sub_10006A608;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 24);
    swift_release(*(_QWORD *)(v2 + 80));
    v5 = sub_10006A444;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10006A444()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100267834);
  *(_QWORD *)(v0 + 104) = v1;
  *v1 = v0;
  v1[1] = sub_10006A4A4;
  return sub_1001D7A20(0xD00000000000001ELL, 0x80000001001FD390);
}

uint64_t sub_10006A4A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v3 = *(_QWORD **)v1;
  v3[14] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10006A644, v3[3], 0);
  v5 = (_QWORD *)swift_task_alloc(dword_10026782C);
  v3[15] = v5;
  *v5 = v3;
  v5[1] = sub_10006A53C;
  return sub_1001D7C34((uint64_t)&off_10024ED68);
}

uint64_t sub_10006A53C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10006A678;
  else
    v4 = sub_10006A5A0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 24), 0);
}

uint64_t sub_10006A5A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A5D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A608()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A644()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A678()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A6AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a2;
  v3 = type metadata accessor for CloudKitStorage.State(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006A70C, 0, 0);
}

uint64_t sub_10006A70C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v0[8] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[3] = sub_10002BA84(0xD000000000000014, 0x80000001001FD3B0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s Waiting for CloudKit to be available", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return swift_task_switch(sub_10006A8B0, v7, 0);
}

uint64_t sub_10006A8B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                      + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                  + 1));
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_10006A918;
  return v3(*(_QWORD *)(v0 + 56));
}

uint64_t sub_10006A918()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[4];
    v5 = sub_10006A990;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[6] + 8))(v2[7], v2[5]);
    v5 = sub_10006A9D4;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10006A990()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[7], v0[5]);
  return swift_task_switch(sub_10006F700, 0, 0);
}

uint64_t sub_10006A9D4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v7 = v5;
    *(_DWORD *)v4 = 136446210;
    *(_QWORD *)(v1 + 16) = sub_10002BA84(0xD000000000000014, 0x80000001001FD3B0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s CloudKit is available.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10006AB1C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2[16] = a1;
  v2[17] = v1;
  v2[18] = *v1;
  v3 = type metadata accessor for CloudKitCoordinator.Database(0);
  v2[19] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[20] = v4;
  v2[21] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100260F78);
  v2[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_100260F80);
  v2[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FriendSharedSecretsRecord(0);
  v2[24] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[25] = v8;
  v2[26] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C((uint64_t *)&unk_1002675F0);
  v2[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v2[28] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[29] = v11;
  v2[30] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for HandleType(0);
  v2[31] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[32] = v13;
  v2[33] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100037A5C(&qword_1002650A0);
  v2[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Handle(0);
  v2[35] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[36] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[37] = swift_task_alloc(v17);
  v2[38] = swift_task_alloc(v17);
  v2[39] = swift_task_alloc(v17);
  v2[40] = swift_task_alloc(v17);
  v2[41] = swift_task_alloc(v17);
  v2[42] = swift_task_alloc(v17);
  return swift_task_switch(sub_10006ACF4, v1, 0);
}

uint64_t sub_10006ACF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = v0[16];
  v2 = v0[42];
  v3 = v0[35];
  v4 = v0[36];
  v5 = type metadata accessor for Logger(0);
  v0[43] = sub_100037A9C(v5, (uint64_t)qword_10027ADC0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[44] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[42];
  if (v10)
  {
    v20 = v0[36];
    v21 = v0[35];
    v12 = swift_slowAlloc(32, -1);
    v22 = swift_slowAlloc(64, -1);
    v23 = v22;
    *(_DWORD *)v12 = 136446723;
    v0[13] = sub_10002BA84(0xD000000000000015, 0x80000001001FD370, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2160;
    v0[14] = 1752392040;
    v13 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2081;
    v14 = Handle.identifier.getter(v13);
    v16 = v15;
    v0[15] = sub_10002BA84(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v16);
    v17 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v17(v11, v21);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s for handle: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v0[36] + 8);
    v17(v11, v0[35]);
  }

  v0[45] = v17;
  v18 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[46] = v18;
  *v18 = v0;
  v18[1] = sub_10006AF58;
  return daemon.getter();
}

uint64_t sub_10006AF58(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 368);
  v5 = *v1;
  *(_QWORD *)(*v1 + 376) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[48] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[49] = v7;
  v8 = type metadata accessor for CloudStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[50] = v9;
  v10 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_10006B050;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10006B050(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 384);
  v3[51] = a1;
  v3[52] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[17];
    v6 = sub_10006C7D4;
  }
  else
  {
    v7 = v3[17];
    swift_release(v3[47]);
    v6 = sub_10006B0CC;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10006B0CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[51];
  v2 = v0[18];
  v3 = swift_allocObject(&unk_100250B18, 32, 7);
  v0[53] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain(v1);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[54] = v5;
  *v5 = v0;
  v5[1] = sub_10006B178;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_10006B178()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 432);
  *(_QWORD *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 136);
    v5 = sub_10006C8C8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 136);
    swift_release(*(_QWORD *)(v2 + 424));
    v5 = sub_10006B1EC;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10006B1EC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 448) = v1;
  *v1 = v0;
  v1[1] = sub_10006B234;
  return daemon.getter();
}

uint64_t sub_10006B234(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 448);
  v5 = *v1;
  *(_QWORD *)(*v1 + 456) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[58] = v6;
  v7 = type metadata accessor for DataManager(0);
  v8 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10006B2DC;
  return ActorServiceDaemon.getService<A>()(v3[49], v7, v3[50], v8);
}

uint64_t sub_10006B2DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 464);
  v3[59] = a1;
  v3[60] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[17];
    v6 = sub_10006C9C8;
  }
  else
  {
    v7 = v3[17];
    swift_release(v3[57]);
    v6 = sub_10006B358;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10006B358()
{
  uint64_t *v0;
  uint64_t **v1;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[32] + 104))(v0[33], enum case for HandleType.following(_:), v0[31]);
  v1 = (uint64_t **)swift_task_alloc(dword_100262DDC);
  v0[61] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10006B3CC;
  return sub_1000E7320(v0[34], v0[16], v0[33], 0);
}

uint64_t sub_10006B3CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 264);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 488));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_10006B444, v4, 0);
}

uint64_t sub_10006B444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68[2];

  v2 = *(_QWORD *)(v0 + 280);
  v1 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 272);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 352);
    v5 = *(_QWORD *)(v0 + 296);
    v6 = *(_QWORD *)(v0 + 128);
    sub_1000087A0(v3, &qword_1002650A0);
    v7 = v4(v5, v6, v2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 296);
    if (v10)
    {
      v63 = *(_QWORD *)(v0 + 280);
      v65 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
      v12 = swift_slowAlloc(32, -1);
      v13 = swift_slowAlloc(64, -1);
      v68[0] = v13;
      *(_DWORD *)v12 = 136446723;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000015, 0x80000001001FD370, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2160;
      *(_QWORD *)(v0 + 24) = 1752392040;
      v14 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v12 + 14, v12 + 22);
      *(_WORD *)(v12 + 22) = 2081;
      v15 = Handle.identifier.getter(v14);
      v17 = v16;
      *(_QWORD *)(v0 + 32) = sub_10002BA84(v15, v16, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease(v17);
      v65(v11, v63);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s Missing serverID for handle: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 360))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 280));
    }

    v38 = *(_QWORD *)(v0 + 472);
    v39 = *(_QWORD *)(v0 + 408);
    v40 = sub_10006F520();
    v41 = swift_allocError(&type metadata for FriendshipServiceError, v40, 0, 0);
    *v42 = 7;
    swift_willThrow(v41);
    swift_release(v38);
    swift_release(v39);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 224);
    v18 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 216);
    v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 328), v3, v2);
    Handle.peerID.getter(v21);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v20, 1, v19) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 32))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
      return swift_task_switch(sub_10006B9F8, 0, 0);
    }
    v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 352);
    v23 = *(_QWORD *)(v0 + 304);
    v24 = *(_QWORD *)(v0 + 280);
    v25 = *(_QWORD *)(v0 + 128);
    sub_1000087A0(*(_QWORD *)(v0 + 216), (uint64_t *)&unk_1002675F0);
    v26 = v22(v23, v25, v24);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(_QWORD *)(v0 + 304);
    v31 = *(_QWORD *)(v0 + 280);
    if (v29)
    {
      v66 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
      v32 = swift_slowAlloc(32, -1);
      v33 = swift_slowAlloc(64, -1);
      v68[0] = v33;
      *(_DWORD *)v32 = 136446723;
      *(_QWORD *)(v0 + 40) = sub_10002BA84(0xD000000000000015, 0x80000001001FD370, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2160;
      *(_QWORD *)(v0 + 48) = 1752392040;
      v34 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v32 + 14, v32 + 22);
      *(_WORD *)(v32 + 22) = 2081;
      v35 = Handle.identifier.getter(v34);
      v37 = v36;
      *(_QWORD *)(v0 + 56) = sub_10002BA84(v35, v36, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v32 + 24, v32 + 32);
      swift_bridgeObjectRelease(v37);
      v66(v30, v31);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s Missing peerID for handle: %{private,mask.hash}s", (uint8_t *)v32, 0x20u);
      swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 360))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 280));
    }

    v44 = *(_QWORD *)(v0 + 472);
    v45 = *(_QWORD *)(v0 + 408);
    v46 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    v47 = *(_QWORD *)(v0 + 328);
    v48 = *(_QWORD *)(v0 + 280);
    v49 = sub_10006F520();
    v50 = swift_allocError(&type metadata for FriendshipServiceError, v49, 0, 0);
    *v51 = 7;
    swift_willThrow(v50);
    swift_release(v44);
    swift_release(v45);
    v46(v47, v48);
  }
  v52 = *(_QWORD *)(v0 + 328);
  v54 = *(_QWORD *)(v0 + 312);
  v53 = *(_QWORD *)(v0 + 320);
  v56 = *(_QWORD *)(v0 + 296);
  v55 = *(_QWORD *)(v0 + 304);
  v58 = *(_QWORD *)(v0 + 264);
  v57 = *(_QWORD *)(v0 + 272);
  v59 = *(_QWORD *)(v0 + 240);
  v60 = *(_QWORD *)(v0 + 216);
  v61 = *(_QWORD *)(v0 + 208);
  v62 = *(_QWORD *)(v0 + 184);
  v64 = *(_QWORD *)(v0 + 176);
  v67 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v67);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006B9F8()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_1002670BC);
  v0[62] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10006BA50;
  return sub_1001CA618(v0[23], v0[30]);
}

uint64_t sub_10006BA50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 496);
  *(_QWORD *)(*v1 + 504) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10006BE44;
  else
    v4 = sub_10006BAB4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 136), 0);
}

uint64_t sub_10006BAB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47[2];

  v1 = *(_QWORD *)(v0 + 184);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 200) + 48))(v1, 1, *(_QWORD *)(v0 + 192)) == 1)
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 352);
    v3 = *(_QWORD *)(v0 + 312);
    v4 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v0 + 128);
    sub_1000087A0(v1, &qword_100260F80);
    v6 = v2(v3, v5, v4);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 312);
    v11 = *(_QWORD *)(v0 + 280);
    if (v9)
    {
      v45 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
      v12 = swift_slowAlloc(32, -1);
      v13 = swift_slowAlloc(64, -1);
      v47[0] = v13;
      *(_DWORD *)v12 = 136446723;
      *(_QWORD *)(v0 + 64) = sub_10002BA84(0xD000000000000015, 0x80000001001FD370, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2160;
      *(_QWORD *)(v0 + 72) = 1752392040;
      v14 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v12 + 14, v12 + 22);
      *(_WORD *)(v12 + 22) = 2081;
      v15 = Handle.identifier.getter(v14);
      v17 = v16;
      *(_QWORD *)(v0 + 80) = sub_10002BA84(v15, v16, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease(v17);
      v45(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Missing friendSharedSecretsRecord for handle: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 360))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 280));
    }

    v22 = *(_QWORD *)(v0 + 472);
    v23 = *(_QWORD *)(v0 + 408);
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    v25 = *(_QWORD *)(v0 + 328);
    v26 = *(_QWORD *)(v0 + 280);
    v28 = *(_QWORD *)(v0 + 232);
    v27 = *(_QWORD *)(v0 + 240);
    v29 = *(_QWORD *)(v0 + 224);
    v30 = sub_10006F520();
    v46 = swift_allocError(&type metadata for FriendshipServiceError, v30, 0, 0);
    *v31 = 7;
    swift_willThrow(v46);
    swift_release(v22);
    swift_release(v23);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    v24(v25, v26);
    v32 = *(_QWORD *)(v0 + 328);
    v34 = *(_QWORD *)(v0 + 312);
    v33 = *(_QWORD *)(v0 + 320);
    v36 = *(_QWORD *)(v0 + 296);
    v35 = *(_QWORD *)(v0 + 304);
    v38 = *(_QWORD *)(v0 + 264);
    v37 = *(_QWORD *)(v0 + 272);
    v39 = *(_QWORD *)(v0 + 240);
    v40 = *(_QWORD *)(v0 + 216);
    v41 = *(_QWORD *)(v0 + 208);
    v42 = *(_QWORD *)(v0 + 184);
    v43 = *(_QWORD *)(v0 + 176);
    v44 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 336));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 408);
    v19 = *(_QWORD *)(v0 + 208);
    sub_10006F564(v1, v19);
    v20 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 512) = v20;
    *(_QWORD *)(v20 + 16) = v19;
    return swift_task_switch(sub_10006BF74, v18, 0);
  }
}

uint64_t sub_10006BE44()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 472));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v2(v3, v4);
  v8 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 304);
  v14 = *(_QWORD *)(v0 + 264);
  v13 = *(_QWORD *)(v0 + 272);
  v15 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 216);
  v18 = *(_QWORD *)(v0 + 208);
  v19 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 176);
  v21 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006BF74()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
     + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                  + 1));
  v0[65] = v1;
  *v1 = v0;
  v1[1] = sub_10006BFE8;
  return ((uint64_t (*)(_QWORD, void *, _QWORD))v3)(v0[22], &unk_100260FB0, v0[64]);
}

uint64_t sub_10006BFE8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  *(_QWORD *)(*(_QWORD *)v1 + 528) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[51];
    v5 = sub_10006C194;
  }
  else
  {
    v6 = v2[17];
    swift_task_dealloc(v2[64]);
    v5 = sub_10006C05C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10006C05C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[51];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[20] + 104))(v0[21], enum case for CloudKitCoordinator.Database.private(_:), v0[19]);
  return swift_task_switch(sub_10006C0B0, v1, 0);
}

uint64_t sub_10006C0B0()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
     + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                  + 1));
  v0[67] = v1;
  *v1 = v0;
  v1[1] = sub_10006C118;
  return ((uint64_t (*)(_QWORD, _QWORD))v3)(v0[22], v0[21]);
}

uint64_t sub_10006C118()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 536);
  *(_QWORD *)(*(_QWORD *)v1 + 544) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[51];
    v5 = sub_10006C318;
  }
  else
  {
    v6 = v2[17];
    (*(void (**)(_QWORD, _QWORD))(v2[20] + 8))(v2[21], v2[19]);
    v5 = sub_10006C4B8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10006C194()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 512));
  return swift_task_switch(sub_10006C1D4, v1, 0);
}

uint64_t sub_10006C1D4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 472));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v2(v3, v4);
  sub_100024990(v8, type metadata accessor for FriendSharedSecretsRecord);
  v9 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 296);
  v12 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 264);
  v14 = *(_QWORD *)(v0 + 272);
  v16 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 176);
  v22 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C318()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[17];
  (*(void (**)(_QWORD, _QWORD))(v0[20] + 8))(v0[21], v0[19]);
  return swift_task_switch(sub_10006C360, v1, 0);
}

uint64_t sub_10006C360()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 472));
  swift_release(v1);
  sub_1000087A0(v9, &qword_100260F78);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v2(v3, v4);
  sub_100024990(v8, type metadata accessor for FriendSharedSecretsRecord);
  v10 = *(_QWORD *)(v0 + 328);
  v12 = *(_QWORD *)(v0 + 312);
  v11 = *(_QWORD *)(v0 + 320);
  v14 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 304);
  v16 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 216);
  v20 = *(_QWORD *)(v0 + 208);
  v21 = *(_QWORD *)(v0 + 184);
  v22 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C4B8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 352))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 280));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v30 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    v31 = *(_QWORD *)(v0 + 472);
    v4 = *(_QWORD *)(v0 + 320);
    v29 = *(_QWORD *)(v0 + 280);
    v39 = *(_QWORD *)(v0 + 240);
    v41 = *(_QWORD *)(v0 + 328);
    v33 = *(_QWORD *)(v0 + 408);
    v35 = *(_QWORD *)(v0 + 232);
    v37 = *(_QWORD *)(v0 + 224);
    v32 = *(_QWORD *)(v0 + 176);
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 88) = 1752392040;
    v44 = v6;
    *(_DWORD *)v5 = 141558275;
    v7 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2081;
    v8 = Handle.identifier.getter(v7);
    v10 = v9;
    *(_QWORD *)(v0 + 96) = sub_10002BA84(v8, v9, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v10);
    v30(v4, v29);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully removed peer token for handle: %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
    swift_release(v31);

    swift_release(v33);
    sub_1000087A0(v32, &qword_100260F78);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v39, v37);
    v30(v41, v29);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 408);
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    v13 = *(_QWORD *)(v0 + 320);
    v42 = *(_QWORD *)(v0 + 328);
    v14 = *(_QWORD *)(v0 + 280);
    v15 = *(_QWORD *)(v0 + 232);
    v16 = *(_QWORD *)(v0 + 240);
    v17 = *(_QWORD *)(v0 + 224);
    v18 = *(_QWORD *)(v0 + 176);
    swift_release(*(_QWORD *)(v0 + 472));

    v12(v13, v14);
    swift_release(v11);
    sub_1000087A0(v18, &qword_100260F78);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    v12(v42, v14);
  }
  v20 = *(_QWORD *)(v0 + 328);
  v19 = *(_QWORD *)(v0 + 336);
  v22 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 320);
  v24 = *(_QWORD *)(v0 + 296);
  v23 = *(_QWORD *)(v0 + 304);
  v26 = *(_QWORD *)(v0 + 264);
  v25 = *(_QWORD *)(v0 + 272);
  v27 = *(_QWORD *)(v0 + 208);
  v34 = *(_QWORD *)(v0 + 240);
  v36 = *(_QWORD *)(v0 + 216);
  v38 = *(_QWORD *)(v0 + 184);
  v40 = *(_QWORD *)(v0 + 176);
  v43 = *(_QWORD *)(v0 + 168);
  sub_100024990(v27, type metadata accessor for FriendSharedSecretsRecord);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v27);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C7D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release(*(_QWORD *)(v0 + 376));
  v1 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C8C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 424);
  swift_release(*(_QWORD *)(v0 + 408));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C9C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 408);
  swift_release(*(_QWORD *)(v0 + 456));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006CAC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a2;
  v3 = type metadata accessor for CloudKitStorage.State(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006CB28, 0, 0);
}

uint64_t sub_10006CB28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v0[8] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[3] = sub_10002BA84(0xD000000000000015, 0x80000001001FD370, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s Waiting for CloudKit to be available", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return swift_task_switch(sub_10006CCCC, v7, 0);
}

uint64_t sub_10006CCCC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                      + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                  + 1));
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_10006CD34;
  return v3(*(_QWORD *)(v0 + 56));
}

uint64_t sub_10006CD34()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[4];
    v5 = sub_10006CDAC;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[6] + 8))(v2[7], v2[5]);
    v5 = sub_10006CE24;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10006CDAC()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[7], v0[5]);
  return swift_task_switch(sub_10006CDF0, 0, 0);
}

uint64_t sub_10006CDF0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006CE24(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v7 = v5;
    *(_DWORD *)v4 = 136446210;
    *(_QWORD *)(v1 + 16) = sub_10002BA84(0xD000000000000015, 0x80000001001FD370, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s CloudKit is available.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10006CF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to CloudKitChangeSet.Adaptor.delete<A>(record:)[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for FriendSharedSecretsRecord(0);
  v6 = sub_100004EA8(&qword_100260FB8, type metadata accessor for FriendSharedSecretsRecord, (uint64_t)&unk_1001F5398);
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return CloudKitChangeSet.Adaptor.delete<A>(record:)(a2, v5, v6);
}

uint64_t sub_10006D000(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = v1;
  *(_BYTE *)(v2 + 84) = a1;
  return swift_task_switch(sub_10006D01C, v1, 0);
}

uint64_t sub_10006D01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 84);
    v6 = swift_slowAlloc(18, -1);
    v7 = swift_slowAlloc(32, -1);
    v10 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_10002BA84(0xD000000000000019, 0x80000001001FD350, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 1024;
    *(_DWORD *)(v0 + 80) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 84, v6 + 14, v6 + 18);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s force? %{BOOL}d", (uint8_t *)v6, 0x12u);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 32) = v8;
  *v8 = v0;
  v8[1] = sub_10006D1E0;
  return daemon.getter();
}

uint64_t sub_10006D1E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 32);
  v5 = *v1;
  *(_QWORD *)(*v1 + 40) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 48) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for NITokenService_LocalMessaging();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260F68, (uint64_t (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging, (uint64_t)&unk_1001F9E84);
  *v6 = v5;
  v6[1] = sub_10006D2C8;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10006D2C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*v2 + 48);
  v5 = *v2;
  *(_QWORD *)(v5 + 56) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10006D3D0, *(_QWORD *)(v5 + 24), 0);
  swift_release(*(_QWORD *)(v5 + 40));
  *(_QWORD *)(v5 + 64) = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_1002660D4);
  *(_QWORD *)(v5 + 72) = v7;
  *v7 = v5;
  v7[1] = sub_10006D378;
  return sub_100183224(*(_BYTE *)(v5 + 84));
}

uint64_t sub_10006D378()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  return swift_task_switch(sub_10006A5A0, v1, 0);
}

uint64_t sub_10006D3D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006D404(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2[12] = a1;
  v2[13] = v1;
  v3 = type metadata accessor for Date(0);
  v2[14] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[15] = v4;
  v2[16] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100261018);
  v2[17] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v6);
  v2[19] = swift_task_alloc(v6);
  v2[20] = swift_task_alloc(v6);
  v2[21] = swift_task_alloc(v6);
  v7 = sub_100037A5C(&qword_100260950);
  v2[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Friend(0);
  v2[23] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[24] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v10);
  v2[26] = swift_task_alloc(v10);
  v11 = type metadata accessor for Handle(0);
  v2[27] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[28] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[29] = swift_task_alloc(v13);
  v2[30] = swift_task_alloc(v13);
  v2[31] = swift_task_alloc(v13);
  v2[32] = swift_task_alloc(v13);
  v2[33] = swift_task_alloc(v13);
  return swift_task_switch(sub_10006D56C, v1, 0);
}

uint64_t sub_10006D56C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = v0[12];
  v2 = v0[33];
  v3 = v0[27];
  v4 = v0[28];
  v5 = type metadata accessor for Logger(0);
  v0[34] = sub_100037A9C(v5, (uint64_t)qword_10027ADC0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[35] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[33];
  if (v10)
  {
    v20 = v0[28];
    v21 = v0[27];
    v12 = swift_slowAlloc(32, -1);
    v22 = swift_slowAlloc(64, -1);
    v23 = v22;
    *(_DWORD *)v12 = 136446723;
    v0[9] = sub_10002BA84(0x656B6F5472656570, 0xEF293A726F66286ELL, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2160;
    v0[10] = 1752392040;
    v13 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2081;
    v14 = Handle.identifier.getter(v13);
    v16 = v15;
    v0[11] = sub_10002BA84(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v16);
    v17 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v17(v11, v21);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s for handle: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v0[28] + 8);
    v17(v11, v0[27]);
  }

  v0[36] = v17;
  v18 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[37] = v18;
  *v18 = v0;
  v18[1] = sub_10006D7D8;
  return daemon.getter();
}

uint64_t sub_10006D7D8(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 296);
  v5 = *v1;
  *(_QWORD *)(*v1 + 304) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[39] = v6;
  v7 = type metadata accessor for Daemon(0);
  v3[40] = v7;
  v8 = type metadata accessor for NITokenService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v3[41] = v9;
  v10 = sub_100004EA8(&qword_100261000, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA3E8);
  *v6 = v5;
  v6[1] = sub_10006D8D0;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10006D8D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 312);
  v4 = *(_QWORD **)v2;
  v4[42] = a1;
  v4[43] = v1;
  swift_task_dealloc(v3);
  if (v1)
    return swift_task_switch(sub_10006E4D8, v4[13], 0);
  swift_release(v4[38]);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v4[44] = v6;
  *v6 = v4;
  v6[1] = sub_10006D96C;
  return daemon.getter();
}

uint64_t sub_10006D96C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 352);
  v5 = *v1;
  *(_QWORD *)(*v1 + 360) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  v3[46] = v6;
  v7 = type metadata accessor for DataManager(0);
  v8 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10006DA14;
  return ActorServiceDaemon.getService<A>()(v3[40], v7, v3[41], v8);
}

uint64_t sub_10006DA14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 368);
  v4[47] = a1;
  v4[48] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[13];
    v7 = sub_10006E5BC;
  }
  else
  {
    swift_release(v4[45]);
    v7 = sub_10006DA90;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10006DA90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_100037A5C(&qword_100260620);
  v2 = type metadata accessor for HandleType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_QWORD *)(v0 + 392) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for HandleType.following(_:), v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1002655DC);
  *(_QWORD *)(v0 + 400) = v7;
  *v7 = v0;
  v7[1] = sub_10006DB60;
  return sub_1000196E8(v6, 1);
}

uint64_t sub_10006DB60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 408) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10006DBC8, v4, 0);
}

uint64_t sub_10006DBC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD, uint64_t, _QWORD, __n128);
  __n128 v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61[2];

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 192);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v58 = *(_QWORD *)(v3 + 72);
    v5 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(v3 + 16);
    v6 = swift_bridgeObjectRetain(v1);
    while (1)
    {
      v7 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
      v8 = *(_QWORD *)(v0 + 256);
      v9 = *(_QWORD *)(v0 + 216);
      v10 = *(_QWORD *)(v0 + 96);
      v11 = v5(*(_QWORD *)(v0 + 200), v4, *(_QWORD *)(v0 + 184), v6);
      Friend.handle.getter(v11);
      v12 = static Handle.== infix(_:_:)(v8, v10);
      v7(v8, v9);
      if ((v12 & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v3 + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
      v4 += v58;
      if (!--v2)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 408));
        goto LABEL_6;
      }
    }
    v15 = *(_QWORD *)(v0 + 192);
    v14 = *(_QWORD *)(v0 + 200);
    v17 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 184);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 408));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v17, v14, v16);
    v13 = 0;
  }
  else
  {
LABEL_6:
    v13 = 1;
  }
  v18 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 192);
  v21 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v21, v13, 1, v19);
  swift_bridgeObjectRelease(v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19) == 1)
  {
    v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
    v23 = *(_QWORD *)(v0 + 232);
    v24 = *(_QWORD *)(v0 + 216);
    v25 = *(_QWORD *)(v0 + 96);
    sub_1000087A0(*(_QWORD *)(v0 + 176), &qword_100260950);
    v26 = v22(v23, v25, v24);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(_QWORD *)(v0 + 232);
    v31 = *(_QWORD *)(v0 + 216);
    if (v29)
    {
      v59 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
      v32 = swift_slowAlloc(32, -1);
      v33 = swift_slowAlloc(64, -1);
      v61[0] = v33;
      *(_DWORD *)v32 = 136446723;
      *(_QWORD *)(v0 + 16) = sub_10002BA84(0x656B6F5472656570, 0xEF293A726F66286ELL, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2160;
      *(_QWORD *)(v0 + 24) = 1752392040;
      v34 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v32 + 14, v32 + 22);
      *(_WORD *)(v32 + 22) = 2081;
      v35 = Handle.identifier.getter(v34);
      v37 = v36;
      *(_QWORD *)(v0 + 32) = sub_10002BA84(v35, v36, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v32 + 24, v32 + 32);
      swift_bridgeObjectRelease(v37);
      v59(v30, v31);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s missing following serverID for %{private,mask.hash}s!", (uint8_t *)v32, 0x20u);
      swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
    }

    v42 = *(_QWORD *)(v0 + 376);
    v43 = *(_QWORD *)(v0 + 336);
    v44 = sub_10006F520();
    v60 = swift_allocError(&type metadata for FriendshipServiceError, v44, 0, 0);
    *v45 = 7;
    swift_willThrow(v60);
    swift_release(v42);
    swift_release(v43);
    v46 = *(_QWORD *)(v0 + 256);
    v48 = *(_QWORD *)(v0 + 240);
    v47 = *(_QWORD *)(v0 + 248);
    v49 = *(_QWORD *)(v0 + 232);
    v51 = *(_QWORD *)(v0 + 200);
    v50 = *(_QWORD *)(v0 + 208);
    v53 = *(_QWORD *)(v0 + 168);
    v52 = *(_QWORD *)(v0 + 176);
    v54 = *(_QWORD *)(v0 + 160);
    v55 = *(_QWORD *)(v0 + 152);
    v56 = *(_QWORD *)(v0 + 144);
    v57 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v38 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 32))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
    v39 = Friend.handle.getter(v38);
    static ReferenceClock.now.getter(v39);
    v40 = (_QWORD *)swift_task_alloc(dword_100261A1C);
    *(_QWORD *)(v0 + 416) = v40;
    *v40 = v0;
    v40[1] = sub_10006E050;
    return sub_100086DA4(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 128));
  }
}

uint64_t sub_10006E050()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 416);
  *(_QWORD *)(*(_QWORD *)v1 + 424) = v0;
  swift_task_dealloc(v3);
  v4 = (void (*)(uint64_t, uint64_t))v2[36];
  v5 = v2[31];
  v6 = v2[27];
  v8 = v2[15];
  v7 = v2[16];
  v10 = v2 + 13;
  v9 = v2[13];
  (*(void (**)(uint64_t, _QWORD))(v8 + 8))(v7, v10[1]);
  v4(v5, v6);
  if (v0)
    v11 = sub_10006E6AC;
  else
    v11 = sub_10006E0EC;
  return swift_task_switch(v11, v9, 0);
}

uint64_t sub_10006E0EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  id *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 280))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 216));
  v3 = sub_10006F660(v1, v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v43 = *(_QWORD *)(v0 + 336);
    v44 = *(_QWORD *)(v0 + 376);
    v6 = *(_QWORD *)(v0 + 240);
    v37 = *(_QWORD *)(v0 + 216);
    v38 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v46 = *(_QWORD *)(v0 + 192);
    v48 = *(_QWORD *)(v0 + 184);
    v50 = *(_QWORD *)(v0 + 208);
    v39 = *(_QWORD *)(v0 + 152);
    v40 = *(_QWORD *)(v0 + 160);
    v41 = *(_QWORD *)(v0 + 136);
    v7 = swift_slowAlloc(42, -1);
    v42 = swift_slowAlloc(64, -1);
    *(_QWORD *)(v0 + 40) = 1752392040;
    v52 = v42;
    *(_DWORD *)v7 = 141558787;
    v8 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    v9 = Handle.identifier.getter(v8);
    v11 = v10;
    *(_QWORD *)(v0 + 48) = sub_10002BA84(v9, v10, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v11);
    v38(v6, v37);
    *(_WORD *)(v7 + 22) = 2160;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v7 + 24, v7 + 32);
    *(_WORD *)(v7 + 32) = 2081;
    sub_10006F660(v40, v39);
    v12 = String.init<A>(describing:)(v39, v41);
    v14 = v13;
    *(_QWORD *)(v0 + 64) = sub_10002BA84(v12, v13, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v7 + 34, v7 + 42);
    swift_bridgeObjectRelease(v14);
    sub_1000087A0(v40, &qword_100261018);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{private,mask.hash}s token: %{private,mask.hash}s", (uint8_t *)v7, 0x2Au);
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v7, -1, -1);
    swift_release(v43);
    swift_release(v44);

    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v50, v48);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 376);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v17 = *(_QWORD *)(v0 + 240);
    v19 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 184);
    v21 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 160);
    swift_release(*(_QWORD *)(v0 + 336));
    swift_release(v15);

    sub_1000087A0(v22, &qword_100261018);
    v16(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  }
  v23 = *(_QWORD *)(v0 + 144);
  sub_10006F6A8(*(_QWORD *)(v0 + 168), v23);
  v24 = type metadata accessor for DiscoveryToken(0);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24);
  v26 = *(id **)(v0 + 144);
  if (v25 == 1)
  {
    sub_1000087A0(*(_QWORD *)(v0 + 144), &qword_100261018);
    v51 = 0;
  }
  else
  {
    v51 = *v26;
    sub_100024990((uint64_t)v26, type metadata accessor for DiscoveryToken);
  }
  v27 = *(_QWORD *)(v0 + 256);
  v29 = *(_QWORD *)(v0 + 240);
  v28 = *(_QWORD *)(v0 + 248);
  v30 = *(_QWORD *)(v0 + 232);
  v32 = *(_QWORD *)(v0 + 200);
  v31 = *(_QWORD *)(v0 + 208);
  v34 = *(_QWORD *)(v0 + 168);
  v33 = *(_QWORD *)(v0 + 176);
  v35 = *(_QWORD *)(v0 + 160);
  v45 = *(_QWORD *)(v0 + 152);
  v47 = *(_QWORD *)(v0 + 144);
  v49 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(id))(v0 + 8))(v51);
}

uint64_t sub_10006E4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 304));
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006E5BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 336);
  swift_release(*(_QWORD *)(v0 + 360));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 160);
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006E6AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 336));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 232);
  v10 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 152);
  v16 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006E7B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[6] = v0;
  v2 = type metadata accessor for Date(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v1[9] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006E814, v0, 0);
}

uint64_t sub_10006E814()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F988 != -1)
    swift_once(&qword_10025F988, sub_100139A94);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027ADC0);
  v0[10] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[5] = sub_10002BA84(0x6B6F5472656E776FLL, 0xEC00000029286E65, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[11] = v7;
  *v7 = v0;
  v7[1] = sub_10006E9B4;
  return daemon.getter();
}

uint64_t sub_10006E9B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *v1;
  *(_QWORD *)(*v1 + 96) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 104) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for NITokenService(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100261000, type metadata accessor for NITokenService, (uint64_t)&unk_1001FA3E8);
  *v6 = v5;
  v6[1] = sub_10006EA9C;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10006EA9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 104);
  v3[14] = a1;
  v3[15] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[6];
    v6 = sub_10006EDCC;
  }
  else
  {
    v7 = v3[6];
    swift_release(v3[12]);
    v6 = sub_10006EB18;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10006EB18(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  static ReferenceClock.now.getter(a1);
  v2 = (_QWORD *)swift_task_alloc(dword_100261A04);
  *(_QWORD *)(v1 + 128) = v2;
  *v2 = v1;
  v2[1] = sub_10006EB70;
  return sub_100086E80();
}

uint64_t sub_10006EB70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 128);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 64);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 72);
  v7 = *(_QWORD *)(*(_QWORD *)v2 + 56);
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1)
    v8 = sub_10006EE0C;
  else
    v8 = sub_10006EC04;
  return swift_task_switch(v8, v3[6], 0);
}

uint64_t sub_10006EC04()
{
  uint64_t v0;
  id v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v1 = *(id *)(v0 + 136);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 112);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 141558275;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2081;
    *(_QWORD *)(v0 + 24) = v4;
    v8 = v1;
    v9 = sub_100037A5C(&qword_100261008);
    v10 = String.init<A>(describing:)(v0 + 24, v9);
    v12 = v11;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v12);

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Owner token: %{private,mask.hash}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 112);

  }
  swift_release(v5);

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 136));
}

uint64_t sub_10006EDCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006EE0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006EE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_100261064);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10003BF7C;
  v6[5] = a2;
  v6[6] = v2;
  v6[4] = a1;
  return swift_task_switch(sub_100067D40, v2, 0);
}

uint64_t sub_10006EEBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10026105C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10006F708;
  v4[4] = a1;
  v4[5] = v1;
  return swift_task_switch(sub_100064A24, v1, 0);
}

uint64_t sub_10006EF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100261054);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_100064ED0(a1, a2);
}

uint64_t sub_10006EF7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  return swift_task_switch(sub_10006EF94, v1, 0);
}

uint64_t sub_10006EF94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  static Date.now.getter();
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006EFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_100261044);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10003BF7C;
  return sub_100066314(a1, a2, a3, a4);
}

uint64_t sub_10006F068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10026103C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_100066C2C(a1, a2);
}

uint64_t sub_10006F0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10026102C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_1000676A0(a1, a2);
}

uint64_t sub_10006F128(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_100261024);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000087DC;
  v6[4] = a2;
  v6[5] = v2;
  v6[3] = a1;
  return swift_task_switch(sub_100068568, v2, 0);
}

uint64_t sub_10006F198(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100261014);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10006F708;
  return sub_10006D404(a1);
}

uint64_t sub_10006F1E4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100260FFC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100050D74;
  return sub_10006E7B4();
}

uint64_t sub_10006F228(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100260FF4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  return sub_100068960(a1);
}

uint64_t sub_10006F274()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100260FEC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  v2[3] = v0;
  return swift_task_switch(sub_1000696E0, v0, 0);
}

uint64_t sub_10006F2D0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100260FDC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  v2[3] = v0;
  return swift_task_switch(sub_100069A80, v0, 0);
}

uint64_t sub_10006F32C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100260FC4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  v2[3] = v0;
  v2[4] = *v0;
  return swift_task_switch(sub_10006A028, v0, 0);
}

uint64_t sub_10006F390(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100260F74);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  return sub_10006AB1C(a1);
}

uint64_t sub_10006F3DC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_100260F64);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_10003BF7C;
  *(_QWORD *)(v4 + 24) = v1;
  *(_BYTE *)(v4 + 84) = a1;
  return swift_task_switch(sub_10006D01C, v1, 0);
}

uint64_t sub_10006F440()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100260F5C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return swift_task_switch(sub_100069E8C, v0, 0);
}

uint64_t sub_10006F498()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006F4BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100260F94);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_10006CAC8(a1, v4);
}

unint64_t sub_10006F520()
{
  unint64_t result;

  result = qword_100260FA0;
  if (!qword_100260FA0)
  {
    result = swift_getWitnessTable(&unk_1001F6F78, &type metadata for FriendshipServiceError);
    atomic_store(result, &qword_100260FA0);
  }
  return result;
}

uint64_t sub_10006F564(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FriendSharedSecretsRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F5A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100260FAC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000087DC;
  return sub_10006CF6C(a1, v4);
}

uint64_t sub_10006F5FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100260FCC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  return sub_10006A6AC(a1, v4);
}

uint64_t sub_10006F660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_100261018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_100261018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F6F0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10006F714(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_BYTE *)(v3 + 1856) = a3;
  *(_QWORD *)(v3 + 1800) = a2;
  *(_QWORD *)(v3 + 1792) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v3 + 1808) = v4;
  *v4 = v3;
  v4[1] = sub_10006F768;
  return daemon.getter();
}

uint64_t sub_10006F768(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1808);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1816) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1824) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10006F850;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10006F850(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1824);
  v5 = *(_QWORD **)v2;
  v5[229] = a1;
  v5[230] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10006FA28, 0, 0);
  swift_release(v5[227]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[231] = v7;
  *v7 = v5;
  v7[1] = sub_10006F904;
  return sub_10000AFC8((uint64_t)(v5 + 110));
}

uint64_t sub_10006F904()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1832);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1848));
  return swift_task_switch(sub_10006F95C, v1, 0);
}

uint64_t sub_10006F95C()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000EF6C(v0 + 880, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1)
  {
    v1 = v0 + 1472;
    sub_10004922C((_OWORD *)(v0 + 1472));
  }
  else
  {
    v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_10000EF6C(v0 + 112, v0 + 1632, &qword_1002603B0);
    sub_10000EFB0((_QWORD *)(v0 + 1632), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_10000AF28(v0 + 880);
  }
  sub_10000EF6C(v1, v0 + 1312, &qword_1002603B0);
  return swift_task_switch(sub_10006FA70, 0, 0);
}

uint64_t sub_10006FA28()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 1800);
  swift_release(*(_QWORD *)(v0 + 1816));
  sub_100024990(v1, type metadata accessor for ClientContext);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006FA70()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = *(unsigned __int8 *)(v0 + 1856);
  v2 = *(_QWORD *)(v0 + 1800);
  v3 = *(_QWORD *)(v0 + 1792);
  swift_release(*(_QWORD *)(v0 + 1832));
  sub_10000EF6C(v0 + 1312, v3, &qword_1002603B0);
  v4 = type metadata accessor for SavePreferencesRequestContent(0);
  sub_100025C70(v2, v3 + *(int *)(v4 + 20), type metadata accessor for ClientContext);
  v5 = sub_100037A5C(&qword_100261090);
  v6 = swift_allocObject(v5, 64, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  strcpy((char *)(v6 + 32), "hideLocation");
  *(_BYTE *)(v6 + 45) = 0;
  *(_WORD *)(v6 + 46) = -5120;
  v7 = 28494;
  if (v1)
    v7 = 7562585;
  v8 = 0xE200000000000000;
  if (v1)
    v8 = 0xE300000000000000;
  *(_QWORD *)(v6 + 48) = v7;
  *(_QWORD *)(v6 + 56) = v8;
  v9 = sub_10000B938(v6);
  sub_100024990(v2, type metadata accessor for ClientContext);
  *(_QWORD *)(v3 + *(int *)(v4 + 24)) = v9;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006FB84(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_BYTE *)(v3 + 1856) = a3;
  *(_QWORD *)(v3 + 1800) = a2;
  *(_QWORD *)(v3 + 1792) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v3 + 1808) = v4;
  *v4 = v3;
  v4[1] = sub_10006FBD8;
  return daemon.getter();
}

uint64_t sub_10006FBD8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1808);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1816) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1824) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_10006FCC0;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_10006FCC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1824);
  v5 = *(_QWORD **)v2;
  v5[229] = a1;
  v5[230] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100075E40, 0, 0);
  swift_release(v5[227]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[231] = v7;
  *v7 = v5;
  v7[1] = sub_10006FD74;
  return sub_10000AFC8((uint64_t)(v5 + 110));
}

uint64_t sub_10006FD74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1832);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1848));
  return swift_task_switch(sub_10006FDCC, v1, 0);
}

uint64_t sub_10006FDCC()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000EF6C(v0 + 880, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1)
  {
    v1 = v0 + 1472;
    sub_10004922C((_OWORD *)(v0 + 1472));
  }
  else
  {
    v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_10000EF6C(v0 + 112, v0 + 1632, &qword_1002603B0);
    sub_10000EFB0((_QWORD *)(v0 + 1632), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_10000AF28(v0 + 880);
  }
  sub_10000EF6C(v1, v0 + 1312, &qword_1002603B0);
  return swift_task_switch(sub_10006FE98, 0, 0);
}

uint64_t sub_10006FE98()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = *(unsigned __int8 *)(v0 + 1856);
  v2 = *(_QWORD *)(v0 + 1800);
  v3 = *(_QWORD *)(v0 + 1792);
  swift_release(*(_QWORD *)(v0 + 1832));
  sub_10000EF6C(v0 + 1312, v3, &qword_1002603B0);
  v4 = type metadata accessor for SavePreferencesRequestContent(0);
  sub_100025C70(v2, v3 + *(int *)(v4 + 20), type metadata accessor for ClientContext);
  v5 = sub_100037A5C(&qword_100261090);
  v6 = swift_allocObject(v5, 64, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1001F35F0;
  *(_QWORD *)(v6 + 32) = 0xD000000000000013;
  *(_QWORD *)(v6 + 40) = 0x80000001001FD4D0;
  v7 = 28494;
  if (v1)
    v7 = 7562585;
  v8 = 0xE200000000000000;
  if (v1)
    v8 = 0xE300000000000000;
  *(_QWORD *)(v6 + 48) = v7;
  *(_QWORD *)(v6 + 56) = v8;
  v9 = sub_10000B938(v6);
  sub_100024990(v2, type metadata accessor for ClientContext);
  *(_QWORD *)(v3 + *(int *)(v4 + 24)) = v9;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006FFA8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v22[160];
  _BYTE v23[168];
  char v24;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100261228);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_1000757D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SaveMeDevicePreferencesRequestContent.CodingKeys, &type metadata for SaveMeDevicePreferencesRequestContent.CodingKeys, v11, v9, v10);
  sub_10000EF6C(v3, (uint64_t)v23, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v23, (uint64_t)v22, &qword_1002603B0);
  v24 = 0;
  v12 = sub_10003E3B0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v24, v5, &type metadata for ServerContext, v12);
  if (!v2)
  {
    v13 = type metadata accessor for SaveMeDevicePreferencesRequestContent(0);
    v14 = v3 + *(int *)(v13 + 20);
    v22[0] = 1;
    v15 = type metadata accessor for ClientContext(0);
    v16 = sub_100004EA8(&qword_100260488, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3130);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, v22, v5, v15, v16);
    v17 = (uint64_t *)(v3 + *(int *)(v13 + 24));
    v18 = *v17;
    v19 = v17[1];
    v22[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, v22, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100070174@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _BYTE v32[160];
  _BYTE v33[160];
  _QWORD v34[21];
  char v35;

  v26 = a2;
  v27 = type metadata accessor for ClientContext(0);
  __chkstk_darwin(v27);
  v4 = (uint64_t *)((char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = sub_100037A5C(&qword_100261238);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SaveMeDevicePreferencesRequestContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v30 = a1;
  sub_100036228(a1, v11);
  v13 = sub_1000757D8();
  v28 = v7;
  v14 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SaveMeDevicePreferencesRequestContent.CodingKeys, &type metadata for SaveMeDevicePreferencesRequestContent.CodingKeys, v13, v11, v12);
  if (v14)
    return sub_10002BB90(v30);
  v31 = v5;
  v15 = (uint64_t)v10;
  v35 = 0;
  v16 = sub_10002B9FC();
  v17 = v28;
  v18 = v29;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v34, &type metadata for ServerContext, &v35, v29, &type metadata for ServerContext, v16);
  sub_10000EF6C((uint64_t)v34, (uint64_t)v33, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v33, v15, &qword_1002603B0);
  v32[0] = 1;
  v19 = sub_100004EA8(&qword_1002604A0, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3158);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v27, v32, v18, v27, v19);
  sub_10003E4F4((uint64_t)v4, v15 + *(int *)(v8 + 20));
  v32[0] = 2;
  v20 = KeyedDecodingContainer.decode(_:forKey:)(v32, v29);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v29);
  v23 = (uint64_t *)(v15 + *(int *)(v8 + 24));
  *v23 = v20;
  v23[1] = v22;
  sub_100025C70(v15, v26, type metadata accessor for SaveMeDevicePreferencesRequestContent);
  sub_10002BB90(v30);
  return sub_100024990(v15, type metadata accessor for SaveMeDevicePreferencesRequestContent);
}

uint64_t sub_10007048C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v21[20];
  _BYTE v22[168];
  char v23;

  v3 = v1;
  v5 = sub_100037A5C(&qword_100261208);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100036228(a1, v9);
  v11 = sub_100075794();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SavePreferencesRequestContent.CodingKeys, &type metadata for SavePreferencesRequestContent.CodingKeys, v11, v9, v10);
  sub_10000EF6C(v3, (uint64_t)v22, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v22, (uint64_t)v21, &qword_1002603B0);
  v23 = 0;
  v12 = sub_10003E3B0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v23, v5, &type metadata for ServerContext, v12);
  if (!v2)
  {
    v13 = type metadata accessor for SavePreferencesRequestContent(0);
    v14 = v3 + *(int *)(v13 + 20);
    LOBYTE(v21[0]) = 1;
    v15 = type metadata accessor for ClientContext(0);
    v16 = sub_100004EA8(&qword_100260488, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3130);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, v21, v5, v15, v16);
    v21[0] = *(_QWORD *)(v3 + *(int *)(v13 + 24));
    v23 = 2;
    v17 = sub_100037A5C(&qword_100261218);
    v18 = sub_10007581C(&qword_100261220, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v23, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100070690@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[20];
  _BYTE v32[160];
  _QWORD v33[21];
  char v34;
  char v35;

  v25 = a2;
  v26 = type metadata accessor for ClientContext(0);
  __chkstk_darwin(v26);
  v4 = (uint64_t *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_100037A5C(&qword_100261240);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SavePreferencesRequestContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v29 = a1;
  sub_100036228(a1, v11);
  v13 = sub_100075794();
  v27 = v7;
  v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SavePreferencesRequestContent.CodingKeys, &type metadata for SavePreferencesRequestContent.CodingKeys, v13, v11, v12);
  if (v14)
    return sub_10002BB90(v29);
  v30 = v5;
  v24 = v8;
  v15 = (uint64_t)v10;
  v35 = 0;
  v16 = sub_10002B9FC();
  v17 = v27;
  v18 = v28;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v33, &type metadata for ServerContext, &v35, v28, &type metadata for ServerContext, v16);
  sub_10000EF6C((uint64_t)v33, (uint64_t)v32, &qword_1002603B0);
  sub_10000EF6C((uint64_t)v32, v15, &qword_1002603B0);
  LOBYTE(v31[0]) = 1;
  v19 = sub_100004EA8(&qword_1002604A0, type metadata accessor for ClientContext, (uint64_t)&unk_1001F3158);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v26, v31, v18, v26, v19);
  v20 = v24;
  sub_10003E4F4((uint64_t)v4, v15 + *(int *)(v24 + 20));
  v21 = sub_100037A5C(&qword_100261218);
  v34 = 2;
  v22 = sub_10007581C((unint64_t *)&qword_100261248, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v21, &v34, v18, v21, v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v18);
  *(_QWORD *)(v15 + *(int *)(v20 + 24)) = v31[0];
  sub_100025C70(v15, v25, type metadata accessor for SavePreferencesRequestContent);
  sub_10002BB90(v29);
  return sub_100024990(v15, type metadata accessor for SavePreferencesRequestContent);
}

uint64_t sub_1000709E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000511D8();
  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_100070A18()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F43746E65696C63;
  if (*v0 != 1)
    v1 = 0x656369766544656DLL;
  if (*v0)
    return v1;
  else
    return 0x6F43726576726573;
}

uint64_t sub_100070A80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100075B10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100070AA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000757D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100070ACC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000757D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100070AF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100070174(a1, a2);
}

uint64_t sub_100070B08(_QWORD *a1)
{
  return sub_10006FFA8(a1);
}

uint64_t sub_100070B1C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F43746E65696C63;
  if (*v0 != 1)
    v1 = 0x7366657270;
  if (*v0)
    return v1;
  else
    return 0x6F43726576726573;
}

uint64_t sub_100070B7C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100075CB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100070BA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100075794();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100070BC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100075794();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100070BF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100070690(a1, a2);
}

uint64_t sub_100070C04(_QWORD *a1)
{
  return sub_10007048C(a1);
}

uint64_t sub_100070C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3[227] = a3;
  v3[226] = a2;
  v3[225] = a1;
  v4 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  v3[228] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[229] = v5;
  v3[230] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SaveMeDevicePreferencesRequestContent(0);
  v3[231] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[232] = swift_task_alloc(v7);
  v3[233] = swift_task_alloc(v7);
  v3[234] = swift_task_alloc(v7);
  v8 = type metadata accessor for Account(0);
  v3[235] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[236] = v9;
  v3[237] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260238) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[238] = swift_task_alloc(v10);
  v3[239] = swift_task_alloc(v10);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[240] = swift_task_alloc(v11);
  v3[241] = swift_task_alloc(v11);
  v12 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ClientContext(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[242] = swift_task_alloc(v12);
  v3[243] = swift_task_alloc(v12);
  return swift_task_switch(sub_100070D80, 0, 0);
}

uint64_t sub_100070D80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v14;
  _QWORD *v15;

  v1 = v0[241];
  v2 = v0[240];
  v3 = v0[239];
  v4 = v0[238];
  v5 = v0[237];
  v6 = v0[236];
  v7 = v0[235];
  v8 = v0[225];
  sub_100016CBC();
  v10 = v9;
  v0[244] = v9;
  v11 = type metadata accessor for Handle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v1, 1, 1, v11);
  v12 = type metadata accessor for RequestOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v3, 1, 1, v12);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v6 + 16);
  v14 = swift_bridgeObjectRetain(v10);
  v13(v5, v8, v7, v14);
  sub_10000E37C(v3, v4, &qword_100260238);
  sub_10000E37C(v1, v2, &qword_1002650A0);
  v15 = (_QWORD *)swift_task_alloc(dword_100260234);
  v0[245] = v15;
  *v15 = v0;
  v15[1] = sub_100070EB8;
  return sub_100044CD8(v0[243], v0[237], v0[238], v0[240], (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_100070EB8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 1944);
  v3 = *(_QWORD *)(*v0 + 1936);
  v4 = *(_QWORD *)(*v0 + 1928);
  v5 = *(_QWORD *)(*v0 + 1912);
  v8 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1960));
  sub_1000087A0(v5, &qword_100260238);
  sub_1000087A0(v4, &qword_1002650A0);
  sub_100025C70(v2, v3, type metadata accessor for ClientContext);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v1 + 1968) = v6;
  *v6 = v8;
  v6[1] = sub_100070F70;
  return daemon.getter();
}

uint64_t sub_100070F70(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1968);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1976) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1984) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100071058;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100071058(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1984);
  v5 = *(_QWORD **)v2;
  v5[249] = a1;
  v5[250] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100071230, 0, 0);
  swift_release(v5[247]);
  v7 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  v5[251] = v7;
  *v7 = v5;
  v7[1] = sub_10007110C;
  return sub_10000AFC8((uint64_t)(v5 + 110));
}

uint64_t sub_10007110C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1992);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2008));
  return swift_task_switch(sub_100071164, v1, 0);
}

uint64_t sub_100071164()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000EF6C(v0 + 880, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1)
  {
    v1 = v0 + 1472;
    sub_10004922C((_OWORD *)(v0 + 1472));
  }
  else
  {
    v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_10000EF6C(v0 + 112, v0 + 1632, &qword_1002603B0);
    sub_10000EFB0((_QWORD *)(v0 + 1632), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108);
    sub_10000AF28(v0 + 880);
  }
  sub_10000EF6C(v1, v0 + 1312, &qword_1002603B0);
  return swift_task_switch(sub_100071374, 0, 0);
}

uint64_t sub_100071230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 1952);
  v2 = *(_QWORD *)(v0 + 1944);
  v3 = *(_QWORD *)(v0 + 1936);
  v4 = *(_QWORD *)(v0 + 1928);
  v5 = *(_QWORD *)(v0 + 1920);
  v11 = *(_QWORD *)(v0 + 1912);
  v12 = *(_QWORD *)(v0 + 1904);
  v6 = *(_QWORD *)(v0 + 1888);
  v7 = *(_QWORD *)(v0 + 1880);
  v13 = *(_QWORD *)(v0 + 1896);
  v14 = *(_QWORD *)(v0 + 1872);
  v15 = *(_QWORD *)(v0 + 1864);
  v16 = *(_QWORD *)(v0 + 1856);
  v17 = *(_QWORD *)(v0 + 1840);
  v8 = *(_QWORD *)(v0 + 1816);
  v9 = *(_QWORD *)(v0 + 1800);
  swift_release(*(_QWORD *)(v0 + 1976));
  swift_bridgeObjectRelease(v8);
  sub_100024990(v3, type metadata accessor for ClientContext);
  swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v7);
  sub_100024990(v2, type metadata accessor for ClientContext);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(_QWORD *)(v0 + 1936);
  v2 = *(_QWORD *)(v0 + 1872);
  v3 = *(_QWORD *)(v0 + 1848);
  v4 = *(_QWORD *)(v0 + 1816);
  v5 = *(_QWORD *)(v0 + 1808);
  swift_release(*(_QWORD *)(v0 + 1992));
  sub_10000EF6C(v0 + 1312, v2, &qword_1002603B0);
  sub_10003E4F4(v1, v2 + *(int *)(v3 + 20));
  v6 = (_QWORD *)(v2 + *(int *)(v3 + 24));
  *v6 = v5;
  v6[1] = v4;
  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v7 = *(_QWORD *)(v0 + 1872);
  v8 = *(_QWORD *)(v0 + 1864);
  v9 = type metadata accessor for Logger(0);
  sub_100037A9C(v9, (uint64_t)qword_10027AD08);
  v10 = sub_100025C70(v7, v8, type metadata accessor for SaveMeDevicePreferencesRequestContent);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 1864);
  if (v13)
  {
    v15 = *(_QWORD *)(v0 + 1856);
    v16 = *(_QWORD *)(v0 + 1848);
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v47 = v18;
    *(_DWORD *)v17 = 136315138;
    sub_100025C70(v14, v15, type metadata accessor for SaveMeDevicePreferencesRequestContent);
    v19 = String.init<A>(describing:)(v15, v16);
    v21 = v20;
    *(_QWORD *)(v0 + 1792) = sub_10002BA84(v19, v20, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1792, v0 + 1800, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    sub_100024990(v14, type metadata accessor for SaveMeDevicePreferencesRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Request content: %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    sub_100024990(*(_QWORD *)(v0 + 1864), type metadata accessor for SaveMeDevicePreferencesRequestContent);
  }

  v22 = *(_QWORD *)(v0 + 2000);
  v23 = *(_QWORD *)(v0 + 1872);
  v24 = *(_QWORD *)(v0 + 1848);
  v25 = *(_QWORD **)(v0 + 1840);
  v26 = *(_QWORD *)(v0 + 1832);
  v27 = *(_QWORD *)(v0 + 1824);
  v28 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = JSONEncoder.init()();
  *v25 = sub_100055760;
  v25[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v26 + 104))(v25, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v27);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v25);
  v30 = sub_100004EA8(&qword_1002610B0, type metadata accessor for SaveMeDevicePreferencesRequestContent, (uint64_t)&unk_1001F4310);
  v31 = dispatch thunk of JSONEncoder.encode<A>(_:)(v23, v24, v30);
  v33 = v32;
  swift_release(v29);
  if (v22)
  {
    swift_errorRelease(v22);
    v31 = 0;
    v33 = 0xF000000000000000;
  }
  v34 = *(_QWORD *)(v0 + 1952);
  v35 = *(_QWORD *)(v0 + 1944);
  v36 = *(_QWORD *)(v0 + 1936);
  v37 = *(_QWORD *)(v0 + 1928);
  v38 = *(_QWORD *)(v0 + 1920);
  v39 = *(_QWORD *)(v0 + 1912);
  v42 = *(_QWORD *)(v0 + 1904);
  v43 = *(_QWORD *)(v0 + 1896);
  v40 = *(_QWORD *)(v0 + 1872);
  v44 = *(_QWORD *)(v0 + 1864);
  v45 = *(_QWORD *)(v0 + 1856);
  v46 = *(_QWORD *)(v0 + 1840);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1888) + 8))(*(_QWORD *)(v0 + 1800), *(_QWORD *)(v0 + 1880));
  sub_100024990(v40, type metadata accessor for SaveMeDevicePreferencesRequestContent);
  sub_100024990(v35, type metadata accessor for ClientContext);
  swift_bridgeObjectRetain(v34);
  sub_10001F728(v31, v33);
  swift_bridgeObjectRelease_n(v34, 2);
  sub_100037AF8(v31, v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v40);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(v0 + 8))(*(_QWORD *)(v0 + 1952), v31, v33);
}

uint64_t sub_10007176C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_BYTE *)(v2 + 208) = a2;
  *(_QWORD *)(v2 + 40) = a1;
  v3 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  *(_QWORD *)(v2 + 48) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 56) = v4;
  *(_QWORD *)(v2 + 64) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SavePreferencesRequestContent(0);
  *(_QWORD *)(v2 + 72) = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 80) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 88) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 96) = swift_task_alloc(v6);
  v7 = type metadata accessor for Account(0);
  *(_QWORD *)(v2 + 104) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 112) = v8;
  *(_QWORD *)(v2 + 120) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260238) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 128) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 136) = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 144) = swift_task_alloc(v10);
  *(_QWORD *)(v2 + 152) = swift_task_alloc(v10);
  v11 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ClientContext(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 160) = swift_task_alloc(v11);
  *(_QWORD *)(v2 + 168) = swift_task_alloc(v11);
  return swift_task_switch(sub_1000718D0, 0, 0);
}

uint64_t sub_1000718D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v14;
  _QWORD *v15;

  v1 = v0[18];
  v2 = v0[19];
  v4 = v0[16];
  v3 = v0[17];
  v6 = v0[14];
  v5 = v0[15];
  v7 = v0[13];
  v8 = v0[5];
  sub_100016CBC();
  v10 = v9;
  v0[22] = v9;
  v11 = type metadata accessor for Handle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v2, 1, 1, v11);
  v12 = type metadata accessor for RequestOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v3, 1, 1, v12);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v6 + 16);
  v14 = swift_bridgeObjectRetain(v10);
  v13(v5, v8, v7, v14);
  sub_10000E37C(v3, v4, &qword_100260238);
  sub_10000E37C(v2, v1, &qword_1002650A0);
  v15 = (_QWORD *)swift_task_alloc(dword_100260234);
  v0[23] = v15;
  *v15 = v0;
  v15[1] = sub_1000719F8;
  return sub_100044CD8(v0[21], v0[15], v0[16], v0[18], (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1000719F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 160);
  v3 = *(_QWORD *)(*v0 + 168);
  v4 = *(_QWORD *)(*v0 + 152);
  v5 = *(_QWORD *)(*v0 + 136);
  v11 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 184));
  sub_1000087A0(v5, &qword_100260238);
  sub_1000087A0(v4, &qword_1002650A0);
  sub_100025C70(v3, v2, type metadata accessor for ClientContext);
  v6 = swift_task_alloc(dword_1002610A4);
  *(_QWORD *)(v1 + 192) = v6;
  *(_QWORD *)v6 = v11;
  *(_QWORD *)(v6 + 8) = sub_100071AE4;
  v7 = *(_QWORD *)(v1 + 160);
  v8 = *(_QWORD *)(v1 + 96);
  *(_BYTE *)(v6 + 1856) = *(_BYTE *)(v1 + 208);
  *(_QWORD *)(v6 + 1800) = v7;
  *(_QWORD *)(v6 + 1792) = v8;
  v9 = (uint64_t *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v6 + 1808) = v9;
  *v9 = v6;
  v9[1] = (uint64_t)sub_10006F768;
  return daemon.getter();
}

uint64_t sub_100071AE4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 176));
    v4 = sub_1000720C4;
  }
  else
  {
    v4 = sub_100071B50;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100071B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void *object;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027AD08);
  v4 = sub_100025C70(v2, v1, type metadata accessor for SavePreferencesRequestContent);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 88);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 80);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v58 = v12;
    *(_DWORD *)v11 = 136315138;
    sub_100025C70(v8, v9, type metadata accessor for SavePreferencesRequestContent);
    v13 = String.init<A>(describing:)(v9, v10);
    v15 = v14;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v13, v14, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    sub_100024990(v8, type metadata accessor for SavePreferencesRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Request content: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    sub_100024990(*(_QWORD *)(v0 + 88), type metadata accessor for SavePreferencesRequestContent);
  }

  v55 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 80);
  v19 = *(_QWORD *)(v0 + 56);
  v20 = *(_QWORD **)(v0 + 64);
  v21 = *(_QWORD *)(v0 + 48);
  v57 = sub_100037A5C(&qword_100261078);
  v22 = swift_allocObject(v57, 64, 7);
  *(_OWORD *)(v22 + 16) = xmmword_1001F35F0;
  v58 = 0;
  v59 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(v59);
  v58 = 0xD00000000000001DLL;
  v59 = 0x80000001001FD490;
  sub_100025C70(v16, v18, type metadata accessor for SavePreferencesRequestContent);
  v23._countAndFlagsBits = String.init<A>(describing:)(v18, v17);
  object = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(object);
  v25 = v58;
  v26 = v59;
  *(_QWORD *)(v22 + 56) = &type metadata for String;
  *(_QWORD *)(v22 + 32) = v25;
  *(_QWORD *)(v22 + 40) = v26;
  print(_:separator:terminator:)(v22, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease(v22);
  v27 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = JSONEncoder.init()();
  *v20 = sub_100055760;
  v20[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v20, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v21);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v20);
  v29 = sub_100004EA8(&qword_100261080, type metadata accessor for SavePreferencesRequestContent, (uint64_t)&unk_1001F4338);
  v30 = dispatch thunk of JSONEncoder.encode<A>(_:)(v16, v17, v29);
  if (v55)
  {
    swift_errorRelease(v55);
    v32 = 0;
    v33 = 0xF000000000000000;
  }
  else
  {
    v32 = v30;
    v33 = v31;
  }
  v35 = *(_QWORD *)(v0 + 168);
  v34 = *(_QWORD *)(v0 + 176);
  v47 = *(_QWORD *)(v0 + 160);
  v48 = *(_QWORD *)(v0 + 152);
  v49 = *(_QWORD *)(v0 + 144);
  v50 = *(_QWORD *)(v0 + 136);
  v51 = *(_QWORD *)(v0 + 128);
  v52 = *(_QWORD *)(v0 + 120);
  v44 = *(_QWORD *)(v0 + 112);
  v45 = *(_QWORD *)(v0 + 104);
  v46 = *(_QWORD *)(v0 + 96);
  v53 = *(_QWORD *)(v0 + 88);
  v54 = *(_QWORD *)(v0 + 80);
  v56 = *(_QWORD *)(v0 + 64);
  v36 = *(_QWORD *)(v0 + 40);
  v37 = swift_allocObject(v57, 64, 7);
  *(_OWORD *)(v37 + 16) = xmmword_1001F35F0;
  v58 = 0;
  v59 = 0xE000000000000000;
  sub_10001F728(v32, v33);
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v59);
  v58 = 0xD000000000000013;
  v59 = 0x80000001001FD570;
  *(_QWORD *)(v0 + 16) = v32;
  *(_QWORD *)(v0 + 24) = v33;
  sub_10001F728(v32, v33);
  v38 = sub_100037A5C(&qword_100261088);
  v39._countAndFlagsBits = String.init<A>(describing:)(v0 + 16, v38);
  v40 = v39._object;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v40);
  v41 = v58;
  v42 = v59;
  *(_QWORD *)(v37 + 56) = &type metadata for String;
  *(_QWORD *)(v37 + 32) = v41;
  *(_QWORD *)(v37 + 40) = v42;
  print(_:separator:terminator:)(v37, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease(v37);
  swift_release(v28);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v36, v45);
  sub_100024990(v46, type metadata accessor for SavePreferencesRequestContent);
  sub_100024990(v35, type metadata accessor for ClientContext);
  swift_bridgeObjectRetain(v34);
  sub_10001F728(v32, v33);
  sub_100037AF8(v32, v33);
  swift_bridgeObjectRelease_n(v34, 2);
  sub_100037AF8(v32, v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v46);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(v0 + 8))(*(_QWORD *)(v0 + 176), v32, v33);
}

uint64_t sub_1000720C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 104));
  sub_100024990(v2, type metadata accessor for ClientContext);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000721B4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_BYTE *)(v2 + 208) = a2;
  *(_QWORD *)(v2 + 40) = a1;
  v3 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  *(_QWORD *)(v2 + 48) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 56) = v4;
  *(_QWORD *)(v2 + 64) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SavePreferencesRequestContent(0);
  *(_QWORD *)(v2 + 72) = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 80) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 88) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 96) = swift_task_alloc(v6);
  v7 = type metadata accessor for Account(0);
  *(_QWORD *)(v2 + 104) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 112) = v8;
  *(_QWORD *)(v2 + 120) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260238) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 128) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 136) = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002650A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 144) = swift_task_alloc(v10);
  *(_QWORD *)(v2 + 152) = swift_task_alloc(v10);
  v11 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ClientContext(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 160) = swift_task_alloc(v11);
  *(_QWORD *)(v2 + 168) = swift_task_alloc(v11);
  return swift_task_switch(sub_100072318, 0, 0);
}

uint64_t sub_100072318()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v14;
  _QWORD *v15;

  v1 = v0[18];
  v2 = v0[19];
  v4 = v0[16];
  v3 = v0[17];
  v6 = v0[14];
  v5 = v0[15];
  v7 = v0[13];
  v8 = v0[5];
  sub_100016CBC();
  v10 = v9;
  v0[22] = v9;
  v11 = type metadata accessor for Handle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v2, 1, 1, v11);
  v12 = type metadata accessor for RequestOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v3, 1, 1, v12);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v6 + 16);
  v14 = swift_bridgeObjectRetain(v10);
  v13(v5, v8, v7, v14);
  sub_10000E37C(v3, v4, &qword_100260238);
  sub_10000E37C(v2, v1, &qword_1002650A0);
  v15 = (_QWORD *)swift_task_alloc(dword_100260234);
  v0[23] = v15;
  *v15 = v0;
  v15[1] = sub_100072440;
  return sub_100044CD8(v0[21], v0[15], v0[16], v0[18], (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_100072440()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 160);
  v3 = *(_QWORD *)(*v0 + 168);
  v4 = *(_QWORD *)(*v0 + 152);
  v5 = *(_QWORD *)(*v0 + 136);
  v11 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 184));
  sub_1000087A0(v5, &qword_100260238);
  sub_1000087A0(v4, &qword_1002650A0);
  sub_100025C70(v3, v2, type metadata accessor for ClientContext);
  v6 = swift_task_alloc(dword_100261074);
  *(_QWORD *)(v1 + 192) = v6;
  *(_QWORD *)v6 = v11;
  *(_QWORD *)(v6 + 8) = sub_10007252C;
  v7 = *(_QWORD *)(v1 + 160);
  v8 = *(_QWORD *)(v1 + 96);
  *(_BYTE *)(v6 + 1856) = *(_BYTE *)(v1 + 208);
  *(_QWORD *)(v6 + 1800) = v7;
  *(_QWORD *)(v6 + 1792) = v8;
  v9 = (uint64_t *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v6 + 1808) = v9;
  *v9 = v6;
  v9[1] = (uint64_t)sub_10006FBD8;
  return daemon.getter();
}

uint64_t sub_10007252C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 176));
    v4 = sub_100075E48;
  }
  else
  {
    v4 = sub_100072598;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100072598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void *object;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  if (qword_10025F950 != -1)
    swift_once(&qword_10025F950, sub_1001023AC);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = type metadata accessor for Logger(0);
  sub_100037A9C(v3, (uint64_t)qword_10027AD08);
  v4 = sub_100025C70(v2, v1, type metadata accessor for SavePreferencesRequestContent);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 88);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 80);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v58 = v12;
    *(_DWORD *)v11 = 136315138;
    sub_100025C70(v8, v9, type metadata accessor for SavePreferencesRequestContent);
    v13 = String.init<A>(describing:)(v9, v10);
    v15 = v14;
    *(_QWORD *)(v0 + 32) = sub_10002BA84(v13, v14, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    sub_100024990(v8, type metadata accessor for SavePreferencesRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Request content: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    sub_100024990(*(_QWORD *)(v0 + 88), type metadata accessor for SavePreferencesRequestContent);
  }

  v55 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 80);
  v19 = *(_QWORD *)(v0 + 56);
  v20 = *(_QWORD **)(v0 + 64);
  v21 = *(_QWORD *)(v0 + 48);
  v57 = sub_100037A5C(&qword_100261078);
  v22 = swift_allocObject(v57, 64, 7);
  *(_OWORD *)(v22 + 16) = xmmword_1001F35F0;
  v58 = 0;
  v59 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(v59);
  v58 = 0xD00000000000001DLL;
  v59 = 0x80000001001FD490;
  sub_100025C70(v16, v18, type metadata accessor for SavePreferencesRequestContent);
  v23._countAndFlagsBits = String.init<A>(describing:)(v18, v17);
  object = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(object);
  v25 = v58;
  v26 = v59;
  *(_QWORD *)(v22 + 56) = &type metadata for String;
  *(_QWORD *)(v22 + 32) = v25;
  *(_QWORD *)(v22 + 40) = v26;
  print(_:separator:terminator:)(v22, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease(v22);
  v27 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = JSONEncoder.init()();
  *v20 = sub_100055760;
  v20[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v20, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v21);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v20);
  v29 = sub_100004EA8(&qword_100261080, type metadata accessor for SavePreferencesRequestContent, (uint64_t)&unk_1001F4338);
  v30 = dispatch thunk of JSONEncoder.encode<A>(_:)(v16, v17, v29);
  if (v55)
  {
    swift_errorRelease(v55);
    v32 = 0;
    v33 = 0xF000000000000000;
  }
  else
  {
    v32 = v30;
    v33 = v31;
  }
  v35 = *(_QWORD *)(v0 + 168);
  v34 = *(_QWORD *)(v0 + 176);
  v47 = *(_QWORD *)(v0 + 160);
  v48 = *(_QWORD *)(v0 + 152);
  v49 = *(_QWORD *)(v0 + 144);
  v50 = *(_QWORD *)(v0 + 136);
  v51 = *(_QWORD *)(v0 + 128);
  v52 = *(_QWORD *)(v0 + 120);
  v44 = *(_QWORD *)(v0 + 112);
  v45 = *(_QWORD *)(v0 + 104);
  v46 = *(_QWORD *)(v0 + 96);
  v53 = *(_QWORD *)(v0 + 88);
  v54 = *(_QWORD *)(v0 + 80);
  v56 = *(_QWORD *)(v0 + 64);
  v36 = *(_QWORD *)(v0 + 40);
  v37 = swift_allocObject(v57, 64, 7);
  *(_OWORD *)(v37 + 16) = xmmword_1001F35F0;
  v58 = 0;
  v59 = 0xE000000000000000;
  sub_10001F728(v32, v33);
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease(v59);
  v58 = 0xD00000000000001ALL;
  v59 = 0x80000001001FD4B0;
  *(_QWORD *)(v0 + 16) = v32;
  *(_QWORD *)(v0 + 24) = v33;
  sub_10001F728(v32, v33);
  v38 = sub_100037A5C(&qword_100261088);
  v39._countAndFlagsBits = String.init<A>(describing:)(v0 + 16, v38);
  v40 = v39._object;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v40);
  v41 = v58;
  v42 = v59;
  *(_QWORD *)(v37 + 56) = &type metadata for String;
  *(_QWORD *)(v37 + 32) = v41;
  *(_QWORD *)(v37 + 40) = v42;
  print(_:separator:terminator:)(v37, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease(v37);
  swift_release(v28);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v36, v45);
  sub_100024990(v46, type metadata accessor for SavePreferencesRequestContent);
  sub_100024990(v35, type metadata accessor for ClientContext);
  swift_bridgeObjectRetain(v34);
  sub_10001F728(v32, v33);
  sub_100037AF8(v32, v33);
  swift_bridgeObjectRelease_n(v34, 2);
  sub_100037AF8(v32, v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v46);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(v0 + 8))(*(_QWORD *)(v0 + 176), v32, v33);
}

uint64_t type metadata accessor for SavePreferencesRequestContent(uint64_t a1)
{
  return sub_100025C3C(a1, qword_1002611A8, (uint64_t)&nominal type descriptor for SavePreferencesRequestContent);
}

uint64_t type metadata accessor for SaveMeDevicePreferencesRequestContent(uint64_t a1)
{
  return sub_100025C3C(a1, qword_100261110, (uint64_t)&nominal type descriptor for SaveMeDevicePreferencesRequestContent);
}

_OWORD *sub_100072B34(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _OWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t, __n128);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = a2[5];
    if (v7)
    {
      *a1 = *(_OWORD *)a2;
      v8 = a2[2];
      *((_QWORD *)v4 + 2) = v8;
      *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 3);
      *((_QWORD *)v4 + 5) = v7;
      *((_BYTE *)v4 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)((char *)v4 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)((char *)v4 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)((char *)v4 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)((char *)v4 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)((char *)v4 + 120) = *(_OWORD *)(a2 + 15);
      v10 = a2[17];
      v9 = a2[18];
      *((_QWORD *)v4 + 17) = v10;
      *((_QWORD *)v4 + 18) = v9;
      v11 = a2[19];
      *((_QWORD *)v4 + 19) = v11;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      a1[6] = *((_OWORD *)a2 + 6);
      a1[7] = v13;
      v14 = *((_OWORD *)a2 + 9);
      a1[8] = *((_OWORD *)a2 + 8);
      a1[9] = v14;
      v15 = *((_OWORD *)a2 + 3);
      a1[2] = *((_OWORD *)a2 + 2);
      a1[3] = v15;
      v16 = *((_OWORD *)a2 + 5);
      a1[4] = *((_OWORD *)a2 + 4);
      a1[5] = v16;
      v17 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v17;
    }
    v18 = *(int *)(a3 + 20);
    v19 = (char *)v4 + v18;
    v20 = (uint64_t)a2 + v18;
    v90 = *(uint64_t *)((char *)a2 + v18 + 8);
    v92 = a3;
    *(_QWORD *)v19 = *(uint64_t *)((char *)a2 + v18);
    *((_QWORD *)v19 + 1) = v90;
    v19[16] = *((_BYTE *)a2 + v18 + 16);
    v88 = *(uint64_t *)((char *)a2 + v18 + 32);
    *((_QWORD *)v19 + 3) = *(uint64_t *)((char *)a2 + v18 + 24);
    *((_QWORD *)v19 + 4) = v88;
    v21 = *(uint64_t *)((char *)a2 + v18 + 48);
    *((_QWORD *)v19 + 5) = *(uint64_t *)((char *)a2 + v18 + 40);
    *((_QWORD *)v19 + 6) = v21;
    v19[56] = *((_BYTE *)a2 + v18 + 56);
    v22 = *(uint64_t *)((char *)a2 + v18 + 72);
    *((_QWORD *)v19 + 8) = *(uint64_t *)((char *)a2 + v18 + 64);
    *((_QWORD *)v19 + 9) = v22;
    v23 = *(uint64_t *)((char *)a2 + v18 + 88);
    *((_QWORD *)v19 + 10) = *(uint64_t *)((char *)a2 + v18 + 80);
    *((_QWORD *)v19 + 11) = v23;
    v24 = *(uint64_t *)((char *)a2 + v18 + 104);
    *((_QWORD *)v19 + 12) = *(uint64_t *)((char *)a2 + v18 + 96);
    *((_QWORD *)v19 + 13) = v24;
    v25 = (int *)type metadata accessor for ClientContext(0);
    v26 = v25[12];
    v84 = v20 + v26;
    v86 = &v19[v26];
    v27 = type metadata accessor for SystemInfo.DeviceLockState(0);
    v82 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v27 - 8) + 16);
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v28 = swift_bridgeObjectRetain(v24);
    v82(v86, v84, v27, v28);
    *(_QWORD *)&v19[v25[13]] = *(_QWORD *)(v20 + v25[13]);
    v29 = v25[14];
    v30 = &v19[v29];
    v31 = (_QWORD *)(v20 + v29);
    v32 = v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v32;
    v19[v25[15]] = *(_BYTE *)(v20 + v25[15]);
    v33 = v25[16];
    v34 = &v19[v33];
    v35 = (_QWORD *)(v20 + v33);
    v91 = v35[1];
    *(_QWORD *)v34 = *v35;
    *((_QWORD *)v34 + 1) = v91;
    v36 = v25[17];
    v37 = &v19[v36];
    v38 = (_QWORD *)(v20 + v36);
    v89 = v38[1];
    *(_QWORD *)v37 = *v38;
    *((_QWORD *)v37 + 1) = v89;
    v39 = v25[18];
    v40 = &v19[v39];
    v41 = (_QWORD *)(v20 + v39);
    v87 = v41[1];
    *(_QWORD *)v40 = *v41;
    *((_QWORD *)v40 + 1) = v87;
    v42 = v25[19];
    v43 = &v19[v42];
    v44 = (_QWORD *)(v20 + v42);
    v85 = v44[1];
    *(_QWORD *)v43 = *v44;
    *((_QWORD *)v43 + 1) = v85;
    v45 = v25[20];
    v46 = &v19[v45];
    v47 = (_QWORD *)(v20 + v45);
    v83 = v47[1];
    *(_QWORD *)v46 = *v47;
    *((_QWORD *)v46 + 1) = v83;
    v48 = v25[21];
    v49 = &v19[v48];
    v50 = (_QWORD *)(v20 + v48);
    v81 = v50[1];
    *(_QWORD *)v49 = *v50;
    *((_QWORD *)v49 + 1) = v81;
    v51 = v25[22];
    v52 = &v19[v51];
    v53 = (_QWORD *)(v20 + v51);
    v54 = v53[1];
    *(_QWORD *)v52 = *v53;
    *((_QWORD *)v52 + 1) = v54;
    v55 = v25[23];
    v56 = &v19[v55];
    v57 = (_QWORD *)(v20 + v55);
    v58 = v57[1];
    *(_QWORD *)v56 = *v57;
    *((_QWORD *)v56 + 1) = v58;
    v59 = v25[24];
    v60 = &v19[v59];
    v61 = v20 + v59;
    *(_QWORD *)v60 = *(_QWORD *)v61;
    v60[8] = *(_BYTE *)(v61 + 8);
    v19[v25[25]] = *(_BYTE *)(v20 + v25[25]);
    v62 = v25[26];
    v63 = *(_QWORD *)(v20 + v62);
    *(_QWORD *)&v19[v62] = v63;
    v64 = v25[27];
    v65 = &v19[v64];
    v66 = (_QWORD *)(v20 + v64);
    v67 = v66[1];
    *(_QWORD *)v65 = *v66;
    *((_QWORD *)v65 + 1) = v67;
    v68 = v25[28];
    v69 = &v19[v68];
    v70 = (_QWORD *)(v20 + v68);
    v71 = v70[1];
    *(_QWORD *)v69 = *v70;
    *((_QWORD *)v69 + 1) = v71;
    v72 = v25[29];
    v73 = &v19[v72];
    v74 = (_QWORD *)(v20 + v72);
    v75 = v74[1];
    *(_QWORD *)v73 = *v74;
    *((_QWORD *)v73 + 1) = v75;
    v76 = *(int *)(v92 + 24);
    v77 = (_QWORD *)((char *)v4 + v76);
    v78 = (uint64_t *)((char *)a2 + v76);
    v79 = v78[1];
    *v77 = *v78;
    v77[1] = v79;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v67);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v79);
  }
  return v4;
}

uint64_t sub_100072EFC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  uint64_t v9;

  v4 = a1[5];
  if (v4)
  {
    v5 = a1[2];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[19]);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[4]);
  swift_bridgeObjectRelease(v6[6]);
  swift_bridgeObjectRelease(v6[9]);
  swift_bridgeObjectRelease(v6[11]);
  swift_bridgeObjectRelease(v6[13]);
  v7 = (int *)type metadata accessor for ClientContext(0);
  v8 = (char *)v6 + v7[12];
  v9 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[21] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[22] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[23] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[26]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[27] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[28] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[29] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_100073094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v6 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    v9 = *(_QWORD *)(a2 + 136);
    v8 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v9;
    *(_QWORD *)(a1 + 144) = v8;
    v10 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v10;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  v16 = *(int *)(a3 + 20);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v88 = *(_QWORD *)(a2 + v16 + 8);
  v90 = a3;
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = v88;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(a2 + v16 + 16);
  v86 = *(_QWORD *)(a2 + v16 + 32);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(a2 + v16 + 24);
  *(_QWORD *)(v17 + 32) = v86;
  v19 = *(_QWORD *)(a2 + v16 + 48);
  *(_QWORD *)(v17 + 40) = *(_QWORD *)(a2 + v16 + 40);
  *(_QWORD *)(v17 + 48) = v19;
  *(_BYTE *)(v17 + 56) = *(_BYTE *)(a2 + v16 + 56);
  v20 = *(_QWORD *)(a2 + v16 + 72);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(a2 + v16 + 64);
  *(_QWORD *)(v17 + 72) = v20;
  v21 = *(_QWORD *)(a2 + v16 + 88);
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(a2 + v16 + 80);
  *(_QWORD *)(v17 + 88) = v21;
  v22 = *(_QWORD *)(a2 + v16 + 104);
  *(_QWORD *)(v17 + 96) = *(_QWORD *)(a2 + v16 + 96);
  *(_QWORD *)(v17 + 104) = v22;
  v23 = (int *)type metadata accessor for ClientContext(0);
  v24 = v23[12];
  v82 = v18 + v24;
  v84 = v17 + v24;
  v25 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v80 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  v26 = swift_bridgeObjectRetain(v22);
  v80(v84, v82, v25, v26);
  *(_QWORD *)(v17 + v23[13]) = *(_QWORD *)(v18 + v23[13]);
  v27 = v23[14];
  v28 = (_QWORD *)(v17 + v27);
  v29 = (_QWORD *)(v18 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  *(_BYTE *)(v17 + v23[15]) = *(_BYTE *)(v18 + v23[15]);
  v31 = v23[16];
  v32 = (_QWORD *)(v17 + v31);
  v33 = (_QWORD *)(v18 + v31);
  v89 = v33[1];
  *v32 = *v33;
  v32[1] = v89;
  v34 = v23[17];
  v35 = (_QWORD *)(v17 + v34);
  v36 = (_QWORD *)(v18 + v34);
  v87 = v36[1];
  *v35 = *v36;
  v35[1] = v87;
  v37 = v23[18];
  v38 = (_QWORD *)(v17 + v37);
  v39 = (_QWORD *)(v18 + v37);
  v85 = v39[1];
  *v38 = *v39;
  v38[1] = v85;
  v40 = v23[19];
  v41 = (_QWORD *)(v17 + v40);
  v42 = (_QWORD *)(v18 + v40);
  v83 = v42[1];
  *v41 = *v42;
  v41[1] = v83;
  v43 = v23[20];
  v44 = (_QWORD *)(v17 + v43);
  v45 = (_QWORD *)(v18 + v43);
  v81 = v45[1];
  *v44 = *v45;
  v44[1] = v81;
  v46 = v23[21];
  v47 = (_QWORD *)(v17 + v46);
  v48 = (_QWORD *)(v18 + v46);
  v79 = v48[1];
  *v47 = *v48;
  v47[1] = v79;
  v49 = v23[22];
  v50 = (_QWORD *)(v17 + v49);
  v51 = (_QWORD *)(v18 + v49);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = v23[23];
  v54 = (_QWORD *)(v17 + v53);
  v55 = (_QWORD *)(v18 + v53);
  v56 = v55[1];
  *v54 = *v55;
  v54[1] = v56;
  v57 = v23[24];
  v58 = v17 + v57;
  v59 = v18 + v57;
  *(_QWORD *)v58 = *(_QWORD *)v59;
  *(_BYTE *)(v58 + 8) = *(_BYTE *)(v59 + 8);
  *(_BYTE *)(v17 + v23[25]) = *(_BYTE *)(v18 + v23[25]);
  v60 = v23[26];
  v61 = *(_QWORD *)(v18 + v60);
  *(_QWORD *)(v17 + v60) = v61;
  v62 = v23[27];
  v63 = (_QWORD *)(v17 + v62);
  v64 = (_QWORD *)(v18 + v62);
  v65 = v64[1];
  *v63 = *v64;
  v63[1] = v65;
  v66 = v23[28];
  v67 = (_QWORD *)(v17 + v66);
  v68 = (_QWORD *)(v18 + v66);
  v69 = v68[1];
  *v67 = *v68;
  v67[1] = v69;
  v70 = v23[29];
  v71 = (_QWORD *)(v17 + v70);
  v72 = (_QWORD *)(v18 + v70);
  v73 = v72[1];
  *v71 = *v72;
  v71[1] = v73;
  v74 = *(int *)(v90 + 24);
  v75 = (_QWORD *)(a1 + v74);
  v76 = (_QWORD *)(a2 + v74);
  v77 = v76[1];
  *v75 = *v76;
  v75[1] = v77;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  return a1;
}

uint64_t sub_100073430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;

  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v10);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v11 = *(_QWORD *)(a2 + 136);
      v12 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v13 = *(_QWORD *)(a2 + 152);
      v14 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      sub_10004A1B8((_QWORD *)a1);
      v19 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v19;
      v20 = *(_OWORD *)(a2 + 80);
      v22 = *(_OWORD *)(a2 + 32);
      v21 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v20;
      *(_OWORD *)(a1 + 32) = v22;
      *(_OWORD *)(a1 + 48) = v21;
      v23 = *(_OWORD *)(a2 + 144);
      v25 = *(_OWORD *)(a2 + 96);
      v24 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v23;
      *(_OWORD *)(a1 + 96) = v25;
      *(_OWORD *)(a1 + 112) = v24;
    }
  }
  else if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v16;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v17 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v17;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v18 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v18;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v26;
    v27 = *(_OWORD *)(a2 + 32);
    v28 = *(_OWORD *)(a2 + 48);
    v29 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v29;
    *(_OWORD *)(a1 + 32) = v27;
    *(_OWORD *)(a1 + 48) = v28;
    v30 = *(_OWORD *)(a2 + 96);
    v31 = *(_OWORD *)(a2 + 112);
    v32 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v32;
    *(_OWORD *)(a1 + 96) = v30;
    *(_OWORD *)(a1 + 112) = v31;
  }
  v33 = *(int *)(a3 + 20);
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_QWORD *)v34 = *(_QWORD *)(a2 + v33);
  v36 = *(_QWORD *)(a2 + v33 + 8);
  v37 = *(_QWORD *)(a1 + v33 + 8);
  *(_QWORD *)(v34 + 8) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_BYTE *)(v34 + 16) = *(_BYTE *)(v35 + 16);
  *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
  v38 = *(_QWORD *)(v35 + 32);
  v39 = *(_QWORD *)(v34 + 32);
  *(_QWORD *)(v34 + 32) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  *(_QWORD *)(v34 + 40) = *(_QWORD *)(v35 + 40);
  v40 = *(_QWORD *)(v35 + 48);
  v41 = *(_QWORD *)(v34 + 48);
  *(_QWORD *)(v34 + 48) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *(_BYTE *)(v34 + 56) = *(_BYTE *)(v35 + 56);
  *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
  v42 = *(_QWORD *)(v35 + 72);
  v43 = *(_QWORD *)(v34 + 72);
  *(_QWORD *)(v34 + 72) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *(_QWORD *)(v34 + 80) = *(_QWORD *)(v35 + 80);
  v44 = *(_QWORD *)(v35 + 88);
  v45 = *(_QWORD *)(v34 + 88);
  *(_QWORD *)(v34 + 88) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_QWORD *)(v34 + 96) = *(_QWORD *)(v35 + 96);
  v46 = *(_QWORD *)(v35 + 104);
  v47 = *(_QWORD *)(v34 + 104);
  *(_QWORD *)(v34 + 104) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = (int *)type metadata accessor for ClientContext(0);
  v49 = v48[12];
  v50 = v34 + v49;
  v51 = v35 + v49;
  v52 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v50, v51, v52);
  *(_QWORD *)(v34 + v48[13]) = *(_QWORD *)(v35 + v48[13]);
  v53 = v48[14];
  v54 = (_QWORD *)(v34 + v53);
  v55 = (_QWORD *)(v35 + v53);
  *v54 = *v55;
  v56 = v55[1];
  v57 = v54[1];
  v54[1] = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *(_BYTE *)(v34 + v48[15]) = *(_BYTE *)(v35 + v48[15]);
  v58 = v48[16];
  v59 = (_QWORD *)(v34 + v58);
  v60 = (_QWORD *)(v35 + v58);
  *v59 = *v60;
  v61 = v60[1];
  v62 = v59[1];
  v59[1] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  v63 = v48[17];
  v64 = (_QWORD *)(v34 + v63);
  v65 = (_QWORD *)(v35 + v63);
  *v64 = *v65;
  v66 = v65[1];
  v67 = v64[1];
  v64[1] = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  v68 = v48[18];
  v69 = (_QWORD *)(v34 + v68);
  v70 = (_QWORD *)(v35 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v72 = v69[1];
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v73 = v48[19];
  v74 = (_QWORD *)(v34 + v73);
  v75 = (_QWORD *)(v35 + v73);
  *v74 = *v75;
  v76 = v75[1];
  v77 = v74[1];
  v74[1] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  v78 = v48[20];
  v79 = (_QWORD *)(v34 + v78);
  v80 = (_QWORD *)(v35 + v78);
  *v79 = *v80;
  v81 = v80[1];
  v82 = v79[1];
  v79[1] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  v83 = v48[21];
  v84 = (_QWORD *)(v34 + v83);
  v85 = (_QWORD *)(v35 + v83);
  *v84 = *v85;
  v86 = v85[1];
  v87 = v84[1];
  v84[1] = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  v88 = v48[22];
  v89 = (_QWORD *)(v34 + v88);
  v90 = (_QWORD *)(v35 + v88);
  *v89 = *v90;
  v91 = v90[1];
  v92 = v89[1];
  v89[1] = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v92);
  v93 = v48[23];
  v94 = (_QWORD *)(v34 + v93);
  v95 = (_QWORD *)(v35 + v93);
  *v94 = *v95;
  v96 = v95[1];
  v97 = v94[1];
  v94[1] = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  v98 = v48[24];
  v99 = v34 + v98;
  v100 = (uint64_t *)(v35 + v98);
  v101 = *v100;
  *(_BYTE *)(v99 + 8) = *((_BYTE *)v100 + 8);
  *(_QWORD *)v99 = v101;
  *(_BYTE *)(v34 + v48[25]) = *(_BYTE *)(v35 + v48[25]);
  v102 = v48[26];
  v103 = *(_QWORD *)(v34 + v102);
  v104 = *(_QWORD *)(v35 + v102);
  *(_QWORD *)(v34 + v102) = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v103);
  v105 = v48[27];
  v106 = (_QWORD *)(v34 + v105);
  v107 = (_QWORD *)(v35 + v105);
  *v106 = *v107;
  v108 = v107[1];
  v109 = v106[1];
  v106[1] = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  v110 = v48[28];
  v111 = (_QWORD *)(v34 + v110);
  v112 = (_QWORD *)(v35 + v110);
  *v111 = *v112;
  v113 = v112[1];
  v114 = v111[1];
  v111[1] = v113;
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRelease(v114);
  v115 = v48[29];
  v116 = (_QWORD *)(v34 + v115);
  v117 = (_QWORD *)(v35 + v115);
  *v116 = *v117;
  v118 = v117[1];
  v119 = v116[1];
  v116[1] = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease(v119);
  v120 = *(int *)(a3 + 24);
  v121 = (_QWORD *)(a1 + v120);
  v122 = (_QWORD *)(a2 + v120);
  *v121 = *v122;
  v123 = v122[1];
  v124 = v121[1];
  v121[1] = v123;
  swift_bridgeObjectRetain(v123);
  swift_bridgeObjectRelease(v124);
  return a1;
}

_OWORD *sub_100073A30(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  v11 = *(int *)(a3 + 20);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_OWORD *)v12 = *(_OWORD *)((char *)a2 + v11);
  v12[16] = *((_BYTE *)a2 + v11 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)((char *)a2 + v11 + 40);
  v12[56] = *((_BYTE *)a2 + v11 + 56);
  v14 = *(_OWORD *)((char *)a2 + v11 + 80);
  *((_OWORD *)v12 + 4) = *(_OWORD *)((char *)a2 + v11 + 64);
  *((_OWORD *)v12 + 5) = v14;
  *((_OWORD *)v12 + 6) = *(_OWORD *)((char *)a2 + v11 + 96);
  v15 = (int *)type metadata accessor for ClientContext(0);
  v16 = v15[12];
  v17 = &v12[v16];
  v18 = &v13[v16];
  v19 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_QWORD *)&v12[v15[13]] = *(_QWORD *)&v13[v15[13]];
  *(_OWORD *)&v12[v15[14]] = *(_OWORD *)&v13[v15[14]];
  v12[v15[15]] = v13[v15[15]];
  *(_OWORD *)&v12[v15[16]] = *(_OWORD *)&v13[v15[16]];
  *(_OWORD *)&v12[v15[17]] = *(_OWORD *)&v13[v15[17]];
  *(_OWORD *)&v12[v15[18]] = *(_OWORD *)&v13[v15[18]];
  *(_OWORD *)&v12[v15[19]] = *(_OWORD *)&v13[v15[19]];
  *(_OWORD *)&v12[v15[20]] = *(_OWORD *)&v13[v15[20]];
  *(_OWORD *)&v12[v15[21]] = *(_OWORD *)&v13[v15[21]];
  *(_OWORD *)&v12[v15[22]] = *(_OWORD *)&v13[v15[22]];
  *(_OWORD *)&v12[v15[23]] = *(_OWORD *)&v13[v15[23]];
  v20 = v15[24];
  v21 = &v12[v20];
  v22 = &v13[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v12[v15[25]] = v13[v15[25]];
  *(_QWORD *)&v12[v15[26]] = *(_QWORD *)&v13[v15[26]];
  *(_OWORD *)&v12[v15[27]] = *(_OWORD *)&v13[v15[27]];
  *(_OWORD *)&v12[v15[28]] = *(_OWORD *)&v13[v15[28]];
  *(_OWORD *)&v12[v15[29]] = *(_OWORD *)&v13[v15[29]];
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100073BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_5;
  if (!*(_QWORD *)(a2 + 40))
  {
    sub_10004A1B8((_QWORD *)a1);
LABEL_5:
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v17;
    v18 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v18;
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v19;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  swift_bridgeObjectRelease(v14);
LABEL_6:
  v20 = *(int *)(a3 + 20);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20 + 8);
  v24 = *(_QWORD *)(a1 + v20 + 8);
  *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(v21 + 8) = v23;
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  v25 = *(_QWORD *)(v22 + 32);
  v26 = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v21 + 32) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(v22 + 48);
  v28 = *(_QWORD *)(v21 + 48);
  *(_QWORD *)(v21 + 40) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v21 + 48) = v27;
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(v21 + 56) = *(_BYTE *)(v22 + 56);
  v29 = *(_QWORD *)(v22 + 72);
  v30 = *(_QWORD *)(v21 + 72);
  *(_QWORD *)(v21 + 64) = *(_QWORD *)(v22 + 64);
  *(_QWORD *)(v21 + 72) = v29;
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(v22 + 88);
  v32 = *(_QWORD *)(v21 + 88);
  *(_QWORD *)(v21 + 80) = *(_QWORD *)(v22 + 80);
  *(_QWORD *)(v21 + 88) = v31;
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(v22 + 104);
  v34 = *(_QWORD *)(v21 + 104);
  *(_QWORD *)(v21 + 96) = *(_QWORD *)(v22 + 96);
  *(_QWORD *)(v21 + 104) = v33;
  swift_bridgeObjectRelease(v34);
  v35 = (int *)type metadata accessor for ClientContext(0);
  v36 = v35[12];
  v37 = v21 + v36;
  v38 = v22 + v36;
  v39 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  *(_QWORD *)(v21 + v35[13]) = *(_QWORD *)(v22 + v35[13]);
  v40 = v35[14];
  v41 = (_QWORD *)(v21 + v40);
  v42 = (uint64_t *)(v22 + v40);
  v44 = *v42;
  v43 = v42[1];
  v45 = v41[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  *(_BYTE *)(v21 + v35[15]) = *(_BYTE *)(v22 + v35[15]);
  v46 = v35[16];
  v47 = (_QWORD *)(v21 + v46);
  v48 = (uint64_t *)(v22 + v46);
  v50 = *v48;
  v49 = v48[1];
  v51 = v47[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  v52 = v35[17];
  v53 = (_QWORD *)(v21 + v52);
  v54 = (uint64_t *)(v22 + v52);
  v56 = *v54;
  v55 = v54[1];
  v57 = v53[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  v58 = v35[18];
  v59 = (_QWORD *)(v21 + v58);
  v60 = (uint64_t *)(v22 + v58);
  v62 = *v60;
  v61 = v60[1];
  v63 = v59[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  v64 = v35[19];
  v65 = (_QWORD *)(v21 + v64);
  v66 = (uint64_t *)(v22 + v64);
  v68 = *v66;
  v67 = v66[1];
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = v35[20];
  v71 = (_QWORD *)(v21 + v70);
  v72 = (uint64_t *)(v22 + v70);
  v74 = *v72;
  v73 = v72[1];
  v75 = v71[1];
  *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease(v75);
  v76 = v35[21];
  v77 = (_QWORD *)(v21 + v76);
  v78 = (uint64_t *)(v22 + v76);
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  v82 = v35[22];
  v83 = (_QWORD *)(v21 + v82);
  v84 = (uint64_t *)(v22 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  v88 = v35[23];
  v89 = (_QWORD *)(v21 + v88);
  v90 = (uint64_t *)(v22 + v88);
  v92 = *v90;
  v91 = v90[1];
  v93 = v89[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease(v93);
  v94 = v35[24];
  v95 = v21 + v94;
  v96 = v22 + v94;
  *(_QWORD *)v95 = *(_QWORD *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  *(_BYTE *)(v21 + v35[25]) = *(_BYTE *)(v22 + v35[25]);
  v97 = v35[26];
  v98 = *(_QWORD *)(v21 + v97);
  *(_QWORD *)(v21 + v97) = *(_QWORD *)(v22 + v97);
  swift_bridgeObjectRelease(v98);
  v99 = v35[27];
  v100 = (_QWORD *)(v21 + v99);
  v101 = (uint64_t *)(v22 + v99);
  v103 = *v101;
  v102 = v101[1];
  v104 = v100[1];
  *v100 = v103;
  v100[1] = v102;
  swift_bridgeObjectRelease(v104);
  v105 = v35[28];
  v106 = (_QWORD *)(v21 + v105);
  v107 = (uint64_t *)(v22 + v105);
  v109 = *v107;
  v108 = v107[1];
  v110 = v106[1];
  *v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease(v110);
  v111 = v35[29];
  v112 = (_QWORD *)(v21 + v111);
  v113 = (uint64_t *)(v22 + v111);
  v115 = *v113;
  v114 = v113[1];
  v116 = v112[1];
  *v112 = v115;
  v112[1] = v114;
  swift_bridgeObjectRelease(v116);
  v117 = *(int *)(a3 + 24);
  v118 = (_QWORD *)(a1 + v117);
  v119 = (uint64_t *)(a2 + v117);
  v121 = *v119;
  v120 = v119[1];
  v122 = v118[1];
  *v118 = v121;
  v118[1] = v120;
  swift_bridgeObjectRelease(v122);
  return a1;
}

uint64_t sub_100073F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100073F78);
}

uint64_t sub_100073F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ClientContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100073FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100074008);
}

uint64_t sub_100074008(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ClientContext(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100074088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000755C4(a1, a2, a3, (uint64_t)&unk_1001F41C0);
}

_OWORD *sub_100074094(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _OWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t, __n128);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = a2[5];
    if (v7)
    {
      *a1 = *(_OWORD *)a2;
      v8 = a2[2];
      *((_QWORD *)v4 + 2) = v8;
      *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 3);
      *((_QWORD *)v4 + 5) = v7;
      *((_BYTE *)v4 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)((char *)v4 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)((char *)v4 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)((char *)v4 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)((char *)v4 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)((char *)v4 + 120) = *(_OWORD *)(a2 + 15);
      v10 = a2[17];
      v9 = a2[18];
      *((_QWORD *)v4 + 17) = v10;
      *((_QWORD *)v4 + 18) = v9;
      v11 = a2[19];
      *((_QWORD *)v4 + 19) = v11;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      a1[6] = *((_OWORD *)a2 + 6);
      a1[7] = v13;
      v14 = *((_OWORD *)a2 + 9);
      a1[8] = *((_OWORD *)a2 + 8);
      a1[9] = v14;
      v15 = *((_OWORD *)a2 + 3);
      a1[2] = *((_OWORD *)a2 + 2);
      a1[3] = v15;
      v16 = *((_OWORD *)a2 + 5);
      a1[4] = *((_OWORD *)a2 + 4);
      a1[5] = v16;
      v17 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v17;
    }
    v18 = *(int *)(a3 + 20);
    v19 = (char *)v4 + v18;
    v20 = (uint64_t)a2 + v18;
    v88 = *(uint64_t *)((char *)a2 + v18 + 8);
    v90 = a3;
    *(_QWORD *)v19 = *(uint64_t *)((char *)a2 + v18);
    *((_QWORD *)v19 + 1) = v88;
    v19[16] = *((_BYTE *)a2 + v18 + 16);
    v86 = *(uint64_t *)((char *)a2 + v18 + 32);
    *((_QWORD *)v19 + 3) = *(uint64_t *)((char *)a2 + v18 + 24);
    *((_QWORD *)v19 + 4) = v86;
    v21 = *(uint64_t *)((char *)a2 + v18 + 48);
    *((_QWORD *)v19 + 5) = *(uint64_t *)((char *)a2 + v18 + 40);
    *((_QWORD *)v19 + 6) = v21;
    v19[56] = *((_BYTE *)a2 + v18 + 56);
    v22 = *(uint64_t *)((char *)a2 + v18 + 72);
    *((_QWORD *)v19 + 8) = *(uint64_t *)((char *)a2 + v18 + 64);
    *((_QWORD *)v19 + 9) = v22;
    v23 = *(uint64_t *)((char *)a2 + v18 + 88);
    *((_QWORD *)v19 + 10) = *(uint64_t *)((char *)a2 + v18 + 80);
    *((_QWORD *)v19 + 11) = v23;
    v24 = *(uint64_t *)((char *)a2 + v18 + 104);
    *((_QWORD *)v19 + 12) = *(uint64_t *)((char *)a2 + v18 + 96);
    *((_QWORD *)v19 + 13) = v24;
    v25 = (int *)type metadata accessor for ClientContext(0);
    v26 = v25[12];
    v82 = v20 + v26;
    v84 = &v19[v26];
    v27 = type metadata accessor for SystemInfo.DeviceLockState(0);
    v80 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v27 - 8) + 16);
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v28 = swift_bridgeObjectRetain(v24);
    v80(v84, v82, v27, v28);
    *(_QWORD *)&v19[v25[13]] = *(_QWORD *)(v20 + v25[13]);
    v29 = v25[14];
    v30 = &v19[v29];
    v31 = (_QWORD *)(v20 + v29);
    v32 = v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v32;
    v19[v25[15]] = *(_BYTE *)(v20 + v25[15]);
    v33 = v25[16];
    v34 = &v19[v33];
    v35 = (_QWORD *)(v20 + v33);
    v89 = v35[1];
    *(_QWORD *)v34 = *v35;
    *((_QWORD *)v34 + 1) = v89;
    v36 = v25[17];
    v37 = &v19[v36];
    v38 = (_QWORD *)(v20 + v36);
    v87 = v38[1];
    *(_QWORD *)v37 = *v38;
    *((_QWORD *)v37 + 1) = v87;
    v39 = v25[18];
    v40 = &v19[v39];
    v41 = (_QWORD *)(v20 + v39);
    v85 = v41[1];
    *(_QWORD *)v40 = *v41;
    *((_QWORD *)v40 + 1) = v85;
    v42 = v25[19];
    v43 = &v19[v42];
    v44 = (_QWORD *)(v20 + v42);
    v83 = v44[1];
    *(_QWORD *)v43 = *v44;
    *((_QWORD *)v43 + 1) = v83;
    v45 = v25[20];
    v46 = &v19[v45];
    v47 = (_QWORD *)(v20 + v45);
    v81 = v47[1];
    *(_QWORD *)v46 = *v47;
    *((_QWORD *)v46 + 1) = v81;
    v48 = v25[21];
    v49 = &v19[v48];
    v50 = (_QWORD *)(v20 + v48);
    v79 = v50[1];
    *(_QWORD *)v49 = *v50;
    *((_QWORD *)v49 + 1) = v79;
    v51 = v25[22];
    v52 = &v19[v51];
    v53 = (_QWORD *)(v20 + v51);
    v54 = v53[1];
    *(_QWORD *)v52 = *v53;
    *((_QWORD *)v52 + 1) = v54;
    v55 = v25[23];
    v56 = &v19[v55];
    v57 = (_QWORD *)(v20 + v55);
    v58 = v57[1];
    *(_QWORD *)v56 = *v57;
    *((_QWORD *)v56 + 1) = v58;
    v59 = v25[24];
    v60 = &v19[v59];
    v61 = v20 + v59;
    *(_QWORD *)v60 = *(_QWORD *)v61;
    v60[8] = *(_BYTE *)(v61 + 8);
    v19[v25[25]] = *(_BYTE *)(v20 + v25[25]);
    v62 = v25[26];
    v63 = *(_QWORD *)(v20 + v62);
    *(_QWORD *)&v19[v62] = v63;
    v64 = v25[27];
    v65 = &v19[v64];
    v66 = (_QWORD *)(v20 + v64);
    v67 = v66[1];
    *(_QWORD *)v65 = *v66;
    *((_QWORD *)v65 + 1) = v67;
    v68 = v25[28];
    v69 = &v19[v68];
    v70 = (_QWORD *)(v20 + v68);
    v71 = v70[1];
    *(_QWORD *)v69 = *v70;
    *((_QWORD *)v69 + 1) = v71;
    v72 = v25[29];
    v73 = &v19[v72];
    v74 = (_QWORD *)(v20 + v72);
    v75 = v74[1];
    *(_QWORD *)v73 = *v74;
    *((_QWORD *)v73 + 1) = v75;
    v76 = *(int *)(v90 + 24);
    v77 = *(uint64_t *)((char *)a2 + v76);
    *(_QWORD *)((char *)v4 + v76) = v77;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v67);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v77);
  }
  return v4;
}

uint64_t sub_100074454(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  uint64_t v9;

  v4 = a1[5];
  if (v4)
  {
    v5 = a1[2];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[19]);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[4]);
  swift_bridgeObjectRelease(v6[6]);
  swift_bridgeObjectRelease(v6[9]);
  swift_bridgeObjectRelease(v6[11]);
  swift_bridgeObjectRelease(v6[13]);
  v7 = (int *)type metadata accessor for ClientContext(0);
  v8 = (char *)v6 + v7[12];
  v9 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[21] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[22] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[23] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[26]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[27] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[28] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[29] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24)));
}

uint64_t sub_1000745E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v6 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    v9 = *(_QWORD *)(a2 + 136);
    v8 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v9;
    *(_QWORD *)(a1 + 144) = v8;
    v10 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v10;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  v16 = *(int *)(a3 + 20);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v86 = *(_QWORD *)(a2 + v16 + 8);
  v88 = a3;
  *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(v17 + 8) = v86;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(a2 + v16 + 16);
  v84 = *(_QWORD *)(a2 + v16 + 32);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(a2 + v16 + 24);
  *(_QWORD *)(v17 + 32) = v84;
  v19 = *(_QWORD *)(a2 + v16 + 48);
  *(_QWORD *)(v17 + 40) = *(_QWORD *)(a2 + v16 + 40);
  *(_QWORD *)(v17 + 48) = v19;
  *(_BYTE *)(v17 + 56) = *(_BYTE *)(a2 + v16 + 56);
  v20 = *(_QWORD *)(a2 + v16 + 72);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(a2 + v16 + 64);
  *(_QWORD *)(v17 + 72) = v20;
  v21 = *(_QWORD *)(a2 + v16 + 88);
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(a2 + v16 + 80);
  *(_QWORD *)(v17 + 88) = v21;
  v22 = *(_QWORD *)(a2 + v16 + 104);
  *(_QWORD *)(v17 + 96) = *(_QWORD *)(a2 + v16 + 96);
  *(_QWORD *)(v17 + 104) = v22;
  v23 = (int *)type metadata accessor for ClientContext(0);
  v24 = v23[12];
  v80 = v18 + v24;
  v82 = v17 + v24;
  v25 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v78 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  v26 = swift_bridgeObjectRetain(v22);
  v78(v82, v80, v25, v26);
  *(_QWORD *)(v17 + v23[13]) = *(_QWORD *)(v18 + v23[13]);
  v27 = v23[14];
  v28 = (_QWORD *)(v17 + v27);
  v29 = (_QWORD *)(v18 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  *(_BYTE *)(v17 + v23[15]) = *(_BYTE *)(v18 + v23[15]);
  v31 = v23[16];
  v32 = (_QWORD *)(v17 + v31);
  v33 = (_QWORD *)(v18 + v31);
  v87 = v33[1];
  *v32 = *v33;
  v32[1] = v87;
  v34 = v23[17];
  v35 = (_QWORD *)(v17 + v34);
  v36 = (_QWORD *)(v18 + v34);
  v85 = v36[1];
  *v35 = *v36;
  v35[1] = v85;
  v37 = v23[18];
  v38 = (_QWORD *)(v17 + v37);
  v39 = (_QWORD *)(v18 + v37);
  v83 = v39[1];
  *v38 = *v39;
  v38[1] = v83;
  v40 = v23[19];
  v41 = (_QWORD *)(v17 + v40);
  v42 = (_QWORD *)(v18 + v40);
  v81 = v42[1];
  *v41 = *v42;
  v41[1] = v81;
  v43 = v23[20];
  v44 = (_QWORD *)(v17 + v43);
  v45 = (_QWORD *)(v18 + v43);
  v79 = v45[1];
  *v44 = *v45;
  v44[1] = v79;
  v46 = v23[21];
  v47 = (_QWORD *)(v17 + v46);
  v48 = (_QWORD *)(v18 + v46);
  v77 = v48[1];
  *v47 = *v48;
  v47[1] = v77;
  v49 = v23[22];
  v50 = (_QWORD *)(v17 + v49);
  v51 = (_QWORD *)(v18 + v49);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = v23[23];
  v54 = (_QWORD *)(v17 + v53);
  v55 = (_QWORD *)(v18 + v53);
  v56 = v55[1];
  *v54 = *v55;
  v54[1] = v56;
  v57 = v23[24];
  v58 = v17 + v57;
  v59 = v18 + v57;
  *(_QWORD *)v58 = *(_QWORD *)v59;
  *(_BYTE *)(v58 + 8) = *(_BYTE *)(v59 + 8);
  *(_BYTE *)(v17 + v23[25]) = *(_BYTE *)(v18 + v23[25]);
  v60 = v23[26];
  v61 = *(_QWORD *)(v18 + v60);
  *(_QWORD *)(v17 + v60) = v61;
  v62 = v23[27];
  v63 = (_QWORD *)(v17 + v62);
  v64 = (_QWORD *)(v18 + v62);
  v65 = v64[1];
  *v63 = *v64;
  v63[1] = v65;
  v66 = v23[28];
  v67 = (_QWORD *)(v17 + v66);
  v68 = (_QWORD *)(v18 + v66);
  v69 = v68[1];
  *v67 = *v68;
  v67[1] = v69;
  v70 = v23[29];
  v71 = (_QWORD *)(v17 + v70);
  v72 = (_QWORD *)(v18 + v70);
  v73 = v72[1];
  *v71 = *v72;
  v71[1] = v73;
  v74 = *(int *)(v88 + 24);
  v75 = *(_QWORD *)(a2 + v74);
  *(_QWORD *)(a1 + v74) = v75;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v75);
  return a1;
}

uint64_t sub_10007497C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v10);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v11 = *(_QWORD *)(a2 + 136);
      v12 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v13 = *(_QWORD *)(a2 + 152);
      v14 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      sub_10004A1B8((_QWORD *)a1);
      v19 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v19;
      v20 = *(_OWORD *)(a2 + 80);
      v22 = *(_OWORD *)(a2 + 32);
      v21 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v20;
      *(_OWORD *)(a1 + 32) = v22;
      *(_OWORD *)(a1 + 48) = v21;
      v23 = *(_OWORD *)(a2 + 144);
      v25 = *(_OWORD *)(a2 + 96);
      v24 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v23;
      *(_OWORD *)(a1 + 96) = v25;
      *(_OWORD *)(a1 + 112) = v24;
    }
  }
  else if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v16;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v17 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v17;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v18 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v18;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v26;
    v27 = *(_OWORD *)(a2 + 32);
    v28 = *(_OWORD *)(a2 + 48);
    v29 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v29;
    *(_OWORD *)(a1 + 32) = v27;
    *(_OWORD *)(a1 + 48) = v28;
    v30 = *(_OWORD *)(a2 + 96);
    v31 = *(_OWORD *)(a2 + 112);
    v32 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v32;
    *(_OWORD *)(a1 + 96) = v30;
    *(_OWORD *)(a1 + 112) = v31;
  }
  v33 = *(int *)(a3 + 20);
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_QWORD *)v34 = *(_QWORD *)(a2 + v33);
  v36 = *(_QWORD *)(a2 + v33 + 8);
  v37 = *(_QWORD *)(a1 + v33 + 8);
  *(_QWORD *)(v34 + 8) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_BYTE *)(v34 + 16) = *(_BYTE *)(v35 + 16);
  *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
  v38 = *(_QWORD *)(v35 + 32);
  v39 = *(_QWORD *)(v34 + 32);
  *(_QWORD *)(v34 + 32) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  *(_QWORD *)(v34 + 40) = *(_QWORD *)(v35 + 40);
  v40 = *(_QWORD *)(v35 + 48);
  v41 = *(_QWORD *)(v34 + 48);
  *(_QWORD *)(v34 + 48) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *(_BYTE *)(v34 + 56) = *(_BYTE *)(v35 + 56);
  *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
  v42 = *(_QWORD *)(v35 + 72);
  v43 = *(_QWORD *)(v34 + 72);
  *(_QWORD *)(v34 + 72) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *(_QWORD *)(v34 + 80) = *(_QWORD *)(v35 + 80);
  v44 = *(_QWORD *)(v35 + 88);
  v45 = *(_QWORD *)(v34 + 88);
  *(_QWORD *)(v34 + 88) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_QWORD *)(v34 + 96) = *(_QWORD *)(v35 + 96);
  v46 = *(_QWORD *)(v35 + 104);
  v47 = *(_QWORD *)(v34 + 104);
  *(_QWORD *)(v34 + 104) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = (int *)type metadata accessor for ClientContext(0);
  v49 = v48[12];
  v50 = v34 + v49;
  v51 = v35 + v49;
  v52 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v50, v51, v52);
  *(_QWORD *)(v34 + v48[13]) = *(_QWORD *)(v35 + v48[13]);
  v53 = v48[14];
  v54 = (_QWORD *)(v34 + v53);
  v55 = (_QWORD *)(v35 + v53);
  *v54 = *v55;
  v56 = v55[1];
  v57 = v54[1];
  v54[1] = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *(_BYTE *)(v34 + v48[15]) = *(_BYTE *)(v35 + v48[15]);
  v58 = v48[16];
  v59 = (_QWORD *)(v34 + v58);
  v60 = (_QWORD *)(v35 + v58);
  *v59 = *v60;
  v61 = v60[1];
  v62 = v59[1];
  v59[1] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  v63 = v48[17];
  v64 = (_QWORD *)(v34 + v63);
  v65 = (_QWORD *)(v35 + v63);
  *v64 = *v65;
  v66 = v65[1];
  v67 = v64[1];
  v64[1] = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  v68 = v48[18];
  v69 = (_QWORD *)(v34 + v68);
  v70 = (_QWORD *)(v35 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v72 = v69[1];
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v73 = v48[19];
  v74 = (_QWORD *)(v34 + v73);
  v75 = (_QWORD *)(v35 + v73);
  *v74 = *v75;
  v76 = v75[1];
  v77 = v74[1];
  v74[1] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  v78 = v48[20];
  v79 = (_QWORD *)(v34 + v78);
  v80 = (_QWORD *)(v35 + v78);
  *v79 = *v80;
  v81 = v80[1];
  v82 = v79[1];
  v79[1] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  v83 = v48[21];
  v84 = (_QWORD *)(v34 + v83);
  v85 = (_QWORD *)(v35 + v83);
  *v84 = *v85;
  v86 = v85[1];
  v87 = v84[1];
  v84[1] = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  v88 = v48[22];
  v89 = (_QWORD *)(v34 + v88);
  v90 = (_QWORD *)(v35 + v88);
  *v89 = *v90;
  v91 = v90[1];
  v92 = v89[1];
  v89[1] = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v92);
  v93 = v48[23];
  v94 = (_QWORD *)(v34 + v93);
  v95 = (_QWORD *)(v35 + v93);
  *v94 = *v95;
  v96 = v95[1];
  v97 = v94[1];
  v94[1] = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  v98 = v48[24];
  v99 = v34 + v98;
  v100 = (uint64_t *)(v35 + v98);
  v101 = *v100;
  *(_BYTE *)(v99 + 8) = *((_BYTE *)v100 + 8);
  *(_QWORD *)v99 = v101;
  *(_BYTE *)(v34 + v48[25]) = *(_BYTE *)(v35 + v48[25]);
  v102 = v48[26];
  v103 = *(_QWORD *)(v34 + v102);
  v104 = *(_QWORD *)(v35 + v102);
  *(_QWORD *)(v34 + v102) = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v103);
  v105 = v48[27];
  v106 = (_QWORD *)(v34 + v105);
  v107 = (_QWORD *)(v35 + v105);
  *v106 = *v107;
  v108 = v107[1];
  v109 = v106[1];
  v106[1] = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  v110 = v48[28];
  v111 = (_QWORD *)(v34 + v110);
  v112 = (_QWORD *)(v35 + v110);
  *v111 = *v112;
  v113 = v112[1];
  v114 = v111[1];
  v111[1] = v113;
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRelease(v114);
  v115 = v48[29];
  v116 = (_QWORD *)(v34 + v115);
  v117 = (_QWORD *)(v35 + v115);
  *v116 = *v117;
  v118 = v117[1];
  v119 = v116[1];
  v116[1] = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease(v119);
  v120 = *(int *)(a3 + 24);
  v121 = *(_QWORD *)(a2 + v120);
  v122 = *(_QWORD *)(a1 + v120);
  *(_QWORD *)(a1 + v120) = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  return a1;
}

_OWORD *sub_100074F6C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  v11 = *(int *)(a3 + 20);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_OWORD *)v12 = *(_OWORD *)((char *)a2 + v11);
  v12[16] = *((_BYTE *)a2 + v11 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)((char *)a2 + v11 + 40);
  v12[56] = *((_BYTE *)a2 + v11 + 56);
  v14 = *(_OWORD *)((char *)a2 + v11 + 80);
  *((_OWORD *)v12 + 4) = *(_OWORD *)((char *)a2 + v11 + 64);
  *((_OWORD *)v12 + 5) = v14;
  *((_OWORD *)v12 + 6) = *(_OWORD *)((char *)a2 + v11 + 96);
  v15 = (int *)type metadata accessor for ClientContext(0);
  v16 = v15[12];
  v17 = &v12[v16];
  v18 = &v13[v16];
  v19 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_QWORD *)&v12[v15[13]] = *(_QWORD *)&v13[v15[13]];
  *(_OWORD *)&v12[v15[14]] = *(_OWORD *)&v13[v15[14]];
  v12[v15[15]] = v13[v15[15]];
  *(_OWORD *)&v12[v15[16]] = *(_OWORD *)&v13[v15[16]];
  *(_OWORD *)&v12[v15[17]] = *(_OWORD *)&v13[v15[17]];
  *(_OWORD *)&v12[v15[18]] = *(_OWORD *)&v13[v15[18]];
  *(_OWORD *)&v12[v15[19]] = *(_OWORD *)&v13[v15[19]];
  *(_OWORD *)&v12[v15[20]] = *(_OWORD *)&v13[v15[20]];
  *(_OWORD *)&v12[v15[21]] = *(_OWORD *)&v13[v15[21]];
  *(_OWORD *)&v12[v15[22]] = *(_OWORD *)&v13[v15[22]];
  *(_OWORD *)&v12[v15[23]] = *(_OWORD *)&v13[v15[23]];
  v20 = v15[24];
  v21 = &v12[v20];
  v22 = &v13[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v12[v15[25]] = v13[v15[25]];
  *(_QWORD *)&v12[v15[26]] = *(_QWORD *)&v13[v15[26]];
  *(_OWORD *)&v12[v15[27]] = *(_OWORD *)&v13[v15[27]];
  *(_OWORD *)&v12[v15[28]] = *(_OWORD *)&v13[v15[28]];
  *(_OWORD *)&v12[v15[29]] = *(_OWORD *)&v13[v15[29]];
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100075138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_5;
  if (!*(_QWORD *)(a2 + 40))
  {
    sub_10004A1B8((_QWORD *)a1);
LABEL_5:
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v17;
    v18 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v18;
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v19;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  swift_bridgeObjectRelease(v14);
LABEL_6:
  v20 = *(int *)(a3 + 20);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20 + 8);
  v24 = *(_QWORD *)(a1 + v20 + 8);
  *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(v21 + 8) = v23;
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  v25 = *(_QWORD *)(v22 + 32);
  v26 = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v21 + 32) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(v22 + 48);
  v28 = *(_QWORD *)(v21 + 48);
  *(_QWORD *)(v21 + 40) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v21 + 48) = v27;
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(v21 + 56) = *(_BYTE *)(v22 + 56);
  v29 = *(_QWORD *)(v22 + 72);
  v30 = *(_QWORD *)(v21 + 72);
  *(_QWORD *)(v21 + 64) = *(_QWORD *)(v22 + 64);
  *(_QWORD *)(v21 + 72) = v29;
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(v22 + 88);
  v32 = *(_QWORD *)(v21 + 88);
  *(_QWORD *)(v21 + 80) = *(_QWORD *)(v22 + 80);
  *(_QWORD *)(v21 + 88) = v31;
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(v22 + 104);
  v34 = *(_QWORD *)(v21 + 104);
  *(_QWORD *)(v21 + 96) = *(_QWORD *)(v22 + 96);
  *(_QWORD *)(v21 + 104) = v33;
  swift_bridgeObjectRelease(v34);
  v35 = (int *)type metadata accessor for ClientContext(0);
  v36 = v35[12];
  v37 = v21 + v36;
  v38 = v22 + v36;
  v39 = type metadata accessor for SystemInfo.DeviceLockState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  *(_QWORD *)(v21 + v35[13]) = *(_QWORD *)(v22 + v35[13]);
  v40 = v35[14];
  v41 = (_QWORD *)(v21 + v40);
  v42 = (uint64_t *)(v22 + v40);
  v44 = *v42;
  v43 = v42[1];
  v45 = v41[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  *(_BYTE *)(v21 + v35[15]) = *(_BYTE *)(v22 + v35[15]);
  v46 = v35[16];
  v47 = (_QWORD *)(v21 + v46);
  v48 = (uint64_t *)(v22 + v46);
  v50 = *v48;
  v49 = v48[1];
  v51 = v47[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  v52 = v35[17];
  v53 = (_QWORD *)(v21 + v52);
  v54 = (uint64_t *)(v22 + v52);
  v56 = *v54;
  v55 = v54[1];
  v57 = v53[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  v58 = v35[18];
  v59 = (_QWORD *)(v21 + v58);
  v60 = (uint64_t *)(v22 + v58);
  v62 = *v60;
  v61 = v60[1];
  v63 = v59[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  v64 = v35[19];
  v65 = (_QWORD *)(v21 + v64);
  v66 = (uint64_t *)(v22 + v64);
  v68 = *v66;
  v67 = v66[1];
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = v35[20];
  v71 = (_QWORD *)(v21 + v70);
  v72 = (uint64_t *)(v22 + v70);
  v74 = *v72;
  v73 = v72[1];
  v75 = v71[1];
  *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease(v75);
  v76 = v35[21];
  v77 = (_QWORD *)(v21 + v76);
  v78 = (uint64_t *)(v22 + v76);
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  v82 = v35[22];
  v83 = (_QWORD *)(v21 + v82);
  v84 = (uint64_t *)(v22 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  v88 = v35[23];
  v89 = (_QWORD *)(v21 + v88);
  v90 = (uint64_t *)(v22 + v88);
  v92 = *v90;
  v91 = v90[1];
  v93 = v89[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease(v93);
  v94 = v35[24];
  v95 = v21 + v94;
  v96 = v22 + v94;
  *(_QWORD *)v95 = *(_QWORD *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  *(_BYTE *)(v21 + v35[25]) = *(_BYTE *)(v22 + v35[25]);
  v97 = v35[26];
  v98 = *(_QWORD *)(v21 + v97);
  *(_QWORD *)(v21 + v97) = *(_QWORD *)(v22 + v97);
  swift_bridgeObjectRelease(v98);
  v99 = v35[27];
  v100 = (_QWORD *)(v21 + v99);
  v101 = (uint64_t *)(v22 + v99);
  v103 = *v101;
  v102 = v101[1];
  v104 = v100[1];
  *v100 = v103;
  v100[1] = v102;
  swift_bridgeObjectRelease(v104);
  v105 = v35[28];
  v106 = (_QWORD *)(v21 + v105);
  v107 = (uint64_t *)(v22 + v105);
  v109 = *v107;
  v108 = v107[1];
  v110 = v106[1];
  *v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease(v110);
  v111 = v35[29];
  v112 = (_QWORD *)(v21 + v111);
  v113 = (uint64_t *)(v22 + v111);
  v115 = *v113;
  v114 = v113[1];
  v116 = v112[1];
  *v112 = v115;
  v112[1] = v114;
  swift_bridgeObjectRelease(v116);
  v117 = *(int *)(a3 + 24);
  v118 = *(_QWORD *)(a1 + v117);
  *(_QWORD *)(a1 + v117) = *(_QWORD *)(a2 + v117);
  swift_bridgeObjectRelease(v118);
  return a1;
}

uint64_t sub_1000754A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000754AC);
}

uint64_t sub_1000754AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ClientContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10007552C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100075538);
}

uint64_t sub_100075538(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ClientContext(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_1000755B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000755C4(a1, a2, a3, (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

uint64_t sub_1000755C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[3];

  v8[0] = &unk_1001F41A8;
  result = type metadata accessor for ClientContext(319);
  if (v7 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(result - 8) + 64;
    v8[2] = a4;
    swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SavePreferencesRequest()
{
  return &type metadata for SavePreferencesRequest;
}

unint64_t sub_100075650()
{
  unint64_t result;

  result = qword_1002611E8;
  if (!qword_1002611E8)
  {
    result = swift_getWitnessTable(&unk_1001F4218, &type metadata for SavePreferencesRequest);
    atomic_store(result, (unint64_t *)&qword_1002611E8);
  }
  return result;
}

uint64_t sub_100075694(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004EA8(&qword_1002611F0, type metadata accessor for SavePreferencesRequestContent, (uint64_t)&unk_1001F4288);
  result = sub_100004EA8(&qword_100261080, type metadata accessor for SavePreferencesRequestContent, (uint64_t)&unk_1001F4338);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000756F0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004EA8(&qword_1002611F8, type metadata accessor for SaveMeDevicePreferencesRequestContent, (uint64_t)&unk_1001F42CC);
  result = sub_100004EA8(&qword_1002610B0, type metadata accessor for SaveMeDevicePreferencesRequestContent, (uint64_t)&unk_1001F4310);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100075750()
{
  unint64_t result;

  result = qword_100261200;
  if (!qword_100261200)
  {
    result = swift_getWitnessTable(&unk_1001F4240, &type metadata for SavePreferencesRequest);
    atomic_store(result, (unint64_t *)&qword_100261200);
  }
  return result;
}

unint64_t sub_100075794()
{
  unint64_t result;

  result = qword_100261210;
  if (!qword_100261210)
  {
    result = swift_getWitnessTable(&unk_1001F455C, &type metadata for SavePreferencesRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100261210);
  }
  return result;
}

unint64_t sub_1000757D8()
{
  unint64_t result;

  result = qword_100261230;
  if (!qword_100261230)
  {
    result = swift_getWitnessTable(&unk_1001F450C, &type metadata for SaveMeDevicePreferencesRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100261230);
  }
  return result;
}

uint64_t sub_10007581C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10003C1FC(&qword_100261218);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SaveMeDevicePreferencesRequestContent.CodingKeys()
{
  return &type metadata for SaveMeDevicePreferencesRequestContent.CodingKeys;
}

uint64_t _s13findmylocated37SaveMeDevicePreferencesRequestContentV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000758E0 + 4 * byte_1001F4175[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100075914 + 4 * byte_1001F4170[v4]))();
}

uint64_t sub_100075914(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007591C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100075924);
  return result;
}

uint64_t sub_100075930(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100075938);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10007593C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100075944(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SavePreferencesRequestContent.CodingKeys()
{
  return &type metadata for SavePreferencesRequestContent.CodingKeys;
}

unint64_t sub_100075964()
{
  unint64_t result;

  result = qword_100261250;
  if (!qword_100261250)
  {
    result = swift_getWitnessTable(&unk_1001F442C, &type metadata for SavePreferencesRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100261250);
  }
  return result;
}

unint64_t sub_1000759AC()
{
  unint64_t result;

  result = qword_100261258;
  if (!qword_100261258)
  {
    result = swift_getWitnessTable(&unk_1001F44E4, &type metadata for SaveMeDevicePreferencesRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100261258);
  }
  return result;
}

unint64_t sub_1000759F4()
{
  unint64_t result;

  result = qword_100261260;
  if (!qword_100261260)
  {
    result = swift_getWitnessTable(&unk_1001F4454, &type metadata for SaveMeDevicePreferencesRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100261260);
  }
  return result;
}

unint64_t sub_100075A3C()
{
  unint64_t result;

  result = qword_100261268;
  if (!qword_100261268)
  {
    result = swift_getWitnessTable(&unk_1001F447C, &type metadata for SaveMeDevicePreferencesRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100261268);
  }
  return result;
}

unint64_t sub_100075A84()
{
  unint64_t result;

  result = qword_100261270;
  if (!qword_100261270)
  {
    result = swift_getWitnessTable(&unk_1001F439C, &type metadata for SavePreferencesRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100261270);
  }
  return result;
}

unint64_t sub_100075ACC()
{
  unint64_t result;

  result = qword_100261278;
  if (!qword_100261278)
  {
    result = swift_getWitnessTable(&unk_1001F43C4, &type metadata for SavePreferencesRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100261278);
  }
  return result;
}

uint64_t sub_100075B10(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL)
  {
    v5 = 0xED0000747865746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43726576726573, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    v7 = 0xED0000747865746ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656369766544656DLL && a2 == 0xEA00000000006449)
  {
    swift_bridgeObjectRelease(0xEA00000000006449);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656369766544656DLL, 0xEA00000000006449, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100075CB0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL)
  {
    v5 = 0xED0000747865746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43726576726573, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    v7 = 0xED0000747865746ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7366657270 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7366657270, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100075E54()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027AAB8);
  sub_100037A9C(v0, (uint64_t)qword_10027AAB8);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0x53746E756F636341, 0xEE00656369767265);
}

uint64_t sub_100075ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027AAD0);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027AAD0);
  if (qword_10025F898 != -1)
    swift_once(&qword_10025F898, sub_100075E54);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027AAB8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100075F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for Account(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for AccountService.State(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100025C70(v1, (uint64_t)v5, v6);
  v7 = sub_100037A5C(&qword_1002614A8);
  v8 = (char *)sub_100076054
     + 4
     * byte_1001F45B0[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 3, v7)];
  __asm { BR              X10 }
}

uint64_t sub_100076054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v0);
  *(_QWORD *)(v4 - 64) = 0;
  *(_QWORD *)(v4 - 56) = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  v5 = *(_QWORD *)(v4 - 56);
  *(_QWORD *)(v4 - 64) = *(_QWORD *)(v4 - 64);
  *(_QWORD *)(v4 - 56) = v5;
  v6._object = (void *)0x80000001001FD630;
  v6._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v6);
  ((void (*)(uint64_t, uint64_t, uint64_t, void *, void *))_print_unlocked<A, B>(_:_:))(v2, v4 - 64, v0, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8 = *(_QWORD *)(v4 - 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
  return v8;
}

unint64_t sub_100076144(unint64_t a1)
{
  unint64_t result;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  unint64_t v8;
  _QWORD v9[2];

  result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 0x74756F656D69742ELL;
      break;
    case 2uLL:
      result = 0x6F707075736E752ELL;
      break;
    case 3uLL:
      result = 0xD000000000000013;
      break;
    case 4uLL:
    case 7uLL:
      result = 0xD00000000000001BLL;
      break;
    case 5uLL:
      result = 0xD000000000000012;
      break;
    case 6uLL:
      result = 0xD000000000000016;
      break;
    default:
      strcpy((char *)v9, ".underlying(");
      BYTE5(v9[1]) = 0;
      HIWORD(v9[1]) = -5120;
      v8 = a1;
      sub_10007EC18(a1);
      swift_errorRetain(a1);
      v4 = sub_100037A5C(&qword_100265260);
      v5._countAndFlagsBits = String.init<A>(describing:)(&v8, v4);
      object = v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease(object);
      v7._countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      sub_10007EC28(a1);
      result = v9[0];
      break;
  }
  return result;
}

unint64_t sub_1000762DC()
{
  unint64_t *v0;

  return sub_100076144(*v0);
}

uint64_t sub_1000762E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v0;
  v3 = type metadata accessor for UUID(0);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v0);
  strcpy((char *)(v0 + 112), "AccountService");
  *(_BYTE *)(v0 + 127) = -18;
  v5 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v5);
  *(_QWORD *)(v0 + 128) = WorkItemQueue.__allocating_init(identifier:)(v4);
  v6 = v0 + OBJC_IVAR____TtC13findmylocated14AccountService_state;
  v7 = sub_100037A5C(&qword_1002614A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 3, v7);
  v8 = v2 + OBJC_IVAR____TtC13findmylocated14AccountService__account;
  v9 = type metadata accessor for Account(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13findmylocated14AccountService_stateContinuations) = _swiftEmptyDictionarySingleton;
  v10 = v2 + OBJC_IVAR____TtC13findmylocated14AccountService_cloudKitAccountStateStream;
  v11 = sub_100037A5C((uint64_t *)&unk_100261318);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13findmylocated14AccountService_initContinuations) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC13findmylocated14AccountService_isInitialized) = 0;
  swift_task_dealloc(v4);
  return sub_10007E9D0(*(uint64_t (**)(uint64_t))(v1 + 8), v1, v2);
}

uint64_t sub_100076460()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[205] = v0;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_1002615D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[211] = swift_task_alloc(v2);
  v1[217] = swift_task_alloc(v2);
  v3 = type metadata accessor for AccountService.State(0);
  v1[218] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100037A5C(&qword_1002615D8);
  v1[219] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[220] = v5;
  v1[221] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260580) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[222] = swift_task_alloc(v6);
  v1[223] = swift_task_alloc(v6);
  v7 = type metadata accessor for Account(0);
  v1[224] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[225] = v8;
  v1[226] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100076574, v0, 0);
}

uint64_t sub_100076574()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t **v6;

  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AAD0);
  v0[227] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AccountService run", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (uint64_t **)swift_task_alloc(dword_100261304);
  v0[228] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = (uint64_t *)sub_10007667C;
  return sub_10007A7D0(v0[226]);
}

uint64_t sub_10007667C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1824);
  *(_QWORD *)(*v1 + 1832) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100076EDC;
  else
    v4 = sub_1000766E0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 1640), 0);
}

uint64_t sub_1000766E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, uint64_t);
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void (*v31)(uint64_t, _QWORD, uint64_t);

  v1 = v0[225];
  v2 = v0[224];
  v3 = v0[223];
  v4 = v0[222];
  v5 = v0[205];
  v6 = *(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 16);
  v6(v3, v0[226], v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v3, 0, 1, v2);
  sub_10000EF6C(v3, v4, &qword_100260580);
  v7 = v5 + OBJC_IVAR____TtC13findmylocated14AccountService__account;
  swift_beginAccess(v5 + OBJC_IVAR____TtC13findmylocated14AccountService__account, v0 + 183, 33, 0);
  sub_10007E710(v4, v7, &qword_100260580);
  v8 = swift_endAccess(v0 + 183);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Successfully updated account info", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }
  v12 = v0[205];

  v13 = (uint64_t *)(v12 + OBJC_IVAR____TtC13findmylocated14AccountService_initContinuations);
  swift_beginAccess(v13, v0 + 191, 1, 0);
  v14 = *v13;
  v15 = *(_QWORD *)(*v13 + 16);
  if (v15)
  {
    v31 = v6;
    v16 = v0[220];
    v17 = v14 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v18 = *(_QWORD *)(v16 + 72);
    v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v16 + 16);
    v20 = swift_bridgeObjectRetain(v14);
    do
    {
      v21 = v0[221];
      v22 = v0[219];
      v23 = v19(v21, v17, v22, v20);
      CheckedContinuation.resume(returning:)(v23, v22);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v21, v22);
      v17 += v18;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease(v14);
    v14 = *v13;
    v6 = v31;
  }
  v24 = v0[226];
  v25 = v0[224];
  v26 = v0[218];
  v27 = v0[205];
  *v13 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(v27 + OBJC_IVAR____TtC13findmylocated14AccountService_isInitialized) = 1;
  v6(v26, v24, v25);
  v28 = sub_100037A5C(&qword_1002614A8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v26, 0, 3, v28);
  v29 = (_QWORD *)swift_task_alloc(dword_1002615AC);
  v0[230] = v29;
  *v29 = v0;
  v29[1] = sub_100076970;
  return sub_1000773C4(v0[218], 0);
}

uint64_t sub_100076970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1744);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1640);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1840));
  sub_100024990(v1, type metadata accessor for AccountService.State);
  return swift_task_switch(sub_1000769DC, v2, 0);
}

uint64_t sub_1000769DC()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD))(v0[225] + 8))(v0[226], v0[224]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[231] = v1;
  *v1 = v0;
  v1[1] = sub_100076A38;
  return daemon.getter();
}

uint64_t sub_100076A38(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 1848);
  v5 = *v1;
  *(_QWORD *)(*v1 + 1856) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 1864) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for CloudStorageService();
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260F88, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_1001FBB8C);
  *v6 = v5;
  v6[1] = sub_100076B20;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100076B20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1864);
  v4[234] = a1;
  v4[235] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[205];
    v7 = sub_100077158;
  }
  else
  {
    swift_release(v4[232]);
    v7 = sub_100076BA0;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100076BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 1888) = *(_QWORD *)(*(_QWORD *)(v0 + 1872) + 136);
  v1 = type metadata accessor for CloudKitStorage(0);
  v2 = sub_100004EA8(&qword_1002615E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudKitStorage, (uint64_t)&protocol conformance descriptor for CloudKitStorage);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_100076C1C, v3, v4);
}

uint64_t sub_100076C1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 1640);
  dispatch thunk of CloudKitStorage.stateStream()();
  return swift_task_switch(sub_100076C60, v1, 0);
}

uint64_t sub_100076C60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[217];
  v2 = v0[211];
  v3 = v0[205];
  v4 = sub_100037A5C((uint64_t *)&unk_100261318);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_10000EF6C(v1, v2, &qword_1002615D0);
  v5 = v3 + OBJC_IVAR____TtC13findmylocated14AccountService_cloudKitAccountStateStream;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13findmylocated14AccountService_cloudKitAccountStateStream, v0 + 175, 33, 0);
  sub_10007E710(v2, v5, &qword_1002615D0);
  swift_endAccess(v0 + 175);
  swift_retain_n(v3, 2);
  swift_asyncLet_begin(v0 + 82, 0, (char *)&type metadata for () + 8, &unk_1002615F0, v3);
  swift_retain(v3);
  swift_asyncLet_begin(v0 + 2, 0, (char *)&type metadata for () + 8, &unk_100261600, v3);
  return swift_asyncLet_get_throwing(v0 + 82, v6, sub_100076D98, v0 + 178);
}

uint64_t sub_100076D98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3 + 16;
  *(_QWORD *)(v3 + 1896) = v2;
  if (v2)
    return swift_asyncLet_finish(v4, a2, sub_1000771F4, v3 + 1488);
  else
    return swift_asyncLet_get_throwing(v4, a2, sub_100076DC4, v3 + 1360);
}

uint64_t sub_100076DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  *(_QWORD *)(v3 + 1904) = v2;
  if (v2)
  {
    v4 = v3 + 1648;
    v5 = sub_1000772DC;
  }
  else
  {
    v4 = v3 + 1600;
    v5 = sub_100076DF0;
  }
  return swift_asyncLet_finish(v3 + 16, a2, v5, v4);
}

uint64_t sub_100076DF0()
{
  uint64_t v0;

  return swift_task_switch(sub_100076E04, *(_QWORD *)(v0 + 1640), 0);
}

uint64_t sub_100076E04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_100076E18, v2 + 1296);
}

uint64_t sub_100076E18()
{
  uint64_t v0;

  return swift_task_switch(sub_100076E2C, *(_QWORD *)(v0 + 1640), 0);
}

uint64_t sub_100076E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 1808);
  v2 = *(_QWORD *)(v0 + 1784);
  v3 = *(_QWORD *)(v0 + 1776);
  v4 = *(_QWORD *)(v0 + 1768);
  v5 = *(_QWORD *)(v0 + 1744);
  v6 = *(_QWORD *)(v0 + 1736);
  v7 = *(_QWORD *)(v0 + 1688);
  v8 = *(_QWORD *)(v0 + 1640);
  swift_release(*(_QWORD *)(v0 + 1872));
  swift_release_n(v8, 3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100076EDC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v1 = v0 + 167;
  v2 = v0[229];
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[229];
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138543362;
    swift_errorRetain(v6);
    v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    v0[199] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 199, v0 + 200, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to update account info due to %{public}@", v7, 0xCu);
    v10 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v8, 1, v10);
    v11 = v8;
    v1 = v0 + 167;
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    v12 = v0[229];
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  v13 = (_QWORD *)(v0[205] + OBJC_IVAR____TtC13findmylocated14AccountService_initContinuations);
  swift_beginAccess(v13, v1, 1, 0);
  v14 = *v13;
  v15 = *(_QWORD *)(*v13 + 16);
  if (v15)
  {
    v16 = v0[220];
    v17 = v14 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v18 = *(_QWORD *)(v16 + 72);
    v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v16 + 16);
    v20 = swift_bridgeObjectRetain(*v13);
    do
    {
      v21 = v0[221];
      v22 = v0[219];
      v23 = v19(v21, v17, v22, v20);
      CheckedContinuation.resume(returning:)(v23, v22);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v21, v22);
      v17 += v18;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease(v14);
    v14 = *v13;
  }
  v24 = v0[229];
  v25 = v0[205];
  *v13 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v14);
  swift_errorRelease(v24);
  *(_BYTE *)(v25 + OBJC_IVAR____TtC13findmylocated14AccountService_isInitialized) = 1;
  v26 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[231] = v26;
  *v26 = v0;
  v26[1] = sub_100076A38;
  return daemon.getter();
}

uint64_t sub_100077158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(v0 + 1856));
  v1 = *(_QWORD *)(v0 + 1784);
  v2 = *(_QWORD *)(v0 + 1776);
  v3 = *(_QWORD *)(v0 + 1768);
  v4 = *(_QWORD *)(v0 + 1744);
  v5 = *(_QWORD *)(v0 + 1736);
  v6 = *(_QWORD *)(v0 + 1688);
  swift_task_dealloc(*(_QWORD *)(v0 + 1808));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000771F4()
{
  uint64_t v0;

  return swift_task_switch(sub_100077208, *(_QWORD *)(v0 + 1640), 0);
}

uint64_t sub_100077208(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_10007721C, v2 + 1552);
}

uint64_t sub_10007721C()
{
  uint64_t v0;

  return swift_task_switch(sub_100077230, *(_QWORD *)(v0 + 1640), 0);
}

uint64_t sub_100077230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 1640);
  swift_release(*(_QWORD *)(v0 + 1872));
  swift_release_n(v1, 3);
  v2 = *(_QWORD *)(v0 + 1784);
  v3 = *(_QWORD *)(v0 + 1776);
  v4 = *(_QWORD *)(v0 + 1768);
  v5 = *(_QWORD *)(v0 + 1744);
  v6 = *(_QWORD *)(v0 + 1736);
  v7 = *(_QWORD *)(v0 + 1688);
  swift_task_dealloc(*(_QWORD *)(v0 + 1808));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000772DC()
{
  uint64_t v0;

  return swift_task_switch(sub_1000772F0, *(_QWORD *)(v0 + 1640), 0);
}

uint64_t sub_1000772F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_100077304, v2 + 1696);
}

uint64_t sub_100077304()
{
  uint64_t v0;

  return swift_task_switch(sub_100077318, *(_QWORD *)(v0 + 1640), 0);
}

uint64_t sub_100077318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 1640);
  swift_release(*(_QWORD *)(v0 + 1872));
  swift_release_n(v1, 3);
  v2 = *(_QWORD *)(v0 + 1784);
  v3 = *(_QWORD *)(v0 + 1776);
  v4 = *(_QWORD *)(v0 + 1768);
  v5 = *(_QWORD *)(v0 + 1744);
  v6 = *(_QWORD *)(v0 + 1736);
  v7 = *(_QWORD *)(v0 + 1688);
  swift_task_dealloc(*(_QWORD *)(v0 + 1808));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000773C4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_BYTE *)(v3 + 232) = a2;
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = v2;
  v4 = sub_100037A5C(&qword_100261588);
  *(_QWORD *)(v3 + 128) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 136) = v5;
  *(_QWORD *)(v3 + 144) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100037A5C(&qword_100261570);
  *(_QWORD *)(v3 + 152) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 160) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 168) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 176) = swift_task_alloc(v8);
  v9 = sub_100037A5C(&qword_100261568);
  *(_QWORD *)(v3 + 184) = v9;
  *(_QWORD *)(v3 + 192) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for AccountService.State(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 216) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 224) = swift_task_alloc(v10);
  return swift_task_switch(sub_1000774D8, v2, 0);
}

void sub_1000774D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v1 = v0[14];
  v2 = v0[28];
  v3 = v0[23];
  v4 = v0[24];
  v5 = v0[15] + OBJC_IVAR____TtC13findmylocated14AccountService_state;
  swift_beginAccess(v5, v0 + 2, 0, 0);
  sub_100025C70(v5, v2, type metadata accessor for AccountService.State);
  v6 = v4 + *(int *)(v3 + 48);
  sub_100025C70(v2, v4, type metadata accessor for AccountService.State);
  sub_100025C70(v1, v6, type metadata accessor for AccountService.State);
  v7 = sub_100037A5C(&qword_1002614A8);
  v8 = (char *)&loc_1000775C4
     + *((int *)qword_100077C88
       + (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v4, 3, v7));
  __asm { BR              X10 }
}

uint64_t sub_1000775D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, os_log_type_t type, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  int64_t i;
  unint64_t v77;
  int64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  unint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  os_log_type_t v101;
  _QWORD *v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  sub_100025C70(*(_QWORD *)(v36 + 192), *(_QWORD *)(v36 + 216), type metadata accessor for AccountService.State);
  v40 = v35(v34, 3, v33);
  v41 = type metadata accessor for Account(0);
  v42 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8);
  v43 = *(_QWORD *)(v36 + 216);
  if (v40)
  {
    v42(*(_QWORD *)(v36 + 216), v41);
    v44 = v107;
    v45 = *(_QWORD *)(v36 + 224);
    sub_1000087A0(*(_QWORD *)(v36 + 192), &qword_100261568);
    sub_100024990(v45, type metadata accessor for AccountService.State);
LABEL_4:
    v104 = v38;
    if (qword_10025F8A0 != -1)
LABEL_38:
      swift_once(&qword_10025F8A0, sub_100075ED4);
    v48 = *(_QWORD *)(v36 + 208);
    v50 = *(_QWORD *)(v36 + 112);
    v49 = *(_QWORD *)(v36 + 120);
    v51 = type metadata accessor for Logger(0);
    sub_100037A9C(v51, (uint64_t)qword_10027AAD0);
    sub_100025C70(v50, v48, type metadata accessor for AccountService.State);
    v52 = swift_retain_n(v49, 2);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.default.getter();
    v55 = os_log_type_enabled(v53, v54);
    v56 = *(_QWORD *)(v36 + 208);
    v108 = v36;
    if (v55)
    {
      v101 = v54;
      v57 = *(_QWORD *)(v36 + 200);
      v99 = *(_QWORD *)(v36 + 120);
      v58 = swift_slowAlloc(22, -1);
      v100 = swift_slowAlloc(64, -1);
      *(_QWORD *)(v39 - 80) = v100;
      *(_DWORD *)v58 = 136315394;
      sub_100025C70(v44, v57, type metadata accessor for AccountService.State);
      sub_100075F64();
      v60 = v59;
      v62 = v61;
      sub_100024990(v57, type metadata accessor for AccountService.State);
      v44 = v107;
      *(_QWORD *)(v36 + 96) = sub_10002BA84(v60, v62, (uint64_t *)(v39 - 80));
      ((void (*)(uint64_t, uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v103, v58 + 4, v58 + 12);
      swift_release_n(v99, 2);
      swift_bridgeObjectRelease(v62);
      *(_WORD *)(v58 + 12) = 2080;
      sub_100075F64();
      v64 = v63;
      *(_QWORD *)(v36 + 104) = sub_10002BA84(v65, v63, (uint64_t *)(v39 - 80));
      ((void (*)(uint64_t, uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v37, v58 + 14, v58 + 22);
      swift_bridgeObjectRelease(v64);
      sub_100024990(v56, type metadata accessor for AccountService.State);
      _os_log_impl((void *)&_mh_execute_header, v53, v101, "State: %s -> %s", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy(v100, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v100, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      swift_release_n(*(_QWORD *)(v36 + 120), 2);
      sub_100024990(v56, type metadata accessor for AccountService.State);
    }

    v67 = *(_QWORD *)(v36 + 112);
    v66 = *(_QWORD *)(v36 + 120);
    swift_beginAccess(v44, v104, 33, 0);
    sub_10007E6CC(v67, v44);
    swift_endAccess(v104);
    v68 = (uint64_t *)(v66 + OBJC_IVAR____TtC13findmylocated14AccountService_stateContinuations);
    swift_beginAccess(v68, v106, 0, 0);
    v69 = *v68;
    v70 = *(_QWORD *)(*v68 + 16);
    if (v70)
    {
      v71 = Logger.logObject.getter(v69);
      v72 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v73 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v73 = 134217984;
        *v102 = v70;
        ((void (*)(uint64_t, uint8_t *, uint8_t *))UnsafeMutableRawBufferPointer.copyMemory(from:))(v105, v73 + 4, v73 + 12);
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "Publishing State change event to %ld subscribers", v73, 0xCu);
        swift_slowDealloc(v73, -1, -1);
      }

      v69 = *v68;
    }
    v103 = v69 + 64;
    v105 = *(_QWORD *)(v36 + 160);
    v106 = *(_QWORD *)(v36 + 136);
    v74 = -1;
    v75 = -1 << *(_BYTE *)(v69 + 32);
    if (-v75 < 64)
      v74 = ~(-1 << -(char)v75);
    v44 = v74 & *(_QWORD *)(v69 + 64);
    v104 = (unint64_t)(63 - v75) >> 6;
    v107 = v69;
    swift_bridgeObjectRetain(v69);
    for (i = 0; ; i = v78)
    {
      if (v44)
      {
        v77 = __clz(__rbit64(v44));
        v44 &= v44 - 1;
        v78 = i;
        v79 = v77 | (i << 6);
        v80 = v107;
        v36 = v108;
      }
      else
      {
        v87 = i + 1;
        v80 = v107;
        v36 = v108;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        if (v87 >= v104)
          goto LABEL_34;
        v88 = *(_QWORD *)(v103 + 8 * v87);
        v89 = i + 1;
        if (!v88)
        {
          v89 = i + 2;
          if (i + 2 >= v104)
            goto LABEL_34;
          v88 = *(_QWORD *)(v103 + 8 * v89);
          if (!v88)
          {
            v89 = i + 3;
            if (i + 3 >= v104)
              goto LABEL_34;
            v88 = *(_QWORD *)(v103 + 8 * v89);
            if (!v88)
            {
              v89 = i + 4;
              if (i + 4 >= v104)
                goto LABEL_34;
              v88 = *(_QWORD *)(v103 + 8 * v89);
              if (!v88)
              {
                v90 = i + 5;
                if (i + 5 >= v104)
                {
LABEL_34:
                  swift_release(v107);
                  goto LABEL_35;
                }
                v88 = *(_QWORD *)(v103 + 8 * v90);
                if (!v88)
                {
                  while (1)
                  {
                    v89 = v90 + 1;
                    if (__OFADD__(v90, 1))
                      goto LABEL_37;
                    if (v89 >= v104)
                      goto LABEL_34;
                    v88 = *(_QWORD *)(v103 + 8 * v89);
                    ++v90;
                    if (v88)
                      goto LABEL_33;
                  }
                }
                v89 = i + 5;
              }
            }
          }
        }
LABEL_33:
        v44 = (v88 - 1) & v88;
        v78 = v89;
        v79 = __clz(__rbit64(v88)) + (v89 << 6);
      }
      v81 = *(_QWORD *)(v36 + 200);
      v83 = *(_QWORD *)(v36 + 168);
      v82 = *(_QWORD *)(v36 + 176);
      v37 = *(_QWORD *)(v36 + 144);
      v84 = *(_QWORD *)(v36 + 152);
      v85 = *(_QWORD *)(v36 + 128);
      v86 = *(_QWORD *)(v36 + 112);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v105 + 16))(v82, *(_QWORD *)(v80 + 56) + *(_QWORD *)(v105 + 72) * v79, v84);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 32))(v83, v82, v84);
      sub_100025C70(v86, v81, type metadata accessor for AccountService.State);
      ((void (*)(uint64_t, uint64_t))AsyncStream.Continuation.yield(_:))(v81, v84);
      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v37, v85);
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v83, v84);
    }
  }
  v42(v34, v41);
  v42(v43, v41);
  v44 = v107;
  v46 = *(_QWORD *)(v36 + 224);
  v47 = *(_BYTE *)(v36 + 232);
  sub_100024990(*(_QWORD *)(v36 + 192), type metadata accessor for AccountService.State);
  sub_100024990(v46, type metadata accessor for AccountService.State);
  if ((v47 & 1) != 0)
    goto LABEL_4;
LABEL_35:
  v91 = *(_QWORD *)(v36 + 216);
  v93 = *(_QWORD *)(v36 + 200);
  v92 = *(_QWORD *)(v36 + 208);
  v94 = *(_QWORD *)(v36 + 192);
  v96 = *(_QWORD *)(v36 + 168);
  v95 = *(_QWORD *)(v36 + 176);
  v97 = *(_QWORD *)(v36 + 144);
  swift_task_dealloc(*(_QWORD *)(v36 + 224));
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  return (*(uint64_t (**)(void))(v36 + 8))();
}

uint64_t sub_100077C98()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100261664);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  return sub_100077CE0();
}

uint64_t sub_100077CE0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1[5] = v0;
  v1[6] = *v0;
  v2 = type metadata accessor for UUID(0);
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for CloudKitStorage.State(0);
  v1[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[9] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[10] = swift_task_alloc(v5);
  v1[11] = swift_task_alloc(v5);
  v1[12] = swift_task_alloc(v5);
  v1[13] = swift_task_alloc(v5);
  v6 = sub_100037A5C(&qword_100261668);
  v1[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C(&qword_100261670);
  v1[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[16] = v8;
  v1[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100037A5C(&qword_1002615D0);
  v1[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037A5C((uint64_t *)&unk_100261318);
  v1[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[20] = v11;
  v1[21] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100077E30, v0, 0);
}

uint64_t sub_100077E30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 136);
    v3 = *(_QWORD *)(v1 + 144);
    v5 = *(_QWORD *)(v1 + 104);
    v4 = *(_QWORD *)(v1 + 112);
    v7 = *(_QWORD *)(v1 + 88);
    v6 = *(_QWORD *)(v1 + 96);
    v8 = *(_QWORD *)(v1 + 80);
    v9 = *(_QWORD *)(v1 + 56);
    swift_task_dealloc(*(_QWORD *)(v1 + 168));
    swift_task_dealloc(v3);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    v10 = *(uint64_t (**)(void))(v1 + 8);
    return v10();
  }
  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100037A9C(v11, (uint64_t)qword_10027AAD0);
  *(_QWORD *)(v1 + 176) = v12;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Monitoring CloudKit AccountState stream", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }
  v16 = *(_QWORD *)(v1 + 152);
  v17 = *(_QWORD *)(v1 + 160);
  v18 = *(_QWORD *)(v1 + 144);
  v19 = *(_QWORD *)(v1 + 40);

  v20 = v19 + OBJC_IVAR____TtC13findmylocated14AccountService_cloudKitAccountStateStream;
  swift_beginAccess(v19 + OBJC_IVAR____TtC13findmylocated14AccountService_cloudKitAccountStateStream, v1 + 16, 0, 0);
  sub_10000E37C(v20, v18, &qword_1002615D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16) == 1)
  {
    v21 = sub_1000087A0(*(_QWORD *)(v1 + 144), &qword_1002615D0);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "cloudKitAccountStateStream should be available by now!", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = sub_10007E494();
    v26 = swift_allocError(&type metadata for AccountService.Error, v25, 0, 0);
    *v27 = 7;
    swift_willThrow(v26);
    v29 = *(_QWORD *)(v1 + 136);
    v28 = *(_QWORD *)(v1 + 144);
    v31 = *(_QWORD *)(v1 + 104);
    v30 = *(_QWORD *)(v1 + 112);
    v33 = *(_QWORD *)(v1 + 88);
    v32 = *(_QWORD *)(v1 + 96);
    v34 = *(_QWORD *)(v1 + 80);
    v35 = *(_QWORD *)(v1 + 56);
    swift_task_dealloc(*(_QWORD *)(v1 + 168));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    v10 = *(uint64_t (**)(void))(v1 + 8);
    return v10();
  }
  v37 = *(_QWORD *)(v1 + 152);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v1 + 160) + 32))(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 144), v37);
  AsyncStream.makeAsyncIterator()(v37);
  v38 = sub_100004EA8(qword_100261538, type metadata accessor for AccountService, (uint64_t)&unk_1001F4710);
  v39 = enum case for CloudKitStorage.State.unavailable(_:);
  *(_DWORD *)(v1 + 232) = enum case for CloudKitStorage.State.unknown(_:);
  *(_DWORD *)(v1 + 236) = v39;
  v40 = enum case for CloudKitStorage.State.loading(_:);
  *(_DWORD *)(v1 + 240) = enum case for CloudKitStorage.State.noAccount(_:);
  *(_DWORD *)(v1 + 244) = v40;
  v41 = enum case for CloudKitStorage.State.available(_:);
  *(_DWORD *)(v1 + 248) = enum case for CloudKitStorage.State.rebuilding(_:);
  *(_DWORD *)(v1 + 252) = v41;
  *(_DWORD *)(v1 + 256) = enum case for CloudKitStorage.State.apnsConnected(_:);
  *(_QWORD *)(v1 + 184) = v38;
  *(_QWORD *)(v1 + 192) = 0;
  v42 = *(_QWORD *)(v1 + 40);
  v43 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v1 + 200) = v43;
  *v43 = v1;
  v43[1] = sub_10007820C;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v1 + 112), v42, v38, *(_QWORD *)(v1 + 120));
}

uint64_t sub_10007820C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  return swift_task_switch(sub_100078264, v1, 0);
}

uint64_t sub_100078264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v33)(uint64_t, _QWORD, uint64_t);
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88[2];

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 160);
    v4 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 152);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 112);
    v12 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 80);
    v14 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v8);
    swift_task_dealloc(v7);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  v16 = *(_QWORD *)(v0 + 192);
  v17 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 104), v1, v2);
  static Task<>.checkCancellation()(v17);
  *(_QWORD *)(v0 + 208) = v16;
  if (v16)
  {
    v19 = *(_QWORD *)(v0 + 160);
    v18 = *(_QWORD *)(v0 + 168);
    v20 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 128);
    v21 = *(_QWORD *)(v0 + 136);
    v23 = *(_QWORD *)(v0 + 120);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 64));
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    v24 = *(_QWORD *)(v0 + 136);
    v25 = *(_QWORD *)(v0 + 144);
    v27 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 112);
    v29 = *(_QWORD *)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 96);
    v30 = *(_QWORD *)(v0 + 80);
    v31 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v25);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  v33 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 72) + 16);
  v34 = v33(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 64));
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  v37 = os_log_type_enabled(v35, (os_log_type_t)v36);
  v38 = *(_QWORD *)(v0 + 96);
  v39 = *(_QWORD *)(v0 + 64);
  v40 = *(_QWORD *)(v0 + 72);
  if (v37)
  {
    v41 = swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v88[0] = v42;
    *(_DWORD *)v41 = 136315138;
    v43 = sub_100004EA8(&qword_100261678, (uint64_t (*)(uint64_t))&type metadata accessor for CloudKitStorage.State, (uint64_t)&protocol conformance descriptor for CloudKitStorage.State);
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v39, v43);
    v46 = v45;
    *(_QWORD *)(v41 + 4) = sub_10002BA84(v44, v45, v88);
    swift_bridgeObjectRelease(v46);
    v47 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v47(v38, v39);
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v36, "cloudKitAccountStateStream event: %s", (uint8_t *)v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    v47 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v47(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64));
  }

  *(_QWORD *)(v0 + 216) = v47;
  v49 = *(_DWORD *)(v0 + 232);
  v48 = *(_DWORD *)(v0 + 236);
  v50 = *(_QWORD *)(v0 + 88);
  v51 = *(_QWORD *)(v0 + 64);
  v52 = *(_QWORD *)(v0 + 72);
  v33(v50, *(_QWORD *)(v0 + 104), v51);
  v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 88))(v50, v51);
  if ((_DWORD)v53 == v49 || (_DWORD)v53 == v48)
    goto LABEL_20;
  if ((_DWORD)v53 == *(_DWORD *)(v0 + 240))
  {
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "CK account is .noAccount.", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }
    v57 = *(_QWORD *)(v0 + 104);
    v58 = *(_QWORD *)(v0 + 64);

    goto LABEL_15;
  }
  if ((_DWORD)v53 == *(_DWORD *)(v0 + 244) || (_DWORD)v53 == *(_DWORD *)(v0 + 248))
  {
LABEL_20:
    v66 = v33(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 64));
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.info.getter();
    v69 = os_log_type_enabled(v67, v68);
    v70 = *(_QWORD *)(v0 + 104);
    v71 = *(_QWORD *)(v0 + 80);
    v72 = *(_QWORD *)(v0 + 64);
    if (v69)
    {
      v73 = swift_slowAlloc(12, -1);
      v74 = swift_slowAlloc(32, -1);
      v88[0] = v74;
      *(_DWORD *)v73 = 136315138;
      v75 = sub_100004EA8(&qword_100261678, (uint64_t (*)(uint64_t))&type metadata accessor for CloudKitStorage.State, (uint64_t)&protocol conformance descriptor for CloudKitStorage.State);
      v76 = dispatch thunk of CustomStringConvertible.description.getter(v72, v75);
      v78 = v77;
      *(_QWORD *)(v73 + 4) = sub_10002BA84(v76, v77, v88);
      swift_bridgeObjectRelease(v78);
      v47(v71, v72);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Ignoring %s", (uint8_t *)v73, 0xCu);
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(v73, -1, -1);

LABEL_24:
      v59 = v70;
      v60 = v72;
      goto LABEL_25;
    }

    v79 = v71;
LABEL_23:
    v47(v79, v72);
    goto LABEL_24;
  }
  if ((_DWORD)v53 == *(_DWORD *)(v0 + 252))
  {
    v57 = *(_QWORD *)(v0 + 104);
    v61 = *(_QWORD *)(v0 + 56);
    v58 = *(_QWORD *)(v0 + 64);
    type metadata accessor for WorkItemQueue.WorkItem(0);
    v62 = swift_allocObject(&unk_100251018, 32, 7);
    v63 = *(_QWORD *)(v0 + 40);
    *(_OWORD *)(v62 + 16) = *(_OWORD *)(v0 + 40);
    v64 = swift_retain(v63);
    UUID.init()(v64);
    v65 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v61, &unk_100261688, v62, &unk_100261690, 0);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v65);
    swift_release(v65);
LABEL_15:
    v59 = v57;
    v60 = v58;
LABEL_25:
    v47(v59, v60);
    *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 208);
    v80 = *(_QWORD *)(v0 + 184);
    v81 = *(_QWORD *)(v0 + 40);
    v82 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 200) = v82;
    *v82 = v0;
    v82[1] = sub_10007820C;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 112), v81, v80, *(_QWORD *)(v0 + 120));
  }
  if ((_DWORD)v53 != *(_DWORD *)(v0 + 256))
  {
    v84 = Logger.logObject.getter(v53);
    v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      v86 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v86 = 0;
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "Unknown CloudKitStorage.State!", v86, 2u);
      swift_slowDealloc(v86, -1, -1);
    }
    v87 = *(_QWORD *)(v0 + 104);
    v70 = *(_QWORD *)(v0 + 88);
    v72 = *(_QWORD *)(v0 + 64);

    v79 = v87;
    goto LABEL_23;
  }
  v83 = (_QWORD *)swift_task_alloc(dword_1002612F4);
  *(_QWORD *)(v0 + 224) = v83;
  *v83 = v0;
  v83[1] = sub_100078944;
  return sub_1000797AC();
}

uint64_t sub_100078944()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_task_switch(sub_10007899C, v1, 0);
}

uint64_t sub_10007899C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  (*(void (**)(_QWORD, _QWORD))(v0 + 216))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 200) = v3;
  *v3 = v0;
  v3[1] = sub_10007820C;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 112), v2, v1, *(_QWORD *)(v0 + 120));
}

uint64_t sub_100078A20(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2[2] = a2;
  v2[3] = *a2;
  v4 = sub_100037A5C((uint64_t *)&unk_100265180);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100078A88, a2, 0);
}

uint64_t sub_100078A88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for TaskPriority(0);
  v8 = *(_OWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v4 = sub_100004EA8(qword_100261538, type metadata accessor for AccountService, (uint64_t)&unk_1001F4710);
  v5 = swift_allocObject(&unk_100250FC8, 48, 7);
  *(_QWORD *)(v5 + 16) = v8;
  *(_QWORD *)(v5 + 24) = v4;
  *(_OWORD *)(v5 + 32) = v8;
  swift_retain_n(v3, 2);
  v6 = sub_10005582C(v1, (uint64_t)&unk_100261610, v5);
  swift_release(v6);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100078B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(uint64_t, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[24];

  v41 = a1;
  v3 = sub_100037A5C(&qword_100261570);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v42 = v5;
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v7);
  v43 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v35 - v14;
  a2 += 16;
  swift_beginAccess(a2, v44, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v17 = result;
    UUID.init()(result);
    v38 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v38(v13, v15, v9);
    v18 = v3;
    v19 = *(unsigned __int8 *)(v10 + 80);
    v36 = v6;
    v20 = (v19 + 24) & ~v19;
    v37 = v19 | 7;
    v21 = swift_allocObject(&unk_100250F38, v20 + v11, v19 | 7);
    v22 = v10;
    v40 = v10;
    v23 = v4;
    v24 = v21;
    *(_QWORD *)(v21 + 16) = v17;
    v39 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
    v39(v21 + v20, v13, v9);
    swift_retain(v17);
    v25 = v24;
    v26 = v18;
    v35 = v18;
    v27 = v41;
    AsyncStream.Continuation.onTermination.setter(sub_10007E1D4, v25, v18);
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v43, 1, 1, v28);
    v29 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v36, v27, v26);
    v38(v13, v15, v9);
    v30 = *(unsigned __int8 *)(v23 + 80);
    v31 = (v30 + 40) & ~v30;
    v32 = (v42 + v19 + v31) & ~v19;
    v33 = (char *)swift_allocObject(&unk_100250F60, v32 + v11, v37 | v30);
    *((_QWORD *)v33 + 2) = 0;
    *((_QWORD *)v33 + 3) = 0;
    *((_QWORD *)v33 + 4) = v17;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v33[v31], v29, v35);
    v39((uint64_t)&v33[v32], v13, v9);
    swift_retain(v17);
    v34 = sub_10005582C(v43, (uint64_t)&unk_100261580, (uint64_t)v33);
    swift_release(v17);
    swift_release(v34);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v15, v9);
  }
  return result;
}

uint64_t sub_100078E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = sub_100037A5C((uint64_t *)&unk_100265180);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v5);
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (v12 + 40) & ~v12;
  v14 = (char *)swift_allocObject(&unk_100250F88, v13 + v7, v12 | 7);
  *((_QWORD *)v14 + 2) = 0;
  *((_QWORD *)v14 + 3) = 0;
  *((_QWORD *)v14 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_retain(a2);
  v15 = sub_10005582C((uint64_t)v10, (uint64_t)&unk_1002615A0, (uint64_t)v14);
  return swift_release(v15);
}

uint64_t sub_100078F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_100078FA4, a4, 0);
}

uint64_t sub_100078FA4()
{
  uint64_t v0;

  sub_100078FD4(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100078FD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37[3];

  v2 = v1;
  v4 = sub_100037A5C(&qword_100261590);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v30 - v12;
  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v14 = type metadata accessor for Logger(0);
  sub_100037A9C(v14, (uint64_t)qword_10027AAD0);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15 = v35(v13, a1, v7);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(12, -1);
    v32 = v11;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v34 = v1;
    v21 = v20;
    v37[0] = v20;
    v31 = a1;
    *(_DWORD *)v19 = 136446210;
    v33 = v6;
    v22 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v7, v22);
    v25 = v24;
    v36 = sub_10002BA84(v23, v24, v37);
    v6 = v33;
    a1 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Removing stateContinuation for %{public}s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v26 = v21;
    v2 = v34;
    swift_slowDealloc(v26, -1, -1);
    v27 = v19;
    v11 = v32;
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }

  v35(v11, a1, v7);
  v28 = sub_100037A5C(&qword_100261570);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v6, 1, 1, v28);
  swift_beginAccess(v2 + OBJC_IVAR____TtC13findmylocated14AccountService_stateContinuations, v37, 33, 0);
  sub_1000DE26C((uint64_t)v6, (uint64_t)v11);
  return swift_endAccess(v37);
}

uint64_t sub_1000792CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  v8 = sub_100037A5C(&qword_100261588);
  v6[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[9] = v9;
  v6[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for AccountService.State(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[11] = swift_task_alloc(v10);
  v6[12] = swift_task_alloc(v10);
  return swift_task_switch(sub_100079368, a4, 0);
}

uint64_t sub_100079368()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[12];
  v2 = v0[5];
  sub_1000794A4(v0[6], v0[7]);
  v3 = v2 + OBJC_IVAR____TtC13findmylocated14AccountService_state;
  swift_beginAccess(v3, v0 + 2, 0, 0);
  sub_100025C70(v3, v1, type metadata accessor for AccountService.State);
  return swift_task_switch(sub_1000793EC, 0, 0);
}

uint64_t sub_1000793EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  sub_100025C70(v1, v2, type metadata accessor for AccountService.State);
  v6 = sub_100037A5C(&qword_100261570);
  AsyncStream.Continuation.yield(_:)(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100024990(v1, type metadata accessor for AccountService.State);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000794A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];

  v3 = v2;
  v6 = sub_100037A5C(&qword_100261590);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v16 = type metadata accessor for Logger(0);
  sub_100037A9C(v16, (uint64_t)qword_10027AAD0);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v38 = a2;
  v17 = v37(v15, a2, v9);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(12, -1);
    v35 = a1;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v36 = v2;
    v23 = v22;
    v40[0] = v22;
    v34 = v13;
    *(_DWORD *)v21 = 136446210;
    v33 = v21 + 4;
    v24 = sub_100004EA8(&qword_100260100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v9, v24);
    v27 = v26;
    v39 = sub_10002BA84(v25, v26, v40);
    v13 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v33, v21 + 12);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Storing stateContinuation for %{public}s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v28 = v23;
    v3 = v36;
    swift_slowDealloc(v28, -1, -1);
    v29 = v21;
    a1 = v35;
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }

  v37(v13, v38, v9);
  v30 = sub_100037A5C(&qword_100261570);
  v31 = *(_QWORD *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v8, a1, v30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v8, 0, 1, v30);
  swift_beginAccess(v3 + OBJC_IVAR____TtC13findmylocated14AccountService_stateContinuations, v40, 33, 0);
  sub_1000DE26C((uint64_t)v8, (uint64_t)v13);
  return swift_endAccess(v40);
}

uint64_t sub_1000797AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1[13] = v0;
  v2 = type metadata accessor for AccountService.State(0);
  v1[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100037A5C(&qword_100260580);
  v1[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Account(0);
  v1[16] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[17] = v5;
  v1[18] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DataManager.State(0);
  v1[19] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[20] = swift_task_alloc(v7);
  v1[21] = swift_task_alloc(v7);
  return swift_task_switch(sub_100079884, v0, 0);
}

uint64_t sub_100079884()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AAD0);
  v0[22] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[12] = sub_10002BA84(0xD000000000000018, 0x80000001001FD6A0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  v0[23] = v7;
  *v7 = v0;
  v7[1] = sub_100079A20;
  return daemon.getter();
}

uint64_t sub_100079A20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 184);
  v5 = *v1;
  *(_QWORD *)(*v1 + 192) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceDaemon.getService<A>()[1]);
  *(_QWORD *)(v3 + 200) = v6;
  v7 = type metadata accessor for Daemon(0);
  v8 = type metadata accessor for DataManager(0);
  v9 = sub_100004EA8(&qword_100260240, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v10 = sub_100004EA8(&qword_100260248, type metadata accessor for DataManager, (uint64_t)&unk_1001F5828);
  *v6 = v5;
  v6[1] = sub_100079B08;
  return ActorServiceDaemon.getService<A>()(v7, v8, v9, v10);
}

uint64_t sub_100079B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 200);
  v4[26] = a1;
  v4[27] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[13];
    v7 = sub_10007A2C8;
  }
  else
  {
    swift_release(v4[24]);
    v7 = sub_100079B84;
    v6 = a1;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100079B84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[21];
  v2 = v0[13];
  v3 = v0[26] + OBJC_IVAR____TtC13findmylocated11DataManager_state;
  swift_beginAccess(v3, v0 + 5, 0, 0);
  sub_100025C70(v3, v1, type metadata accessor for DataManager.State);
  return swift_task_switch(sub_100079C04, v2, 0);
}

uint64_t sub_100079C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[2];

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  swift_storeEnumTagMultiPayload(v1, *(_QWORD *)(v0 + 152), 5);
  sub_10000D6B8(v2, v1);
  v4 = v3;
  sub_100024990(v1, type metadata accessor for DataManager.State);
  v5 = sub_100024990(v2, type metadata accessor for DataManager.State);
  if ((v4 & 1) != 0)
  {
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v43[0] = v9;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 88) = sub_10002BA84(0xD000000000000018, 0x80000001001FD6A0, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Sending account .available state to retry initClient", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }

    v10 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 136);
    v12 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 104) + OBJC_IVAR____TtC13findmylocated14AccountService__account;
    swift_beginAccess(v13, v0 + 16, 0, 0);
    sub_10000E37C(v13, v12, &qword_100260580);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10) != 1)
    {
      v33 = *(_QWORD *)(v0 + 136);
      v32 = *(_QWORD *)(v0 + 144);
      v34 = *(_QWORD *)(v0 + 128);
      v35 = *(_QWORD *)(v0 + 112);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 32))(v32, *(_QWORD *)(v0 + 120), v34);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v35, v32, v34);
      v36 = sub_100037A5C(&qword_1002614A8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 0, 3, v36);
      v37 = (_QWORD *)swift_task_alloc(dword_1002615AC);
      *(_QWORD *)(v0 + 224) = v37;
      *v37 = v0;
      v37[1] = sub_10007A1E0;
      return sub_1000773C4(*(_QWORD *)(v0 + 112), 1);
    }
    v14 = v0 + 80;
    v15 = sub_1000087A0(*(_QWORD *)(v0 + 120), &qword_100260580);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v43[0] = v19;
      *(_DWORD *)v18 = 136446210;
      v14 = v0 + 80;
      *(_QWORD *)(v0 + 80) = sub_10002BA84(0xD000000000000018, 0x80000001001FD6A0, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v18 + 4, v18 + 12);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s Account is nil!", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }

    v20 = *(_QWORD *)(v0 + 208);
    v21 = sub_10007E494();
    v22 = swift_allocError(&type metadata for AccountService.Error, v21, 0, 0);
    *v23 = 6;
    swift_willThrow(v22);
    swift_release(v20);
    swift_errorRetain(v22);
    v24 = swift_errorRetain(v22);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v28 = (uint64_t *)swift_slowAlloc(8, -1);
      v29 = swift_slowAlloc(32, -1);
      v43[0] = v29;
      *(_DWORD *)v27 = 136446466;
      *(_QWORD *)(v0 + 72) = sub_10002BA84(0xD000000000000018, 0x80000001001FD6A0, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v14, v27 + 4, v27 + 12);
      *(_WORD *)(v27 + 12) = 2114;
      swift_errorRetain(v22);
      v30 = _swift_stdlib_bridgeErrorToNSError(v22);
      *(_QWORD *)(v0 + 64) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v27 + 14, v27 + 22);
      *v28 = v30;
      swift_errorRelease(v22);
      swift_errorRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s failed due to %{public}@", (uint8_t *)v27, 0x16u);
      v31 = sub_100037A5C(&qword_100260658);
      swift_arrayDestroy(v28, 1, v31);
      swift_slowDealloc(v28, -1, -1);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      swift_errorRelease(v22);
    }
    else
    {
      swift_errorRelease(v22);
      swift_errorRelease(v22);
      swift_errorRelease(v22);

    }
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 208));
  }
  v39 = *(_QWORD *)(v0 + 160);
  v40 = *(_QWORD *)(v0 + 144);
  v42 = *(_QWORD *)(v0 + 112);
  v41 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007A1E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  sub_100024990(v2, type metadata accessor for AccountService.State);
  return swift_task_switch(sub_10007A248, v1, 0);
}

uint64_t sub_10007A248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 208));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007A2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  swift_release(*(_QWORD *)(v0 + 192));
  v1 = *(_QWORD *)(v0 + 216);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 72) = sub_10002BA84(0xD000000000000018, 0x80000001001FD6A0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 64) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v5 + 14, v5 + 22);
    *v6 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s failed due to %{public}@", (uint8_t *)v5, 0x16u);
    v9 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v6, 1, v9);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007A500(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;

  v2[5] = a1;
  v2[6] = v1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260580) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v3);
  v2[8] = swift_task_alloc(v3);
  return swift_task_switch(sub_10007A56C, v1, 0);
}

uint64_t sub_10007A56C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AAD0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Renewing credentials...", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_100261304);
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = sub_10007A66C;
  return sub_10007A7D0(*(_QWORD *)(v0 + 40));
}

uint64_t sub_10007A66C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_10007A6E4, *(_QWORD *)(v2 + 48), 0);
  v6 = v2 + 56;
  v5 = *(_QWORD *)(v2 + 56);
  swift_task_dealloc(*(_QWORD *)(v6 + 8));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10007A6E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = type metadata accessor for Account(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, v3, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v2, 0, 1, v5);
  sub_10000EF6C(v2, v1, &qword_100260580);
  v7 = v4 + OBJC_IVAR____TtC13findmylocated14AccountService__account;
  swift_beginAccess(v4 + OBJC_IVAR____TtC13findmylocated14AccountService__account, v0 + 16, 33, 0);
  sub_10007E710(v1, v7, &qword_100260580);
  swift_endAccess(v0 + 16);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007A7D0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2[57] = a1;
  v2[58] = v1;
  v3 = type metadata accessor for Account(0);
  v2[59] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[60] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[61] = swift_task_alloc(v5);
  v2[62] = swift_task_alloc(v5);
  v6 = type metadata accessor for Account.TokenStatus(0);
  v2[63] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[64] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[65] = swift_task_alloc(v8);
  v2[66] = swift_task_alloc(v8);
  v9 = type metadata accessor for AccountService.State(0);
  v2[67] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10007A898, v1, 0);
}

uint64_t sub_10007A898()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;

  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AAD0);
  v0[68] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Retrieving account info...", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[67];

  v7 = sub_100037A5C(&qword_1002614A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 2, 3, v7);
  v8 = (uint64_t **)swift_task_alloc(dword_1002615AC);
  v0[69] = (uint64_t)v8;
  *v8 = v0;
  v8[1] = (uint64_t *)sub_10007A9D0;
  return sub_1000773C4(v0[67], 0);
}

uint64_t sub_10007A9D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 536);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 464);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 552));
  sub_100024990(v1, type metadata accessor for AccountService.State);
  return swift_task_switch(sub_10007AA3C, v2, 0);
}

uint64_t sub_10007AA3C()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  *(_QWORD *)(v0 + 560) = v1;
  if (v1)
  {
    v2 = v1;
    v3 = v0 + 16;
    *(_QWORD *)(v0 + 56) = v0 + 448;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10007ABF8;
    v4 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v5 = (_QWORD *)(v0 + 80);
    v5[1] = 0x40000000;
    v5[2] = sub_10007B810;
    v5[3] = &unk_100250FA0;
    v5[4] = v4;
    objc_msgSend(v2, "aa_primaryAppleAccountWithCompletion:", v5);
    return swift_continuation_await(v3);
  }
  else
  {
    v7 = Logger.logObject.getter(0);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing primary account!", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = sub_10007E494();
    v11 = swift_allocError(&type metadata for AccountService.Error, v10, 0, 0);
    *v12 = 6;
    swift_willThrow(v11);
    v13 = *(_QWORD *)(v0 + 528);
    v14 = *(_QWORD *)(v0 + 520);
    v16 = *(_QWORD *)(v0 + 488);
    v15 = *(_QWORD *)(v0 + 496);
    swift_task_dealloc(*(_QWORD *)(v0 + 536));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10007ABF8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 568) = v2;
  if (v2)
    v3 = sub_10007B790;
  else
    v3 = sub_10007AC58;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 464), 0);
}

uint64_t sub_10007AC58(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  unsigned int *v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  unint64_t v62;
  char v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  id v75;
  void *v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint8_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  v2 = *(void **)(v1 + 448);
  if (!v2)
  {

    goto LABEL_5;
  }
  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {

LABEL_5:
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing primary account!", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = sub_10007E494();
    v8 = swift_allocError(&type metadata for AccountService.Error, v7, 0, 0);
    *v9 = 6;
    swift_willThrow(v8);
    goto LABEL_17;
  }
  v10 = objc_msgSend(v2, "aa_personID");
  if (!v10)
  {
LABEL_14:
    v21 = Logger.logObject.getter(v10);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Missing credentials!", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
    v24 = *(void **)(v1 + 560);

    v25 = sub_10007E494();
    v26 = swift_allocError(&type metadata for AccountService.Error, v25, 0, 0);
    *v27 = 3;
    swift_willThrow(v26);

    goto LABEL_17;
  }
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v14 = v13;

  v15 = objc_msgSend(v2, "username");
  if (!v15)
  {
    v19 = v14;
    goto LABEL_13;
  }
  v16 = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v19 = v18;

  if ((static SystemInfo.underTest.getter(v20) & 1) != 0)
  {
    swift_bridgeObjectRelease(v14);
LABEL_13:
    v10 = (id)swift_bridgeObjectRelease(v19);
    goto LABEL_14;
  }
  v136 = v17;
  v138 = v12;
  v34 = objc_msgSend(v2, "dataclassProperties");
  if (!v34)
  {
    *(_OWORD *)(v1 + 152) = 0u;
    *(_OWORD *)(v1 + 168) = 0u;
LABEL_29:
    v43 = v1 + 152;
LABEL_30:
    sub_1000087A0(v43, &qword_1002615B8);
    goto LABEL_31;
  }
  v35 = v34;
  *(_QWORD *)(v1 + 408) = 0xD000000000000020;
  *(_QWORD *)(v1 + 416) = 0x80000001001FD670;
  v36 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v1 + 408, &type metadata for String);
  v37 = objc_msgSend(v35, "__swift_objectForKeyedSubscript:", v36);
  swift_unknownObjectRelease(v36);

  if (v37)
  {
    _bridgeAnyObjectToAny(_:)(v37);
    swift_unknownObjectRelease(v37);
  }
  else
  {
    *(_OWORD *)(v1 + 280) = 0u;
    *(_OWORD *)(v1 + 296) = 0u;
  }
  sub_10000EF6C(v1 + 280, v1 + 152, &qword_1002615B8);
  if (!*(_QWORD *)(v1 + 176))
    goto LABEL_29;
  v38 = (uint64_t *)(v1 + 432);
  v39 = sub_100037A5C(&qword_1002615C0);
  if ((swift_dynamicCast(v1 + 432, v1 + 152, (char *)&type metadata for Any + 8, v39, 6) & 1) == 0)
  {
LABEL_31:
    v44 = 0;
    v45 = 0;
    goto LABEL_32;
  }
  v40 = *v38;
  if (*(_QWORD *)(*v38 + 16) && (v41 = sub_10002FF38(0x755F656C706F6570, 0xEA00000000006C72), (v42 & 1) != 0))
  {
    sub_10002BB54(*(_QWORD *)(v40 + 56) + 32 * v41, v1 + 216);
  }
  else
  {
    *(_OWORD *)(v1 + 216) = 0u;
    *(_OWORD *)(v1 + 232) = 0u;
  }
  swift_bridgeObjectRelease(v40);
  if (!*(_QWORD *)(v1 + 240))
  {
    v43 = v1 + 216;
    goto LABEL_30;
  }
  v61 = swift_dynamicCast(v1 + 344, v1 + 216, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (v61)
    v44 = *(_QWORD *)(v1 + 344);
  else
    v44 = 0;
  if (v61)
    v45 = *(_QWORD *)(v1 + 352);
  else
    v45 = 0;
LABEL_32:
  v46 = objc_msgSend(v2, "dataclassProperties");
  if (!v46)
  {
    *(_OWORD *)(v1 + 184) = 0u;
    *(_OWORD *)(v1 + 200) = 0u;
LABEL_41:
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v45);
    sub_1000087A0(v1 + 184, &qword_1002615B8);
LABEL_43:
    v57 = *(void **)(v1 + 560);
    v58 = sub_10007E494();
    v59 = swift_allocError(&type metadata for AccountService.Error, v58, 0, 0);
    *v60 = 4;
    swift_willThrow(v59);

LABEL_17:
    v28 = *(_QWORD *)(v1 + 528);
    v29 = *(_QWORD *)(v1 + 520);
    v31 = *(_QWORD *)(v1 + 488);
    v30 = *(_QWORD *)(v1 + 496);
    swift_task_dealloc(*(_QWORD *)(v1 + 536));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    v32 = *(uint64_t (**)(void))(v1 + 8);
    return v32();
  }
  v47 = v46;
  v135 = v44;
  v140 = v45;
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(kAccountDataclassShareLocation);
  v50 = v49;
  *(_QWORD *)(v1 + 360) = v48;
  *(_QWORD *)(v1 + 368) = v49;
  swift_bridgeObjectRetain(v49);
  v51 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v1 + 360, &type metadata for String);
  v52 = objc_msgSend(v47, "__swift_objectForKeyedSubscript:", v51);
  swift_unknownObjectRelease(v51);

  if (v52)
  {
    _bridgeAnyObjectToAny(_:)(v52);
    swift_unknownObjectRelease(v52);
  }
  else
  {
    *(_OWORD *)(v1 + 248) = 0u;
    *(_OWORD *)(v1 + 264) = 0u;
  }
  sub_10000EF6C(v1 + 248, v1 + 184, &qword_1002615B8);
  swift_bridgeObjectRelease(v50);
  v45 = v140;
  if (!*(_QWORD *)(v1 + 208))
    goto LABEL_41;
  v53 = sub_100037A5C(&qword_1002615C0);
  if ((swift_dynamicCast(v1 + 424, v1 + 184, (char *)&type metadata for Any + 8, v53, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v140);
    goto LABEL_43;
  }
  v54 = *(_QWORD *)(v1 + 424);
  v55 = objc_msgSend(v2, "aa_authToken");
  if (v55)
  {

    v56 = (unsigned int *)&enum case for Account.TokenStatus.success(_:);
  }
  else
  {
    v56 = (unsigned int *)&enum case for Account.TokenStatus.notAccessible(_:);
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 512) + 104))(*(_QWORD *)(v1 + 528), *v56, *(_QWORD *)(v1 + 504));
  if (*(_QWORD *)(v54 + 16) && (v62 = sub_10002FF38(0x766E45737061, 0xE600000000000000), (v63 & 1) != 0))
  {
    sub_10002BB54(*(_QWORD *)(v54 + 56) + 32 * v62, v1 + 312);
    v64 = swift_dynamicCast(v1 + 392, v1 + 312, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v64)
      v65 = *(_QWORD *)(v1 + 392);
    else
      v65 = 0;
    if (v64)
      v66 = *(_QWORD *)(v1 + 400);
    else
      v66 = 0;
  }
  else
  {
    v65 = 0;
    v66 = 0;
  }
  if (*(_QWORD *)(v54 + 16) && (v67 = sub_10002FF38(0x6E74736F48707061, 0xEB00000000656D61), (v68 & 1) != 0))
  {
    sub_10002BB54(*(_QWORD *)(v54 + 56) + 32 * v67, v1 + 120);
  }
  else
  {
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
  }
  swift_bridgeObjectRelease(v54);
  if (*(_QWORD *)(v1 + 144))
  {
    v69 = swift_dynamicCast(v1 + 376, v1 + 120, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v69)
      v70 = *(_QWORD *)(v1 + 376);
    else
      v70 = 0;
    if (v69)
      v71 = *(_QWORD *)(v1 + 384);
    else
      v71 = 0;
    v133 = v71;
  }
  else
  {
    sub_1000087A0(v1 + 120, &qword_1002615B8);
    v70 = 0;
    v133 = 0;
  }
  v72 = v66;
  v73 = objc_msgSend(v2, "aa_fmfAccount");
  if (!v73)
    goto LABEL_84;
  v74 = v73;
  v75 = objc_msgSend(*(id *)(v1 + 560), "credentialForAccount:", v73);
  if (!v75)
  {
    v76 = v74;
LABEL_83:

LABEL_84:
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v14);
    v91 = *(void **)(v1 + 560);
    v92 = *(_QWORD *)(v1 + 528);
    v93 = *(_QWORD *)(v1 + 504);
    v94 = *(_QWORD *)(v1 + 512);
    swift_bridgeObjectRelease(v140);
    swift_bridgeObjectRelease(v133);
    swift_bridgeObjectRelease(v72);
    v95 = sub_10007E494();
    v96 = swift_allocError(&type metadata for AccountService.Error, v95, 0, 0);
    *v97 = 5;
    swift_willThrow(v96);

    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v92, v93);
    goto LABEL_17;
  }
  v76 = v75;
  v130 = v65;
  v77 = objc_msgSend(v75, "credentialItemForKey:", ACFindMyFriendsAppTokenKey);
  if (!v77)
  {

    goto LABEL_83;
  }
  v78 = v77;
  v129 = v70;
  v124 = v76;
  v125 = v74;
  v79 = *(_QWORD *)(v1 + 528);
  v80 = *(_QWORD *)(v1 + 520);
  v82 = *(_QWORD *)(v1 + 504);
  v81 = *(_QWORD *)(v1 + 512);
  v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
  v127 = v84;
  v128 = v83;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v80, v79, v82);
  v131 = sub_10007E4D8(v130, v72);
  v126 = v85;
  swift_bridgeObjectRelease(v72);
  v86 = objc_msgSend(v2, "aa_authToken");
  if (v86)
  {
    v87 = v86;
    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
    v90 = v89;

  }
  else
  {
    v88 = 0;
    v90 = 0;
  }
  v98 = *(_QWORD *)(v1 + 496);
  v100 = *(_QWORD *)(v1 + 472);
  v99 = *(_QWORD *)(v1 + 480);
  v101 = *(_QWORD *)(v1 + 456);
  Account.init(icloudIdentifier:dsid:authTokenStatus:appToken:appHostName:apsEnvironment:peopleURL:authToken:)(v136, v19, v138, v14, *(_QWORD *)(v1 + 520), v128, v127, v129, v133, v131, v126, v135, v140, v88, v90);
  v102 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 16);
  v103 = v102(v98, v101, v100);
  v104 = Logger.logObject.getter(v103);
  v105 = static os_log_type_t.default.getter();
  v106 = os_log_type_enabled(v104, v105);
  v107 = *(_QWORD *)(v1 + 528);
  v108 = *(_QWORD *)(v1 + 504);
  v109 = *(_QWORD *)(v1 + 496);
  if (v106)
  {
    v110 = *(_QWORD *)(v1 + 488);
    v132 = *(_QWORD *)(v1 + 480);
    v111 = *(_QWORD *)(v1 + 472);
    v137 = *(void **)(v1 + 560);
    v139 = *(_QWORD *)(v1 + 512);
    v141 = *(_QWORD *)(v1 + 504);
    v112 = (uint8_t *)swift_slowAlloc(12, -1);
    v134 = swift_slowAlloc(32, -1);
    v142 = v134;
    *(_DWORD *)v112 = 136315138;
    v102(v110, v109, v111);
    v113 = String.init<A>(describing:)(v110, v111);
    v115 = v114;
    *(_QWORD *)(v1 + 440) = sub_10002BA84(v113, v114, &v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 440, v1 + 448, v112 + 4, v112 + 12);
    swift_bridgeObjectRelease(v115);
    (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v109, v111);
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "Retrieved account: %s", v112, 0xCu);
    swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v134, -1, -1);
    swift_slowDealloc(v112, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v107, v141);
  }
  else
  {
    v116 = *(_QWORD *)(v1 + 472);
    v117 = *(_QWORD *)(v1 + 480);
    v118 = *(_QWORD *)(v1 + 512);
    v119 = *(void **)(v1 + 560);

    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v109, v116);
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v107, v108);
  }
  v120 = *(_QWORD *)(v1 + 528);
  v121 = *(_QWORD *)(v1 + 520);
  v123 = *(_QWORD *)(v1 + 488);
  v122 = *(_QWORD *)(v1 + 496);
  swift_task_dealloc(*(_QWORD *)(v1 + 536));
  swift_task_dealloc(v120);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  v32 = *(uint64_t (**)(void))(v1 + 8);
  return v32();
}

uint64_t sub_10007B790(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void **)(v1 + 560);
  swift_willThrow(a1);

  v3 = *(_QWORD *)(v1 + 528);
  v4 = *(_QWORD *)(v1 + 520);
  v6 = *(_QWORD *)(v1 + 488);
  v5 = *(_QWORD *)(v1 + 496);
  swift_task_dealloc(*(_QWORD *)(v1 + 536));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10007B810(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  id v11;
  void *v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100037A5C(&qword_100265260);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v12 = a2;
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v11 = a2;
    sub_10000EF6C((uint64_t)&v12, v10, &qword_1002615C8);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_10007B8B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  sub_100024990(v0 + OBJC_IVAR____TtC13findmylocated14AccountService_state, type metadata accessor for AccountService.State);
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated14AccountService__account, &qword_100260580);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated14AccountService_stateContinuations));
  sub_1000087A0(v0 + OBJC_IVAR____TtC13findmylocated14AccountService_cloudKitAccountStateStream, &qword_1002615D0);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13findmylocated14AccountService_initContinuations));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10007B94C()
{
  return type metadata accessor for AccountService(0);
}

void sub_10007B954(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];

  v8[1] = &unk_1001F4600;
  v8[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2 = type metadata accessor for AccountService.State(319);
  if (v3 <= 0x3F)
  {
    v8[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_10007BA44(319);
    if (v5 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v4 - 8) + 64;
      v8[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      sub_10007BA98(319);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        v8[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v8[8] = &unk_1001F4618;
        swift_updateClassMetadata2(a1, 256, 9, v8, a1 + 80);
      }
    }
  }
}

uint64_t type metadata accessor for AccountService.State(uint64_t a1)
{
  return sub_100025C3C(a1, (uint64_t *)&unk_100261520, (uint64_t)&nominal type descriptor for AccountService.State);
}

void sub_10007BA44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100261308)
  {
    v2 = type metadata accessor for Account(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100261308);
  }
}

void sub_10007BA98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100261310)
  {
    v2 = sub_10003C1FC((uint64_t *)&unk_100261318);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100261310);
  }
}

uint64_t *sub_10007BAF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = sub_100037A5C(&qword_1002614A8);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = type metadata accessor for Account(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
    }
  }
  return a1;
}

uint64_t sub_10007BBC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = sub_100037A5C(&qword_1002614A8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 3, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for Account(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *sub_10007BC30(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100037A5C(&qword_1002614A8);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for Account(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *sub_10007BCE4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_100037A5C(&qword_1002614A8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 3, v6);
  v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = type metadata accessor for Account(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_1000087A0((uint64_t)a1, &qword_1002614A8);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for Account(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

void *sub_10007BDF0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100037A5C(&qword_1002614A8);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for Account(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *sub_10007BEA4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_100037A5C(&qword_1002614A8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 3, v6);
  v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = type metadata accessor for Account(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_1000087A0((uint64_t)a1, &qword_1002614A8);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for Account(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

uint64_t sub_10007BFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007BFBC);
}

uint64_t sub_10007BFBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_100037A5C(&qword_1002614A8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 4)
    return v5 - 3;
  else
    return 0;
}

uint64_t sub_10007C00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007C018);
}

uint64_t sub_10007C018(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 3);
  else
    v5 = 0;
  v6 = sub_100037A5C(&qword_1002614A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_10007C070(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100037A5C(&qword_1002614A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 3, v2);
}

uint64_t sub_10007C0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_1002614A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 3, v4);
}

uint64_t sub_10007C0F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for Account(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 3);
    return 0;
  }
  return result;
}

uint64_t sub_10007C144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.initialLaunchProcessing()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for AccountService(0);
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_10007C1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.migrate(from:to:)[1]);
  *(_QWORD *)(v4 + 16) = v8;
  v9 = type metadata accessor for AccountService(0);
  *v8 = v4;
  v8[1] = sub_10003BF7C;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_10007C228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ActorServiceProtocol.firstLaunchSinceReboot()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for AccountService(0);
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_10007C28C()
{
  uint64_t v0;

  return swift_task_switch(sub_10007C2A0, v0, 0);
}

uint64_t sub_10007C2A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AAD0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AccountService startup", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007C380()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1002612EC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000087DC;
  return sub_100076460();
}

uint64_t sub_10007C3C4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AccountService(0);
  v1 = sub_100004EA8(&qword_100260528, type metadata accessor for AccountService, (uint64_t)&unk_1001F46B0);
  return ActorServiceProtocol.description.getter(v0, v1);
}

uint64_t sub_10007C414()
{
  return sub_100004EA8(&qword_100261530, type metadata accessor for AccountService, (uint64_t)&unk_1001F4688);
}

uint64_t sub_10007C440()
{
  return sub_100004EA8(qword_100261538, type metadata accessor for AccountService, (uint64_t)&unk_1001F4710);
}

uint64_t sub_10007C46C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  unint64_t *v19;
  unint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  _BYTE v25[24];

  v4 = sub_100037A5C(&qword_1002615D8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((*(_BYTE *)(a2 + OBJC_IVAR____TtC13findmylocated14AccountService_isInitialized) & 1) != 0)
  {
    if (qword_10025F8A0 != -1)
      swift_once(&qword_10025F8A0, sub_100075ED4);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100037A9C(v8, (uint64_t)qword_10027AAD0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Init is done. Resume all.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    if (qword_10025F8A0 != -1)
      swift_once(&qword_10025F8A0, sub_100075ED4);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100037A9C(v14, (uint64_t)qword_10027AAD0);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Init in progress; appending continuation.", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v19 = (unint64_t *)(a2 + OBJC_IVAR____TtC13findmylocated14AccountService_initContinuations);
    swift_beginAccess(a2 + OBJC_IVAR____TtC13findmylocated14AccountService_initContinuations, v25, 33, 0);
    v20 = *v19;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v19);
    *v19 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v20 = sub_100161134(0, *(_QWORD *)(v20 + 16) + 1, 1, v20);
      *v19 = v20;
    }
    v23 = *(_QWORD *)(v20 + 16);
    v22 = *(_QWORD *)(v20 + 24);
    if (v23 >= v22 >> 1)
    {
      v20 = sub_100161134(v22 > 1, v23 + 1, 1, v20);
      *v19 = v20;
    }
    *(_QWORD *)(v20 + 16) = v23 + 1;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v20+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v23, v7, v4);
    return swift_endAccess(v25);
  }
}

uint64_t sub_10007C728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[2] = a4;
  v5[3] = a5;
  v7 = type metadata accessor for UUID(0);
  v5[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DarwinNotification(0);
  v5[5] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[6] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[7] = swift_task_alloc(v10);
  v5[8] = swift_task_alloc(v10);
  v11 = sub_100037A5C(&qword_100261618);
  v5[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100037A5C(&qword_100261620);
  v5[10] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[11] = v13;
  v5[12] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100037A5C(&qword_100261628);
  v5[13] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v5[14] = v15;
  v5[15] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10007C838, a4, 0);
}

uint64_t sub_10007C838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AAD0);
  *(_QWORD *)(v0 + 128) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Registering listener for Darwin notification: SPAccountRemovedNotification", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(async function pointer to daemon.getter[1]);
  *(_QWORD *)(v0 + 136) = v6;
  *v6 = v0;
  v6[1] = sub_10007C938;
  return daemon.getter();
}

uint64_t sub_10007C938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v3);
  v4 = type metadata accessor for Daemon(0);
  v5 = sub_100004EA8((unint64_t *)&qword_100261630, (uint64_t (*)(uint64_t))&type metadata accessor for Daemon, (uint64_t)&protocol conformance descriptor for Daemon);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_10007C9CC, v6, v7);
}

uint64_t sub_10007C9CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 152) = Daemon.darwinNotificationHandler.getter();
  swift_release(v1);
  v2 = type metadata accessor for DarwinNotificationHandler(0);
  v3 = sub_100004EA8(&qword_100261638, (uint64_t (*)(uint64_t))&type metadata accessor for DarwinNotificationHandler, (uint64_t)&protocol conformance descriptor for DarwinNotificationHandler);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_10007CA60, v4, v5);
}

uint64_t sub_10007CA60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 16);
  dispatch thunk of DarwinNotificationHandler.asyncStream(name:)(0xD00000000000001CLL, 0x80000001001FD6C0);
  swift_release(v1);
  return swift_task_switch(sub_10007CAC4, v2, 0);
}

uint64_t sub_10007CAC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[11];
  v1 = v0[12];
  v3 = v0[10];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = sub_100004EA8(qword_100261538, type metadata accessor for AccountService, (uint64_t)&unk_1001F4710);
  v0[20] = v4;
  v5 = v0[2];
  v6 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[21] = v6;
  *v6 = v0;
  v6[1] = sub_10007CB78;
  return AsyncStream.Iterator.next(isolation:)(v0[9], v5, v4, v0[13]);
}

uint64_t sub_10007CB78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  return swift_task_switch(sub_10007CBD0, v1, 0);
}

uint64_t sub_10007CBD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(v4, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v1);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 56);
    v10 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v10, v1, v2);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v11, v10, v2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    v15 = os_log_type_enabled(v13, v14);
    v17 = *(_QWORD *)(v0 + 48);
    v16 = *(_QWORD *)(v0 + 56);
    v18 = *(_QWORD *)(v0 + 40);
    if (v15)
    {
      v19 = swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v36 = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = sub_100004EA8(&qword_100261658, (uint64_t (*)(uint64_t))&type metadata accessor for DarwinNotification, (uint64_t)&protocol conformance descriptor for DarwinNotification);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v18, v21);
      v24 = v23;
      *(_QWORD *)(v19 + 4) = sub_10002BA84(v22, v23, &v36);
      swift_bridgeObjectRelease(v24);
      v25 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v25(v16, v18);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Darwin SPAccountRemovedNotification: %s. Reset LocalDB and UserDefaults.", (uint8_t *)v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      v25 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v25(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
    }

    v26 = *(_QWORD *)(v0 + 64);
    v27 = *(_QWORD *)(v0 + 32);
    v28 = *(_QWORD *)(v0 + 40);
    type metadata accessor for WorkItemQueue.WorkItem(0);
    v29 = swift_allocObject(&unk_100250FF0, 32, 7);
    v30 = *(_QWORD *)(v0 + 16);
    *(_OWORD *)(v29 + 16) = *(_OWORD *)(v0 + 16);
    v31 = swift_retain(v30);
    UUID.init()(v31);
    v32 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v27, &unk_100261648, v29, &unk_100261650, 0);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v32);
    swift_release(v32);
    v25(v26, v28);
    v33 = *(_QWORD *)(v0 + 160);
    v34 = *(_QWORD *)(v0 + 16);
    v35 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 168) = v35;
    *v35 = v0;
    v35[1] = sub_10007CB78;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 72), v34, v33, *(_QWORD *)(v0 + 104));
  }
}

uint64_t sub_10007CEC4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[8] = a1;
  v2 = type metadata accessor for Account(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v1[11] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AccountService.State(0);
  v1[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100037A5C(&qword_100260580);
  v1[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10007CF68, 0, 0);
}

uint64_t sub_10007CF68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[13];
  v2 = v0[9];
  v3 = v0[8];
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[10] + 56);
  v0[14] = v4;
  v4(v1, 1, 1, v2);
  return swift_task_switch(sub_10007CFBC, v3, 0);
}

uint64_t sub_10007CFBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[13];
  v2 = v0[8];
  v3 = OBJC_IVAR____TtC13findmylocated14AccountService__account;
  v0[15] = OBJC_IVAR____TtC13findmylocated14AccountService__account;
  v4 = v2 + v3;
  swift_beginAccess(v2 + v3, v0 + 2, 33, 0);
  sub_10007E924(v1, v4);
  swift_endAccess(v0 + 2);
  sub_1000087A0(v1, &qword_100260580);
  return swift_task_switch(sub_10007D04C, 0, 0);
}

uint64_t sub_10007D04C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t **v4;

  v1 = v0[12];
  v2 = sub_100037A5C(&qword_1002614A8);
  v0[16] = v2;
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v0[17] = (uint64_t)v3;
  v3(v1, 3, 3, v2);
  v4 = (uint64_t **)swift_task_alloc(dword_1002615AC);
  v0[18] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_10007D0D4;
  return sub_1000773C4(v0[12], 0);
}

uint64_t sub_10007D0D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 96);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 144));
  sub_100024990(v2, type metadata accessor for AccountService.State);
  v4 = (_QWORD *)swift_task_alloc(dword_100261304);
  *(_QWORD *)(v1 + 152) = v4;
  *v4 = v3;
  v4[1] = sub_10007D158;
  return sub_10007A7D0(*(_QWORD *)(v1 + 88));
}

uint64_t sub_10007D158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10007D4C0;
  else
    v3 = sub_10007D1BC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10007D1BC()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  v1 = v0[13];
  v2 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v0[14];
  v3 = v0[11];
  v5 = v0[8];
  v4 = v0[9];
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[10] + 16);
  v0[21] = v6;
  v6(v1, v3, v4);
  v2(v1, 0, 1, v4);
  return swift_task_switch(sub_10007D22C, v5, 0);
}

uint64_t sub_10007D22C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[13];
  v2 = v0[8] + v0[15];
  swift_beginAccess(v2, v0 + 5, 33, 0);
  sub_10007E924(v1, v2);
  swift_endAccess(v0 + 5);
  sub_1000087A0(v1, &qword_100260580);
  return swift_task_switch(sub_10007D2B4, 0, 0);
}

uint64_t sub_10007D2B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AAD0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Account is available after receiving SPAccountRemovedNotification. Sending .available to subscribers.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = (void (*)(uint64_t, uint64_t, uint64_t))v0[21];
  v7 = v0[16];
  v8 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v0[17];
  v10 = v0[11];
  v9 = v0[12];
  v11 = v0[9];

  v6(v9, v10, v11);
  v8(v9, 0, 3, v7);
  v12 = (_QWORD *)swift_task_alloc(dword_1002615AC);
  v0[22] = v12;
  *v12 = v0;
  v12[1] = sub_10007D400;
  return sub_1000773C4(v0[12], 0);
}

uint64_t sub_10007D400()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  sub_100024990(v1, type metadata accessor for AccountService.State);
  return swift_task_switch(sub_10007D468, 0, 0);
}

uint64_t sub_10007D468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007D4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AAD0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 160);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Account is unavailable after receiving SPAccountRemovedNotification as expected!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_errorRelease(v6);

  v8 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007D5C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[8] = a1;
  v2 = type metadata accessor for AccountService.State(0);
  v1[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Account(0);
  v1[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[11] = v4;
  v1[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100037A5C(&qword_100260580) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[13] = swift_task_alloc(v5);
  v1[14] = swift_task_alloc(v5);
  return swift_task_switch(sub_10007D67C, 0, 0);
}

uint64_t sub_10007D67C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100037A9C(v1, (uint64_t)qword_10027AAD0);
  *(_QWORD *)(v0 + 120) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CK account is available", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 64);

  return swift_task_switch(sub_10007D76C, v6, 0);
}

uint64_t sub_10007D76C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[14];
  v2 = v0[8];
  v3 = OBJC_IVAR____TtC13findmylocated14AccountService__account;
  v0[16] = OBJC_IVAR____TtC13findmylocated14AccountService__account;
  v4 = v2 + v3;
  swift_beginAccess(v2 + v3, v0 + 2, 0, 0);
  sub_10000E37C(v4, v1, &qword_100260580);
  return swift_task_switch(sub_10007D7E0, 0, 0);
}

uint64_t sub_10007D7E0()
{
  _QWORD *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;

  v1 = v0[14];
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v0[11] + 48))(v1, 1, v0[10]);
  v3 = sub_1000087A0(v1, &qword_100260580);
  if (v2 == 1)
  {
    v4 = (_QWORD *)swift_task_alloc(dword_100261304);
    v0[17] = v4;
    *v4 = v0;
    v4[1] = sub_10007D914;
    return sub_10007A7D0(v0[12]);
  }
  else
  {
    v6 = Logger.logObject.getter(v3);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Account info has already been fetched.", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = (_QWORD *)swift_task_alloc(dword_1002612F4);
    v0[21] = v9;
    *v9 = v0;
    v9[1] = sub_10007DBD4;
    return sub_1000797AC();
  }
}

uint64_t sub_10007D914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10007DC4C;
  else
    v3 = sub_10007D978;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10007D978()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  v1 = v0[12];
  v2 = v0[13];
  v3 = v0[10];
  v4 = v0[11];
  v5 = v0[8];
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[19] = v6;
  v6(v2, v1, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  return swift_task_switch(sub_10007D9EC, v5, 0);
}

uint64_t sub_10007D9EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[13];
  v2 = v0[8] + v0[16];
  swift_beginAccess(v2, v0 + 5, 33, 0);
  sub_10007E924(v1, v2);
  swift_endAccess(v0 + 5);
  sub_1000087A0(v1, &qword_100260580);
  return swift_task_switch(sub_10007DA74, 0, 0);
}

uint64_t sub_10007DA74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 152))(v1, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  v2 = sub_100037A5C(&qword_1002614A8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 3, v2);
  v3 = (_QWORD *)swift_task_alloc(dword_1002615AC);
  *(_QWORD *)(v0 + 160) = v3;
  *v3 = v0;
  v3[1] = sub_10007DB00;
  return sub_1000773C4(*(_QWORD *)(v0 + 72), 0);
}

uint64_t sub_10007DB00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  sub_100024990(v1, type metadata accessor for AccountService.State);
  return swift_task_switch(sub_10007DB68, 0, 0);
}

uint64_t sub_10007DB68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007DBD4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v1 = *(_QWORD **)v0;
  v7 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  v3 = v1[13];
  v2 = v1[14];
  v4 = v1[12];
  v5 = v1[9];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v7[1])();
}

uint64_t sub_10007DC4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007DCA8(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 32) = a2;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_10007DCC4, 0, 0);
}

uint64_t sub_10007DCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  if ((*(_BYTE *)(v0 + 32) & 1) == 0)
  {
    if (qword_10025F8A0 != -1)
      swift_once(&qword_10025F8A0, sub_100075ED4);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100037A9C(v1, (uint64_t)qword_10027AAD0);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully updated account info", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(v0 + 24);
  swift_errorRetain(v6);
  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v7 = type metadata accessor for Logger(0);
  sub_100037A9C(v7, (uint64_t)qword_10027AAD0);
  swift_errorRetain(v6);
  v8 = swift_errorRetain(v6);
  v3 = Logger.logObject.getter(v8);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v3, v9);
  v11 = *(_QWORD *)(v0 + 24);
  if (!v10)
  {
    sub_10007E9BC(*(_QWORD *)(v0 + 24), 1);
    sub_10007E9BC(v11, 1);
    swift_errorRelease(v6);
LABEL_11:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v13 = (uint64_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v12 = 138543362;
  swift_errorRetain(v6);
  v14 = _swift_stdlib_bridgeErrorToNSError(v6);
  *(_QWORD *)(v0 + 16) = v14;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4, v12 + 12);
  *v13 = v14;
  sub_10007E9BC(v11, 1);
  sub_10007E9BC(v11, 1);
  _os_log_impl((void *)&_mh_execute_header, v3, v9, "Failed to update account info. Error %{public}@", v12, 0xCu);
  v15 = sub_100037A5C(&qword_100260658);
  swift_arrayDestroy(v13, 1, v15);
  swift_slowDealloc(v13, -1, -1);
  swift_slowDealloc(v12, -1, -1);

  sub_10007E9BC(v11, 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10007DF68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v4 = type metadata accessor for AccountService.State(0);
  __chkstk_darwin(v4);
  v5 = sub_100037A5C(&qword_100261568);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_100025C70(a1, (uint64_t)v8, type metadata accessor for AccountService.State);
  sub_100025C70(a2, v9, type metadata accessor for AccountService.State);
  v10 = sub_100037A5C(&qword_1002614A8);
  v11 = (char *)sub_10007E064
      + 4
      * byte_1001F45BC[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 3, v10)];
  __asm { BR              X10 }
}

uint64_t sub_10007E064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  int v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  sub_100025C70(v0, v1, type metadata accessor for AccountService.State);
  v5 = v4(v2, 3, v3);
  v6 = type metadata accessor for Account(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  if (v5)
  {
    v7(v1, v6);
    sub_1000087A0(v0, &qword_100261568);
    return 0;
  }
  else
  {
    v7(v2, v6);
    v7(v1, v6);
    sub_100024990(v0, type metadata accessor for AccountService.State);
    return 1;
  }
}

uint64_t sub_10007E160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10007E1D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100078E48(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_10007E214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_100037A5C(&qword_100261570);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10007E2DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(sub_100037A5C(&qword_100261570) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc(dword_10026157C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10003BF7C;
  return sub_1000792CC(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_10007E39C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10007E418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_10026159C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003BF7C;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_100078FA4, v3, 0);
}

unint64_t sub_10007E494()
{
  unint64_t result;

  result = qword_1002615B0;
  if (!qword_1002615B0)
  {
    result = swift_getWitnessTable(&unk_1001F4768, &type metadata for AccountService.Error);
    atomic_store(result, (unint64_t *)&qword_1002615B0);
  }
  return result;
}

uint64_t sub_10007E4D8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    v14 = a1;
    v15 = a2;
    v12 = 0x69746375646F7270;
    v13 = 0xEA00000000006E6FLL;
    v4 = sub_1000394E4();
    if (StringProtocol.caseInsensitiveCompare<A>(_:)(&v12, &type metadata for String, &type metadata for String, v4, v4))
    {
      v14 = a1;
      v15 = a2;
      v12 = 0x6D706F6C65766564;
      v13 = 0xEB00000000746E65;
      if (!StringProtocol.caseInsensitiveCompare<A>(_:)(&v12, &type metadata for String, &type metadata for String, v4, v4))
      {
        v5 = &APSEnvironmentDevelopment;
        return static String._unconditionallyBridgeFromObjectiveC(_:)(*v5);
      }
      v14 = a1;
      v15 = a2;
      v12 = 1869440356;
      v13 = 0xE400000000000000;
      if (!StringProtocol.caseInsensitiveCompare<A>(_:)(&v12, &type metadata for String, &type metadata for String, v4, v4))
      {
        v5 = &APSEnvironmentDemo;
        return static String._unconditionallyBridgeFromObjectiveC(_:)(*v5);
      }
    }
    v5 = &APSEnvironmentProduction;
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*v5);
  }
  if (qword_10025F8A0 != -1)
    swift_once(&qword_10025F8A0, sub_100075ED4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100037A9C(v6, (uint64_t)qword_10027AAD0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Invalid APS Env value returned from iCloud Setup. Falling back to production.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  return static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
}

uint64_t sub_10007E6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccountService.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007E710(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100037A5C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007E754()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1002615EC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003BF7C;
  v2 = (_QWORD *)swift_task_alloc(dword_100261664);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10003BF7C;
  return sub_100077CE0();
}

uint64_t sub_10007E7B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1002615FC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003BF7C;
  return sub_100078A20(a1, v1);
}

uint64_t sub_10007E80C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10007E838(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10026160C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000087DC;
  return sub_10007C728(a1, v4, v5, v7, v6);
}

uint64_t sub_10007E8B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007E8D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_100261644);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000087DC;
  return sub_10007CEC4(v2);
}

uint64_t sub_10007E924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100037A5C(&qword_100260580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007E96C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_100261684);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003BF7C;
  return sub_10007D5C8(v2);
}

uint64_t sub_10007E9BC(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_errorRelease();
  return result;
}

uint64_t sub_10007E9C8(uint64_t a1)
{
  uint64_t v1;

  return sub_10007C46C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10007E9D0(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

_QWORD *initializeBufferWithCopyOfBuffer for AccountService.Error(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL)
    swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for AccountService.Error(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_errorRelease();
  return result;
}

unint64_t *assignWithCopy for AccountService.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v3 >= 0xFFFFFFFF)
      swift_errorRetain(*a2);
    *a1 = v3;
  }
  else if (v3 < 0xFFFFFFFF)
  {
    ((void (*)(void))swift_errorRelease)();
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain(*a2);
    v4 = *a1;
    *a1 = v3;
    swift_errorRelease(v4);
  }
  return a1;
}

_QWORD *initializeWithTake for AccountService.Error(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for AccountService.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountService.Error(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFF8 && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483640);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 7;
  if (v4 >= 9)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AccountService.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFF7)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483640;
    if (a3 >= 0x7FFFFFF8)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF8)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 7;
  }
  return result;
}

uint64_t sub_10007EBD0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_10007EBE8(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AccountService.Error()
{
  return &type metadata for AccountService.Error;
}

unint64_t sub_10007EC18(unint64_t result)
{
  if (result >= 8)
    return swift_errorRetain(result);
  return result;
}

unint64_t sub_10007EC28(unint64_t result)
{
  if (result >= 8)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_10007EC40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027AAF0);
  v1 = sub_100037A9C(v0, (uint64_t)qword_10027AAF0);
  if (qword_10025F8B0 != -1)
    swift_once(&qword_10025F8B0, sub_10007EF30);
  v2 = sub_100037A9C(v0, (uint64_t)qword_10027AB08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10007ECD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  if (qword_10025F8A8 != -1)
    swift_once(&qword_10025F8A8, sub_10007EC40);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100037A9C(v6, (uint64_t)qword_10027AAF0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Mock setDidReceive:block", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(_QWORD *)(v3 + 160);
  v12 = *(_QWORD *)(v3 + 168);
  *(_QWORD *)(v3 + 160) = a1;
  *(_QWORD *)(v3 + 168) = a2;
  swift_retain(a2);
  return sub_10007EF20(v11, v12);
}

uint64_t sub_10007EDC8()
{
  uint64_t v0;

  sub_10002BB90((_QWORD *)(v0 + 120));
  sub_10007EF20(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10007EF20(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for MockAPNSManager()
{
  return objc_opt_self(_TtC13findmylocated15MockAPNSManager);
}

uint64_t sub_10007EE24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  return swift_task_switch(sub_10007EE3C, v1, 0);
}

uint64_t sub_10007EE3C()
{
  uint64_t v0;

  sub_10007EFB0(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007EE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_10007EE88, v2, 0);
}

uint64_t sub_10007EE88()
{
  uint64_t v0;

  sub_10007ECD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007EEBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_10007EED8, v2, 0);
}

uint64_t sub_10007EED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v2 + 176);
  v3 = *(_QWORD *)(v2 + 184);
  *(_QWORD *)(v2 + 176) = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 184) = v1;
  swift_retain(v1);
  sub_10007EF20(v4, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007EF20(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10007EF30()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100043F10(v0, qword_10027AB08);
  sub_100037A9C(v0, (uint64_t)qword_10027AB08);
  return Logger.init(subsystem:category:)(0xD00000000000001ELL, 0x80000001001FCAE0, 0x534E50416B636F4DLL, 0xEF726567616E614DLL);
}

void sub_10007EFB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_10025F8A8 != -1)
    swift_once(&qword_10025F8A8, sub_10007EC40);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AAF0);
  v3 = swift_bridgeObjectRetain_n(a1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = swift_bridgeObjectRetain(a1);
    v9 = Array.description.getter(v8);
    v11 = v10;
    swift_bridgeObjectRelease(a1);
    v12 = sub_10002BA84(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mock enabledTopics: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
}

uint64_t sub_10007F174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000087A0(a1, (uint64_t *)&unk_100265180);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = sub_100037A5C(&qword_100261858);
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, v17, a2, a3);
}

uint64_t sub_10007F2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000087A0(a1, (uint64_t *)&unk_100265180);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
    {
LABEL_6:
      v16 = 0;
      return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v17 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
      goto LABEL_6;
  }
  v11 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v10);
  swift_unknownObjectRetain(v10);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
  v15 = v14;
  swift_unknownObjectRelease(v10);
  if (!(v15 | v13))
    goto LABEL_6;
  v19[0] = 0;
  v19[1] = 0;
  v16 = v19;
  v19[2] = v13;
  v19[3] = v15;
  return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_10007F3DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*v2 + 160);
  v5 = *v2;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 144);
  v7 = *(_QWORD *)(v5 + 120);
  swift_task_dealloc(*(_QWORD *)(v5 + 152));
  swift_task_dealloc(v6);
  v8 = swift_task_dealloc(v7);
  if (!v1)
    v8 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v8);
}

uint64_t sub_10007F450(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 2120);
  v5 = *(_QWORD *)(*v2 + 1840);
  *(_QWORD *)(v3 + 2128) = a1;
  *(_QWORD *)(v3 + 2136) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10007F4B4, v5, 0);
}

uint64_t sub_10007F4B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  _QWORD *v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 2136);
  v2 = *(_QWORD *)(v0 + 2128);
  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v3 = type metadata accessor for Logger(0);
  v50 = sub_100037A9C(v3, (uint64_t)qword_10027AB38);
  v4 = Logger.logObject.getter(v50);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v48 = *(_QWORD *)(v0 + 2104) == *(_QWORD *)(v0 + 2112);
    v52 = v1;
    v6 = swift_slowAlloc(28, -1);
    v7 = v2;
    v8 = swift_slowAlloc(64, -1);
    v54 = v8;
    *(_DWORD *)v6 = 136446722;
    *(_QWORD *)(v0 + 1816) = sub_10002BA84(0xD000000000000011, 0x80000001001FD8B0, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1816, v0 + 1824, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    v9 = Duration.description.getter(v7, v52);
    v11 = v10;
    *(_QWORD *)(v0 + 1824) = sub_10002BA84(v9, v10, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1824, v0 + 1832, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v6 + 22) = 1024;
    *(_DWORD *)(v0 + 2192) = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2192, v0 + 2196, v6 + 24, v6 + 28);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s scheduleInterval: %{public}s isHighPriority: %{BOOL}d", (uint8_t *)v6, 0x1Cu);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    v12 = v8;
    v2 = v7;
    swift_slowDealloc(v12, -1, -1);
    v13 = v6;
    v1 = v52;
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = *(_QWORD *)(v0 + 1936);
  v15 = *(_QWORD *)(v0 + 1928);
  v16 = *(_QWORD *)(v0 + 1920);
  v17 = *(_QWORD *)(v0 + 1840) + *(_QWORD *)(v0 + 2080);
  if (*(_QWORD *)(v0 + 2104) == *(_QWORD *)(v0 + 2112))
    v18 = (unsigned int *)(v0 + 2196);
  else
    v18 = (unsigned int *)&enum case for LegacyRefreshSchedule.lowPriorityScheduled(_:);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2088))(*(_QWORD *)(v0 + 1936), *v18, *(_QWORD *)(v0 + 1920));
  swift_beginAccess(v17, v0 + 1632, 33, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40))(v17, v14, v16);
  swift_endAccess(v0 + 1632);
  v19 = Duration.milliseconds.getter(v2, v1);
  if (v19 < 1)
  {
    v43 = Logger.logObject.getter(v19);
    v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v54 = v46;
      *(_DWORD *)v45 = 136446210;
      *(_QWORD *)(v0 + 1808) = sub_10002BA84(0xD000000000000011, 0x80000001001FD8B0, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1808, v0 + 1816, v45 + 4, v45 + 12);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s Refreshing legacy location now.", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }

    v47 = (_QWORD *)swift_task_alloc(dword_100261814);
    *(_QWORD *)(v0 + 2168) = v47;
    *v47 = v0;
    v47[1] = sub_10007FA30;
    return sub_100018EE8(0, v2, v1);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 2056);
    v21 = *(_QWORD *)(v0 + 2016);
    v51 = *(_QWORD *)(v0 + 1912);
    v53 = *(void (**)(uint64_t, uint64_t))(v0 + 2096);
    v49 = *(_QWORD *)(v0 + 1888);
    v22 = *(_QWORD *)(v0 + 1856);
    v23 = *(_QWORD *)(v0 + 2104) == *(_QWORD *)(v0 + 2112);
    v24 = v2;
    v25 = OBJC_IVAR____TtC13findmylocated14CommandManager_coalesceTaskList;
    type metadata accessor for WorkItemQueue.WorkItem(0);
    v26 = swift_allocObject(&unk_1002511D8, 64, 7);
    v27 = *(_OWORD *)(v0 + 1840);
    v28 = v1;
    v29 = *(_QWORD *)(v0 + 1840);
    v30 = *(_QWORD *)(v29 + v25);
    *(_QWORD *)(v26 + 16) = v24;
    *(_QWORD *)(v26 + 24) = v28;
    *(_BYTE *)(v26 + 32) = v23;
    *(_QWORD *)(v26 + 40) = v21;
    *(_OWORD *)(v26 + 48) = v27;
    swift_retain(v30);
    swift_retain(v21);
    v31 = swift_retain(v29);
    UUID.init()(v31);
    v32 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v22, &unk_100261890, v26, &unk_100261898, 0);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v32);
    swift_release(v30);
    swift_release(v32);
    v33 = sub_10003C5E0((uint64_t)_swiftEmptyArrayStorage);
    swift_release(v21);
    swift_release(v20);
    v53(v51, v49);
    v34 = *(_QWORD *)(v0 + 1960);
    v35 = *(_QWORD *)(v0 + 1952);
    v36 = *(_QWORD *)(v0 + 1944);
    v37 = *(_QWORD *)(v0 + 1936);
    v38 = *(_QWORD *)(v0 + 1912);
    v39 = *(_QWORD *)(v0 + 1904);
    v40 = *(_QWORD *)(v0 + 1880);
    v41 = *(_QWORD *)(v0 + 1856);
    swift_task_dealloc(*(_QWORD *)(v0 + 1968));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v33);
  }
}

uint64_t sub_10007FA30(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2168);
  *(_QWORD *)(*v2 + 2176) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 1840);
  if (v1)
  {
    v7 = sub_10007FD10;
  }
  else
  {
    *(_QWORD *)(v4 + 2184) = a1;
    v7 = sub_10007FAA4;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10007FAA4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 2096);
  v2 = *(_QWORD *)(v0 + 2016);
  v3 = *(_QWORD *)(v0 + 1912);
  v4 = *(_QWORD *)(v0 + 1888);
  swift_release(*(_QWORD *)(v0 + 2056));
  swift_release(v2);
  v1(v3, v4);
  v5 = *(_QWORD *)(v0 + 2184);
  v6 = *(_QWORD *)(v0 + 1960);
  v7 = *(_QWORD *)(v0 + 1952);
  v8 = *(_QWORD *)(v0 + 1944);
  v9 = *(_QWORD *)(v0 + 1936);
  v10 = *(_QWORD *)(v0 + 1912);
  v11 = *(_QWORD *)(v0 + 1904);
  v12 = *(_QWORD *)(v0 + 1880);
  v13 = *(_QWORD *)(v0 + 1856);
  swift_task_dealloc(*(_QWORD *)(v0 + 1968));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_10007FB8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*(_QWORD *)(v0 + 1984));
  v1 = *(_QWORD *)(v0 + 1960);
  v2 = *(_QWORD *)(v0 + 1952);
  v3 = *(_QWORD *)(v0 + 1944);
  v4 = *(_QWORD *)(v0 + 1936);
  v5 = *(_QWORD *)(v0 + 1912);
  v6 = *(_QWORD *)(v0 + 1904);
  v7 = *(_QWORD *)(v0 + 1880);
  v8 = *(_QWORD *)(v0 + 1856);
  swift_task_dealloc(*(_QWORD *)(v0 + 1968));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007FC48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 2016);
  swift_release(*(_QWORD *)(v0 + 2040));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 1960);
  v3 = *(_QWORD *)(v0 + 1952);
  v4 = *(_QWORD *)(v0 + 1944);
  v5 = *(_QWORD *)(v0 + 1936);
  v6 = *(_QWORD *)(v0 + 1912);
  v7 = *(_QWORD *)(v0 + 1904);
  v8 = *(_QWORD *)(v0 + 1880);
  v9 = *(_QWORD *)(v0 + 1856);
  swift_task_dealloc(*(_QWORD *)(v0 + 1968));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007FD10()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 2096);
  v2 = *(_QWORD *)(v0 + 2016);
  v3 = *(_QWORD *)(v0 + 1912);
  v4 = *(_QWORD *)(v0 + 1888);
  swift_release(*(_QWORD *)(v0 + 2056));
  swift_release(v2);
  v1(v3, v4);
  v5 = *(_QWORD *)(v0 + 1960);
  v6 = *(_QWORD *)(v0 + 1952);
  v7 = *(_QWORD *)(v0 + 1944);
  v8 = *(_QWORD *)(v0 + 1936);
  v9 = *(_QWORD *)(v0 + 1912);
  v10 = *(_QWORD *)(v0 + 1904);
  v11 = *(_QWORD *)(v0 + 1880);
  v12 = *(_QWORD *)(v0 + 1856);
  swift_task_dealloc(*(_QWORD *)(v0 + 1968));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10007FDF0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  int64_t v20;
  __n128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  os_log_type_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157[3];

  sub_10002B630(v0 + 16);
  v1 = sub_10002B630(v0 + 16);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = swift_slowAlloc(22, -1);
    v5 = swift_slowAlloc(64, -1);
    v157[0] = v5;
    *(_DWORD *)v4 = 136446466;
    *(_QWORD *)(v0 + 864) = sub_10002BA84(0xD00000000000002FLL, 0x80000001001FD880, v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 864, v0 + 872, v4 + 4, v4 + 12);
    *(_WORD *)(v4 + 12) = 2080;
    sub_10002B630(v0 + 16);
    v6 = sub_1000282A0();
    v8 = v7;
    sub_10002B3D4(v0 + 16);
    *(_QWORD *)(v0 + 872) = sub_10002BA84(v6, v8, v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 880, v4 + 14, v4 + 22);
    swift_bridgeObjectRelease(v8);
    sub_10002B3D4(v0 + 16);
    sub_10002B3D4(v0 + 16);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CommandManager %{public}s response: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy(v5, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }
  else
  {
    sub_10002B3D4(v0 + 16);
    sub_10002B3D4(v0 + 16);
  }

  v9 = *(_QWORD *)(v0 + 1120);
  v10 = *(_QWORD *)(v0 + 928);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  v12 = sub_100004EA8(&qword_100261848, type metadata accessor for CommandManager, (uint64_t)&unk_1001F49B0);
  v13 = (_QWORD *)swift_allocObject(&unk_1002511B0, 40, 7);
  v13[2] = v10;
  v13[3] = v12;
  v13[4] = v10;
  swift_retain_n(v10, 2);
  v14 = sub_10007F174(v9, (uint64_t)&unk_100261850, (uint64_t)v13);
  swift_release(v14);
  if (*(_BYTE *)(v0 + 248) != 1)
  {
    v32 = *(_QWORD *)(v0 + 1688);
    v33 = *(_QWORD *)(v0 + 1680);
    v34 = *(_QWORD *)(v0 + 1672);
    v35 = *(_QWORD *)(v0 + 1608);
    v36 = *(_QWORD *)(v0 + 1576);
    v37 = *(_QWORD *)(v0 + 1568);
    v38 = *(_QWORD *)(v0 + 1520);
    v125 = *(_QWORD *)(v0 + 1320);
    v130 = *(_QWORD *)(v0 + 1352);
    v144 = *(_QWORD *)(v0 + 1264);
    v149 = *(void (**)(uint64_t, uint64_t))(v0 + 1648);
    v135 = *(_QWORD *)(v0 + 1240);
    v140 = *(_QWORD *)(v0 + 1232);
    v39 = *(_QWORD *)(v0 + 1160);
    sub_10002B3D4(v0 + 16);
    swift_bridgeObjectRelease(v37);
    v40 = *(_QWORD *)(v0 + 840);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v40);
    v41 = sub_100082560();
    v154 = swift_allocError(&type metadata for LocationServiceError, v41, 0, 0);
    *v42 = 6;
    swift_willThrow(v154);
    swift_bridgeObjectRelease(v34);
    swift_release(v38);
    swift_release(v35);
    sub_100037AF8(v33, v32);
    sub_100024990(v39, type metadata accessor for LocationEndpoint);
    v149(v130, v125);
    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v144, v140);
    v43 = *(_QWORD *)(v0 + 1464);
    v44 = *(_QWORD *)(v0 + 1456);
    v45 = *(_QWORD *)(v0 + 1448);
    v46 = *(_QWORD *)(v0 + 1440);
    v47 = *(_QWORD *)(v0 + 1416);
    v48 = *(_QWORD *)(v0 + 1408);
    v49 = *(_QWORD *)(v0 + 1400);
    v50 = *(_QWORD *)(v0 + 1392);
    v51 = *(_QWORD *)(v0 + 1384);
    v81 = *(_QWORD *)(v0 + 1360);
    v82 = *(_QWORD *)(v0 + 1352);
    v84 = *(_QWORD *)(v0 + 1344);
    v86 = *(_QWORD *)(v0 + 1336);
    v88 = *(_QWORD *)(v0 + 1312);
    v90 = *(_QWORD *)(v0 + 1288);
    v92 = *(_QWORD *)(v0 + 1264);
    v94 = *(_QWORD *)(v0 + 1256);
    v96 = *(_QWORD *)(v0 + 1248);
    v98 = *(_QWORD *)(v0 + 1224);
    v100 = *(_QWORD *)(v0 + 1216);
    v102 = *(_QWORD *)(v0 + 1192);
    v104 = *(_QWORD *)(v0 + 1184);
    v106 = *(_QWORD *)(v0 + 1160);
    v108 = *(_QWORD *)(v0 + 1144);
    v110 = *(_QWORD *)(v0 + 1120);
    v112 = *(_QWORD *)(v0 + 1112);
    v114 = *(_QWORD *)(v0 + 1104);
    v116 = *(_QWORD *)(v0 + 1080);
    v118 = *(_QWORD *)(v0 + 1072);
    v121 = *(_QWORD *)(v0 + 1048);
    v126 = *(_QWORD *)(v0 + 1040);
    v131 = *(_QWORD *)(v0 + 1032);
    v136 = *(_QWORD *)(v0 + 1008);
    v141 = *(_QWORD *)(v0 + 984);
    v145 = *(_QWORD *)(v0 + 976);
    v150 = *(_QWORD *)(v0 + 952);
    swift_task_dealloc(*(_QWORD *)(v0 + 1472));
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    swift_task_dealloc(v121);
    swift_task_dealloc(v126);
    swift_task_dealloc(v131);
    swift_task_dealloc(v136);
    swift_task_dealloc(v141);
    swift_task_dealloc(v145);
    swift_task_dealloc(v150);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v15 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 1720) = v15;
  if (!v15)
  {
    v52 = *(_QWORD *)(v0 + 1568);
    sub_10002B3D4(v0 + 16);
LABEL_23:
    swift_bridgeObjectRelease(v52);
    v61 = *(_QWORD *)(v0 + 1688);
    v62 = *(_QWORD *)(v0 + 1680);
    v63 = *(_QWORD *)(v0 + 1672);
    v142 = *(void (**)(uint64_t, uint64_t))(v0 + 1648);
    v64 = *(_QWORD *)(v0 + 1608);
    v65 = *(_QWORD *)(v0 + 1520);
    v66 = *(_QWORD *)(v0 + 1352);
    v119 = *(_QWORD *)(v0 + 1320);
    v137 = *(_QWORD *)(v0 + 1264);
    v122 = *(_QWORD *)(v0 + 1240);
    v67 = *(_QWORD *)(v0 + 1160);
    v68 = *(_QWORD *)(v0 + 1008);
    v146 = *(_QWORD *)(v0 + 1000);
    v151 = *(_QWORD *)(v0 + 992);
    v127 = *(_QWORD *)(v0 + 928);
    v132 = *(_QWORD *)(v0 + 1232);
    v69 = *(_QWORD *)(v0 + 840);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1576));
    v70 = swift_bridgeObjectRelease(v69);
    static Date.now.getter(v70);
    swift_bridgeObjectRelease(v63);
    swift_release(v65);
    swift_release(v64);
    sub_100037AF8(v62, v61);
    sub_100024990(v67, type metadata accessor for LocationEndpoint);
    v142(v66, v119);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v137, v132);
    v71 = v127 + OBJC_IVAR____TtC13findmylocated14CommandManager_lastRefreshDate;
    swift_beginAccess(v127 + OBJC_IVAR____TtC13findmylocated14CommandManager_lastRefreshDate, v0 + 736, 33, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 40))(v71, v68, v151);
    swift_endAccess(v0 + 736);
    v72 = *(_QWORD *)(v0 + 1464);
    v73 = *(_QWORD *)(v0 + 1456);
    v74 = *(_QWORD *)(v0 + 1448);
    v75 = *(_QWORD *)(v0 + 1440);
    v76 = *(_QWORD *)(v0 + 1416);
    v77 = *(_QWORD *)(v0 + 1408);
    v78 = *(_QWORD *)(v0 + 1400);
    v79 = *(_QWORD *)(v0 + 1392);
    v80 = *(_QWORD *)(v0 + 1384);
    v83 = *(_QWORD *)(v0 + 1360);
    v85 = *(_QWORD *)(v0 + 1352);
    v87 = *(_QWORD *)(v0 + 1344);
    v89 = *(_QWORD *)(v0 + 1336);
    v91 = *(_QWORD *)(v0 + 1312);
    v93 = *(_QWORD *)(v0 + 1288);
    v95 = *(_QWORD *)(v0 + 1264);
    v97 = *(_QWORD *)(v0 + 1256);
    v99 = *(_QWORD *)(v0 + 1248);
    v101 = *(_QWORD *)(v0 + 1224);
    v103 = *(_QWORD *)(v0 + 1216);
    v105 = *(_QWORD *)(v0 + 1192);
    v107 = *(_QWORD *)(v0 + 1184);
    v109 = *(_QWORD *)(v0 + 1160);
    v111 = *(_QWORD *)(v0 + 1144);
    v113 = *(_QWORD *)(v0 + 1120);
    v115 = *(_QWORD *)(v0 + 1112);
    v117 = *(_QWORD *)(v0 + 1104);
    v120 = *(_QWORD *)(v0 + 1080);
    v123 = *(_QWORD *)(v0 + 1072);
    v128 = *(_QWORD *)(v0 + 1048);
    v133 = *(_QWORD *)(v0 + 1040);
    v138 = *(_QWORD *)(v0 + 1032);
    v143 = *(_QWORD *)(v0 + 1008);
    v147 = *(_QWORD *)(v0 + 984);
    v152 = *(_QWORD *)(v0 + 976);
    v155 = *(_QWORD *)(v0 + 952);
    swift_task_dealloc(*(_QWORD *)(v0 + 1472));
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v120);
    swift_task_dealloc(v123);
    swift_task_dealloc(v128);
    swift_task_dealloc(v133);
    swift_task_dealloc(v138);
    swift_task_dealloc(v143);
    swift_task_dealloc(v147);
    swift_task_dealloc(v152);
    swift_task_dealloc(v155);
    (*(void (**)(_QWORD *))(v0 + 8))(_swiftEmptyDictionarySingleton);
    return;
  }
  swift_bridgeObjectRetain(v15);
  sub_10002B3D4(v0 + 16);
  v16 = swift_bridgeObjectRetain_n(v15, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v148 = swift_slowAlloc(32, -1);
    v156 = v148;
    *(_DWORD *)v19 = 134218242;
    v20 = *(_QWORD *)(v15 + 16);
    *(_QWORD *)(v0 + 848) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2082;
    v22 = _swiftEmptyArrayStorage;
    if (v20)
    {
      v124 = v18;
      v129 = v19;
      v134 = v17;
      v153 = *(_QWORD *)(v0 + 1112);
      v23 = *(_QWORD *)(v0 + 1096);
      v157[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000312EC(0, v20, 0);
      v139 = v15;
      v24 = v15 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
      v25 = *(_QWORD *)(v23 + 72);
      v22 = (_QWORD *)v157[0];
      do
      {
        v26 = *(uint64_t **)(v0 + 1112);
        sub_100025C70(v24, (uint64_t)v26, type metadata accessor for ServerLocation);
        v27 = *v26;
        v28 = *(_QWORD *)(v153 + 8);
        swift_bridgeObjectRetain(v28);
        sub_100024990((uint64_t)v26, type metadata accessor for ServerLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
        {
          sub_1000312EC(0, v22[2] + 1, 1);
          v22 = (_QWORD *)v157[0];
        }
        v30 = v22[2];
        v29 = v22[3];
        if (v30 >= v29 >> 1)
        {
          sub_1000312EC(v29 > 1, v30 + 1, 1);
          v22 = (_QWORD *)v157[0];
        }
        v22[2] = v30 + 1;
        v31 = &v22[2 * v30];
        v31[4] = v27;
        v31[5] = v28;
        v24 += v25;
        --v20;
      }
      while (v20);
      v17 = v134;
      v15 = v139;
      v19 = v129;
      v18 = v124;
    }
    v53 = Array.description.getter(v21);
    v55 = v54;
    swift_bridgeObjectRelease(v22);
    *(_QWORD *)(v0 + 856) = sub_10002BA84(v53, v55, &v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease_n(v15, 2);
    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received legacy locations [%ld] for ids: %{public}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v148, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v148, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v15, 2);
  }
  v56 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v0 + 1728) = v56;
  if (!v56)
  {
    v52 = *(_QWORD *)(v0 + 1720);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1568));
    goto LABEL_23;
  }
  v57 = *(_QWORD *)(v0 + 1104);
  v58 = *(_DWORD *)(*(_QWORD *)(v0 + 1096) + 80);
  *(_DWORD *)(v0 + 1768) = v58;
  *(_DWORD *)(v0 + 1772) = enum case for LocationType.legacy(_:);
  *(_DWORD *)(v0 + 1776) = enum case for MotionActivityState.unknown(_:);
  *(_QWORD *)(v0 + 1744) = 0;
  *(_QWORD *)(v0 + 1736) = _swiftEmptyDictionarySingleton;
  v59 = *(_QWORD *)(v0 + 1720);
  if (*(_QWORD *)(v59 + 16))
  {
    sub_100025C70(v59 + ((v58 + 32) & ~(unint64_t)v58), v57, type metadata accessor for ServerLocation);
    v60 = (_QWORD *)swift_task_alloc(dword_10026559C);
    *(_QWORD *)(v0 + 1752) = v60;
    *v60 = v0;
    v60[1] = sub_1000809E8;
    sub_1000054C0();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000809E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1752);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 928);
  *(_QWORD *)(*(_QWORD *)v1 + 1760) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000240FC, v3, 0);
}

uint64_t sub_100080A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  swift_release(*(_QWORD *)(v0 + 1488));
  v1 = *(_QWORD *)(v0 + 1464);
  v2 = *(_QWORD *)(v0 + 1456);
  v3 = *(_QWORD *)(v0 + 1448);
  v4 = *(_QWORD *)(v0 + 1440);
  v5 = *(_QWORD *)(v0 + 1416);
  v6 = *(_QWORD *)(v0 + 1408);
  v7 = *(_QWORD *)(v0 + 1400);
  v8 = *(_QWORD *)(v0 + 1392);
  v9 = *(_QWORD *)(v0 + 1384);
  v11 = *(_QWORD *)(v0 + 1360);
  v12 = *(_QWORD *)(v0 + 1352);
  v13 = *(_QWORD *)(v0 + 1344);
  v14 = *(_QWORD *)(v0 + 1336);
  v15 = *(_QWORD *)(v0 + 1312);
  v16 = *(_QWORD *)(v0 + 1288);
  v17 = *(_QWORD *)(v0 + 1264);
  v18 = *(_QWORD *)(v0 + 1256);
  v19 = *(_QWORD *)(v0 + 1248);
  v20 = *(_QWORD *)(v0 + 1224);
  v21 = *(_QWORD *)(v0 + 1216);
  v22 = *(_QWORD *)(v0 + 1192);
  v23 = *(_QWORD *)(v0 + 1184);
  v24 = *(_QWORD *)(v0 + 1160);
  v25 = *(_QWORD *)(v0 + 1144);
  v26 = *(_QWORD *)(v0 + 1120);
  v27 = *(_QWORD *)(v0 + 1112);
  v28 = *(_QWORD *)(v0 + 1104);
  v29 = *(_QWORD *)(v0 + 1080);
  v30 = *(_QWORD *)(v0 + 1072);
  v31 = *(_QWORD *)(v0 + 1048);
  v32 = *(_QWORD *)(v0 + 1040);
  v33 = *(_QWORD *)(v0 + 1032);
  v34 = *(_QWORD *)(v0 + 1008);
  v35 = *(_QWORD *)(v0 + 984);
  v36 = *(_QWORD *)(v0 + 976);
  v37 = *(_QWORD *)(v0 + 952);
  swift_task_dealloc(*(_QWORD *)(v0 + 1472));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100080C94()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 1688);
  v2 = *(_QWORD *)(v0 + 1680);
  v3 = *(_QWORD *)(v0 + 1672);
  v4 = *(_QWORD *)(v0 + 1520);
  v5 = *(_QWORD *)(v0 + 1352);
  v6 = *(_QWORD *)(v0 + 1320);
  v44 = *(_QWORD *)(v0 + 1264);
  v46 = *(void (**)(uint64_t, uint64_t))(v0 + 1648);
  v7 = *(_QWORD *)(v0 + 1240);
  v8 = *(_QWORD *)(v0 + 1232);
  v9 = *(_QWORD *)(v0 + 1160);
  swift_release(*(_QWORD *)(v0 + 1608));
  swift_release(v4);
  swift_bridgeObjectRelease(v3);
  sub_100037AF8(v2, v1);
  sub_100024990(v9, type metadata accessor for LocationEndpoint);
  v46(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v44, v8);
  sub_10002BB90((_QWORD *)(v0 + 632));
  sub_10002BB90((_QWORD *)(v0 + 672));
  v10 = *(_QWORD *)(v0 + 1464);
  v11 = *(_QWORD *)(v0 + 1456);
  v12 = *(_QWORD *)(v0 + 1448);
  v13 = *(_QWORD *)(v0 + 1440);
  v14 = *(_QWORD *)(v0 + 1416);
  v15 = *(_QWORD *)(v0 + 1408);
  v16 = *(_QWORD *)(v0 + 1400);
  v17 = *(_QWORD *)(v0 + 1392);
  v18 = *(_QWORD *)(v0 + 1384);
  v20 = *(_QWORD *)(v0 + 1360);
  v21 = *(_QWORD *)(v0 + 1352);
  v22 = *(_QWORD *)(v0 + 1344);
  v23 = *(_QWORD *)(v0 + 1336);
  v24 = *(_QWORD *)(v0 + 1312);
  v25 = *(_QWORD *)(v0 + 1288);
  v26 = *(_QWORD *)(v0 + 1264);
  v27 = *(_QWORD *)(v0 + 1256);
  v28 = *(_QWORD *)(v0 + 1248);
  v29 = *(_QWORD *)(v0 + 1224);
  v30 = *(_QWORD *)(v0 + 1216);
  v31 = *(_QWORD *)(v0 + 1192);
  v32 = *(_QWORD *)(v0 + 1184);
  v33 = *(_QWORD *)(v0 + 1160);
  v34 = *(_QWORD *)(v0 + 1144);
  v35 = *(_QWORD *)(v0 + 1120);
  v36 = *(_QWORD *)(v0 + 1112);
  v37 = *(_QWORD *)(v0 + 1104);
  v38 = *(_QWORD *)(v0 + 1080);
  v39 = *(_QWORD *)(v0 + 1072);
  v40 = *(_QWORD *)(v0 + 1048);
  v41 = *(_QWORD *)(v0 + 1040);
  v42 = *(_QWORD *)(v0 + 1032);
  v43 = *(_QWORD *)(v0 + 1008);
  v45 = *(_QWORD *)(v0 + 984);
  v47 = *(_QWORD *)(v0 + 976);
  v48 = *(_QWORD *)(v0 + 952);
  swift_task_dealloc(*(_QWORD *)(v0 + 1472));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100080F78(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t refreshed;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v5 + 1800) = a5;
  *(_QWORD *)(v5 + 1792) = a4;
  *(_BYTE *)(v5 + 2012) = a3;
  *(_QWORD *)(v5 + 1784) = a2;
  *(_QWORD *)(v5 + 1776) = a1;
  refreshed = type metadata accessor for LegacyRefreshSchedule(0);
  *(_QWORD *)(v5 + 1808) = refreshed;
  v7 = *(_QWORD *)(refreshed - 8);
  *(_QWORD *)(v5 + 1816) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 1824) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 1832) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 1840) = swift_task_alloc(v8);
  v9 = type metadata accessor for Date(0);
  *(_QWORD *)(v5 + 1848) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 1856) = v10;
  *(_QWORD *)(v5 + 1864) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ContinuousClock(0);
  *(_QWORD *)(v5 + 1872) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 1880) = v12;
  *(_QWORD *)(v5 + 1888) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100081054, 0, 0);
}

uint64_t sub_100081054(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()(a1);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1002618A0 + dword_1002618A0);
  v2 = (_QWORD *)swift_task_alloc(unk_1002618A4);
  v1[237] = v2;
  *v2 = v1;
  v2[1] = sub_1000810D0;
  return v4(v1[222], v1[223], 0, 0, 1);
}

uint64_t sub_1000810D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  _QWORD *v10;

  v2 = *(_QWORD *)(*v1 + 1896);
  v3 = *(_QWORD *)(*v1 + 1888);
  v4 = *(_QWORD *)(*v1 + 1880);
  v5 = *(_QWORD *)(*v1 + 1872);
  v6 = *v1;
  *(_QWORD *)(v6 + 1904) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    v7 = sub_1000811C0;
    v8 = 0;
    return swift_task_switch(v7, v8, 0);
  }
  if ((*(_BYTE *)(v6 + 2012) & 1) != 0)
  {
    *(_BYTE *)(v6 + 2013) = 1;
    v8 = *(_QWORD *)(v6 + 1800);
    v7 = sub_100081674;
    return swift_task_switch(v7, v8, 0);
  }
  v10 = (_QWORD *)swift_task_alloc(dword_1002659A4);
  *(_QWORD *)(v6 + 1912) = v10;
  *v10 = v6;
  v10[1] = sub_10008144C;
  return sub_10000AFC8(v6 + 880);
}

uint64_t sub_1000811C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 1904);
  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB38);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 1784);
    v7 = *(_QWORD *)(v0 + 1776);
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v21 = v10;
    *(_DWORD *)v8 = 136446466;
    v11 = Duration.description.getter(v7, v6);
    v13 = v12;
    *(_QWORD *)(v0 + 1744) = sub_10002BA84(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1744, v0 + 1752, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v1);
    v14 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 1736) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1736, v0 + 1744, v8 + 14, v8 + 22);
    *v9 = v14;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "scheduleRefresh with scheduleInterval: %{public}s. Error: %{public}@", (uint8_t *)v8, 0x16u);
    v15 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v9, 1, v15);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v16 = *(_QWORD *)(v0 + 1864);
  v17 = *(_QWORD *)(v0 + 1840);
  v18 = *(_QWORD *)(v0 + 1832);
  v19 = *(_QWORD *)(v0 + 1824);
  swift_task_dealloc(*(_QWORD *)(v0 + 1888));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008144C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1792);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1912));
  return swift_task_switch(sub_1000814A4, v1, 0);
}

uint64_t sub_1000814A4()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_10000EF6C(v0 + 880, v0 + 448, &qword_1002603A8);
  if (sub_100049214(v0 + 448) == 1
    || (memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL),
        sub_10000EF6C(v0 + 112, v0 + 1472, &qword_1002603B0),
        sub_10000EFB0((_QWORD *)(v0 + 1472), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002C108), sub_10000AF28(v0 + 880), sub_10000EF6C(v0 + 1472, v0 + 1312, &qword_1002603B0), sub_10005EFE0(v0 + 1312) == 1))
  {
    v1 = 5000.0;
  }
  else
  {
    v1 = *(double *)(v0 + 1312);
    sub_10000EFB0((_QWORD *)(v0 + 1472), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002BF40);
  }
  v2 = *(_QWORD *)(v0 + 1864);
  v3 = *(_QWORD *)(v0 + 1856);
  v4 = *(_QWORD *)(v0 + 1848);
  v5 = *(_QWORD *)(v0 + 1792);
  v6 = static Duration.seconds(_:)(v1 / 1000.0);
  v8 = v7;
  v9 = static Date.now.getter(v6);
  v10 = Date.timeIntervalSince1970.getter(v9);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v11 = static Duration.seconds(_:)(v10 - *(double *)(v5
                                                    + OBJC_IVAR____TtC13findmylocated11DataManager_lastSuccessfulResponseTimestamp));
  *(_QWORD *)(v0 + 1920) = static Duration.- infix(_:_:)(v6, v8, v11, v12);
  *(_QWORD *)(v0 + 1928) = v13;
  return swift_task_switch(sub_100081628, 0, 0);
}

uint64_t sub_100081628()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 2013) = Duration.milliseconds.getter(*(_QWORD *)(v0 + 1920), *(_QWORD *)(v0 + 1928)) > 0;
  return swift_task_switch(sub_100081674, *(_QWORD *)(v0 + 1800), 0);
}

uint64_t sub_100081674()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[230];
  v2 = v0[227];
  v3 = v0[226];
  v4 = v0[225];
  v5 = OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  v0[242] = OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  v6 = v4 + v5;
  swift_beginAccess(v4 + v5, v0 + 204, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v3);
  return swift_task_switch(sub_1000816FC, 0, 0);
}

uint64_t sub_1000816FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  char v16;
  uint64_t v17;
  _QWORD *v18;

  if (*(_BYTE *)(v0 + 2013) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_100261814);
    *(_QWORD *)(v0 + 1944) = v1;
    *v1 = v0;
    v1[1] = sub_100081908;
    return sub_100018EE8(1, *(_QWORD *)(v0 + 1776), *(_QWORD *)(v0 + 1784));
  }
  v3 = *(_QWORD *)(v0 + 1832);
  v4 = *(_QWORD *)(v0 + 1816);
  v5 = *(_QWORD *)(v0 + 1808);
  *(_DWORD *)(v0 + 2008) = enum case for LegacyRefreshSchedule.lowPriorityScheduled(_:);
  v6 = *(void (**)(uint64_t))(v4 + 104);
  *(_QWORD *)(v0 + 1960) = v6;
  v6(v3);
  v7 = sub_100004EA8(&qword_100261880, (uint64_t (*)(uint64_t))&type metadata accessor for LegacyRefreshSchedule, (uint64_t)&protocol conformance descriptor for LegacyRefreshSchedule);
  dispatch thunk of RawRepresentable.rawValue.getter(v5, v7);
  dispatch thunk of RawRepresentable.rawValue.getter(v5, v7);
  v8 = *(_QWORD *)(v0 + 1704);
  v9 = *(_QWORD *)(v0 + 1712);
  v10 = *(_QWORD *)(v0 + 1720);
  v11 = *(_QWORD *)(v0 + 1728);
  v12 = *(_QWORD *)(v0 + 1832);
  v13 = *(_QWORD *)(v0 + 1816);
  v14 = *(_QWORD *)(v0 + 1808);
  if (v8 == v10 && v9 == v11)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1712), 2);
    v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v15(v12, v14);
LABEL_7:
    *(_QWORD *)(v0 + 1968) = v15;
    v17 = *(_QWORD *)(v0 + 1800);
    ((void (*)(_QWORD, _QWORD, _QWORD))v6)(*(_QWORD *)(v0 + 1824), enum case for LegacyRefreshSchedule.notScheduled(_:), *(_QWORD *)(v0 + 1808));
    return swift_task_switch(sub_1000819F8, v17, 0);
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, *(_QWORD *)(v0 + 1712), v10, *(_QWORD *)(v0 + 1728), 0);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v11);
  v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v15(v12, v14);
  if ((v16 & 1) != 0)
    goto LABEL_7;
  *(_QWORD *)(v0 + 1984) = v15;
  v18 = (_QWORD *)swift_task_alloc(dword_100261864);
  *(_QWORD *)(v0 + 1992) = v18;
  *v18 = v0;
  v18[1] = sub_100081D70;
  return sub_10001485C();
}

uint64_t sub_100081908(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1944);
  *(_QWORD *)(*(_QWORD *)v2 + 1952) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100081E5C;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v5 = sub_100081978;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100081978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1816) + 8))(*(_QWORD *)(v0 + 1840), *(_QWORD *)(v0 + 1808));
  v1 = *(_QWORD *)(v0 + 1864);
  v2 = *(_QWORD *)(v0 + 1840);
  v3 = *(_QWORD *)(v0 + 1832);
  v4 = *(_QWORD *)(v0 + 1824);
  swift_task_dealloc(*(_QWORD *)(v0 + 1888));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000819F8()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v1 = (void (*)(uint64_t, uint64_t))v0[246];
  v2 = v0[228];
  v3 = v0[227];
  v4 = v0[226];
  v5 = v0[225];
  v6 = v5 + v0[242];
  swift_beginAccess(v6, v0 + 207, 33, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 24))(v6, v2, v4);
  swift_endAccess(v0 + 207);
  v1(v2, v4);
  v7 = (uint64_t *)(v5 + OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands);
  swift_beginAccess(v5 + OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands, v0 + 210, 0, 0);
  v8 = *v7;
  v0[247] = *v7;
  swift_bridgeObjectRetain(v8);
  return swift_task_switch(sub_100081AD4, 0, 0);
}

uint64_t sub_100081AD4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t refreshed;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 1976);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 1968);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1960);
  v4 = (unsigned int *)(v0 + 2008);
  v5 = *(_QWORD *)(v0 + 1824);
  v6 = *(_QWORD *)(v0 + 1808);
  v7 = *(_QWORD *)(v1 + 16);
  if (*(_BYTE *)(v0 + 2012))
    v4 = (unsigned int *)&enum case for LegacyRefreshSchedule.highPriorityScheduled(_:);
  v8 = *v4;
  swift_bridgeObjectRelease(v1);
  v9 = v3(v5, v8, v6);
  refreshed = LegacyRefreshSchedule.rawValue.getter(v9);
  v12 = v11;
  v2(v5, v6);
  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v13 = type metadata accessor for Logger(0);
  sub_100037A9C(v13, (uint64_t)qword_10027AB38);
  swift_bridgeObjectRetain(v12);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(32, -1);
    v21 = v7;
    v18 = swift_slowAlloc(64, -1);
    v22 = v18;
    *(_DWORD *)v17 = 136446722;
    *(_QWORD *)(v0 + 1752) = sub_10002BA84(0xD000000000000011, 0x80000001001FD8B0, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1752, v0 + 1760, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain(v12);
    *(_QWORD *)(v0 + 1760) = sub_10002BA84(refreshed, v12, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1760, v0 + 1768, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease_n(v12, 3);
    *(_WORD *)(v17 + 22) = 2048;
    *(_QWORD *)(v0 + 1768) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1768, v0 + 1776, v17 + 24, v17 + 32);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s Discarding queued request priority: [%s],\ncurrent Tasks count: [%ld]", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v12, 2);
  }
  *(_QWORD *)(v0 + 1984) = *(_QWORD *)(v0 + 1968);
  v19 = (_QWORD *)swift_task_alloc(dword_100261864);
  *(_QWORD *)(v0 + 1992) = v19;
  *v19 = v0;
  v19[1] = sub_100081D70;
  return sub_10001485C();
}

uint64_t sub_100081D70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1992);
  *(_QWORD *)(*(_QWORD *)v2 + 2000) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1000820FC;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v5 = sub_100081DE0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100081DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1840), *(_QWORD *)(v0 + 1808));
  v1 = *(_QWORD *)(v0 + 1864);
  v2 = *(_QWORD *)(v0 + 1840);
  v3 = *(_QWORD *)(v0 + 1832);
  v4 = *(_QWORD *)(v0 + 1824);
  swift_task_dealloc(*(_QWORD *)(v0 + 1888));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100081E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1816) + 8))(*(_QWORD *)(v0 + 1840), *(_QWORD *)(v0 + 1808));
  v1 = *(_QWORD *)(v0 + 1952);
  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB38);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 1784);
    v7 = *(_QWORD *)(v0 + 1776);
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v21 = v10;
    *(_DWORD *)v8 = 136446466;
    v11 = Duration.description.getter(v7, v6);
    v13 = v12;
    *(_QWORD *)(v0 + 1744) = sub_10002BA84(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1744, v0 + 1752, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v1);
    v14 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 1736) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1736, v0 + 1744, v8 + 14, v8 + 22);
    *v9 = v14;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "scheduleRefresh with scheduleInterval: %{public}s. Error: %{public}@", (uint8_t *)v8, 0x16u);
    v15 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v9, 1, v15);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v16 = *(_QWORD *)(v0 + 1864);
  v17 = *(_QWORD *)(v0 + 1840);
  v18 = *(_QWORD *)(v0 + 1832);
  v19 = *(_QWORD *)(v0 + 1824);
  swift_task_dealloc(*(_QWORD *)(v0 + 1888));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000820FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  (*(void (**)(_QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1840), *(_QWORD *)(v0 + 1808));
  v1 = *(_QWORD *)(v0 + 2000);
  if (qword_10025F8C0 != -1)
    swift_once(&qword_10025F8C0, sub_100098E4C);
  v2 = type metadata accessor for Logger(0);
  sub_100037A9C(v2, (uint64_t)qword_10027AB38);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 1784);
    v7 = *(_QWORD *)(v0 + 1776);
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v21 = v10;
    *(_DWORD *)v8 = 136446466;
    v11 = Duration.description.getter(v7, v6);
    v13 = v12;
    *(_QWORD *)(v0 + 1744) = sub_10002BA84(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1744, v0 + 1752, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v1);
    v14 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 1736) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1736, v0 + 1744, v8 + 14, v8 + 22);
    *v9 = v14;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "scheduleRefresh with scheduleInterval: %{public}s. Error: %{public}@", (uint8_t *)v8, 0x16u);
    v15 = sub_100037A5C(&qword_100260658);
    swift_arrayDestroy(v9, 1, v15);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v16 = *(_QWORD *)(v0 + 1864);
  v17 = *(_QWORD *)(v0 + 1840);
  v18 = *(_QWORD *)(v0 + 1832);
  v19 = *(_QWORD *)(v0 + 1824);
  swift_task_dealloc(*(_QWORD *)(v0 + 1888));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100082398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[2] = a1;
  v4[3] = a4;
  v5 = (_QWORD *)swift_task_alloc(dword_100261864);
  v4[4] = v5;
  *v5 = v4;
  v5[1] = sub_1000823E4;
  return sub_10001485C();
}

uint64_t sub_1000823E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  v8 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 40) = a1;
  return swift_task_switch(sub_100082460, v8, 0);
}

uint64_t sub_100082460()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100082478()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_100082524, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100082524()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100082560()
{
  unint64_t result;

  result = qword_100261828;
  if (!qword_100261828)
  {
    result = swift_getWitnessTable(&unk_1001F5060, &type metadata for LocationServiceError);
    atomic_store(result, (unint64_t *)&qword_100261828);
  }
  return result;
}

unint64_t sub_1000825A4()
{
  unint64_t result;

  result = qword_100261838;
  if (!qword_100261838)
  {
    result = swift_getWitnessTable(&unk_1001F9A64, &type metadata for LocationServerRequest);
    atomic_store(result, &qword_100261838);
  }
  return result;
}

uint64_t sub_1000825E8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100082614(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_100261844);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003BF7C;
  v5[2] = a1;
  v5[3] = v4;
  v6 = (_QWORD *)swift_task_alloc(dword_100261864);
  v5[4] = v6;
  *v6 = v5;
  v6[1] = sub_1000823E4;
  return sub_10001485C();
}

uint64_t sub_10008268C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LegacyLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000826D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000826FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = (_QWORD *)swift_task_alloc(dword_10026188C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_1000087DC;
  return sub_100080F78(v2, v3, v4, v5, v6);
}

unint64_t sub_10008277C()
{
  unint64_t result;

  result = qword_1002618C0;
  if (!qword_1002618C0)
  {
    result = swift_getWitnessTable(&unk_1001FB6DC, &type metadata for FriendSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_1002618C0);
  }
  return result;
}

uint64_t sub_1000827C0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];
  _OWORD v40[3];
  _OWORD v41[2];
  __int128 v42;
  _OWORD v43[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100037A5C(&qword_1002619E0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v30 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v29)
        goto LABEL_37;
      v15 = *(_QWORD *)(v30 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v29)
          goto LABEL_37;
        v15 = *(_QWORD *)(v30 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v29)
            goto LABEL_37;
          v15 = *(_QWORD *)(v30 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_10002BB54(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v43);
    *(_QWORD *)&v42 = v20;
    *((_QWORD *)&v42 + 1) = v19;
    v40[2] = v42;
    v41[0] = v43[0];
    v41[1] = v43[1];
    v31[0] = v20;
    v31[1] = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v32, v31, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10001AEAC(v41, v40);
    v21 = sub_100037A5C(&qword_1002619D8);
    swift_dynamicCast(v35, v40, v21, (char *)&type metadata for Any + 8, 7);
    v36 = v32;
    v37 = v33;
    v38 = v34;
    sub_10001AEAC(v35, v39);
    v32 = v36;
    v33 = v37;
    v34 = v38;
    sub_10001AEAC(v39, v40);
    sub_10001AEAC(v40, &v36);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v22 = -1 << *((_BYTE *)v3 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~v7[v23 >> 6]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v23) & ~v7[v23 >> 6])) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = v7[v24];
      }
      while (v28 == -1);
      v10 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)((char *)v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v32;
    *(_OWORD *)(v11 + 16) = v33;
    *(_QWORD *)(v11 + 32) = v34;
    result = (uint64_t)sub_10001AEAC(&v36, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v29)
  {
LABEL_37:
    swift_release(v3);
    sub_100086D50(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v30 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100082BB4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100037A5C(&qword_1002619E0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_10002BB54(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v20;
    *((_QWORD *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10001AEAC(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10001AEAC(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10001AEAC(v37, v38);
    sub_10001AEAC(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~v7[v22 >> 6]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~v7[v22 >> 6])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = v7[v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)((char *)v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_10001AEAC(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100086D50(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100082F78(uint64_t a1, uint64_t a2, double a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 + 1328) = v3;
  *(double *)(v4 + 1320) = a3;
  *(_QWORD *)(v4 + 1312) = a2;
  *(_QWORD *)(v4 + 1304) = a1;
  *(_QWORD *)(v4 + 1336) = *v3;
  v5 = type metadata accessor for Handle(0);
  *(_QWORD *)(v4 + 1344) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 1352) = v6;
  *(_QWORD *)(v4 + 1360) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100082FEC, v3, 0);
}

uint64_t sub_100082FEC()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t result;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_10000EF6C(*(_QWORD *)(v0 + 1312), v0 + 16, &qword_100261938);
  if (sub_100049214(v0 + 16) == 1)
    goto LABEL_25;
  memcpy((void *)(v0 + 592), (const void *)(v0 + 16), 0x240uLL);
  sub_10000EF6C(v0 + 768, v0 + 1248, &qword_100261940);
  sub_10000EF6C(v0 + 1248, v0 + 1208, &qword_100261940);
  if (*(_QWORD *)(v0 + 1208) == 1
    || (v1 = *(_OWORD *)(v0 + 1224),
        *(_OWORD *)(v0 + 1168) = *(_OWORD *)(v0 + 1208),
        *(_OWORD *)(v0 + 1184) = v1,
        *(_QWORD *)(v0 + 1200) = *(_QWORD *)(v0 + 1240),
        sub_10000EF6C(v0 + 1176, v0 + 1288, &qword_100261948),
        sub_10000EF6C(v0 + 1288, v0 + 1296, &qword_100261948),
        (v2 = *(_QWORD *)(v0 + 1296)) == 0))
  {
LABEL_25:
    swift_task_dealloc(*(_QWORD *)(v0 + 1360));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_QWORD *)(v0 + 1304);
  v4 = (_QWORD *)sub_1000DEA04((uint64_t)_swiftEmptyArrayStorage);
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
  {
LABEL_22:
    *(_QWORD *)(v0 + 1368) = v4;
    if (v4[2])
    {
      v36 = *(_QWORD *)(v0 + 1336);
      v37 = *(_QWORD *)(v0 + 1328);
      v38 = *(_QWORD *)(v0 + 1320);
      v39 = sub_100004EA8(&qword_100261848, type metadata accessor for CommandManager, (uint64_t)&unk_1001F49B0);
      v40 = (_QWORD *)swift_task_alloc(48);
      *(_QWORD *)(v0 + 1376) = v40;
      v40[2] = v4;
      v40[3] = v37;
      v40[4] = v38;
      v40[5] = v36;
      v41 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
      *(_QWORD *)(v0 + 1384) = v41;
      *v41 = v0;
      v41[1] = sub_1000833F0;
      return withTaskGroup<A, B>(of:returning:isolation:body:)(v41, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v37, v39, &unk_100261958, v40, (char *)&type metadata for () + 8);
    }
    swift_bridgeObjectRelease(v4);
    goto LABEL_25;
  }
  v6 = *(_QWORD *)(v0 + 1352);
  v7 = *(_QWORD *)(v0 + 1304);
  v8 = v7 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v9 = *(_QWORD *)(v6 + 72);
  swift_bridgeObjectRetain(v7);
  v42 = v2;
  v43 = v9;
  v44 = v6;
  while (1)
  {
    v11 = Handle.identifier.getter(v10);
    v13 = v12;
    if (!*(_QWORD *)(v2 + 16) || (v14 = sub_10002FF38(v11, v12), (v15 & 1) == 0))
    {
      v10 = swift_bridgeObjectRelease(v13);
      goto LABEL_7;
    }
    v16 = *(_QWORD *)(v0 + 1360);
    v17 = *(_QWORD *)(v0 + 1344);
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRelease(v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v16, v8, v17);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    v23 = sub_10002FF38(v20, v19);
    v24 = v4[2];
    v25 = (v22 & 1) == 0;
    result = v24 + v25;
    if (__OFADD__(v24, v25))
      break;
    v27 = v22;
    if (v4[3] >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1000F642C();
    }
    else
    {
      sub_1001618AC(result, isUniquelyReferenced_nonNull_native);
      v28 = sub_10002FF38(v20, v19);
      if ((v27 & 1) != (v29 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v23 = v28;
    }
    v30 = *(_QWORD *)(v0 + 1360);
    v31 = *(_QWORD *)(v0 + 1344);
    v6 = v44;
    if ((v27 & 1) != 0)
    {
      v9 = v43;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v44 + 40))(v4[7] + v23 * v43, v30, v31);
    }
    else
    {
      v4[(v23 >> 6) + 8] |= 1 << v23;
      v32 = (uint64_t *)(v4[6] + 16 * v23);
      *v32 = v20;
      v32[1] = v19;
      v9 = v43;
      result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v44 + 32))(v4[7] + v23 * v43, v30, v31);
      v33 = v4[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        goto LABEL_28;
      v4[2] = v35;
      swift_bridgeObjectRetain(v19);
    }
    swift_bridgeObjectRelease(0x8000000000000000);
    v10 = swift_bridgeObjectRelease(v19);
    v2 = v42;
LABEL_7:
    v8 += v9;
    if (!--v5)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1304));
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

