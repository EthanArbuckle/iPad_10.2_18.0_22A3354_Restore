int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  id v4;

  v3 = type metadata accessor for Daemon();
  swift_allocObject(v3, 144, 7);
  qword_1000B4398 = (uint64_t)sub_100088A18();
  v4 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  objc_msgSend(v4, "run");

  return 0;
}

double default argument 1 of DeviceSyncTracker.init(database:syncWindow:)()
{
  return 7200.0;
}

uint64_t sub_1000048E4(uint64_t a1, uint64_t a2)
{
  return sub_100004A2C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000048F0(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100004964(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000049E0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_100004A20(uint64_t a1, uint64_t a2)
{
  return sub_100004A2C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100004A2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100004A68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100004AA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100004B18(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100004BA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100004BE4@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100004C0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100004D40(&qword_1000B1E90, (uint64_t)&unk_100096098);
  v3 = sub_100004D40(&qword_1000B1E98, (uint64_t)&unk_100095FEC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

void type metadata accessor for PFCTimePosition(uint64_t a1)
{
  sub_100004CB4(a1, &qword_1000B1E60, (uint64_t)&unk_1000ADB38);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_100004CB4(a1, &qword_1000B1E68, (uint64_t)&unk_1000ADB58);
}

void type metadata accessor for AXMFeatureDescriptionOption(uint64_t a1)
{
  sub_100004CB4(a1, &qword_1000B1E70, (uint64_t)&unk_1000ADB80);
}

void sub_100004CB4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100004CF8()
{
  return sub_100004D40(&qword_1000B1E78, (uint64_t)&unk_100095FB0);
}

uint64_t sub_100004D1C()
{
  return sub_100004D40(&qword_1000B1E80, (uint64_t)&unk_100095F84);
}

uint64_t sub_100004D40(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for AXMFeatureDescriptionOption(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100004D80()
{
  return sub_100004D40(&qword_1000B1E88, (uint64_t)&unk_100096020);
}

uint64_t sub_100004DAC@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10000628C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100004DD4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100004E0C + 4 * byte_1000960E0[a1]))(0x69727453646E6573, 0xEA0000000000676ELL);
}

uint64_t sub_100004E0C()
{
  return 0x65746172656E6567;
}

uint64_t sub_100004E30()
{
  return 0x626C416B63617274;
}

uint64_t sub_100004E48()
{
  return 0x416B636172746E75;
}

uint64_t sub_100004E68()
{
  return 0x75626C41636E7973;
}

uint64_t sub_100004E80()
{
  return 0x6C61476B63617274;
}

uint64_t sub_100004EA0()
{
  return 0x476B636172746E75;
}

uint64_t sub_100004EC4()
{
  return 0x6C6C6147636E7973;
}

uint64_t sub_100004EE8()
{
  return 0x536B636172746E75;
}

uint64_t sub_100004F0C()
{
  return 0x66756853636E7973;
}

uint64_t sub_100004F2C()
{
  return 0x7568536B63617274;
}

uint64_t sub_100004F4C()
{
  unsigned __int8 *v0;

  return sub_100004DD4(*v0);
}

BOOL sub_100004F54(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100004F68()
{
  unsigned __int8 *v0;
  Swift::UInt32 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100004FAC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100004FD4(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt32 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

int *sub_100005014@<X0>(int *result@<X0>, _BYTE *a2@<X8>)
{
  int v2;

  v2 = *result;
  if (*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_10000502C(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_100005038()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x6E79536D75626C61;
}

uint64_t sub_1000050A8(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(v5 + 40) = a3;
  *(_QWORD *)(v5 + 48) = v4;
  *(_BYTE *)(v5 + 129) = a4;
  *(_QWORD *)(v5 + 32) = a2;
  *(_BYTE *)(v5 + 128) = a1;
  v6 = sub_10000629C(&qword_1000B1FC0);
  *(_QWORD *)(v5 + 56) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 64) = v7;
  *(_QWORD *)(v5 + 72) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000629C(&qword_1000B1FC8);
  *(_QWORD *)(v5 + 80) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 88) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 96) = swift_task_alloc(v10);
  *(_QWORD *)(v5 + 104) = swift_task_alloc(v10);
  return swift_task_switch(sub_100005154, 0, 0);
}

uint64_t sub_100005154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_100055CAC(*(unsigned __int8 *)(v0 + 128), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 129), *(_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 88) + 16))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), v1);
  v2 = sub_100006454(&qword_1000B1FD0, &qword_1000B1FC8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  v3 = sub_100006454(&qword_1000B1FD8, &qword_1000B1FC0, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 112) = v4;
  *v4 = v0;
  v4[1] = sub_100005288;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, *(_QWORD *)(v0 + 56), v3);
}

uint64_t sub_100005288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100005384;
  else
    v3 = sub_1000052EC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000052EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v5, *(_QWORD *)(v0 + 56));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    v6 = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
    swift_task_dealloc(v2);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100005384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000053FC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(v5 + 40) = a3;
  *(_QWORD *)(v5 + 48) = v4;
  *(_BYTE *)(v5 + 129) = a4;
  *(_BYTE *)(v5 + 128) = a2;
  *(_QWORD *)(v5 + 32) = a1;
  v6 = sub_10000629C(&qword_1000B1F90);
  *(_QWORD *)(v5 + 56) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 64) = v7;
  *(_QWORD *)(v5 + 72) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000629C(&qword_1000B1F98);
  *(_QWORD *)(v5 + 80) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 88) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 96) = swift_task_alloc(v10);
  *(_QWORD *)(v5 + 104) = swift_task_alloc(v10);
  return swift_task_switch(sub_1000054A8, 0, 0);
}

uint64_t sub_1000054A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_10005638C(*(unsigned __int8 *)(v0 + 128), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 129), *(_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 88) + 16))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), v1);
  v2 = sub_100006454(&qword_1000B1FA0, &qword_1000B1F98, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  v3 = sub_100006454(&qword_1000B1FA8, &qword_1000B1F90, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 112) = v4;
  *v4 = v0;
  v4[1] = sub_1000055D8;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, *(_QWORD *)(v0 + 56), v3);
}

uint64_t sub_1000055D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100005384;
  else
    v3 = sub_10000563C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10000563C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t result;

  if (*(_QWORD *)(v0 + 24) >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 72);
    v6 = *(_OWORD **)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v5, *(_QWORD *)(v0 + 56));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    *v6 = *(_OWORD *)(v0 + 16);
    swift_task_dealloc(v2);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1000056DC(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2[2] = a1;
  v3 = *a2;
  v4 = a2[1];
  v5 = type metadata accessor for CommunicationActor(0);
  v2[3] = v5;
  v2[4] = static CommunicationActor.shared.getter(v5);
  v6 = (_QWORD *)swift_task_alloc(dword_1000B41D4);
  v2[5] = v6;
  *v6 = v2;
  v6[1] = sub_100005750;
  return sub_100089D70(v3, v4);
}

uint64_t sub_100005750(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  unint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 40);
  *(_QWORD *)(*(_QWORD *)v3 + 48) = v2;
  swift_task_dealloc(v7);
  v8 = v6[3];
  if (v2)
  {
    v9 = sub_100006384();
    v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v9);
    v12 = v11;
    v13 = sub_1000064A8;
  }
  else
  {
    v6[7] = a2;
    v6[8] = a1;
    v14 = sub_100006384();
    v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v14);
    v12 = v15;
    v13 = sub_100005808;
  }
  return swift_task_switch(v13, v10, v12);
}

uint64_t sub_100005808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  *v3 = v2;
  v3[1] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100005850(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = a4;
  *(_BYTE *)(v4 + 72) = a2;
  v5 = sub_10000629C(&qword_1000B1F58);
  *(_QWORD *)(v4 + 40) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 48) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 56) = v7;
  *(_QWORD *)(v4 + 64) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000058D8, 0, 0);
}

uint64_t sub_1000058D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v2 = static Log.session.getter(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v1 + 56);
    v24 = *(_QWORD *)(v1 + 64);
    v6 = *(_QWORD *)(v1 + 48);
    v7 = *(unsigned __int8 *)(v1 + 72);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v25 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = PhotosFaceType.description.getter(v7);
    v12 = v11;
    *(_QWORD *)(v1 + 16) = sub_100021438(v10, v11, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Remote device indicated that it has data ready to sync for type %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v24, v6);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 56);
    v13 = *(_QWORD *)(v1 + 64);
    v15 = *(_QWORD *)(v1 + 48);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  v16 = *(_QWORD *)(v1 + 64);
  v18 = *(_QWORD *)(v1 + 32);
  v17 = *(_QWORD *)(v1 + 40);
  v19 = *(_QWORD *)(v1 + 24);
  v20 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v17, 1, 1, v20);
  v21 = (_QWORD *)swift_allocObject(&unk_1000ADD78, 48, 7);
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = v19;
  v21[5] = v18;
  swift_retain(v18);
  v22 = sub_10008DE34(v17, (uint64_t)&unk_1000B1F68, (uint64_t)v21);
  swift_release(v22);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100005ADC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100005B30;
  return v7();
}

uint64_t sub_100005B30()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100005B78(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v3 + 32) = a2;
  *(_QWORD *)(v3 + 40) = v2;
  *(_BYTE *)(v3 + 88) = a1;
  v4 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v3 + 48) = static CommunicationActor.shared.getter(v4);
  v5 = sub_100006384();
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  *(_QWORD *)(v3 + 56) = v6;
  *(_QWORD *)(v3 + 64) = v7;
  return swift_task_switch(sub_100005BE8, v6, v7);
}

uint64_t sub_100005BE8()
{
  uint64_t v0;
  unsigned int v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, char, uint64_t, char);

  v1 = 0x60903u >> (8 * *(_BYTE *)(v0 + 88));
  v4 = (uint64_t (*)(uint64_t, char, uint64_t, char))((char *)&dword_1000B1F88 + dword_1000B1F88);
  v2 = (_QWORD *)swift_task_alloc(unk_1000B1F8C);
  *(_QWORD *)(v0 + 72) = v2;
  *v2 = v0;
  v2[1] = sub_100005C7C;
  return v4(v0 + 16, v1, *(_QWORD *)(v0 + 32), 1);
}

uint64_t sub_100005C7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[7];
    v5 = v2[8];
    v6 = sub_100005D1C;
  }
  else
  {
    sub_1000063CC(v2[2], v2[3]);
    v4 = v2[7];
    v5 = v2[8];
    v6 = sub_100005CE8;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100005CE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100005D1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100005D50(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v3[2] = a1;
  v6 = type metadata accessor for CommunicationActor(0);
  v3[3] = v6;
  v3[4] = static CommunicationActor.shared.getter(v6);
  v9 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v7 = (_QWORD *)swift_task_alloc(a3[1]);
  v3[5] = v7;
  *v7 = v3;
  v7[1] = sub_100005DDC;
  return v9(a2);
}

uint64_t sub_100005DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc(v2);
  v4 = sub_100006384();
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v3, v4);
  if (v0)
    v7 = sub_100005EA8;
  else
    v7 = sub_100005E64;
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_100005E64()
{
  uint64_t v0;
  _OWORD *v1;

  v1 = *(_OWORD **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  *v1 = xmmword_100096310;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100005EA8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100005EDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for PhotosFaceNetworkMessageCenter()
{
  return objc_opt_self(_TtC11photosfaced30PhotosFaceNetworkMessageCenter);
}

_BYTE *initializeBufferWithCopyOfBuffer for NetworkRequestType(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NetworkEventType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkEventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10000600C + 4 * byte_1000960F0[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100006040 + 4 * byte_1000960EB[v4]))();
}

uint64_t sub_100006040(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100006050);
  return result;
}

uint64_t sub_10000605C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100006064);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100006068(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006070(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000607C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100006088(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NetworkEventType()
{
  return &type metadata for NetworkEventType;
}

uint64_t getEnumTagSinglePayload for NetworkRequestType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkRequestType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_10000617C + 4 * byte_1000960FA[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1000061B0 + 4 * byte_1000960F5[v4]))();
}

uint64_t sub_1000061B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000061B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000061C0);
  return result;
}

uint64_t sub_1000061CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000061D4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1000061D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000061E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NetworkRequestType()
{
  return &type metadata for NetworkRequestType;
}

unint64_t sub_100006200()
{
  unint64_t result;

  result = qword_1000B1F40;
  if (!qword_1000B1F40)
  {
    result = swift_getWitnessTable(&unk_1000961EC, &type metadata for NetworkRequestType);
    atomic_store(result, (unint64_t *)&qword_1000B1F40);
  }
  return result;
}

unint64_t sub_100006248()
{
  unint64_t result;

  result = qword_1000B1F48;
  if (!qword_1000B1F48)
  {
    result = swift_getWitnessTable(&unk_10009628C, &type metadata for NetworkEventType);
    atomic_store(result, &qword_1000B1F48);
  }
  return result;
}

uint64_t sub_10000628C(uint64_t result)
{
  if (result >= 0xB)
    return 11;
  else
    return result;
}

uint64_t sub_10000629C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000062DC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100006308()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = *(int **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1000B1F64);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100005B30;
  v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc(v2[1]);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_100005B30;
  return v6();
}

unint64_t sub_100006384()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B1F78;
  if (!qword_1000B1F78)
  {
    v1 = type metadata accessor for CommunicationActor(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CommunicationActor, v1);
    atomic_store(result, &qword_1000B1F78);
  }
  return result;
}

uint64_t sub_1000063CC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100006410(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100006454(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006410(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000064AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.network.getter(v4);
  v7 = swift_retain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v23 = v2;
    v10 = swift_slowAlloc(12, -1);
    v22 = v3;
    v11 = (uint8_t *)v10;
    v12 = swift_slowAlloc(32, -1);
    v26 = v12;
    *(_DWORD *)v11 = 136315138;
    v21 = v11 + 4;
    swift_beginAccess(v1 + 24, v25, 0, 0);
    v13 = *(_QWORD *)(v1 + 24);
    v14 = type metadata accessor for NetworkConnection();
    v15 = sub_100009174(&qword_1000B20B0, (uint64_t (*)(uint64_t))type metadata accessor for NetworkConnection, (uint64_t)&unk_1000964BC);
    v16 = swift_bridgeObjectRetain(v13);
    v17 = Set.description.getter(v16, v14, v15);
    v19 = v18;
    swift_bridgeObjectRelease(v13);
    v24 = sub_100021438(v17, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v21, v11 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[ICM] Current connections: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v6, v23);
  }
  else
  {

    swift_release_n(v1, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

_QWORD *sub_1000066DC()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    v2 = (void *)sub_10008A804((Swift::Int)&_swiftEmptyArrayStorage);
  }
  else
  {
    v2 = &_swiftEmptySetSingleton;
  }
  v0[3] = v2;
  type metadata accessor for NWListener(0);
  v0[4] = 0;
  v0[5] = 0;
  v3 = _s11photosfaced16NetworkConstantsO10parameters6domain4type0B012NWParametersCSS_SStFZ_0(0xD000000000000016, 0x8000000100094310, 0x6E657473694C5341, 0xEA00000000007265);
  v4 = NWListener.__allocating_init(applicationService:using:)(0xD000000000000024, 0x80000001000942E0, v3);
  v1[2] = v4;
  swift_retain(v4);
  swift_retain(v1);
  NWListener.newConnectionHandler.setter(sub_100008D44, v1);
  swift_release(v4);
  v5 = v1[2];
  swift_retain(v1);
  swift_retain(v5);
  NWListener.stateUpdateHandler.setter(sub_100008D4C, v1);
  swift_release(v5);
  return v1;
}

uint64_t sub_100006830(uint64_t a1, uint64_t a2)
{
  _QWORD v5[6];

  type metadata accessor for CommunicationActor(0);
  v5[2] = a2;
  v5[3] = a1;
  return static CommunicationActor.assumeOnQueue<A>(_:)(sub_100008FC4, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_100006894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint8_t *v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63[3];
  uint64_t v64;
  uint64_t v65;

  v2 = v1;
  v4 = sub_10000629C(&qword_1000B2090);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v51 - v9;
  v11 = sub_10000629C(&qword_1000B1F58);
  __chkstk_darwin(v11);
  v61 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v58 = *(_QWORD *)(v13 - 8);
  v59 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for NetworkConnection();
  v16 = swift_allocObject(v60, 24, 7);
  v17 = type metadata accessor for NetworkCanceller();
  v18 = swift_allocObject(v17, 32, 7);
  v19 = sub_10000629C(&qword_1000B2098);
  v20 = swift_allocObject(v19, 17, 7);
  *(_BYTE *)(v20 + 16) = 0;
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = v20;
  *(_QWORD *)(v16 + 16) = v18;
  v21 = swift_retain(a1);
  static Log.network.getter(v21);
  v22 = swift_retain_n(v16, 2);
  v57 = v15;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(12, -1);
    v55 = v5;
    v26 = (uint8_t *)v25;
    v54 = swift_slowAlloc(32, -1);
    v63[0] = v54;
    v53 = v26;
    *(_DWORD *)v26 = 136315138;
    v52 = v26 + 4;
    v27 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 16);
    swift_retain(v16);
    swift_retain(v27);
    v28 = v8;
    v29 = v10;
    v30 = v4;
    v31 = sub_100017354();
    v56 = v2;
    v33 = v32;
    swift_release(v16);
    swift_release(v27);
    v34 = v31;
    v4 = v30;
    v10 = v29;
    v8 = v28;
    v64 = sub_100021438(v34, v33, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v52, v26 + 12);
    swift_release_n(v16, 2);
    v35 = v33;
    v2 = v56;
    swift_bridgeObjectRelease(v35);
    v36 = v53;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "[ICM] Found new incoming connection: %s", v53, 0xCu);
    v37 = v54;
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v5 = v55;
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

    swift_release_n(v16, 2);
  }
  (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v59);
  v38 = type metadata accessor for TaskPriority(0);
  v39 = (uint64_t)v61;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v61, 1, 1, v38);
  type metadata accessor for CommunicationActor(0);
  swift_retain(v16);
  v40 = swift_retain(v2);
  v41 = static CommunicationActor.shared.getter(v40);
  v42 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v43 = (_QWORD *)swift_allocObject(&unk_1000ADE08, 48, 7);
  v43[2] = v41;
  v43[3] = v42;
  v43[4] = v16;
  v43[5] = v2;
  v44 = sub_100057608(v39, (uint64_t)&unk_1000B20A8, (uint64_t)v43);
  swift_release(v44);
  v63[0] = v16;
  swift_retain(v16);
  SendableWrapper.init(_:)(v63, v60);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  v45 = *(unsigned __int8 *)(v5 + 80);
  v46 = (v45 + 24) & ~v45;
  v47 = swift_allocObject(&unk_1000ADE30, v46 + v62, v45 | 7);
  *(_QWORD *)(v47 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v47 + v46, v8, v4);
  v48 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 16);
  swift_retain(v2);
  swift_retain(v48);
  NWConnection.stateUpdateHandler.setter(sub_100009114, v47);
  swift_release(v48);
  sub_100012100();
  swift_beginAccess(v2 + 24, v63, 33, 0);
  swift_retain(v16);
  sub_100050C88(&v64, v16);
  v49 = v64;
  swift_endAccess(v63);
  swift_release(v49);
  sub_1000064AC();
  swift_release(v16);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t sub_100006D60(uint64_t a1, uint64_t a2)
{
  _QWORD v5[6];

  type metadata accessor for CommunicationActor(0);
  v5[2] = a2;
  v5[3] = a1;
  return static CommunicationActor.assumeOnQueue<A>(_:)(sub_100008D54, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_100006DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[6];

  type metadata accessor for CommunicationActor(0);
  v7[2] = a2;
  v7[3] = a3;
  v7[4] = a1;
  return static CommunicationActor.assumeOnQueue<A>(_:)(sub_100009158, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_100006E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = sub_10000629C(&qword_1000B2090);
  SendableWrapper.value.getter(&v7, v4);
  v5 = v7;
  sub_100006E9C(v7, a3);
  return swift_release(v5);
}

uint64_t sub_100006E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(uint64_t *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  void (*v67)(uint64_t *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  void (*v101)(char *, char *, uint64_t);
  char *v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  os_log_type_t v136;
  uint8_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  os_log_type_t v150;
  uint8_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  NSObject *v162;
  os_log_type_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  unint64_t v175;
  unint64_t v176;
  void (*v177)(char *, uint64_t);
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t *v188;
  char *v189;
  uint64_t v190;
  uint64_t *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198[4];

  v190 = a1;
  v3 = type metadata accessor for NWError(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v191 = (uint64_t *)((char *)&v180 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __chkstk_darwin(v5);
  v192 = (char *)&v180 - v8;
  v9 = __chkstk_darwin(v7);
  v187 = (char *)&v180 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (_DWORD *)((char *)&v180 - v12);
  __chkstk_darwin(v11);
  v189 = (char *)&v180 - v14;
  v15 = type metadata accessor for Logger(0);
  v193 = *(_QWORD *)(v15 - 8);
  v194 = v15;
  v16 = __chkstk_darwin(v15);
  v182 = (char *)&v180 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v185 = (char *)&v180 - v19;
  v20 = __chkstk_darwin(v18);
  v184 = (char *)&v180 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v180 - v23;
  v25 = __chkstk_darwin(v22);
  v181 = (char *)&v180 - v26;
  v27 = __chkstk_darwin(v25);
  v188 = (uint64_t *)((char *)&v180 - v28);
  v29 = __chkstk_darwin(v27);
  v186 = (char *)&v180 - v30;
  __chkstk_darwin(v29);
  v183 = (char *)&v180 - v31;
  v32 = type metadata accessor for NWConnection.State(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v180 = (char *)&v180 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v38 = (char *)&v180 - v37;
  __chkstk_darwin(v36);
  v40 = (char *)&v180 - v39;
  v41 = a2;
  v42 = a2;
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  v43((char *)&v180 - v39, v42, v32);
  v44 = (*(uint64_t (**)(char *, uint64_t))(v33 + 88))(v40, v32);
  if ((_DWORD)v44 == enum case for NWConnection.State.waiting(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v40, v32);
    v45 = v192;
    v46 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v192, v40, v3);
    v47 = v24;
    static Log.network.getter(v46);
    v48 = *(void (**)(uint64_t *, char *, uint64_t))(v4 + 16);
    v48(v191, v45, v3);
    v49 = v190;
    v50 = swift_retain_n(v190, 2);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter();
    v53 = v52;
    if (os_log_type_enabled(v51, v52))
    {
      v54 = swift_slowAlloc(22, -1);
      v186 = (char *)v48;
      v55 = v54;
      v188 = (uint64_t *)swift_slowAlloc(8, -1);
      v189 = (char *)swift_slowAlloc(32, -1);
      v198[0] = (uint64_t)v189;
      *(_DWORD *)v55 = 136315394;
      v56 = *(_QWORD *)(v49 + 16);
      LODWORD(v187) = v53;
      v57 = *(_QWORD *)(v56 + 16);
      swift_retain(v49);
      swift_retain(v57);
      v58 = sub_100017354();
      v60 = v59;
      swift_release(v49);
      swift_release(v57);
      v196 = sub_100021438(v58, v60, v198);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v55 + 4, v55 + 12);
      swift_release_n(v49, 2);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v55 + 12) = 2112;
      v61 = sub_100009174(&qword_1000B20B8, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
      v62 = swift_allocError(v3, v61, 0, 0);
      v63 = v191;
      ((void (*)(uint64_t, uint64_t *, uint64_t))v186)(v64, v191, v3);
      v65 = _swift_stdlib_bridgeErrorToNSError(v62);
      v196 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v55 + 14, v55 + 22);
      v66 = v188;
      *v188 = v65;
      v67 = *(void (**)(uint64_t *, uint64_t))(v4 + 8);
      v67(v63, v3);
      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v187, "[ICM] %s waiting with error: %@", (uint8_t *)v55, 0x16u);
      v68 = sub_10000629C(&qword_1000B20C0);
      swift_arrayDestroy(v66, 1, v68);
      swift_slowDealloc(v66, -1, -1);
      v69 = v189;
      swift_arrayDestroy(v189, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {

      v67 = *(void (**)(uint64_t *, uint64_t))(v4 + 8);
      v67(v191, v3);
      swift_release_n(v49, 2);
    }
    (*(void (**)(char *, uint64_t))(v193 + 8))(v47, v194);
    v67((uint64_t *)v192, v3);
    goto LABEL_29;
  }
  v70 = v190;
  if ((_DWORD)v44 != enum case for NWConnection.State.failed(_:))
  {
    if ((_DWORD)v44 == enum case for NWConnection.State.setup(_:))
    {
      v89 = v185;
      static Log.network.getter(v44);
      v90 = v70;
      v91 = swift_retain_n(v70, 2);
      v92 = Logger.logObject.getter(v91);
      v93 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v92, v93))
      {
        v94 = (uint8_t *)swift_slowAlloc(12, -1);
        v95 = swift_slowAlloc(32, -1);
        v198[0] = v95;
        *(_DWORD *)v94 = 136315138;
        v96 = *(_QWORD *)(*(_QWORD *)(v90 + 16) + 16);
        swift_retain(v90);
        swift_retain(v96);
        v97 = sub_100017354();
        v99 = v98;
        swift_release(v90);
        swift_release(v96);
        v196 = sub_100021438(v97, v99, v198);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v94 + 4, v94 + 12);
        swift_release_n(v90, 2);
        swift_bridgeObjectRelease(v99);
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "[ICM] %s setup", v94, 0xCu);
        swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v95, -1, -1);
        swift_slowDealloc(v94, -1, -1);

        (*(void (**)(char *, uint64_t))(v193 + 8))(v185, v194);
LABEL_29:
        v133 = v195;
        goto LABEL_30;
      }

      v134 = v70;
    }
    else
    {
      if ((_DWORD)v44 == enum case for NWConnection.State.preparing(_:))
      {
        v89 = v184;
        static Log.network.getter(v44);
        v123 = v70;
        v124 = swift_retain_n(v70, 2);
        v125 = Logger.logObject.getter(v124);
        v126 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v125, v126))
        {
          v127 = (uint8_t *)swift_slowAlloc(12, -1);
          v128 = swift_slowAlloc(32, -1);
          v198[0] = v128;
          *(_DWORD *)v127 = 136315138;
          v129 = *(_QWORD *)(*(_QWORD *)(v123 + 16) + 16);
          swift_retain(v123);
          swift_retain(v129);
          v130 = sub_100017354();
          v132 = v131;
          swift_release(v123);
          swift_release(v129);
          v196 = sub_100021438(v130, v132, v198);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v127 + 4, v127 + 12);
          swift_release_n(v123, 2);
          swift_bridgeObjectRelease(v132);
          _os_log_impl((void *)&_mh_execute_header, v125, v126, "[ICM] %s preparing", v127, 0xCu);
          swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v128, -1, -1);
          swift_slowDealloc(v127, -1, -1);

          (*(void (**)(char *, uint64_t))(v193 + 8))(v184, v194);
          goto LABEL_29;
        }
      }
      else
      {
        if ((_DWORD)v44 != enum case for NWConnection.State.ready(_:))
        {
          if ((_DWORD)v44 == enum case for NWConnection.State.cancelled(_:))
          {
            v146 = v181;
            static Log.network.getter(v44);
            v147 = v70;
            v148 = swift_retain_n(v70, 2);
            v149 = Logger.logObject.getter(v148);
            v150 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v149, v150))
            {
              v151 = (uint8_t *)swift_slowAlloc(12, -1);
              v152 = swift_slowAlloc(32, -1);
              v198[0] = v152;
              *(_DWORD *)v151 = 136315138;
              v153 = *(_QWORD *)(*(_QWORD *)(v147 + 16) + 16);
              swift_retain(v147);
              swift_retain(v153);
              v154 = sub_100017354();
              v156 = v155;
              swift_release(v147);
              swift_release(v153);
              v196 = sub_100021438(v154, v156, v198);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v151 + 4, v151 + 12);
              swift_release_n(v147, 2);
              swift_bridgeObjectRelease(v156);
              _os_log_impl((void *)&_mh_execute_header, v149, v150, "[ICM] %s cancelled", v151, 0xCu);
              swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v152, -1, -1);
              swift_slowDealloc(v151, -1, -1);

              (*(void (**)(char *, uint64_t))(v193 + 8))(v181, v194);
            }
            else
            {

              swift_release_n(v70, 2);
              (*(void (**)(char *, uint64_t))(v193 + 8))(v146, v194);
            }
            v133 = v195;
            swift_beginAccess(v195 + 24, v198, 33, 0);
            v179 = sub_10000DAE0(v147);
            swift_endAccess(v198);
            swift_release(v179);
            sub_1000064AC();
          }
          else
          {
            v157 = v182;
            static Log.network.getter(v44);
            v158 = v38;
            v43(v38, v41, v32);
            v159 = v70;
            v160 = swift_retain_n(v70, 2);
            v161 = (char *)v43;
            v162 = Logger.logObject.getter(v160);
            v163 = static os_log_type_t.default.getter();
            v164 = v163;
            if (os_log_type_enabled(v162, v163))
            {
              v165 = swift_slowAlloc(22, -1);
              v189 = v161;
              v166 = v165;
              v192 = (char *)swift_slowAlloc(64, -1);
              v198[0] = (uint64_t)v192;
              *(_DWORD *)v166 = 136315394;
              v188 = (uint64_t *)(v166 + 4);
              v167 = *(_QWORD *)(v159 + 16);
              LODWORD(v191) = v164;
              v168 = *(_QWORD *)(v167 + 16);
              swift_retain(v159);
              swift_retain(v168);
              v169 = sub_100017354();
              v171 = v170;
              swift_release(v159);
              swift_release(v168);
              v196 = sub_100021438(v169, v171, v198);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v188, v166 + 12);
              swift_release_n(v159, 2);
              swift_bridgeObjectRelease(v171);
              *(_WORD *)(v166 + 12) = 2080;
              v172 = v180;
              ((void (*)(char *, char *, uint64_t))v189)(v180, v158, v32);
              v173 = String.init<A>(describing:)(v172, v32);
              v174 = v158;
              v176 = v175;
              v196 = sub_100021438(v173, v175, v198);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v166 + 14, v166 + 22);
              swift_bridgeObjectRelease(v176);
              v177 = *(void (**)(char *, uint64_t))(v33 + 8);
              v177(v174, v32);
              _os_log_impl((void *)&_mh_execute_header, v162, (os_log_type_t)v191, "[ICM] %s Unknown state: %s", (uint8_t *)v166, 0x16u);
              v178 = v192;
              swift_arrayDestroy(v192, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v178, -1, -1);
              swift_slowDealloc(v166, -1, -1);

              (*(void (**)(char *, uint64_t))(v193 + 8))(v182, v194);
            }
            else
            {
              swift_release_n(v159, 2);
              v177 = *(void (**)(char *, uint64_t))(v33 + 8);
              v177(v158, v32);

              (*(void (**)(char *, uint64_t))(v193 + 8))(v157, v194);
            }
            v133 = v195;
            v177(v40, v32);
          }
          goto LABEL_30;
        }
        v89 = v183;
        static Log.network.getter(v44);
        v123 = v70;
        v135 = swift_retain_n(v70, 2);
        v125 = Logger.logObject.getter(v135);
        v136 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v125, v136))
        {
          v137 = (uint8_t *)swift_slowAlloc(12, -1);
          v138 = swift_slowAlloc(32, -1);
          v198[0] = v138;
          *(_DWORD *)v137 = 136315138;
          v139 = *(_QWORD *)(*(_QWORD *)(v123 + 16) + 16);
          swift_retain(v123);
          swift_retain(v139);
          v140 = sub_100017354();
          v142 = v141;
          swift_release(v123);
          swift_release(v139);
          v196 = sub_100021438(v140, v142, v198);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v137 + 4, v137 + 12);
          swift_release_n(v123, 2);
          swift_bridgeObjectRelease(v142);
          _os_log_impl((void *)&_mh_execute_header, v125, v136, "[ICM] %s changed to ready", v137, 0xCu);
          swift_arrayDestroy(v138, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v138, -1, -1);
          swift_slowDealloc(v137, -1, -1);

          (*(void (**)(char *, uint64_t))(v193 + 8))(v183, v194);
          goto LABEL_29;
        }
      }

      v134 = v123;
    }
    swift_release_n(v134, 2);
    (*(void (**)(char *, uint64_t))(v193 + 8))(v89, v194);
    goto LABEL_29;
  }
  (*(void (**)(char *, uint64_t))(v33 + 96))(v40, v32);
  v71 = v4;
  v72 = v189;
  v73 = v3;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v189, v40, v3);
  *v13 = 60;
  (*(void (**)(_DWORD *, _QWORD, uint64_t))(v4 + 104))(v13, enum case for NWError.posix(_:), v3);
  v74 = static NWError.== infix(_:_:)(v72, v13);
  v75 = *(char **)(v71 + 8);
  v76 = ((uint64_t (*)(_DWORD *, uint64_t))v75)(v13, v3);
  if ((v74 & 1) != 0)
  {
    v77 = v186;
    static Log.network.getter(v76);
    v78 = v70;
    v79 = swift_retain_n(v70, 2);
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v80, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc(12, -1);
      v83 = swift_slowAlloc(32, -1);
      v198[0] = v83;
      v192 = v75;
      *(_DWORD *)v82 = 136315138;
      v191 = (uint64_t *)(v82 + 4);
      v84 = *(_QWORD *)(*(_QWORD *)(v78 + 16) + 16);
      swift_retain(v78);
      swift_retain(v84);
      v85 = sub_100017354();
      v87 = v86;
      swift_release(v78);
      swift_release(v84);
      v196 = sub_100021438(v85, v87, v198);
      v75 = v192;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v191, v82 + 12);
      swift_release_n(v78, 2);
      v88 = v87;
      v73 = v3;
      swift_bridgeObjectRelease(v88);
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "[ICM] %s timed out", v82, 0xCu);
      swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v82, -1, -1);

      (*(void (**)(char *, uint64_t))(v193 + 8))(v186, v194);
    }
    else
    {

      swift_release_n(v70, 2);
      (*(void (**)(char *, uint64_t))(v193 + 8))(v77, v194);
    }
    v133 = v195;
  }
  else
  {
    v100 = v188;
    static Log.network.getter(v76);
    v101 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
    v102 = v187;
    v101(v187, v72, v3);
    v103 = v70;
    v104 = swift_retain_n(v70, 2);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.error.getter();
    v107 = v106;
    if (os_log_type_enabled(v105, v106))
    {
      v108 = swift_slowAlloc(22, -1);
      v191 = (uint64_t *)swift_slowAlloc(8, -1);
      v192 = (char *)swift_slowAlloc(32, -1);
      v198[0] = (uint64_t)v192;
      *(_DWORD *)v108 = 136315394;
      v109 = *(_QWORD *)(v103 + 16);
      LODWORD(v186) = v107;
      v110 = *(_QWORD *)(v109 + 16);
      swift_retain(v103);
      swift_retain(v110);
      v111 = sub_100017354();
      v113 = v112;
      swift_release(v103);
      swift_release(v110);
      v196 = sub_100021438(v111, v113, v198);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v108 + 4, v108 + 12);
      swift_release_n(v103, 2);
      v114 = v113;
      v73 = v3;
      swift_bridgeObjectRelease(v114);
      *(_WORD *)(v108 + 12) = 2112;
      v115 = sub_100009174(&qword_1000B20B8, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
      v116 = swift_allocError(v3, v115, 0, 0);
      v117 = v187;
      v101(v118, v187, v3);
      v119 = _swift_stdlib_bridgeErrorToNSError(v116);
      v196 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v108 + 14, v108 + 22);
      v120 = v191;
      *v191 = v119;
      ((void (*)(char *, uint64_t))v75)(v117, v3);
      _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v186, "[ICM] %s failed with error: %@", (uint8_t *)v108, 0x16u);
      v121 = sub_10000629C(&qword_1000B20C0);
      swift_arrayDestroy(v120, 1, v121);
      swift_slowDealloc(v120, -1, -1);
      v122 = v192;
      swift_arrayDestroy(v192, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v122, -1, -1);
      swift_slowDealloc(v108, -1, -1);

      (*(void (**)(uint64_t *, uint64_t))(v193 + 8))(v188, v194);
    }
    else
    {
      swift_release_n(v70, 2);
      ((void (*)(char *, uint64_t))v75)(v102, v3);

      (*(void (**)(uint64_t *, uint64_t))(v193 + 8))(v100, v194);
    }
    v133 = v195;
  }
  sub_100012534();
  ((void (*)(char *, uint64_t))v75)(v189, v73);
LABEL_30:
  swift_beginAccess(v133 + 24, v198, 0, 0);
  v143 = *(_QWORD *)(v133 + 24);
  v144 = swift_bridgeObjectRetain(v143);
  sub_100008AA4(v144);
  return swift_bridgeObjectRelease(v143);
}

uint64_t sub_1000081C0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  sub_100008214(v0[4], v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for IncomingConnectionManager()
{
  return objc_opt_self(_TtC11photosfaced25IncomingConnectionManager);
}

uint64_t sub_100008214(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100008224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[11] = a4;
  v5[12] = a5;
  v6 = type metadata accessor for Message(0);
  v5[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[14] = v7;
  v5[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v5[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[17] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[18] = swift_task_alloc(v10);
  v5[19] = swift_task_alloc(v10);
  v11 = type metadata accessor for CommunicationActor(0);
  v5[20] = static CommunicationActor.shared.getter(v11);
  v12 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, v12);
  v5[21] = v13;
  v5[22] = v14;
  return swift_task_switch(sub_100008314, v13, v14);
}

uint64_t sub_100008314()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0[11] + 16);
  v0[23] = v1;
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain(v2);
  v3 = sub_100017354();
  v5 = v4;
  v6 = swift_release(v2);
  v0[24] = v3;
  v0[25] = v5;
  static Log.network.getter(v6);
  v7 = swift_bridgeObjectRetain_n(v5, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v18 = v0[17];
    v19 = v0[16];
    v20 = v0[19];
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v21 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain(v5);
    v0[10] = sub_100021438(v3, v5, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v5, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[ICM] Listening for messages on %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v12 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v12(v20, v19);
  }
  else
  {
    v13 = v0[19];
    v14 = v0[16];
    v15 = v0[17];
    swift_bridgeObjectRelease_n(v5, 2);

    v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  v0[26] = v12;
  sub_1000103B0();
  v16 = (_QWORD *)swift_task_alloc(dword_1000B25F4);
  v0[27] = v16;
  *v16 = v0;
  v16[1] = sub_100008528;
  return sub_100010ACC(v0[15]);
}

uint64_t sub_100008528()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 216));
  if (v0)
  {
    v2[32] = v0;
    v3 = v2[21];
    v4 = v2[22];
    v5 = sub_1000087C8;
  }
  else
  {
    v3 = v2[21];
    v4 = v2[22];
    v5 = sub_10000858C;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_10000858C()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD);

  v1 = v0[12];
  swift_beginAccess(v1 + 32, v0 + 5, 32, 0);
  v2 = *(int **)(v1 + 32);
  v0[28] = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0[12] + 40);
    v0[29] = v3;
    swift_endAccess(v0 + 5);
    v4 = v2[1];
    v8 = (uint64_t (*)(_QWORD))((char *)v2 + *v2);
    swift_retain(v3);
    v5 = (_QWORD *)swift_task_alloc(v4);
    v0[30] = v5;
    *v5 = v0;
    v5[1] = sub_100008698;
    return v8(v0[15]);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
    swift_endAccess(v0 + 5);
    sub_1000103B0();
    v7 = (_QWORD *)swift_task_alloc(dword_1000B25F4);
    v0[31] = v7;
    *v7 = v0;
    v7[1] = sub_100008764;
    return sub_100010ACC(v0[15]);
  }
}

uint64_t sub_100008698()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 232);
  v3 = *(_QWORD *)(*v0 + 224);
  swift_task_dealloc(*(_QWORD *)(*v0 + 240));
  sub_100008214(v3, v2);
  return swift_task_switch(sub_1000086FC, *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
}

uint64_t sub_1000086FC()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
  sub_1000103B0();
  v1 = (_QWORD *)swift_task_alloc(dword_1000B25F4);
  v0[31] = v1;
  *v1 = v0;
  v1[1] = sub_100008764;
  return sub_100010ACC(v0[15]);
}

uint64_t sub_100008764()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 248));
  if (v0)
  {
    v2[32] = v0;
    v3 = v2[21];
    v4 = v2[22];
    v5 = sub_1000087C8;
  }
  else
  {
    v3 = v2[21];
    v4 = v2[22];
    v5 = sub_10000858C;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_1000087C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = swift_release(*(_QWORD *)(v0 + 160));
  static Log.network.getter(v3);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 256);
    v8 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 192);
    v28 = *(_QWORD *)(v0 + 144);
    v29 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    v27 = *(_QWORD *)(v0 + 128);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    v30 = v26;
    *(_DWORD *)v10 = 136315394;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 64) = sub_100021438(v9, v8, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v8, 3);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v7);
    v12 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v10 + 14, v10 + 22);
    *v11 = v12;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[ICM] %s stopped listening with error: %@", (uint8_t *)v10, 0x16u);
    v13 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v29(v28, v27);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 256);
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    v16 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 128);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 200), 2);
    swift_errorRelease(v14);
    swift_errorRelease(v14);

    v15(v16, v17);
  }
  v18 = *(_QWORD *)(v0 + 256);
  v20 = *(_QWORD *)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 96);
  sub_100012534();
  swift_beginAccess(v22 + 24, v0 + 16, 33, 0);
  v24 = sub_10000DAE0(v23);
  swift_endAccess(v0 + 16);
  swift_release(v24);
  sub_1000064AC();
  swift_errorRelease(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100008AA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for NetworkConnection();
    v5 = sub_100009174(&qword_1000B20B0, (uint64_t (*)(uint64_t))type metadata accessor for NetworkConnection, (uint64_t)&unk_1000964BC);
    result = Set.Iterator.init(_cocoa:)(v26, v3, v4, v5);
    v1 = v26[0];
    v24 = v26[1];
    v7 = v26[2];
    v8 = v26[3];
    v9 = v26[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v24 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v9)
    {
      v14 = (v9 - 1) & v9;
      v15 = __clz(__rbit64(v9)) | (v8 << 6);
      v16 = v8;
      goto LABEL_32;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v21 >= v13)
      return (_QWORD *)sub_1000091B4(v1);
    v22 = *(_QWORD *)(v24 + 8 * v21);
    v16 = v8 + 1;
    if (!v22)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        return (_QWORD *)sub_1000091B4(v1);
      v22 = *(_QWORD *)(v24 + 8 * v16);
      if (!v22)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v13)
          return (_QWORD *)sub_1000091B4(v1);
        v22 = *(_QWORD *)(v24 + 8 * v16);
        if (!v22)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v13)
            return (_QWORD *)sub_1000091B4(v1);
          v22 = *(_QWORD *)(v24 + 8 * v16);
          if (!v22)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v13)
              return (_QWORD *)sub_1000091B4(v1);
            v22 = *(_QWORD *)(v24 + 8 * v16);
            if (!v22)
            {
              v23 = v8 + 6;
              while (v13 != v23)
              {
                v22 = *(_QWORD *)(v24 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_31;
                }
              }
              return (_QWORD *)sub_1000091B4(v1);
            }
          }
        }
      }
    }
LABEL_31:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
    v20 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    swift_retain(v20);
    if (!v20)
      return (_QWORD *)sub_1000091B4(v1);
    while (1)
    {
      sub_1000103B0();
      result = (_QWORD *)swift_release(v20);
      v8 = v16;
      v9 = v14;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v17 = __CocoaSet.Iterator.next()(result);
      if (v17)
      {
        v18 = v17;
        v25 = v17;
        v19 = type metadata accessor for NetworkConnection();
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v27, &v25, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
        v20 = v27;
        swift_unknownObjectRelease(v18);
        v16 = v8;
        v14 = v9;
        if (v20)
          continue;
      }
      return (_QWORD *)sub_1000091B4(v1);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100008D44(uint64_t a1)
{
  uint64_t v1;

  return sub_100006830(a1, v1);
}

uint64_t sub_100008D4C(uint64_t a1)
{
  uint64_t v1;

  return sub_100006D60(a1, v1);
}

uint64_t sub_100008D54()
{
  uint64_t v0;

  return sub_100008D7C(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100008D7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = type metadata accessor for NWListener.State(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v25 - v7;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.network.getter(v11);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v15 = v14(v8, a1, v2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(12, -1);
    v28 = v9;
    v19 = (uint8_t *)v18;
    v26 = swift_slowAlloc(32, -1);
    v30 = v26;
    v27 = v10;
    *(_DWORD *)v19 = 136315138;
    v25 = v19 + 4;
    v14(v6, (uint64_t)v8, v2);
    v20 = String.init<A>(describing:)(v6, v2);
    v22 = v21;
    v29 = sub_100021438(v20, v21, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v25, v19 + 12);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[ICM] Network Advertiser State Changed: %s", v19, 0xCu);
    v23 = v26;
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v13, v28);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);

    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
}

uint64_t sub_100008FC4()
{
  uint64_t v0;

  return sub_100006894(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100008FF0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100009024(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1000B20A4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100005B30;
  return sub_100008224(a1, v4, v5, v7, v6);
}

uint64_t sub_10000909C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000629C(&qword_1000B2090);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100009114(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000629C(&qword_1000B2090) - 8) + 80);
  return sub_100006DC4(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_100009158()
{
  uint64_t *v0;

  return sub_100006E30(v0[2], v0[3], v0[4]);
}

uint64_t sub_100009174(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000091B4(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000091BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.network.getter(v4);
  v7 = swift_retain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v24 = v2;
    v10 = swift_slowAlloc(12, -1);
    v23 = v3;
    v11 = (uint8_t *)v10;
    v12 = swift_slowAlloc(32, -1);
    *(_DWORD *)v11 = 136315138;
    v27 = v12;
    v22 = v11 + 4;
    v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_outgoingConnections);
    swift_beginAccess(v1 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_outgoingConnections, v26, 0, 0);
    v14 = *v13;
    v15 = type metadata accessor for NetworkConnection();
    v16 = sub_100009174(&qword_1000B20B0, (uint64_t (*)(uint64_t))type metadata accessor for NetworkConnection, (uint64_t)&unk_1000964BC);
    v17 = swift_bridgeObjectRetain(v14);
    v18 = Set.description.getter(v17, v15, v16);
    v20 = v19;
    swift_bridgeObjectRelease(v14);
    v25 = sub_100021438(v18, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v22, v11 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[OCM] Current outgoing connections: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v6, v24);
  }
  else
  {

    swift_release_n(v1, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_1000093F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2[15] = a1;
  v2[16] = v1;
  v3 = type metadata accessor for Message(0);
  v2[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[18] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[19] = swift_task_alloc(v5);
  v2[20] = swift_task_alloc(v5);
  v6 = type metadata accessor for Logger(0);
  v2[21] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[22] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v8);
  v2[24] = swift_task_alloc(v8);
  v9 = type metadata accessor for CommunicationActor(0);
  v2[25] = v9;
  v2[26] = static CommunicationActor.shared.getter(v9);
  v10 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v2[27] = v10;
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  v2[28] = v11;
  v2[29] = v12;
  return swift_task_switch(sub_100009500, v11, v12);
}

uint64_t sub_100009500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t *v4;
  _QWORD *v5;
  uint64_t v6;
  int8x16_t v8;

  v2 = *(_QWORD *)(v1 + 216);
  v8 = *(int8x16_t *)(v1 + 120);
  v3 = static CommunicationActor.shared.getter(a1);
  *(_QWORD *)(v1 + 240) = v3;
  v4 = (int8x16_t *)swift_task_alloc(32);
  *(_QWORD *)(v1 + 248) = v4;
  v4[1] = vextq_s8(v8, v8, 8uLL);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 256) = v5;
  v6 = type metadata accessor for NetworkConnection();
  *v5 = v1;
  v5[1] = sub_1000095D0;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 104, v3, v2, 0x293A5F28646E6573, 0xE800000000000000, sub_10000A428, v4, v6);
}

uint64_t sub_1000095D0()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v1 = (_QWORD *)*v0;
  v2 = *(_QWORD *)(*v0 + 248);
  v3 = *(_QWORD *)(*v0 + 240);
  v6 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 256));
  swift_release(v3);
  swift_task_dealloc(v2);
  v1[33] = v1[13];
  v4 = (_QWORD *)swift_task_alloc(dword_1000B2594);
  v1[34] = v4;
  *v4 = v6;
  v4[1] = sub_100009664;
  return sub_100011AA8(v1[15], 0, 0);
}

uint64_t sub_100009664()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 272);
  *(_QWORD *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100009A3C;
  else
    v4 = sub_1000096C4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 224), *(_QWORD *)(v2 + 232));
}

uint64_t sub_1000096C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  os_log_type_t type;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = swift_release(*(_QWORD *)(v0 + 208));
  static Log.network.getter(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v1, v4);
  swift_retain_n(v2, 2);
  v8 = swift_retain_n(v6, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = *(_QWORD *)(v0 + 264);
    v41 = *(_QWORD *)(v0 + 176);
    v42 = *(_QWORD *)(v0 + 168);
    v43 = *(_QWORD *)(v0 + 192);
    type = v10;
    v12 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 136);
    v37 = *(_QWORD *)(v0 + 144);
    v39 = *(_QWORD *)(v0 + 128);
    v14 = swift_slowAlloc(32, -1);
    v40 = swift_slowAlloc(64, -1);
    v44 = v40;
    *(_DWORD *)v14 = 136315650;
    v15 = sub_100009174(&qword_1000B2220, (uint64_t (*)(uint64_t))&type metadata accessor for Message, (uint64_t)&protocol conformance descriptor for Message);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 88) = sub_100021438(v16, v17, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v12, v13);
    *(_WORD *)(v14 + 12) = 2080;
    v19 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 16);
    swift_retain(v11);
    swift_retain(v19);
    v20 = sub_100017354();
    v22 = v21;
    swift_release(v19);
    swift_release(v11);
    *(_QWORD *)(v0 + 96) = sub_100021438(v20, v22, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v22);
    swift_release_n(v11, 2);
    *(_WORD *)(v14 + 22) = 2048;
    v23 = v39 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_waiters;
    swift_beginAccess(v39 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_waiters, v0 + 16, 0, 0);
    v24 = *(_QWORD *)(*(_QWORD *)v23 + 24);
    swift_release(v39);
    *(_QWORD *)(v0 + 112) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v14 + 24, v14 + 32);
    swift_release(v39);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "[OCM] Message popped: %s to %s. Total: %ld", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_release(v11);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v42);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 264);
    v26 = *(_QWORD *)(v0 + 192);
    v27 = *(_QWORD *)(v0 + 168);
    v28 = *(_QWORD *)(v0 + 176);
    v29 = *(_QWORD *)(v0 + 160);
    v30 = *(_QWORD *)(v0 + 136);
    v31 = *(_QWORD *)(v0 + 144);
    v32 = *(_QWORD *)(v0 + 128);
    swift_release(v32);
    swift_release(v25);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
    swift_release_n(v25, 2);
    swift_release(v32);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  }
  v33 = *(_QWORD *)(v0 + 184);
  v35 = *(_QWORD *)(v0 + 152);
  v34 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100009A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t type;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[2];

  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = swift_release(*(_QWORD *)(v0 + 208));
  static Log.network.getter(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  swift_retain_n(v1, 2);
  v8 = swift_retain_n(v5, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = *(_QWORD *)(v0 + 264);
    v44 = *(_QWORD *)(v0 + 176);
    v45 = *(_QWORD *)(v0 + 168);
    v46 = *(_QWORD *)(v0 + 184);
    type = v10;
    v12 = *(_QWORD *)(v0 + 152);
    v40 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 136);
    v41 = *(_QWORD *)(v0 + 128);
    v14 = swift_slowAlloc(32, -1);
    v42 = swift_slowAlloc(64, -1);
    v47[0] = v42;
    *(_DWORD *)v14 = 136315650;
    v15 = sub_100009174(&qword_1000B2220, (uint64_t (*)(uint64_t))&type metadata accessor for Message, (uint64_t)&protocol conformance descriptor for Message);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 72) = sub_100021438(v16, v17, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v12, v13);
    *(_WORD *)(v14 + 12) = 2080;
    v19 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 16);
    swift_retain(v11);
    swift_retain(v19);
    v20 = sub_100017354();
    v22 = v21;
    swift_release(v19);
    swift_release(v11);
    *(_QWORD *)(v0 + 64) = sub_100021438(v20, v22, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v22);
    swift_release_n(v11, 2);
    *(_WORD *)(v14 + 22) = 2048;
    v23 = v41 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_waiters;
    swift_beginAccess(v41 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_waiters, v0 + 40, 0, 0);
    v24 = *(_QWORD *)(*(_QWORD *)v23 + 24);
    swift_release(v41);
    *(_QWORD *)(v0 + 80) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v14 + 24, v14 + 32);
    swift_release(v41);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "[OCM] Message failed: %s to %s. Total: %ld", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v46, v45);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 264);
    v28 = *(_QWORD *)(v0 + 176);
    v27 = *(_QWORD *)(v0 + 184);
    v29 = *(_QWORD *)(v0 + 168);
    v31 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 152);
    v33 = *(_QWORD *)(v0 + 128);
    v32 = *(_QWORD *)(v0 + 136);
    swift_release(v33);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    swift_release_n(v26, 2);
    swift_release(v33);

    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
  }
  v34 = *(_QWORD *)(v0 + 264);
  v36 = *(_QWORD *)(v0 + 184);
  v35 = *(_QWORD *)(v0 + 192);
  v38 = *(_QWORD *)(v0 + 152);
  v37 = *(_QWORD *)(v0 + 160);
  swift_willThrow(v25);
  swift_release(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100009DB0(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *result;
  uint64_t v20;
  Swift::Int v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[3];

  v54 = a3;
  v5 = sub_10000629C(&qword_1000B2228);
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000629C(&qword_1000B2230);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Message(0);
  v13 = *(_QWORD *)(v12 - 8);
  v57 = v12;
  v58 = v13;
  __chkstk_darwin(v12);
  v55 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = a2;
  v18 = (_QWORD *)(a2 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_waiters);
  swift_beginAccess(a2 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_waiters, v62, 33, 0);
  result = (_QWORD *)*v18;
  v20 = *(_QWORD *)(*v18 + 24);
  v21 = v20 + 1;
  if (__OFADD__(v20, 1))
    goto LABEL_25;
  v53 = v15;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(result);
  v23 = *v18;
  if (*(_QWORD *)(*v18 + 16) < v21 || (isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10000E168(v21, 0);
    v23 = *v18;
  }
  v24 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  sub_10000E3A4((_QWORD *)(v23 + 16), v23 + v24, a1);
  v25 = swift_endAccess(v62);
  v26 = v17;
  static Log.network.getter(v25);
  v27 = v57;
  v28 = v55;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v54, v57);
  v29 = swift_retain_n(v59, 2);
  v54 = v26;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.debug.getter();
  v52 = v31;
  if (os_log_type_enabled(v30, v31))
  {
    v32 = v27;
    v33 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(32, -1);
    v62[0] = v51;
    *(_DWORD *)v33 = 136315394;
    v49 = v33 + 4;
    v34 = sub_100009174(&qword_1000B2220, (uint64_t (*)(uint64_t))&type metadata accessor for Message, (uint64_t)&protocol conformance descriptor for Message);
    v50 = v30;
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v32, v34);
    v37 = v36;
    v60 = sub_100021438(v35, v36, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v49, v33 + 12);
    swift_bridgeObjectRelease(v37);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v28, v57);
    *(_WORD *)(v33 + 12) = 2048;
    v38 = *(_QWORD *)(*v18 + 24);
    swift_release(v59);
    v60 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v33 + 14, v33 + 22);
    swift_release(v59);
    v39 = v50;
    _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v52, "[OCM] Message added: %s. Total: %ld", (uint8_t *)v33, 0x16u);
    v40 = v51;
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {
    v41 = v59;
    swift_release(v59);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v28, v27);

    swift_release(v41);
  }
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v56);
  result = sub_10000A430();
  if (result)
  {
    v42 = (uint64_t)result;
    while (1)
    {
      swift_beginAccess(v18, v62, 33, 0);
      if (*(uint64_t *)(*v18 + 24) < 1)
      {
        v48 = 1;
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native(*v18) & 1) == 0)
          sub_10000E970();
        v43 = (_QWORD *)*v18;
        result = (_QWORD *)(*(uint64_t (**)(char *, unint64_t, uint64_t))(v9 + 32))(v7, *v18 + v24 + *(_QWORD *)(v9 + 72) * *(_QWORD *)(*v18 + 32), v8);
        v44 = v43[4];
        v45 = __OFADD__(v44, 1);
        v46 = v44 + 1;
        if (v45)
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
          return result;
        }
        v47 = v43[3];
        if (v46 >= v43[2])
          v46 = 0;
        v43[4] = v46;
        if (__OFSUB__(v47, 1))
          goto LABEL_24;
        v48 = 0;
        v43[3] = v47 - 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v48, 1, v8);
      swift_endAccess(v62);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        swift_release(v42);
        return (_QWORD *)sub_10000EA70((uint64_t)v7, &qword_1000B2228);
      }
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
      v62[0] = v42;
      swift_retain(v42);
      CheckedContinuation.resume(returning:)(v62, v8);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  return result;
}

uint64_t sub_10000A298()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_10000EA70((uint64_t)v0 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_lastOutgoingLocation, &qword_1000B2248);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_outgoingConnections));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_waiters));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10000A2F8()
{
  return type metadata accessor for OutgoingConnectionManager(0);
}

uint64_t type metadata accessor for OutgoingConnectionManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B2100;
  if (!qword_1000B2100)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OutgoingConnectionManager);
  return result;
}

void sub_10000A33C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\b";
  sub_10000A3D0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

void sub_10000A3D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B2118)
  {
    v2 = sub_100006410((uint64_t *)&unk_1000B2120);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B2118);
  }
}

_QWORD *sub_10000A428(uint64_t a1)
{
  uint64_t v1;

  return sub_100009DB0(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24));
}

_QWORD *sub_10000A430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint8_t *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  void (*v132)(char *, uint64_t);
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint8_t *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  char v164[24];
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168[4];
  char v169[24];

  v1 = v0;
  v2 = sub_10000629C(&qword_1000B2240);
  __chkstk_darwin(v2);
  v157 = (char *)&v145 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for NWBrowser.Result(0);
  v153 = *(_QWORD *)(v158 - 8);
  v4 = __chkstk_darwin(v158);
  v151 = (char *)&v145 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v152 = (char *)&v145 - v6;
  v154 = type metadata accessor for NWEndpoint(0);
  v156 = *(uint8_t **)(v154 - 8);
  v7 = __chkstk_darwin(v154);
  v155 = (char *)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v145 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v145 - v12;
  v14 = sub_10000629C(&qword_1000B2248);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v145 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v159 = (uint64_t)&v145 - v19;
  __chkstk_darwin(v18);
  v160 = (char *)&v145 - v20;
  v21 = type metadata accessor for Logger(0);
  v161 = *(_QWORD *)(v21 - 8);
  v162 = v21;
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v145 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v145 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v145 - v28;
  v30 = (uint64_t *)(v0 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_outgoingConnections);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_outgoingConnections, v169, 0, 0);
  v31 = *v30;
  swift_bridgeObjectRetain(*v30);
  sub_100008AA4(v32);
  swift_bridgeObjectRelease(v31);
  v33 = *v30;
  swift_bridgeObjectRetain(*v30);
  v35 = sub_10000B164(v34);
  v36 = swift_bridgeObjectRelease(v33);
  v163 = v35;
  if (v35)
  {
    v37 = v1;
    static Log.network.getter(v36);
    v38 = swift_retain_n(v163, 2);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v158 = swift_slowAlloc(32, -1);
      v168[0] = v158;
      *(_DWORD *)v41 = 136315138;
      v157 = (char *)(v41 + 4);
      v42 = v163;
      v43 = *(_QWORD *)(v163[2] + 16);
      swift_retain(v163);
      swift_retain(v43);
      v44 = sub_100017354();
      v46 = v45;
      swift_release(v42);
      swift_release(v43);
      v165 = sub_100021438(v44, v46, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v157, v41 + 12);
      swift_release_n(v42, 2);
      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "[OCM] Using ready connection: %s", v41, 0xCu);
      v47 = v158;
      swift_arrayDestroy(v158, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

      swift_release_n(v163, 2);
    }
    (*(void (**)(char *, uint64_t))(v161 + 8))(v29, v162);
    v56 = sub_10000629C((uint64_t *)&unk_1000B2120);
    v57 = *(int *)(v56 + 48);
    v58 = v163[2];
    v59 = *(_QWORD *)(v58 + 16);
    v60 = swift_retain(v59);
    v61 = (uint64_t)v160;
    NWConnection.endpoint.getter(v60);
    swift_release(v59);
    v62 = *(_QWORD *)(v58 + 16);
    v63 = swift_retain(v62);
    v64 = NWConnection.parameters.getter(v63);
    swift_release(v62);
    *(_QWORD *)(v61 + v57) = v64;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v61, 0, 1, v56);
    v65 = v159;
    sub_10000EAF4(v61, v159);
    v66 = v37 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_lastOutgoingLocation;
    swift_beginAccess(v37 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_lastOutgoingLocation, v168, 33, 0);
    sub_10000EAAC(v65, v66);
    swift_endAccess(v168);
    return v163;
  }
  v150 = v17;
  v147 = v11;
  v148 = v27;
  v146 = v24;
  v149 = v13;
  v48 = v158;
  v159 = v1;
  v49 = v1 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_waiters;
  swift_beginAccess(v1 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_waiters, v168, 0, 0);
  v50 = (uint64_t)v155;
  v51 = v156;
  v52 = (uint64_t)v157;
  if (!*(_QWORD *)(*(_QWORD *)v49 + 24))
  {
    v53 = *v30;
    if ((*v30 & 0xC000000000000001) != 0)
    {
      if (v53 < 0)
        v54 = *v30;
      else
        v54 = v53 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v30);
      v55 = __CocoaSet.count.getter(v54);
      swift_bridgeObjectRelease(v53);
      if (v55)
        goto LABEL_17;
    }
    else if (*(_QWORD *)(v53 + 16))
    {
      goto LABEL_17;
    }
    v68 = sub_10000629C((uint64_t *)&unk_1000B2120);
    v69 = (uint64_t)v160;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v160, 1, 1, v68);
    v70 = v159;
    v71 = v159 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_lastOutgoingLocation;
    swift_beginAccess(v159 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_lastOutgoingLocation, &v165, 33, 0);
    sub_10000EAAC(v69, v71);
    swift_endAccess(&v165);
    v72 = *(_QWORD *)(v70 + 16);
    if (v72)
    {
      swift_retain(*(_QWORD *)(v70 + 16));
      NWBrowser.cancel()();
      swift_release(v72);
    }
  }
LABEL_17:
  v73 = v159;
  if (!*(_QWORD *)(*(_QWORD *)v49 + 24))
    return v163;
  if (!*(_QWORD *)(v159 + 16))
  {
    v74 = sub_10000B518();
    v75 = *(_QWORD *)(v73 + 16);
    *(_QWORD *)(v73 + 16) = v74;
    swift_release(v75);
  }
  v76 = *v30;
  if ((*v30 & 0xC000000000000001) != 0)
  {
    if (v76 < 0)
      v77 = *v30;
    else
      v77 = v76 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v30);
    v78 = __CocoaSet.count.getter(v77);
    swift_bridgeObjectRelease(v76);
    if (v78)
      goto LABEL_29;
  }
  else if (*(_QWORD *)(v76 + 16))
  {
    goto LABEL_29;
  }
  v79 = v73 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_lastOutgoingLocation;
  swift_beginAccess(v73 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_lastOutgoingLocation, v164, 0, 0);
  v80 = (uint64_t)v150;
  sub_10000EA28(v79, (uint64_t)v150);
  v81 = sub_10000629C((uint64_t *)&unk_1000B2120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 48))(v80, 1, v81) != 1)
  {
    v90 = *(_QWORD *)(v80 + *(int *)(v81 + 48));
    v91 = (uint64_t)v149;
    v92 = v154;
    (*((void (**)(char *, uint64_t, uint64_t))v51 + 4))(v149, v80, v154);
    v160 = (char *)v90;
    v93 = sub_10000B66C(v91, v90);
    static Log.network.getter(v93);
    v94 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v51 + 2);
    v95 = v147;
    v94(v147, v91, v92);
    v96 = swift_retain_n(v93, 2);
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.default.getter();
    v99 = v98;
    if (os_log_type_enabled(v97, v98))
    {
      v100 = swift_slowAlloc(22, -1);
      v158 = swift_slowAlloc(64, -1);
      v165 = v158;
      *(_DWORD *)v100 = 136315394;
      LODWORD(v157) = v99;
      v94((char *)v50, (uint64_t)v95, v92);
      v101 = String.init<A>(describing:)(v50, v92);
      v103 = v102;
      v167 = sub_100021438(v101, v102, &v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v100 + 4, v100 + 12);
      swift_bridgeObjectRelease(v103);
      v104 = v95;
      v105 = (void (*)(char *, uint64_t))*((_QWORD *)v51 + 1);
      v105(v104, v154);
      *(_WORD *)(v100 + 12) = 2080;
      v106 = *(_QWORD *)(*(_QWORD *)(v93 + 16) + 16);
      swift_retain(v93);
      swift_retain(v106);
      v107 = sub_100017354();
      v109 = v108;
      swift_release(v93);
      swift_release(v106);
      v167 = sub_100021438(v107, v109, &v165);
      v92 = v154;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v100 + 14, v100 + 22);
      swift_release_n(v93, 2);
      swift_bridgeObjectRelease(v109);
      _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v157, "[OCM] Connecting to last known endpoint %s, replaced with %s", (uint8_t *)v100, 0x16u);
      v110 = v158;
      swift_arrayDestroy(v158, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1, -1);
      swift_slowDealloc(v100, -1, -1);

    }
    else
    {
      v136 = v95;
      v105 = (void (*)(char *, uint64_t))*((_QWORD *)v51 + 1);
      v105(v136, v92);

      swift_release_n(v93, 2);
    }
    (*(void (**)(char *, uint64_t))(v161 + 8))(v148, v162);
    v137 = v149;
    v138 = v160;
    swift_beginAccess(v30, &v165, 33, 0);
    swift_retain(v93);
    sub_100050C88(&v167, v93);
    v139 = v167;
    swift_endAccess(&v165);
    swift_release(v139);
    sub_1000091BC();
    swift_release(v93);
    swift_release(v138);
    v105(v137, v92);
    return v163;
  }
  sub_10000EA70(v80, &qword_1000B2248);
LABEL_29:
  v82 = *v30;
  if ((*v30 & 0xC000000000000001) != 0)
  {
    if (v82 < 0)
      v83 = *v30;
    else
      v83 = v82 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v30);
    v84 = __CocoaSet.count.getter(v83);
    swift_bridgeObjectRelease(v82);
    if (v84)
      return v163;
  }
  else if (*(_QWORD *)(v82 + 16))
  {
    return v163;
  }
  v85 = *(_QWORD *)(v73 + 16);
  if (v85)
  {
    v86 = swift_retain(*(_QWORD *)(v73 + 16));
    v87 = NWBrowser.browseResults.getter(v86);
    sub_10000B8F0(v87, v52);
    swift_bridgeObjectRelease(v87);
    v88 = v153;
    v89 = v48;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v52, 1, v48) == 1)
    {
      swift_release(v85);
      sub_10000EA70(v52, &qword_1000B2240);
    }
    else
    {
      v111 = v52;
      v112 = v51;
      v113 = v152;
      v114 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 32))(v152, v111, v48);
      v115 = v88;
      v116 = NWBrowser.Result.endpoint.getter(v114);
      v117 = NWBrowser.parameters.getter(v116);
      v160 = (char *)sub_10000B66C(v50, v117);
      swift_release(v117);
      v118 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)v112 + 1);
      v119 = v154;
      v120 = v118(v50, v154);
      v121 = v146;
      static Log.network.getter(v120);
      v122 = v151;
      v123 = (*(uint64_t (**)(char *, char *, uint64_t))(v115 + 16))(v151, v113, v89);
      v124 = Logger.logObject.getter(v123);
      v125 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v124, v125))
      {
        v126 = (uint8_t *)swift_slowAlloc(12, -1);
        v127 = swift_slowAlloc(32, -1);
        v157 = (char *)v127;
        v165 = v127;
        v128 = v122;
        *(_DWORD *)v126 = 136315138;
        v156 = v126 + 4;
        NWBrowser.Result.endpoint.getter(v127);
        v129 = String.init<A>(describing:)(v50, v119);
        v131 = v130;
        v167 = sub_100021438(v129, v130, &v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v156, v126 + 12);
        swift_bridgeObjectRelease(v131);
        v132 = *(void (**)(char *, uint64_t))(v153 + 8);
        v133 = v158;
        v132(v128, v158);
        _os_log_impl((void *)&_mh_execute_header, v124, v125, "[OCM] Connecting to browser endpoint %s", v126, 0xCu);
        v134 = v157;
        swift_arrayDestroy(v157, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v134, -1, -1);
        swift_slowDealloc(v126, -1, -1);

        (*(void (**)(char *, uint64_t))(v161 + 8))(v146, v162);
        v135 = v133;
      }
      else
      {
        v140 = v122;
        v132 = *(void (**)(char *, uint64_t))(v153 + 8);
        v141 = v158;
        v132(v140, v158);

        (*(void (**)(char *, uint64_t))(v161 + 8))(v121, v162);
        v135 = v141;
      }
      v142 = v152;
      v143 = (uint64_t)v160;
      swift_beginAccess(v30, &v165, 33, 0);
      swift_retain(v143);
      sub_100050C88(&v167, v143);
      v144 = v167;
      swift_endAccess(&v165);
      swift_release(v144);
      sub_1000091BC();
      swift_release(v143);
      swift_release(v85);
      v132(v142, v135);
    }
  }
  return v163;
}

_QWORD *sub_10000B164(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  _QWORD v36[2];
  char *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[5];
  uint64_t v50;

  v2 = type metadata accessor for NWConnection.State(0);
  v46 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  v3 = __chkstk_darwin(v2);
  v45 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v44 = (char *)v36 - v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = type metadata accessor for NetworkConnection();
    v9 = sub_100009174(&qword_1000B20B0, (uint64_t (*)(uint64_t))type metadata accessor for NetworkConnection, (uint64_t)&unk_1000964BC);
    result = Set.Iterator.init(_cocoa:)(v49, v7, v8, v9);
    a1 = v49[0];
    v40 = v49[1];
    v11 = v49[2];
    v12 = v49[3];
    v13 = v49[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 56);
    v40 = a1 + 56;
    v16 = ~v14;
    v17 = -v14;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v13 = v18 & v15;
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v11 = v16;
    v12 = 0;
  }
  v36[1] = v11;
  v38 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v39 = (unint64_t)(v11 + 64) >> 6;
  v43 = enum case for NWConnection.State.ready(_:);
  v37 = (char *)&type metadata for Swift.AnyObject + 8;
  v19 = v45;
  if ((a1 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v20 = __CocoaSet.Iterator.next()(result);
  if (v20)
  {
    v21 = v20;
    v48 = v20;
    v22 = type metadata accessor for NetworkConnection();
    swift_unknownObjectRetain(v21);
    swift_dynamicCast(&v50, &v48, v37, v22, 7);
    v23 = v50;
    swift_unknownObjectRelease(v21);
    v24 = v12;
    v25 = v13;
    while (v23)
    {
      v41 = v12;
      v42 = v13;
      v30 = *(_QWORD *)(*(_QWORD *)(v23 + 16) + 16);
      v31 = swift_retain(v30);
      v32 = v44;
      NWConnection.state.getter(v31);
      swift_release(v30);
      v34 = v46;
      v33 = v47;
      (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v19, v43, v47);
      LOBYTE(v30) = static NWConnection.State.== infix(_:_:)(v32, v19);
      v35 = *(void (**)(char *, uint64_t))(v34 + 8);
      v35(v19, v33);
      v35(v32, v33);
      if ((v30 & 1) != 0)
        break;
      result = (_QWORD *)swift_release(v23);
      v12 = v24;
      v13 = v25;
      if (a1 < 0)
        goto LABEL_11;
LABEL_14:
      if (v13)
      {
        v25 = (v13 - 1) & v13;
        v26 = __clz(__rbit64(v13)) | (v12 << 6);
        v24 = v12;
      }
      else
      {
        v27 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          return result;
        }
        if (v27 >= v39)
          goto LABEL_37;
        v28 = *(_QWORD *)(v40 + 8 * v27);
        v24 = v12 + 1;
        if (!v28)
        {
          v24 = v12 + 2;
          if (v12 + 2 >= v39)
            goto LABEL_37;
          v28 = *(_QWORD *)(v40 + 8 * v24);
          if (!v28)
          {
            v24 = v12 + 3;
            if (v12 + 3 >= v39)
              goto LABEL_37;
            v28 = *(_QWORD *)(v40 + 8 * v24);
            if (!v28)
            {
              v24 = v12 + 4;
              if (v12 + 4 >= v39)
                goto LABEL_37;
              v28 = *(_QWORD *)(v40 + 8 * v24);
              if (!v28)
              {
                v24 = v12 + 5;
                if (v12 + 5 >= v39)
                  goto LABEL_37;
                v28 = *(_QWORD *)(v40 + 8 * v24);
                if (!v28)
                {
                  v29 = v12 + 6;
                  while (v39 != v29)
                  {
                    v28 = *(_QWORD *)(v40 + 8 * v29++);
                    if (v28)
                    {
                      v24 = v29 - 1;
                      goto LABEL_31;
                    }
                  }
                  goto LABEL_37;
                }
              }
            }
          }
        }
LABEL_31:
        v25 = (v28 - 1) & v28;
        v26 = __clz(__rbit64(v28)) + (v24 << 6);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v26);
      swift_retain(v23);
    }
  }
  else
  {
LABEL_37:
    v23 = 0;
  }
  sub_1000091B4(a1);
  return (_QWORD *)v23;
}

uint64_t sub_10000B518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for NWBrowser.Descriptor(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v4 = 0xD000000000000024;
  v4[1] = 0x80000001000942E0;
  (*(void (**)(_QWORD *, _QWORD))(v5 + 104))(v4, enum case for NWBrowser.Descriptor.applicationService(_:));
  v6 = _s11photosfaced16NetworkConstantsO10parameters6domain4type0B012NWParametersCSS_SStFZ_0(0xD000000000000016, 0x8000000100094310, 0x766C6F7365525341, 0xEA00000000007265);
  v7 = type metadata accessor for NWBrowser(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = NWBrowser.init(for:using:)(v4, v6);
  swift_retain(v1);
  NWBrowser.stateUpdateHandler.setter(sub_10000ED78, v1);
  swift_retain(v1);
  NWBrowser.browseResultsChangedHandler.setter(sub_10000ED80, v1);
  type metadata accessor for CommunicationActor(0);
  v9 = (void *)static CommunicationActor.sharedQueue.getter();
  NWBrowser.start(queue:)();

  return v8;
}

uint64_t sub_10000B66C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = sub_10000629C(&qword_1000B2090);
  v4 = *(_QWORD *)(v36 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v36);
  v35 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - v7;
  v9 = type metadata accessor for NWEndpoint(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v35 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16((char *)&v35 - v14, a1, v9);
  v16(v13, (uint64_t)v15, v9);
  v17 = type metadata accessor for NWConnection(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  swift_retain(a2);
  v18 = NWConnection.init(to:using:)(v13, a2);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  v19 = type metadata accessor for NetworkConnection();
  v20 = swift_allocObject(v19, 24, 7);
  v21 = type metadata accessor for NetworkCanceller();
  v22 = swift_allocObject(v21, 32, 7);
  v23 = sub_10000629C(&qword_1000B2098);
  v24 = swift_allocObject(v23, 17, 7);
  *(_BYTE *)(v24 + 16) = 0;
  *(_QWORD *)(v22 + 16) = v18;
  *(_QWORD *)(v22 + 24) = v24;
  *(_QWORD *)(v20 + 16) = v22;
  v38 = v20;
  swift_retain(v20);
  SendableWrapper.init(_:)(&v38, v19);
  v26 = v35;
  v25 = v36;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v35, v8, v36);
  v27 = *(unsigned __int8 *)(v4 + 80);
  v28 = (v27 + 24) & ~v27;
  v29 = swift_allocObject(&unk_1000ADE58, v28 + v5, v27 | 7);
  v30 = v37;
  *(_QWORD *)(v29 + 16) = v37;
  v31 = v29 + v28;
  v32 = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v31, v26, v25);
  v33 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 16);
  swift_retain(v30);
  swift_retain(v33);
  NWConnection.stateUpdateHandler.setter(sub_10000FE14, v29);
  swift_release(v33);
  sub_100012100();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v32);
  return v20;
}

uint64_t sub_10000B8F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = sub_10000EB3C(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = type metadata accessor for NWBrowser.Result(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    sub_10000EBDC(result, v5, a1, a2);
    v7 = type metadata accessor for NWBrowser.Result(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

_QWORD *sub_10000B990(uint64_t a1)
{
  _QWORD *result;
  int v3;
  char v4;
  uint64_t v5;

  result = (_QWORD *)sub_10000EC70(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (_QWORD *)(1 << *(_BYTE *)(a1 + 32)))
    return 0;
  else
    return sub_10000ECF8(&v5, (uint64_t)result, v3, 0, a1);
}

uint64_t sub_10000BA14(uint64_t a1, uint64_t a2)
{
  _QWORD v5[6];

  type metadata accessor for CommunicationActor(0);
  v5[2] = a2;
  v5[3] = a1;
  return static CommunicationActor.assumeOnQueue<A>(_:)(sub_10000FD70, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_10000BA78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  char *v41;
  uint8_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  char *v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  char *v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  uint8_t *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint8_t *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;

  v2 = type metadata accessor for NWError(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v113 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v102 - v7;
  v9 = __chkstk_darwin(v6);
  v109 = (char *)&v102 - v10;
  __chkstk_darwin(v9);
  v111 = (char *)&v102 - v11;
  v12 = type metadata accessor for Logger(0);
  v114 = *(_QWORD *)(v12 - 8);
  v115 = v12;
  v13 = __chkstk_darwin(v12);
  v107 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v105 = (char *)&v102 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v102 - v18;
  v20 = __chkstk_darwin(v17);
  v108 = (char *)&v102 - v21;
  v22 = __chkstk_darwin(v20);
  v110 = (char *)&v102 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v102 - v24;
  v26 = type metadata accessor for NWBrowser.State(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v103 = (char *)&v102 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v104 = (char *)&v102 - v31;
  __chkstk_darwin(v30);
  v33 = (char *)&v102 - v32;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v106 = a1;
  v34((char *)&v102 - v32, a1, v26);
  v35 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v33, v26);
  if ((_DWORD)v35 == enum case for NWBrowser.State.failed(_:))
  {
    (*(void (**)(char *, uint64_t))(v27 + 96))(v33, v26);
    v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v8, v33, v2);
    static Log.network.getter(v36);
    v37 = *(uint64_t (**)(char *, char *, uint64_t))(v3 + 16);
    v38 = v37(v113, v8, v2);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    v41 = v19;
    if (os_log_type_enabled(v39, v40))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(8, -1);
      v110 = v41;
      v111 = v8;
      v44 = (_QWORD *)v43;
      *(_DWORD *)v42 = 138412290;
      v109 = (char *)(v42 + 4);
      v45 = sub_100009174(&qword_1000B20B8, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
      v46 = swift_allocError(v2, v45, 0, 0);
      v47 = v113;
      v37(v48, v113, v2);
      v49 = _swift_stdlib_bridgeErrorToNSError(v46);
      v117 = (char *)v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v109, v42 + 12);
      *v44 = v49;
      v50 = *(void (**)(char *, uint64_t))(v3 + 8);
      v50(v47, v2);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "[OCM] Browser failed: %@", v42, 0xCu);
      v51 = sub_10000629C(&qword_1000B20C0);
      swift_arrayDestroy(v44, 1, v51);
      v52 = v44;
      v41 = v110;
      v8 = v111;
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      v50 = *(void (**)(char *, uint64_t))(v3 + 8);
      v50(v113, v2);
    }

    (*(void (**)(char *, uint64_t))(v114 + 8))(v41, v115);
    v70 = *((_QWORD *)v112 + 2);
    if (v70)
    {
      swift_retain(*((_QWORD *)v112 + 2));
      NWBrowser.cancel()();
      swift_release(v70);
    }
    v71 = v8;
    v72 = v2;
    return ((uint64_t (*)(char *, uint64_t))v50)(v71, v72);
  }
  if ((_DWORD)v35 == enum case for NWBrowser.State.waiting(_:))
  {
    (*(void (**)(char *, uint64_t))(v27 + 96))(v33, v26);
    v53 = v3;
    v54 = *(uint64_t (**)(char *, char *, uint64_t))(v3 + 32);
    v55 = v111;
    v56 = v2;
    v57 = v54(v111, v33, v2);
    static Log.network.getter(v57);
    v58 = *(uint64_t (**)(char *, char *, uint64_t))(v53 + 16);
    v59 = v109;
    v60 = v58(v109, v55, v2);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(12, -1);
      v64 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v63 = 138412290;
      v113 = (char *)(v63 + 4);
      v65 = sub_100009174(&qword_1000B20B8, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
      v66 = swift_allocError(v56, v65, 0, 0);
      v58(v67, v59, v56);
      v68 = _swift_stdlib_bridgeErrorToNSError(v66);
      v117 = (char *)v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v113, v63 + 12);
      *v64 = v68;
      v50 = *(void (**)(char *, uint64_t))(v53 + 8);
      v50(v59, v56);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "[OCM] Browser waiting: %@", v63, 0xCu);
      v69 = sub_10000629C(&qword_1000B20C0);
      swift_arrayDestroy(v64, 1, v69);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v63, -1, -1);

    }
    else
    {

      v50 = *(void (**)(char *, uint64_t))(v53 + 8);
      v50(v59, v56);
    }
    (*(void (**)(char *, uint64_t))(v114 + 8))(v110, v115);
    v71 = v111;
    v72 = v56;
    return ((uint64_t (*)(char *, uint64_t))v50)(v71, v72);
  }
  if ((_DWORD)v35 == enum case for NWBrowser.State.setup(_:))
  {
    v73 = static Log.network.getter(v35);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "[OCM] Browser setup", v76, 2u);
      swift_slowDealloc(v76, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v114 + 8))(v25, v115);
  }
  else if ((_DWORD)v35 == enum case for NWBrowser.State.ready(_:))
  {
    v78 = v108;
    v79 = static Log.network.getter(v35);
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v80, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "[OCM] Browser ready", v82, 2u);
      swift_slowDealloc(v82, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v114 + 8))(v78, v115);
  }
  else
  {
    if ((_DWORD)v35 != enum case for NWBrowser.State.cancelled(_:))
    {
      v89 = v107;
      static Log.network.getter(v35);
      v90 = v104;
      v91 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v104, v106, v26);
      v92 = Logger.logObject.getter(v91);
      v93 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v92, v93))
      {
        v94 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = (char *)swift_slowAlloc(32, -1);
        v117 = v113;
        v112 = v94;
        *(_DWORD *)v94 = 136315138;
        v111 = (char *)(v94 + 4);
        v95 = v103;
        v34(v103, (uint64_t)v90, v26);
        v96 = String.init<A>(describing:)(v95, v26);
        v97 = v90;
        v99 = v98;
        v116 = sub_100021438(v96, v98, (uint64_t *)&v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v111, v94 + 12);
        swift_bridgeObjectRelease(v99);
        v50 = *(void (**)(char *, uint64_t))(v27 + 8);
        v50(v97, v26);
        v100 = v112;
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "[OCM] Unknown Browser State: %s", v112, 0xCu);
        v101 = v113;
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v101, -1, -1);
        swift_slowDealloc(v100, -1, -1);
      }
      else
      {
        v50 = *(void (**)(char *, uint64_t))(v27 + 8);
        v50(v90, v26);
      }

      (*(void (**)(char *, uint64_t))(v114 + 8))(v89, v115);
      v71 = v33;
      v72 = v26;
      return ((uint64_t (*)(_QWORD, _QWORD))v50)(v71, v72);
    }
    v83 = v105;
    v84 = static Log.network.getter(v35);
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v87 = 0;
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "[OCM] Browser cancelled", v87, 2u);
      swift_slowDealloc(v87, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v114 + 8))(v83, v115);
    v88 = *((_QWORD *)v112 + 2);
    *((_QWORD *)v112 + 2) = 0;
    return swift_release(v88);
  }
}

uint64_t sub_10000C41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[6];

  type metadata accessor for CommunicationActor(0);
  v7[2] = a3;
  v7[3] = a1;
  v7[4] = a2;
  return static CommunicationActor.assumeOnQueue<A>(_:)(sub_10000ED88, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_10000C488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[6];

  type metadata accessor for CommunicationActor(0);
  v7[2] = a2;
  v7[3] = a3;
  v7[4] = a1;
  return static CommunicationActor.assumeOnQueue<A>(_:)(sub_10000FE58, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_10000C4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = sub_10000629C(&qword_1000B2090);
  SendableWrapper.value.getter(&v7, v4);
  v5 = v7;
  sub_10000C560(v7, a3);
  return swift_release(v5);
}

uint64_t sub_10000C560(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t, uint64_t *);
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t (*v50)(char *, uint64_t *);
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  void (*v75)(char *, uint64_t *);
  os_log_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t (*v79)(_QWORD, _QWORD);
  _QWORD *v80;
  uint64_t v81;
  uint8_t *v82;
  char v83;
  uint64_t v84;
  os_log_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint8_t *v95;
  uint8_t *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  int v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint8_t *v109;
  uint8_t *v110;
  _QWORD *v111;
  void (*v112)(os_log_t, uint8_t *, uint64_t);
  os_log_t v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, os_log_t, uint64_t);
  os_log_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  os_log_t v131;
  os_log_t v132;
  os_log_t v133;
  uint64_t v134;
  uint8_t *v135;
  uint64_t v136;
  os_log_type_t v137;
  int v138;
  uint8_t *v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint8_t *v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  os_log_type_t v149;
  int v150;
  uint8_t *v151;
  uint8_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint8_t *v157;
  uint8_t *v158;
  uint64_t result;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint8_t *v179;
  NSObject *v180;
  uint64_t v181;
  uint64_t v182;
  NSObject *v183;
  os_log_type_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  os_log_t v197;
  uint8_t *v198;
  uint8_t *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  void (*v204)(char *, uint64_t, uint64_t *);
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  os_log_t v211;
  os_log_t v212;
  _QWORD *v213;
  uint8_t *v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint8_t *v220;
  uint8_t *v221;
  NSObject *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225[4];

  v223 = a1;
  v3 = sub_10000629C(&qword_1000B2228);
  __chkstk_darwin(v3);
  v5 = (char *)&v201 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000629C(&qword_1000B2230);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v201 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NWError(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v212 = (os_log_t)((char *)&v201 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __chkstk_darwin(v12);
  v16 = (_DWORD *)((char *)&v201 - v15);
  v17 = __chkstk_darwin(v14);
  v214 = (uint8_t *)&v201 - v18;
  v19 = __chkstk_darwin(v17);
  v220 = (uint8_t *)&v201 - v20;
  __chkstk_darwin(v19);
  v222 = ((char *)&v201 - v21);
  v22 = type metadata accessor for Logger(0);
  v217 = *(_QWORD *)(v22 - 8);
  v218 = v22;
  v23 = __chkstk_darwin(v22);
  v206 = (char *)&v201 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v205 = (char *)&v201 - v26;
  v27 = __chkstk_darwin(v25);
  v213 = (uint64_t *)((char *)&v201 - v28);
  v29 = __chkstk_darwin(v27);
  v211 = (os_log_t)((char *)&v201 - v30);
  v31 = __chkstk_darwin(v29);
  v208 = (char *)&v201 - v32;
  v33 = __chkstk_darwin(v31);
  v221 = (uint8_t *)&v201 - v34;
  v35 = __chkstk_darwin(v33);
  v209 = (char *)&v201 - v36;
  __chkstk_darwin(v35);
  v210 = (char *)&v201 - v37;
  v38 = type metadata accessor for NWConnection.State(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = __chkstk_darwin(v38);
  v202 = (char *)&v201 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v207 = (char *)&v201 - v43;
  __chkstk_darwin(v42);
  v45 = (char *)&v201 - v44;
  v46 = *(void (**)(char *, uint64_t, uint64_t *))(v39 + 16);
  v203 = a2;
  v47 = a2;
  v49 = v48;
  v204 = v46;
  v46((char *)&v201 - v44, v47, v48);
  v50 = *(uint64_t (**)(char *, uint64_t *))(v39 + 88);
  v216 = v49;
  v51 = v50(v45, v49);
  if ((_DWORD)v51 != enum case for NWConnection.State.waiting(_:))
  {
    v215 = v10;
    if ((_DWORD)v51 == enum case for NWConnection.State.failed(_:))
    {
      (*(void (**)(char *, uint64_t *))(v39 + 96))(v45, v216);
      v82 = v214;
      v81 = v215;
      (*(void (**)(uint8_t *, char *, uint64_t))(v11 + 32))(v214, v45, v215);
      *v16 = 60;
      (*(void (**)(_DWORD *, _QWORD, uint64_t))(v11 + 104))(v16, enum case for NWError.posix(_:), v81);
      v83 = static NWError.== infix(_:_:)(v82, v16);
      v222 = *(NSObject **)(v11 + 8);
      v84 = ((uint64_t (*)(_DWORD *, uint64_t))v222)(v16, v81);
      if ((v83 & 1) != 0)
      {
        v85 = v211;
        static Log.network.getter(v84);
        v86 = v223;
        v87 = swift_retain_n(v223, 2);
        v88 = Logger.logObject.getter(v87);
        v89 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v88, v89))
        {
          v90 = (uint8_t *)swift_slowAlloc(12, -1);
          v221 = (uint8_t *)swift_slowAlloc(32, -1);
          v225[0] = (uint64_t)v221;
          v220 = v90;
          *(_DWORD *)v90 = 136315138;
          v216 = (uint64_t *)(v90 + 4);
          v91 = *(_QWORD *)(*(_QWORD *)(v86 + 16) + 16);
          swift_retain(v86);
          swift_retain(v91);
          v92 = sub_100017354();
          v94 = v93;
          swift_release(v223);
          swift_release(v91);
          v224 = sub_100021438(v92, v94, v225);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, v225, v216, v90 + 12);
          swift_release_n(v223, 2);
          swift_bridgeObjectRelease(v94);
          v95 = v220;
          _os_log_impl((void *)&_mh_execute_header, v88, v89, "[OCM] %s timed out", v220, 0xCu);
          v96 = v221;
          swift_arrayDestroy(v221, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v96, -1, -1);
          swift_slowDealloc(v95, -1, -1);

          (*(void (**)(os_log_t, uint64_t))(v217 + 8))(v211, v218);
        }
        else
        {

          swift_release_n(v86, 2);
          (*(void (**)(os_log_t, uint64_t))(v217 + 8))(v85, v218);
        }
        v147 = v219;
        v81 = v215;
        v132 = v222;
      }
      else
      {
        v111 = v213;
        static Log.network.getter(v84);
        v112 = *(void (**)(os_log_t, uint8_t *, uint64_t))(v11 + 16);
        v113 = v212;
        v112(v212, v82, v81);
        v114 = v223;
        v115 = swift_retain_n(v223, 2);
        v116 = Logger.logObject.getter(v115);
        v117 = static os_log_type_t.error.getter();
        LODWORD(v221) = v117;
        if (os_log_type_enabled(v116, v117))
        {
          v118 = swift_slowAlloc(22, -1);
          v216 = (uint64_t *)swift_slowAlloc(8, -1);
          v220 = (uint8_t *)swift_slowAlloc(32, -1);
          v225[0] = (uint64_t)v220;
          *(_DWORD *)v118 = 136315394;
          v119 = *(_QWORD *)(*(_QWORD *)(v223 + 16) + 16);
          swift_retain(v223);
          swift_retain(v119);
          v120 = sub_100017354();
          v211 = v116;
          v122 = v121;
          swift_release(v223);
          swift_release(v119);
          v224 = sub_100021438(v120, v122, v225);
          v123 = v223;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, v225, v118 + 4, v118 + 12);
          swift_release_n(v123, 2);
          swift_bridgeObjectRelease(v122);
          *(_WORD *)(v118 + 12) = 2112;
          v124 = sub_100009174(&qword_1000B20B8, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
          v125 = swift_allocError(v215, v124, 0, 0);
          v126 = (void (*)(uint64_t, os_log_t, uint64_t))v112;
          v127 = v212;
          v126(v128, v212, v215);
          v129 = _swift_stdlib_bridgeErrorToNSError(v125);
          v224 = v129;
          v81 = v215;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, v225, v118 + 14, v118 + 22);
          v130 = v216;
          *v216 = v129;
          v131 = v127;
          v132 = v222;
          ((void (*)(os_log_t, uint64_t))v222)(v131, v81);
          v133 = v211;
          _os_log_impl((void *)&_mh_execute_header, v211, (os_log_type_t)v221, "[OCM] %s failed with error: %@", (uint8_t *)v118, 0x16u);
          v134 = sub_10000629C(&qword_1000B20C0);
          swift_arrayDestroy(v130, 1, v134);
          swift_slowDealloc(v130, -1, -1);
          v135 = v220;
          swift_arrayDestroy(v220, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v135, -1, -1);
          swift_slowDealloc(v118, -1, -1);

          (*(void (**)(_QWORD *, uint64_t))(v217 + 8))(v213, v218);
        }
        else
        {
          swift_release_n(v114, 2);
          v132 = v222;
          ((void (*)(os_log_t, uint64_t))v222)(v113, v81);

          (*(void (**)(_QWORD *, uint64_t))(v217 + 8))(v111, v218);
        }
        v147 = v219;
      }
      sub_100012534();
      v97 = ((uint64_t (*)(uint8_t *, uint64_t))v132)(v214, v81);
      goto LABEL_28;
    }
    if ((_DWORD)v51 == enum case for NWConnection.State.setup(_:))
    {
      v98 = v210;
      static Log.network.getter(v51);
      v99 = v223;
      v100 = swift_retain_n(v223, 2);
      v101 = Logger.logObject.getter(v100);
      v102 = static os_log_type_t.info.getter();
      v103 = v102;
      if (os_log_type_enabled(v101, v102))
      {
        LODWORD(v222) = v103;
        v104 = (uint8_t *)swift_slowAlloc(12, -1);
        v221 = (uint8_t *)swift_slowAlloc(32, -1);
        v225[0] = (uint64_t)v221;
        v220 = v104;
        *(_DWORD *)v104 = 136315138;
        v216 = (uint64_t *)(v104 + 4);
        v105 = *(_QWORD *)(*(_QWORD *)(v99 + 16) + 16);
        swift_retain(v99);
        swift_retain(v105);
        v106 = sub_100017354();
        v108 = v107;
        swift_release(v99);
        swift_release(v105);
        v224 = sub_100021438(v106, v108, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, v225, v216, v104 + 12);
        swift_release_n(v99, 2);
        swift_bridgeObjectRelease(v108);
        v109 = v220;
        _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v222, "[OCM] %s setup", v220, 0xCu);
        v110 = v221;
        swift_arrayDestroy(v221, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v110, -1, -1);
        swift_slowDealloc(v109, -1, -1);

        v97 = (*(uint64_t (**)(char *, uint64_t))(v217 + 8))(v210, v218);
        goto LABEL_27;
      }
    }
    else if ((_DWORD)v51 == enum case for NWConnection.State.preparing(_:))
    {
      v98 = v209;
      static Log.network.getter(v51);
      v99 = v223;
      v136 = swift_retain_n(v223, 2);
      v101 = Logger.logObject.getter(v136);
      v137 = static os_log_type_t.info.getter();
      v138 = v137;
      if (os_log_type_enabled(v101, v137))
      {
        LODWORD(v222) = v138;
        v139 = (uint8_t *)swift_slowAlloc(12, -1);
        v221 = (uint8_t *)swift_slowAlloc(32, -1);
        v225[0] = (uint64_t)v221;
        v220 = v139;
        *(_DWORD *)v139 = 136315138;
        v140 = v139 + 12;
        v216 = (uint64_t *)(v139 + 4);
        v141 = *(_QWORD *)(*(_QWORD *)(v99 + 16) + 16);
        swift_retain(v99);
        swift_retain(v141);
        v142 = sub_100017354();
        v144 = v143;
        swift_release(v99);
        swift_release(v141);
        v224 = sub_100021438(v142, v144, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, v225, v216, v140);
        swift_release_n(v99, 2);
        swift_bridgeObjectRelease(v144);
        v145 = v220;
        _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v222, "[OCM] %s preparing", v220, 0xCu);
        v146 = v221;
        swift_arrayDestroy(v221, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v146, -1, -1);
        swift_slowDealloc(v145, -1, -1);

        v97 = (*(uint64_t (**)(char *, uint64_t))(v217 + 8))(v209, v218);
        goto LABEL_27;
      }
    }
    else
    {
      if ((_DWORD)v51 != enum case for NWConnection.State.ready(_:))
      {
        if ((_DWORD)v51 == enum case for NWConnection.State.cancelled(_:))
        {
          v168 = v205;
          static Log.network.getter(v51);
          v169 = v223;
          v170 = swift_retain_n(v223, 2);
          v171 = Logger.logObject.getter(v170);
          v172 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v171, v172))
          {
            v173 = (uint8_t *)swift_slowAlloc(12, -1);
            v222 = swift_slowAlloc(32, -1);
            v225[0] = (uint64_t)v222;
            v221 = v173;
            *(_DWORD *)v173 = 136315138;
            v220 = v173 + 4;
            v174 = *(_QWORD *)(*(_QWORD *)(v169 + 16) + 16);
            swift_retain(v169);
            swift_retain(v174);
            v175 = sub_100017354();
            v177 = v176;
            swift_release(v223);
            swift_release(v174);
            v224 = sub_100021438(v175, v177, v225);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, v225, v220, v173 + 12);
            swift_release_n(v223, 2);
            v178 = v177;
            v169 = v223;
            swift_bridgeObjectRelease(v178);
            v179 = v221;
            _os_log_impl((void *)&_mh_execute_header, v171, v172, "[OCM] %s cancelled", v221, 0xCu);
            v180 = v222;
            swift_arrayDestroy(v222, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v180, -1, -1);
            swift_slowDealloc(v179, -1, -1);

            (*(void (**)(char *, uint64_t))(v217 + 8))(v205, v218);
          }
          else
          {

            swift_release_n(v169, 2);
            (*(void (**)(char *, uint64_t))(v217 + 8))(v168, v218);
          }
          v147 = v219;
          swift_beginAccess(v219 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_outgoingConnections, v225, 33, 0);
          v200 = sub_10000DAE0(v169);
          swift_endAccess(v225);
          swift_release(v200);
          v97 = sub_1000091BC();
          goto LABEL_28;
        }
        static Log.network.getter(v51);
        v204(v207, v203, v216);
        v181 = v223;
        v182 = swift_retain_n(v223, 2);
        v183 = Logger.logObject.getter(v182);
        v184 = static os_log_type_t.default.getter();
        v185 = v184;
        v222 = v183;
        if (os_log_type_enabled(v183, v184))
        {
          v186 = swift_slowAlloc(22, -1);
          LODWORD(v221) = v185;
          v187 = v186;
          v220 = (uint8_t *)swift_slowAlloc(64, -1);
          v225[0] = (uint64_t)v220;
          *(_DWORD *)v187 = 136315394;
          v215 = v187 + 4;
          v188 = *(_QWORD *)(*(_QWORD *)(v181 + 16) + 16);
          swift_retain(v181);
          swift_retain(v188);
          v213 = (_QWORD *)sub_100017354();
          v190 = v189;
          swift_release(v181);
          swift_release(v188);
          v224 = sub_100021438((uint64_t)v213, v190, v225);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, v225, v215, v187 + 12);
          swift_release_n(v181, 2);
          swift_bridgeObjectRelease(v190);
          v191 = v187;
          *(_WORD *)(v187 + 12) = 2080;
          v223 = v187 + 14;
          v214 = (uint8_t *)v187;
          v192 = v202;
          v193 = v216;
          v204(v202, (uint64_t)v207, v216);
          v194 = String.init<A>(describing:)(v192, v193);
          v196 = v195;
          v224 = sub_100021438(v194, v195, v225);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, v225, v223, v191 + 22);
          swift_bridgeObjectRelease(v196);
          v75 = *(void (**)(char *, uint64_t *))(v39 + 8);
          v75(v207, v193);
          v197 = v222;
          v198 = v214;
          _os_log_impl((void *)&_mh_execute_header, v222, (os_log_type_t)v221, "[OCM] %s unknown state: %s", v214, 0x16u);
          v199 = v220;
          swift_arrayDestroy(v220, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v199, -1, -1);
          swift_slowDealloc(v198, -1, -1);

        }
        else
        {
          swift_release_n(v181, 2);
          v75 = *(void (**)(char *, uint64_t *))(v39 + 8);
          v75(v207, v216);

        }
        (*(void (**)(char *, uint64_t))(v217 + 8))(v206, v218);
        v79 = (uint64_t (*)(_QWORD, _QWORD))v45;
        v80 = v216;
        goto LABEL_9;
      }
      v98 = v208;
      static Log.network.getter(v51);
      v99 = v223;
      v148 = swift_retain_n(v223, 2);
      v101 = Logger.logObject.getter(v148);
      v149 = static os_log_type_t.default.getter();
      v150 = v149;
      if (os_log_type_enabled(v101, v149))
      {
        LODWORD(v222) = v150;
        v151 = (uint8_t *)swift_slowAlloc(12, -1);
        v221 = (uint8_t *)swift_slowAlloc(32, -1);
        v225[0] = (uint64_t)v221;
        v220 = v151;
        *(_DWORD *)v151 = 136315138;
        v152 = v151 + 12;
        v216 = (uint64_t *)(v151 + 4);
        v153 = *(_QWORD *)(*(_QWORD *)(v99 + 16) + 16);
        swift_retain(v99);
        swift_retain(v153);
        v154 = sub_100017354();
        v156 = v155;
        swift_release(v99);
        swift_release(v153);
        v224 = sub_100021438(v154, v156, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, v225, v216, v152);
        swift_release_n(v99, 2);
        swift_bridgeObjectRelease(v156);
        v157 = v220;
        _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v222, "[OCM] %s ready", v220, 0xCu);
        v158 = v221;
        swift_arrayDestroy(v221, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v158, -1, -1);
        swift_slowDealloc(v157, -1, -1);

        v97 = (*(uint64_t (**)(char *, uint64_t))(v217 + 8))(v208, v218);
        goto LABEL_27;
      }
    }

    swift_release_n(v99, 2);
    v97 = (*(uint64_t (**)(char *, uint64_t))(v217 + 8))(v98, v218);
    goto LABEL_27;
  }
  (*(void (**)(char *, uint64_t *))(v39 + 96))(v45, v216);
  v52 = v222;
  v53 = (*(uint64_t (**)(NSObject *, char *, uint64_t))(v11 + 32))(v222, v45, v10);
  static Log.network.getter(v53);
  v216 = *(uint64_t **)(v11 + 16);
  ((void (*)(uint8_t *, NSObject *, uint64_t))v216)(v220, v52, v10);
  v54 = v223;
  v55 = swift_retain_n(v223, 2);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.error.getter();
  v58 = v57;
  v59 = v54;
  if (os_log_type_enabled(v56, v57))
  {
    v60 = swift_slowAlloc(22, -1);
    v215 = v10;
    v61 = v60;
    v213 = (_QWORD *)swift_slowAlloc(8, -1);
    v214 = (uint8_t *)swift_slowAlloc(32, -1);
    v225[0] = (uint64_t)v214;
    *(_DWORD *)v61 = 136315394;
    v210 = (char *)(v61 + 4);
    v62 = *(_QWORD *)(v59 + 16);
    v212 = v56;
    v63 = *(_QWORD *)(v62 + 16);
    swift_retain(v59);
    swift_retain(v63);
    v64 = sub_100017354();
    LODWORD(v211) = v58;
    v65 = v64;
    v67 = v66;
    swift_release(v59);
    swift_release(v63);
    v224 = sub_100021438(v65, v67, v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, v225, v210, v61 + 12);
    swift_release_n(v59, 2);
    swift_bridgeObjectRelease(v67);
    *(_WORD *)(v61 + 12) = 2112;
    v68 = sub_100009174(&qword_1000B20B8, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
    v223 = v11;
    v69 = (uint64_t *)v215;
    v70 = swift_allocError(v215, v68, 0, 0);
    v71 = v220;
    ((void (*)(uint64_t, uint8_t *, uint64_t *))v216)(v72, v220, v69);
    v73 = _swift_stdlib_bridgeErrorToNSError(v70);
    v224 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, v225, v61 + 14, v61 + 22);
    v74 = v213;
    *v213 = v73;
    v75 = *(void (**)(char *, uint64_t *))(v223 + 8);
    v75((char *)v71, v69);
    v76 = v212;
    _os_log_impl((void *)&_mh_execute_header, v212, (os_log_type_t)v211, "[OCM] %s waiting with error: %@", (uint8_t *)v61, 0x16u);
    v77 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v74, 1, v77);
    swift_slowDealloc(v74, -1, -1);
    v78 = v214;
    swift_arrayDestroy(v214, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v61, -1, -1);

    (*(void (**)(uint8_t *, uint64_t))(v217 + 8))(v221, v218);
    v79 = (uint64_t (*)(_QWORD, _QWORD))v222;
    v80 = v69;
  }
  else
  {

    v75 = *(void (**)(char *, uint64_t *))(v11 + 8);
    v75((char *)v220, (uint64_t *)v10);
    swift_release_n(v54, 2);
    (*(void (**)(uint8_t *, uint64_t))(v217 + 8))(v221, v218);
    v79 = (uint64_t (*)(_QWORD, _QWORD))v222;
    v80 = (_QWORD *)v10;
  }
LABEL_9:
  v97 = ((uint64_t (*)(_QWORD, _QWORD *))v75)(v79, v80);
LABEL_27:
  v147 = v219;
LABEL_28:
  result = sub_10000A430(v97);
  if (!result)
    return result;
  v160 = result;
  v161 = (_QWORD *)(v147 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_waiters);
  while (1)
  {
    swift_beginAccess(v161, v225, 33, 0);
    if (*(uint64_t *)(*v161 + 24) < 1)
    {
      v167 = 1;
      goto LABEL_39;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(*v161) & 1) == 0)
      sub_10000E970();
    v162 = (_QWORD *)*v161;
    result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v7 + 32))(v5, *v161+ ((*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * *(_QWORD *)(*v161 + 32), v6);
    v163 = v162[4];
    v164 = __OFADD__(v163, 1);
    v165 = v163 + 1;
    if (v164)
      break;
    v166 = v162[3];
    if (v165 >= v162[2])
      v165 = 0;
    v162[4] = v165;
    if (__OFSUB__(v166, 1))
      goto LABEL_53;
    v167 = 0;
    v162[3] = v166 - 1;
LABEL_39:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v167, 1, v6);
    swift_endAccess(v225);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      swift_release(v160);
      return sub_10000EA70((uint64_t)v5, &qword_1000B2228);
    }
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    v225[0] = v160;
    swift_retain(v160);
    CheckedContinuation.resume(returning:)(v225, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t sub_10000DAE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35[9];

  v2 = v1;
  v4 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v2;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v6 = swift_retain(a1);
    v7 = __CocoaSet.contains(_:)(v6, v5);
    swift_release(a1);
    if ((v7 & 1) != 0)
    {
      v8 = sub_10000DD3C(v5, a1);
      swift_bridgeObjectRelease(v4);
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  Hasher.init(_seed:)(v35, *(_QWORD *)(v4 + 40));
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRetain(v4);
  v11 = swift_retain(v10);
  v12 = NWConnection.identifier.getter(v11);
  swift_release(v10);
  Hasher._combine(_:)(v12);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v4 + 32);
  v15 = v13 & ~v14;
  if (((*(_QWORD *)(v4 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
    goto LABEL_15;
  v16 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 16);
  swift_retain(v16);
  v18 = swift_retain(v17);
  v19 = NWConnection.identifier.getter(v18);
  swift_release(v17);
  v20 = *(_QWORD *)(v9 + 16);
  v21 = swift_retain(v20);
  v22 = NWConnection.identifier.getter(v21);
  swift_release(v16);
  swift_release(v20);
  if (v19 != v22)
  {
    v23 = ~v14;
    do
    {
      v15 = (v15 + 1) & v23;
      if (((*(_QWORD *)(v4 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        goto LABEL_15;
      v24 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15);
      v25 = *(_QWORD *)(*(_QWORD *)(v24 + 16) + 16);
      swift_retain(v24);
      v26 = swift_retain(v25);
      v27 = NWConnection.identifier.getter(v26);
      swift_release(v25);
      v28 = *(_QWORD *)(v9 + 16);
      v29 = swift_retain(v28);
      v30 = NWConnection.identifier.getter(v29);
      swift_release(v24);
      swift_release(v28);
    }
    while (v27 != v30);
  }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v32 = *v2;
  v35[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100052874();
    v32 = v35[0];
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v32 + 48) + 8 * v15);
  sub_10000DF84(v15);
  v33 = *v2;
  *v2 = v35[0];
  swift_bridgeObjectRelease(v33);
  return v8;
}

uint64_t sub_10000DD3C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38[9];
  Swift::Int v39;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_10005167C(v7, v6);
  v39 = v8;
  Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v9 + 16);
  swift_retain(v8);
  v11 = swift_retain(v10);
  v12 = NWConnection.identifier.getter(v11);
  swift_release(v10);
  Hasher._combine(_:)(v12);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v8 + 32);
  v15 = v13 & ~v14;
  if (((*(_QWORD *)(v8 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15);
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 16);
    swift_retain(v16);
    v18 = swift_retain(v17);
    v19 = NWConnection.identifier.getter(v18);
    swift_release(v17);
    v20 = *(_QWORD *)(v9 + 16);
    v21 = swift_retain(v20);
    v22 = NWConnection.identifier.getter(v21);
    swift_release(v16);
    swift_release(v20);
    if (v19 == v22)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15);
      sub_10000DF84(v15);
      v31 = *(_QWORD *)(v9 + 16);
      v32 = swift_retain(v31);
      v33 = NWConnection.identifier.getter(v32);
      swift_release(v31);
      v34 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 16);
      v35 = swift_retain(v34);
      v36 = NWConnection.identifier.getter(v35);
      swift_release(v34);
      if (v33 == v36)
      {
        *v3 = v39;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v23 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v23;
        if (((*(_QWORD *)(v8 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v24 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15);
        v25 = *(_QWORD *)(*(_QWORD *)(v24 + 16) + 16);
        swift_retain(v24);
        v26 = swift_retain(v25);
        v27 = NWConnection.identifier.getter(v26);
        swift_release(v25);
        v28 = *(_QWORD *)(v9 + 16);
        v29 = swift_retain(v28);
        v30 = NWConnection.identifier.getter(v29);
        swift_release(v24);
        swift_release(v28);
        if (v27 == v30)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

unint64_t sub_10000DF84(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v22, *(_QWORD *)(v3 + 40));
        v11 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 16);
        swift_retain(v10);
        v12 = swift_retain(v11);
        v13 = NWConnection.identifier.getter(v12);
        swift_release(v11);
        Hasher._combine(_:)(v13);
        v14 = Hasher._finalize()();
        swift_release(v10);
        v15 = v14 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v15 < v9)
            goto LABEL_5;
        }
        else if (v15 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(v3 + 48);
          v17 = (_QWORD *)(v16 + 8 * v2);
          v18 = (_QWORD *)(v16 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
          {
            *v17 = *v18;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

size_t sub_10000E168(Swift::Int a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  Swift::Int *v4;
  Swift::Int v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v3 = *v2;
  v4 = (Swift::Int *)(*v2 + 16);
  v5 = *v4;
  if (*v4 >= a1)
  {
    v21 = *(_QWORD *)(sub_10000629C(&qword_1000B2230) - 8);
    v22 = *(unsigned __int8 *)(v21 + 80);
    v23 = sub_10000629C(&qword_1000B2238);
    v24 = (v22 + 40) & ~v22;
    v18 = swift_allocObject(v23, v24 + *(_QWORD *)(v21 + 72) * v5, v22 | 7);
    v25 = *(_OWORD *)(v3 + 24);
    *(_QWORD *)(v18 + 16) = v5;
    *(_OWORD *)(v18 + 24) = v25;
    if ((uint64_t)v25 < 1)
    {
LABEL_20:
      result = swift_release(v3);
      *v2 = v18;
      return result;
    }
    sub_10000E7C4(v18 + 16, v18 + v24, v4, v3 + v24);
LABEL_19:
    v3 = *v2;
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v9 = *v2;
  v10 = sub_10000629C(&qword_1000B2230);
  v11 = Deque._Storage._growCapacity(to:linearly:)(a1, a2 & 1);
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v12 = *(_QWORD *)(v10 - 8);
    v13 = *(unsigned __int8 *)(v12 + 80);
    v14 = *(_QWORD *)(v9 + 24);
    v15 = sub_10000629C(&qword_1000B2238);
    v16 = *(_QWORD *)(v12 + 72);
    v17 = (v13 + 40) & ~v13;
    v18 = swift_allocObject(v15, v17 + v16 * v11, v13 | 7);
    result = j__malloc_size((const void *)v18);
    if (v16)
    {
      if (result - v17 != 0x8000000000000000 || v16 != -1)
      {
        *(_QWORD *)(v18 + 16) = (uint64_t)(result - v17) / v16;
        *(_QWORD *)(v18 + 24) = v14;
        *(_QWORD *)(v18 + 32) = 0;
        if (v14 >= 1)
        {
          swift_retain(v18);
          sub_10000E45C(v18 + 16, v18 + v17, (_QWORD *)(v9 + 16), v9 + v17);
          *(_QWORD *)(v9 + 24) = 0;
          swift_release(v18);
        }
        goto LABEL_19;
      }
      goto LABEL_23;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v26 = *(_QWORD *)(v10 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = sub_10000629C(&qword_1000B2238);
  v29 = *(_QWORD *)(v26 + 72);
  v30 = (v27 + 40) & ~v27;
  v18 = swift_allocObject(v28, v30 + v29 * v11, v27 | 7);
  result = j__malloc_size((const void *)v18);
  if (!v29)
    goto LABEL_22;
  if (result - v30 != 0x8000000000000000 || v29 != -1)
  {
    v32 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v18 + 16) = (uint64_t)(result - v30) / v29;
    *(_QWORD *)(v18 + 24) = v32;
    *(_QWORD *)(v18 + 32) = 0;
    if (v32 >= 1)
      sub_10000E614(v18 + 16, v18 + v30, (_QWORD *)(v9 + 16), v9 + v30);
    goto LABEL_19;
  }
LABEL_24:
  __break(1u);
  return result;
}

_QWORD *sub_10000E3A4(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result[1];
  v4 = result[2];
  v5 = v4 + v3;
  if (!__OFADD__(v4, v3))
  {
    v8 = result;
    if ((v3 & 0x8000000000000000) == 0)
    {
      v9 = __OFSUB__(v5, *result);
      if (v5 < *result || (v5 -= *result, !v9))
      {
LABEL_9:
        v10 = sub_10000629C(&qword_1000B2230);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a2 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, a3, v10);
        v11 = v8[1];
        v9 = __OFADD__(v11, 1);
        v12 = v11 + 1;
        if (!v9)
        {
          v8[1] = v12;
          return result;
        }
        goto LABEL_12;
      }
      __break(1u);
    }
    if (v5 < 0)
    {
      v9 = __OFADD__(v5, *result);
      v5 += *result;
      if (v9)
        goto LABEL_13;
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

void sub_10000E45C(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_32;
  }
  v8 = a3[1];
  if (v5 < v8)
  {
    v9 = v8 - v5;
    if (!__OFSUB__(v8, v5))
    {
      v10 = sub_10000629C(&qword_1000B2230);
      v11 = v5;
      v12 = a4;
      goto LABEL_6;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v10 = sub_10000629C(&qword_1000B2230);
  v12 = 0;
  v9 = 0;
  v11 = v8;
LABEL_6:
  v13 = v5 < v8;
  v14 = v9 != 0;
  v15 = v13 && v14;
  if (v13 && v14)
    v16 = v12;
  else
    v16 = 0;
  if (v13 && v14)
    v17 = v9;
  else
    v17 = 0;
  if (v11 < 1)
  {
    v11 = 0;
    goto LABEL_20;
  }
  if (!a4)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v18 = a4 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v4;
  if (v18 > a2 || v18 + *(_QWORD *)(*(_QWORD *)(sub_10000629C(&qword_1000B2230) - 8) + 72) * v11 <= a2)
  {
    v19 = sub_10000629C(&qword_1000B2230);
    swift_arrayInitWithTakeFrontToBack(a2, v18, v11, v19);
  }
  else if (v18 != a2)
  {
    swift_arrayInitWithTakeBackToFront(a2);
  }
LABEL_20:
  if (!v15 || v17 <= 0)
    return;
  if (!v16)
  {
LABEL_34:
    __break(1u);
    return;
  }
  v20 = sub_10000629C(&qword_1000B2230);
  v21 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
  v22 = a2 + v21 * v11;
  v23 = v16 + v21 * v17;
  if (v22 < v16 || v22 >= v23)
  {
    swift_arrayInitWithTakeFrontToBack(v22, v16, v17, v20);
  }
  else if (v22 != v16)
  {
    swift_arrayInitWithTakeBackToFront(v22);
  }
}

uint64_t sub_10000E614(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v25;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_26;
  }
  v8 = a3[1];
  if (v5 >= v8)
  {
    result = sub_10000629C(&qword_1000B2230);
    v12 = 0;
    v9 = 0;
    v11 = v8;
    if (v8 < 1)
      goto LABEL_5;
    goto LABEL_7;
  }
  v9 = v8 - v5;
  if (__OFSUB__(v8, v5))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = sub_10000629C(&qword_1000B2230);
  v11 = v5;
  v12 = a4;
  if (v5 < 1)
  {
LABEL_5:
    v11 = 0;
    goto LABEL_13;
  }
LABEL_7:
  if (!a4)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v13 = a4 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * v4;
  v14 = *(_QWORD *)(*(_QWORD *)(sub_10000629C(&qword_1000B2230) - 8) + 72) * v11;
  v15 = a2 + v14;
  v16 = v13 + v14;
  if (v13 < v15 && v16 > a2)
    goto LABEL_29;
  result = swift_arrayInitWithCopy(a2);
LABEL_13:
  if (v5 >= v8 || v9 < 1)
    return result;
  if (!v12)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    v25 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v25, 1092, 0);
    __break(1u);
    return result;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(sub_10000629C(&qword_1000B2230) - 8) + 72);
  v20 = a2 + v19 * v11;
  v21 = v19 * v9;
  v22 = v20 + v21;
  v23 = v12 + v21;
  if (v22 > v12 && v20 < v23)
    goto LABEL_29;
  return swift_arrayInitWithCopy(v20);
}

uint64_t sub_10000E7C4(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v25;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_26;
  }
  v8 = a3[1];
  if (v5 >= v8)
  {
    result = sub_10000629C(&qword_1000B2230);
    v12 = 0;
    v9 = 0;
    v11 = v8;
    if (v8 < 1)
      goto LABEL_14;
    goto LABEL_7;
  }
  v9 = v8 - v5;
  if (__OFSUB__(v8, v5))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = sub_10000629C(&qword_1000B2230);
  v11 = v5;
  v12 = a4;
  if (v5 < 1)
    goto LABEL_14;
LABEL_7:
  if (!a4)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v13 = a4 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * v4;
  v14 = *(_QWORD *)(*(_QWORD *)(sub_10000629C(&qword_1000B2230) - 8) + 72);
  v15 = a2 + v14 * v4;
  v16 = v14 * v11;
  v17 = v15 + v16;
  v18 = v13 + v16;
  if (v13 < v17 && v15 < v18)
    goto LABEL_29;
  result = swift_arrayInitWithCopy(v15);
LABEL_14:
  if (v5 < v8 && v9 >= 1)
  {
    if (v12)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(sub_10000629C(&qword_1000B2230) - 8) + 72) * v9;
      v22 = a2 + v21;
      v23 = v12 + v21;
      if (v22 <= v12 || v23 <= a2)
        return swift_arrayInitWithCopy(a2);
LABEL_29:
      v25 = 2;
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v25, 1092, 0);
      __break(1u);
      return result;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_10000E970()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t result;

  v1 = *v0;
  v2 = sub_10000629C(&qword_1000B2230);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v2 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = sub_10000629C(&qword_1000B2238);
  v7 = (v5 + 40) & ~v5;
  v8 = swift_allocObject(v6, v7 + *(_QWORD *)(v4 + 72) * v3, v5 | 7);
  v9 = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(v8 + 16) = v3;
  *(_OWORD *)(v8 + 24) = v9;
  if ((uint64_t)v9 >= 1)
    sub_10000E7C4(v8 + 16, v8 + v7, (_QWORD *)(v1 + 16), v1 + v7);
  result = swift_release(v1);
  *v0 = v8;
  return result;
}

uint64_t sub_10000EA28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000629C(&qword_1000B2248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000EA70(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10000629C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000EAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000629C(&qword_1000B2248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000EAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000629C(&qword_1000B2248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000EB3C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10000EBDC@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = type metadata accessor for NWBrowser.Result(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10000EC70(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

_QWORD *sub_10000ECF8(_QWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 8 * a2);
    v6 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * a2);
    *result = v6;
    swift_bridgeObjectRetain(v6);
    return (_QWORD *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10000ED78(uint64_t a1)
{
  uint64_t v1;

  return sub_10000BA14(a1, v1);
}

uint64_t sub_10000ED80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10000C41C(a1, a2, v2);
}

void sub_10000ED88()
{
  uint64_t v0;

  sub_10000EDB8(*(_QWORD *)(v0 + 32));
}

void sub_10000EDB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  __n128 v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  void (*v81)(char *, uint64_t);
  os_log_t v82;
  void (*v83)(_QWORD, _QWORD);
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  NSObject *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  objc_class *v99;
  uint8_t *v100;
  void (*v101)(char *, uint64_t);
  os_log_t v102;
  void (*v103)(_QWORD, _QWORD);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  void (*v119)(char *, char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  int v128;
  _DWORD *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _DWORD *v137;
  _DWORD *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  void (*v153)(char *, uint64_t);
  os_log_t v154;
  os_log_t v155;
  void (*v156)(char *, uint64_t);
  void (*v157)(char *, uint64_t);
  void (*v158)(char *, uint64_t);
  uint64_t v159;
  __n128 v160;
  char *v161;
  char *v162;
  _DWORD *v163;
  void (*v164)(char *, char *, uint64_t);
  int v165;
  int v166;
  uint8_t *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  int v174;
  uint64_t v175;
  char *v176;
  char *v177;
  __n128 v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  os_log_t v183;
  void (*v184)(_QWORD, _QWORD);
  char *v185;
  char *v186;
  int v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  int64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  int v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  int64_t v206;
  char *v207;
  uint64_t v208[3];

  v175 = type metadata accessor for NWBrowser.Result.Change.Flags(0);
  v172 = *(_QWORD *)(v175 - 8);
  v3 = __chkstk_darwin(v175);
  v162 = (char *)&v160 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v171 = (char *)&v160 - v6;
  __chkstk_darwin(v5);
  v177 = (char *)&v160 - v7;
  v8 = sub_10000629C(&qword_1000B2228);
  __chkstk_darwin(v8);
  v10 = (char *)&v160 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000629C(&qword_1000B2230);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v160 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for NWEndpoint(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v160 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Logger(0);
  v194 = *(_QWORD *)(v16 - 8);
  v195 = v16;
  v17 = __chkstk_darwin(v16);
  v170 = (char *)&v160 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v186 = (char *)&v160 - v20;
  __chkstk_darwin(v19);
  v193 = (char *)&v160 - v21;
  v204 = type metadata accessor for NWBrowser.Result(0);
  v200 = *(_QWORD *)(v204 - 8);
  v22 = __chkstk_darwin(v204);
  v161 = (char *)&v160 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v169 = (char *)&v160 - v25;
  v26 = __chkstk_darwin(v24);
  v168 = (char *)&v160 - v27;
  v28 = __chkstk_darwin(v26);
  v176 = (char *)&v160 - v29;
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v160 - v31;
  v33 = __chkstk_darwin(v30);
  v185 = (char *)&v160 - v34;
  v35 = __chkstk_darwin(v33);
  v179 = (char *)&v160 - v36;
  v37 = __chkstk_darwin(v35);
  v188 = (char *)&v160 - v38;
  __chkstk_darwin(v37);
  v196 = (char *)&v160 - v39;
  v40 = type metadata accessor for NWBrowser.Result.Change(0);
  v201 = *(_QWORD *)(v40 - 8);
  v202 = v40;
  v41 = __chkstk_darwin(v40);
  v203 = (char *)&v160 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v199 = (char *)&v160 - v43;
  v44 = *(_QWORD *)(a1 + 56);
  v190 = a1 + 56;
  v45 = 1 << *(_BYTE *)(a1 + 32);
  v46 = -1;
  if (v45 < 64)
    v46 = ~(-1 << v45);
  v47 = v46 & v44;
  v189 = v1;
  v48 = (_QWORD *)(v1 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_waiters);
  v49 = v32;
  v191 = (unint64_t)(v45 + 63) >> 6;
  v198 = enum case for NWBrowser.Result.Change.added(_:);
  v187 = enum case for NWBrowser.Result.Change.removed(_:);
  v174 = enum case for NWBrowser.Result.Change.changed(_:);
  v166 = enum case for NWBrowser.Result.Change.identical(_:);
  v50 = swift_bridgeObjectRetain(a1);
  v51 = 0;
  v50.n128_u64[0] = 136315138;
  v178 = v50;
  v173 = (char *)&type metadata for Any + 8;
  v50.n128_u64[0] = 136315650;
  v160 = v50;
  v197 = a1;
  v207 = v32;
  while (1)
  {
    if (v47)
    {
      v205 = (v47 - 1) & v47;
      v206 = v51;
      v52 = __clz(__rbit64(v47)) | (v51 << 6);
      v53 = v202;
    }
    else
    {
      v54 = v51 + 1;
      v53 = v202;
      if (__OFADD__(v51, 1))
        goto LABEL_54;
      if (v54 >= v191)
        goto LABEL_51;
      v55 = *(_QWORD *)(v190 + 8 * v54);
      v56 = v51 + 1;
      if (!v55)
      {
        v56 = v51 + 2;
        if (v51 + 2 >= v191)
          goto LABEL_51;
        v55 = *(_QWORD *)(v190 + 8 * v56);
        if (!v55)
        {
          v56 = v51 + 3;
          if (v51 + 3 >= v191)
            goto LABEL_51;
          v55 = *(_QWORD *)(v190 + 8 * v56);
          if (!v55)
          {
            v57 = v51 + 4;
            if (v51 + 4 >= v191)
              goto LABEL_51;
            v55 = *(_QWORD *)(v190 + 8 * v57);
            if (!v55)
            {
              while (1)
              {
                v56 = v57 + 1;
                if (__OFADD__(v57, 1))
                  goto LABEL_55;
                if (v56 >= v191)
                  break;
                v55 = *(_QWORD *)(v190 + 8 * v56);
                ++v57;
                if (v55)
                  goto LABEL_22;
              }
LABEL_51:
              swift_release(a1);
              return;
            }
            v56 = v51 + 4;
          }
        }
      }
LABEL_22:
      v205 = (v55 - 1) & v55;
      v206 = v56;
      v52 = __clz(__rbit64(v55)) + (v56 << 6);
    }
    v58 = v201;
    v59 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(v201 + 72) * v52;
    v60 = v199;
    (*(void (**)(char *, unint64_t, uint64_t))(v201 + 16))(v199, v59, v53);
    v61 = v203;
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v203, v60, v53);
    v62 = (*(uint64_t (**)(char *, uint64_t))(v58 + 88))(v61, v53);
    if (v62 == v198)
      break;
    if (v62 == v187)
    {
      v85 = v203;
      (*(void (**)(char *, uint64_t))(v201 + 96))(v203, v202);
      v86 = v200;
      v87 = v179;
      v88 = v204;
      v89 = (*(uint64_t (**)(char *, char *, uint64_t))(v200 + 32))(v179, v85, v204);
      static Log.network.getter(v89);
      v90 = v185;
      v91 = (*(uint64_t (**)(char *, char *, uint64_t))(v86 + 16))(v185, v87, v88);
      v92 = Logger.logObject.getter(v91);
      v93 = static os_log_type_t.info.getter();
      LODWORD(v192) = v93;
      if (os_log_type_enabled(v92, v93))
      {
        v94 = swift_slowAlloc(12, -1);
        v167 = (uint8_t *)v94;
        v184 = (void (*)(_QWORD, _QWORD))swift_slowAlloc(32, -1);
        v208[0] = (uint64_t)v184;
        LODWORD(v94->isa) = v178.n128_u32[0];
        v95 = v180;
        v183 = v92;
        NWBrowser.Result.endpoint.getter();
        v96 = sub_10000FEC4();
        v98 = v97;
        (*(void (**)(char *, uint64_t))(v181 + 8))(v95, v182);
        v99 = (objc_class *)sub_100021438(v96, v98, v208);
        v100 = v167;
        *(_QWORD *)(v167 + 4) = v99;
        swift_bridgeObjectRelease(v98);
        v101 = *(void (**)(char *, uint64_t))(v86 + 8);
        v101(v185, v88);
        v102 = v183;
        _os_log_impl((void *)&_mh_execute_header, v183, (os_log_type_t)v192, "[OCM] Browser results removed endpoint: %s", v100, 0xCu);
        v103 = v184;
        swift_arrayDestroy(v184, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v103, -1, -1);
        v104 = v88;
        a1 = v197;
        swift_slowDealloc(v100, -1, -1);

        (*(void (**)(char *, uint64_t))(v194 + 8))(v186, v195);
        v101(v179, v104);
        v49 = v207;
        goto LABEL_6;
      }

      v157 = *(void (**)(char *, uint64_t))(v86 + 8);
      v157(v90, v88);
      (*(void (**)(char *, uint64_t))(v194 + 8))(v186, v195);
      v157(v87, v88);
      v51 = v206;
      v49 = v207;
      v47 = v205;
      a1 = v197;
    }
    else if (v62 == v174)
    {
      v113 = v203;
      (*(void (**)(char *, uint64_t))(v201 + 96))(v203, v202);
      v114 = sub_10000629C(&qword_1000B2250);
      v192 = &v113[*(int *)(v114 + 48)];
      v115 = *(int *)(v114 + 64);
      v116 = v49;
      v117 = &v113[v115];
      v118 = v200;
      v119 = *(void (**)(char *, char *, uint64_t))(v200 + 32);
      v120 = v204;
      v119(v116, v113, v204);
      v119(v176, v192, v120);
      v121 = v172;
      v122 = v175;
      v123 = (*(uint64_t (**)(char *, char *, uint64_t))(v172 + 32))(v177, v117, v175);
      static Log.network.getter(v123);
      v124 = *(void (**)(char *, char *, uint64_t))(v118 + 16);
      v124(v168, v207, v120);
      v124(v169, v176, v120);
      v192 = *(char **)(v121 + 16);
      v125 = ((uint64_t (*)(char *, char *, uint64_t))v192)(v171, v177, v122);
      v126 = Logger.logObject.getter(v125);
      v127 = static os_log_type_t.info.getter();
      v128 = v127;
      if (os_log_type_enabled(v126, v127))
      {
        v129 = (_DWORD *)swift_slowAlloc(32, -1);
        v163 = v129;
        v183 = (os_log_t)swift_slowAlloc(96, -1);
        v208[0] = (uint64_t)v183;
        *v129 = v160.n128_u32[0];
        v167 = (uint8_t *)v126;
        v130 = v161;
        v164 = v124;
        v131 = v168;
        v132 = v204;
        v124(v161, v168, v204);
        v133 = String.init<A>(describing:)(v130, v132);
        v165 = v128;
        v135 = v134;
        v136 = sub_100021438(v133, v134, v208);
        v137 = v163;
        *(_QWORD *)(v163 + 1) = v136;
        swift_bridgeObjectRelease(v135);
        v184 = *(void (**)(_QWORD, _QWORD))(v200 + 8);
        v184(v131, v132);
        *((_WORD *)v137 + 6) = 2080;
        v138 = v137;
        v139 = v169;
        v164(v130, v169, v132);
        v140 = v130;
        v141 = v132;
        v142 = String.init<A>(describing:)(v140, v132);
        v144 = v143;
        v145 = v138;
        *(_QWORD *)((char *)v138 + 14) = sub_100021438(v142, v143, v208);
        swift_bridgeObjectRelease(v144);
        v146 = v141;
        v184(v139, v141);
        *((_WORD *)v145 + 11) = 2080;
        v147 = v162;
        v148 = v171;
        v149 = v175;
        ((void (*)(char *, char *, uint64_t))v192)(v162, v171, v175);
        v150 = String.init<A>(describing:)(v147, v149);
        v152 = v151;
        *((_QWORD *)v145 + 3) = sub_100021438(v150, v151, v208);
        swift_bridgeObjectRelease(v152);
        v153 = *(void (**)(char *, uint64_t))(v172 + 8);
        v153(v148, v149);
        v154 = (os_log_t)v167;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v167, (os_log_type_t)v165, "[OCM] Browser result changed: %s to %s with %s", (uint8_t *)v145, 0x20u);
        v155 = v183;
        swift_arrayDestroy(v183, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v155, -1, -1);
        swift_slowDealloc(v145, -1, -1);

        (*(void (**)(char *, uint64_t))(v194 + 8))(v170, v195);
        v153(v177, v175);
        v156 = (void (*)(char *, uint64_t))v184;
        v184(v176, v146);
      }
      else
      {

        v158 = *(void (**)(char *, uint64_t))(v172 + 8);
        v159 = v175;
        v158(v171, v175);
        v156 = *(void (**)(char *, uint64_t))(v200 + 8);
        v146 = v204;
        v156(v169, v204);
        v156(v168, v146);
        (*(void (**)(char *, uint64_t))(v194 + 8))(v170, v195);
        v158(v177, v159);
        v156(v176, v146);
      }
      v49 = v207;
      v156(v207, v146);
      a1 = v197;
LABEL_6:
      v47 = v205;
      v51 = v206;
    }
    else
    {
      v47 = v205;
      v51 = v206;
      a1 = v197;
      if (v62 != v166)
        (*(void (**)(char *, uint64_t))(v201 + 8))(v203, v202);
    }
  }
  (*(void (**)(char *, uint64_t))(v58 + 96))(v61, v53);
  v63 = v200;
  v64 = v196;
  v65 = v61;
  v66 = v204;
  v67 = (*(uint64_t (**)(char *, char *, uint64_t))(v200 + 32))(v196, v65, v204);
  v68 = v193;
  static Log.network.getter(v67);
  v69 = v188;
  v70 = (*(uint64_t (**)(char *, char *, uint64_t))(v63 + 16))(v188, v64, v66);
  v71 = Logger.logObject.getter(v70);
  v72 = static os_log_type_t.info.getter();
  LODWORD(v192) = v72;
  if (os_log_type_enabled(v71, v72))
  {
    v73 = swift_slowAlloc(12, -1);
    v183 = v71;
    v74 = v73;
    v184 = (void (*)(_QWORD, _QWORD))swift_slowAlloc(32, -1);
    v208[0] = (uint64_t)v184;
    *(_DWORD *)v74 = v178.n128_u32[0];
    v75 = v180;
    NWBrowser.Result.endpoint.getter();
    v76 = sub_10000FEC4();
    v78 = v77;
    (*(void (**)(char *, uint64_t))(v181 + 8))(v75, v182);
    v79 = sub_100021438(v76, v78, v208);
    v80 = (uint8_t *)v74;
    *(_QWORD *)(v74 + 4) = v79;
    swift_bridgeObjectRelease(v78);
    v81 = *(void (**)(char *, uint64_t))(v200 + 8);
    v81(v69, v204);
    v82 = v183;
    _os_log_impl((void *)&_mh_execute_header, v183, (os_log_type_t)v192, "[OCM] Browser results added endpoint: %s", v80, 0xCu);
    v83 = v184;
    swift_arrayDestroy(v184, 1, v173);
    swift_slowDealloc(v83, -1, -1);
    a1 = v197;
    swift_slowDealloc(v80, -1, -1);

    v84 = (*(uint64_t (**)(char *, uint64_t))(v194 + 8))(v193, v195);
  }
  else
  {
    v81 = *(void (**)(char *, uint64_t))(v63 + 8);
    v81(v69, v66);

    v84 = (*(uint64_t (**)(char *, uint64_t))(v194 + 8))(v68, v195);
    a1 = v197;
  }
  v105 = sub_10000A430(v84);
  v49 = v207;
  if (!v105)
  {
LABEL_5:
    v81(v196, v204);
    goto LABEL_6;
  }
  v106 = v105;
  while (1)
  {
    swift_beginAccess(v48, v208, 33, 0);
    if (*(uint64_t *)(*v48 + 24) < 1)
    {
      v112 = 1;
      goto LABEL_41;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(*v48) & 1) == 0)
      sub_10000E970();
    v107 = (_QWORD *)*v48;
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 32))(v10, *v48+ ((*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * *(_QWORD *)(*v48 + 32), v11);
    v108 = v107[4];
    v109 = __OFADD__(v108, 1);
    v110 = v108 + 1;
    if (v109)
      break;
    v111 = v107[3];
    if (v110 >= v107[2])
      v110 = 0;
    v107[4] = v110;
    if (__OFSUB__(v111, 1))
      goto LABEL_53;
    v112 = 0;
    v107[3] = v111 - 1;
    v49 = v207;
LABEL_41:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v112, 1, v11);
    swift_endAccess(v208);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      swift_release(v106);
      sub_10000EA70((uint64_t)v10, &qword_1000B2228);
      goto LABEL_5;
    }
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v208[0] = v106;
    swift_retain(v106);
    CheckedContinuation.resume(returning:)(v208, v11);
    v49 = v207;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
}

uint64_t sub_10000FD70()
{
  uint64_t v0;

  return sub_10000BA78(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10000FD9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000629C(&qword_1000B2090);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10000FE14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000629C(&qword_1000B2090) - 8) + 80);
  return sub_10000C488(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_10000FE58()
{
  uint64_t *v0;

  return sub_10000C4F4(v0[2], v0[3], v0[4]);
}

uint64_t sub_10000FE78()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_100008214(v0[3], v0[4]);
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for NetworkAdvertiser()
{
  return objc_opt_self(_TtC11photosfaced17NetworkAdvertiser);
}

uint64_t sub_10000FEC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t *, uint64_t);
  char *v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  Swift::String v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  void *object;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v43 = type metadata accessor for URL(0);
  v41 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v42 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for NWEndpoint.Port(0);
  v2 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NWEndpoint.Host(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NWEndpoint(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = NWEndpoint.deviceName.getter(v11);
  if (!v15)
  {
    v40 = v8;
    v16 = v44;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16))(v13, v0, v9);
    v17 = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 88))(v13, v9);
    if (v17 == enum case for NWEndpoint.hostPort(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v13, v9);
      v18 = (char *)v13 + *(int *)(sub_10000629C(&qword_1000B2428) + 48);
      v19 = v6;
      v20 = *(void (**)(char *, uint64_t *, uint64_t))(v6 + 32);
      v21 = v40;
      v20(v40, v13, v5);
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v18, v16);
      v45 = 0;
      v46 = 0xE000000000000000;
      v22._countAndFlagsBits = 0x726F503A74736F48;
      v22._object = (void *)0xEA00000000002074;
      String.append(_:)(v22);
      _print_unlocked<A, B>(_:_:)(v21, &v45, v5, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v23._countAndFlagsBits = 58;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      _print_unlocked<A, B>(_:_:)(v4, &v45, v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v24 = v45;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v16);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v5);
      return v24;
    }
    else if (v17 == enum case for NWEndpoint.service(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v13, v9);
      v25 = *v13;
      v26 = (void *)v13[1];
      swift_bridgeObjectRelease(v13[3]);
      swift_bridgeObjectRelease(v13[5]);
      v27 = (uint64_t)v13 + *(int *)(sub_10000629C(&qword_1000B2418) + 80);
      v45 = 0x2065636976726553;
      v46 = 0xE800000000000000;
      v28._countAndFlagsBits = v25;
      v28._object = v26;
      String.append(_:)(v28);
      swift_bridgeObjectRelease(v26);
      v29 = v45;
      sub_100010370(v27);
      return v29;
    }
    else if (v17 == enum case for NWEndpoint.unix(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v13, v9);
      v30._countAndFlagsBits = *v13;
      v31 = (void *)v13[1];
      v45 = 0x2078696E55;
      v46 = 0xE500000000000000;
      v30._object = v31;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(v31);
      return v45;
    }
    else if (v17 == enum case for NWEndpoint.url(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v13, v9);
      v33 = v41;
      v32 = v42;
      v34 = v43;
      v35 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v41 + 32))(v42, v13, v43);
      v45 = 541872725;
      v46 = 0xE400000000000000;
      v36._countAndFlagsBits = URL.absoluteString.getter(v35);
      object = v36._object;
      String.append(_:)(v36);
      swift_bridgeObjectRelease(object);
      v38 = v45;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v34);
      return v38;
    }
    else if (v17 == enum case for NWEndpoint.opaque(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v13, v9);
      swift_unknownObjectRelease(*v13);
      return 0x552065757161704FLL;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v13, v9);
      return 0x6E776F6E6B6E55;
    }
  }
  return result;
}

uint64_t sub_10001031C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for NetworkBrowser()
{
  return objc_opt_self(_TtC11photosfaced14NetworkBrowser);
}

uint64_t sub_100010370(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000629C(&qword_1000B2420);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000103B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint8_t *v51;
  uint8_t *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  int v59;
  uint8_t *v60;
  uint8_t *v61;
  uint8_t *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint8_t *v67;
  uint8_t *v68;
  uint8_t *v69;
  uint8_t *v70;
  char *v71;
  uint64_t v72;
  uint8_t *v73;
  uint8_t *v74;
  uint8_t *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint8_t *v83;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v78 = *(_QWORD *)(v2 - 8);
  v79 = v2;
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v72 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v72 - v9;
  v11 = type metadata accessor for NWProtocolQUIC.Metadata.KeepAliveBehavior(0);
  v12 = *(_QWORD *)(v11 - 8);
  v80 = v11;
  v81 = v12;
  v13 = __chkstk_darwin(v11);
  v77 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v72 - v15);
  v17 = *(_QWORD *)(v0 + 16);
  v18 = *(_QWORD *)(v17 + 16);
  type metadata accessor for NWProtocolQUIC(0);
  v19 = swift_retain(v18);
  v20 = static NWProtocolQUIC.definition.getter(v19);
  v21 = NWConnection.metadata(definition:)();
  swift_release(v18);
  result = swift_release(v20);
  if (v21)
  {
    v23 = type metadata accessor for NWProtocolQUIC.Metadata(0);
    v24 = swift_dynamicCastClass(v21, v23);
    if (!v24)
      return swift_release(v21);
    v76 = v24;
    dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.getter();
    v26 = v80;
    v25 = v81;
    v27 = (*(uint64_t (**)(uint64_t *, uint64_t))(v81 + 88))(v16, v80);
    if ((_DWORD)v27 == enum case for NWProtocolQUIC.Metadata.KeepAliveBehavior.seconds(_:))
    {
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t))(v25 + 96))(v16, v26);
      v29 = *v16;
      static Log.network.getter(v28);
      v30 = swift_retain_n(v0, 2);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.fault.getter();
      v33 = v32;
      if (os_log_type_enabled(v31, v32))
      {
        v34 = swift_slowAlloc(22, -1);
        v75 = (uint8_t *)swift_slowAlloc(32, -1);
        v82 = v29;
        v83 = v75;
        *(_DWORD *)v34 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v34 + 4, v34 + 12);
        *(_WORD *)(v34 + 12) = 2080;
        v73 = (uint8_t *)(v34 + 14);
        LODWORD(v74) = v33;
        v35 = *(_QWORD *)(v17 + 16);
        swift_retain(v1);
        swift_retain(v35);
        v36 = sub_100017354();
        v38 = v37;
        swift_release(v1);
        swift_release(v35);
        v39 = v36;
        v26 = v80;
        v82 = sub_100021438(v39, v38, (uint64_t *)&v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v73, v34 + 22);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v38);
        _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v74, "Fixing invalid keepalive (%ld): %s", (uint8_t *)v34, 0x16u);
        v40 = v75;
        swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

        swift_release_n(v1, 2);
      }
      (*(void (**)(char *, uint64_t))(v78 + 8))(v8, v79);
      v53 = enum case for NWProtocolQUIC.Metadata.KeepAliveBehavior.off(_:);
      v54 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 104);
LABEL_17:
      v71 = v77;
      v54(v77, v53, v26);
      dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.setter(v71);
      return swift_release(v21);
    }
    if ((_DWORD)v27 == enum case for NWProtocolQUIC.Metadata.KeepAliveBehavior.on(_:))
    {
      static Log.network.getter(v27);
      v41 = swift_retain_n(v0, 2);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(12, -1);
        v75 = (uint8_t *)swift_slowAlloc(32, -1);
        v83 = v75;
        v74 = v44;
        *(_DWORD *)v44 = 136315138;
        v73 = v44 + 4;
        v45 = *(_QWORD *)(v17 + 16);
        swift_retain(v1);
        swift_retain(v45);
        v46 = sub_100017354();
        v48 = v47;
        swift_release(v1);
        swift_release(v45);
        v49 = v46;
        v26 = v80;
        v82 = sub_100021438(v49, v48, (uint64_t *)&v83);
        v50 = v44 + 12;
        v25 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v73, v50);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v48);
        v51 = v74;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Fixing invalid keepalive (on): %s", v74, 0xCu);
        v52 = v75;
        swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v51, -1, -1);

      }
      else
      {

        swift_release_n(v0, 2);
      }
      (*(void (**)(char *, uint64_t))(v78 + 8))(v10, v79);
      v53 = enum case for NWProtocolQUIC.Metadata.KeepAliveBehavior.off(_:);
      v54 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 104);
      goto LABEL_17;
    }
    v55 = enum case for NWProtocolQUIC.Metadata.KeepAliveBehavior.off(_:);
    if ((_DWORD)v27 == enum case for NWProtocolQUIC.Metadata.KeepAliveBehavior.off(_:))
      return swift_release(v21);
    static Log.network.getter(v27);
    v56 = swift_retain_n(v21, 2);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter();
    v59 = v58;
    if (os_log_type_enabled(v57, v58))
    {
      LODWORD(v75) = v59;
      v60 = (uint8_t *)swift_slowAlloc(12, -1);
      v74 = (uint8_t *)swift_slowAlloc(32, -1);
      v83 = v74;
      v73 = v60;
      *(_DWORD *)v60 = 136315138;
      v61 = v60 + 12;
      v62 = v60 + 4;
      v63 = v77;
      dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.getter();
      v64 = String.init<A>(describing:)(v63, v80);
      v66 = v65;
      v82 = sub_100021438(v64, v65, (uint64_t *)&v83);
      v67 = v62;
      v68 = v61;
      v26 = v80;
      v25 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v67, v68);
      swift_release_n(v21, 2);
      swift_bridgeObjectRelease(v66);
      v69 = v73;
      _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v75, "Found unkown keepalive: %s", v73, 0xCu);
      v75 = (uint8_t *)v57;
      v70 = v74;
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v69, -1, -1);

      (*(void (**)(char *, uint64_t))(v78 + 8))(v5, v79);
    }
    else
    {

      swift_release_n(v21, 2);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v5, v79);
      v63 = v77;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v63, v55, v26);
    dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.setter(v63);
    swift_release(v21);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v25 + 8))(v16, v26);
  }
  return result;
}

uint64_t sub_100010ACC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for MessageBody(0);
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Message.Operation(0);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000629C(&qword_1000B25F8);
  v2[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ProtocolVersion(0);
  v2[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[16] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v8);
  v2[18] = swift_task_alloc(v8);
  v9 = type metadata accessor for FileHeaderProto(0);
  v2[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[20] = v10;
  v2[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for BinaryDecodingOptions(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v11);
  v2[23] = swift_task_alloc(v11);
  v12 = type metadata accessor for MessageProto(0);
  v2[24] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[25] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[26] = swift_task_alloc(v14);
  v2[27] = swift_task_alloc(v14);
  v15 = type metadata accessor for CommunicationActor(0);
  v2[28] = v15;
  v2[29] = static CommunicationActor.shared.getter(v15);
  v16 = (_QWORD *)swift_task_alloc(dword_1000B2604);
  v2[30] = v16;
  *v16 = v2;
  v16[1] = sub_100010C60;
  return sub_100015160();
}

uint64_t sub_100010C60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 240);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 224);
  *(_QWORD *)(*(_QWORD *)v2 + 248) = v1;
  swift_task_dealloc(v5);
  v7 = sub_100018190(&qword_1000B1F78, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v6, v7);
  v4[32] = v9;
  v4[33] = v8;
  if (v1)
  {
    v10 = sub_1000117F8;
  }
  else
  {
    v4[34] = a1;
    v10 = sub_100010D18;
  }
  return swift_task_switch(v10, v9, v8);
}

uint64_t sub_100010D18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = LazyData.getData()();
  v5 = v4;
  v6 = swift_release(v1);
  if (v2)
  {
    swift_release(*(_QWORD *)(v0 + 232));
    v11 = *(_QWORD *)(v0 + 208);
    v13 = *(_QWORD *)(v0 + 176);
    v12 = *(_QWORD *)(v0 + 184);
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 144);
    v18 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  v8 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  BinaryDecodingOptions.init()(v6);
  v9 = sub_100018190(&qword_1000B2598, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MessageProto, (uint64_t)&protocol conformance descriptor for MessageProto);
  v10 = Message.init(serializedData:extensions:partial:options:)(v3, v5, v59, 0, v8, v7, v9);
  v22 = static DemuxConstants.requestTimeout.getter(v10);
  *(_DWORD *)(v0 + 56) = sub_100022EBC(0xD00000000000001CLL, 0x80000001000945A0, 0xD000000000000010, 0x8000000100094690, v22, v23);
  *(_QWORD *)(v0 + 64) = v24;
  *(_QWORD *)(v0 + 72) = v25;
  v26 = MessageProto.fileCount.getter();
  *(_DWORD *)(v0 + 336) = v26;
  if (!v26)
  {
    v28 = *(_QWORD *)(v0 + 120);
    v29 = *(_QWORD *)(v0 + 128);
    v30 = *(_QWORD *)(v0 + 112);
    v31 = swift_release(*(_QWORD *)(v0 + 232));
    v32 = MessageProto.version.getter(v31);
    ProtocolVersion.init(rawValue:)(v32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v30, 1, v28) == 1)
    {
      v33 = *(_QWORD *)(v0 + 112);
      static ProtocolVersion.current.getter();
      sub_10000EA70(v33, &qword_1000B25F8);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
    }
    v34 = *(_QWORD *)(v0 + 208);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 16))(v34, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
    v35 = Message.Operation.init(protobuf:)(v34);
    v36 = *(_QWORD *)(v0 + 120);
    v37 = *(_QWORD *)(v0 + 128);
    v39 = *(_QWORD *)(v0 + 136);
    v38 = *(_QWORD *)(v0 + 144);
    v40 = MessageProto.messageContent.getter(v35);
    v42 = v41;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v39, v38, v36);
    v43 = MessageBody.init(data:files:version:)(v40, v42, &_swiftEmptyDictionarySingleton, v39);
    if ((MessageProto.hasComplete.getter(v43) & 1) != 0)
      v44 = MessageProto.complete.getter();
    else
      v44 = 1;
    v45 = *(_QWORD *)(v0 + 216);
    v46 = *(_QWORD *)(v0 + 192);
    v47 = *(_QWORD *)(v0 + 200);
    v53 = *(_QWORD *)(v0 + 208);
    v54 = *(_QWORD *)(v0 + 184);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 168);
    v48 = *(_QWORD *)(v0 + 144);
    v49 = *(_QWORD *)(v0 + 120);
    v50 = *(_QWORD *)(v0 + 128);
    v51 = *(_QWORD *)(v0 + 104);
    v57 = *(_QWORD *)(v0 + 136);
    v58 = *(_QWORD *)(v0 + 112);
    v52 = *(_QWORD *)(v0 + 96);
    Message.init(operation:content:complete:)(v51, v52, v44 & 1);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
    sub_100022AF4();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
    sub_100022CC4(*(_DWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
    swift_task_dealloc(v45);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v48);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  *(_DWORD *)(v0 + 340) = 0;
  *(_QWORD *)(v0 + 280) = &_swiftEmptyDictionarySingleton;
  v27 = (_QWORD *)swift_task_alloc(dword_1000B2604);
  *(_QWORD *)(v0 + 288) = v27;
  *v27 = v0;
  v27[1] = sub_100011140;
  return sub_100015160();
}

uint64_t sub_100011140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 288);
  v3[37] = a1;
  v3[38] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[35]);
    v5 = v3[32];
    v6 = v3[33];
    v7 = sub_1000118B8;
  }
  else
  {
    v5 = v3[32];
    v6 = v3[33];
    v7 = sub_1000111B4;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_1000111B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = LazyData.getData()();
  v4 = *(_QWORD *)(v0 + 296);
  if (v1)
  {
    v5 = *(_QWORD *)(v0 + 232);
    v6 = *(_QWORD *)(v0 + 216);
    v8 = *(_QWORD *)(v0 + 192);
    v7 = *(_QWORD *)(v0 + 200);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
    swift_release(v4);
    swift_release(v5);
    sub_100022AF4();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    sub_100022CC4(*(_DWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
    v15 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 184);
    v18 = *(_QWORD *)(v0 + 168);
    v20 = *(_QWORD *)(v0 + 136);
    v19 = *(_QWORD *)(v0 + 144);
    v22 = *(_QWORD *)(v0 + 104);
    v21 = *(_QWORD *)(v0 + 112);
    v23 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = v2;
    v10 = v3;
    v11 = *(_QWORD *)(v0 + 176);
    v12 = *(_QWORD *)(v0 + 152);
    v13 = swift_release(*(_QWORD *)(v0 + 296));
    *(_QWORD *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    BinaryDecodingOptions.init()(v13);
    v14 = sub_100018190(&qword_1000B25D0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for FileHeaderProto, (uint64_t)&protocol conformance descriptor for FileHeaderProto);
    Message.init(serializedData:extensions:partial:options:)(v9, v10, v0 + 16, 0, v11, v12, v14);
    v25 = (_QWORD *)swift_task_alloc(dword_1000B2604);
    *(_QWORD *)(v0 + 312) = v25;
    *v25 = v0;
    v25[1] = sub_1000113BC;
    return sub_100015160();
  }
}

uint64_t sub_1000113BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 312);
  *(_QWORD *)(*(_QWORD *)v2 + 320) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_bridgeObjectRelease(v4[35]);
    v6 = v4[32];
    v7 = v4[33];
    v8 = sub_1000119A4;
  }
  else
  {
    v4[41] = a1;
    v6 = v4[32];
    v7 = v4[33];
    v8 = sub_100011438;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100011438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 280);
  v58 = *(_DWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_DWORD *)(v0 + 340) + 1;
  v7 = FileHeaderProto.filename.getter();
  v9 = v8;
  swift_retain(v1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_10004BFDC(v1, v7, v9, isUniquelyReferenced_nonNull_native);
  v11 = v2;
  swift_bridgeObjectRelease(0x8000000000000000);
  swift_bridgeObjectRelease(v9);
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v6 == v58)
  {
    v12 = *(_QWORD *)(v0 + 320);
    v14 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 128);
    v15 = *(_QWORD *)(v0 + 112);
    v16 = swift_release(*(_QWORD *)(v0 + 232));
    v17 = MessageProto.version.getter(v16);
    ProtocolVersion.init(rawValue:)(v17);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v14) == 1)
    {
      v18 = *(_QWORD *)(v0 + 112);
      static ProtocolVersion.current.getter();
      sub_10000EA70(v18, &qword_1000B25F8);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
    }
    v21 = *(_QWORD *)(v0 + 208);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 16))(v21, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
    v22 = Message.Operation.init(protobuf:)(v21);
    v23 = *(_QWORD *)(v0 + 216);
    v25 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 128);
    if (v12)
    {
      v26 = *(_QWORD *)(v0 + 192);
      v27 = *(_QWORD *)(v0 + 200);
      (*(void (**)(_QWORD, _QWORD))(v24 + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
      swift_bridgeObjectRelease(v11);
      sub_100022AF4();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v23, v26);
      sub_100022CC4(*(_DWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
      v28 = *(_QWORD *)(v0 + 208);
      v30 = *(_QWORD *)(v0 + 176);
      v29 = *(_QWORD *)(v0 + 184);
      v31 = *(_QWORD *)(v0 + 168);
      v33 = *(_QWORD *)(v0 + 136);
      v32 = *(_QWORD *)(v0 + 144);
      v35 = *(_QWORD *)(v0 + 104);
      v34 = *(_QWORD *)(v0 + 112);
      v59 = *(_QWORD *)(v0 + 96);
      swift_task_dealloc(*(_QWORD *)(v0 + 216));
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v59);
      v36 = *(uint64_t (**)(void))(v0 + 8);
    }
    else
    {
      v38 = *(_QWORD *)(v0 + 136);
      v37 = *(_QWORD *)(v0 + 144);
      v39 = MessageProto.messageContent.getter(v22);
      v41 = v40;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v38, v37, v25);
      v42 = MessageBody.init(data:files:version:)(v39, v41, v11, v38);
      if ((MessageProto.hasComplete.getter(v42) & 1) != 0)
        v43 = MessageProto.complete.getter();
      else
        v43 = 1;
      v44 = *(_QWORD *)(v0 + 208);
      v45 = *(_QWORD *)(v0 + 216);
      v47 = *(_QWORD *)(v0 + 192);
      v46 = *(_QWORD *)(v0 + 200);
      v53 = *(_QWORD *)(v0 + 184);
      v54 = *(_QWORD *)(v0 + 176);
      v48 = *(_QWORD *)(v0 + 144);
      v55 = *(_QWORD *)(v0 + 168);
      v56 = *(_QWORD *)(v0 + 136);
      v49 = *(_QWORD *)(v0 + 120);
      v50 = *(_QWORD *)(v0 + 128);
      v51 = *(_QWORD *)(v0 + 104);
      v57 = *(_QWORD *)(v0 + 112);
      v52 = *(_QWORD *)(v0 + 96);
      Message.init(operation:content:complete:)(v51, v52, v43 & 1);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
      sub_100022AF4();
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
      sub_100022CC4(*(_DWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
      swift_task_dealloc(v45);
      swift_task_dealloc(v44);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v48);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      v36 = *(uint64_t (**)(void))(v0 + 8);
    }
    return v36();
  }
  else
  {
    ++*(_DWORD *)(v0 + 340);
    *(_QWORD *)(v0 + 280) = v2;
    v19 = (_QWORD *)swift_task_alloc(dword_1000B2604);
    *(_QWORD *)(v0 + 288) = v19;
    *v19 = v0;
    v19[1] = sub_100011140;
    return sub_100015160();
  }
}

uint64_t sub_1000117F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(*(_QWORD *)(v0 + 232));
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000118B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 232));
  sub_100022AF4();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_100022CC4(*(_DWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  v4 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000119A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 232));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100022AF4();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_100022CC4(*(_DWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  v7 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4[13] = a3;
  v4[14] = v3;
  v4[11] = a1;
  v4[12] = a2;
  v5 = type metadata accessor for MessageBody(0);
  v4[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[16] = v6;
  v4[17] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MessageProto(0);
  v4[18] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[19] = v8;
  v4[20] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Message.Operation(0);
  v4[21] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[22] = v10;
  v4[23] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Message(0);
  v4[24] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[25] = v12;
  v4[26] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CommunicationActor(0);
  v4[27] = static CommunicationActor.shared.getter(v13);
  v14 = sub_100018190(&qword_1000B1F78, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(v13, v14);
  v4[28] = v15;
  v4[29] = v16;
  return swift_task_switch(sub_100011BE0, v15, v16);
}

uint64_t sub_100011BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 16))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 192));
  if (v1)
  {
    v3 = *(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8);
    v5 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 104);
    swift_bridgeObjectRetain(v4);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 200);
    v8 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 184);
    v9 = *(_QWORD *)(v0 + 168);
    Message.operation.getter(v2);
    v5 = sub_100017C78(v7);
    v4 = v10;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v3 = *(uint64_t (**)(_QWORD, _QWORD))(v6 + 8);
  }
  *(_QWORD *)(v0 + 240) = v4;
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 88);
  v13 = v3(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
  v14 = static DemuxConstants.requestTimeout.getter(v13);
  *(_DWORD *)(v0 + 64) = sub_100022EBC(0xD00000000000001CLL, 0x80000001000945A0, 0x20676E69646E6553, 0xEF6567617373654DLL, v14, v15);
  *(_QWORD *)(v0 + 72) = v16;
  *(_QWORD *)(v0 + 80) = v17;
  v18 = swift_task_alloc(32);
  *(_QWORD *)(v18 + 16) = v12;
  v19 = sub_100018190(&qword_1000B2598, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MessageProto, (uint64_t)&protocol conformance descriptor for MessageProto);
  static Message.with(_:)(sub_100017F84, v18, v11, v19);
  v20 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(v18);
  v21 = sub_10000629C(&qword_1000B25A0);
  inited = swift_initStackObject(v21, v0 + 16);
  *(_QWORD *)(v0 + 248) = inited;
  *(_OWORD *)(inited + 16) = xmmword_100096430;
  v23 = Message.serializedData(partial:)(0, v20, v19);
  v25 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(inited + 32) = v23;
  *(_QWORD *)(inited + 40) = v27;
  v28 = Message.content.getter(v23);
  v29 = MessageBody.files.getter(v28);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  v30 = sub_100012DD0(v29);
  swift_bridgeObjectRelease(v29);
  v31 = sub_100017694(v30);
  *(_QWORD *)(v0 + 256) = inited;
  v32 = Message.complete.getter(v31);
  v33 = (_QWORD *)swift_task_alloc(dword_1000B25AC);
  *(_QWORD *)(v0 + 264) = v33;
  *v33 = v0;
  v33[1] = sub_100011F54;
  return sub_10001315C(inited, v32 & 1, v5, v4);
}

uint64_t sub_100011F54()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc(v3);
  v4 = v2[32];
  swift_bridgeObjectRelease(v2[30]);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v5 = sub_10001206C;
  else
    v5 = sub_100011FD0;
  return swift_task_switch(v5, v2[28], v2[29]);
}

uint64_t sub_100011FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 216));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100022AF4();
  sub_100022CC4(*(_DWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001206C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 216));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100022AF4();
  sub_100022CC4(*(_DWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100012100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t inited;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v34 - v8;
  v10 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 24) + 136))(v7);
  do
    v11 = __ldxr(v10);
  while (__stxr(1u, v10));
  if ((v11 & 1) == 0)
  {
    v12 = sub_10000629C(&qword_1000B2588);
    inited = swift_initStaticObject(v12, &unk_1000B1E48);
    v14 = (unint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)inited + 136))();
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 + 1;
    }
    while (__stxr(v15 + 1, v14));
    if (v16 < 21)
    {
      static Log.network.getter(v14);
      v25 = swift_retain_n(v0, 2);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = swift_slowAlloc(22, -1);
        v35 = swift_slowAlloc(32, -1);
        v37 = v35;
        *(_DWORD *)v28 = 136315394;
        v34 = v28 + 4;
        swift_retain(v0);
        v29 = sub_100017354();
        v31 = v30;
        swift_release(v1);
        v36 = sub_100021438(v29, v31, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v34, v28 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v31);
        *(_WORD *)(v28 + 12) = 2048;
        v36 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v28 + 14, v28 + 22);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "[NWC] %s start: (total: %ld)", (uint8_t *)v28, 0x16u);
        v32 = v35;
        swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v28, -1, -1);

      }
      else
      {

        swift_release_n(v0, 2);
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
    else
    {
      static Log.network.getter(v14);
      v17 = swift_retain_n(v0, 2);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc(32, -1);
        v35 = swift_slowAlloc(32, -1);
        v37 = v35;
        *(_DWORD *)v20 = 136315650;
        v34 = v20 + 4;
        swift_retain(v0);
        v21 = sub_100017354();
        v23 = v22;
        swift_release(v1);
        v36 = sub_100021438(v21, v23, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v34, v20 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v23);
        *(_WORD *)(v20 + 12) = 2048;
        v36 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 14, v20 + 22);
        *(_WORD *)(v20 + 22) = 2048;
        v36 = 20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 24, v20 + 32);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "[NWC] %s start: (total: %ld > max: %ld)", (uint8_t *)v20, 0x20u);
        v24 = v35;
        swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v20, -1, -1);

      }
      else
      {

        swift_release_n(v0, 2);
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    }
    type metadata accessor for CommunicationActor(0);
    v33 = (void *)static CommunicationActor.sharedQueue.getter();
    NWConnection.start(queue:)();

  }
}

void sub_100012534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t inited;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 24) + 136))(v4);
  do
    v8 = __ldxr(v7);
  while (__stxr(0, v7));
  if ((v8 & 1) != 0)
  {
    v9 = sub_10000629C(&qword_1000B2588);
    inited = swift_initStaticObject(v9, &unk_1000B1E48);
    v11 = (unint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)inited + 136))();
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stxr(v12 - 1, v11));
    static Log.network.getter(v11);
    v14 = swift_retain_n(v0, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(32, -1);
      v25 = v23;
      *(_DWORD *)v17 = 136315394;
      v22 = v17 + 4;
      swift_retain(v0);
      v18 = sub_100017354();
      v20 = v19;
      swift_release(v1);
      v24 = sub_100021438(v18, v20, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v22, v17 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v17 + 12) = 2048;
      v24 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v17 + 14, v17 + 22);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "[NWC] %s close: (total: %ld)", (uint8_t *)v17, 0x16u);
      v21 = v23;
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_release_n(v0, 2);
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    NWConnection.cancel()();
  }
}

uint64_t sub_10001278C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NWConnection.State(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v27 - v12;
  NWConnection.state.getter(v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for NWConnection.State.cancelled(_:), v6);
  v14 = sub_100018190(&qword_1000B2580, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NWConnection.State, (uint64_t)&protocol conformance descriptor for NWConnection.State);
  v15 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v6, v14);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  v17 = ((uint64_t (*)(char *, uint64_t))v16)(v13, v6);
  if ((v15 & 1) == 0)
  {
    static Log.network.getter(v17);
    v18 = swift_retain_n(v1, 2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v30 = v22;
      *(_DWORD *)v21 = 136315138;
      v27 = v21 + 4;
      swift_retain(v1);
      v23 = sub_100017354();
      v28 = v2;
      v25 = v24;
      swift_release(v1);
      v29 = sub_100021438(v23, v25, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v27, v21 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "[NWC] %s non-cancelled deinit", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v28);
    }
    else
    {

      swift_release_n(v1, 2);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    sub_100012534();
  }
  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  return v1;
}

uint64_t sub_100012A6C()
{
  uint64_t v0;

  v0 = sub_10001278C();
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for NetworkCanceller()
{
  return objc_opt_self(_TtC11photosfacedP33_442C419532BF49978597D3841576A27916NetworkCanceller);
}

uint64_t type metadata accessor for NetworkConnection()
{
  return objc_opt_self(_TtC11photosfaced17NetworkConnection);
}

uint64_t sub_100012AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v48 = type metadata accessor for ProtocolVersion(0);
  v53 = *(_QWORD *)(v48 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v49 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for MessageBody(0);
  v50 = *(_QWORD *)(v52 - 8);
  v5 = ((uint64_t (*)(void))__chkstk_darwin)();
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v44 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v44 - v11;
  v13 = type metadata accessor for Message.Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = a2;
  Message.operation.getter(v15);
  v18 = v54;
  Message.Operation.protobuf(proto:)(a1);
  if (v18)
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v46 = v10;
  v47 = 0;
  v45 = v7;
  v54 = a1;
  v20 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v21 = Message.content.getter(v20);
  v22 = MessageBody.files.getter(v21);
  v23 = *(void (**)(char *))(v50 + 8);
  v24 = v52;
  v23(v12);
  v25 = *(_QWORD *)(v22 + 16);
  swift_bridgeObjectRelease(v22);
  if (HIDWORD(v25))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else
  {
    v26 = MessageProto.fileCount.setter(v25);
    v27 = v46;
    v28 = Message.content.getter(v26);
    v29 = v47;
    v30 = MessageBody.getData()(v28);
    if (v29)
    {
      return ((uint64_t (*)(char *, uint64_t))v23)(v27, v24);
    }
    else
    {
      v32 = v30;
      v33 = v31;
      v34 = v27;
      v35 = v53;
      ((void (*)(char *, uint64_t))v23)(v34, v24);
      v36 = MessageProto.messageContent.setter(v32, v33);
      v37 = v45;
      v38 = Message.content.getter(v36);
      v39 = v49;
      MessageBody.version.getter(v38);
      v40 = ((uint64_t (*)(char *, uint64_t))v23)(v37, v24);
      v41 = ProtocolVersion.rawValue.getter(v40);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v39, v48);
      v42 = MessageProto.version.setter(v41);
      v43 = Message.complete.getter(v42);
      return MessageProto.complete.setter(v43 & 1);
    }
  }
  return result;
}

uint64_t sub_100012DD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  char v35[64];

  v2 = v1;
  v32 = type metadata accessor for FileHeaderProto(0);
  v30 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v33 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = &_swiftEmptyArrayStorage;
  v5 = *(_QWORD *)(a1 + 64);
  v27 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v28 = (unint64_t)(v6 + 63) >> 6;
  v31 = a1;
  v9 = swift_bridgeObjectRetain(a1);
  v10 = 0;
  v29 = xmmword_100096440;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v31 + 48) + 16 * i + 8);
    v17 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * i);
    __chkstk_darwin(v9);
    *(&v27 - 2) = v18;
    *(&v27 - 1) = v16;
    v19 = sub_100018190(&qword_1000B25D0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for FileHeaderProto, (uint64_t)&protocol conformance descriptor for FileHeaderProto);
    swift_bridgeObjectRetain(v16);
    swift_retain(v17);
    v20 = v32;
    static Message.with(_:)(sub_100018148, &v27 - 4, v32, v19);
    v21 = sub_10000629C(&qword_1000B25A0);
    inited = swift_initStackObject(v21, v35);
    *(_OWORD *)(inited + 16) = v29;
    v23 = Message.serializedData(partial:)(0, v20, v19);
    if (v2)
    {
      *(_QWORD *)(inited + 16) = 0;
      swift_release(inited);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v32);
      swift_release(v31);
      swift_release(v17);
      swift_bridgeObjectRelease(v16);
      return swift_bridgeObjectRelease(v34);
    }
    *(_QWORD *)(inited + 32) = v23;
    *(_QWORD *)(inited + 40) = v24;
    v2 = 0;
    *(_QWORD *)(inited + 48) = LazyData.getData()();
    *(_QWORD *)(inited + 56) = v25;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v32);
    swift_release(v17);
    swift_bridgeObjectRelease(v16);
    v9 = sub_100017694(inited);
    if (v8)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v28)
      goto LABEL_26;
    v14 = *(_QWORD *)(v27 + 8 * v10);
    if (!v14)
      break;
LABEL_17:
    v8 = (v14 - 1) & v14;
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v28)
    goto LABEL_26;
  v14 = *(_QWORD *)(v27 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 2;
  if (v10 + 2 >= v28)
    goto LABEL_26;
  v14 = *(_QWORD *)(v27 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 3;
  if (v10 + 3 >= v28)
    goto LABEL_26;
  v14 = *(_QWORD *)(v27 + 8 * v15);
  if (v14)
  {
LABEL_16:
    v10 = v15;
    goto LABEL_17;
  }
  v15 = v10 + 4;
  if (v10 + 4 < v28)
  {
    v14 = *(_QWORD *)(v27 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v10 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        if (v10 >= v28)
          goto LABEL_26;
        v14 = *(_QWORD *)(v27 + 8 * v10);
        ++v15;
        if (v14)
          goto LABEL_17;
      }
LABEL_28:
      __break(1u);
    }
    goto LABEL_16;
  }
LABEL_26:
  swift_release(v31);
  return (uint64_t)v34;
}

uint64_t sub_10001315C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v5 + 96) = a4;
  *(_QWORD *)(v5 + 104) = v4;
  *(_BYTE *)(v5 + 240) = a2;
  *(_QWORD *)(v5 + 80) = a1;
  *(_QWORD *)(v5 + 88) = a3;
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 112) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 120) = v7;
  *(_QWORD *)(v5 + 128) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v5 + 136) = static CommunicationActor.shared.getter(v8);
  v9 = sub_100018190(&qword_1000B1F78, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v9);
  *(_QWORD *)(v5 + 144) = v10;
  *(_QWORD *)(v5 + 152) = v11;
  return swift_task_switch(sub_100013220, v10, v11);
}

uint64_t sub_100013220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;

  *(_QWORD *)(v0 + 72) = 0;
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 160) = v2;
  if (v2)
  {
    swift_bridgeObjectRetain(v1);
    swift_beginAccess(v0 + 72, v0 + 16, 1, 0);
    v3 = (char *)&_swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 168) = 0;
    v4 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v0 + 176) = v5;
    v6 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v0 + 184) = v6;
    sub_100017F9C(v5, v6);
    sub_100017F9C(v5, v6);
    if ((swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyArrayStorage) & 1) == 0)
      v3 = sub_1000913B0(0, *((_QWORD *)&_swiftEmptyArrayStorage + 2) + 1, 1, (char *)&_swiftEmptyArrayStorage);
    v8 = *((_QWORD *)v3 + 2);
    v7 = *((_QWORD *)v3 + 3);
    if (v8 >= v7 >> 1)
      v3 = sub_1000913B0((char *)(v7 > 1), v8 + 1, 1, v3);
    *(_QWORD *)(v0 + 192) = v3;
    *((_QWORD *)v3 + 2) = v8 + 1;
    v9 = &v3[16 * v8];
    *((_QWORD *)v9 + 4) = v5;
    *((_QWORD *)v9 + 5) = v6;
    __asm { BR              X10 }
  }
  *(_QWORD *)(v0 + 216) = &_swiftEmptyArrayStorage;
  v10 = (_QWORD *)swift_task_alloc(dword_1000B25B4);
  *(_QWORD *)(v0 + 224) = v10;
  *v10 = v0;
  v10[1] = sub_10001393C;
  return sub_100013ED8((uint64_t)&_swiftEmptyArrayStorage, *(_BYTE *)(v0 + 240), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
}

uint64_t sub_100013458()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v3);
  v4 = v2[24];
  if (v0)
  {
    swift_bridgeObjectRelease(v2[10]);
    swift_bridgeObjectRelease(v4);
    v5 = v2[18];
    v6 = v2[19];
    v7 = sub_1000139E4;
  }
  else
  {
    swift_bridgeObjectRelease(v2[24]);
    v5 = v2[18];
    v6 = v2[19];
    v7 = sub_1000134E0;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_1000134E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v3 = *(_QWORD *)(v1 + 96);
  v2 = *(_QWORD *)(v1 + 104);
  static Log.network.getter(a1);
  swift_retain_n(v2, 2);
  v4 = swift_bridgeObjectRetain_n(v3, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v39 = *(_QWORD *)(v1 + 176);
    v40 = *(_QWORD *)(v1 + 184);
    v7 = *(_QWORD *)(v1 + 104);
    v37 = *(_QWORD *)(v1 + 112);
    v38 = *(_QWORD *)(v1 + 128);
    v35 = *(Swift::String *)(v1 + 88);
    v36 = *(_QWORD *)(v1 + 120);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    v41 = v9;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v1 + 56) = 0;
    *(_QWORD *)(v1 + 64) = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 64));
    *(_QWORD *)(v1 + 40) = 0xD000000000000012;
    *(_QWORD *)(v1 + 48) = 0x80000001000945C0;
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 16);
    swift_retain(v10);
    v11 = sub_100017354();
    v13 = v12;
    swift_release(v10);
    v14._countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v13);
    v15._countAndFlagsBits = 0x6567617373656D20;
    v15._object = (void *)0xE900000000000020;
    String.append(_:)(v15);
    String.append(_:)(v35);
    v16 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v8 + 4) = sub_100021438(*(_QWORD *)(v1 + 40), v16, &v41);
    swift_bridgeObjectRelease(v16);
    swift_release_n(v7, 2);
    swift_bridgeObjectRelease_n(v35._object, 2);
    *(_WORD *)(v8 + 12) = 2048;
    *(_QWORD *)(v8 + 14) = *(_QWORD *)(v1 + 72);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s end of batch after (%ld bytes)", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
    v17 = v39;
    v18 = v40;
  }
  else
  {
    v20 = *(_QWORD *)(v1 + 176);
    v19 = *(_QWORD *)(v1 + 184);
    v22 = *(_QWORD *)(v1 + 120);
    v21 = *(_QWORD *)(v1 + 128);
    v23 = *(_QWORD *)(v1 + 112);
    v24 = *(_QWORD *)(v1 + 96);
    swift_release_n(*(_QWORD *)(v1 + 104), 2);
    swift_bridgeObjectRelease_n(v24, 2);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    v17 = v20;
    v18 = v19;
  }
  sub_1000063CC(v17, v18);
  *(_QWORD *)(v1 + 72) = 0;
  v25 = *(_QWORD *)(v1 + 168) + 1;
  v26 = (char *)&_swiftEmptyArrayStorage;
  if (v25 != *(_QWORD *)(v1 + 160))
  {
    *(_QWORD *)(v1 + 168) = v25;
    v28 = *(_QWORD *)(v1 + 80) + 16 * v25;
    v29 = *(_QWORD *)(v28 + 32);
    *(_QWORD *)(v1 + 176) = v29;
    v30 = *(_QWORD *)(v28 + 40);
    *(_QWORD *)(v1 + 184) = v30;
    sub_100017F9C(v29, v30);
    sub_100017F9C(v29, v30);
    if ((swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyArrayStorage) & 1) == 0)
      v26 = sub_1000913B0(0, *((_QWORD *)&_swiftEmptyArrayStorage + 2) + 1, 1, (char *)&_swiftEmptyArrayStorage);
    v32 = *((_QWORD *)v26 + 2);
    v31 = *((_QWORD *)v26 + 3);
    if (v32 >= v31 >> 1)
      v26 = sub_1000913B0((char *)(v31 > 1), v32 + 1, 1, v26);
    *(_QWORD *)(v1 + 192) = v26;
    *((_QWORD *)v26 + 2) = v32 + 1;
    v33 = &v26[16 * v32];
    *((_QWORD *)v33 + 4) = v29;
    *((_QWORD *)v33 + 5) = v30;
    __asm { BR              X10 }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 80));
  *(_QWORD *)(v1 + 216) = &_swiftEmptyArrayStorage;
  v27 = (_QWORD *)swift_task_alloc(dword_1000B25B4);
  *(_QWORD *)(v1 + 224) = v27;
  *v27 = v1;
  v27[1] = sub_10001393C;
  return sub_100013ED8((uint64_t)&_swiftEmptyArrayStorage, *(_BYTE *)(v1 + 240), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
}

uint64_t sub_10001393C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[18];
    v5 = v2[19];
    v6 = sub_100013A30;
  }
  else
  {
    swift_bridgeObjectRelease(v2[27]);
    v4 = v2[18];
    v5 = v2[19];
    v6 = sub_1000139A8;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000139A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000139E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 136));
  sub_1000063CC(v1, v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100013A30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100013A78(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
  swift_retain(v5);
  v6 = sub_100017354();
  v8 = v7;
  swift_release(v5);
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 0x6567617373656D20;
  v10._object = (void *)0xE900000000000020;
  String.append(_:)(v10);
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  String.append(_:)(v11);
  return 0xD000000000000012;
}

uint64_t sub_100013B5C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v25[3];
  unint64_t v26;
  int v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = v6;
  v29 = a1;
  v30 = a3;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.network.getter(v14);
  swift_retain(v6);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  sub_100017F9C(a5, a6);
  swift_retain(v6);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v17 = sub_100017F9C(a5, a6);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, (os_log_type_t)v19))
  {
    v27 = v19;
    v28 = v18;
    v25[1] = v13;
    v25[2] = v12;
    v26 = a6 >> 62;
    v20 = swift_slowAlloc(32, -1);
    v25[0] = swift_slowAlloc(64, -1);
    v32 = v25[0];
    *(_DWORD *)v20 = 136315650;
    v21 = sub_100013A78(v29, a2);
    v23 = v22;
    v31 = sub_100021438(v21, v22, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(v7, 2);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v31 = sub_100021438(v30, a4, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v20 + 22) = 2048;
    __asm { BR              X9 }
  }
  sub_1000063CC(a5, a6);
  swift_bridgeObjectRelease_n(a4, 2);
  swift_bridgeObjectRelease_n(a2, 2);
  swift_release_n(v7, 2);
  sub_1000063CC(a5, a6);

  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t sub_100013ED8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = v4;
  *(_BYTE *)(v5 + 216) = a2;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a3;
  v6 = type metadata accessor for NWConnection.SendCompletion(0);
  *(_QWORD *)(v5 + 48) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ProtocolVersion(0);
  *(_QWORD *)(v5 + 72) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 80) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 88) = swift_task_alloc(v10);
  *(_QWORD *)(v5 + 96) = swift_task_alloc(v10);
  v11 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v5 + 104) = v11;
  *(_QWORD *)(v5 + 112) = static CommunicationActor.shared.getter(v11);
  v12 = sub_100018190(&qword_1000B1F78, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  *(_QWORD *)(v5 + 120) = v12;
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, v12);
  *(_QWORD *)(v5 + 128) = v13;
  *(_QWORD *)(v5 + 136) = v14;
  return swift_task_switch(sub_100013FDC, v13, v14);
}

uint64_t sub_100013FDC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2 >= 2 && ((v2 - 1) & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v4 = (char *)&loc_100014078 + dword_1000146FC[*(_QWORD *)(swift_bridgeObjectRetain(v1) + 40) >> 62];
    __asm { BR              X9 }
  }
  if (v2)
  {
    v5 = v1 + 32 + 16 * v2;
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v5 - 16);
    v6 = *(_QWORD *)(v5 - 8);
    *(_QWORD *)(v0 + 152) = v6;
    __asm { BR              X10 }
  }
  v8 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001471C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[16];
    v5 = v2[17];
    v6 = sub_100014804;
  }
  else
  {
    v7 = v2[23];
    swift_release(v2[22]);
    swift_task_dealloc(v7);
    v4 = v2[16];
    v5 = v2[17];
    v6 = sub_100014790;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100014790()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  sub_1000063CC(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_1000063CC(v1, v2);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100014804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 112);
  sub_1000063CC(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  swift_release(v5);
  sub_1000063CC(v4, v3);
  swift_release(v1);
  swift_task_dealloc(v2);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100014894(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, unsigned int a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)(uint64_t);
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;

  v37 = a7;
  v35 = a5;
  v36 = a6;
  v31 = a3;
  v32 = a1;
  v12 = sub_10000629C(&qword_1000B25C0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = type metadata accessor for NWConnection.SendCompletion(0);
  v33 = *(_QWORD *)(v15 - 8);
  v34 = v15;
  __chkstk_darwin(v15);
  v17 = (uint64_t (**)(uint64_t))((char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = a3;
  v19 = a4;
  sub_100013B5C(v18, a4, 0x746164207473616CLL, 0xE900000000000061, a5, a6);
  v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v32, v12);
  v21 = *(unsigned __int8 *)(v13 + 80);
  v22 = (v21 + 40) & ~v21;
  v23 = (char *)swift_allocObject(&unk_1000ADE80, v22 + v14, v21 | 7);
  v24 = v31;
  *((_QWORD *)v23 + 2) = a2;
  *((_QWORD *)v23 + 3) = v24;
  *((_QWORD *)v23 + 4) = v19;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v23[v22], (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  *v17 = sub_1000180B8;
  v17[1] = (uint64_t (*)(uint64_t))v23;
  v26 = v33;
  v25 = v34;
  (*(void (**)(uint64_t (**)(uint64_t), _QWORD, uint64_t))(v33 + 104))(v17, enum case for NWConnection.SendCompletion.contentProcessed(_:), v34);
  type metadata accessor for NWConnection.ContentContext(0);
  swift_retain(v20);
  swift_retain(a2);
  v27 = swift_bridgeObjectRetain(v19);
  v28 = static NWConnection.ContentContext.defaultMessage.getter(v27);
  NWConnection.send(content:contentContext:isComplete:completion:)(v35, v36, v28, v37, v17);
  swift_release(v20);
  swift_release(v28);
  return (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(v26 + 8))(v17, v25);
}

uint64_t sub_100014A8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  void (*v57)(char *, uint64_t);
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  os_log_t v70;
  uint64_t *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;

  v75 = a3;
  v9 = type metadata accessor for Logger(0);
  v77 = *(_QWORD *)(v9 - 8);
  v78 = v9;
  v10 = __chkstk_darwin(v9);
  v76 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v67 - v12;
  v14 = sub_10000629C(&qword_1000B25C8);
  __chkstk_darwin(v14);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for NWError(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v67 - v22;
  sub_100018100(a1, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    v24 = sub_10000EA70((uint64_t)v16, &qword_1000B25C8);
    static Log.network.getter(v24);
    swift_retain_n(a2, 2);
    v25 = swift_bridgeObjectRetain_n(a4, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v76 = (char *)swift_slowAlloc(64, -1);
      v80 = v76;
      *(_DWORD *)v28 = 136315394;
      v74 = v28 + 4;
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
      swift_retain(a2);
      swift_retain(v29);
      v30 = sub_100017354();
      v32 = v31;
      swift_release(a2);
      swift_release(v29);
      v79 = sub_100021438(v30, v32, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v74, v28 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v32);
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain(a4);
      v79 = sub_100021438(v75, a4, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[NWC] %s message %s done sending", (uint8_t *)v28, 0x16u);
      v33 = v76;
      swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
      swift_release_n(a2, 2);
    }
    (*(void (**)(char *, uint64_t))(v77 + 8))(v13, v78);
    v61 = sub_10000629C(&qword_1000B25C0);
    return CheckedContinuation.resume(returning:)(v61, v61);
  }
  else
  {
    v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
    static Log.network.getter(v34);
    v35 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    v35(v21, v23, v17);
    swift_retain_n(a2, 2);
    v36 = swift_bridgeObjectRetain_n(a4, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      v40 = swift_slowAlloc(32, -1);
      v74 = a5;
      v41 = v40;
      v71 = (uint64_t *)swift_slowAlloc(8, -1);
      v72 = swift_slowAlloc(64, -1);
      v80 = (char *)v72;
      *(_DWORD *)v41 = 136315650;
      v68 = v41 + 4;
      v42 = *(_QWORD *)(a2 + 16);
      v70 = v37;
      v43 = *(_QWORD *)(v42 + 16);
      swift_retain(a2);
      swift_retain(v43);
      v44 = sub_100017354();
      v73 = v23;
      v45 = a4;
      v46 = v35;
      v47 = v44;
      v69 = v39;
      v49 = v48;
      swift_release(a2);
      swift_release(v43);
      v50 = v47;
      v35 = v46;
      v79 = sub_100021438(v50, v49, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v68, v41 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v49);
      *(_WORD *)(v41 + 12) = 2080;
      swift_bridgeObjectRetain(v45);
      v79 = sub_100021438(v75, v45, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v41 + 14, v41 + 22);
      v51 = v45;
      v23 = v73;
      swift_bridgeObjectRelease_n(v51, 3);
      *(_WORD *)(v41 + 22) = 2112;
      v52 = sub_100018190(&qword_1000B20B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
      v53 = swift_allocError(v17, v52, 0, 0);
      v35(v54, v21, v17);
      v55 = _swift_stdlib_bridgeErrorToNSError(v53);
      v79 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v41 + 24, v41 + 32);
      v56 = v71;
      *v71 = v55;
      v57 = *(void (**)(char *, uint64_t))(v18 + 8);
      v57(v21, v17);
      v58 = v70;
      _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v69, "[NWC] %s message %s error sending data %@", (uint8_t *)v41, 0x20u);
      v59 = sub_10000629C(&qword_1000B20C0);
      swift_arrayDestroy(v56, 1, v59);
      swift_slowDealloc(v56, -1, -1);
      v60 = v72;
      swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(a4, 2);
      swift_release_n(a2, 2);
      v57 = *(void (**)(char *, uint64_t))(v18 + 8);
      v57(v21, v17);

    }
    (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
    v63 = sub_100018190(&qword_1000B20B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
    v64 = swift_allocError(v17, v63, 0, 0);
    v35(v65, v23, v17);
    v80 = (char *)v64;
    v66 = sub_10000629C(&qword_1000B25C0);
    CheckedContinuation.resume(throwing:)(&v80, v66);
    return ((uint64_t (*)(char *, uint64_t))v57)(v23, v17);
  }
}

uint64_t sub_100015160()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1[4] = v0;
  v2 = type metadata accessor for URL(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[7] = swift_task_alloc(v4);
  v1[8] = swift_task_alloc(v4);
  v1[9] = swift_task_alloc(v4);
  v5 = type metadata accessor for ProtocolVersion(0);
  v1[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CommunicationActor(0);
  v1[11] = v6;
  v1[12] = static CommunicationActor.shared.getter(v6);
  v7 = sub_100018190(&qword_1000B1F78, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v1[13] = v7;
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, v7);
  v1[14] = v8;
  v1[15] = v9;
  return swift_task_switch(sub_100015260, v8, v9);
}

uint64_t sub_100015260(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[13];
  v3 = v1[11];
  v1[16] = static CommunicationActor.shared.getter(a1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, v2);
  v1[17] = v4;
  v1[18] = v5;
  return swift_task_switch(sub_1000152C8, v4, v5);
}

uint64_t sub_1000152C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v1[13];
  v3 = v1[4];
  v4 = static CommunicationActor.shared.getter(a1);
  v1[19] = v4;
  v5 = swift_task_alloc(32);
  v1[20] = v5;
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = 4;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v1[21] = v6;
  *v6 = v1;
  v6[1] = sub_100015398;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 2, v4, v2, 0x2865766965636572, 0xEF293A7365747962, sub_1000181D0, v5, &type metadata for Data);
}

uint64_t sub_100015398()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[17];
    v5 = v2[18];
    v6 = sub_100015700;
  }
  else
  {
    v7 = v2[20];
    swift_release(v2[19]);
    swift_task_dealloc(v7);
    v4 = v2[17];
    v5 = v2[18];
    v6 = sub_10001540C;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10001540C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 128));
  *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 16);
  return swift_task_switch(sub_10001544C, *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
}

uint64_t sub_10001544C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v2 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 80);
  static ProtocolVersion.current.getter();
  sub_100017FE0();
  v5 = FixedWidthInteger.init(serialized:version:)(v2, v1, v4);
  if (v3)
  {
    swift_release(*(_QWORD *)(v0 + 96));
    v6 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 56);
    v7 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(unsigned int *)(v0 + 272);
    if ((_DWORD)v10)
    {
      if (v10 <= 0x4000)
      {
        v27 = (_QWORD *)swift_task_alloc(dword_1000B260C);
        *(_QWORD *)(v0 + 200) = v27;
        *v27 = v0;
        v27[1] = sub_1000157AC;
        return sub_100015AD0(v10);
      }
      else
      {
        static SystemDirectory.tempFolder()(v5);
        v11 = *(_QWORD *)(v0 + 104);
        v12 = *(_QWORD *)(v0 + 64);
        v13 = *(_QWORD *)(v0 + 32);
        v14 = objc_msgSend(objc_allocWithZone((Class)NSProcessInfo), "init");
        v15 = objc_msgSend(v14, "globallyUniqueString");

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        URL.appendingPathComponent(_:)(v16, v18);
        v19 = swift_bridgeObjectRelease(v18);
        v20 = static CommunicationActor.shared.getter(v19);
        *(_QWORD *)(v0 + 240) = v20;
        v21 = (_QWORD *)swift_task_alloc(48);
        *(_QWORD *)(v0 + 248) = v21;
        v21[2] = v13;
        v21[3] = v10;
        v21[4] = v12;
        v22 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
        *(_QWORD *)(v0 + 256) = v22;
        *v22 = v0;
        v22[1] = sub_1000158AC;
        return withCheckedThrowingContinuation<A>(isolation:function:_:)(v22, v20, v11, 0x4465766965636572, 0xED00002928617461, sub_1000181D8, v21, (char *)&type metadata for () + 8);
      }
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 96));
      type metadata accessor for LazyData(0);
      v23 = LazyData.__allocating_init(data:)(0, 0xC000000000000000);
      v24 = *(_QWORD *)(v0 + 72);
      v26 = *(_QWORD *)(v0 + 56);
      v25 = *(_QWORD *)(v0 + 64);
      swift_task_dealloc(*(_QWORD *)(v0 + 80));
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v23);
    }
  }
}

uint64_t sub_100015700()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[19];
  v2 = v0[20];
  swift_release(v0[16]);
  swift_release(v1);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10001574C, v0[14], v0[15]);
}

uint64_t sub_10001574C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000157AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 200);
  *(_QWORD *)(*(_QWORD *)v3 + 208) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = v6[14];
    v9 = v6[15];
    v10 = sub_1000159EC;
  }
  else
  {
    v6[27] = a2;
    v6[28] = a1;
    v6[29] = type metadata accessor for LazyData(0);
    v8 = v6[14];
    v9 = v6[15];
    v10 = sub_100015830;
  }
  return swift_task_switch(v10, v8, v9);
}

uint64_t sub_100015830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 96));
  v3 = LazyData.__allocating_init(data:)(v1, v2);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1000158AC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v3);
  v4 = v2[31];
  swift_release(v2[30]);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_100015A4C;
  else
    v5 = sub_100015924;
  return swift_task_switch(v5, v2[14], v2[15]);
}

uint64_t sub_100015924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 96));
  type metadata accessor for LazyData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  v6 = LazyData.__allocating_init(filename:isTempFile:)(v3, 1);
  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v1, v5);
  v7(v2, v5);
  v8 = *(_QWORD *)(v0 + 72);
  v10 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_1000159EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 96));
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v2, v3);
  v5(v1, v3);
  v6 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015AD0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for CommunicationActor(0);
  v2[6] = v3;
  v2[7] = static CommunicationActor.shared.getter(v3);
  v4 = sub_100018190(&qword_1000B1F78, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v2[8] = v4;
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, v4);
  v2[9] = v5;
  v2[10] = v6;
  return swift_task_switch(sub_100015B6C, v5, v6);
}

uint64_t sub_100015B6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 64);
    v4 = *(_QWORD *)(v1 + 40);
    v5 = static CommunicationActor.shared.getter(a1);
    *(_QWORD *)(v1 + 88) = v5;
    v6 = swift_task_alloc(32);
    *(_QWORD *)(v1 + 96) = v6;
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v2;
    v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v1 + 104) = v7;
    *v7 = v1;
    v7[1] = sub_100015C6C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 16, v5, v3, 0x2865766965636572, 0xEF293A7365747962, sub_100018460, v6, &type metadata for Data);
  }
  else
  {
    swift_release(*(_QWORD *)(v1 + 56));
    return (*(uint64_t (**)(_QWORD, unint64_t))(v1 + 8))(0, 0xC000000000000000);
  }
}

uint64_t sub_100015C6C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[9];
    v5 = v2[10];
    v6 = sub_100015D18;
  }
  else
  {
    v7 = v2[12];
    swift_release(v2[11]);
    swift_task_dealloc(v7);
    v4 = v2[9];
    v5 = v2[10];
    v6 = sub_100015CE0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100015CE0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100015D18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v8 = sub_10000629C(&qword_1000B25C0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v49 = v10;
  v50 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v48 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.network.getter(v12);
  v15 = swift_retain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(22, -1);
    v47 = a4;
    v20 = v19;
    v44 = swift_slowAlloc(32, -1);
    v52 = v44;
    *(_DWORD *)v20 = 136315394;
    v42 = v20 + 4;
    v21 = *(_QWORD *)(a2 + 16);
    v43 = v18;
    v22 = *(_QWORD *)(v21 + 16);
    swift_retain(a2);
    swift_retain(v22);
    v23 = sub_100017354();
    v45 = v11;
    v46 = v8;
    v24 = v9;
    v25 = a1;
    v26 = a3;
    v27 = v23;
    v29 = v28;
    swift_release(a2);
    swift_release(v22);
    v30 = v27;
    a3 = v26;
    a1 = v25;
    v9 = v24;
    v51 = sub_100021438(v30, v29, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v42, v20 + 12);
    swift_release_n(a2, 2);
    v31 = v29;
    v8 = v46;
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v20 + 12) = 2048;
    v51 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v20 + 14, v20 + 22);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v43, "[NWC] %s file download start: (%ld bytes)", (uint8_t *)v20, 0x16u);
    v32 = v44;
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    v33 = v20;
    a4 = v47;
    swift_slowDealloc(v33, -1, -1);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v45);
  }
  else
  {

    swift_release_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v11);
  }
  v34 = swift_allocObject(&unk_1000ADEA8, 17, 7);
  *(_BYTE *)(v34 + 16) = 0;
  v35 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  v36 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v50, a1, v8);
  v37 = *(unsigned __int8 *)(v9 + 80);
  v38 = (v37 + 32) & ~v37;
  v39 = swift_allocObject(&unk_1000ADED0, v38 + v49, v37 | 7);
  *(_QWORD *)(v39 + 16) = a2;
  *(_QWORD *)(v39 + 24) = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v39 + v38, v36, v8);
  swift_retain(a2);
  swift_retain(v35);
  swift_retain(v34);
  NWConnection.receiveFile(at:maximumLength:handler:)(a4, a3, sub_100018274, v39);
  swift_release(v34);
  swift_release(v39);
  return swift_release(v35);
}

uint64_t sub_1000160C0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  _QWORD v13[6];
  char v14;
  unsigned __int8 v15;

  v11 = a6 + 16;
  type metadata accessor for CommunicationActor(0);
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = v11;
  v13[5] = a7;
  v14 = a3;
  static CommunicationActor.assumeOnQueue<A>(_:)(sub_1000182E0, v13, &type metadata for Bool);
  return v15;
}

uint64_t sub_100016144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint8_t *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  void (*v55)(char *, uint64_t);
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _BYTE *v60;
  void (*v61)(uint64_t, uint8_t *, uint64_t);
  char v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  os_log_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  _BYTE v85[16];
  uint64_t v86[3];
  uint64_t v87;

  v82 = a6;
  v78 = a4;
  v79 = a3;
  v9 = type metadata accessor for Logger(0);
  v80 = *(_QWORD *)(v9 - 8);
  v81 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v83 = (char *)&v71 - v13;
  v14 = sub_10000629C(&qword_1000B25C8);
  __chkstk_darwin(v14);
  v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for NWError(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v71 - v22;
  sub_100018100(a1, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
    static Log.network.getter(v34);
    v35 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    v35(v21, v23, v17);
    v36 = swift_retain_n(a2, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter();
    v39 = v38;
    v40 = os_log_type_enabled(v37, v38);
    v77 = (uint8_t *)v23;
    if (v40)
    {
      v41 = swift_slowAlloc(22, -1);
      v75 = (uint64_t *)swift_slowAlloc(8, -1);
      v76 = swift_slowAlloc(32, -1);
      v86[0] = v76;
      *(_DWORD *)v41 = 136315394;
      v72 = v41 + 4;
      v42 = *(_QWORD *)(a2 + 16);
      v74 = v37;
      v43 = *(_QWORD *)(v42 + 16);
      swift_retain(a2);
      swift_retain(v43);
      v44 = sub_100017354();
      v73 = v39;
      v45 = v44;
      v46 = v35;
      v48 = v47;
      swift_release(a2);
      swift_release(v43);
      v84 = sub_100021438(v45, v48, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v72, v41 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v48);
      *(_WORD *)(v41 + 12) = 2112;
      v49 = sub_100018190(&qword_1000B20B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
      v50 = swift_allocError(v17, v49, 0, 0);
      v51 = (void (*)(uint64_t, uint8_t *, uint64_t))v46;
      v46(v52, v21, v17);
      v53 = _swift_stdlib_bridgeErrorToNSError(v50);
      v84 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v41 + 14, v41 + 22);
      v54 = v75;
      *v75 = v53;
      v55 = *(void (**)(char *, uint64_t))(v18 + 8);
      v55(v21, v17);
      v56 = v74;
      _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v73, "[NWC] %s file download error: %@", (uint8_t *)v41, 0x16u);
      v57 = sub_10000629C(&qword_1000B20C0);
      swift_arrayDestroy(v54, 1, v57);
      swift_slowDealloc(v54, -1, -1);
      v58 = v76;
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v41, -1, -1);

      (*(void (**)(char *, uint64_t))(v80 + 8))(v83, v81);
      v59 = v82;
      v60 = v79;
      v61 = v51;
    }
    else
    {
      swift_release_n(a2, 2);
      v55 = *(void (**)(char *, uint64_t))(v18 + 8);
      v55(v21, v17);

      (*(void (**)(char *, uint64_t))(v80 + 8))(v83, v81);
      v59 = v82;
      v60 = v79;
      v61 = (void (*)(uint64_t, uint8_t *, uint64_t))v35;
    }
    swift_beginAccess(v60, v86, 0, 0);
    if ((*v60 & 1) != 0)
    {
      v63 = v77;
    }
    else
    {
      swift_beginAccess(v60, &v84, 1, 0);
      *v60 = 1;
      v64 = sub_100018190(&qword_1000B20B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
      v65 = swift_allocError(v17, v64, 0, 0);
      v66 = v77;
      v61(v67, v77, v17);
      v87 = v65;
      v68 = sub_10000629C(&qword_1000B25C0);
      CheckedContinuation.resume(throwing:)(&v87, v68);
      v63 = v66;
    }
    result = ((uint64_t (*)(uint8_t *, uint64_t))v55)(v63, v17);
    goto LABEL_16;
  }
  result = sub_10000EA70((uint64_t)v16, &qword_1000B25C8);
  if ((a5 & 1) != 0)
  {
    static Log.network.getter(result);
    v25 = swift_retain_n(a2, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v83 = (char *)swift_slowAlloc(32, -1);
      v86[0] = (uint64_t)v83;
      *(_DWORD *)v28 = 136315138;
      v77 = v28 + 4;
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
      swift_retain(a2);
      swift_retain(v29);
      v30 = sub_100017354();
      v32 = v31;
      swift_release(a2);
      swift_release(v29);
      v84 = sub_100021438(v30, v32, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v77, v28 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[NWC] %s file download done", v28, 0xCu);
      v33 = v83;
      swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      swift_release_n(a2, 2);
    }
    (*(void (**)(char *, uint64_t))(v80 + 8))(v12, v81);
    v69 = v79;
    result = swift_beginAccess(v79, v86, 0, 0);
    v59 = v82;
    if ((*v69 & 1) == 0)
    {
      swift_beginAccess(v69, &v84, 1, 0);
      *v69 = 1;
      v70 = sub_10000629C(&qword_1000B25C0);
      result = CheckedContinuation.resume(returning:)(v70, v70);
    }
LABEL_16:
    v62 = 0;
    goto LABEL_17;
  }
  v62 = 1;
  v59 = v82;
LABEL_17:
  *v59 = v62;
  return result;
}

uint64_t sub_10001680C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = sub_10000629C(&qword_1000B2610);
  v6 = *(_QWORD *)(v43 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v43);
  v42 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v41 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.network.getter(v9);
  v12 = swift_retain_n(a2, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v38 = v7;
    v16 = v15;
    v17 = swift_slowAlloc(32, -1);
    v40 = a3;
    v18 = v17;
    v45 = v17;
    *(_DWORD *)v16 = 136315394;
    v36 = v16 + 4;
    v19 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
    swift_retain(a2);
    swift_retain(v19);
    v20 = sub_100017354();
    v37 = v8;
    v21 = v20;
    v39 = a1;
    v23 = v22;
    swift_release(a2);
    swift_release(v19);
    v44 = sub_100021438(v21, v23, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v36, v16 + 12);
    swift_release_n(a2, 2);
    v24 = v23;
    a1 = v39;
    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v16 + 12) = 2048;
    v44 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v16 + 14, v16 + 22);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[NWC] %s receive start: (%ld bytes)", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v25 = v18;
    a3 = v40;
    swift_slowDealloc(v25, -1, -1);
    v26 = v16;
    v7 = v38;
    swift_slowDealloc(v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v37);
  }
  else
  {

    swift_release_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v8);
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)(v27 + 16);
  v30 = v42;
  v29 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v42, a1, v43);
  v31 = *(unsigned __int8 *)(v6 + 80);
  v32 = (v31 + 24) & ~v31;
  v33 = (v7 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = swift_allocObject(&unk_1000ADEF8, v33 + 8, v31 | 7);
  *(_QWORD *)(v34 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v34 + v32, v30, v29);
  *(_QWORD *)(v34 + v33) = v27;
  swift_retain(a2);
  swift_retain(v28);
  swift_retain(v27);
  NWConnection.receive(minimumIncompleteLength:maximumLength:completion:)(a3, a3, sub_100018394, v34);
  swift_release(v34);
  return swift_release(v28);
}

uint64_t sub_100016B40(void (*a1)(char *, char *, uint64_t), unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  void (*v61)(char *, uint64_t);
  os_log_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  os_log_t v86;
  uint64_t *v87;
  uint8_t *v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95[2];
  uint64_t v96;
  uint64_t v97;

  v89 = a8;
  v90 = a1;
  v92 = a7;
  v11 = type metadata accessor for Logger(0);
  v93 = *(_QWORD *)(v11 - 8);
  v94 = v11;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v86 - v16;
  __chkstk_darwin(v15);
  v91 = (char *)&v86 - v18;
  v19 = sub_10000629C(&qword_1000B25C8);
  __chkstk_darwin(v19);
  v21 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for NWError(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v86 - v27;
  sub_100018100(a5, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    v29 = v14;
    v30 = (uint64_t)v90;
    v31 = sub_10000EA70((uint64_t)v21, &qword_1000B25C8);
    if (a2 >> 60 == 15)
    {
      static Log.network.getter(v31);
      v32 = a6;
      v33 = swift_retain_n(a6, 2);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        v95[0] = v37;
        *(_DWORD *)v36 = 136315138;
        v91 = (char *)(v36 + 4);
        v38 = *(_QWORD *)(*(_QWORD *)(v32 + 16) + 16);
        swift_retain(v32);
        swift_retain(v38);
        v39 = sub_100017354();
        v41 = v40;
        swift_release(v32);
        swift_release(v38);
        v96 = sub_100021438(v39, v41, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v91, v36 + 12);
        swift_release_n(v32, 2);
        swift_bridgeObjectRelease(v41);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "[NWC] %s receive didn't receive data, connection is finished. Closing.", v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);

      }
      else
      {

        swift_release_n(v32, 2);
      }
      (*(void (**)(char *, uint64_t))(v93 + 8))(v17, v94);
      sub_100012534();
      v81 = sub_10001841C();
      v82 = swift_allocError(&type metadata for NetworkError, v81, 0, 0);
      *v83 = 0;
      v95[0] = v82;
      v84 = sub_10000629C(&qword_1000B2610);
      return CheckedContinuation.resume(throwing:)(v95, v84);
    }
    else
    {
      v65 = sub_100017F9C(v30, a2);
      static Log.network.getter(v65);
      v66 = swift_retain_n(a6, 2);
      v67 = Logger.logObject.getter(v66);
      v68 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v67, v68))
      {
        v69 = swift_slowAlloc(12, -1);
        v91 = v29;
        v70 = (uint8_t *)v69;
        v89 = swift_slowAlloc(32, -1);
        v95[0] = v89;
        *(_DWORD *)v70 = 136315138;
        v88 = v70 + 4;
        v71 = *(_QWORD *)(*(_QWORD *)(a6 + 16) + 16);
        swift_retain(a6);
        swift_retain(v71);
        v72 = sub_100017354();
        v74 = v73;
        swift_release(a6);
        swift_release(v71);
        v96 = sub_100021438(v72, v74, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v88, v70 + 12);
        swift_release_n(a6, 2);
        swift_bridgeObjectRelease(v74);
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "[NWC] %s receive done", v70, 0xCu);
        v75 = v89;
        swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v70, -1, -1);

        (*(void (**)(char *, uint64_t))(v93 + 8))(v91, v94);
      }
      else
      {

        swift_release_n(a6, 2);
        (*(void (**)(char *, uint64_t))(v93 + 8))(v29, v94);
      }
      v95[0] = v30;
      v95[1] = a2;
      v85 = sub_10000629C(&qword_1000B2610);
      return CheckedContinuation.resume(returning:)(v95, v85);
    }
  }
  else
  {
    v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v28, v21, v22);
    static Log.network.getter(v42);
    v43 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
    v43(v26, v28, v22);
    v44 = swift_retain_n(a6, 2);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.debug.getter();
    v47 = v46;
    v48 = a6;
    if (os_log_type_enabled(v45, v46))
    {
      v49 = swift_slowAlloc(22, -1);
      LODWORD(v88) = v47;
      v50 = v49;
      v87 = (uint64_t *)swift_slowAlloc(8, -1);
      v89 = swift_slowAlloc(32, -1);
      v95[0] = v89;
      *(_DWORD *)v50 = 136315394;
      v90 = v43;
      v51 = *(_QWORD *)(a6 + 16);
      v86 = v45;
      v52 = *(_QWORD *)(v51 + 16);
      swift_retain(a6);
      swift_retain(v52);
      v53 = sub_100017354();
      v55 = v54;
      swift_release(v48);
      swift_release(v52);
      v96 = sub_100021438(v53, v55, v95);
      v43 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v50 + 4, v50 + 12);
      swift_release_n(v48, 2);
      swift_bridgeObjectRelease(v55);
      *(_WORD *)(v50 + 12) = 2112;
      v56 = sub_100018190(&qword_1000B20B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
      v57 = swift_allocError(v22, v56, 0, 0);
      v43(v58, v26, v22);
      v59 = _swift_stdlib_bridgeErrorToNSError(v57);
      v96 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v50 + 14, v50 + 22);
      v60 = v87;
      *v87 = v59;
      v61 = *(void (**)(char *, uint64_t))(v23 + 8);
      v61(v26, v22);
      v62 = v86;
      _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v88, "[NWC] %s receive read error: %@", (uint8_t *)v50, 0x16u);
      v63 = sub_10000629C(&qword_1000B20C0);
      swift_arrayDestroy(v60, 1, v63);
      swift_slowDealloc(v60, -1, -1);
      v64 = v89;
      swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v50, -1, -1);

    }
    else
    {
      swift_release_n(a6, 2);
      v61 = *(void (**)(char *, uint64_t))(v23 + 8);
      v61(v26, v22);

    }
    (*(void (**)(char *, uint64_t))(v93 + 8))(v91, v94);
    v76 = sub_100018190(&qword_1000B20B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
    v77 = swift_allocError(v22, v76, 0, 0);
    v43(v78, v28, v22);
    v95[0] = v77;
    v79 = sub_10000629C(&qword_1000B2610);
    CheckedContinuation.resume(throwing:)(v95, v79);
    return ((uint64_t (*)(char *, uint64_t))v61)(v28, v22);
  }
}

uint64_t sub_100017354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  Swift::String v9;
  _QWORD v11[2];
  _QWORD v12[2];

  v0 = type metadata accessor for NWConnection.State(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  v4._countAndFlagsBits = 67;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v11[1] = NWConnection.identifier.getter(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 40;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  NWConnection.state.getter();
  _print_unlocked<A, B>(_:_:)(v3, v12, v0, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return v12[0];
}

uint64_t sub_10001746C()
{
  return sub_100017354();
}

uint64_t sub_100017490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 16) + 16);
  swift_retain(v1);
  v2 = sub_100017354();
  swift_release(v1);
  return v2;
}

Swift::Int sub_1000174E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt64 v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  v3 = swift_retain(v2);
  v4 = NWConnection.identifier.getter(v3);
  swift_release(v2);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void sub_100017544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt64 v3;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 16) + 16);
  v2 = swift_retain(v1);
  v3 = NWConnection.identifier.getter(v2);
  swift_release(v1);
  Hasher._combine(_:)(v3);
}

Swift::Int sub_100017598(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt64 v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
  v4 = swift_retain(v3);
  v5 = NWConnection.identifier.getter(v4);
  swift_release(v3);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

BOOL sub_1000175F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16);
  v4 = swift_retain(v3);
  v5 = NWConnection.identifier.getter(v4);
  swift_release(v3);
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
  v7 = swift_retain(v6);
  v8 = NWConnection.identifier.getter(v7);
  swift_release(v6);
  return v5 == v8;
}

uint64_t sub_100017668(uint64_t a1, uint64_t a2)
{
  return sub_100018190(&qword_1000B2578, a2, (uint64_t (*)(uint64_t))type metadata accessor for NetworkConnection, (uint64_t)&unk_100096494);
}

uint64_t sub_100017694(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1000913B0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000177E4(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;
  char v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_1000914BC(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = sub_10000629C(&qword_1000B28E0);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy(v15);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001795C(uint64_t a1)
{
  return sub_100017B00(a1, (uint64_t (*)(void))sub_1000915D8, &qword_1000B25D8);
}

uint64_t sub_100017970(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;
  char v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_1000917F8(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for UUID(0);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy(v14);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v25 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v25, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100017AD8(uint64_t a1)
{
  return sub_100017B00(a1, (uint64_t (*)(void))sub_100091A00, &qword_1000B25E0);
}

uint64_t sub_100017AEC(uint64_t a1)
{
  return sub_100017B00(a1, (uint64_t (*)(void))sub_100091A14, &qword_1000B25E8);
}

uint64_t sub_100017B00(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  char v26;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3) && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = sub_10000629C(a3);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy(v16);
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100017C78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  Swift::String v7;
  void *object;
  unint64_t v9;
  Swift::String v10;
  unint64_t v11;
  int v12;
  Swift::String v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  Swift::String v26;
  void *v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;

  v2 = type metadata accessor for Message.Operation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (_DWORD *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(_DWORD *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Message.Operation.event(_:))
  {
    (*(void (**)(_DWORD *, uint64_t))(v3 + 96))(v5, v2);
    LODWORD(v33) = *v5;
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
    object = v7._object;
    v33 = 0x28746E657665;
    v34 = 0xE600000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    v9 = v34;
    swift_bridgeObjectRetain(v34);
    v10._countAndFlagsBits = 41;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11 = v9;
LABEL_5:
    swift_bridgeObjectRelease(v11);
    return v33;
  }
  if (v6 == enum case for Message.Operation.request(_:))
  {
    (*(void (**)(_DWORD *, uint64_t))(v3 + 96))(v5, v2);
    v12 = v5[1];
    LODWORD(v33) = *v5;
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
    v14 = v13._object;
    v33 = 0x2874736575716572;
    v34 = 0xE800000000000000;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v14);
    v16 = v33;
    v15 = v34;
    v33 = 8236;
    v34 = 0xE200000000000000;
    v32 = v12;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
    v18 = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v18);
    v19._countAndFlagsBits = 41;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20 = v33;
    v21 = (void *)v34;
    v33 = v16;
    v34 = v15;
    swift_bridgeObjectRetain(v15);
    v22._countAndFlagsBits = v20;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v15);
    v11 = (unint64_t)v21;
    goto LABEL_5;
  }
  if (v6 == enum case for Message.Operation.response(_:))
  {
    (*(void (**)(_DWORD *, uint64_t))(v3 + 96))(v5, v2);
    v23 = *v5;
    v24 = 0x65736E6F70736572;
    v25 = 0xE900000000000028;
  }
  else
  {
    if (v6 != enum case for Message.Operation.error(_:))
    {
      v33 = 0;
      v34 = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)(a1, &v33, v2, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v29 = v33;
      (*(void (**)(_DWORD *, uint64_t))(v3 + 8))(v5, v2);
      return v29;
    }
    (*(void (**)(_DWORD *, uint64_t))(v3 + 96))(v5, v2);
    v23 = *v5;
    v24 = 0x28726F727265;
    v25 = 0xE600000000000000;
  }
  v33 = v24;
  v34 = v25;
  v32 = v23;
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
  v27 = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v27);
  v28._countAndFlagsBits = 41;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  return v33;
}

uint64_t sub_100017F84(uint64_t a1)
{
  uint64_t v1;

  return sub_100012AC8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100017F9C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100017FE0()
{
  unint64_t result;

  result = qword_1000B25B8;
  if (!qword_1000B25B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_1000B25B8);
  }
  return result;
}

uint64_t sub_100018024(uint64_t a1)
{
  uint64_t v1;

  return sub_100014894(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

uint64_t sub_100018038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000629C(&qword_1000B25C0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000180B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000629C(&qword_1000B25C0) - 8) + 80);
  return sub_100014A8C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_100018100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000629C(&qword_1000B25C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(v1);
  return FileHeaderProto.filename.setter(v2, v1);
}

uint64_t sub_100018190(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000181D0(uint64_t a1)
{
  uint64_t v1;

  return sub_10001680C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000181D8(uint64_t a1)
{
  uint64_t *v1;

  return sub_100015D60(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000181E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000181F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000629C(&qword_1000B25C0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100018274(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000629C(&qword_1000B25C0) - 8) + 80);
  return sub_1000160C0(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v4 + ((v9 + 32) & ~v9));
}

uint64_t sub_1000182E0@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_100016144(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48), a1);
}

uint64_t sub_100018300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10000629C(&qword_1000B2610);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100018394(void (*a1)(char *, char *, uint64_t), unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;

  v11 = *(_QWORD *)(sub_10000629C(&qword_1000B2610) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  return sub_100016B40(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16), v5 + v12, *(_QWORD *)(v5 + ((*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_10001841C()
{
  unint64_t result;

  result = qword_1000B2618;
  if (!qword_1000B2618)
  {
    result = swift_getWitnessTable(&unk_100096634, &type metadata for NetworkError);
    atomic_store(result, (unint64_t *)&qword_1000B2618);
  }
  return result;
}

void *NetworkConstants.applicationService.unsafeMutableAddressor()
{
  return &static NetworkConstants.applicationService;
}

const char *NetworkConstants.terminusAdvertisingType.unsafeMutableAddressor()
{
  return "ASListener";
}

const char *NetworkConstants.terminusBrowserType.unsafeMutableAddressor()
{
  return "ASResolver";
}

void *NetworkConstants.maximumConnections.unsafeMutableAddressor()
{
  return &static NetworkConstants.maximumConnections;
}

void *NetworkConstants.assertion.unsafeMutableAddressor()
{
  return &static NetworkConstants.assertion;
}

void *NetworkConstants.maximumSendBufferSize.unsafeMutableAddressor()
{
  return &static NetworkConstants.maximumSendBufferSize;
}

void *NetworkConstants.maxSizeForInMemoryData.unsafeMutableAddressor()
{
  return &static NetworkConstants.maxSizeForInMemoryData;
}

void *NetworkConstants.terminusDomain.unsafeMutableAddressor()
{
  return &static NetworkConstants.terminusDomain;
}

unint64_t static NetworkConstants.terminusDomain.getter()
{
  return 0xD000000000000016;
}

uint64_t static NetworkConstants.terminusAdvertisingType.getter()
{
  return 0x6E657473694C5341;
}

uint64_t static NetworkConstants.terminusBrowserType.getter()
{
  return 0x766C6F7365525341;
}

unint64_t static NetworkConstants.assertion.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static NetworkConstants.applicationService.getter()
{
  return 0xD000000000000024;
}

uint64_t static NetworkConstants.maximumConnections.getter()
{
  return 20;
}

uint64_t static NetworkConstants.maximumSendBufferSize.getter()
{
  return 0x100000;
}

uint64_t static NetworkConstants.maxSizeForInMemoryData.getter()
{
  return 0x4000;
}

uint64_t _s11photosfaced16NetworkConstantsO10parameters6domain4type0B012NWParametersCSS_SStFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  double v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v8 = type metadata accessor for Logger(0);
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NWParameters.MultipathServiceType(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NWParameters(0);
  v15 = static NWParameters.applicationServiceQUIC(identity:)(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for NWParameters.MultipathServiceType.disabled(_:), v11);
  NWParameters.multipathServiceType.setter(v14);
  NWParameters.acceptLocalOnly.setter(0);
  v16 = NWParameters.includePeerToPeer.setter(1);
  v17 = NWParameters.nw.getter(v16);
  nw_parameters_set_account_id(v17, "com.apple.network.local-asquic");
  v18 = swift_unknownObjectRelease(v17);
  v19 = NWParameters.nw.getter(v18);
  nw_parameters_set_attach_protocol_listener(v19, 1);
  swift_unknownObjectRelease(v19);
  v20 = sub_10000629C(&qword_1000B2620);
  v21 = swift_allocObject(v20, 64, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100096430;
  *(_QWORD *)(v21 + 32) = a1;
  *(_QWORD *)(v21 + 40) = a2;
  *(_QWORD *)(v21 + 48) = a3;
  *(_QWORD *)(v21 + 56) = a4;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v22 = NWParameters.preferredNetworkAgents.setter(v21);
  v23 = static TestProperties.quicTimeout.getter(v22);
  if ((v24 & 1) != 0)
    return v15;
  v25 = *(double *)&v23;
  v26 = static Log.network.getter(v23);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v29 = 134217984;
    v54 = *(_QWORD *)&v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v29 + 4, v29 + 12);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Using a timeout of %f", v29, 0xCu);
    swift_slowDealloc(v29, -1, -1);
  }

  v30 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v10, v53);
  v31 = NWParameters.defaultProtocolStack.getter(v30);
  v32 = dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.getter();
  swift_release(v31);
  v54 = (uint64_t)&_swiftEmptyArrayStorage;
  if ((unint64_t)v32 >> 62)
  {
    if (v32 < 0)
      v44 = v32;
    else
      v44 = v32 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v32);
    result = _CocoaArrayWrapper.endIndex.getter(v44);
    v33 = result;
    if (result)
      goto LABEL_6;
LABEL_22:
    swift_bridgeObjectRelease(v32);
    v43 = (uint64_t)&_swiftEmptyArrayStorage;
    goto LABEL_23;
  }
  v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v32);
  if (!v33)
    goto LABEL_22;
LABEL_6:
  if (v33 < 1)
  {
    __break(1u);
    goto LABEL_41;
  }
  for (i = 0; i != v33; ++i)
  {
    if ((v32 & 0xC000000000000001) != 0)
    {
      v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v32);
    }
    else
    {
      v36 = *(_QWORD *)(v32 + 8 * i + 32);
      swift_retain(v36);
    }
    v37 = type metadata accessor for NWProtocolQUIC.Options(0);
    v38 = swift_dynamicCastClass(v36, v37);
    if (v38)
    {
      v39 = v38;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v41 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v40 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v41 >= v40 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
      v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v39);
      specialized Array._endMutation()(v42);
    }
    else
    {
      swift_release(v36);
    }
  }
  swift_bridgeObjectRelease(v32);
  v43 = v54;
LABEL_23:
  swift_bridgeObjectRelease(v32);
  if (!((unint64_t)v43 >> 62))
  {
    v45 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v43);
    if (v45)
      goto LABEL_25;
LABEL_38:
    swift_bridgeObjectRelease_n(v43, 2);
    return v15;
  }
  if (v43 < 0)
    v50 = v43;
  else
    v50 = v43 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v43);
  result = _CocoaArrayWrapper.endIndex.getter(v50);
  v45 = result;
  if (!result)
    goto LABEL_38;
LABEL_25:
  v46 = v25 * 1000.0;
  if ((~COERCE__INT64(v25 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v46 <= -9.22337204e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v46 >= 9.22337204e18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v45 >= 1)
  {
    v47 = 0;
    v48 = (uint64_t)v46;
    do
    {
      if ((v43 & 0xC000000000000001) != 0)
      {
        v49 = specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v43);
      }
      else
      {
        v49 = *(_QWORD *)(v43 + 8 * v47 + 32);
        swift_retain(v49);
      }
      ++v47;
      dispatch thunk of NWProtocolQUIC.Options.idleTimeout.setter(v48);
      swift_release(v49);
    }
    while (v45 != v47);
    goto LABEL_38;
  }
LABEL_44:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for NetworkConstants()
{
  return &type metadata for NetworkConstants;
}

uint64_t getEnumTagSinglePayload for NetworkError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100018AF4 + 4 * byte_1000965B9[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100018B28 + 4 * asc_1000965B4[v4]))();
}

uint64_t sub_100018B28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100018B30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100018B38);
  return result;
}

uint64_t sub_100018B44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100018B4CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100018B50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100018B58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NetworkError()
{
  return &type metadata for NetworkError;
}

unint64_t sub_100018B78()
{
  unint64_t result;

  result = qword_1000B2628[0];
  if (!qword_1000B2628[0])
  {
    result = swift_getWitnessTable(&unk_10009660C, &type metadata for NetworkError);
    atomic_store(result, qword_1000B2628);
  }
  return result;
}

Swift::Int sub_100018BBC()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100018C00()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100018C28(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100018C7C(uint64_t a1)
{
  _QWORD v2[7];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[4] = &unk_1000966D8;
  v2[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0, 7, v2, a1 + 144);
}

_QWORD *sub_100018CE0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  return v0;
}

uint64_t sub_100018D24()
{
  uint64_t v0;

  sub_100018CE0();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for NetworkMessageCenter(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for NetworkMessageCenter);
}

uint64_t sub_100018D50(uint64_t a1)
{
  _BYTE v2[24];

  swift_beginAccess(a1 + 16, v2, 33, 0);
  sub_100022AF4();
  return swift_endAccess(v2);
}

uint64_t sub_100018D94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = a4;
  *(_DWORD *)(v4 + 184) = a3;
  *(_QWORD *)(v4 + 32) = a1;
  v5 = type metadata accessor for ProtocolVersion(0);
  *(_QWORD *)(v4 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MessageBody(0);
  *(_QWORD *)(v4 + 64) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 72) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 80) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 88) = swift_task_alloc(v8);
  v9 = type metadata accessor for Message.Operation(0);
  *(_QWORD *)(v4 + 96) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 104) = v10;
  *(_QWORD *)(v4 + 112) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Message(0);
  *(_QWORD *)(v4 + 120) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v4 + 128) = v12;
  *(_QWORD *)(v4 + 136) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v4 + 144) = static CommunicationActor.shared.getter(v13);
  v14 = sub_100006384();
  v15 = dispatch thunk of Actor.unownedExecutor.getter(v13, v14);
  *(_QWORD *)(v4 + 152) = v15;
  *(_QWORD *)(v4 + 160) = v16;
  return swift_task_switch(sub_100018EB0, v15, v16);
}

uint64_t sub_100018EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD);

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  **(_DWORD **)(v0 + 112) = *(_DWORD *)(v0 + 184);
  v6 = (*(uint64_t (**)(void))(v1 + 104))();
  *(_QWORD *)(v0 + 16) = 0xD000000000000019;
  *(_QWORD *)(v0 + 24) = 0x8000000100094730;
  v7 = Message.content.getter(v6);
  MessageBody.version.getter(v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  MessageBody.init<A>(serializable:version:)(v0 + 16, v5, &type metadata for String, &protocol witness table for String);
  v8 = *(int **)(v0 + 32);
  Message.init(operation:content:complete:)(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 88), 1);
  v11 = (uint64_t (*)(_QWORD))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  *(_QWORD *)(v0 + 168) = v9;
  *v9 = v0;
  v9[1] = sub_10001904C;
  return v11(*(_QWORD *)(v0 + 136));
}

uint64_t sub_10001904C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[16] + 8))(v2[17], v2[15]);
  if (v0)
    v4 = sub_100019134;
  else
    v4 = sub_1000190BC;
  return swift_task_switch(v4, v2[19], v2[20]);
}

uint64_t sub_1000190BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100019134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 144));
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000191AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint8_t *v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  os_log_t v24;
  uint8_t *v25;
  uint64_t v26;
  __objc2_prot_list **p_base_prots;
  id v28;
  void *v29;
  id v30;
  id v31;
  Class isa;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  uint8_t *v40;
  uint8_t *v41;
  uint64_t v42;
  os_log_t v43;
  int v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + 24))
  {
    v10 = *(id *)(v0 + 16);
LABEL_9:
    v38 = v10;
    return v10;
  }
  v11 = objc_msgSend((id)objc_opt_self(PDRRegistry), "sharedInstance");
  v12 = objc_msgSend(v11, "getActivePairedDeviceExcludingAltAccount");

  if (v12)
  {
    static Log.default.getter(v13);
    v45 = v12;
    v14 = Logger.logObject.getter(v45);
    v15 = static os_log_type_t.default.getter();
    v44 = v15;
    if (os_log_type_enabled(v14, v15))
    {
      v43 = v14;
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      v47 = v42;
      *(_DWORD *)v16 = 136315138;
      v17 = v16 + 12;
      v40 = v16 + 4;
      v41 = v16;
      v18 = objc_msgSend(v45, "bluetoothIdentifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v19 = sub_10001A8F0();
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v2, v19);
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v46 = sub_100021438(v20, v22, &v47);
      v23 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v40, v17);

      swift_bridgeObjectRelease(v22);
      v24 = v43;
      v25 = v41;
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v44, "Found ID: %s", v41, 0xCu);
      v26 = v42;
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      p_base_prots = (__objc2_prot_list **)(&Analytics + 40);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    else
    {

      v28 = v45;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      p_base_prots = &Analytics.base_prots;
    }
    v29 = (void *)objc_opt_self(NRDeviceIdentifier);
    v30 = v45;
    v31 = objc_msgSend(v45, (SEL)p_base_prots[304]);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v33 = objc_msgSend(v29, "newDeviceIdentifierWithBluetoothUUID:", isa);

    v34 = *(void **)(v1 + 16);
    type metadata accessor for CommunicationActor(0);
    v10 = v34;
    v35 = (void *)static CommunicationActor.sharedQueue.getter();
    v36 = objc_msgSend(objc_allocWithZone((Class)NRDeviceMonitor), "initWithDeviceIdentifier:delegate:queue:", v33, v10, v35);

    v37 = *(void **)(v1 + 24);
    *(_QWORD *)(v1 + 24) = v36;

    goto LABEL_9;
  }
  return 0;
}

uint64_t sub_100019550()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for NetworkMonitor()
{
  return objc_opt_self(_TtC11photosfaced14NetworkMonitor);
}

uint64_t sub_10001982C(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t, uint64_t);
  char v17;
  uint64_t v19;
  _BYTE v20[24];
  char v21;

  v7 = sub_10000629C(&qword_1000B28E0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = (uint64_t *)(a1 + *a3);
  swift_beginAccess(v11, v20, 33, 0);
  if ((v11[1] & 1) != 0)
  {
    v12 = *v11;
    *v11 = a2 & 1;
    *((_BYTE *)v11 + 8) = 0;
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v19 = v3;
      v14 = v12 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      v15 = *(_QWORD *)(v8 + 72);
      v16 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
      v17 = a2 & 1;
      do
      {
        v16(v10, v14, v7);
        v21 = v17;
        CheckedContinuation.resume(returning:)(&v21, v7);
        (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
        v14 += v15;
        --v13;
      }
      while (v13);
    }
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    *v11 = a2 & 1;
    *((_BYTE *)v11 + 8) = 0;
  }
  return swift_endAccess(v20);
}

id sub_1000199FC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceMonitor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceMonitor()
{
  return objc_opt_self(_TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor);
}

uint64_t sub_100019AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_100019AE8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v4);
    return 0;
  }
  return result;
}

uint64_t *sub_100019B5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain(v8);
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 1)
    {
      v11 = *a2;
      *v3 = *a2;
      *((_BYTE *)v3 + v5) = 1;
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  return v3;
}

uint64_t sub_100019C74(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return swift_bridgeObjectRelease(*a1);
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_100019CBC + 4 * byte_100096765[v5]))();
  }
}

uint64_t *sub_100019D14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v8);
    v9 = 1;
  }
  else
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    v9 = 0;
  }
  *((_BYTE *)a1 + v5) = v9;
  return a1;
}

uint64_t *sub_100019DEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_bridgeObjectRelease(*a1);
    else
      (*(void (**)(uint64_t *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      v12 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v7) = 1;
      swift_bridgeObjectRetain(v12);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_QWORD *sub_100019F7C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_QWORD *sub_10001A050(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_bridgeObjectRelease(*a1);
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_10001A1DC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10001A2A0 + 4 * byte_100096788[(v4 - 1)]))();
}

void sub_10001A2EC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = &dword_100000004;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_10001A494(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_10001A4DC + 4 * byte_100096796[v3]))();
}

void sub_10001A524(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for WaitingDeviceProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A938(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WaitingDeviceProperty);
}

uint64_t sub_10001A5F8(char a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[2];

  v8 = v4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static Log.default.getter(v12);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(18, -1);
    v25 = a2;
    v19 = a3;
    v20 = v18;
    v21 = swift_slowAlloc(32, -1);
    v27 = v10;
    v22 = v21;
    v29[0] = v21;
    *(_DWORD *)v20 = 136315394;
    v26 = v11;
    v28 = sub_100021438(v25, v19, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 1024;
    LODWORD(v28) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, (char *)&v28 + 4, v20 + 14, v20 + 18);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: %{BOOL}d", (uint8_t *)v20, 0x12u);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  v23 = type metadata accessor for CommunicationActor(0);
  __chkstk_darwin(v23);
  *(&v25 - 2) = v8;
  *((_BYTE *)&v25 - 8) = a1 & 1;
  return static CommunicationActor.assumeOnQueue<A>(_:)(a4, &v25 - 4, (char *)&type metadata for () + 8);
}

uint64_t sub_10001A830()
{
  uint64_t v0;

  return sub_10001982C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), &OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_pluggedIn);
}

uint64_t sub_10001A854()
{
  uint64_t v0;

  return sub_10001982C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), &OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_classCConnected);
}

uint64_t sub_10001A878()
{
  uint64_t v0;

  return sub_10001982C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), &OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_asleep);
}

uint64_t sub_10001A89C()
{
  uint64_t v0;

  return sub_10001982C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), &OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_connected);
}

uint64_t sub_10001A8C0()
{
  uint64_t v0;

  return sub_10001982C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), &OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_nearby);
}

uint64_t sub_10001A8E4(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

unint64_t sub_10001A8F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B28E8;
  if (!qword_1000B28E8)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1000B28E8);
  }
  return result;
}

uint64_t sub_10001A938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

char *sub_10001A964(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  Class v40;
  void *v41;
  char *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  os_log_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  unint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  id v86;
  char *v87;
  __int128 v88;
  os_log_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v90 = a2;
  v3 = type metadata accessor for AlbumID(0);
  v95 = *(_QWORD *)(v3 - 8);
  v96 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v86 - v7;
  v9 = type metadata accessor for Logger(0);
  v92 = *(_QWORD *)(v9 - 8);
  v93 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v94 = (char *)&v86 - v13;
  v14 = sub_10000629C(&qword_1000B2A18);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (void *)objc_opt_self(PHAssetCollection);
  v19 = sub_10000629C(&qword_1000B2A20);
  v20 = swift_allocObject(v19, 48, 7);
  v88 = xmmword_100096430;
  *(_OWORD *)(v20 + 16) = xmmword_100096430;
  v91 = a1;
  *(_QWORD *)(v20 + 32) = AlbumID.album.getter();
  *(_QWORD *)(v20 + 40) = v21;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  v23 = objc_msgSend(v18, "fetchAssetCollectionsWithLocalIdentifiers:options:", isa, 0);

  v24 = objc_msgSend(v23, "firstObject");
  if (v24)
  {
    v26 = objc_allocWithZone((Class)PHFetchOptions);
    v27 = v24;
    v87 = v8;
    v28 = v27;
    v29 = objc_msgSend(v26, "init");
    sub_10001B334(0, &qword_1000B2A38, NSPredicate_ptr);
    v30 = sub_10000629C(&qword_1000B2A40);
    v31 = swift_allocObject(v30, 72, 7);
    *(_OWORD *)(v31 + 16) = v88;
    *(_QWORD *)(v31 + 56) = &type metadata for Int;
    *(_QWORD *)(v31 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v31 + 32) = 1;
    v32 = (void *)NSPredicate.init(format:_:)(0x707954616964656DLL, 0xEF646C25203D2065, v31);
    objc_msgSend(v29, "setPredicate:", v32);

    v33 = sub_10000629C(&qword_1000B2A48);
    v34 = swift_allocObject(v33, 40, 7);
    *(_OWORD *)(v34 + 16) = xmmword_100096810;
    v35 = objc_allocWithZone((Class)NSSortDescriptor);
    v36 = String._bridgeToObjectiveC()();
    v37 = objc_msgSend(v35, "initWithKey:ascending:", v36, 1);

    *(_QWORD *)(v34 + 32) = v37;
    v99 = v34;
    specialized Array._endMutation()(v38);
    v39 = v99;
    sub_10001B334(0, &qword_1000B2A50, NSSortDescriptor_ptr);
    v40 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v39);
    objc_msgSend(v29, "setSortDescriptors:", v40);

    objc_msgSend(v29, "setIncludeHiddenAssets:", 1);
    v41 = (void *)objc_opt_self(PHAsset);
    *(_QWORD *)&v88 = v28;
    v42 = v87;
    v86 = v29;
    v43 = objc_msgSend(v41, "fetchAssetsInAssetCollection:options:", v28, v29);
    PHFetchResult<>.collection.getter();
    v6 = (char *)sub_10001CA24((uint64_t)v17, (uint64_t)v89[2].isa, v90);
    v44 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    static Log.album.getter(v44);
    v46 = v95;
    v45 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v42, v91, v96);
    swift_bridgeObjectRetain_n(v6, 4);
    v47 = v43;
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.default.getter();
    v50 = v49;
    if (os_log_type_enabled(v48, v49))
    {
      v51 = swift_slowAlloc(42, -1);
      LODWORD(v90) = v50;
      v52 = v51;
      v91 = swift_slowAlloc(96, -1);
      v99 = v91;
      *(_DWORD *)v52 = 136315906;
      v53 = sub_10001B2F4(&qword_1000B2A30, (uint64_t)&protocol conformance descriptor for AlbumID);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v45, v53);
      v89 = v48;
      v56 = v55;
      v97 = sub_100021438(v54, v55, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease(v56);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v45);
      *(_WORD *)(v52 + 12) = 2080;
      v57 = sub_10001B36C((uint64_t)v6);
      v58 = Dictionary.description.getter(v57, &type metadata for Int, &type metadata for Int, &protocol witness table for Int);
      v60 = v59;
      swift_release(v57);
      v97 = sub_100021438(v58, v60, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v52 + 14, v52 + 22);
      swift_bridgeObjectRelease_n(v6, 2);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v52 + 22) = 2048;
      v61 = objc_msgSend(v47, "count");

      v97 = (uint64_t)v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v52 + 24, v52 + 32);

      *(_WORD *)(v52 + 32) = 2080;
      swift_bridgeObjectRetain(v6);
      v62 = sub_10000629C(&qword_1000B2A58);
      v63 = Dictionary.description.getter(v6, &type metadata for Int, v62, &protocol witness table for Int);
      v65 = v64;
      swift_bridgeObjectRelease(v6);
      v97 = sub_100021438(v63, v65, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v52 + 34, v52 + 42);
      swift_bridgeObjectRelease_n(v6, 2);
      swift_bridgeObjectRelease(v65);
      v66 = v89;
      _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v90, "%s: Picked %s out of %ld photos: %s", (uint8_t *)v52, 0x2Au);
      v67 = v91;
      swift_arrayDestroy(v91, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v52, -1, -1);

      v68 = (void *)v88;
    }
    else
    {

      v81 = (void *)v88;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v45);

      swift_bridgeObjectRelease_n(v6, 4);
    }
    (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v93);
  }
  else
  {
    static Log.default.getter(v25);
    v69 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 16))(v6, v91, v96);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.error.getter();
    v72 = os_log_type_enabled(v70, v71);
    v73 = v93;
    if (v72)
    {
      v74 = (uint8_t *)swift_slowAlloc(12, -1);
      v75 = swift_slowAlloc(32, -1);
      v99 = v75;
      *(_DWORD *)v74 = 136315138;
      v94 = (char *)(v74 + 4);
      v76 = sub_10001B2F4(&qword_1000B2A30, (uint64_t)&protocol conformance descriptor for AlbumID);
      v77 = v96;
      v78 = dispatch thunk of CustomStringConvertible.description.getter(v96, v76);
      v80 = v79;
      v97 = sub_100021438(v78, v79, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v94, v74 + 12);
      swift_bridgeObjectRelease(v80);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v6, v77);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Couldn't find album %s", v74, 0xCu);
      swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v74, -1, -1);

      (*(void (**)(char *, uint64_t))(v92 + 8))(v12, v93);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v95 + 8))(v6, v96);

      (*(void (**)(char *, uint64_t))(v92 + 8))(v12, v73);
    }
    v82 = sub_10001B2B0();
    v83 = swift_allocError(&type metadata for PhotoProvidingError, v82, 0, 0);
    *v84 = 0;
    swift_willThrow(v83);
  }
  return v6;
}

uint64_t sub_10001B25C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for AlbumProvider()
{
  return objc_opt_self(_TtC11photosfaced13AlbumProvider);
}

uint64_t sub_10001B28C()
{
  return sub_10001B2F4(&qword_1000B29F0, (uint64_t)&protocol conformance descriptor for AlbumID);
}

unint64_t sub_10001B2B0()
{
  unint64_t result;

  result = qword_1000B2A28;
  if (!qword_1000B2A28)
  {
    result = swift_getWitnessTable(&unk_100096C7C, &type metadata for PhotoProvidingError);
    atomic_store(result, (unint64_t *)&qword_1000B2A28);
  }
  return result;
}

uint64_t sub_10001B2F4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AlbumID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001B334(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10001B36C(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_10000629C(&qword_1000B2A60);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = (_QWORD *)result;
  v4 = 0;
  v25 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v23 = (unint64_t)(v8 + 63) >> 6;
  v24 = v6;
  v11 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * i);
    v18 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * i);
    KeyPath = swift_getKeyPath(&unk_100096860);
    v26 = v18;
    swift_bridgeObjectRetain(v18);
    swift_getAtKeyPath(&v27, &v26, KeyPath);
    swift_bridgeObjectRelease(v18);
    result = swift_release(KeyPath);
    *(_QWORD *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v3[6] + 8 * i) = v17;
    *(_QWORD *)(v3[7] + 8 * i) = v27;
    v20 = v3[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v3[2] = v22;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_22;
    if (v14 >= v23)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v24 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v23)
        return (uint64_t)v3;
      v15 = *(_QWORD *)(v24 + 8 * v4);
      if (!v15)
        break;
    }
LABEL_16:
    v10 = (v15 - 1) & v15;
  }
  v16 = v14 + 2;
  if (v16 >= v23)
    return (uint64_t)v3;
  v15 = *(_QWORD *)(v24 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_16;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v23)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v24 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_16;
  }
LABEL_23:
  __break(1u);
  return result;
}

unint64_t *sub_10001B558(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v19;
  _QWORD v20[2];
  unint64_t *v21;

  v17 = result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (!v5)
    return v7;
  v21 = (unint64_t *)&_swiftEmptyArrayStorage;
  result = (unint64_t *)sub_10004D724(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v21;
    v9 = a3;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v16 = v10;
    while (a4 != v9)
    {
      v19 = v9;
      result = ((unint64_t *(*)(_QWORD *__return_ptr, uint64_t *))v17)(v20, &v19);
      if (v6)
      {
        swift_release(v7);
        return v7;
      }
      v6 = 0;
      v11 = v20[0];
      v12 = v20[1];
      v21 = v7;
      v14 = v7[2];
      v13 = v7[3];
      if (v14 >= v13 >> 1)
      {
        result = (unint64_t *)sub_10004D724(v13 > 1, v14 + 1, 1);
        v7 = v21;
      }
      v7[2] = v14 + 1;
      v15 = &v7[2 * v14];
      v15[4] = v11;
      v15[5] = v12;
      if (a4 < a3)
        goto LABEL_19;
      if (v16 == v9)
        goto LABEL_20;
      if (a4 == ++v9)
        return v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

unint64_t *sub_10001B6A8(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  unint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t *);
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;

  v4 = v3;
  v17 = a1;
  v18 = a2;
  v16 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v9)
  {
    v20 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_10004D740(0, v9, 0);
    v10 = v20;
    v11 = (uint64_t *)(a3 + 32);
    while (1)
    {
      v12 = *v11++;
      v19 = v12;
      v17(&v19);
      if (v4)
        break;
      v4 = 0;
      v20 = v10;
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_10004D740(v13 > 1, v14 + 1, 1);
        v10 = v20;
      }
      v10[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, v8, v16);
      if (!--v9)
        return v10;
    }
    swift_release(v10);
  }
  return v10;
}

uint64_t sub_10001B800@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 16);
  return result;
}

void sub_10001B810(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t);
  void (*v16)(_BYTE *, _QWORD);
  id *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[32];
  uint64_t v27;

  v25 = a2;
  v27 = a1;
  v2 = sub_10000629C(&qword_1000B2B50);
  __chkstk_darwin(v2);
  v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_10000629C(&qword_1000B2B58);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v26[-v10];
  v12 = sub_10000629C(&qword_1000B2A18);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v12, &opaque type descriptor for <<opaque return type of PHFetchResult<>.collection>>, 1);
  v14 = *(_QWORD *)(*(_QWORD *)(OpaqueTypeConformance2 + 8) + 8);
  dispatch thunk of Collection.startIndex.getter(v12, v14);
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)(v9, v27, v12, OpaqueTypeConformance2);
  v15 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v15(v9, v5);
  v16 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v26, v11, v12, v14);
  v18 = *v17;
  v16(v26, 0);
  v19 = objc_msgSend(v18, "uuid");

  if (v19)
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    UUID.init(uuidString:)(v20, v22);
    swift_bridgeObjectRelease(v22);
    v23 = type metadata accessor for UUID(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48))(v4, 1, v23) != 1)
    {
      v15(v11, v5);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v24 + 32))(v25, v4, v23);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10001BA28(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  id v17;
  Class isa;
  id v19;
  id v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint8_t *v57;
  unint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v66 = a2;
  v70 = type metadata accessor for ShuffleID(0);
  v73 = *(_QWORD *)(v70 - 8);
  v3 = __chkstk_darwin(v70);
  v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v71 = (char *)&v63 - v6;
  v7 = type metadata accessor for Logger(0);
  v68 = *(_QWORD *)(v7 - 8);
  v69 = v7;
  v8 = __chkstk_darwin(v7);
  v67 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v63 - v11;
  v13 = ShuffleID.people.getter(v10);
  v14 = ShuffleID.pets.getter();
  v15 = ShuffleID.nature.getter();
  v16 = ShuffleID.cityscape.getter();
  v17 = objc_allocWithZone((Class)PFCShuffle);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  v19 = objc_msgSend(v17, "initWithPeople:pets:nature:cityscape:", isa, v14 & 1, v15 & 1, v16 & 1);

  v20 = objc_msgSend((id)objc_opt_self(PFCShuffleUtilities), "assetsForShuffle:", v19);
  if (v20)
  {
    v21 = v20;
    v22 = sub_10001C194();
    v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

    v24 = sub_10001CB38(v23, *(_QWORD *)(v65 + 16), (uint64_t)v66);
    static Log.shuffle.getter();
    v25 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v71, a1, v70);
    swift_bridgeObjectRetain_n(v24, 4);
    v26 = swift_bridgeObjectRetain(v23);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, (os_log_type_t)v28))
    {
      LODWORD(v65) = v28;
      v66 = v19;
      v67 = v12;
      v29 = swift_slowAlloc(42, -1);
      v64 = swift_slowAlloc(96, -1);
      v76 = v64;
      *(_DWORD *)v29 = 136315906;
      v30 = sub_10001C154(&qword_1000B2B30, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v31 = v71;
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v25, v30);
      v34 = v33;
      v74 = sub_100021438(v32, v33, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v34);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v31, v25);
      *(_WORD *)(v29 + 12) = 2080;
      v35 = v72;
      v36 = sub_10001C53C(v24);
      v72 = v35;
      v37 = Dictionary.description.getter(v36, &type metadata for Int, &type metadata for Int, &protocol witness table for Int);
      v39 = v38;
      swift_release(v36);
      v74 = sub_100021438(v37, v39, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease_n(v24, 2);
      swift_bridgeObjectRelease(v39);
      *(_WORD *)(v29 + 22) = 2048;
      if ((unint64_t)v23 >> 62)
      {
        if (v23 < 0)
          v62 = v23;
        else
          v62 = v23 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v23);
        v40 = _CocoaArrayWrapper.endIndex.getter(v62);
        swift_bridgeObjectRelease(v23);
      }
      else
      {
        v40 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v23);
      v74 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v29 + 24, v29 + 32);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v29 + 32) = 2080;
      swift_bridgeObjectRetain(v24);
      v41 = sub_10000629C(&qword_1000B2A58);
      v42 = Dictionary.description.getter(v24, &type metadata for Int, v41, &protocol witness table for Int);
      v44 = v43;
      swift_bridgeObjectRelease(v24);
      v74 = sub_100021438(v42, v44, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v29 + 34, v29 + 42);
      swift_bridgeObjectRelease_n(v24, 2);
      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v65, "%s: Picked %s out of %ld photos: %s", (uint8_t *)v29, 0x2Au);
      v45 = v64;
      swift_arrayDestroy(v64, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
    }
    else
    {
      swift_bridgeObjectRelease(v23);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v71, v25);

      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease_n(v24, 4);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v12, v69);
    }
  }
  else
  {
    static Log.shuffle.getter();
    v46 = v70;
    v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 16))(v5, a1, v70);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter();
    v24 = v49;
    if (os_log_type_enabled(v48, v49))
    {
      v50 = swift_slowAlloc(12, -1);
      v66 = v19;
      v51 = (uint8_t *)v50;
      v52 = swift_slowAlloc(32, -1);
      v76 = v52;
      *(_DWORD *)v51 = 136315138;
      v53 = sub_10001C154(&qword_1000B2B30, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v46, v53);
      v56 = v55;
      v74 = sub_100021438(v54, v55, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v51 + 4, v51 + 12);
      swift_bridgeObjectRelease(v56);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v5, v46);
      _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v24, "Couldn't find shuffle %s", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      v57 = v51;
      v19 = v66;
      swift_slowDealloc(v57, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v73 + 8))(v5, v46);
    }

    (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
    v58 = sub_10001B2B0();
    v59 = swift_allocError(&type metadata for PhotoProvidingError, v58, 0, 0);
    *v60 = 1;
    swift_willThrow(v59);

  }
  return v24;
}

uint64_t type metadata accessor for ShuffleProvider()
{
  return objc_opt_self(_TtC11photosfaced15ShuffleProvider);
}

uint64_t sub_10001C130()
{
  return sub_10001C154(&qword_1000B2B08, (uint64_t)&protocol conformance descriptor for ShuffleID);
}

uint64_t sub_10001C154(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ShuffleID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001C194()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2B38;
  if (!qword_1000B2B38)
  {
    v1 = objc_opt_self(PHAsset);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B2B38);
  }
  return result;
}

uint64_t sub_10001C1D0(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *i;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = a1[2];
  if (!v4)
    return swift_bridgeObjectRelease(a1);
  v8 = a1[4];
  v7 = a1[5];
  swift_bridgeObjectRetain(a1);
  v51 = v8;
  v9 = (_QWORD *)*a3;
  v10 = sub_10004A4C8(v8);
  v12 = v9[2];
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_24;
  v15 = v10;
  v16 = v11;
  v17 = v9[3];
  swift_bridgeObjectRetain(v7);
  if (v17 >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_10004CFCC();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v23 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    v24 = 8 * v15;
    *(_QWORD *)(v23[6] + v24) = v8;
    *(_QWORD *)(v23[7] + v24) = v7;
    v25 = v23[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v23[2] = v27;
    v28 = v4 - 1;
    if (v4 == 1)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = a1 + 7; ; i += 2)
    {
      v30 = *(i - 1);
      v7 = *i;
      v51 = v30;
      v31 = (_QWORD *)*a3;
      v32 = sub_10004A4C8(v30);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v36 = v34 + v35;
      if (__OFADD__(v34, v35))
        break;
      v37 = v32;
      v38 = v33;
      v39 = v31[3];
      swift_bridgeObjectRetain(v7);
      if (v39 < v36)
      {
        sub_10004AE60(v36, 1);
        v40 = sub_10004A4C8(v30);
        if ((v38 & 1) != (v41 & 1))
          goto LABEL_26;
        v37 = v40;
      }
      if ((v38 & 1) != 0)
        goto LABEL_10;
      v42 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v37 >> 6) + 64) |= 1 << v37;
      v43 = 8 * v37;
      *(_QWORD *)(v42[6] + v43) = v30;
      *(_QWORD *)(v42[7] + v43) = v7;
      v44 = v42[2];
      v26 = __OFADD__(v44, 1);
      v45 = v44 + 1;
      if (v26)
        goto LABEL_25;
      v42[2] = v45;
      if (!--v28)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_10004AE60(v14, a2 & 1);
  v18 = sub_10004A4C8(v8);
  if ((v16 & 1) == (v19 & 1))
  {
    v15 = v18;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v21 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v21);
    v50 = v21;
    swift_errorRetain(v21);
    v22 = sub_10000629C(&qword_1000B2B48);
    if ((swift_dynamicCast(v22, &v50, v22, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease_n(a1, 2);
      return swift_errorRelease(v50);
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
LABEL_27:
  v48 = 0;
  v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v46._object = (void *)0x80000001000949D0;
  v46._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v46);
  _print_unlocked<A, B>(_:_:)(&v51, &v48, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v47._countAndFlagsBits = 39;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v48, v49, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001C53C(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_10000629C(&qword_1000B2A60);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = (_QWORD *)result;
  v4 = 0;
  v25 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v23 = (unint64_t)(v8 + 63) >> 6;
  v24 = v6;
  v11 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * i);
    v18 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * i);
    KeyPath = swift_getKeyPath(&unk_1000968E0);
    v26 = v18;
    swift_bridgeObjectRetain(v18);
    swift_getAtKeyPath(&v27, &v26, KeyPath);
    swift_bridgeObjectRelease(v18);
    result = swift_release(KeyPath);
    *(_QWORD *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v3[6] + 8 * i) = v17;
    *(_QWORD *)(v3[7] + 8 * i) = v27;
    v20 = v3[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v3[2] = v22;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_22;
    if (v14 >= v23)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v24 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v23)
        return (uint64_t)v3;
      v15 = *(_QWORD *)(v24 + 8 * v4);
      if (!v15)
        break;
    }
LABEL_16:
    v10 = (v15 - 1) & v15;
  }
  v16 = v14 + 2;
  if (v16 >= v23)
    return (uint64_t)v3;
  v15 = *(_QWORD *)(v24 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_16;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v23)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v24 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_16;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10001C724@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t result;
  _QWORD v14[3];

  v7 = *a1;
  v8 = sub_10000629C(&qword_1000B2A18);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v8, &opaque type descriptor for <<opaque return type of PHFetchResult<>.collection>>, 1);
  v10 = dispatch thunk of Collection.count.getter(v8, *(_QWORD *)(*(_QWORD *)(OpaqueTypeConformance2 + 8) + 8));
  v11 = pickPhotos(totalCount:day:picking:)(v10, v7, a3);
  v14[2] = a2;
  v12 = sub_10001B6A8((void (*)(uint64_t *))sub_10001CCB4, (uint64_t)v14, v11);
  result = swift_bridgeObjectRelease(v11);
  *a4 = v7;
  a4[1] = v12;
  return result;
}

uint64_t sub_10001C7E0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[4];
  uint64_t v13;

  v6 = *a1;
  v13 = *a2;
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v11 = v13;
    else
      v11 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v7 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v7 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v8 = pickPhotos(totalCount:day:picking:)(v7, v6, a3);
  __chkstk_darwin(v8);
  v12[2] = &v13;
  v9 = sub_10001B6A8((void (*)(uint64_t *))sub_10001CC7C, (uint64_t)v12, v8);
  result = swift_bridgeObjectRelease(v8);
  *a4 = v6;
  a4[1] = v9;
  return result;
}

void sub_10001C8D4(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_10000629C(&qword_1000B2B50);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = *a2;
  if ((*a2 & 0xC000000000000001) == 0)
  {
    if ((v9 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v9 < *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v11 = *(id *)(v10 + 8 * v9 + 32);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_11;
  }
  v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v10);
LABEL_5:
  v12 = v11;
  v13 = objc_msgSend(v11, "uuid");

  if (!v13)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  UUID.init(uuidString:)(v14, v16);
  swift_bridgeObjectRelease(v16);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, v17) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a3, v8, v17);
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t sub_10001CA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD v14[5];
  void *v15;

  v6 = sub_1000242BC();
  v7 = sub_1000242BC();
  if (__OFADD__(v7, a3))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v7 + a3 < v6)
  {
LABEL_8:
    __break(1u);
    result = swift_unexpectedError(a1, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
    return result;
  }
  __chkstk_darwin(v7);
  v14[2] = a1;
  v14[3] = a2;
  v9 = sub_10001B558((unint64_t *)sub_10001CC98, (uint64_t)v14, v6, v8);
  v10 = v9[2];
  if (v10)
  {
    sub_10000629C(&qword_1000B2B40);
    v11 = (void *)static _DictionaryStorage.allocate(capacity:)(v10);
  }
  else
  {
    v11 = &_swiftEmptyDictionarySingleton;
  }
  v15 = v11;
  v12 = (_QWORD *)swift_bridgeObjectRetain(v9);
  sub_10001C1D0(v12, 1, &v15);
  swift_bridgeObjectRelease(v9);
  return (uint64_t)v15;
}

uint64_t sub_10001CB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD v13[4];
  void *v14;
  uint64_t v15;

  v15 = a1;
  v5 = sub_1000242BC();
  v6 = sub_1000242BC();
  if (__OFADD__(v6, a3))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 + a3 < v5)
  {
LABEL_8:
    __break(1u);
    result = swift_unexpectedError(a3, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
    return result;
  }
  __chkstk_darwin(v6);
  v13[2] = &v15;
  v13[3] = a2;
  v8 = sub_10001B558((unint64_t *)sub_10001CC60, (uint64_t)v13, v5, v7);
  v9 = v8[2];
  if (v9)
  {
    sub_10000629C(&qword_1000B2B40);
    v10 = (void *)static _DictionaryStorage.allocate(capacity:)(v9);
  }
  else
  {
    v10 = &_swiftEmptyDictionarySingleton;
  }
  v14 = v10;
  v11 = (_QWORD *)swift_bridgeObjectRetain(v8);
  sub_10001C1D0(v11, 1, &v14);
  swift_bridgeObjectRelease(v8);
  return (uint64_t)v14;
}

uint64_t sub_10001CC50@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 16);
  return result;
}

uint64_t sub_10001CC60@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10001C7E0(a1, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_10001CC7C(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_10001C8D4(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_10001CC98@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10001C724(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_10001CCB4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001B810(*a1, a2);
}

uint64_t DeviceSyncTracker.__allocating_init(database:syncWindow:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_allocObject(v2, 32, 7);
  *(_QWORD *)(result + 16) = a1;
  *(double *)(result + 24) = a2;
  return result;
}

uint64_t DeviceSyncTracker.init(database:syncWindow:)(uint64_t a1, double a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
  return v2;
}

uint64_t DeviceSyncTracker.lastReprocess(_:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v3 + 104) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = v2;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_10000629C(&qword_1000B2B68) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 40) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 48) = swift_task_alloc(v4);
  v5 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v3 + 56) = static CommunicationActor.shared.getter(v5);
  v6 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
  *(_QWORD *)(v3 + 64) = v7;
  *(_QWORD *)(v3 + 72) = v8;
  return swift_task_switch(sub_10001CE00, v7, v8);
}

uint64_t sub_10001CE00()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_BYTE *)(v0 + 104);
  *(_QWORD *)(v0 + 80) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  v2 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 88) = v2;
  *(_BYTE *)(v2 + 16) = v1;
  v3 = type metadata accessor for PhotosFaceDatabase(0);
  v4 = sub_100009174(&qword_1000B2B70, (uint64_t (*)(uint64_t))&type metadata accessor for PhotosFaceDatabase, (uint64_t)&protocol conformance descriptor for PhotosFaceDatabase);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, v4);
  return swift_task_switch(sub_10001CE90, v5, v6);
}

uint64_t sub_10001CE90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[11];
  v2 = sub_10000629C(&qword_1000B2B78);
  dispatch thunk of PhotosFaceDatabase.transaction<A>(block:)(sub_10001D1D0, v1, v2);
  v0[12] = 0;
  swift_task_dealloc(v0[11]);
  return swift_task_switch(sub_10001CF18, v0[8], v0[9]);
}

uint64_t sub_10001CF18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (v2)
  {
    (*(void (**)(_QWORD, unint64_t, uint64_t))(v4 + 16))(*(_QWORD *)(v0 + 48), v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v3);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease(v1);
  sub_10001FB38(v6, v7, &qword_1000B2B68);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v7, 1, v3);
  v9 = *(_QWORD *)(v0 + 40);
  v10 = *(_QWORD *)(v0 + 48);
  v11 = *(_QWORD *)(v0 + 24);
  if ((_DWORD)v8 == 1)
  {
    static Date.distantPast.getter(v8);
    sub_10000EA70(v10, &qword_1000B2B68);
    sub_10000EA70(v9, &qword_1000B2B68);
  }
  else
  {
    sub_10000EA70(*(_QWORD *)(v0 + 48), &qword_1000B2B68);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11, v9, v3);
  }
  v12 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001D060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001D0BC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v5 = sub_10000629C(&qword_1000B2D48);
  v6 = type metadata accessor for DatabaseBinding(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(v5, v9 + *(_QWORD *)(v7 + 72), v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_100096430;
  v11 = (_QWORD *)(v10 + v9);
  *v11 = PhotosFaceType.rawValue.getter(a1);
  v11[1] = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v11, enum case for DatabaseBinding.string(_:), v6);
  v13 = type metadata accessor for Date(0);
  v14 = DatabaseConnection.query<A>(sql:bindings:step:)(0xD000000000000048, 0x8000000100094BB0, v10, sub_10001D1E8, 0, v13);
  result = swift_bridgeObjectRelease(v10);
  if (!v2)
    *a2 = v14;
  return result;
}

uint64_t sub_10001D1D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10001D0BC(*(unsigned __int8 *)(v1 + 16), a1);
}

uint64_t sub_10001D1E8()
{
  return DatabaseRow.readDate(column:)(1);
}

uint64_t DeviceSyncTracker.lastSyncFor(_:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4[2] = a1;
  v8 = type metadata accessor for DeviceSyncState(0);
  v4[3] = v8;
  v9 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[4] = v9;
  v10 = type metadata accessor for CommunicationActor(0);
  v4[5] = v10;
  v4[6] = static CommunicationActor.shared.getter(v10);
  v11 = (_QWORD *)swift_task_alloc(dword_1000B2B8C);
  v4[7] = v11;
  *v11 = v4;
  v11[1] = sub_10001D2CC;
  return sub_10001EC90(v9, a2, a3, a4);
}

uint64_t sub_10001D2CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  v4 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v3, v4);
  if (v0)
    v7 = sub_10001D3E8;
  else
    v7 = sub_10001D36C;
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_10001D36C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 48));
  v4 = v1 + *(int *)(v2 + 20);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v3, v4, v5);
  sub_10001F040(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001D3E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for DeviceSyncState(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B2D00;
  if (!qword_1000B2D00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceSyncState);
  return result;
}

uint64_t DeviceSyncTracker.deviceWantsSync(_:_:_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v5[2] = a4;
  v5[3] = v4;
  v9 = sub_10000629C(&qword_1000B2B68);
  v5[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v5[5] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[6] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[7] = swift_task_alloc(v12);
  v5[8] = swift_task_alloc(v12);
  v13 = type metadata accessor for DeviceSyncState(0);
  v14 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[9] = v14;
  v15 = type metadata accessor for CommunicationActor(0);
  v5[10] = v15;
  v5[11] = static CommunicationActor.shared.getter(v15);
  v16 = (_QWORD *)swift_task_alloc(dword_1000B2B8C);
  v5[12] = v16;
  *v16 = v5;
  v16[1] = sub_10001D57C;
  return sub_10001EC90(v14, a1, a2, a3);
}

uint64_t sub_10001D57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  v4 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v3, v4);
  if (v0)
    v7 = sub_10001D764;
  else
    v7 = sub_10001D61C;
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_10001D61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 88));
  sub_10001FB38(v1, v4, &qword_1000B2B68);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 32);
    sub_10001F040(*(_QWORD *)(v0 + 72));
    sub_10000EA70(v5, &qword_1000B2B68);
LABEL_5:
    v14 = 0;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 40);
  v11 = *(_QWORD *)(v0 + 16);
  v12 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 32))(v6, *(_QWORD *)(v0 + 32), v10);
  static Date.+ infix(_:_:)(v6, *(double *)(v12 + 24));
  LOBYTE(v11) = static Date.> infix(_:_:)(v8, v11);
  v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v13(v8, v10);
  v13(v6, v10);
  sub_10001F040(v7);
  if ((v11 & 1) == 0)
    goto LABEL_5;
  v14 = 1;
LABEL_6:
  v15 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 56);
  v17 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t sub_10001D764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t DeviceSyncTracker.setDeviceWantsSync(_:_:_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  *(_BYTE *)(v5 + 160) = a1;
  v9 = type metadata accessor for DeviceSyncState(0);
  v10 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v5 + 48) = v10;
  v11 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v5 + 56) = v11;
  *(_QWORD *)(v5 + 64) = static CommunicationActor.shared.getter(v11);
  v12 = (_QWORD *)swift_task_alloc(dword_1000B2B8C);
  *(_QWORD *)(v5 + 72) = v12;
  *v12 = v5;
  v12[1] = sub_10001D894;
  return sub_10001EC90(v10, a1, a2, a3);
}

uint64_t sub_10001D894()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v3);
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v2[11] = v5;
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  v2[12] = v7;
  v2[13] = v6;
  if (v0)
    v8 = sub_10001DC2C;
  else
    v8 = sub_10001D93C;
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_10001D93C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[11];
  v2 = v0[6];
  v3 = v0[7];
  v4 = v0[4];
  sub_10000EA70(v2, &qword_1000B2B68);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, v4, v5);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v2, 0, 1, v5);
  v0[14] = static CommunicationActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v3, v1);
  v0[15] = v8;
  v0[16] = v9;
  return swift_task_switch(sub_10001D9FC, v8, v9);
}

uint64_t sub_10001D9FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 48);
  v9 = *(_OWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 160);
  *(_QWORD *)(v0 + 136) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 144) = v3;
  *(_BYTE *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v9;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = type metadata accessor for PhotosFaceDatabase(0);
  v5 = sub_100009174(&qword_1000B2B70, (uint64_t (*)(uint64_t))&type metadata accessor for PhotosFaceDatabase, (uint64_t)&protocol conformance descriptor for PhotosFaceDatabase);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_10001DAA8, v6, v7);
}

uint64_t sub_10001DAA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = v0[10];
  dispatch thunk of PhotosFaceDatabase.transaction<A>(block:)(sub_10001F07C, v0[18], (char *)&type metadata for () + 8);
  v0[19] = v1;
  if (v1)
  {
    v2 = v0[15];
    v3 = v0[16];
    v4 = sub_10001DBA0;
  }
  else
  {
    swift_task_dealloc(v0[18]);
    v2 = v0[15];
    v3 = v0[16];
    v4 = sub_10001DB20;
  }
  return swift_task_switch(v4, v2, v3);
}

uint64_t sub_10001DB20()
{
  _QWORD *v0;

  swift_release(v0[14]);
  return swift_task_switch(sub_10001DB58, v0[12], v0[13]);
}

uint64_t sub_10001DB58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 64));
  sub_10001F040(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001DBA0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[18];
  swift_release(v0[14]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10001DBE4, v0[12], v0[13]);
}

uint64_t sub_10001DBE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 64));
  sub_10001F040(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001DC2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DeviceSyncTracker.clearDeviceWantsSync(_:_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = v3;
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 152) = a1;
  v8 = type metadata accessor for DeviceSyncState(0);
  v9 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + 40) = v9;
  v10 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v4 + 48) = v10;
  *(_QWORD *)(v4 + 56) = static CommunicationActor.shared.getter(v10);
  v11 = (_QWORD *)swift_task_alloc(dword_1000B2B8C);
  *(_QWORD *)(v4 + 64) = v11;
  *v11 = v4;
  v11[1] = sub_10001DD2C;
  return sub_10001EC90(v9, a1, a2, a3);
}

uint64_t sub_10001DD2C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc(v3);
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v2[10] = v5;
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  v2[11] = v7;
  v2[12] = v6;
  if (v0)
    v8 = sub_10001E0A0;
  else
    v8 = sub_10001DDD4;
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_10001DDD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[10];
  v2 = v0[5];
  v3 = v0[6];
  sub_10000EA70(v2, &qword_1000B2B68);
  v4 = type metadata accessor for Date(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v0[13] = static CommunicationActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v3, v1);
  v0[14] = v6;
  v0[15] = v7;
  return swift_task_switch(sub_10001DE70, v6, v7);
}

uint64_t sub_10001DE70()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 40);
  v9 = *(_OWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 152);
  *(_QWORD *)(v0 + 128) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 136) = v3;
  *(_BYTE *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v9;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = type metadata accessor for PhotosFaceDatabase(0);
  v5 = sub_100009174(&qword_1000B2B70, (uint64_t (*)(uint64_t))&type metadata accessor for PhotosFaceDatabase, (uint64_t)&protocol conformance descriptor for PhotosFaceDatabase);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_10001DF1C, v6, v7);
}

uint64_t sub_10001DF1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = v0[9];
  dispatch thunk of PhotosFaceDatabase.transaction<A>(block:)(sub_10001FC08, v0[17], (char *)&type metadata for () + 8);
  v0[18] = v1;
  if (v1)
  {
    v2 = v0[14];
    v3 = v0[15];
    v4 = sub_10001E014;
  }
  else
  {
    swift_task_dealloc(v0[17]);
    v2 = v0[14];
    v3 = v0[15];
    v4 = sub_10001DF94;
  }
  return swift_task_switch(v4, v2, v3);
}

uint64_t sub_10001DF94()
{
  _QWORD *v0;

  swift_release(v0[13]);
  return swift_task_switch(sub_10001DFCC, v0[11], v0[12]);
}

uint64_t sub_10001DFCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 56));
  sub_10001F040(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E014()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[17];
  swift_release(v0[13]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10001E058, v0[11], v0[12]);
}

uint64_t sub_10001E058()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 56));
  sub_10001F040(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E0A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DeviceSyncTracker.recordDeviceSync(_:_:_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  *(_BYTE *)(v5 + 168) = a1;
  v9 = type metadata accessor for DeviceSyncState(0);
  *(_QWORD *)(v5 + 48) = v9;
  v10 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v5 + 56) = v10;
  v11 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v5 + 64) = v11;
  *(_QWORD *)(v5 + 72) = static CommunicationActor.shared.getter(v11);
  v12 = (_QWORD *)swift_task_alloc(dword_1000B2B8C);
  *(_QWORD *)(v5 + 80) = v12;
  *v12 = v5;
  v12[1] = sub_10001E1A4;
  return sub_10001EC90(v10, a1, a2, a3);
}

uint64_t sub_10001E1A4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v3);
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v2[12] = v5;
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  v2[13] = v7;
  v2[14] = v6;
  if (v0)
    v8 = sub_10001E518;
  else
    v8 = sub_10001E24C;
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_10001E24C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[12];
  v2 = v0[8];
  v3 = v0[4];
  v4 = v0[7] + *(int *)(v0[6] + 20);
  v5 = type metadata accessor for Date(0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v4, v3, v5);
  v0[15] = static CommunicationActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  v0[16] = v7;
  v0[17] = v8;
  return swift_task_switch(sub_10001E2E4, v7, v8);
}

uint64_t sub_10001E2E4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 56);
  v9 = *(_OWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 168);
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 152) = v3;
  *(_BYTE *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v9;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = type metadata accessor for PhotosFaceDatabase(0);
  v5 = sub_100009174(&qword_1000B2B70, (uint64_t (*)(uint64_t))&type metadata accessor for PhotosFaceDatabase, (uint64_t)&protocol conformance descriptor for PhotosFaceDatabase);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_10001E394, v6, v7);
}

uint64_t sub_10001E394()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = v0[11];
  dispatch thunk of PhotosFaceDatabase.transaction<A>(block:)(sub_10001FC08, v0[19], (char *)&type metadata for () + 8);
  v0[20] = v1;
  if (v1)
  {
    v2 = v0[16];
    v3 = v0[17];
    v4 = sub_10001E48C;
  }
  else
  {
    swift_task_dealloc(v0[19]);
    v2 = v0[16];
    v3 = v0[17];
    v4 = sub_10001E40C;
  }
  return swift_task_switch(v4, v2, v3);
}

uint64_t sub_10001E40C()
{
  _QWORD *v0;

  swift_release(v0[15]);
  return swift_task_switch(sub_10001E444, v0[13], v0[14]);
}

uint64_t sub_10001E444()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  sub_10001F040(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E48C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[19];
  swift_release(v0[15]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10001E4D0, v0[13], v0[14]);
}

uint64_t sub_10001E4D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  sub_10001F040(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E518()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E554(uint64_t a1, int a2, void (*a3)(double *, _QWORD, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  void (*v25)(double *, _QWORD, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t result;
  double v36;
  double *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  unsigned int *v46;
  Swift::OpaquePointer v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  double *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(double *, _QWORD, uint64_t);
  uint64_t v60;

  v56 = a1;
  v58 = a5;
  v59 = a3;
  LODWORD(v57) = a2;
  v6 = type metadata accessor for Date(0);
  v60 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v54 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v53 = (char *)&v50 - v9;
  v10 = sub_10000629C(&qword_1000B2B68);
  v11 = __chkstk_darwin(v10);
  v50 = (uint64_t)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v50 - v13;
  v15 = sub_10000629C(&qword_1000B2D40);
  v55 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v55 + 16) = xmmword_100096430;
  v16 = sub_10000629C(&qword_1000B2D48);
  v17 = type metadata accessor for DatabaseBinding(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v16, v21 + 4 * v19, v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_100096910;
  v52 = v22;
  v23 = (double *)(v22 + v21);
  *(_QWORD *)v23 = PhotosFaceType.rawValue.getter(v57);
  *((_QWORD *)v23 + 1) = v24;
  v25 = *(void (**)(double *, _QWORD, uint64_t))(v18 + 104);
  v25(v23, enum case for DatabaseBinding.string(_:), v17);
  v26 = (_QWORD *)((char *)v23 + v19);
  *v26 = v59;
  v26[1] = a4;
  v57 = v17;
  v59 = v25;
  ((void (*)(void))v25)();
  v51 = (double *)((char *)v23 + 2 * v19);
  v27 = v58;
  sub_10001FB38(v58, (uint64_t)v14, &qword_1000B2B68);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
  LODWORD(v25) = v28(v14, 1, v6);
  swift_bridgeObjectRetain(a4);
  sub_10000EA70((uint64_t)v14, &qword_1000B2B68);
  if ((_DWORD)v25 == 1)
  {
    v29 = (unsigned int *)&enum case for DatabaseBinding.nil(_:);
    v30 = v60;
    v31 = v27;
    v32 = v57;
    v33 = v51;
  }
  else
  {
    v34 = v50;
    sub_10001FB38(v27, v50, &qword_1000B2B68);
    result = v28((char *)v34, 1, v6);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    v31 = v27;
    v36 = Date.timeIntervalSince1970.getter(result);
    v30 = v60;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v34, v6);
    v33 = v51;
    *v51 = v36;
    v29 = (unsigned int *)&enum case for DatabaseBinding.double(_:);
    v32 = v57;
  }
  v59(v33, *v29, v32);
  v37 = (double *)((char *)v23 + 3 * v19);
  v38 = type metadata accessor for DeviceSyncState(0);
  v39 = v53;
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 16))(v53, v31 + *(int *)(v38 + 20), v6);
  v41 = v54;
  static Date.distantPast.getter(v40);
  v42 = sub_100009174(&qword_1000B2D50, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v41, v6, v42);
  v44 = *(void (**)(char *, uint64_t))(v30 + 8);
  v44(v41, v6);
  v45 = ((uint64_t (*)(char *, uint64_t))v44)(v39, v6);
  if ((v43 & 1) != 0)
  {
    v46 = (unsigned int *)&enum case for DatabaseBinding.nil(_:);
  }
  else
  {
    *v37 = Date.timeIntervalSince1970.getter(v45);
    v46 = (unsigned int *)&enum case for DatabaseBinding.double(_:);
  }
  v47._rawValue = (void *)v55;
  v48 = v52;
  v59(v37, *v46, v32);
  *((_QWORD *)v47._rawValue + 4) = v48;
  v49._object = (void *)0x8000000100094AA0;
  v49._countAndFlagsBits = 0xD000000000000091;
  DatabaseConnection.insert(sql:bindings:)(v49, v47);
  return swift_bridgeObjectRelease(v47._rawValue);
}

uint64_t DeviceSyncTracker.recordLastReprocess(_:_:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = v2;
  *(_BYTE *)(v3 + 80) = a1;
  v4 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v3 + 32) = static CommunicationActor.shared.getter(v4);
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)(v3 + 48) = v7;
  return swift_task_switch(sub_10001E9BC, v6, v7);
}

uint64_t sub_10001E9BC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 80);
  *(_QWORD *)(v0 + 56) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 64) = v3;
  *(_BYTE *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = type metadata accessor for PhotosFaceDatabase(0);
  v5 = sub_100009174(&qword_1000B2B70, (uint64_t (*)(uint64_t))&type metadata accessor for PhotosFaceDatabase, (uint64_t)&protocol conformance descriptor for PhotosFaceDatabase);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_10001EA58, v6, v7);
}

uint64_t sub_10001EA58()
{
  _QWORD *v0;

  dispatch thunk of PhotosFaceDatabase.transaction<A>(block:)(sub_10001F09C, v0[8], (char *)&type metadata for () + 8);
  v0[9] = 0;
  swift_task_dealloc(v0[8]);
  return swift_task_switch(sub_10001EAD0, v0[5], v0[6]);
}

uint64_t sub_10001EAD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001EB04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 32));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001EB44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  Swift::OpaquePointer v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, _QWORD, uint64_t);
  uint64_t v15;
  Swift::String v16;

  v3 = sub_10000629C(&qword_1000B2D40);
  v4._rawValue = (void *)swift_allocObject(v3, 40, 7);
  *((_OWORD *)v4._rawValue + 1) = xmmword_100096430;
  v5 = sub_10000629C(&qword_1000B2D48);
  v6 = type metadata accessor for DatabaseBinding(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v5, v10 + 2 * v8, v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_100096440;
  v12 = (_QWORD *)(v11 + v10);
  *v12 = PhotosFaceType.rawValue.getter(a2);
  v12[1] = v13;
  v14 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104);
  v15 = v14(v12, enum case for DatabaseBinding.string(_:), v6);
  *(double *)((char *)v12 + v8) = Date.timeIntervalSince1970.getter(v15);
  v14((_QWORD *)((char *)v12 + v8), enum case for DatabaseBinding.double(_:), v6);
  *((_QWORD *)v4._rawValue + 4) = v11;
  v16._object = (void *)0x8000000100094A30;
  v16._countAndFlagsBits = 0xD00000000000006ALL;
  DatabaseConnection.insert(sql:bindings:)(v16, v4);
  return swift_bridgeObjectRelease(v4._rawValue);
}

uint64_t sub_10001EC90(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = v4;
  *(_BYTE *)(v5 + 120) = a2;
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = a3;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10000629C(&qword_1000B2D58) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 56) = swift_task_alloc(v6);
  *(_QWORD *)(v5 + 64) = swift_task_alloc(v6);
  v7 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v5 + 72) = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  *(_QWORD *)(v5 + 80) = v9;
  *(_QWORD *)(v5 + 88) = v10;
  return swift_task_switch(sub_10001ED5C, v9, v10);
}

uint64_t sub_10001ED5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 120);
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
  v4 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 104) = v4;
  *(_BYTE *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  *(_QWORD *)(v4 + 32) = v1;
  v5 = type metadata accessor for PhotosFaceDatabase(0);
  v6 = sub_100009174(&qword_1000B2B70, (uint64_t (*)(uint64_t))&type metadata accessor for PhotosFaceDatabase, (uint64_t)&protocol conformance descriptor for PhotosFaceDatabase);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
  return swift_task_switch(sub_10001EDFC, v7, v8);
}

uint64_t sub_10001EDFC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[13];
  v2 = sub_10000629C(&qword_1000B2D60);
  dispatch thunk of PhotosFaceDatabase.transaction<A>(block:)(sub_10001FAD8, v1, v2);
  v0[14] = 0;
  swift_task_dealloc(v0[13]);
  return swift_task_switch(sub_10001EE84, v0[10], v0[11]);
}

uint64_t sub_10001EE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release(*(_QWORD *)(v0 + 72));
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = type metadata accessor for DeviceSyncState(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (v2)
  {
    sub_10001FAF4(v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), *(_QWORD *)(v0 + 64));
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v7 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease(v1);
  sub_10001FB38(v6, v7, &qword_1000B2D58);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v7, 1, v3);
  v9 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 24);
  if (v8 == 1)
  {
    v12 = type metadata accessor for Date(0);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    static Date.distantPast.getter(v13);
    sub_10000EA70(v10, &qword_1000B2D58);
    sub_10000EA70(v9, &qword_1000B2D58);
  }
  else
  {
    sub_10000EA70(*(_QWORD *)(v0 + 64), &qword_1000B2D58);
    sub_10001FB7C(v9, v11);
  }
  v14 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001EFE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001F040(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DeviceSyncState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001F07C(uint64_t a1)
{
  uint64_t v1;

  return sub_10001E554(a1, *(unsigned __int8 *)(v1 + 16), *(void (**)(double *, _QWORD, uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10001F09C(uint64_t a1)
{
  uint64_t v1;

  return sub_10001EB44(a1, *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_10001F0B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(void);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v22;

  v7 = sub_10000629C(&qword_1000B2D48);
  v8 = type metadata accessor for DatabaseBinding(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(v7, v12 + 2 * v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_100096440;
  v14 = (_QWORD *)(v13 + v12);
  *v14 = PhotosFaceType.rawValue.getter(a1);
  v14[1] = v15;
  v16 = *(void (**)(void))(v9 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v16)(v14, enum case for DatabaseBinding.string(_:), v8);
  v17 = (_QWORD *)((char *)v14 + v10);
  *v17 = a2;
  v17[1] = a3;
  v16();
  v18 = type metadata accessor for DeviceSyncState(0);
  swift_bridgeObjectRetain(a3);
  v19 = DatabaseConnection.query<A>(sql:bindings:step:)(0xD000000000000068, 0x8000000100094B40, v13, sub_10001F208, 0, v18);
  result = swift_bridgeObjectRelease(v13);
  if (!v22)
    *a4 = v19;
  return result;
}

uint64_t sub_10001F208@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000629C(&qword_1000B2B68);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v15 - v10;
  DatabaseRow.readNullableDate(column:)(2);
  DatabaseRow.readNullableDate(column:)(3);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2);
  if ((_DWORD)v12 == 1)
  {
    static Date.distantPast.getter(v12);
    sub_10000EA70((uint64_t)v9, &qword_1000B2B68);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
  }
  sub_10001FBC0((uint64_t)v11, a1);
  v13 = type metadata accessor for DeviceSyncState(0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1 + *(int *)(v13 + 20), v5, v2);
}

uint64_t DeviceSyncTracker.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t DeviceSyncTracker.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for DeviceSyncTracker()
{
  return objc_opt_self(_TtC11photosfaced17DeviceSyncTracker);
}

uint64_t *sub_10001F3C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10000629C(&qword_1000B2B68);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20), v7);
    }
    else
    {
      v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
      v11(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      v11((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    }
  }
  return a1;
}

uint64_t sub_10001F4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  void (*v7)(uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6)
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v7(a1, v4);
    v7 = v9;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 20), v4);
}

char *sub_10001F538(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10000629C(&qword_1000B2B68);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  }
  else
  {
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v9(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v9(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  }
  return a1;
}

char *sub_10001F600(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10000629C(&qword_1000B2B68);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  return a1;
}

char *sub_10001F714(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10000629C(&qword_1000B2B68);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  }
  else
  {
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v9(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v9(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  }
  return a1;
}

char *sub_10001F7DC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10000629C(&qword_1000B2B68);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  return a1;
}

uint64_t sub_10001F8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001F8FC);
}

uint64_t sub_10001F8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_10000629C(&qword_1000B2B68);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10001F974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001F980);
}

uint64_t sub_10001F980(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_10000629C(&qword_1000B2B68);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10001FA00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10001FA84(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_10001FA84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B2D10)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B2D10);
  }
}

uint64_t sub_10001FAD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10001F0B8(*(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_10001FAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeviceSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001FB38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000629C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001FB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeviceSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001FBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000629C(&qword_1000B2B68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001FC08(uint64_t a1)
{
  return sub_10001F07C(a1);
}

uint64_t sub_10001FC1C(uint64_t a1, uint64_t a2)
{
  return sub_10001FCD0(a1, a2, &OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_endTime);
}

uint64_t sub_10001FC38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = a1 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_startTime;
  swift_beginAccess(a1 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_startTime, v6, 33, 0);
  v4 = type metadata accessor for ContinuousClock.Instant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess(v6);
}

uint64_t sub_10001FCB4(uint64_t a1, uint64_t a2)
{
  return sub_10001FCD0(a1, a2, &OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_cancelTime);
}

uint64_t sub_10001FCD0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v6 = sub_10000629C(&qword_1000B2F90);
  v7 = __chkstk_darwin(v6);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v7);
  v11 = &v17[-v10 - 8];
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v11, a2, v12);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  sub_1000205A8((uint64_t)v11, (uint64_t)v9);
  v14 = a1 + *a3;
  swift_beginAccess(v14, v17, 33, 0);
  sub_1000205F0((uint64_t)v9, v14);
  return swift_endAccess(v17);
}

uint64_t sub_10001FDE8(uint64_t result)
{
  *(_BYTE *)(result + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_errored) = 1;
  return result;
}

void sub_10001FDFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  _QWORD aBlock[5];
  uint64_t v40;
  char v41[24];
  char v42[32];

  v1 = v0;
  v2 = type metadata accessor for ContinuousClock.Instant(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v34 - v7;
  v9 = sub_10000629C(&qword_1000B2F90);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v34 - v13;
  v15 = v1 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_endTime;
  swift_beginAccess(v1 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_endTime, v42, 0, 0);
  sub_100020638(v15, (uint64_t)v14);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  v17 = v16(v14, 1, v2);
  v18 = 0;
  v36 = 0;
  if (v17 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v14, v2);
    v19 = v1 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_startTime;
    swift_beginAccess(v1 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_startTime, v37, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v19, v2);
    swift_retain(v1);
    v18 = ContinuousClock.Instant.duration(to:)(v8);
    v36 = v20;
    v21 = *(void (**)(char *, uint64_t))(v3 + 8);
    v21(v6, v2);
    v21(v8, v2);
    swift_release(v1);
  }
  v35 = v18;
  v22 = v1 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_cancelTime;
  swift_beginAccess(v1 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_cancelTime, v41, 0, 0);
  sub_100020638(v22, (uint64_t)v12);
  v23 = v16(v12, 1, v2);
  v24 = 0;
  v25 = 0;
  if (v23 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v12, v2);
    v26 = v1 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_startTime;
    swift_beginAccess(v1 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_startTime, v38, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v26, v2);
    swift_retain(v1);
    v24 = ContinuousClock.Instant.duration(to:)(v8);
    v25 = v27;
    v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    v28(v6, v2);
    v28(v8, v2);
    swift_release(v1);
  }
  v29 = String._bridgeToObjectiveC()();
  v30 = swift_allocObject(&unk_1000AE228, 65, 7);
  v31 = v35;
  *(_QWORD *)(v30 + 16) = v1;
  *(_QWORD *)(v30 + 24) = v31;
  *(_QWORD *)(v30 + 32) = v36;
  *(_BYTE *)(v30 + 40) = v17 == 1;
  *(_QWORD *)(v30 + 48) = v24;
  *(_QWORD *)(v30 + 56) = v25;
  *(_BYTE *)(v30 + 64) = v23 == 1;
  aBlock[4] = sub_1000206A4;
  v40 = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100020338;
  aBlock[3] = &unk_1000AE240;
  v32 = _Block_copy(aBlock);
  v33 = v40;
  swift_retain(v1);
  swift_release(v33);
  AnalyticsSendEventLazy(v29, v32);
  _Block_release(v32);

}

void sub_100020168(uint64_t a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;

  v2 = sub_10000629C(&qword_1000B2FA0);
  inited = swift_initStackObject(v2, &v4);
  *(_OWORD *)(inited + 16) = xmmword_100096910;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  __asm { BR              X10 }
}

unint64_t sub_100020210()
{
  NSNumber *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  objc_class *v7;

  v7 = (objc_class *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100094D30);
  v0[6].super.super.isa = v7;
  v0[7].super.super.isa = (Class)0x70616C45656D6974;
  v0[8].super.super.isa = (Class)0xEB00000000646573;
  if ((v6 & 1) == 0)
    Duration.components.getter(v5, v4);
  v0[9].super.super.isa = Int64._bridgeToObjectiveC()().super.super.isa;
  v0[10].super.super.isa = (Class)0x656C6C65636E6163;
  v0[11].super.super.isa = (Class)0xE900000000000064;
  if ((v3 & 1) == 0)
    Duration.components.getter(v2, v1);
  v0[12].super.super.isa = Int64._bridgeToObjectiveC()().super.super.isa;
  v0[13].super.super.isa = (Class)0x6465726F727265;
  v0[14].super.super.isa = (Class)0xE700000000000000;
  v0[15].super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  return sub_10003EA6C((uint64_t)v0);
}

Class sub_100020338(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_1000206D4();
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

uint64_t sub_1000203AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_startTime;
  v2 = type metadata accessor for ContinuousClock.Instant(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100020710(v0 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_cancelTime);
  sub_100020710(v0 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_endTime);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCC11photosfaced9Analytics14BackgroundTask_lock));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t Analytics.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t Analytics.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for Analytics()
{
  return objc_opt_self(_TtC11photosfaced9Analytics);
}

uint64_t sub_100020464()
{
  return type metadata accessor for Analytics.BackgroundTask(0);
}

uint64_t type metadata accessor for Analytics.BackgroundTask(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B2E50;
  if (!qword_1000B2E50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Analytics.BackgroundTask);
  return result;
}

void sub_1000204A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v6[0] = &unk_100096990;
  v2 = type metadata accessor for ContinuousClock.Instant(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_1000969A8;
    sub_100020554(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
    }
  }
}

void sub_100020554(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B2E60)
  {
    v2 = type metadata accessor for ContinuousClock.Instant(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B2E60);
  }
}

uint64_t sub_1000205A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000629C(&qword_1000B2F90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000205F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000629C(&qword_1000B2F90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000629C(&qword_1000B2F90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020680()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 65, 7);
}

void sub_1000206A4()
{
  uint64_t v0;

  sub_100020168(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000206BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000206CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000206D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2F98;
  if (!qword_1000B2F98)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B2F98);
  }
  return result;
}

uint64_t sub_100020710(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000629C(&qword_1000B2F90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double Duration.timeInterval.getter(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t v5;

  v4 = (double)((uint64_t (*)(void))Duration.components.getter)();
  Duration.components.getter(a1, a2);
  return (double)v5 / 1.0e18 + v4;
}

uint64_t static Duration.minutes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000207B8(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))&static Duration.seconds<A>(_:));
}

uint64_t static Duration.hours<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000207B8(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))static Duration.minutes<A>(_:));
}

uint64_t sub_1000207B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedConformanceWitness;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);

  v22 = a1;
  v23 = a4;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, a2, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v9 = __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v22 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  v13 = __chkstk_darwin(v9);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v22 - v16;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_1000969C8, 1792, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v11, a2, v7);
  dispatch thunk of static Numeric.* infix(_:_:)(v22, v15, a2, v6);
  v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v15, a2);
  v20 = v23(v17, a2, a3);
  v19(v17, a2);
  return v20;
}

uint64_t exponentialBackoff<A>(isolation:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6[17] = a5;
  v6[18] = a6;
  v6[15] = a1;
  v6[16] = a4;
  v10 = type metadata accessor for ContinuousClock.Instant(0);
  v6[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[20] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[21] = swift_task_alloc(v12);
  v6[22] = swift_task_alloc(v12);
  v13 = type metadata accessor for Logger(0);
  v6[23] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[24] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[25] = swift_task_alloc(v15);
  v6[26] = swift_task_alloc(v15);
  v6[27] = swift_task_alloc(v15);
  v18 = type metadata accessor for ExponentialBackoffResult(0, a6, v16, v17);
  v6[28] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v6[29] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[30] = swift_task_alloc(v20);
  v6[31] = swift_task_alloc(v20);
  v21 = type metadata accessor for ContinuousClock(0);
  v6[32] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v6[33] = v22;
  v6[34] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType(a2);
    v24 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a3);
    v26 = v25;
  }
  else
  {
    v24 = 0;
    v26 = 0;
  }
  v6[35] = v24;
  v6[36] = v26;
  return swift_task_switch(sub_100020AA8, v24, v26);
}

uint64_t sub_100020AA8()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(_QWORD);

  v1 = (int *)v0[16];
  v0[11] = static Duration.seconds(_:)(0.1);
  v0[12] = v2;
  ContinuousClock.init()();
  swift_beginAccess(v0 + 11, v0 + 2, 0, 0);
  v5 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v3 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[37] = v3;
  *v3 = v0;
  v3[1] = sub_100020B50;
  return v5(v0[31]);
}

uint64_t sub_100020B50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 296));
  if (v0)
  {
    v2[43] = v0;
    v3 = v2[35];
    v4 = v2[36];
    v5 = sub_10002116C;
  }
  else
  {
    v3 = v2[35];
    v4 = v2[36];
    v5 = sub_100020BB4;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_100020BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 144);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 16))(v1, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  if ((_DWORD)v4 == 1)
  {
    v5 = static Log.default.getter(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 216);
    v10 = *(_QWORD *)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 192);
    if (v8)
    {
      v12 = swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v31 = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = Duration.description.getter(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
      v16 = v15;
      *(_QWORD *)(v12 + 4) = sub_100021438(v14, v15, &v31);
      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Sleeping for %s", (uint8_t *)v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    v17 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v17(v9, v10);
    *(_QWORD *)(v0 + 304) = v17;
    *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 64) = 0;
    *(_QWORD *)(v0 + 72) = 0;
    *(_BYTE *)(v0 + 80) = 1;
    return swift_task_switch(sub_100020E14, 0, 0);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 264);
    v19 = *(_QWORD *)(v0 + 272);
    v22 = *(_QWORD *)(v0 + 248);
    v21 = *(_QWORD *)(v0 + 256);
    v23 = *(_QWORD *)(v0 + 240);
    v24 = *(_QWORD *)(v0 + 216);
    v27 = *(_QWORD *)(v0 + 208);
    v28 = *(_QWORD *)(v0 + 200);
    v29 = *(_QWORD *)(v0 + 176);
    v30 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 144);
    v26 = *(_QWORD *)(v0 + 120);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(v22, *(_QWORD *)(v0 + 224));
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v26, v23, v25);
    swift_task_dealloc(v19);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100020E14()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[32];
  v2 = v0[21];
  v3 = v0[19];
  v4 = v0[20];
  v5 = sub_100009174(&qword_1000B2FB0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v1, v5);
  v6 = sub_100009174(qword_1000B2FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 13, v3, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[39] = v7;
  v7(v2, v3);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[40] = v8;
  *v8 = v0;
  v8[1] = sub_100020F24;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[22], v0 + 8, v0[32], v5);
}

uint64_t sub_100020F24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *v1;
  v4 = *(void (**)(uint64_t, uint64_t))(*v1 + 312);
  v3 = *(_QWORD *)(*v1 + 320);
  v5 = *(_QWORD *)(*v1 + 176);
  v6 = *(_QWORD *)(*v1 + 152);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  v4(v5, v6);
  if (v0)
  {
    v7 = sub_100021214;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 280);
    v9 = *(_QWORD *)(v2 + 288);
    v7 = sub_100020FB0;
  }
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_100020FB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(_QWORD);

  v2 = static Log.default.getter(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Done sleeping.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = *(_QWORD *)(v1 + 248);
  v7 = *(_QWORD *)(v1 + 224);
  v8 = *(_QWORD *)(v1 + 232);
  v9 = *(int **)(v1 + 128);
  (*(void (**)(_QWORD, _QWORD))(v1 + 304))(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 184));
  swift_beginAccess(v1 + 88, v1 + 40, 33, 0);
  static DurationProtocol.*= infix(_:_:)(v1 + 88, 2);
  swift_endAccess(v1 + 40);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v12 = (uint64_t (*)(_QWORD))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v1 + 336) = v10;
  *v10 = v1;
  v10[1] = sub_100021108;
  return v12(*(_QWORD *)(v1 + 248));
}

uint64_t sub_100021108()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 336));
  if (v0)
  {
    v2[43] = v0;
    v3 = v2[35];
    v4 = v2[36];
    v5 = sub_10002116C;
  }
  else
  {
    v3 = v2[35];
    v4 = v2[36];
    v5 = sub_100020BB4;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_10002116C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(v1, *(_QWORD *)(v0 + 256));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100021214()
{
  uint64_t v0;

  return swift_task_switch(sub_100021224, *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288));
}

uint64_t sub_100021224(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t (*v18)(_QWORD);

  v2 = *(_QWORD *)(v1 + 328);
  static Log.default.getter(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v1 + 328);
  if (v6)
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error Sleeping %@", (uint8_t *)v8, 0xCu);
    v11 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v1 + 328));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v12 = *(_QWORD *)(v1 + 248);
  v13 = *(_QWORD *)(v1 + 224);
  v14 = *(_QWORD *)(v1 + 232);
  v15 = *(int **)(v1 + 128);
  (*(void (**)(_QWORD, _QWORD))(v1 + 304))(*(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 184));
  swift_beginAccess(v1 + 88, v1 + 40, 33, 0);
  static DurationProtocol.*= infix(_:_:)(v1 + 88, 2);
  swift_endAccess(v1 + 40);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  v18 = (uint64_t (*)(_QWORD))((char *)v15 + *v15);
  v16 = (_QWORD *)swift_task_alloc(v15[1]);
  *(_QWORD *)(v1 + 336) = v16;
  *v16 = v1;
  v16[1] = sub_100021108;
  return v18(*(_QWORD *)(v1 + 248));
}

uint64_t type metadata accessor for ExponentialBackoffResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001A938(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExponentialBackoffResult);
}

uint64_t sub_100021438(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100021508(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100022258((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100022258((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100022238(v12);
  return v7;
}

uint64_t sub_100021508(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1000216C0(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000216C0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100021754(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_10002192C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10002192C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100021754(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1000218C8(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1000218C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_10000629C(&qword_1000B3040);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10002192C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000629C(&qword_1000B3040);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100021A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t sub_100021A80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t *sub_100021AD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain(v11);
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_100021BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_100021C0C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_100021CA4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_100021D84(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_100021E1C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_100021EFC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_10002203C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = &_mh_execute_header.magic + 1;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = &dword_100000004;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_1000221E4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1000221EC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_100022210(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_100022224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t sub_100022238(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100022258(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_100022294(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSURL *v9;
  char *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  id v14;
  id v16;
  uint64_t v17;
  void *object;
  NSString v19;
  uint64_t v20;
  id v21;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (NSURL *)((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (char *)((char *)&v21 - (char *)v9);
  URL._bridgeToObjectiveC()(v9);
  v12 = v11;
  v21 = 0;
  v13 = objc_msgSend(v3, "removeItemAtURL:error:", v11, &v21);

  v14 = v21;
  if (v13)
    return v21;
  v16 = v21;
  v17 = _convertNSErrorToError(_:)(v14);

  ((void (*)(void))swift_willThrow)();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  if ((a2 & 1) != 0)
  {
    object = URL.path(percentEncoded:)(1)._object;
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    LOBYTE(object) = objc_msgSend(v3, "fileExistsAtPath:", v19);

    v20 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((object & 1) == 0)
      return (id)swift_errorRelease(v17);
  }
  else
  {
    v20 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return (id)swift_willThrow(v20);
}

id sub_100022438(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  void *v3;
  id v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSURL *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *object;
  void *v25;
  NSString v26;
  uint64_t v27;
  void *v29;
  void *v30;
  NSURL *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  void *v35;
  void *v36;
  NSURL *v37;
  void *v38;
  void *v39;
  unsigned __int8 v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  NSURL *v45;
  void *v46;
  void *v47;
  NSURL *v48;
  void *v49;
  void *v50;
  unsigned __int8 v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  char *v58;
  void *v59;
  NSString v60;
  uint64_t (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  NSURL *v64;
  void *v65;
  void *v66;
  unsigned int v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void *v73;
  NSString v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;

  v4 = v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v80 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v81 = (char *)&v76 - v13;
  if (!a3)
  {
    URL._bridgeToObjectiveC()((NSURL *)a3);
    v30 = v29;
    URL._bridgeToObjectiveC()(v31);
    v33 = v32;
    v86 = 0;
    v34 = objc_msgSend(v4, "copyItemAtURL:toURL:error:", v30, v32, &v86);

    v20 = v86;
    if (!v34)
    {
      v42 = v86;
      _convertNSErrorToError(_:)(v20);

      return (id)swift_willThrow(v27);
    }
    return v20;
  }
  if (a3 == 1)
  {
    URL._bridgeToObjectiveC()((NSURL *)a3);
    v15 = v14;
    URL._bridgeToObjectiveC()(v16);
    v18 = v17;
    v86 = 0;
    v19 = objc_msgSend(v4, "copyItemAtURL:toURL:error:", v15, v17, &v86);

    v20 = v86;
    if (!v19)
    {
      v21 = v86;
      v22 = _convertNSErrorToError(_:)(v20);

      swift_willThrow(v23);
      object = URL.path(percentEncoded:)(1)._object;
      v25 = v4;
      v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object);
      LOBYTE(v25) = objc_msgSend(v25, "fileExistsAtPath:", v26);

      if ((v25 & 1) != 0)
        return (id)swift_errorRelease(v22);
      return (id)swift_willThrow(v27);
    }
    return v20;
  }
  v85 = v12;
  URL._bridgeToObjectiveC()((NSURL *)a3);
  v36 = v35;
  URL._bridgeToObjectiveC()(v37);
  v39 = v38;
  v86 = 0;
  v40 = objc_msgSend(v4, "copyItemAtURL:toURL:error:", v36, v38, &v86);

  v41 = v86;
  if ((v40 & 1) != 0)
    return v41;
  v83 = a2;
  v84 = 11;
  v78 = a1;
  v79 = v4;
  v77 = v9;
  v43 = a2;
  while (1)
  {
    v52 = v41;
    v53 = _convertNSErrorToError(_:)(v41);

    swift_willThrow(v54);
    v55 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v56 = v81;
    v57 = v85;
    v55(v81, a2, v85);
    if (v84 == 1)
    {
      v27 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v56, v57);
      return (id)swift_willThrow(v27);
    }
    --v84;
    v82 = v53;
    v58 = v56;
    v59 = URL.path(percentEncoded:)(1)._object;
    v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v59);
    LOBYTE(v59) = objc_msgSend(v4, "fileExistsAtPath:", v60);

    v61 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
    v62 = v58;
    v63 = v82;
    v27 = v61(v62, v57);
    if ((v59 & 1) == 0)
      return (id)swift_willThrow(v27);
    URL._bridgeToObjectiveC()(v64);
    v66 = v65;
    v86 = 0;
    v67 = objc_msgSend(v4, "removeItemAtURL:error:", v65, &v86);

    v68 = v86;
    if (!v67)
      break;
    v44 = v86;
LABEL_14:
    swift_errorRelease(v63);
    URL._bridgeToObjectiveC()(v45);
    v47 = v46;
    a2 = v83;
    URL._bridgeToObjectiveC()(v48);
    v50 = v49;
    v86 = 0;
    v4 = v79;
    v51 = objc_msgSend(v79, "copyItemAtURL:toURL:error:", v47, v49, &v86);

    v41 = v86;
    v9 = v77;
    if ((v51 & 1) != 0)
      return v41;
  }
  v69 = v86;
  v70 = _convertNSErrorToError(_:)(v68);

  swift_willThrow(v71);
  v72 = v80;
  v55(v80, v43, v85);
  v73 = URL.path(percentEncoded:)(1)._object;
  v74 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v73);
  LOBYTE(v73) = objc_msgSend(v4, "fileExistsAtPath:", v74);

  v75 = v61(v72, v85);
  if ((v73 & 1) == 0)
  {
    swift_errorRelease(v70);
    goto LABEL_14;
  }
  swift_willThrow(v75);
  return (id)swift_errorRelease(v63);
}

uint64_t sub_1000228C8(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  __chkstk_darwin(a1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v3);
  return String.init<A>(describing:)(v3, a1);
}

uint64_t sub_100022934(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static Log.default.getter(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v20 = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = PhotosFaceType.description.getter(a1);
    v18 = v2;
    v13 = a1;
    a1 = v14;
    v19 = sub_100021438(v12, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 4, v10 + 12);
    v15 = a1;
    LOBYTE(a1) = v13;
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sending %s Update Darwin Notification.", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v18);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return notify_post(*(const char **)*(&off_1000AE2D8 + (char)a1));
}

uint64_t sub_100022AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  IOPMAssertionID v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  result = __chkstk_darwin(v1);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_DWORD *)v0;
  if (*(_DWORD *)v0)
  {
    v8 = *(_QWORD *)(v0 + 8);
    v7 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain(v7);
    v9 = IOPMAssertionRelease(v6);
    *(_DWORD *)v0 = 0;
    static Log.default.getter(v9);
    v10 = swift_bridgeObjectRetain(v7);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(12, -1);
      v17 = v8;
      v14 = (uint8_t *)v13;
      v15 = swift_slowAlloc(32, -1);
      v19 = v15;
      *(_DWORD *)v14 = 136315138;
      swift_bridgeObjectRetain(v7);
      v18 = sub_100021438(v17, v7, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease_n(v7, 3);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Closing power assertion on close for %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v7, 2);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  return result;
}

uint64_t sub_100022CC4(IOPMAssertionID a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRetain(a3);
  v10 = IOPMAssertionRelease(a1);
  static Log.default.getter(v10);
  v11 = swift_bridgeObjectRetain(a3);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(12, -1);
    v19 = a2;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v21 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain(a3);
    v20 = sub_100021438(v19, a3, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Closing power assertion on dealloc for %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_bridgeObjectRelease(a3);
}

uint64_t sub_100022EBC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  double v21;
  uint64_t v22;
  CFTimeInterval v23;
  __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[4];
  IOPMAssertionID AssertionID;
  uint64_t v46;

  v12 = type metadata accessor for Logger(0);
  v40 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v39 - v16;
  AssertionID = 0;
  swift_bridgeObjectRetain(a2);
  v18 = (__CFString *)String._bridgeToObjectiveC()();
  v42 = a1;
  v19 = (__CFString *)String._bridgeToObjectiveC()();
  v20 = (__CFString *)String._bridgeToObjectiveC()();
  v21 = (double)Duration.components.getter(a5, a6);
  Duration.components.getter(a5, a6);
  v23 = (double)v22 / 1.0e18 + v21;
  v24 = (__CFString *)String._bridgeToObjectiveC()();
  LODWORD(a5) = IOPMAssertionCreateWithDescription(v18, v19, v20, 0, 0, v23, v24, &AssertionID);

  if ((_DWORD)a5)
  {
    v26 = swift_bridgeObjectRelease(a4);
    static Log.default.getter(v26);
    v27 = swift_bridgeObjectRetain(a2);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v46 = v31;
      *(_DWORD *)v30 = 136315138;
      swift_bridgeObjectRetain(a2);
      v43 = sub_100021438(v42, a2, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to create power assertion for %s", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v41);
    return 0;
  }
  else
  {
    v32 = AssertionID;
    static Log.default.getter(v25);
    swift_bridgeObjectRetain(a2);
    v33 = swift_bridgeObjectRetain(a4);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(64, -1);
      v46 = v39;
      *(_DWORD *)v36 = 136315394;
      swift_bridgeObjectRetain(a2);
      v43 = sub_100021438(v42, a2, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v36 + 12) = 2080;
      swift_bridgeObjectRetain(a4);
      v43 = sub_100021438(a3, a4, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Created power assertion: %s for %s", (uint8_t *)v36, 0x16u);
      v37 = v39;
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
      swift_bridgeObjectRelease_n(a2, 2);
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v41);
  }
  return v32;
}

uint64_t sub_10002338C(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  NSObject *v41;
  _QWORD *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  os_log_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  os_log_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[2];
  uint64_t v77;
  uint64_t v78;

  v74 = a3;
  v73 = a2;
  v4 = sub_10000629C(&qword_1000B1F58);
  __chkstk_darwin(v4);
  v66 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for Logger(0);
  v64 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v70 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ProtocolVersion(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MessageBody(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Message.Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (_DWORD *)((char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v67 = type metadata accessor for Message(0);
  v72 = *(_QWORD **)(v67 - 8);
  v17 = v72[8];
  v18 = __chkstk_darwin(v67);
  v19 = __chkstk_darwin(v18);
  v71 = (char *)&v60 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v60 - v21;
  v68 = a1;
  *v16 = a1;
  (*(void (**)(_DWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for Message.Operation.event(_:), v13);
  v76[0] = v73;
  v76[1] = v74;
  v23 = sub_100017F9C(v73, v74);
  static ProtocolVersion.current.getter(v23);
  v24 = v75;
  MessageBody.init<A>(serializable:version:)(v76, v9, &type metadata for Data, &protocol witness table for Data);
  if (v24)
    return (*(uint64_t (**)(_DWORD *, uint64_t))(v14 + 8))(v16, v13);
  v26 = v68;
  v74 = v17;
  v75 = 0;
  v73 = (uint64_t)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v69;
  v28 = Message.init(operation:content:complete:)(v16, v12, 1);
  v29 = v70;
  static Log.network.getter(v28);
  v30 = (uint64_t (*)(char *, char *, uint64_t))v72[2];
  v31 = v67;
  v32 = v30(v71, v22, v67);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  v35 = v22;
  if (os_log_type_enabled(v33, (os_log_type_t)v34))
  {
    v61 = v34;
    v62 = v33;
    v63 = v22;
    v37 = v71;
    v36 = v72;
    v38 = swift_slowAlloc(22, -1);
    v60 = swift_slowAlloc(64, -1);
    v76[0] = v60;
    *(_DWORD *)v38 = 136315394;
    if (v26)
    {
      v39 = 0xD000000000000010;
      if (v26 == 1)
        v40 = 0x8000000100094240;
      else
        v40 = 0x8000000100094220;
    }
    else
    {
      v40 = 0xEE00796461655263;
      v39 = 0x6E79536D75626C61;
    }
    v77 = sub_100021438(v39, v40, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v38 + 4, v38 + 12);
    v46 = swift_bridgeObjectRelease(v40);
    *(_WORD *)(v38 + 12) = 2080;
    v47 = Message.shortDescription.getter(v46);
    v49 = v48;
    v77 = sub_100021438(v47, v48, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v38 + 14, v38 + 22);
    swift_bridgeObjectRelease(v49);
    v43 = (void (*)(char *, uint64_t))v36[1];
    v43(v37, v31);
    v50 = v62;
    _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v61, "[NMC] Sending event %s: %s", (uint8_t *)v38, 0x16u);
    v51 = v60;
    swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v38, -1, -1);

    v42 = v36;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v70, v69);
    v44 = v65;
    v45 = (uint64_t)v66;
    v35 = v63;
  }
  else
  {
    v41 = v33;
    v42 = v72;
    v43 = (void (*)(char *, uint64_t))v72[1];
    v43(v71, v31);

    (*(void (**)(char *, uint64_t))(v64 + 8))(v29, v27);
    v44 = v65;
    v45 = (uint64_t)v66;
  }
  v52 = v73;
  v53 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v45, 1, 1, v53);
  v30((char *)v52, v35, v31);
  v54 = *((unsigned __int8 *)v42 + 80);
  v55 = (v54 + 40) & ~v54;
  v56 = (char *)swift_allocObject(&unk_1000AE300, v55 + v74, v54 | 7);
  v57 = v52;
  v58 = (uint64_t)v56;
  *((_QWORD *)v56 + 2) = 0;
  *((_QWORD *)v56 + 3) = 0;
  *((_QWORD *)v56 + 4) = v44;
  ((void (*)(char *, uint64_t, uint64_t))v42[4])(&v56[v55], v57, v31);
  swift_retain(v44);
  v59 = sub_100057608(v45, (uint64_t)&unk_1000B3178, v58);
  swift_release(v59);
  return ((uint64_t (*)(char *, uint64_t))v43)(v35, v31);
}

_QWORD *sub_1000238F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v25 = sub_10000629C(&qword_1000B25D8);
  v3 = *(_QWORD *)(v25 - 8);
  v4 = __chkstk_darwin(v25);
  v6 = (_QWORD *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (char *)v21 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = &_swiftEmptyArrayStorage;
  if (v9)
  {
    v21[1] = v1;
    v26 = &_swiftEmptyArrayStorage;
    sub_10004D81C(0, v9, 0);
    v11 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    v24 = *(_QWORD *)(v3 + 72);
    v12 = type metadata accessor for UUID(0);
    v23 = *(_QWORD *)(v12 - 8);
    v22 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
    do
    {
      v13 = v25;
      v14 = *(int *)(v25 + 48);
      v15 = &v8[v14];
      v16 = *v11;
      *(_QWORD *)v8 = *v11;
      v22(&v8[v14], (char *)v11 + v14, v12);
      v17 = (char *)v6 + *(int *)(v13 + 48);
      *v6 = v16;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v17, v15, v12);
      sub_10000EA70((uint64_t)v6, &qword_1000B25D8);
      v10 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
      {
        sub_10004D81C(0, v10[2] + 1, 1);
        v10 = v26;
      }
      v19 = v10[2];
      v18 = v10[3];
      if (v19 >= v18 >> 1)
      {
        sub_10004D81C(v18 > 1, v19 + 1, 1);
        v10 = v26;
      }
      v11 = (uint64_t *)((char *)v11 + v24);
      v10[2] = v19 + 1;
      v10[v19 + 4] = v16;
      --v9;
    }
    while (v9);
  }
  return v10;
}

void *sub_100023AD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  void *result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = (void *)swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_23;
      v13 = *(_QWORD *)(v2 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_23;
        v13 = *(_QWORD *)(v2 + 8 * v8);
        if (!v13)
        {
          v8 = v12 + 3;
          if (v12 + 3 >= v6)
            goto LABEL_23;
          v13 = *(_QWORD *)(v2 + 8 * v8);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_5:
    v11 = swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10));
    result = (void *)sub_100017970(v11);
  }
  v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_23:
    swift_release(a1);
    return &_swiftEmptyArrayStorage;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100023C40(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  void *v39;

  v30 = sub_10000629C(&qword_1000B25D8);
  v35 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = &_swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 64);
  v28 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v4;
  v31 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v9 = 0;
  v29 = a1;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_22;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v31)
      goto LABEL_29;
    v13 = *(_QWORD *)(v28 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v31)
        goto LABEL_29;
      v13 = *(_QWORD *)(v28 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v31)
          goto LABEL_29;
        v13 = *(_QWORD *)(v28 + 8 * v9);
        if (!v13)
        {
          v9 = v12 + 3;
          if (v12 + 3 >= v31)
            goto LABEL_29;
          v13 = *(_QWORD *)(v28 + 8 * v9);
          if (!v13)
          {
            v14 = v12 + 4;
            if (v14 >= v31)
            {
LABEL_29:
              swift_release(a1);
              return (uint64_t)v39;
            }
            v13 = *(_QWORD *)(v28 + 8 * v14);
            v9 = v14;
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_21:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_22:
    v15 = 8 * v11;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + v15);
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v33 = v7;
      v34 = v9;
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + v15);
      v38 = (unint64_t *)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v16);
      sub_10004D7F0(0, v17, 0);
      v18 = v30;
      v19 = v38;
      v36 = type metadata accessor for UUID(0);
      v20 = *(_QWORD *)(v36 - 8);
      v21 = *(unsigned __int8 *)(v20 + 80);
      v32 = v16;
      v22 = v16 + ((v21 + 32) & ~v21);
      v23 = *(_QWORD *)(v20 + 72);
      v24 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
      do
      {
        v24(&v3[*(int *)(v18 + 48)], v22, v36);
        *(_QWORD *)v3 = v37;
        v38 = v19;
        v26 = v19[2];
        v25 = v19[3];
        if (v26 >= v25 >> 1)
        {
          sub_10004D7F0(v25 > 1, v26 + 1, 1);
          v18 = v30;
          v19 = v38;
        }
        v19[2] = v26 + 1;
        sub_10003DBD0((uint64_t)v3, (uint64_t)v19+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72) * v26);
        v22 += v23;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease(v32);
      a1 = v29;
      v7 = v33;
      v9 = v34;
    }
    else
    {
      v19 = (unint64_t *)&_swiftEmptyArrayStorage;
    }
    result = sub_10001795C((uint64_t)v19);
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v31)
      goto LABEL_29;
    v13 = *(_QWORD *)(v28 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100023F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_100023F70, 0, 0);
}

uint64_t sub_100023F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v0 + 32) = static CommunicationActor.shared.getter(v1);
  v2 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_100023FFC, v3, v4);
}

uint64_t sub_100023FFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  sub_100057D70(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024038()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100024050, 0, 0);
}

uint64_t sub_100024050()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(uint64_t **)(v0 + 16);
  v2 = *v1;
  *(_QWORD *)(v0 + 24) = *v1;
  if ((v1[1] & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2 & 1);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
  swift_bridgeObjectRetain(v2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 40) = v5;
  *v5 = v0;
  v5[1] = sub_100024138;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 48, 0, 0, 0x65706F7250746567, 0xED00002928797472, sub_10003D358, v3, &type metadata for Bool);
}

uint64_t sub_100024138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  sub_10001A8E4(v2, 1);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000241A4, 0, 0);
}

uint64_t sub_1000241A4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 48));
}

uint64_t sub_1000241B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v6 = sub_10000629C(&qword_1000B3168);
  v7 = sub_10000629C(&qword_1000B28E0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v6, v10 + *(_QWORD *)(v8 + 72), v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_100096430;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11 + v10, a1, v7);
  swift_bridgeObjectRetain(a2);
  sub_1000177E4(v11);
  result = sub_10001A8E4(*(_QWORD *)a3, *(_BYTE *)(a3 + 8));
  *(_QWORD *)a3 = a2;
  *(_BYTE *)(a3 + 8) = 1;
  return result;
}

uint64_t sub_1000242C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  double v8;
  uint64_t v10;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = static TestProperties.fixedDay.getter(v2);
  if ((v6 & 1) != 0)
  {
    v7 = Date.init()(result);
    v8 = Date.timeIntervalSinceReferenceDate.getter(v7);
    result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) != 0)
    {
      if (v8 > -9.22337204e18)
      {
        if (v8 < 9.22337204e18)
        {
          result = static TestProperties.albumRotationEpoch.getter(result);
          if (result)
          {
            if ((uint64_t)v8 != 0x8000000000000000 || result != -1)
              return (uint64_t)v8 / result;
LABEL_16:
            __break(1u);
            return result;
          }
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1000243B4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000243CC, 0, 0);
}

uint64_t sub_1000243CC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = static Platform.current.getter();
  v2 = Platform.rawValue.getter(v1 & 1);
  if (v2 != Platform.rawValue.getter(0))
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v0 + 24) = v4;
  swift_retain(v3);
  return swift_task_switch(sub_100024444, v4, 0);
}

uint64_t sub_100024444()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_10008E888(1, (uint64_t)&unk_1000B3108, v1);
  swift_release(v1);
  return swift_task_switch(sub_100024498, 0, 0);
}

uint64_t sub_100024498()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain(*(_QWORD *)(v0 + 16));
  return swift_task_switch(sub_1000244D4, v1, 0);
}

uint64_t sub_1000244D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_10008E97C(3, (uint64_t)&unk_1000B3118, v1);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002451C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100024534, 0, 0);
}

uint64_t sub_100024534()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_10003D074();
  *(_QWORD *)(v0 + 24) = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_1000B3124);
  *(_QWORD *)(v0 + 32) = v2;
  *v2 = v0;
  v2[1] = sub_10002458C;
  return sub_1000248CC(v1);
}

uint64_t sub_10002458C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 32);
  *(_QWORD *)(*v1 + 40) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10002462C;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
    v4 = sub_1000245F8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000245F8()
{
  uint64_t v0;

  sub_100022934(2uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002462C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024660(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100024678, 0, 0);
}

uint64_t sub_100024678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = sub_10003D074();
  v2 = v1;
  *(_QWORD *)(v0 + 24) = v1;
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 32) = v3;
  if (v3)
  {
    v4 = (_QWORD *)swift_task_alloc(dword_1000B3124);
    *(_QWORD *)(v0 + 40) = v4;
    *v4 = v0;
    v4[1] = sub_100024718;
    return sub_1000248CC(v2);
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    return (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(v0 + 8))(0x28093E61EE400000, 195, *(_QWORD *)(v0 + 32) != 0);
  }
}

uint64_t sub_100024718()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100024850;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
    v4 = sub_100024784;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100024784()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1000B3128 + dword_1000B3128);
  v1 = (_QWORD *)swift_task_alloc(unk_1000B312C);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_1000247E4;
  return v3();
}

uint64_t sub_1000247E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch(sub_100024884, 0, 0);
}

uint64_t sub_100024850()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024884()
{
  uint64_t v0;

  sub_100022934(2uLL);
  return (*(uint64_t (**)(_QWORD, _QWORD, BOOL))(v0 + 8))(0, 0, *(_QWORD *)(v0 + 32) != 0);
}

uint64_t sub_1000248CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for ShuffleID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[6] = swift_task_alloc(v5);
  v2[7] = swift_task_alloc(v5);
  return swift_task_switch(sub_10002493C, 0, 0);
}

uint64_t sub_10002493C()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[8] = *(_QWORD *)(v0[3] + 32);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to GalleryDatabase.deleteAll() + 1));
  v0[9] = v1;
  *v1 = v0;
  v1[1] = sub_100024990;
  return GalleryDatabase.deleteAll()();
}

uint64_t sub_100024990()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_100024A08, 0, 0);
  v6 = v2 + 48;
  v5 = *(_QWORD *)(v2 + 48);
  swift_task_dealloc(*(_QWORD *)(v6 + 8));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100024A08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v2 + 32);
  *(_BYTE *)(v0 + 112) = v3;
  v4 = -1;
  v5 = -1 << v3;
  if (-(-1 << v3) < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v2 + 56);
  v7 = (_QWORD *)swift_bridgeObjectRetain(v2);
  if (v6)
  {
    v8 = 0;
    v9 = __clz(__rbit64(v6));
    v10 = (v6 - 1) & v6;
LABEL_5:
    *(_QWORD *)(v0 + 80) = v8;
    *(_QWORD *)(v0 + 88) = v10;
    v11 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v0 + 56);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 16))(v12, v7[6] + *(_QWORD *)(v1 + 72) * v9, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v11, v12, v13);
    v14 = (_QWORD *)swift_task_alloc(async function pointer to GalleryDatabase.insert(id:)[1]);
    *(_QWORD *)(v0 + 96) = v14;
    *v14 = v0;
    v14[1] = sub_100024BD4;
    return GalleryDatabase.insert(id:)(*(_QWORD *)(v0 + 48));
  }
  v16 = 63 - v5;
  if ((unint64_t)(63 - v5) > 0x7F)
  {
    v17 = v7[8];
    if (v17)
    {
      v8 = 1;
LABEL_9:
      v10 = (v17 - 1) & v17;
      v9 = __clz(__rbit64(v17)) + (v8 << 6);
      goto LABEL_5;
    }
    if (v16 >= 0xC0)
    {
      v17 = v7[9];
      if (v17)
      {
        v8 = 2;
        goto LABEL_9;
      }
      if (v16 >= 0x100)
      {
        v17 = v7[10];
        if (v17)
        {
          v8 = 3;
          goto LABEL_9;
        }
        if (v16 >= 0x140)
        {
          v17 = v7[11];
          if (v17)
          {
            v8 = 4;
            goto LABEL_9;
          }
          v18 = 0;
          v19 = v16 >> 6;
          if (v19 <= 5)
            v19 = 5;
          v20 = v19 - 5;
          while (v20 != v18)
          {
            v17 = v7[v18++ + 12];
            if (v17)
            {
              v8 = v18 + 4;
              goto LABEL_9;
            }
          }
        }
      }
    }
  }
  v21 = *(_QWORD *)(v0 + 48);
  v22 = *(_QWORD *)(v0 + 56);
  swift_release(v7);
  swift_task_dealloc(v22);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100024DEC;
  else
    v3 = sub_100024C38;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100024C38()
{
  uint64_t v0;
  uint64_t result;
  int64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  if (v3)
  {
    v4 = (v3 - 1) & v3;
    v5 = __clz(__rbit64(v3)) | (v2 << 6);
    result = *(_QWORD *)(v0 + 16);
LABEL_3:
    *(_QWORD *)(v0 + 80) = v2;
    *(_QWORD *)(v0 + 88) = v4;
    v6 = *(_QWORD *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))(v7, *(_QWORD *)(result + 48) + *(_QWORD *)(v9 + 72) * v5, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v6, v7, v8);
    v10 = (_QWORD *)swift_task_alloc(async function pointer to GalleryDatabase.insert(id:)[1]);
    *(_QWORD *)(v0 + 96) = v10;
    *v10 = v0;
    v10[1] = sub_100024BD4;
    return GalleryDatabase.insert(id:)(*(_QWORD *)(v0 + 48));
  }
  v11 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
  }
  else
  {
    v12 = (unint64_t)((1 << *(_BYTE *)(v0 + 112)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 16);
    if (v11 >= v12)
      goto LABEL_18;
    v13 = result + 56;
    v14 = *(_QWORD *)(result + 56 + 8 * v11);
    ++v2;
    if (v14)
    {
LABEL_7:
      v4 = (v14 - 1) & v14;
      v5 = __clz(__rbit64(v14)) + (v2 << 6);
      goto LABEL_3;
    }
    v2 = v11 + 1;
    if (v11 + 1 >= v12)
      goto LABEL_18;
    v14 = *(_QWORD *)(v13 + 8 * v2);
    if (v14)
      goto LABEL_7;
    v2 = v11 + 2;
    if (v11 + 2 >= v12)
      goto LABEL_18;
    v14 = *(_QWORD *)(v13 + 8 * v2);
    if (v14)
      goto LABEL_7;
    v15 = v11 + 3;
    if (v15 >= v12)
    {
LABEL_18:
      v16 = *(_QWORD *)(v0 + 48);
      v17 = *(_QWORD *)(v0 + 56);
      swift_release(result);
      swift_task_dealloc(v17);
      swift_task_dealloc(v16);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v14 = *(_QWORD *)(v13 + 8 * v15);
    if (v14)
    {
      v2 = v15;
      goto LABEL_7;
    }
    while (1)
    {
      v2 = v15 + 1;
      if (__OFADD__(v15, 1))
        break;
      if (v2 >= v12)
        goto LABEL_18;
      v14 = *(_QWORD *)(v13 + 8 * v2);
      ++v15;
      if (v14)
        goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100024DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024E44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1[17] = v0;
  v2 = sub_10000629C(&qword_1000B3130);
  v1[18] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[19] = v3;
  v1[20] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ShuffleID(0);
  v1[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[22] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v6);
  v1[24] = swift_task_alloc(v6);
  v1[25] = swift_task_alloc(v6);
  v1[26] = swift_task_alloc(v6);
  v1[27] = swift_task_alloc(v6);
  v7 = type metadata accessor for Logger(0);
  v1[28] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[29] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[30] = swift_task_alloc(v9);
  v1[31] = swift_task_alloc(v9);
  v1[32] = swift_task_alloc(v9);
  v1[33] = swift_task_alloc(v9);
  v1[34] = swift_task_alloc(v9);
  v1[35] = swift_task_alloc(v9);
  v10 = type metadata accessor for CommunicationActor(0);
  v1[36] = v10;
  v11 = static CommunicationActor.shared.getter(v10);
  v1[37] = v11;
  v1[38] = static CommunicationActor.shared.getter(v11);
  v12 = type metadata accessor for GalleryDatabase(0);
  v13 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryList()[1]);
  v1[39] = v14;
  *v14 = v1;
  v14[1] = sub_100024FE4;
  return dispatch thunk of PhotosFaceIDDatabase.queryList()(v12, v13);
}

uint64_t sub_100024FE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 312);
  v3[40] = a1;
  v3[41] = v1;
  swift_task_dealloc(v4);
  v5 = v3[36];
  v6 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  if (v1)
  {
    v3[46] = v6;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
    v9 = v8;
    v10 = sub_10002592C;
  }
  else
  {
    v3[42] = v6;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
    v9 = v11;
    v10 = sub_1000250AC;
  }
  return swift_task_switch(v10, v7, v9);
}

uint64_t sub_1000250AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[42];
  v2 = v0[36];
  swift_release(v0[38]);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  v0[43] = v3;
  v0[44] = v4;
  return swift_task_switch(sub_10002510C, v3, v4);
}

uint64_t sub_10002510C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(void);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *log;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[2];

  v2 = *(_QWORD *)(v1 + 320);
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 + 360) = v3;
  if (!v3)
  {
    v22 = *(_QWORD *)(v1 + 136);
    swift_release(*(_QWORD *)(v1 + 296));
    v23 = swift_bridgeObjectRelease(v2);
    static Log.session.getter(v23);
    v24 = swift_retain(v22);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(_QWORD *)(v1 + 280);
    v29 = *(_QWORD *)(v1 + 224);
    v30 = *(_QWORD *)(v1 + 232);
    v31 = *(_QWORD *)(v1 + 136);
    if (v27)
    {
      v110 = *(_QWORD *)(v1 + 232);
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v105 = v29;
      v33 = swift_slowAlloc(32, -1);
      v114[0] = v33;
      *(_DWORD *)v32 = 136315138;
      v34 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v31 + 16));
      v36 = v35;
      *(_QWORD *)(v1 + 128) = sub_100021438(v34, v35, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v36);
      swift_release(v31);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No %s faces. Exiting.", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v28, v105);
    }
    else
    {
      swift_release(*(_QWORD *)(v1 + 136));

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    }
    v84 = *(_QWORD *)(v1 + 272);
    v86 = *(_QWORD *)(v1 + 256);
    v85 = *(_QWORD *)(v1 + 264);
    v88 = *(_QWORD *)(v1 + 240);
    v87 = *(_QWORD *)(v1 + 248);
    v90 = *(_QWORD *)(v1 + 208);
    v89 = *(_QWORD *)(v1 + 216);
    v92 = *(_QWORD *)(v1 + 192);
    v91 = *(_QWORD *)(v1 + 200);
    v108 = *(_QWORD *)(v1 + 184);
    v113 = *(_QWORD *)(v1 + 160);
    swift_task_dealloc(*(_QWORD *)(v1 + 280));
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v108);
    swift_task_dealloc(v113);
    v60 = *(uint64_t (**)(void))(v1 + 8);
    return v60();
  }
  v4 = *(_QWORD *)(v1 + 136);
  static Log.session.getter(a1);
  swift_bridgeObjectRetain_n(v2, 2);
  v5 = swift_retain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v1 + 320);
  v10 = *(_QWORD *)(v1 + 272);
  v11 = *(_QWORD *)(v1 + 224);
  v109 = *(_QWORD *)(v1 + 232);
  if (v8)
  {
    v100 = *(_QWORD *)(v1 + 168);
    v12 = *(_QWORD *)(v1 + 136);
    v13 = swift_slowAlloc(32, -1);
    *(_QWORD *)type = v11;
    v14 = swift_slowAlloc(64, -1);
    v114[0] = v14;
    *(_DWORD *)v13 = 134218498;
    *(_QWORD *)(v1 + 104) = *(_QWORD *)(v2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2080;
    v15 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v12 + 16));
    v17 = v16;
    *(_QWORD *)(v1 + 112) = sub_100021438(v15, v16, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v17);
    swift_release(v12);
    *(_WORD *)(v13 + 22) = 2080;
    v18 = Array.description.getter(v9, v100);
    v20 = v19;
    swift_bridgeObjectRelease(v9);
    *(_QWORD *)(v1 + 120) = sub_100021438(v18, v20, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Processing %ld %s: %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v21 = *(void (**)(uint64_t, uint64_t))(v109 + 8);
    v21(v10, *(_QWORD *)type);
  }
  else
  {
    v37 = *(_QWORD *)(v1 + 136);
    swift_bridgeObjectRelease_n(v9, 2);
    swift_release(v37);

    v21 = *(void (**)(uint64_t, uint64_t))(v109 + 8);
    v21(v10, v11);
  }
  *(_QWORD *)(v1 + 376) = v21;
  v39 = *(_QWORD *)(v1 + 168);
  v38 = *(_QWORD *)(v1 + 176);
  v40 = *(_DWORD *)(v38 + 80);
  *(_DWORD *)(v1 + 520) = v40;
  v41 = *(_QWORD *)(v1 + 320);
  v42 = *(_QWORD *)(v1 + 328);
  *(_QWORD *)(v1 + 432) = v21;
  *(_QWORD *)(v1 + 440) = 0;
  *(_QWORD *)(v1 + 416) = v21;
  *(_QWORD *)(v1 + 424) = v21;
  *(_QWORD *)(v1 + 448) = 1;
  v43 = *(_QWORD *)(v1 + 216);
  v44 = v41 + ((v40 + 32) & ~(unint64_t)v40);
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
  *(_QWORD *)(v1 + 456) = v45;
  swift_bridgeObjectRetain(v41);
  v46 = v45(v43, v44, v39);
  v47 = static Task<>.checkCancellation()(v46);
  v48 = *(_QWORD *)(v1 + 168);
  if (v42)
  {
    v49 = *(_QWORD *)(v1 + 320);
    v50 = *(_QWORD *)(v1 + 216);
    v51 = *(_QWORD *)(v1 + 176);
    swift_release(*(_QWORD *)(v1 + 296));
    swift_bridgeObjectRelease(v49);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v48);
    swift_bridgeObjectRelease(v49);
    v52 = *(_QWORD *)(v1 + 272);
    v54 = *(_QWORD *)(v1 + 256);
    v53 = *(_QWORD *)(v1 + 264);
    v56 = *(_QWORD *)(v1 + 240);
    v55 = *(_QWORD *)(v1 + 248);
    v58 = *(_QWORD *)(v1 + 208);
    v57 = *(_QWORD *)(v1 + 216);
    v59 = *(_QWORD *)(v1 + 200);
    v106 = *(_QWORD *)(v1 + 192);
    v107 = *(_QWORD *)(v1 + 184);
    v111 = *(_QWORD *)(v1 + 160);
    swift_task_dealloc(*(_QWORD *)(v1 + 280));
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v111);
    v60 = *(uint64_t (**)(void))(v1 + 8);
    return v60();
  }
  v62 = *(_QWORD *)(v1 + 208);
  v61 = *(_QWORD *)(v1 + 216);
  v63 = *(_QWORD *)(v1 + 136);
  static Log.photos.getter(v47);
  v45(v62, v61, v48);
  v64 = swift_retain(v63);
  v65 = Logger.logObject.getter(v64);
  v66 = static os_log_type_t.default.getter();
  v67 = os_log_type_enabled(v65, v66);
  v68 = *(_QWORD *)(v1 + 256);
  v69 = *(_QWORD *)(v1 + 224);
  v70 = *(_QWORD *)(v1 + 208);
  if (v67)
  {
    typea = v66;
    v98 = *(_QWORD *)(v1 + 200);
    v99 = *(_QWORD *)(v1 + 176);
    log = v65;
    v71 = *(_QWORD *)(v1 + 168);
    v72 = *(_QWORD *)(v1 + 136);
    v112 = *(_QWORD *)(v1 + 224);
    v73 = swift_slowAlloc(22, -1);
    v101 = swift_slowAlloc(64, -1);
    v114[0] = v101;
    *(_DWORD *)v73 = 136315394;
    v74 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v72 + 16));
    v76 = v75;
    *(_QWORD *)(v1 + 88) = sub_100021438(v74, v75, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v73 + 4, v73 + 12);
    swift_bridgeObjectRelease(v76);
    swift_release(v72);
    *(_WORD *)(v73 + 12) = 2080;
    v45(v98, v70, v71);
    v77 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
    v77(v70, v71);
    v78 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v79 = dispatch thunk of CustomStringConvertible.description.getter(v71, v78);
    v81 = v80;
    v77(v98, v71);
    *(_QWORD *)(v1 + 96) = sub_100021438(v79, v81, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v73 + 14, v73 + 22);
    swift_bridgeObjectRelease(v81);
    _os_log_impl((void *)&_mh_execute_header, log, typea, "Processing %s face %s", (uint8_t *)v73, 0x16u);
    swift_arrayDestroy(v101, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v101, -1, -1);
    swift_slowDealloc(v73, -1, -1);

    v82 = v68;
    v83 = v112;
  }
  else
  {
    v94 = *(_QWORD *)(v1 + 136);
    v77 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 176) + 8);
    v77(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 168));
    swift_release(v94);

    v82 = v68;
    v83 = v69;
  }
  v95 = ((uint64_t (*)(uint64_t, uint64_t))v21)(v82, v83);
  *(_QWORD *)(v1 + 464) = v77;
  v96 = static TestProperties.bufferSize.getter(v95);
  v97 = (_QWORD *)swift_task_alloc(dword_1000B3144);
  *(_QWORD *)(v1 + 472) = v97;
  *v97 = v1;
  v97[1] = sub_100025AB0;
  return sub_10002BCDC(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 216), v96);
}

uint64_t sub_10002592C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[46];
  v2 = v0[36];
  swift_release(v0[38]);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_10003E450, v3, v4);
}

uint64_t sub_10002598C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[40]);
    v4 = v2[43];
    v5 = v2[44];
    v6 = sub_10003E454;
  }
  else
  {
    v4 = v2[43];
    v5 = v2[44];
    v6 = sub_1000259F8;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000259F8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000B3764);
  *(_QWORD *)(v0 + 400) = v1;
  *v1 = v0;
  v1[1] = sub_100025A44;
  return sub_1000501C0();
}

uint64_t sub_100025A44()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  *(_QWORD *)(*(_QWORD *)v1 + 408) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[40]);
    v4 = v2[43];
    v5 = v2[44];
    v6 = sub_10003E458;
  }
  else
  {
    v4 = v2[43];
    v5 = v2[44];
    v6 = sub_10003E434;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100025AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  v3 = *(_QWORD **)v1;
  v3[60] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100025BE8, v3[43], v3[44]);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.collect()[1]);
  v3[61] = v5;
  v6 = sub_100006454(&qword_1000B3150, &qword_1000B3130, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
  *v5 = v3;
  v5[1] = sub_100025B70;
  return AsyncSequence.collect()(v3[18], v6);
}

uint64_t sub_100025B70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 488);
  v3[62] = a1;
  v3[63] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v3[19] + 8))(v3[20], v3[18]);
  if (v1)
    v5 = sub_100026A7C;
  else
    v5 = sub_100026304;
  return swift_task_switch(v5, v3[43], v3[44]);
}

uint64_t sub_100025BE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t (*v37)(uint64_t, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void (*v58)(unint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  os_log_t log;
  NSObject *loga;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, _QWORD);
  uint64_t v81[2];

  v2 = *(_QWORD *)(v1 + 480);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
  v4 = *(_QWORD *)(v1 + 216);
  v5 = *(_QWORD *)(v1 + 184);
  v6 = *(_QWORD *)(v1 + 168);
  static Log.photos.getter(a1);
  v3(v5, v4, v6);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
    v71 = v11;
    *(_QWORD *)type = *(_QWORD *)(v1 + 224);
    v77 = *(_QWORD *)(v1 + 240);
    v78 = *(_QWORD *)(v1 + 216);
    v80 = *(void (**)(uint64_t, _QWORD))(v1 + 424);
    v12 = *(_QWORD *)(v1 + 200);
    v13 = *(_QWORD *)(v1 + 184);
    v14 = *(_QWORD *)(v1 + 168);
    v15 = swift_slowAlloc(22, -1);
    v69 = (uint64_t *)swift_slowAlloc(8, -1);
    log = (os_log_t)swift_slowAlloc(32, -1);
    v81[0] = (uint64_t)log;
    *(_DWORD *)v15 = 136315394;
    v10(v12, v13, v14);
    v11(v13, v14);
    v16 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v19 = v18;
    v11(v12, v14);
    *(_QWORD *)(v1 + 48) = sub_100021438(v17, v19, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2112;
    swift_errorRetain(v2);
    v20 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v1 + 56) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v15 + 14, v15 + 22);
    *v69 = v20;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to process face %s with error %@", (uint8_t *)v15, 0x16u);
    v21 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v69, 1, v21);
    swift_slowDealloc(v69, -1, -1);
    swift_arrayDestroy(log, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(log, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v2);
    v80(v77, *(_QWORD *)type);
    result = v71(v78, v14);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 424);
    v24 = v23;
  }
  else
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
    v26 = *(void (**)(uint64_t, uint64_t))(v1 + 432);
    v27 = *(_QWORD *)(v1 + 240);
    v29 = *(_QWORD *)(v1 + 216);
    v28 = *(_QWORD *)(v1 + 224);
    v30 = *(_QWORD *)(v1 + 168);
    v25(*(_QWORD *)(v1 + 184), v30);

    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    v26(v27, v28);
    result = v25(v29, v30);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 424);
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 432);
  }
  v31 = *(_QWORD *)(v1 + 448);
  *(_QWORD *)(v1 + 512) = *(_QWORD *)(v1 + 440);
  if (v31 == *(_QWORD *)(v1 + 360))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 320));
    v32 = (_QWORD *)swift_task_alloc(dword_1000B314C);
    *(_QWORD *)(v1 + 384) = v32;
    *v32 = v1;
    v32[1] = sub_10002598C;
    return sub_100032824();
  }
  else
  {
    *(_QWORD *)(v1 + 424) = v23;
    *(_QWORD *)(v1 + 432) = v24;
    *(_QWORD *)(v1 + 448) = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
    }
    else
    {
      v33 = *(_QWORD *)(v1 + 216);
      v34 = *(_QWORD *)(v1 + 168);
      v35 = *(_QWORD *)(v1 + 176);
      v36 = *(_QWORD *)(v1 + 320)
          + ((*(unsigned __int8 *)(v1 + 520) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 520))
          + *(_QWORD *)(v35 + 72) * v31;
      v37 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v35 + 16);
      *(_QWORD *)(v1 + 456) = v37;
      v38 = v37(v33, v36, v34);
      v39 = static Task<>.checkCancellation()(v38);
      v40 = *(_QWORD *)(v1 + 168);
      v42 = *(_QWORD *)(v1 + 208);
      v41 = *(_QWORD *)(v1 + 216);
      v43 = *(_QWORD *)(v1 + 136);
      static Log.photos.getter(v39);
      v37(v42, v41, v40);
      v44 = swift_retain(v43);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.default.getter();
      v47 = os_log_type_enabled(v45, v46);
      v48 = *(_QWORD *)(v1 + 256);
      v49 = *(_QWORD *)(v1 + 224);
      v50 = *(_QWORD *)(v1 + 208);
      if (v47)
      {
        typea = v46;
        v51 = *(_QWORD *)(v1 + 200);
        v70 = *(_QWORD *)(v1 + 176);
        loga = v45;
        v52 = *(_QWORD *)(v1 + 168);
        v53 = *(_QWORD *)(v1 + 136);
        v79 = *(_QWORD *)(v1 + 224);
        v54 = swift_slowAlloc(22, -1);
        v72 = swift_slowAlloc(64, -1);
        v81[0] = v72;
        *(_DWORD *)v54 = 136315394;
        v55 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v53 + 16));
        v57 = v56;
        *(_QWORD *)(v1 + 88) = sub_100021438(v55, v56, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v54 + 4, v54 + 12);
        swift_release(v53);
        swift_bridgeObjectRelease(v57);
        *(_WORD *)(v54 + 12) = 2080;
        v37(v51, v50, v52);
        v58 = *(void (**)(unint64_t, uint64_t))(v70 + 8);
        v58(v50, v52);
        v59 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
        v60 = dispatch thunk of CustomStringConvertible.description.getter(v52, v59);
        v62 = v61;
        v58(v51, v52);
        *(_QWORD *)(v1 + 96) = sub_100021438(v60, v62, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v54 + 14, v54 + 22);
        swift_bridgeObjectRelease(v62);
        _os_log_impl((void *)&_mh_execute_header, loga, typea, "Processing %s face %s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v54, -1, -1);

        v63 = v48;
        v64 = v79;
      }
      else
      {
        v65 = *(_QWORD *)(v1 + 136);
        v58 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 + 176) + 8);
        v58(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 168));

        swift_release(v65);
        v63 = v48;
        v64 = v49;
      }
      v66 = v24(v63, v64);
      *(_QWORD *)(v1 + 464) = v58;
      v67 = static TestProperties.bufferSize.getter(v66);
      v68 = (_QWORD *)swift_task_alloc(dword_1000B3144);
      *(_QWORD *)(v1 + 472) = v68;
      *v68 = v1;
      v68[1] = sub_100025AB0;
      return sub_10002BCDC(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 216), v67);
    }
  }
  return result;
}

uint64_t sub_100026304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (**v24)(uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t (*v46)(uint64_t, unint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void (*v79)(unint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  os_log_type_t v96;
  uint64_t v97;
  os_log_t v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108[2];

  v1 = v0 + 88;
  v2 = *(_QWORD *)(v0 + 496);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 136);
  ((void (*)(void))static Log.photos.getter)();
  v3(v5, v4, v6);
  swift_bridgeObjectRetain_n(v2, 2);
  v8 = swift_retain(v7);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = *(_QWORD *)(v0 + 496);
    v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
    v95 = *(void (**)(uint64_t, uint64_t))(v0 + 464);
    v106 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v100 = *(_QWORD *)(v0 + 224);
    v103 = *(_QWORD *)(v0 + 248);
    v90 = *(_QWORD *)(v0 + 192);
    v91 = *(_QWORD *)(v0 + 200);
    v12 = *(_QWORD *)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 136);
    v14 = swift_slowAlloc(32, -1);
    v98 = (os_log_t)swift_slowAlloc(64, -1);
    v108[0] = (uint64_t)v98;
    *(_DWORD *)v14 = 136315650;
    v15 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v13 + 16));
    v17 = v16;
    *(_QWORD *)(v0 + 64) = sub_100021438(v15, v16, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v14 + 4, v14 + 12);
    swift_release(v13);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v14 + 12) = 2048;
    v18 = *(_QWORD *)(v11 + 16);
    swift_bridgeObjectRelease(v11);
    *(_QWORD *)(v0 + 72) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v14 + 22) = 2080;
    v93(v91, v90, v12);
    v95(v90, v12);
    v19 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v12, v19);
    v22 = v21;
    v95(v91, v12);
    *(_QWORD *)(v0 + 80) = sub_100021438(v20, v22, v108);
    v1 = v0 + 88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Processed %s %ld photos from %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v98, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v98, -1, -1);
    v23 = v14;
    v24 = (uint64_t (**)(uint64_t, uint64_t))(v0 + 376);
    swift_slowDealloc(v23, -1, -1);

    v106(v103, v100);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 496);
    v24 = (uint64_t (**)(uint64_t, uint64_t))(v0 + 416);
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v27 = *(_QWORD *)(v0 + 248);
    v28 = *(_QWORD *)(v0 + 224);
    v29 = *(_QWORD *)(v0 + 136);
    (*(void (**)(_QWORD, _QWORD))(v0 + 464))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));

    swift_release(v29);
    swift_bridgeObjectRelease_n(v25, 2);
    v26(v27, v28);
  }
  v30 = *v24;
  v31 = *(_QWORD *)(v0 + 496);
  v32 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 464);
  v33 = *(_QWORD *)(v0 + 440);
  v34 = *(_QWORD *)(v0 + 216);
  v35 = *(_QWORD *)(v0 + 168);
  v36 = *(_QWORD *)(v31 + 16);
  swift_bridgeObjectRelease(v31);
  result = v32(v34, v35);
  v38 = v33 + v36;
  if (__OFADD__(v33, v36))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  v39 = *(_QWORD *)(v0 + 504);
  *(_QWORD *)(v0 + 512) = v38;
  v40 = *(_QWORD *)(v0 + 448);
  if (v40 == *(_QWORD *)(v0 + 360))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 320));
    v41 = (_QWORD *)swift_task_alloc(dword_1000B314C);
    *(_QWORD *)(v0 + 384) = v41;
    *v41 = v0;
    v41[1] = sub_10002598C;
    return sub_100032824();
  }
  *(_QWORD *)(v0 + 432) = v30;
  *(_QWORD *)(v0 + 440) = v38;
  *(_QWORD *)(v0 + 416) = v30;
  *(_QWORD *)(v0 + 424) = v30;
  *(_QWORD *)(v0 + 448) = v40 + 1;
  if (__OFADD__(v40, 1))
    goto LABEL_15;
  v42 = *(_QWORD *)(v0 + 216);
  v43 = *(_QWORD *)(v0 + 168);
  v44 = *(_QWORD *)(v0 + 176);
  v45 = *(_QWORD *)(v0 + 320)
      + ((*(unsigned __int8 *)(v0 + 520) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 520))
      + *(_QWORD *)(v44 + 72) * v40;
  v46 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v44 + 16);
  *(_QWORD *)(v0 + 456) = v46;
  v47 = v46(v42, v45, v43);
  v48 = static Task<>.checkCancellation()(v47);
  v49 = *(_QWORD *)(v0 + 168);
  if (v39)
  {
    v50 = *(_QWORD *)(v0 + 320);
    v51 = *(_QWORD *)(v0 + 296);
    v52 = *(_QWORD *)(v0 + 216);
    v53 = *(_QWORD *)(v0 + 176);
    swift_bridgeObjectRelease(v50);
    swift_release(v51);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v49);
    swift_bridgeObjectRelease(v50);
    v54 = *(_QWORD *)(v0 + 272);
    v56 = *(_QWORD *)(v0 + 256);
    v55 = *(_QWORD *)(v0 + 264);
    v58 = *(_QWORD *)(v0 + 240);
    v57 = *(_QWORD *)(v0 + 248);
    v60 = *(_QWORD *)(v0 + 208);
    v59 = *(_QWORD *)(v0 + 216);
    v61 = *(_QWORD *)(v0 + 200);
    v101 = *(_QWORD *)(v0 + 192);
    v104 = *(_QWORD *)(v0 + 184);
    v107 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v101);
    swift_task_dealloc(v104);
    swift_task_dealloc(v107);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v63 = *(_QWORD *)(v0 + 208);
    v62 = *(_QWORD *)(v0 + 216);
    v64 = *(_QWORD *)(v0 + 136);
    static Log.photos.getter(v48);
    v46(v63, v62, v49);
    v65 = swift_retain(v64);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.default.getter();
    v68 = os_log_type_enabled(v66, v67);
    v69 = *(_QWORD *)(v0 + 256);
    v70 = *(_QWORD *)(v0 + 224);
    v71 = *(_QWORD *)(v0 + 208);
    if (v68)
    {
      v92 = *(_QWORD *)(v0 + 200);
      v94 = *(_QWORD *)(v0 + 176);
      v99 = v66;
      v72 = *(_QWORD *)(v0 + 168);
      v105 = *(_QWORD *)(v0 + 256);
      v73 = *(_QWORD *)(v0 + 136);
      v102 = *(_QWORD *)(v0 + 224);
      v74 = swift_slowAlloc(22, -1);
      v97 = swift_slowAlloc(64, -1);
      v108[0] = v97;
      *(_DWORD *)v74 = 136315394;
      v75 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v73 + 16));
      v96 = v67;
      v76 = v1;
      v78 = v77;
      *(_QWORD *)(v0 + 88) = sub_100021438(v75, v77, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v76, v0 + 96, v74 + 4, v74 + 12);
      swift_release(v73);
      swift_bridgeObjectRelease(v78);
      *(_WORD *)(v74 + 12) = 2080;
      v46(v92, v71, v72);
      v79 = *(void (**)(unint64_t, uint64_t))(v94 + 8);
      v79(v71, v72);
      v80 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v81 = dispatch thunk of CustomStringConvertible.description.getter(v72, v80);
      v83 = v82;
      v79(v92, v72);
      *(_QWORD *)(v0 + 96) = sub_100021438(v81, v83, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v74 + 14, v74 + 22);
      swift_bridgeObjectRelease(v83);
      _os_log_impl((void *)&_mh_execute_header, v99, v96, "Processing %s face %s", (uint8_t *)v74, 0x16u);
      swift_arrayDestroy(v97, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v97, -1, -1);
      swift_slowDealloc(v74, -1, -1);

      v85 = v102;
      v84 = v105;
    }
    else
    {
      v86 = *(_QWORD *)(v0 + 136);
      v79 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v0 + 176) + 8);
      v79(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 168));

      swift_release(v86);
      v84 = v69;
      v85 = v70;
    }
    v87 = v30(v84, v85);
    *(_QWORD *)(v0 + 464) = v79;
    v88 = static TestProperties.bufferSize.getter(v87);
    v89 = (_QWORD *)swift_task_alloc(dword_1000B3144);
    *(_QWORD *)(v0 + 472) = v89;
    *v89 = v0;
    v89[1] = sub_100025AB0;
    return sub_10002BCDC(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 216), v88);
  }
}

uint64_t sub_100026A7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t (*v37)(uint64_t, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void (*v58)(unint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  os_log_t log;
  NSObject *loga;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, _QWORD);
  uint64_t v81[2];

  v2 = *(_QWORD *)(v1 + 504);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
  v4 = *(_QWORD *)(v1 + 216);
  v5 = *(_QWORD *)(v1 + 184);
  v6 = *(_QWORD *)(v1 + 168);
  static Log.photos.getter(a1);
  v3(v5, v4, v6);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
    v71 = v11;
    *(_QWORD *)type = *(_QWORD *)(v1 + 224);
    v77 = *(_QWORD *)(v1 + 240);
    v78 = *(_QWORD *)(v1 + 216);
    v80 = *(void (**)(uint64_t, _QWORD))(v1 + 424);
    v12 = *(_QWORD *)(v1 + 200);
    v13 = *(_QWORD *)(v1 + 184);
    v14 = *(_QWORD *)(v1 + 168);
    v15 = swift_slowAlloc(22, -1);
    v69 = (uint64_t *)swift_slowAlloc(8, -1);
    log = (os_log_t)swift_slowAlloc(32, -1);
    v81[0] = (uint64_t)log;
    *(_DWORD *)v15 = 136315394;
    v10(v12, v13, v14);
    v11(v13, v14);
    v16 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v19 = v18;
    v11(v12, v14);
    *(_QWORD *)(v1 + 48) = sub_100021438(v17, v19, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2112;
    swift_errorRetain(v2);
    v20 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v1 + 56) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v15 + 14, v15 + 22);
    *v69 = v20;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to process face %s with error %@", (uint8_t *)v15, 0x16u);
    v21 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v69, 1, v21);
    swift_slowDealloc(v69, -1, -1);
    swift_arrayDestroy(log, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(log, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v2);
    v80(v77, *(_QWORD *)type);
    result = v71(v78, v14);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 424);
    v24 = v23;
  }
  else
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
    v26 = *(void (**)(uint64_t, uint64_t))(v1 + 432);
    v27 = *(_QWORD *)(v1 + 240);
    v29 = *(_QWORD *)(v1 + 216);
    v28 = *(_QWORD *)(v1 + 224);
    v30 = *(_QWORD *)(v1 + 168);
    v25(*(_QWORD *)(v1 + 184), v30);

    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    v26(v27, v28);
    result = v25(v29, v30);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 424);
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 432);
  }
  v31 = *(_QWORD *)(v1 + 448);
  *(_QWORD *)(v1 + 512) = *(_QWORD *)(v1 + 440);
  if (v31 == *(_QWORD *)(v1 + 360))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 320));
    v32 = (_QWORD *)swift_task_alloc(dword_1000B314C);
    *(_QWORD *)(v1 + 384) = v32;
    *v32 = v1;
    v32[1] = sub_10002598C;
    return sub_100032824();
  }
  else
  {
    *(_QWORD *)(v1 + 424) = v23;
    *(_QWORD *)(v1 + 432) = v24;
    *(_QWORD *)(v1 + 448) = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
    }
    else
    {
      v33 = *(_QWORD *)(v1 + 216);
      v34 = *(_QWORD *)(v1 + 168);
      v35 = *(_QWORD *)(v1 + 176);
      v36 = *(_QWORD *)(v1 + 320)
          + ((*(unsigned __int8 *)(v1 + 520) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 520))
          + *(_QWORD *)(v35 + 72) * v31;
      v37 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v35 + 16);
      *(_QWORD *)(v1 + 456) = v37;
      v38 = v37(v33, v36, v34);
      v39 = static Task<>.checkCancellation()(v38);
      v40 = *(_QWORD *)(v1 + 168);
      v42 = *(_QWORD *)(v1 + 208);
      v41 = *(_QWORD *)(v1 + 216);
      v43 = *(_QWORD *)(v1 + 136);
      static Log.photos.getter(v39);
      v37(v42, v41, v40);
      v44 = swift_retain(v43);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.default.getter();
      v47 = os_log_type_enabled(v45, v46);
      v48 = *(_QWORD *)(v1 + 256);
      v49 = *(_QWORD *)(v1 + 224);
      v50 = *(_QWORD *)(v1 + 208);
      if (v47)
      {
        typea = v46;
        v51 = *(_QWORD *)(v1 + 200);
        v70 = *(_QWORD *)(v1 + 176);
        loga = v45;
        v52 = *(_QWORD *)(v1 + 168);
        v53 = *(_QWORD *)(v1 + 136);
        v79 = *(_QWORD *)(v1 + 224);
        v54 = swift_slowAlloc(22, -1);
        v72 = swift_slowAlloc(64, -1);
        v81[0] = v72;
        *(_DWORD *)v54 = 136315394;
        v55 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v53 + 16));
        v57 = v56;
        *(_QWORD *)(v1 + 88) = sub_100021438(v55, v56, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v54 + 4, v54 + 12);
        swift_release(v53);
        swift_bridgeObjectRelease(v57);
        *(_WORD *)(v54 + 12) = 2080;
        v37(v51, v50, v52);
        v58 = *(void (**)(unint64_t, uint64_t))(v70 + 8);
        v58(v50, v52);
        v59 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
        v60 = dispatch thunk of CustomStringConvertible.description.getter(v52, v59);
        v62 = v61;
        v58(v51, v52);
        *(_QWORD *)(v1 + 96) = sub_100021438(v60, v62, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v54 + 14, v54 + 22);
        swift_bridgeObjectRelease(v62);
        _os_log_impl((void *)&_mh_execute_header, loga, typea, "Processing %s face %s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v54, -1, -1);

        v63 = v48;
        v64 = v79;
      }
      else
      {
        v65 = *(_QWORD *)(v1 + 136);
        v58 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 + 176) + 8);
        v58(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 168));

        swift_release(v65);
        v63 = v48;
        v64 = v49;
      }
      v66 = v24(v63, v64);
      *(_QWORD *)(v1 + 464) = v58;
      v67 = static TestProperties.bufferSize.getter(v66);
      v68 = (_QWORD *)swift_task_alloc(dword_1000B3144);
      *(_QWORD *)(v1 + 472) = v68;
      *v68 = v1;
      v68[1] = sub_100025AB0;
      return sub_10002BCDC(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 216), v67);
    }
  }
  return result;
}

uint64_t sub_100027198()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1[17] = v0;
  v2 = sub_10000629C(&qword_1000B3130);
  v1[18] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[19] = v3;
  v1[20] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ShuffleID(0);
  v1[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[22] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v6);
  v1[24] = swift_task_alloc(v6);
  v1[25] = swift_task_alloc(v6);
  v1[26] = swift_task_alloc(v6);
  v1[27] = swift_task_alloc(v6);
  v7 = type metadata accessor for Logger(0);
  v1[28] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[29] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[30] = swift_task_alloc(v9);
  v1[31] = swift_task_alloc(v9);
  v1[32] = swift_task_alloc(v9);
  v1[33] = swift_task_alloc(v9);
  v1[34] = swift_task_alloc(v9);
  v1[35] = swift_task_alloc(v9);
  v10 = type metadata accessor for CommunicationActor(0);
  v1[36] = v10;
  v11 = static CommunicationActor.shared.getter(v10);
  v1[37] = v11;
  v1[38] = static CommunicationActor.shared.getter(v11);
  v12 = type metadata accessor for ShuffleDatabase(0);
  v13 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryList()[1]);
  v1[39] = v14;
  *v14 = v1;
  v14[1] = sub_100027338;
  return dispatch thunk of PhotosFaceIDDatabase.queryList()(v12, v13);
}

uint64_t sub_100027338(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 312);
  v3[40] = a1;
  v3[41] = v1;
  swift_task_dealloc(v4);
  v5 = v3[36];
  v6 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  if (v1)
  {
    v3[46] = v6;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
    v9 = v8;
    v10 = sub_10002592C;
  }
  else
  {
    v3[42] = v6;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
    v9 = v11;
    v10 = sub_100027400;
  }
  return swift_task_switch(v10, v7, v9);
}

uint64_t sub_100027400()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[42];
  v2 = v0[36];
  swift_release(v0[38]);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  v0[43] = v3;
  v0[44] = v4;
  return swift_task_switch(sub_100027460, v3, v4);
}

uint64_t sub_100027460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(void);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *log;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115[2];

  v2 = *(_QWORD *)(v1 + 320);
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 + 360) = v3;
  if (!v3)
  {
    v22 = *(_QWORD *)(v1 + 136);
    swift_release(*(_QWORD *)(v1 + 296));
    v23 = swift_bridgeObjectRelease(v2);
    static Log.session.getter(v23);
    v24 = swift_retain(v22);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(_QWORD *)(v1 + 280);
    v29 = *(_QWORD *)(v1 + 224);
    v30 = *(_QWORD *)(v1 + 232);
    v31 = *(_QWORD *)(v1 + 136);
    if (v27)
    {
      v111 = *(_QWORD *)(v1 + 232);
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = v29;
      v33 = swift_slowAlloc(32, -1);
      v115[0] = v33;
      *(_DWORD *)v32 = 136315138;
      v34 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v31 + 16));
      v36 = v35;
      *(_QWORD *)(v1 + 128) = sub_100021438(v34, v35, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v36);
      swift_release(v31);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No %s faces. Exiting.", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v28, v106);
    }
    else
    {
      swift_release(*(_QWORD *)(v1 + 136));

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    }
    v85 = *(_QWORD *)(v1 + 272);
    v87 = *(_QWORD *)(v1 + 256);
    v86 = *(_QWORD *)(v1 + 264);
    v89 = *(_QWORD *)(v1 + 240);
    v88 = *(_QWORD *)(v1 + 248);
    v91 = *(_QWORD *)(v1 + 208);
    v90 = *(_QWORD *)(v1 + 216);
    v93 = *(_QWORD *)(v1 + 192);
    v92 = *(_QWORD *)(v1 + 200);
    v109 = *(_QWORD *)(v1 + 184);
    v114 = *(_QWORD *)(v1 + 160);
    swift_task_dealloc(*(_QWORD *)(v1 + 280));
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v109);
    swift_task_dealloc(v114);
    v61 = *(uint64_t (**)(void))(v1 + 8);
    return v61();
  }
  v4 = *(_QWORD *)(v1 + 136);
  static Log.session.getter(a1);
  swift_bridgeObjectRetain_n(v2, 2);
  v5 = swift_retain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v1 + 320);
  v10 = *(_QWORD *)(v1 + 272);
  v11 = *(_QWORD *)(v1 + 224);
  v110 = *(_QWORD *)(v1 + 232);
  if (v8)
  {
    v101 = *(_QWORD *)(v1 + 168);
    v12 = *(_QWORD *)(v1 + 136);
    v13 = swift_slowAlloc(32, -1);
    *(_QWORD *)type = v11;
    v14 = swift_slowAlloc(64, -1);
    v115[0] = v14;
    *(_DWORD *)v13 = 134218498;
    *(_QWORD *)(v1 + 104) = *(_QWORD *)(v2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2080;
    v15 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v12 + 16));
    v17 = v16;
    *(_QWORD *)(v1 + 112) = sub_100021438(v15, v16, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v17);
    swift_release(v12);
    *(_WORD *)(v13 + 22) = 2080;
    v18 = Array.description.getter(v9, v101);
    v20 = v19;
    swift_bridgeObjectRelease(v9);
    *(_QWORD *)(v1 + 120) = sub_100021438(v18, v20, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Processing %ld %s: %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v21 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
    v21(v10, *(_QWORD *)type);
  }
  else
  {
    v37 = *(_QWORD *)(v1 + 136);
    swift_bridgeObjectRelease_n(v9, 2);
    swift_release(v37);

    v21 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
    v21(v10, v11);
  }
  *(_QWORD *)(v1 + 376) = v21;
  v39 = *(_QWORD *)(v1 + 168);
  v38 = *(_QWORD *)(v1 + 176);
  v40 = *(_DWORD *)(v38 + 80);
  *(_DWORD *)(v1 + 520) = v40;
  v41 = *(_QWORD *)(v1 + 320);
  v42 = *(_QWORD *)(v1 + 328);
  *(_QWORD *)(v1 + 432) = v21;
  *(_QWORD *)(v1 + 440) = 0;
  *(_QWORD *)(v1 + 416) = v21;
  *(_QWORD *)(v1 + 424) = v21;
  *(_QWORD *)(v1 + 448) = 1;
  v43 = *(_QWORD *)(v1 + 216);
  v44 = v41 + ((v40 + 32) & ~(unint64_t)v40);
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v38 + 16);
  *(_QWORD *)(v1 + 456) = v45;
  v46 = swift_bridgeObjectRetain(v41);
  v47 = v45(v43, v44, v39, v46);
  v48 = static Task<>.checkCancellation()(v47);
  v49 = *(_QWORD *)(v1 + 168);
  if (v42)
  {
    v50 = *(_QWORD *)(v1 + 320);
    v51 = *(_QWORD *)(v1 + 216);
    v52 = *(_QWORD *)(v1 + 176);
    swift_release(*(_QWORD *)(v1 + 296));
    swift_bridgeObjectRelease(v50);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v49);
    swift_bridgeObjectRelease(v50);
    v53 = *(_QWORD *)(v1 + 272);
    v55 = *(_QWORD *)(v1 + 256);
    v54 = *(_QWORD *)(v1 + 264);
    v57 = *(_QWORD *)(v1 + 240);
    v56 = *(_QWORD *)(v1 + 248);
    v59 = *(_QWORD *)(v1 + 208);
    v58 = *(_QWORD *)(v1 + 216);
    v60 = *(_QWORD *)(v1 + 200);
    v107 = *(_QWORD *)(v1 + 192);
    v108 = *(_QWORD *)(v1 + 184);
    v112 = *(_QWORD *)(v1 + 160);
    swift_task_dealloc(*(_QWORD *)(v1 + 280));
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v112);
    v61 = *(uint64_t (**)(void))(v1 + 8);
    return v61();
  }
  v63 = *(_QWORD *)(v1 + 208);
  v62 = *(_QWORD *)(v1 + 216);
  v64 = *(_QWORD *)(v1 + 136);
  static Log.photos.getter(v48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v45)(v63, v62, v49);
  v65 = swift_retain(v64);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.default.getter();
  v68 = os_log_type_enabled(v66, v67);
  v69 = *(_QWORD *)(v1 + 256);
  v70 = *(_QWORD *)(v1 + 224);
  v71 = *(_QWORD *)(v1 + 208);
  if (v68)
  {
    typea = v67;
    v99 = *(_QWORD *)(v1 + 200);
    v100 = *(_QWORD *)(v1 + 176);
    log = v66;
    v72 = *(_QWORD *)(v1 + 168);
    v73 = *(_QWORD *)(v1 + 136);
    v113 = *(_QWORD *)(v1 + 224);
    v74 = swift_slowAlloc(22, -1);
    v102 = swift_slowAlloc(64, -1);
    v115[0] = v102;
    *(_DWORD *)v74 = 136315394;
    v75 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v73 + 16));
    v77 = v76;
    *(_QWORD *)(v1 + 88) = sub_100021438(v75, v76, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v74 + 4, v74 + 12);
    swift_bridgeObjectRelease(v77);
    swift_release(v73);
    *(_WORD *)(v74 + 12) = 2080;
    ((void (*)(uint64_t, uint64_t, uint64_t))v45)(v99, v71, v72);
    v78 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
    v78(v71, v72);
    v79 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v80 = dispatch thunk of CustomStringConvertible.description.getter(v72, v79);
    v82 = v81;
    v78(v99, v72);
    *(_QWORD *)(v1 + 96) = sub_100021438(v80, v82, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v74 + 14, v74 + 22);
    swift_bridgeObjectRelease(v82);
    _os_log_impl((void *)&_mh_execute_header, log, typea, "Processing %s face %s", (uint8_t *)v74, 0x16u);
    swift_arrayDestroy(v102, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v102, -1, -1);
    swift_slowDealloc(v74, -1, -1);

    v83 = v69;
    v84 = v113;
  }
  else
  {
    v95 = *(_QWORD *)(v1 + 136);
    v78 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 176) + 8);
    v78(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 168));
    swift_release(v95);

    v83 = v69;
    v84 = v70;
  }
  v96 = ((uint64_t (*)(uint64_t, uint64_t))v21)(v83, v84);
  *(_QWORD *)(v1 + 464) = v78;
  v97 = static TestProperties.bufferSize.getter(v96);
  v98 = (_QWORD *)swift_task_alloc(dword_1000B3244);
  *(_QWORD *)(v1 + 472) = v98;
  *v98 = v1;
  v98[1] = sub_100027C80;
  return sub_10002C1C0(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 216), v97);
}

uint64_t sub_100027C80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  v3 = *(_QWORD **)v1;
  v3[60] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100027DB8, v3[43], v3[44]);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.collect()[1]);
  v3[61] = v5;
  v6 = sub_100006454(&qword_1000B3150, &qword_1000B3130, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
  *v5 = v3;
  v5[1] = sub_100027D40;
  return AsyncSequence.collect()(v3[18], v6);
}

uint64_t sub_100027D40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 488);
  v3[62] = a1;
  v3[63] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v3[19] + 8))(v3[20], v3[18]);
  if (v1)
    v5 = sub_100028C4C;
  else
    v5 = sub_1000284D4;
  return swift_task_switch(v5, v3[43], v3[44]);
}

uint64_t sub_100027DB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t (*v37)(uint64_t, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void (*v58)(unint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  os_log_t log;
  NSObject *loga;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, _QWORD);
  uint64_t v81[2];

  v2 = *(_QWORD *)(v1 + 480);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
  v4 = *(_QWORD *)(v1 + 216);
  v5 = *(_QWORD *)(v1 + 184);
  v6 = *(_QWORD *)(v1 + 168);
  static Log.photos.getter(a1);
  v3(v5, v4, v6);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
    v71 = v11;
    *(_QWORD *)type = *(_QWORD *)(v1 + 224);
    v77 = *(_QWORD *)(v1 + 240);
    v78 = *(_QWORD *)(v1 + 216);
    v80 = *(void (**)(uint64_t, _QWORD))(v1 + 424);
    v12 = *(_QWORD *)(v1 + 200);
    v13 = *(_QWORD *)(v1 + 184);
    v14 = *(_QWORD *)(v1 + 168);
    v15 = swift_slowAlloc(22, -1);
    v69 = (uint64_t *)swift_slowAlloc(8, -1);
    log = (os_log_t)swift_slowAlloc(32, -1);
    v81[0] = (uint64_t)log;
    *(_DWORD *)v15 = 136315394;
    v10(v12, v13, v14);
    v11(v13, v14);
    v16 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v19 = v18;
    v11(v12, v14);
    *(_QWORD *)(v1 + 48) = sub_100021438(v17, v19, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2112;
    swift_errorRetain(v2);
    v20 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v1 + 56) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v15 + 14, v15 + 22);
    *v69 = v20;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to process face %s with error %@", (uint8_t *)v15, 0x16u);
    v21 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v69, 1, v21);
    swift_slowDealloc(v69, -1, -1);
    swift_arrayDestroy(log, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(log, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v2);
    v80(v77, *(_QWORD *)type);
    result = v71(v78, v14);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 424);
    v24 = v23;
  }
  else
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
    v26 = *(void (**)(uint64_t, uint64_t))(v1 + 432);
    v27 = *(_QWORD *)(v1 + 240);
    v29 = *(_QWORD *)(v1 + 216);
    v28 = *(_QWORD *)(v1 + 224);
    v30 = *(_QWORD *)(v1 + 168);
    v25(*(_QWORD *)(v1 + 184), v30);

    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    v26(v27, v28);
    result = v25(v29, v30);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 424);
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 432);
  }
  v31 = *(_QWORD *)(v1 + 448);
  *(_QWORD *)(v1 + 512) = *(_QWORD *)(v1 + 440);
  if (v31 == *(_QWORD *)(v1 + 360))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 320));
    v32 = (_QWORD *)swift_task_alloc(dword_1000B32A4);
    *(_QWORD *)(v1 + 384) = v32;
    *v32 = v1;
    v32[1] = sub_10002598C;
    return sub_100033B0C();
  }
  else
  {
    *(_QWORD *)(v1 + 424) = v23;
    *(_QWORD *)(v1 + 432) = v24;
    *(_QWORD *)(v1 + 448) = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
    }
    else
    {
      v33 = *(_QWORD *)(v1 + 216);
      v34 = *(_QWORD *)(v1 + 168);
      v35 = *(_QWORD *)(v1 + 176);
      v36 = *(_QWORD *)(v1 + 320)
          + ((*(unsigned __int8 *)(v1 + 520) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 520))
          + *(_QWORD *)(v35 + 72) * v31;
      v37 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v35 + 16);
      *(_QWORD *)(v1 + 456) = v37;
      v38 = v37(v33, v36, v34);
      v39 = static Task<>.checkCancellation()(v38);
      v40 = *(_QWORD *)(v1 + 168);
      v42 = *(_QWORD *)(v1 + 208);
      v41 = *(_QWORD *)(v1 + 216);
      v43 = *(_QWORD *)(v1 + 136);
      static Log.photos.getter(v39);
      v37(v42, v41, v40);
      v44 = swift_retain(v43);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.default.getter();
      v47 = os_log_type_enabled(v45, v46);
      v48 = *(_QWORD *)(v1 + 256);
      v49 = *(_QWORD *)(v1 + 224);
      v50 = *(_QWORD *)(v1 + 208);
      if (v47)
      {
        typea = v46;
        v51 = *(_QWORD *)(v1 + 200);
        v70 = *(_QWORD *)(v1 + 176);
        loga = v45;
        v52 = *(_QWORD *)(v1 + 168);
        v53 = *(_QWORD *)(v1 + 136);
        v79 = *(_QWORD *)(v1 + 224);
        v54 = swift_slowAlloc(22, -1);
        v72 = swift_slowAlloc(64, -1);
        v81[0] = v72;
        *(_DWORD *)v54 = 136315394;
        v55 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v53 + 16));
        v57 = v56;
        *(_QWORD *)(v1 + 88) = sub_100021438(v55, v56, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v54 + 4, v54 + 12);
        swift_release(v53);
        swift_bridgeObjectRelease(v57);
        *(_WORD *)(v54 + 12) = 2080;
        v37(v51, v50, v52);
        v58 = *(void (**)(unint64_t, uint64_t))(v70 + 8);
        v58(v50, v52);
        v59 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
        v60 = dispatch thunk of CustomStringConvertible.description.getter(v52, v59);
        v62 = v61;
        v58(v51, v52);
        *(_QWORD *)(v1 + 96) = sub_100021438(v60, v62, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v54 + 14, v54 + 22);
        swift_bridgeObjectRelease(v62);
        _os_log_impl((void *)&_mh_execute_header, loga, typea, "Processing %s face %s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v54, -1, -1);

        v63 = v48;
        v64 = v79;
      }
      else
      {
        v65 = *(_QWORD *)(v1 + 136);
        v58 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 + 176) + 8);
        v58(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 168));

        swift_release(v65);
        v63 = v48;
        v64 = v49;
      }
      v66 = v24(v63, v64);
      *(_QWORD *)(v1 + 464) = v58;
      v67 = static TestProperties.bufferSize.getter(v66);
      v68 = (_QWORD *)swift_task_alloc(dword_1000B3244);
      *(_QWORD *)(v1 + 472) = v68;
      *v68 = v1;
      v68[1] = sub_100027C80;
      return sub_10002C1C0(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 216), v67);
    }
  }
  return result;
}

uint64_t sub_1000284D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (**v25)(uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t (*v47)(uint64_t, unint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  void (*v80)(unint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  os_log_type_t v97;
  uint64_t v98;
  os_log_t v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109[2];

  v2 = v1 + 88;
  v3 = *(_QWORD *)(v1 + 496);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
  v5 = *(_QWORD *)(v1 + 216);
  v6 = *(_QWORD *)(v1 + 192);
  v7 = *(_QWORD *)(v1 + 168);
  v8 = *(_QWORD *)(v1 + 136);
  static Log.photos.getter(a1);
  v4(v6, v5, v7);
  swift_bridgeObjectRetain_n(v3, 2);
  v9 = swift_retain(v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = *(_QWORD *)(v1 + 496);
    v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
    v96 = *(void (**)(uint64_t, uint64_t))(v1 + 464);
    v107 = *(void (**)(uint64_t, uint64_t))(v1 + 376);
    v101 = *(_QWORD *)(v1 + 224);
    v104 = *(_QWORD *)(v1 + 248);
    v91 = *(_QWORD *)(v1 + 192);
    v92 = *(_QWORD *)(v1 + 200);
    v13 = *(_QWORD *)(v1 + 168);
    v14 = *(_QWORD *)(v1 + 136);
    v15 = swift_slowAlloc(32, -1);
    v99 = (os_log_t)swift_slowAlloc(64, -1);
    v109[0] = (uint64_t)v99;
    *(_DWORD *)v15 = 136315650;
    v16 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v14 + 16));
    v18 = v17;
    *(_QWORD *)(v1 + 64) = sub_100021438(v16, v17, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v15 + 4, v15 + 12);
    swift_release(v14);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v15 + 12) = 2048;
    v19 = *(_QWORD *)(v12 + 16);
    swift_bridgeObjectRelease(v12);
    *(_QWORD *)(v1 + 72) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v15 + 22) = 2080;
    v94(v92, v91, v13);
    v96(v91, v13);
    v20 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v13, v20);
    v23 = v22;
    v96(v92, v13);
    *(_QWORD *)(v1 + 80) = sub_100021438(v21, v23, v109);
    v2 = v1 + 88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Processed %s %ld photos from %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v99, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1, -1);
    v24 = v15;
    v25 = (uint64_t (**)(uint64_t, uint64_t))(v1 + 376);
    swift_slowDealloc(v24, -1, -1);

    v107(v104, v101);
  }
  else
  {
    v26 = *(_QWORD *)(v1 + 496);
    v25 = (uint64_t (**)(uint64_t, uint64_t))(v1 + 416);
    v27 = *(void (**)(uint64_t, uint64_t))(v1 + 416);
    v28 = *(_QWORD *)(v1 + 248);
    v29 = *(_QWORD *)(v1 + 224);
    v30 = *(_QWORD *)(v1 + 136);
    (*(void (**)(_QWORD, _QWORD))(v1 + 464))(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 168));

    swift_release(v30);
    swift_bridgeObjectRelease_n(v26, 2);
    v27(v28, v29);
  }
  v31 = *v25;
  v32 = *(_QWORD *)(v1 + 496);
  v33 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
  v34 = *(_QWORD *)(v1 + 440);
  v35 = *(_QWORD *)(v1 + 216);
  v36 = *(_QWORD *)(v1 + 168);
  v37 = *(_QWORD *)(v32 + 16);
  swift_bridgeObjectRelease(v32);
  result = v33(v35, v36);
  v39 = v34 + v37;
  if (__OFADD__(v34, v37))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  v40 = *(_QWORD *)(v1 + 504);
  *(_QWORD *)(v1 + 512) = v39;
  v41 = *(_QWORD *)(v1 + 448);
  if (v41 == *(_QWORD *)(v1 + 360))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 320));
    v42 = (_QWORD *)swift_task_alloc(dword_1000B32A4);
    *(_QWORD *)(v1 + 384) = v42;
    *v42 = v1;
    v42[1] = sub_10002598C;
    return sub_100033B0C();
  }
  *(_QWORD *)(v1 + 432) = v31;
  *(_QWORD *)(v1 + 440) = v39;
  *(_QWORD *)(v1 + 416) = v31;
  *(_QWORD *)(v1 + 424) = v31;
  *(_QWORD *)(v1 + 448) = v41 + 1;
  if (__OFADD__(v41, 1))
    goto LABEL_15;
  v43 = *(_QWORD *)(v1 + 216);
  v44 = *(_QWORD *)(v1 + 168);
  v45 = *(_QWORD *)(v1 + 176);
  v46 = *(_QWORD *)(v1 + 320)
      + ((*(unsigned __int8 *)(v1 + 520) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 520))
      + *(_QWORD *)(v45 + 72) * v41;
  v47 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v45 + 16);
  *(_QWORD *)(v1 + 456) = v47;
  v48 = v47(v43, v46, v44);
  v49 = static Task<>.checkCancellation()(v48);
  v50 = *(_QWORD *)(v1 + 168);
  if (v40)
  {
    v51 = *(_QWORD *)(v1 + 320);
    v52 = *(_QWORD *)(v1 + 296);
    v53 = *(_QWORD *)(v1 + 216);
    v54 = *(_QWORD *)(v1 + 176);
    swift_bridgeObjectRelease(v51);
    swift_release(v52);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v50);
    swift_bridgeObjectRelease(v51);
    v55 = *(_QWORD *)(v1 + 272);
    v57 = *(_QWORD *)(v1 + 256);
    v56 = *(_QWORD *)(v1 + 264);
    v59 = *(_QWORD *)(v1 + 240);
    v58 = *(_QWORD *)(v1 + 248);
    v61 = *(_QWORD *)(v1 + 208);
    v60 = *(_QWORD *)(v1 + 216);
    v62 = *(_QWORD *)(v1 + 200);
    v102 = *(_QWORD *)(v1 + 192);
    v105 = *(_QWORD *)(v1 + 184);
    v108 = *(_QWORD *)(v1 + 160);
    swift_task_dealloc(*(_QWORD *)(v1 + 280));
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v102);
    swift_task_dealloc(v105);
    swift_task_dealloc(v108);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v64 = *(_QWORD *)(v1 + 208);
    v63 = *(_QWORD *)(v1 + 216);
    v65 = *(_QWORD *)(v1 + 136);
    static Log.photos.getter(v49);
    v47(v64, v63, v50);
    v66 = swift_retain(v65);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.default.getter();
    v69 = os_log_type_enabled(v67, v68);
    v70 = *(_QWORD *)(v1 + 256);
    v71 = *(_QWORD *)(v1 + 224);
    v72 = *(_QWORD *)(v1 + 208);
    if (v69)
    {
      v93 = *(_QWORD *)(v1 + 200);
      v95 = *(_QWORD *)(v1 + 176);
      v100 = v67;
      v73 = *(_QWORD *)(v1 + 168);
      v106 = *(_QWORD *)(v1 + 256);
      v74 = *(_QWORD *)(v1 + 136);
      v103 = *(_QWORD *)(v1 + 224);
      v75 = swift_slowAlloc(22, -1);
      v98 = swift_slowAlloc(64, -1);
      v109[0] = v98;
      *(_DWORD *)v75 = 136315394;
      v76 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v74 + 16));
      v97 = v68;
      v77 = v2;
      v79 = v78;
      *(_QWORD *)(v1 + 88) = sub_100021438(v76, v78, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v77, v1 + 96, v75 + 4, v75 + 12);
      swift_release(v74);
      swift_bridgeObjectRelease(v79);
      *(_WORD *)(v75 + 12) = 2080;
      v47(v93, v72, v73);
      v80 = *(void (**)(unint64_t, uint64_t))(v95 + 8);
      v80(v72, v73);
      v81 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v82 = dispatch thunk of CustomStringConvertible.description.getter(v73, v81);
      v84 = v83;
      v80(v93, v73);
      *(_QWORD *)(v1 + 96) = sub_100021438(v82, v84, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v75 + 14, v75 + 22);
      swift_bridgeObjectRelease(v84);
      _os_log_impl((void *)&_mh_execute_header, v100, v97, "Processing %s face %s", (uint8_t *)v75, 0x16u);
      swift_arrayDestroy(v98, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v75, -1, -1);

      v86 = v103;
      v85 = v106;
    }
    else
    {
      v87 = *(_QWORD *)(v1 + 136);
      v80 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 + 176) + 8);
      v80(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 168));

      swift_release(v87);
      v85 = v70;
      v86 = v71;
    }
    v88 = v31(v85, v86);
    *(_QWORD *)(v1 + 464) = v80;
    v89 = static TestProperties.bufferSize.getter(v88);
    v90 = (_QWORD *)swift_task_alloc(dword_1000B3244);
    *(_QWORD *)(v1 + 472) = v90;
    *v90 = v1;
    v90[1] = sub_100027C80;
    return sub_10002C1C0(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 216), v89);
  }
}

uint64_t sub_100028C4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t (*v37)(uint64_t, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void (*v58)(unint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  os_log_t log;
  NSObject *loga;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, _QWORD);
  uint64_t v81[2];

  v2 = *(_QWORD *)(v1 + 504);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
  v4 = *(_QWORD *)(v1 + 216);
  v5 = *(_QWORD *)(v1 + 184);
  v6 = *(_QWORD *)(v1 + 168);
  static Log.photos.getter(a1);
  v3(v5, v4, v6);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
    v71 = v11;
    *(_QWORD *)type = *(_QWORD *)(v1 + 224);
    v77 = *(_QWORD *)(v1 + 240);
    v78 = *(_QWORD *)(v1 + 216);
    v80 = *(void (**)(uint64_t, _QWORD))(v1 + 424);
    v12 = *(_QWORD *)(v1 + 200);
    v13 = *(_QWORD *)(v1 + 184);
    v14 = *(_QWORD *)(v1 + 168);
    v15 = swift_slowAlloc(22, -1);
    v69 = (uint64_t *)swift_slowAlloc(8, -1);
    log = (os_log_t)swift_slowAlloc(32, -1);
    v81[0] = (uint64_t)log;
    *(_DWORD *)v15 = 136315394;
    v10(v12, v13, v14);
    v11(v13, v14);
    v16 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v19 = v18;
    v11(v12, v14);
    *(_QWORD *)(v1 + 48) = sub_100021438(v17, v19, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2112;
    swift_errorRetain(v2);
    v20 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v1 + 56) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v15 + 14, v15 + 22);
    *v69 = v20;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to process face %s with error %@", (uint8_t *)v15, 0x16u);
    v21 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v69, 1, v21);
    swift_slowDealloc(v69, -1, -1);
    swift_arrayDestroy(log, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(log, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v2);
    v80(v77, *(_QWORD *)type);
    result = v71(v78, v14);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 424);
    v24 = v23;
  }
  else
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
    v26 = *(void (**)(uint64_t, uint64_t))(v1 + 432);
    v27 = *(_QWORD *)(v1 + 240);
    v29 = *(_QWORD *)(v1 + 216);
    v28 = *(_QWORD *)(v1 + 224);
    v30 = *(_QWORD *)(v1 + 168);
    v25(*(_QWORD *)(v1 + 184), v30);

    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    v26(v27, v28);
    result = v25(v29, v30);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 424);
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 432);
  }
  v31 = *(_QWORD *)(v1 + 448);
  *(_QWORD *)(v1 + 512) = *(_QWORD *)(v1 + 440);
  if (v31 == *(_QWORD *)(v1 + 360))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 320));
    v32 = (_QWORD *)swift_task_alloc(dword_1000B32A4);
    *(_QWORD *)(v1 + 384) = v32;
    *v32 = v1;
    v32[1] = sub_10002598C;
    return sub_100033B0C();
  }
  else
  {
    *(_QWORD *)(v1 + 424) = v23;
    *(_QWORD *)(v1 + 432) = v24;
    *(_QWORD *)(v1 + 448) = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
    }
    else
    {
      v33 = *(_QWORD *)(v1 + 216);
      v34 = *(_QWORD *)(v1 + 168);
      v35 = *(_QWORD *)(v1 + 176);
      v36 = *(_QWORD *)(v1 + 320)
          + ((*(unsigned __int8 *)(v1 + 520) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 520))
          + *(_QWORD *)(v35 + 72) * v31;
      v37 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v35 + 16);
      *(_QWORD *)(v1 + 456) = v37;
      v38 = v37(v33, v36, v34);
      v39 = static Task<>.checkCancellation()(v38);
      v40 = *(_QWORD *)(v1 + 168);
      v42 = *(_QWORD *)(v1 + 208);
      v41 = *(_QWORD *)(v1 + 216);
      v43 = *(_QWORD *)(v1 + 136);
      static Log.photos.getter(v39);
      v37(v42, v41, v40);
      v44 = swift_retain(v43);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.default.getter();
      v47 = os_log_type_enabled(v45, v46);
      v48 = *(_QWORD *)(v1 + 256);
      v49 = *(_QWORD *)(v1 + 224);
      v50 = *(_QWORD *)(v1 + 208);
      if (v47)
      {
        typea = v46;
        v51 = *(_QWORD *)(v1 + 200);
        v70 = *(_QWORD *)(v1 + 176);
        loga = v45;
        v52 = *(_QWORD *)(v1 + 168);
        v53 = *(_QWORD *)(v1 + 136);
        v79 = *(_QWORD *)(v1 + 224);
        v54 = swift_slowAlloc(22, -1);
        v72 = swift_slowAlloc(64, -1);
        v81[0] = v72;
        *(_DWORD *)v54 = 136315394;
        v55 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v53 + 16));
        v57 = v56;
        *(_QWORD *)(v1 + 88) = sub_100021438(v55, v56, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v54 + 4, v54 + 12);
        swift_release(v53);
        swift_bridgeObjectRelease(v57);
        *(_WORD *)(v54 + 12) = 2080;
        v37(v51, v50, v52);
        v58 = *(void (**)(unint64_t, uint64_t))(v70 + 8);
        v58(v50, v52);
        v59 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
        v60 = dispatch thunk of CustomStringConvertible.description.getter(v52, v59);
        v62 = v61;
        v58(v51, v52);
        *(_QWORD *)(v1 + 96) = sub_100021438(v60, v62, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v54 + 14, v54 + 22);
        swift_bridgeObjectRelease(v62);
        _os_log_impl((void *)&_mh_execute_header, loga, typea, "Processing %s face %s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v54, -1, -1);

        v63 = v48;
        v64 = v79;
      }
      else
      {
        v65 = *(_QWORD *)(v1 + 136);
        v58 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 + 176) + 8);
        v58(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 168));

        swift_release(v65);
        v63 = v48;
        v64 = v49;
      }
      v66 = v24(v63, v64);
      *(_QWORD *)(v1 + 464) = v58;
      v67 = static TestProperties.bufferSize.getter(v66);
      v68 = (_QWORD *)swift_task_alloc(dword_1000B3244);
      *(_QWORD *)(v1 + 472) = v68;
      *v68 = v1;
      v68[1] = sub_100027C80;
      return sub_10002C1C0(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 216), v67);
    }
  }
  return result;
}

uint64_t sub_100029368()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1[17] = v0;
  v2 = sub_10000629C(&qword_1000B3130);
  v1[18] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[19] = v3;
  v1[20] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AlbumID(0);
  v1[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[22] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v6);
  v1[24] = swift_task_alloc(v6);
  v1[25] = swift_task_alloc(v6);
  v1[26] = swift_task_alloc(v6);
  v1[27] = swift_task_alloc(v6);
  v7 = type metadata accessor for Logger(0);
  v1[28] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[29] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[30] = swift_task_alloc(v9);
  v1[31] = swift_task_alloc(v9);
  v1[32] = swift_task_alloc(v9);
  v1[33] = swift_task_alloc(v9);
  v1[34] = swift_task_alloc(v9);
  v1[35] = swift_task_alloc(v9);
  v10 = type metadata accessor for CommunicationActor(0);
  v1[36] = v10;
  v11 = static CommunicationActor.shared.getter(v10);
  v1[37] = v11;
  v1[38] = static CommunicationActor.shared.getter(v11);
  v12 = type metadata accessor for AlbumDatabase(0);
  v13 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryList()[1]);
  v1[39] = v14;
  *v14 = v1;
  v14[1] = sub_100029508;
  return dispatch thunk of PhotosFaceIDDatabase.queryList()(v12, v13);
}

uint64_t sub_100029508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 312);
  v3[40] = a1;
  v3[41] = v1;
  swift_task_dealloc(v4);
  v5 = v3[36];
  v6 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  if (v1)
  {
    v3[46] = v6;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
    v9 = v8;
    v10 = sub_100029E50;
  }
  else
  {
    v3[42] = v6;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
    v9 = v11;
    v10 = sub_1000295D0;
  }
  return swift_task_switch(v10, v7, v9);
}

uint64_t sub_1000295D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[42];
  v2 = v0[36];
  swift_release(v0[38]);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  v0[43] = v3;
  v0[44] = v4;
  return swift_task_switch(sub_100029630, v3, v4);
}

uint64_t sub_100029630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(void);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *log;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115[2];

  v2 = *(_QWORD *)(v1 + 320);
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 + 360) = v3;
  if (!v3)
  {
    v22 = *(_QWORD *)(v1 + 136);
    swift_release(*(_QWORD *)(v1 + 296));
    v23 = swift_bridgeObjectRelease(v2);
    static Log.session.getter(v23);
    v24 = swift_retain(v22);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(_QWORD *)(v1 + 280);
    v29 = *(_QWORD *)(v1 + 224);
    v30 = *(_QWORD *)(v1 + 232);
    v31 = *(_QWORD *)(v1 + 136);
    if (v27)
    {
      v111 = *(_QWORD *)(v1 + 232);
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = v29;
      v33 = swift_slowAlloc(32, -1);
      v115[0] = v33;
      *(_DWORD *)v32 = 136315138;
      v34 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v31 + 16));
      v36 = v35;
      *(_QWORD *)(v1 + 128) = sub_100021438(v34, v35, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v36);
      swift_release(v31);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No %s faces. Exiting.", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v28, v106);
    }
    else
    {
      swift_release(*(_QWORD *)(v1 + 136));

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    }
    v85 = *(_QWORD *)(v1 + 272);
    v87 = *(_QWORD *)(v1 + 256);
    v86 = *(_QWORD *)(v1 + 264);
    v89 = *(_QWORD *)(v1 + 240);
    v88 = *(_QWORD *)(v1 + 248);
    v91 = *(_QWORD *)(v1 + 208);
    v90 = *(_QWORD *)(v1 + 216);
    v93 = *(_QWORD *)(v1 + 192);
    v92 = *(_QWORD *)(v1 + 200);
    v109 = *(_QWORD *)(v1 + 184);
    v114 = *(_QWORD *)(v1 + 160);
    swift_task_dealloc(*(_QWORD *)(v1 + 280));
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v109);
    swift_task_dealloc(v114);
    v61 = *(uint64_t (**)(void))(v1 + 8);
    return v61();
  }
  v4 = *(_QWORD *)(v1 + 136);
  static Log.session.getter(a1);
  swift_bridgeObjectRetain_n(v2, 2);
  v5 = swift_retain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v1 + 320);
  v10 = *(_QWORD *)(v1 + 272);
  v11 = *(_QWORD *)(v1 + 224);
  v110 = *(_QWORD *)(v1 + 232);
  if (v8)
  {
    v101 = *(_QWORD *)(v1 + 168);
    v12 = *(_QWORD *)(v1 + 136);
    v13 = swift_slowAlloc(32, -1);
    *(_QWORD *)type = v11;
    v14 = swift_slowAlloc(64, -1);
    v115[0] = v14;
    *(_DWORD *)v13 = 134218498;
    *(_QWORD *)(v1 + 104) = *(_QWORD *)(v2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2080;
    v15 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v12 + 16));
    v17 = v16;
    *(_QWORD *)(v1 + 112) = sub_100021438(v15, v16, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v17);
    swift_release(v12);
    *(_WORD *)(v13 + 22) = 2080;
    v18 = Array.description.getter(v9, v101);
    v20 = v19;
    swift_bridgeObjectRelease(v9);
    *(_QWORD *)(v1 + 120) = sub_100021438(v18, v20, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Processing %ld %s: %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v21 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
    v21(v10, *(_QWORD *)type);
  }
  else
  {
    v37 = *(_QWORD *)(v1 + 136);
    swift_bridgeObjectRelease_n(v9, 2);
    swift_release(v37);

    v21 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
    v21(v10, v11);
  }
  *(_QWORD *)(v1 + 376) = v21;
  v39 = *(_QWORD *)(v1 + 168);
  v38 = *(_QWORD *)(v1 + 176);
  v40 = *(_DWORD *)(v38 + 80);
  *(_DWORD *)(v1 + 520) = v40;
  v41 = *(_QWORD *)(v1 + 320);
  v42 = *(_QWORD *)(v1 + 328);
  *(_QWORD *)(v1 + 432) = v21;
  *(_QWORD *)(v1 + 440) = 0;
  *(_QWORD *)(v1 + 416) = v21;
  *(_QWORD *)(v1 + 424) = v21;
  *(_QWORD *)(v1 + 448) = 1;
  v43 = *(_QWORD *)(v1 + 216);
  v44 = v41 + ((v40 + 32) & ~(unint64_t)v40);
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v38 + 16);
  *(_QWORD *)(v1 + 456) = v45;
  v46 = swift_bridgeObjectRetain(v41);
  v47 = v45(v43, v44, v39, v46);
  v48 = static Task<>.checkCancellation()(v47);
  v49 = *(_QWORD *)(v1 + 168);
  if (v42)
  {
    v50 = *(_QWORD *)(v1 + 320);
    v51 = *(_QWORD *)(v1 + 216);
    v52 = *(_QWORD *)(v1 + 176);
    swift_release(*(_QWORD *)(v1 + 296));
    swift_bridgeObjectRelease(v50);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v49);
    swift_bridgeObjectRelease(v50);
    v53 = *(_QWORD *)(v1 + 272);
    v55 = *(_QWORD *)(v1 + 256);
    v54 = *(_QWORD *)(v1 + 264);
    v57 = *(_QWORD *)(v1 + 240);
    v56 = *(_QWORD *)(v1 + 248);
    v59 = *(_QWORD *)(v1 + 208);
    v58 = *(_QWORD *)(v1 + 216);
    v60 = *(_QWORD *)(v1 + 200);
    v107 = *(_QWORD *)(v1 + 192);
    v108 = *(_QWORD *)(v1 + 184);
    v112 = *(_QWORD *)(v1 + 160);
    swift_task_dealloc(*(_QWORD *)(v1 + 280));
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v112);
    v61 = *(uint64_t (**)(void))(v1 + 8);
    return v61();
  }
  v63 = *(_QWORD *)(v1 + 208);
  v62 = *(_QWORD *)(v1 + 216);
  v64 = *(_QWORD *)(v1 + 136);
  static Log.photos.getter(v48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v45)(v63, v62, v49);
  v65 = swift_retain(v64);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.default.getter();
  v68 = os_log_type_enabled(v66, v67);
  v69 = *(_QWORD *)(v1 + 256);
  v70 = *(_QWORD *)(v1 + 224);
  v71 = *(_QWORD *)(v1 + 208);
  if (v68)
  {
    typea = v67;
    v99 = *(_QWORD *)(v1 + 200);
    v100 = *(_QWORD *)(v1 + 176);
    log = v66;
    v72 = *(_QWORD *)(v1 + 168);
    v73 = *(_QWORD *)(v1 + 136);
    v113 = *(_QWORD *)(v1 + 224);
    v74 = swift_slowAlloc(22, -1);
    v102 = swift_slowAlloc(64, -1);
    v115[0] = v102;
    *(_DWORD *)v74 = 136315394;
    v75 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v73 + 16));
    v77 = v76;
    *(_QWORD *)(v1 + 88) = sub_100021438(v75, v76, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v74 + 4, v74 + 12);
    swift_bridgeObjectRelease(v77);
    swift_release(v73);
    *(_WORD *)(v74 + 12) = 2080;
    ((void (*)(uint64_t, uint64_t, uint64_t))v45)(v99, v71, v72);
    v78 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
    v78(v71, v72);
    v79 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
    v80 = dispatch thunk of CustomStringConvertible.description.getter(v72, v79);
    v82 = v81;
    v78(v99, v72);
    *(_QWORD *)(v1 + 96) = sub_100021438(v80, v82, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v74 + 14, v74 + 22);
    swift_bridgeObjectRelease(v82);
    _os_log_impl((void *)&_mh_execute_header, log, typea, "Processing %s face %s", (uint8_t *)v74, 0x16u);
    swift_arrayDestroy(v102, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v102, -1, -1);
    swift_slowDealloc(v74, -1, -1);

    v83 = v69;
    v84 = v113;
  }
  else
  {
    v95 = *(_QWORD *)(v1 + 136);
    v78 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 176) + 8);
    v78(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 168));
    swift_release(v95);

    v83 = v69;
    v84 = v70;
  }
  v96 = ((uint64_t (*)(uint64_t, uint64_t))v21)(v83, v84);
  *(_QWORD *)(v1 + 464) = v78;
  v97 = static TestProperties.bufferSize.getter(v96);
  v98 = (_QWORD *)swift_task_alloc(dword_1000B32AC);
  *(_QWORD *)(v1 + 472) = v98;
  *v98 = v1;
  v98[1] = sub_10002A578;
  return sub_10002C638(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 216), v97);
}

uint64_t sub_100029E50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[46];
  v2 = v0[36];
  swift_release(v0[38]);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_100029EB0, v3, v4);
}

uint64_t sub_100029EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 296));
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100029F88()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[40]);
    v4 = v2[43];
    v5 = v2[44];
    v6 = sub_10002A0AC;
  }
  else
  {
    v4 = v2[43];
    v5 = v2[44];
    v6 = sub_100029FF4;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100029FF4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000B3764);
  *(_QWORD *)(v0 + 400) = v1;
  *v1 = v0;
  v1[1] = sub_10002A040;
  return sub_1000501C0();
}

uint64_t sub_10002A040()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  *(_QWORD *)(*(_QWORD *)v1 + 408) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[40]);
    v4 = v2[43];
    v5 = v2[44];
    v6 = sub_10002A4A0;
  }
  else
  {
    v4 = v2[43];
    v5 = v2[44];
    v6 = sub_10002A184;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10002A0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 296));
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002A184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = swift_release(*(_QWORD *)(v0 + 296));
  static Log.session.getter(v3);
  swift_retain(v2);
  swift_bridgeObjectRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v30 = *(_QWORD *)(v0 + 512);
    v7 = *(_QWORD *)(v0 + 320);
    v34 = *(_QWORD *)(v0 + 264);
    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v33 = *(_QWORD *)(v0 + 224);
    v31 = *(_QWORD *)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 136);
    v9 = swift_slowAlloc(42, -1);
    v32 = swift_slowAlloc(64, -1);
    *(_DWORD *)v9 = 134218754;
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v7 + 16);
    v38 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2080;
    v10 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v8 + 16));
    v12 = v11;
    *(_QWORD *)(v0 + 24) = sub_100021438(v10, v11, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease(v12);
    swift_release(v8);
    *(_WORD *)(v9 + 22) = 2048;
    *(_QWORD *)(v0 + 32) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 24, v9 + 32);
    *(_WORD *)(v9 + 32) = 2080;
    v13 = Array.description.getter(v7, v31);
    v15 = v14;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 40) = sub_100021438(v13, v15, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 34, v9 + 42);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Processed %ld %s faces: %ld photos in faces: %s", (uint8_t *)v9, 0x2Au);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v36(v34, v33);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v17 = *(_QWORD *)(v0 + 264);
    v18 = *(_QWORD *)(v0 + 224);
    v19 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 320), 2);
    swift_release(v19);

    v16(v17, v18);
  }
  v20 = *(_QWORD *)(v0 + 272);
  v22 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 264);
  v24 = *(_QWORD *)(v0 + 240);
  v23 = *(_QWORD *)(v0 + 248);
  v26 = *(_QWORD *)(v0 + 208);
  v25 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 192);
  v27 = *(_QWORD *)(v0 + 200);
  v35 = *(_QWORD *)(v0 + 184);
  v37 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002A4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 296));
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002A578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  v3 = *(_QWORD **)v1;
  v3[60] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10002A6B0, v3[43], v3[44]);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.collect()[1]);
  v3[61] = v5;
  v6 = sub_100006454(&qword_1000B3150, &qword_1000B3130, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
  *v5 = v3;
  v5[1] = sub_10002A638;
  return AsyncSequence.collect()(v3[18], v6);
}

uint64_t sub_10002A638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 488);
  v3[62] = a1;
  v3[63] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v3[19] + 8))(v3[20], v3[18]);
  if (v1)
    v5 = sub_10002B544;
  else
    v5 = sub_10002ADCC;
  return swift_task_switch(v5, v3[43], v3[44]);
}

uint64_t sub_10002A6B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t (*v37)(uint64_t, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void (*v58)(unint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  os_log_t log;
  NSObject *loga;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, _QWORD);
  uint64_t v81[2];

  v2 = *(_QWORD *)(v1 + 480);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
  v4 = *(_QWORD *)(v1 + 216);
  v5 = *(_QWORD *)(v1 + 184);
  v6 = *(_QWORD *)(v1 + 168);
  static Log.photos.getter(a1);
  v3(v5, v4, v6);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
    v71 = v11;
    *(_QWORD *)type = *(_QWORD *)(v1 + 224);
    v77 = *(_QWORD *)(v1 + 240);
    v78 = *(_QWORD *)(v1 + 216);
    v80 = *(void (**)(uint64_t, _QWORD))(v1 + 424);
    v12 = *(_QWORD *)(v1 + 200);
    v13 = *(_QWORD *)(v1 + 184);
    v14 = *(_QWORD *)(v1 + 168);
    v15 = swift_slowAlloc(22, -1);
    v69 = (uint64_t *)swift_slowAlloc(8, -1);
    log = (os_log_t)swift_slowAlloc(32, -1);
    v81[0] = (uint64_t)log;
    *(_DWORD *)v15 = 136315394;
    v10(v12, v13, v14);
    v11(v13, v14);
    v16 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v19 = v18;
    v11(v12, v14);
    *(_QWORD *)(v1 + 48) = sub_100021438(v17, v19, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2112;
    swift_errorRetain(v2);
    v20 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v1 + 56) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v15 + 14, v15 + 22);
    *v69 = v20;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to process face %s with error %@", (uint8_t *)v15, 0x16u);
    v21 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v69, 1, v21);
    swift_slowDealloc(v69, -1, -1);
    swift_arrayDestroy(log, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(log, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v2);
    v80(v77, *(_QWORD *)type);
    result = v71(v78, v14);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 424);
    v24 = v23;
  }
  else
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
    v26 = *(void (**)(uint64_t, uint64_t))(v1 + 432);
    v27 = *(_QWORD *)(v1 + 240);
    v29 = *(_QWORD *)(v1 + 216);
    v28 = *(_QWORD *)(v1 + 224);
    v30 = *(_QWORD *)(v1 + 168);
    v25(*(_QWORD *)(v1 + 184), v30);

    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    v26(v27, v28);
    result = v25(v29, v30);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 424);
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 432);
  }
  v31 = *(_QWORD *)(v1 + 448);
  *(_QWORD *)(v1 + 512) = *(_QWORD *)(v1 + 440);
  if (v31 == *(_QWORD *)(v1 + 360))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 320));
    v32 = (_QWORD *)swift_task_alloc(dword_1000B330C);
    *(_QWORD *)(v1 + 384) = v32;
    *v32 = v1;
    v32[1] = sub_100029F88;
    return sub_1000344A8();
  }
  else
  {
    *(_QWORD *)(v1 + 424) = v23;
    *(_QWORD *)(v1 + 432) = v24;
    *(_QWORD *)(v1 + 448) = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
    }
    else
    {
      v33 = *(_QWORD *)(v1 + 216);
      v34 = *(_QWORD *)(v1 + 168);
      v35 = *(_QWORD *)(v1 + 176);
      v36 = *(_QWORD *)(v1 + 320)
          + ((*(unsigned __int8 *)(v1 + 520) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 520))
          + *(_QWORD *)(v35 + 72) * v31;
      v37 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v35 + 16);
      *(_QWORD *)(v1 + 456) = v37;
      v38 = v37(v33, v36, v34);
      v39 = static Task<>.checkCancellation()(v38);
      v40 = *(_QWORD *)(v1 + 168);
      v42 = *(_QWORD *)(v1 + 208);
      v41 = *(_QWORD *)(v1 + 216);
      v43 = *(_QWORD *)(v1 + 136);
      static Log.photos.getter(v39);
      v37(v42, v41, v40);
      v44 = swift_retain(v43);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.default.getter();
      v47 = os_log_type_enabled(v45, v46);
      v48 = *(_QWORD *)(v1 + 256);
      v49 = *(_QWORD *)(v1 + 224);
      v50 = *(_QWORD *)(v1 + 208);
      if (v47)
      {
        typea = v46;
        v51 = *(_QWORD *)(v1 + 200);
        v70 = *(_QWORD *)(v1 + 176);
        loga = v45;
        v52 = *(_QWORD *)(v1 + 168);
        v53 = *(_QWORD *)(v1 + 136);
        v79 = *(_QWORD *)(v1 + 224);
        v54 = swift_slowAlloc(22, -1);
        v72 = swift_slowAlloc(64, -1);
        v81[0] = v72;
        *(_DWORD *)v54 = 136315394;
        v55 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v53 + 16));
        v57 = v56;
        *(_QWORD *)(v1 + 88) = sub_100021438(v55, v56, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v54 + 4, v54 + 12);
        swift_release(v53);
        swift_bridgeObjectRelease(v57);
        *(_WORD *)(v54 + 12) = 2080;
        v37(v51, v50, v52);
        v58 = *(void (**)(unint64_t, uint64_t))(v70 + 8);
        v58(v50, v52);
        v59 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
        v60 = dispatch thunk of CustomStringConvertible.description.getter(v52, v59);
        v62 = v61;
        v58(v51, v52);
        *(_QWORD *)(v1 + 96) = sub_100021438(v60, v62, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v54 + 14, v54 + 22);
        swift_bridgeObjectRelease(v62);
        _os_log_impl((void *)&_mh_execute_header, loga, typea, "Processing %s face %s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v54, -1, -1);

        v63 = v48;
        v64 = v79;
      }
      else
      {
        v65 = *(_QWORD *)(v1 + 136);
        v58 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 + 176) + 8);
        v58(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 168));

        swift_release(v65);
        v63 = v48;
        v64 = v49;
      }
      v66 = v24(v63, v64);
      *(_QWORD *)(v1 + 464) = v58;
      v67 = static TestProperties.bufferSize.getter(v66);
      v68 = (_QWORD *)swift_task_alloc(dword_1000B32AC);
      *(_QWORD *)(v1 + 472) = v68;
      *v68 = v1;
      v68[1] = sub_10002A578;
      return sub_10002C638(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 216), v67);
    }
  }
  return result;
}

uint64_t sub_10002ADCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (**v25)(uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t (*v47)(uint64_t, unint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  void (*v80)(unint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  os_log_type_t v97;
  uint64_t v98;
  os_log_t v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109[2];

  v2 = v1 + 88;
  v3 = *(_QWORD *)(v1 + 496);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
  v5 = *(_QWORD *)(v1 + 216);
  v6 = *(_QWORD *)(v1 + 192);
  v7 = *(_QWORD *)(v1 + 168);
  v8 = *(_QWORD *)(v1 + 136);
  static Log.photos.getter(a1);
  v4(v6, v5, v7);
  swift_bridgeObjectRetain_n(v3, 2);
  v9 = swift_retain(v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = *(_QWORD *)(v1 + 496);
    v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
    v96 = *(void (**)(uint64_t, uint64_t))(v1 + 464);
    v107 = *(void (**)(uint64_t, uint64_t))(v1 + 376);
    v101 = *(_QWORD *)(v1 + 224);
    v104 = *(_QWORD *)(v1 + 248);
    v91 = *(_QWORD *)(v1 + 192);
    v92 = *(_QWORD *)(v1 + 200);
    v13 = *(_QWORD *)(v1 + 168);
    v14 = *(_QWORD *)(v1 + 136);
    v15 = swift_slowAlloc(32, -1);
    v99 = (os_log_t)swift_slowAlloc(64, -1);
    v109[0] = (uint64_t)v99;
    *(_DWORD *)v15 = 136315650;
    v16 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v14 + 16));
    v18 = v17;
    *(_QWORD *)(v1 + 64) = sub_100021438(v16, v17, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v15 + 4, v15 + 12);
    swift_release(v14);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v15 + 12) = 2048;
    v19 = *(_QWORD *)(v12 + 16);
    swift_bridgeObjectRelease(v12);
    *(_QWORD *)(v1 + 72) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v15 + 22) = 2080;
    v94(v92, v91, v13);
    v96(v91, v13);
    v20 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v13, v20);
    v23 = v22;
    v96(v92, v13);
    *(_QWORD *)(v1 + 80) = sub_100021438(v21, v23, v109);
    v2 = v1 + 88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Processed %s %ld photos from %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v99, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1, -1);
    v24 = v15;
    v25 = (uint64_t (**)(uint64_t, uint64_t))(v1 + 376);
    swift_slowDealloc(v24, -1, -1);

    v107(v104, v101);
  }
  else
  {
    v26 = *(_QWORD *)(v1 + 496);
    v25 = (uint64_t (**)(uint64_t, uint64_t))(v1 + 416);
    v27 = *(void (**)(uint64_t, uint64_t))(v1 + 416);
    v28 = *(_QWORD *)(v1 + 248);
    v29 = *(_QWORD *)(v1 + 224);
    v30 = *(_QWORD *)(v1 + 136);
    (*(void (**)(_QWORD, _QWORD))(v1 + 464))(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 168));

    swift_release(v30);
    swift_bridgeObjectRelease_n(v26, 2);
    v27(v28, v29);
  }
  v31 = *v25;
  v32 = *(_QWORD *)(v1 + 496);
  v33 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
  v34 = *(_QWORD *)(v1 + 440);
  v35 = *(_QWORD *)(v1 + 216);
  v36 = *(_QWORD *)(v1 + 168);
  v37 = *(_QWORD *)(v32 + 16);
  swift_bridgeObjectRelease(v32);
  result = v33(v35, v36);
  v39 = v34 + v37;
  if (__OFADD__(v34, v37))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  v40 = *(_QWORD *)(v1 + 504);
  *(_QWORD *)(v1 + 512) = v39;
  v41 = *(_QWORD *)(v1 + 448);
  if (v41 == *(_QWORD *)(v1 + 360))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 320));
    v42 = (_QWORD *)swift_task_alloc(dword_1000B330C);
    *(_QWORD *)(v1 + 384) = v42;
    *v42 = v1;
    v42[1] = sub_100029F88;
    return sub_1000344A8();
  }
  *(_QWORD *)(v1 + 432) = v31;
  *(_QWORD *)(v1 + 440) = v39;
  *(_QWORD *)(v1 + 416) = v31;
  *(_QWORD *)(v1 + 424) = v31;
  *(_QWORD *)(v1 + 448) = v41 + 1;
  if (__OFADD__(v41, 1))
    goto LABEL_15;
  v43 = *(_QWORD *)(v1 + 216);
  v44 = *(_QWORD *)(v1 + 168);
  v45 = *(_QWORD *)(v1 + 176);
  v46 = *(_QWORD *)(v1 + 320)
      + ((*(unsigned __int8 *)(v1 + 520) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 520))
      + *(_QWORD *)(v45 + 72) * v41;
  v47 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v45 + 16);
  *(_QWORD *)(v1 + 456) = v47;
  v48 = v47(v43, v46, v44);
  v49 = static Task<>.checkCancellation()(v48);
  v50 = *(_QWORD *)(v1 + 168);
  if (v40)
  {
    v51 = *(_QWORD *)(v1 + 320);
    v52 = *(_QWORD *)(v1 + 296);
    v53 = *(_QWORD *)(v1 + 216);
    v54 = *(_QWORD *)(v1 + 176);
    swift_bridgeObjectRelease(v51);
    swift_release(v52);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v50);
    swift_bridgeObjectRelease(v51);
    v55 = *(_QWORD *)(v1 + 272);
    v57 = *(_QWORD *)(v1 + 256);
    v56 = *(_QWORD *)(v1 + 264);
    v59 = *(_QWORD *)(v1 + 240);
    v58 = *(_QWORD *)(v1 + 248);
    v61 = *(_QWORD *)(v1 + 208);
    v60 = *(_QWORD *)(v1 + 216);
    v62 = *(_QWORD *)(v1 + 200);
    v102 = *(_QWORD *)(v1 + 192);
    v105 = *(_QWORD *)(v1 + 184);
    v108 = *(_QWORD *)(v1 + 160);
    swift_task_dealloc(*(_QWORD *)(v1 + 280));
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v102);
    swift_task_dealloc(v105);
    swift_task_dealloc(v108);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v64 = *(_QWORD *)(v1 + 208);
    v63 = *(_QWORD *)(v1 + 216);
    v65 = *(_QWORD *)(v1 + 136);
    static Log.photos.getter(v49);
    v47(v64, v63, v50);
    v66 = swift_retain(v65);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.default.getter();
    v69 = os_log_type_enabled(v67, v68);
    v70 = *(_QWORD *)(v1 + 256);
    v71 = *(_QWORD *)(v1 + 224);
    v72 = *(_QWORD *)(v1 + 208);
    if (v69)
    {
      v93 = *(_QWORD *)(v1 + 200);
      v95 = *(_QWORD *)(v1 + 176);
      v100 = v67;
      v73 = *(_QWORD *)(v1 + 168);
      v106 = *(_QWORD *)(v1 + 256);
      v74 = *(_QWORD *)(v1 + 136);
      v103 = *(_QWORD *)(v1 + 224);
      v75 = swift_slowAlloc(22, -1);
      v98 = swift_slowAlloc(64, -1);
      v109[0] = v98;
      *(_DWORD *)v75 = 136315394;
      v76 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v74 + 16));
      v97 = v68;
      v77 = v2;
      v79 = v78;
      *(_QWORD *)(v1 + 88) = sub_100021438(v76, v78, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v77, v1 + 96, v75 + 4, v75 + 12);
      swift_release(v74);
      swift_bridgeObjectRelease(v79);
      *(_WORD *)(v75 + 12) = 2080;
      v47(v93, v72, v73);
      v80 = *(void (**)(unint64_t, uint64_t))(v95 + 8);
      v80(v72, v73);
      v81 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
      v82 = dispatch thunk of CustomStringConvertible.description.getter(v73, v81);
      v84 = v83;
      v80(v93, v73);
      *(_QWORD *)(v1 + 96) = sub_100021438(v82, v84, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v75 + 14, v75 + 22);
      swift_bridgeObjectRelease(v84);
      _os_log_impl((void *)&_mh_execute_header, v100, v97, "Processing %s face %s", (uint8_t *)v75, 0x16u);
      swift_arrayDestroy(v98, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v75, -1, -1);

      v86 = v103;
      v85 = v106;
    }
    else
    {
      v87 = *(_QWORD *)(v1 + 136);
      v80 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 + 176) + 8);
      v80(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 168));

      swift_release(v87);
      v85 = v70;
      v86 = v71;
    }
    v88 = v31(v85, v86);
    *(_QWORD *)(v1 + 464) = v80;
    v89 = static TestProperties.bufferSize.getter(v88);
    v90 = (_QWORD *)swift_task_alloc(dword_1000B32AC);
    *(_QWORD *)(v1 + 472) = v90;
    *v90 = v1;
    v90[1] = sub_10002A578;
    return sub_10002C638(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 216), v89);
  }
}

uint64_t sub_10002B544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t (*v37)(uint64_t, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void (*v58)(unint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  os_log_t log;
  NSObject *loga;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, _QWORD);
  uint64_t v81[2];

  v2 = *(_QWORD *)(v1 + 504);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
  v4 = *(_QWORD *)(v1 + 216);
  v5 = *(_QWORD *)(v1 + 184);
  v6 = *(_QWORD *)(v1 + 168);
  static Log.photos.getter(a1);
  v3(v5, v4, v6);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 456);
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
    v71 = v11;
    *(_QWORD *)type = *(_QWORD *)(v1 + 224);
    v77 = *(_QWORD *)(v1 + 240);
    v78 = *(_QWORD *)(v1 + 216);
    v80 = *(void (**)(uint64_t, _QWORD))(v1 + 424);
    v12 = *(_QWORD *)(v1 + 200);
    v13 = *(_QWORD *)(v1 + 184);
    v14 = *(_QWORD *)(v1 + 168);
    v15 = swift_slowAlloc(22, -1);
    v69 = (uint64_t *)swift_slowAlloc(8, -1);
    log = (os_log_t)swift_slowAlloc(32, -1);
    v81[0] = (uint64_t)log;
    *(_DWORD *)v15 = 136315394;
    v10(v12, v13, v14);
    v11(v13, v14);
    v16 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v19 = v18;
    v11(v12, v14);
    *(_QWORD *)(v1 + 48) = sub_100021438(v17, v19, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2112;
    swift_errorRetain(v2);
    v20 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v1 + 56) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v15 + 14, v15 + 22);
    *v69 = v20;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to process face %s with error %@", (uint8_t *)v15, 0x16u);
    v21 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v69, 1, v21);
    swift_slowDealloc(v69, -1, -1);
    swift_arrayDestroy(log, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(log, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v2);
    v80(v77, *(_QWORD *)type);
    result = v71(v78, v14);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 424);
    v24 = v23;
  }
  else
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 464);
    v26 = *(void (**)(uint64_t, uint64_t))(v1 + 432);
    v27 = *(_QWORD *)(v1 + 240);
    v29 = *(_QWORD *)(v1 + 216);
    v28 = *(_QWORD *)(v1 + 224);
    v30 = *(_QWORD *)(v1 + 168);
    v25(*(_QWORD *)(v1 + 184), v30);

    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    v26(v27, v28);
    result = v25(v29, v30);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 424);
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 432);
  }
  v31 = *(_QWORD *)(v1 + 448);
  *(_QWORD *)(v1 + 512) = *(_QWORD *)(v1 + 440);
  if (v31 == *(_QWORD *)(v1 + 360))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 320));
    v32 = (_QWORD *)swift_task_alloc(dword_1000B330C);
    *(_QWORD *)(v1 + 384) = v32;
    *v32 = v1;
    v32[1] = sub_100029F88;
    return sub_1000344A8();
  }
  else
  {
    *(_QWORD *)(v1 + 424) = v23;
    *(_QWORD *)(v1 + 432) = v24;
    *(_QWORD *)(v1 + 448) = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
    }
    else
    {
      v33 = *(_QWORD *)(v1 + 216);
      v34 = *(_QWORD *)(v1 + 168);
      v35 = *(_QWORD *)(v1 + 176);
      v36 = *(_QWORD *)(v1 + 320)
          + ((*(unsigned __int8 *)(v1 + 520) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 520))
          + *(_QWORD *)(v35 + 72) * v31;
      v37 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v35 + 16);
      *(_QWORD *)(v1 + 456) = v37;
      v38 = v37(v33, v36, v34);
      v39 = static Task<>.checkCancellation()(v38);
      v40 = *(_QWORD *)(v1 + 168);
      v42 = *(_QWORD *)(v1 + 208);
      v41 = *(_QWORD *)(v1 + 216);
      v43 = *(_QWORD *)(v1 + 136);
      static Log.photos.getter(v39);
      v37(v42, v41, v40);
      v44 = swift_retain(v43);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.default.getter();
      v47 = os_log_type_enabled(v45, v46);
      v48 = *(_QWORD *)(v1 + 256);
      v49 = *(_QWORD *)(v1 + 224);
      v50 = *(_QWORD *)(v1 + 208);
      if (v47)
      {
        typea = v46;
        v51 = *(_QWORD *)(v1 + 200);
        v70 = *(_QWORD *)(v1 + 176);
        loga = v45;
        v52 = *(_QWORD *)(v1 + 168);
        v53 = *(_QWORD *)(v1 + 136);
        v79 = *(_QWORD *)(v1 + 224);
        v54 = swift_slowAlloc(22, -1);
        v72 = swift_slowAlloc(64, -1);
        v81[0] = v72;
        *(_DWORD *)v54 = 136315394;
        v55 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v53 + 16));
        v57 = v56;
        *(_QWORD *)(v1 + 88) = sub_100021438(v55, v56, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v54 + 4, v54 + 12);
        swift_release(v53);
        swift_bridgeObjectRelease(v57);
        *(_WORD *)(v54 + 12) = 2080;
        v37(v51, v50, v52);
        v58 = *(void (**)(unint64_t, uint64_t))(v70 + 8);
        v58(v50, v52);
        v59 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
        v60 = dispatch thunk of CustomStringConvertible.description.getter(v52, v59);
        v62 = v61;
        v58(v51, v52);
        *(_QWORD *)(v1 + 96) = sub_100021438(v60, v62, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v54 + 14, v54 + 22);
        swift_bridgeObjectRelease(v62);
        _os_log_impl((void *)&_mh_execute_header, loga, typea, "Processing %s face %s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v54, -1, -1);

        v63 = v48;
        v64 = v79;
      }
      else
      {
        v65 = *(_QWORD *)(v1 + 136);
        v58 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 + 176) + 8);
        v58(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 168));

        swift_release(v65);
        v63 = v48;
        v64 = v49;
      }
      v66 = v24(v63, v64);
      *(_QWORD *)(v1 + 464) = v58;
      v67 = static TestProperties.bufferSize.getter(v66);
      v68 = (_QWORD *)swift_task_alloc(dword_1000B32AC);
      *(_QWORD *)(v1 + 472) = v68;
      *v68 = v1;
      v68[1] = sub_10002A578;
      return sub_10002C638(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 216), v67);
    }
  }
  return result;
}

uint64_t type metadata accessor for GalleryGeneratorSystem()
{
  return objc_opt_self(_TtC11photosfaced22GalleryGeneratorSystem);
}

uint64_t sub_10002BC80()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1000B3104);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10003E42C;
  v2[2] = v0;
  return swift_task_switch(sub_100024534, 0, 0);
}

uint64_t sub_10002BCDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  v5 = type metadata accessor for ShuffleID(0);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[16] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v8);
  v4[18] = swift_task_alloc(v8);
  v9 = type metadata accessor for Logger(0);
  v4[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[20] = v10;
  v4[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CommunicationActor(0);
  v4[22] = static CommunicationActor.shared.getter(v11);
  v12 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, v12);
  v4[23] = v13;
  v4[24] = v14;
  return swift_task_switch(sub_10002BDD4, v13, v14);
}

uint64_t sub_10002BDD4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  os_log_type_t type;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;

  v2 = v1[18];
  v3 = v1[14];
  v4 = v1[15];
  v5 = v1[13];
  v6 = v1[11];
  static Log.default.getter(a1);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v2, v6, v3);
  v8 = swift_retain_n(v5, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v45 = v1[20];
    v46 = v1[19];
    v47 = v1[21];
    v42 = v1[18];
    v43 = v1[15];
    v40 = v1[14];
    v48 = v7;
    v11 = v1[13];
    v12 = swift_slowAlloc(32, -1);
    v44 = swift_slowAlloc(96, -1);
    v49 = v44;
    *(_DWORD *)v12 = 136315650;
    v1[7] = sub_100021438(0xD000000000000015, 0x8000000100094FE0, &v49);
    type = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 7, v1 + 8, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2080;
    v13 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v11 + 16));
    v15 = v14;
    v1[8] = sub_100021438(v13, v14, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 8, v1 + 9, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v15);
    v16 = v11;
    v7 = v48;
    swift_release_n(v16, 2);
    *(_WORD *)(v12 + 22) = 2080;
    v17 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v40, v17);
    v20 = v19;
    v1[9] = sub_100021438(v18, v19, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 9, v1 + 10, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v40);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "%s type = %s, id = %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v44, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v46);
  }
  else
  {
    v22 = v1[20];
    v21 = v1[21];
    v24 = v1[18];
    v23 = v1[19];
    v25 = v1[14];
    v26 = v1[15];
    swift_release_n(v1[13], 2);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }
  v28 = v1[16];
  v27 = v1[17];
  v29 = v1[14];
  v30 = v1[15];
  v32 = v1[12];
  v31 = v1[13];
  v7(v27, v1[11], v29);
  v33 = *(unsigned __int8 *)(v30 + 80);
  v34 = (v33 + 24) & ~v33;
  v35 = (v28 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = swift_allocObject(&unk_1000AE328, v35 + 8, v33 | 7);
  v1[25] = v36;
  *(_QWORD *)(v36 + 16) = v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v36 + v34, v27, v29);
  *(_QWORD *)(v36 + v35) = v32;
  v37 = dword_1000B3194;
  swift_retain(v31);
  v38 = (_QWORD *)swift_task_alloc(v37);
  v1[26] = v38;
  *v38 = v1;
  v38[1] = sub_10002C154;
  return sub_10002CC20((uint64_t)(v1 + 2), v1[11], (uint64_t)&unk_1000B3188, v36);
}

uint64_t sub_10002C154()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[23];
    v5 = v2[24];
    v6 = sub_10003E41C;
  }
  else
  {
    swift_release(v2[25]);
    v4 = v2[23];
    v5 = v2[24];
    v6 = sub_10003E428;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10002C1C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  v5 = type metadata accessor for ShuffleID(0);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[16] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v8);
  v4[18] = swift_task_alloc(v8);
  v9 = type metadata accessor for Logger(0);
  v4[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[20] = v10;
  v4[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CommunicationActor(0);
  v4[22] = static CommunicationActor.shared.getter(v11);
  v12 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, v12);
  v4[23] = v13;
  v4[24] = v14;
  return swift_task_switch(sub_10002C2B8, v13, v14);
}

uint64_t sub_10002C2B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  os_log_type_t type;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;

  v2 = v1[18];
  v3 = v1[14];
  v4 = v1[15];
  v5 = v1[13];
  v6 = v1[11];
  static Log.default.getter(a1);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v2, v6, v3);
  v8 = swift_retain_n(v5, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v45 = v1[20];
    v46 = v1[19];
    v47 = v1[21];
    v42 = v1[18];
    v43 = v1[15];
    v40 = v1[14];
    v48 = v7;
    v11 = v1[13];
    v12 = swift_slowAlloc(32, -1);
    v44 = swift_slowAlloc(96, -1);
    v49 = v44;
    *(_DWORD *)v12 = 136315650;
    v1[7] = sub_100021438(0xD000000000000015, 0x8000000100094FE0, &v49);
    type = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 7, v1 + 8, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2080;
    v13 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v11 + 16));
    v15 = v14;
    v1[8] = sub_100021438(v13, v14, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 8, v1 + 9, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v15);
    v16 = v11;
    v7 = v48;
    swift_release_n(v16, 2);
    *(_WORD *)(v12 + 22) = 2080;
    v17 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v40, v17);
    v20 = v19;
    v1[9] = sub_100021438(v18, v19, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 9, v1 + 10, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v40);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "%s type = %s, id = %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v44, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v46);
  }
  else
  {
    v22 = v1[20];
    v21 = v1[21];
    v24 = v1[18];
    v23 = v1[19];
    v25 = v1[14];
    v26 = v1[15];
    swift_release_n(v1[13], 2);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }
  v28 = v1[16];
  v27 = v1[17];
  v29 = v1[14];
  v30 = v1[15];
  v32 = v1[12];
  v31 = v1[13];
  v7(v27, v1[11], v29);
  v33 = *(unsigned __int8 *)(v30 + 80);
  v34 = (v33 + 24) & ~v33;
  v35 = (v28 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = swift_allocObject(&unk_1000AE3C8, v35 + 8, v33 | 7);
  v1[25] = v36;
  *(_QWORD *)(v36 + 16) = v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v36 + v34, v27, v29);
  *(_QWORD *)(v36 + v35) = v32;
  v37 = dword_1000B325C;
  swift_retain(v31);
  v38 = (_QWORD *)swift_task_alloc(v37);
  v1[26] = v38;
  *v38 = v1;
  v38[1] = sub_10002C154;
  return sub_10002D58C((uint64_t)(v1 + 2), v1[11], (uint64_t)&unk_1000B3250, v36);
}

uint64_t sub_10002C638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  v5 = type metadata accessor for AlbumID(0);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[16] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v8);
  v4[18] = swift_task_alloc(v8);
  v9 = type metadata accessor for Logger(0);
  v4[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[20] = v10;
  v4[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CommunicationActor(0);
  v4[22] = static CommunicationActor.shared.getter(v11);
  v12 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, v12);
  v4[23] = v13;
  v4[24] = v14;
  return swift_task_switch(sub_10002C730, v13, v14);
}

uint64_t sub_10002C730(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  os_log_type_t type;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;

  v2 = v1[18];
  v3 = v1[14];
  v4 = v1[15];
  v5 = v1[13];
  v6 = v1[11];
  static Log.default.getter(a1);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v2, v6, v3);
  v8 = swift_retain_n(v5, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v45 = v1[20];
    v46 = v1[19];
    v47 = v1[21];
    v42 = v1[18];
    v43 = v1[15];
    v40 = v1[14];
    v48 = v7;
    v11 = v1[13];
    v12 = swift_slowAlloc(32, -1);
    v44 = swift_slowAlloc(96, -1);
    v49 = v44;
    *(_DWORD *)v12 = 136315650;
    v1[7] = sub_100021438(0xD000000000000015, 0x8000000100094FE0, &v49);
    type = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 7, v1 + 8, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2080;
    v13 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v11 + 16));
    v15 = v14;
    v1[8] = sub_100021438(v13, v14, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 8, v1 + 9, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v15);
    v16 = v11;
    v7 = v48;
    swift_release_n(v16, 2);
    *(_WORD *)(v12 + 22) = 2080;
    v17 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v40, v17);
    v20 = v19;
    v1[9] = sub_100021438(v18, v19, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 9, v1 + 10, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v40);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "%s type = %s, id = %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v44, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v46);
  }
  else
  {
    v22 = v1[20];
    v21 = v1[21];
    v24 = v1[18];
    v23 = v1[19];
    v25 = v1[14];
    v26 = v1[15];
    swift_release_n(v1[13], 2);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }
  v28 = v1[16];
  v27 = v1[17];
  v29 = v1[14];
  v30 = v1[15];
  v32 = v1[12];
  v31 = v1[13];
  v7(v27, v1[11], v29);
  v33 = *(unsigned __int8 *)(v30 + 80);
  v34 = (v33 + 24) & ~v33;
  v35 = (v28 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = swift_allocObject(&unk_1000AE468, v35 + 8, v33 | 7);
  v1[25] = v36;
  *(_QWORD *)(v36 + 16) = v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v36 + v34, v27, v29);
  *(_QWORD *)(v36 + v35) = v32;
  v37 = dword_1000B32C4;
  swift_retain(v31);
  v38 = (_QWORD *)swift_task_alloc(v37);
  v1[26] = v38;
  *v38 = v1;
  v38[1] = sub_10002CAB0;
  return sub_10002DEF8((uint64_t)(v1 + 2), v1[11], (uint64_t)&unk_1000B32B8, v36);
}

uint64_t sub_10002CAB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[23];
    v5 = v2[24];
    v6 = sub_10002CBBC;
  }
  else
  {
    swift_release(v2[25]);
    v4 = v2[23];
    v5 = v2[24];
    v6 = sub_10002CB1C;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10002CB1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 176));
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  sub_10003D4FC((_QWORD *)(v0 + 16), v4);
  AsyncSequence.generic.getter(v4, v5);
  sub_100022238((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002CBBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 176));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002CC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t FaceRequest;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5[14] = a4;
  v5[15] = v4;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  FaceRequest = type metadata accessor for FetchFaceRequest(0);
  v5[16] = FaceRequest;
  v7 = *(_QWORD *)(FaceRequest - 8);
  v5[17] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[18] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[19] = swift_task_alloc(v9);
  v5[20] = swift_task_alloc(v9);
  v10 = type metadata accessor for Logger(0);
  v5[21] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[22] = v11;
  v5[23] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ShuffleID(0);
  v5[24] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[25] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v5[26] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[27] = swift_task_alloc(v15);
  v5[28] = swift_task_alloc(v15);
  v16 = sub_10000629C(&qword_1000B1F58);
  v5[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000629C(&qword_1000B3198);
  v5[30] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v5[31] = v18;
  v5[32] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID(0);
  v5[33] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v5[34] = v20;
  v21 = *(_QWORD *)(v20 + 64);
  v5[35] = v21;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[36] = swift_task_alloc(v22);
  v5[37] = swift_task_alloc(v22);
  v23 = type metadata accessor for CommunicationActor(0);
  v5[38] = v23;
  v5[39] = static CommunicationActor.shared.getter(v23);
  v24 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v5[40] = v24;
  v25 = dispatch thunk of Actor.unownedExecutor.getter(v23, v24);
  v5[41] = v25;
  v5[42] = v26;
  return swift_task_switch(sub_10002CDEC, v25, v26);
}

uint64_t sub_10002CDEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  dispatch thunk of PhotosFaceID.id.getter(v1, v3);
  v4 = (_QWORD *)(v2 + 112);
  swift_beginAccess(v2 + 112, v0 + 16, 32, 0);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 112) + 16) && (sub_10004A3F8(*(_QWORD *)(v0 + 296)), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 192);
    v8 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 96);
    v10 = swift_endAccess(v0 + 16);
    static Log.session.getter(v10);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v9, v7);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 176);
    v17 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 168);
    if (v14)
    {
      v81 = *(_QWORD *)(v0 + 200);
      v86 = *(_QWORD *)(v0 + 168);
      v84 = *(_QWORD *)(v0 + 184);
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v88 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v23 = dispatch thunk of CustomStringConvertible.description.getter(v16, v22);
      v25 = v24;
      *(_QWORD *)(v0 + 80) = sub_100021438(v23, v24, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v25);
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v15, v16);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Attempted to recompute face %s twice in parallel. This is unexpected but probably harmless.", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v84, v86);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    }
    v59 = *(_QWORD *)(v0 + 320);
    v60 = *(_QWORD *)(v0 + 304);
    v61 = *(_QWORD *)(v0 + 288);
    v62 = *(_QWORD **)(v0 + 88);
    dispatch thunk of PhotosFaceID.id.getter(*(_QWORD *)(v0 + 192), v3);
    FetchFaceRequest.init(id:day:)(v61, 0, 1);
    v62[3] = sub_10000629C(&qword_1000B31B8);
    v63 = type metadata accessor for StoredPhoto(255);
    *(_QWORD *)(v0 + 344) = v63;
    *(_QWORD *)(v0 + 72) = v63;
    v62[4] = swift_getOpaqueTypeConformance2(v0 + 72, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
    v64 = sub_10003D62C(v62);
    *(_QWORD *)(v0 + 352) = v64;
    *(_QWORD *)(v0 + 360) = static CommunicationActor.shared.getter(v64);
    v65 = dispatch thunk of Actor.unownedExecutor.getter(v60, v59);
    return swift_task_switch(sub_10002D470, v65, v66);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 312);
    v76 = *(_QWORD *)(v0 + 320);
    v27 = *(_QWORD *)(v0 + 296);
    v28 = *(_QWORD *)(v0 + 288);
    v72 = *(_QWORD *)(v0 + 280);
    v29 = *(_QWORD *)(v0 + 264);
    v30 = *(_QWORD *)(v0 + 272);
    v78 = *(_QWORD *)(v0 + 256);
    v80 = *(_QWORD *)(v0 + 248);
    v79 = *(_QWORD *)(v0 + 240);
    v83 = *(_QWORD *)(v0 + 232);
    v87 = *(_QWORD *)(v0 + 224);
    v73 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 200);
    v85 = *(_QWORD *)(v0 + 192);
    v70 = *(_QWORD *)(v0 + 120);
    v71 = *(_QWORD *)(v0 + 112);
    v75 = *(_QWORD *)(v0 + 104);
    v69 = *(_QWORD *)(v0 + 96);
    v77 = *(_QWORD **)(v0 + 88);
    swift_endAccess(v0 + 16);
    swift_release(v26);
    sub_10000629C(&qword_1000B31A0);
    v31 = BroadcastSequence.__allocating_init()();
    dispatch thunk of BroadcastSequence.listen()();
    v32 = v30;
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    v33(v28, v27, v29);
    swift_beginAccess(v4, v0 + 40, 33, 0);
    swift_retain(v31);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v88 = *v4;
    *v4 = 0x8000000000000000;
    v68 = v31;
    sub_10004C138(v31, v28, isUniquelyReferenced_nonNull_native);
    v35 = *v4;
    *v4 = v88;
    swift_bridgeObjectRelease(v35);
    v74 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v67 = v28;
    v74(v28, v29);
    swift_endAccess(v0 + 40);
    v36 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v83, 1, 1, v36);
    v33(v28, v27, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v87, v69, v85);
    swift_retain(v31);
    swift_retain(v70);
    v37 = swift_retain(v71);
    v38 = static CommunicationActor.shared.getter(v37);
    v39 = *(unsigned __int8 *)(v32 + 80);
    v40 = (v39 + 40) & ~v39;
    v41 = (v72 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = *(unsigned __int8 *)(v82 + 80);
    v43 = (v42 + v41 + 16) & ~v42;
    v44 = (v73 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    v45 = (char *)swift_allocObject(&unk_1000AE350, v44 + 8, v39 | v42 | 7);
    *((_QWORD *)v45 + 2) = v38;
    *((_QWORD *)v45 + 3) = v76;
    *((_QWORD *)v45 + 4) = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(&v45[v40], v67, v29);
    v46 = &v45[v41];
    *(_QWORD *)v46 = v75;
    *((_QWORD *)v46 + 1) = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(&v45[v43], v87, v85);
    *(_QWORD *)&v45[v44] = v68;
    v47 = sub_100057608(v83, (uint64_t)&unk_1000B31B0, (uint64_t)v45);
    swift_release(v47);
    v77[3] = v79;
    *(_QWORD *)(v0 + 64) = type metadata accessor for StoredPhoto(255);
    v77[4] = swift_getOpaqueTypeConformance2(v0 + 64, &opaque type descriptor for <<opaque return type of BroadcastSequence.listen()>>, 1);
    v48 = sub_10003D62C(v77);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v80 + 32))(v48, v78, v79);
    swift_release(v68);
    v49 = *(_QWORD *)(v0 + 288);
    v50 = *(_QWORD *)(v0 + 296);
    v51 = *(_QWORD *)(v0 + 256);
    v53 = *(_QWORD *)(v0 + 224);
    v52 = *(_QWORD *)(v0 + 232);
    v54 = *(_QWORD *)(v0 + 216);
    v55 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 152);
    v56 = *(_QWORD *)(v0 + 160);
    v74(v50, *(_QWORD *)(v0 + 264));
    swift_task_dealloc(v50);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10002D470()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = v0[43];
  v15 = v0[40];
  v3 = v0[19];
  v2 = v0[20];
  v4 = v0[17];
  v5 = v0[18];
  v7 = v0[15];
  v6 = v0[16];
  v8 = swift_release(v0[45]);
  v9 = static CommunicationActor.shared.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v6);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_1000AE378, v11 + v5, v10 | 7);
  *(_QWORD *)(v12 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v11, v3, v6);
  swift_retain(v7);
  v13 = swift_checkMetadataState(0, v1);
  generateElements<A>(isolation:_:)(v9, v15, &unk_1000B31C8, v12, v13);
  swift_release(v12);
  swift_release(v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v6);
  return swift_task_switch(sub_10003E430, v0[41], v0[42]);
}

uint64_t sub_10002D58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t FaceRequest;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5[14] = a4;
  v5[15] = v4;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  FaceRequest = type metadata accessor for FetchFaceRequest(0);
  v5[16] = FaceRequest;
  v7 = *(_QWORD *)(FaceRequest - 8);
  v5[17] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[18] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[19] = swift_task_alloc(v9);
  v5[20] = swift_task_alloc(v9);
  v10 = type metadata accessor for Logger(0);
  v5[21] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[22] = v11;
  v5[23] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ShuffleID(0);
  v5[24] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[25] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v5[26] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[27] = swift_task_alloc(v15);
  v5[28] = swift_task_alloc(v15);
  v16 = sub_10000629C(&qword_1000B1F58);
  v5[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000629C(&qword_1000B3198);
  v5[30] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v5[31] = v18;
  v5[32] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID(0);
  v5[33] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v5[34] = v20;
  v21 = *(_QWORD *)(v20 + 64);
  v5[35] = v21;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[36] = swift_task_alloc(v22);
  v5[37] = swift_task_alloc(v22);
  v23 = type metadata accessor for CommunicationActor(0);
  v5[38] = v23;
  v5[39] = static CommunicationActor.shared.getter(v23);
  v24 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v5[40] = v24;
  v25 = dispatch thunk of Actor.unownedExecutor.getter(v23, v24);
  v5[41] = v25;
  v5[42] = v26;
  return swift_task_switch(sub_10002D758, v25, v26);
}

uint64_t sub_10002D758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  dispatch thunk of PhotosFaceID.id.getter(v1, v3);
  v4 = (_QWORD *)(v2 + 112);
  swift_beginAccess(v2 + 112, v0 + 16, 32, 0);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 112) + 16) && (sub_10004A3F8(*(_QWORD *)(v0 + 296)), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 192);
    v8 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 96);
    v10 = swift_endAccess(v0 + 16);
    static Log.session.getter(v10);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v9, v7);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 176);
    v17 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 168);
    if (v14)
    {
      v81 = *(_QWORD *)(v0 + 200);
      v86 = *(_QWORD *)(v0 + 168);
      v84 = *(_QWORD *)(v0 + 184);
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v88 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v23 = dispatch thunk of CustomStringConvertible.description.getter(v16, v22);
      v25 = v24;
      *(_QWORD *)(v0 + 80) = sub_100021438(v23, v24, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v25);
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v15, v16);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Attempted to recompute face %s twice in parallel. This is unexpected but probably harmless.", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v84, v86);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    }
    v59 = *(_QWORD *)(v0 + 320);
    v60 = *(_QWORD *)(v0 + 304);
    v61 = *(_QWORD *)(v0 + 288);
    v62 = *(_QWORD **)(v0 + 88);
    dispatch thunk of PhotosFaceID.id.getter(*(_QWORD *)(v0 + 192), v3);
    FetchFaceRequest.init(id:day:)(v61, 0, 1);
    v62[3] = sub_10000629C(&qword_1000B31B8);
    v63 = type metadata accessor for StoredPhoto(255);
    *(_QWORD *)(v0 + 344) = v63;
    *(_QWORD *)(v0 + 72) = v63;
    v62[4] = swift_getOpaqueTypeConformance2(v0 + 72, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
    v64 = sub_10003D62C(v62);
    *(_QWORD *)(v0 + 352) = v64;
    *(_QWORD *)(v0 + 360) = static CommunicationActor.shared.getter(v64);
    v65 = dispatch thunk of Actor.unownedExecutor.getter(v60, v59);
    return swift_task_switch(sub_10002DDDC, v65, v66);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 312);
    v76 = *(_QWORD *)(v0 + 320);
    v27 = *(_QWORD *)(v0 + 296);
    v28 = *(_QWORD *)(v0 + 288);
    v72 = *(_QWORD *)(v0 + 280);
    v29 = *(_QWORD *)(v0 + 264);
    v30 = *(_QWORD *)(v0 + 272);
    v78 = *(_QWORD *)(v0 + 256);
    v80 = *(_QWORD *)(v0 + 248);
    v79 = *(_QWORD *)(v0 + 240);
    v83 = *(_QWORD *)(v0 + 232);
    v87 = *(_QWORD *)(v0 + 224);
    v73 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 200);
    v85 = *(_QWORD *)(v0 + 192);
    v70 = *(_QWORD *)(v0 + 120);
    v71 = *(_QWORD *)(v0 + 112);
    v75 = *(_QWORD *)(v0 + 104);
    v69 = *(_QWORD *)(v0 + 96);
    v77 = *(_QWORD **)(v0 + 88);
    swift_endAccess(v0 + 16);
    swift_release(v26);
    sub_10000629C(&qword_1000B31A0);
    v31 = BroadcastSequence.__allocating_init()();
    dispatch thunk of BroadcastSequence.listen()(v31);
    v32 = v30;
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    v33(v28, v27, v29);
    swift_beginAccess(v4, v0 + 40, 33, 0);
    swift_retain(v31);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v88 = *v4;
    *v4 = 0x8000000000000000;
    v68 = v31;
    sub_10004C138(v31, v28, isUniquelyReferenced_nonNull_native);
    v35 = *v4;
    *v4 = v88;
    swift_bridgeObjectRelease(v35);
    v74 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v67 = v28;
    v74(v28, v29);
    swift_endAccess(v0 + 40);
    v36 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v83, 1, 1, v36);
    v33(v28, v27, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v87, v69, v85);
    swift_retain(v31);
    swift_retain(v70);
    v37 = swift_retain(v71);
    v38 = static CommunicationActor.shared.getter(v37);
    v39 = *(unsigned __int8 *)(v32 + 80);
    v40 = (v39 + 40) & ~v39;
    v41 = (v72 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = *(unsigned __int8 *)(v82 + 80);
    v43 = (v42 + v41 + 16) & ~v42;
    v44 = (v73 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    v45 = (char *)swift_allocObject(&unk_1000AE418, v44 + 8, v39 | v42 | 7);
    *((_QWORD *)v45 + 2) = v38;
    *((_QWORD *)v45 + 3) = v76;
    *((_QWORD *)v45 + 4) = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(&v45[v40], v67, v29);
    v46 = &v45[v41];
    *(_QWORD *)v46 = v75;
    *((_QWORD *)v46 + 1) = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(&v45[v43], v87, v85);
    *(_QWORD *)&v45[v44] = v68;
    v47 = sub_100057608(v83, (uint64_t)&unk_1000B3280, (uint64_t)v45);
    swift_release(v47);
    v77[3] = v79;
    *(_QWORD *)(v0 + 64) = type metadata accessor for StoredPhoto(255);
    v77[4] = swift_getOpaqueTypeConformance2(v0 + 64, &opaque type descriptor for <<opaque return type of BroadcastSequence.listen()>>, 1);
    v48 = sub_10003D62C(v77);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v80 + 32))(v48, v78, v79);
    swift_release(v68);
    v49 = *(_QWORD *)(v0 + 288);
    v50 = *(_QWORD *)(v0 + 296);
    v51 = *(_QWORD *)(v0 + 256);
    v53 = *(_QWORD *)(v0 + 224);
    v52 = *(_QWORD *)(v0 + 232);
    v54 = *(_QWORD *)(v0 + 216);
    v55 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 152);
    v56 = *(_QWORD *)(v0 + 160);
    v74(v50, *(_QWORD *)(v0 + 264));
    swift_task_dealloc(v50);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10002DDDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = v0[43];
  v15 = v0[40];
  v3 = v0[19];
  v2 = v0[20];
  v4 = v0[17];
  v5 = v0[18];
  v7 = v0[15];
  v6 = v0[16];
  v8 = swift_release(v0[45]);
  v9 = static CommunicationActor.shared.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v6);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_1000AE440, v11 + v5, v10 | 7);
  *(_QWORD *)(v12 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v11, v3, v6);
  swift_retain(v7);
  v13 = swift_checkMetadataState(0, v1);
  generateElements<A>(isolation:_:)(v9, v15, &unk_1000B3290, v12, v13);
  swift_release(v12);
  swift_release(v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v6);
  return swift_task_switch(sub_10003E430, v0[41], v0[42]);
}

uint64_t sub_10002DEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t FaceRequest;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5[14] = a4;
  v5[15] = v4;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  FaceRequest = type metadata accessor for FetchFaceRequest(0);
  v5[16] = FaceRequest;
  v7 = *(_QWORD *)(FaceRequest - 8);
  v5[17] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[18] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[19] = swift_task_alloc(v9);
  v5[20] = swift_task_alloc(v9);
  v10 = type metadata accessor for Logger(0);
  v5[21] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[22] = v11;
  v5[23] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AlbumID(0);
  v5[24] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[25] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v5[26] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[27] = swift_task_alloc(v15);
  v5[28] = swift_task_alloc(v15);
  v16 = sub_10000629C(&qword_1000B1F58);
  v5[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000629C(&qword_1000B3198);
  v5[30] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v5[31] = v18;
  v5[32] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID(0);
  v5[33] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v5[34] = v20;
  v21 = *(_QWORD *)(v20 + 64);
  v5[35] = v21;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[36] = swift_task_alloc(v22);
  v5[37] = swift_task_alloc(v22);
  v23 = type metadata accessor for CommunicationActor(0);
  v5[38] = v23;
  v5[39] = static CommunicationActor.shared.getter(v23);
  v24 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v5[40] = v24;
  v25 = dispatch thunk of Actor.unownedExecutor.getter(v23, v24);
  v5[41] = v25;
  v5[42] = v26;
  return swift_task_switch(sub_10002E0C4, v25, v26);
}

uint64_t sub_10002E0C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = sub_100009174(&qword_1000B29F0, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
  dispatch thunk of PhotosFaceID.id.getter(v1, v3);
  v4 = (_QWORD *)(v2 + 112);
  swift_beginAccess(v2 + 112, v0 + 16, 32, 0);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 112) + 16) && (sub_10004A3F8(*(_QWORD *)(v0 + 296)), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 192);
    v8 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 96);
    v10 = swift_endAccess(v0 + 16);
    static Log.session.getter(v10);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v9, v7);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 176);
    v17 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 168);
    if (v14)
    {
      v81 = *(_QWORD *)(v0 + 200);
      v86 = *(_QWORD *)(v0 + 168);
      v84 = *(_QWORD *)(v0 + 184);
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v88 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
      v23 = dispatch thunk of CustomStringConvertible.description.getter(v16, v22);
      v25 = v24;
      *(_QWORD *)(v0 + 80) = sub_100021438(v23, v24, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v25);
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v15, v16);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Attempted to recompute face %s twice in parallel. This is unexpected but probably harmless.", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v84, v86);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    }
    v59 = *(_QWORD *)(v0 + 320);
    v60 = *(_QWORD *)(v0 + 304);
    v61 = *(_QWORD *)(v0 + 288);
    v62 = *(_QWORD **)(v0 + 88);
    dispatch thunk of PhotosFaceID.id.getter(*(_QWORD *)(v0 + 192), v3);
    FetchFaceRequest.init(id:day:)(v61, 0, 1);
    v62[3] = sub_10000629C(&qword_1000B31B8);
    v63 = type metadata accessor for StoredPhoto(255);
    *(_QWORD *)(v0 + 344) = v63;
    *(_QWORD *)(v0 + 72) = v63;
    v62[4] = swift_getOpaqueTypeConformance2(v0 + 72, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
    v64 = sub_10003D62C(v62);
    *(_QWORD *)(v0 + 352) = v64;
    *(_QWORD *)(v0 + 360) = static CommunicationActor.shared.getter(v64);
    v65 = dispatch thunk of Actor.unownedExecutor.getter(v60, v59);
    return swift_task_switch(sub_10002E748, v65, v66);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 312);
    v76 = *(_QWORD *)(v0 + 320);
    v27 = *(_QWORD *)(v0 + 296);
    v28 = *(_QWORD *)(v0 + 288);
    v72 = *(_QWORD *)(v0 + 280);
    v29 = *(_QWORD *)(v0 + 264);
    v30 = *(_QWORD *)(v0 + 272);
    v78 = *(_QWORD *)(v0 + 256);
    v80 = *(_QWORD *)(v0 + 248);
    v79 = *(_QWORD *)(v0 + 240);
    v83 = *(_QWORD *)(v0 + 232);
    v87 = *(_QWORD *)(v0 + 224);
    v73 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 200);
    v85 = *(_QWORD *)(v0 + 192);
    v70 = *(_QWORD *)(v0 + 120);
    v71 = *(_QWORD *)(v0 + 112);
    v75 = *(_QWORD *)(v0 + 104);
    v69 = *(_QWORD *)(v0 + 96);
    v77 = *(_QWORD **)(v0 + 88);
    swift_endAccess(v0 + 16);
    swift_release(v26);
    sub_10000629C(&qword_1000B31A0);
    v31 = BroadcastSequence.__allocating_init()();
    dispatch thunk of BroadcastSequence.listen()(v31);
    v32 = v30;
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    v33(v28, v27, v29);
    swift_beginAccess(v4, v0 + 40, 33, 0);
    swift_retain(v31);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v88 = *v4;
    *v4 = 0x8000000000000000;
    v68 = v31;
    sub_10004C138(v31, v28, isUniquelyReferenced_nonNull_native);
    v35 = *v4;
    *v4 = v88;
    swift_bridgeObjectRelease(v35);
    v74 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v67 = v28;
    v74(v28, v29);
    swift_endAccess(v0 + 40);
    v36 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v83, 1, 1, v36);
    v33(v28, v27, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v87, v69, v85);
    swift_retain(v31);
    swift_retain(v70);
    v37 = swift_retain(v71);
    v38 = static CommunicationActor.shared.getter(v37);
    v39 = *(unsigned __int8 *)(v32 + 80);
    v40 = (v39 + 40) & ~v39;
    v41 = (v72 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = *(unsigned __int8 *)(v82 + 80);
    v43 = (v42 + v41 + 16) & ~v42;
    v44 = (v73 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    v45 = (char *)swift_allocObject(&unk_1000AE4B8, v44 + 8, v39 | v42 | 7);
    *((_QWORD *)v45 + 2) = v38;
    *((_QWORD *)v45 + 3) = v76;
    *((_QWORD *)v45 + 4) = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(&v45[v40], v67, v29);
    v46 = &v45[v41];
    *(_QWORD *)v46 = v75;
    *((_QWORD *)v46 + 1) = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(&v45[v43], v87, v85);
    *(_QWORD *)&v45[v44] = v68;
    v47 = sub_100057608(v83, (uint64_t)&unk_1000B32E8, (uint64_t)v45);
    swift_release(v47);
    v77[3] = v79;
    *(_QWORD *)(v0 + 64) = type metadata accessor for StoredPhoto(255);
    v77[4] = swift_getOpaqueTypeConformance2(v0 + 64, &opaque type descriptor for <<opaque return type of BroadcastSequence.listen()>>, 1);
    v48 = sub_10003D62C(v77);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v80 + 32))(v48, v78, v79);
    swift_release(v68);
    v49 = *(_QWORD *)(v0 + 288);
    v50 = *(_QWORD *)(v0 + 296);
    v51 = *(_QWORD *)(v0 + 256);
    v53 = *(_QWORD *)(v0 + 224);
    v52 = *(_QWORD *)(v0 + 232);
    v54 = *(_QWORD *)(v0 + 216);
    v55 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 152);
    v56 = *(_QWORD *)(v0 + 160);
    v74(v50, *(_QWORD *)(v0 + 264));
    swift_task_dealloc(v50);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10002E748()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = v0[43];
  v15 = v0[40];
  v3 = v0[19];
  v2 = v0[20];
  v4 = v0[17];
  v5 = v0[18];
  v7 = v0[15];
  v6 = v0[16];
  v8 = swift_release(v0[45]);
  v9 = static CommunicationActor.shared.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v6);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_1000AE4E0, v11 + v5, v10 | 7);
  *(_QWORD *)(v12 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v11, v3, v6);
  swift_retain(v7);
  v13 = swift_checkMetadataState(0, v1);
  generateElements<A>(isolation:_:)(v9, v15, &unk_1000B32F8, v12, v13);
  swift_release(v12);
  swift_release(v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v6);
  return swift_task_switch(sub_10002E864, v0[41], v0[42]);
}

uint64_t sub_10002E864()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 272);
  swift_release(*(_QWORD *)(v0 + 312));
  v2 = *(void (**)(uint64_t, _QWORD))(v1 + 8);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 184);
  v11 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 160);
  v2(v4, *(_QWORD *)(v0 + 264));
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002E928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  v5 = sub_10000629C(&qword_1000B31D0);
  v4[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000629C(&qword_1000B3198);
  v4[17] = v6;
  v4[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000629C(&qword_1000B31D8);
  v4[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[20] = v8;
  v4[21] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for StoredPhoto(0);
  v4[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[23] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[24] = swift_task_alloc(v11);
  v4[25] = swift_task_alloc(v11);
  v12 = type metadata accessor for UUID(0);
  v4[26] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[27] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[28] = swift_task_alloc(v14);
  v4[29] = swift_task_alloc(v14);
  v4[30] = swift_task_alloc(v14);
  v4[31] = swift_task_alloc(v14);
  v15 = type metadata accessor for CommunicationActor(0);
  v4[32] = v15;
  v4[33] = static CommunicationActor.shared.getter(v15);
  v16 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4[34] = v16;
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v15, v16);
  v4[35] = v17;
  v4[36] = v18;
  return swift_task_switch(sub_10002EAC4, v17, v18);
}

uint64_t sub_10002EAC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Face;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0[14] + 80);
  v0[8] = v1;
  v2 = swift_retain(v1);
  Face = FetchFaceRequest.id.getter(v2);
  v4 = FetchFaceRequest.day.getter(Face);
  if ((v5 & 1) != 0)
    v4 = sub_1000242C0();
  v6 = v4;
  v7 = type metadata accessor for GalleryDatabase(0);
  v0[37] = v7;
  v8 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
  v0[38] = v8;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.query(id:day:)[1]);
  v0[39] = v9;
  *v9 = v0;
  v9[1] = sub_10002EB94;
  return dispatch thunk of PhotosFaceIDDatabase.query(id:day:)(v0[31], v6, v7, v8);
}

uint64_t sub_10002EB94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 312);
  v3[40] = a1;
  v3[41] = v1;
  swift_task_dealloc(v4);
  v5 = v3[31];
  v6 = v3[26];
  v7 = *(void (**)(uint64_t, uint64_t))(v3[27] + 8);
  if (v1)
  {
    v7(v5, v6);
    swift_release(v3[8]);
    v8 = v3[35];
    v9 = v3[36];
    v10 = sub_10002EFF4;
  }
  else
  {
    v3[42] = v7;
    v7(v5, v6);
    swift_release(v3[8]);
    v8 = v3[35];
    v9 = v3[36];
    v10 = sub_10002EC28;
  }
  return swift_task_switch(v10, v8, v9);
}

uint64_t sub_10002EC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void (*v7)(_QWORD, unint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v10;
  char v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD);

  v1 = *(_QWORD *)(v0 + 320);
  if (!*(_QWORD *)(v1 + 16))
  {
    v10 = *(_QWORD *)(v0 + 112);
    FetchFaceRequest.id.getter(v1);
    swift_beginAccess(v10 + 112, v0 + 40, 32, 0);
    if (!*(_QWORD *)(*(_QWORD *)(v10 + 112) + 16) || (sub_10004A3F8(*(_QWORD *)(v0 + 240)), (v11 & 1) == 0))
    {
      v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
      v37 = *(_QWORD *)(v0 + 240);
      v38 = *(_QWORD *)(v0 + 208);
      swift_endAccess(v0 + 40);
      v39 = v36(v37, v38);
      FetchFaceRequest.id.getter(v39);
      v40 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)[1]);
      *(_QWORD *)(v0 + 344) = v40;
      *v40 = v0;
      v40[1] = sub_10002F0A4;
      return dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
    }
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v13 = *(_QWORD *)(v0 + 240);
    v14 = *(_QWORD *)(v0 + 208);
    swift_endAccess(v0 + 40);
    v12(v13, v14);
    v1 = *(_QWORD *)(v0 + 320);
  }
  *(_QWORD *)(v0 + 368) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 376) = v2;
  if (v2)
  {
    v3 = *(int **)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 184);
    v6 = *(_DWORD *)(v5 + 80);
    *(_DWORD *)(v0 + 472) = v6;
    *(_QWORD *)(v0 + 384) = *(_QWORD *)(v5 + 72);
    v7 = *(void (**)(_QWORD, unint64_t, uint64_t))(v5 + 16);
    *(_QWORD *)(v0 + 392) = v7;
    *(_QWORD *)(v0 + 400) = 0;
    v7(*(_QWORD *)(v0 + 200), v1 + ((v6 + 32) & ~(unint64_t)v6), v4);
    v53 = (uint64_t (*)(_QWORD))((char *)v3 + *v3);
    v8 = (_QWORD *)swift_task_alloc(v3[1]);
    *(_QWORD *)(v0 + 408) = v8;
    *v8 = v0;
    v8[1] = sub_10002F5DC;
    return v53(*(_QWORD *)(v0 + 200));
  }
  else
  {
    v15 = swift_bridgeObjectRelease(v1);
    v16 = *(_QWORD *)(v0 + 112);
    FetchFaceRequest.id.getter(v15);
    swift_beginAccess(v16 + 112, v0 + 16, 32, 0);
    v17 = *(_QWORD *)(v16 + 112);
    if (*(_QWORD *)(v17 + 16) && (v18 = sub_10004A3F8(*(_QWORD *)(v0 + 224)), (v19 & 1) != 0))
    {
      v20 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
      v21 = *(_QWORD *)(v0 + 224);
      v22 = *(_QWORD *)(v0 + 208);
      v23 = *(_QWORD *)(v0 + 176);
      v24 = *(_QWORD *)(v0 + 136);
      v25 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
      *(_QWORD *)(v0 + 424) = v25;
      swift_endAccess(v0 + 16);
      swift_retain(v25);
      v26 = v20(v21, v22);
      dispatch thunk of BroadcastSequence.listen()(v26);
      *(_QWORD *)(v0 + 72) = v23;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 72, &opaque type descriptor for <<opaque return type of BroadcastSequence.listen()>>, 1);
      *(_QWORD *)(v0 + 432) = OpaqueTypeConformance2;
      v28 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v24, OpaqueTypeConformance2);
      v29 = *(_QWORD *)(v0 + 432);
      v30 = *(_QWORD *)(v0 + 272);
      v31 = *(_QWORD *)(v0 + 152);
      v32 = *(_QWORD *)(v0 + 136);
      v33 = static CommunicationActor.shared.getter(v28);
      *(_QWORD *)(v0 + 440) = v33;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v29, v32, v31, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
      v35 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 448) = v35;
      *v35 = v0;
      v35[1] = sub_10002FA00;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 128), v33, v30, v0 + 80, *(_QWORD *)(v0 + 152), AssociatedConformanceWitness);
    }
    else
    {
      v41 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
      v42 = *(_QWORD *)(v0 + 264);
      v43 = *(_QWORD *)(v0 + 224);
      v44 = *(_QWORD *)(v0 + 208);
      swift_endAccess(v0 + 16);
      swift_release(v42);
      v41(v43, v44);
      v45 = *(_QWORD *)(v0 + 240);
      v47 = *(_QWORD *)(v0 + 224);
      v46 = *(_QWORD *)(v0 + 232);
      v49 = *(_QWORD *)(v0 + 192);
      v48 = *(_QWORD *)(v0 + 200);
      v50 = *(_QWORD *)(v0 + 168);
      v51 = *(_QWORD *)(v0 + 144);
      v52 = *(_QWORD *)(v0 + 128);
      swift_task_dealloc(*(_QWORD *)(v0 + 248));
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_10002EFF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*(_QWORD *)(v0 + 264));
  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002F0A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void (*v5)(_QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 344);
  v3[44] = a1;
  v3[45] = v1;
  swift_task_dealloc(v4);
  v5 = (void (*)(_QWORD, _QWORD))v3[42];
  if (v1)
  {
    v6 = v3[40];
    v5(v3[29], v3[26]);
    swift_bridgeObjectRelease(v6);
    v7 = v3[35];
    v8 = v3[36];
    v9 = sub_10002F52C;
  }
  else
  {
    v5(v3[29], v3[26]);
    v7 = v3[35];
    v8 = v3[36];
    v9 = sub_10002F138;
  }
  return swift_task_switch(v9, v7, v8);
}

uint64_t sub_10002F138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v22)(_QWORD, unint64_t, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(_QWORD);

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = swift_bridgeObjectRetain(v1);
  v4 = sub_10003262C(v3);
  v6 = v5;
  swift_bridgeObjectRelease(v1);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 320));
    result = sub_1000242C0();
    v8 = result - v4;
    if (__OFSUB__(result, v4))
    {
      __break(1u);
    }
    else
    {
      v9 = __OFSUB__(v8, 1);
      v10 = v8 - 1;
      if (!v9)
      {
        if (v10 < 0)
        {
          v9 = __OFSUB__(0, v10);
          v10 = -v10;
          if (v9)
            goto LABEL_22;
        }
        if (v2)
        {
          v11 = *(_QWORD *)(v0 + 352);
          v12 = v10 % v2;
          *(_QWORD *)(v0 + 88) = v11;
          v13 = sub_10000629C(&qword_1000B31E0);
          v14 = sub_100006454(&qword_1000B31E8, &qword_1000B31E0, (uint64_t)&protocol conformance descriptor for [A : B]);
          v15 = Sequence.sorted<A>(_:)(sub_100055BA0, 0, v13, &type metadata for Int, v14, &protocol witness table for Int);
          result = swift_bridgeObjectRelease(v11);
          if ((v12 & 0x8000000000000000) == 0)
          {
            if (v12 < *(_QWORD *)(v15 + 16))
            {
              v16 = *(_QWORD *)(v15 + 16 * v12 + 40);
              swift_bridgeObjectRetain(v16);
              swift_bridgeObjectRelease(v15);
              goto LABEL_11;
            }
            goto LABEL_21;
          }
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          return result;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 352));
  v16 = *(_QWORD *)(v0 + 320);
LABEL_11:
  *(_QWORD *)(v0 + 368) = v16;
  v17 = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(v0 + 376) = v17;
  if (v17)
  {
    v18 = *(int **)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 176);
    v20 = *(_QWORD *)(v0 + 184);
    v21 = *(_DWORD *)(v20 + 80);
    *(_DWORD *)(v0 + 472) = v21;
    *(_QWORD *)(v0 + 384) = *(_QWORD *)(v20 + 72);
    v22 = *(void (**)(_QWORD, unint64_t, uint64_t))(v20 + 16);
    *(_QWORD *)(v0 + 392) = v22;
    *(_QWORD *)(v0 + 400) = 0;
    v22(*(_QWORD *)(v0 + 200), v16 + ((v21 + 32) & ~(unint64_t)v21), v19);
    v57 = (uint64_t (*)(_QWORD))((char *)v18 + *v18);
    v23 = (_QWORD *)swift_task_alloc(v18[1]);
    *(_QWORD *)(v0 + 408) = v23;
    *v23 = v0;
    v23[1] = sub_10002F5DC;
    return v57(*(_QWORD *)(v0 + 200));
  }
  else
  {
    v24 = swift_bridgeObjectRelease(v16);
    v25 = *(_QWORD *)(v0 + 112);
    FetchFaceRequest.id.getter(v24);
    swift_beginAccess(v25 + 112, v0 + 16, 32, 0);
    v26 = *(_QWORD *)(v25 + 112);
    if (*(_QWORD *)(v26 + 16) && (v27 = sub_10004A3F8(*(_QWORD *)(v0 + 224)), (v28 & 1) != 0))
    {
      v29 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
      v30 = *(_QWORD *)(v0 + 224);
      v31 = *(_QWORD *)(v0 + 208);
      v32 = *(_QWORD *)(v0 + 176);
      v33 = *(_QWORD *)(v0 + 136);
      v34 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
      *(_QWORD *)(v0 + 424) = v34;
      swift_endAccess(v0 + 16);
      swift_retain(v34);
      v35 = v29(v30, v31);
      dispatch thunk of BroadcastSequence.listen()(v35);
      *(_QWORD *)(v0 + 72) = v32;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 72, &opaque type descriptor for <<opaque return type of BroadcastSequence.listen()>>, 1);
      *(_QWORD *)(v0 + 432) = OpaqueTypeConformance2;
      v37 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v33, OpaqueTypeConformance2);
      v38 = *(_QWORD *)(v0 + 432);
      v39 = *(_QWORD *)(v0 + 272);
      v40 = *(_QWORD *)(v0 + 152);
      v41 = *(_QWORD *)(v0 + 136);
      v42 = static CommunicationActor.shared.getter(v37);
      *(_QWORD *)(v0 + 440) = v42;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v41, v40, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
      v44 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 448) = v44;
      *v44 = v0;
      v44[1] = sub_10002FA00;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 128), v42, v39, v0 + 80, *(_QWORD *)(v0 + 152), AssociatedConformanceWitness);
    }
    else
    {
      v45 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
      v46 = *(_QWORD *)(v0 + 264);
      v47 = *(_QWORD *)(v0 + 224);
      v48 = *(_QWORD *)(v0 + 208);
      swift_endAccess(v0 + 16);
      swift_release(v46);
      v45(v47, v48);
      v49 = *(_QWORD *)(v0 + 240);
      v51 = *(_QWORD *)(v0 + 224);
      v50 = *(_QWORD *)(v0 + 232);
      v53 = *(_QWORD *)(v0 + 192);
      v52 = *(_QWORD *)(v0 + 200);
      v54 = *(_QWORD *)(v0 + 168);
      v55 = *(_QWORD *)(v0 + 144);
      v56 = *(_QWORD *)(v0 + 128);
      swift_task_dealloc(*(_QWORD *)(v0 + 248));
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_10002F52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*(_QWORD *)(v0 + 264));
  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002F5DC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[46]);
    v4 = v2[35];
    v5 = v2[36];
    v6 = sub_10002F938;
  }
  else
  {
    v4 = v2[35];
    v5 = v2[36];
    v6 = sub_10002F648;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10002F648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v23;
  void (*v25)(_QWORD, unint64_t, _QWORD);
  uint64_t v26;
  int *v27;
  _QWORD *v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD);

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 400) + 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176));
  if (v2 == v1)
  {
    v3 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 368));
    v4 = *(_QWORD *)(v0 + 112);
    FetchFaceRequest.id.getter(v3);
    swift_beginAccess(v4 + 112, v0 + 16, 32, 0);
    v5 = *(_QWORD *)(v4 + 112);
    if (*(_QWORD *)(v5 + 16) && (v6 = sub_10004A3F8(*(_QWORD *)(v0 + 224)), (v7 & 1) != 0))
    {
      v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
      v9 = *(_QWORD *)(v0 + 224);
      v10 = *(_QWORD *)(v0 + 208);
      v11 = *(_QWORD *)(v0 + 176);
      v12 = *(_QWORD *)(v0 + 136);
      v13 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
      *(_QWORD *)(v0 + 424) = v13;
      swift_endAccess(v0 + 16);
      swift_retain(v13);
      v14 = v8(v9, v10);
      dispatch thunk of BroadcastSequence.listen()(v14);
      *(_QWORD *)(v0 + 72) = v11;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 72, &opaque type descriptor for <<opaque return type of BroadcastSequence.listen()>>, 1);
      *(_QWORD *)(v0 + 432) = OpaqueTypeConformance2;
      v16 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v12, OpaqueTypeConformance2);
      v17 = *(_QWORD *)(v0 + 432);
      v18 = *(_QWORD *)(v0 + 272);
      v19 = *(_QWORD *)(v0 + 152);
      v20 = *(_QWORD *)(v0 + 136);
      v21 = static CommunicationActor.shared.getter(v16);
      *(_QWORD *)(v0 + 440) = v21;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v17, v20, v19, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
      v23 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 448) = v23;
      *v23 = v0;
      v23[1] = sub_10002FA00;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 128), v21, v18, v0 + 80, *(_QWORD *)(v0 + 152), AssociatedConformanceWitness);
    }
    else
    {
      v29 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
      v30 = *(_QWORD *)(v0 + 264);
      v31 = *(_QWORD *)(v0 + 224);
      v32 = *(_QWORD *)(v0 + 208);
      swift_endAccess(v0 + 16);
      swift_release(v30);
      v29(v31, v32);
      v33 = *(_QWORD *)(v0 + 240);
      v35 = *(_QWORD *)(v0 + 224);
      v34 = *(_QWORD *)(v0 + 232);
      v37 = *(_QWORD *)(v0 + 192);
      v36 = *(_QWORD *)(v0 + 200);
      v38 = *(_QWORD *)(v0 + 168);
      v39 = *(_QWORD *)(v0 + 144);
      v40 = *(_QWORD *)(v0 + 128);
      swift_task_dealloc(*(_QWORD *)(v0 + 248));
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v25 = *(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 392);
    v26 = *(_QWORD *)(v0 + 400) + 1;
    *(_QWORD *)(v0 + 400) = v26;
    v27 = *(int **)(v0 + 96);
    v25(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 368)+ ((*(unsigned __int8 *)(v0 + 472) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 472))+ *(_QWORD *)(v0 + 384) * v26, *(_QWORD *)(v0 + 176));
    v41 = (uint64_t (*)(_QWORD))((char *)v27 + *v27);
    v28 = (_QWORD *)swift_task_alloc(v27[1]);
    *(_QWORD *)(v0 + 408) = v28;
    *v28 = v0;
    v28[1] = sub_10002F5DC;
    return v41(*(_QWORD *)(v0 + 200));
  }
}

uint64_t sub_10002F938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002FA00()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 448));
  swift_release(v2[55]);
  if (v0)
    v3 = sub_10002FBD0;
  else
    v3 = sub_10002FA70;
  return swift_task_switch(v3, v2[35], v2[36]);
}

uint64_t sub_10002FA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v15;
  _QWORD *v16;
  uint64_t (*v17)(_QWORD);

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 424);
    v5 = *(_QWORD *)(v0 + 264);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
    swift_release(v4);
    swift_release(v5);
    v6 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 232);
    v10 = *(_QWORD *)(v0 + 192);
    v9 = *(_QWORD *)(v0 + 200);
    v11 = *(_QWORD *)(v0 + 168);
    v12 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(int **)(v0 + 96);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 192), v3, v1);
    v17 = (uint64_t (*)(_QWORD))((char *)v15 + *v15);
    v16 = (_QWORD *)swift_task_alloc(v15[1]);
    *(_QWORD *)(v0 + 456) = v16;
    *v16 = v0;
    v16[1] = sub_10002FCA4;
    return v17(*(_QWORD *)(v0 + 192));
  }
}

uint64_t sub_10002FBD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 264));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 232);
  v9 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 200);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002FCA4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 456);
  *(_QWORD *)(*v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10002FDDC;
  else
    v4 = sub_10002FD04;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 280), *(_QWORD *)(v2 + 288));
}

uint64_t sub_10002FD04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v8;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(v0[23] + 8))(v0[24], v0[22]);
  v2 = v0[54];
  v3 = v0[34];
  v4 = v0[19];
  v5 = v0[17];
  v6 = static CommunicationActor.shared.getter(v1);
  v0[55] = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v5, v4, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v8 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[56] = v8;
  *v8 = v0;
  v8[1] = sub_10002FA00;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[16], v6, v3, v0 + 10, v0[19], AssociatedConformanceWitness);
}

uint64_t sub_10002FDDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 264));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = *(_QWORD *)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 232);
  v12 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 200);
  v13 = *(_QWORD *)(v0 + 168);
  v14 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002FEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  v5 = type metadata accessor for StoredPhoto(0);
  v4[16] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[17] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[18] = swift_task_alloc(v7);
  v4[19] = swift_task_alloc(v7);
  v8 = sub_10000629C(&qword_1000B31D0);
  v4[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000629C(&qword_1000B3198);
  v4[21] = v9;
  v4[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000629C(&qword_1000B31D8);
  v4[23] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[24] = v11;
  v4[25] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v4[26] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[27] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[28] = swift_task_alloc(v14);
  v4[29] = swift_task_alloc(v14);
  v4[30] = swift_task_alloc(v14);
  v4[31] = swift_task_alloc(v14);
  v15 = type metadata accessor for CommunicationActor(0);
  v4[32] = v15;
  v4[33] = static CommunicationActor.shared.getter(v15);
  v16 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4[34] = v16;
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v15, v16);
  v4[35] = v17;
  v4[36] = v18;
  return swift_task_switch(sub_100030060, v17, v18);
}

uint64_t sub_100030060()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Face;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0[14] + 80);
  v0[8] = v1;
  v2 = swift_retain(v1);
  Face = FetchFaceRequest.id.getter(v2);
  v4 = FetchFaceRequest.day.getter(Face);
  if ((v5 & 1) != 0)
    v4 = sub_1000242C0();
  v6 = v4;
  v7 = type metadata accessor for ShuffleDatabase(0);
  v0[37] = v7;
  v8 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
  v0[38] = v8;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.query(id:day:)[1]);
  v0[39] = v9;
  *v9 = v0;
  v9[1] = sub_100030130;
  return dispatch thunk of PhotosFaceIDDatabase.query(id:day:)(v0[31], v6, v7, v8);
}

uint64_t sub_100030130(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 312);
  v3[40] = a1;
  v3[41] = v1;
  swift_task_dealloc(v4);
  v5 = v3[31];
  v6 = v3[26];
  v7 = *(void (**)(uint64_t, uint64_t))(v3[27] + 8);
  if (v1)
  {
    v7(v5, v6);
    swift_release(v3[8]);
    v8 = v3[35];
    v9 = v3[36];
    v10 = sub_10003E470;
  }
  else
  {
    v3[42] = v7;
    v7(v5, v6);
    swift_release(v3[8]);
    v8 = v3[35];
    v9 = v3[36];
    v10 = sub_1000301C4;
  }
  return swift_task_switch(v10, v8, v9);
}

uint64_t sub_1000301C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void (*v7)(_QWORD, unint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v10;
  char v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD);

  v1 = *(_QWORD *)(v0 + 320);
  if (!*(_QWORD *)(v1 + 16))
  {
    v10 = *(_QWORD *)(v0 + 112);
    FetchFaceRequest.id.getter(v1);
    swift_beginAccess(v10 + 112, v0 + 40, 32, 0);
    if (!*(_QWORD *)(*(_QWORD *)(v10 + 112) + 16) || (sub_10004A3F8(*(_QWORD *)(v0 + 240)), (v11 & 1) == 0))
    {
      v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
      v37 = *(_QWORD *)(v0 + 240);
      v38 = *(_QWORD *)(v0 + 208);
      swift_endAccess(v0 + 40);
      v39 = v36(v37, v38);
      FetchFaceRequest.id.getter(v39);
      v40 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)[1]);
      *(_QWORD *)(v0 + 344) = v40;
      *v40 = v0;
      v40[1] = sub_100030594;
      return dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
    }
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v13 = *(_QWORD *)(v0 + 240);
    v14 = *(_QWORD *)(v0 + 208);
    swift_endAccess(v0 + 40);
    v12(v13, v14);
    v1 = *(_QWORD *)(v0 + 320);
  }
  *(_QWORD *)(v0 + 368) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 376) = v2;
  if (v2)
  {
    v3 = *(int **)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 136);
    v6 = *(_DWORD *)(v5 + 80);
    *(_DWORD *)(v0 + 472) = v6;
    *(_QWORD *)(v0 + 384) = *(_QWORD *)(v5 + 72);
    v7 = *(void (**)(_QWORD, unint64_t, uint64_t))(v5 + 16);
    *(_QWORD *)(v0 + 392) = v7;
    *(_QWORD *)(v0 + 448) = 0;
    v7(*(_QWORD *)(v0 + 144), v1 + ((v6 + 32) & ~(unint64_t)v6), v4);
    v53 = (uint64_t (*)(_QWORD))((char *)v3 + *v3);
    v8 = (_QWORD *)swift_task_alloc(v3[1]);
    *(_QWORD *)(v0 + 456) = v8;
    *v8 = v0;
    v8[1] = sub_100030D28;
    return v53(*(_QWORD *)(v0 + 144));
  }
  else
  {
    v15 = swift_bridgeObjectRelease(v1);
    v16 = *(_QWORD *)(v0 + 112);
    FetchFaceRequest.id.getter(v15);
    swift_beginAccess(v16 + 112, v0 + 16, 32, 0);
    v17 = *(_QWORD *)(v16 + 112);
    if (*(_QWORD *)(v17 + 16) && (v18 = sub_10004A3F8(*(_QWORD *)(v0 + 224)), (v19 & 1) != 0))
    {
      v20 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
      v21 = *(_QWORD *)(v0 + 224);
      v22 = *(_QWORD *)(v0 + 208);
      v23 = *(_QWORD *)(v0 + 168);
      v24 = *(_QWORD *)(v0 + 128);
      v25 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
      *(_QWORD *)(v0 + 400) = v25;
      swift_endAccess(v0 + 16);
      swift_retain(v25);
      v26 = v20(v21, v22);
      dispatch thunk of BroadcastSequence.listen()(v26);
      *(_QWORD *)(v0 + 72) = v24;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 72, &opaque type descriptor for <<opaque return type of BroadcastSequence.listen()>>, 1);
      *(_QWORD *)(v0 + 408) = OpaqueTypeConformance2;
      v28 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v23, OpaqueTypeConformance2);
      v29 = *(_QWORD *)(v0 + 408);
      v30 = *(_QWORD *)(v0 + 272);
      v31 = *(_QWORD *)(v0 + 184);
      v32 = *(_QWORD *)(v0 + 168);
      v33 = static CommunicationActor.shared.getter(v28);
      *(_QWORD *)(v0 + 416) = v33;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v29, v32, v31, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
      v35 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 424) = v35;
      *v35 = v0;
      v35[1] = sub_100030A20;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 160), v33, v30, v0 + 80, *(_QWORD *)(v0 + 184), AssociatedConformanceWitness);
    }
    else
    {
      v41 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
      v42 = *(_QWORD *)(v0 + 264);
      v43 = *(_QWORD *)(v0 + 224);
      v44 = *(_QWORD *)(v0 + 208);
      swift_endAccess(v0 + 16);
      swift_release(v42);
      v41(v43, v44);
      v45 = *(_QWORD *)(v0 + 240);
      v47 = *(_QWORD *)(v0 + 224);
      v46 = *(_QWORD *)(v0 + 232);
      v48 = *(_QWORD *)(v0 + 200);
      v49 = *(_QWORD *)(v0 + 176);
      v51 = *(_QWORD *)(v0 + 152);
      v50 = *(_QWORD *)(v0 + 160);
      v52 = *(_QWORD *)(v0 + 144);
      swift_task_dealloc(*(_QWORD *)(v0 + 248));
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_100030594(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void (*v5)(_QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 344);
  v3[44] = a1;
  v3[45] = v1;
  swift_task_dealloc(v4);
  v5 = (void (*)(_QWORD, _QWORD))v3[42];
  if (v1)
  {
    v6 = v3[40];
    v5(v3[29], v3[26]);
    swift_bridgeObjectRelease(v6);
    v7 = v3[35];
    v8 = v3[36];
    v9 = sub_10003E48C;
  }
  else
  {
    v5(v3[29], v3[26]);
    v7 = v3[35];
    v8 = v3[36];
    v9 = sub_100030628;
  }
  return swift_task_switch(v9, v7, v8);
}

uint64_t sub_100030628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v22)(_QWORD, unint64_t, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(_QWORD);

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = swift_bridgeObjectRetain(v1);
  v4 = sub_10003262C(v3);
  v6 = v5;
  swift_bridgeObjectRelease(v1);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 320));
    result = sub_1000242C0();
    v8 = result - v4;
    if (__OFSUB__(result, v4))
    {
      __break(1u);
    }
    else
    {
      v9 = __OFSUB__(v8, 1);
      v10 = v8 - 1;
      if (!v9)
      {
        if (v10 < 0)
        {
          v9 = __OFSUB__(0, v10);
          v10 = -v10;
          if (v9)
            goto LABEL_22;
        }
        if (v2)
        {
          v11 = *(_QWORD *)(v0 + 352);
          v12 = v10 % v2;
          *(_QWORD *)(v0 + 88) = v11;
          v13 = sub_10000629C(&qword_1000B31E0);
          v14 = sub_100006454(&qword_1000B31E8, &qword_1000B31E0, (uint64_t)&protocol conformance descriptor for [A : B]);
          v15 = Sequence.sorted<A>(_:)(sub_100055BA0, 0, v13, &type metadata for Int, v14, &protocol witness table for Int);
          result = swift_bridgeObjectRelease(v11);
          if ((v12 & 0x8000000000000000) == 0)
          {
            if (v12 < *(_QWORD *)(v15 + 16))
            {
              v16 = *(_QWORD *)(v15 + 16 * v12 + 40);
              swift_bridgeObjectRetain(v16);
              swift_bridgeObjectRelease(v15);
              goto LABEL_11;
            }
            goto LABEL_21;
          }
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          return result;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 352));
  v16 = *(_QWORD *)(v0 + 320);
LABEL_11:
  *(_QWORD *)(v0 + 368) = v16;
  v17 = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(v0 + 376) = v17;
  if (v17)
  {
    v18 = *(int **)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 128);
    v20 = *(_QWORD *)(v0 + 136);
    v21 = *(_DWORD *)(v20 + 80);
    *(_DWORD *)(v0 + 472) = v21;
    *(_QWORD *)(v0 + 384) = *(_QWORD *)(v20 + 72);
    v22 = *(void (**)(_QWORD, unint64_t, uint64_t))(v20 + 16);
    *(_QWORD *)(v0 + 392) = v22;
    *(_QWORD *)(v0 + 448) = 0;
    v22(*(_QWORD *)(v0 + 144), v16 + ((v21 + 32) & ~(unint64_t)v21), v19);
    v57 = (uint64_t (*)(_QWORD))((char *)v18 + *v18);
    v23 = (_QWORD *)swift_task_alloc(v18[1]);
    *(_QWORD *)(v0 + 456) = v23;
    *v23 = v0;
    v23[1] = sub_100030D28;
    return v57(*(_QWORD *)(v0 + 144));
  }
  else
  {
    v24 = swift_bridgeObjectRelease(v16);
    v25 = *(_QWORD *)(v0 + 112);
    FetchFaceRequest.id.getter(v24);
    swift_beginAccess(v25 + 112, v0 + 16, 32, 0);
    v26 = *(_QWORD *)(v25 + 112);
    if (*(_QWORD *)(v26 + 16) && (v27 = sub_10004A3F8(*(_QWORD *)(v0 + 224)), (v28 & 1) != 0))
    {
      v29 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
      v30 = *(_QWORD *)(v0 + 224);
      v31 = *(_QWORD *)(v0 + 208);
      v32 = *(_QWORD *)(v0 + 168);
      v33 = *(_QWORD *)(v0 + 128);
      v34 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
      *(_QWORD *)(v0 + 400) = v34;
      swift_endAccess(v0 + 16);
      swift_retain(v34);
      v35 = v29(v30, v31);
      dispatch thunk of BroadcastSequence.listen()(v35);
      *(_QWORD *)(v0 + 72) = v33;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 72, &opaque type descriptor for <<opaque return type of BroadcastSequence.listen()>>, 1);
      *(_QWORD *)(v0 + 408) = OpaqueTypeConformance2;
      v37 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v32, OpaqueTypeConformance2);
      v38 = *(_QWORD *)(v0 + 408);
      v39 = *(_QWORD *)(v0 + 272);
      v40 = *(_QWORD *)(v0 + 184);
      v41 = *(_QWORD *)(v0 + 168);
      v42 = static CommunicationActor.shared.getter(v37);
      *(_QWORD *)(v0 + 416) = v42;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v41, v40, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
      v44 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 424) = v44;
      *v44 = v0;
      v44[1] = sub_100030A20;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 160), v42, v39, v0 + 80, *(_QWORD *)(v0 + 184), AssociatedConformanceWitness);
    }
    else
    {
      v45 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
      v46 = *(_QWORD *)(v0 + 264);
      v47 = *(_QWORD *)(v0 + 224);
      v48 = *(_QWORD *)(v0 + 208);
      swift_endAccess(v0 + 16);
      swift_release(v46);
      v45(v47, v48);
      v49 = *(_QWORD *)(v0 + 240);
      v51 = *(_QWORD *)(v0 + 224);
      v50 = *(_QWORD *)(v0 + 232);
      v52 = *(_QWORD *)(v0 + 200);
      v53 = *(_QWORD *)(v0 + 176);
      v55 = *(_QWORD *)(v0 + 152);
      v54 = *(_QWORD *)(v0 + 160);
      v56 = *(_QWORD *)(v0 + 144);
      swift_task_dealloc(*(_QWORD *)(v0 + 248));
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_100030A20()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 424));
  swift_release(v2[52]);
  if (v0)
    v3 = sub_10003E474;
  else
    v3 = sub_100030A90;
  return swift_task_switch(v3, v2[35], v2[36]);
}

uint64_t sub_100030A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v15;
  _QWORD *v16;
  uint64_t (*v17)(_QWORD);

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 400);
    v5 = *(_QWORD *)(v0 + 264);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    swift_release(v4);
    swift_release(v5);
    v6 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 232);
    v9 = *(_QWORD *)(v0 + 200);
    v10 = *(_QWORD *)(v0 + 176);
    v12 = *(_QWORD *)(v0 + 152);
    v11 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(int **)(v0 + 96);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 152), v1, v2);
    v17 = (uint64_t (*)(_QWORD))((char *)v15 + *v15);
    v16 = (_QWORD *)swift_task_alloc(v15[1]);
    *(_QWORD *)(v0 + 432) = v16;
    *v16 = v0;
    v16[1] = sub_100030BF0;
    return v17(*(_QWORD *)(v0 + 152));
  }
}

uint64_t sub_100030BF0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 432);
  *(_QWORD *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10003E490;
  else
    v4 = sub_100030C50;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 280), *(_QWORD *)(v2 + 288));
}

uint64_t sub_100030C50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v8;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(v0[17] + 8))(v0[19], v0[16]);
  v2 = v0[51];
  v3 = v0[34];
  v4 = v0[23];
  v5 = v0[21];
  v6 = static CommunicationActor.shared.getter(v1);
  v0[52] = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v5, v4, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v8 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[53] = v8;
  *v8 = v0;
  v8[1] = sub_100030A20;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[20], v6, v3, v0 + 10, v0[23], AssociatedConformanceWitness);
}

uint64_t sub_100030D28()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[46]);
    v4 = v2[35];
    v5 = v2[36];
    v6 = sub_10003E460;
  }
  else
  {
    v4 = v2[35];
    v5 = v2[36];
    v6 = sub_100030D94;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100030D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v23;
  uint64_t v25;
  int *v26;
  _QWORD *v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD);

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 448) + 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
  if (v2 == v1)
  {
    v3 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 368));
    v4 = *(_QWORD *)(v0 + 112);
    FetchFaceRequest.id.getter(v3);
    swift_beginAccess(v4 + 112, v0 + 16, 32, 0);
    v5 = *(_QWORD *)(v4 + 112);
    if (*(_QWORD *)(v5 + 16) && (v6 = sub_10004A3F8(*(_QWORD *)(v0 + 224)), (v7 & 1) != 0))
    {
      v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
      v9 = *(_QWORD *)(v0 + 224);
      v10 = *(_QWORD *)(v0 + 208);
      v11 = *(_QWORD *)(v0 + 168);
      v12 = *(_QWORD *)(v0 + 128);
      v13 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
      *(_QWORD *)(v0 + 400) = v13;
      swift_endAccess(v0 + 16);
      swift_retain(v13);
      v14 = v8(v9, v10);
      dispatch thunk of BroadcastSequence.listen()(v14);
      *(_QWORD *)(v0 + 72) = v12;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 72, &opaque type descriptor for <<opaque return type of BroadcastSequence.listen()>>, 1);
      *(_QWORD *)(v0 + 408) = OpaqueTypeConformance2;
      v16 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v11, OpaqueTypeConformance2);
      v17 = *(_QWORD *)(v0 + 408);
      v18 = *(_QWORD *)(v0 + 272);
      v19 = *(_QWORD *)(v0 + 184);
      v20 = *(_QWORD *)(v0 + 168);
      v21 = static CommunicationActor.shared.getter(v16);
      *(_QWORD *)(v0 + 416) = v21;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v17, v20, v19, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
      v23 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 424) = v23;
      *v23 = v0;
      v23[1] = sub_100030A20;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 160), v21, v18, v0 + 80, *(_QWORD *)(v0 + 184), AssociatedConformanceWitness);
    }
    else
    {
      v28 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
      v29 = *(_QWORD *)(v0 + 264);
      v30 = *(_QWORD *)(v0 + 224);
      v31 = *(_QWORD *)(v0 + 208);
      swift_endAccess(v0 + 16);
      swift_release(v29);
      v28(v30, v31);
      v32 = *(_QWORD *)(v0 + 240);
      v34 = *(_QWORD *)(v0 + 224);
      v33 = *(_QWORD *)(v0 + 232);
      v35 = *(_QWORD *)(v0 + 200);
      v36 = *(_QWORD *)(v0 + 176);
      v38 = *(_QWORD *)(v0 + 152);
      v37 = *(_QWORD *)(v0 + 160);
      v39 = *(_QWORD *)(v0 + 144);
      swift_task_dealloc(*(_QWORD *)(v0 + 248));
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 448) + 1;
    *(_QWORD *)(v0 + 448) = v25;
    v26 = *(int **)(v0 + 96);
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 392))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 368)+ ((*(unsigned __int8 *)(v0 + 472) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 472))+ *(_QWORD *)(v0 + 384) * v25, *(_QWORD *)(v0 + 128));
    v40 = (uint64_t (*)(_QWORD))((char *)v26 + *v26);
    v27 = (_QWORD *)swift_task_alloc(v26[1]);
    *(_QWORD *)(v0 + 456) = v27;
    *v27 = v0;
    v27[1] = sub_100030D28;
    return v40(*(_QWORD *)(v0 + 144));
  }
}

uint64_t sub_100031084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  v5 = type metadata accessor for StoredPhoto(0);
  v4[16] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[17] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[18] = swift_task_alloc(v7);
  v4[19] = swift_task_alloc(v7);
  v8 = sub_10000629C(&qword_1000B31D0);
  v4[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000629C(&qword_1000B3198);
  v4[21] = v9;
  v4[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000629C(&qword_1000B31D8);
  v4[23] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[24] = v11;
  v4[25] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v4[26] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[27] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[28] = swift_task_alloc(v14);
  v4[29] = swift_task_alloc(v14);
  v4[30] = swift_task_alloc(v14);
  v4[31] = swift_task_alloc(v14);
  v15 = type metadata accessor for CommunicationActor(0);
  v4[32] = v15;
  v4[33] = static CommunicationActor.shared.getter(v15);
  v16 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4[34] = v16;
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v15, v16);
  v4[35] = v17;
  v4[36] = v18;
  return swift_task_switch(sub_100031220, v17, v18);
}

uint64_t sub_100031220()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Face;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0[14] + 80);
  v0[8] = v1;
  v2 = swift_retain(v1);
  Face = FetchFaceRequest.id.getter(v2);
  v4 = FetchFaceRequest.day.getter(Face);
  if ((v5 & 1) != 0)
    v4 = sub_1000242C0();
  v6 = v4;
  v7 = type metadata accessor for AlbumDatabase(0);
  v0[37] = v7;
  v8 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
  v0[38] = v8;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.query(id:day:)[1]);
  v0[39] = v9;
  *v9 = v0;
  v9[1] = sub_1000312F0;
  return dispatch thunk of PhotosFaceIDDatabase.query(id:day:)(v0[31], v6, v7, v8);
}

uint64_t sub_1000312F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 312);
  v3[40] = a1;
  v3[41] = v1;
  swift_task_dealloc(v4);
  v5 = v3[31];
  v6 = v3[26];
  v7 = *(void (**)(uint64_t, uint64_t))(v3[27] + 8);
  if (v1)
  {
    v7(v5, v6);
    swift_release(v3[8]);
    v8 = v3[35];
    v9 = v3[36];
    v10 = sub_100031754;
  }
  else
  {
    v3[42] = v7;
    v7(v5, v6);
    swift_release(v3[8]);
    v8 = v3[35];
    v9 = v3[36];
    v10 = sub_100031384;
  }
  return swift_task_switch(v10, v8, v9);
}

uint64_t sub_100031384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void (*v7)(_QWORD, unint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v10;
  char v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD);

  v1 = *(_QWORD *)(v0 + 320);
  if (!*(_QWORD *)(v1 + 16))
  {
    v10 = *(_QWORD *)(v0 + 112);
    FetchFaceRequest.id.getter(v1);
    swift_beginAccess(v10 + 112, v0 + 40, 32, 0);
    if (!*(_QWORD *)(*(_QWORD *)(v10 + 112) + 16) || (sub_10004A3F8(*(_QWORD *)(v0 + 240)), (v11 & 1) == 0))
    {
      v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
      v37 = *(_QWORD *)(v0 + 240);
      v38 = *(_QWORD *)(v0 + 208);
      swift_endAccess(v0 + 40);
      v39 = v36(v37, v38);
      FetchFaceRequest.id.getter(v39);
      v40 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)[1]);
      *(_QWORD *)(v0 + 344) = v40;
      *v40 = v0;
      v40[1] = sub_100031804;
      return dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
    }
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v13 = *(_QWORD *)(v0 + 240);
    v14 = *(_QWORD *)(v0 + 208);
    swift_endAccess(v0 + 40);
    v12(v13, v14);
    v1 = *(_QWORD *)(v0 + 320);
  }
  *(_QWORD *)(v0 + 368) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 376) = v2;
  if (v2)
  {
    v3 = *(int **)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 136);
    v6 = *(_DWORD *)(v5 + 80);
    *(_DWORD *)(v0 + 472) = v6;
    *(_QWORD *)(v0 + 384) = *(_QWORD *)(v5 + 72);
    v7 = *(void (**)(_QWORD, unint64_t, uint64_t))(v5 + 16);
    *(_QWORD *)(v0 + 392) = v7;
    *(_QWORD *)(v0 + 448) = 0;
    v7(*(_QWORD *)(v0 + 144), v1 + ((v6 + 32) & ~(unint64_t)v6), v4);
    v53 = (uint64_t (*)(_QWORD))((char *)v3 + *v3);
    v8 = (_QWORD *)swift_task_alloc(v3[1]);
    *(_QWORD *)(v0 + 456) = v8;
    *v8 = v0;
    v8[1] = sub_100032208;
    return v53(*(_QWORD *)(v0 + 144));
  }
  else
  {
    v15 = swift_bridgeObjectRelease(v1);
    v16 = *(_QWORD *)(v0 + 112);
    FetchFaceRequest.id.getter(v15);
    swift_beginAccess(v16 + 112, v0 + 16, 32, 0);
    v17 = *(_QWORD *)(v16 + 112);
    if (*(_QWORD *)(v17 + 16) && (v18 = sub_10004A3F8(*(_QWORD *)(v0 + 224)), (v19 & 1) != 0))
    {
      v20 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
      v21 = *(_QWORD *)(v0 + 224);
      v22 = *(_QWORD *)(v0 + 208);
      v23 = *(_QWORD *)(v0 + 168);
      v24 = *(_QWORD *)(v0 + 128);
      v25 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
      *(_QWORD *)(v0 + 400) = v25;
      swift_endAccess(v0 + 16);
      swift_retain(v25);
      v26 = v20(v21, v22);
      dispatch thunk of BroadcastSequence.listen()(v26);
      *(_QWORD *)(v0 + 72) = v24;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 72, &opaque type descriptor for <<opaque return type of BroadcastSequence.listen()>>, 1);
      *(_QWORD *)(v0 + 408) = OpaqueTypeConformance2;
      v28 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v23, OpaqueTypeConformance2);
      v29 = *(_QWORD *)(v0 + 408);
      v30 = *(_QWORD *)(v0 + 272);
      v31 = *(_QWORD *)(v0 + 184);
      v32 = *(_QWORD *)(v0 + 168);
      v33 = static CommunicationActor.shared.getter(v28);
      *(_QWORD *)(v0 + 416) = v33;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v29, v32, v31, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
      v35 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 424) = v35;
      *v35 = v0;
      v35[1] = sub_100031D40;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 160), v33, v30, v0 + 80, *(_QWORD *)(v0 + 184), AssociatedConformanceWitness);
    }
    else
    {
      v41 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
      v42 = *(_QWORD *)(v0 + 264);
      v43 = *(_QWORD *)(v0 + 224);
      v44 = *(_QWORD *)(v0 + 208);
      swift_endAccess(v0 + 16);
      swift_release(v42);
      v41(v43, v44);
      v45 = *(_QWORD *)(v0 + 240);
      v47 = *(_QWORD *)(v0 + 224);
      v46 = *(_QWORD *)(v0 + 232);
      v48 = *(_QWORD *)(v0 + 200);
      v49 = *(_QWORD *)(v0 + 176);
      v51 = *(_QWORD *)(v0 + 152);
      v50 = *(_QWORD *)(v0 + 160);
      v52 = *(_QWORD *)(v0 + 144);
      swift_task_dealloc(*(_QWORD *)(v0 + 248));
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_100031754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*(_QWORD *)(v0 + 264));
  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100031804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void (*v5)(_QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 344);
  v3[44] = a1;
  v3[45] = v1;
  swift_task_dealloc(v4);
  v5 = (void (*)(_QWORD, _QWORD))v3[42];
  if (v1)
  {
    v6 = v3[40];
    v5(v3[29], v3[26]);
    swift_bridgeObjectRelease(v6);
    v7 = v3[35];
    v8 = v3[36];
    v9 = sub_100031C90;
  }
  else
  {
    v5(v3[29], v3[26]);
    v7 = v3[35];
    v8 = v3[36];
    v9 = sub_100031898;
  }
  return swift_task_switch(v9, v7, v8);
}

uint64_t sub_100031898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v22)(_QWORD, unint64_t, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(_QWORD);

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = swift_bridgeObjectRetain(v1);
  v4 = sub_10003262C(v3);
  v6 = v5;
  swift_bridgeObjectRelease(v1);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 320));
    result = sub_1000242C0();
    v8 = result - v4;
    if (__OFSUB__(result, v4))
    {
      __break(1u);
    }
    else
    {
      v9 = __OFSUB__(v8, 1);
      v10 = v8 - 1;
      if (!v9)
      {
        if (v10 < 0)
        {
          v9 = __OFSUB__(0, v10);
          v10 = -v10;
          if (v9)
            goto LABEL_22;
        }
        if (v2)
        {
          v11 = *(_QWORD *)(v0 + 352);
          v12 = v10 % v2;
          *(_QWORD *)(v0 + 88) = v11;
          v13 = sub_10000629C(&qword_1000B31E0);
          v14 = sub_100006454(&qword_1000B31E8, &qword_1000B31E0, (uint64_t)&protocol conformance descriptor for [A : B]);
          v15 = Sequence.sorted<A>(_:)(sub_100055BA0, 0, v13, &type metadata for Int, v14, &protocol witness table for Int);
          result = swift_bridgeObjectRelease(v11);
          if ((v12 & 0x8000000000000000) == 0)
          {
            if (v12 < *(_QWORD *)(v15 + 16))
            {
              v16 = *(_QWORD *)(v15 + 16 * v12 + 40);
              swift_bridgeObjectRetain(v16);
              swift_bridgeObjectRelease(v15);
              goto LABEL_11;
            }
            goto LABEL_21;
          }
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          return result;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 352));
  v16 = *(_QWORD *)(v0 + 320);
LABEL_11:
  *(_QWORD *)(v0 + 368) = v16;
  v17 = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(v0 + 376) = v17;
  if (v17)
  {
    v18 = *(int **)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 128);
    v20 = *(_QWORD *)(v0 + 136);
    v21 = *(_DWORD *)(v20 + 80);
    *(_DWORD *)(v0 + 472) = v21;
    *(_QWORD *)(v0 + 384) = *(_QWORD *)(v20 + 72);
    v22 = *(void (**)(_QWORD, unint64_t, uint64_t))(v20 + 16);
    *(_QWORD *)(v0 + 392) = v22;
    *(_QWORD *)(v0 + 448) = 0;
    v22(*(_QWORD *)(v0 + 144), v16 + ((v21 + 32) & ~(unint64_t)v21), v19);
    v57 = (uint64_t (*)(_QWORD))((char *)v18 + *v18);
    v23 = (_QWORD *)swift_task_alloc(v18[1]);
    *(_QWORD *)(v0 + 456) = v23;
    *v23 = v0;
    v23[1] = sub_100032208;
    return v57(*(_QWORD *)(v0 + 144));
  }
  else
  {
    v24 = swift_bridgeObjectRelease(v16);
    v25 = *(_QWORD *)(v0 + 112);
    FetchFaceRequest.id.getter(v24);
    swift_beginAccess(v25 + 112, v0 + 16, 32, 0);
    v26 = *(_QWORD *)(v25 + 112);
    if (*(_QWORD *)(v26 + 16) && (v27 = sub_10004A3F8(*(_QWORD *)(v0 + 224)), (v28 & 1) != 0))
    {
      v29 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
      v30 = *(_QWORD *)(v0 + 224);
      v31 = *(_QWORD *)(v0 + 208);
      v32 = *(_QWORD *)(v0 + 168);
      v33 = *(_QWORD *)(v0 + 128);
      v34 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
      *(_QWORD *)(v0 + 400) = v34;
      swift_endAccess(v0 + 16);
      swift_retain(v34);
      v35 = v29(v30, v31);
      dispatch thunk of BroadcastSequence.listen()(v35);
      *(_QWORD *)(v0 + 72) = v33;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 72, &opaque type descriptor for <<opaque return type of BroadcastSequence.listen()>>, 1);
      *(_QWORD *)(v0 + 408) = OpaqueTypeConformance2;
      v37 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v32, OpaqueTypeConformance2);
      v38 = *(_QWORD *)(v0 + 408);
      v39 = *(_QWORD *)(v0 + 272);
      v40 = *(_QWORD *)(v0 + 184);
      v41 = *(_QWORD *)(v0 + 168);
      v42 = static CommunicationActor.shared.getter(v37);
      *(_QWORD *)(v0 + 416) = v42;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v41, v40, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
      v44 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 424) = v44;
      *v44 = v0;
      v44[1] = sub_100031D40;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 160), v42, v39, v0 + 80, *(_QWORD *)(v0 + 184), AssociatedConformanceWitness);
    }
    else
    {
      v45 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
      v46 = *(_QWORD *)(v0 + 264);
      v47 = *(_QWORD *)(v0 + 224);
      v48 = *(_QWORD *)(v0 + 208);
      swift_endAccess(v0 + 16);
      swift_release(v46);
      v45(v47, v48);
      v49 = *(_QWORD *)(v0 + 240);
      v51 = *(_QWORD *)(v0 + 224);
      v50 = *(_QWORD *)(v0 + 232);
      v52 = *(_QWORD *)(v0 + 200);
      v53 = *(_QWORD *)(v0 + 176);
      v55 = *(_QWORD *)(v0 + 152);
      v54 = *(_QWORD *)(v0 + 160);
      v56 = *(_QWORD *)(v0 + 144);
      swift_task_dealloc(*(_QWORD *)(v0 + 248));
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_100031C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*(_QWORD *)(v0 + 264));
  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100031D40()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 424));
  swift_release(v2[52]);
  if (v0)
    v3 = sub_100031F10;
  else
    v3 = sub_100031DB0;
  return swift_task_switch(v3, v2[35], v2[36]);
}

uint64_t sub_100031DB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v15;
  _QWORD *v16;
  uint64_t (*v17)(_QWORD);

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 400);
    v5 = *(_QWORD *)(v0 + 264);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    swift_release(v4);
    swift_release(v5);
    v6 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 232);
    v9 = *(_QWORD *)(v0 + 200);
    v10 = *(_QWORD *)(v0 + 176);
    v12 = *(_QWORD *)(v0 + 152);
    v11 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(int **)(v0 + 96);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 152), v1, v2);
    v17 = (uint64_t (*)(_QWORD))((char *)v15 + *v15);
    v16 = (_QWORD *)swift_task_alloc(v15[1]);
    *(_QWORD *)(v0 + 432) = v16;
    *v16 = v0;
    v16[1] = sub_100031FE4;
    return v17(*(_QWORD *)(v0 + 152));
  }
}

uint64_t sub_100031F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 264));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 160);
  v12 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100031FE4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 432);
  *(_QWORD *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10003211C;
  else
    v4 = sub_100032044;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 280), *(_QWORD *)(v2 + 288));
}

uint64_t sub_100032044()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v8;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(v0[17] + 8))(v0[19], v0[16]);
  v2 = v0[51];
  v3 = v0[34];
  v4 = v0[23];
  v5 = v0[21];
  v6 = static CommunicationActor.shared.getter(v1);
  v0[52] = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v5, v4, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v8 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[53] = v8;
  *v8 = v0;
  v8[1] = sub_100031D40;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[20], v6, v3, v0 + 10, v0[23], AssociatedConformanceWitness);
}

uint64_t sub_10003211C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 264));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v8 = *(_QWORD *)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100032208()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[46]);
    v4 = v2[35];
    v5 = v2[36];
    v6 = sub_100032564;
  }
  else
  {
    v4 = v2[35];
    v5 = v2[36];
    v6 = sub_100032274;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100032274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v23;
  uint64_t v25;
  int *v26;
  _QWORD *v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD);

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 448) + 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
  if (v2 == v1)
  {
    v3 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 368));
    v4 = *(_QWORD *)(v0 + 112);
    FetchFaceRequest.id.getter(v3);
    swift_beginAccess(v4 + 112, v0 + 16, 32, 0);
    v5 = *(_QWORD *)(v4 + 112);
    if (*(_QWORD *)(v5 + 16) && (v6 = sub_10004A3F8(*(_QWORD *)(v0 + 224)), (v7 & 1) != 0))
    {
      v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
      v9 = *(_QWORD *)(v0 + 224);
      v10 = *(_QWORD *)(v0 + 208);
      v11 = *(_QWORD *)(v0 + 168);
      v12 = *(_QWORD *)(v0 + 128);
      v13 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
      *(_QWORD *)(v0 + 400) = v13;
      swift_endAccess(v0 + 16);
      swift_retain(v13);
      v14 = v8(v9, v10);
      dispatch thunk of BroadcastSequence.listen()(v14);
      *(_QWORD *)(v0 + 72) = v12;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 72, &opaque type descriptor for <<opaque return type of BroadcastSequence.listen()>>, 1);
      *(_QWORD *)(v0 + 408) = OpaqueTypeConformance2;
      v16 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v11, OpaqueTypeConformance2);
      v17 = *(_QWORD *)(v0 + 408);
      v18 = *(_QWORD *)(v0 + 272);
      v19 = *(_QWORD *)(v0 + 184);
      v20 = *(_QWORD *)(v0 + 168);
      v21 = static CommunicationActor.shared.getter(v16);
      *(_QWORD *)(v0 + 416) = v21;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v17, v20, v19, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
      v23 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 424) = v23;
      *v23 = v0;
      v23[1] = sub_100031D40;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 160), v21, v18, v0 + 80, *(_QWORD *)(v0 + 184), AssociatedConformanceWitness);
    }
    else
    {
      v28 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
      v29 = *(_QWORD *)(v0 + 264);
      v30 = *(_QWORD *)(v0 + 224);
      v31 = *(_QWORD *)(v0 + 208);
      swift_endAccess(v0 + 16);
      swift_release(v29);
      v28(v30, v31);
      v32 = *(_QWORD *)(v0 + 240);
      v34 = *(_QWORD *)(v0 + 224);
      v33 = *(_QWORD *)(v0 + 232);
      v35 = *(_QWORD *)(v0 + 200);
      v36 = *(_QWORD *)(v0 + 176);
      v38 = *(_QWORD *)(v0 + 152);
      v37 = *(_QWORD *)(v0 + 160);
      v39 = *(_QWORD *)(v0 + 144);
      swift_task_dealloc(*(_QWORD *)(v0 + 248));
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 448) + 1;
    *(_QWORD *)(v0 + 448) = v25;
    v26 = *(int **)(v0 + 96);
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 392))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 368)+ ((*(unsigned __int8 *)(v0 + 472) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 472))+ *(_QWORD *)(v0 + 384) * v25, *(_QWORD *)(v0 + 128));
    v40 = (uint64_t (*)(_QWORD))((char *)v26 + *v26);
    v27 = (_QWORD *)swift_task_alloc(v26[1]);
    *(_QWORD *)(v0 + 456) = v27;
    *v27 = v0;
    v27[1] = sub_100032208;
    return v40(*(_QWORD *)(v0 + 144));
  }
}

uint64_t sub_100032564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003262C(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = result + 64;
  v2 = *(_BYTE *)(result + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(result + 64);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      return 0;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v17 = *(_QWORD *)(result + 72);
    if (v17)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        return 0;
      v17 = *(_QWORD *)(result + 80);
      if (v17)
      {
        v6 = 2;
      }
      else
      {
        v17 = *(_QWORD *)(result + 88);
        if (v17)
        {
          v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9)
            return 0;
          v17 = *(_QWORD *)(result + 96);
          if (v17)
          {
            v6 = 4;
          }
          else
          {
            v17 = *(_QWORD *)(result + 104);
            if (!v17)
              goto LABEL_43;
            v6 = 5;
          }
        }
      }
    }
LABEL_30:
    v8 = (v17 - 1) & v17;
    v7 = __clz(__rbit64(v17)) + (v6 << 6);
  }
  v10 = *(_QWORD *)(result + 48);
  result = *(_QWORD *)(v10 + 8 * v7);
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v6 << 6);
LABEL_7:
    v13 = *(_QWORD *)(v10 + 8 * v12);
    if (result <= v13)
      result = v13;
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v14);
  ++v6;
  if (v15)
    goto LABEL_25;
  v6 = v14 + 1;
  if (v14 + 1 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 2;
  if (v14 + 2 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 3;
  if (v14 + 3 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    v8 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }
  v16 = v14 + 4;
  if (v16 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v9)
      return result;
    v15 = *(_QWORD *)(v1 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  v18 = 0;
  v19 = 6;
  if (v9 > 6)
    v19 = v9;
  v20 = v19 - 6;
  while (v20 != v18)
  {
    v17 = *(_QWORD *)(result + 112 + 8 * v18++);
    if (v17)
    {
      v6 = v18 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

uint64_t sub_100032824()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1[20] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[21] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[22] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v4);
  v1[24] = swift_task_alloc(v4);
  v1[25] = swift_task_alloc(v4);
  v1[26] = swift_task_alloc(v4);
  v5 = type metadata accessor for Date(0);
  v1[27] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[28] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[29] = swift_task_alloc(v7);
  v1[30] = swift_task_alloc(v7);
  v8 = type metadata accessor for CommunicationActor(0);
  v1[31] = v8;
  v1[32] = static CommunicationActor.shared.getter(v8);
  v9 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v1[33] = v9;
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v9);
  v1[34] = v10;
  v1[35] = v11;
  return swift_task_switch(sub_100032944, v10, v11);
}

uint64_t sub_100032944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t type;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v6 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v0 + 552) = v6;
  v7 = sub_100022934(v6);
  v8 = Date.init()(v7);
  static Log.session.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  v9 = swift_retain(v1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = *(_QWORD *)(v0 + 232);
    v38 = *(_QWORD *)(v0 + 224);
    v13 = *(_QWORD *)(v0 + 216);
    v40 = *(_QWORD *)(v0 + 176);
    v41 = *(_QWORD *)(v0 + 168);
    v42 = *(_QWORD *)(v0 + 208);
    type = v11;
    v14 = *(_QWORD *)(v0 + 160);
    v15 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v43 = v37;
    *(_DWORD *)v15 = 136315394;
    v16 = PhotosFaceType.description.getter(v6);
    v18 = v17;
    *(_QWORD *)(v0 + 144) = sub_100021438(v16, v17, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v18);
    swift_release(v14);
    *(_WORD *)(v15 + 12) = 2080;
    v19 = sub_100009174(&qword_1000B3160, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v13, v19);
    v22 = v21;
    *(_QWORD *)(v0 + 152) = sub_100021438(v20, v21, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v22);
    v23 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v23(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "Recording reprocess in sync database for type %s. Timestamp = %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8);
    v25 = v24(v42, v41);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 224);
    v26 = *(_QWORD *)(v0 + 232);
    v29 = *(_QWORD *)(v0 + 208);
    v28 = *(_QWORD *)(v0 + 216);
    v30 = *(_QWORD *)(v0 + 168);
    v31 = *(_QWORD *)(v0 + 176);
    swift_release(*(_QWORD *)(v0 + 160));
    v23 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v23(v26, v28);

    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
    v25 = v24(v29, v30);
  }
  *(_QWORD *)(v0 + 288) = v23;
  *(_QWORD *)(v0 + 296) = v24;
  v32 = *(_QWORD *)(v0 + 264);
  v33 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 304) = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 120);
  *(_QWORD *)(v0 + 312) = static CommunicationActor.shared.getter(v25);
  v34 = dispatch thunk of Actor.unownedExecutor.getter(v33, v32);
  *(_QWORD *)(v0 + 320) = v34;
  *(_QWORD *)(v0 + 328) = v35;
  return swift_task_switch(sub_100032C04, v34, v35);
}

uint64_t sub_100032C04()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_BYTE *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 336) = *(_QWORD *)(*(_QWORD *)(v0 + 304) + 16);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 344) = v3;
  *(_BYTE *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = type metadata accessor for PhotosFaceDatabase(0);
  v5 = sub_100009174(&qword_1000B2B70, (uint64_t (*)(uint64_t))&type metadata accessor for PhotosFaceDatabase, (uint64_t)&protocol conformance descriptor for PhotosFaceDatabase);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_100032CA4, v6, v7);
}

uint64_t sub_100032CA4()
{
  _QWORD *v0;

  dispatch thunk of PhotosFaceDatabase.transaction<A>(block:)(sub_10001F09C, v0[43], (char *)&type metadata for () + 8);
  v0[44] = 0;
  swift_task_dealloc(v0[43]);
  return swift_task_switch(sub_100032D1C, v0[40], v0[41]);
}

uint64_t sub_100032D1C()
{
  _QWORD *v0;

  swift_release(v0[39]);
  return swift_task_switch(sub_100032D54, v0[34], v0[35]);
}

uint64_t sub_100032D54(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[33];
  v3 = v1[31];
  v1[45] = *(_QWORD *)(v1[20] + 128);
  v1[46] = static CommunicationActor.shared.getter(a1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, v2);
  v1[47] = v4;
  v1[48] = v5;
  return swift_task_switch(sub_100032DC8, v4, v5);
}

uint64_t sub_100032DC8()
{
  uint64_t v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = (char *)sub_1000191AC();
  *(_QWORD *)(v0 + 392) = v1;
  if (v1)
  {
    v2 = &v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_classCConnected];
    swift_beginAccess(&v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_classCConnected], v0 + 16, 33, 0);
    v3 = (_QWORD *)swift_task_alloc(dword_1000B315C);
    *(_QWORD *)(v0 + 400) = v3;
    *v3 = v0;
    v3[1] = sub_100032EB4;
    v3[2] = v2;
    return swift_task_switch(sub_100024050, 0, 0);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 368));
    *(_BYTE *)(v0 + 555) = 0;
    v5 = (_QWORD *)swift_task_alloc(dword_1000B2B94);
    *(_QWORD *)(v0 + 488) = v5;
    *v5 = v0;
    v5[1] = sub_1000333F8;
    return DeviceSyncTracker.deviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 552), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 240));
  }
}

uint64_t sub_100032EB4(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v4 = *(void **)(*v1 + 392);
  v3 = *(_QWORD *)(*v1 + 400);
  *(_BYTE *)(*v1 + 553) = a1;
  swift_task_dealloc(v3);
  swift_endAccess(v2 + 16);

  return swift_task_switch(sub_100032F24, *(_QWORD *)(v2 + 376), *(_QWORD *)(v2 + 384));
}

uint64_t sub_100032F24()
{
  _QWORD *v0;

  swift_release(v0[46]);
  return swift_task_switch(sub_100032F5C, v0[34], v0[35]);
}

uint64_t sub_100032F5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[33];
  v3 = v1[31];
  v1[51] = static CommunicationActor.shared.getter(a1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, v2);
  v1[52] = v4;
  v1[53] = v5;
  return swift_task_switch(sub_100032FC4, v4, v5);
}

uint64_t sub_100032FC4()
{
  uint64_t v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = (char *)sub_1000191AC();
  *(_QWORD *)(v0 + 432) = v1;
  if (v1)
  {
    v2 = &v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_pluggedIn];
    swift_beginAccess(&v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_pluggedIn], v0 + 64, 33, 0);
    v3 = (_QWORD *)swift_task_alloc(dword_1000B315C);
    *(_QWORD *)(v0 + 440) = v3;
    *v3 = v0;
    v3[1] = sub_1000330F4;
    v3[2] = v2;
    return swift_task_switch(sub_100024050, 0, 0);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 408));
    *(_BYTE *)(v0 + 555) = 0;
    v5 = (_QWORD *)swift_task_alloc(dword_1000B2B94);
    *(_QWORD *)(v0 + 488) = v5;
    *v5 = v0;
    v5[1] = sub_1000333F8;
    return DeviceSyncTracker.deviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 552), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 240));
  }
}

uint64_t sub_1000330B0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[43];
  swift_release(v0[39]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10003E47C, v0[34], v0[35]);
}

uint64_t sub_1000330F4(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v4 = *(void **)(*v1 + 432);
  v3 = *(_QWORD *)(*v1 + 440);
  *(_BYTE *)(*v1 + 554) = a1;
  swift_task_dealloc(v3);
  swift_endAccess(v2 + 64);

  return swift_task_switch(sub_100033164, *(_QWORD *)(v2 + 416), *(_QWORD *)(v2 + 424));
}

uint64_t sub_100033164()
{
  _QWORD *v0;

  swift_release(v0[51]);
  return swift_task_switch(sub_10003319C, v0[34], v0[35]);
}

uint64_t sub_10003319C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[33];
  v3 = v1[31];
  v1[56] = static CommunicationActor.shared.getter(a1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, v2);
  v1[57] = v4;
  v1[58] = v5;
  return swift_task_switch(sub_100033204, v4, v5);
}

uint64_t sub_100033204()
{
  uint64_t v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = (char *)sub_1000191AC();
  *(_QWORD *)(v0 + 472) = v1;
  if (v1)
  {
    v2 = &v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_connected];
    swift_beginAccess(&v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_connected], v0 + 40, 33, 0);
    v3 = (_QWORD *)swift_task_alloc(dword_1000B315C);
    *(_QWORD *)(v0 + 480) = v3;
    *v3 = v0;
    v3[1] = sub_1000332F0;
    v3[2] = v2;
    return swift_task_switch(sub_100024050, 0, 0);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 448));
    *(_BYTE *)(v0 + 555) = 0;
    v5 = (_QWORD *)swift_task_alloc(dword_1000B2B94);
    *(_QWORD *)(v0 + 488) = v5;
    *v5 = v0;
    v5[1] = sub_1000333F8;
    return DeviceSyncTracker.deviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 552), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 240));
  }
}

uint64_t sub_1000332F0(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_BYTE *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 88) = v1;
  v3 = *(void **)(v2 + 472);
  swift_task_dealloc(*(_QWORD *)(v2 + 480));
  swift_endAccess(v2 + 40);

  return swift_task_switch(sub_10003335C, *(_QWORD *)(v2 + 456), *(_QWORD *)(v2 + 464));
}

uint64_t sub_10003335C()
{
  uint64_t v0;
  int v1;
  char v2;
  _QWORD *v3;

  v1 = *(unsigned __int8 *)(v0 + 553);
  swift_release(*(_QWORD *)(v0 + 448));
  if (v1 == 1)
    v2 = *(_BYTE *)(v0 + 554) & *(_BYTE *)(v0 + 96);
  else
    v2 = 0;
  *(_BYTE *)(v0 + 555) = v2 & 1;
  v3 = (_QWORD *)swift_task_alloc(dword_1000B2B94);
  *(_QWORD *)(v0 + 488) = v3;
  *v3 = v0;
  v3[1] = sub_1000333F8;
  return DeviceSyncTracker.deviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 552), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 240));
}

uint64_t sub_1000333F8(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 488);
  *(_QWORD *)(*v2 + 496) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 272);
    v7 = *(_QWORD *)(v4 + 280);
    v8 = sub_10003E480;
  }
  else
  {
    *(_BYTE *)(v4 + 556) = a1 & 1;
    v6 = *(_QWORD *)(v4 + 272);
    v7 = *(_QWORD *)(v4 + 280);
    v8 = sub_100033470;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100033470(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  BOOL v35;
  void (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  if (*(_BYTE *)(v1 + 556) == 1)
  {
    v2 = static Log.session.getter(a1);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 296);
    if (v5)
    {
      v61 = *(_QWORD *)(v1 + 168);
      v64 = *(_QWORD *)(v1 + 200);
      v7 = *(unsigned __int8 *)(v1 + 552);
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(64, -1);
      v65 = v9;
      *(_DWORD *)v8 = 136315394;
      *(_QWORD *)(v1 + 104) = sub_100021438(0x657669746361, 0xE600000000000000, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2080;
      v10 = PhotosFaceType.description.getter(v7);
      v12 = v11;
      *(_QWORD *)(v1 + 112) = sub_100021438(v10, v11, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Device '%s' has previously requested a sync for '%s'. Notifying it of the new data.", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      v13 = v6(v64, v61);
    }
    else
    {
      v24 = *(_QWORD *)(v1 + 200);
      v25 = *(_QWORD *)(v1 + 168);

      v13 = v6(v24, v25);
    }
    v26 = *(_QWORD *)(v1 + 264);
    v27 = *(_QWORD *)(v1 + 248);
    *(_QWORD *)(v1 + 504) = *(_QWORD *)(*(_QWORD *)(v1 + 160) + 96);
    *(_QWORD *)(v1 + 512) = static CommunicationActor.shared.getter(v13);
    v28 = dispatch thunk of Actor.unownedExecutor.getter(v27, v26);
    return swift_task_switch(sub_100033A10, v28, v29);
  }
  else if ((*(_BYTE *)(v1 + 555) & 1) != 0)
  {
    v14 = static Log.session.getter(a1);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 296);
    v19 = *(_QWORD *)(v1 + 192);
    v20 = *(_QWORD *)(v1 + 168);
    if (v17)
    {
      v62 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 296);
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v65 = v22;
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)(v1 + 128) = sub_100021438(0x657669746361, 0xE600000000000000, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v21 + 4, v21 + 12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Device '%s' is ready for a sync. Notifying it of the new data.", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      v23 = v62(v19, v20);
    }
    else
    {

      v23 = v18(v19, v20);
    }
    v44 = *(_QWORD *)(v1 + 264);
    v45 = *(_QWORD *)(v1 + 248);
    *(_QWORD *)(v1 + 528) = *(_QWORD *)(*(_QWORD *)(v1 + 160) + 96);
    *(_QWORD *)(v1 + 536) = static CommunicationActor.shared.getter(v23);
    v46 = dispatch thunk of Actor.unownedExecutor.getter(v45, v44);
    return swift_task_switch(sub_100033A8C, v46, v47);
  }
  else
  {
    v31 = swift_release(*(_QWORD *)(v1 + 256));
    v32 = static Log.session.getter(v31);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter();
    v35 = os_log_type_enabled(v33, v34);
    v36 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
    v37 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
    if (v35)
    {
      v60 = *(_QWORD *)(v1 + 216);
      v63 = *(_QWORD *)(v1 + 240);
      v58 = *(_QWORD *)(v1 + 168);
      v59 = *(_QWORD *)(v1 + 184);
      v38 = *(unsigned __int8 *)(v1 + 552);
      v39 = swift_slowAlloc(22, -1);
      v57 = v36;
      v40 = swift_slowAlloc(64, -1);
      v65 = v40;
      *(_DWORD *)v39 = 136315394;
      *(_QWORD *)(v1 + 120) = sub_100021438(0x657669746361, 0xE600000000000000, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v39 + 4, v39 + 12);
      *(_WORD *)(v39 + 12) = 2080;
      v41 = PhotosFaceType.description.getter(v38);
      v43 = v42;
      *(_QWORD *)(v1 + 136) = sub_100021438(v41, v42, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v39 + 14, v39 + 22);
      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Device '%s' does not require a sync for '%s'", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      v37(v59, v58);
      v57(v63, v60);
    }
    else
    {
      v48 = *(_QWORD *)(v1 + 240);
      v49 = *(_QWORD *)(v1 + 216);
      v50 = *(_QWORD *)(v1 + 184);
      v51 = *(_QWORD *)(v1 + 168);

      v37(v50, v51);
      v36(v48, v49);
    }
    v52 = *(_QWORD *)(v1 + 232);
    v54 = *(_QWORD *)(v1 + 200);
    v53 = *(_QWORD *)(v1 + 208);
    v56 = *(_QWORD *)(v1 + 184);
    v55 = *(_QWORD *)(v1 + 192);
    swift_task_dealloc(*(_QWORD *)(v1 + 240));
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100033A10()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_BYTE *)(v0 + 552);
  swift_release(*(_QWORD *)(v0 + 512));
  v2 = *(_QWORD *)(v0 + 496);
  sub_10002338C(0x10200u >> (8 * v1), 0, 0xC000000000000000);
  *(_QWORD *)(v0 + 520) = v2;
  if (v2)
    v3 = sub_10003E484;
  else
    v3 = sub_10003E478;
  return swift_task_switch(v3, *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
}

uint64_t sub_100033A8C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_BYTE *)(v0 + 552);
  swift_release(*(_QWORD *)(v0 + 536));
  v2 = *(_QWORD *)(v0 + 496);
  sub_10002338C(0x10200u >> (8 * v1), 0, 0xC000000000000000);
  *(_QWORD *)(v0 + 544) = v2;
  if (v2)
    v3 = sub_10003E488;
  else
    v3 = sub_10003E478;
  return swift_task_switch(v3, *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
}

uint64_t sub_100033B0C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1[20] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[21] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[22] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v4);
  v1[24] = swift_task_alloc(v4);
  v1[25] = swift_task_alloc(v4);
  v1[26] = swift_task_alloc(v4);
  v5 = type metadata accessor for Date(0);
  v1[27] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[28] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[29] = swift_task_alloc(v7);
  v1[30] = swift_task_alloc(v7);
  v8 = type metadata accessor for CommunicationActor(0);
  v1[31] = v8;
  v1[32] = static CommunicationActor.shared.getter(v8);
  v9 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v1[33] = v9;
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v9);
  v1[34] = v10;
  v1[35] = v11;
  return swift_task_switch(sub_100033C2C, v10, v11);
}

uint64_t sub_100033C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t type;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v6 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v0 + 552) = v6;
  v7 = sub_100022934(v6);
  v8 = Date.init()(v7);
  static Log.session.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  v9 = swift_retain(v1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = *(_QWORD *)(v0 + 232);
    v38 = *(_QWORD *)(v0 + 224);
    v13 = *(_QWORD *)(v0 + 216);
    v40 = *(_QWORD *)(v0 + 176);
    v41 = *(_QWORD *)(v0 + 168);
    v42 = *(_QWORD *)(v0 + 208);
    type = v11;
    v14 = *(_QWORD *)(v0 + 160);
    v15 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v43 = v37;
    *(_DWORD *)v15 = 136315394;
    v16 = PhotosFaceType.description.getter(v6);
    v18 = v17;
    *(_QWORD *)(v0 + 144) = sub_100021438(v16, v17, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v18);
    swift_release(v14);
    *(_WORD *)(v15 + 12) = 2080;
    v19 = sub_100009174(&qword_1000B3160, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v13, v19);
    v22 = v21;
    *(_QWORD *)(v0 + 152) = sub_100021438(v20, v21, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v22);
    v23 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v23(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "Recording reprocess in sync database for type %s. Timestamp = %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8);
    v25 = v24(v42, v41);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 224);
    v26 = *(_QWORD *)(v0 + 232);
    v29 = *(_QWORD *)(v0 + 208);
    v28 = *(_QWORD *)(v0 + 216);
    v30 = *(_QWORD *)(v0 + 168);
    v31 = *(_QWORD *)(v0 + 176);
    swift_release(*(_QWORD *)(v0 + 160));
    v23 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v23(v26, v28);

    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
    v25 = v24(v29, v30);
  }
  *(_QWORD *)(v0 + 288) = v23;
  *(_QWORD *)(v0 + 296) = v24;
  v32 = *(_QWORD *)(v0 + 264);
  v33 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 304) = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 120);
  *(_QWORD *)(v0 + 312) = static CommunicationActor.shared.getter(v25);
  v34 = dispatch thunk of Actor.unownedExecutor.getter(v33, v32);
  *(_QWORD *)(v0 + 320) = v34;
  *(_QWORD *)(v0 + 328) = v35;
  return swift_task_switch(sub_100033EEC, v34, v35);
}

uint64_t sub_100033EEC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_BYTE *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 336) = *(_QWORD *)(*(_QWORD *)(v0 + 304) + 16);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 344) = v3;
  *(_BYTE *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = type metadata accessor for PhotosFaceDatabase(0);
  v5 = sub_100009174(&qword_1000B2B70, (uint64_t (*)(uint64_t))&type metadata accessor for PhotosFaceDatabase, (uint64_t)&protocol conformance descriptor for PhotosFaceDatabase);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_100033F8C, v6, v7);
}

uint64_t sub_100033F8C()
{
  _QWORD *v0;

  dispatch thunk of PhotosFaceDatabase.transaction<A>(block:)(sub_10003E43C, v0[43], (char *)&type metadata for () + 8);
  v0[44] = 0;
  swift_task_dealloc(v0[43]);
  return swift_task_switch(sub_100034004, v0[40], v0[41]);
}

uint64_t sub_100034004()
{
  _QWORD *v0;

  swift_release(v0[39]);
  return swift_task_switch(sub_10003403C, v0[34], v0[35]);
}

uint64_t sub_10003403C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[33];
  v3 = v1[31];
  v1[45] = *(_QWORD *)(v1[20] + 128);
  v1[46] = static CommunicationActor.shared.getter(a1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, v2);
  v1[47] = v4;
  v1[48] = v5;
  return swift_task_switch(sub_1000340B0, v4, v5);
}

uint64_t sub_1000340B0()
{
  uint64_t v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = (char *)sub_1000191AC();
  *(_QWORD *)(v0 + 392) = v1;
  if (v1)
  {
    v2 = &v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_classCConnected];
    swift_beginAccess(&v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_classCConnected], v0 + 16, 33, 0);
    v3 = (_QWORD *)swift_task_alloc(dword_1000B315C);
    *(_QWORD *)(v0 + 400) = v3;
    *v3 = v0;
    v3[1] = sub_10003419C;
    v3[2] = v2;
    return swift_task_switch(sub_100024050, 0, 0);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 368));
    *(_BYTE *)(v0 + 555) = 0;
    v5 = (_QWORD *)swift_task_alloc(dword_1000B2B94);
    *(_QWORD *)(v0 + 488) = v5;
    *v5 = v0;
    v5[1] = sub_1000333F8;
    return DeviceSyncTracker.deviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 552), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 240));
  }
}

uint64_t sub_10003419C(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v4 = *(void **)(*v1 + 392);
  v3 = *(_QWORD *)(*v1 + 400);
  *(_BYTE *)(*v1 + 553) = a1;
  swift_task_dealloc(v3);
  swift_endAccess(v2 + 16);

  return swift_task_switch(sub_10003420C, *(_QWORD *)(v2 + 376), *(_QWORD *)(v2 + 384));
}

uint64_t sub_10003420C()
{
  _QWORD *v0;

  swift_release(v0[46]);
  return swift_task_switch(sub_100034244, v0[34], v0[35]);
}

uint64_t sub_100034244(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[33];
  v3 = v1[31];
  v1[51] = static CommunicationActor.shared.getter(a1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, v2);
  v1[52] = v4;
  v1[53] = v5;
  return swift_task_switch(sub_1000342AC, v4, v5);
}

uint64_t sub_1000342AC()
{
  uint64_t v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = (char *)sub_1000191AC();
  *(_QWORD *)(v0 + 432) = v1;
  if (v1)
  {
    v2 = &v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_pluggedIn];
    swift_beginAccess(&v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_pluggedIn], v0 + 64, 33, 0);
    v3 = (_QWORD *)swift_task_alloc(dword_1000B315C);
    *(_QWORD *)(v0 + 440) = v3;
    *v3 = v0;
    v3[1] = sub_100034398;
    v3[2] = v2;
    return swift_task_switch(sub_100024050, 0, 0);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 408));
    *(_BYTE *)(v0 + 555) = 0;
    v5 = (_QWORD *)swift_task_alloc(dword_1000B2B94);
    *(_QWORD *)(v0 + 488) = v5;
    *v5 = v0;
    v5[1] = sub_1000333F8;
    return DeviceSyncTracker.deviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 552), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 240));
  }
}

uint64_t sub_100034398(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v4 = *(void **)(*v1 + 432);
  v3 = *(_QWORD *)(*v1 + 440);
  *(_BYTE *)(*v1 + 554) = a1;
  swift_task_dealloc(v3);
  swift_endAccess(v2 + 64);

  return swift_task_switch(sub_100034408, *(_QWORD *)(v2 + 416), *(_QWORD *)(v2 + 424));
}

uint64_t sub_100034408()
{
  _QWORD *v0;

  swift_release(v0[51]);
  return swift_task_switch(sub_100034440, v0[34], v0[35]);
}

uint64_t sub_100034440(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[33];
  v3 = v1[31];
  v1[56] = static CommunicationActor.shared.getter(a1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, v2);
  v1[57] = v4;
  v1[58] = v5;
  return swift_task_switch(sub_100033204, v4, v5);
}

uint64_t sub_1000344A8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1[20] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[21] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[22] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v4);
  v1[24] = swift_task_alloc(v4);
  v1[25] = swift_task_alloc(v4);
  v1[26] = swift_task_alloc(v4);
  v5 = type metadata accessor for Date(0);
  v1[27] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[28] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[29] = swift_task_alloc(v7);
  v1[30] = swift_task_alloc(v7);
  v8 = type metadata accessor for CommunicationActor(0);
  v1[31] = v8;
  v1[32] = static CommunicationActor.shared.getter(v8);
  v9 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v1[33] = v9;
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v9);
  v1[34] = v10;
  v1[35] = v11;
  return swift_task_switch(sub_1000345C8, v10, v11);
}

uint64_t sub_1000345C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t type;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v6 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v0 + 552) = v6;
  v7 = sub_100022934(v6);
  v8 = Date.init()(v7);
  static Log.session.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  v9 = swift_retain(v1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = *(_QWORD *)(v0 + 232);
    v38 = *(_QWORD *)(v0 + 224);
    v13 = *(_QWORD *)(v0 + 216);
    v40 = *(_QWORD *)(v0 + 176);
    v41 = *(_QWORD *)(v0 + 168);
    v42 = *(_QWORD *)(v0 + 208);
    type = v11;
    v14 = *(_QWORD *)(v0 + 160);
    v15 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v43 = v37;
    *(_DWORD *)v15 = 136315394;
    v16 = PhotosFaceType.description.getter(v6);
    v18 = v17;
    *(_QWORD *)(v0 + 144) = sub_100021438(v16, v17, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v18);
    swift_release(v14);
    *(_WORD *)(v15 + 12) = 2080;
    v19 = sub_100009174(&qword_1000B3160, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v13, v19);
    v22 = v21;
    *(_QWORD *)(v0 + 152) = sub_100021438(v20, v21, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v22);
    v23 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v23(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "Recording reprocess in sync database for type %s. Timestamp = %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8);
    v25 = v24(v42, v41);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 224);
    v26 = *(_QWORD *)(v0 + 232);
    v29 = *(_QWORD *)(v0 + 208);
    v28 = *(_QWORD *)(v0 + 216);
    v30 = *(_QWORD *)(v0 + 168);
    v31 = *(_QWORD *)(v0 + 176);
    swift_release(*(_QWORD *)(v0 + 160));
    v23 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v23(v26, v28);

    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
    v25 = v24(v29, v30);
  }
  *(_QWORD *)(v0 + 288) = v23;
  *(_QWORD *)(v0 + 296) = v24;
  v32 = *(_QWORD *)(v0 + 264);
  v33 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 304) = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 120);
  *(_QWORD *)(v0 + 312) = static CommunicationActor.shared.getter(v25);
  v34 = dispatch thunk of Actor.unownedExecutor.getter(v33, v32);
  *(_QWORD *)(v0 + 320) = v34;
  *(_QWORD *)(v0 + 328) = v35;
  return swift_task_switch(sub_100034888, v34, v35);
}

uint64_t sub_100034888()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_BYTE *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 336) = *(_QWORD *)(*(_QWORD *)(v0 + 304) + 16);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 344) = v3;
  *(_BYTE *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = type metadata accessor for PhotosFaceDatabase(0);
  v5 = sub_100009174(&qword_1000B2B70, (uint64_t (*)(uint64_t))&type metadata accessor for PhotosFaceDatabase, (uint64_t)&protocol conformance descriptor for PhotosFaceDatabase);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_100034928, v6, v7);
}

uint64_t sub_100034928()
{
  _QWORD *v0;

  dispatch thunk of PhotosFaceDatabase.transaction<A>(block:)(sub_10003E43C, v0[43], (char *)&type metadata for () + 8);
  v0[44] = 0;
  swift_task_dealloc(v0[43]);
  return swift_task_switch(sub_1000349A0, v0[40], v0[41]);
}

uint64_t sub_1000349A0()
{
  _QWORD *v0;

  swift_release(v0[39]);
  return swift_task_switch(sub_1000349D8, v0[34], v0[35]);
}

uint64_t sub_1000349D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[33];
  v3 = v1[31];
  v1[45] = *(_QWORD *)(v1[20] + 128);
  v1[46] = static CommunicationActor.shared.getter(a1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, v2);
  v1[47] = v4;
  v1[48] = v5;
  return swift_task_switch(sub_100034A4C, v4, v5);
}

uint64_t sub_100034A4C()
{
  uint64_t v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = (char *)sub_1000191AC();
  *(_QWORD *)(v0 + 392) = v1;
  if (v1)
  {
    v2 = &v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_classCConnected];
    swift_beginAccess(&v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_classCConnected], v0 + 16, 33, 0);
    v3 = (_QWORD *)swift_task_alloc(dword_1000B315C);
    *(_QWORD *)(v0 + 400) = v3;
    *v3 = v0;
    v3[1] = sub_100034B38;
    v3[2] = v2;
    return swift_task_switch(sub_100024050, 0, 0);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 368));
    *(_BYTE *)(v0 + 555) = 0;
    v5 = (_QWORD *)swift_task_alloc(dword_1000B2B94);
    *(_QWORD *)(v0 + 488) = v5;
    *v5 = v0;
    v5[1] = sub_100035120;
    return DeviceSyncTracker.deviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 552), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 240));
  }
}

uint64_t sub_100034B38(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v4 = *(void **)(*v1 + 392);
  v3 = *(_QWORD *)(*v1 + 400);
  *(_BYTE *)(*v1 + 553) = a1;
  swift_task_dealloc(v3);
  swift_endAccess(v2 + 16);

  return swift_task_switch(sub_100034BA8, *(_QWORD *)(v2 + 376), *(_QWORD *)(v2 + 384));
}

uint64_t sub_100034BA8()
{
  _QWORD *v0;

  swift_release(v0[46]);
  return swift_task_switch(sub_100034BE0, v0[34], v0[35]);
}

uint64_t sub_100034BE0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[33];
  v3 = v1[31];
  v1[51] = static CommunicationActor.shared.getter(a1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, v2);
  v1[52] = v4;
  v1[53] = v5;
  return swift_task_switch(sub_100034C48, v4, v5);
}

uint64_t sub_100034C48()
{
  uint64_t v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = (char *)sub_1000191AC();
  *(_QWORD *)(v0 + 432) = v1;
  if (v1)
  {
    v2 = &v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_pluggedIn];
    swift_beginAccess(&v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_pluggedIn], v0 + 64, 33, 0);
    v3 = (_QWORD *)swift_task_alloc(dword_1000B315C);
    *(_QWORD *)(v0 + 440) = v3;
    *v3 = v0;
    v3[1] = sub_100034E1C;
    v3[2] = v2;
    return swift_task_switch(sub_100024050, 0, 0);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 408));
    *(_BYTE *)(v0 + 555) = 0;
    v5 = (_QWORD *)swift_task_alloc(dword_1000B2B94);
    *(_QWORD *)(v0 + 488) = v5;
    *v5 = v0;
    v5[1] = sub_100035120;
    return DeviceSyncTracker.deviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 552), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 240));
  }
}

uint64_t sub_100034D34()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[43];
  swift_release(v0[39]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100034D78, v0[34], v0[35]);
}

uint64_t sub_100034D78()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 256));
  v1(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100034E1C(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v4 = *(void **)(*v1 + 432);
  v3 = *(_QWORD *)(*v1 + 440);
  *(_BYTE *)(*v1 + 554) = a1;
  swift_task_dealloc(v3);
  swift_endAccess(v2 + 64);

  return swift_task_switch(sub_100034E8C, *(_QWORD *)(v2 + 416), *(_QWORD *)(v2 + 424));
}

uint64_t sub_100034E8C()
{
  _QWORD *v0;

  swift_release(v0[51]);
  return swift_task_switch(sub_100034EC4, v0[34], v0[35]);
}

uint64_t sub_100034EC4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[33];
  v3 = v1[31];
  v1[56] = static CommunicationActor.shared.getter(a1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, v2);
  v1[57] = v4;
  v1[58] = v5;
  return swift_task_switch(sub_100034F2C, v4, v5);
}

uint64_t sub_100034F2C()
{
  uint64_t v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = (char *)sub_1000191AC();
  *(_QWORD *)(v0 + 472) = v1;
  if (v1)
  {
    v2 = &v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_connected];
    swift_beginAccess(&v1[OBJC_IVAR____TtC11photosfacedP33_8C086EDF4440DE29CC98029F05504C4213DeviceMonitor_connected], v0 + 40, 33, 0);
    v3 = (_QWORD *)swift_task_alloc(dword_1000B315C);
    *(_QWORD *)(v0 + 480) = v3;
    *v3 = v0;
    v3[1] = sub_100035018;
    v3[2] = v2;
    return swift_task_switch(sub_100024050, 0, 0);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 448));
    *(_BYTE *)(v0 + 555) = 0;
    v5 = (_QWORD *)swift_task_alloc(dword_1000B2B94);
    *(_QWORD *)(v0 + 488) = v5;
    *v5 = v0;
    v5[1] = sub_100035120;
    return DeviceSyncTracker.deviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 552), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 240));
  }
}

uint64_t sub_100035018(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_BYTE *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 88) = v1;
  v3 = *(void **)(v2 + 472);
  swift_task_dealloc(*(_QWORD *)(v2 + 480));
  swift_endAccess(v2 + 40);

  return swift_task_switch(sub_100035084, *(_QWORD *)(v2 + 456), *(_QWORD *)(v2 + 464));
}

uint64_t sub_100035084()
{
  uint64_t v0;
  int v1;
  char v2;
  _QWORD *v3;

  v1 = *(unsigned __int8 *)(v0 + 553);
  swift_release(*(_QWORD *)(v0 + 448));
  if (v1 == 1)
    v2 = *(_BYTE *)(v0 + 554) & *(_BYTE *)(v0 + 96);
  else
    v2 = 0;
  *(_BYTE *)(v0 + 555) = v2 & 1;
  v3 = (_QWORD *)swift_task_alloc(dword_1000B2B94);
  *(_QWORD *)(v0 + 488) = v3;
  *v3 = v0;
  v3[1] = sub_100035120;
  return DeviceSyncTracker.deviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 552), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 240));
}

uint64_t sub_100035120(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 488);
  *(_QWORD *)(*v2 + 496) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 272);
    v7 = *(_QWORD *)(v4 + 280);
    v8 = sub_100035738;
  }
  else
  {
    *(_BYTE *)(v4 + 556) = a1 & 1;
    v6 = *(_QWORD *)(v4 + 272);
    v7 = *(_QWORD *)(v4 + 280);
    v8 = sub_100035198;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100035198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  BOOL v35;
  void (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  if (*(_BYTE *)(v1 + 556) == 1)
  {
    v2 = static Log.session.getter(a1);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 296);
    if (v5)
    {
      v61 = *(_QWORD *)(v1 + 168);
      v64 = *(_QWORD *)(v1 + 200);
      v7 = *(unsigned __int8 *)(v1 + 552);
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(64, -1);
      v65 = v9;
      *(_DWORD *)v8 = 136315394;
      *(_QWORD *)(v1 + 104) = sub_100021438(0x657669746361, 0xE600000000000000, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2080;
      v10 = PhotosFaceType.description.getter(v7);
      v12 = v11;
      *(_QWORD *)(v1 + 112) = sub_100021438(v10, v11, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Device '%s' has previously requested a sync for '%s'. Notifying it of the new data.", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      v13 = v6(v64, v61);
    }
    else
    {
      v24 = *(_QWORD *)(v1 + 200);
      v25 = *(_QWORD *)(v1 + 168);

      v13 = v6(v24, v25);
    }
    v26 = *(_QWORD *)(v1 + 264);
    v27 = *(_QWORD *)(v1 + 248);
    *(_QWORD *)(v1 + 504) = *(_QWORD *)(*(_QWORD *)(v1 + 160) + 96);
    *(_QWORD *)(v1 + 512) = static CommunicationActor.shared.getter(v13);
    v28 = dispatch thunk of Actor.unownedExecutor.getter(v27, v26);
    return swift_task_switch(sub_1000357DC, v28, v29);
  }
  else if ((*(_BYTE *)(v1 + 555) & 1) != 0)
  {
    v14 = static Log.session.getter(a1);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 296);
    v19 = *(_QWORD *)(v1 + 192);
    v20 = *(_QWORD *)(v1 + 168);
    if (v17)
    {
      v62 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 296);
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v65 = v22;
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)(v1 + 128) = sub_100021438(0x657669746361, 0xE600000000000000, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v21 + 4, v21 + 12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Device '%s' is ready for a sync. Notifying it of the new data.", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      v23 = v62(v19, v20);
    }
    else
    {

      v23 = v18(v19, v20);
    }
    v44 = *(_QWORD *)(v1 + 264);
    v45 = *(_QWORD *)(v1 + 248);
    *(_QWORD *)(v1 + 528) = *(_QWORD *)(*(_QWORD *)(v1 + 160) + 96);
    *(_QWORD *)(v1 + 536) = static CommunicationActor.shared.getter(v23);
    v46 = dispatch thunk of Actor.unownedExecutor.getter(v45, v44);
    return swift_task_switch(sub_100035990, v46, v47);
  }
  else
  {
    v31 = swift_release(*(_QWORD *)(v1 + 256));
    v32 = static Log.session.getter(v31);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter();
    v35 = os_log_type_enabled(v33, v34);
    v36 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
    v37 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
    if (v35)
    {
      v60 = *(_QWORD *)(v1 + 216);
      v63 = *(_QWORD *)(v1 + 240);
      v58 = *(_QWORD *)(v1 + 168);
      v59 = *(_QWORD *)(v1 + 184);
      v38 = *(unsigned __int8 *)(v1 + 552);
      v39 = swift_slowAlloc(22, -1);
      v57 = v36;
      v40 = swift_slowAlloc(64, -1);
      v65 = v40;
      *(_DWORD *)v39 = 136315394;
      *(_QWORD *)(v1 + 120) = sub_100021438(0x657669746361, 0xE600000000000000, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v39 + 4, v39 + 12);
      *(_WORD *)(v39 + 12) = 2080;
      v41 = PhotosFaceType.description.getter(v38);
      v43 = v42;
      *(_QWORD *)(v1 + 136) = sub_100021438(v41, v42, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v39 + 14, v39 + 22);
      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Device '%s' does not require a sync for '%s'", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      v37(v59, v58);
      v57(v63, v60);
    }
    else
    {
      v48 = *(_QWORD *)(v1 + 240);
      v49 = *(_QWORD *)(v1 + 216);
      v50 = *(_QWORD *)(v1 + 184);
      v51 = *(_QWORD *)(v1 + 168);

      v37(v50, v51);
      v36(v48, v49);
    }
    v52 = *(_QWORD *)(v1 + 232);
    v54 = *(_QWORD *)(v1 + 200);
    v53 = *(_QWORD *)(v1 + 208);
    v56 = *(_QWORD *)(v1 + 184);
    v55 = *(_QWORD *)(v1 + 192);
    swift_task_dealloc(*(_QWORD *)(v1 + 240));
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100035738()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 256));
  v1(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000357DC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_BYTE *)(v0 + 552);
  swift_release(*(_QWORD *)(v0 + 512));
  v2 = *(_QWORD *)(v0 + 496);
  sub_10002338C(0x10200u >> (8 * v1), 0, 0xC000000000000000);
  *(_QWORD *)(v0 + 520) = v2;
  if (v2)
    v3 = sub_1000358EC;
  else
    v3 = sub_100035858;
  return swift_task_switch(v3, *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
}

uint64_t sub_100035858()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 256));
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000358EC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 256));
  v1(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035990()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_BYTE *)(v0 + 552);
  swift_release(*(_QWORD *)(v0 + 536));
  v2 = *(_QWORD *)(v0 + 496);
  sub_10002338C(0x10200u >> (8 * v1), 0, 0xC000000000000000);
  *(_QWORD *)(v0 + 544) = v2;
  if (v2)
    v3 = sub_100035A10;
  else
    v3 = sub_10003E478;
  return swift_task_switch(v3, *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
}

uint64_t sub_100035A10()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 256));
  v1(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v25)(_QWORD *);
  uint64_t v26;

  v8[18] = a8;
  v8[19] = v26;
  v8[16] = a4;
  v8[17] = a5;
  v10 = type metadata accessor for UUID(0);
  v8[20] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[21] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[22] = swift_task_alloc(v12);
  v8[23] = swift_task_alloc(v12);
  v13 = type metadata accessor for ShuffleID(0);
  v8[24] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[25] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[26] = swift_task_alloc(v15);
  v8[27] = swift_task_alloc(v15);
  v16 = type metadata accessor for Logger(0);
  v8[28] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v8[29] = v17;
  v8[30] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for StoredPhoto(0);
  v8[31] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v8[32] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[33] = swift_task_alloc(v20);
  v8[34] = swift_task_alloc(v20);
  v21 = sub_10000629C(&qword_1000B31F0);
  v8[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CommunicationActor(0);
  v8[36] = v22;
  v8[37] = static CommunicationActor.shared.getter(v22);
  v25 = (uint64_t (*)(_QWORD *))((char *)a6 + *a6);
  v23 = (_QWORD *)swift_task_alloc(a6[1]);
  v8[38] = v23;
  *v23 = v8;
  v23[1] = sub_100035C40;
  return v25(v8 + 2);
}

uint64_t sub_100035C40()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc(v3);
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v2[40] = v5;
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  v2[41] = v7;
  v2[42] = v6;
  if (v0)
    v8 = sub_10003E45C;
  else
    v8 = sub_100035CE8;
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_100035CE8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[5];
  v2 = v0[6];
  v3 = sub_10003D4FC(v0 + 2, v1);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v5, v3, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v0[10] = AssociatedTypeWitness;
  v0[11] = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  sub_10003D62C(v0 + 7);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  v7 = swift_task_dealloc(v5);
  v8 = v0[40];
  v9 = static CommunicationActor.shared.getter(v7);
  v0[43] = v9;
  v10 = v0[10];
  v11 = v0[11];
  sub_10003D6F0((uint64_t)(v0 + 7), v10);
  v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[44] = v12;
  *v12 = v0;
  v12[1] = sub_100035E40;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[35], v9, v8, v0 + 15, v10, v11);
}

uint64_t sub_100035E40()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 352));
  swift_release(v2[43]);
  if (v0)
    v3 = sub_10003E420;
  else
    v3 = sub_100035EB0;
  return swift_task_switch(v3, v2[41], v2[42]);
}

uint64_t sub_100035EB0()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_log_type_t type;
  NSObject *log;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;

  v1 = *(char **)(v0 + 280);
  v2 = sub_10000629C(&qword_1000B31F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    swift_release(*(_QWORD *)(v0 + 296));
    sub_100022238((_QWORD *)(v0 + 56));
    dispatch thunk of BroadcastSequence.finish(throwing:)(0);
    sub_100022238((_QWORD *)(v0 + 16));
    v4 = *(_QWORD *)(v0 + 272);
    v3 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v0 + 264);
    v6 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 216);
    v81 = *(_QWORD *)(v0 + 184);
    v84 = *(_QWORD *)(v0 + 176);
    v9 = *(_QWORD *)(v0 + 136);
    swift_beginAccess(*(_QWORD *)(v0 + 128) + 112, v0 + 96, 33, 0);
    v10 = sub_10003C750(v9);
    swift_endAccess(v0 + 96);
    swift_release(v10);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v81);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 264);
    v12 = *(_QWORD *)(v0 + 272);
    v14 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 256);
    v85 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 144);
    v82 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)v1;
    *(_QWORD *)(v0 + 360) = *(_QWORD *)v1;
    v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v12, &v1[*(int *)(v2 + 48)], v14);
    static Log.default.getter(v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v12, v14);
    v19 = v85;
    v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    v86(v19, v79, v82);
    v20 = swift_bridgeObjectRetain_n(v17, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.debug.getter();
    v23 = os_log_type_enabled(v21, v22);
    v25 = *(_QWORD *)(v0 + 256);
    v24 = *(_QWORD *)(v0 + 264);
    v26 = *(_QWORD *)(v0 + 240);
    v27 = *(_QWORD *)(v0 + 224);
    v28 = *(_QWORD *)(v0 + 232);
    v29 = *(_QWORD *)(v0 + 216);
    if (v23)
    {
      v72 = *(_QWORD *)(v0 + 208);
      v73 = *(_QWORD *)(v0 + 200);
      v80 = *(_QWORD *)(v0 + 224);
      v83 = v17;
      v30 = *(_QWORD *)(v0 + 184);
      v31 = *(_QWORD *)(v0 + 192);
      v70 = *(_QWORD *)(v0 + 168);
      v71 = *(_QWORD *)(v0 + 248);
      v78 = *(_QWORD *)(v0 + 240);
      v32 = *(_QWORD *)(v0 + 160);
      v77 = *(_QWORD *)(v0 + 232);
      v33 = swift_slowAlloc(32, -1);
      v76 = swift_slowAlloc(96, -1);
      v87 = v76;
      *(_DWORD *)v33 = 136315650;
      log = v21;
      StoredPhoto.localIdentifier.getter(v76);
      v34 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v32, v34);
      type = v22;
      v37 = v36;
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v30, v32);
      *(_QWORD *)(v33 + 4) = sub_100021438(v35, v37, &v87);
      swift_bridgeObjectRelease(v37);
      v38 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v38(v24, v71);
      *(_WORD *)(v33 + 12) = 2080;
      v86(v72, v29, v31);
      v39 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v39(v29, v31);
      v40 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v31, v40);
      v43 = v42;
      v39(v72, v31);
      *(_QWORD *)(v33 + 14) = sub_100021438(v41, v43, &v87);
      swift_bridgeObjectRelease(v43);
      *(_WORD *)(v33 + 22) = 2080;
      v17 = v83;
      v44 = swift_bridgeObjectRetain(v83);
      v45 = Array.description.getter(v44, &type metadata for Int);
      v47 = v46;
      swift_bridgeObjectRelease(v83);
      *(_QWORD *)(v33 + 24) = sub_100021438(v45, v47, &v87);
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease_n(v83, 2);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Relating photo %s for %s on days %s", (uint8_t *)v33, 0x20u);
      swift_arrayDestroy(v76, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v78, v80);
    }
    else
    {
      v48 = *(_QWORD *)(v0 + 248);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
      v38 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v38(v24, v48);
      swift_bridgeObjectRelease_n(v17, 2);

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    }
    *(_QWORD *)(v0 + 368) = v38;
    v49 = *(_QWORD *)(v17 + 16);
    *(_QWORD *)(v0 + 376) = v49;
    if (v49)
    {
      v50 = *(_QWORD *)(v0 + 168);
      v51 = *(_QWORD *)(v50 + 72);
      *(_QWORD *)(v0 + 384) = v51;
      LODWORD(v50) = *(_DWORD *)(v50 + 80);
      *(_DWORD *)(v0 + 424) = v50;
      v50 = v50;
      *(_QWORD *)(v0 + 392) = 0;
      v52 = *(_QWORD *)(v0 + 192);
      v53 = ((v50 + 32) & ~v50) + v51;
      v54 = v50 | 7;
      v55 = *(_QWORD *)(*(_QWORD *)(v0 + 360) + 32);
      v56 = sub_10000629C(&qword_1000B3200);
      v57 = swift_allocObject(v56, v53, v54);
      *(_QWORD *)(v0 + 400) = v57;
      *(_OWORD *)(v57 + 16) = xmmword_100096430;
      StoredPhoto.localIdentifier.getter(v57);
      v58 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      dispatch thunk of PhotosFaceID.id.getter(v52, v58);
      v59 = type metadata accessor for GalleryDatabase(0);
      v60 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
      v61 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)[1]);
      *(_QWORD *)(v0 + 408) = v61;
      *v61 = v0;
      v61[1] = sub_100036520;
      return dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)(v57, *(_QWORD *)(v0 + 176), v55, v59, v60);
    }
    else
    {
      v62 = *(_QWORD *)(v0 + 272);
      v63 = *(_QWORD *)(v0 + 248);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 360));
      dispatch thunk of BroadcastSequence.yield(_:)(v62);
      v64 = ((uint64_t (*)(uint64_t, uint64_t))v38)(v62, v63);
      v65 = *(_QWORD *)(v0 + 320);
      v66 = static CommunicationActor.shared.getter(v64);
      *(_QWORD *)(v0 + 344) = v66;
      v67 = *(_QWORD *)(v0 + 80);
      v68 = *(_QWORD *)(v0 + 88);
      sub_10003D6F0(v0 + 56, v67);
      v69 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 352) = v69;
      *v69 = v0;
      v69[1] = sub_100035E40;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 280), v66, v65, v0 + 120, v67, v68);
    }
  }
}

uint64_t sub_100036520()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc(v3);
  v4 = v2[50];
  if (v0)
  {
    v5 = v2[45];
    v7 = v2[21];
    v6 = v2[22];
    v8 = v2[20];
    swift_bridgeObjectRelease(v2[50]);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_bridgeObjectRelease(v5);
    v9 = v2[41];
    v10 = v2[42];
    v11 = sub_10003E424;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[21] + 8))(v2[22], v2[20]);
    swift_bridgeObjectRelease(v4);
    v9 = v2[41];
    v10 = v2[42];
    v11 = sub_1000365DC;
  }
  return swift_task_switch(v11, v9, v10);
}

uint64_t sub_1000365DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = *(_QWORD *)(v0 + 392) + 1;
  if (v1 == *(_QWORD *)(v0 + 376))
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 368);
    v3 = *(_QWORD *)(v0 + 272);
    v4 = *(_QWORD *)(v0 + 248);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 360));
    dispatch thunk of BroadcastSequence.yield(_:)(v3);
    v5 = v2(v3, v4);
    v6 = *(_QWORD *)(v0 + 320);
    v7 = static CommunicationActor.shared.getter(v5);
    *(_QWORD *)(v0 + 344) = v7;
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 88);
    sub_10003D6F0(v0 + 56, v8);
    v10 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 352) = v10;
    *v10 = v0;
    v10[1] = sub_100035E40;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 280), v7, v6, v0 + 120, v8, v9);
  }
  else
  {
    *(_QWORD *)(v0 + 392) = v1;
    v12 = *(unsigned __int8 *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 192);
    v14 = ((v12 + 32) & ~v12) + *(_QWORD *)(v0 + 384);
    v15 = v12 | 7;
    v16 = *(_QWORD *)(*(_QWORD *)(v0 + 360) + 8 * v1 + 32);
    v17 = sub_10000629C(&qword_1000B3200);
    v18 = swift_allocObject(v17, v14, v15);
    *(_QWORD *)(v0 + 400) = v18;
    *(_OWORD *)(v18 + 16) = xmmword_100096430;
    StoredPhoto.localIdentifier.getter(v18);
    v19 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    dispatch thunk of PhotosFaceID.id.getter(v13, v19);
    v20 = type metadata accessor for GalleryDatabase(0);
    v21 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
    v22 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)[1]);
    *(_QWORD *)(v0 + 408) = v22;
    *v22 = v0;
    v22[1] = sub_100036520;
    return dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)(v18, *(_QWORD *)(v0 + 176), v16, v20, v21);
  }
}

uint64_t sub_1000367F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v25)(_QWORD *);
  uint64_t v26;

  v8[18] = a8;
  v8[19] = v26;
  v8[16] = a4;
  v8[17] = a5;
  v10 = type metadata accessor for UUID(0);
  v8[20] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[21] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[22] = swift_task_alloc(v12);
  v8[23] = swift_task_alloc(v12);
  v13 = type metadata accessor for ShuffleID(0);
  v8[24] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[25] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[26] = swift_task_alloc(v15);
  v8[27] = swift_task_alloc(v15);
  v16 = type metadata accessor for Logger(0);
  v8[28] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v8[29] = v17;
  v8[30] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for StoredPhoto(0);
  v8[31] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v8[32] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[33] = swift_task_alloc(v20);
  v8[34] = swift_task_alloc(v20);
  v21 = sub_10000629C(&qword_1000B31F0);
  v8[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CommunicationActor(0);
  v8[36] = v22;
  v8[37] = static CommunicationActor.shared.getter(v22);
  v25 = (uint64_t (*)(_QWORD *))((char *)a6 + *a6);
  v23 = (_QWORD *)swift_task_alloc(a6[1]);
  v8[38] = v23;
  *v23 = v8;
  v23[1] = sub_100036984;
  return v25(v8 + 2);
}

uint64_t sub_100036984()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc(v3);
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v2[40] = v5;
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  v2[41] = v7;
  v2[42] = v6;
  if (v0)
    v8 = sub_10003E45C;
  else
    v8 = sub_100036A2C;
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_100036A2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[5];
  v2 = v0[6];
  v3 = sub_10003D4FC(v0 + 2, v1);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v5, v3, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v0[10] = AssociatedTypeWitness;
  v0[11] = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  sub_10003D62C(v0 + 7);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  v7 = swift_task_dealloc(v5);
  v8 = v0[40];
  v9 = static CommunicationActor.shared.getter(v7);
  v0[43] = v9;
  v10 = v0[10];
  v11 = v0[11];
  sub_10003D6F0((uint64_t)(v0 + 7), v10);
  v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[44] = v12;
  *v12 = v0;
  v12[1] = sub_100036B84;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[35], v9, v8, v0 + 15, v10, v11);
}

uint64_t sub_100036B84()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 352));
  swift_release(v2[43]);
  if (v0)
    v3 = sub_10003E420;
  else
    v3 = sub_100036BF4;
  return swift_task_switch(v3, v2[41], v2[42]);
}

uint64_t sub_100036BF4()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_log_type_t type;
  NSObject *log;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;

  v1 = *(char **)(v0 + 280);
  v2 = sub_10000629C(&qword_1000B31F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    swift_release(*(_QWORD *)(v0 + 296));
    sub_100022238((_QWORD *)(v0 + 56));
    dispatch thunk of BroadcastSequence.finish(throwing:)(0);
    sub_100022238((_QWORD *)(v0 + 16));
    v4 = *(_QWORD *)(v0 + 272);
    v3 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v0 + 264);
    v6 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 216);
    v81 = *(_QWORD *)(v0 + 184);
    v84 = *(_QWORD *)(v0 + 176);
    v9 = *(_QWORD *)(v0 + 136);
    swift_beginAccess(*(_QWORD *)(v0 + 128) + 112, v0 + 96, 33, 0);
    v10 = sub_10003C750(v9);
    swift_endAccess(v0 + 96);
    swift_release(v10);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v81);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 264);
    v12 = *(_QWORD *)(v0 + 272);
    v14 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 256);
    v85 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 144);
    v82 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)v1;
    *(_QWORD *)(v0 + 360) = *(_QWORD *)v1;
    v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v12, &v1[*(int *)(v2 + 48)], v14);
    static Log.default.getter(v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v12, v14);
    v19 = v85;
    v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    v86(v19, v79, v82);
    v20 = swift_bridgeObjectRetain_n(v17, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.debug.getter();
    v23 = os_log_type_enabled(v21, v22);
    v25 = *(_QWORD *)(v0 + 256);
    v24 = *(_QWORD *)(v0 + 264);
    v26 = *(_QWORD *)(v0 + 240);
    v27 = *(_QWORD *)(v0 + 224);
    v28 = *(_QWORD *)(v0 + 232);
    v29 = *(_QWORD *)(v0 + 216);
    if (v23)
    {
      v72 = *(_QWORD *)(v0 + 208);
      v73 = *(_QWORD *)(v0 + 200);
      v80 = *(_QWORD *)(v0 + 224);
      v83 = v17;
      v30 = *(_QWORD *)(v0 + 184);
      v31 = *(_QWORD *)(v0 + 192);
      v70 = *(_QWORD *)(v0 + 168);
      v71 = *(_QWORD *)(v0 + 248);
      v78 = *(_QWORD *)(v0 + 240);
      v32 = *(_QWORD *)(v0 + 160);
      v77 = *(_QWORD *)(v0 + 232);
      v33 = swift_slowAlloc(32, -1);
      v76 = swift_slowAlloc(96, -1);
      v87 = v76;
      *(_DWORD *)v33 = 136315650;
      log = v21;
      StoredPhoto.localIdentifier.getter(v76);
      v34 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v32, v34);
      type = v22;
      v37 = v36;
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v30, v32);
      *(_QWORD *)(v33 + 4) = sub_100021438(v35, v37, &v87);
      swift_bridgeObjectRelease(v37);
      v38 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v38(v24, v71);
      *(_WORD *)(v33 + 12) = 2080;
      v86(v72, v29, v31);
      v39 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v39(v29, v31);
      v40 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v31, v40);
      v43 = v42;
      v39(v72, v31);
      *(_QWORD *)(v33 + 14) = sub_100021438(v41, v43, &v87);
      swift_bridgeObjectRelease(v43);
      *(_WORD *)(v33 + 22) = 2080;
      v17 = v83;
      v44 = swift_bridgeObjectRetain(v83);
      v45 = Array.description.getter(v44, &type metadata for Int);
      v47 = v46;
      swift_bridgeObjectRelease(v83);
      *(_QWORD *)(v33 + 24) = sub_100021438(v45, v47, &v87);
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease_n(v83, 2);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Relating photo %s for %s on days %s", (uint8_t *)v33, 0x20u);
      swift_arrayDestroy(v76, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v78, v80);
    }
    else
    {
      v48 = *(_QWORD *)(v0 + 248);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
      v38 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v38(v24, v48);
      swift_bridgeObjectRelease_n(v17, 2);

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    }
    *(_QWORD *)(v0 + 368) = v38;
    v49 = *(_QWORD *)(v17 + 16);
    *(_QWORD *)(v0 + 376) = v49;
    if (v49)
    {
      v50 = *(_QWORD *)(v0 + 168);
      v51 = *(_QWORD *)(v50 + 72);
      *(_QWORD *)(v0 + 384) = v51;
      LODWORD(v50) = *(_DWORD *)(v50 + 80);
      *(_DWORD *)(v0 + 424) = v50;
      v50 = v50;
      *(_QWORD *)(v0 + 392) = 0;
      v52 = *(_QWORD *)(v0 + 192);
      v53 = ((v50 + 32) & ~v50) + v51;
      v54 = v50 | 7;
      v55 = *(_QWORD *)(*(_QWORD *)(v0 + 360) + 32);
      v56 = sub_10000629C(&qword_1000B3200);
      v57 = swift_allocObject(v56, v53, v54);
      *(_QWORD *)(v0 + 400) = v57;
      *(_OWORD *)(v57 + 16) = xmmword_100096430;
      StoredPhoto.localIdentifier.getter(v57);
      v58 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      dispatch thunk of PhotosFaceID.id.getter(v52, v58);
      v59 = type metadata accessor for ShuffleDatabase(0);
      v60 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
      v61 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)[1]);
      *(_QWORD *)(v0 + 408) = v61;
      *v61 = v0;
      v61[1] = sub_100037264;
      return dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)(v57, *(_QWORD *)(v0 + 176), v55, v59, v60);
    }
    else
    {
      v62 = *(_QWORD *)(v0 + 272);
      v63 = *(_QWORD *)(v0 + 248);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 360));
      dispatch thunk of BroadcastSequence.yield(_:)(v62);
      v64 = ((uint64_t (*)(uint64_t, uint64_t))v38)(v62, v63);
      v65 = *(_QWORD *)(v0 + 320);
      v66 = static CommunicationActor.shared.getter(v64);
      *(_QWORD *)(v0 + 344) = v66;
      v67 = *(_QWORD *)(v0 + 80);
      v68 = *(_QWORD *)(v0 + 88);
      sub_10003D6F0(v0 + 56, v67);
      v69 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 352) = v69;
      *v69 = v0;
      v69[1] = sub_100036B84;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 280), v66, v65, v0 + 120, v67, v68);
    }
  }
}

uint64_t sub_100037264()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc(v3);
  v4 = v2[50];
  if (v0)
  {
    v5 = v2[45];
    v7 = v2[21];
    v6 = v2[22];
    v8 = v2[20];
    swift_bridgeObjectRelease(v2[50]);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_bridgeObjectRelease(v5);
    v9 = v2[41];
    v10 = v2[42];
    v11 = sub_10003E424;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[21] + 8))(v2[22], v2[20]);
    swift_bridgeObjectRelease(v4);
    v9 = v2[41];
    v10 = v2[42];
    v11 = sub_100037320;
  }
  return swift_task_switch(v11, v9, v10);
}

uint64_t sub_100037320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = *(_QWORD *)(v0 + 392) + 1;
  if (v1 == *(_QWORD *)(v0 + 376))
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 368);
    v3 = *(_QWORD *)(v0 + 272);
    v4 = *(_QWORD *)(v0 + 248);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 360));
    dispatch thunk of BroadcastSequence.yield(_:)(v3);
    v5 = v2(v3, v4);
    v6 = *(_QWORD *)(v0 + 320);
    v7 = static CommunicationActor.shared.getter(v5);
    *(_QWORD *)(v0 + 344) = v7;
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 88);
    sub_10003D6F0(v0 + 56, v8);
    v10 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 352) = v10;
    *v10 = v0;
    v10[1] = sub_100036B84;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 280), v7, v6, v0 + 120, v8, v9);
  }
  else
  {
    *(_QWORD *)(v0 + 392) = v1;
    v12 = *(unsigned __int8 *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 192);
    v14 = ((v12 + 32) & ~v12) + *(_QWORD *)(v0 + 384);
    v15 = v12 | 7;
    v16 = *(_QWORD *)(*(_QWORD *)(v0 + 360) + 8 * v1 + 32);
    v17 = sub_10000629C(&qword_1000B3200);
    v18 = swift_allocObject(v17, v14, v15);
    *(_QWORD *)(v0 + 400) = v18;
    *(_OWORD *)(v18 + 16) = xmmword_100096430;
    StoredPhoto.localIdentifier.getter(v18);
    v19 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    dispatch thunk of PhotosFaceID.id.getter(v13, v19);
    v20 = type metadata accessor for ShuffleDatabase(0);
    v21 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
    v22 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)[1]);
    *(_QWORD *)(v0 + 408) = v22;
    *v22 = v0;
    v22[1] = sub_100037264;
    return dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)(v18, *(_QWORD *)(v0 + 176), v16, v20, v21);
  }
}

uint64_t sub_10003753C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v25)(_QWORD *);
  uint64_t v26;

  v8[18] = a8;
  v8[19] = v26;
  v8[16] = a4;
  v8[17] = a5;
  v10 = type metadata accessor for UUID(0);
  v8[20] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[21] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[22] = swift_task_alloc(v12);
  v8[23] = swift_task_alloc(v12);
  v13 = type metadata accessor for AlbumID(0);
  v8[24] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[25] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[26] = swift_task_alloc(v15);
  v8[27] = swift_task_alloc(v15);
  v16 = type metadata accessor for Logger(0);
  v8[28] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v8[29] = v17;
  v8[30] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for StoredPhoto(0);
  v8[31] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v8[32] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[33] = swift_task_alloc(v20);
  v8[34] = swift_task_alloc(v20);
  v21 = sub_10000629C(&qword_1000B31F0);
  v8[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CommunicationActor(0);
  v8[36] = v22;
  v8[37] = static CommunicationActor.shared.getter(v22);
  v25 = (uint64_t (*)(_QWORD *))((char *)a6 + *a6);
  v23 = (_QWORD *)swift_task_alloc(a6[1]);
  v8[38] = v23;
  *v23 = v8;
  v23[1] = sub_1000376C8;
  return v25(v8 + 2);
}

uint64_t sub_1000376C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc(v3);
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v2[40] = v5;
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  v2[41] = v7;
  v2[42] = v6;
  if (v0)
    v8 = sub_1000378C8;
  else
    v8 = sub_100037770;
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_100037770()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[5];
  v2 = v0[6];
  v3 = sub_10003D4FC(v0 + 2, v1);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v5, v3, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v0[10] = AssociatedTypeWitness;
  v0[11] = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  sub_10003D62C(v0 + 7);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  v7 = swift_task_dealloc(v5);
  v8 = v0[40];
  v9 = static CommunicationActor.shared.getter(v7);
  v0[43] = v9;
  v10 = v0[10];
  v11 = v0[11];
  sub_10003D6F0((uint64_t)(v0 + 7), v10);
  v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[44] = v12;
  *v12 = v0;
  v12[1] = sub_1000379D8;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[35], v9, v8, v0 + 15, v10, v11);
}

uint64_t sub_1000378C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 296));
  v1 = *(_QWORD *)(v0 + 312);
  swift_errorRetain(v1);
  dispatch thunk of BroadcastSequence.finish(throwing:)(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 136);
  swift_beginAccess(*(_QWORD *)(v0 + 128) + 112, v0 + 96, 33, 0);
  v9 = sub_10003C750(v8);
  swift_endAccess(v0 + 96);
  swift_release(v9);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000379D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 352));
  swift_release(v2[43]);
  if (v0)
    v3 = sub_1000380B8;
  else
    v3 = sub_100037A48;
  return swift_task_switch(v3, v2[41], v2[42]);
}

uint64_t sub_100037A48()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_log_type_t type;
  NSObject *log;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;

  v1 = *(char **)(v0 + 280);
  v2 = sub_10000629C(&qword_1000B31F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    swift_release(*(_QWORD *)(v0 + 296));
    sub_100022238((_QWORD *)(v0 + 56));
    dispatch thunk of BroadcastSequence.finish(throwing:)(0);
    sub_100022238((_QWORD *)(v0 + 16));
    v4 = *(_QWORD *)(v0 + 272);
    v3 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v0 + 264);
    v6 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 216);
    v81 = *(_QWORD *)(v0 + 184);
    v84 = *(_QWORD *)(v0 + 176);
    v9 = *(_QWORD *)(v0 + 136);
    swift_beginAccess(*(_QWORD *)(v0 + 128) + 112, v0 + 96, 33, 0);
    v10 = sub_10003C750(v9);
    swift_endAccess(v0 + 96);
    swift_release(v10);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v81);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 264);
    v12 = *(_QWORD *)(v0 + 272);
    v14 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 256);
    v85 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 144);
    v82 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)v1;
    *(_QWORD *)(v0 + 360) = *(_QWORD *)v1;
    v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v12, &v1[*(int *)(v2 + 48)], v14);
    static Log.default.getter(v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v12, v14);
    v19 = v85;
    v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    v86(v19, v79, v82);
    v20 = swift_bridgeObjectRetain_n(v17, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.debug.getter();
    v23 = os_log_type_enabled(v21, v22);
    v25 = *(_QWORD *)(v0 + 256);
    v24 = *(_QWORD *)(v0 + 264);
    v26 = *(_QWORD *)(v0 + 240);
    v27 = *(_QWORD *)(v0 + 224);
    v28 = *(_QWORD *)(v0 + 232);
    v29 = *(_QWORD *)(v0 + 216);
    if (v23)
    {
      v72 = *(_QWORD *)(v0 + 208);
      v73 = *(_QWORD *)(v0 + 200);
      v80 = *(_QWORD *)(v0 + 224);
      v83 = v17;
      v30 = *(_QWORD *)(v0 + 184);
      v31 = *(_QWORD *)(v0 + 192);
      v70 = *(_QWORD *)(v0 + 168);
      v71 = *(_QWORD *)(v0 + 248);
      v78 = *(_QWORD *)(v0 + 240);
      v32 = *(_QWORD *)(v0 + 160);
      v77 = *(_QWORD *)(v0 + 232);
      v33 = swift_slowAlloc(32, -1);
      v76 = swift_slowAlloc(96, -1);
      v87 = v76;
      *(_DWORD *)v33 = 136315650;
      log = v21;
      StoredPhoto.localIdentifier.getter(v76);
      v34 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v32, v34);
      type = v22;
      v37 = v36;
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v30, v32);
      *(_QWORD *)(v33 + 4) = sub_100021438(v35, v37, &v87);
      swift_bridgeObjectRelease(v37);
      v38 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v38(v24, v71);
      *(_WORD *)(v33 + 12) = 2080;
      v86(v72, v29, v31);
      v39 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v39(v29, v31);
      v40 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v31, v40);
      v43 = v42;
      v39(v72, v31);
      *(_QWORD *)(v33 + 14) = sub_100021438(v41, v43, &v87);
      swift_bridgeObjectRelease(v43);
      *(_WORD *)(v33 + 22) = 2080;
      v17 = v83;
      v44 = swift_bridgeObjectRetain(v83);
      v45 = Array.description.getter(v44, &type metadata for Int);
      v47 = v46;
      swift_bridgeObjectRelease(v83);
      *(_QWORD *)(v33 + 24) = sub_100021438(v45, v47, &v87);
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease_n(v83, 2);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Relating photo %s for %s on days %s", (uint8_t *)v33, 0x20u);
      swift_arrayDestroy(v76, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v78, v80);
    }
    else
    {
      v48 = *(_QWORD *)(v0 + 248);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
      v38 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v38(v24, v48);
      swift_bridgeObjectRelease_n(v17, 2);

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    }
    *(_QWORD *)(v0 + 368) = v38;
    v49 = *(_QWORD *)(v17 + 16);
    *(_QWORD *)(v0 + 376) = v49;
    if (v49)
    {
      v50 = *(_QWORD *)(v0 + 168);
      v51 = *(_QWORD *)(v50 + 72);
      *(_QWORD *)(v0 + 384) = v51;
      LODWORD(v50) = *(_DWORD *)(v50 + 80);
      *(_DWORD *)(v0 + 424) = v50;
      v50 = v50;
      *(_QWORD *)(v0 + 392) = 0;
      v52 = *(_QWORD *)(v0 + 192);
      v53 = ((v50 + 32) & ~v50) + v51;
      v54 = v50 | 7;
      v55 = *(_QWORD *)(*(_QWORD *)(v0 + 360) + 32);
      v56 = sub_10000629C(&qword_1000B3200);
      v57 = swift_allocObject(v56, v53, v54);
      *(_QWORD *)(v0 + 400) = v57;
      *(_OWORD *)(v57 + 16) = xmmword_100096430;
      StoredPhoto.localIdentifier.getter(v57);
      v58 = sub_100009174(&qword_1000B29F0, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
      dispatch thunk of PhotosFaceID.id.getter(v52, v58);
      v59 = type metadata accessor for AlbumDatabase(0);
      v60 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
      v61 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)[1]);
      *(_QWORD *)(v0 + 408) = v61;
      *v61 = v0;
      v61[1] = sub_1000381E0;
      return dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)(v57, *(_QWORD *)(v0 + 176), v55, v59, v60);
    }
    else
    {
      v62 = *(_QWORD *)(v0 + 272);
      v63 = *(_QWORD *)(v0 + 248);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 360));
      dispatch thunk of BroadcastSequence.yield(_:)(v62);
      v64 = ((uint64_t (*)(uint64_t, uint64_t))v38)(v62, v63);
      v65 = *(_QWORD *)(v0 + 320);
      v66 = static CommunicationActor.shared.getter(v64);
      *(_QWORD *)(v0 + 344) = v66;
      v67 = *(_QWORD *)(v0 + 80);
      v68 = *(_QWORD *)(v0 + 88);
      sub_10003D6F0(v0 + 56, v67);
      v69 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 352) = v69;
      *v69 = v0;
      v69[1] = sub_1000379D8;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 280), v66, v65, v0 + 120, v67, v68);
    }
  }
}

uint64_t sub_1000380B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 296));
  v1 = *(_QWORD *)(v0 + 120);
  sub_100022238((_QWORD *)(v0 + 56));
  sub_100022238((_QWORD *)(v0 + 16));
  swift_errorRetain(v1);
  dispatch thunk of BroadcastSequence.finish(throwing:)(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 136);
  swift_beginAccess(*(_QWORD *)(v0 + 128) + 112, v0 + 96, 33, 0);
  v9 = sub_10003C750(v8);
  swift_endAccess(v0 + 96);
  swift_release(v9);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000381E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc(v3);
  v4 = v2[50];
  if (v0)
  {
    v5 = v2[45];
    v7 = v2[21];
    v6 = v2[22];
    v8 = v2[20];
    swift_bridgeObjectRelease(v2[50]);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_bridgeObjectRelease(v5);
    v9 = v2[41];
    v10 = v2[42];
    v11 = sub_1000384B8;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[21] + 8))(v2[22], v2[20]);
    swift_bridgeObjectRelease(v4);
    v9 = v2[41];
    v10 = v2[42];
    v11 = sub_10003829C;
  }
  return swift_task_switch(v11, v9, v10);
}

uint64_t sub_10003829C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = *(_QWORD *)(v0 + 392) + 1;
  if (v1 == *(_QWORD *)(v0 + 376))
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 368);
    v3 = *(_QWORD *)(v0 + 272);
    v4 = *(_QWORD *)(v0 + 248);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 360));
    dispatch thunk of BroadcastSequence.yield(_:)(v3);
    v5 = v2(v3, v4);
    v6 = *(_QWORD *)(v0 + 320);
    v7 = static CommunicationActor.shared.getter(v5);
    *(_QWORD *)(v0 + 344) = v7;
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 88);
    sub_10003D6F0(v0 + 56, v8);
    v10 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 352) = v10;
    *v10 = v0;
    v10[1] = sub_1000379D8;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 280), v7, v6, v0 + 120, v8, v9);
  }
  else
  {
    *(_QWORD *)(v0 + 392) = v1;
    v12 = *(unsigned __int8 *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 192);
    v14 = ((v12 + 32) & ~v12) + *(_QWORD *)(v0 + 384);
    v15 = v12 | 7;
    v16 = *(_QWORD *)(*(_QWORD *)(v0 + 360) + 8 * v1 + 32);
    v17 = sub_10000629C(&qword_1000B3200);
    v18 = swift_allocObject(v17, v14, v15);
    *(_QWORD *)(v0 + 400) = v18;
    *(_OWORD *)(v18 + 16) = xmmword_100096430;
    StoredPhoto.localIdentifier.getter(v18);
    v19 = sub_100009174(&qword_1000B29F0, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
    dispatch thunk of PhotosFaceID.id.getter(v13, v19);
    v20 = type metadata accessor for AlbumDatabase(0);
    v21 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
    v22 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)[1]);
    *(_QWORD *)(v0 + 408) = v22;
    *v22 = v0;
    v22[1] = sub_1000381E0;
    return dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)(v18, *(_QWORD *)(v0 + 176), v16, v20, v21);
  }
}

uint64_t sub_1000384B8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 248);
  swift_release(*(_QWORD *)(v0 + 296));
  v1(v2, v3);
  sub_100022238((_QWORD *)(v0 + 56));
  sub_100022238((_QWORD *)(v0 + 16));
  v4 = *(_QWORD *)(v0 + 416);
  swift_errorRetain(v4);
  dispatch thunk of BroadcastSequence.finish(throwing:)(v4);
  swift_errorRelease(v4);
  swift_errorRelease(v4);
  v6 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 136);
  swift_beginAccess(*(_QWORD *)(v0 + 128) + 112, v0 + 96, 33, 0);
  v12 = sub_10003C750(v11);
  swift_endAccess(v0 + 96);
  swift_release(v12);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000385F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for ShuffleID(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[9] = v7;
  v4[10] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CommunicationActor(0);
  v4[11] = v8;
  v4[12] = static CommunicationActor.shared.getter(v8);
  v9 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4[13] = v9;
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v9);
  return swift_task_switch(sub_1000386C0, v10, v11);
}

uint64_t sub_1000386C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD **)(v0 + 24);
  v9 = swift_release(*(_QWORD *)(v0 + 96));
  v16 = static CommunicationActor.shared.getter(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v7, v5);
  v10 = *(unsigned __int8 *)(v3 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = (v2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_1000AE3A0, v12 + 8, v10 | 7);
  *(_QWORD *)(v13 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v11, v1, v5);
  *(_QWORD *)(v13 + v12) = v4;
  v8[3] = sub_10000629C(&qword_1000B3220);
  v14 = sub_100006410(&qword_1000B31F8);
  *(_QWORD *)(v0 + 16) = v14;
  v8[4] = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  sub_10003D62C(v8);
  swift_retain(v6);
  generateElements<A>(isolation:_:)(v16, v17, &unk_1000B3218, v13, v14);
  swift_release(v13);
  swift_release(v16);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003881C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for ShuffleID(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[9] = v7;
  v4[10] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CommunicationActor(0);
  v4[11] = v8;
  v4[12] = static CommunicationActor.shared.getter(v8);
  v9 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4[13] = v9;
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v9);
  return swift_task_switch(sub_1000388E4, v10, v11);
}

uint64_t sub_1000388E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD **)(v0 + 24);
  v9 = swift_release(*(_QWORD *)(v0 + 96));
  v16 = static CommunicationActor.shared.getter(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v7, v5);
  v10 = *(unsigned __int8 *)(v3 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = (v2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_1000AE3F0, v12 + 8, v10 | 7);
  *(_QWORD *)(v13 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v11, v1, v5);
  *(_QWORD *)(v13 + v12) = v4;
  v8[3] = sub_10000629C(&qword_1000B3220);
  v14 = sub_100006410(&qword_1000B31F8);
  *(_QWORD *)(v0 + 16) = v14;
  v8[4] = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  sub_10003D62C(v8);
  swift_retain(v6);
  generateElements<A>(isolation:_:)(v16, v17, &unk_1000B3268, v13, v14);
  swift_release(v13);
  swift_release(v16);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100038A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for AlbumID(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[9] = v7;
  v4[10] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CommunicationActor(0);
  v4[11] = v8;
  v4[12] = static CommunicationActor.shared.getter(v8);
  v9 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4[13] = v9;
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v9);
  return swift_task_switch(sub_100038B08, v10, v11);
}

uint64_t sub_100038B08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD **)(v0 + 24);
  v9 = swift_release(*(_QWORD *)(v0 + 96));
  v16 = static CommunicationActor.shared.getter(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v7, v5);
  v10 = *(unsigned __int8 *)(v3 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = (v2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_1000AE490, v12 + 8, v10 | 7);
  *(_QWORD *)(v13 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v11, v1, v5);
  *(_QWORD *)(v13 + v12) = v4;
  v8[3] = sub_10000629C(&qword_1000B3220);
  v14 = sub_100006410(&qword_1000B31F8);
  *(_QWORD *)(v0 + 16) = v14;
  v8[4] = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  sub_10003D62C(v8);
  swift_retain(v6);
  generateElements<A>(isolation:_:)(v16, v17, &unk_1000B32D0, v13, v14);
  swift_release(v13);
  swift_release(v16);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100038C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5[20] = a4;
  v5[21] = a5;
  v5[18] = a2;
  v5[19] = a3;
  v5[17] = a1;
  v6 = sub_10000629C(&qword_1000B31F8);
  v5[22] = v6;
  v5[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for StoredPhoto(0);
  v5[24] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[25] = v8;
  v5[26] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000629C(&qword_1000B31D0);
  v5[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ShuffleID(0);
  v5[28] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[29] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[30] = swift_task_alloc(v12);
  v5[31] = swift_task_alloc(v12);
  v5[32] = swift_task_alloc(v12);
  v13 = type metadata accessor for Logger(0);
  v5[33] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[34] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[35] = swift_task_alloc(v15);
  v5[36] = swift_task_alloc(v15);
  v5[37] = swift_task_alloc(v15);
  v16 = type metadata accessor for UUID(0);
  v5[38] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[39] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[40] = swift_task_alloc(v18);
  v5[41] = swift_task_alloc(v18);
  v5[42] = swift_task_alloc(v18);
  v19 = type metadata accessor for CommunicationActor(0);
  v5[43] = v19;
  v5[44] = static CommunicationActor.shared.getter(v19);
  v20 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v5[45] = v20;
  v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, v20);
  v5[46] = v21;
  v5[47] = v22;
  return swift_task_switch(sub_100038E44, v21, v22);
}

uint64_t sub_100038E44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[28];
  v2 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  v0[48] = v2;
  dispatch thunk of PhotosFaceID.id.getter(v1, v2);
  v3 = type metadata accessor for GalleryDatabase(0);
  v0[49] = v3;
  v4 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
  v0[50] = v4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)[1]);
  v0[51] = v5;
  *v5 = v0;
  v5[1] = sub_100038F1C;
  return dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)(v0[42], v3, v4);
}

uint64_t sub_100038F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 408);
  v3[52] = a1;
  v3[53] = v1;
  swift_task_dealloc(v4);
  v5 = v3[42];
  v6 = v3[38];
  v7 = *(void (**)(uint64_t, uint64_t))(v3[39] + 8);
  if (v1)
  {
    v7(v5, v6);
    v8 = v3[46];
    v9 = v3[47];
    v10 = sub_10003E464;
  }
  else
  {
    v3[54] = v7;
    v7(v5, v6);
    v8 = v3[46];
    v9 = v3[47];
    v10 = sub_100038FA0;
  }
  return swift_task_switch(v10, v8, v9);
}

uint64_t sub_100038FA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  NSObject *log;
  os_log_type_t type;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81[2];

  v2 = *(_QWORD *)(v1 + 416);
  v3 = *(_QWORD *)(v1 + 256);
  v4 = *(_QWORD *)(v1 + 224);
  v5 = *(_QWORD *)(v1 + 232);
  v6 = *(_QWORD *)(v1 + 160);
  static Log.default.getter(a1);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v7(v3, v6, v4);
  v8 = swift_bridgeObjectRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v7;
  if (os_log_type_enabled(v9, v10))
  {
    log = v9;
    v11 = *(_QWORD *)(v1 + 416);
    v12 = *(_QWORD *)(v1 + 424);
    v70 = *(_QWORD *)(v1 + 272);
    v72 = *(_QWORD *)(v1 + 264);
    v74 = *(_QWORD *)(v1 + 296);
    type = v10;
    v14 = *(_QWORD *)(v1 + 248);
    v13 = *(_QWORD *)(v1 + 256);
    v15 = *(_QWORD *)(v1 + 224);
    v16 = *(_QWORD *)(v1 + 232);
    v17 = swift_slowAlloc(22, -1);
    v67 = swift_slowAlloc(64, -1);
    v81[0] = v67;
    *(_DWORD *)v17 = 136315394;
    v7(v14, v13, v15);
    v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v18(v13, v15);
    v19 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v15, v19);
    v22 = v21;
    v79 = v18;
    v18(v14, v15);
    *(_QWORD *)(v1 + 120) = sub_100021438(v20, v22, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v17 + 12) = 2080;
    v23 = sub_10003CD54(v11);
    v24 = sub_10000629C(&qword_1000B2A58);
    v25 = Dictionary.description.getter(v23, &type metadata for Int, v24, &protocol witness table for Int);
    v27 = v26;
    swift_release(v23);
    *(_QWORD *)(v1 + 128) = sub_100021438(v25, v27, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Before processing, photos for %s: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v28 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
    v28(v74, v72);
  }
  else
  {
    v29 = *(_QWORD *)(v1 + 416);
    v30 = *(_QWORD *)(v1 + 296);
    v31 = *(_QWORD *)(v1 + 264);
    v32 = *(_QWORD *)(v1 + 272);
    v79 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 232) + 8);
    v79(*(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 224));
    swift_bridgeObjectRelease_n(v29, 2);

    v28 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v28(v30, v31);
    v12 = *(_QWORD *)(v1 + 424);
  }
  *(_QWORD *)(v1 + 440) = v28;
  v33 = sub_10001BA28(*(_QWORD *)(v1 + 160), *(void **)(v1 + 168));
  if (v12)
  {
    swift_release(*(_QWORD *)(v1 + 352));
    v34 = *(_QWORD *)(v1 + 328);
    v35 = *(_QWORD *)(v1 + 320);
    v37 = *(_QWORD *)(v1 + 288);
    v36 = *(_QWORD *)(v1 + 296);
    v38 = *(_QWORD *)(v1 + 280);
    v40 = *(_QWORD *)(v1 + 248);
    v39 = *(_QWORD *)(v1 + 256);
    v41 = *(_QWORD *)(v1 + 240);
    v75 = *(_QWORD *)(v1 + 216);
    v78 = *(_QWORD *)(v1 + 208);
    v80 = *(_QWORD *)(v1 + 184);
    swift_task_dealloc(*(_QWORD *)(v1 + 336));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v75);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v43 = v33;
    v44 = *(_QWORD *)(v1 + 240);
    v45 = *(_QWORD *)(v1 + 224);
    v46 = *(_QWORD *)(v1 + 160);
    *(_QWORD *)(v1 + 448) = sub_100023AD4(v33);
    v47 = sub_100023C40(v43);
    swift_bridgeObjectRelease(v43);
    v48 = sub_10003D7C8(v47);
    swift_bridgeObjectRelease(v47);
    *(_QWORD *)(v1 + 456) = sub_10003CAC8(v48);
    v49 = swift_bridgeObjectRelease(v48);
    static Log.default.getter(v49);
    v50 = v77(v44, v46, v45);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.debug.getter();
    v53 = os_log_type_enabled(v51, v52);
    v54 = *(_QWORD *)(v1 + 288);
    v55 = *(_QWORD *)(v1 + 264);
    if (v53)
    {
      v73 = *(_QWORD *)(v1 + 264);
      v76 = *(_QWORD *)(v1 + 288);
      v57 = *(_QWORD *)(v1 + 240);
      v56 = *(_QWORD *)(v1 + 248);
      v58 = *(_QWORD *)(v1 + 224);
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v81[0] = v71;
      *(_DWORD *)v59 = 136315138;
      v77(v56, v57, v58);
      v79(v57, v58);
      v60 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v61 = dispatch thunk of CustomStringConvertible.description.getter(v58, v60);
      v63 = v62;
      v79(v56, v58);
      *(_QWORD *)(v1 + 112) = sub_100021438(v61, v63, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v59 + 4, v59 + 12);
      swift_bridgeObjectRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Clearing photos for id: %s", v59, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      v65 = v73;
      v64 = v76;
    }
    else
    {
      v79(*(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 224));

      v64 = v54;
      v65 = v55;
    }
    v28(v64, v65);
    dispatch thunk of PhotosFaceID.id.getter(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 384));
    v66 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
    *(_QWORD *)(v1 + 464) = v66;
    *v66 = v1;
    v66[1] = sub_1000395AC;
    return dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v1 + 328), *(_QWORD *)(v1 + 392), *(_QWORD *)(v1 + 400));
  }
}

uint64_t sub_1000395AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 464);
  *(_QWORD *)(*v1 + 472) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 448);
    v5 = *(_QWORD *)(v2 + 456);
    (*(void (**)(_QWORD, _QWORD))(v2 + 432))(*(_QWORD *)(v2 + 328), *(_QWORD *)(v2 + 304));
    swift_bridgeObjectRelease(v4);
    swift_release(v5);
    v6 = *(_QWORD *)(v2 + 368);
    v7 = *(_QWORD *)(v2 + 376);
    v8 = sub_10003E468;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 432))(*(_QWORD *)(v2 + 328), *(_QWORD *)(v2 + 304));
    v6 = *(_QWORD *)(v2 + 368);
    v7 = *(_QWORD *)(v2 + 376);
    v8 = sub_10003964C;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_10003964C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  int *v26;
  uint64_t v27;

  v2 = v1[56];
  static Log.default.getter(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v1[56];
    v7 = v1[38];
    v24 = v1[35];
    v25 = (void (*)(uint64_t, uint64_t))v1[55];
    v23 = v1[33];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v27 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = swift_bridgeObjectRetain(v6);
    v11 = Array.description.getter(v10, v7);
    v13 = v12;
    swift_bridgeObjectRelease(v6);
    v1[13] = sub_100021438(v11, v13, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 13, v1 + 14, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Processing photos: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v25(v24, v23);
  }
  else
  {
    v14 = (void (*)(uint64_t, uint64_t))v1[55];
    v15 = v1[35];
    v16 = v1[33];
    swift_bridgeObjectRelease_n(v1[56], 2);

    v14(v15, v16);
  }
  v17 = (_QWORD *)v1[19];
  v18 = v17[8];
  v19 = v17[9];
  sub_10003D4FC(v17 + 5, v18);
  v20 = *(int **)(v19 + 16);
  v26 = (int *)((char *)v20 + *v20);
  v21 = (_QWORD *)swift_task_alloc(v20[1]);
  v1[60] = v21;
  *v21 = v1;
  v21[1] = sub_10003987C;
  return ((uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v26)(v1 + 2, v1[56], v18, v19);
}

uint64_t sub_10003987C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[57];
    swift_bridgeObjectRelease(v2[56]);
    swift_release(v4);
    v5 = v2[46];
    v6 = v2[47];
    v7 = sub_10003E438;
  }
  else
  {
    swift_bridgeObjectRelease(v2[56]);
    v5 = v2[46];
    v6 = v2[47];
    v7 = sub_1000398F8;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_1000398F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[5];
  v2 = v0[6];
  v3 = sub_10003D4FC(v0 + 2, v1);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v5, v3, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v0[10] = AssociatedTypeWitness;
  v0[11] = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  sub_10003D62C(v0 + 7);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  v7 = swift_task_dealloc(v5);
  v8 = v0[45];
  v9 = static CommunicationActor.shared.getter(v7);
  v0[62] = v9;
  v10 = v0[10];
  v11 = v0[11];
  sub_10003D6F0((uint64_t)(v0 + 7), v10);
  v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[63] = v12;
  *v12 = v0;
  v12[1] = sub_100039A50;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[27], v9, v8, v0 + 12, v10, v11);
}

uint64_t sub_100039A50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 504));
  if (v0)
  {
    v3 = v2[57];
    swift_release(v2[62]);
    swift_release(v3);
    v4 = v2[46];
    v5 = v2[47];
    v6 = (unint64_t (*)())sub_10003E46C;
  }
  else
  {
    swift_release(v2[62]);
    v4 = v2[46];
    v5 = v2[47];
    v6 = sub_100039ACC;
  }
  return swift_task_switch(v6, v4, v5);
}

unint64_t sub_100039ACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 456);
    v6 = *(_QWORD *)(v0 + 328);
    v5 = *(_QWORD *)(v0 + 336);
    v7 = *(_QWORD *)(v0 + 320);
    v9 = *(_QWORD *)(v0 + 288);
    v8 = *(_QWORD *)(v0 + 296);
    v24 = *(_QWORD *)(v0 + 280);
    v25 = *(_QWORD *)(v0 + 256);
    v26 = *(_QWORD *)(v0 + 248);
    v27 = *(_QWORD *)(v0 + 240);
    v28 = *(_QWORD *)(v0 + 208);
    v29 = *(_QWORD *)(v0 + 184);
    swift_release(*(_QWORD *)(v0 + 352));
    swift_release(v4);
    sub_100022238((_QWORD *)(v0 + 56));
    sub_100022238((_QWORD *)(v0 + 16));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v1);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v11 = *(_QWORD *)(v0 + 456);
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 208), v1, v2);
  result = StoredPhoto.localIdentifier.getter(v12);
  if (*(_QWORD *)(v11 + 16))
  {
    result = sub_10004A3F8(*(_QWORD *)(v0 + 320));
    if ((v13 & 1) != 0)
    {
      v14 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
      v15 = *(_QWORD *)(v0 + 320);
      v16 = *(_QWORD *)(v0 + 304);
      v17 = *(_QWORD *)(v0 + 200);
      v30 = *(_QWORD *)(v0 + 208);
      v19 = *(char **)(v0 + 184);
      v18 = *(_QWORD *)(v0 + 192);
      v20 = *(_QWORD *)(v0 + 176);
      v21 = *(int **)(v0 + 136);
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 456) + 56) + 8 * result);
      swift_bridgeObjectRetain(v22);
      v14(v15, v16);
      *(_QWORD *)v19 = v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(&v19[*(int *)(v20 + 48)], v30, v18);
      v31 = (uint64_t (*)(_QWORD))((char *)v21 + *v21);
      v23 = (_QWORD *)swift_task_alloc(v21[1]);
      *(_QWORD *)(v0 + 512) = v23;
      *v23 = v0;
      v23[1] = sub_100039CF8;
      return v31(*(_QWORD *)(v0 + 184));
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100039CF8()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = (*v1)[64];
  (*v1)[65] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[57];
    sub_10000EA70(v2[23], &qword_1000B31F8);
    swift_release(v4);
    v5 = v2[46];
    v6 = v2[47];
    v7 = sub_10003E494;
  }
  else
  {
    sub_10000EA70(v2[23], &qword_1000B31F8);
    v5 = v2[46];
    v6 = v2[47];
    v7 = sub_100039D88;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_100039D88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(v0[25] + 8))(v0[26], v0[24]);
  v2 = v0[45];
  v3 = static CommunicationActor.shared.getter(v1);
  v0[62] = v3;
  v4 = v0[10];
  v5 = v0[11];
  sub_10003D6F0((uint64_t)(v0 + 7), v4);
  v6 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[63] = v6;
  *v6 = v0;
  v6[1] = sub_100039A50;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[27], v3, v2, v0 + 12, v4, v5);
}

uint64_t sub_100039E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5[20] = a4;
  v5[21] = a5;
  v5[18] = a2;
  v5[19] = a3;
  v5[17] = a1;
  v6 = sub_10000629C(&qword_1000B31F8);
  v5[22] = v6;
  v5[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for StoredPhoto(0);
  v5[24] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[25] = v8;
  v5[26] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000629C(&qword_1000B31D0);
  v5[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ShuffleID(0);
  v5[28] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[29] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[30] = swift_task_alloc(v12);
  v5[31] = swift_task_alloc(v12);
  v5[32] = swift_task_alloc(v12);
  v13 = type metadata accessor for Logger(0);
  v5[33] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[34] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[35] = swift_task_alloc(v15);
  v5[36] = swift_task_alloc(v15);
  v5[37] = swift_task_alloc(v15);
  v16 = type metadata accessor for UUID(0);
  v5[38] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[39] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[40] = swift_task_alloc(v18);
  v5[41] = swift_task_alloc(v18);
  v5[42] = swift_task_alloc(v18);
  v19 = type metadata accessor for CommunicationActor(0);
  v5[43] = v19;
  v5[44] = static CommunicationActor.shared.getter(v19);
  v20 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v5[45] = v20;
  v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, v20);
  v5[46] = v21;
  v5[47] = v22;
  return swift_task_switch(sub_10003A020, v21, v22);
}

uint64_t sub_10003A020()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[28];
  v2 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  v0[48] = v2;
  dispatch thunk of PhotosFaceID.id.getter(v1, v2);
  v3 = type metadata accessor for ShuffleDatabase(0);
  v0[49] = v3;
  v4 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
  v0[50] = v4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)[1]);
  v0[51] = v5;
  *v5 = v0;
  v5[1] = sub_10003A0F8;
  return dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)(v0[42], v3, v4);
}

uint64_t sub_10003A0F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 408);
  v3[52] = a1;
  v3[53] = v1;
  swift_task_dealloc(v4);
  v5 = v3[42];
  v6 = v3[38];
  v7 = *(void (**)(uint64_t, uint64_t))(v3[39] + 8);
  if (v1)
  {
    v7(v5, v6);
    v8 = v3[46];
    v9 = v3[47];
    v10 = sub_10003E464;
  }
  else
  {
    v3[54] = v7;
    v7(v5, v6);
    v8 = v3[46];
    v9 = v3[47];
    v10 = sub_10003A17C;
  }
  return swift_task_switch(v10, v8, v9);
}

uint64_t sub_10003A17C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  NSObject *log;
  os_log_type_t type;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81[2];

  v2 = *(_QWORD *)(v1 + 416);
  v3 = *(_QWORD *)(v1 + 256);
  v4 = *(_QWORD *)(v1 + 224);
  v5 = *(_QWORD *)(v1 + 232);
  v6 = *(_QWORD *)(v1 + 160);
  static Log.default.getter(a1);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v7(v3, v6, v4);
  v8 = swift_bridgeObjectRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v7;
  if (os_log_type_enabled(v9, v10))
  {
    log = v9;
    v11 = *(_QWORD *)(v1 + 416);
    v12 = *(_QWORD *)(v1 + 424);
    v70 = *(_QWORD *)(v1 + 272);
    v72 = *(_QWORD *)(v1 + 264);
    v74 = *(_QWORD *)(v1 + 296);
    type = v10;
    v14 = *(_QWORD *)(v1 + 248);
    v13 = *(_QWORD *)(v1 + 256);
    v15 = *(_QWORD *)(v1 + 224);
    v16 = *(_QWORD *)(v1 + 232);
    v17 = swift_slowAlloc(22, -1);
    v67 = swift_slowAlloc(64, -1);
    v81[0] = v67;
    *(_DWORD *)v17 = 136315394;
    v7(v14, v13, v15);
    v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v18(v13, v15);
    v19 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v15, v19);
    v22 = v21;
    v79 = v18;
    v18(v14, v15);
    *(_QWORD *)(v1 + 120) = sub_100021438(v20, v22, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v17 + 12) = 2080;
    v23 = sub_10003CD54(v11);
    v24 = sub_10000629C(&qword_1000B2A58);
    v25 = Dictionary.description.getter(v23, &type metadata for Int, v24, &protocol witness table for Int);
    v27 = v26;
    swift_release(v23);
    *(_QWORD *)(v1 + 128) = sub_100021438(v25, v27, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Before processing, photos for %s: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v28 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
    v28(v74, v72);
  }
  else
  {
    v29 = *(_QWORD *)(v1 + 416);
    v30 = *(_QWORD *)(v1 + 296);
    v31 = *(_QWORD *)(v1 + 264);
    v32 = *(_QWORD *)(v1 + 272);
    v79 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 232) + 8);
    v79(*(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 224));
    swift_bridgeObjectRelease_n(v29, 2);

    v28 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v28(v30, v31);
    v12 = *(_QWORD *)(v1 + 424);
  }
  *(_QWORD *)(v1 + 440) = v28;
  v33 = sub_10001BA28(*(_QWORD *)(v1 + 160), *(void **)(v1 + 168));
  if (v12)
  {
    swift_release(*(_QWORD *)(v1 + 352));
    v34 = *(_QWORD *)(v1 + 328);
    v35 = *(_QWORD *)(v1 + 320);
    v37 = *(_QWORD *)(v1 + 288);
    v36 = *(_QWORD *)(v1 + 296);
    v38 = *(_QWORD *)(v1 + 280);
    v40 = *(_QWORD *)(v1 + 248);
    v39 = *(_QWORD *)(v1 + 256);
    v41 = *(_QWORD *)(v1 + 240);
    v75 = *(_QWORD *)(v1 + 216);
    v78 = *(_QWORD *)(v1 + 208);
    v80 = *(_QWORD *)(v1 + 184);
    swift_task_dealloc(*(_QWORD *)(v1 + 336));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v75);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v43 = v33;
    v44 = *(_QWORD *)(v1 + 240);
    v45 = *(_QWORD *)(v1 + 224);
    v46 = *(_QWORD *)(v1 + 160);
    *(_QWORD *)(v1 + 448) = sub_100023AD4(v33);
    v47 = sub_100023C40(v43);
    swift_bridgeObjectRelease(v43);
    v48 = sub_10003D7C8(v47);
    swift_bridgeObjectRelease(v47);
    *(_QWORD *)(v1 + 456) = sub_10003CAC8(v48);
    v49 = swift_bridgeObjectRelease(v48);
    static Log.default.getter(v49);
    v50 = v77(v44, v46, v45);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.debug.getter();
    v53 = os_log_type_enabled(v51, v52);
    v54 = *(_QWORD *)(v1 + 288);
    v55 = *(_QWORD *)(v1 + 264);
    if (v53)
    {
      v73 = *(_QWORD *)(v1 + 264);
      v76 = *(_QWORD *)(v1 + 288);
      v57 = *(_QWORD *)(v1 + 240);
      v56 = *(_QWORD *)(v1 + 248);
      v58 = *(_QWORD *)(v1 + 224);
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v81[0] = v71;
      *(_DWORD *)v59 = 136315138;
      v77(v56, v57, v58);
      v79(v57, v58);
      v60 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v61 = dispatch thunk of CustomStringConvertible.description.getter(v58, v60);
      v63 = v62;
      v79(v56, v58);
      *(_QWORD *)(v1 + 112) = sub_100021438(v61, v63, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v59 + 4, v59 + 12);
      swift_bridgeObjectRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Clearing photos for id: %s", v59, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      v65 = v73;
      v64 = v76;
    }
    else
    {
      v79(*(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 224));

      v64 = v54;
      v65 = v55;
    }
    v28(v64, v65);
    dispatch thunk of PhotosFaceID.id.getter(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 384));
    v66 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
    *(_QWORD *)(v1 + 464) = v66;
    *v66 = v1;
    v66[1] = sub_10003A788;
    return dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v1 + 328), *(_QWORD *)(v1 + 392), *(_QWORD *)(v1 + 400));
  }
}

uint64_t sub_10003A788()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 464);
  *(_QWORD *)(*v1 + 472) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 448);
    v5 = *(_QWORD *)(v2 + 456);
    (*(void (**)(_QWORD, _QWORD))(v2 + 432))(*(_QWORD *)(v2 + 328), *(_QWORD *)(v2 + 304));
    swift_bridgeObjectRelease(v4);
    swift_release(v5);
    v6 = *(_QWORD *)(v2 + 368);
    v7 = *(_QWORD *)(v2 + 376);
    v8 = sub_10003E468;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 432))(*(_QWORD *)(v2 + 328), *(_QWORD *)(v2 + 304));
    v6 = *(_QWORD *)(v2 + 368);
    v7 = *(_QWORD *)(v2 + 376);
    v8 = sub_10003A828;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_10003A828(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  int *v26;
  uint64_t v27;

  v2 = v1[56];
  static Log.default.getter(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v1[56];
    v7 = v1[38];
    v24 = v1[35];
    v25 = (void (*)(uint64_t, uint64_t))v1[55];
    v23 = v1[33];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v27 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = swift_bridgeObjectRetain(v6);
    v11 = Array.description.getter(v10, v7);
    v13 = v12;
    swift_bridgeObjectRelease(v6);
    v1[13] = sub_100021438(v11, v13, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 13, v1 + 14, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Processing photos: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v25(v24, v23);
  }
  else
  {
    v14 = (void (*)(uint64_t, uint64_t))v1[55];
    v15 = v1[35];
    v16 = v1[33];
    swift_bridgeObjectRelease_n(v1[56], 2);

    v14(v15, v16);
  }
  v17 = (_QWORD *)v1[19];
  v18 = v17[8];
  v19 = v17[9];
  sub_10003D4FC(v17 + 5, v18);
  v20 = *(int **)(v19 + 16);
  v26 = (int *)((char *)v20 + *v20);
  v21 = (_QWORD *)swift_task_alloc(v20[1]);
  v1[60] = v21;
  *v21 = v1;
  v21[1] = sub_10003AA58;
  return ((uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v26)(v1 + 2, v1[56], v18, v19);
}

uint64_t sub_10003AA58()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[57];
    swift_bridgeObjectRelease(v2[56]);
    swift_release(v4);
    v5 = v2[46];
    v6 = v2[47];
    v7 = sub_10003E438;
  }
  else
  {
    swift_bridgeObjectRelease(v2[56]);
    v5 = v2[46];
    v6 = v2[47];
    v7 = sub_10003AAD4;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_10003AAD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[5];
  v2 = v0[6];
  v3 = sub_10003D4FC(v0 + 2, v1);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v5, v3, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v0[10] = AssociatedTypeWitness;
  v0[11] = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  sub_10003D62C(v0 + 7);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  v7 = swift_task_dealloc(v5);
  v8 = v0[45];
  v9 = static CommunicationActor.shared.getter(v7);
  v0[62] = v9;
  v10 = v0[10];
  v11 = v0[11];
  sub_10003D6F0((uint64_t)(v0 + 7), v10);
  v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[63] = v12;
  *v12 = v0;
  v12[1] = sub_10003AC2C;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[27], v9, v8, v0 + 12, v10, v11);
}

uint64_t sub_10003AC2C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 504));
  if (v0)
  {
    v3 = v2[57];
    swift_release(v2[62]);
    swift_release(v3);
    v4 = v2[46];
    v5 = v2[47];
    v6 = (unint64_t (*)())sub_10003E46C;
  }
  else
  {
    swift_release(v2[62]);
    v4 = v2[46];
    v5 = v2[47];
    v6 = sub_10003ACA8;
  }
  return swift_task_switch(v6, v4, v5);
}

unint64_t sub_10003ACA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 456);
    v6 = *(_QWORD *)(v0 + 328);
    v5 = *(_QWORD *)(v0 + 336);
    v7 = *(_QWORD *)(v0 + 320);
    v9 = *(_QWORD *)(v0 + 288);
    v8 = *(_QWORD *)(v0 + 296);
    v24 = *(_QWORD *)(v0 + 280);
    v25 = *(_QWORD *)(v0 + 256);
    v26 = *(_QWORD *)(v0 + 248);
    v27 = *(_QWORD *)(v0 + 240);
    v28 = *(_QWORD *)(v0 + 208);
    v29 = *(_QWORD *)(v0 + 184);
    swift_release(*(_QWORD *)(v0 + 352));
    swift_release(v4);
    sub_100022238((_QWORD *)(v0 + 56));
    sub_100022238((_QWORD *)(v0 + 16));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v1);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v11 = *(_QWORD *)(v0 + 456);
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 208), v1, v2);
  result = StoredPhoto.localIdentifier.getter(v12);
  if (*(_QWORD *)(v11 + 16))
  {
    result = sub_10004A3F8(*(_QWORD *)(v0 + 320));
    if ((v13 & 1) != 0)
    {
      v14 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
      v15 = *(_QWORD *)(v0 + 320);
      v16 = *(_QWORD *)(v0 + 304);
      v17 = *(_QWORD *)(v0 + 200);
      v30 = *(_QWORD *)(v0 + 208);
      v19 = *(char **)(v0 + 184);
      v18 = *(_QWORD *)(v0 + 192);
      v20 = *(_QWORD *)(v0 + 176);
      v21 = *(int **)(v0 + 136);
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 456) + 56) + 8 * result);
      swift_bridgeObjectRetain(v22);
      v14(v15, v16);
      *(_QWORD *)v19 = v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(&v19[*(int *)(v20 + 48)], v30, v18);
      v31 = (uint64_t (*)(_QWORD))((char *)v21 + *v21);
      v23 = (_QWORD *)swift_task_alloc(v21[1]);
      *(_QWORD *)(v0 + 512) = v23;
      *v23 = v0;
      v23[1] = sub_10003AED4;
      return v31(*(_QWORD *)(v0 + 184));
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10003AED4()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = (*v1)[64];
  (*v1)[65] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[57];
    sub_10000EA70(v2[23], &qword_1000B31F8);
    swift_release(v4);
    v5 = v2[46];
    v6 = v2[47];
    v7 = sub_10003E494;
  }
  else
  {
    sub_10000EA70(v2[23], &qword_1000B31F8);
    v5 = v2[46];
    v6 = v2[47];
    v7 = sub_10003AF64;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_10003AF64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(v0[25] + 8))(v0[26], v0[24]);
  v2 = v0[45];
  v3 = static CommunicationActor.shared.getter(v1);
  v0[62] = v3;
  v4 = v0[10];
  v5 = v0[11];
  sub_10003D6F0((uint64_t)(v0 + 7), v4);
  v6 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[63] = v6;
  *v6 = v0;
  v6[1] = sub_10003AC2C;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[27], v3, v2, v0 + 12, v4, v5);
}

uint64_t sub_10003B01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5[20] = a4;
  v5[21] = a5;
  v5[18] = a2;
  v5[19] = a3;
  v5[17] = a1;
  v6 = sub_10000629C(&qword_1000B31F8);
  v5[22] = v6;
  v5[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for StoredPhoto(0);
  v5[24] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[25] = v8;
  v5[26] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000629C(&qword_1000B31D0);
  v5[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AlbumID(0);
  v5[28] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[29] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[30] = swift_task_alloc(v12);
  v5[31] = swift_task_alloc(v12);
  v5[32] = swift_task_alloc(v12);
  v13 = type metadata accessor for Logger(0);
  v5[33] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[34] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[35] = swift_task_alloc(v15);
  v5[36] = swift_task_alloc(v15);
  v5[37] = swift_task_alloc(v15);
  v16 = type metadata accessor for UUID(0);
  v5[38] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[39] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[40] = swift_task_alloc(v18);
  v5[41] = swift_task_alloc(v18);
  v5[42] = swift_task_alloc(v18);
  v19 = type metadata accessor for CommunicationActor(0);
  v5[43] = v19;
  v5[44] = static CommunicationActor.shared.getter(v19);
  v20 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v5[45] = v20;
  v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, v20);
  v5[46] = v21;
  v5[47] = v22;
  return swift_task_switch(sub_10003B1FC, v21, v22);
}

uint64_t sub_10003B1FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[28];
  v2 = sub_100009174(&qword_1000B29F0, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
  v0[48] = v2;
  dispatch thunk of PhotosFaceID.id.getter(v1, v2);
  v3 = type metadata accessor for AlbumDatabase(0);
  v0[49] = v3;
  v4 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
  v0[50] = v4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)[1]);
  v0[51] = v5;
  *v5 = v0;
  v5[1] = sub_10003B2D4;
  return dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)(v0[42], v3, v4);
}

uint64_t sub_10003B2D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 408);
  v3[52] = a1;
  v3[53] = v1;
  swift_task_dealloc(v4);
  v5 = v3[42];
  v6 = v3[38];
  v7 = *(void (**)(uint64_t, uint64_t))(v3[39] + 8);
  if (v1)
  {
    v7(v5, v6);
    v8 = v3[46];
    v9 = v3[47];
    v10 = sub_10003B964;
  }
  else
  {
    v3[54] = v7;
    v7(v5, v6);
    v8 = v3[46];
    v9 = v3[47];
    v10 = sub_10003B358;
  }
  return swift_task_switch(v10, v8, v9);
}

uint64_t sub_10003B358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  NSObject *log;
  os_log_type_t type;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81[2];

  v2 = *(_QWORD *)(v1 + 416);
  v3 = *(_QWORD *)(v1 + 256);
  v4 = *(_QWORD *)(v1 + 224);
  v5 = *(_QWORD *)(v1 + 232);
  v6 = *(_QWORD *)(v1 + 160);
  static Log.default.getter(a1);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v7(v3, v6, v4);
  v8 = swift_bridgeObjectRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v7;
  if (os_log_type_enabled(v9, v10))
  {
    log = v9;
    v11 = *(_QWORD *)(v1 + 416);
    v12 = *(_QWORD *)(v1 + 424);
    v70 = *(_QWORD *)(v1 + 272);
    v72 = *(_QWORD *)(v1 + 264);
    v74 = *(_QWORD *)(v1 + 296);
    type = v10;
    v14 = *(_QWORD *)(v1 + 248);
    v13 = *(_QWORD *)(v1 + 256);
    v15 = *(_QWORD *)(v1 + 224);
    v16 = *(_QWORD *)(v1 + 232);
    v17 = swift_slowAlloc(22, -1);
    v67 = swift_slowAlloc(64, -1);
    v81[0] = v67;
    *(_DWORD *)v17 = 136315394;
    v7(v14, v13, v15);
    v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v18(v13, v15);
    v19 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v15, v19);
    v22 = v21;
    v79 = v18;
    v18(v14, v15);
    *(_QWORD *)(v1 + 120) = sub_100021438(v20, v22, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v17 + 12) = 2080;
    v23 = sub_10003CD54(v11);
    v24 = sub_10000629C(&qword_1000B2A58);
    v25 = Dictionary.description.getter(v23, &type metadata for Int, v24, &protocol witness table for Int);
    v27 = v26;
    swift_release(v23);
    *(_QWORD *)(v1 + 128) = sub_100021438(v25, v27, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Before processing, photos for %s: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v28 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
    v28(v74, v72);
  }
  else
  {
    v29 = *(_QWORD *)(v1 + 416);
    v30 = *(_QWORD *)(v1 + 296);
    v31 = *(_QWORD *)(v1 + 264);
    v32 = *(_QWORD *)(v1 + 272);
    v79 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 232) + 8);
    v79(*(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 224));
    swift_bridgeObjectRelease_n(v29, 2);

    v28 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v28(v30, v31);
    v12 = *(_QWORD *)(v1 + 424);
  }
  *(_QWORD *)(v1 + 440) = v28;
  v33 = sub_10001A964(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 168));
  if (v12)
  {
    swift_release(*(_QWORD *)(v1 + 352));
    v34 = *(_QWORD *)(v1 + 328);
    v35 = *(_QWORD *)(v1 + 320);
    v37 = *(_QWORD *)(v1 + 288);
    v36 = *(_QWORD *)(v1 + 296);
    v38 = *(_QWORD *)(v1 + 280);
    v40 = *(_QWORD *)(v1 + 248);
    v39 = *(_QWORD *)(v1 + 256);
    v41 = *(_QWORD *)(v1 + 240);
    v75 = *(_QWORD *)(v1 + 216);
    v78 = *(_QWORD *)(v1 + 208);
    v80 = *(_QWORD *)(v1 + 184);
    swift_task_dealloc(*(_QWORD *)(v1 + 336));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v75);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v43 = (uint64_t)v33;
    v44 = *(_QWORD *)(v1 + 240);
    v45 = *(_QWORD *)(v1 + 224);
    v46 = *(_QWORD *)(v1 + 160);
    *(_QWORD *)(v1 + 448) = sub_100023AD4((uint64_t)v33);
    v47 = sub_100023C40(v43);
    swift_bridgeObjectRelease(v43);
    v48 = sub_10003D7C8(v47);
    swift_bridgeObjectRelease(v47);
    *(_QWORD *)(v1 + 456) = sub_10003CAC8(v48);
    v49 = swift_bridgeObjectRelease(v48);
    static Log.default.getter(v49);
    v50 = v77(v44, v46, v45);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.debug.getter();
    v53 = os_log_type_enabled(v51, v52);
    v54 = *(_QWORD *)(v1 + 288);
    v55 = *(_QWORD *)(v1 + 264);
    if (v53)
    {
      v73 = *(_QWORD *)(v1 + 264);
      v76 = *(_QWORD *)(v1 + 288);
      v57 = *(_QWORD *)(v1 + 240);
      v56 = *(_QWORD *)(v1 + 248);
      v58 = *(_QWORD *)(v1 + 224);
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v81[0] = v71;
      *(_DWORD *)v59 = 136315138;
      v77(v56, v57, v58);
      v79(v57, v58);
      v60 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
      v61 = dispatch thunk of CustomStringConvertible.description.getter(v58, v60);
      v63 = v62;
      v79(v56, v58);
      *(_QWORD *)(v1 + 112) = sub_100021438(v61, v63, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v59 + 4, v59 + 12);
      swift_bridgeObjectRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Clearing photos for id: %s", v59, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      v65 = v73;
      v64 = v76;
    }
    else
    {
      v79(*(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 224));

      v64 = v54;
      v65 = v55;
    }
    v28(v64, v65);
    dispatch thunk of PhotosFaceID.id.getter(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 384));
    v66 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
    *(_QWORD *)(v1 + 464) = v66;
    *v66 = v1;
    v66[1] = sub_10003BA40;
    return dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v1 + 328), *(_QWORD *)(v1 + 392), *(_QWORD *)(v1 + 400));
  }
}

uint64_t sub_10003B964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 352));
  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003BA40()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 464);
  *(_QWORD *)(*v1 + 472) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 448);
    v5 = *(_QWORD *)(v2 + 456);
    (*(void (**)(_QWORD, _QWORD))(v2 + 432))(*(_QWORD *)(v2 + 328), *(_QWORD *)(v2 + 304));
    swift_bridgeObjectRelease(v4);
    swift_release(v5);
    v6 = *(_QWORD *)(v2 + 368);
    v7 = *(_QWORD *)(v2 + 376);
    v8 = sub_10003BD10;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 432))(*(_QWORD *)(v2 + 328), *(_QWORD *)(v2 + 304));
    v6 = *(_QWORD *)(v2 + 368);
    v7 = *(_QWORD *)(v2 + 376);
    v8 = sub_10003BAE0;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_10003BAE0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  int *v26;
  uint64_t v27;

  v2 = v1[56];
  static Log.default.getter(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v1[56];
    v7 = v1[38];
    v24 = v1[35];
    v25 = (void (*)(uint64_t, uint64_t))v1[55];
    v23 = v1[33];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v27 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = swift_bridgeObjectRetain(v6);
    v11 = Array.description.getter(v10, v7);
    v13 = v12;
    swift_bridgeObjectRelease(v6);
    v1[13] = sub_100021438(v11, v13, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 13, v1 + 14, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Processing photos: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v25(v24, v23);
  }
  else
  {
    v14 = (void (*)(uint64_t, uint64_t))v1[55];
    v15 = v1[35];
    v16 = v1[33];
    swift_bridgeObjectRelease_n(v1[56], 2);

    v14(v15, v16);
  }
  v17 = (_QWORD *)v1[19];
  v18 = v17[8];
  v19 = v17[9];
  sub_10003D4FC(v17 + 5, v18);
  v20 = *(int **)(v19 + 16);
  v26 = (int *)((char *)v20 + *v20);
  v21 = (_QWORD *)swift_task_alloc(v20[1]);
  v1[60] = v21;
  *v21 = v1;
  v21[1] = sub_10003BDEC;
  return ((uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v26)(v1 + 2, v1[56], v18, v19);
}

uint64_t sub_10003BD10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 352));
  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003BDEC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[57];
    swift_bridgeObjectRelease(v2[56]);
    swift_release(v4);
    v5 = v2[46];
    v6 = v2[47];
    v7 = sub_10003BFC0;
  }
  else
  {
    swift_bridgeObjectRelease(v2[56]);
    v5 = v2[46];
    v6 = v2[47];
    v7 = sub_10003BE68;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_10003BE68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[5];
  v2 = v0[6];
  v3 = sub_10003D4FC(v0 + 2, v1);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v5, v3, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v0[10] = AssociatedTypeWitness;
  v0[11] = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  sub_10003D62C(v0 + 7);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  v7 = swift_task_dealloc(v5);
  v8 = v0[45];
  v9 = static CommunicationActor.shared.getter(v7);
  v0[62] = v9;
  v10 = v0[10];
  v11 = v0[11];
  sub_10003D6F0((uint64_t)(v0 + 7), v10);
  v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[63] = v12;
  *v12 = v0;
  v12[1] = sub_10003C09C;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[27], v9, v8, v0 + 12, v10, v11);
}

uint64_t sub_10003BFC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 352));
  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C09C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 504));
  if (v0)
  {
    v3 = v2[57];
    swift_release(v2[62]);
    swift_release(v3);
    v4 = v2[46];
    v5 = v2[47];
    v6 = sub_10003C344;
  }
  else
  {
    swift_release(v2[62]);
    v4 = v2[46];
    v5 = v2[47];
    v6 = sub_10003C118;
  }
  return swift_task_switch(v6, v4, v5);
}

unint64_t sub_10003C118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 456);
    v6 = *(_QWORD *)(v0 + 328);
    v5 = *(_QWORD *)(v0 + 336);
    v7 = *(_QWORD *)(v0 + 320);
    v9 = *(_QWORD *)(v0 + 288);
    v8 = *(_QWORD *)(v0 + 296);
    v24 = *(_QWORD *)(v0 + 280);
    v25 = *(_QWORD *)(v0 + 256);
    v26 = *(_QWORD *)(v0 + 248);
    v27 = *(_QWORD *)(v0 + 240);
    v28 = *(_QWORD *)(v0 + 208);
    v29 = *(_QWORD *)(v0 + 184);
    swift_release(*(_QWORD *)(v0 + 352));
    swift_release(v4);
    sub_100022238((_QWORD *)(v0 + 56));
    sub_100022238((_QWORD *)(v0 + 16));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v1);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v11 = *(_QWORD *)(v0 + 456);
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 208), v1, v2);
  result = StoredPhoto.localIdentifier.getter(v12);
  if (*(_QWORD *)(v11 + 16))
  {
    result = sub_10004A3F8(*(_QWORD *)(v0 + 320));
    if ((v13 & 1) != 0)
    {
      v14 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
      v15 = *(_QWORD *)(v0 + 320);
      v16 = *(_QWORD *)(v0 + 304);
      v17 = *(_QWORD *)(v0 + 200);
      v30 = *(_QWORD *)(v0 + 208);
      v19 = *(char **)(v0 + 184);
      v18 = *(_QWORD *)(v0 + 192);
      v20 = *(_QWORD *)(v0 + 176);
      v21 = *(int **)(v0 + 136);
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 456) + 56) + 8 * result);
      swift_bridgeObjectRetain(v22);
      v14(v15, v16);
      *(_QWORD *)v19 = v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(&v19[*(int *)(v20 + 48)], v30, v18);
      v31 = (uint64_t (*)(_QWORD))((char *)v21 + *v21);
      v23 = (_QWORD *)swift_task_alloc(v21[1]);
      *(_QWORD *)(v0 + 512) = v23;
      *v23 = v0;
      v23[1] = sub_10003C438;
      return v31(*(_QWORD *)(v0 + 184));
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10003C344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 352));
  sub_100022238((_QWORD *)(v0 + 56));
  sub_100022238((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C438()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = (*v1)[64];
  (*v1)[65] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[57];
    sub_10000EA70(v2[23], &qword_1000B31F8);
    swift_release(v4);
    v5 = v2[46];
    v6 = v2[47];
    v7 = sub_10003C580;
  }
  else
  {
    sub_10000EA70(v2[23], &qword_1000B31F8);
    v5 = v2[46];
    v6 = v2[47];
    v7 = sub_10003C4C8;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_10003C4C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(v0[25] + 8))(v0[26], v0[24]);
  v2 = v0[45];
  v3 = static CommunicationActor.shared.getter(v1);
  v0[62] = v3;
  v4 = v0[10];
  v5 = v0[11];
  sub_10003D6F0((uint64_t)(v0 + 7), v4);
  v6 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[63] = v6;
  *v6 = v0;
  v6[1] = sub_10003C09C;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[27], v3, v2, v0 + 12, v4, v5);
}

uint64_t sub_10003C580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 352));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100022238((_QWORD *)(v0 + 56));
  sub_100022238((_QWORD *)(v0 + 16));
  v4 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 296);
  v8 = *(_QWORD *)(v0 + 280);
  v10 = *(_QWORD *)(v0 + 248);
  v9 = *(_QWORD *)(v0 + 256);
  v11 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C68C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1000B3114);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10003C6E8;
  v2[2] = v0;
  return swift_task_switch(sub_100024678, 0, 0);
}

uint64_t sub_10003C6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v8;

  v8 = *v3;
  swift_task_dealloc(*(_QWORD *)(*v3 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, a2, a3);
}

uint64_t sub_10003C750(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10004A3F8(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10004D310();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_10003C828(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

unint64_t sub_10003C828(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_QWORD *)(v26 + 8 * a1);
            v28 = (_QWORD *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10003CAC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t i;
  BOOL v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;

  v2 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v2 - 8);
  v35 = v2;
  __chkstk_darwin(v2);
  v32 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000629C(&qword_1000B3228);
  result = static _DictionaryStorage.copy(original:)(a1);
  v5 = result;
  v6 = 0;
  v36 = a1;
  v9 = *(_QWORD *)(a1 + 64);
  v8 = a1 + 64;
  v7 = v9;
  v10 = 1 << *(_BYTE *)(v8 - 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v7;
  v29 = v8;
  v30 = (unint64_t)(v10 + 63) >> 6;
  v31 = result + 64;
  v33 = result;
  v14 = v34;
  v13 = v35;
  v15 = v32;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v37 = (v12 - 1) & v12;
  v38 = v6;
  for (i = __clz(__rbit64(v12)) | (v6 << 6); ; i = __clz(__rbit64(v19)) + (v18 << 6))
  {
    v21 = v36;
    v22 = *(_QWORD *)(v14 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(_QWORD *)(v36 + 48) + v22, v13);
    v23 = 8 * i;
    v24 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * i);
    v25 = swift_bridgeObjectRetain(v24);
    v26 = sub_1000238F4(v25);
    swift_bridgeObjectRelease(v24);
    *(_QWORD *)(v31 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v5 = v33;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(_QWORD *)(v33 + 48) + v22, v15, v13);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23) = v26;
    v27 = *(_QWORD *)(v5 + 16);
    v17 = __OFADD__(v27, 1);
    v28 = v27 + 1;
    if (v17)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    *(_QWORD *)(v5 + 16) = v28;
    v12 = v37;
    v6 = v38;
    if (v37)
      goto LABEL_4;
LABEL_5:
    v17 = __OFADD__(v6, 1);
    v18 = v6 + 1;
    if (v17)
      goto LABEL_25;
    if (v18 >= v30)
      return v5;
    v19 = *(_QWORD *)(v29 + 8 * v18);
    if (!v19)
      break;
LABEL_15:
    v37 = (v19 - 1) & v19;
    v38 = v18;
  }
  v20 = v18 + 1;
  if (v18 + 1 >= v30)
    return v5;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_14;
  v20 = v18 + 2;
  if (v18 + 2 >= v30)
    return v5;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_14;
  v20 = v18 + 3;
  if (v18 + 3 >= v30)
    return v5;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
  {
LABEL_14:
    v18 = v20;
    goto LABEL_15;
  }
  while (1)
  {
    v18 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v18 >= v30)
      return v5;
    v19 = *(_QWORD *)(v29 + 8 * v18);
    ++v20;
    if (v19)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

_QWORD *sub_10003CD54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *result;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  unint64_t *v46;

  v45 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000629C(&qword_1000B2B40);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)(a1);
  v6 = 0;
  v38 = a1;
  v9 = *(_QWORD *)(a1 + 64);
  v8 = a1 + 64;
  v7 = v9;
  v10 = 1 << *(_BYTE *)(v8 - 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v7;
  v35 = v8;
  v36 = (unint64_t)(v10 + 63) >> 6;
  v37 = result + 8;
  v34 = result;
  if ((v11 & v7) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v13 | (v6 << 6); ; i = __clz(__rbit64(v16)) + (v6 << 6))
  {
    v18 = 8 * i;
    v19 = *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * i);
    v20 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * i);
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v40 = *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * i);
      v41 = 8 * i;
      v42 = i;
      v43 = v12;
      v44 = v6;
      v46 = (unint64_t *)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v20);
      sub_10004D740(0, v21, 0);
      v22 = v46;
      v23 = type metadata accessor for StoredPhoto(0);
      v24 = *(_QWORD *)(v23 - 8);
      v25 = *(unsigned __int8 *)(v24 + 80);
      v39 = v20;
      v26 = v20 + ((v25 + 32) & ~v25);
      v27 = *(_QWORD *)(v24 + 72);
      do
      {
        StoredPhoto.localIdentifier.getter(v23);
        v46 = v22;
        v29 = v22[2];
        v28 = v22[3];
        if (v29 >= v28 >> 1)
        {
          sub_10004D740(v28 > 1, v29 + 1, 1);
          v22 = v46;
        }
        v22[2] = v29 + 1;
        v23 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))((unint64_t)v22+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v29, v4, v45);
        v26 += v27;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease(v39);
      result = v34;
      v12 = v43;
      v6 = v44;
      v18 = v41;
      i = v42;
      v19 = v40;
    }
    else
    {
      v22 = (unint64_t *)&_swiftEmptyArrayStorage;
    }
    *(_QWORD *)((char *)v37 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(result[6] + v18) = v19;
    *(_QWORD *)(result[7] + v18) = v22;
    v30 = result[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    result[2] = v32;
    if (v12)
      goto LABEL_4;
LABEL_5:
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_31;
    if (v15 >= v36)
      return result;
    v16 = *(_QWORD *)(v35 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v36)
        return result;
      v16 = *(_QWORD *)(v35 + 8 * v6);
      if (!v16)
      {
        v6 = v15 + 2;
        if (v15 + 2 >= v36)
          return result;
        v16 = *(_QWORD *)(v35 + 8 * v6);
        if (!v16)
          break;
      }
    }
LABEL_18:
    v12 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v36)
    return result;
  v16 = *(_QWORD *)(v35 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v36)
      return result;
    v16 = *(_QWORD *)(v35 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10003D074()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  id v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;

  v23 = type metadata accessor for ShuffleID(0);
  v0 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(PHPhotoLibrary), "sharedPhotoLibrary");
  v4 = objc_msgSend(objc_allocWithZone((Class)PFCShuffleGenerator), "initWithPhotoLibrary:targetShuffleSize:", v3, static TestProperties.targetGalleryShuffleSize.getter());

  v5 = objc_msgSend(v4, "shuffles");
  v6 = sub_10003DC18();
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if (!((unint64_t)v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    v11 = (unint64_t *)&_swiftEmptyArrayStorage;
LABEL_17:
    v20 = sub_1000549E4((uint64_t)v11);

    swift_bridgeObjectRelease(v11);
    return v20;
  }
  if (v7 < 0)
    v19 = v7;
  else
    v19 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v7);
  if (!v8)
    goto LABEL_16;
LABEL_3:
  v24 = (unint64_t *)&_swiftEmptyArrayStorage;
  result = sub_10004D76C(0, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v10 = 0;
    v11 = v24;
    v21 = v4;
    v22 = v7 & 0xC000000000000001;
    v12 = v7;
    do
    {
      if (v22)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
      else
        v13 = *(id *)(v7 + 8 * v10 + 32);
      v14 = v13;
      v15 = objc_msgSend(v13, "people", v21);
      v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      ShuffleID.init(people:pets:nature:cityscape:)(v16, objc_msgSend(v14, "pets"), objc_msgSend(v14, "nature"), objc_msgSend(v14, "cityscape"));
      v24 = v11;
      v18 = v11[2];
      v17 = v11[3];
      if (v18 >= v17 >> 1)
      {
        sub_10004D76C(v17 > 1, v18 + 1, 1);
        v11 = v24;
      }
      ++v10;
      v11[2] = v18 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v0 + 32))((unint64_t)v11+ ((*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80))+ *(_QWORD *)(v0 + 72) * v18, v2, v23);
      v7 = v12;
    }
    while (v8 != v10);
    swift_bridgeObjectRelease(v12);
    v4 = v21;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_10003D358(uint64_t a1)
{
  uint64_t v1;

  return sub_1000241B0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10003D360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Message(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003D3DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Message(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1000B3174);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10003E42C;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_100023F70, 0, 0);
}

uint64_t sub_10003D458()
{
  return sub_10003DFEC((uint64_t (*)(_QWORD))&type metadata accessor for ShuffleID);
}

uint64_t sub_10003D464(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for ShuffleID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc(dword_1000B3184);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003E42C;
  return sub_1000385F8(a1, v6, v7, v8);
}

_QWORD *sub_10003D4FC(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10003D520()
{
  return sub_10003E120((uint64_t (*)(_QWORD))&type metadata accessor for ShuffleID);
}

uint64_t sub_10003D52C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for ShuffleID(0) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (char *)v1 + v6;
  v13 = *(int **)((char *)v1 + v6);
  v14 = *((_QWORD *)v12 + 1);
  v15 = (uint64_t)v1 + v8;
  v16 = (_QWORD *)swift_task_alloc(dword_1000B31AC);
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_10003E42C;
  return sub_100035AB4(a1, v9, v10, v11, (uint64_t)v1 + v5, v13, v14, v15);
}

_QWORD *sub_10003D62C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_10003D66C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FetchFaceRequest(0) - 8) + 80);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = v2 + ((v6 + 24) & ~v6);
  v9 = (_QWORD *)swift_task_alloc(dword_1000B31C4);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_10003E42C;
  return sub_10002E928(a1, a2, v7, v8);
}

uint64_t sub_10003D6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10003D718()
{
  return sub_10003DFEC((uint64_t (*)(_QWORD))&type metadata accessor for ShuffleID);
}

uint64_t sub_10003D724(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = *(_QWORD *)(type metadata accessor for ShuffleID(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = v2 + v7;
  v10 = *(_QWORD *)(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_1000B3214);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_10003E42C;
  return sub_100038C64(a1, a2, v8, v9, v10);
}

uint64_t sub_10003D7C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(uint64_t, char *, uint64_t);
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;

  v2 = type metadata accessor for UUID(0);
  v67 = *(_QWORD *)(v2 - 8);
  v68 = v2;
  __chkstk_darwin(v2);
  v69 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_10000629C(&qword_1000B25D8);
  v4 = __chkstk_darwin(v64);
  v61 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v63 = (uint64_t *)((char *)&v55 - v7);
  v8 = __chkstk_darwin(v6);
  v62 = (uint64_t *)((char *)&v55 - v9);
  __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v55 - v11);
  v13 = &_swiftEmptyDictionarySingleton;
  v70 = &_swiftEmptyDictionarySingleton;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return (uint64_t)v13;
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = a1 + v16;
  v18 = *(_QWORD *)(v10 + 72);
  v60 = v16;
  v57 = v15 | 7;
  v58 = v18 + v16;
  v56 = xmmword_100096430;
  v59 = v18;
  v19 = v68;
  while (1)
  {
    v65 = v17;
    v66 = v14;
    sub_10003DB88(v17, (uint64_t)v12);
    v23 = v64;
    v24 = *(int *)(v64 + 48);
    v25 = (char *)v62;
    v26 = (char *)v62 + v24;
    v27 = (uint64_t)v12;
    v28 = *v12;
    *v62 = *v12;
    v29 = v67;
    v30 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
    v30(&v25[v24], (char *)v12 + v24, v19);
    v31 = *(int *)(v23 + 48);
    v32 = (uint64_t)v63;
    v33 = (char *)v63 + v31;
    *v63 = v28;
    v34 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 32);
    v34(v32 + v31, v26, v19);
    v35 = (uint64_t)v69;
    v30(v69, v33, v19);
    sub_10000EA70(v32, &qword_1000B25D8);
    v37 = sub_10004A3F8(v35);
    v38 = v13[2];
    v39 = (v36 & 1) == 0;
    v40 = v38 + v39;
    if (__OFADD__(v38, v39))
      break;
    v41 = v36;
    v12 = (uint64_t *)v27;
    if (v13[3] < v40)
    {
      sub_10004B810(v40, 1);
      v13 = v70;
      v42 = sub_10004A3F8((uint64_t)v69);
      if ((v41 & 1) != (v43 & 1))
        goto LABEL_19;
      v37 = v42;
    }
    if ((v41 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v68);
      v13 = v70;
      v44 = v70[7];
      sub_10003DBD0(v27, v61);
      v45 = *(_QWORD *)(v44 + 8 * v37);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
      *(_QWORD *)(v44 + 8 * v37) = v45;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v45 = sub_1000915D8(0, *(_QWORD *)(v45 + 16) + 1, 1, v45);
        *(_QWORD *)(v44 + 8 * v37) = v45;
      }
      v48 = *(_QWORD *)(v45 + 16);
      v47 = *(_QWORD *)(v45 + 24);
      if (v48 >= v47 >> 1)
      {
        v45 = sub_1000915D8(v47 > 1, v48 + 1, 1, v45);
        *(_QWORD *)(v44 + 8 * v37) = v45;
      }
      v20 = v65;
      v21 = v66;
      *(_QWORD *)(v45 + 16) = v48 + 1;
      v22 = v59;
      sub_10003DBD0(v61, v45 + v60 + v48 * v59);
    }
    else
    {
      v49 = sub_10000629C(&qword_1000B3230);
      v50 = swift_allocObject(v49, v58, v57);
      *(_OWORD *)(v50 + 16) = v56;
      sub_10003DBD0(v27, v50 + v60);
      v13[(v37 >> 6) + 8] |= 1 << v37;
      v34(v13[6] + *(_QWORD *)(v67 + 72) * v37, v69, v68);
      *(_QWORD *)(v13[7] + 8 * v37) = v50;
      v51 = v13[2];
      v52 = __OFADD__(v51, 1);
      v53 = v51 + 1;
      if (v52)
        goto LABEL_18;
      v13[2] = v53;
      v20 = v65;
      v21 = v66;
      v22 = v59;
    }
    v17 = v20 + v22;
    v14 = v21 - 1;
    if (!v14)
      return (uint64_t)v13;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v68);
  __break(1u);
  return result;
}

uint64_t sub_10003DB88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000629C(&qword_1000B25D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003DBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000629C(&qword_1000B25D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10003DC18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B3238;
  if (!qword_1000B3238)
  {
    v1 = objc_opt_self(PFCShuffle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_1000B3238);
  }
  return result;
}

uint64_t sub_10003DC54()
{
  return sub_10003DFEC((uint64_t (*)(_QWORD))&type metadata accessor for ShuffleID);
}

uint64_t sub_10003DC60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for ShuffleID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc(dword_1000B324C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003E42C;
  return sub_10003881C(a1, v6, v7, v8);
}

uint64_t sub_10003DCF8()
{
  return sub_10003DFEC((uint64_t (*)(_QWORD))&type metadata accessor for ShuffleID);
}

uint64_t sub_10003DD04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = *(_QWORD *)(type metadata accessor for ShuffleID(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = v2 + v7;
  v10 = *(_QWORD *)(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_1000B3264);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_10003E42C;
  return sub_100039E40(a1, a2, v8, v9, v10);
}

uint64_t sub_10003DDA8()
{
  return sub_10003E120((uint64_t (*)(_QWORD))&type metadata accessor for ShuffleID);
}

uint64_t sub_10003DDB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for ShuffleID(0) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (char *)v1 + v6;
  v13 = *(int **)((char *)v1 + v6);
  v14 = *((_QWORD *)v12 + 1);
  v15 = (uint64_t)v1 + v8;
  v16 = (_QWORD *)swift_task_alloc(dword_1000B327C);
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_10003E42C;
  return sub_1000367F8(a1, v9, v10, v11, (uint64_t)v1 + v5, v13, v14, v15);
}

uint64_t sub_10003DEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FetchFaceRequest(0) - 8) + 80);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = v2 + ((v6 + 24) & ~v6);
  v9 = (_QWORD *)swift_task_alloc(dword_1000B328C);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_10003E42C;
  return sub_10002FEC4(a1, a2, v7, v8);
}

uint64_t sub_10003DF3C()
{
  return sub_10003DFEC((uint64_t (*)(_QWORD))&type metadata accessor for AlbumID);
}

uint64_t sub_10003DF48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for AlbumID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc(dword_1000B32B4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003E42C;
  return sub_100038A40(a1, v6, v7, v8);
}

uint64_t sub_10003DFE0()
{
  return sub_10003DFEC((uint64_t (*)(_QWORD))&type metadata accessor for AlbumID);
}

uint64_t sub_10003DFEC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = v4 | 7;
  v7 = ((*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v7, v6);
}

uint64_t sub_10003E070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = *(_QWORD *)(type metadata accessor for AlbumID(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = v2 + v7;
  v10 = *(_QWORD *)(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_1000B32CC);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_10003E42C;
  return sub_10003B01C(a1, a2, v8, v9, v10);
}

uint64_t sub_10003E114()
{
  return sub_10003E120((uint64_t (*)(_QWORD))&type metadata accessor for AlbumID);
}

uint64_t sub_10003E120(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = (*(_QWORD *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = a1(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v7 + v10 + 16) & ~v10;
  v14 = v5 | v10 | 7;
  v12 = (*(_QWORD *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1 + v6, v3);
  swift_release(*(_QWORD *)(v1 + v7 + 8));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1 + v11, v8);
  swift_release(*(_QWORD *)(v1 + v12));
  return swift_deallocObject(v1, v12 + 8, v14);
}

uint64_t sub_10003E220(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for AlbumID(0) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (char *)v1 + v6;
  v13 = *(int **)((char *)v1 + v6);
  v14 = *((_QWORD *)v12 + 1);
  v15 = (uint64_t)v1 + v8;
  v16 = (_QWORD *)swift_task_alloc(dword_1000B32E4);
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_100005B30;
  return sub_10003753C(a1, v9, v10, v11, (uint64_t)v1 + v5, v13, v14, v15);
}

uint64_t sub_10003E324()
{
  uint64_t v0;
  uint64_t FaceRequest;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  FaceRequest = type metadata accessor for FetchFaceRequest(0);
  v2 = *(_QWORD *)(FaceRequest - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, FaceRequest);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003E398(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FetchFaceRequest(0) - 8) + 80);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = v2 + ((v6 + 24) & ~v6);
  v9 = (_QWORD *)swift_task_alloc(dword_1000B32F4);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100005B30;
  return sub_100031084(a1, a2, v7, v8);
}

uint64_t sub_10003E43C(uint64_t a1)
{
  return sub_10001F09C(a1);
}

uint64_t sub_10003E498(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t);

  v3[2] = a1;
  v6 = sub_10000629C(&qword_1000B3130);
  v3[3] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[4] = v7;
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[5] = v8;
  v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v9 = (_QWORD *)swift_task_alloc(a3[1]);
  v3[6] = v9;
  *v9 = v3;
  v9[1] = sub_10003E540;
  return v11(v8, a2);
}

uint64_t sub_10003E540()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 48);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_task_dealloc(v2[5]);
  }
  else
  {
    v6 = v2[4];
    v5 = v2[5];
    v9 = v2 + 2;
    v8 = (_QWORD *)v2[2];
    v7 = v9[1];
    v8[3] = v7;
    v8[4] = sub_100006454(&qword_1000B3150, &qword_1000B3130, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
    v10 = sub_10003D62C(v8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 32))(v10, v5, v7);
    swift_task_dealloc(v5);
  }
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10003E5F0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v5 = *a2;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v6 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10003E42C;
  return v8(a1, v5);
}

uint64_t sub_10003E660(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003E698 + 4 * aG[a1]))(0x69727453646E6573, 0xEA0000000000676ELL);
}

uint64_t sub_10003E698()
{
  return 0x65746172656E6567;
}

uint64_t sub_10003E6BC()
{
  return 0x626C416B63617274;
}

uint64_t sub_10003E6D4()
{
  return 0x416B636172746E75;
}

uint64_t sub_10003E6F4()
{
  return 0x75626C41636E7973;
}

uint64_t sub_10003E70C()
{
  return 0x6C61476B63617274;
}

uint64_t sub_10003E72C()
{
  return 0x476B636172746E75;
}

uint64_t sub_10003E750()
{
  return 0x6C6C6147636E7973;
}

uint64_t sub_10003E774()
{
  return 0x536B636172746E75;
}

uint64_t sub_10003E798()
{
  return 0x66756853636E7973;
}

uint64_t sub_10003E7B8()
{
  return 0x7568536B63617274;
}

void sub_10003E7D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2
    && (sub_10000629C(&qword_1000B3570),
        v3 = static _DictionaryStorage.allocate(capacity:)(v2),
        v4 = (_QWORD *)v3,
        (v5 = *(_QWORD *)(a1 + 16)) != 0))
  {
    swift_retain(v3);
    v6 = (_QWORD *)(a1 + 40);
    while (1)
    {
      v7 = *((_BYTE *)v6 - 8);
      v8 = *v6;
      swift_bridgeObjectRetain(*v6);
      sub_10004A32C(v7);
      if ((v10 & 1) != 0)
        break;
      *(_QWORD *)((char *)v4 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
      *(_BYTE *)(v4[6] + v9) = v7;
      *(_QWORD *)(v4[7] + 8 * v9) = v8;
      v11 = v4[2];
      v12 = __OFADD__(v11, 1);
      v13 = v11 + 1;
      if (v12)
        goto LABEL_10;
      v4[2] = v13;
      v6 += 2;
      if (!--v5)
      {
        swift_release(v4);
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease(a1);
  }
}

unint64_t sub_10003E8D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10000629C(&qword_1000B3648);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_10000629C(&qword_1000B3580);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10001FB38(v13, (uint64_t)v5, &qword_1000B3648);
    result = sub_10004A3F8((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10003EA6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000629C(&qword_1000B3578);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_10004A464(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003EB84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000629C(&qword_1000B3490);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001FB38(v7, (uint64_t)&v16, &qword_1000B3498);
    v8 = v16;
    v9 = v17;
    result = sub_10004A464(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10004E3B0(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003ECB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000629C(&qword_1000B3470);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001FB38(v7, (uint64_t)&v14, &qword_1000B3478);
    v8 = v14;
    result = sub_10004A528(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_10004E3B0(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003EDE4(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return sub_10003EE34(a1, a2, a3, (uint64_t)&unk_1000AE6D8, (uint64_t)sub_10004ECC8);
}

uint64_t sub_10003EDF8(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return sub_10003EE34(a1, a2, a3, (uint64_t)&unk_1000AE728, (uint64_t)sub_10004EDC4);
}

uint64_t sub_10003EE0C(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return sub_10003EE34(a1, a2, a3, (uint64_t)&unk_1000AE778, (uint64_t)sub_10004EEC0);
}

uint64_t sub_10003EE20(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return sub_10003EE34(a1, a2, a3, (uint64_t)&unk_1000AE7C8, (uint64_t)sub_10004EFE0);
}

uint64_t sub_10003EE34(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[3];

  v8 = v5;
  v12 = type metadata accessor for Logger(0);
  v39 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = static Log.network.getter(v13);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v38 = a5;
    v19 = swift_slowAlloc(12, -1);
    v36 = a2;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v37 = a3;
    v22 = v21;
    v41[0] = v21;
    v34 = v12;
    *(_DWORD *)v20 = 136315138;
    v23 = sub_10003E660(a1);
    v35 = a4;
    v24 = a1;
    v26 = v25;
    v40 = sub_100021438(v23, v25, v41);
    a5 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v20 + 4, v20 + 12);
    v27 = v26;
    a1 = v24;
    a4 = v35;
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Registry: Registering request for %s.", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v28 = v22;
    a3 = v37;
    swift_slowDealloc(v28, -1, -1);
    v29 = v20;
    a2 = v36;
    swift_slowDealloc(v29, -1, -1);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v34);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v12);
  }
  v30 = swift_allocObject(a4, 32, 7);
  *(_QWORD *)(v30 + 16) = a2;
  *(_QWORD *)(v30 + 24) = a3;
  swift_beginAccess(v8 + 32, v41, 33, 0);
  swift_retain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v8 + 32));
  v40 = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v8 + 32) = 0x8000000000000000;
  sub_10004BEA0(a5, v30, a1, isUniquelyReferenced_nonNull_native);
  v32 = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v8 + 32) = v40;
  swift_bridgeObjectRelease(v32);
  return swift_endAccess(v41);
}

uint64_t sub_10003F098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a2;
  v8 = type metadata accessor for MessageBody(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000629C(&qword_1000B2A58);
  v13 = sub_10004EA74();
  result = MessageBody.deserialized<A>()(v12, v13);
  if (!v4)
  {
    v15 = type metadata accessor for CommunicationActor(0);
    v25 = static CommunicationActor.shared.getter(v15);
    v16 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v23 = v28;
    v24 = v16;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
    v17 = *(unsigned __int8 *)(v9 + 80);
    v18 = (v17 + 40) & ~v17;
    v19 = (char *)swift_allocObject(&unk_1000AE660, v18 + v10, v17 | 7);
    *((_QWORD *)v19 + 2) = v26;
    *((_QWORD *)v19 + 3) = a3;
    v20 = v23;
    *((_QWORD *)v19 + 4) = v23;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v19[v18], v11, v8);
    a4[3] = sub_10000629C(&qword_1000B3530);
    v27 = v8;
    a4[4] = swift_getOpaqueTypeConformance2(&v27, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
    sub_10003D62C(a4);
    swift_retain(a3);
    swift_bridgeObjectRetain(v20);
    v21 = v25;
    generateElements<A>(isolation:_:)(v25, v24, &unk_1000B3528, v19, v8);
    swift_release(v21);
    swift_release(v19);
    return swift_bridgeObjectRelease(v28);
  }
  return result;
}

uint64_t sub_10003F270@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v44 = a3;
  v45 = a7;
  v40 = a6;
  v41 = a2;
  v42 = a8;
  v43 = type metadata accessor for MessageBody(0);
  v12 = *(_QWORD *)(v43 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v43);
  v46 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a4(0);
  v47 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v47 + 64);
  v16 = __chkstk_darwin(v14);
  v17 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v36 - v19;
  result = MessageBody.deserialized<A>()(v18, a5);
  if (!v8)
  {
    v39 = 0;
    v22 = type metadata accessor for CommunicationActor(0);
    v38 = static CommunicationActor.shared.getter(v22);
    v37 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v23 = v47;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v17, v20, v14);
    v24 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v46, a1, v43);
    v25 = *(unsigned __int8 *)(v23 + 80);
    v26 = (v25 + 32) & ~v25;
    v27 = *(unsigned __int8 *)(v12 + 80);
    v28 = (v15 + v27 + v26) & ~v27;
    v29 = swift_allocObject(v40, v28 + v13, v25 | v27 | 7);
    v30 = v44;
    *(_QWORD *)(v29 + 16) = v41;
    *(_QWORD *)(v29 + 24) = v30;
    v31 = v29 + v26;
    v32 = v47;
    (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v31, v17, v14);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v29 + v28, v46, v24);
    v33 = sub_10000629C(&qword_1000B3530);
    v34 = v42;
    v42[3] = v33;
    v48 = v24;
    v34[4] = swift_getOpaqueTypeConformance2(&v48, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
    sub_10003D62C(v34);
    swift_retain(v30);
    v35 = v38;
    generateElements<A>(isolation:_:)(v38, v37, v45, v29, v24);
    swift_release(v35);
    swift_release(v29);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v20, v14);
  }
  return result;
}

uint64_t sub_10003F4D8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int *v18;

  v6[15] = a2;
  v6[16] = a6;
  v6[14] = a1;
  v9 = type metadata accessor for ProtocolVersion(0);
  v6[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for StoredPhoto(0);
  v6[18] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[19] = v11;
  v6[20] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MessageBody(0);
  v6[21] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[22] = v13;
  v6[23] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000629C(&qword_1000B31D0);
  v6[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[12] = a5;
  v15 = type metadata accessor for CommunicationActor(0);
  v6[25] = v15;
  v6[26] = static CommunicationActor.shared.getter(v15);
  v18 = (int *)((char *)a3 + *a3);
  v16 = (_QWORD *)swift_task_alloc(a3[1]);
  v6[27] = v16;
  *v16 = v6;
  v16[1] = sub_10003F614;
  return ((uint64_t (*)(_QWORD *, _QWORD *))v18)(v6 + 7, v6 + 12);
}

uint64_t sub_10003F614()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v3);
  v4 = v2[25];
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  if (v0)
  {
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
    v8 = v7;
    v9 = sub_10003F838;
    v10 = v6;
    v11 = v8;
  }
  else
  {
    v2[29] = v5;
    v12 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
    v11 = v13;
    v2[30] = v12;
    v2[31] = v13;
    v9 = sub_10003F6D4;
    v10 = v12;
  }
  return swift_task_switch(v9, v10, v11);
}

uint64_t sub_10003F6D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[10];
  v2 = v0[11];
  v3 = sub_10003D4FC(v0 + 7, v1);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v5, v3, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v0[5] = AssociatedTypeWitness;
  v0[6] = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  sub_10003D62C(v0 + 2);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  swift_task_dealloc(v5);
  v7 = sub_100022238(v0 + 7);
  v8 = v0[29];
  v9 = static CommunicationActor.shared.getter(v7);
  v0[32] = v9;
  v10 = v0[5];
  v11 = v0[6];
  sub_10003D6F0((uint64_t)(v0 + 2), v10);
  v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[33] = v12;
  *v12 = v0;
  v12[1] = sub_10003F89C;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[24], v9, v8, v0 + 13, v10, v11);
}

uint64_t sub_10003F838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 208));
  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003F89C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[32]);
  if (v0)
    v4 = sub_10003FAA4;
  else
    v4 = sub_10003F910;
  return swift_task_switch(v4, v2[30], v2[31]);
}

uint64_t sub_10003F910()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v15;
  _QWORD *v16;
  uint64_t (*v17)(_QWORD);

  v1 = v0[24];
  v2 = v0[18];
  v3 = v0[19];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = v0[23];
  v6 = v0[20];
  v7 = v0[17];
  if (v4 == 1)
  {
    swift_release(v0[26]);
    sub_100022238(v0 + 2);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  v9 = v0[34];
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v0[20], v1, v2);
  MessageBody.version.getter(v10);
  MessageBody.init<A>(serializable:version:)(v6, v7, v2, &protocol witness table for StoredPhoto);
  if (v9)
  {
    swift_release(v0[26]);
    sub_100022238(v0 + 2);
    v11 = v0[23];
    v12 = v0[20];
    v13 = v0[17];
    swift_task_dealloc(v0[24]);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  v15 = (int *)v0[14];
  v17 = (uint64_t (*)(_QWORD))((char *)v15 + *v15);
  v16 = (_QWORD *)swift_task_alloc(v15[1]);
  v0[35] = v16;
  *v16 = v0;
  v16[1] = sub_10003FB14;
  return v17(v0[23]);
}

uint64_t sub_10003FAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 208));
  sub_100022238((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003FB14()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[22] + 8))(v2[23], v2[21]);
  if (v0)
    v4 = sub_10003FC2C;
  else
    v4 = sub_10003FB84;
  return swift_task_switch(v4, v2[30], v2[31]);
}

uint64_t sub_10003FB84(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v1[29];
  v3 = static CommunicationActor.shared.getter(a1);
  v1[32] = v3;
  v4 = v1[5];
  v5 = v1[6];
  sub_10003D6F0((uint64_t)(v1 + 2), v4);
  v6 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v1[33] = v6;
  *v6 = v1;
  v6[1] = sub_10003F89C;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v1[24], v3, v2, v1 + 13, v4, v5);
}

uint64_t sub_10003FC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 208));
  sub_100022238((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003FC9C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int *v18;

  v6[14] = a2;
  v6[15] = a6;
  v6[13] = a1;
  v9 = type metadata accessor for ProtocolVersion(0);
  v6[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000629C(&qword_1000B25E0);
  v6[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[18] = v11;
  v6[19] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MessageBody(0);
  v6[20] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[21] = v13;
  v6[22] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000629C(&qword_1000B35E8);
  v6[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CommunicationActor(0);
  v6[24] = v15;
  v6[25] = static CommunicationActor.shared.getter(v15);
  v18 = (int *)((char *)a3 + *a3);
  v16 = (_QWORD *)swift_task_alloc(a3[1]);
  v6[26] = v16;
  *v16 = v6;
  v16[1] = sub_10003FDD4;
  return ((uint64_t (*)(_QWORD *, uint64_t))v18)(v6 + 7, a5);
}

uint64_t sub_10003FDD4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  v4 = v2[24];
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  if (v0)
  {
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
    v8 = v7;
    v9 = sub_10004F340;
    v10 = v6;
    v11 = v8;
  }
  else
  {
    v2[28] = v5;
    v12 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
    v11 = v13;
    v2[29] = v12;
    v2[30] = v13;
    v9 = sub_10003FE94;
    v10 = v12;
  }
  return swift_task_switch(v9, v10, v11);
}

uint64_t sub_10003FE94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[10];
  v2 = v0[11];
  v3 = sub_10003D4FC(v0 + 7, v1);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v5, v3, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v0[5] = AssociatedTypeWitness;
  v0[6] = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  sub_10003D62C(v0 + 2);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  swift_task_dealloc(v5);
  v7 = sub_100022238(v0 + 7);
  v8 = v0[28];
  v9 = static CommunicationActor.shared.getter(v7);
  v0[31] = v9;
  v10 = v0[5];
  v11 = v0[6];
  sub_10003D6F0((uint64_t)(v0 + 2), v10);
  v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[32] = v12;
  *v12 = v0;
  v12[1] = sub_10003FFF8;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[23], v9, v8, v0 + 12, v10, v11);
}

uint64_t sub_10003FFF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[31]);
  if (v0)
    v4 = sub_10004F364;
  else
    v4 = sub_10004006C;
  return swift_task_switch(v4, v2[29], v2[30]);
}

uint64_t sub_10004006C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v16;
  _QWORD *v17;
  uint64_t (*v18)(_QWORD);

  v1 = v0[23];
  v2 = v0[17];
  v3 = v0[18];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = v0[22];
  v6 = v0[19];
  v7 = v0[16];
  if (v4 == 1)
  {
    swift_release(v0[25]);
    sub_100022238(v0 + 2);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  v9 = v0[33];
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v0[19], v1, v2);
  MessageBody.version.getter(v10);
  v11 = sub_100006454(&qword_1000B35F0, &qword_1000B25E0, (uint64_t)&protocol conformance descriptor for SyncedPhotosFace<A>);
  MessageBody.init<A>(serializable:version:)(v6, v7, v2, v11);
  if (v9)
  {
    swift_release(v0[25]);
    sub_100022238(v0 + 2);
    v12 = v0[22];
    v13 = v0[19];
    v14 = v0[16];
    swift_task_dealloc(v0[23]);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  v16 = (int *)v0[13];
  v18 = (uint64_t (*)(_QWORD))((char *)v16 + *v16);
  v17 = (_QWORD *)swift_task_alloc(v16[1]);
  v0[34] = v17;
  *v17 = v0;
  v17[1] = sub_100040218;
  return v18(v0[22]);
}

uint64_t sub_100040218()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[21] + 8))(v2[22], v2[20]);
  if (v0)
    v4 = (uint64_t (*)(uint64_t))sub_10004F368;
  else
    v4 = sub_100040288;
  return swift_task_switch(v4, v2[29], v2[30]);
}

uint64_t sub_100040288(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v1[28];
  v3 = static CommunicationActor.shared.getter(a1);
  v1[31] = v3;
  v4 = v1[5];
  v5 = v1[6];
  sub_10003D6F0((uint64_t)(v1 + 2), v4);
  v6 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v1[32] = v6;
  *v6 = v1;
  v6[1] = sub_10003FFF8;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v1[23], v3, v2, v1 + 12, v4, v5);
}

uint64_t sub_100040330(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int *v18;

  v6[14] = a2;
  v6[15] = a6;
  v6[13] = a1;
  v9 = type metadata accessor for ProtocolVersion(0);
  v6[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for StoredPhoto(0);
  v6[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[18] = v11;
  v6[19] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MessageBody(0);
  v6[20] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[21] = v13;
  v6[22] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000629C(&qword_1000B31D0);
  v6[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CommunicationActor(0);
  v6[24] = v15;
  v6[25] = static CommunicationActor.shared.getter(v15);
  v18 = (int *)((char *)a3 + *a3);
  v16 = (_QWORD *)swift_task_alloc(a3[1]);
  v6[26] = v16;
  *v16 = v6;
  v16[1] = sub_100040464;
  return ((uint64_t (*)(_QWORD *, uint64_t))v18)(v6 + 7, a5);
}

uint64_t sub_100040464()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  v4 = v2[24];
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  if (v0)
  {
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
    v8 = v7;
    v9 = sub_10004F340;
    v10 = v6;
    v11 = v8;
  }
  else
  {
    v2[28] = v5;
    v12 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
    v11 = v13;
    v2[29] = v12;
    v2[30] = v13;
    v9 = sub_100040524;
    v10 = v12;
  }
  return swift_task_switch(v9, v10, v11);
}

uint64_t sub_100040524()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[10];
  v2 = v0[11];
  v3 = sub_10003D4FC(v0 + 7, v1);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v5, v3, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v0[5] = AssociatedTypeWitness;
  v0[6] = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  sub_10003D62C(v0 + 2);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  swift_task_dealloc(v5);
  v7 = sub_100022238(v0 + 7);
  v8 = v0[28];
  v9 = static CommunicationActor.shared.getter(v7);
  v0[31] = v9;
  v10 = v0[5];
  v11 = v0[6];
  sub_10003D6F0((uint64_t)(v0 + 2), v10);
  v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[32] = v12;
  *v12 = v0;
  v12[1] = sub_100040688;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[23], v9, v8, v0 + 12, v10, v11);
}

uint64_t sub_100040688()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[31]);
  if (v0)
    v4 = sub_10004F364;
  else
    v4 = sub_1000406FC;
  return swift_task_switch(v4, v2[29], v2[30]);
}

uint64_t sub_1000406FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v15;
  _QWORD *v16;
  uint64_t (*v17)(_QWORD);

  v1 = v0[23];
  v2 = v0[17];
  v3 = v0[18];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = v0[22];
  v6 = v0[19];
  v7 = v0[16];
  if (v4 == 1)
  {
    swift_release(v0[25]);
    sub_100022238(v0 + 2);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  v9 = v0[33];
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v0[19], v1, v2);
  MessageBody.version.getter(v10);
  MessageBody.init<A>(serializable:version:)(v6, v7, v2, &protocol witness table for StoredPhoto);
  if (v9)
  {
    swift_release(v0[25]);
    sub_100022238(v0 + 2);
    v11 = v0[22];
    v12 = v0[19];
    v13 = v0[16];
    swift_task_dealloc(v0[23]);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  v15 = (int *)v0[13];
  v17 = (uint64_t (*)(_QWORD))((char *)v15 + *v15);
  v16 = (_QWORD *)swift_task_alloc(v15[1]);
  v0[34] = v16;
  *v16 = v0;
  v16[1] = sub_100040890;
  return v17(v0[22]);
}

uint64_t sub_100040890()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[21] + 8))(v2[22], v2[20]);
  if (v0)
    v4 = (uint64_t (*)(uint64_t))sub_10004F368;
  else
    v4 = sub_100040900;
  return swift_task_switch(v4, v2[29], v2[30]);
}

uint64_t sub_100040900(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v1[28];
  v3 = static CommunicationActor.shared.getter(a1);
  v1[31] = v3;
  v4 = v1[5];
  v5 = v1[6];
  sub_10003D6F0((uint64_t)(v1 + 2), v4);
  v6 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v1[32] = v6;
  *v6 = v1;
  v6[1] = sub_100040688;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v1[23], v3, v2, v1 + 12, v4, v5);
}

uint64_t sub_1000409A8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int *v18;

  v6[14] = a2;
  v6[15] = a6;
  v6[13] = a1;
  v9 = type metadata accessor for ProtocolVersion(0);
  v6[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000629C(&qword_1000B25E8);
  v6[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[18] = v11;
  v6[19] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MessageBody(0);
  v6[20] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[21] = v13;
  v6[22] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000629C(&qword_1000B3620);
  v6[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CommunicationActor(0);
  v6[24] = v15;
  v6[25] = static CommunicationActor.shared.getter(v15);
  v18 = (int *)((char *)a3 + *a3);
  v16 = (_QWORD *)swift_task_alloc(a3[1]);
  v6[26] = v16;
  *v16 = v6;
  v16[1] = sub_100040AE0;
  return ((uint64_t (*)(_QWORD *, uint64_t))v18)(v6 + 7, a5);
}

uint64_t sub_100040AE0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  v4 = v2[24];
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  if (v0)
  {
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
    v8 = v7;
    v9 = sub_100040D04;
    v10 = v6;
    v11 = v8;
  }
  else
  {
    v2[28] = v5;
    v12 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
    v11 = v13;
    v2[29] = v12;
    v2[30] = v13;
    v9 = sub_100040BA0;
    v10 = v12;
  }
  return swift_task_switch(v9, v10, v11);
}

uint64_t sub_100040BA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[10];
  v2 = v0[11];
  v3 = sub_10003D4FC(v0 + 7, v1);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v5, v3, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v0[5] = AssociatedTypeWitness;
  v0[6] = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  sub_10003D62C(v0 + 2);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  swift_task_dealloc(v5);
  v7 = sub_100022238(v0 + 7);
  v8 = v0[28];
  v9 = static CommunicationActor.shared.getter(v7);
  v0[31] = v9;
  v10 = v0[5];
  v11 = v0[6];
  sub_10003D6F0((uint64_t)(v0 + 2), v10);
  v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[32] = v12;
  *v12 = v0;
  v12[1] = sub_100040D68;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[23], v9, v8, v0 + 12, v10, v11);
}

uint64_t sub_100040D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 200));
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040D68()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[31]);
  if (v0)
    v4 = sub_100040F88;
  else
    v4 = sub_100040DDC;
  return swift_task_switch(v4, v2[29], v2[30]);
}

uint64_t sub_100040DDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v16;
  _QWORD *v17;
  uint64_t (*v18)(_QWORD);

  v1 = v0[23];
  v2 = v0[17];
  v3 = v0[18];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = v0[22];
  v6 = v0[19];
  v7 = v0[16];
  if (v4 == 1)
  {
    swift_release(v0[25]);
    sub_100022238(v0 + 2);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  v9 = v0[33];
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v0[19], v1, v2);
  MessageBody.version.getter(v10);
  v11 = sub_100006454(&qword_1000B3628, &qword_1000B25E8, (uint64_t)&protocol conformance descriptor for SyncedPhotosFace<A>);
  MessageBody.init<A>(serializable:version:)(v6, v7, v2, v11);
  if (v9)
  {
    swift_release(v0[25]);
    sub_100022238(v0 + 2);
    v12 = v0[22];
    v13 = v0[19];
    v14 = v0[16];
    swift_task_dealloc(v0[23]);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  v16 = (int *)v0[13];
  v18 = (uint64_t (*)(_QWORD))((char *)v16 + *v16);
  v17 = (_QWORD *)swift_task_alloc(v16[1]);
  v0[34] = v17;
  *v17 = v0;
  v17[1] = sub_100040FF8;
  return v18(v0[22]);
}

uint64_t sub_100040F88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 200));
  sub_100022238((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040FF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[21] + 8))(v2[22], v2[20]);
  if (v0)
    v4 = sub_100041110;
  else
    v4 = sub_100041068;
  return swift_task_switch(v4, v2[29], v2[30]);
}

uint64_t sub_100041068(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v1[28];
  v3 = static CommunicationActor.shared.getter(a1);
  v1[31] = v3;
  v4 = v1[5];
  v5 = v1[6];
  sub_10003D6F0((uint64_t)(v1 + 2), v4);
  v6 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v1[32] = v6;
  *v6 = v1;
  v6[1] = sub_100040D68;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v1[23], v3, v2, v1 + 12, v4, v5);
}

uint64_t sub_100041110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 200));
  sub_100022238((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041180(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int *v18;

  v6[14] = a2;
  v6[15] = a6;
  v6[13] = a1;
  v9 = type metadata accessor for ProtocolVersion(0);
  v6[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for StoredPhoto(0);
  v6[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[18] = v11;
  v6[19] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MessageBody(0);
  v6[20] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[21] = v13;
  v6[22] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000629C(&qword_1000B31D0);
  v6[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CommunicationActor(0);
  v6[24] = v15;
  v6[25] = static CommunicationActor.shared.getter(v15);
  v18 = (int *)((char *)a3 + *a3);
  v16 = (_QWORD *)swift_task_alloc(a3[1]);
  v6[26] = v16;
  *v16 = v6;
  v16[1] = sub_1000412B4;
  return ((uint64_t (*)(_QWORD *, uint64_t))v18)(v6 + 7, a5);
}

uint64_t sub_1000412B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  v4 = v2[24];
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  if (v0)
  {
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
    v8 = v7;
    v9 = sub_10004F340;
    v10 = v6;
    v11 = v8;
  }
  else
  {
    v2[28] = v5;
    v12 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
    v11 = v13;
    v2[29] = v12;
    v2[30] = v13;
    v9 = sub_100041374;
    v10 = v12;
  }
  return swift_task_switch(v9, v10, v11);
}

uint64_t sub_100041374()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[10];
  v2 = v0[11];
  v3 = sub_10003D4FC(v0 + 7, v1);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v5, v3, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v0[5] = AssociatedTypeWitness;
  v0[6] = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  sub_10003D62C(v0 + 2);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  swift_task_dealloc(v5);
  v7 = sub_100022238(v0 + 7);
  v8 = v0[28];
  v9 = static CommunicationActor.shared.getter(v7);
  v0[31] = v9;
  v10 = v0[5];
  v11 = v0[6];
  sub_10003D6F0((uint64_t)(v0 + 2), v10);
  v12 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[32] = v12;
  *v12 = v0;
  v12[1] = sub_1000414D8;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[23], v9, v8, v0 + 12, v10, v11);
}

uint64_t sub_1000414D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[31]);
  if (v0)
    v4 = sub_10004F364;
  else
    v4 = sub_10004154C;
  return swift_task_switch(v4, v2[29], v2[30]);
}

uint64_t sub_10004154C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v15;
  _QWORD *v16;
  uint64_t (*v17)(_QWORD);

  v1 = v0[23];
  v2 = v0[17];
  v3 = v0[18];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = v0[22];
  v6 = v0[19];
  v7 = v0[16];
  if (v4 == 1)
  {
    swift_release(v0[25]);
    sub_100022238(v0 + 2);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  v9 = v0[33];
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v0[19], v1, v2);
  MessageBody.version.getter(v10);
  MessageBody.init<A>(serializable:version:)(v6, v7, v2, &protocol witness table for StoredPhoto);
  if (v9)
  {
    swift_release(v0[25]);
    sub_100022238(v0 + 2);
    v11 = v0[22];
    v12 = v0[19];
    v13 = v0[16];
    swift_task_dealloc(v0[23]);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  v15 = (int *)v0[13];
  v17 = (uint64_t (*)(_QWORD))((char *)v15 + *v15);
  v16 = (_QWORD *)swift_task_alloc(v15[1]);
  v0[34] = v16;
  *v16 = v0;
  v16[1] = sub_1000416E0;
  return v17(v0[22]);
}

uint64_t sub_1000416E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[21] + 8))(v2[22], v2[20]);
  if (v0)
    v4 = (uint64_t (*)(uint64_t))sub_10004F368;
  else
    v4 = sub_100041750;
  return swift_task_switch(v4, v2[29], v2[30]);
}

uint64_t sub_100041750(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v1[28];
  v3 = static CommunicationActor.shared.getter(a1);
  v1[31] = v3;
  v4 = v1[5];
  v5 = v1[6];
  sub_10003D6F0((uint64_t)(v1 + 2), v4);
  v6 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v1[32] = v6;
  *v6 = v1;
  v6[1] = sub_1000414D8;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v1[23], v3, v2, v1 + 12, v4, v5);
}

id sub_1000417F8()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    v2 = *(id *)(v0 + 40);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)AXMVoiceOverVisionEngine), "init");
    v4 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 40) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

uint64_t sub_100041860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v1 + 24) = static CommunicationActor.shared.getter(v2);
  v3 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_1000418F0, v4, v5);
}

uint64_t sub_1000418F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_retain(v1);
  PhotosXPC.registerGeneratePhoto(callback:)(&unk_1000B34B8, v1);
  swift_release(v1);
  v2 = swift_allocObject(&unk_1000AE5E8, 32, 7);
  *(_QWORD *)(v2 + 16) = &unk_1000B34C8;
  *(_QWORD *)(v2 + 24) = v1;
  v3 = swift_allocObject(&unk_1000AE610, 32, 7);
  *(_QWORD *)(v3 + 16) = &unk_1000B34D8;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain_n(v1, 2);
  sub_10003EE34(1u, (uint64_t)&unk_1000B34E8, v3, (uint64_t)&unk_1000AE638, (uint64_t)sub_10004EA5C);
  swift_release(v3);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerGenerateMask(callback:)(&unk_1000B34F8, v1);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for CommunicationActor(0);
  v3[5] = static CommunicationActor.shared.getter(v4);
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  v3[6] = v6;
  v3[7] = v7;
  return swift_task_switch(sub_100041AA0, v6, v7);
}

uint64_t sub_100041AA0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)v0[2];
  v1[3] = sub_10000629C(&qword_1000B3550);
  v1[4] = sub_100006454(&qword_1000B3558, &qword_1000B3550, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  v2 = sub_10003D62C(v1);
  v3 = (_QWORD *)swift_task_alloc(dword_1000B354C);
  v0[8] = v3;
  *v3 = v0;
  v3[1] = sub_100041B30;
  return sub_100041C04((uint64_t)v2, v0[3]);
}

uint64_t sub_100041B30()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100041BC4;
  else
    v4 = sub_100041B90;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_100041B90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041BC4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 40));
  sub_10004EC64(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041C04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = sub_10000629C(&qword_1000B3130);
  v3[6] = v4;
  v3[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000629C(&qword_1000B31B8);
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommunicationActor(0);
  v3[11] = v7;
  v3[12] = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3[13] = v8;
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  v3[14] = v9;
  v3[15] = v10;
  return swift_task_switch(sub_100041CF4, v9, v10);
}

uint64_t sub_100041CF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Photo;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[13];
  v2 = v0[11];
  Photo = GeneratePhotoRequest.photoIdentifiers.getter();
  v0[16] = Photo;
  v0[17] = static CommunicationActor.shared.getter(Photo);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_100041D68, v4, v5);
}

uint64_t sub_100041D68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[16];
  v2 = v0[13];
  v3 = v0[5];
  v4 = swift_release(v0[17]);
  v5 = static CommunicationActor.shared.getter(v4);
  v6 = swift_allocObject(&unk_1000AE6B0, 32, 7);
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v1;
  v7 = type metadata accessor for StoredPhoto(0);
  v0[18] = v7;
  swift_retain(v3);
  swift_bridgeObjectRetain(v1);
  generateElements<A>(isolation:_:)(v5, v2, &unk_1000B3560, v6, v7);
  swift_release(v6);
  swift_release(v5);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_100041E40, v0[14], v0[15]);
}

uint64_t sub_100041E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t PhotoResponse;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 96));
  *(_QWORD *)(v0 + 16) = v1;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  AsyncSequence.generic.getter(v5, OpaqueTypeConformance2);
  PhotoResponse = type metadata accessor for GeneratePhotoResponse(0);
  v9 = sub_100006454(&qword_1000B3150, &qword_1000B3130, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
  AsyncMapSequence.init(_:transform:)(v4, &unk_1000B3568, 0, v6, PhotoResponse, v9);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = sub_10000629C(&qword_1000B31B8);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CommunicationActor(0);
  v3[9] = v6;
  v7 = static CommunicationActor.shared.getter(v6);
  v3[10] = v7;
  v3[11] = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3[12] = v8;
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v6, v8);
  return swift_task_switch(sub_100042008, v9, v10);
}

uint64_t sub_100042008()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0[12];
  v2 = v0[9];
  v4 = v0[4];
  v3 = v0[5];
  v5 = swift_release(v0[11]);
  v6 = static CommunicationActor.shared.getter(v5);
  v7 = swift_allocObject(&unk_1000AE688, 32, 7);
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)(v7 + 24) = v4;
  v8 = type metadata accessor for StoredPhoto(0);
  v0[13] = v8;
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  generateElements<A>(isolation:_:)(v6, v1, &unk_1000B3540, v7, v8);
  swift_release(v7);
  swift_release(v6);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_100042100, v9, v10);
}

uint64_t sub_100042100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  *(_QWORD *)(v0 + 16) = v1;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  AsyncSequence.generic.getter(v4, OpaqueTypeConformance2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042194(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = type metadata accessor for CommunicationActor(0);
  v1[2] = v3;
  v1[3] = static CommunicationActor.shared.getter(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1000B3504);
  v1[4] = v4;
  *v4 = v1;
  v4[1] = sub_100042208;
  return sub_10004235C(a1);
}

uint64_t sub_100042208(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 32);
  *(_QWORD *)(*(_QWORD *)v3 + 40) = v2;
  swift_task_dealloc(v7);
  v8 = v6[2];
  if (v2)
  {
    v9 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v9);
    v12 = v11;
    v13 = sub_100042328;
  }
  else
  {
    v6[6] = a2;
    v6[7] = a1;
    v14 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v14);
    v12 = v15;
    v13 = sub_1000422F0;
  }
  return swift_task_switch(v13, v10, v12);
}

uint64_t sub_1000422F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100042328()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004235C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2[14] = a1;
  v2[15] = v1;
  v3 = type metadata accessor for URL.DirectoryHint(0);
  v2[16] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[17] = v4;
  v2[18] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for StoredPhoto(0);
  v2[19] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[20] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[21] = swift_task_alloc(v7);
  v2[22] = swift_task_alloc(v7);
  v8 = type metadata accessor for URL(0);
  v2[23] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[24] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v10);
  v2[26] = swift_task_alloc(v10);
  v2[27] = swift_task_alloc(v10);
  v11 = type metadata accessor for CommunicationActor(0);
  v2[28] = static CommunicationActor.shared.getter(v11);
  v12 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, v12);
  v2[29] = v13;
  v2[30] = v14;
  return swift_task_switch(sub_100042490, v13, v14);
}

uint64_t sub_100042490()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;
  uint64_t **v6;

  v1 = v0[27];
  v2 = v0[14];
  v0[31] = *(_QWORD *)(v0[15] + 16);
  sub_10004F4C4(v2, v1);
  v3 = sub_10000629C(&qword_1000B3508);
  inited = swift_initStackObject(v3, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_100096430;
  *(_QWORD *)(inited + 32) = 0xD000000000000014;
  *(_QWORD *)(inited + 40) = 0x8000000100095100;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  v5 = sub_10003EB84(inited);
  v0[32] = v5;
  v6 = (uint64_t **)swift_task_alloc(dword_1000B3404);
  v0[33] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = (uint64_t *)sub_1000425E0;
  return sub_100042CB4(v0[14], v0[27], v5);
}

uint64_t sub_1000425E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 264);
  v3[34] = a1;
  v3[35] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v3[32]);
  if (v1)
    v5 = sub_100042AA0;
  else
    v5 = sub_100042650;
  return swift_task_switch(v5, v3[29], v3[30]);
}

uint64_t sub_100042650()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v2 = *(void **)(v0 + 272);
  v1 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 208);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 16))(v3, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 184));
  StoredPhoto.init(pfcStoredPhoto:baseURL:)(v2, v3);
  if (v1)
  {
    v4 = *(void **)(v0 + 272);
    v5 = *(_QWORD *)(v0 + 224);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 184));

    swift_release(v5);
    v6 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 176);
    v10 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = (_QWORD *)swift_task_alloc(dword_1000B3724);
    *(_QWORD *)(v0 + 288) = v12;
    *v12 = v0;
    v12[1] = sub_100042768;
    return sub_10004F62C(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  }
}

uint64_t sub_100042768()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[29];
    v5 = v2[30];
    v6 = sub_100042B34;
  }
  else
  {
    v7 = v2[21];
    v8 = v2[19];
    v9 = *(void (**)(uint64_t, uint64_t))(v2[20] + 8);
    v2[38] = v9;
    v9(v7, v8);
    v4 = v2[29];
    v5 = v2[30];
    v6 = sub_1000427E0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000427E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 224));
  *(_QWORD *)(v0 + 96) = 0xD000000000000010;
  *(_QWORD *)(v0 + 104) = 0x80000001000951A0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for URL.DirectoryHint.inferFromPath(_:), v5);
  v6 = sub_10004E444();
  URL.appending<A>(path:directoryHint:)(v0 + 96, v3, &type metadata for String, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  v7 = Data.init(contentsOf:options:)(v2, 0);
  if (v1)
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
    v10 = *(_QWORD *)(v0 + 216);
    v12 = *(_QWORD *)(v0 + 192);
    v11 = *(_QWORD *)(v0 + 200);
    v14 = *(_QWORD *)(v0 + 176);
    v13 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 152);

    v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v11, v13);
    v9(v14, v15);
    v16(v10, v13);
    v22 = *(_QWORD *)(v0 + 208);
    v23 = *(_QWORD *)(v0 + 200);
    v25 = *(_QWORD *)(v0 + 168);
    v24 = *(_QWORD *)(v0 + 176);
    v26 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v17 = v8;
    v38 = v7;
    v18 = *(_QWORD *)(v0 + 200);
    v19 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    sub_100022294(v18, 1);
    v37 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
    v20 = *(void **)(v0 + 272);
    v21 = *(_QWORD *)(v0 + 216);
    v28 = *(_QWORD *)(v0 + 200);
    v30 = *(_QWORD *)(v0 + 184);
    v29 = *(_QWORD *)(v0 + 192);
    v31 = *(_QWORD *)(v0 + 176);
    v34 = *(_QWORD *)(v0 + 208);
    v35 = *(_QWORD *)(v0 + 168);
    v32 = *(_QWORD *)(v0 + 152);
    v36 = *(_QWORD *)(v0 + 144);

    v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v33(v28, v30);
    v37(v31, v32);
    v33(v21, v30);
    swift_task_dealloc(v21);
    swift_task_dealloc(v34);
    swift_task_dealloc(v28);
    swift_task_dealloc(v31);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v38, v17);
  }
}

uint64_t sub_100042AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 224));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042B34()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 224));

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v8 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100042C08, 0, 0);
}

uint64_t sub_100042C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = sub_10000629C(&qword_1000B34A0);
  v3 = type metadata accessor for StoredPhoto(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v2, v6 + *(_QWORD *)(v4 + 72), v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100096430;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7 + v6, v1, v3);
  GeneratePhotoResponse.init(results:)(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4[73] = v3;
  v4[72] = a3;
  v4[71] = a2;
  v4[70] = a1;
  v5 = type metadata accessor for UUID(0);
  v4[74] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[75] = v6;
  v4[76] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL.DirectoryHint(0);
  v4[77] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[78] = v8;
  v4[79] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v4[80] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[81] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[82] = swift_task_alloc(v11);
  v4[83] = swift_task_alloc(v11);
  v4[84] = swift_task_alloc(v11);
  v4[85] = swift_task_alloc(v11);
  v4[86] = swift_task_alloc(v11);
  v4[87] = swift_task_alloc(v11);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_10000629C(&qword_1000B3408) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[88] = swift_task_alloc(v12);
  v4[89] = swift_task_alloc(v12);
  v4[90] = swift_task_alloc(v12);
  v13 = type metadata accessor for Logger(0);
  v4[91] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[92] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[93] = swift_task_alloc(v15);
  v4[94] = swift_task_alloc(v15);
  v4[95] = swift_task_alloc(v15);
  v4[96] = swift_task_alloc(v15);
  v4[97] = swift_task_alloc(v15);
  v4[98] = swift_task_alloc(v15);
  v4[99] = swift_task_alloc(v15);
  v4[100] = swift_task_alloc(v15);
  v4[101] = swift_task_alloc(v15);
  v4[102] = swift_task_alloc(v15);
  v4[103] = swift_task_alloc(v15);
  v16 = type metadata accessor for CommunicationActor(0);
  v4[104] = v16;
  v4[105] = static CommunicationActor.shared.getter(v16);
  v17 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4[106] = v17;
  v18 = dispatch thunk of Actor.unownedExecutor.getter(v16, v17);
  v4[107] = v18;
  v4[108] = v19;
  return swift_task_switch(sub_100042F24, v18, v19);
}

uint64_t sub_100042F24()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v1 = (void *)objc_opt_self(PHAsset);
  v2 = sub_10000629C(&qword_1000B2A20);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100096430;
  *(_QWORD *)(v3 + 32) = UUID.uuidString.getter();
  *(_QWORD *)(v3 + 40) = v4;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v6 = objc_msgSend(v1, "fetchAssetsWithUUIDs:options:", isa, 0);

  if (!v6)
    __break(1u);
  v7 = objc_msgSend(v6, "firstObject");
  *(_QWORD *)(v0 + 872) = v7;

  if (v7)
  {
    v8 = *(_QWORD *)(v0 + 576);
    *(_QWORD *)(v0 + 880) = objc_msgSend((id)objc_opt_self(VCPMediaAnalysisService), "sharedAnalysisService");
    *(_QWORD *)(v0 + 512) = v8;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(VCPMediaAnalysisService_AllowOnDemandOption);
    v11 = v10;
    *(_QWORD *)(v0 + 112) = &type metadata for Bool;
    *(_BYTE *)(v0 + 88) = 1;
    sub_10004E3B0((_OWORD *)(v0 + 88), (_OWORD *)(v0 + 120));
    swift_bridgeObjectRetain(v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 512));
    v69 = *(_QWORD *)(v0 + 512);
    *(_QWORD *)(v0 + 512) = 0x8000000000000000;
    sub_10004C294((_OWORD *)(v0 + 120), v9, v11, isUniquelyReferenced_nonNull_native);
    v13 = *(_QWORD *)(v0 + 512);
    *(_QWORD *)(v0 + 512) = v69;
    swift_bridgeObjectRelease(v13);
    v14 = swift_bridgeObjectRelease(v11);
    *(_BYTE *)(v0 + 1009) = 0;
    *(_OWORD *)(v0 + 888) = 0u;
    v15 = *(_QWORD *)(v0 + 848);
    v66 = *(int8x16_t *)(v0 + 872);
    v16 = static CommunicationActor.shared.getter(v14);
    *(_QWORD *)(v0 + 904) = v16;
    v17 = (int8x16_t *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 912) = v17;
    v17[1] = vextq_s8(v66, v66, 8uLL);
    v17[2].i64[0] = v0 + 512;
    v18 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 920) = v18;
    v19 = sub_10000629C(&qword_1000B3418);
    *v18 = v0;
    v18[1] = sub_100043500;
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 392, v16, v15, 0xD000000000000045, 0x80000001000950B0, sub_10004E3C0, v17, v19);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 608);
    v22 = *(_QWORD *)(v0 + 600);
    v23 = *(_QWORD *)(v0 + 592);
    v24 = *(_QWORD *)(v0 + 560);
    v25 = swift_release(*(_QWORD *)(v0 + 840));
    static Log.default.getter(v25);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v24, v23);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(_QWORD *)(v0 + 752);
    v31 = *(_QWORD *)(v0 + 736);
    v32 = *(_QWORD *)(v0 + 728);
    v33 = *(_QWORD *)(v0 + 608);
    v34 = *(_QWORD *)(v0 + 600);
    v35 = *(_QWORD *)(v0 + 592);
    if (v29)
    {
      v67 = *(_QWORD *)(v0 + 752);
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v64 = v31;
      v37 = swift_slowAlloc(32, -1);
      v69 = v37;
      *(_DWORD *)v36 = 136315138;
      v38 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v35, v38);
      v41 = v40;
      *(_QWORD *)(v0 + 440) = sub_100021438(v39, v40, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease(v41);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "PhotoProcessor cannot fetch asset for %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v67, v32);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v34 + 8))(*(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 592));

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
    v42 = sub_10004E36C();
    v43 = swift_allocError(&type metadata for PhonePhotoProcessorError, v42, 0, 0);
    *v44 = 0;
    swift_willThrow(v43);
    v45 = *(_QWORD *)(v0 + 816);
    v46 = *(_QWORD *)(v0 + 808);
    v47 = *(_QWORD *)(v0 + 800);
    v48 = *(_QWORD *)(v0 + 792);
    v49 = *(_QWORD *)(v0 + 784);
    v50 = *(_QWORD *)(v0 + 776);
    v51 = *(_QWORD *)(v0 + 768);
    v52 = *(_QWORD *)(v0 + 760);
    v53 = *(_QWORD *)(v0 + 752);
    v54 = *(_QWORD *)(v0 + 744);
    v55 = *(_QWORD *)(v0 + 720);
    v56 = *(_QWORD *)(v0 + 712);
    v57 = *(_QWORD *)(v0 + 704);
    v58 = *(_QWORD *)(v0 + 696);
    v59 = *(_QWORD *)(v0 + 688);
    v60 = *(_QWORD *)(v0 + 680);
    v61 = *(_QWORD *)(v0 + 672);
    v62 = *(_QWORD *)(v0 + 664);
    v63 = *(_QWORD *)(v0 + 656);
    v65 = *(_QWORD *)(v0 + 632);
    v68 = *(_QWORD *)(v0 + 608);
    swift_task_dealloc(*(_QWORD *)(v0 + 824));
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v68);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100043500()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 912);
  v3 = *(_QWORD *)(*v0 + 904);
  swift_task_dealloc(*(_QWORD *)(*v0 + 920));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10004359C, *(_QWORD *)(v1 + 856), *(_QWORD *)(v1 + 864));
}

uint64_t sub_10004359C()
{
  _QWORD *v0;
  _QWORD *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  void *v70;
  void *v71;
  unint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  void *v95;
  NSObject *v96;
  os_log_type_t v97;
  _BOOL4 v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint8_t *v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  os_log_type_t v142;
  _BOOL4 v143;
  void *v144;
  uint8_t *v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  os_log_type_t v154;
  _OWORD *v155;
  uint8_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  id v171;
  void *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  NSURL *v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  NSString v191;
  id v192;
  unsigned int v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  id v205;
  NSString v206;
  id v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  id v211;
  unint64_t v212;
  char v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  NSObject *v217;
  os_log_type_t v218;
  _BOOL4 v219;
  uint64_t v220;
  _OWORD *v221;
  uint8_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  char v228;
  void (*v229)(uint64_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void (*v233)(uint64_t, uint64_t);
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  void *v241;
  unint64_t v242;
  uint64_t v243;
  void *v244;
  void *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  _BYTE *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  id v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  NSObject *v260;
  os_log_type_t v261;
  _BOOL4 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint8_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  void *v272;
  unint64_t v273;
  uint64_t v274;
  void *v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  _BYTE *v281;
  uint64_t v282;
  void (*v283)(uint64_t, uint64_t, uint64_t);
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  void (*v290)(uint64_t, uint64_t);
  uint64_t v291;
  void (*v292)(uint64_t, uint64_t);
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  void (*v300)(uint64_t, uint64_t, uint64_t);
  uint64_t v301;
  _BOOL4 v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  unint64_t v320;
  uint64_t v321;
  void *v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  _BYTE *v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  void *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void (*v355)(uint64_t, uint64_t, uint64_t);
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  void (*v367)(uint64_t, uint64_t);
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unsigned __int8 v371;
  uint64_t v372;
  uint64_t v373;
  os_log_type_t typea[8];
  os_log_type_t typeb[8];
  uint64_t typec;
  os_log_type_t type;
  os_log_type_t typed[8];
  os_log_type_t typee[8];
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  _BYTE *v383;
  uint64_t v384;
  void (*v385)(uint64_t, uint64_t);
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  void (*v403)(uint64_t, uint64_t);
  uint64_t v404;
  uint64_t v405;
  void (*v406)(uint64_t, uint64_t);
  void (*v407)(uint64_t, uint64_t);
  uint64_t v408;
  void *v409;
  uint64_t v410;
  _QWORD *v411;
  uint64_t v412;
  _QWORD *v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  void (*v417)(uint64_t, uint64_t);
  uint64_t v418;
  uint64_t v419;
  NSObject *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424[2];

  v1 = v0;
  v2 = v0 + 126;
  v413 = v0 + 64;
  v4 = v0[49];
  v3 = v0[50];
  v5 = v0[111];
  if (!v4)
  {
    swift_errorRelease(v5);
    v12 = swift_errorRetain(v3);
    static Log.default.getter(v12);
    swift_errorRetain(v3);
    v13 = swift_errorRetain(v3);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = v0[112];
      v17 = swift_slowAlloc(22, -1);
      v18 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v17 = 134218242;
      *(_QWORD *)(v17 + 4) = v16;
      *(_WORD *)(v17 + 12) = 2112;
      if (v3)
      {
        swift_errorRetain(v3);
        v19 = _swift_stdlib_bridgeErrorToNSError(v3);
      }
      else
      {
        v19 = 0;
      }
      *(_QWORD *)(v17 + 14) = v19;
      *v18 = v19;
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "PhotoProcessor analysis attempt %ld: MAD returned error: %@", (uint8_t *)v17, 0x16u);
      v67 = sub_10000629C(&qword_1000B20C0);
      swift_arrayDestroy(v18, 1, v67);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_errorRelease(v3);
    }
    else
    {
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
    v68 = v2[1];
    v69 = (*(uint64_t (**)(_QWORD, _QWORD))(v1[92] + 8))(v1[103], v1[91]);
    if ((v68 & 1) == 0)
    {
      v1[112] = 1;
      v2[1] = 1;
      v1[111] = v3;
      v75 = v1[110];
      v76 = v1[109];
      v77 = v1[106];
      v78 = static CommunicationActor.shared.getter(v69);
      v1[113] = v78;
      v79 = (_QWORD *)swift_task_alloc(48);
      v1[114] = v79;
      v79[2] = v75;
      v79[3] = v76;
      v79[4] = v413;
      v80 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
      v1[115] = v80;
      v81 = sub_10000629C(&qword_1000B3418);
      *v80 = v1;
      v80[1] = sub_100043500;
      return withCheckedContinuation<A>(isolation:function:_:)(v1 + 49, v78, v77, 0xD000000000000045, 0x80000001000950B0, sub_10004E3C0, v79, v81);
    }
    v70 = (void *)v1[110];
    v71 = (void *)v1[109];
    swift_release(v1[105]);
    v72 = sub_10004E36C();
    v73 = swift_allocError(&type metadata for PhonePhotoProcessorError, v72, 0, 0);
    *v74 = 1;
    swift_willThrow(v73);
    swift_errorRelease(v3);
    goto LABEL_46;
  }
  v6 = swift_errorRelease(v0[50]);
  if (v5)
  {
    v7 = v0[111];
    v8 = (void *)v0[110];
    v9 = (void *)v1[109];
    v10 = v1[105];
    swift_errorRetain(v1[111]);
    swift_release(v10);
    v11 = swift_bridgeObjectRelease(v4);
    swift_willThrow(v11);
    swift_errorRelease(v7);

LABEL_47:
    swift_bridgeObjectRelease(v1[64]);
    v114 = v1[102];
    v115 = v1[101];
    v116 = v1[100];
    v117 = v1[99];
    v118 = v1[98];
    v119 = v1[97];
    v120 = v1[96];
    v121 = v1[95];
    v122 = v1[94];
    v358 = v1[93];
    v361 = v1[90];
    v365 = v1[89];
    v370 = v1[88];
    *(_QWORD *)typeb = v1[87];
    v381 = v1[86];
    v384 = v1[85];
    v392 = v1[84];
    v399 = v1[83];
    v408 = v1[82];
    v412 = v1[79];
    v415 = v1[76];
    swift_task_dealloc(v1[103]);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v121);
    swift_task_dealloc(v122);
    swift_task_dealloc(v358);
    swift_task_dealloc(v361);
    swift_task_dealloc(v365);
    swift_task_dealloc(v370);
    swift_task_dealloc(*(_QWORD *)typeb);
    swift_task_dealloc(v381);
    swift_task_dealloc(v384);
    swift_task_dealloc(v392);
    swift_task_dealloc(v399);
    swift_task_dealloc(v408);
    swift_task_dealloc(v412);
    swift_task_dealloc(v415);
    return ((uint64_t (*)(void))v1[1])();
  }
  v397 = v0 + 47;
  v405 = (uint64_t)(v0 + 2);
  v20 = v0 + 68;
  v21 = v0 + 69;
  static Log.default.getter(v6);
  v22 = swift_bridgeObjectRetain_n(v4, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter();
  v25 = os_log_type_enabled(v23, v24);
  v26 = v0[102];
  v27 = v0[92];
  v411 = v0;
  v28 = v0[91];
  v380 = v20;
  v383 = v2;
  v390 = v21;
  if (v25)
  {
    v29 = v21;
    *(_QWORD *)typea = v27;
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v369 = v26;
    v31 = swift_slowAlloc(32, -1);
    v424[0] = v31;
    *(_DWORD *)v30 = 136315138;
    v32 = swift_bridgeObjectRetain(v4);
    v33 = Dictionary.description.getter(v32, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v35 = v34;
    swift_bridgeObjectRelease(v4);
    *v20 = sub_100021438(v33, v35, v424);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v29, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease_n(v4, 2);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "MAD returned analysis: %s", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    v36 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)typea + 8);
    v36(v369, v28);
  }
  else
  {
    swift_bridgeObjectRelease_n(v4, 2);

    v36 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v36(v26, v28);
  }
  v1 = v411;
  v411[116] = v36;
  v37 = objc_msgSend((id)v411[109], "localIdentifier");
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  v411[47] = v38;
  v411[48] = v40;
  AnyHashable.init<A>(_:)(v397, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v4 + 16) && (v41 = sub_10004A4F8(v405), (v42 & 1) != 0))
  {
    sub_100022258(*(_QWORD *)(v4 + 56) + 32 * v41, (uint64_t)(v411 + 23));
  }
  else
  {
    *(_OWORD *)(v411 + 23) = 0u;
    *(_OWORD *)(v411 + 25) = 0u;
  }
  swift_bridgeObjectRelease(v4);
  sub_10004E3CC(v405);
  if (!v411[26])
  {
    swift_release(v411[105]);
    v50 = sub_10000EA70((uint64_t)(v411 + 23), &qword_1000B3420);
LABEL_22:
    v51 = (void *)v411[109];
    static Log.default.getter(v50);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter();
    v54 = os_log_type_enabled(v52, v53);
    v55 = (void *)v411[109];
    v56 = v411[95];
    v57 = v411[91];
    if (v54)
    {
      v391 = v411[91];
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = swift_slowAlloc(32, -1);
      v424[0] = v59;
      *(_DWORD *)v58 = 136315138;
      v60 = objc_msgSend(v55, "localIdentifier");
      v406 = v36;
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      v63 = v62;

      v411[63] = sub_100021438(v61, v63, v424);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v411 + 63, v413, v58 + 4, v58 + 12);
      swift_bridgeObjectRelease(v63);

      _os_log_impl((void *)&_mh_execute_header, v52, v53, "MAD no results for %s", v58, 0xCu);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      v64 = v59;
      v1 = v411;
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v58, -1, -1);

      v406(v56, v391);
LABEL_45:
      v70 = (void *)v1[110];
      v71 = (void *)v1[109];
      v111 = sub_10004E36C();
      v112 = swift_allocError(&type metadata for PhonePhotoProcessorError, v111, 0, 0);
      *v113 = 2;
      swift_willThrow(v112);
LABEL_46:

      goto LABEL_47;
    }

    v65 = v56;
    v66 = v57;
LABEL_25:
    v36(v65, v66);
    goto LABEL_45;
  }
  v43 = sub_10000629C(&qword_1000B3428);
  if ((swift_dynamicCast(v411 + 62, v411 + 23, (char *)&type metadata for Any + 8, v43, 6) & 1) == 0)
  {
    v50 = swift_release(v411[105]);
    goto LABEL_22;
  }
  v44 = v411[62];
  v411[117] = v44;
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(MediaAnalysisWatchFaceResultsKey);
  v47 = v46;
  if (*(_QWORD *)(v44 + 16) && (v48 = sub_10004A464(v45, v46), (v49 & 1) != 0))
  {
    sub_100022258(*(_QWORD *)(v44 + 56) + 32 * v48, (uint64_t)(v411 + 35));
  }
  else
  {
    *(_OWORD *)(v411 + 35) = 0u;
    *(_OWORD *)(v411 + 37) = 0u;
  }
  swift_bridgeObjectRelease(v47);
  if (!v411[38])
  {
    v414 = v411 + 60;
    v407 = v36;
    swift_release(v411[105]);
    swift_bridgeObjectRelease(v44);
    v94 = sub_10000EA70((uint64_t)(v411 + 35), &qword_1000B3420);
LABEL_40:
    v95 = (void *)v411[109];
    static Log.default.getter(v94);
    v96 = Logger.logObject.getter(v95);
    v97 = static os_log_type_t.error.getter();
    v98 = os_log_type_enabled(v96, v97);
    v99 = (void *)v411[109];
    v100 = v411[96];
    v101 = v411[91];
    if (v98)
    {
      v398 = v411[91];
      v102 = (uint8_t *)swift_slowAlloc(12, -1);
      v103 = swift_slowAlloc(32, -1);
      v424[0] = v103;
      *(_DWORD *)v102 = 136315138;
      v104 = objc_msgSend(v99, "localIdentifier");
      v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
      v107 = v106;

      v411[59] = sub_100021438(v105, v107, v424);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v411 + 59, v414, v102 + 4, v102 + 12);
      swift_bridgeObjectRelease(v107);

      _os_log_impl((void *)&_mh_execute_header, v96, v97, "MAD no watch face results for %s", v102, 0xCu);
      swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
      v108 = v103;
      v1 = v411;
      swift_slowDealloc(v108, -1, -1);
      swift_slowDealloc(v102, -1, -1);

      v109 = v100;
      v110 = v398;
LABEL_44:
      v407(v109, v110);
      goto LABEL_45;
    }

LABEL_43:
    v109 = v100;
    v110 = v101;
    goto LABEL_44;
  }
  v83 = v411 + 57;
  v84 = sub_10000629C(&qword_1000B3430);
  if ((swift_dynamicCast(v411 + 57, v411 + 35, (char *)&type metadata for Any + 8, v84, 6) & 1) == 0)
  {
    v414 = v411 + 60;
    v407 = v36;
    swift_release(v411[105]);
    v94 = swift_bridgeObjectRelease(v44);
    goto LABEL_40;
  }
  v85 = *v83;
  if (!*(_QWORD *)(*v83 + 16))
  {
    v407 = v36;
    v139 = (void *)v411[109];
    v140 = v411[105];
    swift_bridgeObjectRelease(v85);
    swift_release(v140);
    v141 = swift_bridgeObjectRelease(v44);
    static Log.default.getter(v141);
    v96 = Logger.logObject.getter(v139);
    v142 = static os_log_type_t.error.getter();
    v143 = os_log_type_enabled(v96, v142);
    v144 = (void *)v411[109];
    v100 = v411[97];
    v101 = v411[91];
    if (v143)
    {
      v416 = v411[91];
      v145 = (uint8_t *)swift_slowAlloc(12, -1);
      v146 = swift_slowAlloc(32, -1);
      v424[0] = v146;
      *(_DWORD *)v145 = 136315138;
      v147 = objc_msgSend(v144, "localIdentifier");
      v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
      v150 = v149;

      v411[69] = sub_100021438(v148, v150, v424);
      v1 = v411;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v390, v411 + 70, v145 + 4, v145 + 12);
      swift_bridgeObjectRelease(v150);

      _os_log_impl((void *)&_mh_execute_header, v96, v142, "MAD no watch face result for %s", v145, 0xCu);
      swift_arrayDestroy(v146, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v146, -1, -1);
      swift_slowDealloc(v145, -1, -1);

      v109 = v100;
      v110 = v416;
      goto LABEL_44;
    }

    goto LABEL_43;
  }
  v86 = v411 + 19;
  v87 = *(_QWORD *)(v85 + 32);
  v411[118] = v87;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRelease(v85);
  v88 = MediaAnalysisResultWatchFaceDataAttributeKey;
  v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(MediaAnalysisResultWatchFaceDataAttributeKey);
  v91 = v90;
  if (*(_QWORD *)(v87 + 16) && (v92 = sub_10004A464(v89, v90), (v93 & 1) != 0))
  {
    sub_100022258(*(_QWORD *)(v87 + 56) + 32 * v92, (uint64_t)(v411 + 19));
  }
  else
  {
    *v86 = 0u;
    *(_OWORD *)(v411 + 21) = 0u;
  }
  swift_bridgeObjectRelease(v91);
  v1 = v411;
  if (!v411[22])
  {
    swift_release(v411[105]);
    swift_bridgeObjectRelease(v44);
    v151 = sub_10000EA70((uint64_t)v86, &qword_1000B3420);
LABEL_59:
    static Log.default.getter(v151);
    v152 = swift_bridgeObjectRetain(v87);
    v153 = Logger.logObject.getter(v152);
    v154 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v153, v154))
    {
      v407 = v36;
      v155 = v411 + 7;
      v156 = (uint8_t *)swift_slowAlloc(12, -1);
      v157 = swift_slowAlloc(32, -1);
      v424[0] = v157;
      *(_DWORD *)v156 = 136315138;
      v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
      v160 = v159;
      if (*(_QWORD *)(v87 + 16) && (v161 = sub_10004A464(v158, v159), (v162 & 1) != 0))
      {
        v163 = v157;
        sub_100022258(*(_QWORD *)(v87 + 56) + 32 * v161, (uint64_t)v155);
      }
      else
      {
        v163 = v157;
        *v155 = 0u;
        *(_OWORD *)(v411 + 9) = 0u;
      }
      v1 = v411;
      v400 = v411[98];
      v166 = v411[91];
      swift_bridgeObjectRelease(v160);
      v167 = sub_10000629C(&qword_1000B3420);
      v168 = String.init<A>(describing:)(v155, v167);
      v170 = v169;
      v411[56] = sub_100021438(v168, v169, v424);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v411 + 56, v83, v156 + 4, v156 + 12);
      swift_bridgeObjectRelease(v170);
      swift_bridgeObjectRelease_n(v87, 2);
      _os_log_impl((void *)&_mh_execute_header, v153, v154, "MAD returned watchFaceData as %s", v156, 0xCu);
      swift_arrayDestroy(v163, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v163, -1, -1);
      swift_slowDealloc(v156, -1, -1);

      v109 = v400;
      v110 = v166;
      goto LABEL_44;
    }
    v164 = v411[98];
    v165 = v411[91];
    swift_bridgeObjectRelease_n(v87, 2);

    v65 = v164;
    v66 = v165;
    goto LABEL_25;
  }
  if ((swift_dynamicCast(v411 + 43, v86, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
    swift_release(v411[105]);
    v151 = swift_bridgeObjectRelease(v44);
    goto LABEL_59;
  }
  v124 = v411[43];
  v123 = v411[44];
  v411[119] = v124;
  v411[120] = v123;
  sub_10001B334(0, &qword_1000B3438, NSKeyedUnarchiver_ptr);
  v125 = sub_10001B334(0, &qword_1000B3440, PFCStoredPhoto_ptr);
  v126 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v125, v124, v123, v125);
  v411[121] = v126;
  v411[122] = 0;
  if (!v126)
  {
    v174 = v123;
    v1 = v411;
    swift_release(v411[105]);
    swift_bridgeObjectRelease(v87);
    v127 = v36;
    v175 = swift_bridgeObjectRelease(v44);
    v128 = static Log.default.getter(v175);
    v129 = Logger.logObject.getter(v128);
    v130 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v129, v130))
    {
      v131 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v131 = 0;
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "MAD watchFaceData cannot be unarchived", v131, 2u);
      swift_slowDealloc(v131, -1, -1);
    }
    v132 = (void *)v411[110];
    v133 = (void *)v411[109];
    v134 = v411[99];
    v135 = v411[91];

    v127(v134, v135);
    v136 = sub_10004E36C();
    v137 = swift_allocError(&type metadata for PhonePhotoProcessorError, v136, 0, 0);
    *v138 = 3;
    swift_willThrow(v137);

    sub_1000063CC(v124, v174);
    goto LABEL_47;
  }
  v1 = v411;
  v171 = objc_msgSend((id)v411[109], "mainFileURL");
  if (v171)
  {
    v172 = v171;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v173 = 0;
  }
  else
  {
    v173 = 1;
  }
  v176 = v411[90];
  v177 = v411[89];
  v178 = v411[88];
  v179 = v411[81];
  v180 = v411[80];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v179 + 56))(v177, v173, 1, v180);
  sub_10004E400(v177, v176, &qword_1000B3408);
  sub_10001FB38(v176, v178, &qword_1000B3408);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v179 + 48))(v178, 1, v180) == 1)
  {
    v182 = 0;
  }
  else
  {
    v183 = v411[88];
    v184 = v411[81];
    v185 = v411[80];
    URL._bridgeToObjectiveC()(v181);
    v182 = v186;
    (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v183, v185);
  }
  v187 = (id)UIAccessibilityMetadataDescriptionForImage(v182);

  if (v187)
  {
    v188 = v411[105];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v187);
    v190 = v189;

    swift_release(v188);
    v191 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v190);
  }
  else
  {
    v192 = objc_msgSend((id)objc_opt_self(AXSettings), "sharedInstance");
    v193 = objc_msgSend(v192, "gizmoApplicationAccessibilityEnabled");

    if (v193)
    {
      v194 = (_QWORD *)swift_task_alloc(dword_1000B345C);
      v411[123] = v194;
      *v194 = v411;
      v194[1] = sub_100045838;
      return sub_100049150(v411[90]);
    }
    swift_release(v411[105]);
    v191 = 0;
  }
  v195 = v411[118];
  objc_msgSend((id)v411[121], "setAccessibilityDescription:", v191);

  v196 = MediaAnalysisResultWatchFacePathAttributeKey;
  v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(MediaAnalysisResultWatchFacePathAttributeKey);
  v199 = v198;
  if (*(_QWORD *)(v195 + 16) && (v200 = sub_10004A464(v197, v198), (v201 & 1) != 0))
  {
    sub_100022258(*(_QWORD *)(v411[118] + 56) + 32 * v200, (uint64_t)(v411 + 27));
  }
  else
  {
    *(_OWORD *)(v411 + 27) = 0u;
    *(_OWORD *)(v411 + 29) = 0u;
  }
  swift_bridgeObjectRelease(v411[118]);
  swift_bridgeObjectRelease(v199);
  if (!v411[30])
  {
    v202 = sub_10000EA70((uint64_t)(v411 + 27), &qword_1000B3420);
    goto LABEL_93;
  }
  v202 = swift_dynamicCast(v411 + 45, v411 + 27, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((v202 & 1) == 0)
  {
LABEL_93:
    v215 = v411[117];
    static Log.default.getter(v202);
    v216 = swift_bridgeObjectRetain(v215);
    v217 = Logger.logObject.getter(v216);
    v218 = static os_log_type_t.error.getter();
    v219 = os_log_type_enabled(v217, v218);
    v220 = v411[117];
    if (v219)
    {
      v221 = v411 + 31;
      v222 = (uint8_t *)swift_slowAlloc(12, -1);
      v223 = swift_slowAlloc(32, -1);
      v424[0] = v223;
      *(_DWORD *)v222 = 136315138;
      v224 = static String._unconditionallyBridgeFromObjectiveC(_:)(v196);
      v226 = v225;
      if (*(_QWORD *)(v220 + 16) && (v227 = sub_10004A464(v224, v225), (v228 & 1) != 0))
      {
        sub_100022258(*(_QWORD *)(v411[117] + 56) + 32 * v227, (uint64_t)(v411 + 31));
      }
      else
      {
        *v221 = 0u;
        *(_OWORD *)(v411 + 33) = 0u;
      }
      v232 = v411[117];
      v233 = (void (*)(uint64_t, uint64_t))v411[116];
      v234 = v411[100];
      v235 = v411[91];
      swift_bridgeObjectRelease(v226);
      v236 = sub_10000629C(&qword_1000B3420);
      v237 = String.init<A>(describing:)(v221, v236);
      v239 = v238;
      v411[58] = sub_100021438(v237, v238, v424);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v411 + 58, v411 + 59, v222 + 4, v222 + 12);
      swift_bridgeObjectRelease(v239);
      v240 = v232;
      v1 = v411;
      swift_bridgeObjectRelease_n(v240, 2);
      _os_log_impl((void *)&_mh_execute_header, v217, v218, "MAD returned watchFacePath as %s", v222, 0xCu);
      swift_arrayDestroy(v223, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v223, -1, -1);
      swift_slowDealloc(v222, -1, -1);

      v233(v234, v235);
    }
    else
    {
      v229 = (void (*)(uint64_t, uint64_t))v411[116];
      v230 = v411[100];
      v231 = v411[91];
      swift_bridgeObjectRelease_n(v411[117], 2);

      v229(v230, v231);
    }
    v241 = (void *)v1[121];
    v242 = v1[120];
    v243 = v1[119];
    v244 = (void *)v1[110];
    v245 = (void *)v1[109];
    v246 = v1[90];
    v247 = sub_10004E36C();
    v248 = swift_allocError(&type metadata for PhonePhotoProcessorError, v247, 0, 0);
    *v249 = 4;
    swift_willThrow(v248);

    sub_1000063CC(v243, v242);
    goto LABEL_101;
  }
  swift_bridgeObjectRelease(v411[117]);
  v204 = v411[45];
  v203 = v411[46];
  v205 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.init(fileURLWithPath:)(v204, v203);
  v206 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v203);
  v411[60] = 0;
  v409 = v205;
  v207 = objc_msgSend(v205, "contentsOfDirectoryAtPath:error:", v206, v411 + 60);

  v208 = (void *)v411[60];
  if (!v207)
  {
    v251 = v411[87];
    v252 = v411[84];
    v253 = v411[81];
    v254 = v411[80];
    v255 = v208;
    v256 = _convertNSErrorToError(_:)(v208);

    swift_willThrow(v257);
    v258 = swift_errorRelease(v256);
    static Log.default.getter(v258);
    v259 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v253 + 16))(v252, v251, v254);
    v260 = Logger.logObject.getter(v259);
    v261 = static os_log_type_t.error.getter();
    v262 = os_log_type_enabled(v260, v261);
    v417 = (void (*)(uint64_t, uint64_t))v411[116];
    v393 = v411[91];
    v401 = v411[101];
    v263 = v411[84];
    v264 = v411[81];
    v265 = v411[80];
    if (v262)
    {
      v266 = (uint8_t *)swift_slowAlloc(12, -1);
      v267 = swift_slowAlloc(32, -1);
      v424[0] = v267;
      *(_DWORD *)v266 = 136315138;
      v268 = sub_100009174(&qword_1000B3448, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v269 = dispatch thunk of CustomStringConvertible.description.getter(v265, v268);
      v271 = v270;
      v411[61] = sub_100021438(v269, v270, v424);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v411 + 61, v411 + 62, v266 + 4, v266 + 12);
      swift_bridgeObjectRelease(v271);
      v385 = *(void (**)(uint64_t, uint64_t))(v264 + 8);
      v385(v263, v265);
      _os_log_impl((void *)&_mh_execute_header, v260, v261, "MAD cannot list content of %s", v266, 0xCu);
      swift_arrayDestroy(v267, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v267, -1, -1);
      swift_slowDealloc(v266, -1, -1);
    }
    else
    {
      v385 = *(void (**)(uint64_t, uint64_t))(v264 + 8);
      v385(v263, v265);
    }

    v417(v401, v393);
    v1 = v411;
    v272 = (void *)v411[121];
    v273 = v411[120];
    v274 = v411[119];
    v275 = (void *)v411[110];
    v276 = (void *)v411[109];
    v246 = v411[90];
    v277 = v411[87];
    v278 = v411[80];
    v279 = sub_10004E36C();
    v280 = swift_allocError(&type metadata for PhonePhotoProcessorError, v279, 0, 0);
    *v281 = 4;
    swift_willThrow(v280);

    sub_1000063CC(v274, v273);
    v385(v277, v278);
LABEL_101:
    v250 = v246;
LABEL_102:
    sub_10000EA70(v250, &qword_1000B3408);
    goto LABEL_47;
  }
  v209 = v411[72];
  v210 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v207, &type metadata for String);
  v211 = v208;

  if (!*(_QWORD *)(v209 + 16))
    goto LABEL_108;
  v212 = sub_10004A464(0xD000000000000014, 0x8000000100095100);
  if ((v213 & 1) == 0)
    goto LABEL_108;
  sub_100022258(*(_QWORD *)(v411[72] + 56) + 32 * v212, (uint64_t)(v411 + 39));
  if (!swift_dynamicCast(v383, v411 + 39, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
  {
    v1 = v411;
    goto LABEL_108;
  }
  v1 = v411;
  if ((*v383 & 1) == 0)
  {
LABEL_108:
    v214 = 2;
    goto LABEL_109;
  }
  v214 = 1;
LABEL_109:
  v371 = v214;
  v353 = *(_QWORD *)(v210 + 16);
  if (v353)
  {
    v362 = v1 + 51;
    v418 = v1[81];
    v366 = v1[78];
    v282 = enum case for URL.DirectoryHint.inferFromPath(_:);
    v283 = *(void (**)(uint64_t, uint64_t, uint64_t))(v366 + 104);
    typec = v1[86];
    v386 = v1[85];
    v284 = v1[79];
    v285 = v1[77];
    v402 = v1[122];
    v354 = v210;
    v288 = v210 + 32;
    v286 = *(_QWORD *)(v210 + 32);
    v287 = *(_QWORD *)(v288 + 8);
    v1[53] = v286;
    v1[54] = v287;
    v283(v284, v282, v285);
    v289 = sub_10004E444();
    swift_bridgeObjectRetain(v287);
    v359 = v1 + 53;
    URL.appending<A>(path:directoryHint:)(v1 + 53, v284, &type metadata for String, v289);
    v290 = *(void (**)(uint64_t, uint64_t))(v366 + 8);
    v290(v284, v285);
    v1[51] = v286;
    v1[52] = v287;
    v356 = v282;
    v355 = v283;
    v283(v284, v282, v285);
    URL.appending<A>(path:directoryHint:)(v1 + 51, v284, &type metadata for String, v289);
    v290(v284, v285);
    swift_bridgeObjectRelease(v287);
    sub_100022438(typec, v386, v371);
    v291 = v402;
    v292 = *(void (**)(uint64_t, uint64_t))(v418 + 8);
    v367 = v292;
    if (v402)
    {
      v293 = v1[87];
      v294 = v1[86];
      v295 = v1[83];
      v419 = v1[82];
      v296 = v1[81];
      v297 = v1[80];
      v298 = v1[71];
      v292(v1[85], v297);
      v292(v294, v297);
      v299 = swift_bridgeObjectRelease(v354);
      static Log.default.getter(v299);
      v300 = *(void (**)(uint64_t, uint64_t, uint64_t))(v296 + 16);
      v300(v295, v293, v297);
      v300(v419, v298, v297);
      swift_errorRetain(v402);
      v301 = swift_errorRetain(v402);
      v420 = Logger.logObject.getter(v301);
      type = static os_log_type_t.error.getter();
      v302 = os_log_type_enabled(v420, type);
      v394 = v1[93];
      v403 = (void (*)(uint64_t, uint64_t))v1[116];
      v387 = v1[91];
      v303 = v1[83];
      v304 = v1[82];
      v305 = v1[80];
      if (v302)
      {
        v306 = swift_slowAlloc(32, -1);
        v363 = (uint64_t *)swift_slowAlloc(8, -1);
        v372 = swift_slowAlloc(64, -1);
        v424[0] = v372;
        *(_DWORD *)v306 = 136315650;
        v307 = sub_100009174(&qword_1000B3448, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v308 = dispatch thunk of CustomStringConvertible.description.getter(v305, v307);
        v310 = v309;
        v411[65] = sub_100021438(v308, v309, v424);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v411 + 65, v411 + 66, v306 + 4, v306 + 12);
        swift_bridgeObjectRelease(v310);
        v367(v303, v305);
        *(_WORD *)(v306 + 12) = 2080;
        v311 = dispatch thunk of CustomStringConvertible.description.getter(v305, v307);
        v313 = v312;
        v411[66] = sub_100021438(v311, v312, v424);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v411 + 66, v411 + 67, v306 + 14, v306 + 22);
        swift_bridgeObjectRelease(v313);
        v367(v304, v305);
        *(_WORD *)(v306 + 22) = 2112;
        swift_errorRetain(v291);
        v314 = _swift_stdlib_bridgeErrorToNSError(v291);
        v411[67] = v314;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v411 + 67, v380, v306 + 24, v306 + 32);
        *v363 = v314;
        swift_errorRelease(v291);
        swift_errorRelease(v291);
        _os_log_impl((void *)&_mh_execute_header, v420, type, "MAD: cannot copy results from %s to %s, error == %@", (uint8_t *)v306, 0x20u);
        v315 = sub_10000629C(&qword_1000B20C0);
        swift_arrayDestroy(v363, 1, v315);
        swift_slowDealloc(v363, -1, -1);
        swift_arrayDestroy(v372, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v372, -1, -1);
        swift_slowDealloc(v306, -1, -1);
      }
      else
      {
        v292(v1[83], v1[80]);
        v292(v304, v305);
        swift_errorRelease(v291);
        swift_errorRelease(v291);
      }

      v403(v394, v387);
      v1 = v411;
      v319 = (void *)v411[121];
      v320 = v411[120];
      v321 = v411[119];
      v322 = (void *)v411[110];
      v323 = (void *)v411[109];
      v422 = v411[90];
      v324 = v411[87];
      v325 = v411[80];
      v326 = sub_10004E36C();
      v327 = swift_allocError(&type metadata for PhonePhotoProcessorError, v326, 0, 0);
      *v328 = 5;
      swift_willThrow(v327);

      sub_1000063CC(v321, v320);
      swift_errorRelease(v291);

      swift_errorRelease(0);
      v367(v324, v325);
      v250 = v422;
      goto LABEL_102;
    }
    v317 = v1[86];
    v318 = v1[80];
    v292(v1[85], v318);
    v292(v317, v318);
    v421 = v353 - 1;
    if (v353 == 1)
    {
      v316 = 0;
      v1 = v411;
    }
    else
    {
      v329 = (uint64_t *)(v354 + 56);
      v1 = v411;
      do
      {
        v388 = v411[85];
        v395 = v411[86];
        v330 = v411[79];
        v331 = v411[77];
        v332 = *v329;
        *(_QWORD *)typed = *(v329 - 1);
        v411[53] = *(_QWORD *)typed;
        v411[54] = v332;
        v355(v330, v356, v331);
        swift_bridgeObjectRetain(v332);
        URL.appending<A>(path:directoryHint:)(v359, v330, &type metadata for String, v289);
        v290(v330, v331);
        v411[51] = *(_QWORD *)typed;
        v411[52] = v332;
        v355(v330, v356, v331);
        URL.appending<A>(path:directoryHint:)(v362, v330, &type metadata for String, v289);
        v290(v330, v331);
        swift_bridgeObjectRelease(v332);
        sub_100022438(v395, v388, v371);
        v329 += 2;
        v333 = v411[86];
        v334 = v411[80];
        v292(v411[85], v334);
        v292(v333, v334);
        --v421;
      }
      while (v421);
      v316 = 0;
    }
    v210 = v354;
  }
  else
  {
    v316 = v1[122];
  }
  v335 = v1[87];
  swift_bridgeObjectRelease(v210);
  sub_100022294(v335, 1);
  v336 = v1[120];
  v337 = v1[119];
  v338 = (void *)v1[109];
  v339 = v1[90];
  v340 = v1[87];
  v341 = v1[81];
  v342 = v1[80];

  sub_1000063CC(v337, v336);
  swift_errorRelease(0);
  (*(void (**)(uint64_t, uint64_t))(v341 + 8))(v340, v342);
  sub_10000EA70(v339, &qword_1000B3408);
  if (v316)
    swift_errorRelease(v316);
  v343 = v1[103];
  v344 = v1[102];
  v345 = v1[101];
  v346 = v1[100];
  v347 = v1[99];
  v348 = v1[98];
  v349 = v411[97];
  v350 = v411[96];
  v351 = v411[95];
  v352 = v411[94];
  v357 = v411[93];
  v360 = v411[90];
  v364 = v411[89];
  v368 = v411[88];
  v373 = v411[87];
  *(_QWORD *)typee = v411[86];
  v382 = v411[85];
  v389 = v411[84];
  v396 = v411[83];
  v404 = v411[82];
  v410 = v411[79];
  v423 = v411[76];
  swift_bridgeObjectRelease(v411[64]);
  swift_task_dealloc(v343);
  swift_task_dealloc(v344);
  swift_task_dealloc(v345);
  swift_task_dealloc(v346);
  swift_task_dealloc(v347);
  swift_task_dealloc(v348);
  swift_task_dealloc(v349);
  swift_task_dealloc(v350);
  swift_task_dealloc(v351);
  swift_task_dealloc(v352);
  swift_task_dealloc(v357);
  swift_task_dealloc(v360);
  swift_task_dealloc(v364);
  swift_task_dealloc(v368);
  swift_task_dealloc(v373);
  swift_task_dealloc(*(_QWORD *)typee);
  swift_task_dealloc(v382);
  swift_task_dealloc(v389);
  swift_task_dealloc(v396);
  swift_task_dealloc(v404);
  swift_task_dealloc(v410);
  swift_task_dealloc(v423);
  return ((uint64_t (*)(_QWORD))v411[1])(v411[121]);
}

uint64_t sub_100045838(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 984);
  v3[124] = a1;
  v3[125] = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1000458C4, v3[107], v3[108]);
}

uint64_t sub_1000458C4()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  void (*isa)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  void (*v73)(uint64_t, os_log_t, uint64_t);
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  _BOOL4 v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  unint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v157;
  unint64_t v158;
  uint64_t v159;
  void *v160;
  void *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(uint64_t, uint64_t);
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(uint64_t, uint64_t, uint64_t);
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  unsigned __int8 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(uint64_t, uint64_t);
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(uint64_t, uint64_t);
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  os_log_t logb;
  os_log_t logc;
  os_log_t logd;
  NSObject *log;
  os_log_t loga;
  os_log_t loge;
  os_log_t logf;
  os_log_t logg;
  void *v225;
  void (*v226)(os_log_t, uint64_t);
  uint64_t v227;
  uint64_t v228;
  uint64_t v229[2];

  swift_release(*(_QWORD *)(v0 + 840));
  v1 = *(_QWORD *)(v0 + 1000);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v3 = *(_QWORD *)(v0 + 944);
  objc_msgSend(*(id *)(v0 + 968), "setAccessibilityDescription:", v2);

  v4 = MediaAnalysisResultWatchFacePathAttributeKey;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(MediaAnalysisResultWatchFacePathAttributeKey);
  v7 = v6;
  if (*(_QWORD *)(v3 + 16) && (v8 = sub_10004A464(v5, v6), (v9 & 1) != 0))
  {
    sub_100022258(*(_QWORD *)(*(_QWORD *)(v0 + 944) + 56) + 32 * v8, v0 + 216);
  }
  else
  {
    *(_OWORD *)(v0 + 216) = 0u;
    *(_OWORD *)(v0 + 232) = 0u;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 944));
  swift_bridgeObjectRelease(v7);
  if (!*(_QWORD *)(v0 + 240))
  {
    v10 = sub_10000EA70(v0 + 216, &qword_1000B3420);
    goto LABEL_14;
  }
  v10 = swift_dynamicCast(v0 + 360, v0 + 216, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((v10 & 1) == 0)
  {
LABEL_14:
    v23 = *(_QWORD *)(v0 + 936);
    static Log.default.getter(v10);
    v24 = swift_bridgeObjectRetain(v23);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(_QWORD *)(v0 + 936);
    if (v27)
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v229[0] = v30;
      *(_DWORD *)v29 = 136315138;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v33 = v32;
      if (*(_QWORD *)(v28 + 16) && (v34 = sub_10004A464(v31, v32), (v35 & 1) != 0))
      {
        v36 = v0 + 464;
        sub_100022258(*(_QWORD *)(*(_QWORD *)(v0 + 936) + 56) + 32 * v34, v0 + 248);
      }
      else
      {
        v36 = v0 + 464;
        *(_OWORD *)(v0 + 248) = 0u;
        *(_OWORD *)(v0 + 264) = 0u;
      }
      v40 = *(_QWORD *)(v0 + 936);
      v226 = *(void (**)(os_log_t, uint64_t))(v0 + 928);
      logb = *(os_log_t *)(v0 + 800);
      v41 = *(_QWORD *)(v0 + 728);
      swift_bridgeObjectRelease(v33);
      v42 = sub_10000629C(&qword_1000B3420);
      v43 = String.init<A>(describing:)(v0 + 248, v42);
      v45 = v44;
      *(_QWORD *)(v0 + 464) = sub_100021438(v43, v44, v229);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, v0 + 472, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease_n(v40, 2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "MAD returned watchFacePath as %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      v226(logb, v41);
    }
    else
    {
      v37 = *(void (**)(uint64_t, uint64_t))(v0 + 928);
      v38 = *(_QWORD *)(v0 + 800);
      v39 = *(_QWORD *)(v0 + 728);
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 936), 2);

      v37(v38, v39);
    }
    v46 = *(void **)(v0 + 968);
    v47 = *(_QWORD *)(v0 + 960);
    v48 = *(_QWORD *)(v0 + 952);
    v49 = *(void **)(v0 + 880);
    v50 = *(void **)(v0 + 872);
    v51 = *(_QWORD *)(v0 + 720);
    v52 = sub_10004E36C();
    v53 = swift_allocError(&type metadata for PhonePhotoProcessorError, v52, 0, 0);
    *v54 = 4;
    swift_willThrow(v53);

    sub_1000063CC(v48, v47);
    goto LABEL_41;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 936));
  v11 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.init(fileURLWithPath:)(v11, v12);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(v0 + 480) = 0;
  v225 = v13;
  v15 = objc_msgSend(v13, "contentsOfDirectoryAtPath:error:", v14, v0 + 480);

  v16 = *(void **)(v0 + 480);
  if (!v15)
  {
    v94 = *(_QWORD *)(v0 + 696);
    v95 = *(_QWORD *)(v0 + 672);
    v96 = *(_QWORD *)(v0 + 648);
    v97 = *(_QWORD *)(v0 + 640);
    v98 = v16;
    v99 = _convertNSErrorToError(_:)(v16);

    swift_willThrow(v100);
    v101 = swift_errorRelease(v99);
    static Log.default.getter(v101);
    v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 16))(v95, v94, v97);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.error.getter();
    v105 = os_log_type_enabled(v103, v104);
    v106 = *(void (**)(uint64_t, uint64_t))(v0 + 928);
    v107 = *(_QWORD *)(v0 + 808);
    v108 = *(_QWORD *)(v0 + 728);
    v109 = *(_QWORD *)(v0 + 672);
    v110 = *(_QWORD *)(v0 + 648);
    v111 = *(_QWORD *)(v0 + 640);
    if (v105)
    {
      v213 = *(_QWORD *)(v0 + 728);
      v207 = *(void (**)(uint64_t, uint64_t))(v0 + 928);
      v112 = (uint8_t *)swift_slowAlloc(12, -1);
      v113 = swift_slowAlloc(32, -1);
      v229[0] = v113;
      *(_DWORD *)v112 = 136315138;
      v114 = sub_100009174(&qword_1000B3448, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v115 = dispatch thunk of CustomStringConvertible.description.getter(v111, v114);
      v117 = v116;
      *(_QWORD *)(v0 + 488) = sub_100021438(v115, v116, v229);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v112 + 4, v112 + 12);
      swift_bridgeObjectRelease(v117);
      loga = *(os_log_t *)(v110 + 8);
      ((void (*)(uint64_t, uint64_t))loga)(v109, v111);
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "MAD cannot list content of %s", v112, 0xCu);
      swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v113, -1, -1);
      swift_slowDealloc(v112, -1, -1);

      v207(v107, v213);
    }
    else
    {
      loga = *(os_log_t *)(v110 + 8);
      ((void (*)(_QWORD, _QWORD))loga)(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 640));

      v106(v107, v108);
    }
    v119 = *(void **)(v0 + 968);
    v120 = *(_QWORD *)(v0 + 960);
    v121 = *(_QWORD *)(v0 + 952);
    v122 = *(void **)(v0 + 880);
    v123 = *(void **)(v0 + 872);
    v51 = *(_QWORD *)(v0 + 720);
    v124 = *(_QWORD *)(v0 + 696);
    v125 = *(_QWORD *)(v0 + 640);
    v126 = sub_10004E36C();
    v127 = swift_allocError(&type metadata for PhonePhotoProcessorError, v126, 0, 0);
    *v128 = 4;
    swift_willThrow(v127);

    sub_1000063CC(v121, v120);
    ((void (*)(uint64_t, uint64_t))loga)(v124, v125);
    goto LABEL_41;
  }
  v17 = *(_QWORD *)(v0 + 576);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, &type metadata for String);
  v19 = v16;

  if (*(_QWORD *)(v17 + 16)
    && (v20 = sub_10004A464(0xD000000000000014, 0x8000000100095100), (v21 & 1) != 0)
    && (sub_100022258(*(_QWORD *)(*(_QWORD *)(v0 + 576) + 56) + 32 * v20, v0 + 312),
        swift_dynamicCast(v0 + 1008, v0 + 312, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))&& (*(_BYTE *)(v0 + 1008) & 1) != 0)
  {
    v22 = 1;
  }
  else
  {
    v22 = 2;
  }
  if (*(_QWORD *)(v18 + 16))
  {
    v175 = *(_QWORD *)(v18 + 16);
    logc = *(os_log_t *)(v0 + 648);
    v197 = *(_QWORD *)(v0 + 624);
    v55 = enum case for URL.DirectoryHint.inferFromPath(_:);
    v187 = *(void (**)(uint64_t, uint64_t, uint64_t))(v197 + 104);
    v56 = *(_QWORD *)(v0 + 688);
    v201 = *(_QWORD *)(v0 + 680);
    v57 = *(_QWORD *)(v0 + 632);
    v193 = v22;
    v58 = *(_QWORD *)(v0 + 616);
    v211 = *(_QWORD *)(v0 + 976);
    v59 = v18;
    v60 = *(_QWORD *)(v18 + 40);
    v176 = v59;
    v61 = *(_QWORD *)(v59 + 32);
    *(_QWORD *)(v0 + 424) = v61;
    *(_QWORD *)(v0 + 432) = v60;
    v187(v57, v55, v58);
    v62 = sub_10004E444();
    swift_bridgeObjectRetain(v60);
    URL.appending<A>(path:directoryHint:)(v0 + 424, v57, &type metadata for String, v62);
    v63 = *(void (**)(uint64_t, uint64_t))(v197 + 8);
    v63(v57, v58);
    *(_QWORD *)(v0 + 408) = v61;
    *(_QWORD *)(v0 + 416) = v60;
    v182 = v55;
    v187(v57, v55, v58);
    v179 = v62;
    URL.appending<A>(path:directoryHint:)(v0 + 408, v57, &type metadata for String, v62);
    v63(v57, v58);
    swift_bridgeObjectRelease(v60);
    sub_100022438(v56, v201, v193);
    v64 = v211;
    isa = (void (*)(uint64_t, uint64_t))logc[1].isa;
    v198 = isa;
    if (v211)
    {
      logd = *(os_log_t *)(v0 + 696);
      v66 = *(_QWORD *)(v0 + 688);
      v67 = *(_QWORD *)(v0 + 664);
      v68 = *(_QWORD *)(v0 + 656);
      v69 = *(_QWORD *)(v0 + 648);
      v70 = *(_QWORD *)(v0 + 640);
      v71 = *(NSObject **)(v0 + 568);
      isa(*(_QWORD *)(v0 + 680), v70);
      isa(v66, v70);
      v72 = swift_bridgeObjectRelease(v176);
      static Log.default.getter(v72);
      v73 = *(void (**)(uint64_t, os_log_t, uint64_t))(v69 + 16);
      v73(v67, logd, v70);
      v73(v68, v71, v70);
      swift_errorRetain(v211);
      v74 = swift_errorRetain(v211);
      v75 = Logger.logObject.getter(v74);
      v76 = static os_log_type_t.error.getter();
      log = v75;
      v77 = os_log_type_enabled(v75, v76);
      v78 = *(void (**)(uint64_t, uint64_t))(v0 + 928);
      v79 = *(_QWORD *)(v0 + 744);
      v80 = *(_QWORD *)(v0 + 728);
      v81 = *(_QWORD *)(v0 + 664);
      v82 = *(_QWORD *)(v0 + 656);
      v83 = *(_QWORD *)(v0 + 640);
      if (v77)
      {
        v212 = *(void (**)(uint64_t, uint64_t))(v0 + 928);
        v84 = swift_slowAlloc(32, -1);
        v188 = (uint64_t *)swift_slowAlloc(8, -1);
        v202 = swift_slowAlloc(64, -1);
        v229[0] = v202;
        *(_DWORD *)v84 = 136315650;
        v206 = v80;
        v85 = sub_100009174(&qword_1000B3448, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v86 = dispatch thunk of CustomStringConvertible.description.getter(v83, v85);
        v194 = v79;
        v88 = v87;
        *(_QWORD *)(v0 + 520) = sub_100021438(v86, v87, v229);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 520, v0 + 528, v84 + 4, v84 + 12);
        swift_bridgeObjectRelease(v88);
        v198(v81, v83);
        *(_WORD *)(v84 + 12) = 2080;
        v89 = dispatch thunk of CustomStringConvertible.description.getter(v83, v85);
        v91 = v90;
        *(_QWORD *)(v0 + 528) = sub_100021438(v89, v90, v229);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 528, v0 + 536, v84 + 14, v84 + 22);
        swift_bridgeObjectRelease(v91);
        v198(v82, v83);
        *(_WORD *)(v84 + 22) = 2112;
        swift_errorRetain(v64);
        v92 = _swift_stdlib_bridgeErrorToNSError(v64);
        *(_QWORD *)(v0 + 536) = v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 536, v0 + 544, v84 + 24, v84 + 32);
        *v188 = v92;
        swift_errorRelease(v64);
        swift_errorRelease(v64);
        _os_log_impl((void *)&_mh_execute_header, log, v76, "MAD: cannot copy results from %s to %s, error == %@", (uint8_t *)v84, 0x20u);
        v93 = sub_10000629C(&qword_1000B20C0);
        swift_arrayDestroy(v188, 1, v93);
        swift_slowDealloc(v188, -1, -1);
        swift_arrayDestroy(v202, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v202, -1, -1);
        swift_slowDealloc(v84, -1, -1);

        v212(v194, v206);
      }
      else
      {
        v198(*(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 640));
        v198(v82, v83);
        swift_errorRelease(v211);
        swift_errorRelease(v211);

        v78(v79, v80);
      }
      v157 = *(void **)(v0 + 968);
      v158 = *(_QWORD *)(v0 + 960);
      v159 = *(_QWORD *)(v0 + 952);
      v160 = *(void **)(v0 + 880);
      v161 = *(void **)(v0 + 872);
      v51 = *(_QWORD *)(v0 + 720);
      logf = *(os_log_t *)(v0 + 696);
      v162 = *(_QWORD *)(v0 + 640);
      v163 = sub_10004E36C();
      v164 = swift_allocError(&type metadata for PhonePhotoProcessorError, v163, 0, 0);
      *v165 = 5;
      swift_willThrow(v164);

      sub_1000063CC(v159, v158);
      swift_errorRelease(v64);

      swift_errorRelease(0);
      v198((uint64_t)logf, v162);
LABEL_41:
      sub_10000EA70(v51, &qword_1000B3408);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 512));
      v166 = *(_QWORD *)(v0 + 816);
      v167 = *(_QWORD *)(v0 + 808);
      v168 = *(_QWORD *)(v0 + 800);
      v169 = *(_QWORD *)(v0 + 792);
      v170 = *(_QWORD *)(v0 + 784);
      v171 = *(_QWORD *)(v0 + 776);
      v172 = *(_QWORD *)(v0 + 768);
      v173 = *(_QWORD *)(v0 + 760);
      v174 = *(_QWORD *)(v0 + 752);
      v181 = *(_QWORD *)(v0 + 744);
      v184 = *(_QWORD *)(v0 + 720);
      v186 = *(_QWORD *)(v0 + 712);
      v190 = *(_QWORD *)(v0 + 704);
      *(_QWORD *)typea = *(_QWORD *)(v0 + 696);
      v196 = *(_QWORD *)(v0 + 688);
      v200 = *(_QWORD *)(v0 + 680);
      v205 = *(_QWORD *)(v0 + 672);
      v210 = *(_QWORD *)(v0 + 664);
      v216 = *(_QWORD *)(v0 + 656);
      logg = *(os_log_t *)(v0 + 632);
      v228 = *(_QWORD *)(v0 + 608);
      swift_task_dealloc(*(_QWORD *)(v0 + 824));
      swift_task_dealloc(v166);
      swift_task_dealloc(v167);
      swift_task_dealloc(v168);
      swift_task_dealloc(v169);
      swift_task_dealloc(v170);
      swift_task_dealloc(v171);
      swift_task_dealloc(v172);
      swift_task_dealloc(v173);
      swift_task_dealloc(v174);
      swift_task_dealloc(v181);
      swift_task_dealloc(v184);
      swift_task_dealloc(v186);
      swift_task_dealloc(v190);
      swift_task_dealloc(*(_QWORD *)typea);
      swift_task_dealloc(v196);
      swift_task_dealloc(v200);
      swift_task_dealloc(v205);
      swift_task_dealloc(v210);
      swift_task_dealloc(v216);
      swift_task_dealloc(logg);
      swift_task_dealloc(v228);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v177 = v63;
    v129 = *(_QWORD *)(v0 + 688);
    v130 = *(_QWORD *)(v0 + 640);
    isa(*(_QWORD *)(v0 + 680), v130);
    isa(v129, v130);
    v131 = v175 - 1;
    if (v175 != 1)
    {
      v132 = (uint64_t *)(v176 + 56);
      do
      {
        v203 = v131;
        v208 = *(_QWORD *)(v0 + 680);
        v133 = *(_QWORD *)(v0 + 632);
        v134 = *(_QWORD *)(v0 + 616);
        v214 = *(_QWORD *)(v0 + 688);
        v136 = *(v132 - 1);
        v135 = *v132;
        *(_QWORD *)(v0 + 424) = v136;
        *(_QWORD *)(v0 + 432) = v135;
        v187(v133, v182, v134);
        swift_bridgeObjectRetain(v135);
        URL.appending<A>(path:directoryHint:)(v0 + 424, v133, &type metadata for String, v179);
        v177(v133, v134);
        *(_QWORD *)(v0 + 408) = v136;
        *(_QWORD *)(v0 + 416) = v135;
        v187(v133, v182, v134);
        URL.appending<A>(path:directoryHint:)(v0 + 408, v133, &type metadata for String, v179);
        v177(v133, v134);
        swift_bridgeObjectRelease(v135);
        sub_100022438(v214, v208, v193);
        v132 += 2;
        v137 = *(_QWORD *)(v0 + 688);
        v138 = *(_QWORD *)(v0 + 640);
        v198(*(_QWORD *)(v0 + 680), v138);
        v198(v137, v138);
        v131 = v203 - 1;
      }
      while (v203 != 1);
    }
    v118 = 0;
    v18 = v176;
  }
  else
  {
    v118 = *(_QWORD *)(v0 + 976);
  }
  v139 = *(_QWORD *)(v0 + 696);
  swift_bridgeObjectRelease(v18);
  sub_100022294(v139, 1);
  v140 = *(_QWORD *)(v0 + 960);
  v141 = *(_QWORD *)(v0 + 952);
  v142 = *(void **)(v0 + 872);
  v143 = *(_QWORD *)(v0 + 720);
  v144 = *(_QWORD *)(v0 + 696);
  v145 = *(_QWORD *)(v0 + 648);
  v146 = *(_QWORD *)(v0 + 640);

  sub_1000063CC(v141, v140);
  swift_errorRelease(0);
  (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v144, v146);
  sub_10000EA70(v143, &qword_1000B3408);
  if (v118)
    swift_errorRelease(v118);
  v147 = *(_QWORD *)(v0 + 824);
  v148 = *(_QWORD *)(v0 + 816);
  v149 = *(_QWORD *)(v0 + 808);
  v150 = *(_QWORD *)(v0 + 800);
  v151 = *(_QWORD *)(v0 + 792);
  v152 = *(_QWORD *)(v0 + 784);
  v153 = *(_QWORD *)(v0 + 776);
  v154 = *(_QWORD *)(v0 + 768);
  v155 = *(_QWORD *)(v0 + 760);
  v178 = *(_QWORD *)(v0 + 752);
  v180 = *(_QWORD *)(v0 + 744);
  v183 = *(_QWORD *)(v0 + 720);
  v185 = *(_QWORD *)(v0 + 712);
  v189 = *(_QWORD *)(v0 + 704);
  *(_QWORD *)type = *(_QWORD *)(v0 + 696);
  v195 = *(_QWORD *)(v0 + 688);
  v199 = *(_QWORD *)(v0 + 680);
  v204 = *(_QWORD *)(v0 + 672);
  v209 = *(_QWORD *)(v0 + 664);
  v215 = *(_QWORD *)(v0 + 656);
  loge = *(os_log_t *)(v0 + 632);
  v227 = *(_QWORD *)(v0 + 608);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 512));
  swift_task_dealloc(v147);
  swift_task_dealloc(v148);
  swift_task_dealloc(v149);
  swift_task_dealloc(v150);
  swift_task_dealloc(v151);
  swift_task_dealloc(v152);
  swift_task_dealloc(v153);
  swift_task_dealloc(v154);
  swift_task_dealloc(v155);
  swift_task_dealloc(v178);
  swift_task_dealloc(v180);
  swift_task_dealloc(v183);
  swift_task_dealloc(v185);
  swift_task_dealloc(v189);
  swift_task_dealloc(*(_QWORD *)type);
  swift_task_dealloc(v195);
  swift_task_dealloc(v199);
  swift_task_dealloc(v204);
  swift_task_dealloc(v209);
  swift_task_dealloc(v215);
  swift_task_dealloc(loge);
  swift_task_dealloc(v227);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 968));
}

uint64_t sub_10004697C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v5 = sub_10000629C(&qword_1000B33E8);
  v4[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000629C(&qword_1000B2B50);
  v4[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_10000629C(&qword_1000B33F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[13] = swift_task_alloc(v8);
  v4[14] = swift_task_alloc(v8);
  v9 = type metadata accessor for StoredPhoto(0);
  v4[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[16] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v11);
  v4[18] = swift_task_alloc(v11);
  v4[19] = swift_task_alloc(v11);
  v12 = type metadata accessor for UUID(0);
  v4[20] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[21] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v14);
  v4[23] = swift_task_alloc(v14);
  v4[24] = swift_task_alloc(v14);
  v4[25] = swift_task_alloc(v14);
  v4[26] = swift_task_alloc(v14);
  v15 = type metadata accessor for Logger(0);
  v4[27] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[28] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[29] = swift_task_alloc(v17);
  v4[30] = swift_task_alloc(v17);
  v18 = type metadata accessor for CommunicationActor(0);
  v4[31] = static CommunicationActor.shared.getter(v18);
  v19 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v20 = dispatch thunk of Actor.unownedExecutor.getter(v18, v19);
  v4[32] = v20;
  v4[33] = v21;
  return swift_task_switch(sub_100046B6C, v20, v21);
}

uint64_t sub_100046B6C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000B372C);
  *(_QWORD *)(v0 + 272) = v1;
  *v1 = v0;
  v1[1] = sub_100046BC0;
  return sub_10004FB58(*(_QWORD *)(v0 + 64));
}

uint64_t sub_100046BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 272);
  v4[35] = a1;
  v4[36] = a2;
  v4[37] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_10004812C;
  else
    v6 = sub_100046C2C;
  return swift_task_switch(v6, v4[32], v4[33]);
}

uint64_t sub_100046C2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void (*v39)(_QWORD, unint64_t, uint64_t);
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void (*v61)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  os_log_type_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(_QWORD);
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t);
  uint64_t v124;
  _QWORD *v125;

  v2 = *(_QWORD *)(v1 + 280);
  static Log.photos.getter(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v116 = v5;
    v6 = *(_QWORD *)(v1 + 280);
    v7 = swift_slowAlloc(22, -1);
    v113 = swift_slowAlloc(32, -1);
    v124 = v113;
    *(_DWORD *)v7 = 134218242;
    v8 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v1 + 24) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2080;
    v9 = &_swiftEmptyArrayStorage;
    if (v8)
    {
      v108 = v7;
      v110 = v4;
      v10 = *(_QWORD *)(v1 + 280);
      v11 = *(_QWORD *)(v1 + 168);
      v12 = *(_QWORD *)(v1 + 128);
      v125 = &_swiftEmptyArrayStorage;
      sub_10004D740(0, v8, 0);
      v13 = v10 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      v119 = *(_QWORD *)(v12 + 72);
      v14 = v12;
      v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
      v9 = &_swiftEmptyArrayStorage;
      do
      {
        v16 = *(_QWORD *)(v1 + 152);
        v17 = *(_QWORD *)(v1 + 120);
        v18 = v15(v16, v13, v17);
        StoredPhoto.localIdentifier.getter(v18);
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v17);
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        {
          sub_10004D740(0, v9[2] + 1, 1);
          v9 = v125;
        }
        v20 = v9[2];
        v19 = v9[3];
        if (v20 >= v19 >> 1)
        {
          sub_10004D740(v19 > 1, v20 + 1, 1);
          v9 = v125;
        }
        v21 = *(_QWORD *)(v1 + 208);
        v22 = *(_QWORD *)(v1 + 160);
        v9[2] = v20 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v20, v21, v22);
        v125 = v9;
        v13 += v119;
        --v8;
      }
      while (v8);
      v7 = v108;
      v4 = v110;
    }
    v27 = *(_QWORD *)(v1 + 280);
    v120 = *(_QWORD *)(v1 + 240);
    v29 = *(_QWORD *)(v1 + 216);
    v28 = *(_QWORD *)(v1 + 224);
    v30 = Array.description.getter(v9, *(_QWORD *)(v1 + 160));
    v32 = v31;
    swift_bridgeObjectRelease(v9);
    *(_QWORD *)(v1 + 32) = sub_100021438(v30, v32, &v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease_n(v27, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v116, "Had %ld cached photos: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v113, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v26 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v26(v120, v29);
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 240);
    v25 = *(_QWORD *)(v1 + 216);
    v24 = *(_QWORD *)(v1 + 224);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 280), 2);

    v26 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v26(v23, v25);
  }
  *(_QWORD *)(v1 + 304) = v26;
  v33 = *(_QWORD *)(v1 + 280);
  v34 = *(_QWORD *)(v33 + 16);
  *(_QWORD *)(v1 + 312) = v34;
  if (v34)
  {
    v35 = *(int **)(v1 + 40);
    v36 = *(_QWORD *)(v1 + 120);
    v37 = *(_QWORD *)(v1 + 128);
    v38 = *(_DWORD *)(v37 + 80);
    *(_DWORD *)(v1 + 440) = v38;
    *(_QWORD *)(v1 + 320) = *(_QWORD *)(v37 + 72);
    v39 = *(void (**)(_QWORD, unint64_t, uint64_t))(v37 + 16);
    *(_QWORD *)(v1 + 328) = v39;
    *(_QWORD *)(v1 + 336) = 0;
    v39(*(_QWORD *)(v1 + 144), v33 + ((v38 + 32) & ~(unint64_t)v38), v36);
    v121 = (uint64_t (*)(_QWORD))((char *)v35 + *v35);
    v40 = (_QWORD *)swift_task_alloc(v35[1]);
    *(_QWORD *)(v1 + 344) = v40;
    *v40 = v1;
    v40[1] = sub_1000474A0;
    return v121(*(_QWORD *)(v1 + 144));
  }
  v42 = *(_QWORD *)(v1 + 40);
  swift_bridgeObjectRelease(v33);
  *(_QWORD *)(v1 + 360) = v42;
  v43 = *(_QWORD *)(v1 + 288);
  v44 = *(_QWORD *)(v1 + 168);
  v45 = *(_QWORD *)(v43 + 16);
  *(_QWORD *)(v1 + 368) = v45;
  v46 = *(void (**)(uint64_t, uint64_t))(v1 + 304);
  result = swift_bridgeObjectRetain(v43);
  if (!v45)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v44 + 56))(*(_QWORD *)(v1 + 96), 1, 1, *(_QWORD *)(v1 + 160));
    v49 = *(_QWORD *)(v1 + 368);
LABEL_19:
    v63 = *(_QWORD *)(v1 + 104);
    v64 = *(_QWORD *)(v1 + 72);
    v65 = *(_QWORD *)(v1 + 80);
    sub_10000EA70(*(_QWORD *)(v1 + 96), &qword_1000B2B50);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v63, 1, 1, v64);
    v62 = 0;
    goto LABEL_20;
  }
  if (!*(_QWORD *)(result + 16))
  {
    __break(1u);
    goto LABEL_28;
  }
  v47 = *(_QWORD *)(v1 + 160);
  v48 = *(_QWORD *)(v1 + 96);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v44 + 16))(v48, result + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80)), v47);
  v49 = 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v48, 0, 1, v47);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v48, 1, v47) == 1)
    goto LABEL_19;
  v50 = *(_QWORD *)(v1 + 192);
  v51 = *(_QWORD *)(v1 + 160);
  v52 = *(_QWORD *)(v1 + 88);
  v53 = *(_QWORD *)(v1 + 72);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 168) + 32);
  v54(v50, *(_QWORD *)(v1 + 96), v51);
  v55 = v52 + *(int *)(v53 + 48);
  v54(v55, v50, v51);
  v56 = *(_QWORD *)(v1 + 160);
  v57 = *(_QWORD **)(v1 + 104);
  v58 = *(_QWORD *)(v1 + 72);
  v59 = *(_QWORD *)(v1 + 80);
  v60 = (char *)v57 + *(int *)(v58 + 48);
  *v57 = 0;
  v54((uint64_t)v60, v55, v56);
  v61 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56);
  v62 = 1;
  v61(v57, 0, 1, v58);
  v49 = 1;
LABEL_20:
  *(_QWORD *)(v1 + 376) = v62;
  *(_QWORD *)(v1 + 384) = v49;
  v66 = *(_QWORD *)(v1 + 112);
  v67 = *(_QWORD *)(v1 + 72);
  v68 = *(_QWORD *)(v1 + 80);
  sub_10004E400(*(_QWORD *)(v1 + 104), v66, &qword_1000B33F0);
  v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67);
  v70 = *(_QWORD *)(v1 + 288);
  if (v69 == 1)
  {
    v72 = *(_QWORD *)(v1 + 240);
    v71 = *(_QWORD *)(v1 + 248);
    v73 = *(_QWORD *)(v1 + 232);
    v75 = *(_QWORD *)(v1 + 200);
    v74 = *(_QWORD *)(v1 + 208);
    v76 = *(_QWORD *)(v1 + 184);
    v77 = *(_QWORD *)(v1 + 192);
    v78 = *(_QWORD *)(v1 + 176);
    v107 = *(_QWORD *)(v1 + 152);
    v109 = *(_QWORD *)(v1 + 144);
    v111 = *(_QWORD *)(v1 + 136);
    v112 = *(_QWORD *)(v1 + 112);
    v114 = *(_QWORD *)(v1 + 104);
    v117 = *(_QWORD *)(v1 + 96);
    v122 = *(_QWORD *)(v1 + 88);
    swift_bridgeObjectRelease_n(v70, 2);
    swift_release(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v117);
    swift_task_dealloc(v122);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v80 = *(_QWORD *)(v1 + 176);
  v79 = *(_QWORD *)(v1 + 184);
  v81 = *(_QWORD *)(v1 + 160);
  v82 = *(_QWORD *)(v1 + 168);
  v83 = *(char **)(v1 + 112);
  v84 = *(_QWORD *)v83;
  v85 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v82 + 32))(v79, &v83[*(int *)(*(_QWORD *)(v1 + 72) + 48)], v81);
  static Log.photos.getter(v85);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v80, v79, v81);
  v86 = swift_bridgeObjectRetain(v70);
  v87 = Logger.logObject.getter(v86);
  v88 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v87, v88))
  {
    v101 = *(_QWORD *)(v1 + 232);
    v102 = *(_QWORD *)(v1 + 216);
    v104 = *(_QWORD *)(v1 + 168);
    v103 = *(_QWORD *)(v1 + 176);
    v105 = *(_QWORD *)(v1 + 160);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 288));
    v100 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
    v100(v103, v105);

    v46(v101, v102);
    goto LABEL_26;
  }
  v89 = swift_slowAlloc(32, -1);
  result = swift_slowAlloc(32, -1);
  *(_QWORD *)(v1 + 16) = result;
  *(_DWORD *)v89 = 134218498;
  v90 = v84 + 1;
  if (!__OFADD__(v84, 1))
  {
    v91 = result;
    v92 = *(_QWORD *)(v1 + 288);
    v118 = *(_QWORD *)(v1 + 232);
    v123 = *(void (**)(uint64_t, uint64_t))(v1 + 304);
    v115 = *(_QWORD *)(v1 + 216);
    v94 = *(_QWORD *)(v1 + 168);
    v93 = *(_QWORD *)(v1 + 176);
    v95 = *(_QWORD *)(v1 + 160);
    *(_QWORD *)(v89 + 4) = v90;
    *(_WORD *)(v89 + 12) = 2048;
    *(_QWORD *)(v89 + 14) = *(_QWORD *)(v92 + 16);
    swift_bridgeObjectRelease(v92);
    *(_WORD *)(v89 + 22) = 2080;
    v96 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v97 = dispatch thunk of CustomStringConvertible.description.getter(v95, v96);
    v99 = v98;
    *(_QWORD *)(v89 + 24) = sub_100021438(v97, v98, (uint64_t *)(v1 + 16));
    swift_bridgeObjectRelease(v99);
    v100 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
    v100(v93, v95);
    _os_log_impl((void *)&_mh_execute_header, v87, v88, "Processing uncached photo (%ld/%ld): %s", (uint8_t *)v89, 0x20u);
    swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v91, -1, -1);
    swift_slowDealloc(v89, -1, -1);

    v123(v118, v115);
    v46 = *(void (**)(uint64_t, uint64_t))(v1 + 304);
LABEL_26:
    *(_QWORD *)(v1 + 392) = v100;
    *(_QWORD *)(v1 + 400) = v46;
    v106 = (_QWORD *)swift_task_alloc(dword_1000B33FC);
    *(_QWORD *)(v1 + 408) = v106;
    *v106 = v1;
    v106[1] = sub_100047AEC;
    return sub_10004856C(*(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 184));
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000474A0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 352) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[36];
    swift_bridgeObjectRelease(v2[35]);
    swift_bridgeObjectRelease(v4);
    v5 = v2[32];
    v6 = v2[33];
    v7 = sub_100048224;
  }
  else
  {
    v5 = v2[32];
    v6 = v2[33];
    v7 = sub_100047514;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_100047514(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(_QWORD, unint64_t, _QWORD);
  uint64_t v32;
  int *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(_QWORD);
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v1 + 312);
  v3 = *(_QWORD *)(v1 + 200);
  v4 = *(_QWORD *)(v1 + 160);
  v5 = *(_QWORD *)(v1 + 168);
  v6 = *(_QWORD *)(v1 + 144);
  v7 = *(_QWORD *)(v1 + 120);
  v8 = *(_QWORD *)(v1 + 128);
  v9 = *(_QWORD *)(v1 + 336) + 1;
  StoredPhoto.localIdentifier.getter(a1);
  sub_100054A08(v3, 0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  if (v9 != v2)
  {
    v31 = *(void (**)(_QWORD, unint64_t, _QWORD))(v1 + 328);
    v32 = *(_QWORD *)(v1 + 336) + 1;
    *(_QWORD *)(v1 + 336) = v32;
    v33 = *(int **)(v1 + 40);
    v31(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 280)+ ((*(unsigned __int8 *)(v1 + 440) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 440))+ *(_QWORD *)(v1 + 320) * v32, *(_QWORD *)(v1 + 120));
    v87 = (uint64_t (*)(_QWORD))((char *)v33 + *v33);
    v34 = (_QWORD *)swift_task_alloc(v33[1]);
    *(_QWORD *)(v1 + 344) = v34;
    *v34 = v1;
    v34[1] = sub_1000474A0;
    return v87(*(_QWORD *)(v1 + 144));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 280));
  *(_QWORD *)(v1 + 360) = *(_QWORD *)(v1 + 40);
  v10 = *(_QWORD *)(v1 + 288);
  v11 = *(_QWORD *)(v1 + 168);
  v12 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v1 + 368) = v12;
  v13 = *(void (**)(uint64_t, uint64_t))(v1 + 304);
  result = swift_bridgeObjectRetain(v10);
  if (!v12)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v11 + 56))(*(_QWORD *)(v1 + 96), 1, 1, *(_QWORD *)(v1 + 160));
    v17 = *(_QWORD *)(v1 + 368);
LABEL_8:
    v35 = *(_QWORD *)(v1 + 104);
    v36 = *(_QWORD *)(v1 + 72);
    v37 = *(_QWORD *)(v1 + 80);
    sub_10000EA70(*(_QWORD *)(v1 + 96), &qword_1000B2B50);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v35, 1, 1, v36);
    v30 = 0;
    goto LABEL_9;
  }
  if (!*(_QWORD *)(result + 16))
  {
    __break(1u);
    goto LABEL_17;
  }
  v15 = *(_QWORD *)(v1 + 160);
  v16 = *(_QWORD *)(v1 + 96);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(v16, result + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v15);
  v17 = 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v15);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v16, 1, v15) == 1)
    goto LABEL_8;
  v18 = *(_QWORD *)(v1 + 192);
  v19 = *(_QWORD *)(v1 + 160);
  v20 = *(_QWORD *)(v1 + 88);
  v21 = *(_QWORD *)(v1 + 72);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 168) + 32);
  v22(v18, *(_QWORD *)(v1 + 96), v19);
  v23 = v20 + *(int *)(v21 + 48);
  v22(v23, v18, v19);
  v24 = *(_QWORD *)(v1 + 160);
  v25 = *(_QWORD **)(v1 + 104);
  v26 = *(_QWORD *)(v1 + 72);
  v27 = *(_QWORD *)(v1 + 80);
  v28 = (char *)v25 + *(int *)(v26 + 48);
  *v25 = 0;
  v22((uint64_t)v28, v23, v24);
  v29 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56);
  v30 = 1;
  v29(v25, 0, 1, v26);
  v17 = 1;
LABEL_9:
  *(_QWORD *)(v1 + 376) = v30;
  *(_QWORD *)(v1 + 384) = v17;
  v38 = *(_QWORD *)(v1 + 112);
  v39 = *(_QWORD *)(v1 + 72);
  v40 = *(_QWORD *)(v1 + 80);
  sub_10004E400(*(_QWORD *)(v1 + 104), v38, &qword_1000B33F0);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39);
  v42 = *(_QWORD *)(v1 + 288);
  if (v41 == 1)
  {
    v44 = *(_QWORD *)(v1 + 240);
    v43 = *(_QWORD *)(v1 + 248);
    v45 = *(_QWORD *)(v1 + 232);
    v47 = *(_QWORD *)(v1 + 200);
    v46 = *(_QWORD *)(v1 + 208);
    v48 = *(_QWORD *)(v1 + 184);
    v49 = *(_QWORD *)(v1 + 192);
    v50 = *(_QWORD *)(v1 + 176);
    v79 = *(_QWORD *)(v1 + 152);
    v80 = *(_QWORD *)(v1 + 144);
    v81 = *(_QWORD *)(v1 + 136);
    v82 = *(_QWORD *)(v1 + 112);
    v83 = *(_QWORD *)(v1 + 104);
    v85 = *(_QWORD *)(v1 + 96);
    v88 = *(_QWORD *)(v1 + 88);
    swift_bridgeObjectRelease_n(v42, 2);
    swift_release(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v88);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v52 = *(_QWORD *)(v1 + 176);
  v51 = *(_QWORD *)(v1 + 184);
  v53 = *(_QWORD *)(v1 + 160);
  v54 = *(_QWORD *)(v1 + 168);
  v55 = *(char **)(v1 + 112);
  v56 = *(_QWORD *)v55;
  v57 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v54 + 32))(v51, &v55[*(int *)(*(_QWORD *)(v1 + 72) + 48)], v53);
  static Log.photos.getter(v57);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v52, v51, v53);
  v58 = swift_bridgeObjectRetain(v42);
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v59, v60))
  {
    v73 = *(_QWORD *)(v1 + 232);
    v74 = *(_QWORD *)(v1 + 216);
    v76 = *(_QWORD *)(v1 + 168);
    v75 = *(_QWORD *)(v1 + 176);
    v77 = *(_QWORD *)(v1 + 160);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 288));
    v72 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
    v72(v75, v77);

    v13(v73, v74);
    goto LABEL_15;
  }
  v61 = swift_slowAlloc(32, -1);
  result = swift_slowAlloc(32, -1);
  *(_QWORD *)(v1 + 16) = result;
  *(_DWORD *)v61 = 134218498;
  v62 = v56 + 1;
  if (!__OFADD__(v56, 1))
  {
    v63 = result;
    v64 = *(_QWORD *)(v1 + 288);
    v86 = *(_QWORD *)(v1 + 232);
    v89 = *(void (**)(uint64_t, uint64_t))(v1 + 304);
    v84 = *(_QWORD *)(v1 + 216);
    v66 = *(_QWORD *)(v1 + 168);
    v65 = *(_QWORD *)(v1 + 176);
    v67 = *(_QWORD *)(v1 + 160);
    *(_QWORD *)(v61 + 4) = v62;
    *(_WORD *)(v61 + 12) = 2048;
    *(_QWORD *)(v61 + 14) = *(_QWORD *)(v64 + 16);
    swift_bridgeObjectRelease(v64);
    *(_WORD *)(v61 + 22) = 2080;
    v68 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v69 = dispatch thunk of CustomStringConvertible.description.getter(v67, v68);
    v71 = v70;
    *(_QWORD *)(v61 + 24) = sub_100021438(v69, v70, (uint64_t *)(v1 + 16));
    swift_bridgeObjectRelease(v71);
    v72 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    v72(v65, v67);
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Processing uncached photo (%ld/%ld): %s", (uint8_t *)v61, 0x20u);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v61, -1, -1);

    v89(v86, v84);
    v13 = *(void (**)(uint64_t, uint64_t))(v1 + 304);
LABEL_15:
    *(_QWORD *)(v1 + 392) = v72;
    *(_QWORD *)(v1 + 400) = v13;
    v78 = (_QWORD *)swift_task_alloc(dword_1000B33FC);
    *(_QWORD *)(v1 + 408) = v78;
    *v78 = v1;
    v78[1] = sub_100047AEC;
    return sub_10004856C(*(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 184));
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_100047AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int *v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  v3 = *(_QWORD **)v1;
  v3[52] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease_n(v3[36], 2);
    return swift_task_switch(sub_100048334, v3[32], v3[33]);
  }
  else
  {
    v5 = (int *)v3[5];
    v7 = (uint64_t (*)(_QWORD))(v3[45] + *v5);
    v6 = (_QWORD *)swift_task_alloc(v5[1]);
    v3[53] = v6;
    *v6 = v3;
    v6[1] = sub_100047BA4;
    return v7(v3[17]);
  }
}

uint64_t sub_100047BA4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease_n(v2[36], 2);
    v4 = v2[32];
    v5 = v2[33];
    v6 = sub_100048444;
  }
  else
  {
    v4 = v2[32];
    v5 = v2[33];
    v6 = sub_100047C14;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100047C14()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void (*v5)(uint64_t, uint64_t);
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);

  v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 392);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  result = v1(v2, v3);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  v7 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 384);
  if (v6 != *(_QWORD *)(v0 + 368))
  {
    v9 = *(_QWORD *)(v0 + 288);
    if (v6 >= *(_QWORD *)(v9 + 16))
    {
      __break(1u);
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 160);
      v11 = *(_QWORD *)(v0 + 168);
      v12 = *(_QWORD *)(v0 + 96);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(v12, v9+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v6, v10);
      v8 = v6 + 1;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v12, 0, 1, v10);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10) == 1)
        goto LABEL_5;
      v16 = *(_QWORD *)(v0 + 192);
      v17 = *(_QWORD *)(v0 + 160);
      v18 = *(_QWORD *)(v0 + 88);
      v19 = *(_QWORD *)(v0 + 72);
      v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 32);
      v20(v16, *(_QWORD *)(v0 + 96), v17);
      v21 = v18 + *(int *)(v19 + 48);
      result = v20(v21, v16, v17);
      if (!__OFADD__(v7, 1))
      {
        v22 = *(_QWORD *)(v0 + 160);
        v23 = *(_QWORD **)(v0 + 104);
        v24 = *(_QWORD *)(v0 + 72);
        v25 = *(_QWORD *)(v0 + 80);
        v26 = (char *)v23 + *(int *)(v24 + 48);
        *v23 = v7;
        v20((uint64_t)v26, v21, v22);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v23, 0, 1, v24);
        ++v7;
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 56))(*(_QWORD *)(v0 + 96), 1, 1, *(_QWORD *)(v0 + 160));
  v8 = *(_QWORD *)(v0 + 368);
LABEL_5:
  v13 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 80);
  sub_10000EA70(*(_QWORD *)(v0 + 96), &qword_1000B2B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
LABEL_8:
  *(_QWORD *)(v0 + 376) = v7;
  *(_QWORD *)(v0 + 384) = v8;
  v27 = *(_QWORD *)(v0 + 112);
  v28 = *(_QWORD *)(v0 + 72);
  v29 = *(_QWORD *)(v0 + 80);
  sub_10004E400(*(_QWORD *)(v0 + 104), v27, &qword_1000B33F0);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28);
  v31 = *(_QWORD *)(v0 + 288);
  if (v30 == 1)
  {
    v33 = *(_QWORD *)(v0 + 240);
    v32 = *(_QWORD *)(v0 + 248);
    v34 = *(_QWORD *)(v0 + 232);
    v36 = *(_QWORD *)(v0 + 200);
    v35 = *(_QWORD *)(v0 + 208);
    v37 = *(_QWORD *)(v0 + 184);
    v38 = *(_QWORD *)(v0 + 192);
    v39 = *(_QWORD *)(v0 + 176);
    v68 = *(_QWORD *)(v0 + 152);
    v69 = *(_QWORD *)(v0 + 144);
    v70 = *(_QWORD *)(v0 + 136);
    v71 = *(_QWORD *)(v0 + 112);
    v72 = *(_QWORD *)(v0 + 104);
    v74 = *(_QWORD *)(v0 + 96);
    v76 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRelease_n(v31, 2);
    swift_release(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v41 = *(_QWORD *)(v0 + 176);
  v40 = *(_QWORD *)(v0 + 184);
  v42 = *(_QWORD *)(v0 + 160);
  v43 = *(_QWORD *)(v0 + 168);
  v44 = *(char **)(v0 + 112);
  v45 = *(_QWORD *)v44;
  v46 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v43 + 32))(v40, &v44[*(int *)(*(_QWORD *)(v0 + 72) + 48)], v42);
  static Log.photos.getter(v46);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v41, v40, v42);
  v47 = swift_bridgeObjectRetain(v31);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v48, v49))
  {
    v62 = *(_QWORD *)(v0 + 232);
    v63 = *(_QWORD *)(v0 + 216);
    v65 = *(_QWORD *)(v0 + 168);
    v64 = *(_QWORD *)(v0 + 176);
    v66 = *(_QWORD *)(v0 + 160);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 288));
    v61 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    v61(v64, v66);

    v5(v62, v63);
    goto LABEL_14;
  }
  v50 = swift_slowAlloc(32, -1);
  result = swift_slowAlloc(32, -1);
  *(_QWORD *)(v0 + 16) = result;
  *(_DWORD *)v50 = 134218498;
  v51 = v45 + 1;
  if (!__OFADD__(v45, 1))
  {
    v52 = result;
    v53 = *(_QWORD *)(v0 + 288);
    v75 = *(_QWORD *)(v0 + 232);
    v77 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
    v73 = *(_QWORD *)(v0 + 216);
    v55 = *(_QWORD *)(v0 + 168);
    v54 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 160);
    *(_QWORD *)(v50 + 4) = v51;
    *(_WORD *)(v50 + 12) = 2048;
    *(_QWORD *)(v50 + 14) = *(_QWORD *)(v53 + 16);
    swift_bridgeObjectRelease(v53);
    *(_WORD *)(v50 + 22) = 2080;
    v57 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v58 = dispatch thunk of CustomStringConvertible.description.getter(v56, v57);
    v60 = v59;
    *(_QWORD *)(v50 + 24) = sub_100021438(v58, v59, (uint64_t *)(v0 + 16));
    swift_bridgeObjectRelease(v60);
    v61 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
    v61(v54, v56);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Processing uncached photo (%ld/%ld): %s", (uint8_t *)v50, 0x20u);
    swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v50, -1, -1);

    v77(v75, v73);
    v5 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
LABEL_14:
    *(_QWORD *)(v0 + 392) = v61;
    *(_QWORD *)(v0 + 400) = v5;
    v67 = (_QWORD *)swift_task_alloc(dword_1000B33FC);
    *(_QWORD *)(v0 + 408) = v67;
    *v67 = v0;
    v67[1] = sub_100047AEC;
    return sub_10004856C(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 184));
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_10004812C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release(*(_QWORD *)(v0 + 248));
  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100048224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 248));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100048334()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 248));
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100048444()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 248));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  v7 = *(_QWORD *)(v0 + 232);
  v9 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 208);
  v11 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 192);
  v12 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 152);
  v15 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 112);
  v18 = *(_QWORD *)(v0 + 104);
  v19 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004856C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for StoredPhoto(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[10] = swift_task_alloc(v8);
  v3[11] = swift_task_alloc(v8);
  v9 = type metadata accessor for CommunicationActor(0);
  v3[12] = static CommunicationActor.shared.getter(v9);
  v10 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  v3[13] = v11;
  v3[14] = v12;
  return swift_task_switch(sub_100048660, v11, v12);
}

uint64_t sub_100048660()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t **v4;

  v1 = v0[11];
  v2 = v0[3];
  v0[15] = *(_QWORD *)(v0[4] + 16);
  sub_10004F4C4(v2, v1);
  v3 = sub_10003EB84((uint64_t)&_swiftEmptyArrayStorage);
  v0[16] = v3;
  v4 = (uint64_t **)swift_task_alloc(dword_1000B3404);
  v0[17] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_10004872C;
  return sub_100042CB4(v0[3], v0[11], v3);
}

uint64_t sub_10004872C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 128);
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 136);
  v3[18] = a1;
  v3[19] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5);
  if (v1)
    v6 = sub_10004898C;
  else
    v6 = sub_1000487A4;
  return swift_task_switch(v6, v3[13], v3[14]);
}

uint64_t sub_1000487A4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;

  v2 = *(void **)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 16))(v3, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
  StoredPhoto.init(pfcStoredPhoto:baseURL:)(v2, v3);
  if (v1)
  {
    v4 = *(void **)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 96);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));

    swift_release(v5);
    v6 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = (_QWORD *)swift_task_alloc(dword_1000B3724);
    *(_QWORD *)(v0 + 160) = v9;
    *v9 = v0;
    v9[1] = sub_100048894;
    return sub_10004F62C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 56));
  }
}

uint64_t sub_100048894()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000489F8;
  else
    v4 = sub_1000488F4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112));
}

uint64_t sub_1000488F4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 96));

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004898C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 96));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000489F8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 96));

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100048A94(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v8 = sub_10000629C(&qword_1000B3480);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_10000629C(&qword_1000B2A48);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100096810;
  *(_QWORD *)(v12 + 32) = a3;
  aBlock[0] = v12;
  specialized Array._endMutation()(v12);
  sub_10001B334(0, (unint64_t *)&qword_1000B2B38, PHAsset_ptr);
  v13 = a3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(aBlock[0]);
  v15 = *a4;
  v16 = swift_bridgeObjectRetain(v15);
  v17 = sub_100048CA8(v16);
  swift_bridgeObjectRelease(v15);
  v18 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_1000AE598, v20 + v10, v19 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v21 + v20, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_10004E764;
  v24 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000490BC;
  aBlock[3] = &unk_1000AE5B0;
  v22 = _Block_copy(aBlock);
  swift_release(v24);
  objc_msgSend(a2, "requestAnalysisTypes:forAssets:withOptions:progressHandler:andCompletionHandler:", 0x400000000000, isa, v18, 0, v22);
  _Block_release(v22);

}

uint64_t sub_100048CA8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000629C(&qword_1000B3488);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_100022258(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v20;
    *((_QWORD *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10004E3B0(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10004E3B0(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10004E3B0(v37, v38);
    sub_10004E3B0(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_10004E3B0(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_1000091B4(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10004906C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  swift_bridgeObjectRetain(a1);
  swift_errorRetain(a2);
  v3 = sub_10000629C(&qword_1000B3480);
  return CheckedContinuation.resume(returning:)(v5, v3);
}

uint64_t sub_1000490BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100049150(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v5);
  v2[9] = swift_task_alloc(v5);
  v6 = sub_10000629C(&qword_1000B3408);
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v2[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[12] = v8;
  v2[13] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CommunicationActor(0);
  v2[14] = v9;
  v2[15] = static CommunicationActor.shared.getter(v9);
  v10 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v2[16] = v10;
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  v2[17] = v11;
  v2[18] = v12;
  return swift_task_switch(sub_10004926C, v11, v12);
}

uint64_t sub_10004926C()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSURL *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = sub_1000417F8();
  v2 = objc_msgSend(v1, "imageNode");
  *(_QWORD *)(v0 + 152) = v2;

  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 80);
    sub_10001FB38(*(_QWORD *)(v0 + 32), v5, &qword_1000B3408);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
    {
      v6 = *(_QWORD *)(v0 + 80);
      swift_release(*(_QWORD *)(v0 + 120));
      v7 = sub_10000EA70(v6, &qword_1000B3408);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 32))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
      v16 = objc_allocWithZone((Class)CIImage);
      URL._bridgeToObjectiveC()(v17);
      v19 = v18;
      v20 = objc_msgSend(v16, "initWithContentsOfURL:", v18);
      *(_QWORD *)(v0 + 160) = v20;

      if (v20)
      {
        v21 = *(_QWORD *)(v0 + 128);
        v22 = *(_QWORD *)(v0 + 40);
        v23 = static CommunicationActor.shared.getter(objc_msgSend(v2, "setShouldProcessRemotely:", 1));
        *(_QWORD *)(v0 + 168) = v23;
        v24 = (_QWORD *)swift_task_alloc(48);
        *(_QWORD *)(v0 + 176) = v24;
        v24[2] = v2;
        v24[3] = v20;
        v24[4] = v22;
        v25 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
        *(_QWORD *)(v0 + 184) = v25;
        *v25 = v0;
        v25[1] = sub_1000495C4;
        return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, v23, v21, 0xD00000000000001ALL, 0x8000000100095120, sub_10004E488, v24, &type metadata for String);
      }
      v27 = *(_QWORD *)(v0 + 120);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
      v7 = swift_release(v27);
    }
    v28 = static Log.default.getter(v7);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "generateImageCaption: visionEngine unable to convert to CIImage", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }
    v32 = *(_QWORD *)(v0 + 72);
    v33 = *(_QWORD *)(v0 + 48);
    v34 = *(_QWORD *)(v0 + 56);

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  }
  else
  {
    v8 = swift_release(*(_QWORD *)(v0 + 120));
    v9 = static Log.default.getter(v8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, (os_log_type_t)v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v11, "generateImageCaption: visionEngine imageNode was nil", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
    v14 = *(_QWORD *)(v0 + 56);
    v13 = *(_QWORD *)(v0 + 64);
    v15 = *(_QWORD *)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  v35 = *(_QWORD *)(v0 + 72);
  v36 = *(_QWORD *)(v0 + 80);
  v37 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v36);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xE000000000000000);
}

uint64_t sub_1000495C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 176);
  v3 = *(_QWORD *)(*v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*v0 + 184));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10004962C, *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144));
}

uint64_t sub_10004962C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(void **)(v0 + 152);
  v1 = *(void **)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 120));

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  v9 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v6);
}

void sub_1000496C4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v6 = sub_10000629C(&qword_1000B3460);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = sub_10004E494();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_1000AE548, v11 + v8, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_10004E694;
  v15 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100049F98;
  aBlock[3] = &unk_1000AE560;
  v13 = _Block_copy(aBlock);
  swift_release(v15);
  objc_msgSend(a2, "triggerWithImage:options:cacheKey:resultHandler:", a3, v9, 0, v13);
  _Block_release(v13);

}

void sub_100049818(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  Class v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  Class isa;
  id v43;
  unint64_t v44;
  uint64_t v45;
  NSString v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v57 - v11;
  if (a1)
  {
    v13 = a1;
    if ((AXRuntimeCheck_MediaAnalysisSupport() & 1) != 0)
    {
      v14 = objc_msgSend(v13, "mediaAnalysisImageCaptionFeatures");
      v15 = sub_10001B334(0, &qword_1000B3468, AXMVisionFeature_ptr);
      v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

      if ((unint64_t)v16 >> 62)
      {
        if (v16 < 0)
          v37 = v16;
        else
          v37 = v16 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v16);
        v38 = _CocoaArrayWrapper.endIndex.getter(v37);
        swift_bridgeObjectRelease(v16);
        if (v38)
          goto LABEL_5;
      }
      else if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_5:
        if ((v16 & 0xC000000000000001) != 0)
        {
          v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
LABEL_8:
          v18 = v17;
          swift_bridgeObjectRelease(v16);
          if ((objc_msgSend(v18, "isLowConfidence") & 1) != 0)
            goto LABEL_19;
          goto LABEL_22;
        }
        if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v17 = *(id *)(v16 + 32);
          goto LABEL_8;
        }
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
LABEL_34:
      swift_bridgeObjectRelease(v16);
LABEL_35:
      v41 = sub_10003ECB8((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for AXMFeatureDescriptionOption(0);
      sub_100009174(&qword_1000B1E90, (uint64_t (*)(uint64_t))type metadata accessor for AXMFeatureDescriptionOption, (uint64_t)&unk_100096098);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v41);
      v43 = objc_msgSend(v13, "detectedSceneClassificationFeatureDescriptionWithOptions:", isa);

      if (v43)
      {
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v36 = v44;

        goto LABEL_38;
      }
      goto LABEL_37;
    }
    v27 = objc_msgSend(v13, "captionFeatures");
    v28 = sub_10001B334(0, &qword_1000B3468, AXMVisionFeature_ptr);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

    if ((unint64_t)v16 >> 62)
    {
      if (v16 < 0)
        v39 = v16;
      else
        v39 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v40 = _CocoaArrayWrapper.endIndex.getter(v39);
      swift_bridgeObjectRelease(v16);
      if (!v40)
        goto LABEL_34;
    }
    else if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_34;
    }
    if ((v16 & 0xC000000000000001) != 0)
    {
      v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
    }
    else
    {
      if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_51;
      v29 = *(id *)(v16 + 32);
    }
    v18 = v29;
    swift_bridgeObjectRelease(v16);
    if ((objc_msgSend(v18, "isLowConfidence") & 1) != 0)
    {
LABEL_19:

      goto LABEL_35;
    }
LABEL_22:
    v31 = sub_10003ECB8((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for AXMFeatureDescriptionOption(0);
    sub_100009174(&qword_1000B1E90, (uint64_t (*)(uint64_t))type metadata accessor for AXMFeatureDescriptionOption, (uint64_t)&unk_100096098);
    v32 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v31);
    v33 = objc_msgSend(v13, "detectedCaptionFeatureDescriptionWithOptions:", v32);

    if (v33)
    {
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

LABEL_38:
      v45 = HIBYTE(v36) & 0xF;
      if ((v36 & 0x2000000000000000) == 0)
        v45 = v34 & 0xFFFFFFFFFFFFLL;
      if (!v45)
      {
        v51 = swift_bridgeObjectRelease(v36);
        v52 = static Log.default.getter(v51);
        v53 = Logger.logObject.getter(v52);
        v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v53, v54))
        {
          v55 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v55 = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "generateImageCaption: visionEngine did not generate caption", v55, 2u);
          swift_slowDealloc(v55, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
        v59 = 0;
        v60 = 0xE000000000000000;
        goto LABEL_46;
      }
      v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      v47 = objc_msgSend(v46, "axCapitalizeFirstLetter");

      if (v47)
      {
        v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
        v50 = v49;

        v59 = v48;
        v60 = v50;
LABEL_46:
        v56 = sub_10000629C(&qword_1000B3460);
        CheckedContinuation.resume(returning:)(&v59, v56);

        return;
      }
LABEL_52:
      __break(1u);
      return;
    }

LABEL_37:
    v34 = 0;
    v36 = 0xE000000000000000;
    goto LABEL_38;
  }
  if (a2)
  {
    v19 = swift_errorRetain(a2);
    static Log.default.getter(v19);
    swift_errorRetain(a2);
    v20 = swift_errorRetain(a2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v57 = a3;
      v58 = v6;
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v23 = 138412290;
      swift_errorRetain(a2);
      v25 = _swift_stdlib_bridgeErrorToNSError(a2);
      v59 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v23 + 4, v23 + 12);
      *v24 = v25;
      v6 = v58;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "generateImageCaption: visionEngine had error %@", v23, 0xCu);
      v26 = sub_10000629C(&qword_1000B20C0);
      swift_arrayDestroy(v24, 1, v26);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v59 = 0;
    v60 = 0xE000000000000000;
    v30 = sub_10000629C(&qword_1000B3460);
    CheckedContinuation.resume(returning:)(&v59, v30);
    swift_errorRelease(a2);
  }
}

void sub_100049F98(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_10004A00C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for PhonePhotoProcessor()
{
  return objc_opt_self(_TtC11photosfaced19PhonePhotoProcessor);
}

uint64_t sub_10004A068()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000B34AC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100005B30;
  return sub_100041860();
}

uint64_t sub_10004A0B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a1;
  v3[4] = a2;
  v3[5] = *v2;
  v4 = type metadata accessor for CommunicationActor(0);
  v3[6] = v4;
  v3[7] = static CommunicationActor.shared.getter(v4);
  v5 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3[8] = v5;
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_10004A150, v6, v7);
}

uint64_t sub_10004A150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD **)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = swift_release(*(_QWORD *)(v0 + 56));
  v6 = static CommunicationActor.shared.getter(v5);
  v7 = swift_allocObject(&unk_1000AE520, 32, 7);
  *(_QWORD *)(v7 + 16) = v2;
  *(_QWORD *)(v7 + 24) = v3;
  v4[3] = sub_10000629C(&qword_1000B31B8);
  v8 = type metadata accessor for StoredPhoto(255);
  *(_QWORD *)(v0 + 16) = v8;
  v4[4] = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  sub_10003D62C(v4);
  swift_retain(v2);
  swift_bridgeObjectRetain(v3);
  v9 = swift_checkMetadataState(0, v8);
  generateElements<A>(isolation:_:)(v6, v1, &unk_1000B33E0, v7, v9);
  swift_release(v7);
  swift_release(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004A25C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1000B33DC);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_10003E42C;
  return sub_10004697C(a1, a2, v7, v6);
}

unint64_t sub_10004A2C8(unsigned __int8 a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_10004C50C(a1, v3);
}

void sub_10004A32C(char a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v1 + 40));
  __asm { BR              X10 }
}

uint64_t sub_10004A37C()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v3;

  String.hash(into:)(&v3, 0x68736572666572, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  v1 = Hasher._finalize()();
  return sub_10004C5AC(v0, v1);
}

unint64_t sub_10004A3F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10004C774(a1, v7);
}

unint64_t sub_10004A464(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10004C8B4(a1, a2, v5);
}

unint64_t sub_10004A4C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_10004C994(a1, v3);
}

unint64_t sub_10004A4F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10004CA30(a1, v4);
}

unint64_t sub_10004A528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_10004CAF4(a1, v7);
}

Swift::Int sub_10004A5A8(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt32 v28;
  uint64_t v29;
  Swift::Int *v30;
  _QWORD *v31;
  __int128 v32;
  uint64_t v33[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000629C(&qword_1000B3510);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v30 = v3;
    v31 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v13)
          goto LABEL_36;
        v22 = v31[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v13)
            goto LABEL_36;
          v22 = v31[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v30;
                goto LABEL_43;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v31[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v13)
                  goto LABEL_36;
                v22 = v31[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v20);
      v32 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0)
        swift_retain(*((_QWORD *)&v32 + 1));
      Hasher.init(_seed:)(v33, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v17 == v25;
          if (v17 == v25)
            v17 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v18) = v28;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v18) = v32;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

Swift::Int sub_10004A87C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt32 v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000629C(&qword_1000B35B8);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_36;
        v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_36;
          v21 = v33[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v9 >= v32)
                  goto LABEL_36;
                v21 = v33[v9];
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            v9 = v22;
          }
        }
LABEL_33:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(_QWORD *)(v5 + 56);
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v29 = *(_QWORD *)(v27 + 8 * v19);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v27 + 8 * v19));
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

Swift::Int sub_10004AB4C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000629C(&qword_1000B3650);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10004AE60(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000629C(&qword_1000B2B40);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    v34 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_36;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_36;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v34 >= 64)
                  bzero((void *)(v5 + 64), 8 * v35);
                else
                  *v10 = v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v9 >= v35)
                  goto LABEL_36;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(v5 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v29);
      v32 = *(_QWORD *)(v30 + v29);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v30 + v29));
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v31);
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v31;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v32;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10004B114(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000629C(&qword_1000B3570);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_31;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v19 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v19 <= 2)
    goto LABEL_24;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11));
    Hasher.init(_seed:)(v20, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v19 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x10004B46CLL);
      }
      if (v14 >= v19)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_24:
  swift_release(v5);
  if ((a2 & 1) == 0)
    goto LABEL_31;
LABEL_27:
  v17 = 1 << *(_BYTE *)(v5 + 32);
  if (v17 >= 64)
    bzero(v12, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v17;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_31:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

uint64_t sub_10004B47C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10000629C(&qword_1000B3580);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_retain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_10004B810(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10000629C(&qword_1000B3598);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_10004BBA4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000629C(&qword_1000B3490);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10004E3B0(v25, v38);
      }
      else
      {
        sub_100022258((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_10004E3B0(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10004BEA0(uint64_t a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10004A2C8(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_10004CC68();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      result = swift_release(v19[1]);
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_BYTE *)(v18[6] + v12) = a3;
    v21 = (_QWORD *)(v18[7] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_10004A5A8(result, a4 & 1);
  result = sub_10004A2C8(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NetworkRequestType);
  __break(1u);
  return result;
}

uint64_t sub_10004BFDC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10004A464(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10004CE18();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_10004AB4C(v15, a4 & 1);
  v21 = sub_10004A464(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10004C138(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10004A3F8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_release(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10004D310();
    goto LABEL_7;
  }
  sub_10004B47C(v17, a3 & 1);
  v23 = sub_10004A3F8(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10004C40C(v14, (uint64_t)v11, a1, v20);
}

_OWORD *sub_10004C294(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10004A464(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_100022238(v19);
        return sub_10004E3B0(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10004D540();
      goto LABEL_7;
    }
    sub_10004BBA4(v15, a4 & 1);
    v21 = sub_10004A464(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10004C4A4(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_10004C3C8(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t sub_10004C40C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_10004C4A4(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10004E3B0(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_10004C50C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_10004C5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10004C774(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100009174(&qword_1000B3588, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_10004C8B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10004C994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10004CA30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10004E6C0(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10004E3CC((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10004CAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void *sub_10004CC68()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_10000629C(&qword_1000B3510);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15) = v16;
    result = (void *)swift_retain(*((_QWORD *)&v16 + 1));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10004CE0C()
{
  sub_10004D178(&qword_1000B35B8);
}

void *sub_10004CE18()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10000629C(&qword_1000B3650);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_retain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10004CFCC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10000629C(&qword_1000B2B40);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain(v17);
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10004D16C()
{
  sub_10004D178(&qword_1000B3570);
}

void sub_10004D178(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v2 = v1;
  sub_10000629C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_26;
      v19 = *(_QWORD *)(v7 + 8 * v10);
      if (!v19)
        break;
    }
LABEL_25:
    v13 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16) = v17;
    swift_bridgeObjectRetain(v17);
  }
  v20 = v18 + 2;
  if (v20 >= v14)
    goto LABEL_26;
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10004D310()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000629C(&qword_1000B3580);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_retain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10004D540()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_10000629C(&qword_1000B3490);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_100022258(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10004E3B0(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10004D724(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10004D8D8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10004D740(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10004DF04(a1, a2, a3, (_QWORD *)*v3, &qword_1000B3200, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
  *v3 = result;
  return result;
}

uint64_t sub_10004D76C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10004DF04(a1, a2, a3, (_QWORD *)*v3, &qword_1000B35B0, (uint64_t (*)(_QWORD))&type metadata accessor for ShuffleID);
  *v3 = result;
  return result;
}

uint64_t sub_10004D798(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10004DF04(a1, a2, a3, (_QWORD *)*v3, &qword_1000B34A0, (uint64_t (*)(_QWORD))&type metadata accessor for StoredPhoto);
  *v3 = result;
  return result;
}

uint64_t sub_10004D7C4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10004DD24(a1, a2, a3, (_QWORD *)*v3, &qword_1000B35C8, &qword_1000B35D0);
  *v3 = result;
  return result;
}

uint64_t sub_10004D7F0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10004DD24(a1, a2, a3, (_QWORD *)*v3, &qword_1000B3230, &qword_1000B25D8);
  *v3 = result;
  return result;
}

uint64_t sub_10004D81C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10004DA60(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10004D838(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10004DBBC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10004D854(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10004DD24(a1, a2, a3, (_QWORD *)*v3, &qword_1000B35C0, &qword_1000B25E0);
  *v3 = result;
  return result;
}

uint64_t sub_10004D880(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10004DD24(a1, a2, a3, (_QWORD *)*v3, &qword_1000B3608, &qword_1000B25E8);
  *v3 = result;
  return result;
}

uint64_t sub_10004D8AC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10004DF04(a1, a2, a3, (_QWORD *)*v3, &qword_1000B3630, (uint64_t (*)(_QWORD))&type metadata accessor for AlbumID);
  *v3 = result;
  return result;
}

uint64_t sub_10004D8D8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000629C(&qword_1000B35A0);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_10000629C(&qword_1000B35A8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004DA60(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000629C(&qword_1000B3590);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004DBBC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000629C(&qword_1000B2A20);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004DD24(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10000629C(a5);
  v14 = *(_QWORD *)(sub_10000629C(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_10000629C(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004DF04(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10000629C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004E0E4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  _QWORD *v13;

  v12 = *a5;
  v13 = (_QWORD *)swift_task_alloc(dword_1000B353C);
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_100005B30;
  return sub_10003F4D8(a1, a2, a3, a4, v12, a6);
}

unint64_t sub_10004E168(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  unint64_t result;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _OWORD *v12;
  char v13;
  __int128 v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_10000629C(&qword_1000B3510);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v14 = *(_OWORD *)(a1 + 40);
  result = sub_10004A2C8(v4);
  if ((v6 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain(result);
    return (unint64_t)v3;
  }
  v7 = (_OWORD *)(a1 + 64);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    v8 = *((_QWORD *)&v14 + 1);
    *(_OWORD *)(v3[7] + 16 * result) = v14;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    result = *((_QWORD *)&v14 + 1);
    if (!--v1)
      goto LABEL_8;
    v12 = (_OWORD *)((char *)v7 + 24);
    v4 = *((_BYTE *)v7 - 8);
    v14 = *v7;
    swift_retain(v8);
    result = sub_10004A2C8(v4);
    v7 = v12;
    if ((v13 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_10004E26C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_10000629C(&qword_1000B35B8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_10004A2C8(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain(v5);
    result = sub_10004A2C8(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_10004E36C()
{
  unint64_t result;

  result = qword_1000B3410;
  if (!qword_1000B3410)
  {
    result = swift_getWitnessTable(&unk_100096B94, &type metadata for PhonePhotoProcessorError);
    atomic_store(result, (unint64_t *)&qword_1000B3410);
  }
  return result;
}

_OWORD *sub_10004E3B0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_10004E3C0(uint64_t a1)
{
  uint64_t v1;

  sub_100048A94(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(uint64_t **)(v1 + 32));
}

uint64_t sub_10004E3CC(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10004E400(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000629C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10004E444()
{
  unint64_t result;

  result = qword_1000B3450;
  if (!qword_1000B3450)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, &qword_1000B3450);
  }
  return result;
}

void sub_10004E488(uint64_t a1)
{
  uint64_t v1;

  sub_1000496C4(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

id sub_10004E494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Class isa;
  uint64_t v10;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)AXMVisionAnalysisOptions), "init");
  v5 = AXRuntimeCheck_MediaAnalysisSupport();
  objc_msgSend(v4, "setDetectMADCaptions:", v5);
  objc_msgSend(v4, "setDetectMADScenes:", v5);
  objc_msgSend(v4, "setDetectMADFace:", v5);
  v6 = v5 ^ 1;
  objc_msgSend(v4, "setDetectScenes:", v6);
  objc_msgSend(v4, "setDetectObjects:", v6);
  objc_msgSend(v4, "setDetectProminentObjects:", v6);
  objc_msgSend(v4, "setDetectCaptions:", v6);
  objc_msgSend(v4, "setDetectFaceNames:", v6);
  objc_msgSend(v4, "setDetectFaceExpressions:", v6);
  objc_msgSend(v4, "setDetectText:", 1);
  v7 = objc_msgSend((id)objc_opt_self(AXMTextDetectionOptions), "defaultOptions");
  objc_msgSend(v4, "setTextDetectionOptions:", v7);

  objc_msgSend(v4, "setDetectTraits:", 1);
  static Locale.current.getter(objc_msgSend(v4, "setDetectModelClassifications:", 1));
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setPreferredOutputLocale:", isa);

  return v4;
}

uint64_t sub_10004E688()
{
  return sub_10004E708(&qword_1000B3460);
}

uint64_t sub_10004E694(uint64_t a1, uint64_t a2)
{
  return sub_10004E778(a1, a2, &qword_1000B3460, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100049818);
}

uint64_t sub_10004E6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004E6B8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004E6C0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10004E6FC()
{
  return sub_10004E708(&qword_1000B3480);
}

uint64_t sub_10004E708(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_10000629C(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10004E764(uint64_t a1, uint64_t a2)
{
  return sub_10004E778(a1, a2, &qword_1000B3480, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10004906C);
}

uint64_t sub_10004E778(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000629C(a3) - 8) + 80);
  return a4(a1, a2, v4 + ((v7 + 16) & ~v7));
}

uint64_t sub_10004E7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1000B34B4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10003E42C;
  return sub_100041A0C(a1, a2, v2);
}

uint64_t sub_10004E838(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1000B34C4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10003E42C;
  return sub_100041F34(a1, a2, v2);
}

uint64_t sub_10004E89C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1000B34D4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10003E42C;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1000B34D0 + dword_1000B34D0))(a1, a2, v6);
}

uint64_t sub_10004E91C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1000B34E4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10003E42C;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1000B34E0 + dword_1000B34E0))(a1, a2, v6);
}

uint64_t sub_10004E99C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000B34F4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10004E9FC;
  return sub_100042194(a1);
}

uint64_t sub_10004E9FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_10004EA5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10003F098(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_10004EA74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B3518;
  if (!qword_1000B3518)
  {
    v1 = sub_100006410(&qword_1000B2A58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000B3518);
  }
  return result;
}

uint64_t sub_10004EAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MessageBody(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004EB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessageBody(0) - 8) + 80);
  v7 = *(int **)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  v9 = (uint64_t *)(v2 + 32);
  v10 = v2 + ((v6 + 40) & ~v6);
  v11 = (_QWORD *)swift_task_alloc(dword_1000B3524);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_10003E42C;
  return ((uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t *, uint64_t))((char *)&dword_1000B3520
                                                                                       + dword_1000B3520))(a1, a2, v7, v8, v9, v10);
}

uint64_t sub_10004EBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1000B33DC);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100005B30;
  return sub_10004697C(a1, a2, v7, v6);
}

_QWORD *sub_10004EC64(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

uint64_t sub_10004EC9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004ECC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10003F270(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD))&type metadata accessor for SyncFacesRequest, (uint64_t)&protocol witness table for SyncFacesRequest, (uint64_t)&unk_1000AE700, (uint64_t)&unk_1000B35E0, a2);
}

uint64_t sub_10004ED00()
{
  return sub_10004F024((uint64_t (*)(_QWORD))&type metadata accessor for SyncFacesRequest);
}

uint64_t sub_10004ED0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = *(_QWORD *)(type metadata accessor for SyncFacesRequest(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessageBody(0) - 8) + 80);
  v10 = v7 + v8 + v9;
  v11 = *(int **)(v2 + 16);
  v12 = *(_QWORD *)(v2 + 24);
  v13 = v2 + v7;
  v14 = v2 + (v10 & ~v9);
  v15 = (_QWORD *)swift_task_alloc(dword_1000B35DC);
  *(_QWORD *)(v3 + 16) = v15;
  *v15 = v3;
  v15[1] = sub_10003E42C;
  return sub_10003FC9C(a1, a2, v11, v12, v13, v14);
}

uint64_t sub_10004EDC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10003F270(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD))&type metadata accessor for ShuffleID, (uint64_t)&protocol witness table for ShuffleID, (uint64_t)&unk_1000AE750, (uint64_t)&unk_1000B3600, a2);
}

uint64_t sub_10004EDFC()
{
  return sub_10004F024((uint64_t (*)(_QWORD))&type metadata accessor for ShuffleID);
}

uint64_t sub_10004EE08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = *(_QWORD *)(type metadata accessor for ShuffleID(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessageBody(0) - 8) + 80);
  v10 = v7 + v8 + v9;
  v11 = *(int **)(v2 + 16);
  v12 = *(_QWORD *)(v2 + 24);
  v13 = v2 + v7;
  v14 = v2 + (v10 & ~v9);
  v15 = (_QWORD *)swift_task_alloc(dword_1000B35FC);
  *(_QWORD *)(v3 + 16) = v15;
  *v15 = v3;
  v15[1] = sub_10003E42C;
  return sub_100040330(a1, a2, v11, v12, v13, v14);
}

uint64_t sub_10004EEC0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10003F270(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD))&type metadata accessor for SyncFacesRequest, (uint64_t)&protocol witness table for SyncFacesRequest, (uint64_t)&unk_1000AE7A0, (uint64_t)&unk_1000B3618, a2);
}

uint64_t sub_10004EEF8()
{
  return sub_10004F024((uint64_t (*)(_QWORD))&type metadata accessor for SyncFacesRequest);
}

uint64_t sub_10004EF04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = *(_QWORD *)(type metadata accessor for SyncFacesRequest(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessageBody(0) - 8) + 80);
  v10 = v7 + v8 + v9;
  v11 = *(int **)(v2 + 16);
  v12 = *(_QWORD *)(v2 + 24);
  v13 = v2 + v7;
  v14 = v2 + (v10 & ~v9);
  v15 = (_QWORD *)swift_task_alloc(dword_1000B3614);
  *(_QWORD *)(v3 + 16) = v15;
  *v15 = v3;
  v15[1] = sub_10003E42C;
  return sub_1000409A8(a1, a2, v11, v12, v13, v14);
}

uint64_t sub_10004EFBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004EFE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10003F270(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD))&type metadata accessor for AlbumID, (uint64_t)&protocol witness table for AlbumID, (uint64_t)&unk_1000AE7F0, (uint64_t)&unk_1000B3640, a2);
}

uint64_t sub_10004F018()
{
  return sub_10004F024((uint64_t (*)(_QWORD))&type metadata accessor for AlbumID);
}

uint64_t sub_10004F024(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = type metadata accessor for MessageBody(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v5 + v6 + v9) & ~v9;
  v11 = v10 + *(_QWORD *)(v8 + 64);
  v12 = v4 | v9 | 7;
  swift_release(*(_QWORD *)(v1 + 24));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1 + v10, v7);
  return swift_deallocObject(v1, v11, v12);
}

uint64_t sub_10004F0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = *(_QWORD *)(type metadata accessor for AlbumID(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessageBody(0) - 8) + 80);
  v10 = v7 + v8 + v9;
  v11 = *(int **)(v2 + 16);
  v12 = *(_QWORD *)(v2 + 24);
  v13 = v2 + v7;
  v14 = v2 + (v10 & ~v9);
  v15 = (_QWORD *)swift_task_alloc(dword_1000B363C);
  *(_QWORD *)(v3 + 16) = v15;
  *v15 = v3;
  v15[1] = sub_10003E42C;
  return sub_100041180(a1, a2, v11, v12, v13, v14);
}

uint64_t getEnumTagSinglePayload for PhonePhotoProcessorError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PhonePhotoProcessorError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10004F278 + 4 * byte_100096AAC[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10004F2AC + 4 * byte_100096AA7[v4]))();
}

uint64_t sub_10004F2AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004F2B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004F2BCLL);
  return result;
}

uint64_t sub_10004F2C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004F2D0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10004F2D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004F2DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhonePhotoProcessorError()
{
  return &type metadata for PhonePhotoProcessorError;
}

unint64_t sub_10004F2FC()
{
  unint64_t result;

  result = qword_1000B3658;
  if (!qword_1000B3658)
  {
    result = swift_getWitnessTable(&unk_100096B6C, &type metadata for PhonePhotoProcessorError);
    atomic_store(result, (unint64_t *)&qword_1000B3658);
  }
  return result;
}

unint64_t *sub_10004F36C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;

  v16 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v6)
  {
    v15 = v1;
    v17 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_10004D740(0, v6, 0);
    v7 = v17;
    v8 = type metadata accessor for StoredPhoto(0);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    do
    {
      StoredPhoto.localIdentifier.getter(v8);
      v17 = v7;
      v13 = v7[2];
      v12 = v7[3];
      if (v13 >= v12 >> 1)
      {
        sub_10004D740(v12 > 1, v13 + 1, 1);
        v7 = v17;
      }
      v7[2] = v13 + 1;
      v8 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v13, v5, v16);
      v10 += v11;
      --v6;
    }
    while (v6);
  }
  return v7;
}

id sub_10004F4C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  id v13;
  id v15;
  uint64_t v16;
  id v17;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SystemDirectory.folderURL(for:)(a1);
  v8 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v17 = 0;
  v12 = objc_msgSend(v8, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v10, 1, 0, &v17);

  v13 = v17;
  if ((v12 & 1) != 0)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
    return v13;
  }
  else
  {
    v15 = v17;
    _convertNSErrorToError(_:)(v13);

    swift_willThrow(v16);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_10004F62C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v3[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004F6E4, 0, 0);
}

uint64_t sub_10004F6E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  id v10;
  NSURL *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = type metadata accessor for StoredPhoto(0);
  *(_QWORD *)(v0 + 96) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v0 + 104) = v7;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v9 = v8(v5, v4, v6);
  StoredPhoto.localIdentifier.getter(v9);
  static SystemDirectory.folderURL(for:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v10 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v11);
  v13 = v12;
  *(_QWORD *)(v0 + 16) = 0;
  LODWORD(v3) = objc_msgSend(v10, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v12, 1, 0, v0 + 16);

  v14 = *(void **)(v0 + 16);
  if ((_DWORD)v3)
  {
    v15 = v14;
    StoredPhoto.writeToCache()();
    *(_QWORD *)(v0 + 112) = v16;
    if (!v16)
    {
      v17 = *(_QWORD *)(v0 + 24);
      *(_QWORD *)(v0 + 120) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC11photosfaced10PhotoCache_database);
      v18 = sub_10000629C(&qword_1000B34A0);
      v19 = *(unsigned __int8 *)(v7 + 80);
      v20 = (v19 + 32) & ~v19;
      v21 = swift_allocObject(v18, v20 + *(_QWORD *)(v7 + 72), v19 | 7);
      *(_QWORD *)(v0 + 128) = v21;
      *(_OWORD *)(v21 + 16) = xmmword_100096430;
      v8(v21 + v20, v17, v6);
      v22 = type metadata accessor for PhotosFaceDatabase(0);
      v23 = sub_100009174(&qword_1000B2B70, (uint64_t (*)(uint64_t))&type metadata accessor for PhotosFaceDatabase, (uint64_t)&protocol conformance descriptor for PhotosFaceDatabase);
      v24 = dispatch thunk of Actor.unownedExecutor.getter(v22, v23);
      return swift_task_switch(sub_10004F980, v24, v25);
    }
  }
  else
  {
    v27 = v14;
    _convertNSErrorToError(_:)(v14);

    swift_willThrow(v28);
  }
  v29 = *(_QWORD *)(v0 + 96);
  v30 = *(_QWORD *)(v0 + 104);
  v31 = *(_QWORD *)(v0 + 88);
  v32 = *(_QWORD *)(v0 + 64);
  v33 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(v31, *(_QWORD *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v33, v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004F980()
{
  Swift::OpaquePointer *v0;
  void *v1;
  uint64_t (*v2)();

  PhotosFaceDatabase.insert(storedPhotos:)(v0[16]);
  v0[17]._rawValue = v1;
  swift_bridgeObjectRelease(v0[16]._rawValue);
  if (v1)
    v2 = sub_10004FAAC;
  else
    v2 = sub_10004FA28;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004FA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(v1, *(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004FAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(v3, *(_QWORD *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004FB58(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004FBB8, 0, 0);
}

uint64_t sub_10004FBB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC11photosfaced10PhotoCache_database);
  v1 = type metadata accessor for PhotosFaceDatabase(0);
  v2 = sub_100009174(&qword_1000B2B70, (uint64_t (*)(uint64_t))&type metadata accessor for PhotosFaceDatabase, (uint64_t)&protocol conformance descriptor for PhotosFaceDatabase);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_10004FC3C, v3, v4);
}

uint64_t sub_10004FC3C()
{
  _QWORD *v0;

  v0[11] = PhotosFaceDatabase.queryPhotos(identifiers:)(v0[5]);
  v0[12] = 0;
  return swift_task_switch(sub_10004FCB4, 0, 0);
}

uint64_t sub_10004FCB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  void *v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 48);
  swift_retain(v2);
  v3 = swift_bridgeObjectRetain(v1);
  v4 = sub_1000550E0(v3, v2);
  swift_release(v2);
  swift_bridgeObjectRelease(v1);
  v5 = sub_100050B04(v1, (uint64_t)v4);
  v6 = *(_QWORD *)(v0 + 88);
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  }
  else
  {
    v7 = sub_100054DE4(*(_QWORD *)(v0 + 88), (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, &qword_1000B3730, (uint64_t)&protocol conformance descriptor for StoredPhoto, (void (*)(char *, char *))sub_100051420);
    swift_bridgeObjectRelease(v6);
    v8 = sub_100053780((uint64_t)v4, v7);
    static Log.photos.getter(v8);
    v9 = swift_retain_n(v8, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    v12 = os_log_type_enabled(v10, v11);
    v14 = *(_QWORD *)(v0 + 64);
    v13 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 56);
    if (v12)
    {
      v34 = *(_QWORD *)(v0 + 56);
      v33 = *(_QWORD *)(v0 + 64);
      v16 = swift_slowAlloc(22, -1);
      v31 = swift_slowAlloc(32, -1);
      v35 = v31;
      *(_DWORD *)v16 = 134218242;
      *(_QWORD *)(v0 + 24) = v8[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v16 + 4, v16 + 12);
      swift_release(v8);
      *(_WORD *)(v16 + 12) = 2080;
      v32 = v13;
      v17 = type metadata accessor for StoredPhoto(0);
      v18 = sub_100009174(&qword_1000B3730, (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, (uint64_t)&protocol conformance descriptor for StoredPhoto);
      v19 = swift_retain(v8);
      v20 = Set.description.getter(v19, v17, v18);
      v22 = v21;
      swift_release(v8);
      *(_QWORD *)(v0 + 32) = sub_100021438(v20, v22, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease(v22);
      swift_release_n(v8, 2);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Found %ld photos are marked as cached, but not actually on disk: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    }
    else
    {
      swift_release_n(v8, 3);

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    }
  }
  v23 = *(_QWORD *)(v0 + 72);
  v24 = *(_QWORD *)(v0 + 40);
  v25 = swift_bridgeObjectRetain(v24);
  v26 = sub_100054F10(v25);
  swift_bridgeObjectRelease(v24);
  v27 = sub_10004F36C((uint64_t)v4);
  v28 = sub_100053314((uint64_t)v27, v26);
  swift_bridgeObjectRelease(v27);
  v29 = sub_10005321C((uint64_t)v28);
  swift_release(v28);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(char *, char *))(v0 + 8))(v4, v29);
}

uint64_t sub_10004FFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000B3724);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100005B30;
  return sub_10004F62C(a1, a2);
}

uint64_t sub_100050048(const char *a1, void *a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  id v15;
  NSString v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;

  result = fsctl(a1, 0xC0084A44uLL, a2, 0);
  if ((_DWORD)result)
  {
    v5 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    v7 = v6;
    v8 = v5;
    v9 = sub_10000629C(&qword_1000B3508);
    inited = swift_initStackObject(v9, &v19);
    *(_OWORD *)(inited + 16) = xmmword_100096430;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorKey);
    *(_QWORD *)(inited + 40) = v11;
    v12 = type metadata accessor for URL(0);
    *(_QWORD *)(inited + 72) = v12;
    v13 = sub_10003D62C((_QWORD *)(inited + 48));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v13, a3, v12);
    v14 = sub_10003EB84(inited);
    v15 = objc_allocWithZone((Class)NSError);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    objc_msgSend(v15, "initWithDomain:code:userInfo:", v16, v8, isa);

    return swift_willThrow(v18);
  }
  return result;
}

uint64_t sub_1000501C0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1[2] = v0;
  v2 = type metadata accessor for StoredPhoto(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v6);
  v1[9] = swift_task_alloc(v6);
  v7 = sub_10000629C(&qword_1000B2B50);
  v1[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005027C, 0, 0);
}

uint64_t sub_10005027C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to PhotosFaceDatabase.unassociatedPhotos()[1]);
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = sub_1000502D4;
  return PhotosFaceDatabase.unassociatedPhotos()();
}

uint64_t sub_1000502D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*v2 + 88);
  v4 = *v2;
  *(_QWORD *)(v4 + 96) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_10005037C, 0, 0);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(v4 + 40);
  swift_task_dealloc(*(_QWORD *)(v4 + 80));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10005037C()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 32);
    v32 = &_swiftEmptyArrayStorage;
    sub_10004D740(0, v2, 0);
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v31 = *(_QWORD *)(v4 + 72);
    v6 = v4;
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v8 = &_swiftEmptyArrayStorage;
    do
    {
      v9 = *(_QWORD *)(v0 + 40);
      v10 = *(_QWORD *)(v0 + 24);
      v11 = v7(v9, v5, v10);
      StoredPhoto.localIdentifier.getter(v11);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v10);
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_10004D740(0, v8[2] + 1, 1);
        v8 = v32;
      }
      v13 = v8[2];
      v12 = v8[3];
      if (v13 >= v12 >> 1)
      {
        sub_10004D740(v12 > 1, v13 + 1, 1);
        v8 = v32;
      }
      v14 = *(_QWORD *)(v0 + 72);
      v15 = *(_QWORD *)(v0 + 48);
      v8[2] = v13 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v13, v14, v15);
      v32 = v8;
      v5 += v31;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
    v8 = &_swiftEmptyArrayStorage;
  }
  v16 = v8[2];
  v17 = *(_QWORD *)(v0 + 56);
  if (v16)
  {
    v18 = (char *)v8 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    v19 = *(_QWORD *)(v17 + 72);
    v20 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 16);
    while (1)
    {
      v21 = *(_QWORD *)(v0 + 80);
      v22 = *(_QWORD *)(v0 + 48);
      v20(v21, v18, v22);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
      v23(v21, 0, 1, v22);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v21, 1, v22) == 1)
        break;
      v24 = *(_QWORD *)(v0 + 64);
      v25 = *(_QWORD *)(v0 + 48);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 32))(v24, *(_QWORD *)(v0 + 80), v25);
      sub_100054A08(v24, 1);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v24, v25);
      v18 += v19;
      if (!--v16)
        goto LABEL_16;
    }
  }
  else
  {
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
LABEL_16:
    v23(*(_QWORD *)(v0 + 80), 1, 1, *(_QWORD *)(v0 + 48));
  }
  v27 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v0 + 64);
  v29 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRelease(v8);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100050614()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD v13[2];

  v0 = sub_10000629C(&qword_1000B3750);
  __chkstk_darwin(v0);
  v2 = (char *)v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = StoredPhoto.localIdentifier.getter(v5);
  v9 = StoredPhotoLayout.timePosition.getter(v8);
  StoredPhotoLayout.maskImage.getter();
  v10 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v2, 1, v10) != 1;
  sub_10000EA70((uint64_t)v2, &qword_1000B3750);
  LOBYTE(v11) = sub_10005531C((uint64_t)v7, v9, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v11 & 1;
}

uint64_t sub_10005074C(uint64_t (*a1)(char *), char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t (*v29)(char *);
  uint64_t v30;

  v29 = a1;
  v6 = type metadata accessor for StoredPhotoLayout(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v26 - v11;
  v13 = *(_QWORD *)(a3 + 64);
  v27 = a3 + 64;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v28 = (unint64_t)(v14 + 63) >> 6;
  v30 = a3;
  result = swift_bridgeObjectRetain(a3);
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v18 >= v28)
      goto LABEL_27;
    v22 = *(_QWORD *)(v27 + 8 * v18);
    if (!v22)
      break;
LABEL_18:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(_QWORD *)(v30 + 56) + *(_QWORD *)(v7 + 72) * v20, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    v24 = v29(v10);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      swift_release(v30);
      return a2 & 1;
    }
    v25 = v24;
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v25 & 1) == 0)
    {
      a2 = 0;
      goto LABEL_28;
    }
  }
  v23 = v18 + 1;
  if (v18 + 1 >= v28)
    goto LABEL_27;
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 2;
  if (v18 + 2 >= v28)
    goto LABEL_27;
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 3;
  if (v18 + 3 >= v28)
    goto LABEL_27;
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 4;
  if (v18 + 4 >= v28)
  {
LABEL_27:
    a2 = 1;
LABEL_28:
    swift_release(v30);
    return a2 & 1;
  }
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
  {
LABEL_17:
    v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v28)
      goto LABEL_27;
    v22 = *(_QWORD *)(v27 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
  return result;
}

BOOL sub_1000509CC(uint64_t a1, uint64_t a2, int a3)
{
  return (sub_10005531C(a1, a2, a3) & 1) == 0;
}

uint64_t sub_1000509E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC11photosfaced10PhotoCache_baseFolder;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC11photosfaced10PhotoCache_database));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100050A48()
{
  return type metadata accessor for PhotoCache(0);
}

uint64_t type metadata accessor for PhotoCache(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B3690;
  if (!qword_1000B3690)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PhotoCache);
  return result;
}

uint64_t sub_100050A8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100050B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for StoredPhoto(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v18 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v23 = *(_QWORD *)(v8 + 72);
      v24 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        v17 = sub_100009174(&qword_1000B3740, (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, (uint64_t)&protocol conformance descriptor for StoredPhoto);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v17);
        v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v7, v4);
        v19(v10, v4);
        v21 = v14-- != 0;
        if ((v18 & 1) == 0)
          break;
        v12 += v23;
        a2 = v16;
        a1 = v15;
      }
      while (v21);
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_100050C88(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt64 v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[9];
  uint64_t v37;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v37 = v9;
      v10 = type metadata accessor for NetworkConnection();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v36, &v37, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v36[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v29 = sub_10005167C(v7, result + 1);
    v36[0] = v29;
    v30 = *(_QWORD *)(v29 + 16);
    if (*(_QWORD *)(v29 + 24) <= v30)
    {
      v33 = v30 + 1;
      swift_retain(a2);
      sub_1000518A0(v33);
      v31 = v36[0];
    }
    else
    {
      v31 = v29;
      swift_retain(a2);
    }
    sub_100051EF0(a2, v31);
    v34 = *v3;
    *v3 = v31;
    swift_bridgeObjectRelease(v34);
    *a1 = a2;
    return 1;
  }
  Hasher.init(_seed:)(v36, *(_QWORD *)(v6 + 40));
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  swift_bridgeObjectRetain(v6);
  v13 = swift_retain(v12);
  v14 = NWConnection.identifier.getter(v13);
  swift_release(v12);
  Hasher._combine(_:)(v14);
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v36[0] = *v3;
    *v3 = 0x8000000000000000;
    v27 = swift_retain(a2);
    sub_100051FB0(v27, v17, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v36[0];
    swift_bridgeObjectRelease(v28);
    *a1 = a2;
    return 1;
  }
  v18 = ~v16;
  while (1)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    v20 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 16);
    swift_retain(v19);
    v21 = swift_retain(v20);
    v22 = NWConnection.identifier.getter(v21);
    swift_release(v20);
    v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
    v24 = swift_retain(v23);
    v25 = NWConnection.identifier.getter(v24);
    swift_release(v19);
    swift_release(v23);
    if (v22 == v25)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  swift_bridgeObjectRelease(v6);
  v32 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v17);
  *a1 = v32;
  swift_retain(v32);
  return 0;
}

uint64_t sub_100050F68(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for ShuffleID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100009174(&qword_1000B3768, v12, (uint64_t)&protocol conformance descriptor for ShuffleID);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100009174(&qword_1000B3770, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100052178((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_1000511C4(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100009174(&qword_1000B3208, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100009174(&qword_1000B3588, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000523CC((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_100051420(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for StoredPhoto(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100009174(&qword_1000B3730, v12, (uint64_t)&protocol conformance descriptor for StoredPhoto);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100009174(&qword_1000B3740, (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, (uint64_t)&protocol conformance descriptor for StoredPhoto);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100052620((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

Swift::Int sub_10005167C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];
  uint64_t v25;
  uint64_t v26;

  if (a2)
  {
    sub_10000629C(&qword_1000B3758);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v26 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for NetworkConnection();
      do
      {
        v24[0] = v7;
        swift_dynamicCast(&v25, v24, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v26;
        v19 = *(_QWORD *)(v26 + 16);
        if (*(_QWORD *)(v26 + 24) <= v19)
        {
          sub_1000518A0(v19 + 1);
          v4 = v26;
        }
        v9 = v25;
        Hasher.init(_seed:)(v24, *(_QWORD *)(v4 + 40));
        v10 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 16);
        v11 = swift_retain(v10);
        v12 = NWConnection.identifier.getter(v11);
        swift_release(v10);
        Hasher._combine(_:)(v12);
        result = Hasher._finalize()();
        v14 = v4 + 56;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 56 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 56 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v20 = 0;
          v21 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v21 && (v20 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v22 = v17 == v21;
            if (v17 == v21)
              v17 = 0;
            v20 |= v22;
            v23 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v23 == -1);
          v18 = __clz(__rbit64(~v23)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_1000518A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt64 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000629C(&qword_1000B3758);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v13;
        if (!v18)
        {
          v13 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v13];
          if (!v18)
          {
            v13 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v13];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v13 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v18 = v33[v13];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v13 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      v21 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 16);
      v22 = swift_retain(v21);
      v23 = NWConnection.identifier.getter(v22);
      swift_release(v21);
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100051B90(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  unint64_t *v48;
  uint64_t v49;

  v48 = a4;
  v49 = a5;
  v7 = v5;
  v47 = a2;
  v9 = a2(0);
  v46 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - v10;
  v12 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10000629C(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_39;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v45 = (_QWORD *)(v12 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = v7;
  v44 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      goto LABEL_35;
    v26 = v45[v25];
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_35;
      v26 = v45[v21];
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        if (!v26)
          break;
      }
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    v28 = v12;
    v29 = *(_QWORD *)(v12 + 48);
    v30 = *(_QWORD *)(v46 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 32);
    v31(v11, v29 + v30 * v24, v9);
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_100009174(v48, v47, v49);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v34 = -1 << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v9);
    ++*(_QWORD *)(v14 + 16);
    v12 = v28;
  }
  v27 = v25 + 3;
  if (v27 < v44)
  {
    v26 = v45[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_41;
        if (v21 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        ++v27;
        if (v26)
          goto LABEL_25;
      }
    }
    v21 = v27;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v12);
  v7 = v43;
  v41 = 1 << *(_BYTE *)(v12 + 32);
  if (v41 > 63)
    bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v45 = -1 << v41;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
  result = swift_release(v12);
  *v7 = v14;
  return result;
}

unint64_t sub_100051EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  Swift::Int v7;
  unint64_t result;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, *(_QWORD *)(a2 + 40));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
  v5 = swift_retain(v4);
  v6 = NWConnection.identifier.getter(v5);
  swift_release(v4);
  Hasher._combine(_:)(v6);
  v7 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_100051FB0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000518A0(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_100052874();
      goto LABEL_12;
    }
    sub_100052C40(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v3 + 40));
  v11 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16);
  v12 = swift_retain(v11);
  v13 = NWConnection.identifier.getter(v12);
  swift_release(v11);
  Hasher._combine(_:)(v13);
  result = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v27 = type metadata accessor for NetworkConnection();
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      v17 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 16);
      swift_retain(v16);
      v18 = swift_retain(v17);
      v19 = NWConnection.identifier.getter(v18);
      swift_release(v17);
      v20 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16);
      v21 = swift_retain(v20);
      v22 = NWConnection.identifier.getter(v21);
      swift_release(v16);
      result = swift_release(v20);
      if (v19 == v22)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v23 + 48) + 8 * a2) = v6;
  v24 = *(_QWORD *)(v23 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (!v25)
  {
    *(_QWORD *)(v23 + 16) = v26;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v27);
  __break(1u);
  return result;
}

uint64_t sub_100052178(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for ShuffleID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100051B90(v12, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, &qword_1000B3778, &qword_1000B3768, (uint64_t)&protocol conformance descriptor for ShuffleID);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100052A1C((uint64_t (*)(_QWORD))&type metadata accessor for ShuffleID, &qword_1000B3778);
      goto LABEL_12;
    }
    sub_100052F00(v12, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, &qword_1000B3778, &qword_1000B3768, (uint64_t)&protocol conformance descriptor for ShuffleID);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100009174(&qword_1000B3768, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100009174(&qword_1000B3770, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_1000523CC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100051B90(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1000B3738, &qword_1000B3208, (uint64_t)&protocol conformance descriptor for UUID);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100052A1C((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1000B3738);
      goto LABEL_12;
    }
    sub_100052F00(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1000B3738, &qword_1000B3208, (uint64_t)&protocol conformance descriptor for UUID);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100009174(&qword_1000B3588, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100052620(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for StoredPhoto(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100051B90(v12, (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, &qword_1000B3748, &qword_1000B3730, (uint64_t)&protocol conformance descriptor for StoredPhoto);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100052A1C((uint64_t (*)(_QWORD))&type metadata accessor for StoredPhoto, &qword_1000B3748);
      goto LABEL_12;
    }
    sub_100052F00(v12, (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, &qword_1000B3748, &qword_1000B3730, (uint64_t)&protocol conformance descriptor for StoredPhoto);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100009174(&qword_1000B3730, (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, (uint64_t)&protocol conformance descriptor for StoredPhoto);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100009174(&qword_1000B3740, (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, (uint64_t)&protocol conformance descriptor for StoredPhoto);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void *sub_100052874()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10000629C(&qword_1000B3758);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)swift_retain(v17);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100052A1C(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - v7;
  sub_10000629C(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release(v9);
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release(v9);
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

Swift::Int sub_100052C40(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt64 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000629C(&qword_1000B3758);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v13);
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v13);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    v21 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 16);
    swift_retain(v20);
    v22 = swift_retain(v21);
    v23 = NWConnection.identifier.getter(v22);
    swift_release(v21);
    Hasher._combine(_:)(v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v13 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v13);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100052F00(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;

  v43 = a4;
  v44 = a5;
  v7 = v5;
  v42 = a2;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10000629C(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = swift_release(v13);
LABEL_37:
    *v7 = v15;
    return result;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v39 = v7;
  v40 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v41 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v41)
        goto LABEL_35;
      v27 = *(_QWORD *)(v40 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v41)
          goto LABEL_35;
        v27 = *(_QWORD *)(v40 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_25:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    v29 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(_QWORD *)(v13 + 48) + v29 * v25, v9);
    v30 = *(_QWORD *)(v15 + 40);
    v31 = sub_100009174(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    v32 = -1 << *(_BYTE *)(v15 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v20 + 8 * v34);
      }
      while (v38 == -1);
      v23 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v23 * v29, v12, v9);
    ++*(_QWORD *)(v15 + 16);
  }
  v28 = v26 + 3;
  if (v28 >= v41)
  {
LABEL_35:
    result = swift_release_n(v13, 2);
    v7 = v39;
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(v40 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

char *sub_10005321C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *result;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (char *)&_swiftEmptyArrayStorage;
  v3 = sub_10000629C(&qword_1000B3200);
  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (char *)j__malloc_size(v8);
  if (v5)
  {
    if (&result[-v7] != (char *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * ((uint64_t)&result[-v7] / v5);
      swift_bridgeObjectRetain(a1);
      v11 = sub_10005455C(&v12, (uint64_t)v8 + v7, v1, a1);
      sub_1000091B4(v12);
      if (v11 == v1)
        return (char *)v8;
      __break(1u);
      return (char *)&_swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100053314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  void *v35;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;

  v4 = sub_10000629C(&qword_1000B2B50);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v40 = (char *)&v37 - v12;
  if (*(_QWORD *)(a2 + 16))
  {
    v41 = a1;
    v42 = 0;
    v13 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain(a1);
    if (v13)
    {
      v14 = 0;
      v38 = v6;
      v39 = (char *)(a2 + 56);
      while (1)
      {
        if (v14 >= v13)
          __break(1u);
        v15 = *(_QWORD *)(v8 + 72);
        v16 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
        v16(v6, a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v15 * v14, v7);
        v42 = v14 + 1;
        v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v17(v6, 0, 1, v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
          break;
        v37 = v17;
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v40, v6, v7);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v7, v19);
        v21 = a2;
        v22 = -1 << *(_BYTE *)(a2 + 32);
        v23 = v20 & ~v22;
        if (((*(_QWORD *)&v39[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) != 0)
        {
          v24 = ~v22;
          while (1)
          {
            v16(v11, *(_QWORD *)(v21 + 48) + v23 * v15, v7);
            v25 = sub_100009174(&qword_1000B3588, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v26 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v40, v7, v25);
            v27 = *(void (**)(char *, uint64_t))(v8 + 8);
            v27(v11, v7);
            if ((v26 & 1) != 0)
              break;
            v23 = (v23 + 1) & v24;
            if (((*(_QWORD *)&v39[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) == 0)
              goto LABEL_12;
          }
          isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v27)(v40, v7);
          v29 = *(_BYTE *)(v21 + 32);
          v30 = v29 & 0x3F;
          v31 = (1 << v29) + 63;
          v32 = v31 >> 6;
          v33 = 8 * (v31 >> 6);
          if (v30 <= 0xD
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v31 >> 6), 8),
                (_DWORD)isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)&v37 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0), v39, v33);
            v34 = sub_100053B38((unint64_t *)((char *)&v37 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0)), v32, v21, v23, &v41);
            swift_release(v21);
            swift_bridgeObjectRelease(v41);
          }
          else
          {
            v35 = (void *)swift_slowAlloc(v33, -1);
            memcpy(v35, v39, v33);
            v34 = sub_100053B38((unint64_t *)v35, v32, v21, v23, &v41);
            swift_release(v21);
            swift_bridgeObjectRelease(v41);
            swift_slowDealloc(v35, -1, -1);
          }
          return v34;
        }
        v27 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_12:
        v27(v40, v7);
        a1 = v41;
        v14 = v42;
        v13 = *(_QWORD *)(v41 + 16);
        a2 = v21;
        v6 = v38;
        if (v42 == v13)
        {
          v37(v38, 1, 1, v7);
          break;
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    }
    swift_bridgeObjectRelease(a1);
    sub_10000EA70((uint64_t)v6, &qword_1000B2B50);
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  return (void *)a2;
}

void *sub_100053780(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  void *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;

  v4 = type metadata accessor for StoredPhoto(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v36 - v9;
  if (*(_QWORD *)(a2 + 16))
  {
    v38 = a1;
    v11 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain(a1);
    if (v11)
    {
      v12 = 0;
      v36 = v5;
      v37 = (char *)(a2 + 56);
      while (1)
      {
        if (v12 >= v11)
          __break(1u);
        v13 = *(_QWORD *)(v5 + 72);
        v14 = a1
            + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
            + v13 * v12;
        v39 = v12 + 1;
        v15 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
        v15(v10, v14, v4);
        v16 = *(_QWORD *)(a2 + 40);
        v17 = sub_100009174(&qword_1000B3730, (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, (uint64_t)&protocol conformance descriptor for StoredPhoto);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v4, v17);
        v19 = a2;
        v20 = -1 << *(_BYTE *)(a2 + 32);
        v21 = v5;
        v22 = v18 & ~v20;
        if (((*(_QWORD *)&v37[(v22 >> 3) & 0xFFFFFFFFFFFFF8] >> v22) & 1) != 0)
          break;
        v26 = *(void (**)(char *, uint64_t))(v21 + 8);
LABEL_11:
        v26(v10, v4);
        a1 = v38;
        v12 = v39;
        v11 = *(_QWORD *)(v38 + 16);
        a2 = v19;
        v5 = v36;
        if (v39 == v11)
          goto LABEL_12;
      }
      v23 = ~v20;
      while (1)
      {
        v15(v8, *(_QWORD *)(v19 + 48) + v22 * v13, v4);
        v24 = sub_100009174(&qword_1000B3740, (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, (uint64_t)&protocol conformance descriptor for StoredPhoto);
        v25 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v10, v4, v24);
        v26 = *(void (**)(char *, uint64_t))(v36 + 8);
        v26(v8, v4);
        if ((v25 & 1) != 0)
          break;
        v22 = (v22 + 1) & v23;
        if (((*(_QWORD *)&v37[(v22 >> 3) & 0xFFFFFFFFFFFFF8] >> v22) & 1) == 0)
          goto LABEL_11;
      }
      isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v26)(v10, v4);
      v28 = *(_BYTE *)(v19 + 32);
      v29 = v28 & 0x3F;
      v30 = (1 << v28) + 63;
      v31 = v30 >> 6;
      v32 = 8 * (v30 >> 6);
      if (v29 <= 0xD
        || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v30 >> 6), 8),
            (_DWORD)isStackAllocationSafe))
      {
        __chkstk_darwin(isStackAllocationSafe);
        memcpy((char *)&v36 - ((v32 + 15) & 0x3FFFFFFFFFFFFFF0), v37, v32);
        v33 = sub_100053F04((unint64_t *)((char *)&v36 - ((v32 + 15) & 0x3FFFFFFFFFFFFFF0)), v31, v19, v22, &v38);
        swift_release(v19);
        swift_bridgeObjectRelease(v38);
      }
      else
      {
        v34 = (void *)swift_slowAlloc(v32, -1);
        memcpy(v34, v37, v32);
        v33 = sub_100053F04((unint64_t *)v34, v31, v19, v22, &v38);
        swift_release(v19);
        swift_bridgeObjectRelease(v38);
        swift_slowDealloc(v34, -1, -1);
      }
      return v33;
    }
    else
    {
LABEL_12:
      swift_bridgeObjectRelease(a1);
    }
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  return (void *)a2;
}

void *sub_100053B38(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v41 = a2;
  v9 = sub_10000629C(&qword_1000B2B50);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)__chkstk_darwin(v13);
  v19 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v42 = a1;
  v43 = v19 - 1;
  v20 = *a5;
  v21 = a5[1];
  v22 = *(_QWORD *)(*a5 + 16);
  if (v21 == v22)
  {
    v23 = v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v11, 1, 1, v12);
LABEL_22:
    sub_10000EA70((uint64_t)v11, &qword_1000B2B50);
    swift_retain(a3);
    return (void *)sub_10005426C(v42, v23, v43, a3, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1000B3738, &qword_1000B3208, (uint64_t)&protocol conformance descriptor for UUID);
  }
  v47 = a3 + 56;
  v48 = v18;
  v24 = v18;
  v45 = v11;
  v46 = a5;
  v49 = (char *)&v40 - v17;
  while (v21 < v22)
  {
    v26 = *(_QWORD *)(v24 + 72);
    v27 = *(void (**)(char *, unint64_t, uint64_t))(v24 + 16);
    v27(v11, v20 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)) + v26 * v21, v12);
    a5[1] = v21 + 1;
    v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
    v44(v11, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v11, 1, v12) == 1)
    {
      v23 = v41;
      goto LABEL_22;
    }
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v49, v11, v12);
    v28 = *(_QWORD *)(a3 + 40);
    v29 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v12, v29);
    v31 = a3;
    v32 = -1 << *(_BYTE *)(a3 + 32);
    v33 = v30 & ~v32;
    if (((*(_QWORD *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
    {
      v25 = *(uint64_t (**)(char *, uint64_t))(v24 + 8);
LABEL_5:
      result = (void *)v25(v49, v12);
      a3 = v31;
      a5 = v46;
      goto LABEL_6;
    }
    v34 = ~v32;
    while (1)
    {
      v27(v15, *(_QWORD *)(v31 + 48) + v33 * v26, v12);
      v35 = sub_100009174(&qword_1000B3588, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v49, v12, v35);
      v25 = *(uint64_t (**)(char *, uint64_t))(v48 + 8);
      v25(v15, v12);
      if ((v36 & 1) != 0)
        break;
      v33 = (v33 + 1) & v34;
      if (((*(_QWORD *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
        goto LABEL_5;
    }
    result = (void *)v25(v49, v12);
    v37 = (v33 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v38 = *(unint64_t *)((char *)v42 + v37);
    *(unint64_t *)((char *)v42 + v37) = v38 & ~(1 << v33);
    a5 = v46;
    if ((v38 & (1 << v33)) == 0)
    {
      a3 = v31;
LABEL_6:
      v24 = v48;
      goto LABEL_7;
    }
    v39 = v43 - 1;
    v24 = v48;
    if (__OFSUB__(v43, 1))
      goto LABEL_25;
    a3 = v31;
    --v43;
    if (!v39)
      return &_swiftEmptySetSingleton;
LABEL_7:
    v20 = *a5;
    v21 = a5[1];
    v22 = *(_QWORD *)(*a5 + 16);
    v11 = v45;
    if (v21 == v22)
    {
      v23 = v41;
      v44(v45, 1, 1, v12);
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100053F04(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *result;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  void (*v30)(uint64_t, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v44 = a2;
  v9 = type metadata accessor for StoredPhoto(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  result = (void *)__chkstk_darwin(v14);
  v18 = (char *)&v44 - v17;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20);
  v45 = a1;
  *(unint64_t *)((char *)a1 + v20) = v21 & ((-1 << a4) - 1);
  v22 = v19 - 1;
  v23 = *a5;
  v24 = a5[1];
  v25 = *(_QWORD *)(*a5 + 16);
  v46 = v22;
  if (v24 == v25)
  {
LABEL_2:
    swift_retain(a3);
    return (void *)sub_10005426C(v45, v44, v46, a3, (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, &qword_1000B3748, &qword_1000B3730, (uint64_t)&protocol conformance descriptor for StoredPhoto);
  }
  v48 = v16;
  v49 = a3 + 56;
  v51 = v10;
  v26 = v16;
  v47 = a5;
  while (v24 < v25)
  {
    v28 = v23 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v50 = *(_QWORD *)(v10 + 72);
    v29 = v18;
    v30 = *(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16);
    v30(v26, v28 + v50 * v24, v9);
    a5[1] = v24 + 1;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v29, v26, v9);
    v31 = *(_QWORD *)(a3 + 40);
    v32 = sub_100009174(&qword_1000B3730, (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, (uint64_t)&protocol conformance descriptor for StoredPhoto);
    v33 = v29;
    v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v9, v32);
    v35 = a3;
    v36 = -1 << *(_BYTE *)(a3 + 32);
    v37 = v34 & ~v36;
    if (((*(_QWORD *)(v49 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
    {
      v27 = *(uint64_t (**)(char *, uint64_t))(v51 + 8);
LABEL_6:
      v18 = v33;
      result = (void *)v27(v33, v9);
LABEL_7:
      a3 = v35;
      v10 = v51;
      v26 = v48;
      goto LABEL_8;
    }
    v38 = ~v36;
    while (1)
    {
      v30((uint64_t)v13, *(_QWORD *)(v35 + 48) + v37 * v50, v9);
      v39 = sub_100009174(&qword_1000B3740, (uint64_t (*)(uint64_t))&type metadata accessor for StoredPhoto, (uint64_t)&protocol conformance descriptor for StoredPhoto);
      v40 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v33, v9, v39);
      v27 = *(uint64_t (**)(char *, uint64_t))(v51 + 8);
      v27(v13, v9);
      if ((v40 & 1) != 0)
        break;
      v37 = (v37 + 1) & v38;
      if (((*(_QWORD *)(v49 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
        goto LABEL_6;
    }
    v18 = v33;
    result = (void *)v27(v33, v9);
    v41 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v42 = *(unint64_t *)((char *)v45 + v41);
    *(unint64_t *)((char *)v45 + v41) = v42 & ~(1 << v37);
    if ((v42 & (1 << v37)) == 0)
      goto LABEL_7;
    v43 = v46 - 1;
    v10 = v51;
    v26 = v48;
    if (__OFSUB__(v46, 1))
      goto LABEL_20;
    a3 = v35;
    --v46;
    if (!v43)
      return &_swiftEmptySetSingleton;
LABEL_8:
    a5 = v47;
    v23 = *v47;
    v24 = v47[1];
    v25 = *(_QWORD *)(*v47 + 16);
    if (v24 == v25)
      goto LABEL_2;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_100054248(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005426C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1000B3738, &qword_1000B3208, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_10005426C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t *a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a7;
  v44 = a8;
  v42 = a5;
  v13 = a5(0);
  v45 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - v14;
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_10000629C(a6);
  result = static _SetStorage.allocate(capacity:)(a3);
  v16 = result;
  v40 = a1;
  v41 = a2;
  if (a2 < 1)
    v18 = 0;
  else
    v18 = *a1;
  v19 = 0;
  v20 = result + 56;
  while (1)
  {
    if (v18)
    {
      v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v22 = v21 | (v19 << 6);
    }
    else
    {
      v23 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_40;
      if (v23 >= v41)
      {
LABEL_37:
        swift_release(a4);
        return v16;
      }
      v24 = v40[v23];
      ++v19;
      if (!v24)
      {
        v19 = v23 + 1;
        if (v23 + 1 >= v41)
          goto LABEL_37;
        v24 = v40[v19];
        if (!v24)
        {
          v19 = v23 + 2;
          if (v23 + 2 >= v41)
            goto LABEL_37;
          v24 = v40[v19];
          if (!v24)
          {
            v25 = v23 + 3;
            if (v25 >= v41)
              goto LABEL_37;
            v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                v19 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v19 >= v41)
                  goto LABEL_37;
                v24 = v40[v19];
                ++v25;
                if (v24)
                  goto LABEL_24;
              }
            }
            v19 = v25;
          }
        }
      }
LABEL_24:
      v18 = (v24 - 1) & v24;
      v22 = __clz(__rbit64(v24)) + (v19 << 6);
    }
    v26 = a4;
    v27 = *(_QWORD *)(a4 + 48);
    v28 = *(_QWORD *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v15, v27 + v28 * v22, v13);
    v29 = *(_QWORD *)(v16 + 40);
    v30 = sub_100009174(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v13, v30);
    v31 = -1 << *(_BYTE *)(v16 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v20 + 8 * (v32 >> 6))) != 0)
    {
      v34 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v20 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v37 = v33 == v36;
        if (v33 == v36)
          v33 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v20 + 8 * v33);
      }
      while (v38 == -1);
      v34 = __clz(__rbit64(~v38)) + (v33 << 6);
    }
    *(_QWORD *)(v20 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v16 + 48) + v34 * v28, v15, v13);
    ++*(_QWORD *)(v16 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v26;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10005455C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_10000629C(&qword_1000B2B50);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v11 - 8);
  result = __chkstk_darwin(v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 56;
  v14 = *(_QWORD *)(a4 + 56);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
    v21 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 56;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      v21 = v39;
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1, 1, v11);
          v19 = 0;
LABEL_38:
          sub_10000EA70((uint64_t)v10, &qword_1000B2B50);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1000548AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v14;

  v2 = v1;
  static SystemDirectory.photosFace.getter();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC11photosfaced10PhotoCache_database) = a1;
  v4 = (void *)objc_opt_self(NSFileManager);
  swift_retain(a1);
  v5 = objc_msgSend(v4, "defaultManager");
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC11photosfaced10PhotoCache_baseFolder);
  v7 = v6;
  v14 = 0;
  v8 = objc_msgSend(v5, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v6, 1, 0, &v14);

  v9 = v14;
  if ((v8 & 1) != 0)
  {
    v10 = v14;
  }
  else
  {
    v11 = v14;
    swift_release(v2);
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v12);
  }
  return v2;
}

uint64_t sub_1000549E4(uint64_t a1)
{
  return sub_100054DE4(a1, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, &qword_1000B3768, (uint64_t)&protocol conformance descriptor for ShuffleID, (void (*)(char *, char *))sub_100050F68);
}

uint64_t sub_100054A08(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[5];
  uint64_t v13;
  char v14[16];
  uint64_t *v15;
  char *v16;

  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for Logger(0);
  v12[3] = *(_QWORD *)(v5 - 8);
  v12[4] = v5;
  __chkstk_darwin(v5);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 66048;
  if ((a2 & 1) == 0)
    v10 = 0;
  v13 = v10;
  static SystemDirectory.folderURL(for:)(a1);
  v15 = &v13;
  v16 = v9;
  URL.withUnsafeFileSystemRepresentation<A>(_:)(sub_100054DCC, v14, (char *)&type metadata for () + 8);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100054DCC(const char *a1)
{
  uint64_t v1;

  return sub_100050048(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100054DE4(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4, void (*a5)(char *, char *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v10 = a2(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v23 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = sub_100009174(a3, a2, a4);
  result = Set.init(minimumCapacity:)(v17, v10, v18);
  v24 = result;
  if (v17)
  {
    v20 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v21 = *(_QWORD *)(v11 + 72);
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    do
    {
      v22(v14, v20, v10);
      a5(v16, v14);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      v20 += v21;
      --v17;
    }
    while (v17);
    return v24;
  }
  return result;
}

uint64_t sub_100054F10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v18 - v7;
  v9 = sub_10000629C(&qword_1000B2B50);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_1000511C4((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1, 1, v2);
  }
  return v19;
}

char *sub_1000550E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;

  v3 = v2;
  v6 = type metadata accessor for StoredPhoto(0);
  v7 = __chkstk_darwin(v6);
  v30 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v24 - v10;
  result = (char *)&_swiftEmptyArrayStorage;
  v32 = (char *)&_swiftEmptyArrayStorage;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v9 + 80);
    v15 = *(_QWORD *)(v9 + 72);
    v25 = v6;
    v26 = (v14 + 32) & ~v14;
    v16 = a1 + v26;
    v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v29 = v9;
    v24 = a2;
    do
    {
      v31 = v13;
      v17 = v28(v11, v16, v6);
      v18 = StoredPhoto.layouts.getter(v17);
      __chkstk_darwin(v18);
      *(&v24 - 2) = a2;
      *(&v24 - 1) = (uint64_t)v11;
      v19 = sub_10005074C((uint64_t (*)(char *))sub_100055300, (char)(&v24 - 4), v18);
      swift_bridgeObjectRelease(v18);
      if ((v19 & 1) != 0)
      {
        v27 = v3;
        v20 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
        v20(v30, v11, v6);
        v21 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
        {
          sub_10004D798(0, *((_QWORD *)v21 + 2) + 1, 1);
          v21 = v32;
        }
        v23 = *((_QWORD *)v21 + 2);
        v22 = *((_QWORD *)v21 + 3);
        if (v23 >= v22 >> 1)
        {
          sub_10004D798(v22 > 1, v23 + 1, 1);
          v21 = v32;
        }
        *((_QWORD *)v21 + 2) = v23 + 1;
        v6 = v25;
        v20(&v21[v26 + v23 * v15], v30, v25);
        v32 = v21;
        a2 = v24;
        v3 = v27;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v6);
      }
      v16 += v15;
      v13 = v31 - 1;
    }
    while (v31 != 1);
    return v32;
  }
  return result;
}

uint64_t sub_100055300()
{
  return sub_100050614() & 1;
}

uint64_t sub_10005531C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v25;
  id v26;
  void *object;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  id v35;
  void *v36;
  NSString v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint8_t *v48;
  char *v49;
  Swift::String v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  Swift::String v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  LODWORD(v70) = a3;
  v5 = type metadata accessor for Logger(0);
  v72 = *(_QWORD *)(v5 - 8);
  v73 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v71 = (char *)&v67 - v9;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v75 = v10;
  v76 = v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v67 - v16;
  v18 = __chkstk_darwin(v15);
  v74 = (char *)&v67 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v67 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v67 - v23;
  static SystemDirectory.baseImageURL(timePosition:uuid:)(a2, a1);
  static SystemDirectory.maskImageURL(timePosition:uuid:)(a2, a1);
  v25 = (void *)objc_opt_self(NSFileManager);
  v26 = objc_msgSend(v25, "defaultManager");
  object = URL.path(percentEncoded:)(1)._object;
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LOBYTE(object) = objc_msgSend(v26, "fileExistsAtPath:", v28);

  if ((object & 1) != 0)
  {
    v74 = v14;
    v68 = (uint64_t)v8;
    v69 = v24;
    v31 = v75;
    v30 = v76;
    v32 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
    v32(v17, v22, v75);
    v33 = v22;
    if ((v70 & 1) == 0)
    {
      v38 = *(void (**)(char *, uint64_t))(v30 + 8);
      v38(v17, v31);
      v40 = v69;
      goto LABEL_8;
    }
    v34 = v22;
    v35 = objc_msgSend(v25, "defaultManager");
    v36 = URL.path(percentEncoded:)(1)._object;
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v36);
    LOBYTE(v36) = objc_msgSend(v35, "fileExistsAtPath:", v37);

    v38 = *(void (**)(char *, uint64_t))(v30 + 8);
    v39 = ((uint64_t (*)(char *, uint64_t))v38)(v17, v31);
    if ((v36 & 1) != 0)
    {
      v40 = v69;
      v33 = v34;
LABEL_8:
      v38(v33, v31);
      v38(v40, v31);
      return 1;
    }
    v55 = v68;
    static Log.photos.getter(v39);
    v56 = v74;
    v57 = v34;
    v58 = ((uint64_t (*)(char *, char *, uint64_t))v32)(v74, v34, v31);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = v31;
      v63 = swift_slowAlloc(32, -1);
      v78 = v63;
      v70 = v57;
      *(_DWORD *)v61 = 136315138;
      v64 = URL.path(percentEncoded:)(1);
      v77 = sub_100021438(v64._countAndFlagsBits, (unint64_t)v64._object, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v61 + 4, v61 + 12);
      swift_bridgeObjectRelease(v64._object);
      v38(v56, v62);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Failed to find file %s", v61, 0xCu);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v61, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v68, v73);
      v38(v70, v62);
      v65 = v69;
      v66 = v62;
    }
    else
    {

      v38(v56, v31);
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v55, v73);
      v38(v57, v31);
      v65 = v69;
      v66 = v31;
    }
    v38(v65, v66);
  }
  else
  {
    v70 = v22;
    v41 = v71;
    static Log.photos.getter(v29);
    v43 = v75;
    v42 = v76;
    v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v76 + 16))(v74, v24, v75);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc(12, -1);
      v69 = v24;
      v48 = (uint8_t *)v47;
      v68 = swift_slowAlloc(32, -1);
      v78 = v68;
      *(_DWORD *)v48 = 136315138;
      v49 = v74;
      v50 = URL.path(percentEncoded:)(1);
      v77 = sub_100021438(v50._countAndFlagsBits, (unint64_t)v50._object, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease(v50._object);
      v51 = *(void (**)(char *, uint64_t))(v42 + 8);
      v51(v49, v43);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to find file %s", v48, 0xCu);
      v52 = v68;
      swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      (*(void (**)(char *, uint64_t))(v72 + 8))(v41, v73);
      v51(v70, v43);
      v51(v69, v43);
    }
    else
    {

      v54 = *(void (**)(char *, uint64_t))(v42 + 8);
      v54(v74, v43);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v41, v73);
      v54(v70, v43);
      v54(v24, v43);
    }
  }
  return 0;
}

uint64_t getEnumTagSinglePayload for PhotoProvidingError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotoProvidingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000559EC + 4 * byte_100096BF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100055A20 + 4 * asc_100096BF0[v4]))();
}

uint64_t sub_100055A20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055A28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100055A30);
  return result;
}

uint64_t sub_100055A3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100055A44);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100055A48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055A50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100055A5C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PhotoProvidingError()
{
  return &type metadata for PhotoProvidingError;
}

unint64_t sub_100055A7C()
{
  unint64_t result;

  result = qword_1000B3788[0];
  if (!qword_1000B3788[0])
  {
    result = swift_getWitnessTable(&unk_100096C54, &type metadata for PhotoProvidingError);
    atomic_store(result, qword_1000B3788);
  }
  return result;
}

BOOL sub_100055AC0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100055AD8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[11];

  v5[0] = &unk_100096CE8;
  v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 88));
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    v5[3] = &unk_100096D00;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 96));
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[6] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[7] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[9] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[10] = (char *)&value witness table for Builtin.NativeObject + 64;
      return swift_initClassMetadata2(a1, 0, 11, v5, a1 + 120);
    }
  }
  return result;
}

_QWORD *sub_100055BA0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

char *sub_100055BAC()
{
  char *v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  swift_release(*((_QWORD *)v0 + 3));
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 136)]);
  sub_100022238(&v0[*(_QWORD *)(*(_QWORD *)v0 + 144)]);
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 152)]);
  swift_release(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 160)]);
  swift_release(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 168)]);
  swift_release(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 176)]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 184)]);
  swift_release(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 192)]);
  swift_release(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 200)]);
  return v0;
}

uint64_t sub_100055C7C()
{
  uint64_t v0;

  sub_100055BAC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for PhotosFaceSystem(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PhotosFaceSystem);
}

uint64_t sub_100055CAC@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  char *v52;

  v44 = a1;
  v45 = a4;
  v49 = a5;
  v7 = sub_10000629C(&qword_1000B1F58);
  __chkstk_darwin(v7);
  v50 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ProtocolVersion(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MessageBody(0);
  v47 = *(_QWORD *)(v12 - 8);
  v48 = v12;
  v13 = *(_QWORD *)(v47 + 64);
  v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  v16 = (char *)&v42 - v15;
  v17 = swift_allocObject(&unk_1000AEB08, 40, 7);
  v18 = static DemuxConstants.requestTimeout.getter(v17);
  *(_DWORD *)(v17 + 16) = sub_100022EBC(0xD00000000000001CLL, 0x80000001000945A0, 0xD000000000000024, 0x8000000100095250, v18, v19);
  *(_QWORD *)(v17 + 24) = v20;
  *(_QWORD *)(v17 + 32) = v21;
  v22 = sub_10000629C(&qword_1000B3908);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = AsyncThrowingChannel.init()();
  v51[0] = a2;
  v51[1] = a3;
  swift_bridgeObjectRetain(a3);
  static ProtocolVersion.current.getter(v24);
  v25 = v52;
  MessageBody.init<A>(serializable:version:)(v51, v11, &type metadata for String, &protocol witness table for String);
  if (v25)
  {
    swift_release(v17);
    v26 = v23;
  }
  else
  {
    v27 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v50, 1, 1, v27);
    v28 = v47;
    v29 = *(void (**)(char *, char *))(v47 + 16);
    v30 = v16;
    v52 = v16;
    v31 = v48;
    v29((char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v30);
    v32 = *(unsigned __int8 *)(v28 + 80);
    v43 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v33 = v28;
    v34 = (v32 + 49) & ~v32;
    v35 = v34 + v13;
    v36 = swift_allocObject(&unk_1000AECC0, v35 + 1, v32 | 7);
    *(_QWORD *)(v36 + 16) = 0;
    *(_QWORD *)(v36 + 24) = 0;
    v37 = v46;
    *(_QWORD *)(v36 + 32) = v46;
    *(_QWORD *)(v36 + 40) = v23;
    *(_BYTE *)(v36 + 48) = v44;
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v36 + v34, v43, v31);
    *(_BYTE *)(v36 + v35) = v45 & 1;
    swift_retain(v37);
    swift_retain(v23);
    v38 = sub_100057608(v50, (uint64_t)&unk_1000B3A78, v36);
    swift_release(v38);
    v39 = sub_10000629C(&qword_1000B3920);
    v51[0] = v23;
    swift_retain(v23);
    swift_retain(v17);
    v51[0] = DestructableSequence.__allocating_init(_:_:)(v51, sub_10005BDF8, v17);
    v40 = sub_100006454(&qword_1000B3930, &qword_1000B3920, (uint64_t)&protocol conformance descriptor for DestructableSequence<A>);
    AsyncThrowingMapSequence.init(_:transform:)(v51, &unk_1000B3A80, 0, v39, &type metadata for String, v40);
    swift_release(v23);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v52, v31);
    v26 = v17;
  }
  return swift_release(v26);
}

uint64_t sub_100056010@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *);
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v45 = a1;
  v46 = a3;
  v49 = a4;
  v5 = sub_10000629C(&qword_1000B1F58);
  __chkstk_darwin(v5);
  v50 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ProtocolVersion(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for MessageBody(0);
  v10 = *(_QWORD *)(v48 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v48);
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - v13;
  v15 = swift_allocObject(&unk_1000AEB08, 40, 7);
  v16 = static DemuxConstants.requestTimeout.getter(v15);
  *(_DWORD *)(v15 + 16) = sub_100022EBC(0xD00000000000001CLL, 0x80000001000945A0, 0xD000000000000024, 0x8000000100095250, v16, v17);
  *(_QWORD *)(v15 + 24) = v18;
  *(_QWORD *)(v15 + 32) = v19;
  v20 = sub_10000629C(&qword_1000B3908);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = AsyncThrowingChannel.init()();
  v52 = a2;
  v22 = swift_bridgeObjectRetain(a2);
  static ProtocolVersion.current.getter(v22);
  v23 = sub_10000629C(&qword_1000B2A58);
  v24 = sub_10004EA74();
  v25 = v51;
  MessageBody.init<A>(serializable:version:)(&v52, v9, v23, v24);
  if (v25)
  {
    swift_release(v15);
    v26 = v21;
  }
  else
  {
    v27 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v50, 1, 1, v27);
    v28 = *(void (**)(char *, char *))(v10 + 16);
    v29 = v14;
    v44 = v14;
    v30 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v31 = v48;
    v28(v30, v29);
    v32 = *(unsigned __int8 *)(v10 + 80);
    v33 = (v32 + 49) & ~v32;
    v34 = v33 + v11;
    v35 = swift_allocObject(&unk_1000AEB30, v34 + 1, v32 | 7);
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    v36 = v10;
    v43 = v10;
    v37 = v47;
    *(_QWORD *)(v35 + 32) = v47;
    *(_QWORD *)(v35 + 40) = v21;
    *(_BYTE *)(v35 + 48) = v45;
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v35 + v33, v30, v31);
    *(_BYTE *)(v35 + v34) = v46 & 1;
    swift_retain(v37);
    swift_retain(v21);
    v38 = sub_100057608(v50, (uint64_t)&unk_1000B3918, v35);
    swift_release(v38);
    v39 = sub_10000629C(&qword_1000B3920);
    v52 = v21;
    swift_retain(v21);
    swift_retain(v15);
    v52 = DestructableSequence.__allocating_init(_:_:)(&v52, sub_10005BDF8, v15);
    v40 = type metadata accessor for StoredPhoto(0);
    v41 = sub_100006454(&qword_1000B3930, &qword_1000B3920, (uint64_t)&protocol conformance descriptor for DestructableSequence<A>);
    AsyncThrowingMapSequence.init(_:transform:)(&v52, &unk_1000B3928, 0, v39, v40, v41);
    swift_release(v21);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v31);
    v26 = v15;
  }
  return swift_release(v26);
}

uint64_t sub_10005638C@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a2;
  v45 = a1;
  v46 = a3;
  v49 = a4;
  v4 = sub_10000629C(&qword_1000B1F58);
  __chkstk_darwin(v4);
  v50 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ProtocolVersion(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for MessageBody(0);
  v48 = *(_QWORD *)(v51 - 8);
  v13 = *(_QWORD *)(v48 + 64);
  v14 = __chkstk_darwin(v51);
  v44 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v43 - v15;
  v17 = swift_allocObject(&unk_1000AEB08, 40, 7);
  v18 = static DemuxConstants.requestTimeout.getter(v17);
  *(_DWORD *)(v17 + 16) = sub_100022EBC(0xD00000000000001CLL, 0x80000001000945A0, 0xD000000000000024, 0x8000000100095250, v18, v19);
  *(_QWORD *)(v17 + 24) = v20;
  *(_QWORD *)(v17 + 32) = v21;
  v22 = sub_10000629C(&qword_1000B3908);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = AsyncThrowingChannel.init()();
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v52, v9);
  static ProtocolVersion.current.getter(v24);
  v25 = v16;
  v26 = v53;
  MessageBody.init<A>(serializable:version:)(v12, v8, v9, &protocol witness table for UUID);
  if (v26)
  {
    swift_release(v17);
    v27 = v23;
  }
  else
  {
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v50, 1, 1, v28);
    v29 = v48;
    v30 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    v31 = v44;
    v43 = v25;
    v30(v44, v25, v51);
    v32 = *(unsigned __int8 *)(v29 + 80);
    v33 = (v32 + 49) & ~v32;
    v34 = v33 + v13;
    v35 = swift_allocObject(&unk_1000AEC20, v33 + v13 + 1, v32 | 7);
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    v36 = v47;
    *(_QWORD *)(v35 + 32) = v47;
    *(_QWORD *)(v35 + 40) = v23;
    *(_BYTE *)(v35 + 48) = v45;
    v37 = v31;
    v38 = v51;
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v35 + v33, v37, v51);
    *(_BYTE *)(v35 + v34) = v46 & 1;
    swift_retain(v36);
    swift_retain(v23);
    v39 = sub_100057608(v50, (uint64_t)&unk_1000B3A18, v35);
    swift_release(v39);
    v40 = sub_10000629C(&qword_1000B3920);
    v54 = v23;
    swift_retain(v23);
    swift_retain(v17);
    v54 = DestructableSequence.__allocating_init(_:_:)(&v54, sub_10005BDF8, v17);
    v41 = sub_100006454(&qword_1000B3930, &qword_1000B3920, (uint64_t)&protocol conformance descriptor for DestructableSequence<A>);
    AsyncThrowingMapSequence.init(_:transform:)(&v54, &unk_1000B3A20, 0, v40, &type metadata for Data, v41);
    swift_release(v23);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v43, v38);
    v27 = v17;
  }
  return swift_release(v27);
}

uint64_t sub_100056730@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a2;
  v45 = a1;
  v46 = a3;
  v49 = a4;
  v4 = sub_10000629C(&qword_1000B1F58);
  __chkstk_darwin(v4);
  v50 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ProtocolVersion(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SyncFacesRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for MessageBody(0);
  v48 = *(_QWORD *)(v51 - 8);
  v13 = *(_QWORD *)(v48 + 64);
  v14 = __chkstk_darwin(v51);
  v44 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v43 - v15;
  v17 = swift_allocObject(&unk_1000AEB08, 40, 7);
  v18 = static DemuxConstants.requestTimeout.getter(v17);
  *(_DWORD *)(v17 + 16) = sub_100022EBC(0xD00000000000001CLL, 0x80000001000945A0, 0xD000000000000024, 0x8000000100095250, v18, v19);
  *(_QWORD *)(v17 + 24) = v20;
  *(_QWORD *)(v17 + 32) = v21;
  v22 = sub_10000629C(&qword_1000B3908);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = AsyncThrowingChannel.init()();
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v52, v9);
  static ProtocolVersion.current.getter(v24);
  v25 = v16;
  v26 = v53;
  MessageBody.init<A>(serializable:version:)(v12, v8, v9, &protocol witness table for SyncFacesRequest);
  if (v26)
  {
    swift_release(v17);
    v27 = v23;
  }
  else
  {
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v50, 1, 1, v28);
    v53 = 0;
    v29 = v48;
    v30 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    v31 = v44;
    v43 = v25;
    v30(v44, v25, v51);
    v32 = *(unsigned __int8 *)(v29 + 80);
    v33 = (v32 + 49) & ~v32;
    v34 = v33 + v13;
    v35 = swift_allocObject(&unk_1000AEBF8, v33 + v13 + 1, v32 | 7);
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    v36 = v47;
    *(_QWORD *)(v35 + 32) = v47;
    *(_QWORD *)(v35 + 40) = v23;
    *(_BYTE *)(v35 + 48) = v45;
    v37 = v51;
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v35 + v33, v31, v51);
    *(_BYTE *)(v35 + v34) = v46 & 1;
    swift_retain(v36);
    swift_retain(v23);
    v38 = sub_100057608(v50, (uint64_t)&unk_1000B3A00, v35);
    swift_release(v38);
    v39 = sub_10000629C(&qword_1000B3920);
    v54 = v23;
    swift_retain(v23);
    swift_retain(v17);
    v54 = DestructableSequence.__allocating_init(_:_:)(&v54, sub_10005BDF8, v17);
    v40 = sub_10000629C(&qword_1000B25E0);
    v41 = sub_100006454(&qword_1000B3930, &qword_1000B3920, (uint64_t)&protocol conformance descriptor for DestructableSequence<A>);
    AsyncThrowingMapSequence.init(_:transform:)(&v54, &unk_1000B3A08, 0, v39, v40, v41);
    swift_release(v23);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v43, v37);
    v27 = v17;
  }
  return swift_release(v27);
}

uint64_t sub_100056AE8@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a2;
  v45 = a1;
  v46 = a3;
  v49 = a4;
  v4 = sub_10000629C(&qword_1000B1F58);
  __chkstk_darwin(v4);
  v50 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ProtocolVersion(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ShuffleID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for MessageBody(0);
  v48 = *(_QWORD *)(v51 - 8);
  v13 = *(_QWORD *)(v48 + 64);
  v14 = __chkstk_darwin(v51);
  v44 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v43 - v15;
  v17 = swift_allocObject(&unk_1000AEB08, 40, 7);
  v18 = static DemuxConstants.requestTimeout.getter(v17);
  *(_DWORD *)(v17 + 16) = sub_100022EBC(0xD00000000000001CLL, 0x80000001000945A0, 0xD000000000000024, 0x8000000100095250, v18, v19);
  *(_QWORD *)(v17 + 24) = v20;
  *(_QWORD *)(v17 + 32) = v21;
  v22 = sub_10000629C(&qword_1000B3908);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = AsyncThrowingChannel.init()();
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v52, v9);
  static ProtocolVersion.current.getter(v24);
  v25 = v16;
  v26 = v53;
  MessageBody.init<A>(serializable:version:)(v12, v8, v9, &protocol witness table for ShuffleID);
  if (v26)
  {
    swift_release(v17);
    v27 = v23;
  }
  else
  {
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v50, 1, 1, v28);
    v53 = 0;
    v29 = v48;
    v30 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    v31 = v44;
    v43 = v25;
    v30(v44, v25, v51);
    v32 = *(unsigned __int8 *)(v29 + 80);
    v33 = (v32 + 49) & ~v32;
    v34 = v33 + v13;
    v35 = swift_allocObject(&unk_1000AEC48, v33 + v13 + 1, v32 | 7);
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    v36 = v47;
    *(_QWORD *)(v35 + 32) = v47;
    *(_QWORD *)(v35 + 40) = v23;
    *(_BYTE *)(v35 + 48) = v45;
    v37 = v51;
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v35 + v33, v31, v51);
    *(_BYTE *)(v35 + v34) = v46 & 1;
    swift_retain(v36);
    swift_retain(v23);
    v38 = sub_100057608(v50, (uint64_t)&unk_1000B3A30, v35);
    swift_release(v38);
    v39 = sub_10000629C(&qword_1000B3920);
    v54 = v23;
    swift_retain(v23);
    swift_retain(v17);
    v54 = DestructableSequence.__allocating_init(_:_:)(&v54, sub_10005BDF8, v17);
    v40 = type metadata accessor for StoredPhoto(0);
    v41 = sub_100006454(&qword_1000B3930, &qword_1000B3920, (uint64_t)&protocol conformance descriptor for DestructableSequence<A>);
    AsyncThrowingMapSequence.init(_:transform:)(&v54, &unk_1000B3A38, 0, v39, v40, v41);
    swift_release(v23);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v43, v37);
    v27 = v17;
  }
  return swift_release(v27);
}

uint64_t sub_100056E9C@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a2;
  v45 = a1;
  v46 = a3;
  v49 = a4;
  v4 = sub_10000629C(&qword_1000B1F58);
  __chkstk_darwin(v4);
  v50 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ProtocolVersion(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SyncFacesRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for MessageBody(0);
  v48 = *(_QWORD *)(v51 - 8);
  v13 = *(_QWORD *)(v48 + 64);
  v14 = __chkstk_darwin(v51);
  v44 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v43 - v15;
  v17 = swift_allocObject(&unk_1000AEB08, 40, 7);
  v18 = static DemuxConstants.requestTimeout.getter(v17);
  *(_DWORD *)(v17 + 16) = sub_100022EBC(0xD00000000000001CLL, 0x80000001000945A0, 0xD000000000000024, 0x8000000100095250, v18, v19);
  *(_QWORD *)(v17 + 24) = v20;
  *(_QWORD *)(v17 + 32) = v21;
  v22 = sub_10000629C(&qword_1000B3908);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = AsyncThrowingChannel.init()();
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v52, v9);
  static ProtocolVersion.current.getter(v24);
  v25 = v16;
  v26 = v53;
  MessageBody.init<A>(serializable:version:)(v12, v8, v9, &protocol witness table for SyncFacesRequest);
  if (v26)
  {
    swift_release(v17);
    v27 = v23;
  }
  else
  {
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v50, 1, 1, v28);
    v53 = 0;
    v29 = v48;
    v30 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    v31 = v44;
    v43 = v25;
    v30(v44, v25, v51);
    v32 = *(unsigned __int8 *)(v29 + 80);
    v33 = (v32 + 49) & ~v32;
    v34 = v33 + v13;
    v35 = swift_allocObject(&unk_1000AEC70, v33 + v13 + 1, v32 | 7);
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    v36 = v47;
    *(_QWORD *)(v35 + 32) = v47;
    *(_QWORD *)(v35 + 40) = v23;
    *(_BYTE *)(v35 + 48) = v45;
    v37 = v51;
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v35 + v33, v31, v51);
    *(_BYTE *)(v35 + v34) = v46 & 1;
    swift_retain(v36);
    swift_retain(v23);
    v38 = sub_100057608(v50, (uint64_t)&unk_1000B3A48, v35);
    swift_release(v38);
    v39 = sub_10000629C(&qword_1000B3920);
    v54 = v23;
    swift_retain(v23);
    swift_retain(v17);
    v54 = DestructableSequence.__allocating_init(_:_:)(&v54, sub_10005BDF8, v17);
    v40 = sub_10000629C(&qword_1000B25E8);
    v41 = sub_100006454(&qword_1000B3930, &qword_1000B3920, (uint64_t)&protocol conformance descriptor for DestructableSequence<A>);
    AsyncThrowingMapSequence.init(_:transform:)(&v54, &unk_1000B3A50, 0, v39, v40, v41);
    swift_release(v23);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v43, v37);
    v27 = v17;
  }
  return swift_release(v27);
}

uint64_t sub_100057254@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a2;
  v45 = a1;
  v46 = a3;
  v49 = a4;
  v4 = sub_10000629C(&qword_1000B1F58);
  __chkstk_darwin(v4);
  v50 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ProtocolVersion(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AlbumID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for MessageBody(0);
  v48 = *(_QWORD *)(v51 - 8);
  v13 = *(_QWORD *)(v48 + 64);
  v14 = __chkstk_darwin(v51);
  v44 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v43 - v15;
  v17 = swift_allocObject(&unk_1000AEB08, 40, 7);
  v18 = static DemuxConstants.requestTimeout.getter(v17);
  *(_DWORD *)(v17 + 16) = sub_100022EBC(0xD00000000000001CLL, 0x80000001000945A0, 0xD000000000000024, 0x8000000100095250, v18, v19);
  *(_QWORD *)(v17 + 24) = v20;
  *(_QWORD *)(v17 + 32) = v21;
  v22 = sub_10000629C(&qword_1000B3908);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = AsyncThrowingChannel.init()();
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v52, v9);
  static ProtocolVersion.current.getter(v24);
  v25 = v16;
  v26 = v53;
  MessageBody.init<A>(serializable:version:)(v12, v8, v9, &protocol witness table for AlbumID);
  if (v26)
  {
    swift_release(v17);
    v27 = v23;
  }
  else
  {
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v50, 1, 1, v28);
    v53 = 0;
    v29 = v48;
    v30 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    v31 = v44;
    v43 = v25;
    v30(v44, v25, v51);
    v32 = *(unsigned __int8 *)(v29 + 80);
    v33 = (v32 + 49) & ~v32;
    v34 = v33 + v13;
    v35 = swift_allocObject(&unk_1000AEC98, v33 + v13 + 1, v32 | 7);
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    v36 = v47;
    *(_QWORD *)(v35 + 32) = v47;
    *(_QWORD *)(v35 + 40) = v23;
    *(_BYTE *)(v35 + 48) = v45;
    v37 = v51;
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v35 + v33, v31, v51);
    *(_BYTE *)(v35 + v34) = v46 & 1;
    swift_retain(v36);
    swift_retain(v23);
    v38 = sub_100057608(v50, (uint64_t)&unk_1000B3A60, v35);
    swift_release(v38);
    v39 = sub_10000629C(&qword_1000B3920);
    v54 = v23;
    swift_retain(v23);
    swift_retain(v17);
    v54 = DestructableSequence.__allocating_init(_:_:)(&v54, sub_10005BDF8, v17);
    v40 = type metadata accessor for StoredPhoto(0);
    v41 = sub_100006454(&qword_1000B3930, &qword_1000B3920, (uint64_t)&protocol conformance descriptor for DestructableSequence<A>);
    AsyncThrowingMapSequence.init(_:transform:)(&v54, &unk_1000B3A68, 0, v39, v40, v41);
    swift_release(v23);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v43, v37);
    v27 = v17;
  }
  return swift_release(v27);
}

uint64_t sub_100057608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10005BE00(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_1000AEB58, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1000B3940, v16);
}

uint64_t sub_10005774C(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  LODWORD(v55) = a4;
  v51 = a3;
  v50 = a2;
  v54 = a1;
  v5 = type metadata accessor for Logger(0);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MessageBody(0);
  v48 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Message.Operation(0);
  v46 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  __chkstk_darwin(v11);
  v13 = (_DWORD *)((char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Message(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v45 - v19;
  v21 = sub_10000629C(&qword_1000B3948);
  v53 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v4;
  v24 = *(_QWORD *)(v4 + 64);
  swift_retain(v24);
  dispatch thunk of MessageDemultiplexer.sendRequest(_:)(v54);
  swift_release(v24);
  v54 = v21;
  v25 = v21;
  v26 = (uint64_t)v20;
  v52 = v23;
  v27 = v50;
  v28 = InFlightRequest.requestID.getter(v25);
  *v13 = v27;
  v13[1] = v28;
  (*(void (**)(_DWORD *, _QWORD, uint64_t))(v46 + 104))(v13, enum case for Message.Operation.request(_:), v47);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v10, v51, v49);
  v29 = Message.init(operation:content:complete:)(v13, v10, v55);
  static Log.network.getter(v29);
  v30 = v18;
  v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
  v55 = v7;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(64, -1);
    v60 = v51;
    *(_DWORD *)v34 = 136315394;
    v35 = sub_100004DD4(v27);
    v37 = v36;
    v59 = sub_100021438(v35, v36, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v34 + 4, v34 + 12);
    v38 = swift_bridgeObjectRelease(v37);
    *(_WORD *)(v34 + 12) = 2080;
    v39 = Message.shortDescription.getter(v38);
    v41 = v40;
    v59 = sub_100021438(v39, v40, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v34 + 14, v34 + 22);
    swift_bridgeObjectRelease(v41);
    v42 = *(void (**)(char *, uint64_t))(v15 + 8);
    v42(v30, v14);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "[NMC] Sending request %s: %s", (uint8_t *)v34, 0x16u);
    v43 = v51;
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    v42 = *(void (**)(char *, uint64_t))(v15 + 8);
    v42(v18, v14);
  }

  (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
  sub_100057D70(v26);
  v42((char *)v26, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v52, v54);
}

uint64_t sub_100057B24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10005C6B4, 0, 0);
}

uint64_t sub_100057B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100057B54, 0, 0);
}

uint64_t sub_100057B54()
{
  uint64_t v0;

  MessageBody.deserialized<A>()(&type metadata for Data, &protocol witness table for Data);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100057BC8, 0, 0);
}

uint64_t sub_100057BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_10000629C(&qword_1000B25E0);
  v2 = sub_100006454(&qword_1000B35F0, &qword_1000B25E0, (uint64_t)&protocol conformance descriptor for SyncedPhotosFace<A>);
  MessageBody.deserialized<A>()(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057C54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100057C6C, 0, 0);
}

uint64_t sub_100057C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_10000629C(&qword_1000B25E8);
  v2 = sub_100006454(&qword_1000B3628, &qword_1000B25E8, (uint64_t)&protocol conformance descriptor for SyncedPhotosFace<A>);
  MessageBody.deserialized<A>()(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100057D10, 0, 0);
}

uint64_t sub_100057D10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for StoredPhoto(0);
  MessageBody.deserialized<A>()(v1, &protocol witness table for StoredPhoto);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057D70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  v4 = sub_10000629C(&qword_1000B3950);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v49 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_10000629C(&qword_1000B3958);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v47 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Message(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v43 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.network.getter(v13);
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v46 = a1;
  v16 = v45(v11, a1, v8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v40 = v5;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v42 = v1;
    v22 = v21;
    v52 = v21;
    v41 = v4;
    *(_DWORD *)v20 = 136315138;
    v39 = v20 + 4;
    v23 = sub_100009174(&qword_1000B2220, (uint64_t (*)(uint64_t))&type metadata accessor for Message, (uint64_t)&protocol conformance descriptor for Message);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v8, v23);
    v26 = v25;
    v51 = sub_100021438(v24, v25, &v52);
    v4 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v39, v20 + 12);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "[MSQ] Queueing %s", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v27 = v22;
    v2 = v42;
    swift_slowDealloc(v27, -1, -1);
    v28 = v20;
    v5 = v40;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v44);
  v29 = sub_10000629C(&qword_1000B3960);
  v30 = *(unsigned __int8 *)(v9 + 80);
  v31 = (v30 + 32) & ~v30;
  v32 = swift_allocObject(v29, v31 + *(_QWORD *)(v9 + 72), v30 | 7);
  *(_OWORD *)(v32 + 16) = xmmword_100096430;
  v45((char *)(v32 + v31), v46, v8);
  v52 = v32;
  v33 = sub_10000629C(&qword_1000B3968);
  v34 = sub_100006454(&qword_1000B3970, &qword_1000B3968, (uint64_t)&protocol conformance descriptor for [A]);
  v35 = v49;
  Sequence.async.getter(v33, v34);
  swift_bridgeObjectRelease(v32);
  v36 = sub_100006454(&qword_1000B3978, &qword_1000B3950, (uint64_t)&protocol conformance descriptor for AsyncSyncSequence<A>);
  v37 = (uint64_t)v47;
  AsyncSequence<>.throwing.getter(v4, v36);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v35, v4);
  sub_10005B8FC(v37, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v37, v50);
}

uint64_t sub_100058134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4[2] = a4;
  v5 = type metadata accessor for Logger(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommunicationActor(0);
  v4[6] = v7;
  v4[7] = static CommunicationActor.shared.getter(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_1000B3994);
  v4[8] = v8;
  *v8 = v4;
  v8[1] = sub_1000581C4;
  return sub_100058328();
}

uint64_t sub_1000581C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  v2 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_10005824C, v3, v4);
}

uint64_t sub_10005824C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = swift_release(*(_QWORD *)(v0 + 56));
  v2 = static Log.network.getter(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[MSQ] Task done.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  *(_BYTE *)(v9 + 48) = 0;
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100058328()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1[14] = v0;
  v2 = type metadata accessor for Message(0);
  v1[15] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[16] = v3;
  v1[17] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000629C(&qword_1000B3998);
  v1[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v1[19] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[20] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[21] = swift_task_alloc(v7);
  v1[22] = swift_task_alloc(v7);
  v1[23] = swift_task_alloc(v7);
  v8 = sub_10000629C(&qword_1000B39A0);
  v1[24] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[25] = v9;
  v1[26] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CommunicationActor(0);
  v1[27] = v10;
  static CommunicationActor.shared.getter(v10);
  v11 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v1[28] = v11;
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v10, v11);
  v1[29] = v12;
  v1[30] = v13;
  return swift_task_switch(sub_100058478, v12, v13);
}

uint64_t sub_100058478()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v7;

  v1 = v0[28];
  v2 = *(_QWORD *)(v0[14] + 56);
  v0[31] = v2;
  v3 = swift_retain(v2);
  v4 = static CommunicationActor.shared.getter(v3);
  v0[32] = v4;
  v7 = (char *)&async function pointer to dispatch thunk of NonSendableQueue.popFirst(isolation:)
     + async function pointer to dispatch thunk of NonSendableQueue.popFirst(isolation:);
  v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of NonSendableQueue.popFirst(isolation:)
                                  + 1));
  v0[33] = v5;
  *v5 = v0;
  v5[1] = sub_100058510;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v7)(v0[26], v4, v1);
}

uint64_t sub_100058510()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 256);
  v3 = *(_QWORD *)(*v0 + 248);
  swift_task_dealloc(*(_QWORD *)(*v0 + 264));
  swift_release(v2);
  swift_release(v3);
  return swift_task_switch(sub_100058578, *(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 240));
}

uint64_t sub_100058578()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v2 = v0[25];
  v1 = v0[26];
  v3 = v0[24];
  SendableWrapper.value.getter(v0 + 2, v3);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = static Log.network.getter(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[MSQ] Dequeue", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v9 = v0[23];
  v10 = v0[19];
  v11 = v0[20];

  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[34] = v12;
  v12(v9, v10);
  v13 = v0[5];
  v14 = v0[6];
  v15 = sub_10003D4FC(v0 + 2, v13);
  v16 = *(_QWORD *)(v13 - 8);
  v17 = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v16 + 16))(v17, v15, v13);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v14, v13, &protocol requirements base descriptor for AsyncSequence, &associated type descriptor for AsyncSequence.AsyncIterator);
  v0[10] = AssociatedTypeWitness;
  v0[11] = swift_getAssociatedConformanceWitness(v14, v13, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  sub_10003D62C(v0 + 7);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v13, v14);
  v19 = swift_task_dealloc(v17);
  v20 = v0[28];
  v21 = static CommunicationActor.shared.getter(v19);
  v0[35] = v21;
  v22 = v0[10];
  v23 = v0[11];
  sub_10003D6F0((uint64_t)(v0 + 7), v22);
  v24 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[36] = v24;
  *v24 = v0;
  v24[1] = sub_100058788;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[18], v21, v20, v0 + 12, v22, v23);
}

uint64_t sub_100058788()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 288));
  swift_release(v2[35]);
  if (v0)
    v3 = sub_10005897C;
  else
    v3 = sub_1000587F8;
  return swift_task_switch(v3, v2[29], v2[30]);
}

uint64_t sub_1000587F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[18];
  v2 = v0[15];
  v3 = v0[16];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_100022238(v0 + 7);
    sub_100022238(v0 + 2);
    v4 = v0[28];
    v5 = *(_QWORD *)(v0[14] + 56);
    v0[31] = v5;
    v6 = swift_retain(v5);
    v7 = static CommunicationActor.shared.getter(v6);
    v0[32] = v7;
    v17 = (char *)&async function pointer to dispatch thunk of NonSendableQueue.popFirst(isolation:)
        + async function pointer to dispatch thunk of NonSendableQueue.popFirst(isolation:);
    v8 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of NonSendableQueue.popFirst(isolation:)
                                    + 1));
    v0[33] = v8;
    *v8 = v0;
    v8[1] = sub_100058510;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v17)(v0[26], v7, v4);
  }
  else
  {
    v10 = v0[28];
    v11 = v0[17];
    v12 = v0[14];
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11, v1, v2);
    v14 = static CommunicationActor.shared.getter(v13);
    v0[37] = v14;
    v15 = swift_task_alloc(32);
    v0[38] = v15;
    *(_QWORD *)(v15 + 16) = v11;
    *(_QWORD *)(v15 + 24) = v12;
    v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000B39B8 + dword_1000B39B8);
    v16 = (_QWORD *)swift_task_alloc(unk_1000B39BC);
    v0[39] = v16;
    *v16 = v0;
    v16[1] = sub_100058B88;
    return v18(v14, v10, (uint64_t)&unk_1000B39B0, v15);
  }
}

uint64_t sub_10005897C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v16;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = sub_100022238((_QWORD *)(v0 + 56));
  static Log.network.getter(v2);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 104) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MSQ] Error reading message from stream: %@", v6, 0xCu);
    v9 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  (*(void (**)(_QWORD, _QWORD))(v0 + 272))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152));
  sub_100022238((_QWORD *)(v0 + 16));
  v10 = *(_QWORD *)(v0 + 224);
  v11 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 56);
  *(_QWORD *)(v0 + 248) = v11;
  v12 = swift_retain(v11);
  v13 = static CommunicationActor.shared.getter(v12);
  *(_QWORD *)(v0 + 256) = v13;
  v16 = (char *)&async function pointer to dispatch thunk of NonSendableQueue.popFirst(isolation:)
      + async function pointer to dispatch thunk of NonSendableQueue.popFirst(isolation:);
  v14 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of NonSendableQueue.popFirst(isolation:)
                                   + 1));
  *(_QWORD *)(v0 + 264) = v14;
  *v14 = v0;
  v14[1] = sub_100058510;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v16)(*(_QWORD *)(v0 + 208), v13, v10);
}

uint64_t sub_100058B88(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 304);
  v3 = *(_QWORD *)(*v1 + 312);
  v5 = *(_QWORD *)(*v1 + 296);
  *(_BYTE *)(*v1 + 320) = a1;
  swift_task_dealloc(v3);
  swift_release(v5);
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100058BFC, *(_QWORD *)(v2 + 232), *(_QWORD *)(v2 + 240));
}

uint64_t sub_100058BFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;

  if ((*(_BYTE *)(v1 + 320) & 1) != 0)
  {
    v2 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 128) + 8))(*(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 120));
    v3 = *(_QWORD *)(v1 + 224);
    v4 = static CommunicationActor.shared.getter(v2);
    *(_QWORD *)(v1 + 280) = v4;
    v5 = *(_QWORD *)(v1 + 80);
    v6 = *(_QWORD *)(v1 + 88);
    sub_10003D6F0(v1 + 56, v5);
    v7 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v1 + 288) = v7;
    *v7 = v1;
    v7[1] = sub_100058788;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v1 + 144), v4, v3, v1 + 96, v5, v6);
  }
  else
  {
    v9 = static Log.network.getter(a1);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "[MSQ] Exiting loop until more data queued", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
    v13 = *(void (**)(uint64_t, uint64_t))(v1 + 272);
    v14 = *(_QWORD *)(v1 + 168);
    v15 = *(_QWORD *)(v1 + 152);
    v17 = *(_QWORD *)(v1 + 128);
    v16 = *(_QWORD *)(v1 + 136);
    v18 = *(_QWORD *)(v1 + 120);

    v13(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    sub_100022238((_QWORD *)(v1 + 56));
    sub_100022238((_QWORD *)(v1 + 16));
    v19 = *(_QWORD *)(v1 + 224);
    v20 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 56);
    *(_QWORD *)(v1 + 248) = v20;
    v21 = swift_retain(v20);
    v22 = static CommunicationActor.shared.getter(v21);
    *(_QWORD *)(v1 + 256) = v22;
    v24 = (char *)&async function pointer to dispatch thunk of NonSendableQueue.popFirst(isolation:)
        + async function pointer to dispatch thunk of NonSendableQueue.popFirst(isolation:);
    v23 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of NonSendableQueue.popFirst(isolation:)
                                     + 1));
    *(_QWORD *)(v1 + 264) = v23;
    *v23 = v1;
    v23[1] = sub_100058510;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v24)(*(_QWORD *)(v1 + 208), v22, v19);
  }
}

uint64_t sub_100058E10(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2[6] = a1;
  v2[7] = a2;
  v3 = type metadata accessor for Message(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  v2[12] = swift_task_alloc(v5);
  v6 = type metadata accessor for Logger(0);
  v2[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[14] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v8);
  v2[16] = swift_task_alloc(v8);
  v2[17] = swift_task_alloc(v8);
  v9 = type metadata accessor for CommunicationActor(0);
  v2[18] = static CommunicationActor.shared.getter(v9);
  v10 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  v2[19] = v11;
  v2[20] = v12;
  return swift_task_switch(sub_100058F28, v11, v12);
}

uint64_t sub_100058F28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1[6];
  v3 = v1[12];
  v4 = v1[8];
  v5 = v1[9];
  static Log.network.getter(a1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v1[21] = v6;
  v7 = v6(v3, v2, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = v1[12];
    v29 = v1[13];
    v30 = v1[17];
    v11 = v1[8];
    v27 = v1[9];
    v28 = v1[14];
    v26 = v11;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v31 = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = sub_100009174(&qword_1000B2220, (uint64_t (*)(uint64_t))&type metadata accessor for Message, (uint64_t)&protocol conformance descriptor for Message);
    v15 = v10;
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    v18 = v17;
    v1[5] = sub_100021438(v16, v17, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5, v1 + 6, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v18);
    v19 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v19(v15, v26);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[MSQ] Send start: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v20 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v20(v30, v29);
  }
  else
  {
    v21 = v1[17];
    v22 = v1[13];
    v23 = v1[14];
    v19 = *(void (**)(uint64_t, uint64_t))(v1[9] + 8);
    v19(v1[12], v1[8]);

    v20 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v20(v21, v22);
  }
  v1[22] = v20;
  v1[23] = v19;
  v24 = (_QWORD *)swift_task_alloc(dword_1000B2114);
  v1[24] = v24;
  *v24 = v1;
  v24[1] = sub_100059160;
  return sub_1000093F8(v1[6]);
}

uint64_t sub_100059160()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000593D8;
  else
    v4 = sub_1000591C0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 152), *(_QWORD *)(v2 + 160));
}

uint64_t sub_1000591C0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;

  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = swift_release(*(_QWORD *)(v0 + 144));
  static Log.network.getter(v5);
  v6 = v1(v2, v4, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v27 = *(_QWORD *)(v0 + 128);
    v28 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    v26 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 64);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = Message.shortDescription.getter(v12);
    v15 = v14;
    *(_QWORD *)(v0 + 32) = sub_100021438(v13, v14, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    v25(v9, v10);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[MSQ] Send end: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v28(v27, v26);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    v17 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 104);
    (*(void (**)(_QWORD, _QWORD))(v0 + 184))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));

    v16(v17, v18);
  }
  v19 = *(_QWORD *)(v0 + 128);
  v20 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 88);
  v21 = *(_QWORD *)(v0 + 96);
  v23 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_1000593D8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = swift_release(*(_QWORD *)(v0 + 144));
  static Log.network.getter(v6);
  v2(v3, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(_QWORD *)(v0 + 200);
    v36 = *(_QWORD *)(v0 + 120);
    v37 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    v35 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 80);
    v32 = *(_QWORD *)(v0 + 64);
    v33 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    v12 = swift_slowAlloc(22, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    v34 = swift_slowAlloc(32, -1);
    v38 = v34;
    *(_DWORD *)v12 = 136315394;
    v14 = Message.shortDescription.getter(v34);
    v16 = v15;
    *(_QWORD *)(v0 + 16) = sub_100021438(v14, v15, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v16);
    v33(v11, v32);
    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain(v10);
    v17 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(_QWORD *)(v0 + 24) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v12 + 14, v12 + 22);
    *v13 = v17;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[MSQ] Send failed: %s with error: %@. Will retry.", (uint8_t *)v12, 0x16u);
    v18 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v13, 1, v18);
    swift_slowDealloc(v13, -1, -1);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v10);
    v37(v36, v35);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 200);
    v21 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    v22 = *(_QWORD *)(v0 + 120);
    v23 = *(_QWORD *)(v0 + 104);
    v24 = *(_QWORD *)(v0 + 80);
    v25 = *(_QWORD *)(v0 + 64);
    swift_errorRelease(v19);
    v20(v24, v25);
    swift_errorRelease(v19);
    swift_errorRelease(v19);

    v21(v22, v23);
  }
  v26 = *(_QWORD *)(v0 + 128);
  v27 = *(_QWORD *)(v0 + 120);
  v29 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v30 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(2);
}

uint64_t sub_1000596BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4[15] = a3;
  v4[16] = a4;
  v7 = type metadata accessor for ContinuousClock.Instant(0);
  v4[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[18] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[19] = swift_task_alloc(v9);
  v4[20] = swift_task_alloc(v9);
  v10 = type metadata accessor for Logger(0);
  v4[21] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[22] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[23] = swift_task_alloc(v12);
  v4[24] = swift_task_alloc(v12);
  v4[25] = swift_task_alloc(v12);
  v13 = type metadata accessor for ContinuousClock(0);
  v4[26] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[27] = v14;
  v4[28] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    ObjectType = swift_getObjectType(a1);
    v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a2);
    v18 = v17;
  }
  else
  {
    v16 = 0;
    v18 = 0;
  }
  v4[29] = v16;
  v4[30] = v18;
  return swift_task_switch(sub_1000597D0, v16, v18);
}

uint64_t sub_1000597D0()
{
  char *v0;
  int *v1;
  uint64_t v2;
  char **v3;
  uint64_t (*v5)(char *);

  v1 = (int *)*((_QWORD *)v0 + 15);
  *((_QWORD *)v0 + 11) = static Duration.seconds(_:)(0.1);
  *((_QWORD *)v0 + 12) = v2;
  ContinuousClock.init()();
  swift_beginAccess(v0 + 88, v0 + 16, 0, 0);
  v5 = (uint64_t (*)(char *))((char *)v1 + *v1);
  v3 = (char **)swift_task_alloc(v1[1]);
  *((_QWORD *)v0 + 31) = v3;
  *v3 = v0;
  v3[1] = (char *)sub_100059880;
  return v5(v0 + 81);
}

uint64_t sub_100059880()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 248));
  if (v0)
  {
    v2[32] = v0;
    v3 = v2[29];
    v4 = v2[30];
    v5 = sub_100059AD0;
  }
  else
  {
    v3 = v2[29];
    v4 = v2[30];
    v5 = sub_1000598E4;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_1000598E4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(unsigned __int8 *)(v1 + 81);
  if (v2 == 2)
  {
    v3 = static Log.default.getter(a1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v1 + 200);
    v8 = *(_QWORD *)(v1 + 168);
    v9 = *(_QWORD *)(v1 + 176);
    if (v6)
    {
      v10 = swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v23 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = Duration.description.getter(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
      v14 = v13;
      *(_QWORD *)(v10 + 4) = sub_100021438(v12, v13, &v23);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sleeping for %s", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

    v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v15(v7, v8);
    *(_QWORD *)(v1 + 264) = v15;
    *(_OWORD *)(v1 + 104) = *(_OWORD *)(v1 + 88);
    *(_QWORD *)(v1 + 64) = 0;
    *(_QWORD *)(v1 + 72) = 0;
    *(_BYTE *)(v1 + 80) = 1;
    return swift_task_switch(sub_100059B5C, 0, 0);
  }
  else
  {
    v17 = *(_QWORD *)(v1 + 224);
    v18 = *(_QWORD *)(v1 + 200);
    v20 = *(_QWORD *)(v1 + 184);
    v19 = *(_QWORD *)(v1 + 192);
    v22 = *(_QWORD *)(v1 + 152);
    v21 = *(_QWORD *)(v1 + 160);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 216) + 8))(v17, *(_QWORD *)(v1 + 208));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(v2 & 1);
  }
}

uint64_t sub_100059AD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(v1, *(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100059B5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[26];
  v2 = v0[19];
  v3 = v0[17];
  v4 = v0[18];
  v5 = sub_100009174(&qword_1000B2FB0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v1, v5);
  v6 = sub_100009174(qword_1000B2FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 13, v3, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[34] = v7;
  v7(v2, v3);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[35] = v8;
  *v8 = v0;
  v8[1] = sub_100059C6C;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[20], v0 + 8, v0[26], v5);
}

uint64_t sub_100059C6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *v1;
  v4 = *(void (**)(uint64_t, uint64_t))(*v1 + 272);
  v3 = *(_QWORD *)(*v1 + 280);
  v5 = *(_QWORD *)(*v1 + 160);
  v6 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 288) = v0;
  swift_task_dealloc(v3);
  v4(v5, v6);
  if (v0)
  {
    v7 = sub_100059E34;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 232);
    v9 = *(_QWORD *)(v2 + 240);
    v7 = sub_100059CF8;
  }
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_100059CF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v2 = static Log.default.getter(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Done sleeping.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = *(int **)(v1 + 120);
  (*(void (**)(_QWORD, _QWORD))(v1 + 264))(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 168));
  swift_beginAccess(v1 + 88, v1 + 40, 33, 0);
  static DurationProtocol.*= infix(_:_:)(v1 + 88, 2);
  swift_endAccess(v1 + 40);
  v9 = (uint64_t (*)(uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v1 + 296) = v7;
  *v7 = v1;
  v7[1] = sub_10005A034;
  return v9(v1 + 81);
}

uint64_t sub_100059E34()
{
  uint64_t v0;

  return swift_task_switch(sub_100059E44, *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
}

uint64_t sub_100059E44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t);

  v2 = *(_QWORD *)(v1 + 288);
  static Log.default.getter(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v1 + 288);
  if (v6)
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error Sleeping %@", (uint8_t *)v8, 0xCu);
    v11 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v1 + 288));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v12 = *(int **)(v1 + 120);
  (*(void (**)(_QWORD, _QWORD))(v1 + 264))(*(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 168));
  swift_beginAccess(v1 + 88, v1 + 40, 33, 0);
  static DurationProtocol.*= infix(_:_:)(v1 + 88, 2);
  swift_endAccess(v1 + 40);
  v15 = (uint64_t (*)(uint64_t))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc(v12[1]);
  *(_QWORD *)(v1 + 296) = v13;
  *v13 = v1;
  v13[1] = sub_10005A034;
  return v15(v1 + 81);
}

uint64_t sub_10005A034()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 296));
  if (v0)
  {
    v2[32] = v0;
    v3 = v2[29];
    v4 = v2[30];
    v5 = sub_100059AD0;
  }
  else
  {
    v3 = v2[29];
    v4 = v2[30];
    v5 = sub_1000598E4;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_10005A098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = sub_10000629C(&qword_1000B3130);
  v3[6] = v4;
  v3[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000629C(&qword_1000B31B8);
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommunicationActor(0);
  v3[11] = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  return swift_task_switch(sub_10005A180, v9, v10);
}

uint64_t sub_10005A180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t Photo;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t PhotoResponse;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 64);
  v15 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD **)(v0 + 24);
  v7 = swift_release(*(_QWORD *)(v0 + 88));
  Photo = GeneratePhotoRequest.photoIdentifiers.getter(v7);
  v9 = swift_allocObject(&unk_1000AEBA8, 32, 7);
  *(_QWORD *)(v9 + 16) = v5;
  *(_QWORD *)(v9 + 24) = Photo;
  v10 = type metadata accessor for StoredPhoto(0);
  swift_retain(v5);
  swift_bridgeObjectRetain(Photo);
  generateElements<A>(isolation:_:)(0, 0, &unk_1000B39D8, v9, v10);
  swift_release(v9);
  swift_bridgeObjectRelease(Photo);
  *(_QWORD *)(v0 + 16) = v10;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  AsyncSequence.generic.getter(v2, OpaqueTypeConformance2);
  v6[3] = sub_10000629C(&qword_1000B3550);
  v6[4] = sub_100006454(&qword_1000B3558, &qword_1000B3550, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  sub_10003D62C(v6);
  PhotoResponse = type metadata accessor for GeneratePhotoResponse(0);
  v13 = sub_100006454(&qword_1000B3150, &qword_1000B3130, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
  AsyncMapSequence.init(_:transform:)(v3, &unk_1000B39E0, 0, v4, PhotoResponse, v13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v1, v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005A330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = sub_10000629C(&qword_1000B31D0);
  v4[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000629C(&qword_1000B38E8);
  v4[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[9] = v7;
  v4[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000629C(&qword_1000B38F0);
  v4[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[12] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[13] = swift_task_alloc(v10);
  v4[14] = swift_task_alloc(v10);
  v11 = type metadata accessor for UUID(0);
  v4[15] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[16] = v12;
  v4[17] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for StoredPhoto(0);
  v4[18] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[19] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[20] = swift_task_alloc(v15);
  v4[21] = swift_task_alloc(v15);
  v4[22] = swift_task_alloc(v15);
  v16 = type metadata accessor for CommunicationActor(0);
  v4[23] = v16;
  v4[24] = static CommunicationActor.shared.getter(v16);
  v17 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4[25] = v17;
  v18 = dispatch thunk of Actor.unownedExecutor.getter(v16, v17);
  v4[26] = v18;
  v4[27] = v19;
  return swift_task_switch(sub_10005A4C4, v18, v19);
}

uint64_t sub_10005A4C4()
{
  uint64_t *v0;
  uint64_t **v1;

  v0[28] = *(_QWORD *)(v0[6] + 16);
  v1 = (uint64_t **)swift_task_alloc(dword_1000B372C);
  v0[29] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10005A51C;
  return sub_10004FB58(v0[3]);
}

uint64_t sub_10005A51C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 232);
  v4[30] = a1;
  v4[31] = a2;
  v4[32] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_10005AEFC;
  else
    v6 = sub_10005A588;
  return swift_task_switch(v6, v4[26], v4[27]);
}

uint64_t sub_10005A588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t (*v7)(_QWORD, unint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t (*v33)(_QWORD);

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 264) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 152);
    v5 = *(int **)(v0 + 32);
    v6 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 376) = v6;
    *(_QWORD *)(v0 + 272) = *(_QWORD *)(v4 + 72);
    v7 = *(uint64_t (**)(_QWORD, unint64_t, uint64_t))(v4 + 16);
    *(_QWORD *)(v0 + 280) = v7;
    *(_QWORD *)(v0 + 288) = 0;
    v9 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 120);
    v11 = v7(*(_QWORD *)(v0 + 176), v1 + ((v6 + 32) & ~(unint64_t)v6), v3);
    StoredPhoto.localIdentifier.getter(v11);
    sub_100054A08(v8, 0);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v33 = (uint64_t (*)(_QWORD))((char *)v5 + *v5);
    v12 = (_QWORD *)swift_task_alloc(v5[1]);
    *(_QWORD *)(v0 + 296) = v12;
    *v12 = v0;
    v12[1] = sub_10005A824;
    return v33(*(_QWORD *)(v0 + 176));
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    v14 = *(_QWORD *)(v0 + 256);
    sub_100056010(1, *(_QWORD *)(v0 + 248), 1, *(_QWORD *)(v0 + 112));
    if (v14)
    {
      v15 = *(_QWORD *)(v0 + 248);
      swift_release(*(_QWORD *)(v0 + 192));
      swift_bridgeObjectRelease(v15);
      v16 = *(_QWORD *)(v0 + 168);
      v17 = *(_QWORD *)(v0 + 160);
      v18 = *(_QWORD *)(v0 + 136);
      v20 = *(_QWORD *)(v0 + 104);
      v19 = *(_QWORD *)(v0 + 112);
      v21 = *(_QWORD *)(v0 + 80);
      v22 = *(_QWORD *)(v0 + 56);
      swift_task_dealloc(*(_QWORD *)(v0 + 176));
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v24 = *(_QWORD *)(v0 + 104);
      v23 = *(_QWORD *)(v0 + 112);
      v25 = *(_QWORD *)(v0 + 88);
      v26 = *(_QWORD *)(v0 + 96);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 248));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v24, v23, v25);
      v27 = sub_100006454(&qword_1000B38F8, &qword_1000B38F0, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>);
      v28 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v25, v27);
      v29 = *(_QWORD *)(v0 + 200);
      v30 = static CommunicationActor.shared.getter(v28);
      *(_QWORD *)(v0 + 312) = v30;
      v31 = sub_100006454(&qword_1000B3900, &qword_1000B38E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
      v32 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 320) = v32;
      *v32 = v0;
      v32[1] = sub_10005AB4C;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 56), v30, v29, v0 + 16, *(_QWORD *)(v0 + 64), v31);
    }
  }
}

uint64_t sub_10005A824()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[31];
    swift_bridgeObjectRelease(v2[30]);
    swift_bridgeObjectRelease(v4);
    v5 = v2[26];
    v6 = v2[27];
    v7 = sub_10005AF9C;
  }
  else
  {
    v5 = v2[26];
    v6 = v2[27];
    v7 = sub_10005A898;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_10005A898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v13)(_QWORD, unint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t (*v31)(_QWORD);

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 288) + 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 144));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 240));
    v3 = *(_QWORD *)(v0 + 304);
    sub_100056010(1, *(_QWORD *)(v0 + 248), 1, *(_QWORD *)(v0 + 112));
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + 248);
      swift_release(*(_QWORD *)(v0 + 192));
      swift_bridgeObjectRelease(v4);
      v5 = *(_QWORD *)(v0 + 168);
      v6 = *(_QWORD *)(v0 + 160);
      v7 = *(_QWORD *)(v0 + 136);
      v9 = *(_QWORD *)(v0 + 104);
      v8 = *(_QWORD *)(v0 + 112);
      v10 = *(_QWORD *)(v0 + 80);
      v11 = *(_QWORD *)(v0 + 56);
      swift_task_dealloc(*(_QWORD *)(v0 + 176));
      swift_task_dealloc(v5);
      swift_task_dealloc(v6);
      swift_task_dealloc(v7);
      swift_task_dealloc(v8);
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      swift_task_dealloc(v11);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v22 = *(_QWORD *)(v0 + 104);
      v21 = *(_QWORD *)(v0 + 112);
      v23 = *(_QWORD *)(v0 + 88);
      v24 = *(_QWORD *)(v0 + 96);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 248));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, v21, v23);
      v25 = sub_100006454(&qword_1000B38F8, &qword_1000B38F0, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>);
      v26 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v23, v25);
      v27 = *(_QWORD *)(v0 + 200);
      v28 = static CommunicationActor.shared.getter(v26);
      *(_QWORD *)(v0 + 312) = v28;
      v29 = sub_100006454(&qword_1000B3900, &qword_1000B38E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
      v30 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 320) = v30;
      *v30 = v0;
      v30[1] = sub_10005AB4C;
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 56), v28, v27, v0 + 16, *(_QWORD *)(v0 + 64), v29);
    }
  }
  else
  {
    v13 = *(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v0 + 280);
    v14 = *(_QWORD *)(v0 + 288) + 1;
    *(_QWORD *)(v0 + 288) = v14;
    v15 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 120);
    v17 = *(_QWORD *)(v0 + 128);
    v18 = *(int **)(v0 + 32);
    v19 = v13(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 240)+ ((*(unsigned __int8 *)(v0 + 376) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 376))+ *(_QWORD *)(v0 + 272) * v14, *(_QWORD *)(v0 + 144));
    StoredPhoto.localIdentifier.getter(v19);
    sub_100054A08(v15, 0);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    v31 = (uint64_t (*)(_QWORD))((char *)v18 + *v18);
    v20 = (_QWORD *)swift_task_alloc(v18[1]);
    *(_QWORD *)(v0 + 296) = v20;
    *v20 = v0;
    v20[1] = sub_10005A824;
    return v31(*(_QWORD *)(v0 + 176));
  }
}

uint64_t sub_10005AB4C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 320));
  swift_release(v2[39]);
  if (v0)
    v3 = sub_10005B054;
  else
    v3 = sub_10005ABBC;
  return swift_task_switch(v3, v2[26], v2[27]);
}

uint64_t sub_10005ABBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v5 = *(_QWORD *)(v0 + 168);
    v4 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 72);
    v10 = *(_QWORD *)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 64);
    swift_release(*(_QWORD *)(v0 + 192));
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v6);
    swift_task_dealloc(v16);
    swift_task_dealloc(v10);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 168), v3, v1);
    v13 = (_QWORD *)swift_task_alloc(dword_1000B3724);
    *(_QWORD *)(v0 + 328) = v13;
    *v13 = v0;
    v13[1] = sub_10005AD18;
    return sub_10004F62C(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  }
}

uint64_t sub_10005AD18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int *v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  v3 = *(_QWORD **)v1;
  v3[42] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10005B124, v3[26], v3[27]);
  v5 = (int *)v3[4];
  v7 = (uint64_t (*)(_QWORD))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v3[43] = v6;
  *v6 = v3;
  v6[1] = sub_10005ADC0;
  return v7(v3[20]);
}

uint64_t sub_10005ADC0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 352) = v0;
  swift_task_dealloc(v3);
  v4 = v2[20];
  v5 = v2[18];
  v6 = *(void (**)(uint64_t, uint64_t))(v2[19] + 8);
  if (v0)
  {
    v2[46] = v6;
    v6(v4, v5);
    v7 = v2[26];
    v8 = v2[27];
    v9 = sub_10005B214;
  }
  else
  {
    v2[45] = v6;
    v6(v4, v5);
    v7 = v2[26];
    v8 = v2[27];
    v9 = sub_10005AE40;
  }
  return swift_task_switch(v9, v7, v8);
}

uint64_t sub_10005AE40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 360))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
  v2 = *(_QWORD *)(v0 + 200);
  v3 = static CommunicationActor.shared.getter(v1);
  *(_QWORD *)(v0 + 312) = v3;
  v4 = sub_100006454(&qword_1000B3900, &qword_1000B38E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
  v5 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 320) = v5;
  *v5 = v0;
  v5[1] = sub_10005AB4C;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 56), v3, v2, v0 + 16, *(_QWORD *)(v0 + 64), v4);
}

uint64_t sub_10005AEFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 192));
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005AF9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 192));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005B054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 192));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v7 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005B124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 192));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 160);
  v12 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005B214()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 192));
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 160);
  v12 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005B304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc(dword_1000B38E4);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_100005B30;
  return sub_10005A330(a4, a1, a2);
}

uint64_t type metadata accessor for WatchPhotoProcessor()
{
  return objc_opt_self(_TtC11photosfaced19WatchPhotoProcessor);
}

uint64_t sub_10005B390()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 16) = *v0;
  v2 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v1 + 24) = static CommunicationActor.shared.getter(v2);
  v3 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_10005B424, v4, v5);
}

uint64_t sub_10005B424()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_retain(v1);
  PhotosXPC.registerGeneratePhoto(callback:)(&unk_1000B39D0, v1);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005B478(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = *v2;
  v7 = swift_allocObject(&unk_1000AEAE0, 32, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = a2;
  a1[3] = sub_10000629C(&qword_1000B31B8);
  v8 = type metadata accessor for StoredPhoto(255);
  v11 = v8;
  a1[4] = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  sub_10003D62C(a1);
  swift_retain(v6);
  swift_bridgeObjectRetain(a2);
  v9 = swift_checkMetadataState(0, v8);
  generateElements<A>(isolation:_:)(0, 0, &unk_1000B38D8, v7, v9);
  swift_release(v7);
  return sub_10005B5FC(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_10005B56C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v6 = *(_QWORD *)(v2 + 24);
  v7 = (_QWORD *)swift_task_alloc(dword_1000B38D4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10003E42C;
  v8 = (_QWORD *)swift_task_alloc(dword_1000B38E4);
  v7[2] = v8;
  *v8 = v7;
  v8[1] = sub_100005B30;
  return sub_10005A330(v6, a1, a2);
}

uint64_t sub_10005B5FC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10005B608(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10005B66C;
  return v6(a1);
}

uint64_t sub_10005B66C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10005B6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  *(_QWORD *)(v3 + 16) = a1;
  v6 = (_QWORD *)swift_task_alloc(dword_1000B39C4);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_10005B710;
  return sub_100058E10(a2, a3);
}

uint64_t sub_10005B710(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_BYTE **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10005B76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[5];

  v4 = sub_10000629C(&qword_1000B1F58);
  __chkstk_darwin(v4);
  v6 = (char *)&v18[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000629C(&qword_1000B39E8);
  v18[3] = v7;
  v17 = type metadata accessor for Message(255);
  v18[4] = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  v8 = sub_10003D62C(v18);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v8, a1, v7);
  v9 = *(_QWORD *)(a2 + 56);
  swift_retain(v9);
  dispatch thunk of NonSendableQueue.append(_:)(v18);
  swift_release(v9);
  if ((*(_BYTE *)(a2 + 48) & 1) == 0)
  {
    *(_BYTE *)(a2 + 48) = 1;
    v10 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
    type metadata accessor for CommunicationActor(0);
    v11 = swift_retain(a2);
    v12 = static CommunicationActor.shared.getter(v11);
    v13 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v14 = (_QWORD *)swift_allocObject(&unk_1000AEBD0, 40, 7);
    v14[2] = v12;
    v14[3] = v13;
    v14[4] = a2;
    v15 = sub_100057608((uint64_t)v6, (uint64_t)&unk_1000B39F0, (uint64_t)v14);
    swift_release(v15);
  }
  return sub_100022238(v18);
}

uint64_t sub_10005B8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v20[2];
  _QWORD v21[5];

  v4 = sub_10000629C(&qword_1000B1F58);
  __chkstk_darwin(v4);
  v6 = (char *)&v20[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000629C(&qword_1000B3958);
  v21[3] = v7;
  v8 = sub_100006410(&qword_1000B3950);
  v9 = sub_100006454(&qword_1000B3978, &qword_1000B3950, (uint64_t)&protocol conformance descriptor for AsyncSyncSequence<A>);
  v20[0] = v8;
  v20[1] = v9;
  v21[4] = swift_getOpaqueTypeConformance2(v20, &opaque type descriptor for <<opaque return type of AsyncSequence<>.throwing>>, 1);
  v10 = sub_10003D62C(v21);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v10, a1, v7);
  v11 = *(_QWORD *)(a2 + 56);
  swift_retain(v11);
  dispatch thunk of NonSendableQueue.append(_:)(v21);
  swift_release(v11);
  if ((*(_BYTE *)(a2 + 48) & 1) == 0)
  {
    *(_BYTE *)(a2 + 48) = 1;
    v12 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
    type metadata accessor for CommunicationActor(0);
    v13 = swift_retain(a2);
    v14 = static CommunicationActor.shared.getter(v13);
    v15 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v16 = (_QWORD *)swift_allocObject(&unk_1000AEB80, 40, 7);
    v16[2] = v14;
    v16[3] = v15;
    v16[4] = a2;
    v17 = sub_100057608((uint64_t)v6, (uint64_t)&unk_1000B3988, (uint64_t)v16);
    swift_release(v17);
  }
  return sub_100022238(v21);
}

uint64_t sub_10005BAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, uint64_t a7, char a8)
{
  uint64_t v8;

  *(_BYTE *)(v8 + 48) = a8;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a7;
  *(_QWORD *)(v8 + 16) = a4;
  *(_BYTE *)(v8 + 49) = *a6;
  return swift_task_switch(sub_10005BAD8, 0, 0);
}

uint64_t sub_10005BAD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v0 + 40) = static CommunicationActor.shared.getter(v1);
  v2 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_10005C6B0, v3, v4);
}

uint64_t sub_10005BB64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_task_switch(sub_10005BB7C, 0, 0);
}

uint64_t sub_10005BB7C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  MessageBody.deserialized<A>()(&type metadata for String, &protocol witness table for String);
  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD **)(v0 + 32);
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005BBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, uint64_t a7, char a8)
{
  uint64_t v8;

  *(_BYTE *)(v8 + 48) = a8;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a7;
  *(_QWORD *)(v8 + 16) = a4;
  *(_BYTE *)(v8 + 49) = *a6;
  return swift_task_switch(sub_10005BC14, 0, 0);
}

uint64_t sub_10005BC14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v0 + 40) = static CommunicationActor.shared.getter(v1);
  v2 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_10005BCA0, v3, v4);
}

uint64_t sub_10005BCA0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = *(unsigned __int8 *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(unsigned __int8 *)(v0 + 49);
  swift_release(*(_QWORD *)(v0 + 40));
  sub_10005774C(v3, v4, v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005BD00()
{
  uint64_t v0;

  sub_100022CC4(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005BD2C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for MessageBody(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1 + 6;
  v11 = (uint64_t)v1 + v5;
  v12 = *((_BYTE *)v1 + v5 + *(_QWORD *)(v4 + 64));
  v13 = (_QWORD *)swift_task_alloc(dword_1000B3914);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10003E42C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, char))((char *)&dword_1000B3910 + dword_1000B3910))(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10005BDF8()
{
  uint64_t v0;

  return sub_100018D50(v0);
}

uint64_t sub_10005BE00(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000629C(&qword_1000B1F58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005BE40()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005BE64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000B393C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003E42C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000B3938 + dword_1000B3938))(a1, v4);
}

uint64_t sub_10005BED8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1000B3984);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003E42C;
  return sub_100058134(a1, v4, v5, v6);
}

uint64_t sub_10005BF44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1000B39AC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10003E42C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000B39A8 + dword_1000B39A8))(a1, v5, v4);
}

uint64_t sub_10005BFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1000B39CC);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10003E42C;
  return sub_10005A098(a1, a2, v2);
}

uint64_t sub_10005C01C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v6 = *(_QWORD *)(v2 + 24);
  v7 = (_QWORD *)swift_task_alloc(dword_1000B38D4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100005B30;
  v8 = (_QWORD *)swift_task_alloc(dword_1000B38E4);
  v7[2] = v8;
  *v8 = v7;
  v8[1] = sub_100005B30;
  return sub_10005A330(v6, a1, a2);
}

uint64_t sub_10005C0B0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005C0DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1000B3984);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100005B30;
  return sub_100058134(a1, v4, v5, v6);
}

uint64_t sub_10005C14C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for MessageBody(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1 + 6;
  v11 = (uint64_t)v1 + v5;
  v12 = *((_BYTE *)v1 + v5 + *(_QWORD *)(v4 + 64));
  v13 = (_QWORD *)swift_task_alloc(dword_1000B39FC);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10003E42C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, char))((char *)&dword_1000B39F8 + dword_1000B39F8))(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10005C21C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for MessageBody(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1 + 6;
  v11 = (uint64_t)v1 + v5;
  v12 = *((_BYTE *)v1 + v5 + *(_QWORD *)(v4 + 64));
  v13 = (_QWORD *)swift_task_alloc(dword_1000B3A14);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10003E42C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, char))((char *)&dword_1000B3A10 + dword_1000B3A10))(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10005C2EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for MessageBody(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1 + 6;
  v11 = (uint64_t)v1 + v5;
  v12 = *((_BYTE *)v1 + v5 + *(_QWORD *)(v4 + 64));
  v13 = (_QWORD *)swift_task_alloc(dword_1000B3A2C);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10003E42C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, char))((char *)&dword_1000B3A28 + dword_1000B3A28))(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10005C3BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for MessageBody(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1 + 6;
  v11 = (uint64_t)v1 + v5;
  v12 = *((_BYTE *)v1 + v5 + *(_QWORD *)(v4 + 64));
  v13 = (_QWORD *)swift_task_alloc(dword_1000B3A44);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10003E42C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, char))((char *)&dword_1000B3A40 + dword_1000B3A40))(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10005C48C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for MessageBody(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1 + 6;
  v11 = (uint64_t)v1 + v5;
  v12 = *((_BYTE *)v1 + v5 + *(_QWORD *)(v4 + 64));
  v13 = (_QWORD *)swift_task_alloc(dword_1000B3A5C);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10003E42C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, char))((char *)&dword_1000B3A58 + dword_1000B3A58))(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10005C55C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MessageBody(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 49) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10005C5E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for MessageBody(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1 + 6;
  v11 = (uint64_t)v1 + v5;
  v12 = *((_BYTE *)v1 + v5 + *(_QWORD *)(v4 + 64));
  v13 = (_QWORD *)swift_task_alloc(dword_1000B3A74);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10003E42C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, char))((char *)&dword_1000B3A70 + dword_1000B3A70))(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10005C6B8(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t);

  v3[2] = a1;
  v6 = sub_10000629C(&qword_1000B3130);
  v3[3] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[4] = v7;
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[5] = v8;
  v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v9 = (_QWORD *)swift_task_alloc(a3[1]);
  v3[6] = v9;
  *v9 = v3;
  v9[1] = sub_10008DD80;
  return v11(v8, a2);
}

uint64_t sub_10005C760(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t);

  v3[4] = a1;
  v6 = sub_10000629C(&qword_1000B3DB8);
  v3[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[6] = v7;
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[7] = v8;
  v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v9 = (_QWORD *)swift_task_alloc(a3[1]);
  v3[8] = v9;
  *v9 = v3;
  v9[1] = sub_10005C808;
  return v11(v8, a2);
}

uint64_t sub_10005C808()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 64);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_task_dealloc(v2[7]);
  }
  else
  {
    v6 = v2[6];
    v5 = v2[7];
    v8 = (_QWORD *)v2[4];
    v7 = v2[5];
    v8[3] = v7;
    v9 = sub_100006410(&qword_1000B3DC0);
    v10 = sub_100006454(&qword_1000B3DC8, &qword_1000B3DC0, (uint64_t)&protocol conformance descriptor for AsyncSyncSequence<A>);
    v2[2] = v9;
    v2[3] = v10;
    v8[4] = swift_getOpaqueTypeConformance2(v2 + 2, &opaque type descriptor for <<opaque return type of AsyncSequence<>.throwing>>, 1);
    v11 = sub_10003D62C(v8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 32))(v11, v5, v7);
    swift_task_dealloc(v5);
  }
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10005C8F0(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t);

  v3[4] = a1;
  v6 = sub_10000629C(&qword_1000B4110);
  v3[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[6] = v7;
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[7] = v8;
  v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v9 = (_QWORD *)swift_task_alloc(a3[1]);
  v3[8] = v9;
  *v9 = v3;
  v9[1] = sub_10005C998;
  return v11(v8, a2);
}

uint64_t sub_10005C998()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 64);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_task_dealloc(v2[7]);
  }
  else
  {
    v6 = v2[6];
    v5 = v2[7];
    v8 = (_QWORD *)v2[4];
    v7 = v2[5];
    v8[3] = v7;
    v9 = sub_100006410(&qword_1000B4118);
    v10 = sub_100006454(&qword_1000B4120, &qword_1000B4118, (uint64_t)&protocol conformance descriptor for AsyncSyncSequence<A>);
    v2[2] = v9;
    v2[3] = v10;
    v8[4] = swift_getOpaqueTypeConformance2(v2 + 2, &opaque type descriptor for <<opaque return type of AsyncSequence<>.throwing>>, 1);
    v11 = sub_10003D62C(v8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 32))(v11, v5, v7);
    swift_task_dealloc(v5);
  }
  return (*(uint64_t (**)(void))(v4 + 8))();
}

char *sub_10005CA80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  int64_t v42;
  char *v43;

  v40 = sub_10000629C(&qword_1000B35D0);
  v3 = *(_QWORD *)(v40 - 8);
  v4 = __chkstk_darwin(v40);
  v38 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v39 = (char *)&v33 - v6;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (char *)&_swiftEmptyArrayStorage;
  if (v11)
  {
    v33 = v1;
    v43 = (char *)&_swiftEmptyArrayStorage;
    sub_10004D740(0, v11, 0);
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v36 = v14;
    v15 = v8;
    v37 = v8;
    v34 = v10;
    do
    {
      v42 = v11;
      v16 = v7;
      v18 = v39;
      v17 = v40;
      v19 = *(int *)(v40 + 48);
      v20 = *(int *)(v40 + 64);
      v21 = v35;
      v35(v39, v13, v16);
      v22 = *(_QWORD *)(v13 + v19);
      *(_QWORD *)&v18[v19] = v22;
      LOBYTE(v19) = *(_BYTE *)(v13 + v20);
      v18[v20] = v19;
      v23 = *(int *)(v17 + 48);
      v24 = *(int *)(v17 + 64);
      v25 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v26 = (uint64_t)v38;
      v27 = v18;
      v28 = v34;
      v41 = v25;
      v25(v38, v27, v16);
      *(_QWORD *)(v26 + v23) = v22;
      *(_BYTE *)(v26 + v24) = v19;
      v7 = v16;
      v21(v28, v26, v16);
      sub_10000EA70(v26, &qword_1000B35D0);
      v12 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_10004D740(0, *((_QWORD *)v12 + 2) + 1, 1);
        v12 = v43;
      }
      v30 = *((_QWORD *)v12 + 2);
      v29 = *((_QWORD *)v12 + 3);
      v15 = v37;
      v31 = v42;
      if (v30 >= v29 >> 1)
      {
        sub_10004D740(v29 > 1, v30 + 1, 1);
        v12 = v43;
      }
      *((_QWORD *)v12 + 2) = v30 + 1;
      v41(&v12[((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v30], v28, v16);
      v43 = v12;
      v13 += v36;
      v11 = v31 - 1;
    }
    while (v11);
  }
  return v12;
}

_QWORD *sub_10005CCF4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 32) = sub_10004E168((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 40) = sub_10004E26C((uint64_t)&_swiftEmptyArrayStorage);
  *(_BYTE *)(v0 + 48) = 0;
  sub_10000629C(&qword_1000B41D8);
  *(_QWORD *)(v0 + 56) = NonSendableQueue.__allocating_init()();
  v2 = type metadata accessor for OutgoingConnectionManager(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v3 + 16) = 0;
  v4 = v3 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_lastOutgoingLocation;
  v5 = sub_10000629C((uint64_t *)&unk_1000B2120);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    v6 = (void *)sub_10008A804((Swift::Int)&_swiftEmptyArrayStorage);
  }
  else
  {
    v6 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(v3 + OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_outgoingConnections) = v6;
  v7 = OBJC_IVAR____TtC11photosfaced25OutgoingConnectionManager_waiters;
  v8 = (uint64_t *)_emptyDequeStorage.unsafeMutableAddressor();
  v9 = *v8;
  *(_QWORD *)(v3 + v7) = *v8;
  v1[2] = v3;
  v10 = type metadata accessor for IncomingConnectionManager();
  swift_allocObject(v10, 48, 7);
  swift_retain(v9);
  v1[3] = sub_1000066DC();
  sub_10000629C(&qword_1000B41E0);
  v11 = type metadata accessor for MessageBody(0);
  v12 = default argument 0 of MessageDemultiplexer.init(timeout:logTag:)(v11);
  v1[8] = MessageDemultiplexer.__allocating_init(timeout:logTag:)(v12);
  return v1;
}

uint64_t sub_10005CE70(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[5] = a1;
  v2[6] = a2;
  v3 = type metadata accessor for CommunicationActor(0);
  v2[7] = static CommunicationActor.shared.getter(v3);
  v4 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, v4);
  v2[8] = v5;
  v2[9] = v6;
  return swift_task_switch(sub_10005CF00, v5, v6);
}

uint64_t sub_10005CF00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 80) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_1000B3BFC);
    *(_QWORD *)(v0 + 88) = v3;
    *v3 = v0;
    v3[1] = sub_10005CF98;
    return sub_10005D01C(*(_QWORD *)(v0 + 40));
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10005CF98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_release(v2);
  return swift_task_switch(sub_10005CFEC, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_10005CFEC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005D01C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2[20] = a1;
  v2[21] = v1;
  v3 = sub_10000629C(&qword_1000B39E8);
  v2[22] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[23] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[24] = swift_task_alloc(v5);
  v2[25] = swift_task_alloc(v5);
  v6 = type metadata accessor for Message.Operation(0);
  v2[26] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[27] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[28] = swift_task_alloc(v8);
  v2[29] = swift_task_alloc(v8);
  v9 = type metadata accessor for Logger(0);
  v2[30] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[31] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[32] = swift_task_alloc(v11);
  v2[33] = swift_task_alloc(v11);
  v2[34] = swift_task_alloc(v11);
  v2[35] = swift_task_alloc(v11);
  v2[36] = swift_task_alloc(v11);
  v2[37] = swift_task_alloc(v11);
  v2[38] = swift_task_alloc(v11);
  v2[39] = swift_task_alloc(v11);
  v2[40] = swift_task_alloc(v11);
  v2[41] = swift_task_alloc(v11);
  v2[42] = swift_task_alloc(v11);
  v12 = type metadata accessor for Message(0);
  v2[43] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[44] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v2[45] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[46] = swift_task_alloc(v15);
  v2[47] = swift_task_alloc(v15);
  v2[48] = swift_task_alloc(v15);
  v2[49] = swift_task_alloc(v15);
  v2[50] = swift_task_alloc(v15);
  v2[51] = swift_task_alloc(v15);
  v2[52] = swift_task_alloc(v15);
  v2[53] = swift_task_alloc(v15);
  v2[54] = swift_task_alloc(v15);
  v2[55] = swift_task_alloc(v15);
  v2[56] = swift_task_alloc(v15);
  v2[57] = swift_task_alloc(v15);
  v2[58] = swift_task_alloc(v15);
  v2[59] = swift_task_alloc(v15);
  v2[60] = swift_task_alloc(v15);
  v16 = type metadata accessor for ProtocolVersion(0);
  v2[61] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[62] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[63] = swift_task_alloc(v18);
  v2[64] = swift_task_alloc(v18);
  v19 = type metadata accessor for MessageBody(0);
  v2[65] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v2[66] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[67] = swift_task_alloc(v21);
  v2[68] = swift_task_alloc(v21);
  v2[69] = swift_task_alloc(v21);
  v2[70] = swift_task_alloc(v21);
  v22 = type metadata accessor for CommunicationActor(0);
  v2[71] = v22;
  v2[72] = static CommunicationActor.shared.getter(v22);
  v23 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v2[73] = v23;
  v24 = dispatch thunk of Actor.unownedExecutor.getter(v22, v23);
  v2[74] = v24;
  v2[75] = v25;
  return swift_task_switch(sub_10005D330, v24, v25);
}

uint64_t sub_10005D330(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  int v131;
  _QWORD *v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  os_log_type_t v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  _DWORD *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  NSObject *v189;
  os_log_type_t v190;
  BOOL v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint8_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(uint64_t, uint64_t);
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  NSObject *v213;
  os_log_type_t v214;
  BOOL v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(uint64_t, uint64_t);
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  void (*v230)(uint64_t, uint64_t);
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  NSObject *v274;
  os_log_type_t v275;
  _BOOL4 v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint8_t *v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  NSObject *v292;
  os_log_type_t v293;
  BOOL v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint8_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  int *v329;
  uint64_t v330;
  _QWORD *v331;
  unint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  NSObject *v339;
  os_log_type_t v340;
  _BOOL4 v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t (*v346)(uint64_t, uint64_t, uint64_t);
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  __n128 v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _BYTE *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  os_log_type_t type;
  os_log_type_t typea[8];
  os_log_type_t typeb[8];
  os_log_type_t typec[8];
  uint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t *v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  void (*v393)(uint64_t, uint64_t);
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  unsigned int v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void (*v405)(uint64_t, uint64_t);
  uint64_t v406;
  unsigned int v407;
  uint64_t v408;
  uint64_t v409;
  void (*v410)(uint64_t, _QWORD, uint64_t);
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  _QWORD *v416;
  uint64_t *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  void (*v422)(uint64_t, uint64_t);
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  void (*v432)(uint64_t, uint64_t);
  void (*v433)(uint64_t, uint64_t);
  void (*v434)(uint64_t, uint64_t);
  void (*v435)(uint64_t, uint64_t);
  void (*v436)(uint64_t, uint64_t, __n128);
  uint64_t v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unsigned int v445;
  uint64_t v446;
  uint64_t (*v447)(uint64_t, uint64_t, uint64_t);
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int v459;
  unsigned __int8 v460;
  uint64_t v461;
  _QWORD *v462;
  uint64_t v463;
  _QWORD *v464;
  _QWORD *v465;
  uint64_t v466;
  uint64_t *v467;
  _QWORD *v468;
  _QWORD *v469;
  char *v470;
  uint64_t (*v471)(void);
  _QWORD *v472;
  uint64_t v473[3];

  v2 = v1;
  v4 = v1[20];
  v3 = v1 + 20;
  v5 = v3[50];
  v397 = v3 - 10;
  v400 = v3 - 12;
  v7 = v3[45];
  v6 = v3[46];
  v394 = v3 - 8;
  v454 = (uint64_t)v3 + 548;
  v9 = v3[43];
  v8 = v3[44];
  v11 = v3[41];
  v10 = v3[42];
  v428 = v3[24];
  v437 = v3[23];
  v446 = v3[40];
  v12 = Message.content.getter(a1);
  MessageBody.version.getter(v12);
  v13 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v3[56] = v13;
  v13(v5, v7);
  v14 = v10;
  v410 = *(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104);
  v410(v9, enum case for ProtocolVersion.V0(_:), v11);
  v15 = sub_100009174(&qword_1000B3C00, (uint64_t (*)(uint64_t))&type metadata accessor for ProtocolVersion, (uint64_t)&protocol conformance descriptor for ProtocolVersion);
  dispatch thunk of RawRepresentable.rawValue.getter(v11, v15);
  dispatch thunk of RawRepresentable.rawValue.getter(v11, v15);
  v16 = *((_DWORD *)v3 + 138);
  v462 = v3;
  LODWORD(v10) = *((_DWORD *)v3 + 137);
  v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v17(v9, v11);
  v17(v8, v11);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v428 + 16);
  v19 = v18(v446, v4, v437);
  v447 = v18;
  v405 = v13;
  if (v16 == (_DWORD)v10)
  {
    v20 = *(uint64_t (**)(uint64_t, uint64_t))(v2[44] + 8);
    v21 = v20(v2[60], v2[43]);
  }
  else
  {
    v22 = v2[70];
    v23 = v2[65];
    v25 = v2[63];
    v24 = v2[64];
    v26 = v2[61];
    v419 = v2[60];
    v429 = v2[44];
    v438 = v2[43];
    v27 = Message.content.getter(v19);
    MessageBody.version.getter(v27);
    v13(v22, v23);
    v410(v25, enum case for ProtocolVersion.V1(_:), v26);
    dispatch thunk of RawRepresentable.rawValue.getter(v26, v15);
    dispatch thunk of RawRepresentable.rawValue.getter(v26, v15);
    v28 = *((_DWORD *)v2 + 174);
    v29 = *((_DWORD *)v2 + 173);
    v17(v25, v26);
    v17(v24, v26);
    v20 = *(uint64_t (**)(uint64_t, uint64_t))(v429 + 8);
    v21 = v20(v419, v438);
    if (v28 != v29)
    {
      v61 = enum case for Message.Operation.event(_:);
      v84 = v447;
      v107 = v462;
      goto LABEL_21;
    }
    v18 = v447;
  }
  v31 = v2[58];
  v30 = v2[59];
  v32 = v2[43];
  v33 = v2[20];
  static Log.network.getter(v21);
  v18(v30, v33, v32);
  v34 = v18(v31, v33, v32);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  v439 = v462 - 9;
  if (os_log_type_enabled(v35, v36))
  {
    v37 = v2[70];
    v373 = v2[64];
    v375 = v2[65];
    v378 = v2[61];
    type = v36;
    v39 = v2[58];
    v38 = v2[59];
    v371 = v2[43];
    v430 = v2[42];
    v411 = v2[31];
    v420 = v2[30];
    v40 = swift_slowAlloc(22, -1);
    v389 = swift_slowAlloc(64, -1);
    v473[0] = v389;
    *(_DWORD *)v40 = 136315394;
    v41 = Message.shortDescription.getter(v389);
    v42 = v20;
    v44 = v43;
    v2[10] = sub_100021438(v41, v43, v473);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v397, v462 - 9, v40 + 4, v40 + 12);
    swift_bridgeObjectRelease(v44);
    v45 = v42(v38, v371);
    *(_WORD *)(v40 + 12) = 2080;
    v46 = Message.content.getter(v45);
    MessageBody.version.getter(v46);
    v405(v37, v375);
    v20 = v42;
    v47 = String.init<A>(describing:)(v373, v378);
    v49 = v48;
    v2[7] = sub_100021438(v47, v48, v473);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v462 - 13, v400, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease(v49);
    v42(v39, v371);
    _os_log_impl((void *)&_mh_execute_header, v35, type, "[NMC] Ignoring %s, as it's %s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy(v389, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v389, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    v50 = *(uint64_t (**)(uint64_t, uint64_t))(v411 + 8);
    v51 = v50(v430, v420);
  }
  else
  {
    v52 = v2[58];
    v54 = v2[42];
    v53 = v2[43];
    v56 = v2[30];
    v55 = v2[31];
    v20(v2[59], v53);
    v20(v52, v53);

    v50 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8);
    v51 = v50(v54, v56);
  }
  v57 = v2[29];
  v59 = v2[26];
  v58 = v2[27];
  Message.operation.getter(v51);
  v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 88))(v57, v59);
  v61 = enum case for Message.Operation.event(_:);
  if (v60 == enum case for Message.Operation.event(_:))
  {
    v62 = v2[72];
LABEL_10:
    swift_release(v62);
LABEL_11:
    v63 = v2[70];
    v64 = v2;
    v65 = v2[69];
    v66 = v64[68];
    v67 = v64[67];
    v69 = v64[63];
    v68 = v64[64];
    v71 = v64[59];
    v70 = v64[60];
    v73 = v64[57];
    v72 = v64[58];
    v363 = v64[56];
    v364 = v64[55];
    v365 = v64[54];
    v366 = v64[53];
    v367 = v64[52];
    v368 = v64[51];
    v369 = v64[50];
    v370 = v64[49];
    v372 = v64[48];
    v374 = v64[47];
    v376 = v64[46];
    v379 = v64[42];
    *(_QWORD *)typea = v64[41];
    v384 = v64[40];
    v390 = v64[39];
    v395 = v64[38];
    v398 = v64[37];
    v401 = v64[36];
    v406 = v64[35];
    v412 = v64[34];
    v421 = v64[33];
    v431 = v64[32];
    v440 = v64[29];
    v448 = v64[28];
    v455 = v64[25];
    v463 = v64[24];
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v363);
    swift_task_dealloc(v364);
    swift_task_dealloc(v365);
    swift_task_dealloc(v366);
    swift_task_dealloc(v367);
    swift_task_dealloc(v368);
    swift_task_dealloc(v369);
    swift_task_dealloc(v370);
    swift_task_dealloc(v372);
    swift_task_dealloc(v374);
    swift_task_dealloc(v376);
    swift_task_dealloc(v379);
    swift_task_dealloc(*(_QWORD *)typea);
    swift_task_dealloc(v384);
    swift_task_dealloc(v390);
    swift_task_dealloc(v395);
    swift_task_dealloc(v398);
    swift_task_dealloc(v401);
    swift_task_dealloc(v406);
    swift_task_dealloc(v412);
    swift_task_dealloc(v421);
    swift_task_dealloc(v431);
    swift_task_dealloc(v440);
    swift_task_dealloc(v448);
    swift_task_dealloc(v455);
    swift_task_dealloc(v463);
    return ((uint64_t (*)(void))v64[1])();
  }
  v75 = v60;
  if (v60 != enum case for Message.Operation.request(_:))
  {
    v62 = v2[72];
    if (v75 == enum case for Message.Operation.response(_:))
      goto LABEL_10;
    v108 = enum case for Message.Operation.error(_:);
    swift_release(v62);
    if (v75 == v108)
      goto LABEL_11;
    v109 = v2[29];
LABEL_70:
    (*(void (**)(uint64_t, _QWORD))(v2[27] + 8))(v109, v2[26]);
    goto LABEL_11;
  }
  v422 = (void (*)(uint64_t, uint64_t))v50;
  v432 = (void (*)(uint64_t, uint64_t))v20;
  v76 = v2[57];
  v413 = v2[56];
  v77 = v2[44];
  v78 = v2[43];
  v385 = v2[73];
  v79 = v2[29];
  v377 = v2[45];
  v80 = v2[20];
  *(_QWORD *)typeb = v80;
  v81 = (*(uint64_t (**)(uint64_t, _QWORD))(v2[27] + 96))(v79, v2[26]);
  v82 = *(_DWORD *)(v79 + 4);
  v83 = static CommunicationActor.shared.getter(v81);
  v84 = v447;
  v447(v76, v80, v78);
  v85 = *(unsigned __int8 *)(v77 + 80);
  v86 = (v85 + 20) & ~v85;
  v87 = swift_allocObject(&unk_1000AED90, v86 + v377, v85 | 7);
  *(_DWORD *)(v87 + 16) = v82;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v87 + v86, v76, v78);
  v88 = swift_allocObject(&unk_1000AEDB8, 32, 7);
  *(_QWORD *)(v88 + 16) = &unk_1000B3C28;
  *(_QWORD *)(v88 + 24) = v87;
  generateElements<A>(isolation:_:)(v83, v385, &unk_1000B3C30, v88, v78);
  swift_release(v88);
  v89 = swift_release(v83);
  static Log.network.getter(v89);
  v90 = v447(v413, *(_QWORD *)typeb, v78);
  v91 = Logger.logObject.getter(v90);
  v92 = static os_log_type_t.debug.getter();
  v93 = os_log_type_enabled(v91, v92);
  v94 = v2[56];
  v95 = v2[41];
  v96 = v2[30];
  if (v93)
  {
    v414 = v2[41];
    v97 = v2[43];
    v391 = v2[30];
    v98 = (uint8_t *)swift_slowAlloc(12, -1);
    v99 = swift_slowAlloc(32, -1);
    v473[0] = v99;
    *(_DWORD *)v98 = 136315138;
    v100 = Message.shortDescription.getter(v99);
    v102 = v101;
    *v439 = sub_100021438(v100, v101, v473);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v439, v394, v98 + 4, v98 + 12);
    v103 = v102;
    v84 = v447;
    swift_bridgeObjectRelease(v103);
    v432(v94, v97);
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "[MSQ] Enqueue reply stream for: %s", v98, 0xCu);
    swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
    v104 = v99;
    v20 = (uint64_t (*)(uint64_t, uint64_t))v432;
    swift_slowDealloc(v104, -1, -1);
    swift_slowDealloc(v98, -1, -1);

    v105 = v414;
    v106 = v391;
  }
  else
  {
    v20 = (uint64_t (*)(uint64_t, uint64_t))v432;
    v432(v2[56], v2[43]);

    v105 = v95;
    v106 = v96;
  }
  v422(v105, v106);
  v107 = v462;
  v110 = v2[25];
  v111 = v2[22];
  v112 = v2[23];
  sub_10005B76C(v110, v2[21]);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v112 + 8))(v110, v111);
LABEL_21:
  v415 = v107 - 6;
  v423 = v107 - 5;
  v113 = v107 - 4;
  v441 = v107 - 3;
  v115 = v2[27];
  v114 = v2[28];
  v392 = v107 - 1;
  v116 = v2[26];
  Message.operation.getter(v21);
  v117 = (*(uint64_t (**)(uint64_t, uint64_t))(v115 + 88))(v114, v116);
  if (v117 == v61)
  {
    v118 = (unsigned int *)v2[28];
    v119 = (*(uint64_t (**)(unsigned int *, _QWORD))(v2[27] + 96))(v118, v2[26]);
    v120 = *v118;
    *((_DWORD *)v2 + 179) = v120;
    if (v120 >= 3)
    {
      v160 = v2[52];
      v161 = v2[43];
      v162 = v2[20];
      v163 = swift_release(v2[72]);
      static Log.network.getter(v163);
      v164 = v84(v160, v162, v161);
      v165 = Logger.logObject.getter(v164);
      v166 = static os_log_type_t.error.getter();
      v167 = os_log_type_enabled(v165, v166);
      v168 = v2[52];
      v169 = v2[43];
      v170 = v2[37];
      v171 = v2[30];
      v466 = v2[31];
      if (v167)
      {
        v458 = v2[37];
        v172 = v107;
        v434 = (void (*)(uint64_t, uint64_t))v20;
        v173 = swift_slowAlloc(18, -1);
        v450 = v171;
        v174 = swift_slowAlloc(32, -1);
        v473[0] = v174;
        *(_DWORD *)v173 = 67109378;
        *((_DWORD *)v2 + 172) = v120;
        v175 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v107 + 66, (char *)v2 + 692, v173 + 4, v173 + 8);
        *(_WORD *)(v173 + 8) = 2080;
        v176 = Message.shortDescription.getter(v175);
        v178 = v177;
        v2[19] = sub_100021438(v176, v177, v473);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v392, v172, v173 + 10, v173 + 18);
        swift_bridgeObjectRelease(v178);
        v434(v168, v169);
        _os_log_impl((void *)&_mh_execute_header, v165, v166, "handleMessage: Invalid message type %u. Dropping message %s", (uint8_t *)v173, 0x12u);
        swift_arrayDestroy(v174, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v174, -1, -1);
        swift_slowDealloc(v173, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v466 + 8))(v458, v450);
      }
      else
      {
        v20(v168, v169);

        (*(void (**)(uint64_t, uint64_t))(v466 + 8))(v170, v171);
      }
      goto LABEL_11;
    }
    v464 = v107 - 18;
    v121 = v2[53];
    v122 = v2;
    v123 = v2[43];
    v124 = v122[20];
    static Log.network.getter(v119);
    v125 = v84(v121, v124, v123);
    v126 = Logger.logObject.getter(v125);
    v127 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v126, v127))
    {
      v128 = swift_slowAlloc(22, -1);
      v129 = swift_slowAlloc(64, -1);
      v473[0] = v129;
      *(_DWORD *)v128 = 136315394;
      v433 = (void (*)(uint64_t, uint64_t))v20;
      v456 = v129;
      if ((_BYTE)v120)
      {
        if (v120 == 1)
          v130 = "gallerySyncReady";
        else
          v130 = "shuffleSyncReady";
        v314 = (unint64_t)(v130 - 32) | 0x8000000000000000;
        v315 = 0xD000000000000010;
      }
      else
      {
        v314 = 0xEE00796461655263;
        v315 = 0x6E79536D75626C61;
      }
      v316 = v122[53];
      v317 = v122[43];
      v452 = v122[38];
      v404 = v122[31];
      v408 = v122[30];
      v122[16] = sub_100021438(v315, v314, v473);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v113, v441, v128 + 4, v128 + 12);
      swift_bridgeObjectRelease(v314);
      *(_WORD *)(v128 + 12) = 2080;
      v318 = sub_100009174(&qword_1000B2220, (uint64_t (*)(uint64_t))&type metadata accessor for Message, (uint64_t)&protocol conformance descriptor for Message);
      v319 = dispatch thunk of CustomStringConvertible.description.getter(v317, v318);
      v321 = v320;
      v122[14] = sub_100021438(v319, v320, v473);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v415, v423, v128 + 14, v128 + 22);
      swift_bridgeObjectRelease(v321);
      v433(v316, v317);
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "[NMC] Received %s: %s", (uint8_t *)v128, 0x16u);
      swift_arrayDestroy(v456, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v456, -1, -1);
      swift_slowDealloc(v128, -1, -1);

      v207 = *(void (**)(uint64_t, uint64_t))(v404 + 8);
      v207(v452, v408);
    }
    else
    {
      v204 = v122[38];
      v205 = v122[30];
      v206 = v122[31];
      v20(v122[53], v122[43]);

      v207 = *(void (**)(uint64_t, uint64_t))(v206 + 8);
      v207(v204, v205);
    }
    v122[77] = v207;
    v322 = v122[21];
    swift_beginAccess(v322 + 40, v464, 0, 0);
    v323 = *(_QWORD *)(v322 + 40);
    v2 = v122;
    if (*(_QWORD *)(v323 + 16) && (v324 = sub_10004A2C4(v120), (v325 & 1) != 0))
    {
      v326 = *(_QWORD **)(*(_QWORD *)(v323 + 56) + 8 * v324);
      swift_bridgeObjectRetain(v326);
    }
    else
    {
      v326 = _swiftEmptyArrayStorage;
    }
    v122[78] = v326;
    v327 = v326[2];
    v122[79] = v327;
    if (!v327)
    {
      swift_release(v122[72]);
      swift_bridgeObjectRelease(v326);
      goto LABEL_11;
    }
    v122[80] = 0;
    v328 = v326[5];
    v122[81] = v328;
    v329 = (int *)v326[4];
    v330 = swift_retain(v328);
    Message.content.getter(v330);
    v471 = (uint64_t (*)(void))((char *)v329 + *v329);
    v331 = (_QWORD *)swift_task_alloc(v329[1]);
    v122[82] = v331;
    *v331 = v122;
    v331[1] = sub_10005F130;
    return v471();
  }
  v131 = v117;
  v132 = v107 + 68;
  if (v117 == enum case for Message.Operation.request(_:))
  {
    v416 = v107 - 11;
    v386 = v107 + 68;
    v134 = v2[27];
    v133 = (unsigned int *)v2[28];
    v135 = v2[26];
    swift_release(v2[72]);
    (*(void (**)(unsigned int *, uint64_t))(v134 + 96))(v133, v135);
    v137 = *v133;
    v136 = v133[1];
    v138 = sub_10000628C(*v133);
    v139 = v2[43];
    v140 = v2[20];
    if (v138 == 11)
    {
      v141 = (void (*)(uint64_t, uint64_t))v20;
      v142 = v2[50];
      static Log.network.getter(v138);
      v143 = v84(v142, v140, v139);
      v144 = Logger.logObject.getter(v143);
      v145 = static os_log_type_t.error.getter();
      v146 = os_log_type_enabled(v144, v145);
      v147 = v2[50];
      v148 = v2[43];
      v149 = v2[34];
      v150 = v2[30];
      if (v146)
      {
        v449 = v2[31];
        v457 = v2[30];
        v151 = v137;
        v152 = (unsigned int *)v462 + 135;
        v465 = v2;
        v153 = swift_slowAlloc(18, -1);
        v442 = v149;
        v154 = swift_slowAlloc(32, -1);
        v473[0] = v154;
        *(_DWORD *)v153 = 67109378;
        *v152 = v151;
        v155 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v152, v386, v153 + 4, v153 + 8);
        *(_WORD *)(v153 + 8) = 2080;
        v156 = Message.shortDescription.getter(v155);
        v158 = v157;
        *v423 = sub_100021438(v156, v157, v473);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v423, v113, v153 + 10, v153 + 18);
        swift_bridgeObjectRelease(v158);
        v141(v147, v148);
        _os_log_impl((void *)&_mh_execute_header, v144, v145, "handleMessage: Invalid request type %u. Dropping message %s", (uint8_t *)v153, 0x12u);
        swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v154, -1, -1);
        v159 = v153;
        v2 = v465;
        swift_slowDealloc(v159, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v449 + 8))(v442, v457);
      }
      else
      {
        v239 = v2[31];
        v141(v2[50], v2[43]);

        (*(void (**)(uint64_t, uint64_t))(v239 + 8))(v149, v150);
      }
    }
    else
    {
      v460 = v138;
      v208 = v107 - 2;
      v468 = v2;
      v209 = v2[51];
      static Log.network.getter(v138);
      v210 = v209;
      v211 = v468;
      v212 = v84(v210, v140, v139);
      v213 = Logger.logObject.getter(v212);
      v214 = static os_log_type_t.default.getter();
      v215 = os_log_type_enabled(v213, v214);
      v216 = v468[51];
      v217 = v468[43];
      v218 = v468[35];
      v435 = (void (*)(uint64_t, uint64_t))v20;
      v387 = v208;
      v407 = v137;
      v399 = v136;
      if (v215)
      {
        v425 = v468[30];
        v396 = v468[31];
        v219 = swift_slowAlloc(22, -1);
        v220 = (void (*)(uint64_t, uint64_t))v20;
        v221 = swift_slowAlloc(64, -1);
        v473[0] = v221;
        *(_DWORD *)v219 = 136315394;
        *(_QWORD *)typec = v218;
        v222 = sub_100004DD4(v460);
        v224 = v223;
        *v400 = sub_100021438(v222, v223, v473);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v400, v416, v219 + 4, v219 + 12);
        swift_bridgeObjectRelease(v224);
        *(_WORD *)(v219 + 12) = 2080;
        v225 = sub_100009174(&qword_1000B2220, (uint64_t (*)(uint64_t))&type metadata accessor for Message, (uint64_t)&protocol conformance descriptor for Message);
        v226 = dispatch thunk of CustomStringConvertible.description.getter(v217, v225);
        v228 = v227;
        *v208 = sub_100021438(v226, v227, v473);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v208, v392, v219 + 14, v219 + 22);
        swift_bridgeObjectRelease(v228);
        v220(v216, v217);
        _os_log_impl((void *)&_mh_execute_header, v213, v214, "[NMC] Received %s: %s", (uint8_t *)v219, 0x16u);
        swift_arrayDestroy(v221, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v221, -1, -1);
        v229 = v219;
        v211 = v468;
        swift_slowDealloc(v229, -1, -1);

        v230 = *(void (**)(uint64_t, uint64_t))(v396 + 8);
        v231 = *(_QWORD *)typec;
        v232 = v425;
      }
      else
      {
        v256 = v468[30];
        v257 = v468[31];
        v20(v468[51], v217);

        v230 = *(void (**)(uint64_t, uint64_t))(v257 + 8);
        v231 = v218;
        v232 = v256;
      }
      v393 = v230;
      v258 = ((uint64_t (*)(uint64_t, uint64_t))v230)(v231, v232);
      v403 = v211[73];
      v259 = v211[57];
      v426 = v211[49];
      v261 = v211[44];
      v260 = v211[45];
      v262 = v211[43];
      v263 = v468[21];
      v264 = v468[20];
      v265 = static CommunicationActor.shared.getter(v258);
      v447(v259, v264, v262);
      v266 = *(unsigned __int8 *)(v261 + 80);
      v267 = (v266 + 32) & ~v266;
      v268 = (v260 + v267 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v269 = swift_allocObject(&unk_1000AED40, v268 + 4, v266 | 7);
      *(_QWORD *)(v269 + 16) = v263;
      *(_BYTE *)(v269 + 24) = v460;
      *(_DWORD *)(v269 + 28) = v407;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v261 + 32))(v269 + v267, v259, v262);
      *(_DWORD *)(v269 + v268) = v399;
      v270 = swift_allocObject(&unk_1000AED68, 32, 7);
      *(_QWORD *)(v270 + 16) = &unk_1000B3C10;
      *(_QWORD *)(v270 + 24) = v269;
      swift_retain(v263);
      generateElements<A>(isolation:_:)(v265, v403, &unk_1000B3C20, v270, v262);
      swift_release(v270);
      v271 = swift_release(v265);
      static Log.network.getter(v271);
      v272 = v447(v426, v264, v262);
      v273 = v468;
      v274 = Logger.logObject.getter(v272);
      v275 = static os_log_type_t.debug.getter();
      v276 = os_log_type_enabled(v274, v275);
      v277 = v468[49];
      v278 = v468[43];
      v279 = v468[33];
      v280 = v468[30];
      if (v276)
      {
        v281 = (uint8_t *)swift_slowAlloc(12, -1);
        v282 = swift_slowAlloc(32, -1);
        v473[0] = v282;
        *(_DWORD *)v281 = 136315138;
        v283 = Message.shortDescription.getter(v282);
        v451 = v280;
        v285 = v284;
        *v441 = sub_100021438(v283, v284, v473);
        v273 = v468;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v441, v387, v281 + 4, v281 + 12);
        swift_bridgeObjectRelease(v285);
        v435(v277, v278);
        _os_log_impl((void *)&_mh_execute_header, v274, v275, "[MSQ] Enqueue reply stream for: %s", v281, 0xCu);
        swift_arrayDestroy(v282, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v282, -1, -1);
        swift_slowDealloc(v281, -1, -1);

        v287 = v451;
        v286 = v279;
      }
      else
      {
        v435(v468[49], v468[43]);

        v286 = v279;
        v287 = v280;
      }
      v393(v286, v287);
      v311 = v273 + 23;
      v310 = v273[23];
      v309 = v311[1];
      v312 = v468[22];
      sub_10005B76C(v309, v468[21]);
      v313 = v312;
      v2 = v468;
      (*(void (**)(uint64_t, uint64_t))(v310 + 8))(v309, v313);
    }
    goto LABEL_11;
  }
  v179 = v107 - 7;
  if (v117 != enum case for Message.Operation.response(_:))
  {
    v417 = v107 - 11;
    v233 = enum case for Message.Operation.error(_:);
    v234 = swift_release(v2[72]);
    v235 = v2[20];
    if (v131 == v233)
    {
      v236 = (unsigned int *)v2[28];
      v237 = (*(uint64_t (**)(unsigned int *, _QWORD))(v2[27] + 96))(v236, v2[26]);
      v238 = *v236;
      Message.content.getter(v237);
      MessageBody.deserialized<A>()(&type metadata for String, &protocol witness table for String);
      v436 = (void (*)(uint64_t, uint64_t, __n128))v20;
      v388 = v132;
      v332 = v2[6];
      v453 = v2[5];
      v333 = v2;
      v334 = v2[47];
      v335 = v2[43];
      v336 = v333[20];
      v337 = ((uint64_t (*)(_QWORD, _QWORD))v405)(v333[69], v333[65]);
      static Log.network.getter(v337);
      v84(v334, v336, v335);
      swift_bridgeObjectRetain(v332);
      v339 = Logger.logObject.getter(v338);
      v340 = static os_log_type_t.error.getter();
      v341 = os_log_type_enabled(v339, v340);
      v342 = v333[47];
      if (v341)
      {
        v472 = v179;
        v343 = v333[46];
        v344 = v238;
        v345 = v333[43];
        v346 = v84;
        v347 = swift_slowAlloc(18, -1);
        v427 = swift_slowAlloc(32, -1);
        v473[0] = v427;
        *(_DWORD *)v347 = 67109378;
        v445 = v344;
        *((_DWORD *)v333 + 176) = v344;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v388, v454, v347 + 4, v347 + 8);
        *(_WORD *)(v347 + 8) = 2080;
        v348 = v346(v343, v342, v345);
        v349 = v332;
        if (!v332)
        {
          v453 = Message.description.getter(v348);
          v349 = v350;
        }
        v352 = v333[46];
        v351 = v333[47];
        v353 = v333[43];
        v461 = v333[32];
        v409 = v333[31];
        v418 = v333[30];
        v354 = swift_bridgeObjectRetain(v332);
        v436(v352, v353, v354);
        v333[12] = sub_100021438(v453, v349, v473);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v394, v472, v347 + 10, v347 + 18);
        swift_bridgeObjectRelease(v349);
        swift_bridgeObjectRelease_n(v332, 2);
        ((void (*)(uint64_t, uint64_t))v436)(v351, v353);
        _os_log_impl((void *)&_mh_execute_header, v339, v340, "[NMC] Error executing request %u: %s", (uint8_t *)v347, 0x12u);
        swift_arrayDestroy(v427, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v427, -1, -1);
        swift_slowDealloc(v347, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v409 + 8))(v461, v418);
        v238 = v445;
      }
      else
      {
        v355 = v333[43];
        v356 = v333[31];
        v357 = v333[32];
        v358 = v333[30];
        swift_bridgeObjectRelease_n(v332, 2);
        ((void (*)(uint64_t, uint64_t))v436)(v342, v355);

        (*(void (**)(uint64_t, uint64_t))(v356 + 8))(v357, v358);
      }
      v359 = *(_QWORD *)(v333[21] + 64);
      v360 = sub_10001841C();
      v361 = swift_allocError(&type metadata for NetworkError, v360, 0, 0);
      *v362 = 0;
      swift_retain(v359);
      dispatch thunk of MessageDemultiplexer.error(_:_:)(v238, v361);
      swift_errorRelease(v361);
      swift_release(v359);
      v2 = v333;
      goto LABEL_11;
    }
    v288 = v2[54];
    v289 = v2;
    v290 = v2[43];
    static Log.network.getter(v234);
    v291 = v84(v288, v235, v290);
    v292 = Logger.logObject.getter(v291);
    v293 = static os_log_type_t.error.getter();
    v294 = os_log_type_enabled(v292, v293);
    v295 = v289[54];
    v296 = v289[43];
    v297 = v289[39];
    v298 = v289[30];
    v299 = v289[31];
    v469 = v289;
    if (v294)
    {
      v300 = (uint8_t *)swift_slowAlloc(12, -1);
      v301 = swift_slowAlloc(32, -1);
      v473[0] = v301;
      *(_DWORD *)v300 = 136315138;
      v302 = sub_100009174(&qword_1000B2220, (uint64_t (*)(uint64_t))&type metadata accessor for Message, (uint64_t)&protocol conformance descriptor for Message);
      v303 = dispatch thunk of CustomStringConvertible.description.getter(v296, v302);
      v444 = v299;
      v305 = v304;
      *v417 = sub_100021438(v303, v304, v473);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v417, v397, v300 + 4, v300 + 12);
      swift_bridgeObjectRelease(v305);
      v20(v295, v296);
      _os_log_impl((void *)&_mh_execute_header, v292, v293, "[NMC] Unknown message type for message %s. Ignoring.", v300, 0xCu);
      swift_arrayDestroy(v301, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v301, -1, -1);
      swift_slowDealloc(v300, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v444 + 8))(v297, v298);
    }
    else
    {
      v20(v295, v296);

      (*(void (**)(uint64_t, uint64_t))(v299 + 8))(v297, v298);
    }
    v2 = v469;
    v109 = v469[28];
    goto LABEL_70;
  }
  v467 = v107 - 7;
  v180 = v2[55];
  v181 = v2;
  v182 = v2[43];
  v183 = (_DWORD *)v181[28];
  v184 = v181[20];
  v185 = (*(uint64_t (**)(_DWORD *, _QWORD))(v181[27] + 96))(v183, v181[26]);
  LODWORD(v183) = *v183;
  *((_DWORD *)v181 + 180) = (_DWORD)v183;
  static Log.network.getter(v185);
  v186 = v182;
  v187 = v181;
  v188 = v84(v180, v184, v186);
  v189 = Logger.logObject.getter(v188);
  v190 = static os_log_type_t.default.getter();
  v191 = os_log_type_enabled(v189, v190);
  v192 = v181[55];
  v193 = v181[43];
  v194 = v181[40];
  v195 = v181[30];
  v459 = v183;
  if (v191)
  {
    v424 = v181[31];
    v443 = v181[30];
    v196 = (uint8_t *)swift_slowAlloc(12, -1);
    v197 = swift_slowAlloc(32, -1);
    v473[0] = v197;
    *(_DWORD *)v196 = 136315138;
    v198 = sub_100009174(&qword_1000B2220, (uint64_t (*)(uint64_t))&type metadata accessor for Message, (uint64_t)&protocol conformance descriptor for Message);
    v199 = dispatch thunk of CustomStringConvertible.description.getter(v193, v198);
    v402 = v194;
    v201 = v200;
    *v467 = sub_100021438(v199, v200, v473);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v467, v415, v196 + 4, v196 + 12);
    swift_bridgeObjectRelease(v201);
    v20(v192, v193);
    _os_log_impl((void *)&_mh_execute_header, v189, v190, "[NMC] Received response: %s", v196, 0xCu);
    swift_arrayDestroy(v197, 1, (char *)&type metadata for Any + 8);
    v202 = v197;
    v187 = v181;
    swift_slowDealloc(v202, -1, -1);
    swift_slowDealloc(v196, -1, -1);

    v203 = (*(uint64_t (**)(uint64_t, uint64_t))(v424 + 8))(v402, v443);
  }
  else
  {
    v240 = v181[31];
    v20(v181[55], v193);

    v203 = (*(uint64_t (**)(uint64_t, uint64_t))(v240 + 8))(v194, v195);
  }
  v241 = v187;
  v242 = v187[67];
  v243 = v241[65];
  v244 = v241[48];
  v245 = v241[43];
  v246 = v241[20];
  v247 = Message.content.getter(v203);
  v248 = MessageBody.isEmpty.getter(v247);
  v405(v242, v243);
  v249 = v447(v244, v246, v245);
  v250 = v241[48];
  v251 = v241[43];
  if ((v248 & 1) != 0)
  {
    v252 = Message.complete.getter(v249);
    v20(v250, v251);
    if ((v252 & 1) != 0)
    {
      v2 = v181;
      v253 = swift_release(v181[72]);
      if ((Message.complete.getter(v253) & 1) == 0)
        goto LABEL_11;
      v254 = *((unsigned int *)v181 + 180);
      v255 = *(_QWORD *)(v181[21] + 64);
      swift_retain(v255);
      dispatch thunk of MessageDemultiplexer.finish(_:)(v254);
      v62 = v255;
      v2 = v181;
      goto LABEL_10;
    }
  }
  else
  {
    v20(v241[48], v241[43]);
  }
  v306 = *(_QWORD *)(v181[21] + 64);
  v181[84] = v306;
  v307 = swift_retain(v306);
  Message.content.getter(v307);
  v470 = (char *)&async function pointer to dispatch thunk of MessageDemultiplexer.send(_:_:)
       + async function pointer to dispatch thunk of MessageDemultiplexer.send(_:_:);
  v308 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of MessageDemultiplexer.send(_:_:)
                                    + 1));
  v181[85] = v308;
  *v308 = v181;
  v308[1] = sub_10005F8A4;
  return ((uint64_t (*)(_QWORD, _QWORD))v470)(v459, v181[70]);
}

uint64_t sub_10005F130()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  *(_QWORD *)(*(_QWORD *)v1 + 664) = v0;
  swift_task_dealloc(v3);
  v4 = (void (*)(uint64_t, uint64_t))v2[76];
  v5 = v2[68];
  v6 = v2[65];
  swift_release(v2[81]);
  v4(v5, v6);
  if (v0)
    v7 = sub_10005F490;
  else
    v7 = sub_10005F1C4;
  return swift_task_switch(v7, v2[74], v2[75]);
}

uint64_t sub_10005F1C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);

  v1 = *(_QWORD *)(v0 + 640) + 1;
  if (v1 == *(_QWORD *)(v0 + 632))
  {
    v2 = *(_QWORD *)(v0 + 624);
    swift_release(*(_QWORD *)(v0 + 576));
    swift_bridgeObjectRelease(v2);
    v3 = *(_QWORD *)(v0 + 552);
    v4 = *(_QWORD *)(v0 + 544);
    v5 = *(_QWORD *)(v0 + 536);
    v7 = *(_QWORD *)(v0 + 504);
    v6 = *(_QWORD *)(v0 + 512);
    v9 = *(_QWORD *)(v0 + 472);
    v8 = *(_QWORD *)(v0 + 480);
    v11 = *(_QWORD *)(v0 + 456);
    v10 = *(_QWORD *)(v0 + 464);
    v18 = *(_QWORD *)(v0 + 448);
    v19 = *(_QWORD *)(v0 + 440);
    v20 = *(_QWORD *)(v0 + 432);
    v21 = *(_QWORD *)(v0 + 424);
    v22 = *(_QWORD *)(v0 + 416);
    v23 = *(_QWORD *)(v0 + 408);
    v24 = *(_QWORD *)(v0 + 400);
    v25 = *(_QWORD *)(v0 + 392);
    v26 = *(_QWORD *)(v0 + 384);
    v27 = *(_QWORD *)(v0 + 376);
    v28 = *(_QWORD *)(v0 + 368);
    v29 = *(_QWORD *)(v0 + 336);
    v30 = *(_QWORD *)(v0 + 328);
    v31 = *(_QWORD *)(v0 + 320);
    v32 = *(_QWORD *)(v0 + 312);
    v33 = *(_QWORD *)(v0 + 304);
    v34 = *(_QWORD *)(v0 + 296);
    v35 = *(_QWORD *)(v0 + 288);
    v36 = *(_QWORD *)(v0 + 280);
    v37 = *(_QWORD *)(v0 + 272);
    v38 = *(_QWORD *)(v0 + 264);
    v39 = *(_QWORD *)(v0 + 256);
    v40 = *(_QWORD *)(v0 + 232);
    v41 = *(_QWORD *)(v0 + 224);
    v42 = *(_QWORD *)(v0 + 200);
    v43 = *(_QWORD *)(v0 + 192);
    swift_task_dealloc(*(_QWORD *)(v0 + 560));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 640) = v1;
    v13 = *(_QWORD *)(v0 + 624) + 16 * v1;
    v14 = *(_QWORD *)(v13 + 40);
    *(_QWORD *)(v0 + 648) = v14;
    v15 = *(int **)(v13 + 32);
    v16 = swift_retain(v14);
    Message.content.getter(v16);
    v44 = (uint64_t (*)(void))((char *)v15 + *v15);
    v17 = (_QWORD *)swift_task_alloc(v15[1]);
    *(_QWORD *)(v0 + 656) = v17;
    *v17 = v0;
    v17[1] = sub_10005F130;
    return v44();
  }
}

uint64_t sub_10005F490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(void);

  v2 = *(_QWORD *)(v1 + 664);
  static Log.network.getter(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v1 + 664);
  if (v6)
  {
    v8 = *(_DWORD *)(v1 + 716);
    v9 = swift_slowAlloc(18, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 67109378;
    *(_DWORD *)(v9 + 4) = v8;
    *(_WORD *)(v9 + 8) = 2112;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v9 + 10) = v11;
    *v10 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "handleMessage: Exception occurred while processing event %u. Error: %@", (uint8_t *)v9, 0x12u);
    v12 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v1 + 664));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  (*(void (**)(_QWORD, _QWORD))(v1 + 616))(*(_QWORD *)(v1 + 288), *(_QWORD *)(v1 + 240));
  v13 = *(_QWORD *)(v1 + 640) + 1;
  if (v13 == *(_QWORD *)(v1 + 632))
  {
    v14 = *(_QWORD *)(v1 + 624);
    swift_release(*(_QWORD *)(v1 + 576));
    swift_bridgeObjectRelease(v14);
    v15 = *(_QWORD *)(v1 + 552);
    v16 = *(_QWORD *)(v1 + 544);
    v17 = *(_QWORD *)(v1 + 536);
    v19 = *(_QWORD *)(v1 + 504);
    v18 = *(_QWORD *)(v1 + 512);
    v21 = *(_QWORD *)(v1 + 472);
    v20 = *(_QWORD *)(v1 + 480);
    v23 = *(_QWORD *)(v1 + 456);
    v22 = *(_QWORD *)(v1 + 464);
    v30 = *(_QWORD *)(v1 + 448);
    v31 = *(_QWORD *)(v1 + 440);
    v32 = *(_QWORD *)(v1 + 432);
    v33 = *(_QWORD *)(v1 + 424);
    v34 = *(_QWORD *)(v1 + 416);
    v35 = *(_QWORD *)(v1 + 408);
    v36 = *(_QWORD *)(v1 + 400);
    v37 = *(_QWORD *)(v1 + 392);
    v38 = *(_QWORD *)(v1 + 384);
    v39 = *(_QWORD *)(v1 + 376);
    v40 = *(_QWORD *)(v1 + 368);
    v41 = *(_QWORD *)(v1 + 336);
    v42 = *(_QWORD *)(v1 + 328);
    v43 = *(_QWORD *)(v1 + 320);
    v44 = *(_QWORD *)(v1 + 312);
    v45 = *(_QWORD *)(v1 + 304);
    v46 = *(_QWORD *)(v1 + 296);
    v47 = *(_QWORD *)(v1 + 288);
    v48 = *(_QWORD *)(v1 + 280);
    v49 = *(_QWORD *)(v1 + 272);
    v50 = *(_QWORD *)(v1 + 264);
    v51 = *(_QWORD *)(v1 + 256);
    v52 = *(_QWORD *)(v1 + 232);
    v53 = *(_QWORD *)(v1 + 224);
    v54 = *(_QWORD *)(v1 + 200);
    v55 = *(_QWORD *)(v1 + 192);
    swift_task_dealloc(*(_QWORD *)(v1 + 560));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    *(_QWORD *)(v1 + 640) = v13;
    v25 = *(_QWORD *)(v1 + 624) + 16 * v13;
    v26 = *(_QWORD *)(v25 + 40);
    *(_QWORD *)(v1 + 648) = v26;
    v27 = *(int **)(v25 + 32);
    v28 = swift_retain(v26);
    Message.content.getter(v28);
    v56 = (uint64_t (*)(void))((char *)v27 + *v27);
    v29 = (_QWORD *)swift_task_alloc(v27[1]);
    *(_QWORD *)(v1 + 656) = v29;
    *v29 = v1;
    v29[1] = sub_10005F130;
    return v56();
  }
}

uint64_t sub_10005F8A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 672);
  v3 = *(void (**)(uint64_t, uint64_t))(*v0 + 608);
  v4 = *(_QWORD *)(*v0 + 560);
  v5 = *(_QWORD *)(*v0 + 520);
  swift_task_dealloc(*(_QWORD *)(*v0 + 680));
  swift_release(v2);
  v3(v4, v5);
  return swift_task_switch(sub_10005F928, *(_QWORD *)(v1 + 592), *(_QWORD *)(v1 + 600));
}

uint64_t sub_10005F928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = swift_release(*(_QWORD *)(v0 + 576));
  if ((Message.complete.getter(v1) & 1) != 0)
  {
    v2 = *(unsigned int *)(v0 + 720);
    v3 = *(_QWORD *)(*(_QWORD *)(v0 + 168) + 64);
    swift_retain(v3);
    dispatch thunk of MessageDemultiplexer.finish(_:)(v2);
    swift_release(v3);
  }
  v4 = *(_QWORD *)(v0 + 552);
  v5 = *(_QWORD *)(v0 + 544);
  v6 = *(_QWORD *)(v0 + 536);
  v8 = *(_QWORD *)(v0 + 504);
  v7 = *(_QWORD *)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 472);
  v9 = *(_QWORD *)(v0 + 480);
  v12 = *(_QWORD *)(v0 + 456);
  v11 = *(_QWORD *)(v0 + 464);
  v14 = *(_QWORD *)(v0 + 448);
  v15 = *(_QWORD *)(v0 + 440);
  v16 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 424);
  v18 = *(_QWORD *)(v0 + 416);
  v19 = *(_QWORD *)(v0 + 408);
  v20 = *(_QWORD *)(v0 + 400);
  v21 = *(_QWORD *)(v0 + 392);
  v22 = *(_QWORD *)(v0 + 384);
  v23 = *(_QWORD *)(v0 + 376);
  v24 = *(_QWORD *)(v0 + 368);
  v25 = *(_QWORD *)(v0 + 336);
  v26 = *(_QWORD *)(v0 + 328);
  v27 = *(_QWORD *)(v0 + 320);
  v28 = *(_QWORD *)(v0 + 312);
  v29 = *(_QWORD *)(v0 + 304);
  v30 = *(_QWORD *)(v0 + 296);
  v31 = *(_QWORD *)(v0 + 288);
  v32 = *(_QWORD *)(v0 + 280);
  v33 = *(_QWORD *)(v0 + 272);
  v34 = *(_QWORD *)(v0 + 264);
  v35 = *(_QWORD *)(v0 + 256);
  v36 = *(_QWORD *)(v0 + 232);
  v37 = *(_QWORD *)(v0 + 224);
  v38 = *(_QWORD *)(v0 + 200);
  v39 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 560));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005FB84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = a2;
  v22 = a5;
  v10 = type metadata accessor for MessageBody(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = type metadata accessor for CommunicationActor(0);
  v14 = static CommunicationActor.shared.getter(v13);
  v15 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v16 = *(unsigned __int8 *)(v11 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(a4, v17 + v12, v16 | 7);
  *(_QWORD *)(v18 + 16) = v21;
  *(_QWORD *)(v18 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v18 + v17, (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  a6[3] = sub_10000629C(&qword_1000B3530);
  v23 = v10;
  a6[4] = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  sub_10003D62C(a6);
  swift_retain(a3);
  generateElements<A>(isolation:_:)(v14, v15, v22, v18, v10);
  swift_release(v14);
  return swift_release(v18);
}

uint64_t sub_10005FD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v6 = type metadata accessor for ProtocolVersion(0);
  v5[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MessageBody(0);
  v5[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[15] = v8;
  v5[16] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CommunicationActor(0);
  v5[17] = static CommunicationActor.shared.getter(v9);
  v10 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  v5[18] = v11;
  v5[19] = v12;
  return swift_task_switch(sub_10005FDE4, v11, v12);
}

uint64_t sub_10005FDE4()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  MessageBody.deserialized<A>()(&type metadata for String, &protocol witness table for String);
  v1 = *(int **)(v0 + 80);
  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  *(_QWORD *)(v0 + 160) = v2;
  *v2 = v0;
  v2[1] = sub_10005FEB4;
  return v4(v0 + 16, v0 + 32);
}

uint64_t sub_10005FEB4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v2[5]);
  if (v0)
    v4 = sub_100060044;
  else
    v4 = sub_10005FF28;
  return swift_task_switch(v4, v2[18], v2[19]);
}

uint64_t sub_10005FF28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v8;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD);

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 56) = v3;
  swift_bridgeObjectRetain(v3);
  MessageBody.version.getter(v4);
  MessageBody.init<A>(serializable:version:)(v0 + 48, v2, &type metadata for String, &protocol witness table for String);
  if (v1)
  {
    v5 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease(v3);
    swift_release(v5);
    v6 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(int **)(v0 + 64);
    v10 = (uint64_t (*)(_QWORD))((char *)v8 + *v8);
    v9 = (_QWORD *)swift_task_alloc(v8[1]);
    *(_QWORD *)(v0 + 176) = v9;
    *v9 = v0;
    v9[1] = sub_10006008C;
    return v10(*(_QWORD *)(v0 + 128));
  }
}

uint64_t sub_100060044()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006008C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[15] + 8))(v2[16], v2[14]);
  if (v0)
    v4 = sub_10006014C;
  else
    v4 = sub_1000600FC;
  return swift_task_switch(v4, v2[18], v2[19]);
}

uint64_t sub_1000600FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006014C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006019C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v6 = type metadata accessor for ProtocolVersion(0);
  v5[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MessageBody(0);
  v5[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[13] = v8;
  v5[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v5[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[16] = v10;
  v5[17] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CommunicationActor(0);
  v5[18] = static CommunicationActor.shared.getter(v11);
  v12 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, v12);
  v5[19] = v13;
  v5[20] = v14;
  return swift_task_switch(sub_1000602A4, v13, v14);
}

uint64_t sub_1000602A4()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  MessageBody.deserialized<A>()(v0[15], &protocol witness table for UUID);
  v1 = (int *)v0[8];
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[21] = v2;
  *v2 = v0;
  v2[1] = sub_100060378;
  return ((uint64_t (*)(_QWORD *, _QWORD))v4)(v0 + 2, v0[17]);
}

uint64_t sub_100060378()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[16] + 8))(v2[17], v2[15]);
  if (v0)
    v4 = sub_100060518;
  else
    v4 = sub_1000603E8;
  return swift_task_switch(v4, v2[19], v2[20]);
}

uint64_t sub_1000603E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);

  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = v4;
  v5 = sub_100017F9C(v1, v4);
  MessageBody.version.getter(v5);
  MessageBody.init<A>(serializable:version:)(v0 + 32, v3, &type metadata for Data, &protocol witness table for Data);
  if (v2)
  {
    v6 = *(_QWORD *)(v0 + 144);
    sub_1000063CC(v1, v4);
    swift_release(v6);
    v7 = *(_QWORD *)(v0 + 112);
    v8 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(int **)(v0 + 48);
    v12 = (uint64_t (*)(_QWORD))((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 184) = v11;
    *v11 = v0;
    v11[1] = sub_100060574;
    return v12(*(_QWORD *)(v0 + 112));
  }
}

uint64_t sub_100060518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 144));
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060574()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[13] + 8))(v2[14], v2[12]);
  if (v0)
    v4 = sub_100060648;
  else
    v4 = sub_1000605E4;
  return swift_task_switch(v4, v2[19], v2[20]);
}

uint64_t sub_1000605E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 144));
  sub_1000063CC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 144));
  sub_1000063CC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000606AC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44[3];

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static Log.network.getter(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v40 = a2;
    v41 = a3;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v44[0] = v17;
    *(_DWORD *)v16 = 136315138;
    v42 = a1;
    if ((_BYTE)a1)
    {
      v18 = 0xD000000000000010;
      if (a1 == 1)
        v19 = 0x8000000100094240;
      else
        v19 = 0x8000000100094220;
    }
    else
    {
      v19 = 0xEE00796461655263;
      v18 = 0x6E79536D75626C61;
    }
    v43 = sub_100021438(v18, v19, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Registry: Registering event for %s.", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    a1 = v42;
    a2 = v40;
    a3 = v41;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  v20 = swift_allocObject(&unk_1000AEE80, 32, 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  v21 = (uint64_t *)(v4 + 40);
  swift_beginAccess(v4 + 40, v44, 33, 0);
  swift_retain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + 40));
  v43 = *(_QWORD *)(v4 + 40);
  v23 = v43;
  *(_QWORD *)(v4 + 40) = 0x8000000000000000;
  v25 = sub_10004A2C4(a1);
  v26 = *(_QWORD *)(v23 + 16);
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
LABEL_22:
    a1 = (unint64_t)sub_1000913A4(0, *(_QWORD *)(a1 + 16) + 1, 1, (_QWORD *)a1);
    *(_QWORD *)(v9 + 8 * v25) = a1;
    goto LABEL_18;
  }
  v29 = v24;
  if (*(_QWORD *)(v23 + 24) >= v28)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10004CE0C();
      v23 = v43;
    }
  }
  else
  {
    sub_10004A87C(v28, isUniquelyReferenced_nonNull_native);
    v23 = v43;
    v30 = sub_10004A2C4(a1);
    if ((v29 & 1) != (v31 & 1))
    {
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NetworkEventType);
      __break(1u);
      return result;
    }
    v25 = v30;
  }
  v32 = *v21;
  *v21 = v23;
  swift_bridgeObjectRelease(v32);
  v33 = *v21;
  if ((v29 & 1) == 0)
    sub_10004C3C4(v25, a1, _swiftEmptyArrayStorage, *v21);
  v9 = *(_QWORD *)(v33 + 56);
  a1 = *(_QWORD *)(v9 + 8 * v25);
  v34 = swift_isUniquelyReferenced_nonNull_native(a1);
  *(_QWORD *)(v9 + 8 * v25) = a1;
  if ((v34 & 1) == 0)
    goto LABEL_22;
LABEL_18:
  v36 = *(_QWORD *)(a1 + 16);
  v35 = *(_QWORD *)(a1 + 24);
  if (v36 >= v35 >> 1)
  {
    a1 = (unint64_t)sub_1000913A4((_QWORD *)(v35 > 1), v36 + 1, 1, (_QWORD *)a1);
    *(_QWORD *)(v9 + 8 * v25) = a1;
  }
  *(_QWORD *)(a1 + 16) = v36 + 1;
  v37 = (_QWORD *)(a1 + 16 * v36);
  v37[4] = &unk_1000B3D68;
  v37[5] = v20;
  return swift_endAccess(v44);
}

uint64_t sub_100060A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  v5 = type metadata accessor for CommunicationActor(0);
  v4[7] = static CommunicationActor.shared.getter(v5);
  v6 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
  v4[8] = v7;
  v4[9] = v8;
  return swift_task_switch(sub_100060AF0, v7, v8);
}

uint64_t sub_100060AF0()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  MessageBody.deserialized<A>()(&type metadata for Data, &protocol witness table for Data);
  v1 = *(int **)(v0 + 40);
  v4 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  *(_QWORD *)(v0 + 80) = v2;
  *v2 = v0;
  v2[1] = sub_100060BA0;
  return v4(v0 + 16);
}

uint64_t sub_100060BA0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v3);
  sub_1000063CC(v2[2], v2[3]);
  if (v0)
    v4 = sub_100060C48;
  else
    v4 = sub_100060C14;
  return swift_task_switch(v4, v2[8], v2[9]);
}

uint64_t sub_100060C14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060C48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060C7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v6 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100005B30;
  return v8(a1, a2);
}

uint64_t sub_100060CE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_DWORD *)(v7 + 620) = a7;
  *(_DWORD *)(v7 + 616) = a5;
  *(_BYTE *)(v7 + 628) = a4;
  *(_QWORD *)(v7 + 144) = a3;
  *(_QWORD *)(v7 + 152) = a6;
  *(_QWORD *)(v7 + 128) = a1;
  *(_QWORD *)(v7 + 136) = a2;
  v8 = type metadata accessor for ProtocolVersion(0);
  *(_QWORD *)(v7 + 160) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 168) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 176) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 184) = swift_task_alloc(v10);
  v11 = type metadata accessor for Message.Operation(0);
  *(_QWORD *)(v7 + 192) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 200) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 208) = swift_task_alloc(v13);
  *(_QWORD *)(v7 + 216) = swift_task_alloc(v13);
  v14 = type metadata accessor for Message(0);
  *(_QWORD *)(v7 + 224) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v7 + 232) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 240) = swift_task_alloc(v16);
  *(_QWORD *)(v7 + 248) = swift_task_alloc(v16);
  *(_QWORD *)(v7 + 256) = swift_task_alloc(v16);
  v17 = sub_10000629C(&qword_1000B3C40);
  *(_QWORD *)(v7 + 264) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10000629C(&qword_1000B3C48);
  *(_QWORD *)(v7 + 272) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v7 + 280) = v19;
  *(_QWORD *)(v7 + 288) = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AsyncBufferSequencePolicy(0);
  *(_QWORD *)(v7 + 296) = v20;
  v21 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v7 + 304) = v21;
  *(_QWORD *)(v7 + 312) = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10000629C(&qword_1000B3C50);
  *(_QWORD *)(v7 + 320) = v22;
  v23 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v7 + 328) = v23;
  *(_QWORD *)(v7 + 336) = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for MessageBody(0);
  *(_QWORD *)(v7 + 344) = v24;
  v25 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v7 + 352) = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 360) = swift_task_alloc(v26);
  *(_QWORD *)(v7 + 368) = swift_task_alloc(v26);
  *(_QWORD *)(v7 + 376) = swift_task_alloc(v26);
  *(_QWORD *)(v7 + 384) = swift_task_alloc(v26);
  *(_QWORD *)(v7 + 392) = swift_task_alloc(v26);
  v27 = sub_10000629C(&qword_1000B3C58);
  *(_QWORD *)(v7 + 400) = v27;
  v28 = *(_QWORD *)(v27 - 8);
  *(_QWORD *)(v7 + 408) = v28;
  *(_QWORD *)(v7 + 416) = swift_task_alloc((*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Logger(0);
  *(_QWORD *)(v7 + 424) = v29;
  v30 = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(v7 + 432) = v30;
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 440) = swift_task_alloc(v31);
  *(_QWORD *)(v7 + 448) = swift_task_alloc(v31);
  v32 = type metadata accessor for CommunicationActor(0);
  *(_QWORD *)(v7 + 456) = v32;
  *(_QWORD *)(v7 + 464) = static CommunicationActor.shared.getter(v32);
  v33 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  *(_QWORD *)(v7 + 472) = v33;
  v34 = dispatch thunk of Actor.unownedExecutor.getter(v32, v33);
  *(_QWORD *)(v7 + 480) = v34;
  *(_QWORD *)(v7 + 488) = v35;
  return swift_task_switch(sub_100060FA8, v34, v35);
}

uint64_t sub_100060FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = *(_QWORD *)(v0 + 144);
  swift_beginAccess(v1 + 32, v0 + 56, 0, 0);
  v2 = *(_QWORD *)(v1 + 32);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_10004A2C4(*(unsigned __int8 *)(v0 + 628)), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(v2 + 56) + 16 * v3;
    v7 = *(void (**)(uint64_t))v5;
    v6 = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(v0 + 496) = v6;
    v8 = swift_retain(v6);
    v9 = static Log.network.getter(v8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *(_DWORD *)(v0 + 616);
      v13 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v13 = 67109120;
      *(_DWORD *)(v0 + 612) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 612, v0 + 616, v13 + 4, v13 + 8);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "handleMessage: Calling handler for: %u", v13, 8u);
      swift_slowDealloc(v13, -1, -1);
    }
    v14 = *(_QWORD *)(v0 + 448);
    v15 = *(_QWORD *)(v0 + 424);
    v16 = *(_QWORD *)(v0 + 432);
    v17 = *(_QWORD *)(v0 + 392);

    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    Message.content.getter(v18);
    v7(v17);
    v37 = *(_QWORD *)(v0 + 392);
    v38 = *(_QWORD *)(v0 + 344);
    v39 = *(_QWORD *)(v0 + 336);
    v59 = *(_QWORD *)(v0 + 328);
    v41 = *(_QWORD *)(v0 + 312);
    v40 = *(_QWORD *)(v0 + 320);
    v43 = *(_QWORD *)(v0 + 296);
    v42 = *(_QWORD *)(v0 + 304);
    v62 = *(_QWORD *)(v0 + 400);
    v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 352) + 8);
    *(_QWORD *)(v0 + 504) = v44;
    v44(v37, v38);
    v45 = *(_QWORD *)(v0 + 40);
    v46 = *(_QWORD *)(v0 + 48);
    sub_10003D4FC((_QWORD *)(v0 + 16), v45);
    AsyncSequence.generic.getter(v45, v46);
    static AsyncBufferSequencePolicy.bounded(_:)(8);
    v47 = sub_100006454(&qword_1000B3C60, &qword_1000B3C50, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
    AsyncSequence<>.buffer(policy:)(v41, v40, v47);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v39, v40);
    sub_100022238((_QWORD *)(v0 + 16));
    v48 = AsyncBufferSequence.makeAsyncIterator()(v62);
    *(_DWORD *)(v0 + 624) = enum case for Message.Operation.response(_:);
    *(_QWORD *)(v0 + 512) = static CommunicationActor.shared.getter(v48);
    v49 = sub_100006454(&qword_1000B3C68, &qword_1000B3C48, (uint64_t)&protocol conformance descriptor for AsyncBufferSequence<A>.Iterator);
    v50 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(_QWORD *)(v0 + 520) = v50;
    *v50 = v0;
    v50[1] = sub_100061550;
    return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272), v49);
  }
  else
  {
    v19 = swift_release(*(_QWORD *)(v0 + 464));
    v20 = static Log.network.getter(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = *(_DWORD *)(v0 + 616);
      v24 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v24 = 67109120;
      *(_DWORD *)(v0 + 608) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 608, v0 + 612, v24 + 4, v24 + 8);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "handleMessage: No handler registered for request: %u", v24, 8u);
      swift_slowDealloc(v24, -1, -1);
    }
    v26 = *(_QWORD *)(v0 + 432);
    v25 = *(_QWORD *)(v0 + 440);
    v27 = *(_QWORD *)(v0 + 424);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    v28 = *(_QWORD *)(v0 + 440);
    v29 = *(_QWORD *)(v0 + 416);
    v30 = *(_QWORD *)(v0 + 384);
    v31 = *(_QWORD *)(v0 + 392);
    v33 = *(_QWORD *)(v0 + 368);
    v32 = *(_QWORD *)(v0 + 376);
    v34 = *(_QWORD *)(v0 + 360);
    v35 = *(_QWORD *)(v0 + 336);
    v36 = *(_QWORD *)(v0 + 312);
    v52 = *(_QWORD *)(v0 + 288);
    v53 = *(_QWORD *)(v0 + 264);
    v54 = *(_QWORD *)(v0 + 256);
    v55 = *(_QWORD *)(v0 + 248);
    v56 = *(_QWORD *)(v0 + 240);
    v57 = *(_QWORD *)(v0 + 216);
    v58 = *(_QWORD *)(v0 + 208);
    v60 = *(_QWORD *)(v0 + 184);
    v61 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 448));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100061550()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 520);
  *(_QWORD *)(*v1 + 528) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 512);
  if (v0)
  {
    if (v4)
    {
      v5 = *(_QWORD *)(v2 + 472);
      ObjectType = swift_getObjectType(v4);
      v7 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v5);
      v9 = v8;
    }
    else
    {
      v7 = 0;
      v9 = 0;
    }
    v13 = sub_100061840;
  }
  else
  {
    if (v4)
    {
      v10 = *(_QWORD *)(v2 + 472);
      v11 = swift_getObjectType(v4);
      v7 = dispatch thunk of Actor.unownedExecutor.getter(v11, v10);
      v9 = v12;
    }
    else
    {
      v7 = 0;
      v9 = 0;
    }
    v13 = sub_10006161C;
  }
  return swift_task_switch(v13, v7, v9);
}

uint64_t sub_10006161C()
{
  _QWORD *v0;

  swift_release(v0[64]);
  return swift_task_switch(sub_100061654, v0[60], v0[61]);
}

uint64_t sub_100061654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  uint64_t (*v13)(_DWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  void (*v23)(_DWORD *, uint64_t, uint64_t);
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t (*v30)(uint64_t);

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v5 = *(unsigned int *)(v0 + 624);
  if (v4 == 1)
  {
    v6 = *(_QWORD *)(v0 + 376);
    v28 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
    v29 = *(_QWORD *)(v0 + 384);
    v7 = *(_DWORD **)(v0 + 216);
    v8 = *(_QWORD *)(v0 + 192);
    v9 = *(_QWORD *)(v0 + 200);
    v10 = *(_QWORD *)(v0 + 184);
    v11 = *(_DWORD *)(v0 + 620);
    v26 = *(_QWORD *)(v0 + 168);
    v27 = *(_QWORD *)(v0 + 160);
    v12 = *(int **)(v0 + 128);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
    *v7 = v11;
    v13 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v9 + 104);
    *(_QWORD *)(v0 + 560) = v13;
    v14 = v13(v7, v5, v8);
    v15 = Message.content.getter(v14);
    MessageBody.version.getter(v15);
    v28(v6, v1);
    static MessageBody.empty(version:)(v10);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v10, v27);
    Message.init(operation:content:complete:)(v7, v29, 1);
    v30 = (uint64_t (*)(uint64_t))((char *)v12 + *v12);
    v16 = (_QWORD *)swift_task_alloc(v12[1]);
    *(_QWORD *)(v0 + 568) = v16;
    *v16 = v0;
    v16[1] = sub_100061C18;
    v17 = *(_QWORD *)(v0 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 384);
    v19 = *(_DWORD **)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 192);
    v21 = *(_QWORD *)(v0 + 200);
    v22 = *(int **)(v0 + 128);
    *v19 = *(_DWORD *)(v0 + 620);
    v23 = *(void (**)(_DWORD *, uint64_t, uint64_t))(v21 + 104);
    *(_QWORD *)(v0 + 536) = v23;
    v23(v19, v5, v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v18, v3, v1);
    Message.init(operation:content:complete:)(v19, v18, 0);
    v30 = (uint64_t (*)(uint64_t))((char *)v22 + *v22);
    v24 = (_QWORD *)swift_task_alloc(v22[1]);
    *(_QWORD *)(v0 + 544) = v24;
    *v24 = v0;
    v24[1] = sub_100061BA8;
    v17 = *(_QWORD *)(v0 + 256);
  }
  return v30(v17);
}

uint64_t sub_100061840()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[64];
  v0[14] = v0[66];
  v2 = sub_10000629C(&qword_1000B2B48);
  swift_willThrowTypedImpl(v0 + 14, v2, &protocol self-conformance witness table for Error);
  swift_release(v1);
  return swift_task_switch(sub_1000618A8, v0[60], v0[61]);
}

uint64_t sub_1000618A8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  uint64_t (*v16)(_QWORD);

  v1 = *(_QWORD *)(v0 + 200);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
  v2 = *(void (**)(void))(v1 + 104);
  v3 = *(_QWORD *)(v0 + 528);
  *(_QWORD *)(v0 + 584) = v3;
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
  v5 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 176);
  **(_DWORD **)(v0 + 208) = *(_DWORD *)(v0 + 620);
  v2();
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0xE000000000000000;
  v8._countAndFlagsBits = 0x203A726F727245;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  *(_QWORD *)(v0 + 120) = v3;
  v9 = sub_10000629C(&qword_1000B2B48);
  v10 = _print_unlocked<A, B>(_:_:)(v0 + 120, v0 + 80, v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v11 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 104) = v11;
  v12 = Message.content.getter(v10);
  MessageBody.version.getter(v12);
  v4(v5, v6);
  MessageBody.init<A>(serializable:version:)(v0 + 96, v7, &type metadata for String, &protocol witness table for String);
  v13 = *(int **)(v0 + 128);
  Message.init(operation:content:complete:)(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 368), 1);
  v16 = (uint64_t (*)(_QWORD))((char *)v13 + *v13);
  v14 = (_QWORD *)swift_task_alloc(v13[1]);
  *(_QWORD *)(v0 + 592) = v14;
  *v14 = v0;
  v14[1] = sub_100062008;
  return v16(*(_QWORD *)(v0 + 240));
}

uint64_t sub_100061BA8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[29] + 8))(v2[32], v2[28]);
  if (v0)
    v4 = sub_100061D0C;
  else
    v4 = sub_100061C88;
  return swift_task_switch(v4, v2[60], v2[61]);
}

uint64_t sub_100061C18()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 568);
  *(_QWORD *)(*(_QWORD *)v1 + 576) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[29] + 8))(v2[31], v2[28]);
  if (v0)
    v4 = sub_1000624A8;
  else
    v4 = sub_100062350;
  return swift_task_switch(v4, v2[60], v2[61]);
}

uint64_t sub_100061C88(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1[64] = static CommunicationActor.shared.getter(a1);
  v2 = sub_100006454(&qword_1000B3C68, &qword_1000B3C48, (uint64_t)&protocol conformance descriptor for AsyncBufferSequence<A>.Iterator);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v1[65] = v3;
  *v3 = v1;
  v3[1] = sub_100061550;
  return dispatch thunk of AsyncIteratorProtocol.next()(v1[33], v1[34], v2);
}

uint64_t sub_100061D0C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(_QWORD);

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(void (**)(void))(v0 + 536);
  *(_QWORD *)(v0 + 584) = v1;
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 176);
  **(_DWORD **)(v0 + 208) = *(_DWORD *)(v0 + 620);
  v2();
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0xE000000000000000;
  v7._countAndFlagsBits = 0x203A726F727245;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  *(_QWORD *)(v0 + 120) = v1;
  v8 = sub_10000629C(&qword_1000B2B48);
  v9 = _print_unlocked<A, B>(_:_:)(v0 + 120, v0 + 80, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v10 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 104) = v10;
  v11 = Message.content.getter(v9);
  MessageBody.version.getter(v11);
  v3(v4, v5);
  MessageBody.init<A>(serializable:version:)(v0 + 96, v6, &type metadata for String, &protocol witness table for String);
  v12 = *(int **)(v0 + 128);
  Message.init(operation:content:complete:)(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 368), 1);
  v15 = (uint64_t (*)(_QWORD))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc(v12[1]);
  *(_QWORD *)(v0 + 592) = v13;
  *v13 = v0;
  v13[1] = sub_100062008;
  return v15(*(_QWORD *)(v0 + 240));
}

uint64_t sub_100062008()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 592);
  *(_QWORD *)(*(_QWORD *)v1 + 600) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[29] + 8))(v2[30], v2[28]);
  if (v0)
    v4 = sub_1000621DC;
  else
    v4 = sub_100062078;
  return swift_task_switch(v4, v2[60], v2[61]);
}

uint64_t sub_100062078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 584);
  v2 = *(_QWORD *)(v0 + 496);
  swift_release(*(_QWORD *)(v0 + 464));
  swift_release(v2);
  swift_errorRelease(v1);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 408) + 8))(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 400));
  v3 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 376);
  v9 = *(_QWORD *)(v0 + 360);
  v10 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 312);
  v13 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000621DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 584);
  v2 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 464));
  swift_release(v2);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v0 + 440);
  v7 = *(_QWORD *)(v0 + 416);
  v9 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 392);
  v11 = *(_QWORD *)(v0 + 368);
  v10 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 360);
  v13 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 312);
  v16 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 256);
  v19 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 240);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 184);
  v24 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 496);
  swift_release(*(_QWORD *)(v0 + 464));
  swift_release(v1);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 408) + 8))(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 400));
  v2 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 376);
  v8 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 264);
  v14 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 216);
  v18 = *(_QWORD *)(v0 + 208);
  v19 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000624A8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(_QWORD);

  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(void (**)(void))(v0 + 560);
  *(_QWORD *)(v0 + 584) = v1;
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 176);
  **(_DWORD **)(v0 + 208) = *(_DWORD *)(v0 + 620);
  v2();
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0xE000000000000000;
  v7._countAndFlagsBits = 0x203A726F727245;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  *(_QWORD *)(v0 + 120) = v1;
  v8 = sub_10000629C(&qword_1000B2B48);
  v9 = _print_unlocked<A, B>(_:_:)(v0 + 120, v0 + 80, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v10 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 104) = v10;
  v11 = Message.content.getter(v9);
  MessageBody.version.getter(v11);
  v3(v4, v5);
  MessageBody.init<A>(serializable:version:)(v0 + 96, v6, &type metadata for String, &protocol witness table for String);
  v12 = *(int **)(v0 + 128);
  Message.init(operation:content:complete:)(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 368), 1);
  v15 = (uint64_t (*)(_QWORD))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc(v12[1]);
  *(_QWORD *)(v0 + 592) = v13;
  *v13 = v0;
  v13[1] = sub_100062008;
  return v15(*(_QWORD *)(v0 + 240));
}

uint64_t sub_100062794()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[3] = v0;
  v2 = type metadata accessor for CommunicationActor(0);
  v1[4] = v2;
  v1[5] = static CommunicationActor.shared.getter(v2);
  v3 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v1[6] = v3;
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  v1[7] = v4;
  v1[8] = v5;
  return swift_task_switch(sub_10006282C, v4, v5);
}

uint64_t sub_10006282C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v0 + 120) = v2;
  v3 = type metadata accessor for AlbumID(0);
  swift_retain(v1);
  v4 = sub_10000629C(&qword_1000B3130);
  v5 = sub_100009174(&qword_1000B29F0, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
  v6 = sub_100006454(&qword_1000B3150, &qword_1000B3130, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
  PhotosXPC.registerTrackFace<A, B>(type:callback:)(v2, &unk_1000B3FF0, v1, v3, v4, v5, v6);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerUntrackFace(type:callback:)(v2, &unk_1000B4000, v1);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerFetchFaceList<A>(type:callback:)(v2, &unk_1000B4010, v1, v3, v5);
  swift_release(v1);
  swift_retain(v1);
  v7 = sub_10000629C(&qword_1000B31B8);
  *(_QWORD *)(v0 + 16) = type metadata accessor for StoredPhoto(255);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  PhotosXPC.registerFetchFace<A>(type:callback:)(v2, &unk_1000B4020, v1, v7, OpaqueTypeConformance2);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerFetchFaceByDay(type:callback:)(v2, &unk_1000B4030, v1);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerProvideAssetList<A>(type:callback:)(v2, &unk_1000B4040, v1, v3, v5);
  swift_release(v1);
  v9 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v0 + 72) = v9;
  swift_retain(v1);
  return swift_task_switch(sub_100062A28, v9, 0);
}

uint64_t sub_100062A28()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  sub_10008E888(2, (uint64_t)&unk_1000B4050, v1);
  swift_release(v1);
  return swift_task_switch(sub_100062A7C, v0[7], v0[8]);
}

uint64_t sub_100062A7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_retain(*(_QWORD *)(v0 + 24));
  return swift_task_switch(sub_100062ABC, v1, 0);
}

uint64_t sub_100062ABC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  sub_10008E888(0, (uint64_t)&unk_1000B4060, v1);
  swift_release(v1);
  return swift_task_switch(sub_100062B10, v0[7], v0[8]);
}

uint64_t sub_100062B10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[6];
  v2 = v0[3];
  v3 = v0[4];
  v0[10] = *(_QWORD *)(v2 + 96);
  v4 = swift_retain(v2);
  v0[11] = static CommunicationActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, v1);
  return swift_task_switch(sub_100062B84, v5, v6);
}

uint64_t sub_100062B84()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 88));
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_allocObject(&unk_1000AF088, 32, 7);
  *(_QWORD *)(v3 + 16) = &unk_1000B4070;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain(v2);
  sub_10003EE20(0x50802u >> (8 * v1), (uint64_t)&unk_1000B4080, v3);
  swift_release(v3);
  swift_release(v2);
  return swift_task_switch(sub_100062C30, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100062C30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[6];
  v2 = v0[4];
  v3 = swift_retain(v0[3]);
  v0[12] = static CommunicationActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_100062C9C, v4, v5);
}

uint64_t sub_100062C9C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 96));
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_allocObject(&unk_1000AF0B0, 32, 7);
  *(_QWORD *)(v3 + 16) = &unk_1000B4090;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain(v2);
  sub_10003EE34(0x60903u >> (8 * v1), (uint64_t)&unk_1000B4098, v3, (uint64_t)&unk_1000AEEA8, (uint64_t)sub_10008C440);
  swift_release(v3);
  swift_release(v2);
  return swift_task_switch(sub_100062D5C, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100062D5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[6];
  v2 = v0[4];
  v3 = swift_retain(v0[3]);
  v0[13] = static CommunicationActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_100062DC8, v4, v5);
}

uint64_t sub_100062DC8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 104));
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_allocObject(&unk_1000AF0D8, 32, 7);
  *(_QWORD *)(v3 + 16) = &unk_1000B40A8;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain(v2);
  sub_10003EE0C(0x70A04u >> (8 * v1), (uint64_t)&unk_1000B40B8, v3);
  swift_release(v3);
  swift_release(v2);
  return swift_task_switch(sub_100062E78, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100062E78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[6];
  v2 = v0[4];
  v3 = swift_retain(v0[3]);
  v0[14] = static CommunicationActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_100062EE4, v4, v5);
}

uint64_t sub_100062EE4()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 112));
  v2 = *(_BYTE *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = swift_allocObject(&unk_1000AF100, 40, 7);
  *(_BYTE *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = &unk_1000B40C8;
  *(_QWORD *)(v4 + 32) = v3;
  swift_retain(v3);
  sub_1000606AC(0x10200u >> (8 * v1), (uint64_t)&unk_1000B40D0, v4);
  swift_release(v4);
  swift_release(v3);
  return swift_task_switch(sub_100062FA4, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100062FA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062FD4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[3] = v0;
  v2 = type metadata accessor for CommunicationActor(0);
  v1[4] = v2;
  v1[5] = static CommunicationActor.shared.getter(v2);
  v3 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v1[6] = v3;
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  v1[7] = v4;
  v1[8] = v5;
  return swift_task_switch(sub_10006306C, v4, v5);
}

uint64_t sub_10006306C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v0 + 120) = v2;
  v3 = type metadata accessor for ShuffleID(0);
  swift_retain(v1);
  v4 = sub_10000629C(&qword_1000B3130);
  v5 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  v6 = sub_100006454(&qword_1000B3150, &qword_1000B3130, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
  PhotosXPC.registerTrackFace<A, B>(type:callback:)(v2, &unk_1000B3E88, v1, v3, v4, v5, v6);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerUntrackFace(type:callback:)(v2, &unk_1000B3E98, v1);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerFetchFaceList<A>(type:callback:)(v2, &unk_1000B3EA8, v1, v3, v5);
  swift_release(v1);
  swift_retain(v1);
  v7 = sub_10000629C(&qword_1000B31B8);
  *(_QWORD *)(v0 + 16) = type metadata accessor for StoredPhoto(255);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  PhotosXPC.registerFetchFace<A>(type:callback:)(v2, &unk_1000B3EB8, v1, v7, OpaqueTypeConformance2);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerFetchFaceByDay(type:callback:)(v2, &unk_1000B3EC8, v1);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerProvideAssetList<A>(type:callback:)(v2, &unk_1000B3ED8, v1, v3, v5);
  swift_release(v1);
  v9 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v0 + 72) = v9;
  swift_retain(v1);
  return swift_task_switch(sub_100063268, v9, 0);
}

uint64_t sub_100063268()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  sub_10008E888(2, (uint64_t)&unk_1000B3EE8, v1);
  swift_release(v1);
  return swift_task_switch(sub_1000632BC, v0[7], v0[8]);
}

uint64_t sub_1000632BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_retain(*(_QWORD *)(v0 + 24));
  return swift_task_switch(sub_1000632FC, v1, 0);
}

uint64_t sub_1000632FC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  sub_10008E888(0, (uint64_t)&unk_1000B3EF8, v1);
  swift_release(v1);
  return swift_task_switch(sub_100063350, v0[7], v0[8]);
}

uint64_t sub_100063350()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[6];
  v2 = v0[3];
  v3 = v0[4];
  v0[10] = *(_QWORD *)(v2 + 96);
  v4 = swift_retain(v2);
  v0[11] = static CommunicationActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, v1);
  return swift_task_switch(sub_1000633C4, v5, v6);
}

uint64_t sub_1000633C4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 88));
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_allocObject(&unk_1000AEF70, 32, 7);
  *(_QWORD *)(v3 + 16) = &unk_1000B3F08;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain(v2);
  sub_10003EDF8(0x50802u >> (8 * v1), (uint64_t)&unk_1000B3F10, v3);
  swift_release(v3);
  swift_release(v2);
  return swift_task_switch(sub_100063470, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100063470()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[6];
  v2 = v0[4];
  v3 = swift_retain(v0[3]);
  v0[12] = static CommunicationActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_1000634DC, v4, v5);
}

uint64_t sub_1000634DC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 96));
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_allocObject(&unk_1000AEF98, 32, 7);
  *(_QWORD *)(v3 + 16) = &unk_1000B3F20;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain(v2);
  sub_10003EE34(0x60903u >> (8 * v1), (uint64_t)&unk_1000B3F28, v3, (uint64_t)&unk_1000AEEA8, (uint64_t)sub_10008C440);
  swift_release(v3);
  swift_release(v2);
  return swift_task_switch(sub_10006359C, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_10006359C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[6];
  v2 = v0[4];
  v3 = swift_retain(v0[3]);
  v0[13] = static CommunicationActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_100063608, v4, v5);
}

uint64_t sub_100063608()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 104));
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_allocObject(&unk_1000AEFC0, 32, 7);
  *(_QWORD *)(v3 + 16) = &unk_1000B3F38;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain(v2);
  sub_10003EDE4(0x70A04u >> (8 * v1), (uint64_t)&unk_1000B3F40, v3);
  swift_release(v3);
  swift_release(v2);
  return swift_task_switch(sub_1000636B8, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1000636B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[6];
  v2 = v0[4];
  v3 = swift_retain(v0[3]);
  v0[14] = static CommunicationActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_100063724, v4, v5);
}

uint64_t sub_100063724()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 112));
  v2 = *(_BYTE *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = swift_allocObject(&unk_1000AEFE8, 40, 7);
  *(_BYTE *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = &unk_1000B3F50;
  *(_QWORD *)(v4 + 32) = v3;
  swift_retain(v3);
  sub_1000606AC(0x10200u >> (8 * v1), (uint64_t)&unk_1000B3F58, v4);
  swift_release(v4);
  swift_release(v3);
  return swift_task_switch(sub_10008DD64, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1000637E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[3] = v0;
  v2 = type metadata accessor for CommunicationActor(0);
  v1[4] = v2;
  v1[5] = static CommunicationActor.shared.getter(v2);
  v3 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v1[6] = v3;
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  v1[7] = v4;
  v1[8] = v5;
  return swift_task_switch(sub_10006387C, v4, v5);
}

uint64_t sub_10006387C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v0 + 120) = v2;
  v3 = type metadata accessor for ShuffleID(0);
  swift_retain(v1);
  v4 = sub_10000629C(&qword_1000B3130);
  v5 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  v6 = sub_100006454(&qword_1000B3150, &qword_1000B3130, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
  PhotosXPC.registerTrackFace<A, B>(type:callback:)(v2, &unk_1000B3C78, v1, v3, v4, v5, v6);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerUntrackFace(type:callback:)(v2, &unk_1000B3C88, v1);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerFetchFaceList<A>(type:callback:)(v2, &unk_1000B3C98, v1, v3, v5);
  swift_release(v1);
  swift_retain(v1);
  v7 = sub_10000629C(&qword_1000B31B8);
  *(_QWORD *)(v0 + 16) = type metadata accessor for StoredPhoto(255);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  PhotosXPC.registerFetchFace<A>(type:callback:)(v2, &unk_1000B3CA8, v1, v7, OpaqueTypeConformance2);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerFetchFaceByDay(type:callback:)(v2, &unk_1000B3CB8, v1);
  swift_release(v1);
  swift_retain(v1);
  PhotosXPC.registerProvideAssetList<A>(type:callback:)(v2, &unk_1000B3CC8, v1, v3, v5);
  swift_release(v1);
  v9 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v0 + 72) = v9;
  swift_retain(v1);
  return swift_task_switch(sub_100063A78, v9, 0);
}

uint64_t sub_100063A78()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  sub_10008E888(2, (uint64_t)&unk_1000B3CD8, v1);
  swift_release(v1);
  return swift_task_switch(sub_100063ACC, v0[7], v0[8]);
}

uint64_t sub_100063ACC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_retain(*(_QWORD *)(v0 + 24));
  return swift_task_switch(sub_100063B0C, v1, 0);
}

uint64_t sub_100063B0C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  sub_10008E888(0, (uint64_t)&unk_1000B3CE8, v1);
  swift_release(v1);
  return swift_task_switch(sub_100063B60, v0[7], v0[8]);
}

uint64_t sub_100063B60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[6];
  v2 = v0[3];
  v3 = v0[4];
  v0[10] = *(_QWORD *)(v2 + 96);
  v4 = swift_retain(v2);
  v0[11] = static CommunicationActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, v1);
  return swift_task_switch(sub_100063BD4, v5, v6);
}

uint64_t sub_100063BD4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 88));
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_allocObject(&unk_1000AEDE0, 32, 7);
  *(_QWORD *)(v3 + 16) = &unk_1000B3CF8;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain(v2);
  sub_10003EDF8(0x50802u >> (8 * v1), (uint64_t)&unk_1000B3D08, v3);
  swift_release(v3);
  swift_release(v2);
  return swift_task_switch(sub_100063C80, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100063C80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[6];
  v2 = v0[4];
  v3 = swift_retain(v0[3]);
  v0[12] = static CommunicationActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_100063CEC, v4, v5);
}

uint64_t sub_100063CEC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 96));
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_allocObject(&unk_1000AEE08, 32, 7);
  *(_QWORD *)(v3 + 16) = &unk_1000B3D18;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain(v2);
  sub_10003EE34(0x60903u >> (8 * v1), (uint64_t)&unk_1000B3D20, v3, (uint64_t)&unk_1000AEEA8, (uint64_t)sub_10008C440);
  swift_release(v3);
  swift_release(v2);
  return swift_task_switch(sub_100063DAC, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100063DAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[6];
  v2 = v0[4];
  v3 = swift_retain(v0[3]);
  v0[13] = static CommunicationActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_100063E18, v4, v5);
}

uint64_t sub_100063E18()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 104));
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_allocObject(&unk_1000AEE30, 32, 7);
  *(_QWORD *)(v3 + 16) = &unk_1000B3D30;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain(v2);
  sub_10003EDE4(0x70A04u >> (8 * v1), (uint64_t)&unk_1000B3D40, v3);
  swift_release(v3);
  swift_release(v2);
  return swift_task_switch(sub_100063EC8, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100063EC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[6];
  v2 = v0[4];
  v3 = swift_retain(v0[3]);
  v0[14] = static CommunicationActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v1);
  return swift_task_switch(sub_100063F34, v4, v5);
}

uint64_t sub_100063F34()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 112));
  v2 = *(_BYTE *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = swift_allocObject(&unk_1000AEE58, 40, 7);
  *(_BYTE *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = &unk_1000B3D50;
  *(_QWORD *)(v4 + 32) = v3;
  swift_retain(v3);
  sub_1000606AC(0x10200u >> (8 * v1), (uint64_t)&unk_1000B3D58, v4);
  swift_release(v4);
  swift_release(v3);
  return swift_task_switch(sub_10008DD64, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100063FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000B3E50 + dword_1000B3E50);
  v5 = (_QWORD *)swift_task_alloc(unk_1000B3E54);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003E42C;
  return v7(a1, a2);
}

uint64_t sub_10006406C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000B3FB8 + dword_1000B3FB8);
  v5 = (_QWORD *)swift_task_alloc(unk_1000B3FBC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003E42C;
  return v7(a1, a2);
}

uint64_t sub_1000640E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000B4190 + dword_1000B4190);
  v5 = (_QWORD *)swift_task_alloc(unk_1000B4194);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003E42C;
  return v7(a1, a2);
}

uint64_t sub_10006415C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  v4 = type metadata accessor for ShuffleID(0);
  v3[22] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[23] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[24] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[25] = swift_task_alloc(v7);
  v3[26] = swift_task_alloc(v7);
  v8 = type metadata accessor for Logger(0);
  v3[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[28] = v9;
  v3[29] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CommunicationActor(0);
  v3[30] = static CommunicationActor.shared.getter(v10);
  v11 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v10, v11);
  v3[31] = v12;
  v3[32] = v13;
  return swift_task_switch(sub_100064254, v12, v13);
}

uint64_t sub_100064254(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1[26];
  v3 = v1[22];
  v4 = v1[23];
  v6 = v1[20];
  v5 = v1[21];
  static Log.photos.getter(a1);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v1[33] = v7;
  v7(v2, v6, v3);
  v8 = swift_retain_n(v5, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = v1[26];
    v33 = v1[27];
    v34 = v1[29];
    v12 = v1[22];
    v30 = v1[23];
    v31 = v1[21];
    v32 = v1[28];
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v35 = v14;
    *(_DWORD *)v13 = 136315394;
    v15 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v18 = v17;
    v1[17] = sub_100021438(v16, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 17, v1 + 18, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v11, v12);
    *(_WORD *)(v13 + 12) = 2080;
    v19 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v31 + 16));
    v21 = v20;
    v1[18] = sub_100021438(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 18, v1 + 19, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v21);
    swift_release_n(v31, 2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Tracking %s for type %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  }
  else
  {
    v23 = v1[28];
    v22 = v1[29];
    v24 = v1[27];
    v25 = v1[21];
    (*(void (**)(_QWORD, _QWORD))(v1[23] + 8))(v1[26], v1[22]);
    swift_release_n(v25, 2);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  }
  v26 = type metadata accessor for GalleryDatabase(0);
  v27 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
  v28 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
  v1[34] = v28;
  *v28 = v1;
  v28[1] = sub_100064514;
  return dispatch thunk of PhotosFaceIDDatabase.insert(id:)(v1[20], v26, v27);
}

uint64_t sub_100064514()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 272);
  *(_QWORD *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DD60;
  else
    v4 = sub_100064574;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 248), *(_QWORD *)(v2 + 256));
}

uint64_t sub_100064574()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((static Platform.current.getter() & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 192);
    v4 = *(_QWORD *)(v0 + 200);
    v6 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 184);
    v8 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 264))(v4, *(_QWORD *)(v0 + 160), v6);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v10 = (v9 + 24) & ~v9;
    v11 = swift_allocObject(&unk_1000AEEF8, v10 + v5, v9 | 7);
    *(_QWORD *)(v0 + 304) = v11;
    *(_QWORD *)(v11 + 16) = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v11 + v10, v4, v6);
    v12 = dword_1000B3194;
    swift_retain(v8);
    v13 = (_QWORD *)swift_task_alloc(v12);
    *(_QWORD *)(v0 + 312) = v13;
    *v13 = v0;
    v13[1] = sub_100064748;
    return sub_10002CC20(v0 + 56, *(_QWORD *)(v0 + 160), (uint64_t)&unk_1000B3E60, v11);
  }
  else
  {
    *(_QWORD *)(v0 + 120) = sub_10000629C(&qword_1000B3130);
    *(_QWORD *)(v0 + 128) = sub_100006454(&qword_1000B3150, &qword_1000B3130, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
    v1 = sub_10003D62C((_QWORD *)(v0 + 96));
    v2 = (_QWORD *)swift_task_alloc(dword_1000B3144);
    *(_QWORD *)(v0 + 288) = v2;
    *v2 = v0;
    v2[1] = sub_1000646E8;
    return sub_10002BCDC((uint64_t)v1, *(_QWORD *)(v0 + 160), 1);
  }
}

uint64_t sub_1000646E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 288);
  *(_QWORD *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DD98;
  else
    v4 = sub_10008DD70;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 248), *(_QWORD *)(v2 + 256));
}

uint64_t sub_100064748()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[31];
    v5 = v2[32];
    v6 = sub_10008DDF8;
  }
  else
  {
    swift_release(v2[38]);
    v4 = v2[31];
    v5 = v2[32];
    v6 = sub_10008DD74;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000647B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  v4 = type metadata accessor for ShuffleID(0);
  v3[22] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[23] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[24] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[25] = swift_task_alloc(v7);
  v3[26] = swift_task_alloc(v7);
  v8 = type metadata accessor for Logger(0);
  v3[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[28] = v9;
  v3[29] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CommunicationActor(0);
  v3[30] = static CommunicationActor.shared.getter(v10);
  v11 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v10, v11);
  v3[31] = v12;
  v3[32] = v13;
  return swift_task_switch(sub_1000648AC, v12, v13);
}

uint64_t sub_1000648AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1[26];
  v3 = v1[22];
  v4 = v1[23];
  v6 = v1[20];
  v5 = v1[21];
  static Log.photos.getter(a1);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v1[33] = v7;
  v7(v2, v6, v3);
  v8 = swift_retain_n(v5, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = v1[26];
    v33 = v1[27];
    v34 = v1[29];
    v12 = v1[22];
    v30 = v1[23];
    v31 = v1[21];
    v32 = v1[28];
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v35 = v14;
    *(_DWORD *)v13 = 136315394;
    v15 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v18 = v17;
    v1[17] = sub_100021438(v16, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 17, v1 + 18, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v11, v12);
    *(_WORD *)(v13 + 12) = 2080;
    v19 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v31 + 16));
    v21 = v20;
    v1[18] = sub_100021438(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 18, v1 + 19, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v21);
    swift_release_n(v31, 2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Tracking %s for type %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  }
  else
  {
    v23 = v1[28];
    v22 = v1[29];
    v24 = v1[27];
    v25 = v1[21];
    (*(void (**)(_QWORD, _QWORD))(v1[23] + 8))(v1[26], v1[22]);
    swift_release_n(v25, 2);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  }
  v26 = type metadata accessor for ShuffleDatabase(0);
  v27 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
  v28 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
  v1[34] = v28;
  *v28 = v1;
  v28[1] = sub_100064B6C;
  return dispatch thunk of PhotosFaceIDDatabase.insert(id:)(v1[20], v26, v27);
}

uint64_t sub_100064B6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 272);
  *(_QWORD *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DD60;
  else
    v4 = sub_100064BCC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 248), *(_QWORD *)(v2 + 256));
}

uint64_t sub_100064BCC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((static Platform.current.getter() & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 192);
    v4 = *(_QWORD *)(v0 + 200);
    v6 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 184);
    v8 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 264))(v4, *(_QWORD *)(v0 + 160), v6);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v10 = (v9 + 24) & ~v9;
    v11 = swift_allocObject(&unk_1000AF010, v10 + v5, v9 | 7);
    *(_QWORD *)(v0 + 304) = v11;
    *(_QWORD *)(v11 + 16) = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v11 + v10, v4, v6);
    v12 = dword_1000B325C;
    swift_retain(v8);
    v13 = (_QWORD *)swift_task_alloc(v12);
    *(_QWORD *)(v0 + 312) = v13;
    *v13 = v0;
    v13[1] = sub_100064748;
    return sub_10002D58C(v0 + 56, *(_QWORD *)(v0 + 160), (uint64_t)&unk_1000B3FC8, v11);
  }
  else
  {
    *(_QWORD *)(v0 + 120) = sub_10000629C(&qword_1000B3130);
    *(_QWORD *)(v0 + 128) = sub_100006454(&qword_1000B3150, &qword_1000B3130, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
    v1 = sub_10003D62C((_QWORD *)(v0 + 96));
    v2 = (_QWORD *)swift_task_alloc(dword_1000B3244);
    *(_QWORD *)(v0 + 288) = v2;
    *v2 = v0;
    v2[1] = sub_1000646E8;
    return sub_10002C1C0((uint64_t)v1, *(_QWORD *)(v0 + 160), 1);
  }
}

uint64_t sub_100064D40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  v4 = type metadata accessor for AlbumID(0);
  v3[22] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[23] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[24] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[25] = swift_task_alloc(v7);
  v3[26] = swift_task_alloc(v7);
  v8 = type metadata accessor for Logger(0);
  v3[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[28] = v9;
  v3[29] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CommunicationActor(0);
  v3[30] = static CommunicationActor.shared.getter(v10);
  v11 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v10, v11);
  v3[31] = v12;
  v3[32] = v13;
  return swift_task_switch(sub_100064E38, v12, v13);
}

uint64_t sub_100064E38(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1[26];
  v3 = v1[22];
  v4 = v1[23];
  v6 = v1[20];
  v5 = v1[21];
  static Log.photos.getter(a1);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v1[33] = v7;
  v7(v2, v6, v3);
  v8 = swift_retain_n(v5, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = v1[26];
    v33 = v1[27];
    v34 = v1[29];
    v12 = v1[22];
    v30 = v1[23];
    v31 = v1[21];
    v32 = v1[28];
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v35 = v14;
    *(_DWORD *)v13 = 136315394;
    v15 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v18 = v17;
    v1[17] = sub_100021438(v16, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 17, v1 + 18, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v11, v12);
    *(_WORD *)(v13 + 12) = 2080;
    v19 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v31 + 16));
    v21 = v20;
    v1[18] = sub_100021438(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 18, v1 + 19, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v21);
    swift_release_n(v31, 2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Tracking %s for type %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  }
  else
  {
    v23 = v1[28];
    v22 = v1[29];
    v24 = v1[27];
    v25 = v1[21];
    (*(void (**)(_QWORD, _QWORD))(v1[23] + 8))(v1[26], v1[22]);
    swift_release_n(v25, 2);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  }
  v26 = type metadata accessor for AlbumDatabase(0);
  v27 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
  v28 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
  v1[34] = v28;
  *v28 = v1;
  v28[1] = sub_1000650F8;
  return dispatch thunk of PhotosFaceIDDatabase.insert(id:)(v1[20], v26, v27);
}

uint64_t sub_1000650F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 272);
  *(_QWORD *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000652CC;
  else
    v4 = sub_100065158;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 248), *(_QWORD *)(v2 + 256));
}

uint64_t sub_100065158()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((static Platform.current.getter() & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 192);
    v4 = *(_QWORD *)(v0 + 200);
    v6 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 184);
    v8 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 264))(v4, *(_QWORD *)(v0 + 160), v6);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v10 = (v9 + 24) & ~v9;
    v11 = swift_allocObject(&unk_1000AF128, v10 + v5, v9 | 7);
    *(_QWORD *)(v0 + 304) = v11;
    *(_QWORD *)(v11 + 16) = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v11 + v10, v4, v6);
    v12 = dword_1000B32C4;
    swift_retain(v8);
    v13 = (_QWORD *)swift_task_alloc(v12);
    *(_QWORD *)(v0 + 312) = v13;
    *v13 = v0;
    v13[1] = sub_100065384;
    return sub_10002DEF8(v0 + 56, *(_QWORD *)(v0 + 160), (uint64_t)&unk_1000B41A0, v11);
  }
  else
  {
    *(_QWORD *)(v0 + 120) = sub_10000629C(&qword_1000B3130);
    *(_QWORD *)(v0 + 128) = sub_100006454(&qword_1000B3150, &qword_1000B3130, (uint64_t)&protocol conformance descriptor for WrapperSequence<A, B>);
    v1 = sub_10003D62C((_QWORD *)(v0 + 96));
    v2 = (_QWORD *)swift_task_alloc(dword_1000B32AC);
    *(_QWORD *)(v0 + 288) = v2;
    *v2 = v0;
    v2[1] = sub_100065324;
    return sub_10002C638((uint64_t)v1, *(_QWORD *)(v0 + 160), 1);
  }
}

uint64_t sub_1000652CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 240));
  v2 = *(_QWORD *)(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065324()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 288);
  *(_QWORD *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000654A4;
  else
    v4 = sub_1000653F0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 248), *(_QWORD *)(v2 + 256));
}

uint64_t sub_100065384()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[31];
    v5 = v2[32];
    v6 = sub_1000655BC;
  }
  else
  {
    swift_release(v2[38]);
    v4 = v2[31];
    v5 = v2[32];
    v6 = sub_100065508;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000653F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 240));
  sub_10008C588((__int128 *)(v0 + 96), v0 + 16);
  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  sub_10003D4FC((_QWORD *)(v0 + 16), v4);
  AsyncSequence.generic.getter(v4, v5);
  sub_100022238((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000654A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 240));
  sub_10004EC64((_QWORD *)(v0 + 96));
  v2 = *(_QWORD *)(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 240));
  sub_10008C588((__int128 *)(v0 + 56), v0 + 16);
  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  sub_10003D4FC((_QWORD *)(v0 + 16), v4);
  AsyncSequence.generic.getter(v4, v5);
  sub_100022238((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000655BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 304);
  swift_release(*(_QWORD *)(v0 + 240));
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065620(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1000B3E48 + dword_1000B3E48);
  v3 = (_QWORD *)swift_task_alloc(unk_1000B3E4C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003E42C;
  return v5(a1);
}

uint64_t sub_100065688(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1000B3FB0 + dword_1000B3FB0);
  v3 = (_QWORD *)swift_task_alloc(unk_1000B3FB4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003E42C;
  return v5(a1);
}

uint64_t sub_1000656F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1000B4188 + dword_1000B4188);
  v3 = (_QWORD *)swift_task_alloc(unk_1000B418C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003E42C;
  return v5(a1);
}

uint64_t sub_100065758(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommunicationActor(0);
  v2[13] = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  v2[14] = v9;
  v2[15] = v10;
  return swift_task_switch(sub_100065838, v9, v10);
}

uint64_t sub_100065838(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  os_log_type_t type;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1[5];
  v4 = v1[8];
  v3 = v1[9];
  v6 = v1[6];
  v5 = v1[7];
  static Log.photos.getter(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  v7 = swift_retain(v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v37 = v1[11];
    v38 = v1[10];
    v39 = v1[12];
    v34 = v1[9];
    v35 = v1[8];
    v10 = v1[6];
    v32 = v1[7];
    v11 = swift_slowAlloc(32, -1);
    v36 = swift_slowAlloc(96, -1);
    v40 = v36;
    *(_DWORD *)v11 = 136315650;
    v1[2] = sub_100021438(0xD000000000000010, 0x8000000100095360, &v40);
    type = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2080;
    v12 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v10 + 16));
    v14 = v13;
    v1[3] = sub_100021438(v12, v13, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v14);
    swift_release(v10);
    *(_WORD *)(v11 + 22) = 2080;
    v15 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v32, v15);
    v18 = v17;
    v1[4] = sub_100021438(v16, v17, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v32);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "%s type = %s, id: %s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v36, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  }
  else
  {
    v21 = v1[11];
    v20 = v1[12];
    v23 = v1[9];
    v22 = v1[10];
    v24 = v1[7];
    v25 = v1[8];
    swift_release(v1[6]);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);

    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  if ((static Platform.current.getter(v19) & 1) != 0)
  {
    v30 = *(_BYTE *)(v1[6] + 16);
    v31 = (_QWORD *)swift_task_alloc(dword_1000B1F84);
    v1[16] = v31;
    *v31 = v1;
    v31[1] = sub_100065BB4;
    return sub_100005B78(v30, v1[5]);
  }
  else
  {
    v26 = type metadata accessor for GalleryDatabase(0);
    v27 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
    v28 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.delete(id:)[1]);
    v1[18] = v28;
    *v28 = v1;
    v28[1] = sub_100065C8C;
    return dispatch thunk of PhotosFaceIDDatabase.delete(id:)(v1[5], v26, v27);
  }
}

uint64_t sub_100065BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v3 = *(_QWORD **)v1;
  v3[17] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10008DE10, v3[14], v3[15]);
  v5 = type metadata accessor for GalleryDatabase(0);
  v6 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.delete(id:)[1]);
  v3[18] = v7;
  *v7 = v3;
  v7[1] = sub_100065C8C;
  return dispatch thunk of PhotosFaceIDDatabase.delete(id:)(v3[5], v5, v6);
}

uint64_t sub_100065C8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DE08;
  else
    v4 = sub_100065CEC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120));
}

uint64_t sub_100065CEC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000B3764);
  *(_QWORD *)(v0 + 160) = v1;
  *v1 = v0;
  v1[1] = sub_100065D38;
  return sub_1000501C0();
}

uint64_t sub_100065D38()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DE0C;
  else
    v4 = sub_10008DE20;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120));
}

uint64_t sub_100065D98(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommunicationActor(0);
  v2[13] = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  v2[14] = v9;
  v2[15] = v10;
  return swift_task_switch(sub_100065E78, v9, v10);
}

uint64_t sub_100065E78(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  os_log_type_t type;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1[5];
  v4 = v1[8];
  v3 = v1[9];
  v6 = v1[6];
  v5 = v1[7];
  static Log.photos.getter(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  v7 = swift_retain(v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v37 = v1[11];
    v38 = v1[10];
    v39 = v1[12];
    v34 = v1[9];
    v35 = v1[8];
    v10 = v1[6];
    v32 = v1[7];
    v11 = swift_slowAlloc(32, -1);
    v36 = swift_slowAlloc(96, -1);
    v40 = v36;
    *(_DWORD *)v11 = 136315650;
    v1[2] = sub_100021438(0xD000000000000010, 0x8000000100095360, &v40);
    type = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2080;
    v12 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v10 + 16));
    v14 = v13;
    v1[3] = sub_100021438(v12, v13, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v14);
    swift_release(v10);
    *(_WORD *)(v11 + 22) = 2080;
    v15 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v32, v15);
    v18 = v17;
    v1[4] = sub_100021438(v16, v17, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v32);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "%s type = %s, id: %s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v36, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  }
  else
  {
    v21 = v1[11];
    v20 = v1[12];
    v23 = v1[9];
    v22 = v1[10];
    v24 = v1[7];
    v25 = v1[8];
    swift_release(v1[6]);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);

    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  if ((static Platform.current.getter(v19) & 1) != 0)
  {
    v30 = *(_BYTE *)(v1[6] + 16);
    v31 = (_QWORD *)swift_task_alloc(dword_1000B1F84);
    v1[16] = v31;
    *v31 = v1;
    v31[1] = sub_1000661F4;
    return sub_100005B78(v30, v1[5]);
  }
  else
  {
    v26 = type metadata accessor for ShuffleDatabase(0);
    v27 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
    v28 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.delete(id:)[1]);
    v1[18] = v28;
    *v28 = v1;
    v28[1] = sub_100065C8C;
    return dispatch thunk of PhotosFaceIDDatabase.delete(id:)(v1[5], v26, v27);
  }
}

uint64_t sub_1000661F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v3 = *(_QWORD **)v1;
  v3[17] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10008DE10, v3[14], v3[15]);
  v5 = type metadata accessor for ShuffleDatabase(0);
  v6 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.delete(id:)[1]);
  v3[18] = v7;
  *v7 = v3;
  v7[1] = sub_100065C8C;
  return dispatch thunk of PhotosFaceIDDatabase.delete(id:)(v3[5], v5, v6);
}

uint64_t sub_1000662CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommunicationActor(0);
  v2[13] = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  v2[14] = v9;
  v2[15] = v10;
  return swift_task_switch(sub_1000663AC, v9, v10);
}

uint64_t sub_1000663AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  os_log_type_t type;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1[5];
  v4 = v1[8];
  v3 = v1[9];
  v6 = v1[6];
  v5 = v1[7];
  static Log.photos.getter(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  v7 = swift_retain(v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v37 = v1[11];
    v38 = v1[10];
    v39 = v1[12];
    v34 = v1[9];
    v35 = v1[8];
    v10 = v1[6];
    v32 = v1[7];
    v11 = swift_slowAlloc(32, -1);
    v36 = swift_slowAlloc(96, -1);
    v40 = v36;
    *(_DWORD *)v11 = 136315650;
    v1[2] = sub_100021438(0xD000000000000010, 0x8000000100095360, &v40);
    type = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2080;
    v12 = PhotosFaceType.description.getter(*(unsigned __int8 *)(v10 + 16));
    v14 = v13;
    v1[3] = sub_100021438(v12, v13, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v14);
    swift_release(v10);
    *(_WORD *)(v11 + 22) = 2080;
    v15 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v32, v15);
    v18 = v17;
    v1[4] = sub_100021438(v16, v17, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v32);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "%s type = %s, id: %s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v36, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  }
  else
  {
    v21 = v1[11];
    v20 = v1[12];
    v23 = v1[9];
    v22 = v1[10];
    v24 = v1[7];
    v25 = v1[8];
    swift_release(v1[6]);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);

    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  if ((static Platform.current.getter(v19) & 1) != 0)
  {
    v30 = *(_BYTE *)(v1[6] + 16);
    v31 = (_QWORD *)swift_task_alloc(dword_1000B1F84);
    v1[16] = v31;
    *v31 = v1;
    v31[1] = sub_100066728;
    return sub_100005B78(v30, v1[5]);
  }
  else
  {
    v26 = type metadata accessor for AlbumDatabase(0);
    v27 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
    v28 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.delete(id:)[1]);
    v1[18] = v28;
    *v28 = v1;
    v28[1] = sub_100066800;
    return dispatch thunk of PhotosFaceIDDatabase.delete(id:)(v1[5], v26, v27);
  }
}

uint64_t sub_100066728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v3 = *(_QWORD **)v1;
  v3[17] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000669F4, v3[14], v3[15]);
  v5 = type metadata accessor for AlbumDatabase(0);
  v6 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.delete(id:)[1]);
  v3[18] = v7;
  *v7 = v3;
  v7[1] = sub_100066800;
  return dispatch thunk of PhotosFaceIDDatabase.delete(id:)(v3[5], v5, v6);
}

uint64_t sub_100066800()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10006690C;
  else
    v4 = sub_100066860;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120));
}

uint64_t sub_100066860()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000B3764);
  *(_QWORD *)(v0 + 160) = v1;
  *v1 = v0;
  v1[1] = sub_1000668AC;
  return sub_1000501C0();
}

uint64_t sub_1000668AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000669A4;
  else
    v4 = sub_10006695C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120));
}

uint64_t sub_10006690C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006695C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000669A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000669F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100066A44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = type metadata accessor for CommunicationActor(0);
  v0[2] = v1;
  v0[3] = static CommunicationActor.shared.getter(v1);
  v2 = type metadata accessor for GalleryDatabase(0);
  v3 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryList()[1]);
  v0[4] = v4;
  *v4 = v0;
  v4[1] = sub_100066AE8;
  return dispatch thunk of PhotosFaceIDDatabase.queryList()(v2, v3);
}

uint64_t sub_100066AE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 16);
  if (v1)
  {
    v7 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, v7);
    v10 = v9;
    v11 = sub_10008DE1C;
  }
  else
  {
    *(_QWORD *)(v4 + 48) = a1;
    v12 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, v12);
    v10 = v13;
    v11 = sub_10008DE18;
  }
  return swift_task_switch(v11, v8, v10);
}

uint64_t sub_100066BCC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = type metadata accessor for CommunicationActor(0);
  v0[2] = v1;
  v0[3] = static CommunicationActor.shared.getter(v1);
  v2 = type metadata accessor for ShuffleDatabase(0);
  v3 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryList()[1]);
  v0[4] = v4;
  *v4 = v0;
  v4[1] = sub_100066AE8;
  return dispatch thunk of PhotosFaceIDDatabase.queryList()(v2, v3);
}

uint64_t sub_100066C70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = type metadata accessor for CommunicationActor(0);
  v0[2] = v1;
  v0[3] = static CommunicationActor.shared.getter(v1);
  v2 = type metadata accessor for AlbumDatabase(0);
  v3 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryList()[1]);
  v0[4] = v4;
  *v4 = v0;
  v4[1] = sub_100066AE8;
  return dispatch thunk of PhotosFaceIDDatabase.queryList()(v2, v3);
}

uint64_t sub_100066D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t FaceRequest;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  FaceRequest = type metadata accessor for FetchFaceRequest(0);
  v3[5] = FaceRequest;
  v5 = *(_QWORD *)(FaceRequest - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommunicationActor(0);
  v3[9] = v7;
  v3[10] = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3[11] = v8;
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  return swift_task_switch(sub_100066DDC, v9, v10);
}

uint64_t sub_100066DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = swift_release(*(_QWORD *)(v0 + 80));
  v8 = static CommunicationActor.shared.getter(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v4);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 24) & ~v9;
  v11 = swift_allocObject(&unk_1000AEF48, v10 + v2, v9 | 7);
  *(_QWORD *)(v11 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v10, v1, v4);
  v12 = type metadata accessor for StoredPhoto(0);
  swift_retain(v5);
  generateElements<A>(isolation:_:)(v8, v14, &unk_1000B31C8, v11, v12);
  swift_release(v11);
  swift_release(v8);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100066EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t FaceRequest;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  FaceRequest = type metadata accessor for FetchFaceRequest(0);
  v3[5] = FaceRequest;
  v5 = *(_QWORD *)(FaceRequest - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommunicationActor(0);
  v3[9] = v7;
  v3[10] = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3[11] = v8;
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  return swift_task_switch(sub_100066FB0, v9, v10);
}

uint64_t sub_100066FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = swift_release(*(_QWORD *)(v0 + 80));
  v8 = static CommunicationActor.shared.getter(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v4);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 24) & ~v9;
  v11 = swift_allocObject(&unk_1000AF060, v10 + v2, v9 | 7);
  *(_QWORD *)(v11 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v10, v1, v4);
  v12 = type metadata accessor for StoredPhoto(0);
  swift_retain(v5);
  generateElements<A>(isolation:_:)(v8, v14, &unk_1000B3290, v11, v12);
  swift_release(v11);
  swift_release(v8);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000670BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t FaceRequest;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  FaceRequest = type metadata accessor for FetchFaceRequest(0);
  v3[5] = FaceRequest;
  v5 = *(_QWORD *)(FaceRequest - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommunicationActor(0);
  v3[9] = v7;
  v3[10] = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3[11] = v8;
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  return swift_task_switch(sub_100067184, v9, v10);
}

uint64_t sub_100067184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = swift_release(*(_QWORD *)(v0 + 80));
  v8 = static CommunicationActor.shared.getter(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v4);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 24) & ~v9;
  v11 = swift_allocObject(&unk_1000AF178, v10 + v2, v9 | 7);
  *(_QWORD *)(v11 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v10, v1, v4);
  v12 = type metadata accessor for StoredPhoto(0);
  swift_retain(v5);
  generateElements<A>(isolation:_:)(v8, v14, &unk_1000B32F8, v11, v12);
  swift_release(v11);
  swift_release(v8);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067290(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = type metadata accessor for CommunicationActor(0);
  v1[2] = v3;
  v1[3] = static CommunicationActor.shared.getter(v3);
  v4 = type metadata accessor for GalleryDatabase(0);
  v5 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)[1]);
  v1[4] = v6;
  *v6 = v1;
  v6[1] = sub_100066AE8;
  return dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)(a1, v4, v5);
}

uint64_t sub_10006733C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = type metadata accessor for CommunicationActor(0);
  v1[2] = v3;
  v1[3] = static CommunicationActor.shared.getter(v3);
  v4 = type metadata accessor for ShuffleDatabase(0);
  v5 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)[1]);
  v1[4] = v6;
  *v6 = v1;
  v6[1] = sub_100066AE8;
  return dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)(a1, v4, v5);
}

uint64_t sub_1000673E8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = type metadata accessor for CommunicationActor(0);
  v1[2] = v3;
  v1[3] = static CommunicationActor.shared.getter(v3);
  v4 = type metadata accessor for AlbumDatabase(0);
  v5 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)[1]);
  v1[4] = v6;
  *v6 = v1;
  v6[1] = sub_100067494;
  return dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)(a1, v4, v5);
}

uint64_t sub_100067494(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 16);
  if (v1)
  {
    v7 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, v7);
    v10 = v9;
    v11 = sub_100042328;
  }
  else
  {
    *(_QWORD *)(v4 + 48) = a1;
    v12 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, v12);
    v10 = v13;
    v11 = sub_100067578;
  }
  return swift_task_switch(v11, v8, v10);
}

uint64_t sub_100067578()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 48));
}

uint64_t sub_1000675B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for CommunicationActor(0);
  v2[4] = static CommunicationActor.shared.getter(v3);
  v4 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, v4);
  return swift_task_switch(sub_10008DD8C, v5, v6);
}

uint64_t sub_100067640(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for CommunicationActor(0);
  v2[4] = static CommunicationActor.shared.getter(v3);
  v4 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, v4);
  return swift_task_switch(sub_1000676D0, v5, v6);
}

uint64_t sub_1000676D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  v2 = sub_10001BA28(v1, (void *)1);
  sub_10000B990(v2);
  v4 = v3;
  swift_bridgeObjectRelease(v2);
  if (v4)
    v5 = v4;
  else
    v5 = _swiftEmptyArrayStorage;
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v5);
}

uint64_t sub_100067768(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for CommunicationActor(0);
  v2[4] = static CommunicationActor.shared.getter(v3);
  v4 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, v4);
  return swift_task_switch(sub_1000677F8, v5, v6);
}

uint64_t sub_1000677F8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  v2 = sub_10001A964(v1, 1);
  sub_10000B990((uint64_t)v2);
  v4 = v3;
  swift_bridgeObjectRelease(v2);
  if (v4)
    v5 = v4;
  else
    v5 = _swiftEmptyArrayStorage;
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v5);
}

uint64_t sub_100067890()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1000B3128 + dword_1000B3128);
  v1 = (_QWORD *)swift_task_alloc(unk_1000B312C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003E42C;
  return v3();
}

uint64_t sub_1000678EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1000B3298 + dword_1000B3298);
  v1 = (_QWORD *)swift_task_alloc(unk_1000B329C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003E42C;
  return v3();
}

uint64_t sub_100067948()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1000B3300 + dword_1000B3300);
  v1 = (_QWORD *)swift_task_alloc(unk_1000B3304);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003E42C;
  return v3();
}

uint64_t sub_1000679A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1000B3D70 + dword_1000B3D70);
  v1 = (_QWORD *)swift_task_alloc(unk_1000B3D74);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003E42C;
  return v3();
}

uint64_t sub_100067A00()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1000B3F60 + dword_1000B3F60);
  v1 = (_QWORD *)swift_task_alloc(unk_1000B3F64);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003E42C;
  return v3();
}

uint64_t sub_100067A5C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1000B40D8 + dword_1000B40D8);
  v1 = (_QWORD *)swift_task_alloc(unk_1000B40DC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003E42C;
  return v3();
}

uint64_t sub_100067AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000B3DD0 + dword_1000B3DD0);
  v5 = (_QWORD *)swift_task_alloc(unk_1000B3DD4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003E42C;
  return v7(a1, a2);
}

uint64_t sub_100067B30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000B3F70 + dword_1000B3F70);
  v5 = (_QWORD *)swift_task_alloc(unk_1000B3F74);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003E42C;
  return v7(a1, a2);
}

uint64_t sub_100067BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000B4128 + dword_1000B4128);
  v5 = (_QWORD *)swift_task_alloc(unk_1000B412C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003E42C;
  return v7(a1, a2);
}

uint64_t sub_100067C20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3[23] = a2;
  v3[24] = v2;
  v3[22] = a1;
  v4 = sub_10000629C(&qword_1000B3DC0);
  v3[25] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[26] = v5;
  v3[27] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000629C(&qword_1000B25E0);
  v3[28] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[29] = v7;
  v3[30] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ShuffleID(0);
  v3[31] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[32] = v9;
  v3[33] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v3[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[35] = v11;
  v3[36] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v3[37] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[38] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[39] = swift_task_alloc(v14);
  v3[40] = swift_task_alloc(v14);
  v3[41] = swift_task_alloc(v14);
  v3[42] = swift_task_alloc(v14);
  v3[43] = swift_task_alloc(v14);
  v15 = type metadata accessor for DeviceSyncState(0);
  v3[44] = v15;
  v3[45] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v3[46] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v3[47] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[48] = swift_task_alloc(v18);
  v3[49] = swift_task_alloc(v18);
  v3[50] = swift_task_alloc(v18);
  v3[51] = swift_task_alloc(v18);
  v3[52] = swift_task_alloc(v18);
  v19 = type metadata accessor for CommunicationActor(0);
  v3[53] = v19;
  v3[54] = static CommunicationActor.shared.getter(v19);
  v20 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3[55] = v20;
  v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, v20);
  v3[56] = v21;
  v3[57] = v22;
  return swift_task_switch(sub_100067E40, v21, v22);
}

uint64_t sub_100067E40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v1 + 192);
  v3 = Date.init()(a1);
  *(_QWORD *)(v1 + 464) = *(_QWORD *)(v2 + 120);
  LOBYTE(v2) = *(_BYTE *)(v2 + 16);
  *(_BYTE *)(v1 + 680) = v2;
  *(_QWORD *)(v1 + 472) = static CommunicationActor.shared.getter(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1000B2B8C);
  *(_QWORD *)(v1 + 480) = v4;
  *v4 = v1;
  v4[1] = sub_100067ED0;
  return sub_10001EC90(*(_QWORD *)(v1 + 360), v2, 0x657669746361, 0xE600000000000000);
}

uint64_t sub_100067ED0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 480);
  *(_QWORD *)(*v1 + 488) = v0;
  swift_task_dealloc(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(*(_QWORD *)(v2 + 424), *(_QWORD *)(v2 + 440));
  if (v0)
    v6 = sub_100068054;
  else
    v6 = sub_100067F54;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_100067F54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 360);
  swift_release(*(_QWORD *)(v0 + 472));
  v6 = v4 + *(int *)(v5 + 20);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 496) = v7;
  v7(v1, v6, v2);
  sub_10001F040(v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1000B2B64);
  *(_QWORD *)(v0 + 504) = v8;
  *v8 = v0;
  v8[1] = sub_100067FF4;
  return DeviceSyncTracker.lastReprocess(_:)(*(_QWORD *)(v0 + 400), *(_BYTE *)(v0 + 680));
}

uint64_t sub_100067FF4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 504);
  *(_QWORD *)(*v1 + 512) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DDE8;
  else
    v4 = sub_10006808C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
}

uint64_t sub_100068054()
{
  _QWORD *v0;

  swift_release(v0[59]);
  return swift_task_switch(sub_10008DD9C, v0[56], v0[57]);
}

uint64_t sub_10006808C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *log;
  os_log_type_t type;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 368);
  v4 = sub_100009174(&qword_1000B3DD8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v5 = dispatch thunk of static Comparable.< infix(_:_:)(v2, v1, v3, v4);
  if ((v5 & 1) != 0)
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1000B2BA4);
    *(_QWORD *)(v0 + 520) = v6;
    *v6 = v0;
    v6[1] = sub_1000684AC;
    return DeviceSyncTracker.clearDeviceWantsSync(_:_:)(*(_BYTE *)(v0 + 680), 0x657669746361, 0xE600000000000000);
  }
  else
  {
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
    v9 = *(_QWORD *)(v0 + 400);
    v10 = *(_QWORD *)(v0 + 408);
    v12 = *(_QWORD *)(v0 + 384);
    v11 = *(_QWORD *)(v0 + 392);
    v13 = *(_QWORD *)(v0 + 368);
    v14 = *(_QWORD *)(v0 + 192);
    static Log.session.getter(v5);
    v8(v11, v10, v13);
    v8(v12, v9, v13);
    v15 = swift_retain(v14);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      type = v17;
      log = v16;
      v18 = *(_QWORD *)(v0 + 392);
      v19 = *(_QWORD *)(v0 + 368);
      v42 = *(_QWORD *)(v0 + 384);
      v43 = *(_QWORD *)(v0 + 376);
      v47 = *(_QWORD *)(v0 + 304);
      v48 = *(_QWORD *)(v0 + 296);
      v49 = *(_QWORD *)(v0 + 344);
      v41 = *(_QWORD *)(v0 + 192);
      v20 = *(unsigned __int8 *)(v0 + 680);
      v21 = swift_slowAlloc(42, -1);
      v46 = swift_slowAlloc(128, -1);
      v50 = v46;
      *(_DWORD *)v21 = 136315906;
      *(_QWORD *)(v0 + 144) = sub_100021438(0x657669746361, 0xE600000000000000, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v21 + 4, v21 + 12);
      *(_WORD *)(v21 + 12) = 2080;
      v22 = PhotosFaceType.description.getter(v20);
      v24 = v23;
      *(_QWORD *)(v0 + 152) = sub_100021438(v22, v23, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease(v24);
      swift_release(v41);
      *(_WORD *)(v21 + 22) = 2080;
      v25 = sub_100009174(&qword_1000B3160, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v19, v25);
      v28 = v27;
      *(_QWORD *)(v0 + 160) = sub_100021438(v26, v27, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v21 + 24, v21 + 32);
      swift_bridgeObjectRelease(v28);
      v29 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v29(v18, v19);
      *(_WORD *)(v21 + 32) = 2080;
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v19, v25);
      v32 = v31;
      *(_QWORD *)(v0 + 168) = sub_100021438(v30, v31, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v21 + 34, v21 + 42);
      swift_bridgeObjectRelease(v32);
      v29(v42, v19);
      _os_log_impl((void *)&_mh_execute_header, log, type, "No new data available for device '%s', type=%s. Last sync was %s. Latest data was generated at %s. Recording the fact that the device wants an update.", (uint8_t *)v21, 0x2Au);
      swift_arrayDestroy(v46, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v49, v48);
    }
    else
    {
      v34 = *(_QWORD *)(v0 + 384);
      v33 = *(_QWORD *)(v0 + 392);
      v35 = *(_QWORD *)(v0 + 368);
      v36 = *(_QWORD *)(v0 + 376);
      v37 = *(_QWORD *)(v0 + 344);
      v38 = *(_QWORD *)(v0 + 296);
      v39 = *(_QWORD *)(v0 + 304);
      swift_release(*(_QWORD *)(v0 + 192));
      v29 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v29(v33, v35);
      v29(v34, v35);

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
    }
    *(_QWORD *)(v0 + 656) = v29;
    v40 = (_QWORD *)swift_task_alloc(dword_1000B2B9C);
    *(_QWORD *)(v0 + 664) = v40;
    *v40 = v0;
    v40[1] = sub_1000691E0;
    return DeviceSyncTracker.setDeviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 680), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 416));
  }
}

uint64_t sub_1000684AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 520);
  *(_QWORD *)(*v1 + 528) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DDFC;
  else
    v4 = sub_10006850C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
}

uint64_t sub_10006850C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v1 + 192);
  static Log.session.getter(a1);
  v3 = swift_retain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v19 = *(_QWORD *)(v1 + 304);
    v20 = *(_QWORD *)(v1 + 296);
    v21 = *(_QWORD *)(v1 + 336);
    v6 = *(_QWORD *)(v1 + 192);
    v7 = *(unsigned __int8 *)(v1 + 680);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v22 = v9;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v1 + 128) = sub_100021438(0x657669746361, 0xE600000000000000, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v10 = PhotosFaceType.description.getter(v7);
    v12 = v11;
    *(_QWORD *)(v1 + 136) = sub_100021438(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v12);
    swift_release(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Recording sync for device '%s', type=%s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v13 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v13(v21, v20);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 336);
    v15 = *(_QWORD *)(v1 + 296);
    v16 = *(_QWORD *)(v1 + 304);
    swift_release(*(_QWORD *)(v1 + 192));

    v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  *(_QWORD *)(v1 + 536) = v13;
  v17 = (_QWORD *)swift_task_alloc(dword_1000B2BAC);
  *(_QWORD *)(v1 + 544) = v17;
  *v17 = v1;
  v17[1] = sub_100068730;
  return DeviceSyncTracker.recordDeviceSync(_:_:_:)(*(_BYTE *)(v1 + 680), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v1 + 416));
}

uint64_t sub_100068730()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 544);
  *(_QWORD *)(*v1 + 552) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DE00;
  else
    v4 = sub_100068790;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
}

uint64_t sub_100068790()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v1 = SyncFacesRequest.cachedIdentifiers.getter();
  v2 = sub_100054F10(v1);
  v0[70] = v2;
  v3 = swift_bridgeObjectRelease(v1);
  v4 = SyncFacesRequest.trackedFaces.getter(v3);
  v5 = sub_100054F10(v4);
  v0[71] = v5;
  v6 = swift_bridgeObjectRelease(v4);
  static Log.photos.getter(v6);
  swift_bridgeObjectRetain_n(v2, 2);
  v7 = swift_bridgeObjectRetain_n(v5, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v28 = v0[41];
    v29 = (uint64_t (*)(uint64_t, uint64_t))v0[67];
    v26 = v0[34];
    v27 = v0[37];
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    v30 = v11;
    *(_DWORD *)v10 = 134218242;
    v12 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease(v2);
    v0[14] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v2);
    *(_WORD *)(v10 + 12) = 2080;
    v13 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v5);
    v15 = Set.description.getter(v14, v26, v13);
    v17 = v16;
    swift_bridgeObjectRelease(v5);
    v0[15] = sub_100021438(v15, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Remote device has %ld cached, and is requesting faces: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v18 = v29(v28, v27);
  }
  else
  {
    v19 = (uint64_t (*)(uint64_t, uint64_t))v0[67];
    v20 = v0[41];
    v21 = v0[37];
    swift_bridgeObjectRelease_n(v2, 2);
    swift_bridgeObjectRelease_n(v5, 2);

    v18 = v19(v20, v21);
  }
  v0[72] = static CommunicationActor.shared.getter(v18);
  v22 = type metadata accessor for GalleryDatabase(0);
  v23 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
  v24 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryList()[1]);
  v0[73] = v24;
  *v24 = v0;
  v24[1] = sub_100068A74;
  return dispatch thunk of PhotosFaceIDDatabase.queryList()(v22, v23);
}

uint64_t sub_100068A74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 584);
  v3[74] = a1;
  v3[75] = v1;
  swift_task_dealloc(v4);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v3[53], v3[55]);
  if (v1)
    v7 = sub_1000690E4;
  else
    v7 = sub_100068B04;
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_100068B04()
{
  _QWORD *v0;

  swift_release(v0[72]);
  return swift_task_switch(sub_100068B3C, v0[56], v0[57]);
}

uint64_t sub_100068B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  NSObject *log;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;

  v1 = *(_QWORD *)(v0 + 568);
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_9;
  v2 = PhotosFaceType.rawValue.getter(*(unsigned __int8 *)(v0 + 680));
  v4 = v3;
  v5 = PhotosFaceType.rawValue.getter(2);
  if (v2 == v5 && v4 == v6)
  {
    v10 = *(_QWORD *)(v0 + 568);
    swift_bridgeObjectRelease_n(v4, 2);
    v1 = v10;
    goto LABEL_9;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v4);
  if ((v9 & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 568);
LABEL_9:
    v11 = swift_bridgeObjectRelease(v1);
    v12 = *(char **)(v0 + 592);
    goto LABEL_10;
  }
  v56 = *(_QWORD *)(v0 + 592);
  v57 = *(_QWORD *)(v0 + 568);
  v12 = sub_10008CBEC(v56, v57, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, &qword_1000B2B08, (uint64_t)&protocol conformance descriptor for ShuffleID, (void (*)(BOOL, uint64_t, uint64_t))sub_10004D76C);
  swift_bridgeObjectRelease(v57);
  v11 = swift_bridgeObjectRelease(v56);
LABEL_10:
  *(_QWORD *)(v0 + 608) = v12;
  v13 = *(_QWORD *)(v0 + 192);
  static Log.session.getter(v11);
  swift_bridgeObjectRetain_n(v12, 4);
  v14 = swift_retain(v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v59 = v16;
    log = v15;
    v17 = *(_QWORD *)(v0 + 192);
    v18 = *(unsigned __int8 *)(v0 + 680);
    v19 = swift_slowAlloc(42, -1);
    v58 = swift_slowAlloc(96, -1);
    v64 = v58;
    *(_DWORD *)v19 = 136315906;
    v62 = v12;
    *(_QWORD *)(v0 + 80) = sub_100021438(0xD00000000000001BLL, 0x8000000100095340, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2080;
    v20 = PhotosFaceType.description.getter(v18);
    v22 = v21;
    *(_QWORD *)(v0 + 88) = sub_100021438(v20, v21, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease(v22);
    swift_release(v17);
    *(_WORD *)(v19 + 22) = 2048;
    v23 = *((_QWORD *)v12 + 2);
    swift_bridgeObjectRelease(v12);
    *(_QWORD *)(v0 + 96) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v19 + 24, v19 + 32);
    swift_bridgeObjectRelease(v12);
    v60 = (uint8_t *)v19;
    *(_WORD *)(v19 + 32) = 2080;
    if (v23)
    {
      v24 = *(_QWORD *)(v0 + 280);
      v25 = *(_QWORD *)(v0 + 256);
      v65 = _swiftEmptyArrayStorage;
      sub_10004D740(0, v23, 0);
      v26 = &v12[(*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)];
      v63 = *(_QWORD *)(v25 + 72);
      v27 = v25;
      v28 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 16);
      v29 = v65;
      do
      {
        v30 = *(_QWORD *)(v0 + 264);
        v31 = *(_QWORD *)(v0 + 248);
        v28(v30, v26, v31);
        v32 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
        dispatch thunk of PhotosFaceID.id.getter(v31, v32);
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v31);
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
        {
          sub_10004D740(0, v29[2] + 1, 1);
          v29 = v65;
        }
        v34 = v29[2];
        v33 = v29[3];
        if (v34 >= v33 >> 1)
        {
          sub_10004D740(v33 > 1, v34 + 1, 1);
          v29 = v65;
        }
        v35 = *(_QWORD *)(v0 + 288);
        v36 = *(_QWORD *)(v0 + 272);
        v29[2] = v34 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))((unint64_t)v29+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v34, v35, v36);
        v65 = v29;
        v26 += v63;
        --v23;
      }
      while (v23);
      v12 = v62;
      swift_bridgeObjectRelease(v62);
    }
    else
    {
      swift_bridgeObjectRelease(v12);
      v29 = _swiftEmptyArrayStorage;
    }
    v37 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    v43 = *(_QWORD *)(v0 + 320);
    v44 = *(_QWORD *)(v0 + 296);
    v45 = Array.description.getter(v29, *(_QWORD *)(v0 + 272));
    v47 = v46;
    swift_bridgeObjectRelease(v29);
    *(_QWORD *)(v0 + 104) = sub_100021438(v45, v47, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v60 + 34, v60 + 42);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, log, v59, "%s type = %s, for faces: (%ld) %s", v60, 0x2Au);
    swift_arrayDestroy(v58, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v60, -1, -1);

    v41 = v43;
    v42 = v44;
  }
  else
  {
    v37 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    v38 = *(_QWORD *)(v0 + 320);
    v39 = *(_QWORD *)(v0 + 296);
    v40 = *(_QWORD *)(v0 + 192);
    swift_bridgeObjectRelease_n(v12, 4);
    swift_release(v40);

    v41 = v38;
    v42 = v39;
  }
  v37(v41, v42);
  v48 = *(_QWORD *)(v0 + 560);
  v49 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 16) = v12;
  v50 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 616) = v50;
  *(_QWORD *)(v50 + 16) = v49;
  *(_QWORD *)(v50 + 24) = v48;
  v51 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(predicate:)[1]);
  *(_QWORD *)(v0 + 624) = v51;
  v52 = sub_10000629C(&qword_1000B3DF0);
  v53 = sub_10000629C(&qword_1000B3DF8);
  *(_QWORD *)(v0 + 632) = v53;
  v54 = sub_100006454(&qword_1000B3E00, &qword_1000B3DF0, (uint64_t)&protocol conformance descriptor for [A]);
  *v51 = v0;
  v51[1] = sub_100069134;
  return Sequence.asyncMap<A>(predicate:)(&unk_1000B3DE8, v50, v52, v53, v54);
}

uint64_t sub_1000690E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[71];
  v2 = v0[70];
  swift_release(v0[72]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10008DE04, v0[56], v0[57]);
}

uint64_t sub_100069134(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 624);
  v3[80] = a1;
  v3[81] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[77];
    swift_bridgeObjectRelease(v3[70]);
    swift_task_dealloc(v5);
    v6 = v3[56];
    v7 = v3[57];
    v8 = sub_10008DE24;
  }
  else
  {
    v9 = v3[77];
    v10 = v3[76];
    swift_bridgeObjectRelease(v3[70]);
    swift_bridgeObjectRelease(v10);
    swift_task_dealloc(v9);
    v6 = v3[56];
    v7 = v3[57];
    v8 = sub_10008DDE4;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_1000691E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 664);
  *(_QWORD *)(*v1 + 672) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DDEC;
  else
    v4 = sub_100069240;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
}

uint64_t sub_100069240(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v1 + 192);
  static Log.session.getter(a1);
  v3 = swift_retain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v20 = *(_QWORD *)(v1 + 304);
    v21 = *(_QWORD *)(v1 + 296);
    v22 = *(_QWORD *)(v1 + 336);
    v6 = *(_QWORD *)(v1 + 192);
    v7 = *(unsigned __int8 *)(v1 + 680);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v23 = v9;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v1 + 128) = sub_100021438(0x657669746361, 0xE600000000000000, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v10 = PhotosFaceType.description.getter(v7);
    v12 = v11;
    *(_QWORD *)(v1 + 136) = sub_100021438(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v8 + 14, v8 + 22);
    swift_release(v6);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Recording sync for device '%s', type=%s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v13 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v13(v22, v21);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 336);
    v15 = *(_QWORD *)(v1 + 296);
    v16 = *(_QWORD *)(v1 + 304);
    v17 = *(_QWORD *)(v1 + 192);

    swift_release(v17);
    v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  *(_QWORD *)(v1 + 536) = v13;
  v18 = (_QWORD *)swift_task_alloc(dword_1000B2BAC);
  *(_QWORD *)(v1 + 544) = v18;
  *v18 = v1;
  v18[1] = sub_100068730;
  return DeviceSyncTracker.recordDeviceSync(_:_:_:)(*(_BYTE *)(v1 + 680), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v1 + 416));
}

uint64_t sub_100069468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3[23] = a2;
  v3[24] = v2;
  v3[22] = a1;
  v4 = sub_10000629C(&qword_1000B3DC0);
  v3[25] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[26] = v5;
  v3[27] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000629C(&qword_1000B25E0);
  v3[28] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[29] = v7;
  v3[30] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ShuffleID(0);
  v3[31] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[32] = v9;
  v3[33] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v3[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[35] = v11;
  v3[36] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v3[37] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[38] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[39] = swift_task_alloc(v14);
  v3[40] = swift_task_alloc(v14);
  v3[41] = swift_task_alloc(v14);
  v3[42] = swift_task_alloc(v14);
  v3[43] = swift_task_alloc(v14);
  v15 = type metadata accessor for DeviceSyncState(0);
  v3[44] = v15;
  v3[45] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v3[46] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v3[47] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[48] = swift_task_alloc(v18);
  v3[49] = swift_task_alloc(v18);
  v3[50] = swift_task_alloc(v18);
  v3[51] = swift_task_alloc(v18);
  v3[52] = swift_task_alloc(v18);
  v19 = type metadata accessor for CommunicationActor(0);
  v3[53] = v19;
  v3[54] = static CommunicationActor.shared.getter(v19);
  v20 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3[55] = v20;
  v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, v20);
  v3[56] = v21;
  v3[57] = v22;
  return swift_task_switch(sub_100069688, v21, v22);
}

uint64_t sub_100069688(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v1 + 192);
  v3 = Date.init()(a1);
  *(_QWORD *)(v1 + 464) = *(_QWORD *)(v2 + 120);
  LOBYTE(v2) = *(_BYTE *)(v2 + 16);
  *(_BYTE *)(v1 + 680) = v2;
  *(_QWORD *)(v1 + 472) = static CommunicationActor.shared.getter(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1000B2B8C);
  *(_QWORD *)(v1 + 480) = v4;
  *v4 = v1;
  v4[1] = sub_100069718;
  return sub_10001EC90(*(_QWORD *)(v1 + 360), v2, 0x657669746361, 0xE600000000000000);
}

uint64_t sub_100069718()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 480);
  *(_QWORD *)(*v1 + 488) = v0;
  swift_task_dealloc(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(*(_QWORD *)(v2 + 424), *(_QWORD *)(v2 + 440));
  if (v0)
    v6 = sub_100068054;
  else
    v6 = sub_10006979C;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_10006979C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 360);
  swift_release(*(_QWORD *)(v0 + 472));
  v6 = v4 + *(int *)(v5 + 20);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 496) = v7;
  v7(v1, v6, v2);
  sub_10001F040(v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1000B2B64);
  *(_QWORD *)(v0 + 504) = v8;
  *v8 = v0;
  v8[1] = sub_10006983C;
  return DeviceSyncTracker.lastReprocess(_:)(*(_QWORD *)(v0 + 400), *(_BYTE *)(v0 + 680));
}

uint64_t sub_10006983C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 504);
  *(_QWORD *)(*v1 + 512) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DDE8;
  else
    v4 = sub_10006989C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
}

uint64_t sub_10006989C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *log;
  os_log_type_t type;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 368);
  v4 = sub_100009174(&qword_1000B3DD8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v5 = dispatch thunk of static Comparable.< infix(_:_:)(v2, v1, v3, v4);
  if ((v5 & 1) != 0)
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1000B2BA4);
    *(_QWORD *)(v0 + 520) = v6;
    *v6 = v0;
    v6[1] = sub_100069CBC;
    return DeviceSyncTracker.clearDeviceWantsSync(_:_:)(*(_BYTE *)(v0 + 680), 0x657669746361, 0xE600000000000000);
  }
  else
  {
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
    v9 = *(_QWORD *)(v0 + 400);
    v10 = *(_QWORD *)(v0 + 408);
    v12 = *(_QWORD *)(v0 + 384);
    v11 = *(_QWORD *)(v0 + 392);
    v13 = *(_QWORD *)(v0 + 368);
    v14 = *(_QWORD *)(v0 + 192);
    static Log.session.getter(v5);
    v8(v11, v10, v13);
    v8(v12, v9, v13);
    v15 = swift_retain(v14);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      type = v17;
      log = v16;
      v18 = *(_QWORD *)(v0 + 392);
      v19 = *(_QWORD *)(v0 + 368);
      v42 = *(_QWORD *)(v0 + 384);
      v43 = *(_QWORD *)(v0 + 376);
      v47 = *(_QWORD *)(v0 + 304);
      v48 = *(_QWORD *)(v0 + 296);
      v49 = *(_QWORD *)(v0 + 344);
      v41 = *(_QWORD *)(v0 + 192);
      v20 = *(unsigned __int8 *)(v0 + 680);
      v21 = swift_slowAlloc(42, -1);
      v46 = swift_slowAlloc(128, -1);
      v50 = v46;
      *(_DWORD *)v21 = 136315906;
      *(_QWORD *)(v0 + 144) = sub_100021438(0x657669746361, 0xE600000000000000, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v21 + 4, v21 + 12);
      *(_WORD *)(v21 + 12) = 2080;
      v22 = PhotosFaceType.description.getter(v20);
      v24 = v23;
      *(_QWORD *)(v0 + 152) = sub_100021438(v22, v23, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease(v24);
      swift_release(v41);
      *(_WORD *)(v21 + 22) = 2080;
      v25 = sub_100009174(&qword_1000B3160, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v19, v25);
      v28 = v27;
      *(_QWORD *)(v0 + 160) = sub_100021438(v26, v27, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v21 + 24, v21 + 32);
      swift_bridgeObjectRelease(v28);
      v29 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v29(v18, v19);
      *(_WORD *)(v21 + 32) = 2080;
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v19, v25);
      v32 = v31;
      *(_QWORD *)(v0 + 168) = sub_100021438(v30, v31, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v21 + 34, v21 + 42);
      swift_bridgeObjectRelease(v32);
      v29(v42, v19);
      _os_log_impl((void *)&_mh_execute_header, log, type, "No new data available for device '%s', type=%s. Last sync was %s. Latest data was generated at %s. Recording the fact that the device wants an update.", (uint8_t *)v21, 0x2Au);
      swift_arrayDestroy(v46, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v49, v48);
    }
    else
    {
      v34 = *(_QWORD *)(v0 + 384);
      v33 = *(_QWORD *)(v0 + 392);
      v35 = *(_QWORD *)(v0 + 368);
      v36 = *(_QWORD *)(v0 + 376);
      v37 = *(_QWORD *)(v0 + 344);
      v38 = *(_QWORD *)(v0 + 296);
      v39 = *(_QWORD *)(v0 + 304);
      swift_release(*(_QWORD *)(v0 + 192));
      v29 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v29(v33, v35);
      v29(v34, v35);

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
    }
    *(_QWORD *)(v0 + 656) = v29;
    v40 = (_QWORD *)swift_task_alloc(dword_1000B2B9C);
    *(_QWORD *)(v0 + 664) = v40;
    *v40 = v0;
    v40[1] = sub_10006B138;
    return DeviceSyncTracker.setDeviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 680), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 416));
  }
}

uint64_t sub_100069CBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 520);
  *(_QWORD *)(*v1 + 528) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DDFC;
  else
    v4 = sub_100069D1C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
}

uint64_t sub_100069D1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v1 + 192);
  static Log.session.getter(a1);
  v3 = swift_retain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v19 = *(_QWORD *)(v1 + 304);
    v20 = *(_QWORD *)(v1 + 296);
    v21 = *(_QWORD *)(v1 + 336);
    v6 = *(_QWORD *)(v1 + 192);
    v7 = *(unsigned __int8 *)(v1 + 680);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v22 = v9;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v1 + 128) = sub_100021438(0x657669746361, 0xE600000000000000, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v10 = PhotosFaceType.description.getter(v7);
    v12 = v11;
    *(_QWORD *)(v1 + 136) = sub_100021438(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v12);
    swift_release(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Recording sync for device '%s', type=%s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v13 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v13(v21, v20);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 336);
    v15 = *(_QWORD *)(v1 + 296);
    v16 = *(_QWORD *)(v1 + 304);
    swift_release(*(_QWORD *)(v1 + 192));

    v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  *(_QWORD *)(v1 + 536) = v13;
  v17 = (_QWORD *)swift_task_alloc(dword_1000B2BAC);
  *(_QWORD *)(v1 + 544) = v17;
  *v17 = v1;
  v17[1] = sub_100069F40;
  return DeviceSyncTracker.recordDeviceSync(_:_:_:)(*(_BYTE *)(v1 + 680), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v1 + 416));
}

uint64_t sub_100069F40()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 544);
  *(_QWORD *)(*v1 + 552) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DE00;
  else
    v4 = sub_100069FA0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
}

uint64_t sub_100069FA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v1 = SyncFacesRequest.cachedIdentifiers.getter();
  v2 = sub_100054F10(v1);
  v0[70] = v2;
  v3 = swift_bridgeObjectRelease(v1);
  v4 = SyncFacesRequest.trackedFaces.getter(v3);
  v5 = sub_100054F10(v4);
  v0[71] = v5;
  v6 = swift_bridgeObjectRelease(v4);
  static Log.photos.getter(v6);
  swift_bridgeObjectRetain_n(v2, 2);
  v7 = swift_bridgeObjectRetain_n(v5, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v28 = v0[41];
    v29 = (uint64_t (*)(uint64_t, uint64_t))v0[67];
    v26 = v0[34];
    v27 = v0[37];
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    v30 = v11;
    *(_DWORD *)v10 = 134218242;
    v12 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease(v2);
    v0[14] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v2);
    *(_WORD *)(v10 + 12) = 2080;
    v13 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v5);
    v15 = Set.description.getter(v14, v26, v13);
    v17 = v16;
    swift_bridgeObjectRelease(v5);
    v0[15] = sub_100021438(v15, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Remote device has %ld cached, and is requesting faces: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v18 = v29(v28, v27);
  }
  else
  {
    v19 = (uint64_t (*)(uint64_t, uint64_t))v0[67];
    v20 = v0[41];
    v21 = v0[37];
    swift_bridgeObjectRelease_n(v2, 2);
    swift_bridgeObjectRelease_n(v5, 2);

    v18 = v19(v20, v21);
  }
  v0[72] = static CommunicationActor.shared.getter(v18);
  v22 = type metadata accessor for ShuffleDatabase(0);
  v23 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
  v24 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryList()[1]);
  v0[73] = v24;
  *v24 = v0;
  v24[1] = sub_10006A284;
  return dispatch thunk of PhotosFaceIDDatabase.queryList()(v22, v23);
}

uint64_t sub_10006A284(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 584);
  v3[74] = a1;
  v3[75] = v1;
  swift_task_dealloc(v4);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v3[53], v3[55]);
  if (v1)
    v7 = sub_1000690E4;
  else
    v7 = sub_10006A314;
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_10006A314()
{
  _QWORD *v0;

  swift_release(v0[72]);
  return swift_task_switch(sub_10006A34C, v0[56], v0[57]);
}

uint64_t sub_10006A34C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  NSObject *log;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;

  v1 = *(_QWORD *)(v0 + 568);
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_9;
  v2 = PhotosFaceType.rawValue.getter(*(unsigned __int8 *)(v0 + 680));
  v4 = v3;
  v5 = PhotosFaceType.rawValue.getter(2);
  if (v2 == v5 && v4 == v6)
  {
    v10 = *(_QWORD *)(v0 + 568);
    swift_bridgeObjectRelease_n(v4, 2);
    v1 = v10;
    goto LABEL_9;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v4);
  if ((v9 & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 568);
LABEL_9:
    v11 = swift_bridgeObjectRelease(v1);
    v12 = *(char **)(v0 + 592);
    goto LABEL_10;
  }
  v56 = *(_QWORD *)(v0 + 592);
  v57 = *(_QWORD *)(v0 + 568);
  v12 = sub_10008CBEC(v56, v57, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, &qword_1000B2B08, (uint64_t)&protocol conformance descriptor for ShuffleID, (void (*)(BOOL, uint64_t, uint64_t))sub_10004D76C);
  swift_bridgeObjectRelease(v57);
  v11 = swift_bridgeObjectRelease(v56);
LABEL_10:
  *(_QWORD *)(v0 + 608) = v12;
  v13 = *(_QWORD *)(v0 + 192);
  static Log.session.getter(v11);
  swift_bridgeObjectRetain_n(v12, 4);
  v14 = swift_retain(v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v59 = v16;
    log = v15;
    v17 = *(_QWORD *)(v0 + 192);
    v18 = *(unsigned __int8 *)(v0 + 680);
    v19 = swift_slowAlloc(42, -1);
    v58 = swift_slowAlloc(96, -1);
    v64 = v58;
    *(_DWORD *)v19 = 136315906;
    v62 = v12;
    *(_QWORD *)(v0 + 80) = sub_100021438(0xD00000000000001BLL, 0x8000000100095340, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2080;
    v20 = PhotosFaceType.description.getter(v18);
    v22 = v21;
    *(_QWORD *)(v0 + 88) = sub_100021438(v20, v21, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease(v22);
    swift_release(v17);
    *(_WORD *)(v19 + 22) = 2048;
    v23 = *((_QWORD *)v12 + 2);
    swift_bridgeObjectRelease(v12);
    *(_QWORD *)(v0 + 96) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v19 + 24, v19 + 32);
    swift_bridgeObjectRelease(v12);
    v60 = (uint8_t *)v19;
    *(_WORD *)(v19 + 32) = 2080;
    if (v23)
    {
      v24 = *(_QWORD *)(v0 + 280);
      v25 = *(_QWORD *)(v0 + 256);
      v65 = _swiftEmptyArrayStorage;
      sub_10004D740(0, v23, 0);
      v26 = &v12[(*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)];
      v63 = *(_QWORD *)(v25 + 72);
      v27 = v25;
      v28 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 16);
      v29 = v65;
      do
      {
        v30 = *(_QWORD *)(v0 + 264);
        v31 = *(_QWORD *)(v0 + 248);
        v28(v30, v26, v31);
        v32 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
        dispatch thunk of PhotosFaceID.id.getter(v31, v32);
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v31);
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
        {
          sub_10004D740(0, v29[2] + 1, 1);
          v29 = v65;
        }
        v34 = v29[2];
        v33 = v29[3];
        if (v34 >= v33 >> 1)
        {
          sub_10004D740(v33 > 1, v34 + 1, 1);
          v29 = v65;
        }
        v35 = *(_QWORD *)(v0 + 288);
        v36 = *(_QWORD *)(v0 + 272);
        v29[2] = v34 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))((unint64_t)v29+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v34, v35, v36);
        v65 = v29;
        v26 += v63;
        --v23;
      }
      while (v23);
      v12 = v62;
      swift_bridgeObjectRelease(v62);
    }
    else
    {
      swift_bridgeObjectRelease(v12);
      v29 = _swiftEmptyArrayStorage;
    }
    v37 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    v43 = *(_QWORD *)(v0 + 320);
    v44 = *(_QWORD *)(v0 + 296);
    v45 = Array.description.getter(v29, *(_QWORD *)(v0 + 272));
    v47 = v46;
    swift_bridgeObjectRelease(v29);
    *(_QWORD *)(v0 + 104) = sub_100021438(v45, v47, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v60 + 34, v60 + 42);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, log, v59, "%s type = %s, for faces: (%ld) %s", v60, 0x2Au);
    swift_arrayDestroy(v58, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v60, -1, -1);

    v41 = v43;
    v42 = v44;
  }
  else
  {
    v37 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    v38 = *(_QWORD *)(v0 + 320);
    v39 = *(_QWORD *)(v0 + 296);
    v40 = *(_QWORD *)(v0 + 192);
    swift_bridgeObjectRelease_n(v12, 4);
    swift_release(v40);

    v41 = v38;
    v42 = v39;
  }
  v37(v41, v42);
  v48 = *(_QWORD *)(v0 + 560);
  v49 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 16) = v12;
  v50 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 616) = v50;
  *(_QWORD *)(v50 + 16) = v49;
  *(_QWORD *)(v50 + 24) = v48;
  v51 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(predicate:)[1]);
  *(_QWORD *)(v0 + 624) = v51;
  v52 = sub_10000629C(&qword_1000B3DF0);
  v53 = sub_10000629C(&qword_1000B3DF8);
  *(_QWORD *)(v0 + 632) = v53;
  v54 = sub_100006454(&qword_1000B3E00, &qword_1000B3DF0, (uint64_t)&protocol conformance descriptor for [A]);
  *v51 = v0;
  v51[1] = sub_10006A8F4;
  return Sequence.asyncMap<A>(predicate:)(&unk_1000B3F80, v50, v52, v53, v54);
}

uint64_t sub_10006A8F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 624);
  v3[80] = a1;
  v3[81] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[77];
    swift_bridgeObjectRelease(v3[70]);
    swift_task_dealloc(v5);
    v6 = v3[56];
    v7 = v3[57];
    v8 = sub_10008DE24;
  }
  else
  {
    v9 = v3[77];
    v10 = v3[76];
    swift_bridgeObjectRelease(v3[70]);
    swift_bridgeObjectRelease(v10);
    swift_task_dealloc(v9);
    v6 = v3[56];
    v7 = v3[57];
    v8 = sub_10006A9A0;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_10006A9A0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(_QWORD, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  int64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  void *object;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  void *v46;
  Swift::String v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  os_log_type_t v85;
  uint64_t v86;
  NSObject *log;
  os_log_t loga;
  void (*v89)(uint64_t, char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;

  v1 = *(_QWORD *)(v0 + 640);
  swift_release(*(_QWORD *)(v0 + 432));
  v2 = _swiftEmptyArrayStorage;
  v98 = (uint64_t)_swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 640);
    v5 = (uint64_t *)(v4 + 32);
    swift_bridgeObjectRetain(v4);
    do
    {
      v6 = *v5++;
      swift_bridgeObjectRetain(v6);
      sub_100017AD8(v7);
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 640));
    v2 = (_QWORD *)v98;
  }
  v8 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 640));
  v9 = v2[2];
  if (v9)
  {
    v10 = *(_QWORD *)(v0 + 232);
    v11 = (char *)v2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    v13 = *(void (**)(_QWORD, char *, uint64_t, __n128))(v10 + 16);
    v14 = swift_bridgeObjectRetain(v2);
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)(v0 + 224);
      v13(*(_QWORD *)(v0 + 240), v11, v16, v14);
      v17 = SyncedPhotosFace.photos.getter(v16);
      v18 = *(_QWORD *)(v17 + 16);
      result = swift_bridgeObjectRelease(v17);
      v20 = __OFADD__(v15, v18);
      v15 += v18;
      if (v20)
        break;
      (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
      v11 += v12;
      if (!--v9)
      {
        v8 = swift_bridgeObjectRelease(v2);
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  else
  {
    v15 = 0;
LABEL_11:
    v21 = *(_QWORD *)(v0 + 192);
    static Log.session.getter(v8);
    swift_bridgeObjectRetain_n(v2, 4);
    v22 = swift_retain(v21);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v85 = v24;
      log = v23;
      v25 = *(_QWORD *)(v0 + 192);
      v26 = *(unsigned __int8 *)(v0 + 680);
      v27 = swift_slowAlloc(52, -1);
      v81 = swift_slowAlloc(96, -1);
      v96 = v81;
      *(_DWORD *)v27 = 136316162;
      *(_QWORD *)(v0 + 32) = sub_100021438(0xD00000000000001BLL, 0x8000000100095340, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
      *(_WORD *)(v27 + 12) = 2080;
      v28 = PhotosFaceType.description.getter(v26);
      v30 = v29;
      *(_QWORD *)(v0 + 40) = sub_100021438(v28, v29, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease(v30);
      swift_release(v25);
      *(_WORD *)(v27 + 22) = 2048;
      v31 = v2;
      v32 = v2[2];
      swift_bridgeObjectRelease(v31);
      *(_QWORD *)(v0 + 48) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v27 + 24, v27 + 32);
      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v27 + 32) = 2048;
      *(_QWORD *)(v0 + 56) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v27 + 34, v27 + 42);
      v83 = (uint8_t *)v27;
      *(_WORD *)(v27 + 42) = 2080;
      if (v32)
      {
        v93 = *(_QWORD *)(v0 + 256);
        v33 = *(_QWORD *)(v0 + 232);
        v97 = _swiftEmptyArrayStorage;
        sub_10004D838(0, v32, 0);
        v78 = v31;
        v34 = (char *)v31
            + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
        v89 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
        v91 = *(_QWORD *)(v33 + 72);
        do
        {
          v35 = *(_QWORD *)(v0 + 264);
          v37 = *(_QWORD *)(v0 + 240);
          v36 = *(_QWORD *)(v0 + 248);
          v38 = *(_QWORD *)(v0 + 224);
          v89(v37, v34, v38);
          v98 = 0;
          v99 = 0xE000000000000000;
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease(v99);
          v98 = 0x203D20646928;
          v99 = 0xE600000000000000;
          SyncedPhotosFace.id.getter(v38);
          v39 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
          v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v36, v39);
          object = v40._object;
          String.append(_:)(v40);
          swift_bridgeObjectRelease(object);
          (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v35, v36);
          v42._countAndFlagsBits = 0x736F746F6870202CLL;
          v42._object = (void *)0xEB00000000203D20;
          String.append(_:)(v42);
          v43 = SyncedPhotosFace.photos.getter(v38);
          v44 = *(_QWORD *)(v43 + 16);
          swift_bridgeObjectRelease(v43);
          *(_QWORD *)(v0 + 64) = v44;
          v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          v46 = v45._object;
          String.append(_:)(v45);
          swift_bridgeObjectRelease(v46);
          v47._countAndFlagsBits = 41;
          v47._object = (void *)0xE100000000000000;
          String.append(_:)(v47);
          v48 = v98;
          v49 = v99;
          (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v37, v38);
          v50 = v97;
          if ((swift_isUniquelyReferenced_nonNull_native(v97) & 1) == 0)
          {
            sub_10004D838(0, v50[2] + 1, 1);
            v50 = v97;
          }
          v52 = v50[2];
          v51 = v50[3];
          if (v52 >= v51 >> 1)
          {
            sub_10004D838(v51 > 1, v52 + 1, 1);
            v50 = v97;
          }
          v50[2] = v52 + 1;
          v53 = &v50[2 * v52];
          v53[4] = v48;
          v53[5] = v49;
          v34 += v91;
          --v32;
        }
        while (v32);
        v58 = v78;
        swift_bridgeObjectRelease(v78);
      }
      else
      {
        swift_bridgeObjectRelease(v31);
        v50 = _swiftEmptyArrayStorage;
        v58 = v31;
      }
      v59 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
      v60 = *(_QWORD *)(v0 + 312);
      v61 = *(_QWORD *)(v0 + 296);
      v62 = Array.description.getter(v50, &type metadata for String);
      v64 = v63;
      swift_bridgeObjectRelease(v50);
      *(_QWORD *)(v0 + 72) = sub_100021438(v62, v64, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v83 + 44, v83 + 52);
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, log, v85, "%s type = %s, result: (faces=%ld, photos=%ld) %s", v83, 0x34u);
      swift_arrayDestroy(v81, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1, -1);
      swift_slowDealloc(v83, -1, -1);

      v59(v60, v61);
      v2 = v58;
    }
    else
    {
      v54 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
      v55 = *(_QWORD *)(v0 + 312);
      v56 = *(_QWORD *)(v0 + 296);
      v57 = *(_QWORD *)(v0 + 192);
      swift_bridgeObjectRelease_n(v2, 4);
      swift_release(v57);

      v54(v55, v56);
    }
    v65 = *(_QWORD *)(v0 + 632);
    v66 = *(_QWORD *)(v0 + 416);
    v75 = *(_QWORD *)(v0 + 400);
    v76 = *(_QWORD *)(v0 + 408);
    v77 = *(_QWORD *)(v0 + 392);
    v79 = *(_QWORD *)(v0 + 384);
    v67 = *(_QWORD *)(v0 + 368);
    v74 = *(_QWORD *)(v0 + 376);
    v80 = *(_QWORD *)(v0 + 360);
    v82 = *(_QWORD *)(v0 + 344);
    v84 = *(_QWORD *)(v0 + 336);
    v86 = *(_QWORD *)(v0 + 328);
    loga = *(os_log_t *)(v0 + 320);
    v90 = *(_QWORD *)(v0 + 312);
    v92 = *(_QWORD *)(v0 + 288);
    v94 = *(_QWORD *)(v0 + 264);
    v95 = *(_QWORD *)(v0 + 240);
    v69 = *(_QWORD *)(v0 + 208);
    v68 = *(_QWORD *)(v0 + 216);
    v70 = *(_QWORD *)(v0 + 200);
    *(_QWORD *)(v0 + 24) = v2;
    v71 = sub_100006454(&qword_1000B3E08, &qword_1000B3DF8, (uint64_t)&protocol conformance descriptor for [A]);
    Sequence.async.getter(v65, v71);
    swift_bridgeObjectRelease(v2);
    v72 = sub_100006454(&qword_1000B3DC8, &qword_1000B3DC0, (uint64_t)&protocol conformance descriptor for AsyncSyncSequence<A>);
    AsyncSequence<>.throwing.getter(v70, v72);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
    v73 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
    v73(v75, v67);
    v73(v76, v67);
    v73(v66, v67);
    swift_task_dealloc(v66);
    swift_task_dealloc(v76);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(loga);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v68);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_10006B138()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 664);
  *(_QWORD *)(*v1 + 672) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008DDEC;
  else
    v4 = sub_10006B198;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
}

uint64_t sub_10006B198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v1 + 192);
  static Log.session.getter(a1);
  v3 = swift_retain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v20 = *(_QWORD *)(v1 + 304);
    v21 = *(_QWORD *)(v1 + 296);
    v22 = *(_QWORD *)(v1 + 336);
    v6 = *(_QWORD *)(v1 + 192);
    v7 = *(unsigned __int8 *)(v1 + 680);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v23 = v9;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v1 + 128) = sub_100021438(0x657669746361, 0xE600000000000000, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v10 = PhotosFaceType.description.getter(v7);
    v12 = v11;
    *(_QWORD *)(v1 + 136) = sub_100021438(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v8 + 14, v8 + 22);
    swift_release(v6);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Recording sync for device '%s', type=%s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v13 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v13(v22, v21);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 336);
    v15 = *(_QWORD *)(v1 + 296);
    v16 = *(_QWORD *)(v1 + 304);
    v17 = *(_QWORD *)(v1 + 192);

    swift_release(v17);
    v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  *(_QWORD *)(v1 + 536) = v13;
  v18 = (_QWORD *)swift_task_alloc(dword_1000B2BAC);
  *(_QWORD *)(v1 + 544) = v18;
  *v18 = v1;
  v18[1] = sub_100069F40;
  return DeviceSyncTracker.recordDeviceSync(_:_:_:)(*(_BYTE *)(v1 + 680), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v1 + 416));
}

uint64_t sub_10006B3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3[23] = a2;
  v3[24] = v2;
  v3[22] = a1;
  v4 = sub_10000629C(&qword_1000B4118);
  v3[25] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[26] = v5;
  v3[27] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000629C(&qword_1000B25E8);
  v3[28] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[29] = v7;
  v3[30] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AlbumID(0);
  v3[31] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[32] = v9;
  v3[33] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v3[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[35] = v11;
  v3[36] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v3[37] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[38] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[39] = swift_task_alloc(v14);
  v3[40] = swift_task_alloc(v14);
  v3[41] = swift_task_alloc(v14);
  v3[42] = swift_task_alloc(v14);
  v3[43] = swift_task_alloc(v14);
  v15 = type metadata accessor for DeviceSyncState(0);
  v3[44] = v15;
  v3[45] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v3[46] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v3[47] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[48] = swift_task_alloc(v18);
  v3[49] = swift_task_alloc(v18);
  v3[50] = swift_task_alloc(v18);
  v3[51] = swift_task_alloc(v18);
  v3[52] = swift_task_alloc(v18);
  v19 = type metadata accessor for CommunicationActor(0);
  v3[53] = v19;
  v3[54] = static CommunicationActor.shared.getter(v19);
  v20 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3[55] = v20;
  v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, v20);
  v3[56] = v21;
  v3[57] = v22;
  return swift_task_switch(sub_10006B5E0, v21, v22);
}

uint64_t sub_10006B5E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v1 + 192);
  v3 = Date.init()(a1);
  *(_QWORD *)(v1 + 464) = *(_QWORD *)(v2 + 120);
  LOBYTE(v2) = *(_BYTE *)(v2 + 16);
  *(_BYTE *)(v1 + 680) = v2;
  *(_QWORD *)(v1 + 472) = static CommunicationActor.shared.getter(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1000B2B8C);
  *(_QWORD *)(v1 + 480) = v4;
  *v4 = v1;
  v4[1] = sub_10006B670;
  return sub_10001EC90(*(_QWORD *)(v1 + 360), v2, 0x657669746361, 0xE600000000000000);
}

uint64_t sub_10006B670()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 480);
  *(_QWORD *)(*v1 + 488) = v0;
  swift_task_dealloc(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(*(_QWORD *)(v2 + 424), *(_QWORD *)(v2 + 440));
  if (v0)
    v6 = sub_10006B7F4;
  else
    v6 = sub_10006B6F4;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_10006B6F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 360);
  swift_release(*(_QWORD *)(v0 + 472));
  v6 = v4 + *(int *)(v5 + 20);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 496) = v7;
  v7(v1, v6, v2);
  sub_10001F040(v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1000B2B64);
  *(_QWORD *)(v0 + 504) = v8;
  *v8 = v0;
  v8[1] = sub_10006B794;
  return DeviceSyncTracker.lastReprocess(_:)(*(_QWORD *)(v0 + 400), *(_BYTE *)(v0 + 680));
}

uint64_t sub_10006B794()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 504);
  *(_QWORD *)(*v1 + 512) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10006BD68;
  else
    v4 = sub_10006B948;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
}

uint64_t sub_10006B7F4()
{
  _QWORD *v0;

  swift_release(v0[59]);
  return swift_task_switch(sub_10006B82C, v0[56], v0[57]);
}

uint64_t sub_10006B82C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  swift_release(*(_QWORD *)(v0 + 432));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 400);
  v7 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 360);
  v10 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 344);
  v11 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 328);
  v14 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006B948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *log;
  os_log_type_t type;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 368);
  v4 = sub_100009174(&qword_1000B3DD8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v5 = dispatch thunk of static Comparable.< infix(_:_:)(v2, v1, v3, v4);
  if ((v5 & 1) != 0)
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1000B2BA4);
    *(_QWORD *)(v0 + 520) = v6;
    *v6 = v0;
    v6[1] = sub_10006BE90;
    return DeviceSyncTracker.clearDeviceWantsSync(_:_:)(*(_BYTE *)(v0 + 680), 0x657669746361, 0xE600000000000000);
  }
  else
  {
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
    v9 = *(_QWORD *)(v0 + 400);
    v10 = *(_QWORD *)(v0 + 408);
    v12 = *(_QWORD *)(v0 + 384);
    v11 = *(_QWORD *)(v0 + 392);
    v13 = *(_QWORD *)(v0 + 368);
    v14 = *(_QWORD *)(v0 + 192);
    static Log.session.getter(v5);
    v8(v11, v10, v13);
    v8(v12, v9, v13);
    v15 = swift_retain(v14);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      type = v17;
      log = v16;
      v18 = *(_QWORD *)(v0 + 392);
      v19 = *(_QWORD *)(v0 + 368);
      v42 = *(_QWORD *)(v0 + 384);
      v43 = *(_QWORD *)(v0 + 376);
      v47 = *(_QWORD *)(v0 + 304);
      v48 = *(_QWORD *)(v0 + 296);
      v49 = *(_QWORD *)(v0 + 344);
      v41 = *(_QWORD *)(v0 + 192);
      v20 = *(unsigned __int8 *)(v0 + 680);
      v21 = swift_slowAlloc(42, -1);
      v46 = swift_slowAlloc(128, -1);
      v50 = v46;
      *(_DWORD *)v21 = 136315906;
      *(_QWORD *)(v0 + 144) = sub_100021438(0x657669746361, 0xE600000000000000, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v21 + 4, v21 + 12);
      *(_WORD *)(v21 + 12) = 2080;
      v22 = PhotosFaceType.description.getter(v20);
      v24 = v23;
      *(_QWORD *)(v0 + 152) = sub_100021438(v22, v23, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease(v24);
      swift_release(v41);
      *(_WORD *)(v21 + 22) = 2080;
      v25 = sub_100009174(&qword_1000B3160, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v19, v25);
      v28 = v27;
      *(_QWORD *)(v0 + 160) = sub_100021438(v26, v27, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v21 + 24, v21 + 32);
      swift_bridgeObjectRelease(v28);
      v29 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v29(v18, v19);
      *(_WORD *)(v21 + 32) = 2080;
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v19, v25);
      v32 = v31;
      *(_QWORD *)(v0 + 168) = sub_100021438(v30, v31, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v21 + 34, v21 + 42);
      swift_bridgeObjectRelease(v32);
      v29(v42, v19);
      _os_log_impl((void *)&_mh_execute_header, log, type, "No new data available for device '%s', type=%s. Last sync was %s. Latest data was generated at %s. Recording the fact that the device wants an update.", (uint8_t *)v21, 0x2Au);
      swift_arrayDestroy(v46, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v49, v48);
    }
    else
    {
      v34 = *(_QWORD *)(v0 + 384);
      v33 = *(_QWORD *)(v0 + 392);
      v35 = *(_QWORD *)(v0 + 368);
      v36 = *(_QWORD *)(v0 + 376);
      v37 = *(_QWORD *)(v0 + 344);
      v38 = *(_QWORD *)(v0 + 296);
      v39 = *(_QWORD *)(v0 + 304);
      swift_release(*(_QWORD *)(v0 + 192));
      v29 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v29(v33, v35);
      v29(v34, v35);

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
    }
    *(_QWORD *)(v0 + 656) = v29;
    v40 = (_QWORD *)swift_task_alloc(dword_1000B2B9C);
    *(_QWORD *)(v0 + 664) = v40;
    *v40 = v0;
    v40[1] = sub_10006D848;
    return DeviceSyncTracker.setDeviceWantsSync(_:_:_:)(*(_BYTE *)(v0 + 680), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v0 + 416));
  }
}

uint64_t sub_10006BD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 376);
  swift_release(*(_QWORD *)(v0 + 432));
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v1, v3);
  v5(v2, v3);
  v6 = *(_QWORD *)(v0 + 408);
  v8 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 320);
  v14 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 240);
  v20 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006BE90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 520);
  *(_QWORD *)(*v1 + 528) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10006C114;
  else
    v4 = sub_10006BEF0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
}

uint64_t sub_10006BEF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v1 + 192);
  static Log.session.getter(a1);
  v3 = swift_retain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v19 = *(_QWORD *)(v1 + 304);
    v20 = *(_QWORD *)(v1 + 296);
    v21 = *(_QWORD *)(v1 + 336);
    v6 = *(_QWORD *)(v1 + 192);
    v7 = *(unsigned __int8 *)(v1 + 680);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v22 = v9;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v1 + 128) = sub_100021438(0x657669746361, 0xE600000000000000, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v10 = PhotosFaceType.description.getter(v7);
    v12 = v11;
    *(_QWORD *)(v1 + 136) = sub_100021438(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v12);
    swift_release(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Recording sync for device '%s', type=%s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v13 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v13(v21, v20);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 336);
    v15 = *(_QWORD *)(v1 + 296);
    v16 = *(_QWORD *)(v1 + 304);
    swift_release(*(_QWORD *)(v1 + 192));

    v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  *(_QWORD *)(v1 + 536) = v13;
  v17 = (_QWORD *)swift_task_alloc(dword_1000B2BAC);
  *(_QWORD *)(v1 + 544) = v17;
  *v17 = v1;
  v17[1] = sub_10006C24C;
  return DeviceSyncTracker.recordDeviceSync(_:_:_:)(*(_BYTE *)(v1 + 680), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v1 + 416));
}

uint64_t sub_10006C114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 376);
  swift_release(*(_QWORD *)(v0 + 432));
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v1, v4);
  v6(v2, v4);
  v7 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 400);
  v10 = *(_QWORD *)(v0 + 384);
  v11 = *(_QWORD *)(v0 + 360);
  v13 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 328);
  v17 = *(_QWORD *)(v0 + 312);
  v18 = *(_QWORD *)(v0 + 288);
  v19 = *(_QWORD *)(v0 + 264);
  v20 = *(_QWORD *)(v0 + 240);
  v21 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C24C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 544);
  *(_QWORD *)(*v1 + 552) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10006C590;
  else
    v4 = sub_10006C2AC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
}

uint64_t sub_10006C2AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v1 = SyncFacesRequest.cachedIdentifiers.getter();
  v2 = sub_100054F10(v1);
  v0[70] = v2;
  v3 = swift_bridgeObjectRelease(v1);
  v4 = SyncFacesRequest.trackedFaces.getter(v3);
  v5 = sub_100054F10(v4);
  v0[71] = v5;
  v6 = swift_bridgeObjectRelease(v4);
  static Log.photos.getter(v6);
  swift_bridgeObjectRetain_n(v2, 2);
  v7 = swift_bridgeObjectRetain_n(v5, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v28 = v0[41];
    v29 = (uint64_t (*)(uint64_t, uint64_t))v0[67];
    v26 = v0[34];
    v27 = v0[37];
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    v30 = v11;
    *(_DWORD *)v10 = 134218242;
    v12 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease(v2);
    v0[14] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v2);
    *(_WORD *)(v10 + 12) = 2080;
    v13 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v5);
    v15 = Set.description.getter(v14, v26, v13);
    v17 = v16;
    swift_bridgeObjectRelease(v5);
    v0[15] = sub_100021438(v15, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Remote device has %ld cached, and is requesting faces: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v18 = v29(v28, v27);
  }
  else
  {
    v19 = (uint64_t (*)(uint64_t, uint64_t))v0[67];
    v20 = v0[41];
    v21 = v0[37];
    swift_bridgeObjectRelease_n(v2, 2);
    swift_bridgeObjectRelease_n(v5, 2);

    v18 = v19(v20, v21);
  }
  v0[72] = static CommunicationActor.shared.getter(v18);
  v22 = type metadata accessor for AlbumDatabase(0);
  v23 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
  v24 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryList()[1]);
  v0[73] = v24;
  *v24 = v0;
  v24[1] = sub_10006C6C8;
  return dispatch thunk of PhotosFaceIDDatabase.queryList()(v22, v23);
}

uint64_t sub_10006C590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 376);
  swift_release(*(_QWORD *)(v0 + 432));
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v1, v4);
  v6(v2, v4);
  v7 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 400);
  v10 = *(_QWORD *)(v0 + 384);
  v11 = *(_QWORD *)(v0 + 360);
  v13 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 328);
  v17 = *(_QWORD *)(v0 + 312);
  v18 = *(_QWORD *)(v0 + 288);
  v19 = *(_QWORD *)(v0 + 264);
  v20 = *(_QWORD *)(v0 + 240);
  v21 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C6C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 584);
  v3[74] = a1;
  v3[75] = v1;
  swift_task_dealloc(v4);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v3[53], v3[55]);
  if (v1)
    v7 = sub_10006CD38;
  else
    v7 = sub_10006C758;
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_10006C758()
{
  _QWORD *v0;

  swift_release(v0[72]);
  return swift_task_switch(sub_10006C790, v0[56], v0[57]);
}

uint64_t sub_10006C790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  NSObject *log;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;

  v1 = *(_QWORD *)(v0 + 568);
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_9;
  v2 = PhotosFaceType.rawValue.getter(*(unsigned __int8 *)(v0 + 680));
  v4 = v3;
  v5 = PhotosFaceType.rawValue.getter(2);
  if (v2 == v5 && v4 == v6)
  {
    v10 = *(_QWORD *)(v0 + 568);
    swift_bridgeObjectRelease_n(v4, 2);
    v1 = v10;
    goto LABEL_9;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v4);
  if ((v9 & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 568);
LABEL_9:
    v11 = swift_bridgeObjectRelease(v1);
    v12 = *(char **)(v0 + 592);
    goto LABEL_10;
  }
  v56 = *(_QWORD *)(v0 + 592);
  v57 = *(_QWORD *)(v0 + 568);
  v12 = sub_10008CBEC(v56, v57, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, &qword_1000B29F0, (uint64_t)&protocol conformance descriptor for AlbumID, (void (*)(BOOL, uint64_t, uint64_t))sub_10004D8AC);
  swift_bridgeObjectRelease(v57);
  v11 = swift_bridgeObjectRelease(v56);
LABEL_10:
  *(_QWORD *)(v0 + 608) = v12;
  v13 = *(_QWORD *)(v0 + 192);
  static Log.session.getter(v11);
  swift_bridgeObjectRetain_n(v12, 4);
  v14 = swift_retain(v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v59 = v16;
    log = v15;
    v17 = *(_QWORD *)(v0 + 192);
    v18 = *(unsigned __int8 *)(v0 + 680);
    v19 = swift_slowAlloc(42, -1);
    v58 = swift_slowAlloc(96, -1);
    v64 = v58;
    *(_DWORD *)v19 = 136315906;
    v62 = v12;
    *(_QWORD *)(v0 + 80) = sub_100021438(0xD00000000000001BLL, 0x8000000100095340, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2080;
    v20 = PhotosFaceType.description.getter(v18);
    v22 = v21;
    *(_QWORD *)(v0 + 88) = sub_100021438(v20, v21, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease(v22);
    swift_release(v17);
    *(_WORD *)(v19 + 22) = 2048;
    v23 = *((_QWORD *)v12 + 2);
    swift_bridgeObjectRelease(v12);
    *(_QWORD *)(v0 + 96) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v19 + 24, v19 + 32);
    swift_bridgeObjectRelease(v12);
    v60 = (uint8_t *)v19;
    *(_WORD *)(v19 + 32) = 2080;
    if (v23)
    {
      v24 = *(_QWORD *)(v0 + 280);
      v25 = *(_QWORD *)(v0 + 256);
      v65 = _swiftEmptyArrayStorage;
      sub_10004D740(0, v23, 0);
      v26 = &v12[(*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)];
      v63 = *(_QWORD *)(v25 + 72);
      v27 = v25;
      v28 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 16);
      v29 = v65;
      do
      {
        v30 = *(_QWORD *)(v0 + 264);
        v31 = *(_QWORD *)(v0 + 248);
        v28(v30, v26, v31);
        v32 = sub_100009174(&qword_1000B29F0, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
        dispatch thunk of PhotosFaceID.id.getter(v31, v32);
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v31);
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
        {
          sub_10004D740(0, v29[2] + 1, 1);
          v29 = v65;
        }
        v34 = v29[2];
        v33 = v29[3];
        if (v34 >= v33 >> 1)
        {
          sub_10004D740(v33 > 1, v34 + 1, 1);
          v29 = v65;
        }
        v35 = *(_QWORD *)(v0 + 288);
        v36 = *(_QWORD *)(v0 + 272);
        v29[2] = v34 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))((unint64_t)v29+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v34, v35, v36);
        v65 = v29;
        v26 += v63;
        --v23;
      }
      while (v23);
      v12 = v62;
      swift_bridgeObjectRelease(v62);
    }
    else
    {
      swift_bridgeObjectRelease(v12);
      v29 = _swiftEmptyArrayStorage;
    }
    v37 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    v43 = *(_QWORD *)(v0 + 320);
    v44 = *(_QWORD *)(v0 + 296);
    v45 = Array.description.getter(v29, *(_QWORD *)(v0 + 272));
    v47 = v46;
    swift_bridgeObjectRelease(v29);
    *(_QWORD *)(v0 + 104) = sub_100021438(v45, v47, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v60 + 34, v60 + 42);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, log, v59, "%s type = %s, for faces: (%ld) %s", v60, 0x2Au);
    swift_arrayDestroy(v58, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v60, -1, -1);

    v41 = v43;
    v42 = v44;
  }
  else
  {
    v37 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    v38 = *(_QWORD *)(v0 + 320);
    v39 = *(_QWORD *)(v0 + 296);
    v40 = *(_QWORD *)(v0 + 192);
    swift_bridgeObjectRelease_n(v12, 4);
    swift_release(v40);

    v41 = v38;
    v42 = v39;
  }
  v37(v41, v42);
  v48 = *(_QWORD *)(v0 + 560);
  v49 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 16) = v12;
  v50 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 616) = v50;
  *(_QWORD *)(v50 + 16) = v49;
  *(_QWORD *)(v50 + 24) = v48;
  v51 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(predicate:)[1]);
  *(_QWORD *)(v0 + 624) = v51;
  v52 = sub_10000629C(&qword_1000B4140);
  v53 = sub_10000629C(&qword_1000B4148);
  *(_QWORD *)(v0 + 632) = v53;
  v54 = sub_100006454(&qword_1000B4150, &qword_1000B4140, (uint64_t)&protocol conformance descriptor for [A]);
  *v51 = v0;
  v51[1] = sub_10006CEC0;
  return Sequence.asyncMap<A>(predicate:)(&unk_1000B4138, v50, v52, v53, v54);
}

uint64_t sub_10006CD38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[71];
  v2 = v0[70];
  swift_release(v0[72]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10006CD88, v0[56], v0[57]);
}

uint64_t sub_10006CD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 376);
  swift_release(*(_QWORD *)(v0 + 432));
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v1, v4);
  v6(v2, v4);
  v7 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 400);
  v10 = *(_QWORD *)(v0 + 384);
  v11 = *(_QWORD *)(v0 + 360);
  v13 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 328);
  v17 = *(_QWORD *)(v0 + 312);
  v18 = *(_QWORD *)(v0 + 288);
  v19 = *(_QWORD *)(v0 + 264);
  v20 = *(_QWORD *)(v0 + 240);
  v21 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006CEC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 624);
  v3[80] = a1;
  v3[81] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[77];
    swift_bridgeObjectRelease(v3[70]);
    swift_task_dealloc(v5);
    v6 = v3[56];
    v7 = v3[57];
    v8 = sub_10006D704;
  }
  else
  {
    v9 = v3[77];
    v10 = v3[76];
    swift_bridgeObjectRelease(v3[70]);
    swift_bridgeObjectRelease(v10);
    swift_task_dealloc(v9);
    v6 = v3[56];
    v7 = v3[57];
    v8 = sub_10006CF6C;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_10006CF6C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(_QWORD, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  int64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  void *object;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  void *v46;
  Swift::String v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  os_log_type_t v85;
  uint64_t v86;
  NSObject *log;
  os_log_t loga;
  void (*v89)(uint64_t, char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;

  v1 = *(_QWORD *)(v0 + 640);
  swift_release(*(_QWORD *)(v0 + 432));
  v2 = _swiftEmptyArrayStorage;
  v98 = (uint64_t)_swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 640);
    v5 = (uint64_t *)(v4 + 32);
    swift_bridgeObjectRetain(v4);
    do
    {
      v6 = *v5++;
      swift_bridgeObjectRetain(v6);
      sub_100017AEC(v7);
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 640));
    v2 = (_QWORD *)v98;
  }
  v8 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 640));
  v9 = v2[2];
  if (v9)
  {
    v10 = *(_QWORD *)(v0 + 232);
    v11 = (char *)v2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    v13 = *(void (**)(_QWORD, char *, uint64_t, __n128))(v10 + 16);
    v14 = swift_bridgeObjectRetain(v2);
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)(v0 + 224);
      v13(*(_QWORD *)(v0 + 240), v11, v16, v14);
      v17 = SyncedPhotosFace.photos.getter(v16);
      v18 = *(_QWORD *)(v17 + 16);
      result = swift_bridgeObjectRelease(v17);
      v20 = __OFADD__(v15, v18);
      v15 += v18;
      if (v20)
        break;
      (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
      v11 += v12;
      if (!--v9)
      {
        v8 = swift_bridgeObjectRelease(v2);
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  else
  {
    v15 = 0;
LABEL_11:
    v21 = *(_QWORD *)(v0 + 192);
    static Log.session.getter(v8);
    swift_bridgeObjectRetain_n(v2, 4);
    v22 = swift_retain(v21);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v85 = v24;
      log = v23;
      v25 = *(_QWORD *)(v0 + 192);
      v26 = *(unsigned __int8 *)(v0 + 680);
      v27 = swift_slowAlloc(52, -1);
      v81 = swift_slowAlloc(96, -1);
      v96 = v81;
      *(_DWORD *)v27 = 136316162;
      *(_QWORD *)(v0 + 32) = sub_100021438(0xD00000000000001BLL, 0x8000000100095340, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
      *(_WORD *)(v27 + 12) = 2080;
      v28 = PhotosFaceType.description.getter(v26);
      v30 = v29;
      *(_QWORD *)(v0 + 40) = sub_100021438(v28, v29, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease(v30);
      swift_release(v25);
      *(_WORD *)(v27 + 22) = 2048;
      v31 = v2;
      v32 = v2[2];
      swift_bridgeObjectRelease(v31);
      *(_QWORD *)(v0 + 48) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v27 + 24, v27 + 32);
      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v27 + 32) = 2048;
      *(_QWORD *)(v0 + 56) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v27 + 34, v27 + 42);
      v83 = (uint8_t *)v27;
      *(_WORD *)(v27 + 42) = 2080;
      if (v32)
      {
        v93 = *(_QWORD *)(v0 + 256);
        v33 = *(_QWORD *)(v0 + 232);
        v97 = _swiftEmptyArrayStorage;
        sub_10004D838(0, v32, 0);
        v78 = v31;
        v34 = (char *)v31
            + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
        v89 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
        v91 = *(_QWORD *)(v33 + 72);
        do
        {
          v35 = *(_QWORD *)(v0 + 264);
          v37 = *(_QWORD *)(v0 + 240);
          v36 = *(_QWORD *)(v0 + 248);
          v38 = *(_QWORD *)(v0 + 224);
          v89(v37, v34, v38);
          v98 = 0;
          v99 = 0xE000000000000000;
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease(v99);
          v98 = 0x203D20646928;
          v99 = 0xE600000000000000;
          SyncedPhotosFace.id.getter(v38);
          v39 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
          v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v36, v39);
          object = v40._object;
          String.append(_:)(v40);
          swift_bridgeObjectRelease(object);
          (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v35, v36);
          v42._countAndFlagsBits = 0x736F746F6870202CLL;
          v42._object = (void *)0xEB00000000203D20;
          String.append(_:)(v42);
          v43 = SyncedPhotosFace.photos.getter(v38);
          v44 = *(_QWORD *)(v43 + 16);
          swift_bridgeObjectRelease(v43);
          *(_QWORD *)(v0 + 64) = v44;
          v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          v46 = v45._object;
          String.append(_:)(v45);
          swift_bridgeObjectRelease(v46);
          v47._countAndFlagsBits = 41;
          v47._object = (void *)0xE100000000000000;
          String.append(_:)(v47);
          v48 = v98;
          v49 = v99;
          (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v37, v38);
          v50 = v97;
          if ((swift_isUniquelyReferenced_nonNull_native(v97) & 1) == 0)
          {
            sub_10004D838(0, v50[2] + 1, 1);
            v50 = v97;
          }
          v52 = v50[2];
          v51 = v50[3];
          if (v52 >= v51 >> 1)
          {
            sub_10004D838(v51 > 1, v52 + 1, 1);
            v50 = v97;
          }
          v50[2] = v52 + 1;
          v53 = &v50[2 * v52];
          v53[4] = v48;
          v53[5] = v49;
          v34 += v91;
          --v32;
        }
        while (v32);
        v58 = v78;
        swift_bridgeObjectRelease(v78);
      }
      else
      {
        swift_bridgeObjectRelease(v31);
        v50 = _swiftEmptyArrayStorage;
        v58 = v31;
      }
      v59 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
      v60 = *(_QWORD *)(v0 + 312);
      v61 = *(_QWORD *)(v0 + 296);
      v62 = Array.description.getter(v50, &type metadata for String);
      v64 = v63;
      swift_bridgeObjectRelease(v50);
      *(_QWORD *)(v0 + 72) = sub_100021438(v62, v64, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v83 + 44, v83 + 52);
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, log, v85, "%s type = %s, result: (faces=%ld, photos=%ld) %s", v83, 0x34u);
      swift_arrayDestroy(v81, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1, -1);
      swift_slowDealloc(v83, -1, -1);

      v59(v60, v61);
      v2 = v58;
    }
    else
    {
      v54 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
      v55 = *(_QWORD *)(v0 + 312);
      v56 = *(_QWORD *)(v0 + 296);
      v57 = *(_QWORD *)(v0 + 192);
      swift_bridgeObjectRelease_n(v2, 4);
      swift_release(v57);

      v54(v55, v56);
    }
    v65 = *(_QWORD *)(v0 + 632);
    v66 = *(_QWORD *)(v0 + 416);
    v75 = *(_QWORD *)(v0 + 400);
    v76 = *(_QWORD *)(v0 + 408);
    v77 = *(_QWORD *)(v0 + 392);
    v79 = *(_QWORD *)(v0 + 384);
    v67 = *(_QWORD *)(v0 + 368);
    v74 = *(_QWORD *)(v0 + 376);
    v80 = *(_QWORD *)(v0 + 360);
    v82 = *(_QWORD *)(v0 + 344);
    v84 = *(_QWORD *)(v0 + 336);
    v86 = *(_QWORD *)(v0 + 328);
    loga = *(os_log_t *)(v0 + 320);
    v90 = *(_QWORD *)(v0 + 312);
    v92 = *(_QWORD *)(v0 + 288);
    v94 = *(_QWORD *)(v0 + 264);
    v95 = *(_QWORD *)(v0 + 240);
    v69 = *(_QWORD *)(v0 + 208);
    v68 = *(_QWORD *)(v0 + 216);
    v70 = *(_QWORD *)(v0 + 200);
    *(_QWORD *)(v0 + 24) = v2;
    v71 = sub_100006454(&qword_1000B4158, &qword_1000B4148, (uint64_t)&protocol conformance descriptor for [A]);
    Sequence.async.getter(v65, v71);
    swift_bridgeObjectRelease(v2);
    v72 = sub_100006454(&qword_1000B4120, &qword_1000B4118, (uint64_t)&protocol conformance descriptor for AsyncSyncSequence<A>);
    AsyncSequence<>.throwing.getter(v70, v72);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
    v73 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
    v73(v75, v67);
    v73(v76, v67);
    v73(v66, v67);
    swift_task_dealloc(v66);
    swift_task_dealloc(v76);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(loga);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v68);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_10006D704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 608);
  v3 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 376);
  swift_release(*(_QWORD *)(v0 + 432));
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3, v5);
  v7(v2, v5);
  swift_bridgeObjectRelease(v1);
  v8 = *(_QWORD *)(v0 + 408);
  v10 = *(_QWORD *)(v0 + 392);
  v9 = *(_QWORD *)(v0 + 400);
  v11 = *(_QWORD *)(v0 + 384);
  v12 = *(_QWORD *)(v0 + 360);
  v14 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 344);
  v15 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 312);
  v19 = *(_QWORD *)(v0 + 288);
  v20 = *(_QWORD *)(v0 + 264);
  v21 = *(_QWORD *)(v0 + 240);
  v22 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006D848()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 664);
  *(_QWORD *)(*v1 + 672) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10006DAD0;
  else
    v4 = sub_10006D8A8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 448), *(_QWORD *)(v2 + 456));
}

uint64_t sub_10006D8A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v1 + 192);
  static Log.session.getter(a1);
  v3 = swift_retain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v20 = *(_QWORD *)(v1 + 304);
    v21 = *(_QWORD *)(v1 + 296);
    v22 = *(_QWORD *)(v1 + 336);
    v6 = *(_QWORD *)(v1 + 192);
    v7 = *(unsigned __int8 *)(v1 + 680);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v23 = v9;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v1 + 128) = sub_100021438(0x657669746361, 0xE600000000000000, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v10 = PhotosFaceType.description.getter(v7);
    v12 = v11;
    *(_QWORD *)(v1 + 136) = sub_100021438(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v8 + 14, v8 + 22);
    swift_release(v6);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Recording sync for device '%s', type=%s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v13 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v13(v22, v21);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 336);
    v15 = *(_QWORD *)(v1 + 296);
    v16 = *(_QWORD *)(v1 + 304);
    v17 = *(_QWORD *)(v1 + 192);

    swift_release(v17);
    v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  *(_QWORD *)(v1 + 536) = v13;
  v18 = (_QWORD *)swift_task_alloc(dword_1000B2BAC);
  *(_QWORD *)(v1 + 544) = v18;
  *v18 = v1;
  v18[1] = sub_10006C24C;
  return DeviceSyncTracker.recordDeviceSync(_:_:_:)(*(_BYTE *)(v1 + 680), 0x657669746361, 0xE600000000000000, *(_QWORD *)(v1 + 416));
}

uint64_t sub_10006DAD0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 656);
  v2 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 368);
  swift_release(*(_QWORD *)(v0 + 432));
  v1(v4, v5);
  v1(v2, v5);
  v1(v3, v5);
  v6 = *(_QWORD *)(v0 + 408);
  v8 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 320);
  v14 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 240);
  v20 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006DC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for ShuffleID(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[8] = v6;
  v3[9] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommunicationActor(0);
  v3[10] = v7;
  v3[11] = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3[12] = v8;
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  return swift_task_switch(sub_10006DCD0, v9, v10);
}

uint64_t sub_10006DCD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD **)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v8 = swift_release(*(_QWORD *)(v0 + 88));
  v9 = static CommunicationActor.shared.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v4);
  v10 = *(unsigned __int8 *)(v3 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_1000AEF20, v11 + v2, v10 | 7);
  *(_QWORD *)(v12 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12 + v11, v1, v4);
  v7[3] = sub_10000629C(&qword_1000B3220);
  v13 = sub_100006410(&qword_1000B31F8);
  *(_QWORD *)(v0 + 16) = v13;
  v7[4] = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  sub_10003D62C(v7);
  swift_retain(v6);
  generateElements<A>(isolation:_:)(v9, v15, &unk_1000B3E70, v12, v13);
  swift_release(v12);
  swift_release(v9);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006DE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for ShuffleID(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[8] = v6;
  v3[9] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommunicationActor(0);
  v3[10] = v7;
  v3[11] = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3[12] = v8;
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  return swift_task_switch(sub_10006DEE0, v9, v10);
}

uint64_t sub_10006DEE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD **)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v8 = swift_release(*(_QWORD *)(v0 + 88));
  v9 = static CommunicationActor.shared.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v4);
  v10 = *(unsigned __int8 *)(v3 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_1000AF038, v11 + v2, v10 | 7);
  *(_QWORD *)(v12 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12 + v11, v1, v4);
  v7[3] = sub_10000629C(&qword_1000B3220);
  v13 = sub_100006410(&qword_1000B31F8);
  *(_QWORD *)(v0 + 16) = v13;
  v7[4] = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  sub_10003D62C(v7);
  swift_retain(v6);
  generateElements<A>(isolation:_:)(v9, v15, &unk_1000B3FD8, v12, v13);
  swift_release(v12);
  swift_release(v9);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006E028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for AlbumID(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[8] = v6;
  v3[9] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommunicationActor(0);
  v3[10] = v7;
  v3[11] = static CommunicationActor.shared.getter(v7);
  v8 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v3[12] = v8;
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  return swift_task_switch(sub_10006E0F0, v9, v10);
}

uint64_t sub_10006E0F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD **)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v8 = swift_release(*(_QWORD *)(v0 + 88));
  v9 = static CommunicationActor.shared.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v4);
  v10 = *(unsigned __int8 *)(v3 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_1000AF150, v11 + v2, v10 | 7);
  *(_QWORD *)(v12 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12 + v11, v1, v4);
  v7[3] = sub_10000629C(&qword_1000B3220);
  v13 = sub_100006410(&qword_1000B31F8);
  *(_QWORD *)(v0 + 16) = v13;
  v7[4] = swift_getOpaqueTypeConformance2(v0 + 16, &opaque type descriptor for <<opaque return type of generateElements<A>(isolation:_:)>>, 1);
  sub_10003D62C(v7);
  swift_retain(v6);
  generateElements<A>(isolation:_:)(v9, v15, &unk_1000B41B0, v12, v13);
  swift_release(v12);
  swift_release(v9);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006E238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  v5 = sub_10000629C(&qword_1000B31F8);
  v4[11] = v5;
  v4[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v4[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[14] = v7;
  v4[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v4[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[17] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[18] = swift_task_alloc(v10);
  v4[19] = swift_task_alloc(v10);
  v11 = type metadata accessor for ShuffleID(0);
  v4[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[21] = v12;
  v4[22] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v4[23] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[24] = v14;
  v4[25] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for StoredPhoto(0);
  v4[26] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[27] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[28] = swift_task_alloc(v17);
  v4[29] = swift_task_alloc(v17);
  v18 = sub_10000629C(&qword_1000B31D0);
  v4[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10000629C(&qword_1000B38E8);
  v4[31] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v4[32] = v20;
  v4[33] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10000629C(&qword_1000B38F0);
  v4[34] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v4[35] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[36] = swift_task_alloc(v23);
  v4[37] = swift_task_alloc(v23);
  v24 = type metadata accessor for CommunicationActor(0);
  v4[38] = v24;
  v4[39] = static CommunicationActor.shared.getter(v24);
  v25 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4[40] = v25;
  v26 = dispatch thunk of Actor.unownedExecutor.getter(v24, v25);
  v4[41] = v26;
  v4[42] = v27;
  return swift_task_switch(sub_10006E470, v26, v27);
}

uint64_t sub_10006E470()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_BYTE *)(*(_QWORD *)(v0 + 72) + 16);
  *(_BYTE *)(v0 + 476) = v2;
  sub_100056AE8(0x50802u >> (8 * v2), v1, 1, *(_QWORD *)(v0 + 296));
  v3 = *(_QWORD *)(v0 + 272);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 280) + 16))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), v3);
  v4 = sub_100006454(&qword_1000B38F8, &qword_1000B38F0, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>);
  v5 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v3, v4);
  v6 = *(_QWORD *)(v0 + 320);
  v7 = static CommunicationActor.shared.getter(v5);
  *(_QWORD *)(v0 + 344) = v7;
  v8 = sub_100006454(&qword_1000B3900, &qword_1000B38E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
  v9 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 352) = v9;
  *v9 = v0;
  v9[1] = sub_10006E664;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 240), v7, v6, v0 + 16, *(_QWORD *)(v0 + 248), v8);
}

uint64_t sub_10006E664()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 352));
  swift_release(v2[43]);
  if (v0)
    v3 = sub_10008DD94;
  else
    v3 = sub_10006E6D4;
  return swift_task_switch(v3, v2[41], v2[42]);
}

uint64_t sub_10006E6D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 312);
    v6 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248));
    v10 = swift_release(v4);
    static Log.photos.getter(v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    v11 = swift_retain_n(v9, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v60 = *(_QWORD *)(v0 + 272);
      v62 = *(_QWORD *)(v0 + 296);
      v58 = *(_QWORD *)(v0 + 200);
      v59 = *(_QWORD *)(v0 + 280);
      v14 = *(_QWORD *)(v0 + 176);
      v56 = *(_QWORD *)(v0 + 192);
      v57 = *(_QWORD *)(v0 + 184);
      v15 = *(_QWORD *)(v0 + 160);
      v53 = *(_QWORD *)(v0 + 168);
      v55 = *(_QWORD *)(v0 + 72);
      v54 = *(unsigned __int8 *)(v0 + 476);
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(64, -1);
      v65 = v17;
      *(_DWORD *)v16 = 136315394;
      v18 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v19 = dispatch thunk of CustomStringConvertible.description.getter(v15, v18);
      v21 = v20;
      *(_QWORD *)(v0 + 24) = sub_100021438(v19, v20, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v21);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v14, v15);
      *(_WORD *)(v16 + 12) = 2080;
      v22 = PhotosFaceType.description.getter(v54);
      v24 = v23;
      *(_QWORD *)(v0 + 32) = sub_100021438(v22, v23, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease(v24);
      swift_release_n(v55, 2);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Completed tracking %s for type %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v58, v57);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v62, v60);
    }
    else
    {
      v63 = *(_QWORD *)(v0 + 296);
      v34 = *(_QWORD *)(v0 + 272);
      v35 = *(_QWORD *)(v0 + 280);
      v36 = v12;
      v37 = *(_QWORD *)(v0 + 192);
      v38 = *(_QWORD *)(v0 + 200);
      v40 = *(_QWORD *)(v0 + 176);
      v39 = *(_QWORD *)(v0 + 184);
      v42 = *(_QWORD *)(v0 + 160);
      v41 = *(_QWORD *)(v0 + 168);
      v43 = *(_QWORD *)(v0 + 72);

      swift_release_n(v43, 2);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v63, v34);
    }
    v44 = *(_QWORD *)(v0 + 288);
    v45 = *(_QWORD *)(v0 + 264);
    v47 = *(_QWORD *)(v0 + 232);
    v46 = *(_QWORD *)(v0 + 240);
    v48 = *(_QWORD *)(v0 + 224);
    v49 = *(_QWORD *)(v0 + 200);
    v50 = *(_QWORD *)(v0 + 176);
    v52 = *(_QWORD *)(v0 + 144);
    v51 = *(_QWORD *)(v0 + 152);
    v61 = *(_QWORD *)(v0 + 120);
    v64 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v61);
    swift_task_dealloc(v64);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 232);
    v26 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v25, v1, v2);
    *(_QWORD *)(v0 + 360) = *(_QWORD *)(v26 + 104);
    v27 = sub_10000629C(&qword_1000B34A0);
    v28 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 368) = v28;
    LODWORD(v29) = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 472) = v29;
    v29 = v29;
    v30 = (v29 + 32) & ~v29;
    v31 = swift_allocObject(v27, v30 + v28, v29 | 7);
    *(_QWORD *)(v0 + 376) = v31;
    *(_OWORD *)(v31 + 16) = xmmword_100096430;
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    *(_QWORD *)(v0 + 384) = v32;
    v32(v31 + v30, v25, v2);
    return swift_task_switch(sub_10006EAFC, 0, 0);
  }
}

uint64_t sub_10006EAFC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v0[5] = v0[47];
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(predicate:)[1]);
  v0[49] = v1;
  v2 = sub_10000629C(&qword_1000B3DA8);
  v3 = sub_100006454(&qword_1000B3DB0, &qword_1000B3DA8, (uint64_t)&protocol conformance descriptor for [A]);
  *v1 = v0;
  v1[1] = sub_10006EBA0;
  return Sequence.asyncMap<A>(predicate:)(&unk_1000B3E78, v0[45], v2, v0[26], v3);
}

uint64_t sub_10006EBA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 392);
  v3[50] = a1;
  v3[51] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10006EF24;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v3[47]);
    v6 = v3[41];
    v7 = v3[42];
    v5 = sub_10006EC18;
  }
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_10006EC18()
{
  _QWORD *v0;
  int64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v1 = *(_QWORD *)(v0[50] + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v0[6] = _swiftEmptyArrayStorage;
    v3 = sub_10004D740(0, v1, 0);
    v4 = 0;
    v2 = (_QWORD *)v0[6];
    do
    {
      StoredPhoto.localIdentifier.getter(v3);
      v0[6] = v2;
      v6 = v2[2];
      v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_10004D740(v5 > 1, v6 + 1, 1);
        v2 = (_QWORD *)v0[6];
      }
      ++v4;
      v8 = v0[17];
      v7 = v0[18];
      v9 = v0[16];
      v2[2] = v6 + 1;
      v3 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))((unint64_t)v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v6, v7, v9);
    }
    while (v1 != v4);
  }
  v0[52] = v2;
  v10 = v0[20];
  v11 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  v12 = dispatch thunk of PhotosFaceID.id.getter(v10, v11);
  v13 = static TestProperties.fixedDay.getter(v12);
  if ((v14 & 1) == 0)
  {
    v15 = v13;
LABEL_17:
    v23 = type metadata accessor for GalleryDatabase(0);
    v24 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
    v25 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)[1]);
    v0[53] = v25;
    *v25 = v0;
    v25[1] = sub_10006EE68;
    return dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)(v2, v0[19], v15, v23, v24);
  }
  v17 = v0[14];
  v16 = v0[15];
  v18 = v0[13];
  v19 = Date.init()(v13);
  v20 = Date.timeIntervalSinceReferenceDate.getter(v19);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  result = static TestProperties.albumRotationEpoch.getter(result);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((uint64_t)v20 != 0x8000000000000000 || result != -1)
  {
    v15 = (uint64_t)v20 / result;
    goto LABEL_17;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_10006EE68()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v3);
  v4 = v2[52];
  if (v0)
  {
    v5 = v2[50];
    v6 = v2[19];
    v7 = v2[16];
    v8 = v2[17];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v9 = v2[41];
    v10 = v2[42];
    v11 = sub_10008DD7C;
  }
  else
  {
    v12 = v2[19];
    v13 = v2[16];
    v14 = v2[17];
    swift_bridgeObjectRelease(v4);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    v9 = v2[41];
    v10 = v2[42];
    v11 = sub_10006EF5C;
  }
  return swift_task_switch(v11, v9, v10);
}

uint64_t sub_10006EF24()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[47]);
  return swift_task_switch(sub_10008DD78, v0[41], v0[42]);
}

uint64_t sub_10006EF5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t result;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t (*v28)(_QWORD);

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 440) = v2;
  if (!v2)
  {
    v22 = *(_QWORD *)(v0 + 216);
    swift_bridgeObjectRelease(v1);
    v23 = (*(uint64_t (**)(_QWORD, _QWORD))(v22 + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 208));
    v24 = *(_QWORD *)(v0 + 320);
    v25 = static CommunicationActor.shared.getter(v23);
    *(_QWORD *)(v0 + 344) = v25;
    v26 = sub_100006454(&qword_1000B3900, &qword_1000B38E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
    v27 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 352) = v27;
    *v27 = v0;
    v27[1] = sub_10006E664;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 240), v25, v24, v0 + 16, *(_QWORD *)(v0 + 248), v26);
  }
  v3 = (*(unsigned __int8 *)(v0 + 472) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 472);
  *(_QWORD *)(v0 + 448) = 0;
  (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 224), v1 + v3, *(_QWORD *)(v0 + 208));
  v4 = sub_10000629C(&qword_1000B3590);
  v5 = swift_allocObject(v4, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100096430;
  v6 = static TestProperties.fixedDay.getter(v5);
  if ((v7 & 1) == 0)
  {
LABEL_12:
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 384);
    v16 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 88);
    v18 = *(uint64_t **)(v0 + 96);
    v20 = *(int **)(v0 + 56);
    *(_QWORD *)(v5 + 32) = v6;
    *v18 = v5;
    v15((char *)v18 + *(int *)(v19 + 48), v16, v17);
    v28 = (uint64_t (*)(_QWORD))((char *)v20 + *v20);
    v21 = (_QWORD *)swift_task_alloc(v20[1]);
    *(_QWORD *)(v0 + 456) = v21;
    *v21 = v0;
    v21[1] = sub_10006F19C;
    return v28(*(_QWORD *)(v0 + 96));
  }
  v9 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = Date.init()(v6);
  v12 = Date.timeIntervalSinceReferenceDate.getter(v11);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v12 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = static TestProperties.albumRotationEpoch.getter(result);
  if (result)
  {
    if ((uint64_t)v12 != 0x8000000000000000 || result != -1)
    {
      v6 = (uint64_t)v12 / result;
      goto LABEL_12;
    }
    goto LABEL_18;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10006F19C()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = (*v1)[57];
  (*v1)[58] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[50];
    sub_10000EA70(v2[12], &qword_1000B31F8);
    swift_bridgeObjectRelease(v4);
    v5 = v2[41];
    v6 = v2[42];
    v7 = sub_10008DE2C;
  }
  else
  {
    sub_10000EA70(v2[12], &qword_1000B31F8);
    v5 = v2[41];
    v6 = v2[42];
    v7 = sub_10006F22C;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_10006F22C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  uint64_t (*v27)(_QWORD);

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 448) + 1;
  v3 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8);
  v3(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 400));
    v4 = ((uint64_t (*)(_QWORD, _QWORD))v3)(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 208));
    v5 = *(_QWORD *)(v0 + 320);
    v6 = static CommunicationActor.shared.getter(v4);
    *(_QWORD *)(v0 + 344) = v6;
    v7 = sub_100006454(&qword_1000B3900, &qword_1000B38E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
    v8 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 352) = v8;
    *v8 = v0;
    v8[1] = sub_10006E664;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 240), v6, v5, v0 + 16, *(_QWORD *)(v0 + 248), v7);
  }
  v10 = *(_QWORD *)(v0 + 448) + 1;
  *(_QWORD *)(v0 + 448) = v10;
  (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 400)+ ((*(unsigned __int8 *)(v0 + 472) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 472))+ *(_QWORD *)(v0 + 368) * v10, *(_QWORD *)(v0 + 208));
  v11 = sub_10000629C(&qword_1000B3590);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100096430;
  v13 = static TestProperties.fixedDay.getter(v12);
  if ((v14 & 1) == 0)
    goto LABEL_11;
  v16 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 104);
  v18 = Date.init()(v13);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v19 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = static TestProperties.albumRotationEpoch.getter(result);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((uint64_t)v19 != 0x8000000000000000 || result != -1)
  {
    v13 = (uint64_t)v19 / result;
LABEL_11:
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 384);
    v21 = *(_QWORD *)(v0 + 224);
    v22 = *(_QWORD *)(v0 + 208);
    v24 = *(_QWORD *)(v0 + 88);
    v23 = *(uint64_t **)(v0 + 96);
    v25 = *(int **)(v0 + 56);
    *(_QWORD *)(v12 + 32) = v13;
    *v23 = v12;
    v20((char *)v23 + *(int *)(v24 + 48), v21, v22);
    v27 = (uint64_t (*)(_QWORD))((char *)v25 + *v25);
    v26 = (_QWORD *)swift_task_alloc(v25[1]);
    *(_QWORD *)(v0 + 456) = v26;
    *v26 = v0;
    v26[1] = sub_10006F19C;
    return v27(*(_QWORD *)(v0 + 96));
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_10006F48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  v5 = sub_10000629C(&qword_1000B31F8);
  v4[11] = v5;
  v4[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v4[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[14] = v7;
  v4[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v4[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[17] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[18] = swift_task_alloc(v10);
  v4[19] = swift_task_alloc(v10);
  v11 = type metadata accessor for ShuffleID(0);
  v4[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[21] = v12;
  v4[22] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v4[23] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[24] = v14;
  v4[25] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for StoredPhoto(0);
  v4[26] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[27] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[28] = swift_task_alloc(v17);
  v4[29] = swift_task_alloc(v17);
  v18 = sub_10000629C(&qword_1000B31D0);
  v4[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10000629C(&qword_1000B38E8);
  v4[31] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v4[32] = v20;
  v4[33] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10000629C(&qword_1000B38F0);
  v4[34] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v4[35] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[36] = swift_task_alloc(v23);
  v4[37] = swift_task_alloc(v23);
  v24 = type metadata accessor for CommunicationActor(0);
  v4[38] = v24;
  v4[39] = static CommunicationActor.shared.getter(v24);
  v25 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4[40] = v25;
  v26 = dispatch thunk of Actor.unownedExecutor.getter(v24, v25);
  v4[41] = v26;
  v4[42] = v27;
  return swift_task_switch(sub_10006F6C4, v26, v27);
}

uint64_t sub_10006F6C4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_BYTE *)(*(_QWORD *)(v0 + 72) + 16);
  *(_BYTE *)(v0 + 476) = v2;
  sub_100056AE8(0x50802u >> (8 * v2), v1, 1, *(_QWORD *)(v0 + 296));
  v3 = *(_QWORD *)(v0 + 272);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 280) + 16))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), v3);
  v4 = sub_100006454(&qword_1000B38F8, &qword_1000B38F0, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>);
  v5 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v3, v4);
  v6 = *(_QWORD *)(v0 + 320);
  v7 = static CommunicationActor.shared.getter(v5);
  *(_QWORD *)(v0 + 344) = v7;
  v8 = sub_100006454(&qword_1000B3900, &qword_1000B38E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
  v9 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 352) = v9;
  *v9 = v0;
  v9[1] = sub_10006F8B8;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 240), v7, v6, v0 + 16, *(_QWORD *)(v0 + 248), v8);
}

uint64_t sub_10006F8B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 352));
  swift_release(v2[43]);
  if (v0)
    v3 = sub_10008DD94;
  else
    v3 = sub_10006F928;
  return swift_task_switch(v3, v2[41], v2[42]);
}

uint64_t sub_10006F928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 312);
    v6 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248));
    v10 = swift_release(v4);
    static Log.photos.getter(v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    v11 = swift_retain_n(v9, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v60 = *(_QWORD *)(v0 + 272);
      v62 = *(_QWORD *)(v0 + 296);
      v58 = *(_QWORD *)(v0 + 200);
      v59 = *(_QWORD *)(v0 + 280);
      v14 = *(_QWORD *)(v0 + 176);
      v56 = *(_QWORD *)(v0 + 192);
      v57 = *(_QWORD *)(v0 + 184);
      v15 = *(_QWORD *)(v0 + 160);
      v53 = *(_QWORD *)(v0 + 168);
      v55 = *(_QWORD *)(v0 + 72);
      v54 = *(unsigned __int8 *)(v0 + 476);
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(64, -1);
      v65 = v17;
      *(_DWORD *)v16 = 136315394;
      v18 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v19 = dispatch thunk of CustomStringConvertible.description.getter(v15, v18);
      v21 = v20;
      *(_QWORD *)(v0 + 24) = sub_100021438(v19, v20, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v21);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v14, v15);
      *(_WORD *)(v16 + 12) = 2080;
      v22 = PhotosFaceType.description.getter(v54);
      v24 = v23;
      *(_QWORD *)(v0 + 32) = sub_100021438(v22, v23, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease(v24);
      swift_release_n(v55, 2);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Completed tracking %s for type %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v58, v57);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v62, v60);
    }
    else
    {
      v63 = *(_QWORD *)(v0 + 296);
      v34 = *(_QWORD *)(v0 + 272);
      v35 = *(_QWORD *)(v0 + 280);
      v36 = v12;
      v37 = *(_QWORD *)(v0 + 192);
      v38 = *(_QWORD *)(v0 + 200);
      v40 = *(_QWORD *)(v0 + 176);
      v39 = *(_QWORD *)(v0 + 184);
      v42 = *(_QWORD *)(v0 + 160);
      v41 = *(_QWORD *)(v0 + 168);
      v43 = *(_QWORD *)(v0 + 72);

      swift_release_n(v43, 2);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v63, v34);
    }
    v44 = *(_QWORD *)(v0 + 288);
    v45 = *(_QWORD *)(v0 + 264);
    v47 = *(_QWORD *)(v0 + 232);
    v46 = *(_QWORD *)(v0 + 240);
    v48 = *(_QWORD *)(v0 + 224);
    v49 = *(_QWORD *)(v0 + 200);
    v50 = *(_QWORD *)(v0 + 176);
    v52 = *(_QWORD *)(v0 + 144);
    v51 = *(_QWORD *)(v0 + 152);
    v61 = *(_QWORD *)(v0 + 120);
    v64 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v61);
    swift_task_dealloc(v64);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 232);
    v26 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v25, v1, v2);
    *(_QWORD *)(v0 + 360) = *(_QWORD *)(v26 + 104);
    v27 = sub_10000629C(&qword_1000B34A0);
    v28 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 368) = v28;
    LODWORD(v29) = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 472) = v29;
    v29 = v29;
    v30 = (v29 + 32) & ~v29;
    v31 = swift_allocObject(v27, v30 + v28, v29 | 7);
    *(_QWORD *)(v0 + 376) = v31;
    *(_OWORD *)(v31 + 16) = xmmword_100096430;
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    *(_QWORD *)(v0 + 384) = v32;
    v32(v31 + v30, v25, v2);
    return swift_task_switch(sub_10006FD50, 0, 0);
  }
}

uint64_t sub_10006FD50()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v0[5] = v0[47];
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(predicate:)[1]);
  v0[49] = v1;
  v2 = sub_10000629C(&qword_1000B3DA8);
  v3 = sub_100006454(&qword_1000B3DB0, &qword_1000B3DA8, (uint64_t)&protocol conformance descriptor for [A]);
  *v1 = v0;
  v1[1] = sub_10006FDF4;
  return Sequence.asyncMap<A>(predicate:)(&unk_1000B3FE0, v0[45], v2, v0[26], v3);
}

uint64_t sub_10006FDF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 392);
  v3[50] = a1;
  v3[51] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10006EF24;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v3[47]);
    v6 = v3[41];
    v7 = v3[42];
    v5 = sub_10006FE6C;
  }
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_10006FE6C()
{
  _QWORD *v0;
  int64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v1 = *(_QWORD *)(v0[50] + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v0[6] = _swiftEmptyArrayStorage;
    v3 = sub_10004D740(0, v1, 0);
    v4 = 0;
    v2 = (_QWORD *)v0[6];
    do
    {
      StoredPhoto.localIdentifier.getter(v3);
      v0[6] = v2;
      v6 = v2[2];
      v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_10004D740(v5 > 1, v6 + 1, 1);
        v2 = (_QWORD *)v0[6];
      }
      ++v4;
      v8 = v0[17];
      v7 = v0[18];
      v9 = v0[16];
      v2[2] = v6 + 1;
      v3 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))((unint64_t)v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v6, v7, v9);
    }
    while (v1 != v4);
  }
  v0[52] = v2;
  v10 = v0[20];
  v11 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  v12 = dispatch thunk of PhotosFaceID.id.getter(v10, v11);
  v13 = static TestProperties.fixedDay.getter(v12);
  if ((v14 & 1) == 0)
  {
    v15 = v13;
LABEL_17:
    v23 = type metadata accessor for ShuffleDatabase(0);
    v24 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
    v25 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)[1]);
    v0[53] = v25;
    *v25 = v0;
    v25[1] = sub_1000700BC;
    return dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)(v2, v0[19], v15, v23, v24);
  }
  v17 = v0[14];
  v16 = v0[15];
  v18 = v0[13];
  v19 = Date.init()(v13);
  v20 = Date.timeIntervalSinceReferenceDate.getter(v19);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  result = static TestProperties.albumRotationEpoch.getter(result);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((uint64_t)v20 != 0x8000000000000000 || result != -1)
  {
    v15 = (uint64_t)v20 / result;
    goto LABEL_17;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1000700BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v3);
  v4 = v2[52];
  if (v0)
  {
    v5 = v2[50];
    v6 = v2[19];
    v7 = v2[16];
    v8 = v2[17];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v9 = v2[41];
    v10 = v2[42];
    v11 = sub_10008DD7C;
  }
  else
  {
    v12 = v2[19];
    v13 = v2[16];
    v14 = v2[17];
    swift_bridgeObjectRelease(v4);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    v9 = v2[41];
    v10 = v2[42];
    v11 = sub_100070178;
  }
  return swift_task_switch(v11, v9, v10);
}

uint64_t sub_100070178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t result;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t (*v28)(_QWORD);

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 440) = v2;
  if (!v2)
  {
    v22 = *(_QWORD *)(v0 + 216);
    swift_bridgeObjectRelease(v1);
    v23 = (*(uint64_t (**)(_QWORD, _QWORD))(v22 + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 208));
    v24 = *(_QWORD *)(v0 + 320);
    v25 = static CommunicationActor.shared.getter(v23);
    *(_QWORD *)(v0 + 344) = v25;
    v26 = sub_100006454(&qword_1000B3900, &qword_1000B38E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
    v27 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 352) = v27;
    *v27 = v0;
    v27[1] = sub_10006F8B8;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 240), v25, v24, v0 + 16, *(_QWORD *)(v0 + 248), v26);
  }
  v3 = (*(unsigned __int8 *)(v0 + 472) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 472);
  *(_QWORD *)(v0 + 448) = 0;
  (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 224), v1 + v3, *(_QWORD *)(v0 + 208));
  v4 = sub_10000629C(&qword_1000B3590);
  v5 = swift_allocObject(v4, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100096430;
  v6 = static TestProperties.fixedDay.getter(v5);
  if ((v7 & 1) == 0)
  {
LABEL_12:
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 384);
    v16 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 88);
    v18 = *(uint64_t **)(v0 + 96);
    v20 = *(int **)(v0 + 56);
    *(_QWORD *)(v5 + 32) = v6;
    *v18 = v5;
    v15((char *)v18 + *(int *)(v19 + 48), v16, v17);
    v28 = (uint64_t (*)(_QWORD))((char *)v20 + *v20);
    v21 = (_QWORD *)swift_task_alloc(v20[1]);
    *(_QWORD *)(v0 + 456) = v21;
    *v21 = v0;
    v21[1] = sub_1000703B8;
    return v28(*(_QWORD *)(v0 + 96));
  }
  v9 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = Date.init()(v6);
  v12 = Date.timeIntervalSinceReferenceDate.getter(v11);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v12 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = static TestProperties.albumRotationEpoch.getter(result);
  if (result)
  {
    if ((uint64_t)v12 != 0x8000000000000000 || result != -1)
    {
      v6 = (uint64_t)v12 / result;
      goto LABEL_12;
    }
    goto LABEL_18;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000703B8()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = (*v1)[57];
  (*v1)[58] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[50];
    sub_10000EA70(v2[12], &qword_1000B31F8);
    swift_bridgeObjectRelease(v4);
    v5 = v2[41];
    v6 = v2[42];
    v7 = sub_10008DE2C;
  }
  else
  {
    sub_10000EA70(v2[12], &qword_1000B31F8);
    v5 = v2[41];
    v6 = v2[42];
    v7 = sub_100070448;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_100070448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  uint64_t (*v27)(_QWORD);

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 448) + 1;
  v3 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8);
  v3(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 400));
    v4 = ((uint64_t (*)(_QWORD, _QWORD))v3)(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 208));
    v5 = *(_QWORD *)(v0 + 320);
    v6 = static CommunicationActor.shared.getter(v4);
    *(_QWORD *)(v0 + 344) = v6;
    v7 = sub_100006454(&qword_1000B3900, &qword_1000B38E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
    v8 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 352) = v8;
    *v8 = v0;
    v8[1] = sub_10006F8B8;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 240), v6, v5, v0 + 16, *(_QWORD *)(v0 + 248), v7);
  }
  v10 = *(_QWORD *)(v0 + 448) + 1;
  *(_QWORD *)(v0 + 448) = v10;
  (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 400)+ ((*(unsigned __int8 *)(v0 + 472) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 472))+ *(_QWORD *)(v0 + 368) * v10, *(_QWORD *)(v0 + 208));
  v11 = sub_10000629C(&qword_1000B3590);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100096430;
  v13 = static TestProperties.fixedDay.getter(v12);
  if ((v14 & 1) == 0)
    goto LABEL_11;
  v16 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 104);
  v18 = Date.init()(v13);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v19 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = static TestProperties.albumRotationEpoch.getter(result);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((uint64_t)v19 != 0x8000000000000000 || result != -1)
  {
    v13 = (uint64_t)v19 / result;
LABEL_11:
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 384);
    v21 = *(_QWORD *)(v0 + 224);
    v22 = *(_QWORD *)(v0 + 208);
    v24 = *(_QWORD *)(v0 + 88);
    v23 = *(uint64_t **)(v0 + 96);
    v25 = *(int **)(v0 + 56);
    *(_QWORD *)(v12 + 32) = v13;
    *v23 = v12;
    v20((char *)v23 + *(int *)(v24 + 48), v21, v22);
    v27 = (uint64_t (*)(_QWORD))((char *)v25 + *v25);
    v26 = (_QWORD *)swift_task_alloc(v25[1]);
    *(_QWORD *)(v0 + 456) = v26;
    *v26 = v0;
    v26[1] = sub_1000703B8;
    return v27(*(_QWORD *)(v0 + 96));
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1000706A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  v5 = sub_10000629C(&qword_1000B31F8);
  v4[11] = v5;
  v4[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v4[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[14] = v7;
  v4[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v4[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[17] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[18] = swift_task_alloc(v10);
  v4[19] = swift_task_alloc(v10);
  v11 = type metadata accessor for AlbumID(0);
  v4[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[21] = v12;
  v4[22] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v4[23] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[24] = v14;
  v4[25] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for StoredPhoto(0);
  v4[26] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[27] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[28] = swift_task_alloc(v17);
  v4[29] = swift_task_alloc(v17);
  v18 = sub_10000629C(&qword_1000B31D0);
  v4[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10000629C(&qword_1000B38E8);
  v4[31] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v4[32] = v20;
  v4[33] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10000629C(&qword_1000B38F0);
  v4[34] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v4[35] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[36] = swift_task_alloc(v23);
  v4[37] = swift_task_alloc(v23);
  v24 = type metadata accessor for CommunicationActor(0);
  v4[38] = v24;
  v4[39] = static CommunicationActor.shared.getter(v24);
  v25 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v4[40] = v25;
  v26 = dispatch thunk of Actor.unownedExecutor.getter(v24, v25);
  v4[41] = v26;
  v4[42] = v27;
  return swift_task_switch(sub_1000708E0, v26, v27);
}

uint64_t sub_1000708E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_BYTE *)(*(_QWORD *)(v0 + 72) + 16);
  *(_BYTE *)(v0 + 476) = v2;
  sub_100057254(0x50802u >> (8 * v2), v1, 1, *(_QWORD *)(v0 + 296));
  v3 = *(_QWORD *)(v0 + 272);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 280) + 16))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), v3);
  v4 = sub_100006454(&qword_1000B38F8, &qword_1000B38F0, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>);
  v5 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v3, v4);
  v6 = *(_QWORD *)(v0 + 320);
  v7 = static CommunicationActor.shared.getter(v5);
  *(_QWORD *)(v0 + 344) = v7;
  v8 = sub_100006454(&qword_1000B3900, &qword_1000B38E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
  v9 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 352) = v9;
  *v9 = v0;
  v9[1] = sub_100070AD4;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 240), v7, v6, v0 + 16, *(_QWORD *)(v0 + 248), v8);
}

uint64_t sub_100070AD4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 352));
  swift_release(v2[43]);
  if (v0)
    v3 = sub_100070F6C;
  else
    v3 = sub_100070B44;
  return swift_task_switch(v3, v2[41], v2[42]);
}

uint64_t sub_100070B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 312);
    v6 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248));
    v10 = swift_release(v4);
    static Log.photos.getter(v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    v11 = swift_retain_n(v9, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v60 = *(_QWORD *)(v0 + 272);
      v62 = *(_QWORD *)(v0 + 296);
      v58 = *(_QWORD *)(v0 + 200);
      v59 = *(_QWORD *)(v0 + 280);
      v14 = *(_QWORD *)(v0 + 176);
      v56 = *(_QWORD *)(v0 + 192);
      v57 = *(_QWORD *)(v0 + 184);
      v15 = *(_QWORD *)(v0 + 160);
      v53 = *(_QWORD *)(v0 + 168);
      v55 = *(_QWORD *)(v0 + 72);
      v54 = *(unsigned __int8 *)(v0 + 476);
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(64, -1);
      v65 = v17;
      *(_DWORD *)v16 = 136315394;
      v18 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
      v19 = dispatch thunk of CustomStringConvertible.description.getter(v15, v18);
      v21 = v20;
      *(_QWORD *)(v0 + 24) = sub_100021438(v19, v20, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v21);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v14, v15);
      *(_WORD *)(v16 + 12) = 2080;
      v22 = PhotosFaceType.description.getter(v54);
      v24 = v23;
      *(_QWORD *)(v0 + 32) = sub_100021438(v22, v23, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease(v24);
      swift_release_n(v55, 2);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Completed tracking %s for type %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v58, v57);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v62, v60);
    }
    else
    {
      v63 = *(_QWORD *)(v0 + 296);
      v34 = *(_QWORD *)(v0 + 272);
      v35 = *(_QWORD *)(v0 + 280);
      v36 = v12;
      v37 = *(_QWORD *)(v0 + 192);
      v38 = *(_QWORD *)(v0 + 200);
      v40 = *(_QWORD *)(v0 + 176);
      v39 = *(_QWORD *)(v0 + 184);
      v42 = *(_QWORD *)(v0 + 160);
      v41 = *(_QWORD *)(v0 + 168);
      v43 = *(_QWORD *)(v0 + 72);

      swift_release_n(v43, 2);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v63, v34);
    }
    v44 = *(_QWORD *)(v0 + 288);
    v45 = *(_QWORD *)(v0 + 264);
    v47 = *(_QWORD *)(v0 + 232);
    v46 = *(_QWORD *)(v0 + 240);
    v48 = *(_QWORD *)(v0 + 224);
    v49 = *(_QWORD *)(v0 + 200);
    v50 = *(_QWORD *)(v0 + 176);
    v52 = *(_QWORD *)(v0 + 144);
    v51 = *(_QWORD *)(v0 + 152);
    v61 = *(_QWORD *)(v0 + 120);
    v64 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v61);
    swift_task_dealloc(v64);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 232);
    v26 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v25, v1, v2);
    *(_QWORD *)(v0 + 360) = *(_QWORD *)(v26 + 104);
    v27 = sub_10000629C(&qword_1000B34A0);
    v28 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 368) = v28;
    LODWORD(v29) = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 472) = v29;
    v29 = v29;
    v30 = (v29 + 32) & ~v29;
    v31 = swift_allocObject(v27, v30 + v28, v29 | 7);
    *(_QWORD *)(v0 + 376) = v31;
    *(_OWORD *)(v31 + 16) = xmmword_100096430;
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    *(_QWORD *)(v0 + 384) = v32;
    v32(v31 + v30, v25, v2);
    return swift_task_switch(sub_10007107C, 0, 0);
  }
}

uint64_t sub_100070F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 248);
  swift_release(*(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v7 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 264);
  v10 = *(_QWORD *)(v0 + 232);
  v9 = *(_QWORD *)(v0 + 240);
  v11 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 200);
  v13 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 152);
  v17 = *(_QWORD *)(v0 + 120);
  v18 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007107C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v0[5] = v0[47];
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(predicate:)[1]);
  v0[49] = v1;
  v2 = sub_10000629C(&qword_1000B3DA8);
  v3 = sub_100006454(&qword_1000B3DB0, &qword_1000B3DA8, (uint64_t)&protocol conformance descriptor for [A]);
  *v1 = v0;
  v1[1] = sub_100071120;
  return Sequence.asyncMap<A>(predicate:)(&unk_1000B41B8, v0[45], v2, v0[26], v3);
}

uint64_t sub_100071120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 392);
  v3[50] = a1;
  v3[51] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1000714A4;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v3[47]);
    v6 = v3[41];
    v7 = v3[42];
    v5 = sub_100071198;
  }
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_100071198()
{
  _QWORD *v0;
  int64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v1 = *(_QWORD *)(v0[50] + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v0[6] = _swiftEmptyArrayStorage;
    v3 = sub_10004D740(0, v1, 0);
    v4 = 0;
    v2 = (_QWORD *)v0[6];
    do
    {
      StoredPhoto.localIdentifier.getter(v3);
      v0[6] = v2;
      v6 = v2[2];
      v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_10004D740(v5 > 1, v6 + 1, 1);
        v2 = (_QWORD *)v0[6];
      }
      ++v4;
      v8 = v0[17];
      v7 = v0[18];
      v9 = v0[16];
      v2[2] = v6 + 1;
      v3 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))((unint64_t)v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v6, v7, v9);
    }
    while (v1 != v4);
  }
  v0[52] = v2;
  v10 = v0[20];
  v11 = sub_100009174(&qword_1000B29F0, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
  v12 = dispatch thunk of PhotosFaceID.id.getter(v10, v11);
  v13 = static TestProperties.fixedDay.getter(v12);
  if ((v14 & 1) == 0)
  {
    v15 = v13;
LABEL_17:
    v23 = type metadata accessor for AlbumDatabase(0);
    v24 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
    v25 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)[1]);
    v0[53] = v25;
    *v25 = v0;
    v25[1] = sub_1000713E8;
    return dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)(v2, v0[19], v15, v23, v24);
  }
  v17 = v0[14];
  v16 = v0[15];
  v18 = v0[13];
  v19 = Date.init()(v13);
  v20 = Date.timeIntervalSinceReferenceDate.getter(v19);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  result = static TestProperties.albumRotationEpoch.getter(result);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((uint64_t)v20 != 0x8000000000000000 || result != -1)
  {
    v15 = (uint64_t)v20 / result;
    goto LABEL_17;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1000713E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v3);
  v4 = v2[52];
  if (v0)
  {
    v5 = v2[50];
    v6 = v2[19];
    v7 = v2[16];
    v8 = v2[17];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v9 = v2[41];
    v10 = v2[42];
    v11 = sub_100071844;
  }
  else
  {
    v12 = v2[19];
    v13 = v2[16];
    v14 = v2[17];
    swift_bridgeObjectRelease(v4);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    v9 = v2[41];
    v10 = v2[42];
    v11 = sub_100071604;
  }
  return swift_task_switch(v11, v9, v10);
}

uint64_t sub_1000714A4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[47]);
  return swift_task_switch(sub_1000714DC, v0[41], v0[42]);
}

uint64_t sub_1000714DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v10 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 264);
  v13 = *(_QWORD *)(v0 + 232);
  v12 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 144);
  v18 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 120);
  v21 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t result;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t (*v28)(_QWORD);

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 440) = v2;
  if (!v2)
  {
    v22 = *(_QWORD *)(v0 + 216);
    swift_bridgeObjectRelease(v1);
    v23 = (*(uint64_t (**)(_QWORD, _QWORD))(v22 + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 208));
    v24 = *(_QWORD *)(v0 + 320);
    v25 = static CommunicationActor.shared.getter(v23);
    *(_QWORD *)(v0 + 344) = v25;
    v26 = sub_100006454(&qword_1000B3900, &qword_1000B38E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
    v27 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 352) = v27;
    *v27 = v0;
    v27[1] = sub_100070AD4;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 240), v25, v24, v0 + 16, *(_QWORD *)(v0 + 248), v26);
  }
  v3 = (*(unsigned __int8 *)(v0 + 472) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 472);
  *(_QWORD *)(v0 + 448) = 0;
  (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 224), v1 + v3, *(_QWORD *)(v0 + 208));
  v4 = sub_10000629C(&qword_1000B3590);
  v5 = swift_allocObject(v4, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100096430;
  v6 = static TestProperties.fixedDay.getter(v5);
  if ((v7 & 1) == 0)
  {
LABEL_12:
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 384);
    v16 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 88);
    v18 = *(uint64_t **)(v0 + 96);
    v20 = *(int **)(v0 + 56);
    *(_QWORD *)(v5 + 32) = v6;
    *v18 = v5;
    v15((char *)v18 + *(int *)(v19 + 48), v16, v17);
    v28 = (uint64_t (*)(_QWORD))((char *)v20 + *v20);
    v21 = (_QWORD *)swift_task_alloc(v20[1]);
    *(_QWORD *)(v0 + 456) = v21;
    *v21 = v0;
    v21[1] = sub_10007196C;
    return v28(*(_QWORD *)(v0 + 96));
  }
  v9 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = Date.init()(v6);
  v12 = Date.timeIntervalSinceReferenceDate.getter(v11);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v12 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = static TestProperties.albumRotationEpoch.getter(result);
  if (result)
  {
    if ((uint64_t)v12 != 0x8000000000000000 || result != -1)
    {
      v6 = (uint64_t)v12 / result;
      goto LABEL_12;
    }
    goto LABEL_18;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100071844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v10 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 264);
  v13 = *(_QWORD *)(v0 + 232);
  v12 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 144);
  v18 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 120);
  v21 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007196C()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = (*v1)[57];
  (*v1)[58] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[50];
    sub_10000EA70(v2[12], &qword_1000B31F8);
    swift_bridgeObjectRelease(v4);
    v5 = v2[41];
    v6 = v2[42];
    v7 = sub_100071C5C;
  }
  else
  {
    sub_10000EA70(v2[12], &qword_1000B31F8);
    v5 = v2[41];
    v6 = v2[42];
    v7 = sub_1000719FC;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_1000719FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  uint64_t (*v27)(_QWORD);

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 448) + 1;
  v3 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8);
  v3(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 400));
    v4 = ((uint64_t (*)(_QWORD, _QWORD))v3)(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 208));
    v5 = *(_QWORD *)(v0 + 320);
    v6 = static CommunicationActor.shared.getter(v4);
    *(_QWORD *)(v0 + 344) = v6;
    v7 = sub_100006454(&qword_1000B3900, &qword_1000B38E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
    v8 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 352) = v8;
    *v8 = v0;
    v8[1] = sub_100070AD4;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 240), v6, v5, v0 + 16, *(_QWORD *)(v0 + 248), v7);
  }
  v10 = *(_QWORD *)(v0 + 448) + 1;
  *(_QWORD *)(v0 + 448) = v10;
  (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 400)+ ((*(unsigned __int8 *)(v0 + 472) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 472))+ *(_QWORD *)(v0 + 368) * v10, *(_QWORD *)(v0 + 208));
  v11 = sub_10000629C(&qword_1000B3590);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100096430;
  v13 = static TestProperties.fixedDay.getter(v12);
  if ((v14 & 1) == 0)
    goto LABEL_11;
  v16 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 104);
  v18 = Date.init()(v13);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v19 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = static TestProperties.albumRotationEpoch.getter(result);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((uint64_t)v19 != 0x8000000000000000 || result != -1)
  {
    v13 = (uint64_t)v19 / result;
LABEL_11:
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 384);
    v21 = *(_QWORD *)(v0 + 224);
    v22 = *(_QWORD *)(v0 + 208);
    v24 = *(_QWORD *)(v0 + 88);
    v23 = *(uint64_t **)(v0 + 96);
    v25 = *(int **)(v0 + 56);
    *(_QWORD *)(v12 + 32) = v13;
    *v23 = v12;
    v20((char *)v23 + *(int *)(v24 + 48), v21, v22);
    v27 = (uint64_t (*)(_QWORD))((char *)v25 + *v25);
    v26 = (_QWORD *)swift_task_alloc(v25[1]);
    *(_QWORD *)(v0 + 456) = v26;
    *v26 = v0;
    v26[1] = sub_10007196C;
    return v27(*(_QWORD *)(v0 + 96));
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_100071C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *(_QWORD *)(v0 + 296);
  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 232);
  v9 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 312));
  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v7, v9);
  v10(v6, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v23, v1);
  v11 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 264);
  v14 = *(_QWORD *)(v0 + 232);
  v13 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071D94()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v1[36] = v0;
  v2 = type metadata accessor for StoredPhoto(0);
  v1[37] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[38] = v3;
  v1[39] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000629C(&qword_1000B2B50);
  v1[40] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ShuffleID(0);
  v1[41] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[42] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[43] = swift_task_alloc(v7);
  v1[44] = swift_task_alloc(v7);
  v1[45] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v1[46] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[47] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[48] = swift_task_alloc(v10);
  v1[49] = swift_task_alloc(v10);
  v1[50] = swift_task_alloc(v10);
  v1[51] = swift_task_alloc(v10);
  v1[52] = swift_task_alloc(v10);
  v1[53] = swift_task_alloc(v10);
  v11 = sub_10000629C(&qword_1000B25E0);
  v1[54] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[55] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[56] = swift_task_alloc(v13);
  v1[57] = swift_task_alloc(v13);
  v1[58] = swift_task_alloc(v13);
  v1[59] = swift_task_alloc(v13);
  v1[60] = swift_task_alloc(v13);
  v1[61] = swift_task_alloc(v13);
  v1[62] = swift_task_alloc(v13);
  v1[63] = swift_task_alloc(v13);
  v1[64] = swift_task_alloc(v13);
  v1[65] = swift_task_alloc(v13);
  v14 = sub_10000629C(&qword_1000B35E8);
  v1[66] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000629C(&qword_1000B3D78);
  v1[67] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v1[68] = v16;
  v1[69] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000629C(&qword_1000B3D80);
  v1[70] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v1[71] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[72] = swift_task_alloc(v19);
  v1[73] = swift_task_alloc(v19);
  v20 = type metadata accessor for Logger(0);
  v1[74] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v1[75] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[76] = swift_task_alloc(v22);
  v1[77] = swift_task_alloc(v22);
  v1[78] = swift_task_alloc(v22);
  v1[79] = swift_task_alloc(v22);
  v1[80] = swift_task_alloc(v22);
  v1[81] = swift_task_alloc(v22);
  v1[82] = swift_task_alloc(v22);
  v1[83] = swift_task_alloc(v22);
  v23 = type metadata accessor for SyncFacesRequest(0);
  v1[84] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v1[85] = v24;
  v1[86] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for CommunicationActor(0);
  v1[87] = v25;
  v1[88] = static CommunicationActor.shared.getter(v25);
  v26 = type metadata accessor for GalleryDatabase(0);
  v1[89] = v26;
  v27 = sub_100009174(&qword_1000B3138, (uint64_t (*)(uint64_t))&type metadata accessor for GalleryDatabase, (uint64_t)&protocol conformance descriptor for GalleryDatabase);
  v1[90] = v27;
  v28 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryList()[1]);
  v1[91] = v28;
  *v28 = v1;
  v28[1] = sub_10007210C;
  return dispatch thunk of PhotosFaceIDDatabase.queryList()(v26, v27);
}

uint64_t sub_10007210C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 728);
  *(_QWORD *)(*(_QWORD *)v2 + 736) = v1;
  swift_task_dealloc(v5);
  v6 = v4[87];
  if (v1)
  {
    v7 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, v7);
    v10 = v9;
    v11 = sub_10008DD84;
    v12 = v8;
    v13 = v10;
  }
  else
  {
    v4[93] = a1;
    v14 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v4[94] = v14;
    v15 = dispatch thunk of Actor.unownedExecutor.getter(v6, v14);
    v13 = v16;
    v4[95] = v15;
    v4[96] = v16;
    v11 = sub_100072204;
    v12 = v15;
  }
  return swift_task_switch(v11, v12, v13);
}

uint64_t sub_100072204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[3];

  v1 = *(_QWORD *)(v0 + 744);
  v2 = *(_QWORD *)(v0 + 736);
  v3 = *(_QWORD *)(v0 + 720);
  v4 = *(_QWORD *)(v0 + 712);
  v5 = *(_QWORD *)(v0 + 328);
  v6 = (_QWORD *)swift_task_alloc(48);
  *v6 = v5;
  v7 = type metadata accessor for ShuffleProvider();
  *(_QWORD *)(v0 + 776) = v7;
  v6[1] = v7;
  v6[2] = v4;
  v8 = sub_100009174(&qword_1000B3D88, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleProvider, (uint64_t)&unk_1000968C4);
  *(_QWORD *)(v0 + 784) = v8;
  v6[3] = v8;
  v6[4] = v3;
  KeyPath = swift_getKeyPath(&unk_100096E18);
  swift_task_dealloc(v6);
  swift_retain(KeyPath);
  v10 = sub_10008B944(v1, KeyPath, v0 + 208, (uint64_t (*)(_QWORD))&type metadata accessor for ShuffleID);
  *(_QWORD *)(v0 + 792) = v10;
  swift_release_n(KeyPath, 2);
  v11 = swift_bridgeObjectRelease(v1);
  if (!v10[2])
  {
    v12 = PhotosFaceType.rawValue.getter(*(unsigned __int8 *)(*(_QWORD *)(v0 + 288) + 16));
    v14 = v13;
    v16 = PhotosFaceType.rawValue.getter(2);
    v17 = v15;
    if (v12 == v16 && v14 == v15)
    {
      v11 = swift_bridgeObjectRelease_n(v14, 2);
    }
    else
    {
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v16, v15, 0);
      swift_bridgeObjectRelease(v17);
      v11 = swift_bridgeObjectRelease(v14);
      if ((v18 & 1) == 0)
      {
        swift_release(*(_QWORD *)(v0 + 704));
        swift_bridgeObjectRelease(v10);
        v46 = *(_QWORD *)(v0 + 664);
        v47 = *(_QWORD *)(v0 + 656);
        v48 = *(_QWORD *)(v0 + 648);
        v49 = *(_QWORD *)(v0 + 640);
        v50 = *(_QWORD *)(v0 + 632);
        v51 = *(_QWORD *)(v0 + 624);
        v52 = *(_QWORD *)(v0 + 616);
        v53 = *(_QWORD *)(v0 + 608);
        v54 = *(_QWORD *)(v0 + 584);
        v55 = *(_QWORD *)(v0 + 576);
        v56 = *(_QWORD *)(v0 + 552);
        v57 = *(_QWORD *)(v0 + 528);
        v58 = *(_QWORD *)(v0 + 520);
        v59 = *(_QWORD *)(v0 + 512);
        v60 = *(_QWORD *)(v0 + 504);
        v61 = *(_QWORD *)(v0 + 496);
        v62 = *(_QWORD *)(v0 + 488);
        v63 = *(_QWORD *)(v0 + 480);
        v64 = *(_QWORD *)(v0 + 472);
        v65 = *(_QWORD *)(v0 + 464);
        v66 = *(_QWORD *)(v0 + 456);
        v67 = *(_QWORD *)(v0 + 448);
        v68 = *(_QWORD *)(v0 + 424);
        v69 = *(_QWORD *)(v0 + 416);
        v70 = *(_QWORD *)(v0 + 408);
        v71 = *(_QWORD *)(v0 + 400);
        v72 = *(_QWORD *)(v0 + 392);
        v73 = *(_QWORD *)(v0 + 384);
        v75 = *(_QWORD *)(v0 + 360);
        v77 = *(_QWORD *)(v0 + 352);
        v78 = *(_QWORD *)(v0 + 344);
        v80 = *(_QWORD *)(v0 + 320);
        v82 = *(_QWORD *)(v0 + 312);
        swift_task_dealloc(*(_QWORD *)(v0 + 688));
        swift_task_dealloc(v46);
        swift_task_dealloc(v47);
        swift_task_dealloc(v48);
        swift_task_dealloc(v49);
        swift_task_dealloc(v50);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v59);
        swift_task_dealloc(v60);
        swift_task_dealloc(v61);
        swift_task_dealloc(v62);
        swift_task_dealloc(v63);
        swift_task_dealloc(v64);
        swift_task_dealloc(v65);
        swift_task_dealloc(v66);
        swift_task_dealloc(v67);
        swift_task_dealloc(v68);
        swift_task_dealloc(v69);
        swift_task_dealloc(v70);
        swift_task_dealloc(v71);
        swift_task_dealloc(v72);
        swift_task_dealloc(v73);
        swift_task_dealloc(v75);
        swift_task_dealloc(v77);
        swift_task_dealloc(v78);
        swift_task_dealloc(v80);
        swift_task_dealloc(v82);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
    }
  }
  if ((static TestProperties.ignoreSyncCache.getter(v11) & 1) != 0)
  {
    *(_QWORD *)(v0 + 832) = v2;
    v19 = *(_QWORD *)(v0 + 792);
    swift_bridgeObjectRetain(v19);
    v21 = sub_100054F10(v20);
    swift_bridgeObjectRelease(v19);
    v22 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v23 = SyncFacesRequest.init(trackedFaces:cachedIdentifiers:)(v19, _swiftEmptyArrayStorage, v22);
    static Log.photos.getter(v23);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain(v21);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(_QWORD *)(v0 + 664);
    v29 = *(_QWORD *)(v0 + 600);
    v30 = *(_QWORD *)(v0 + 592);
    if (v27)
    {
      v81 = *(_QWORD *)(v0 + 592);
      v74 = *(_QWORD *)(v0 + 368);
      v79 = *(_QWORD *)(v0 + 600);
      v31 = swift_slowAlloc(22, -1);
      v76 = swift_slowAlloc(32, -1);
      v83[0] = v76;
      *(_DWORD *)v31 = 134218242;
      v32 = _swiftEmptyArrayStorage[2];
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      *(_QWORD *)(v0 + 272) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      *(_WORD *)(v31 + 12) = 2080;
      v33 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      swift_bridgeObjectRetain(v21);
      v35 = Set.description.getter(v34, v74, v33);
      v37 = v36;
      swift_bridgeObjectRelease(v21);
      *(_QWORD *)(v0 + 280) = sub_100021438(v35, v37, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v31 + 14, v31 + 22);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease_n(v21, 2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Requesting syncFaces with %ld cached photos and faces: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      v38 = *(uint64_t (**)(uint64_t, uint64_t))(v79 + 8);
      v39 = v38(v28, v81);
    }
    else
    {
      swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
      swift_bridgeObjectRelease_n(v21, 2);

      v38 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8);
      v39 = v38(v28, v30);
    }
    *(_QWORD *)(v0 + 840) = v38;
    v41 = *(_QWORD *)(v0 + 752);
    v42 = *(_QWORD *)(v0 + 696);
    v43 = *(_QWORD *)(v0 + 288);
    *(_QWORD *)(v0 + 848) = *(_QWORD *)(v43 + 96);
    *(_BYTE *)(v0 + 1248) = *(_BYTE *)(v43 + 16);
    *(_QWORD *)(v0 + 856) = static CommunicationActor.shared.getter(v39);
    v44 = dispatch thunk of Actor.unownedExecutor.getter(v42, v41);
    return swift_task_switch(sub_100072904, v44, v45);
  }
  else
  {
    *(_QWORD *)(v0 + 800) = *(_QWORD *)(*(_QWORD *)(v0 + 288) + 104);
    return swift_task_switch(sub_10007282C, 0, 0);
  }
}

uint64_t sub_10007282C()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 808) = OBJC_IVAR____TtC11photosfaced10PhotoCache_database;
  v1 = (_QWORD *)swift_task_alloc(async function pointer to PhotosFaceDatabase.storedPhotos()[1]);
  *(_QWORD *)(v0 + 816) = v1;
  *v1 = v0;
  v1[1] = sub_10007288C;
  return PhotosFaceDatabase.storedPhotos()();
}

uint64_t sub_10007288C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 816);
  *(_QWORD *)(*(_QWORD *)v2 + 824) = a1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v3[154] = v1;
    v5 = v3[96];
    v6 = v3[95];
    v7 = sub_10008DD6C;
  }
  else
  {
    v7 = sub_1000781E0;
    v6 = 0;
    v5 = 0;
  }
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_100072904()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_BYTE *)(v0 + 1248);
  swift_release(*(_QWORD *)(v0 + 856));
  v2 = *(_QWORD *)(v0 + 832);
  sub_100056730(0x70A04u >> (8 * v1), *(_QWORD *)(v0 + 688), 1, *(_QWORD *)(v0 + 584));
  *(_QWORD *)(v0 + 864) = v2;
  if (v2)
    v3 = sub_10008DE28;
  else
    v3 = sub_10007298C;
  return swift_task_switch(v3, *(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 768));
}

uint64_t sub_10007298C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[70];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[71] + 16))(v0[72], v0[73], v1);
  v2 = sub_100006454(&qword_1000B3D90, &qword_1000B3D80, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>);
  v3 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  v4 = v0[105];
  v0[110] = &_swiftEmptyArrayStorage;
  v0[109] = v4;
  v5 = v0[94];
  v6 = static CommunicationActor.shared.getter(v3);
  v0[111] = v6;
  v7 = sub_100006454(&qword_1000B3D98, &qword_1000B3D78, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
  v8 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[112] = v8;
  *v8 = v0;
  v8[1] = sub_100072AA0;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[66], v6, v5, v0 + 12, v0[67], v7);
}

uint64_t sub_100072AA0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 896);
  *(_QWORD *)(*(_QWORD *)v1 + 904) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[111]);
  if (v0)
    v4 = sub_100073D88;
  else
    v4 = sub_100072B1C;
  return swift_task_switch(v4, v2[95], v2[96]);
}

uint64_t sub_100072B1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, unint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t KeyPath;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  void (*v91)(uint64_t, unint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v96;
  _QWORD *v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t (*v111)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __n128 v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(uint64_t, uint64_t);
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  os_log_type_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void (*v233)(uint64_t, uint64_t);
  void (*v234)(uint64_t, uint64_t);
  uint64_t v235;
  uint64_t v236;
  NSObject *v237;
  uint64_t v238;
  uint64_t v239;
  uint8_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(uint64_t, uint64_t, uint64_t);
  uint64_t v245;
  uint64_t v246;
  uint64_t v247[3];

  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 440);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = v0 + 104;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 544) + 8))(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 536));
    v5 = *(_QWORD *)(v0 + 880);
    *(_QWORD *)(v0 + 976) = v5;
    *(_QWORD *)(v0 + 968) = 0;
    *(_QWORD *)(v0 + 984) = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v6 = swift_bridgeObjectRetain(v5);
    v7 = static SyncedPhotosFace.destreamify(_:)(v6);
    v8 = swift_bridgeObjectRelease(v5);
    *(_QWORD *)(v0 + 88) = v7;
    v9 = *(_QWORD *)(v0 + 288);
    static Log.session.getter(v8);
    swift_bridgeObjectRetain_n(v7, 3);
    v10 = swift_retain(v9);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v223 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
      v213 = *(_QWORD *)(v0 + 592);
      v219 = *(_QWORD *)(v0 + 640);
      v204 = *(_QWORD *)(v0 + 288);
      v13 = *(unsigned __int8 *)(v0 + 1248);
      v14 = swift_slowAlloc(32, -1);
      v208 = swift_slowAlloc(64, -1);
      v247[0] = v208;
      *(_DWORD *)v14 = 134218498;
      *(_QWORD *)(v0 + 168) = *(_QWORD *)(v7 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v7);
      *(_WORD *)(v14 + 12) = 2080;
      v15 = PhotosFaceType.description.getter(v13);
      v17 = v16;
      *(_QWORD *)(v0 + 176) = sub_100021438(v15, v16, v247);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease(v17);
      swift_release(v204);
      *(_WORD *)(v14 + 22) = 2080;
      v18 = sub_100086480(v7, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, &qword_1000B25E0, &qword_1000B2B30, (uint64_t)&protocol conformance descriptor for ShuffleID);
      swift_bridgeObjectRelease(v7);
      v19 = Array.description.getter(v18, &type metadata for String);
      v21 = v20;
      swift_bridgeObjectRelease(v18);
      *(_QWORD *)(v0 + 184) = sub_100021438(v19, v21, v247);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v14 + 24, v14 + 32);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v7);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Did syncFaces (%ld) for type %s: %s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy(v208, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v208, -1, -1);
      v22 = v14;
      v4 = v0 + 104;
      swift_slowDealloc(v22, -1, -1);

      v223(v219, v213);
    }
    else
    {
      v74 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
      v75 = *(_QWORD *)(v0 + 640);
      v76 = *(_QWORD *)(v0 + 592);
      v77 = *(_QWORD *)(v0 + 288);
      swift_bridgeObjectRelease_n(v7, 3);
      swift_release(v77);

      v74(v75, v76);
    }
    v78 = *(_QWORD *)(v0 + 784);
    v79 = *(_QWORD *)(v0 + 776);
    v80 = *(_QWORD *)(v0 + 720);
    v81 = *(_QWORD *)(v0 + 712);
    v82 = *(_QWORD *)(v0 + 328);
    swift_beginAccess(v0 + 88, v0 + 64, 0, 0);
    v83 = *(_QWORD *)(v0 + 88);
    v84 = (_QWORD *)swift_task_alloc(48);
    *v84 = v82;
    v84[1] = v79;
    v84[2] = v81;
    v84[3] = v78;
    v84[4] = v80;
    KeyPath = swift_getKeyPath(&unk_100096E48);
    swift_task_dealloc(v84);
    swift_retain(KeyPath);
    swift_bridgeObjectRetain(v83);
    v87 = sub_10008BAA8(v86, KeyPath, v4, &qword_1000B25E0);
    *(_QWORD *)(v0 + 992) = v87;
    swift_release_n(KeyPath, 2);
    swift_bridgeObjectRelease(v83);
    v88 = v87[2];
    *(_QWORD *)(v0 + 1000) = v88;
    v89 = *(_QWORD *)(v0 + 376);
    if (v88)
    {
      v90 = *(_DWORD *)(v89 + 80);
      *(_DWORD *)(v0 + 1240) = v90;
      *(_QWORD *)(v0 + 1008) = *(_QWORD *)(v89 + 72);
      v91 = *(void (**)(uint64_t, unint64_t, uint64_t))(v89 + 16);
      *(_QWORD *)(v0 + 1016) = v91;
      v92 = *(_QWORD *)(v0 + 840);
      *(_QWORD *)(v0 + 1160) = 0;
      *(_QWORD *)(v0 + 1152) = v92;
      *(_QWORD *)(v0 + 1144) = v92;
      *(_QWORD *)(v0 + 1136) = v92;
      v93 = *(_QWORD *)(v0 + 368);
      v94 = *(_QWORD *)(v0 + 320);
      v91(v94, *(_QWORD *)(v0 + 992) + ((v90 + 32) & ~(unint64_t)v90), v93);
      v95 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v89 + 56);
      *(_QWORD *)(v0 + 1168) = v95;
      v95(v94, 0, 1, v93);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v94, 1, v93) != 1)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 32))(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 368));
        v96 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
        *(_QWORD *)(v0 + 1176) = v96;
        *v96 = v0;
        v96[1] = sub_100076BA8;
        return dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
      }
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v89 + 56))(*(_QWORD *)(v0 + 320), 1, 1, *(_QWORD *)(v0 + 368));
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 992));
    v106 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 1024) = v106;
    v107 = *(_QWORD *)(v106 + 16);
    *(_QWORD *)(v0 + 1032) = v107;
    if (v107)
    {
      v109 = *(_QWORD *)(v0 + 432);
      v108 = *(_QWORD *)(v0 + 440);
      v110 = *(_DWORD *)(v108 + 80);
      *(_DWORD *)(v0 + 1244) = v110;
      *(_QWORD *)(v0 + 1040) = *(_QWORD *)(v108 + 72);
      v111 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v108 + 16);
      *(_QWORD *)(v0 + 1048) = v111;
      v112 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
      *(_QWORD *)(v0 + 1064) = 0;
      *(_QWORD *)(v0 + 1056) = v112;
      v114 = *(_QWORD *)(v0 + 456);
      v113 = *(_QWORD *)(v0 + 464);
      v115 = *(_QWORD *)(v0 + 288);
      v116 = v106 + ((v110 + 32) & ~(unint64_t)v110);
      v117 = swift_bridgeObjectRetain(v106);
      v118 = v111(v113, v116, v109, v117);
      static Log.photos.getter(v118);
      ((void (*)(uint64_t, uint64_t, uint64_t))v111)(v114, v113, v109);
      v119 = swift_retain(v115);
      v120 = Logger.logObject.getter(v119);
      v121 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v120, v121))
      {
        v245 = *(_QWORD *)(v0 + 632);
        v241 = *(_QWORD *)(v0 + 592);
        v122 = *(_QWORD *)(v0 + 456);
        v123 = *(_QWORD *)(v0 + 432);
        v215 = *(_QWORD *)(v0 + 440);
        v234 = v112;
        v124 = *(_QWORD *)(v0 + 360);
        v225 = *(_QWORD *)(v0 + 336);
        v220 = *(_QWORD *)(v0 + 328);
        v201 = *(_QWORD *)(v0 + 288);
        v125 = *(unsigned __int8 *)(v0 + 1248);
        v126 = swift_slowAlloc(22, -1);
        v229 = swift_slowAlloc(64, -1);
        v247[0] = v229;
        *(_DWORD *)v126 = 136315394;
        v127 = PhotosFaceType.description.getter(v125);
        v129 = v128;
        *(_QWORD *)(v0 + 152) = sub_100021438(v127, v128, v247);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v126 + 4, v126 + 12);
        swift_bridgeObjectRelease(v129);
        swift_release(v201);
        *(_WORD *)(v126 + 12) = 2080;
        SyncedPhotosFace.id.getter(v123);
        v130 = *(void (**)(uint64_t, uint64_t))(v215 + 8);
        v130(v122, v123);
        v131 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
        v132 = dispatch thunk of CustomStringConvertible.description.getter(v220, v131);
        v134 = v133;
        (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v124, v220);
        *(_QWORD *)(v0 + 160) = sub_100021438(v132, v134, v247);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v126 + 14, v126 + 22);
        swift_bridgeObjectRelease(v134);
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "Inserting face, type = %s: %s", (uint8_t *)v126, 0x16u);
        swift_arrayDestroy(v229, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v229, -1, -1);
        swift_slowDealloc(v126, -1, -1);

        v234(v245, v241);
      }
      else
      {
        v152 = *(_QWORD *)(v0 + 632);
        v153 = *(_QWORD *)(v0 + 592);
        v154 = *(_QWORD *)(v0 + 288);
        v130 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
        v130(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
        swift_release(v154);

        v112(v152, v153);
      }
      *(_QWORD *)(v0 + 1072) = v130;
      SyncedPhotosFace.id.getter(*(_QWORD *)(v0 + 432));
      v155 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
      *(_QWORD *)(v0 + 1080) = v155;
      *v155 = v0;
      v155[1] = sub_100075DE4;
      return dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
    }
    else
    {
      v135 = *(_QWORD *)(v0 + 704);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 976));
      v136 = swift_release(v135);
      if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
        v136 = sub_100022934(*(unsigned __int8 *)(v0 + 1248));
      v137 = *(_QWORD *)(v0 + 688);
      v138 = *(_QWORD *)(v0 + 680);
      v139 = *(_QWORD *)(v0 + 672);
      v140 = *(_QWORD *)(v0 + 584);
      v141 = *(_QWORD *)(v0 + 568);
      v142 = *(_QWORD *)(v0 + 560);
      if (*(_QWORD *)(v0 + 968))
      {
        swift_willThrow(v136);
        (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v140, v142);
        (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
        v143 = *(_QWORD *)(v0 + 664);
        v144 = *(_QWORD *)(v0 + 656);
        v145 = *(_QWORD *)(v0 + 648);
        v146 = *(_QWORD *)(v0 + 640);
        v147 = *(_QWORD *)(v0 + 632);
        v148 = *(_QWORD *)(v0 + 624);
        v149 = *(_QWORD *)(v0 + 616);
        v150 = *(_QWORD *)(v0 + 608);
        v151 = *(_QWORD *)(v0 + 584);
        v172 = *(_QWORD *)(v0 + 576);
        v173 = *(_QWORD *)(v0 + 552);
        v175 = *(_QWORD *)(v0 + 528);
        v177 = *(_QWORD *)(v0 + 520);
        v179 = *(_QWORD *)(v0 + 512);
        v181 = *(_QWORD *)(v0 + 504);
        v183 = *(_QWORD *)(v0 + 496);
        v185 = *(_QWORD *)(v0 + 488);
        v187 = *(_QWORD *)(v0 + 480);
        v189 = *(_QWORD *)(v0 + 472);
        v191 = *(_QWORD *)(v0 + 464);
        v193 = *(_QWORD *)(v0 + 456);
        v196 = *(_QWORD *)(v0 + 448);
        v198 = *(_QWORD *)(v0 + 424);
        v202 = *(_QWORD *)(v0 + 416);
        v206 = *(_QWORD *)(v0 + 408);
        v210 = *(_QWORD *)(v0 + 400);
        v216 = *(_QWORD *)(v0 + 392);
        v221 = *(_QWORD *)(v0 + 384);
        v226 = *(_QWORD *)(v0 + 360);
        v230 = *(_QWORD *)(v0 + 352);
        v235 = *(_QWORD *)(v0 + 344);
        v238 = *(_QWORD *)(v0 + 320);
        v242 = *(_QWORD *)(v0 + 312);
        swift_task_dealloc(*(_QWORD *)(v0 + 688));
        swift_task_dealloc(v143);
        swift_task_dealloc(v144);
        swift_task_dealloc(v145);
        swift_task_dealloc(v146);
        swift_task_dealloc(v147);
        swift_task_dealloc(v148);
        swift_task_dealloc(v149);
        swift_task_dealloc(v150);
        swift_task_dealloc(v151);
        swift_task_dealloc(v172);
        swift_task_dealloc(v173);
        swift_task_dealloc(v175);
        swift_task_dealloc(v177);
        swift_task_dealloc(v179);
        swift_task_dealloc(v181);
        swift_task_dealloc(v183);
        swift_task_dealloc(v185);
        swift_task_dealloc(v187);
        swift_task_dealloc(v189);
        swift_task_dealloc(v191);
        swift_task_dealloc(v193);
        swift_task_dealloc(v196);
        swift_task_dealloc(v198);
        swift_task_dealloc(v202);
        swift_task_dealloc(v206);
        swift_task_dealloc(v210);
        swift_task_dealloc(v216);
        swift_task_dealloc(v221);
        swift_task_dealloc(v226);
        swift_task_dealloc(v230);
        swift_task_dealloc(v235);
        swift_task_dealloc(v238);
        swift_task_dealloc(v242);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v141 + 8))(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 560));
        (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
        v163 = *(_QWORD *)(v0 + 664);
        v164 = *(_QWORD *)(v0 + 656);
        v165 = *(_QWORD *)(v0 + 648);
        v166 = *(_QWORD *)(v0 + 640);
        v167 = *(_QWORD *)(v0 + 632);
        v168 = *(_QWORD *)(v0 + 624);
        v169 = *(_QWORD *)(v0 + 616);
        v170 = *(_QWORD *)(v0 + 608);
        v171 = *(_QWORD *)(v0 + 584);
        v174 = *(_QWORD *)(v0 + 576);
        v176 = *(_QWORD *)(v0 + 552);
        v178 = *(_QWORD *)(v0 + 528);
        v180 = *(_QWORD *)(v0 + 520);
        v182 = *(_QWORD *)(v0 + 512);
        v184 = *(_QWORD *)(v0 + 504);
        v186 = *(_QWORD *)(v0 + 496);
        v188 = *(_QWORD *)(v0 + 488);
        v190 = *(_QWORD *)(v0 + 480);
        v192 = *(_QWORD *)(v0 + 472);
        v194 = *(_QWORD *)(v0 + 464);
        v197 = *(_QWORD *)(v0 + 456);
        v199 = *(_QWORD *)(v0 + 448);
        v203 = *(_QWORD *)(v0 + 424);
        v207 = *(_QWORD *)(v0 + 416);
        v212 = *(_QWORD *)(v0 + 408);
        v218 = *(_QWORD *)(v0 + 400);
        v222 = *(_QWORD *)(v0 + 392);
        v227 = *(_QWORD *)(v0 + 384);
        v231 = *(_QWORD *)(v0 + 360);
        v236 = *(_QWORD *)(v0 + 352);
        v239 = *(_QWORD *)(v0 + 344);
        v243 = *(_QWORD *)(v0 + 320);
        v246 = *(_QWORD *)(v0 + 312);
        swift_task_dealloc(*(_QWORD *)(v0 + 688));
        swift_task_dealloc(v163);
        swift_task_dealloc(v164);
        swift_task_dealloc(v165);
        swift_task_dealloc(v166);
        swift_task_dealloc(v167);
        swift_task_dealloc(v168);
        swift_task_dealloc(v169);
        swift_task_dealloc(v170);
        swift_task_dealloc(v171);
        swift_task_dealloc(v174);
        swift_task_dealloc(v176);
        swift_task_dealloc(v178);
        swift_task_dealloc(v180);
        swift_task_dealloc(v182);
        swift_task_dealloc(v184);
        swift_task_dealloc(v186);
        swift_task_dealloc(v188);
        swift_task_dealloc(v190);
        swift_task_dealloc(v192);
        swift_task_dealloc(v194);
        swift_task_dealloc(v197);
        swift_task_dealloc(v199);
        swift_task_dealloc(v203);
        swift_task_dealloc(v207);
        swift_task_dealloc(v212);
        swift_task_dealloc(v218);
        swift_task_dealloc(v222);
        swift_task_dealloc(v227);
        swift_task_dealloc(v231);
        swift_task_dealloc(v236);
        swift_task_dealloc(v239);
        swift_task_dealloc(v243);
        swift_task_dealloc(v246);
      }
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 880);
    v24 = *(_QWORD *)(v0 + 520);
    v25 = *(_QWORD *)(v0 + 512);
    v244 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v244(v24, v1, v2);
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v26(v25, v24, v2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
    v28 = *(_QWORD *)(v0 + 880);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v28 = sub_100091A00(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
    v30 = *(_QWORD *)(v28 + 16);
    v29 = *(_QWORD *)(v28 + 24);
    if (v30 >= v29 >> 1)
      v28 = sub_100091A00(v29 > 1, v30 + 1, 1, v28);
    *(_QWORD *)(v0 + 912) = v28;
    v31 = *(_QWORD *)(v0 + 520);
    v33 = *(_QWORD *)(v0 + 504);
    v32 = *(_QWORD *)(v0 + 512);
    v35 = *(_QWORD *)(v0 + 488);
    v34 = *(_QWORD *)(v0 + 496);
    v37 = *(_QWORD *)(v0 + 432);
    v36 = *(_QWORD *)(v0 + 440);
    *(_QWORD *)(v28 + 16) = v30 + 1;
    v38 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v244)(v28+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v30, v32, v37);
    static Log.photos.getter(v38);
    v26(v33, v31, v37);
    v26(v34, v31, v37);
    v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v26)(v35, v31, v37);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v228 = v41;
      v237 = v40;
      v42 = (_QWORD *)(v0 + 256);
      v43 = *(_QWORD *)(v0 + 504);
      v195 = *(_QWORD *)(v0 + 496);
      v45 = *(_QWORD *)(v0 + 432);
      v44 = *(_QWORD *)(v0 + 440);
      v209 = *(_QWORD *)(v0 + 376);
      v46 = *(_QWORD *)(v0 + 360);
      v200 = *(_QWORD *)(v0 + 424);
      v205 = *(_QWORD *)(v0 + 368);
      v47 = *(_QWORD *)(v0 + 328);
      v232 = *(_QWORD *)(v0 + 336);
      v48 = swift_slowAlloc(32, -1);
      v224 = swift_slowAlloc(64, -1);
      *(_QWORD *)(v0 + 232) = v224;
      *(_DWORD *)v48 = 134218498;
      v49 = SyncedPhotosFace.photos.getter(v45);
      v50 = *(_QWORD *)(v49 + 16);
      swift_bridgeObjectRelease(v49);
      v51 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v51(v43, v45);
      *(_QWORD *)(v0 + 240) = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v48 + 4, v48 + 12);
      *(_WORD *)(v48 + 12) = 2080;
      SyncedPhotosFace.id.getter(v45);
      v52 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      dispatch thunk of PhotosFaceID.id.getter(v47, v52);
      (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v46, v47);
      v233 = v51;
      v51(v195, v45);
      v53 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v205, v53);
      v56 = v55;
      (*(void (**)(uint64_t, uint64_t))(v209 + 8))(v200, v205);
      *(_QWORD *)(v0 + 248) = sub_100021438(v54, v56, (uint64_t *)(v0 + 232));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease(v56);
      v240 = (uint8_t *)v48;
      *(_WORD *)(v48 + 22) = 2080;
      v57 = SyncedPhotosFace.photos.getter(v45);
      v58 = v57;
      v59 = *(_QWORD *)(v57 + 16);
      if (v59)
      {
        v60 = *(_QWORD *)(v0 + 304);
        *(_QWORD *)(v0 + 256) = &_swiftEmptyArrayStorage;
        sub_10004D740(0, v59, 0);
        v214 = v58;
        v61 = v58 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
        v62 = *(_QWORD *)(v60 + 72);
        v63 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v60 + 16);
        do
        {
          v65 = *(_QWORD *)(v0 + 304);
          v64 = *(_QWORD *)(v0 + 312);
          v66 = *(_QWORD *)(v0 + 296);
          v67 = v63(v64, v61, v66);
          StoredPhoto.localIdentifier.getter(v67);
          (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
          v68 = *(_QWORD **)(v0 + 256);
          if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
          {
            sub_10004D740(0, v68[2] + 1, 1);
            v68 = (_QWORD *)*v42;
          }
          v70 = v68[2];
          v69 = v68[3];
          if (v70 >= v69 >> 1)
          {
            sub_10004D740(v69 > 1, v70 + 1, 1);
            v68 = (_QWORD *)*v42;
          }
          v72 = *(_QWORD *)(v0 + 376);
          v71 = *(_QWORD *)(v0 + 384);
          v73 = *(_QWORD *)(v0 + 368);
          v68[2] = v70 + 1;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v72 + 32))((unint64_t)v68+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(_QWORD *)(v72 + 72) * v70, v71, v73);
          *(_QWORD *)(v0 + 256) = v68;
          v61 += v62;
          --v59;
        }
        while (v59);
        swift_bridgeObjectRelease(v214);
      }
      else
      {
        swift_bridgeObjectRelease(v57);
        v68 = &_swiftEmptyArrayStorage;
      }
      v98 = (_QWORD *)(v0 + 840);
      v211 = *(_QWORD *)(v0 + 656);
      v217 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
      v156 = *(_QWORD *)(v0 + 592);
      v157 = *(_QWORD *)(v0 + 368);
      v233(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 432));
      v158 = Array.description.getter(v68, v157);
      v160 = v159;
      swift_bridgeObjectRelease(v68);
      *(_QWORD *)(v0 + 264) = sub_100021438(v158, v160, (uint64_t *)(v0 + 232));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v240 + 24, v240 + 32);
      v161 = v160;
      v105 = v233;
      swift_bridgeObjectRelease(v161);
      _os_log_impl((void *)&_mh_execute_header, v237, v228, "Caching %ld for face %s, photos = %s", v240, 0x20u);
      swift_arrayDestroy(v224, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v224, -1, -1);
      swift_slowDealloc(v240, -1, -1);

      v217(v211, v156);
    }
    else
    {
      v98 = (_QWORD *)(v0 + 872);
      v99 = *(void (**)(uint64_t, uint64_t))(v0 + 872);
      v100 = *(_QWORD *)(v0 + 656);
      v101 = *(_QWORD *)(v0 + 592);
      v103 = *(_QWORD *)(v0 + 496);
      v102 = *(_QWORD *)(v0 + 504);
      v104 = *(_QWORD *)(v0 + 432);
      v105 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
      v105(*(_QWORD *)(v0 + 488), v104);
      v105(v103, v104);
      v105(v102, v104);

      v99(v100, v101);
    }
    *(_QWORD *)(v0 + 928) = *v98;
    *(_QWORD *)(v0 + 920) = v105;
    v162 = *(_QWORD *)(v0 + 432);
    *(_QWORD *)(v0 + 936) = *(_QWORD *)(*(_QWORD *)(v0 + 288) + 104);
    *(_QWORD *)(v0 + 944) = SyncedPhotosFace.photos.getter(v162);
    return swift_task_switch(sub_100074C8C, 0, 0);
  }
}

void sub_100073D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(unint64_t, uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t KeyPath;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  void (*v60)(uint64_t, unint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191[3];

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 544) + 8))(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 536));
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 880);
  *(_QWORD *)(v0 + 976) = v2;
  *(_QWORD *)(v0 + 968) = v1;
  *(_QWORD *)(v0 + 984) = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  v3 = swift_bridgeObjectRetain(v2);
  v4 = static SyncedPhotosFace.destreamify(_:)(v3);
  v5 = swift_bridgeObjectRelease(v2);
  *(_QWORD *)(v0 + 88) = v4;
  v6 = v0 + 88;
  if (v1)
  {
    v191[0] = (uint64_t)&_swiftEmptyArrayStorage;
    v7 = *(_QWORD *)(v4 + 16);
    v8 = swift_bridgeObjectRetain(v4);
    if (v7)
    {
      v9 = 0;
      v187 = &_swiftEmptyArrayStorage;
      while (v9 < *(_QWORD *)(v4 + 16))
      {
        v11 = *(_QWORD *)(v0 + 432);
        v10 = *(_QWORD *)(v0 + 440);
        v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        v13 = *(_QWORD *)(v10 + 72);
        (*(void (**)(_QWORD, unint64_t, uint64_t, __n128))(v10 + 16))(*(_QWORD *)(v0 + 480), v4 + v12 + v13 * v9, v11, v8);
        if ((SyncedPhotosFace.complete.getter(v11) & 1) != 0)
        {
          v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 32);
          v14(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 432));
          v15 = (uint64_t)v187;
          if ((swift_isUniquelyReferenced_nonNull_native(v187) & 1) == 0)
          {
            sub_10004D854(0, v187[2] + 1, 1);
            v15 = v191[0];
          }
          v17 = *(_QWORD *)(v15 + 16);
          v16 = *(_QWORD *)(v15 + 24);
          if (v17 >= v16 >> 1)
          {
            sub_10004D854(v16 > 1, v17 + 1, 1);
            v15 = v191[0];
          }
          v18 = *(_QWORD *)(v0 + 472);
          v19 = *(_QWORD *)(v0 + 432);
          *(_QWORD *)(v15 + 16) = v17 + 1;
          v187 = (_QWORD *)v15;
          v14(v15 + v12 + v17 * v13, v18, v19);
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 432));
        }
        if (v7 == ++v9)
          goto LABEL_15;
      }
      __break(1u);
      return;
    }
    v187 = &_swiftEmptyArrayStorage;
LABEL_15:
    v6 = v0 + 88;
    v21 = swift_bridgeObjectRelease(v4);
    static Log.session.getter(v21);
    v20 = (uint64_t)v187;
    v22 = swift_retain(v187);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      *(_DWORD *)v25 = 134218240;
      *(_QWORD *)(v0 + 200) = v187[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v25 + 4, v25 + 12);
      swift_release(v187);
      *(_WORD *)(v25 + 12) = 2048;
      swift_beginAccess(v0 + 88, v0 + 16, 0, 0);
      *(_QWORD *)(v0 + 216) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 16);
      v6 = v0 + 88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v25 + 14, v25 + 22);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "An error occurred during sync. Only %ld / %ld finished successfully.", (uint8_t *)v25, 0x16u);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_release(v187);
    }

    (*(void (**)(_QWORD, _QWORD))(v0 + 840))(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 592));
    swift_beginAccess(v6, v0 + 40, 1, 0);
    v26 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 88) = v187;
    v5 = swift_bridgeObjectRelease(v26);
  }
  else
  {
    v20 = v4;
  }
  v188 = v6 - 24;
  v27 = v6 + 16;
  v28 = *(_QWORD *)(v0 + 288);
  static Log.session.getter(v5);
  swift_bridgeObjectRetain_n(v20, 3);
  v29 = swift_retain(v28);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  v181 = v6 + 80;
  if (os_log_type_enabled(v30, v31))
  {
    v155 = v6 + 96;
    v169 = *(_QWORD *)(v0 + 640);
    v173 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v165 = *(_QWORD *)(v0 + 592);
    v158 = *(_QWORD *)(v0 + 288);
    v177 = v6 + 16;
    v32 = *(unsigned __int8 *)(v0 + 1248);
    v33 = swift_slowAlloc(32, -1);
    v161 = swift_slowAlloc(64, -1);
    v191[0] = v161;
    *(_DWORD *)v33 = 134218498;
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v20 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 80, v6 + 88, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v33 + 12) = 2080;
    v34 = PhotosFaceType.description.getter(v32);
    v36 = v35;
    *(_QWORD *)(v0 + 176) = sub_100021438(v34, v35, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 88, v6 + 96, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease(v36);
    swift_release(v158);
    *(_WORD *)(v33 + 22) = 2080;
    v37 = sub_100086480(v20, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, &qword_1000B25E0, &qword_1000B2B30, (uint64_t)&protocol conformance descriptor for ShuffleID);
    swift_bridgeObjectRelease(v20);
    v38 = Array.description.getter(v37, &type metadata for String);
    v39 = v6;
    v41 = v40;
    swift_bridgeObjectRelease(v37);
    v42 = v38;
    v27 = v177;
    *(_QWORD *)(v0 + 184) = sub_100021438(v42, v41, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v155, v0 + 192, v33 + 24, v33 + 32);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Did syncFaces (%ld) for type %s: %s", (uint8_t *)v33, 0x20u);
    swift_arrayDestroy(v161, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v161, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    v173(v169, v165);
  }
  else
  {
    v43 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v44 = *(_QWORD *)(v0 + 640);
    v45 = *(_QWORD *)(v0 + 592);
    v46 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRelease_n(v20, 3);
    swift_release(v46);

    v43(v44, v45);
    v39 = v6;
  }
  v47 = *(_QWORD *)(v0 + 784);
  v48 = *(_QWORD *)(v0 + 776);
  v49 = *(_QWORD *)(v0 + 720);
  v50 = *(_QWORD *)(v0 + 712);
  v51 = *(_QWORD *)(v0 + 328);
  swift_beginAccess(v39, v188, 0, 0);
  v52 = *(_QWORD *)(v0 + 88);
  v53 = (_QWORD *)swift_task_alloc(48);
  *v53 = v51;
  v53[1] = v48;
  v53[2] = v50;
  v53[3] = v47;
  v53[4] = v49;
  KeyPath = swift_getKeyPath(&unk_100096E48);
  swift_task_dealloc(v53);
  swift_retain(KeyPath);
  swift_bridgeObjectRetain(v52);
  v56 = sub_10008BAA8(v55, KeyPath, v27, &qword_1000B25E0);
  *(_QWORD *)(v0 + 992) = v56;
  swift_release_n(KeyPath, 2);
  swift_bridgeObjectRelease(v52);
  v57 = v56[2];
  *(_QWORD *)(v0 + 1000) = v57;
  v58 = *(_QWORD *)(v0 + 376);
  if (v57)
  {
    v59 = *(_DWORD *)(v58 + 80);
    *(_DWORD *)(v0 + 1240) = v59;
    *(_QWORD *)(v0 + 1008) = *(_QWORD *)(v58 + 72);
    v60 = *(void (**)(uint64_t, unint64_t, uint64_t))(v58 + 16);
    *(_QWORD *)(v0 + 1016) = v60;
    v61 = *(_QWORD *)(v0 + 840);
    *(_QWORD *)(v0 + 1160) = 0;
    *(_QWORD *)(v0 + 1152) = v61;
    *(_QWORD *)(v0 + 1144) = v61;
    *(_QWORD *)(v0 + 1136) = v61;
    v62 = *(_QWORD *)(v0 + 368);
    v63 = *(_QWORD *)(v0 + 320);
    v60(v63, *(_QWORD *)(v0 + 992) + ((v59 + 32) & ~(unint64_t)v59), v62);
    v64 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56);
    *(_QWORD *)(v0 + 1168) = v64;
    v64(v63, 0, 1, v62);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v63, 1, v62) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 32))(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 368));
      v65 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
      *(_QWORD *)(v0 + 1176) = v65;
      *v65 = v0;
      v65[1] = sub_100076BA8;
      dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
      return;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v58 + 56))(*(_QWORD *)(v0 + 320), 1, 1, *(_QWORD *)(v0 + 368));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 992));
  v66 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 1024) = v66;
  v67 = *(_QWORD *)(v66 + 16);
  *(_QWORD *)(v0 + 1032) = v67;
  if (v67)
  {
    v69 = *(_QWORD *)(v0 + 432);
    v68 = *(_QWORD *)(v0 + 440);
    v70 = *(_DWORD *)(v68 + 80);
    *(_DWORD *)(v0 + 1244) = v70;
    *(_QWORD *)(v0 + 1040) = *(_QWORD *)(v68 + 72);
    v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v68 + 16);
    *(_QWORD *)(v0 + 1048) = v71;
    v72 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    *(_QWORD *)(v0 + 1064) = 0;
    *(_QWORD *)(v0 + 1056) = v72;
    v74 = *(_QWORD *)(v0 + 456);
    v73 = *(_QWORD *)(v0 + 464);
    v75 = *(_QWORD *)(v0 + 288);
    v76 = v66 + ((v70 + 32) & ~(unint64_t)v70);
    v77 = swift_bridgeObjectRetain(v66);
    v78 = v71(v73, v76, v69, v77);
    static Log.photos.getter(v78);
    ((void (*)(uint64_t, uint64_t, uint64_t))v71)(v74, v73, v69);
    v79 = swift_retain(v75);
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v80, v81))
    {
      v189 = *(_QWORD *)(v0 + 632);
      v184 = *(_QWORD *)(v0 + 592);
      v82 = *(_QWORD *)(v0 + 456);
      v83 = *(_QWORD *)(v0 + 432);
      v162 = *(_QWORD *)(v0 + 440);
      v178 = v72;
      v84 = *(_QWORD *)(v0 + 360);
      v170 = *(_QWORD *)(v0 + 336);
      v166 = *(_QWORD *)(v0 + 328);
      v152 = *(_QWORD *)(v0 + 288);
      v85 = *(unsigned __int8 *)(v0 + 1248);
      v86 = swift_slowAlloc(22, -1);
      v174 = swift_slowAlloc(64, -1);
      v191[0] = v174;
      *(_DWORD *)v86 = 136315394;
      v87 = PhotosFaceType.description.getter(v85);
      v89 = v88;
      *(_QWORD *)(v0 + 152) = sub_100021438(v87, v88, v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v86 + 4, v86 + 12);
      swift_bridgeObjectRelease(v89);
      swift_release(v152);
      *(_WORD *)(v86 + 12) = 2080;
      SyncedPhotosFace.id.getter(v83);
      v90 = *(void (**)(uint64_t, uint64_t))(v162 + 8);
      v90(v82, v83);
      v91 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v92 = dispatch thunk of CustomStringConvertible.description.getter(v166, v91);
      v94 = v93;
      (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v84, v166);
      *(_QWORD *)(v0 + 160) = sub_100021438(v92, v94, v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v181, v86 + 14, v86 + 22);
      swift_bridgeObjectRelease(v94);
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Inserting face, type = %s: %s", (uint8_t *)v86, 0x16u);
      swift_arrayDestroy(v174, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v174, -1, -1);
      swift_slowDealloc(v86, -1, -1);

      v178(v189, v184);
    }
    else
    {
      v112 = *(_QWORD *)(v0 + 632);
      v113 = *(_QWORD *)(v0 + 592);
      v114 = *(_QWORD *)(v0 + 288);
      v90 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
      v90(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
      swift_release(v114);

      v72(v112, v113);
    }
    *(_QWORD *)(v0 + 1072) = v90;
    SyncedPhotosFace.id.getter(*(_QWORD *)(v0 + 432));
    v115 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
    *(_QWORD *)(v0 + 1080) = v115;
    *v115 = v0;
    v115[1] = sub_100075DE4;
    dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
  }
  else
  {
    v95 = *(_QWORD *)(v0 + 704);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 976));
    v96 = swift_release(v95);
    if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
      v96 = sub_100022934(*(unsigned __int8 *)(v0 + 1248));
    v97 = *(_QWORD *)(v0 + 688);
    v98 = *(_QWORD *)(v0 + 680);
    v99 = *(_QWORD *)(v0 + 672);
    v100 = *(_QWORD *)(v0 + 584);
    v101 = *(_QWORD *)(v0 + 568);
    v102 = *(_QWORD *)(v0 + 560);
    if (*(_QWORD *)(v0 + 968))
    {
      swift_willThrow(v96);
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v103 = *(_QWORD *)(v0 + 664);
      v104 = *(_QWORD *)(v0 + 656);
      v105 = *(_QWORD *)(v0 + 648);
      v106 = *(_QWORD *)(v0 + 640);
      v107 = *(_QWORD *)(v0 + 632);
      v108 = *(_QWORD *)(v0 + 624);
      v109 = *(_QWORD *)(v0 + 616);
      v110 = *(_QWORD *)(v0 + 608);
      v111 = *(_QWORD *)(v0 + 584);
      v125 = *(_QWORD *)(v0 + 576);
      v126 = *(_QWORD *)(v0 + 552);
      v128 = *(_QWORD *)(v0 + 528);
      v130 = *(_QWORD *)(v0 + 520);
      v132 = *(_QWORD *)(v0 + 512);
      v134 = *(_QWORD *)(v0 + 504);
      v136 = *(_QWORD *)(v0 + 496);
      v138 = *(_QWORD *)(v0 + 488);
      v140 = *(_QWORD *)(v0 + 480);
      v142 = *(_QWORD *)(v0 + 472);
      v144 = *(_QWORD *)(v0 + 464);
      v146 = *(_QWORD *)(v0 + 456);
      v148 = *(_QWORD *)(v0 + 448);
      v150 = *(_QWORD *)(v0 + 424);
      v153 = *(_QWORD *)(v0 + 416);
      v156 = *(_QWORD *)(v0 + 408);
      v159 = *(_QWORD *)(v0 + 400);
      v163 = *(_QWORD *)(v0 + 392);
      v167 = *(_QWORD *)(v0 + 384);
      v171 = *(_QWORD *)(v0 + 360);
      v175 = *(_QWORD *)(v0 + 352);
      v179 = *(_QWORD *)(v0 + 344);
      v182 = *(_QWORD *)(v0 + 320);
      v185 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v103);
      swift_task_dealloc(v104);
      swift_task_dealloc(v105);
      swift_task_dealloc(v106);
      swift_task_dealloc(v107);
      swift_task_dealloc(v108);
      swift_task_dealloc(v109);
      swift_task_dealloc(v110);
      swift_task_dealloc(v111);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v128);
      swift_task_dealloc(v130);
      swift_task_dealloc(v132);
      swift_task_dealloc(v134);
      swift_task_dealloc(v136);
      swift_task_dealloc(v138);
      swift_task_dealloc(v140);
      swift_task_dealloc(v142);
      swift_task_dealloc(v144);
      swift_task_dealloc(v146);
      swift_task_dealloc(v148);
      swift_task_dealloc(v150);
      swift_task_dealloc(v153);
      swift_task_dealloc(v156);
      swift_task_dealloc(v159);
      swift_task_dealloc(v163);
      swift_task_dealloc(v167);
      swift_task_dealloc(v171);
      swift_task_dealloc(v175);
      swift_task_dealloc(v179);
      swift_task_dealloc(v182);
      swift_task_dealloc(v185);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v101 + 8))(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 560));
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v116 = *(_QWORD *)(v0 + 664);
      v117 = *(_QWORD *)(v0 + 656);
      v118 = *(_QWORD *)(v0 + 648);
      v119 = *(_QWORD *)(v0 + 640);
      v120 = *(_QWORD *)(v0 + 632);
      v121 = *(_QWORD *)(v0 + 624);
      v122 = *(_QWORD *)(v0 + 616);
      v123 = *(_QWORD *)(v0 + 608);
      v124 = *(_QWORD *)(v0 + 584);
      v127 = *(_QWORD *)(v0 + 576);
      v129 = *(_QWORD *)(v0 + 552);
      v131 = *(_QWORD *)(v0 + 528);
      v133 = *(_QWORD *)(v0 + 520);
      v135 = *(_QWORD *)(v0 + 512);
      v137 = *(_QWORD *)(v0 + 504);
      v139 = *(_QWORD *)(v0 + 496);
      v141 = *(_QWORD *)(v0 + 488);
      v143 = *(_QWORD *)(v0 + 480);
      v145 = *(_QWORD *)(v0 + 472);
      v147 = *(_QWORD *)(v0 + 464);
      v149 = *(_QWORD *)(v0 + 456);
      v151 = *(_QWORD *)(v0 + 448);
      v154 = *(_QWORD *)(v0 + 424);
      v157 = *(_QWORD *)(v0 + 416);
      v160 = *(_QWORD *)(v0 + 408);
      v164 = *(_QWORD *)(v0 + 400);
      v168 = *(_QWORD *)(v0 + 392);
      v172 = *(_QWORD *)(v0 + 384);
      v176 = *(_QWORD *)(v0 + 360);
      v180 = *(_QWORD *)(v0 + 352);
      v183 = *(_QWORD *)(v0 + 344);
      v186 = *(_QWORD *)(v0 + 320);
      v190 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v116);
      swift_task_dealloc(v117);
      swift_task_dealloc(v118);
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v127);
      swift_task_dealloc(v129);
      swift_task_dealloc(v131);
      swift_task_dealloc(v133);
      swift_task_dealloc(v135);
      swift_task_dealloc(v137);
      swift_task_dealloc(v139);
      swift_task_dealloc(v141);
      swift_task_dealloc(v143);
      swift_task_dealloc(v145);
      swift_task_dealloc(v147);
      swift_task_dealloc(v149);
      swift_task_dealloc(v151);
      swift_task_dealloc(v154);
      swift_task_dealloc(v157);
      swift_task_dealloc(v160);
      swift_task_dealloc(v164);
      swift_task_dealloc(v168);
      swift_task_dealloc(v172);
      swift_task_dealloc(v176);
      swift_task_dealloc(v180);
      swift_task_dealloc(v183);
      swift_task_dealloc(v186);
      swift_task_dealloc(v190);
    }
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100074C8C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v0[28] = v0[118];
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(predicate:)[1]);
  v0[119] = v1;
  v2 = sub_10000629C(&qword_1000B3DA8);
  v3 = sub_100006454(&qword_1000B3DB0, &qword_1000B3DA8, (uint64_t)&protocol conformance descriptor for [A]);
  *v1 = v0;
  v1[1] = sub_100074D30;
  return Sequence.asyncMap<A>(predicate:)(&unk_1000B3DA0, v0[117], v2, v0[37], v3);
}

uint64_t sub_100074D30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 952);
  *(_QWORD *)(*(_QWORD *)v2 + 960) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100074E8C;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v9 = v4[118];
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v9);
    v8 = v4[96];
    v7 = v4[95];
    v6 = sub_100074DBC;
  }
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_100074DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 920))(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 432));
  v2 = *(_QWORD *)(v0 + 928);
  *(_QWORD *)(v0 + 880) = *(_QWORD *)(v0 + 912);
  *(_QWORD *)(v0 + 872) = v2;
  v3 = *(_QWORD *)(v0 + 752);
  v4 = static CommunicationActor.shared.getter(v1);
  *(_QWORD *)(v0 + 888) = v4;
  v5 = sub_100006454(&qword_1000B3D98, &qword_1000B3D78, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
  v6 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 896) = v6;
  *v6 = v0;
  v6[1] = sub_100072AA0;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 528), v4, v3, v0 + 96, *(_QWORD *)(v0 + 536), v5);
}

uint64_t sub_100074E8C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[118]);
  return swift_task_switch(sub_100074EC8, v0[95], v0[96]);
}

void sub_100074EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(unint64_t, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t KeyPath;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  void (*v63)(uint64_t, unint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t, uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(uint64_t, uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194[3];

  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 536);
  (*(void (**)(_QWORD, _QWORD))(v0 + 920))(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 432));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 960);
  v5 = *(_QWORD *)(v0 + 912);
  *(_QWORD *)(v0 + 976) = v5;
  *(_QWORD *)(v0 + 968) = v4;
  *(_QWORD *)(v0 + 984) = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  v6 = swift_bridgeObjectRetain(v5);
  v7 = static SyncedPhotosFace.destreamify(_:)(v6);
  v8 = swift_bridgeObjectRelease(v5);
  *(_QWORD *)(v0 + 88) = v7;
  v9 = v0 + 88;
  if (v4)
  {
    v194[0] = (uint64_t)&_swiftEmptyArrayStorage;
    v10 = *(_QWORD *)(v7 + 16);
    v11 = swift_bridgeObjectRetain(v7);
    if (v10)
    {
      v12 = 0;
      v190 = &_swiftEmptyArrayStorage;
      while (v12 < *(_QWORD *)(v7 + 16))
      {
        v14 = *(_QWORD *)(v0 + 432);
        v13 = *(_QWORD *)(v0 + 440);
        v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
        v16 = *(_QWORD *)(v13 + 72);
        (*(void (**)(_QWORD, unint64_t, uint64_t, __n128))(v13 + 16))(*(_QWORD *)(v0 + 480), v7 + v15 + v16 * v12, v14, v11);
        if ((SyncedPhotosFace.complete.getter(v14) & 1) != 0)
        {
          v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 32);
          v17(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 432));
          v18 = (uint64_t)v190;
          if ((swift_isUniquelyReferenced_nonNull_native(v190) & 1) == 0)
          {
            sub_10004D854(0, v190[2] + 1, 1);
            v18 = v194[0];
          }
          v20 = *(_QWORD *)(v18 + 16);
          v19 = *(_QWORD *)(v18 + 24);
          if (v20 >= v19 >> 1)
          {
            sub_10004D854(v19 > 1, v20 + 1, 1);
            v18 = v194[0];
          }
          v21 = *(_QWORD *)(v0 + 472);
          v22 = *(_QWORD *)(v0 + 432);
          *(_QWORD *)(v18 + 16) = v20 + 1;
          v190 = (_QWORD *)v18;
          v17(v18 + v15 + v20 * v16, v21, v22);
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 432));
        }
        if (v10 == ++v12)
          goto LABEL_15;
      }
      __break(1u);
      return;
    }
    v190 = &_swiftEmptyArrayStorage;
LABEL_15:
    v9 = v0 + 88;
    v24 = swift_bridgeObjectRelease(v7);
    static Log.session.getter(v24);
    v23 = (uint64_t)v190;
    v25 = swift_retain(v190);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      *(_DWORD *)v28 = 134218240;
      *(_QWORD *)(v0 + 200) = v190[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v28 + 4, v28 + 12);
      swift_release(v190);
      *(_WORD *)(v28 + 12) = 2048;
      swift_beginAccess(v0 + 88, v0 + 16, 0, 0);
      *(_QWORD *)(v0 + 216) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 16);
      v9 = v0 + 88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v28 + 14, v28 + 22);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "An error occurred during sync. Only %ld / %ld finished successfully.", (uint8_t *)v28, 0x16u);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      swift_release(v190);
    }

    (*(void (**)(_QWORD, _QWORD))(v0 + 840))(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 592));
    swift_beginAccess(v9, v0 + 40, 1, 0);
    v29 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 88) = v190;
    v8 = swift_bridgeObjectRelease(v29);
  }
  else
  {
    v23 = v7;
  }
  v191 = v9 - 24;
  v30 = v9 + 16;
  v31 = *(_QWORD *)(v0 + 288);
  static Log.session.getter(v8);
  swift_bridgeObjectRetain_n(v23, 3);
  v32 = swift_retain(v31);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  v184 = v9 + 80;
  if (os_log_type_enabled(v33, v34))
  {
    v158 = v9 + 96;
    v172 = *(_QWORD *)(v0 + 640);
    v176 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v168 = *(_QWORD *)(v0 + 592);
    v161 = *(_QWORD *)(v0 + 288);
    v180 = v9 + 16;
    v35 = *(unsigned __int8 *)(v0 + 1248);
    v36 = swift_slowAlloc(32, -1);
    v164 = swift_slowAlloc(64, -1);
    v194[0] = v164;
    *(_DWORD *)v36 = 134218498;
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v23 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 + 80, v9 + 88, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v36 + 12) = 2080;
    v37 = PhotosFaceType.description.getter(v35);
    v39 = v38;
    *(_QWORD *)(v0 + 176) = sub_100021438(v37, v38, v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 + 88, v9 + 96, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease(v39);
    swift_release(v161);
    *(_WORD *)(v36 + 22) = 2080;
    v40 = sub_100086480(v23, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, &qword_1000B25E0, &qword_1000B2B30, (uint64_t)&protocol conformance descriptor for ShuffleID);
    swift_bridgeObjectRelease(v23);
    v41 = Array.description.getter(v40, &type metadata for String);
    v42 = v9;
    v44 = v43;
    swift_bridgeObjectRelease(v40);
    v45 = v41;
    v30 = v180;
    *(_QWORD *)(v0 + 184) = sub_100021438(v45, v44, v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v158, v0 + 192, v36 + 24, v36 + 32);
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Did syncFaces (%ld) for type %s: %s", (uint8_t *)v36, 0x20u);
    swift_arrayDestroy(v164, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v164, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    v176(v172, v168);
  }
  else
  {
    v46 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v47 = *(_QWORD *)(v0 + 640);
    v48 = *(_QWORD *)(v0 + 592);
    v49 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRelease_n(v23, 3);
    swift_release(v49);

    v46(v47, v48);
    v42 = v9;
  }
  v50 = *(_QWORD *)(v0 + 784);
  v51 = *(_QWORD *)(v0 + 776);
  v52 = *(_QWORD *)(v0 + 720);
  v53 = *(_QWORD *)(v0 + 712);
  v54 = *(_QWORD *)(v0 + 328);
  swift_beginAccess(v42, v191, 0, 0);
  v55 = *(_QWORD *)(v0 + 88);
  v56 = (_QWORD *)swift_task_alloc(48);
  *v56 = v54;
  v56[1] = v51;
  v56[2] = v53;
  v56[3] = v50;
  v56[4] = v52;
  KeyPath = swift_getKeyPath(&unk_100096E48);
  swift_task_dealloc(v56);
  swift_retain(KeyPath);
  swift_bridgeObjectRetain(v55);
  v59 = sub_10008BAA8(v58, KeyPath, v30, &qword_1000B25E0);
  *(_QWORD *)(v0 + 992) = v59;
  swift_release_n(KeyPath, 2);
  swift_bridgeObjectRelease(v55);
  v60 = v59[2];
  *(_QWORD *)(v0 + 1000) = v60;
  v61 = *(_QWORD *)(v0 + 376);
  if (v60)
  {
    v62 = *(_DWORD *)(v61 + 80);
    *(_DWORD *)(v0 + 1240) = v62;
    *(_QWORD *)(v0 + 1008) = *(_QWORD *)(v61 + 72);
    v63 = *(void (**)(uint64_t, unint64_t, uint64_t))(v61 + 16);
    *(_QWORD *)(v0 + 1016) = v63;
    v64 = *(_QWORD *)(v0 + 840);
    *(_QWORD *)(v0 + 1160) = 0;
    *(_QWORD *)(v0 + 1152) = v64;
    *(_QWORD *)(v0 + 1144) = v64;
    *(_QWORD *)(v0 + 1136) = v64;
    v65 = *(_QWORD *)(v0 + 368);
    v66 = *(_QWORD *)(v0 + 320);
    v63(v66, *(_QWORD *)(v0 + 992) + ((v62 + 32) & ~(unint64_t)v62), v65);
    v67 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56);
    *(_QWORD *)(v0 + 1168) = v67;
    v67(v66, 0, 1, v65);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v66, 1, v65) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 32))(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 368));
      v68 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
      *(_QWORD *)(v0 + 1176) = v68;
      *v68 = v0;
      v68[1] = sub_100076BA8;
      dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
      return;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v61 + 56))(*(_QWORD *)(v0 + 320), 1, 1, *(_QWORD *)(v0 + 368));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 992));
  v69 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 1024) = v69;
  v70 = *(_QWORD *)(v69 + 16);
  *(_QWORD *)(v0 + 1032) = v70;
  if (v70)
  {
    v72 = *(_QWORD *)(v0 + 432);
    v71 = *(_QWORD *)(v0 + 440);
    v73 = *(_DWORD *)(v71 + 80);
    *(_DWORD *)(v0 + 1244) = v73;
    *(_QWORD *)(v0 + 1040) = *(_QWORD *)(v71 + 72);
    v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v71 + 16);
    *(_QWORD *)(v0 + 1048) = v74;
    v75 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    *(_QWORD *)(v0 + 1064) = 0;
    *(_QWORD *)(v0 + 1056) = v75;
    v77 = *(_QWORD *)(v0 + 456);
    v76 = *(_QWORD *)(v0 + 464);
    v78 = *(_QWORD *)(v0 + 288);
    v79 = v69 + ((v73 + 32) & ~(unint64_t)v73);
    v80 = swift_bridgeObjectRetain(v69);
    v81 = v74(v76, v79, v72, v80);
    static Log.photos.getter(v81);
    ((void (*)(uint64_t, uint64_t, uint64_t))v74)(v77, v76, v72);
    v82 = swift_retain(v78);
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v192 = *(_QWORD *)(v0 + 632);
      v187 = *(_QWORD *)(v0 + 592);
      v85 = *(_QWORD *)(v0 + 456);
      v86 = *(_QWORD *)(v0 + 432);
      v165 = *(_QWORD *)(v0 + 440);
      v181 = v75;
      v87 = *(_QWORD *)(v0 + 360);
      v173 = *(_QWORD *)(v0 + 336);
      v169 = *(_QWORD *)(v0 + 328);
      v155 = *(_QWORD *)(v0 + 288);
      v88 = *(unsigned __int8 *)(v0 + 1248);
      v89 = swift_slowAlloc(22, -1);
      v177 = swift_slowAlloc(64, -1);
      v194[0] = v177;
      *(_DWORD *)v89 = 136315394;
      v90 = PhotosFaceType.description.getter(v88);
      v92 = v91;
      *(_QWORD *)(v0 + 152) = sub_100021438(v90, v91, v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v89 + 4, v89 + 12);
      swift_bridgeObjectRelease(v92);
      swift_release(v155);
      *(_WORD *)(v89 + 12) = 2080;
      SyncedPhotosFace.id.getter(v86);
      v93 = *(void (**)(uint64_t, uint64_t))(v165 + 8);
      v93(v85, v86);
      v94 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v95 = dispatch thunk of CustomStringConvertible.description.getter(v169, v94);
      v97 = v96;
      (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v87, v169);
      *(_QWORD *)(v0 + 160) = sub_100021438(v95, v97, v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v184, v89 + 14, v89 + 22);
      swift_bridgeObjectRelease(v97);
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Inserting face, type = %s: %s", (uint8_t *)v89, 0x16u);
      swift_arrayDestroy(v177, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v177, -1, -1);
      swift_slowDealloc(v89, -1, -1);

      v181(v192, v187);
    }
    else
    {
      v115 = *(_QWORD *)(v0 + 632);
      v116 = *(_QWORD *)(v0 + 592);
      v117 = *(_QWORD *)(v0 + 288);
      v93 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
      v93(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
      swift_release(v117);

      v75(v115, v116);
    }
    *(_QWORD *)(v0 + 1072) = v93;
    SyncedPhotosFace.id.getter(*(_QWORD *)(v0 + 432));
    v118 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
    *(_QWORD *)(v0 + 1080) = v118;
    *v118 = v0;
    v118[1] = sub_100075DE4;
    dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
  }
  else
  {
    v98 = *(_QWORD *)(v0 + 704);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 976));
    v99 = swift_release(v98);
    if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
      v99 = sub_100022934(*(unsigned __int8 *)(v0 + 1248));
    v100 = *(_QWORD *)(v0 + 688);
    v101 = *(_QWORD *)(v0 + 680);
    v102 = *(_QWORD *)(v0 + 672);
    v103 = *(_QWORD *)(v0 + 584);
    v104 = *(_QWORD *)(v0 + 568);
    v105 = *(_QWORD *)(v0 + 560);
    if (*(_QWORD *)(v0 + 968))
    {
      swift_willThrow(v99);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v103, v105);
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v106 = *(_QWORD *)(v0 + 664);
      v107 = *(_QWORD *)(v0 + 656);
      v108 = *(_QWORD *)(v0 + 648);
      v109 = *(_QWORD *)(v0 + 640);
      v110 = *(_QWORD *)(v0 + 632);
      v111 = *(_QWORD *)(v0 + 624);
      v112 = *(_QWORD *)(v0 + 616);
      v113 = *(_QWORD *)(v0 + 608);
      v114 = *(_QWORD *)(v0 + 584);
      v128 = *(_QWORD *)(v0 + 576);
      v129 = *(_QWORD *)(v0 + 552);
      v131 = *(_QWORD *)(v0 + 528);
      v133 = *(_QWORD *)(v0 + 520);
      v135 = *(_QWORD *)(v0 + 512);
      v137 = *(_QWORD *)(v0 + 504);
      v139 = *(_QWORD *)(v0 + 496);
      v141 = *(_QWORD *)(v0 + 488);
      v143 = *(_QWORD *)(v0 + 480);
      v145 = *(_QWORD *)(v0 + 472);
      v147 = *(_QWORD *)(v0 + 464);
      v149 = *(_QWORD *)(v0 + 456);
      v151 = *(_QWORD *)(v0 + 448);
      v153 = *(_QWORD *)(v0 + 424);
      v156 = *(_QWORD *)(v0 + 416);
      v159 = *(_QWORD *)(v0 + 408);
      v162 = *(_QWORD *)(v0 + 400);
      v166 = *(_QWORD *)(v0 + 392);
      v170 = *(_QWORD *)(v0 + 384);
      v174 = *(_QWORD *)(v0 + 360);
      v178 = *(_QWORD *)(v0 + 352);
      v182 = *(_QWORD *)(v0 + 344);
      v185 = *(_QWORD *)(v0 + 320);
      v188 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v106);
      swift_task_dealloc(v107);
      swift_task_dealloc(v108);
      swift_task_dealloc(v109);
      swift_task_dealloc(v110);
      swift_task_dealloc(v111);
      swift_task_dealloc(v112);
      swift_task_dealloc(v113);
      swift_task_dealloc(v114);
      swift_task_dealloc(v128);
      swift_task_dealloc(v129);
      swift_task_dealloc(v131);
      swift_task_dealloc(v133);
      swift_task_dealloc(v135);
      swift_task_dealloc(v137);
      swift_task_dealloc(v139);
      swift_task_dealloc(v141);
      swift_task_dealloc(v143);
      swift_task_dealloc(v145);
      swift_task_dealloc(v147);
      swift_task_dealloc(v149);
      swift_task_dealloc(v151);
      swift_task_dealloc(v153);
      swift_task_dealloc(v156);
      swift_task_dealloc(v159);
      swift_task_dealloc(v162);
      swift_task_dealloc(v166);
      swift_task_dealloc(v170);
      swift_task_dealloc(v174);
      swift_task_dealloc(v178);
      swift_task_dealloc(v182);
      swift_task_dealloc(v185);
      swift_task_dealloc(v188);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v104 + 8))(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 560));
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v119 = *(_QWORD *)(v0 + 664);
      v120 = *(_QWORD *)(v0 + 656);
      v121 = *(_QWORD *)(v0 + 648);
      v122 = *(_QWORD *)(v0 + 640);
      v123 = *(_QWORD *)(v0 + 632);
      v124 = *(_QWORD *)(v0 + 624);
      v125 = *(_QWORD *)(v0 + 616);
      v126 = *(_QWORD *)(v0 + 608);
      v127 = *(_QWORD *)(v0 + 584);
      v130 = *(_QWORD *)(v0 + 576);
      v132 = *(_QWORD *)(v0 + 552);
      v134 = *(_QWORD *)(v0 + 528);
      v136 = *(_QWORD *)(v0 + 520);
      v138 = *(_QWORD *)(v0 + 512);
      v140 = *(_QWORD *)(v0 + 504);
      v142 = *(_QWORD *)(v0 + 496);
      v144 = *(_QWORD *)(v0 + 488);
      v146 = *(_QWORD *)(v0 + 480);
      v148 = *(_QWORD *)(v0 + 472);
      v150 = *(_QWORD *)(v0 + 464);
      v152 = *(_QWORD *)(v0 + 456);
      v154 = *(_QWORD *)(v0 + 448);
      v157 = *(_QWORD *)(v0 + 424);
      v160 = *(_QWORD *)(v0 + 416);
      v163 = *(_QWORD *)(v0 + 408);
      v167 = *(_QWORD *)(v0 + 400);
      v171 = *(_QWORD *)(v0 + 392);
      v175 = *(_QWORD *)(v0 + 384);
      v179 = *(_QWORD *)(v0 + 360);
      v183 = *(_QWORD *)(v0 + 352);
      v186 = *(_QWORD *)(v0 + 344);
      v189 = *(_QWORD *)(v0 + 320);
      v193 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v127);
      swift_task_dealloc(v130);
      swift_task_dealloc(v132);
      swift_task_dealloc(v134);
      swift_task_dealloc(v136);
      swift_task_dealloc(v138);
      swift_task_dealloc(v140);
      swift_task_dealloc(v142);
      swift_task_dealloc(v144);
      swift_task_dealloc(v146);
      swift_task_dealloc(v148);
      swift_task_dealloc(v150);
      swift_task_dealloc(v152);
      swift_task_dealloc(v154);
      swift_task_dealloc(v157);
      swift_task_dealloc(v160);
      swift_task_dealloc(v163);
      swift_task_dealloc(v167);
      swift_task_dealloc(v171);
      swift_task_dealloc(v175);
      swift_task_dealloc(v179);
      swift_task_dealloc(v183);
      swift_task_dealloc(v186);
      swift_task_dealloc(v189);
      swift_task_dealloc(v193);
    }
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100075DE4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1080);
  *(_QWORD *)(*(_QWORD *)v1 + 1088) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[128];
    v5 = v2[122];
    (*(void (**)(_QWORD, _QWORD))(v2[42] + 8))(v2[44], v2[41]);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    v6 = v2[96];
    v7 = v2[95];
    v8 = sub_10008DD90;
  }
  else
  {
    v9 = v2[44];
    v10 = v2[41];
    v11 = *(void (**)(uint64_t, uint64_t))(v2[42] + 8);
    v2[137] = v11;
    v11(v9, v10);
    v6 = v2[96];
    v7 = v2[95];
    v8 = sub_100075E94;
  }
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_100075E94()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  os_log_type_t type;
  uint64_t v46;
  NSObject *log;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  _QWORD *v51;
  unint64_t *v52;
  uint64_t v53[2];

  v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[131];
  v2 = v0[58];
  v3 = v0[56];
  v4 = v0[54];
  v5 = SyncedPhotosFace.photos.getter(v4);
  v6 = sub_10004F36C(v5);
  swift_bridgeObjectRelease(v5);
  v7 = SyncedPhotosFace.cached.getter(v4);
  v53[0] = (uint64_t)v6;
  v8 = sub_100017970(v7);
  v0[138] = v6;
  static Log.photos.getter(v8);
  v1(v3, v2, v4);
  v9 = swift_bridgeObjectRetain_n(v6, 3);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  v52 = v6;
  if (os_log_type_enabled(v10, v11))
  {
    v41 = (void (*)(uint64_t, uint64_t))v0[137];
    v42 = (void (*)(uint64_t, uint64_t))v0[134];
    v40 = v0[123];
    v50 = (void (*)(uint64_t, uint64_t))v0[105];
    v48 = v0[74];
    v49 = v0[78];
    v39 = v0[56];
    v13 = v0[53];
    v12 = v0[54];
    log = v10;
    v14 = v0[45];
    v43 = v0[46];
    v44 = v0[47];
    v15 = v0[41];
    v16 = swift_slowAlloc(32, -1);
    v46 = swift_slowAlloc(64, -1);
    *(_DWORD *)v16 = 134218498;
    v0[16] = v6[2];
    v51 = v0 + 105;
    v53[0] = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v6);
    *(_WORD *)(v16 + 12) = 2080;
    type = v11;
    SyncedPhotosFace.id.getter(v12);
    dispatch thunk of PhotosFaceID.id.getter(v15, v40);
    v41(v14, v15);
    v42(v39, v12);
    v17 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v43, v17);
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v13, v43);
    v0[17] = sub_100021438(v18, v20, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v16 + 22) = 2080;
    swift_bridgeObjectRetain(v6);
    v22 = Array.description.getter(v21, v43);
    v24 = v23;
    swift_bridgeObjectRelease(v6);
    v0[18] = sub_100021438(v22, v24, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v16 + 24, v16 + 32);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Relating photos %ld for face %s, photos = %s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v50(v49, v48);
  }
  else
  {
    v51 = v0 + 132;
    v25 = (void (*)(uint64_t, uint64_t))v0[132];
    v26 = v0[78];
    v27 = v0[74];
    ((void (*)(_QWORD, _QWORD))v0[134])(v0[56], v0[54]);
    swift_bridgeObjectRelease_n(v6, 3);

    v25(v26, v27);
  }
  v0[139] = *v51;
  v28 = (void (*)(uint64_t, uint64_t))v0[137];
  v29 = v0[123];
  v30 = v0[54];
  v31 = v0[43];
  v32 = v0[41];
  v33 = *(_QWORD *)(v0[36] + 80);
  v0[15] = v33;
  swift_retain(v33);
  SyncedPhotosFace.id.getter(v30);
  dispatch thunk of PhotosFaceID.id.getter(v32, v29);
  v28(v31, v32);
  v34 = SyncedPhotosFace.day.getter(v30);
  if ((v35 & 1) != 0)
    v36 = 0;
  else
    v36 = v34;
  v37 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)[1]);
  v0[140] = v37;
  *v37 = v0;
  v37[1] = sub_1000762FC;
  return dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)(v52, v0[52], v36, v0[89], v0[90]);
}

uint64_t sub_1000762FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1120);
  *(_QWORD *)(*(_QWORD *)v1 + 1128) = v0;
  swift_task_dealloc(v3);
  v4 = v2[138];
  if (v0)
  {
    v5 = v2[128];
    v6 = v2[122];
    v7 = v2[52];
    v8 = v2[46];
    v9 = v2[47];
    swift_bridgeObjectRelease(v4);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_release(v2[15]);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    v10 = v2[96];
    v11 = v2[95];
    v12 = sub_10008DD88;
  }
  else
  {
    v13 = v2[52];
    v14 = v2[46];
    v15 = v2[47];
    swift_bridgeObjectRelease(v4);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    swift_release(v2[15]);
    v10 = v2[96];
    v11 = v2[95];
    v12 = sub_1000763DC;
  }
  return swift_task_switch(v12, v11, v10);
}

uint64_t sub_1000763DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t (*v22)(unint64_t, unint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[3];

  v1 = *(_QWORD *)(v0 + 1032);
  v2 = *(_QWORD *)(v0 + 1064) + 1;
  (*(void (**)(_QWORD, _QWORD))(v0 + 1072))(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 432));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1024));
    v3 = *(_QWORD *)(v0 + 704);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 976));
    v4 = swift_release(v3);
    if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
      v4 = sub_100022934(*(unsigned __int8 *)(v0 + 1248));
    v5 = *(_QWORD *)(v0 + 688);
    v6 = *(_QWORD *)(v0 + 680);
    v7 = *(_QWORD *)(v0 + 672);
    v8 = *(_QWORD *)(v0 + 584);
    v9 = *(_QWORD *)(v0 + 568);
    v10 = *(_QWORD *)(v0 + 560);
    if (*(_QWORD *)(v0 + 968))
    {
      swift_willThrow(v4);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v11 = *(_QWORD *)(v0 + 664);
      v12 = *(_QWORD *)(v0 + 656);
      v13 = *(_QWORD *)(v0 + 648);
      v14 = *(_QWORD *)(v0 + 640);
      v15 = *(_QWORD *)(v0 + 632);
      v16 = *(_QWORD *)(v0 + 624);
      v17 = *(_QWORD *)(v0 + 616);
      v18 = *(_QWORD *)(v0 + 608);
      v19 = *(_QWORD *)(v0 + 584);
      v58 = *(_QWORD *)(v0 + 576);
      v59 = *(_QWORD *)(v0 + 552);
      v61 = *(_QWORD *)(v0 + 528);
      v63 = *(_QWORD *)(v0 + 520);
      v65 = *(_QWORD *)(v0 + 512);
      v67 = *(_QWORD *)(v0 + 504);
      v69 = *(_QWORD *)(v0 + 496);
      v71 = *(_QWORD *)(v0 + 488);
      v73 = *(_QWORD *)(v0 + 480);
      v75 = *(_QWORD *)(v0 + 472);
      v77 = *(_QWORD *)(v0 + 464);
      v79 = *(_QWORD *)(v0 + 456);
      v81 = *(_QWORD *)(v0 + 448);
      v83 = *(_QWORD *)(v0 + 424);
      v85 = *(_QWORD *)(v0 + 416);
      v88 = *(_QWORD *)(v0 + 408);
      v90 = *(_QWORD *)(v0 + 400);
      v92 = *(_QWORD *)(v0 + 392);
      v95 = *(_QWORD *)(v0 + 384);
      v98 = *(_QWORD *)(v0 + 360);
      v101 = *(_QWORD *)(v0 + 352);
      v103 = *(_QWORD *)(v0 + 344);
      v106 = *(_QWORD *)(v0 + 320);
      v109 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v61);
      swift_task_dealloc(v63);
      swift_task_dealloc(v65);
      swift_task_dealloc(v67);
      swift_task_dealloc(v69);
      swift_task_dealloc(v71);
      swift_task_dealloc(v73);
      swift_task_dealloc(v75);
      swift_task_dealloc(v77);
      swift_task_dealloc(v79);
      swift_task_dealloc(v81);
      swift_task_dealloc(v83);
      swift_task_dealloc(v85);
      swift_task_dealloc(v88);
      swift_task_dealloc(v90);
      swift_task_dealloc(v92);
      swift_task_dealloc(v95);
      swift_task_dealloc(v98);
      swift_task_dealloc(v101);
      swift_task_dealloc(v103);
      swift_task_dealloc(v106);
      swift_task_dealloc(v109);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v9 + 8))(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 560));
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v49 = *(_QWORD *)(v0 + 664);
      v50 = *(_QWORD *)(v0 + 656);
      v51 = *(_QWORD *)(v0 + 648);
      v52 = *(_QWORD *)(v0 + 640);
      v53 = *(_QWORD *)(v0 + 632);
      v54 = *(_QWORD *)(v0 + 624);
      v55 = *(_QWORD *)(v0 + 616);
      v56 = *(_QWORD *)(v0 + 608);
      v57 = *(_QWORD *)(v0 + 584);
      v60 = *(_QWORD *)(v0 + 576);
      v62 = *(_QWORD *)(v0 + 552);
      v64 = *(_QWORD *)(v0 + 528);
      v66 = *(_QWORD *)(v0 + 520);
      v68 = *(_QWORD *)(v0 + 512);
      v70 = *(_QWORD *)(v0 + 504);
      v72 = *(_QWORD *)(v0 + 496);
      v74 = *(_QWORD *)(v0 + 488);
      v76 = *(_QWORD *)(v0 + 480);
      v78 = *(_QWORD *)(v0 + 472);
      v80 = *(_QWORD *)(v0 + 464);
      v82 = *(_QWORD *)(v0 + 456);
      v84 = *(_QWORD *)(v0 + 448);
      v87 = *(_QWORD *)(v0 + 424);
      v89 = *(_QWORD *)(v0 + 416);
      v91 = *(_QWORD *)(v0 + 408);
      v94 = *(_QWORD *)(v0 + 400);
      v97 = *(_QWORD *)(v0 + 392);
      v100 = *(_QWORD *)(v0 + 384);
      v102 = *(_QWORD *)(v0 + 360);
      v105 = *(_QWORD *)(v0 + 352);
      v108 = *(_QWORD *)(v0 + 344);
      v111 = *(_QWORD *)(v0 + 320);
      v113 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v60);
      swift_task_dealloc(v62);
      swift_task_dealloc(v64);
      swift_task_dealloc(v66);
      swift_task_dealloc(v68);
      swift_task_dealloc(v70);
      swift_task_dealloc(v72);
      swift_task_dealloc(v74);
      swift_task_dealloc(v76);
      swift_task_dealloc(v78);
      swift_task_dealloc(v80);
      swift_task_dealloc(v82);
      swift_task_dealloc(v84);
      swift_task_dealloc(v87);
      swift_task_dealloc(v89);
      swift_task_dealloc(v91);
      swift_task_dealloc(v94);
      swift_task_dealloc(v97);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v105);
      swift_task_dealloc(v108);
      swift_task_dealloc(v111);
      swift_task_dealloc(v113);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 1112);
    v21 = *(_QWORD *)(v0 + 1064) + 1;
    *(_QWORD *)(v0 + 1064) = v21;
    *(_QWORD *)(v0 + 1056) = v20;
    v22 = *(uint64_t (**)(unint64_t, unint64_t, uint64_t))(v0 + 1048);
    v24 = *(_QWORD *)(v0 + 456);
    v23 = *(_QWORD *)(v0 + 464);
    v25 = *(_QWORD *)(v0 + 432);
    v26 = *(_QWORD *)(v0 + 288);
    v27 = v22(v23, *(_QWORD *)(v0 + 1024)+ ((*(unsigned __int8 *)(v0 + 1244) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1244))+ *(_QWORD *)(v0 + 1040) * v21, v25);
    static Log.photos.getter(v27);
    v22(v24, v23, v25);
    v28 = swift_retain(v26);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v112 = *(_QWORD *)(v0 + 632);
      v110 = *(_QWORD *)(v0 + 592);
      v31 = *(_QWORD *)(v0 + 456);
      v32 = *(_QWORD *)(v0 + 432);
      v93 = *(_QWORD *)(v0 + 440);
      v33 = *(_QWORD *)(v0 + 360);
      v99 = *(_QWORD *)(v0 + 336);
      v96 = *(_QWORD *)(v0 + 328);
      v86 = *(_QWORD *)(v0 + 288);
      v34 = *(unsigned __int8 *)(v0 + 1248);
      v35 = swift_slowAlloc(22, -1);
      v104 = swift_slowAlloc(64, -1);
      v114[0] = v104;
      *(_DWORD *)v35 = 136315394;
      v107 = v20;
      v36 = PhotosFaceType.description.getter(v34);
      v38 = v37;
      *(_QWORD *)(v0 + 152) = sub_100021438(v36, v37, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v38);
      swift_release(v86);
      *(_WORD *)(v35 + 12) = 2080;
      SyncedPhotosFace.id.getter(v32);
      v39 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
      v39(v31, v32);
      v40 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v96, v40);
      v43 = v42;
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v33, v96);
      *(_QWORD *)(v0 + 160) = sub_100021438(v41, v43, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Inserting face, type = %s: %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v104, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v104, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      v107(v112, v110);
    }
    else
    {
      v44 = *(_QWORD *)(v0 + 632);
      v45 = *(_QWORD *)(v0 + 592);
      v46 = *(_QWORD *)(v0 + 288);
      v39 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
      v39(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
      swift_release(v46);

      v20(v44, v45);
    }
    *(_QWORD *)(v0 + 1072) = v39;
    SyncedPhotosFace.id.getter(*(_QWORD *)(v0 + 432));
    v47 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
    *(_QWORD *)(v0 + 1080) = v47;
    *v47 = v0;
    v47[1] = sub_100075DE4;
    return dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
  }
}

uint64_t sub_100076BA8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1176);
  *(_QWORD *)(*v1 + 1184) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000776A0;
  else
    v4 = sub_100076C0C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 760), *(_QWORD *)(v2 + 768));
}

uint64_t sub_100076C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  os_log_type_t v23;
  uint64_t *v24;
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153[3];

  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 1016);
  v4 = *(_QWORD *)(v1 + 400);
  v3 = *(_QWORD *)(v1 + 408);
  v5 = *(_QWORD *)(v1 + 368);
  static Log.photos.getter(a1);
  v6 = v2(v4, v3, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v1 + 616);
  v11 = *(_QWORD *)(v1 + 592);
  v12 = *(_QWORD *)(v1 + 400);
  v13 = *(_QWORD *)(v1 + 408);
  v14 = *(_QWORD *)(v1 + 368);
  v15 = *(_QWORD *)(v1 + 376);
  if (v9)
  {
    v150 = *(void (**)(uint64_t, uint64_t))(v1 + 840);
    v146 = *(_QWORD *)(v1 + 408);
    v16 = swift_slowAlloc(12, -1);
    v142 = v10;
    v17 = swift_slowAlloc(32, -1);
    v153[0] = v17;
    *(_DWORD *)v16 = 136315138;
    v18 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v14, v18);
    v21 = v20;
    *(_QWORD *)(v16 + 4) = sub_100021438(v19, v20, v153);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v12, v14);
    v23 = v8;
    v24 = (uint64_t *)(v1 + 840);
    _os_log_impl((void *)&_mh_execute_header, v7, v23, "Cleared photos for: %s", (uint8_t *)v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v150(v142, v11);
    v22(v146, v14);
  }
  else
  {
    v24 = (uint64_t *)(v1 + 1136);
    v25 = *(void (**)(uint64_t, uint64_t))(v1 + 1136);

    v26 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v26(v12, v14);
    v25(v10, v11);
    v26(v13, v14);
  }
  v27 = *(_QWORD *)(v1 + 1160) + 1;
  if (v27 == *(_QWORD *)(v1 + 1000))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1 + 1168))(*(_QWORD *)(v1 + 320), 1, 1, *(_QWORD *)(v1 + 368));
  }
  else
  {
    v28 = *v24;
    *(_QWORD *)(v1 + 1160) = v27;
    *(_QWORD *)(v1 + 1152) = v28;
    *(_QWORD *)(v1 + 1144) = v28;
    *(_QWORD *)(v1 + 1136) = v28;
    v29 = *(_QWORD *)(v1 + 368);
    v30 = *(_QWORD *)(v1 + 376);
    v31 = *(_QWORD *)(v1 + 320);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 1016))(v31, *(_QWORD *)(v1 + 992)+ ((*(unsigned __int8 *)(v1 + 1240) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 1240))+ *(_QWORD *)(v1 + 1008) * v27, v29);
    v32 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56);
    *(_QWORD *)(v1 + 1168) = v32;
    v32(v31, 0, 1, v29);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v29) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 376) + 32))(*(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 368));
      v79 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
      *(_QWORD *)(v1 + 1176) = v79;
      *v79 = v1;
      v79[1] = sub_100076BA8;
      return dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 712), *(_QWORD *)(v1 + 720));
    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 992));
  v33 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 1024) = v33;
  v34 = *(_QWORD *)(v33 + 16);
  *(_QWORD *)(v1 + 1032) = v34;
  if (v34)
  {
    v36 = *(_QWORD *)(v1 + 432);
    v35 = *(_QWORD *)(v1 + 440);
    v37 = *(_DWORD *)(v35 + 80);
    *(_DWORD *)(v1 + 1244) = v37;
    *(_QWORD *)(v1 + 1040) = *(_QWORD *)(v35 + 72);
    v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v35 + 16);
    *(_QWORD *)(v1 + 1048) = v38;
    v39 = *(void (**)(uint64_t, uint64_t))(v1 + 840);
    *(_QWORD *)(v1 + 1064) = 0;
    *(_QWORD *)(v1 + 1056) = v39;
    v41 = *(_QWORD *)(v1 + 456);
    v40 = *(_QWORD *)(v1 + 464);
    v42 = *(_QWORD *)(v1 + 288);
    v43 = v33 + ((v37 + 32) & ~(unint64_t)v37);
    v44 = swift_bridgeObjectRetain(v33);
    v45 = v38(v40, v43, v36, v44);
    static Log.photos.getter(v45);
    ((void (*)(uint64_t, uint64_t, uint64_t))v38)(v41, v40, v36);
    v46 = swift_retain(v42);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v151 = *(_QWORD *)(v1 + 632);
      v147 = *(_QWORD *)(v1 + 592);
      v49 = *(_QWORD *)(v1 + 456);
      v128 = *(_QWORD *)(v1 + 440);
      v143 = v39;
      v50 = *(_QWORD *)(v1 + 432);
      v51 = *(_QWORD *)(v1 + 360);
      v134 = *(_QWORD *)(v1 + 336);
      v131 = *(_QWORD *)(v1 + 328);
      v121 = *(_QWORD *)(v1 + 288);
      v52 = *(unsigned __int8 *)(v1 + 1248);
      v53 = swift_slowAlloc(22, -1);
      v137 = swift_slowAlloc(64, -1);
      v153[0] = v137;
      *(_DWORD *)v53 = 136315394;
      v54 = PhotosFaceType.description.getter(v52);
      v56 = v55;
      *(_QWORD *)(v1 + 152) = sub_100021438(v54, v55, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v53 + 4, v53 + 12);
      swift_release(v121);
      swift_bridgeObjectRelease(v56);
      *(_WORD *)(v53 + 12) = 2080;
      SyncedPhotosFace.id.getter(v50);
      v57 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
      v57(v49, v50);
      v58 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v131, v58);
      v61 = v60;
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v51, v131);
      *(_QWORD *)(v1 + 160) = sub_100021438(v59, v61, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v53 + 14, v53 + 22);
      swift_bridgeObjectRelease(v61);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Inserting face, type = %s: %s", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy(v137, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v137, -1, -1);
      swift_slowDealloc(v53, -1, -1);

      v143(v151, v147);
    }
    else
    {
      v81 = *(_QWORD *)(v1 + 632);
      v82 = *(_QWORD *)(v1 + 592);
      v83 = *(_QWORD *)(v1 + 288);
      v57 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 440) + 8);
      v57(*(_QWORD *)(v1 + 456), *(_QWORD *)(v1 + 432));

      swift_release(v83);
      v39(v81, v82);
    }
    *(_QWORD *)(v1 + 1072) = v57;
    SyncedPhotosFace.id.getter(*(_QWORD *)(v1 + 432));
    v84 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
    *(_QWORD *)(v1 + 1080) = v84;
    *v84 = v1;
    v84[1] = sub_100075DE4;
    return dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v1 + 352), *(_QWORD *)(v1 + 712), *(_QWORD *)(v1 + 720));
  }
  else
  {
    v62 = *(_QWORD *)(v1 + 976);
    swift_release(*(_QWORD *)(v1 + 704));
    v63 = swift_bridgeObjectRelease(v62);
    if (*(_QWORD *)(*(_QWORD *)(v1 + 88) + 16))
      v63 = sub_100022934(*(unsigned __int8 *)(v1 + 1248));
    v64 = *(_QWORD *)(v1 + 688);
    v65 = *(_QWORD *)(v1 + 680);
    v66 = *(_QWORD *)(v1 + 672);
    v67 = *(_QWORD *)(v1 + 584);
    v68 = *(_QWORD *)(v1 + 568);
    v69 = *(_QWORD *)(v1 + 560);
    if (*(_QWORD *)(v1 + 968))
    {
      swift_willThrow(v63);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
      v70 = *(_QWORD *)(v1 + 664);
      v71 = *(_QWORD *)(v1 + 656);
      v72 = *(_QWORD *)(v1 + 648);
      v73 = *(_QWORD *)(v1 + 640);
      v74 = *(_QWORD *)(v1 + 632);
      v75 = *(_QWORD *)(v1 + 624);
      v76 = *(_QWORD *)(v1 + 616);
      v77 = *(_QWORD *)(v1 + 608);
      v78 = *(_QWORD *)(v1 + 584);
      v94 = *(_QWORD *)(v1 + 576);
      v95 = *(_QWORD *)(v1 + 552);
      v97 = *(_QWORD *)(v1 + 528);
      v99 = *(_QWORD *)(v1 + 520);
      v101 = *(_QWORD *)(v1 + 512);
      v103 = *(_QWORD *)(v1 + 504);
      v105 = *(_QWORD *)(v1 + 496);
      v107 = *(_QWORD *)(v1 + 488);
      v109 = *(_QWORD *)(v1 + 480);
      v111 = *(_QWORD *)(v1 + 472);
      v113 = *(_QWORD *)(v1 + 464);
      v115 = *(_QWORD *)(v1 + 456);
      v117 = *(_QWORD *)(v1 + 448);
      v119 = *(_QWORD *)(v1 + 424);
      v122 = *(_QWORD *)(v1 + 416);
      v124 = *(_QWORD *)(v1 + 408);
      v126 = *(_QWORD *)(v1 + 400);
      v129 = *(_QWORD *)(v1 + 392);
      v132 = *(_QWORD *)(v1 + 384);
      v135 = *(_QWORD *)(v1 + 360);
      v138 = *(_QWORD *)(v1 + 352);
      v140 = *(_QWORD *)(v1 + 344);
      v144 = *(_QWORD *)(v1 + 320);
      v148 = *(_QWORD *)(v1 + 312);
      swift_task_dealloc(*(_QWORD *)(v1 + 688));
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v94);
      swift_task_dealloc(v95);
      swift_task_dealloc(v97);
      swift_task_dealloc(v99);
      swift_task_dealloc(v101);
      swift_task_dealloc(v103);
      swift_task_dealloc(v105);
      swift_task_dealloc(v107);
      swift_task_dealloc(v109);
      swift_task_dealloc(v111);
      swift_task_dealloc(v113);
      swift_task_dealloc(v115);
      swift_task_dealloc(v117);
      swift_task_dealloc(v119);
      swift_task_dealloc(v122);
      swift_task_dealloc(v124);
      swift_task_dealloc(v126);
      swift_task_dealloc(v129);
      swift_task_dealloc(v132);
      swift_task_dealloc(v135);
      swift_task_dealloc(v138);
      swift_task_dealloc(v140);
      swift_task_dealloc(v144);
      swift_task_dealloc(v148);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v68 + 8))(*(_QWORD *)(v1 + 584), *(_QWORD *)(v1 + 560));
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
      v85 = *(_QWORD *)(v1 + 664);
      v86 = *(_QWORD *)(v1 + 656);
      v87 = *(_QWORD *)(v1 + 648);
      v88 = *(_QWORD *)(v1 + 640);
      v89 = *(_QWORD *)(v1 + 632);
      v90 = *(_QWORD *)(v1 + 624);
      v91 = *(_QWORD *)(v1 + 616);
      v92 = *(_QWORD *)(v1 + 608);
      v93 = *(_QWORD *)(v1 + 584);
      v96 = *(_QWORD *)(v1 + 576);
      v98 = *(_QWORD *)(v1 + 552);
      v100 = *(_QWORD *)(v1 + 528);
      v102 = *(_QWORD *)(v1 + 520);
      v104 = *(_QWORD *)(v1 + 512);
      v106 = *(_QWORD *)(v1 + 504);
      v108 = *(_QWORD *)(v1 + 496);
      v110 = *(_QWORD *)(v1 + 488);
      v112 = *(_QWORD *)(v1 + 480);
      v114 = *(_QWORD *)(v1 + 472);
      v116 = *(_QWORD *)(v1 + 464);
      v118 = *(_QWORD *)(v1 + 456);
      v120 = *(_QWORD *)(v1 + 448);
      v123 = *(_QWORD *)(v1 + 424);
      v125 = *(_QWORD *)(v1 + 416);
      v127 = *(_QWORD *)(v1 + 408);
      v130 = *(_QWORD *)(v1 + 400);
      v133 = *(_QWORD *)(v1 + 392);
      v136 = *(_QWORD *)(v1 + 384);
      v139 = *(_QWORD *)(v1 + 360);
      v141 = *(_QWORD *)(v1 + 352);
      v145 = *(_QWORD *)(v1 + 344);
      v149 = *(_QWORD *)(v1 + 320);
      v152 = *(_QWORD *)(v1 + 312);
      swift_task_dealloc(*(_QWORD *)(v1 + 688));
      swift_task_dealloc(v85);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v88);
      swift_task_dealloc(v89);
      swift_task_dealloc(v90);
      swift_task_dealloc(v91);
      swift_task_dealloc(v92);
      swift_task_dealloc(v93);
      swift_task_dealloc(v96);
      swift_task_dealloc(v98);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v104);
      swift_task_dealloc(v106);
      swift_task_dealloc(v108);
      swift_task_dealloc(v110);
      swift_task_dealloc(v112);
      swift_task_dealloc(v114);
      swift_task_dealloc(v116);
      swift_task_dealloc(v118);
      swift_task_dealloc(v120);
      swift_task_dealloc(v123);
      swift_task_dealloc(v125);
      swift_task_dealloc(v127);
      swift_task_dealloc(v130);
      swift_task_dealloc(v133);
      swift_task_dealloc(v136);
      swift_task_dealloc(v139);
      swift_task_dealloc(v141);
      swift_task_dealloc(v145);
      swift_task_dealloc(v149);
      swift_task_dealloc(v152);
    }
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000776A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158[3];

  v2 = *(_QWORD *)(v1 + 1184);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 1016);
  v4 = *(_QWORD *)(v1 + 408);
  v5 = *(_QWORD *)(v1 + 392);
  v6 = *(_QWORD *)(v1 + 368);
  static Log.photos.getter(a1);
  v3(v5, v4, v6);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v1 + 1184);
  v12 = *(_QWORD *)(v1 + 608);
  v13 = *(_QWORD *)(v1 + 408);
  v14 = *(_QWORD *)(v1 + 392);
  v16 = *(_QWORD *)(v1 + 368);
  v15 = *(_QWORD *)(v1 + 376);
  if (v10)
  {
    v151 = *(_QWORD *)(v1 + 592);
    v155 = *(void (**)(uint64_t, uint64_t))(v1 + 1144);
    v147 = *(_QWORD *)(v1 + 608);
    v17 = swift_slowAlloc(22, -1);
    v18 = (uint64_t *)swift_slowAlloc(8, -1);
    v140 = swift_slowAlloc(32, -1);
    v158[0] = v140;
    *(_DWORD *)v17 = 136315394;
    v19 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
    v144 = v13;
    v22 = v21;
    *(_QWORD *)(v17 + 4) = sub_100021438(v20, v21, v158);
    swift_bridgeObjectRelease(v22);
    v23 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v23(v14, v16);
    *(_WORD *)(v17 + 12) = 2112;
    swift_errorRetain(v11);
    v24 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v17 + 14) = v24;
    *v18 = v24;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to clear photos for face %s: %@", (uint8_t *)v17, 0x16u);
    v25 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v18, 1, v25);
    swift_slowDealloc(v18, -1, -1);
    swift_arrayDestroy(v140, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v140, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    swift_errorRelease(v11);
    v155(v147, v151);
    v23(v144, v16);
    v26 = *(_QWORD *)(v1 + 1144);
    v27 = v26;
  }
  else
  {
    v28 = *(void (**)(uint64_t, uint64_t))(v1 + 1152);
    v29 = *(_QWORD *)(v1 + 592);

    swift_errorRelease(v11);
    swift_errorRelease(v11);
    v30 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v30(v14, v16);
    swift_errorRelease(v11);
    v28(v12, v29);
    v30(v13, v16);
    v27 = *(_QWORD *)(v1 + 1152);
    v26 = *(_QWORD *)(v1 + 1144);
  }
  v31 = *(_QWORD *)(v1 + 1160) + 1;
  if (v31 == *(_QWORD *)(v1 + 1000))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1 + 1168))(*(_QWORD *)(v1 + 320), 1, 1, *(_QWORD *)(v1 + 368));
  }
  else
  {
    *(_QWORD *)(v1 + 1160) = v31;
    *(_QWORD *)(v1 + 1152) = v27;
    *(_QWORD *)(v1 + 1144) = v26;
    v32 = *(_QWORD *)(v1 + 368);
    v33 = *(_QWORD *)(v1 + 376);
    v34 = *(_QWORD *)(v1 + 320);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 1016))(v34, *(_QWORD *)(v1 + 992)+ ((*(unsigned __int8 *)(v1 + 1240) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 1240))+ *(_QWORD *)(v1 + 1008) * v31, v32);
    v35 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56);
    *(_QWORD *)(v1 + 1168) = v35;
    v35(v34, 0, 1, v32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1, v32) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 376) + 32))(*(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 368));
      v82 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
      *(_QWORD *)(v1 + 1176) = v82;
      *v82 = v1;
      v82[1] = sub_100076BA8;
      return dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 712), *(_QWORD *)(v1 + 720));
    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 992));
  v36 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 1024) = v36;
  v37 = *(_QWORD *)(v36 + 16);
  *(_QWORD *)(v1 + 1032) = v37;
  if (v37)
  {
    v39 = *(_QWORD *)(v1 + 432);
    v38 = *(_QWORD *)(v1 + 440);
    v40 = *(_DWORD *)(v38 + 80);
    *(_DWORD *)(v1 + 1244) = v40;
    *(_QWORD *)(v1 + 1040) = *(_QWORD *)(v38 + 72);
    v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v38 + 16);
    *(_QWORD *)(v1 + 1048) = v41;
    v42 = *(void (**)(uint64_t, uint64_t))(v1 + 840);
    *(_QWORD *)(v1 + 1064) = 0;
    *(_QWORD *)(v1 + 1056) = v42;
    v44 = *(_QWORD *)(v1 + 456);
    v43 = *(_QWORD *)(v1 + 464);
    v45 = *(_QWORD *)(v1 + 288);
    v46 = v36 + ((v40 + 32) & ~(unint64_t)v40);
    v47 = swift_bridgeObjectRetain(v36);
    v48 = v41(v43, v46, v39, v47);
    static Log.photos.getter(v48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v41)(v44, v43, v39);
    v49 = swift_retain(v45);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v156 = *(_QWORD *)(v1 + 632);
      v152 = *(_QWORD *)(v1 + 592);
      v52 = *(_QWORD *)(v1 + 456);
      v131 = *(_QWORD *)(v1 + 440);
      v148 = v42;
      v53 = *(_QWORD *)(v1 + 432);
      v54 = *(_QWORD *)(v1 + 360);
      v137 = *(_QWORD *)(v1 + 336);
      v134 = *(_QWORD *)(v1 + 328);
      v124 = *(_QWORD *)(v1 + 288);
      v55 = *(unsigned __int8 *)(v1 + 1248);
      v56 = swift_slowAlloc(22, -1);
      v141 = swift_slowAlloc(64, -1);
      v158[0] = v141;
      *(_DWORD *)v56 = 136315394;
      v57 = PhotosFaceType.description.getter(v55);
      v59 = v58;
      *(_QWORD *)(v1 + 152) = sub_100021438(v57, v58, v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v56 + 4, v56 + 12);
      swift_release(v124);
      swift_bridgeObjectRelease(v59);
      *(_WORD *)(v56 + 12) = 2080;
      SyncedPhotosFace.id.getter(v53);
      v60 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
      v60(v52, v53);
      v61 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v62 = dispatch thunk of CustomStringConvertible.description.getter(v134, v61);
      v64 = v63;
      (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v54, v134);
      *(_QWORD *)(v1 + 160) = sub_100021438(v62, v64, v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v56 + 14, v56 + 22);
      swift_bridgeObjectRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Inserting face, type = %s: %s", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy(v141, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v141, -1, -1);
      swift_slowDealloc(v56, -1, -1);

      v148(v156, v152);
    }
    else
    {
      v84 = *(_QWORD *)(v1 + 632);
      v85 = *(_QWORD *)(v1 + 592);
      v86 = *(_QWORD *)(v1 + 288);
      v60 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 440) + 8);
      v60(*(_QWORD *)(v1 + 456), *(_QWORD *)(v1 + 432));

      swift_release(v86);
      v42(v84, v85);
    }
    *(_QWORD *)(v1 + 1072) = v60;
    SyncedPhotosFace.id.getter(*(_QWORD *)(v1 + 432));
    v87 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
    *(_QWORD *)(v1 + 1080) = v87;
    *v87 = v1;
    v87[1] = sub_100075DE4;
    return dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v1 + 352), *(_QWORD *)(v1 + 712), *(_QWORD *)(v1 + 720));
  }
  else
  {
    v65 = *(_QWORD *)(v1 + 976);
    swift_release(*(_QWORD *)(v1 + 704));
    v66 = swift_bridgeObjectRelease(v65);
    if (*(_QWORD *)(*(_QWORD *)(v1 + 88) + 16))
      v66 = sub_100022934(*(unsigned __int8 *)(v1 + 1248));
    v67 = *(_QWORD *)(v1 + 688);
    v68 = *(_QWORD *)(v1 + 680);
    v69 = *(_QWORD *)(v1 + 672);
    v70 = *(_QWORD *)(v1 + 584);
    v71 = *(_QWORD *)(v1 + 568);
    v72 = *(_QWORD *)(v1 + 560);
    if (*(_QWORD *)(v1 + 968))
    {
      swift_willThrow(v66);
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
      v73 = *(_QWORD *)(v1 + 664);
      v74 = *(_QWORD *)(v1 + 656);
      v75 = *(_QWORD *)(v1 + 648);
      v76 = *(_QWORD *)(v1 + 640);
      v77 = *(_QWORD *)(v1 + 632);
      v78 = *(_QWORD *)(v1 + 624);
      v79 = *(_QWORD *)(v1 + 616);
      v80 = *(_QWORD *)(v1 + 608);
      v81 = *(_QWORD *)(v1 + 584);
      v97 = *(_QWORD *)(v1 + 576);
      v98 = *(_QWORD *)(v1 + 552);
      v100 = *(_QWORD *)(v1 + 528);
      v102 = *(_QWORD *)(v1 + 520);
      v104 = *(_QWORD *)(v1 + 512);
      v106 = *(_QWORD *)(v1 + 504);
      v108 = *(_QWORD *)(v1 + 496);
      v110 = *(_QWORD *)(v1 + 488);
      v112 = *(_QWORD *)(v1 + 480);
      v114 = *(_QWORD *)(v1 + 472);
      v116 = *(_QWORD *)(v1 + 464);
      v118 = *(_QWORD *)(v1 + 456);
      v120 = *(_QWORD *)(v1 + 448);
      v122 = *(_QWORD *)(v1 + 424);
      v125 = *(_QWORD *)(v1 + 416);
      v127 = *(_QWORD *)(v1 + 408);
      v129 = *(_QWORD *)(v1 + 400);
      v132 = *(_QWORD *)(v1 + 392);
      v135 = *(_QWORD *)(v1 + 384);
      v138 = *(_QWORD *)(v1 + 360);
      v142 = *(_QWORD *)(v1 + 352);
      v145 = *(_QWORD *)(v1 + 344);
      v149 = *(_QWORD *)(v1 + 320);
      v153 = *(_QWORD *)(v1 + 312);
      swift_task_dealloc(*(_QWORD *)(v1 + 688));
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v79);
      swift_task_dealloc(v80);
      swift_task_dealloc(v81);
      swift_task_dealloc(v97);
      swift_task_dealloc(v98);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v104);
      swift_task_dealloc(v106);
      swift_task_dealloc(v108);
      swift_task_dealloc(v110);
      swift_task_dealloc(v112);
      swift_task_dealloc(v114);
      swift_task_dealloc(v116);
      swift_task_dealloc(v118);
      swift_task_dealloc(v120);
      swift_task_dealloc(v122);
      swift_task_dealloc(v125);
      swift_task_dealloc(v127);
      swift_task_dealloc(v129);
      swift_task_dealloc(v132);
      swift_task_dealloc(v135);
      swift_task_dealloc(v138);
      swift_task_dealloc(v142);
      swift_task_dealloc(v145);
      swift_task_dealloc(v149);
      swift_task_dealloc(v153);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v71 + 8))(*(_QWORD *)(v1 + 584), *(_QWORD *)(v1 + 560));
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
      v88 = *(_QWORD *)(v1 + 664);
      v89 = *(_QWORD *)(v1 + 656);
      v90 = *(_QWORD *)(v1 + 648);
      v91 = *(_QWORD *)(v1 + 640);
      v92 = *(_QWORD *)(v1 + 632);
      v93 = *(_QWORD *)(v1 + 624);
      v94 = *(_QWORD *)(v1 + 616);
      v95 = *(_QWORD *)(v1 + 608);
      v96 = *(_QWORD *)(v1 + 584);
      v99 = *(_QWORD *)(v1 + 576);
      v101 = *(_QWORD *)(v1 + 552);
      v103 = *(_QWORD *)(v1 + 528);
      v105 = *(_QWORD *)(v1 + 520);
      v107 = *(_QWORD *)(v1 + 512);
      v109 = *(_QWORD *)(v1 + 504);
      v111 = *(_QWORD *)(v1 + 496);
      v113 = *(_QWORD *)(v1 + 488);
      v115 = *(_QWORD *)(v1 + 480);
      v117 = *(_QWORD *)(v1 + 472);
      v119 = *(_QWORD *)(v1 + 464);
      v121 = *(_QWORD *)(v1 + 456);
      v123 = *(_QWORD *)(v1 + 448);
      v126 = *(_QWORD *)(v1 + 424);
      v128 = *(_QWORD *)(v1 + 416);
      v130 = *(_QWORD *)(v1 + 408);
      v133 = *(_QWORD *)(v1 + 400);
      v136 = *(_QWORD *)(v1 + 392);
      v139 = *(_QWORD *)(v1 + 384);
      v143 = *(_QWORD *)(v1 + 360);
      v146 = *(_QWORD *)(v1 + 352);
      v150 = *(_QWORD *)(v1 + 344);
      v154 = *(_QWORD *)(v1 + 320);
      v157 = *(_QWORD *)(v1 + 312);
      swift_task_dealloc(*(_QWORD *)(v1 + 688));
      swift_task_dealloc(v88);
      swift_task_dealloc(v89);
      swift_task_dealloc(v90);
      swift_task_dealloc(v91);
      swift_task_dealloc(v92);
      swift_task_dealloc(v93);
      swift_task_dealloc(v94);
      swift_task_dealloc(v95);
      swift_task_dealloc(v96);
      swift_task_dealloc(v99);
      swift_task_dealloc(v101);
      swift_task_dealloc(v103);
      swift_task_dealloc(v105);
      swift_task_dealloc(v107);
      swift_task_dealloc(v109);
      swift_task_dealloc(v111);
      swift_task_dealloc(v113);
      swift_task_dealloc(v115);
      swift_task_dealloc(v117);
      swift_task_dealloc(v119);
      swift_task_dealloc(v121);
      swift_task_dealloc(v123);
      swift_task_dealloc(v126);
      swift_task_dealloc(v128);
      swift_task_dealloc(v130);
      swift_task_dealloc(v133);
      swift_task_dealloc(v136);
      swift_task_dealloc(v139);
      swift_task_dealloc(v143);
      swift_task_dealloc(v146);
      swift_task_dealloc(v150);
      swift_task_dealloc(v154);
      swift_task_dealloc(v157);
    }
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000781E0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to PhotosFaceDatabase.timePositions(for:)[1]);
  *(_QWORD *)(v0 + 1192) = v1;
  *v1 = v0;
  v1[1] = sub_10007823C;
  return PhotosFaceDatabase.timePositions(for:)(*(_QWORD *)(v0 + 824));
}

uint64_t sub_10007823C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1192);
  *(_QWORD *)(*v2 + 1200) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100078664;
  }
  else
  {
    *(_QWORD *)(v4 + 1208) = a1;
    v6 = sub_1000782B0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000782B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v1 = v0[151];
  v2 = v0[150];
  v3 = v0[103];
  v4 = sub_10008BC0C(v1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_10008B93C, v0[100]);
  swift_bridgeObjectRelease(v1);
  v5 = sub_10005CA80((uint64_t)v4);
  v0[152] = v2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v3);
  v7 = sub_100054F10(v6);
  swift_bridgeObjectRelease(v3);
  v8 = sub_100053314((uint64_t)v5, v7);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  v0[153] = sub_10005321C((uint64_t)v8);
  swift_release(v8);
  return swift_task_switch(sub_10007838C, v0[95], v0[96]);
}

uint64_t sub_10007838C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 1224);
  *(_QWORD *)(v0 + 832) = *(_QWORD *)(v0 + 1216);
  v2 = *(_QWORD *)(v0 + 792);
  swift_bridgeObjectRetain(v2);
  v4 = sub_100054F10(v3);
  swift_bridgeObjectRelease(v2);
  v5 = swift_bridgeObjectRetain(v1);
  v6 = SyncFacesRequest.init(trackedFaces:cachedIdentifiers:)(v2, v1, v5);
  static Log.photos.getter(v6);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v30 = *(_QWORD *)(v0 + 600);
    v31 = *(_QWORD *)(v0 + 592);
    v32 = *(_QWORD *)(v0 + 664);
    v28 = *(_QWORD *)(v0 + 368);
    v10 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(32, -1);
    v33 = v29;
    *(_DWORD *)v10 = 134218242;
    v11 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRelease(v1);
    *(_QWORD *)(v0 + 272) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v1);
    *(_WORD *)(v10 + 12) = 2080;
    v12 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v4);
    v14 = Set.description.getter(v13, v28, v12);
    v16 = v15;
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v0 + 280) = sub_100021438(v14, v16, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Requesting syncFaces with %ld cached photos and faces: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8);
    v18 = v17(v32, v31);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 664);
    v20 = *(_QWORD *)(v0 + 600);
    v21 = *(_QWORD *)(v0 + 592);

    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease_n(v1, 2);
    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    v18 = v17(v19, v21);
  }
  *(_QWORD *)(v0 + 840) = v17;
  v22 = *(_QWORD *)(v0 + 752);
  v23 = *(_QWORD *)(v0 + 696);
  v24 = *(_QWORD *)(v0 + 288);
  *(_QWORD *)(v0 + 848) = *(_QWORD *)(v24 + 96);
  *(_BYTE *)(v0 + 1248) = *(_BYTE *)(v24 + 16);
  *(_QWORD *)(v0 + 856) = static CommunicationActor.shared.getter(v18);
  v25 = dispatch thunk of Actor.unownedExecutor.getter(v23, v22);
  return swift_task_switch(sub_100072904, v25, v26);
}

uint64_t sub_100078664()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[103]);
  v0[154] = v0[150];
  return swift_task_switch(sub_10008DD6C, v0[95], v0[96]);
}

uint64_t sub_1000786A8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v1[36] = v0;
  v2 = type metadata accessor for StoredPhoto(0);
  v1[37] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[38] = v3;
  v1[39] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000629C(&qword_1000B2B50);
  v1[40] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ShuffleID(0);
  v1[41] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[42] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[43] = swift_task_alloc(v7);
  v1[44] = swift_task_alloc(v7);
  v1[45] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v1[46] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[47] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[48] = swift_task_alloc(v10);
  v1[49] = swift_task_alloc(v10);
  v1[50] = swift_task_alloc(v10);
  v1[51] = swift_task_alloc(v10);
  v1[52] = swift_task_alloc(v10);
  v1[53] = swift_task_alloc(v10);
  v11 = sub_10000629C(&qword_1000B25E0);
  v1[54] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[55] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[56] = swift_task_alloc(v13);
  v1[57] = swift_task_alloc(v13);
  v1[58] = swift_task_alloc(v13);
  v1[59] = swift_task_alloc(v13);
  v1[60] = swift_task_alloc(v13);
  v1[61] = swift_task_alloc(v13);
  v1[62] = swift_task_alloc(v13);
  v1[63] = swift_task_alloc(v13);
  v1[64] = swift_task_alloc(v13);
  v1[65] = swift_task_alloc(v13);
  v14 = sub_10000629C(&qword_1000B35E8);
  v1[66] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000629C(&qword_1000B3D78);
  v1[67] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v1[68] = v16;
  v1[69] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000629C(&qword_1000B3D80);
  v1[70] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v1[71] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[72] = swift_task_alloc(v19);
  v1[73] = swift_task_alloc(v19);
  v20 = type metadata accessor for Logger(0);
  v1[74] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v1[75] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[76] = swift_task_alloc(v22);
  v1[77] = swift_task_alloc(v22);
  v1[78] = swift_task_alloc(v22);
  v1[79] = swift_task_alloc(v22);
  v1[80] = swift_task_alloc(v22);
  v1[81] = swift_task_alloc(v22);
  v1[82] = swift_task_alloc(v22);
  v1[83] = swift_task_alloc(v22);
  v23 = type metadata accessor for SyncFacesRequest(0);
  v1[84] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v1[85] = v24;
  v1[86] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for CommunicationActor(0);
  v1[87] = v25;
  v1[88] = static CommunicationActor.shared.getter(v25);
  v26 = type metadata accessor for ShuffleDatabase(0);
  v1[89] = v26;
  v27 = sub_100009174(&qword_1000B3270, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleDatabase, (uint64_t)&protocol conformance descriptor for ShuffleDatabase);
  v1[90] = v27;
  v28 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryList()[1]);
  v1[91] = v28;
  *v28 = v1;
  v28[1] = sub_100078A20;
  return dispatch thunk of PhotosFaceIDDatabase.queryList()(v26, v27);
}

uint64_t sub_100078A20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 728);
  *(_QWORD *)(*(_QWORD *)v2 + 736) = v1;
  swift_task_dealloc(v5);
  v6 = v4[87];
  if (v1)
  {
    v7 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, v7);
    v10 = v9;
    v11 = sub_10008DD84;
    v12 = v8;
    v13 = v10;
  }
  else
  {
    v4[93] = a1;
    v14 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v4[94] = v14;
    v15 = dispatch thunk of Actor.unownedExecutor.getter(v6, v14);
    v13 = v16;
    v4[95] = v15;
    v4[96] = v16;
    v11 = sub_100078B18;
    v12 = v15;
  }
  return swift_task_switch(v11, v12, v13);
}

uint64_t sub_100078B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[3];

  v1 = *(_QWORD *)(v0 + 744);
  v2 = *(_QWORD *)(v0 + 736);
  v3 = *(_QWORD *)(v0 + 720);
  v4 = *(_QWORD *)(v0 + 712);
  v5 = *(_QWORD *)(v0 + 328);
  v6 = (_QWORD *)swift_task_alloc(48);
  *v6 = v5;
  v7 = type metadata accessor for ShuffleProvider();
  *(_QWORD *)(v0 + 776) = v7;
  v6[1] = v7;
  v6[2] = v4;
  v8 = sub_100009174(&qword_1000B3D88, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleProvider, (uint64_t)&unk_1000968C4);
  *(_QWORD *)(v0 + 784) = v8;
  v6[3] = v8;
  v6[4] = v3;
  KeyPath = swift_getKeyPath(&unk_100096E18);
  swift_task_dealloc(v6);
  swift_retain(KeyPath);
  v10 = sub_10008B944(v1, KeyPath, v0 + 208, (uint64_t (*)(_QWORD))&type metadata accessor for ShuffleID);
  *(_QWORD *)(v0 + 792) = v10;
  swift_release_n(KeyPath, 2);
  v11 = swift_bridgeObjectRelease(v1);
  if (!v10[2])
  {
    v12 = PhotosFaceType.rawValue.getter(*(unsigned __int8 *)(*(_QWORD *)(v0 + 288) + 16));
    v14 = v13;
    v16 = PhotosFaceType.rawValue.getter(2);
    v17 = v15;
    if (v12 == v16 && v14 == v15)
    {
      v11 = swift_bridgeObjectRelease_n(v14, 2);
    }
    else
    {
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v16, v15, 0);
      swift_bridgeObjectRelease(v17);
      v11 = swift_bridgeObjectRelease(v14);
      if ((v18 & 1) == 0)
      {
        swift_release(*(_QWORD *)(v0 + 704));
        swift_bridgeObjectRelease(v10);
        v46 = *(_QWORD *)(v0 + 664);
        v47 = *(_QWORD *)(v0 + 656);
        v48 = *(_QWORD *)(v0 + 648);
        v49 = *(_QWORD *)(v0 + 640);
        v50 = *(_QWORD *)(v0 + 632);
        v51 = *(_QWORD *)(v0 + 624);
        v52 = *(_QWORD *)(v0 + 616);
        v53 = *(_QWORD *)(v0 + 608);
        v54 = *(_QWORD *)(v0 + 584);
        v55 = *(_QWORD *)(v0 + 576);
        v56 = *(_QWORD *)(v0 + 552);
        v57 = *(_QWORD *)(v0 + 528);
        v58 = *(_QWORD *)(v0 + 520);
        v59 = *(_QWORD *)(v0 + 512);
        v60 = *(_QWORD *)(v0 + 504);
        v61 = *(_QWORD *)(v0 + 496);
        v62 = *(_QWORD *)(v0 + 488);
        v63 = *(_QWORD *)(v0 + 480);
        v64 = *(_QWORD *)(v0 + 472);
        v65 = *(_QWORD *)(v0 + 464);
        v66 = *(_QWORD *)(v0 + 456);
        v67 = *(_QWORD *)(v0 + 448);
        v68 = *(_QWORD *)(v0 + 424);
        v69 = *(_QWORD *)(v0 + 416);
        v70 = *(_QWORD *)(v0 + 408);
        v71 = *(_QWORD *)(v0 + 400);
        v72 = *(_QWORD *)(v0 + 392);
        v73 = *(_QWORD *)(v0 + 384);
        v75 = *(_QWORD *)(v0 + 360);
        v77 = *(_QWORD *)(v0 + 352);
        v78 = *(_QWORD *)(v0 + 344);
        v80 = *(_QWORD *)(v0 + 320);
        v82 = *(_QWORD *)(v0 + 312);
        swift_task_dealloc(*(_QWORD *)(v0 + 688));
        swift_task_dealloc(v46);
        swift_task_dealloc(v47);
        swift_task_dealloc(v48);
        swift_task_dealloc(v49);
        swift_task_dealloc(v50);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v59);
        swift_task_dealloc(v60);
        swift_task_dealloc(v61);
        swift_task_dealloc(v62);
        swift_task_dealloc(v63);
        swift_task_dealloc(v64);
        swift_task_dealloc(v65);
        swift_task_dealloc(v66);
        swift_task_dealloc(v67);
        swift_task_dealloc(v68);
        swift_task_dealloc(v69);
        swift_task_dealloc(v70);
        swift_task_dealloc(v71);
        swift_task_dealloc(v72);
        swift_task_dealloc(v73);
        swift_task_dealloc(v75);
        swift_task_dealloc(v77);
        swift_task_dealloc(v78);
        swift_task_dealloc(v80);
        swift_task_dealloc(v82);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
    }
  }
  if ((static TestProperties.ignoreSyncCache.getter(v11) & 1) != 0)
  {
    *(_QWORD *)(v0 + 832) = v2;
    v19 = *(_QWORD *)(v0 + 792);
    swift_bridgeObjectRetain(v19);
    v21 = sub_100054F10(v20);
    swift_bridgeObjectRelease(v19);
    v22 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v23 = SyncFacesRequest.init(trackedFaces:cachedIdentifiers:)(v19, _swiftEmptyArrayStorage, v22);
    static Log.photos.getter(v23);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain(v21);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(_QWORD *)(v0 + 664);
    v29 = *(_QWORD *)(v0 + 600);
    v30 = *(_QWORD *)(v0 + 592);
    if (v27)
    {
      v81 = *(_QWORD *)(v0 + 592);
      v74 = *(_QWORD *)(v0 + 368);
      v79 = *(_QWORD *)(v0 + 600);
      v31 = swift_slowAlloc(22, -1);
      v76 = swift_slowAlloc(32, -1);
      v83[0] = v76;
      *(_DWORD *)v31 = 134218242;
      v32 = _swiftEmptyArrayStorage[2];
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      *(_QWORD *)(v0 + 272) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      *(_WORD *)(v31 + 12) = 2080;
      v33 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      swift_bridgeObjectRetain(v21);
      v35 = Set.description.getter(v34, v74, v33);
      v37 = v36;
      swift_bridgeObjectRelease(v21);
      *(_QWORD *)(v0 + 280) = sub_100021438(v35, v37, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v31 + 14, v31 + 22);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease_n(v21, 2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Requesting syncFaces with %ld cached photos and faces: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      v38 = *(uint64_t (**)(uint64_t, uint64_t))(v79 + 8);
      v39 = v38(v28, v81);
    }
    else
    {
      swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
      swift_bridgeObjectRelease_n(v21, 2);

      v38 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8);
      v39 = v38(v28, v30);
    }
    *(_QWORD *)(v0 + 840) = v38;
    v41 = *(_QWORD *)(v0 + 752);
    v42 = *(_QWORD *)(v0 + 696);
    v43 = *(_QWORD *)(v0 + 288);
    *(_QWORD *)(v0 + 848) = *(_QWORD *)(v43 + 96);
    *(_BYTE *)(v0 + 1248) = *(_BYTE *)(v43 + 16);
    *(_QWORD *)(v0 + 856) = static CommunicationActor.shared.getter(v39);
    v44 = dispatch thunk of Actor.unownedExecutor.getter(v42, v41);
    return swift_task_switch(sub_100079218, v44, v45);
  }
  else
  {
    *(_QWORD *)(v0 + 800) = *(_QWORD *)(*(_QWORD *)(v0 + 288) + 104);
    return swift_task_switch(sub_100079140, 0, 0);
  }
}

uint64_t sub_100079140()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 808) = OBJC_IVAR____TtC11photosfaced10PhotoCache_database;
  v1 = (_QWORD *)swift_task_alloc(async function pointer to PhotosFaceDatabase.storedPhotos()[1]);
  *(_QWORD *)(v0 + 816) = v1;
  *v1 = v0;
  v1[1] = sub_1000791A0;
  return PhotosFaceDatabase.storedPhotos()();
}

uint64_t sub_1000791A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 816);
  *(_QWORD *)(*(_QWORD *)v2 + 824) = a1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v3[154] = v1;
    v5 = v3[96];
    v6 = v3[95];
    v7 = sub_10008DD6C;
  }
  else
  {
    v7 = sub_10007EAF4;
    v6 = 0;
    v5 = 0;
  }
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_100079218()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_BYTE *)(v0 + 1248);
  swift_release(*(_QWORD *)(v0 + 856));
  v2 = *(_QWORD *)(v0 + 832);
  sub_100056730(0x70A04u >> (8 * v1), *(_QWORD *)(v0 + 688), 1, *(_QWORD *)(v0 + 584));
  *(_QWORD *)(v0 + 864) = v2;
  if (v2)
    v3 = sub_10008DE28;
  else
    v3 = sub_1000792A0;
  return swift_task_switch(v3, *(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 768));
}

uint64_t sub_1000792A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[70];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[71] + 16))(v0[72], v0[73], v1);
  v2 = sub_100006454(&qword_1000B3D90, &qword_1000B3D80, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>);
  v3 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  v4 = v0[105];
  v0[110] = _swiftEmptyArrayStorage;
  v0[109] = v4;
  v5 = v0[94];
  v6 = static CommunicationActor.shared.getter(v3);
  v0[111] = v6;
  v7 = sub_100006454(&qword_1000B3D98, &qword_1000B3D78, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
  v8 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[112] = v8;
  *v8 = v0;
  v8[1] = sub_1000793B4;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[66], v6, v5, v0 + 12, v0[67], v7);
}

uint64_t sub_1000793B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 896);
  *(_QWORD *)(*(_QWORD *)v1 + 904) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[111]);
  if (v0)
    v4 = sub_10007A69C;
  else
    v4 = sub_100079430;
  return swift_task_switch(v4, v2[95], v2[96]);
}

uint64_t sub_100079430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, unint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t KeyPath;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  void (*v91)(uint64_t, unint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v96;
  _QWORD *v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t (*v111)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __n128 v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(uint64_t, uint64_t);
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  os_log_type_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void (*v233)(uint64_t, uint64_t);
  void (*v234)(uint64_t, uint64_t);
  uint64_t v235;
  uint64_t v236;
  NSObject *v237;
  uint64_t v238;
  uint64_t v239;
  uint8_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(uint64_t, uint64_t, uint64_t);
  uint64_t v245;
  uint64_t v246;
  uint64_t v247[3];

  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 440);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = v0 + 104;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 544) + 8))(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 536));
    v5 = *(_QWORD *)(v0 + 880);
    *(_QWORD *)(v0 + 976) = v5;
    *(_QWORD *)(v0 + 968) = 0;
    *(_QWORD *)(v0 + 984) = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
    v6 = swift_bridgeObjectRetain(v5);
    v7 = static SyncedPhotosFace.destreamify(_:)(v6);
    v8 = swift_bridgeObjectRelease(v5);
    *(_QWORD *)(v0 + 88) = v7;
    v9 = *(_QWORD *)(v0 + 288);
    static Log.session.getter(v8);
    swift_bridgeObjectRetain_n(v7, 3);
    v10 = swift_retain(v9);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v223 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
      v213 = *(_QWORD *)(v0 + 592);
      v219 = *(_QWORD *)(v0 + 640);
      v204 = *(_QWORD *)(v0 + 288);
      v13 = *(unsigned __int8 *)(v0 + 1248);
      v14 = swift_slowAlloc(32, -1);
      v208 = swift_slowAlloc(64, -1);
      v247[0] = v208;
      *(_DWORD *)v14 = 134218498;
      *(_QWORD *)(v0 + 168) = *(_QWORD *)(v7 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v7);
      *(_WORD *)(v14 + 12) = 2080;
      v15 = PhotosFaceType.description.getter(v13);
      v17 = v16;
      *(_QWORD *)(v0 + 176) = sub_100021438(v15, v16, v247);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease(v17);
      swift_release(v204);
      *(_WORD *)(v14 + 22) = 2080;
      v18 = sub_100086480(v7, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, &qword_1000B25E0, &qword_1000B2B30, (uint64_t)&protocol conformance descriptor for ShuffleID);
      swift_bridgeObjectRelease(v7);
      v19 = Array.description.getter(v18, &type metadata for String);
      v21 = v20;
      swift_bridgeObjectRelease(v18);
      *(_QWORD *)(v0 + 184) = sub_100021438(v19, v21, v247);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v14 + 24, v14 + 32);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v7);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Did syncFaces (%ld) for type %s: %s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy(v208, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v208, -1, -1);
      v22 = v14;
      v4 = v0 + 104;
      swift_slowDealloc(v22, -1, -1);

      v223(v219, v213);
    }
    else
    {
      v74 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
      v75 = *(_QWORD *)(v0 + 640);
      v76 = *(_QWORD *)(v0 + 592);
      v77 = *(_QWORD *)(v0 + 288);
      swift_bridgeObjectRelease_n(v7, 3);
      swift_release(v77);

      v74(v75, v76);
    }
    v78 = *(_QWORD *)(v0 + 784);
    v79 = *(_QWORD *)(v0 + 776);
    v80 = *(_QWORD *)(v0 + 720);
    v81 = *(_QWORD *)(v0 + 712);
    v82 = *(_QWORD *)(v0 + 328);
    swift_beginAccess(v0 + 88, v0 + 64, 0, 0);
    v83 = *(_QWORD *)(v0 + 88);
    v84 = (_QWORD *)swift_task_alloc(48);
    *v84 = v82;
    v84[1] = v79;
    v84[2] = v81;
    v84[3] = v78;
    v84[4] = v80;
    KeyPath = swift_getKeyPath(&unk_100096E48);
    swift_task_dealloc(v84);
    swift_retain(KeyPath);
    swift_bridgeObjectRetain(v83);
    v87 = sub_10008BAA8(v86, KeyPath, v4, &qword_1000B25E0);
    *(_QWORD *)(v0 + 992) = v87;
    swift_release_n(KeyPath, 2);
    swift_bridgeObjectRelease(v83);
    v88 = v87[2];
    *(_QWORD *)(v0 + 1000) = v88;
    v89 = *(_QWORD *)(v0 + 376);
    if (v88)
    {
      v90 = *(_DWORD *)(v89 + 80);
      *(_DWORD *)(v0 + 1240) = v90;
      *(_QWORD *)(v0 + 1008) = *(_QWORD *)(v89 + 72);
      v91 = *(void (**)(uint64_t, unint64_t, uint64_t))(v89 + 16);
      *(_QWORD *)(v0 + 1016) = v91;
      v92 = *(_QWORD *)(v0 + 840);
      *(_QWORD *)(v0 + 1160) = 0;
      *(_QWORD *)(v0 + 1152) = v92;
      *(_QWORD *)(v0 + 1144) = v92;
      *(_QWORD *)(v0 + 1136) = v92;
      v93 = *(_QWORD *)(v0 + 368);
      v94 = *(_QWORD *)(v0 + 320);
      v91(v94, *(_QWORD *)(v0 + 992) + ((v90 + 32) & ~(unint64_t)v90), v93);
      v95 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v89 + 56);
      *(_QWORD *)(v0 + 1168) = v95;
      v95(v94, 0, 1, v93);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v94, 1, v93) != 1)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 32))(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 368));
        v96 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
        *(_QWORD *)(v0 + 1176) = v96;
        *v96 = v0;
        v96[1] = sub_10007D4BC;
        return dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
      }
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v89 + 56))(*(_QWORD *)(v0 + 320), 1, 1, *(_QWORD *)(v0 + 368));
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 992));
    v106 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 1024) = v106;
    v107 = *(_QWORD *)(v106 + 16);
    *(_QWORD *)(v0 + 1032) = v107;
    if (v107)
    {
      v109 = *(_QWORD *)(v0 + 432);
      v108 = *(_QWORD *)(v0 + 440);
      v110 = *(_DWORD *)(v108 + 80);
      *(_DWORD *)(v0 + 1244) = v110;
      *(_QWORD *)(v0 + 1040) = *(_QWORD *)(v108 + 72);
      v111 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v108 + 16);
      *(_QWORD *)(v0 + 1048) = v111;
      v112 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
      *(_QWORD *)(v0 + 1064) = 0;
      *(_QWORD *)(v0 + 1056) = v112;
      v114 = *(_QWORD *)(v0 + 456);
      v113 = *(_QWORD *)(v0 + 464);
      v115 = *(_QWORD *)(v0 + 288);
      v116 = v106 + ((v110 + 32) & ~(unint64_t)v110);
      v117 = swift_bridgeObjectRetain(v106);
      v118 = v111(v113, v116, v109, v117);
      static Log.photos.getter(v118);
      ((void (*)(uint64_t, uint64_t, uint64_t))v111)(v114, v113, v109);
      v119 = swift_retain(v115);
      v120 = Logger.logObject.getter(v119);
      v121 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v120, v121))
      {
        v245 = *(_QWORD *)(v0 + 632);
        v241 = *(_QWORD *)(v0 + 592);
        v122 = *(_QWORD *)(v0 + 456);
        v123 = *(_QWORD *)(v0 + 432);
        v215 = *(_QWORD *)(v0 + 440);
        v234 = v112;
        v124 = *(_QWORD *)(v0 + 360);
        v225 = *(_QWORD *)(v0 + 336);
        v220 = *(_QWORD *)(v0 + 328);
        v201 = *(_QWORD *)(v0 + 288);
        v125 = *(unsigned __int8 *)(v0 + 1248);
        v126 = swift_slowAlloc(22, -1);
        v229 = swift_slowAlloc(64, -1);
        v247[0] = v229;
        *(_DWORD *)v126 = 136315394;
        v127 = PhotosFaceType.description.getter(v125);
        v129 = v128;
        *(_QWORD *)(v0 + 152) = sub_100021438(v127, v128, v247);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v126 + 4, v126 + 12);
        swift_bridgeObjectRelease(v129);
        swift_release(v201);
        *(_WORD *)(v126 + 12) = 2080;
        SyncedPhotosFace.id.getter(v123);
        v130 = *(void (**)(uint64_t, uint64_t))(v215 + 8);
        v130(v122, v123);
        v131 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
        v132 = dispatch thunk of CustomStringConvertible.description.getter(v220, v131);
        v134 = v133;
        (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v124, v220);
        *(_QWORD *)(v0 + 160) = sub_100021438(v132, v134, v247);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v126 + 14, v126 + 22);
        swift_bridgeObjectRelease(v134);
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "Inserting face, type = %s: %s", (uint8_t *)v126, 0x16u);
        swift_arrayDestroy(v229, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v229, -1, -1);
        swift_slowDealloc(v126, -1, -1);

        v234(v245, v241);
      }
      else
      {
        v152 = *(_QWORD *)(v0 + 632);
        v153 = *(_QWORD *)(v0 + 592);
        v154 = *(_QWORD *)(v0 + 288);
        v130 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
        v130(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
        swift_release(v154);

        v112(v152, v153);
      }
      *(_QWORD *)(v0 + 1072) = v130;
      SyncedPhotosFace.id.getter(*(_QWORD *)(v0 + 432));
      v155 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
      *(_QWORD *)(v0 + 1080) = v155;
      *v155 = v0;
      v155[1] = sub_10007C6F8;
      return dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
    }
    else
    {
      v135 = *(_QWORD *)(v0 + 704);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 976));
      v136 = swift_release(v135);
      if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
        v136 = sub_100022934(*(unsigned __int8 *)(v0 + 1248));
      v137 = *(_QWORD *)(v0 + 688);
      v138 = *(_QWORD *)(v0 + 680);
      v139 = *(_QWORD *)(v0 + 672);
      v140 = *(_QWORD *)(v0 + 584);
      v141 = *(_QWORD *)(v0 + 568);
      v142 = *(_QWORD *)(v0 + 560);
      if (*(_QWORD *)(v0 + 968))
      {
        swift_willThrow(v136);
        (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v140, v142);
        (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
        v143 = *(_QWORD *)(v0 + 664);
        v144 = *(_QWORD *)(v0 + 656);
        v145 = *(_QWORD *)(v0 + 648);
        v146 = *(_QWORD *)(v0 + 640);
        v147 = *(_QWORD *)(v0 + 632);
        v148 = *(_QWORD *)(v0 + 624);
        v149 = *(_QWORD *)(v0 + 616);
        v150 = *(_QWORD *)(v0 + 608);
        v151 = *(_QWORD *)(v0 + 584);
        v172 = *(_QWORD *)(v0 + 576);
        v173 = *(_QWORD *)(v0 + 552);
        v175 = *(_QWORD *)(v0 + 528);
        v177 = *(_QWORD *)(v0 + 520);
        v179 = *(_QWORD *)(v0 + 512);
        v181 = *(_QWORD *)(v0 + 504);
        v183 = *(_QWORD *)(v0 + 496);
        v185 = *(_QWORD *)(v0 + 488);
        v187 = *(_QWORD *)(v0 + 480);
        v189 = *(_QWORD *)(v0 + 472);
        v191 = *(_QWORD *)(v0 + 464);
        v193 = *(_QWORD *)(v0 + 456);
        v196 = *(_QWORD *)(v0 + 448);
        v198 = *(_QWORD *)(v0 + 424);
        v202 = *(_QWORD *)(v0 + 416);
        v206 = *(_QWORD *)(v0 + 408);
        v210 = *(_QWORD *)(v0 + 400);
        v216 = *(_QWORD *)(v0 + 392);
        v221 = *(_QWORD *)(v0 + 384);
        v226 = *(_QWORD *)(v0 + 360);
        v230 = *(_QWORD *)(v0 + 352);
        v235 = *(_QWORD *)(v0 + 344);
        v238 = *(_QWORD *)(v0 + 320);
        v242 = *(_QWORD *)(v0 + 312);
        swift_task_dealloc(*(_QWORD *)(v0 + 688));
        swift_task_dealloc(v143);
        swift_task_dealloc(v144);
        swift_task_dealloc(v145);
        swift_task_dealloc(v146);
        swift_task_dealloc(v147);
        swift_task_dealloc(v148);
        swift_task_dealloc(v149);
        swift_task_dealloc(v150);
        swift_task_dealloc(v151);
        swift_task_dealloc(v172);
        swift_task_dealloc(v173);
        swift_task_dealloc(v175);
        swift_task_dealloc(v177);
        swift_task_dealloc(v179);
        swift_task_dealloc(v181);
        swift_task_dealloc(v183);
        swift_task_dealloc(v185);
        swift_task_dealloc(v187);
        swift_task_dealloc(v189);
        swift_task_dealloc(v191);
        swift_task_dealloc(v193);
        swift_task_dealloc(v196);
        swift_task_dealloc(v198);
        swift_task_dealloc(v202);
        swift_task_dealloc(v206);
        swift_task_dealloc(v210);
        swift_task_dealloc(v216);
        swift_task_dealloc(v221);
        swift_task_dealloc(v226);
        swift_task_dealloc(v230);
        swift_task_dealloc(v235);
        swift_task_dealloc(v238);
        swift_task_dealloc(v242);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v141 + 8))(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 560));
        (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
        v163 = *(_QWORD *)(v0 + 664);
        v164 = *(_QWORD *)(v0 + 656);
        v165 = *(_QWORD *)(v0 + 648);
        v166 = *(_QWORD *)(v0 + 640);
        v167 = *(_QWORD *)(v0 + 632);
        v168 = *(_QWORD *)(v0 + 624);
        v169 = *(_QWORD *)(v0 + 616);
        v170 = *(_QWORD *)(v0 + 608);
        v171 = *(_QWORD *)(v0 + 584);
        v174 = *(_QWORD *)(v0 + 576);
        v176 = *(_QWORD *)(v0 + 552);
        v178 = *(_QWORD *)(v0 + 528);
        v180 = *(_QWORD *)(v0 + 520);
        v182 = *(_QWORD *)(v0 + 512);
        v184 = *(_QWORD *)(v0 + 504);
        v186 = *(_QWORD *)(v0 + 496);
        v188 = *(_QWORD *)(v0 + 488);
        v190 = *(_QWORD *)(v0 + 480);
        v192 = *(_QWORD *)(v0 + 472);
        v194 = *(_QWORD *)(v0 + 464);
        v197 = *(_QWORD *)(v0 + 456);
        v199 = *(_QWORD *)(v0 + 448);
        v203 = *(_QWORD *)(v0 + 424);
        v207 = *(_QWORD *)(v0 + 416);
        v212 = *(_QWORD *)(v0 + 408);
        v218 = *(_QWORD *)(v0 + 400);
        v222 = *(_QWORD *)(v0 + 392);
        v227 = *(_QWORD *)(v0 + 384);
        v231 = *(_QWORD *)(v0 + 360);
        v236 = *(_QWORD *)(v0 + 352);
        v239 = *(_QWORD *)(v0 + 344);
        v243 = *(_QWORD *)(v0 + 320);
        v246 = *(_QWORD *)(v0 + 312);
        swift_task_dealloc(*(_QWORD *)(v0 + 688));
        swift_task_dealloc(v163);
        swift_task_dealloc(v164);
        swift_task_dealloc(v165);
        swift_task_dealloc(v166);
        swift_task_dealloc(v167);
        swift_task_dealloc(v168);
        swift_task_dealloc(v169);
        swift_task_dealloc(v170);
        swift_task_dealloc(v171);
        swift_task_dealloc(v174);
        swift_task_dealloc(v176);
        swift_task_dealloc(v178);
        swift_task_dealloc(v180);
        swift_task_dealloc(v182);
        swift_task_dealloc(v184);
        swift_task_dealloc(v186);
        swift_task_dealloc(v188);
        swift_task_dealloc(v190);
        swift_task_dealloc(v192);
        swift_task_dealloc(v194);
        swift_task_dealloc(v197);
        swift_task_dealloc(v199);
        swift_task_dealloc(v203);
        swift_task_dealloc(v207);
        swift_task_dealloc(v212);
        swift_task_dealloc(v218);
        swift_task_dealloc(v222);
        swift_task_dealloc(v227);
        swift_task_dealloc(v231);
        swift_task_dealloc(v236);
        swift_task_dealloc(v239);
        swift_task_dealloc(v243);
        swift_task_dealloc(v246);
      }
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 880);
    v24 = *(_QWORD *)(v0 + 520);
    v25 = *(_QWORD *)(v0 + 512);
    v244 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v244(v24, v1, v2);
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v26(v25, v24, v2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
    v28 = *(_QWORD *)(v0 + 880);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v28 = sub_100091A00(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
    v30 = *(_QWORD *)(v28 + 16);
    v29 = *(_QWORD *)(v28 + 24);
    if (v30 >= v29 >> 1)
      v28 = sub_100091A00(v29 > 1, v30 + 1, 1, v28);
    *(_QWORD *)(v0 + 912) = v28;
    v31 = *(_QWORD *)(v0 + 520);
    v33 = *(_QWORD *)(v0 + 504);
    v32 = *(_QWORD *)(v0 + 512);
    v35 = *(_QWORD *)(v0 + 488);
    v34 = *(_QWORD *)(v0 + 496);
    v37 = *(_QWORD *)(v0 + 432);
    v36 = *(_QWORD *)(v0 + 440);
    *(_QWORD *)(v28 + 16) = v30 + 1;
    v38 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v244)(v28+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v30, v32, v37);
    static Log.photos.getter(v38);
    v26(v33, v31, v37);
    v26(v34, v31, v37);
    v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v26)(v35, v31, v37);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v228 = v41;
      v237 = v40;
      v42 = (_QWORD *)(v0 + 256);
      v43 = *(_QWORD *)(v0 + 504);
      v195 = *(_QWORD *)(v0 + 496);
      v45 = *(_QWORD *)(v0 + 432);
      v44 = *(_QWORD *)(v0 + 440);
      v209 = *(_QWORD *)(v0 + 376);
      v46 = *(_QWORD *)(v0 + 360);
      v200 = *(_QWORD *)(v0 + 424);
      v205 = *(_QWORD *)(v0 + 368);
      v47 = *(_QWORD *)(v0 + 328);
      v232 = *(_QWORD *)(v0 + 336);
      v48 = swift_slowAlloc(32, -1);
      v224 = swift_slowAlloc(64, -1);
      *(_QWORD *)(v0 + 232) = v224;
      *(_DWORD *)v48 = 134218498;
      v49 = SyncedPhotosFace.photos.getter(v45);
      v50 = *(_QWORD *)(v49 + 16);
      swift_bridgeObjectRelease(v49);
      v51 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v51(v43, v45);
      *(_QWORD *)(v0 + 240) = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v48 + 4, v48 + 12);
      *(_WORD *)(v48 + 12) = 2080;
      SyncedPhotosFace.id.getter(v45);
      v52 = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      dispatch thunk of PhotosFaceID.id.getter(v47, v52);
      (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v46, v47);
      v233 = v51;
      v51(v195, v45);
      v53 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v205, v53);
      v56 = v55;
      (*(void (**)(uint64_t, uint64_t))(v209 + 8))(v200, v205);
      *(_QWORD *)(v0 + 248) = sub_100021438(v54, v56, (uint64_t *)(v0 + 232));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease(v56);
      v240 = (uint8_t *)v48;
      *(_WORD *)(v48 + 22) = 2080;
      v57 = SyncedPhotosFace.photos.getter(v45);
      v58 = v57;
      v59 = *(_QWORD *)(v57 + 16);
      if (v59)
      {
        v60 = *(_QWORD *)(v0 + 304);
        *(_QWORD *)(v0 + 256) = _swiftEmptyArrayStorage;
        sub_10004D740(0, v59, 0);
        v214 = v58;
        v61 = v58 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
        v62 = *(_QWORD *)(v60 + 72);
        v63 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v60 + 16);
        do
        {
          v65 = *(_QWORD *)(v0 + 304);
          v64 = *(_QWORD *)(v0 + 312);
          v66 = *(_QWORD *)(v0 + 296);
          v67 = v63(v64, v61, v66);
          StoredPhoto.localIdentifier.getter(v67);
          (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
          v68 = *(_QWORD **)(v0 + 256);
          if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
          {
            sub_10004D740(0, v68[2] + 1, 1);
            v68 = (_QWORD *)*v42;
          }
          v70 = v68[2];
          v69 = v68[3];
          if (v70 >= v69 >> 1)
          {
            sub_10004D740(v69 > 1, v70 + 1, 1);
            v68 = (_QWORD *)*v42;
          }
          v72 = *(_QWORD *)(v0 + 376);
          v71 = *(_QWORD *)(v0 + 384);
          v73 = *(_QWORD *)(v0 + 368);
          v68[2] = v70 + 1;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v72 + 32))((unint64_t)v68+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(_QWORD *)(v72 + 72) * v70, v71, v73);
          *(_QWORD *)(v0 + 256) = v68;
          v61 += v62;
          --v59;
        }
        while (v59);
        swift_bridgeObjectRelease(v214);
      }
      else
      {
        swift_bridgeObjectRelease(v57);
        v68 = _swiftEmptyArrayStorage;
      }
      v98 = (_QWORD *)(v0 + 840);
      v211 = *(_QWORD *)(v0 + 656);
      v217 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
      v156 = *(_QWORD *)(v0 + 592);
      v157 = *(_QWORD *)(v0 + 368);
      v233(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 432));
      v158 = Array.description.getter(v68, v157);
      v160 = v159;
      swift_bridgeObjectRelease(v68);
      *(_QWORD *)(v0 + 264) = sub_100021438(v158, v160, (uint64_t *)(v0 + 232));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v240 + 24, v240 + 32);
      v161 = v160;
      v105 = v233;
      swift_bridgeObjectRelease(v161);
      _os_log_impl((void *)&_mh_execute_header, v237, v228, "Caching %ld for face %s, photos = %s", v240, 0x20u);
      swift_arrayDestroy(v224, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v224, -1, -1);
      swift_slowDealloc(v240, -1, -1);

      v217(v211, v156);
    }
    else
    {
      v98 = (_QWORD *)(v0 + 872);
      v99 = *(void (**)(uint64_t, uint64_t))(v0 + 872);
      v100 = *(_QWORD *)(v0 + 656);
      v101 = *(_QWORD *)(v0 + 592);
      v103 = *(_QWORD *)(v0 + 496);
      v102 = *(_QWORD *)(v0 + 504);
      v104 = *(_QWORD *)(v0 + 432);
      v105 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
      v105(*(_QWORD *)(v0 + 488), v104);
      v105(v103, v104);
      v105(v102, v104);

      v99(v100, v101);
    }
    *(_QWORD *)(v0 + 928) = *v98;
    *(_QWORD *)(v0 + 920) = v105;
    v162 = *(_QWORD *)(v0 + 432);
    *(_QWORD *)(v0 + 936) = *(_QWORD *)(*(_QWORD *)(v0 + 288) + 104);
    *(_QWORD *)(v0 + 944) = SyncedPhotosFace.photos.getter(v162);
    return swift_task_switch(sub_10007B5A0, 0, 0);
  }
}

void sub_10007A69C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(unint64_t, uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t KeyPath;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  void (*v60)(uint64_t, unint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191[3];

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 544) + 8))(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 536));
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 880);
  *(_QWORD *)(v0 + 976) = v2;
  *(_QWORD *)(v0 + 968) = v1;
  *(_QWORD *)(v0 + 984) = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  v3 = swift_bridgeObjectRetain(v2);
  v4 = static SyncedPhotosFace.destreamify(_:)(v3);
  v5 = swift_bridgeObjectRelease(v2);
  *(_QWORD *)(v0 + 88) = v4;
  v6 = v0 + 88;
  if (v1)
  {
    v191[0] = (uint64_t)_swiftEmptyArrayStorage;
    v7 = *(_QWORD *)(v4 + 16);
    v8 = swift_bridgeObjectRetain(v4);
    if (v7)
    {
      v9 = 0;
      v187 = _swiftEmptyArrayStorage;
      while (v9 < *(_QWORD *)(v4 + 16))
      {
        v11 = *(_QWORD *)(v0 + 432);
        v10 = *(_QWORD *)(v0 + 440);
        v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        v13 = *(_QWORD *)(v10 + 72);
        (*(void (**)(_QWORD, unint64_t, uint64_t, __n128))(v10 + 16))(*(_QWORD *)(v0 + 480), v4 + v12 + v13 * v9, v11, v8);
        if ((SyncedPhotosFace.complete.getter(v11) & 1) != 0)
        {
          v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 32);
          v14(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 432));
          v15 = (uint64_t)v187;
          if ((swift_isUniquelyReferenced_nonNull_native(v187) & 1) == 0)
          {
            sub_10004D854(0, v187[2] + 1, 1);
            v15 = v191[0];
          }
          v17 = *(_QWORD *)(v15 + 16);
          v16 = *(_QWORD *)(v15 + 24);
          if (v17 >= v16 >> 1)
          {
            sub_10004D854(v16 > 1, v17 + 1, 1);
            v15 = v191[0];
          }
          v18 = *(_QWORD *)(v0 + 472);
          v19 = *(_QWORD *)(v0 + 432);
          *(_QWORD *)(v15 + 16) = v17 + 1;
          v187 = (_QWORD *)v15;
          v14(v15 + v12 + v17 * v13, v18, v19);
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 432));
        }
        if (v7 == ++v9)
          goto LABEL_15;
      }
      __break(1u);
      return;
    }
    v187 = _swiftEmptyArrayStorage;
LABEL_15:
    v6 = v0 + 88;
    v21 = swift_bridgeObjectRelease(v4);
    static Log.session.getter(v21);
    v20 = (uint64_t)v187;
    v22 = swift_retain(v187);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      *(_DWORD *)v25 = 134218240;
      *(_QWORD *)(v0 + 200) = v187[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v25 + 4, v25 + 12);
      swift_release(v187);
      *(_WORD *)(v25 + 12) = 2048;
      swift_beginAccess(v0 + 88, v0 + 16, 0, 0);
      *(_QWORD *)(v0 + 216) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 16);
      v6 = v0 + 88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v25 + 14, v25 + 22);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "An error occurred during sync. Only %ld / %ld finished successfully.", (uint8_t *)v25, 0x16u);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_release(v187);
    }

    (*(void (**)(_QWORD, _QWORD))(v0 + 840))(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 592));
    swift_beginAccess(v6, v0 + 40, 1, 0);
    v26 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 88) = v187;
    v5 = swift_bridgeObjectRelease(v26);
  }
  else
  {
    v20 = v4;
  }
  v188 = v6 - 24;
  v27 = v6 + 16;
  v28 = *(_QWORD *)(v0 + 288);
  static Log.session.getter(v5);
  swift_bridgeObjectRetain_n(v20, 3);
  v29 = swift_retain(v28);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  v181 = v6 + 80;
  if (os_log_type_enabled(v30, v31))
  {
    v155 = v6 + 96;
    v169 = *(_QWORD *)(v0 + 640);
    v173 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v165 = *(_QWORD *)(v0 + 592);
    v158 = *(_QWORD *)(v0 + 288);
    v177 = v6 + 16;
    v32 = *(unsigned __int8 *)(v0 + 1248);
    v33 = swift_slowAlloc(32, -1);
    v161 = swift_slowAlloc(64, -1);
    v191[0] = v161;
    *(_DWORD *)v33 = 134218498;
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v20 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 80, v6 + 88, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v33 + 12) = 2080;
    v34 = PhotosFaceType.description.getter(v32);
    v36 = v35;
    *(_QWORD *)(v0 + 176) = sub_100021438(v34, v35, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 88, v6 + 96, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease(v36);
    swift_release(v158);
    *(_WORD *)(v33 + 22) = 2080;
    v37 = sub_100086480(v20, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, &qword_1000B25E0, &qword_1000B2B30, (uint64_t)&protocol conformance descriptor for ShuffleID);
    swift_bridgeObjectRelease(v20);
    v38 = Array.description.getter(v37, &type metadata for String);
    v39 = v6;
    v41 = v40;
    swift_bridgeObjectRelease(v37);
    v42 = v38;
    v27 = v177;
    *(_QWORD *)(v0 + 184) = sub_100021438(v42, v41, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v155, v0 + 192, v33 + 24, v33 + 32);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Did syncFaces (%ld) for type %s: %s", (uint8_t *)v33, 0x20u);
    swift_arrayDestroy(v161, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v161, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    v173(v169, v165);
  }
  else
  {
    v43 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v44 = *(_QWORD *)(v0 + 640);
    v45 = *(_QWORD *)(v0 + 592);
    v46 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRelease_n(v20, 3);
    swift_release(v46);

    v43(v44, v45);
    v39 = v6;
  }
  v47 = *(_QWORD *)(v0 + 784);
  v48 = *(_QWORD *)(v0 + 776);
  v49 = *(_QWORD *)(v0 + 720);
  v50 = *(_QWORD *)(v0 + 712);
  v51 = *(_QWORD *)(v0 + 328);
  swift_beginAccess(v39, v188, 0, 0);
  v52 = *(_QWORD *)(v0 + 88);
  v53 = (_QWORD *)swift_task_alloc(48);
  *v53 = v51;
  v53[1] = v48;
  v53[2] = v50;
  v53[3] = v47;
  v53[4] = v49;
  KeyPath = swift_getKeyPath(&unk_100096E48);
  swift_task_dealloc(v53);
  swift_retain(KeyPath);
  swift_bridgeObjectRetain(v52);
  v56 = sub_10008BAA8(v55, KeyPath, v27, &qword_1000B25E0);
  *(_QWORD *)(v0 + 992) = v56;
  swift_release_n(KeyPath, 2);
  swift_bridgeObjectRelease(v52);
  v57 = v56[2];
  *(_QWORD *)(v0 + 1000) = v57;
  v58 = *(_QWORD *)(v0 + 376);
  if (v57)
  {
    v59 = *(_DWORD *)(v58 + 80);
    *(_DWORD *)(v0 + 1240) = v59;
    *(_QWORD *)(v0 + 1008) = *(_QWORD *)(v58 + 72);
    v60 = *(void (**)(uint64_t, unint64_t, uint64_t))(v58 + 16);
    *(_QWORD *)(v0 + 1016) = v60;
    v61 = *(_QWORD *)(v0 + 840);
    *(_QWORD *)(v0 + 1160) = 0;
    *(_QWORD *)(v0 + 1152) = v61;
    *(_QWORD *)(v0 + 1144) = v61;
    *(_QWORD *)(v0 + 1136) = v61;
    v62 = *(_QWORD *)(v0 + 368);
    v63 = *(_QWORD *)(v0 + 320);
    v60(v63, *(_QWORD *)(v0 + 992) + ((v59 + 32) & ~(unint64_t)v59), v62);
    v64 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56);
    *(_QWORD *)(v0 + 1168) = v64;
    v64(v63, 0, 1, v62);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v63, 1, v62) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 32))(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 368));
      v65 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
      *(_QWORD *)(v0 + 1176) = v65;
      *v65 = v0;
      v65[1] = sub_10007D4BC;
      dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
      return;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v58 + 56))(*(_QWORD *)(v0 + 320), 1, 1, *(_QWORD *)(v0 + 368));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 992));
  v66 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 1024) = v66;
  v67 = *(_QWORD *)(v66 + 16);
  *(_QWORD *)(v0 + 1032) = v67;
  if (v67)
  {
    v69 = *(_QWORD *)(v0 + 432);
    v68 = *(_QWORD *)(v0 + 440);
    v70 = *(_DWORD *)(v68 + 80);
    *(_DWORD *)(v0 + 1244) = v70;
    *(_QWORD *)(v0 + 1040) = *(_QWORD *)(v68 + 72);
    v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v68 + 16);
    *(_QWORD *)(v0 + 1048) = v71;
    v72 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    *(_QWORD *)(v0 + 1064) = 0;
    *(_QWORD *)(v0 + 1056) = v72;
    v74 = *(_QWORD *)(v0 + 456);
    v73 = *(_QWORD *)(v0 + 464);
    v75 = *(_QWORD *)(v0 + 288);
    v76 = v66 + ((v70 + 32) & ~(unint64_t)v70);
    v77 = swift_bridgeObjectRetain(v66);
    v78 = v71(v73, v76, v69, v77);
    static Log.photos.getter(v78);
    ((void (*)(uint64_t, uint64_t, uint64_t))v71)(v74, v73, v69);
    v79 = swift_retain(v75);
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v80, v81))
    {
      v189 = *(_QWORD *)(v0 + 632);
      v184 = *(_QWORD *)(v0 + 592);
      v82 = *(_QWORD *)(v0 + 456);
      v83 = *(_QWORD *)(v0 + 432);
      v162 = *(_QWORD *)(v0 + 440);
      v178 = v72;
      v84 = *(_QWORD *)(v0 + 360);
      v170 = *(_QWORD *)(v0 + 336);
      v166 = *(_QWORD *)(v0 + 328);
      v152 = *(_QWORD *)(v0 + 288);
      v85 = *(unsigned __int8 *)(v0 + 1248);
      v86 = swift_slowAlloc(22, -1);
      v174 = swift_slowAlloc(64, -1);
      v191[0] = v174;
      *(_DWORD *)v86 = 136315394;
      v87 = PhotosFaceType.description.getter(v85);
      v89 = v88;
      *(_QWORD *)(v0 + 152) = sub_100021438(v87, v88, v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v86 + 4, v86 + 12);
      swift_bridgeObjectRelease(v89);
      swift_release(v152);
      *(_WORD *)(v86 + 12) = 2080;
      SyncedPhotosFace.id.getter(v83);
      v90 = *(void (**)(uint64_t, uint64_t))(v162 + 8);
      v90(v82, v83);
      v91 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v92 = dispatch thunk of CustomStringConvertible.description.getter(v166, v91);
      v94 = v93;
      (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v84, v166);
      *(_QWORD *)(v0 + 160) = sub_100021438(v92, v94, v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v181, v86 + 14, v86 + 22);
      swift_bridgeObjectRelease(v94);
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Inserting face, type = %s: %s", (uint8_t *)v86, 0x16u);
      swift_arrayDestroy(v174, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v174, -1, -1);
      swift_slowDealloc(v86, -1, -1);

      v178(v189, v184);
    }
    else
    {
      v112 = *(_QWORD *)(v0 + 632);
      v113 = *(_QWORD *)(v0 + 592);
      v114 = *(_QWORD *)(v0 + 288);
      v90 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
      v90(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
      swift_release(v114);

      v72(v112, v113);
    }
    *(_QWORD *)(v0 + 1072) = v90;
    SyncedPhotosFace.id.getter(*(_QWORD *)(v0 + 432));
    v115 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
    *(_QWORD *)(v0 + 1080) = v115;
    *v115 = v0;
    v115[1] = sub_10007C6F8;
    dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
  }
  else
  {
    v95 = *(_QWORD *)(v0 + 704);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 976));
    v96 = swift_release(v95);
    if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
      v96 = sub_100022934(*(unsigned __int8 *)(v0 + 1248));
    v97 = *(_QWORD *)(v0 + 688);
    v98 = *(_QWORD *)(v0 + 680);
    v99 = *(_QWORD *)(v0 + 672);
    v100 = *(_QWORD *)(v0 + 584);
    v101 = *(_QWORD *)(v0 + 568);
    v102 = *(_QWORD *)(v0 + 560);
    if (*(_QWORD *)(v0 + 968))
    {
      swift_willThrow(v96);
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v103 = *(_QWORD *)(v0 + 664);
      v104 = *(_QWORD *)(v0 + 656);
      v105 = *(_QWORD *)(v0 + 648);
      v106 = *(_QWORD *)(v0 + 640);
      v107 = *(_QWORD *)(v0 + 632);
      v108 = *(_QWORD *)(v0 + 624);
      v109 = *(_QWORD *)(v0 + 616);
      v110 = *(_QWORD *)(v0 + 608);
      v111 = *(_QWORD *)(v0 + 584);
      v125 = *(_QWORD *)(v0 + 576);
      v126 = *(_QWORD *)(v0 + 552);
      v128 = *(_QWORD *)(v0 + 528);
      v130 = *(_QWORD *)(v0 + 520);
      v132 = *(_QWORD *)(v0 + 512);
      v134 = *(_QWORD *)(v0 + 504);
      v136 = *(_QWORD *)(v0 + 496);
      v138 = *(_QWORD *)(v0 + 488);
      v140 = *(_QWORD *)(v0 + 480);
      v142 = *(_QWORD *)(v0 + 472);
      v144 = *(_QWORD *)(v0 + 464);
      v146 = *(_QWORD *)(v0 + 456);
      v148 = *(_QWORD *)(v0 + 448);
      v150 = *(_QWORD *)(v0 + 424);
      v153 = *(_QWORD *)(v0 + 416);
      v156 = *(_QWORD *)(v0 + 408);
      v159 = *(_QWORD *)(v0 + 400);
      v163 = *(_QWORD *)(v0 + 392);
      v167 = *(_QWORD *)(v0 + 384);
      v171 = *(_QWORD *)(v0 + 360);
      v175 = *(_QWORD *)(v0 + 352);
      v179 = *(_QWORD *)(v0 + 344);
      v182 = *(_QWORD *)(v0 + 320);
      v185 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v103);
      swift_task_dealloc(v104);
      swift_task_dealloc(v105);
      swift_task_dealloc(v106);
      swift_task_dealloc(v107);
      swift_task_dealloc(v108);
      swift_task_dealloc(v109);
      swift_task_dealloc(v110);
      swift_task_dealloc(v111);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v128);
      swift_task_dealloc(v130);
      swift_task_dealloc(v132);
      swift_task_dealloc(v134);
      swift_task_dealloc(v136);
      swift_task_dealloc(v138);
      swift_task_dealloc(v140);
      swift_task_dealloc(v142);
      swift_task_dealloc(v144);
      swift_task_dealloc(v146);
      swift_task_dealloc(v148);
      swift_task_dealloc(v150);
      swift_task_dealloc(v153);
      swift_task_dealloc(v156);
      swift_task_dealloc(v159);
      swift_task_dealloc(v163);
      swift_task_dealloc(v167);
      swift_task_dealloc(v171);
      swift_task_dealloc(v175);
      swift_task_dealloc(v179);
      swift_task_dealloc(v182);
      swift_task_dealloc(v185);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v101 + 8))(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 560));
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v116 = *(_QWORD *)(v0 + 664);
      v117 = *(_QWORD *)(v0 + 656);
      v118 = *(_QWORD *)(v0 + 648);
      v119 = *(_QWORD *)(v0 + 640);
      v120 = *(_QWORD *)(v0 + 632);
      v121 = *(_QWORD *)(v0 + 624);
      v122 = *(_QWORD *)(v0 + 616);
      v123 = *(_QWORD *)(v0 + 608);
      v124 = *(_QWORD *)(v0 + 584);
      v127 = *(_QWORD *)(v0 + 576);
      v129 = *(_QWORD *)(v0 + 552);
      v131 = *(_QWORD *)(v0 + 528);
      v133 = *(_QWORD *)(v0 + 520);
      v135 = *(_QWORD *)(v0 + 512);
      v137 = *(_QWORD *)(v0 + 504);
      v139 = *(_QWORD *)(v0 + 496);
      v141 = *(_QWORD *)(v0 + 488);
      v143 = *(_QWORD *)(v0 + 480);
      v145 = *(_QWORD *)(v0 + 472);
      v147 = *(_QWORD *)(v0 + 464);
      v149 = *(_QWORD *)(v0 + 456);
      v151 = *(_QWORD *)(v0 + 448);
      v154 = *(_QWORD *)(v0 + 424);
      v157 = *(_QWORD *)(v0 + 416);
      v160 = *(_QWORD *)(v0 + 408);
      v164 = *(_QWORD *)(v0 + 400);
      v168 = *(_QWORD *)(v0 + 392);
      v172 = *(_QWORD *)(v0 + 384);
      v176 = *(_QWORD *)(v0 + 360);
      v180 = *(_QWORD *)(v0 + 352);
      v183 = *(_QWORD *)(v0 + 344);
      v186 = *(_QWORD *)(v0 + 320);
      v190 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v116);
      swift_task_dealloc(v117);
      swift_task_dealloc(v118);
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v127);
      swift_task_dealloc(v129);
      swift_task_dealloc(v131);
      swift_task_dealloc(v133);
      swift_task_dealloc(v135);
      swift_task_dealloc(v137);
      swift_task_dealloc(v139);
      swift_task_dealloc(v141);
      swift_task_dealloc(v143);
      swift_task_dealloc(v145);
      swift_task_dealloc(v147);
      swift_task_dealloc(v149);
      swift_task_dealloc(v151);
      swift_task_dealloc(v154);
      swift_task_dealloc(v157);
      swift_task_dealloc(v160);
      swift_task_dealloc(v164);
      swift_task_dealloc(v168);
      swift_task_dealloc(v172);
      swift_task_dealloc(v176);
      swift_task_dealloc(v180);
      swift_task_dealloc(v183);
      swift_task_dealloc(v186);
      swift_task_dealloc(v190);
    }
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10007B5A0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v0[28] = v0[118];
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(predicate:)[1]);
  v0[119] = v1;
  v2 = sub_10000629C(&qword_1000B3DA8);
  v3 = sub_100006454(&qword_1000B3DB0, &qword_1000B3DA8, (uint64_t)&protocol conformance descriptor for [A]);
  *v1 = v0;
  v1[1] = sub_10007B644;
  return Sequence.asyncMap<A>(predicate:)(&unk_1000B3F68, v0[117], v2, v0[37], v3);
}

uint64_t sub_10007B644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 952);
  *(_QWORD *)(*(_QWORD *)v2 + 960) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10007B7A0;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v9 = v4[118];
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v9);
    v8 = v4[96];
    v7 = v4[95];
    v6 = sub_10007B6D0;
  }
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_10007B6D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 920))(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 432));
  v2 = *(_QWORD *)(v0 + 928);
  *(_QWORD *)(v0 + 880) = *(_QWORD *)(v0 + 912);
  *(_QWORD *)(v0 + 872) = v2;
  v3 = *(_QWORD *)(v0 + 752);
  v4 = static CommunicationActor.shared.getter(v1);
  *(_QWORD *)(v0 + 888) = v4;
  v5 = sub_100006454(&qword_1000B3D98, &qword_1000B3D78, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
  v6 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  *(_QWORD *)(v0 + 896) = v6;
  *v6 = v0;
  v6[1] = sub_1000793B4;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 528), v4, v3, v0 + 96, *(_QWORD *)(v0 + 536), v5);
}

uint64_t sub_10007B7A0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[118]);
  return swift_task_switch(sub_10007B7DC, v0[95], v0[96]);
}

void sub_10007B7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(unint64_t, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t KeyPath;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  void (*v63)(uint64_t, unint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t, uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(uint64_t, uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194[3];

  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 536);
  (*(void (**)(_QWORD, _QWORD))(v0 + 920))(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 432));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 960);
  v5 = *(_QWORD *)(v0 + 912);
  *(_QWORD *)(v0 + 976) = v5;
  *(_QWORD *)(v0 + 968) = v4;
  *(_QWORD *)(v0 + 984) = sub_100009174(&qword_1000B2B08, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  v6 = swift_bridgeObjectRetain(v5);
  v7 = static SyncedPhotosFace.destreamify(_:)(v6);
  v8 = swift_bridgeObjectRelease(v5);
  *(_QWORD *)(v0 + 88) = v7;
  v9 = v0 + 88;
  if (v4)
  {
    v194[0] = (uint64_t)_swiftEmptyArrayStorage;
    v10 = *(_QWORD *)(v7 + 16);
    v11 = swift_bridgeObjectRetain(v7);
    if (v10)
    {
      v12 = 0;
      v190 = _swiftEmptyArrayStorage;
      while (v12 < *(_QWORD *)(v7 + 16))
      {
        v14 = *(_QWORD *)(v0 + 432);
        v13 = *(_QWORD *)(v0 + 440);
        v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
        v16 = *(_QWORD *)(v13 + 72);
        (*(void (**)(_QWORD, unint64_t, uint64_t, __n128))(v13 + 16))(*(_QWORD *)(v0 + 480), v7 + v15 + v16 * v12, v14, v11);
        if ((SyncedPhotosFace.complete.getter(v14) & 1) != 0)
        {
          v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 32);
          v17(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 432));
          v18 = (uint64_t)v190;
          if ((swift_isUniquelyReferenced_nonNull_native(v190) & 1) == 0)
          {
            sub_10004D854(0, v190[2] + 1, 1);
            v18 = v194[0];
          }
          v20 = *(_QWORD *)(v18 + 16);
          v19 = *(_QWORD *)(v18 + 24);
          if (v20 >= v19 >> 1)
          {
            sub_10004D854(v19 > 1, v20 + 1, 1);
            v18 = v194[0];
          }
          v21 = *(_QWORD *)(v0 + 472);
          v22 = *(_QWORD *)(v0 + 432);
          *(_QWORD *)(v18 + 16) = v20 + 1;
          v190 = (_QWORD *)v18;
          v17(v18 + v15 + v20 * v16, v21, v22);
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 432));
        }
        if (v10 == ++v12)
          goto LABEL_15;
      }
      __break(1u);
      return;
    }
    v190 = _swiftEmptyArrayStorage;
LABEL_15:
    v9 = v0 + 88;
    v24 = swift_bridgeObjectRelease(v7);
    static Log.session.getter(v24);
    v23 = (uint64_t)v190;
    v25 = swift_retain(v190);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      *(_DWORD *)v28 = 134218240;
      *(_QWORD *)(v0 + 200) = v190[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v28 + 4, v28 + 12);
      swift_release(v190);
      *(_WORD *)(v28 + 12) = 2048;
      swift_beginAccess(v0 + 88, v0 + 16, 0, 0);
      *(_QWORD *)(v0 + 216) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 16);
      v9 = v0 + 88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v28 + 14, v28 + 22);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "An error occurred during sync. Only %ld / %ld finished successfully.", (uint8_t *)v28, 0x16u);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      swift_release(v190);
    }

    (*(void (**)(_QWORD, _QWORD))(v0 + 840))(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 592));
    swift_beginAccess(v9, v0 + 40, 1, 0);
    v29 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 88) = v190;
    v8 = swift_bridgeObjectRelease(v29);
  }
  else
  {
    v23 = v7;
  }
  v191 = v9 - 24;
  v30 = v9 + 16;
  v31 = *(_QWORD *)(v0 + 288);
  static Log.session.getter(v8);
  swift_bridgeObjectRetain_n(v23, 3);
  v32 = swift_retain(v31);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  v184 = v9 + 80;
  if (os_log_type_enabled(v33, v34))
  {
    v158 = v9 + 96;
    v172 = *(_QWORD *)(v0 + 640);
    v176 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v168 = *(_QWORD *)(v0 + 592);
    v161 = *(_QWORD *)(v0 + 288);
    v180 = v9 + 16;
    v35 = *(unsigned __int8 *)(v0 + 1248);
    v36 = swift_slowAlloc(32, -1);
    v164 = swift_slowAlloc(64, -1);
    v194[0] = v164;
    *(_DWORD *)v36 = 134218498;
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v23 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 + 80, v9 + 88, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v36 + 12) = 2080;
    v37 = PhotosFaceType.description.getter(v35);
    v39 = v38;
    *(_QWORD *)(v0 + 176) = sub_100021438(v37, v38, v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 + 88, v9 + 96, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease(v39);
    swift_release(v161);
    *(_WORD *)(v36 + 22) = 2080;
    v40 = sub_100086480(v23, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, &qword_1000B25E0, &qword_1000B2B30, (uint64_t)&protocol conformance descriptor for ShuffleID);
    swift_bridgeObjectRelease(v23);
    v41 = Array.description.getter(v40, &type metadata for String);
    v42 = v9;
    v44 = v43;
    swift_bridgeObjectRelease(v40);
    v45 = v41;
    v30 = v180;
    *(_QWORD *)(v0 + 184) = sub_100021438(v45, v44, v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v158, v0 + 192, v36 + 24, v36 + 32);
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Did syncFaces (%ld) for type %s: %s", (uint8_t *)v36, 0x20u);
    swift_arrayDestroy(v164, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v164, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    v176(v172, v168);
  }
  else
  {
    v46 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v47 = *(_QWORD *)(v0 + 640);
    v48 = *(_QWORD *)(v0 + 592);
    v49 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRelease_n(v23, 3);
    swift_release(v49);

    v46(v47, v48);
    v42 = v9;
  }
  v50 = *(_QWORD *)(v0 + 784);
  v51 = *(_QWORD *)(v0 + 776);
  v52 = *(_QWORD *)(v0 + 720);
  v53 = *(_QWORD *)(v0 + 712);
  v54 = *(_QWORD *)(v0 + 328);
  swift_beginAccess(v42, v191, 0, 0);
  v55 = *(_QWORD *)(v0 + 88);
  v56 = (_QWORD *)swift_task_alloc(48);
  *v56 = v54;
  v56[1] = v51;
  v56[2] = v53;
  v56[3] = v50;
  v56[4] = v52;
  KeyPath = swift_getKeyPath(&unk_100096E48);
  swift_task_dealloc(v56);
  swift_retain(KeyPath);
  swift_bridgeObjectRetain(v55);
  v59 = sub_10008BAA8(v58, KeyPath, v30, &qword_1000B25E0);
  *(_QWORD *)(v0 + 992) = v59;
  swift_release_n(KeyPath, 2);
  swift_bridgeObjectRelease(v55);
  v60 = v59[2];
  *(_QWORD *)(v0 + 1000) = v60;
  v61 = *(_QWORD *)(v0 + 376);
  if (v60)
  {
    v62 = *(_DWORD *)(v61 + 80);
    *(_DWORD *)(v0 + 1240) = v62;
    *(_QWORD *)(v0 + 1008) = *(_QWORD *)(v61 + 72);
    v63 = *(void (**)(uint64_t, unint64_t, uint64_t))(v61 + 16);
    *(_QWORD *)(v0 + 1016) = v63;
    v64 = *(_QWORD *)(v0 + 840);
    *(_QWORD *)(v0 + 1160) = 0;
    *(_QWORD *)(v0 + 1152) = v64;
    *(_QWORD *)(v0 + 1144) = v64;
    *(_QWORD *)(v0 + 1136) = v64;
    v65 = *(_QWORD *)(v0 + 368);
    v66 = *(_QWORD *)(v0 + 320);
    v63(v66, *(_QWORD *)(v0 + 992) + ((v62 + 32) & ~(unint64_t)v62), v65);
    v67 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56);
    *(_QWORD *)(v0 + 1168) = v67;
    v67(v66, 0, 1, v65);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v66, 1, v65) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 32))(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 368));
      v68 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
      *(_QWORD *)(v0 + 1176) = v68;
      *v68 = v0;
      v68[1] = sub_10007D4BC;
      dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
      return;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v61 + 56))(*(_QWORD *)(v0 + 320), 1, 1, *(_QWORD *)(v0 + 368));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 992));
  v69 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 1024) = v69;
  v70 = *(_QWORD *)(v69 + 16);
  *(_QWORD *)(v0 + 1032) = v70;
  if (v70)
  {
    v72 = *(_QWORD *)(v0 + 432);
    v71 = *(_QWORD *)(v0 + 440);
    v73 = *(_DWORD *)(v71 + 80);
    *(_DWORD *)(v0 + 1244) = v73;
    *(_QWORD *)(v0 + 1040) = *(_QWORD *)(v71 + 72);
    v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v71 + 16);
    *(_QWORD *)(v0 + 1048) = v74;
    v75 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    *(_QWORD *)(v0 + 1064) = 0;
    *(_QWORD *)(v0 + 1056) = v75;
    v77 = *(_QWORD *)(v0 + 456);
    v76 = *(_QWORD *)(v0 + 464);
    v78 = *(_QWORD *)(v0 + 288);
    v79 = v69 + ((v73 + 32) & ~(unint64_t)v73);
    v80 = swift_bridgeObjectRetain(v69);
    v81 = v74(v76, v79, v72, v80);
    static Log.photos.getter(v81);
    ((void (*)(uint64_t, uint64_t, uint64_t))v74)(v77, v76, v72);
    v82 = swift_retain(v78);
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v192 = *(_QWORD *)(v0 + 632);
      v187 = *(_QWORD *)(v0 + 592);
      v85 = *(_QWORD *)(v0 + 456);
      v86 = *(_QWORD *)(v0 + 432);
      v165 = *(_QWORD *)(v0 + 440);
      v181 = v75;
      v87 = *(_QWORD *)(v0 + 360);
      v173 = *(_QWORD *)(v0 + 336);
      v169 = *(_QWORD *)(v0 + 328);
      v155 = *(_QWORD *)(v0 + 288);
      v88 = *(unsigned __int8 *)(v0 + 1248);
      v89 = swift_slowAlloc(22, -1);
      v177 = swift_slowAlloc(64, -1);
      v194[0] = v177;
      *(_DWORD *)v89 = 136315394;
      v90 = PhotosFaceType.description.getter(v88);
      v92 = v91;
      *(_QWORD *)(v0 + 152) = sub_100021438(v90, v91, v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v89 + 4, v89 + 12);
      swift_bridgeObjectRelease(v92);
      swift_release(v155);
      *(_WORD *)(v89 + 12) = 2080;
      SyncedPhotosFace.id.getter(v86);
      v93 = *(void (**)(uint64_t, uint64_t))(v165 + 8);
      v93(v85, v86);
      v94 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v95 = dispatch thunk of CustomStringConvertible.description.getter(v169, v94);
      v97 = v96;
      (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v87, v169);
      *(_QWORD *)(v0 + 160) = sub_100021438(v95, v97, v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v184, v89 + 14, v89 + 22);
      swift_bridgeObjectRelease(v97);
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Inserting face, type = %s: %s", (uint8_t *)v89, 0x16u);
      swift_arrayDestroy(v177, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v177, -1, -1);
      swift_slowDealloc(v89, -1, -1);

      v181(v192, v187);
    }
    else
    {
      v115 = *(_QWORD *)(v0 + 632);
      v116 = *(_QWORD *)(v0 + 592);
      v117 = *(_QWORD *)(v0 + 288);
      v93 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
      v93(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
      swift_release(v117);

      v75(v115, v116);
    }
    *(_QWORD *)(v0 + 1072) = v93;
    SyncedPhotosFace.id.getter(*(_QWORD *)(v0 + 432));
    v118 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
    *(_QWORD *)(v0 + 1080) = v118;
    *v118 = v0;
    v118[1] = sub_10007C6F8;
    dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
  }
  else
  {
    v98 = *(_QWORD *)(v0 + 704);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 976));
    v99 = swift_release(v98);
    if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
      v99 = sub_100022934(*(unsigned __int8 *)(v0 + 1248));
    v100 = *(_QWORD *)(v0 + 688);
    v101 = *(_QWORD *)(v0 + 680);
    v102 = *(_QWORD *)(v0 + 672);
    v103 = *(_QWORD *)(v0 + 584);
    v104 = *(_QWORD *)(v0 + 568);
    v105 = *(_QWORD *)(v0 + 560);
    if (*(_QWORD *)(v0 + 968))
    {
      swift_willThrow(v99);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v103, v105);
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v106 = *(_QWORD *)(v0 + 664);
      v107 = *(_QWORD *)(v0 + 656);
      v108 = *(_QWORD *)(v0 + 648);
      v109 = *(_QWORD *)(v0 + 640);
      v110 = *(_QWORD *)(v0 + 632);
      v111 = *(_QWORD *)(v0 + 624);
      v112 = *(_QWORD *)(v0 + 616);
      v113 = *(_QWORD *)(v0 + 608);
      v114 = *(_QWORD *)(v0 + 584);
      v128 = *(_QWORD *)(v0 + 576);
      v129 = *(_QWORD *)(v0 + 552);
      v131 = *(_QWORD *)(v0 + 528);
      v133 = *(_QWORD *)(v0 + 520);
      v135 = *(_QWORD *)(v0 + 512);
      v137 = *(_QWORD *)(v0 + 504);
      v139 = *(_QWORD *)(v0 + 496);
      v141 = *(_QWORD *)(v0 + 488);
      v143 = *(_QWORD *)(v0 + 480);
      v145 = *(_QWORD *)(v0 + 472);
      v147 = *(_QWORD *)(v0 + 464);
      v149 = *(_QWORD *)(v0 + 456);
      v151 = *(_QWORD *)(v0 + 448);
      v153 = *(_QWORD *)(v0 + 424);
      v156 = *(_QWORD *)(v0 + 416);
      v159 = *(_QWORD *)(v0 + 408);
      v162 = *(_QWORD *)(v0 + 400);
      v166 = *(_QWORD *)(v0 + 392);
      v170 = *(_QWORD *)(v0 + 384);
      v174 = *(_QWORD *)(v0 + 360);
      v178 = *(_QWORD *)(v0 + 352);
      v182 = *(_QWORD *)(v0 + 344);
      v185 = *(_QWORD *)(v0 + 320);
      v188 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v106);
      swift_task_dealloc(v107);
      swift_task_dealloc(v108);
      swift_task_dealloc(v109);
      swift_task_dealloc(v110);
      swift_task_dealloc(v111);
      swift_task_dealloc(v112);
      swift_task_dealloc(v113);
      swift_task_dealloc(v114);
      swift_task_dealloc(v128);
      swift_task_dealloc(v129);
      swift_task_dealloc(v131);
      swift_task_dealloc(v133);
      swift_task_dealloc(v135);
      swift_task_dealloc(v137);
      swift_task_dealloc(v139);
      swift_task_dealloc(v141);
      swift_task_dealloc(v143);
      swift_task_dealloc(v145);
      swift_task_dealloc(v147);
      swift_task_dealloc(v149);
      swift_task_dealloc(v151);
      swift_task_dealloc(v153);
      swift_task_dealloc(v156);
      swift_task_dealloc(v159);
      swift_task_dealloc(v162);
      swift_task_dealloc(v166);
      swift_task_dealloc(v170);
      swift_task_dealloc(v174);
      swift_task_dealloc(v178);
      swift_task_dealloc(v182);
      swift_task_dealloc(v185);
      swift_task_dealloc(v188);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v104 + 8))(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 560));
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v119 = *(_QWORD *)(v0 + 664);
      v120 = *(_QWORD *)(v0 + 656);
      v121 = *(_QWORD *)(v0 + 648);
      v122 = *(_QWORD *)(v0 + 640);
      v123 = *(_QWORD *)(v0 + 632);
      v124 = *(_QWORD *)(v0 + 624);
      v125 = *(_QWORD *)(v0 + 616);
      v126 = *(_QWORD *)(v0 + 608);
      v127 = *(_QWORD *)(v0 + 584);
      v130 = *(_QWORD *)(v0 + 576);
      v132 = *(_QWORD *)(v0 + 552);
      v134 = *(_QWORD *)(v0 + 528);
      v136 = *(_QWORD *)(v0 + 520);
      v138 = *(_QWORD *)(v0 + 512);
      v140 = *(_QWORD *)(v0 + 504);
      v142 = *(_QWORD *)(v0 + 496);
      v144 = *(_QWORD *)(v0 + 488);
      v146 = *(_QWORD *)(v0 + 480);
      v148 = *(_QWORD *)(v0 + 472);
      v150 = *(_QWORD *)(v0 + 464);
      v152 = *(_QWORD *)(v0 + 456);
      v154 = *(_QWORD *)(v0 + 448);
      v157 = *(_QWORD *)(v0 + 424);
      v160 = *(_QWORD *)(v0 + 416);
      v163 = *(_QWORD *)(v0 + 408);
      v167 = *(_QWORD *)(v0 + 400);
      v171 = *(_QWORD *)(v0 + 392);
      v175 = *(_QWORD *)(v0 + 384);
      v179 = *(_QWORD *)(v0 + 360);
      v183 = *(_QWORD *)(v0 + 352);
      v186 = *(_QWORD *)(v0 + 344);
      v189 = *(_QWORD *)(v0 + 320);
      v193 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v127);
      swift_task_dealloc(v130);
      swift_task_dealloc(v132);
      swift_task_dealloc(v134);
      swift_task_dealloc(v136);
      swift_task_dealloc(v138);
      swift_task_dealloc(v140);
      swift_task_dealloc(v142);
      swift_task_dealloc(v144);
      swift_task_dealloc(v146);
      swift_task_dealloc(v148);
      swift_task_dealloc(v150);
      swift_task_dealloc(v152);
      swift_task_dealloc(v154);
      swift_task_dealloc(v157);
      swift_task_dealloc(v160);
      swift_task_dealloc(v163);
      swift_task_dealloc(v167);
      swift_task_dealloc(v171);
      swift_task_dealloc(v175);
      swift_task_dealloc(v179);
      swift_task_dealloc(v183);
      swift_task_dealloc(v186);
      swift_task_dealloc(v189);
      swift_task_dealloc(v193);
    }
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10007C6F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1080);
  *(_QWORD *)(*(_QWORD *)v1 + 1088) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[128];
    v5 = v2[122];
    (*(void (**)(_QWORD, _QWORD))(v2[42] + 8))(v2[44], v2[41]);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    v6 = v2[96];
    v7 = v2[95];
    v8 = sub_10008DD90;
  }
  else
  {
    v9 = v2[44];
    v10 = v2[41];
    v11 = *(void (**)(uint64_t, uint64_t))(v2[42] + 8);
    v2[137] = v11;
    v11(v9, v10);
    v6 = v2[96];
    v7 = v2[95];
    v8 = sub_10007C7A8;
  }
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_10007C7A8()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  os_log_type_t type;
  uint64_t v46;
  NSObject *log;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  _QWORD *v51;
  unint64_t *v52;
  uint64_t v53[2];

  v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[131];
  v2 = v0[58];
  v3 = v0[56];
  v4 = v0[54];
  v5 = SyncedPhotosFace.photos.getter(v4);
  v6 = sub_10004F36C(v5);
  swift_bridgeObjectRelease(v5);
  v7 = SyncedPhotosFace.cached.getter(v4);
  v53[0] = (uint64_t)v6;
  v8 = sub_100017970(v7);
  v0[138] = v6;
  static Log.photos.getter(v8);
  v1(v3, v2, v4);
  v9 = swift_bridgeObjectRetain_n(v6, 3);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  v52 = v6;
  if (os_log_type_enabled(v10, v11))
  {
    v41 = (void (*)(uint64_t, uint64_t))v0[137];
    v42 = (void (*)(uint64_t, uint64_t))v0[134];
    v40 = v0[123];
    v50 = (void (*)(uint64_t, uint64_t))v0[105];
    v48 = v0[74];
    v49 = v0[78];
    v39 = v0[56];
    v13 = v0[53];
    v12 = v0[54];
    log = v10;
    v14 = v0[45];
    v43 = v0[46];
    v44 = v0[47];
    v15 = v0[41];
    v16 = swift_slowAlloc(32, -1);
    v46 = swift_slowAlloc(64, -1);
    *(_DWORD *)v16 = 134218498;
    v0[16] = v6[2];
    v51 = v0 + 105;
    v53[0] = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v6);
    *(_WORD *)(v16 + 12) = 2080;
    type = v11;
    SyncedPhotosFace.id.getter(v12);
    dispatch thunk of PhotosFaceID.id.getter(v15, v40);
    v41(v14, v15);
    v42(v39, v12);
    v17 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v43, v17);
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v13, v43);
    v0[17] = sub_100021438(v18, v20, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v16 + 22) = 2080;
    swift_bridgeObjectRetain(v6);
    v22 = Array.description.getter(v21, v43);
    v24 = v23;
    swift_bridgeObjectRelease(v6);
    v0[18] = sub_100021438(v22, v24, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v16 + 24, v16 + 32);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Relating photos %ld for face %s, photos = %s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v50(v49, v48);
  }
  else
  {
    v51 = v0 + 132;
    v25 = (void (*)(uint64_t, uint64_t))v0[132];
    v26 = v0[78];
    v27 = v0[74];
    ((void (*)(_QWORD, _QWORD))v0[134])(v0[56], v0[54]);
    swift_bridgeObjectRelease_n(v6, 3);

    v25(v26, v27);
  }
  v0[139] = *v51;
  v28 = (void (*)(uint64_t, uint64_t))v0[137];
  v29 = v0[123];
  v30 = v0[54];
  v31 = v0[43];
  v32 = v0[41];
  v33 = *(_QWORD *)(v0[36] + 80);
  v0[15] = v33;
  swift_retain(v33);
  SyncedPhotosFace.id.getter(v30);
  dispatch thunk of PhotosFaceID.id.getter(v32, v29);
  v28(v31, v32);
  v34 = SyncedPhotosFace.day.getter(v30);
  if ((v35 & 1) != 0)
    v36 = 0;
  else
    v36 = v34;
  v37 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)[1]);
  v0[140] = v37;
  *v37 = v0;
  v37[1] = sub_10007CC10;
  return dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)(v52, v0[52], v36, v0[89], v0[90]);
}

uint64_t sub_10007CC10()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1120);
  *(_QWORD *)(*(_QWORD *)v1 + 1128) = v0;
  swift_task_dealloc(v3);
  v4 = v2[138];
  if (v0)
  {
    v5 = v2[128];
    v6 = v2[122];
    v7 = v2[52];
    v8 = v2[46];
    v9 = v2[47];
    swift_bridgeObjectRelease(v4);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_release(v2[15]);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    v10 = v2[96];
    v11 = v2[95];
    v12 = sub_10008DD88;
  }
  else
  {
    v13 = v2[52];
    v14 = v2[46];
    v15 = v2[47];
    swift_bridgeObjectRelease(v4);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    swift_release(v2[15]);
    v10 = v2[96];
    v11 = v2[95];
    v12 = sub_10007CCF0;
  }
  return swift_task_switch(v12, v11, v10);
}

uint64_t sub_10007CCF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t (*v22)(unint64_t, unint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[3];

  v1 = *(_QWORD *)(v0 + 1032);
  v2 = *(_QWORD *)(v0 + 1064) + 1;
  (*(void (**)(_QWORD, _QWORD))(v0 + 1072))(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 432));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1024));
    v3 = *(_QWORD *)(v0 + 704);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 976));
    v4 = swift_release(v3);
    if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
      v4 = sub_100022934(*(unsigned __int8 *)(v0 + 1248));
    v5 = *(_QWORD *)(v0 + 688);
    v6 = *(_QWORD *)(v0 + 680);
    v7 = *(_QWORD *)(v0 + 672);
    v8 = *(_QWORD *)(v0 + 584);
    v9 = *(_QWORD *)(v0 + 568);
    v10 = *(_QWORD *)(v0 + 560);
    if (*(_QWORD *)(v0 + 968))
    {
      swift_willThrow(v4);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v11 = *(_QWORD *)(v0 + 664);
      v12 = *(_QWORD *)(v0 + 656);
      v13 = *(_QWORD *)(v0 + 648);
      v14 = *(_QWORD *)(v0 + 640);
      v15 = *(_QWORD *)(v0 + 632);
      v16 = *(_QWORD *)(v0 + 624);
      v17 = *(_QWORD *)(v0 + 616);
      v18 = *(_QWORD *)(v0 + 608);
      v19 = *(_QWORD *)(v0 + 584);
      v58 = *(_QWORD *)(v0 + 576);
      v59 = *(_QWORD *)(v0 + 552);
      v61 = *(_QWORD *)(v0 + 528);
      v63 = *(_QWORD *)(v0 + 520);
      v65 = *(_QWORD *)(v0 + 512);
      v67 = *(_QWORD *)(v0 + 504);
      v69 = *(_QWORD *)(v0 + 496);
      v71 = *(_QWORD *)(v0 + 488);
      v73 = *(_QWORD *)(v0 + 480);
      v75 = *(_QWORD *)(v0 + 472);
      v77 = *(_QWORD *)(v0 + 464);
      v79 = *(_QWORD *)(v0 + 456);
      v81 = *(_QWORD *)(v0 + 448);
      v83 = *(_QWORD *)(v0 + 424);
      v85 = *(_QWORD *)(v0 + 416);
      v88 = *(_QWORD *)(v0 + 408);
      v90 = *(_QWORD *)(v0 + 400);
      v92 = *(_QWORD *)(v0 + 392);
      v95 = *(_QWORD *)(v0 + 384);
      v98 = *(_QWORD *)(v0 + 360);
      v101 = *(_QWORD *)(v0 + 352);
      v103 = *(_QWORD *)(v0 + 344);
      v106 = *(_QWORD *)(v0 + 320);
      v109 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v61);
      swift_task_dealloc(v63);
      swift_task_dealloc(v65);
      swift_task_dealloc(v67);
      swift_task_dealloc(v69);
      swift_task_dealloc(v71);
      swift_task_dealloc(v73);
      swift_task_dealloc(v75);
      swift_task_dealloc(v77);
      swift_task_dealloc(v79);
      swift_task_dealloc(v81);
      swift_task_dealloc(v83);
      swift_task_dealloc(v85);
      swift_task_dealloc(v88);
      swift_task_dealloc(v90);
      swift_task_dealloc(v92);
      swift_task_dealloc(v95);
      swift_task_dealloc(v98);
      swift_task_dealloc(v101);
      swift_task_dealloc(v103);
      swift_task_dealloc(v106);
      swift_task_dealloc(v109);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v9 + 8))(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 560));
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v49 = *(_QWORD *)(v0 + 664);
      v50 = *(_QWORD *)(v0 + 656);
      v51 = *(_QWORD *)(v0 + 648);
      v52 = *(_QWORD *)(v0 + 640);
      v53 = *(_QWORD *)(v0 + 632);
      v54 = *(_QWORD *)(v0 + 624);
      v55 = *(_QWORD *)(v0 + 616);
      v56 = *(_QWORD *)(v0 + 608);
      v57 = *(_QWORD *)(v0 + 584);
      v60 = *(_QWORD *)(v0 + 576);
      v62 = *(_QWORD *)(v0 + 552);
      v64 = *(_QWORD *)(v0 + 528);
      v66 = *(_QWORD *)(v0 + 520);
      v68 = *(_QWORD *)(v0 + 512);
      v70 = *(_QWORD *)(v0 + 504);
      v72 = *(_QWORD *)(v0 + 496);
      v74 = *(_QWORD *)(v0 + 488);
      v76 = *(_QWORD *)(v0 + 480);
      v78 = *(_QWORD *)(v0 + 472);
      v80 = *(_QWORD *)(v0 + 464);
      v82 = *(_QWORD *)(v0 + 456);
      v84 = *(_QWORD *)(v0 + 448);
      v87 = *(_QWORD *)(v0 + 424);
      v89 = *(_QWORD *)(v0 + 416);
      v91 = *(_QWORD *)(v0 + 408);
      v94 = *(_QWORD *)(v0 + 400);
      v97 = *(_QWORD *)(v0 + 392);
      v100 = *(_QWORD *)(v0 + 384);
      v102 = *(_QWORD *)(v0 + 360);
      v105 = *(_QWORD *)(v0 + 352);
      v108 = *(_QWORD *)(v0 + 344);
      v111 = *(_QWORD *)(v0 + 320);
      v113 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v60);
      swift_task_dealloc(v62);
      swift_task_dealloc(v64);
      swift_task_dealloc(v66);
      swift_task_dealloc(v68);
      swift_task_dealloc(v70);
      swift_task_dealloc(v72);
      swift_task_dealloc(v74);
      swift_task_dealloc(v76);
      swift_task_dealloc(v78);
      swift_task_dealloc(v80);
      swift_task_dealloc(v82);
      swift_task_dealloc(v84);
      swift_task_dealloc(v87);
      swift_task_dealloc(v89);
      swift_task_dealloc(v91);
      swift_task_dealloc(v94);
      swift_task_dealloc(v97);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v105);
      swift_task_dealloc(v108);
      swift_task_dealloc(v111);
      swift_task_dealloc(v113);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 1112);
    v21 = *(_QWORD *)(v0 + 1064) + 1;
    *(_QWORD *)(v0 + 1064) = v21;
    *(_QWORD *)(v0 + 1056) = v20;
    v22 = *(uint64_t (**)(unint64_t, unint64_t, uint64_t))(v0 + 1048);
    v24 = *(_QWORD *)(v0 + 456);
    v23 = *(_QWORD *)(v0 + 464);
    v25 = *(_QWORD *)(v0 + 432);
    v26 = *(_QWORD *)(v0 + 288);
    v27 = v22(v23, *(_QWORD *)(v0 + 1024)+ ((*(unsigned __int8 *)(v0 + 1244) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1244))+ *(_QWORD *)(v0 + 1040) * v21, v25);
    static Log.photos.getter(v27);
    v22(v24, v23, v25);
    v28 = swift_retain(v26);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v112 = *(_QWORD *)(v0 + 632);
      v110 = *(_QWORD *)(v0 + 592);
      v31 = *(_QWORD *)(v0 + 456);
      v32 = *(_QWORD *)(v0 + 432);
      v93 = *(_QWORD *)(v0 + 440);
      v33 = *(_QWORD *)(v0 + 360);
      v99 = *(_QWORD *)(v0 + 336);
      v96 = *(_QWORD *)(v0 + 328);
      v86 = *(_QWORD *)(v0 + 288);
      v34 = *(unsigned __int8 *)(v0 + 1248);
      v35 = swift_slowAlloc(22, -1);
      v104 = swift_slowAlloc(64, -1);
      v114[0] = v104;
      *(_DWORD *)v35 = 136315394;
      v107 = v20;
      v36 = PhotosFaceType.description.getter(v34);
      v38 = v37;
      *(_QWORD *)(v0 + 152) = sub_100021438(v36, v37, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v38);
      swift_release(v86);
      *(_WORD *)(v35 + 12) = 2080;
      SyncedPhotosFace.id.getter(v32);
      v39 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
      v39(v31, v32);
      v40 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v96, v40);
      v43 = v42;
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v33, v96);
      *(_QWORD *)(v0 + 160) = sub_100021438(v41, v43, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Inserting face, type = %s: %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v104, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v104, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      v107(v112, v110);
    }
    else
    {
      v44 = *(_QWORD *)(v0 + 632);
      v45 = *(_QWORD *)(v0 + 592);
      v46 = *(_QWORD *)(v0 + 288);
      v39 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
      v39(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
      swift_release(v46);

      v20(v44, v45);
    }
    *(_QWORD *)(v0 + 1072) = v39;
    SyncedPhotosFace.id.getter(*(_QWORD *)(v0 + 432));
    v47 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
    *(_QWORD *)(v0 + 1080) = v47;
    *v47 = v0;
    v47[1] = sub_10007C6F8;
    return dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
  }
}

uint64_t sub_10007D4BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1176);
  *(_QWORD *)(*v1 + 1184) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10007DFB4;
  else
    v4 = sub_10007D520;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 760), *(_QWORD *)(v2 + 768));
}

uint64_t sub_10007D520(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  os_log_type_t v23;
  uint64_t *v24;
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153[3];

  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 1016);
  v4 = *(_QWORD *)(v1 + 400);
  v3 = *(_QWORD *)(v1 + 408);
  v5 = *(_QWORD *)(v1 + 368);
  static Log.photos.getter(a1);
  v6 = v2(v4, v3, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v1 + 616);
  v11 = *(_QWORD *)(v1 + 592);
  v12 = *(_QWORD *)(v1 + 400);
  v13 = *(_QWORD *)(v1 + 408);
  v14 = *(_QWORD *)(v1 + 368);
  v15 = *(_QWORD *)(v1 + 376);
  if (v9)
  {
    v150 = *(void (**)(uint64_t, uint64_t))(v1 + 840);
    v146 = *(_QWORD *)(v1 + 408);
    v16 = swift_slowAlloc(12, -1);
    v142 = v10;
    v17 = swift_slowAlloc(32, -1);
    v153[0] = v17;
    *(_DWORD *)v16 = 136315138;
    v18 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v14, v18);
    v21 = v20;
    *(_QWORD *)(v16 + 4) = sub_100021438(v19, v20, v153);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v12, v14);
    v23 = v8;
    v24 = (uint64_t *)(v1 + 840);
    _os_log_impl((void *)&_mh_execute_header, v7, v23, "Cleared photos for: %s", (uint8_t *)v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v150(v142, v11);
    v22(v146, v14);
  }
  else
  {
    v24 = (uint64_t *)(v1 + 1136);
    v25 = *(void (**)(uint64_t, uint64_t))(v1 + 1136);

    v26 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v26(v12, v14);
    v25(v10, v11);
    v26(v13, v14);
  }
  v27 = *(_QWORD *)(v1 + 1160) + 1;
  if (v27 == *(_QWORD *)(v1 + 1000))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1 + 1168))(*(_QWORD *)(v1 + 320), 1, 1, *(_QWORD *)(v1 + 368));
  }
  else
  {
    v28 = *v24;
    *(_QWORD *)(v1 + 1160) = v27;
    *(_QWORD *)(v1 + 1152) = v28;
    *(_QWORD *)(v1 + 1144) = v28;
    *(_QWORD *)(v1 + 1136) = v28;
    v29 = *(_QWORD *)(v1 + 368);
    v30 = *(_QWORD *)(v1 + 376);
    v31 = *(_QWORD *)(v1 + 320);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 1016))(v31, *(_QWORD *)(v1 + 992)+ ((*(unsigned __int8 *)(v1 + 1240) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 1240))+ *(_QWORD *)(v1 + 1008) * v27, v29);
    v32 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56);
    *(_QWORD *)(v1 + 1168) = v32;
    v32(v31, 0, 1, v29);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v29) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 376) + 32))(*(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 368));
      v79 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
      *(_QWORD *)(v1 + 1176) = v79;
      *v79 = v1;
      v79[1] = sub_10007D4BC;
      return dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 712), *(_QWORD *)(v1 + 720));
    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 992));
  v33 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 1024) = v33;
  v34 = *(_QWORD *)(v33 + 16);
  *(_QWORD *)(v1 + 1032) = v34;
  if (v34)
  {
    v36 = *(_QWORD *)(v1 + 432);
    v35 = *(_QWORD *)(v1 + 440);
    v37 = *(_DWORD *)(v35 + 80);
    *(_DWORD *)(v1 + 1244) = v37;
    *(_QWORD *)(v1 + 1040) = *(_QWORD *)(v35 + 72);
    v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v35 + 16);
    *(_QWORD *)(v1 + 1048) = v38;
    v39 = *(void (**)(uint64_t, uint64_t))(v1 + 840);
    *(_QWORD *)(v1 + 1064) = 0;
    *(_QWORD *)(v1 + 1056) = v39;
    v41 = *(_QWORD *)(v1 + 456);
    v40 = *(_QWORD *)(v1 + 464);
    v42 = *(_QWORD *)(v1 + 288);
    v43 = v33 + ((v37 + 32) & ~(unint64_t)v37);
    v44 = swift_bridgeObjectRetain(v33);
    v45 = v38(v40, v43, v36, v44);
    static Log.photos.getter(v45);
    ((void (*)(uint64_t, uint64_t, uint64_t))v38)(v41, v40, v36);
    v46 = swift_retain(v42);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v151 = *(_QWORD *)(v1 + 632);
      v147 = *(_QWORD *)(v1 + 592);
      v49 = *(_QWORD *)(v1 + 456);
      v128 = *(_QWORD *)(v1 + 440);
      v143 = v39;
      v50 = *(_QWORD *)(v1 + 432);
      v51 = *(_QWORD *)(v1 + 360);
      v134 = *(_QWORD *)(v1 + 336);
      v131 = *(_QWORD *)(v1 + 328);
      v121 = *(_QWORD *)(v1 + 288);
      v52 = *(unsigned __int8 *)(v1 + 1248);
      v53 = swift_slowAlloc(22, -1);
      v137 = swift_slowAlloc(64, -1);
      v153[0] = v137;
      *(_DWORD *)v53 = 136315394;
      v54 = PhotosFaceType.description.getter(v52);
      v56 = v55;
      *(_QWORD *)(v1 + 152) = sub_100021438(v54, v55, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v53 + 4, v53 + 12);
      swift_release(v121);
      swift_bridgeObjectRelease(v56);
      *(_WORD *)(v53 + 12) = 2080;
      SyncedPhotosFace.id.getter(v50);
      v57 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
      v57(v49, v50);
      v58 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v131, v58);
      v61 = v60;
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v51, v131);
      *(_QWORD *)(v1 + 160) = sub_100021438(v59, v61, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v53 + 14, v53 + 22);
      swift_bridgeObjectRelease(v61);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Inserting face, type = %s: %s", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy(v137, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v137, -1, -1);
      swift_slowDealloc(v53, -1, -1);

      v143(v151, v147);
    }
    else
    {
      v81 = *(_QWORD *)(v1 + 632);
      v82 = *(_QWORD *)(v1 + 592);
      v83 = *(_QWORD *)(v1 + 288);
      v57 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 440) + 8);
      v57(*(_QWORD *)(v1 + 456), *(_QWORD *)(v1 + 432));

      swift_release(v83);
      v39(v81, v82);
    }
    *(_QWORD *)(v1 + 1072) = v57;
    SyncedPhotosFace.id.getter(*(_QWORD *)(v1 + 432));
    v84 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
    *(_QWORD *)(v1 + 1080) = v84;
    *v84 = v1;
    v84[1] = sub_10007C6F8;
    return dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v1 + 352), *(_QWORD *)(v1 + 712), *(_QWORD *)(v1 + 720));
  }
  else
  {
    v62 = *(_QWORD *)(v1 + 976);
    swift_release(*(_QWORD *)(v1 + 704));
    v63 = swift_bridgeObjectRelease(v62);
    if (*(_QWORD *)(*(_QWORD *)(v1 + 88) + 16))
      v63 = sub_100022934(*(unsigned __int8 *)(v1 + 1248));
    v64 = *(_QWORD *)(v1 + 688);
    v65 = *(_QWORD *)(v1 + 680);
    v66 = *(_QWORD *)(v1 + 672);
    v67 = *(_QWORD *)(v1 + 584);
    v68 = *(_QWORD *)(v1 + 568);
    v69 = *(_QWORD *)(v1 + 560);
    if (*(_QWORD *)(v1 + 968))
    {
      swift_willThrow(v63);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
      v70 = *(_QWORD *)(v1 + 664);
      v71 = *(_QWORD *)(v1 + 656);
      v72 = *(_QWORD *)(v1 + 648);
      v73 = *(_QWORD *)(v1 + 640);
      v74 = *(_QWORD *)(v1 + 632);
      v75 = *(_QWORD *)(v1 + 624);
      v76 = *(_QWORD *)(v1 + 616);
      v77 = *(_QWORD *)(v1 + 608);
      v78 = *(_QWORD *)(v1 + 584);
      v94 = *(_QWORD *)(v1 + 576);
      v95 = *(_QWORD *)(v1 + 552);
      v97 = *(_QWORD *)(v1 + 528);
      v99 = *(_QWORD *)(v1 + 520);
      v101 = *(_QWORD *)(v1 + 512);
      v103 = *(_QWORD *)(v1 + 504);
      v105 = *(_QWORD *)(v1 + 496);
      v107 = *(_QWORD *)(v1 + 488);
      v109 = *(_QWORD *)(v1 + 480);
      v111 = *(_QWORD *)(v1 + 472);
      v113 = *(_QWORD *)(v1 + 464);
      v115 = *(_QWORD *)(v1 + 456);
      v117 = *(_QWORD *)(v1 + 448);
      v119 = *(_QWORD *)(v1 + 424);
      v122 = *(_QWORD *)(v1 + 416);
      v124 = *(_QWORD *)(v1 + 408);
      v126 = *(_QWORD *)(v1 + 400);
      v129 = *(_QWORD *)(v1 + 392);
      v132 = *(_QWORD *)(v1 + 384);
      v135 = *(_QWORD *)(v1 + 360);
      v138 = *(_QWORD *)(v1 + 352);
      v140 = *(_QWORD *)(v1 + 344);
      v144 = *(_QWORD *)(v1 + 320);
      v148 = *(_QWORD *)(v1 + 312);
      swift_task_dealloc(*(_QWORD *)(v1 + 688));
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v94);
      swift_task_dealloc(v95);
      swift_task_dealloc(v97);
      swift_task_dealloc(v99);
      swift_task_dealloc(v101);
      swift_task_dealloc(v103);
      swift_task_dealloc(v105);
      swift_task_dealloc(v107);
      swift_task_dealloc(v109);
      swift_task_dealloc(v111);
      swift_task_dealloc(v113);
      swift_task_dealloc(v115);
      swift_task_dealloc(v117);
      swift_task_dealloc(v119);
      swift_task_dealloc(v122);
      swift_task_dealloc(v124);
      swift_task_dealloc(v126);
      swift_task_dealloc(v129);
      swift_task_dealloc(v132);
      swift_task_dealloc(v135);
      swift_task_dealloc(v138);
      swift_task_dealloc(v140);
      swift_task_dealloc(v144);
      swift_task_dealloc(v148);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v68 + 8))(*(_QWORD *)(v1 + 584), *(_QWORD *)(v1 + 560));
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
      v85 = *(_QWORD *)(v1 + 664);
      v86 = *(_QWORD *)(v1 + 656);
      v87 = *(_QWORD *)(v1 + 648);
      v88 = *(_QWORD *)(v1 + 640);
      v89 = *(_QWORD *)(v1 + 632);
      v90 = *(_QWORD *)(v1 + 624);
      v91 = *(_QWORD *)(v1 + 616);
      v92 = *(_QWORD *)(v1 + 608);
      v93 = *(_QWORD *)(v1 + 584);
      v96 = *(_QWORD *)(v1 + 576);
      v98 = *(_QWORD *)(v1 + 552);
      v100 = *(_QWORD *)(v1 + 528);
      v102 = *(_QWORD *)(v1 + 520);
      v104 = *(_QWORD *)(v1 + 512);
      v106 = *(_QWORD *)(v1 + 504);
      v108 = *(_QWORD *)(v1 + 496);
      v110 = *(_QWORD *)(v1 + 488);
      v112 = *(_QWORD *)(v1 + 480);
      v114 = *(_QWORD *)(v1 + 472);
      v116 = *(_QWORD *)(v1 + 464);
      v118 = *(_QWORD *)(v1 + 456);
      v120 = *(_QWORD *)(v1 + 448);
      v123 = *(_QWORD *)(v1 + 424);
      v125 = *(_QWORD *)(v1 + 416);
      v127 = *(_QWORD *)(v1 + 408);
      v130 = *(_QWORD *)(v1 + 400);
      v133 = *(_QWORD *)(v1 + 392);
      v136 = *(_QWORD *)(v1 + 384);
      v139 = *(_QWORD *)(v1 + 360);
      v141 = *(_QWORD *)(v1 + 352);
      v145 = *(_QWORD *)(v1 + 344);
      v149 = *(_QWORD *)(v1 + 320);
      v152 = *(_QWORD *)(v1 + 312);
      swift_task_dealloc(*(_QWORD *)(v1 + 688));
      swift_task_dealloc(v85);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v88);
      swift_task_dealloc(v89);
      swift_task_dealloc(v90);
      swift_task_dealloc(v91);
      swift_task_dealloc(v92);
      swift_task_dealloc(v93);
      swift_task_dealloc(v96);
      swift_task_dealloc(v98);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v104);
      swift_task_dealloc(v106);
      swift_task_dealloc(v108);
      swift_task_dealloc(v110);
      swift_task_dealloc(v112);
      swift_task_dealloc(v114);
      swift_task_dealloc(v116);
      swift_task_dealloc(v118);
      swift_task_dealloc(v120);
      swift_task_dealloc(v123);
      swift_task_dealloc(v125);
      swift_task_dealloc(v127);
      swift_task_dealloc(v130);
      swift_task_dealloc(v133);
      swift_task_dealloc(v136);
      swift_task_dealloc(v139);
      swift_task_dealloc(v141);
      swift_task_dealloc(v145);
      swift_task_dealloc(v149);
      swift_task_dealloc(v152);
    }
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10007DFB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158[3];

  v2 = *(_QWORD *)(v1 + 1184);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 1016);
  v4 = *(_QWORD *)(v1 + 408);
  v5 = *(_QWORD *)(v1 + 392);
  v6 = *(_QWORD *)(v1 + 368);
  static Log.photos.getter(a1);
  v3(v5, v4, v6);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v1 + 1184);
  v12 = *(_QWORD *)(v1 + 608);
  v13 = *(_QWORD *)(v1 + 408);
  v14 = *(_QWORD *)(v1 + 392);
  v16 = *(_QWORD *)(v1 + 368);
  v15 = *(_QWORD *)(v1 + 376);
  if (v10)
  {
    v151 = *(_QWORD *)(v1 + 592);
    v155 = *(void (**)(uint64_t, uint64_t))(v1 + 1144);
    v147 = *(_QWORD *)(v1 + 608);
    v17 = swift_slowAlloc(22, -1);
    v18 = (uint64_t *)swift_slowAlloc(8, -1);
    v140 = swift_slowAlloc(32, -1);
    v158[0] = v140;
    *(_DWORD *)v17 = 136315394;
    v19 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
    v144 = v13;
    v22 = v21;
    *(_QWORD *)(v17 + 4) = sub_100021438(v20, v21, v158);
    swift_bridgeObjectRelease(v22);
    v23 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v23(v14, v16);
    *(_WORD *)(v17 + 12) = 2112;
    swift_errorRetain(v11);
    v24 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v17 + 14) = v24;
    *v18 = v24;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to clear photos for face %s: %@", (uint8_t *)v17, 0x16u);
    v25 = sub_10000629C(&qword_1000B20C0);
    swift_arrayDestroy(v18, 1, v25);
    swift_slowDealloc(v18, -1, -1);
    swift_arrayDestroy(v140, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v140, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    swift_errorRelease(v11);
    v155(v147, v151);
    v23(v144, v16);
    v26 = *(_QWORD *)(v1 + 1144);
    v27 = v26;
  }
  else
  {
    v28 = *(void (**)(uint64_t, uint64_t))(v1 + 1152);
    v29 = *(_QWORD *)(v1 + 592);

    swift_errorRelease(v11);
    swift_errorRelease(v11);
    v30 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v30(v14, v16);
    swift_errorRelease(v11);
    v28(v12, v29);
    v30(v13, v16);
    v27 = *(_QWORD *)(v1 + 1152);
    v26 = *(_QWORD *)(v1 + 1144);
  }
  v31 = *(_QWORD *)(v1 + 1160) + 1;
  if (v31 == *(_QWORD *)(v1 + 1000))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1 + 1168))(*(_QWORD *)(v1 + 320), 1, 1, *(_QWORD *)(v1 + 368));
  }
  else
  {
    *(_QWORD *)(v1 + 1160) = v31;
    *(_QWORD *)(v1 + 1152) = v27;
    *(_QWORD *)(v1 + 1144) = v26;
    v32 = *(_QWORD *)(v1 + 368);
    v33 = *(_QWORD *)(v1 + 376);
    v34 = *(_QWORD *)(v1 + 320);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 1016))(v34, *(_QWORD *)(v1 + 992)+ ((*(unsigned __int8 *)(v1 + 1240) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 1240))+ *(_QWORD *)(v1 + 1008) * v31, v32);
    v35 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56);
    *(_QWORD *)(v1 + 1168) = v35;
    v35(v34, 0, 1, v32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1, v32) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 376) + 32))(*(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 368));
      v82 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
      *(_QWORD *)(v1 + 1176) = v82;
      *v82 = v1;
      v82[1] = sub_10007D4BC;
      return dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 712), *(_QWORD *)(v1 + 720));
    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 992));
  v36 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 1024) = v36;
  v37 = *(_QWORD *)(v36 + 16);
  *(_QWORD *)(v1 + 1032) = v37;
  if (v37)
  {
    v39 = *(_QWORD *)(v1 + 432);
    v38 = *(_QWORD *)(v1 + 440);
    v40 = *(_DWORD *)(v38 + 80);
    *(_DWORD *)(v1 + 1244) = v40;
    *(_QWORD *)(v1 + 1040) = *(_QWORD *)(v38 + 72);
    v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v38 + 16);
    *(_QWORD *)(v1 + 1048) = v41;
    v42 = *(void (**)(uint64_t, uint64_t))(v1 + 840);
    *(_QWORD *)(v1 + 1064) = 0;
    *(_QWORD *)(v1 + 1056) = v42;
    v44 = *(_QWORD *)(v1 + 456);
    v43 = *(_QWORD *)(v1 + 464);
    v45 = *(_QWORD *)(v1 + 288);
    v46 = v36 + ((v40 + 32) & ~(unint64_t)v40);
    v47 = swift_bridgeObjectRetain(v36);
    v48 = v41(v43, v46, v39, v47);
    static Log.photos.getter(v48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v41)(v44, v43, v39);
    v49 = swift_retain(v45);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v156 = *(_QWORD *)(v1 + 632);
      v152 = *(_QWORD *)(v1 + 592);
      v52 = *(_QWORD *)(v1 + 456);
      v131 = *(_QWORD *)(v1 + 440);
      v148 = v42;
      v53 = *(_QWORD *)(v1 + 432);
      v54 = *(_QWORD *)(v1 + 360);
      v137 = *(_QWORD *)(v1 + 336);
      v134 = *(_QWORD *)(v1 + 328);
      v124 = *(_QWORD *)(v1 + 288);
      v55 = *(unsigned __int8 *)(v1 + 1248);
      v56 = swift_slowAlloc(22, -1);
      v141 = swift_slowAlloc(64, -1);
      v158[0] = v141;
      *(_DWORD *)v56 = 136315394;
      v57 = PhotosFaceType.description.getter(v55);
      v59 = v58;
      *(_QWORD *)(v1 + 152) = sub_100021438(v57, v58, v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v56 + 4, v56 + 12);
      swift_release(v124);
      swift_bridgeObjectRelease(v59);
      *(_WORD *)(v56 + 12) = 2080;
      SyncedPhotosFace.id.getter(v53);
      v60 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
      v60(v52, v53);
      v61 = sub_100009174(&qword_1000B2B30, (uint64_t (*)(uint64_t))&type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
      v62 = dispatch thunk of CustomStringConvertible.description.getter(v134, v61);
      v64 = v63;
      (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v54, v134);
      *(_QWORD *)(v1 + 160) = sub_100021438(v62, v64, v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v56 + 14, v56 + 22);
      swift_bridgeObjectRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Inserting face, type = %s: %s", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy(v141, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v141, -1, -1);
      swift_slowDealloc(v56, -1, -1);

      v148(v156, v152);
    }
    else
    {
      v84 = *(_QWORD *)(v1 + 632);
      v85 = *(_QWORD *)(v1 + 592);
      v86 = *(_QWORD *)(v1 + 288);
      v60 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 440) + 8);
      v60(*(_QWORD *)(v1 + 456), *(_QWORD *)(v1 + 432));

      swift_release(v86);
      v42(v84, v85);
    }
    *(_QWORD *)(v1 + 1072) = v60;
    SyncedPhotosFace.id.getter(*(_QWORD *)(v1 + 432));
    v87 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
    *(_QWORD *)(v1 + 1080) = v87;
    *v87 = v1;
    v87[1] = sub_10007C6F8;
    return dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v1 + 352), *(_QWORD *)(v1 + 712), *(_QWORD *)(v1 + 720));
  }
  else
  {
    v65 = *(_QWORD *)(v1 + 976);
    swift_release(*(_QWORD *)(v1 + 704));
    v66 = swift_bridgeObjectRelease(v65);
    if (*(_QWORD *)(*(_QWORD *)(v1 + 88) + 16))
      v66 = sub_100022934(*(unsigned __int8 *)(v1 + 1248));
    v67 = *(_QWORD *)(v1 + 688);
    v68 = *(_QWORD *)(v1 + 680);
    v69 = *(_QWORD *)(v1 + 672);
    v70 = *(_QWORD *)(v1 + 584);
    v71 = *(_QWORD *)(v1 + 568);
    v72 = *(_QWORD *)(v1 + 560);
    if (*(_QWORD *)(v1 + 968))
    {
      swift_willThrow(v66);
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
      v73 = *(_QWORD *)(v1 + 664);
      v74 = *(_QWORD *)(v1 + 656);
      v75 = *(_QWORD *)(v1 + 648);
      v76 = *(_QWORD *)(v1 + 640);
      v77 = *(_QWORD *)(v1 + 632);
      v78 = *(_QWORD *)(v1 + 624);
      v79 = *(_QWORD *)(v1 + 616);
      v80 = *(_QWORD *)(v1 + 608);
      v81 = *(_QWORD *)(v1 + 584);
      v97 = *(_QWORD *)(v1 + 576);
      v98 = *(_QWORD *)(v1 + 552);
      v100 = *(_QWORD *)(v1 + 528);
      v102 = *(_QWORD *)(v1 + 520);
      v104 = *(_QWORD *)(v1 + 512);
      v106 = *(_QWORD *)(v1 + 504);
      v108 = *(_QWORD *)(v1 + 496);
      v110 = *(_QWORD *)(v1 + 488);
      v112 = *(_QWORD *)(v1 + 480);
      v114 = *(_QWORD *)(v1 + 472);
      v116 = *(_QWORD *)(v1 + 464);
      v118 = *(_QWORD *)(v1 + 456);
      v120 = *(_QWORD *)(v1 + 448);
      v122 = *(_QWORD *)(v1 + 424);
      v125 = *(_QWORD *)(v1 + 416);
      v127 = *(_QWORD *)(v1 + 408);
      v129 = *(_QWORD *)(v1 + 400);
      v132 = *(_QWORD *)(v1 + 392);
      v135 = *(_QWORD *)(v1 + 384);
      v138 = *(_QWORD *)(v1 + 360);
      v142 = *(_QWORD *)(v1 + 352);
      v145 = *(_QWORD *)(v1 + 344);
      v149 = *(_QWORD *)(v1 + 320);
      v153 = *(_QWORD *)(v1 + 312);
      swift_task_dealloc(*(_QWORD *)(v1 + 688));
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v79);
      swift_task_dealloc(v80);
      swift_task_dealloc(v81);
      swift_task_dealloc(v97);
      swift_task_dealloc(v98);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v104);
      swift_task_dealloc(v106);
      swift_task_dealloc(v108);
      swift_task_dealloc(v110);
      swift_task_dealloc(v112);
      swift_task_dealloc(v114);
      swift_task_dealloc(v116);
      swift_task_dealloc(v118);
      swift_task_dealloc(v120);
      swift_task_dealloc(v122);
      swift_task_dealloc(v125);
      swift_task_dealloc(v127);
      swift_task_dealloc(v129);
      swift_task_dealloc(v132);
      swift_task_dealloc(v135);
      swift_task_dealloc(v138);
      swift_task_dealloc(v142);
      swift_task_dealloc(v145);
      swift_task_dealloc(v149);
      swift_task_dealloc(v153);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v71 + 8))(*(_QWORD *)(v1 + 584), *(_QWORD *)(v1 + 560));
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
      v88 = *(_QWORD *)(v1 + 664);
      v89 = *(_QWORD *)(v1 + 656);
      v90 = *(_QWORD *)(v1 + 648);
      v91 = *(_QWORD *)(v1 + 640);
      v92 = *(_QWORD *)(v1 + 632);
      v93 = *(_QWORD *)(v1 + 624);
      v94 = *(_QWORD *)(v1 + 616);
      v95 = *(_QWORD *)(v1 + 608);
      v96 = *(_QWORD *)(v1 + 584);
      v99 = *(_QWORD *)(v1 + 576);
      v101 = *(_QWORD *)(v1 + 552);
      v103 = *(_QWORD *)(v1 + 528);
      v105 = *(_QWORD *)(v1 + 520);
      v107 = *(_QWORD *)(v1 + 512);
      v109 = *(_QWORD *)(v1 + 504);
      v111 = *(_QWORD *)(v1 + 496);
      v113 = *(_QWORD *)(v1 + 488);
      v115 = *(_QWORD *)(v1 + 480);
      v117 = *(_QWORD *)(v1 + 472);
      v119 = *(_QWORD *)(v1 + 464);
      v121 = *(_QWORD *)(v1 + 456);
      v123 = *(_QWORD *)(v1 + 448);
      v126 = *(_QWORD *)(v1 + 424);
      v128 = *(_QWORD *)(v1 + 416);
      v130 = *(_QWORD *)(v1 + 408);
      v133 = *(_QWORD *)(v1 + 400);
      v136 = *(_QWORD *)(v1 + 392);
      v139 = *(_QWORD *)(v1 + 384);
      v143 = *(_QWORD *)(v1 + 360);
      v146 = *(_QWORD *)(v1 + 352);
      v150 = *(_QWORD *)(v1 + 344);
      v154 = *(_QWORD *)(v1 + 320);
      v157 = *(_QWORD *)(v1 + 312);
      swift_task_dealloc(*(_QWORD *)(v1 + 688));
      swift_task_dealloc(v88);
      swift_task_dealloc(v89);
      swift_task_dealloc(v90);
      swift_task_dealloc(v91);
      swift_task_dealloc(v92);
      swift_task_dealloc(v93);
      swift_task_dealloc(v94);
      swift_task_dealloc(v95);
      swift_task_dealloc(v96);
      swift_task_dealloc(v99);
      swift_task_dealloc(v101);
      swift_task_dealloc(v103);
      swift_task_dealloc(v105);
      swift_task_dealloc(v107);
      swift_task_dealloc(v109);
      swift_task_dealloc(v111);
      swift_task_dealloc(v113);
      swift_task_dealloc(v115);
      swift_task_dealloc(v117);
      swift_task_dealloc(v119);
      swift_task_dealloc(v121);
      swift_task_dealloc(v123);
      swift_task_dealloc(v126);
      swift_task_dealloc(v128);
      swift_task_dealloc(v130);
      swift_task_dealloc(v133);
      swift_task_dealloc(v136);
      swift_task_dealloc(v139);
      swift_task_dealloc(v143);
      swift_task_dealloc(v146);
      swift_task_dealloc(v150);
      swift_task_dealloc(v154);
      swift_task_dealloc(v157);
    }
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10007EAF4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to PhotosFaceDatabase.timePositions(for:)[1]);
  *(_QWORD *)(v0 + 1192) = v1;
  *v1 = v0;
  v1[1] = sub_10007EB50;
  return PhotosFaceDatabase.timePositions(for:)(*(_QWORD *)(v0 + 824));
}

uint64_t sub_10007EB50(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1192);
  *(_QWORD *)(*v2 + 1200) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100078664;
  }
  else
  {
    *(_QWORD *)(v4 + 1208) = a1;
    v6 = sub_10007EBC4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10007EBC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v1 = v0[151];
  v2 = v0[150];
  v3 = v0[103];
  v4 = sub_10008BC0C(v1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_10008B93C, v0[100]);
  swift_bridgeObjectRelease(v1);
  v5 = sub_10005CA80((uint64_t)v4);
  v0[152] = v2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v3);
  v7 = sub_100054F10(v6);
  swift_bridgeObjectRelease(v3);
  v8 = sub_100053314((uint64_t)v5, v7);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  v0[153] = sub_10005321C((uint64_t)v8);
  swift_release(v8);
  return swift_task_switch(sub_10007ECA0, v0[95], v0[96]);
}

uint64_t sub_10007ECA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 1224);
  *(_QWORD *)(v0 + 832) = *(_QWORD *)(v0 + 1216);
  v2 = *(_QWORD *)(v0 + 792);
  swift_bridgeObjectRetain(v2);
  v4 = sub_100054F10(v3);
  swift_bridgeObjectRelease(v2);
  v5 = swift_bridgeObjectRetain(v1);
  v6 = SyncFacesRequest.init(trackedFaces:cachedIdentifiers:)(v2, v1, v5);
  static Log.photos.getter(v6);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v30 = *(_QWORD *)(v0 + 600);
    v31 = *(_QWORD *)(v0 + 592);
    v32 = *(_QWORD *)(v0 + 664);
    v28 = *(_QWORD *)(v0 + 368);
    v10 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(32, -1);
    v33 = v29;
    *(_DWORD *)v10 = 134218242;
    v11 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRelease(v1);
    *(_QWORD *)(v0 + 272) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v1);
    *(_WORD *)(v10 + 12) = 2080;
    v12 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v4);
    v14 = Set.description.getter(v13, v28, v12);
    v16 = v15;
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v0 + 280) = sub_100021438(v14, v16, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Requesting syncFaces with %ld cached photos and faces: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8);
    v18 = v17(v32, v31);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 664);
    v20 = *(_QWORD *)(v0 + 600);
    v21 = *(_QWORD *)(v0 + 592);

    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease_n(v1, 2);
    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    v18 = v17(v19, v21);
  }
  *(_QWORD *)(v0 + 840) = v17;
  v22 = *(_QWORD *)(v0 + 752);
  v23 = *(_QWORD *)(v0 + 696);
  v24 = *(_QWORD *)(v0 + 288);
  *(_QWORD *)(v0 + 848) = *(_QWORD *)(v24 + 96);
  *(_BYTE *)(v0 + 1248) = *(_BYTE *)(v24 + 16);
  *(_QWORD *)(v0 + 856) = static CommunicationActor.shared.getter(v18);
  v25 = dispatch thunk of Actor.unownedExecutor.getter(v23, v22);
  return swift_task_switch(sub_100079218, v25, v26);
}

uint64_t sub_10007EF78()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v1[36] = v0;
  v2 = type metadata accessor for StoredPhoto(0);
  v1[37] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[38] = v3;
  v1[39] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000629C(&qword_1000B2B50);
  v1[40] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AlbumID(0);
  v1[41] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[42] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[43] = swift_task_alloc(v7);
  v1[44] = swift_task_alloc(v7);
  v1[45] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v1[46] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[47] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[48] = swift_task_alloc(v10);
  v1[49] = swift_task_alloc(v10);
  v1[50] = swift_task_alloc(v10);
  v1[51] = swift_task_alloc(v10);
  v1[52] = swift_task_alloc(v10);
  v1[53] = swift_task_alloc(v10);
  v11 = sub_10000629C(&qword_1000B25E8);
  v1[54] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[55] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[56] = swift_task_alloc(v13);
  v1[57] = swift_task_alloc(v13);
  v1[58] = swift_task_alloc(v13);
  v1[59] = swift_task_alloc(v13);
  v1[60] = swift_task_alloc(v13);
  v1[61] = swift_task_alloc(v13);
  v1[62] = swift_task_alloc(v13);
  v1[63] = swift_task_alloc(v13);
  v1[64] = swift_task_alloc(v13);
  v1[65] = swift_task_alloc(v13);
  v14 = sub_10000629C(&qword_1000B3620);
  v1[66] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000629C(&qword_1000B40E0);
  v1[67] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v1[68] = v16;
  v1[69] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000629C(&qword_1000B40E8);
  v1[70] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v1[71] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[72] = swift_task_alloc(v19);
  v1[73] = swift_task_alloc(v19);
  v20 = type metadata accessor for Logger(0);
  v1[74] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v1[75] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[76] = swift_task_alloc(v22);
  v1[77] = swift_task_alloc(v22);
  v1[78] = swift_task_alloc(v22);
  v1[79] = swift_task_alloc(v22);
  v1[80] = swift_task_alloc(v22);
  v1[81] = swift_task_alloc(v22);
  v1[82] = swift_task_alloc(v22);
  v1[83] = swift_task_alloc(v22);
  v23 = type metadata accessor for SyncFacesRequest(0);
  v1[84] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v1[85] = v24;
  v1[86] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for CommunicationActor(0);
  v1[87] = v25;
  v1[88] = static CommunicationActor.shared.getter(v25);
  v26 = type metadata accessor for AlbumDatabase(0);
  v1[89] = v26;
  v27 = sub_100009174(&qword_1000B32D8, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumDatabase, (uint64_t)&protocol conformance descriptor for AlbumDatabase);
  v1[90] = v27;
  v28 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.queryList()[1]);
  v1[91] = v28;
  *v28 = v1;
  v28[1] = sub_10007F2F0;
  return dispatch thunk of PhotosFaceIDDatabase.queryList()(v26, v27);
}

uint64_t sub_10007F2F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 728);
  *(_QWORD *)(*(_QWORD *)v2 + 736) = v1;
  swift_task_dealloc(v5);
  v6 = v4[87];
  if (v1)
  {
    v7 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, v7);
    v10 = v9;
    v11 = sub_10007FA10;
    v12 = v8;
    v13 = v10;
  }
  else
  {
    v4[93] = a1;
    v14 = sub_100009174(&qword_1000B1F78, (uint64_t (*)(uint64_t))&type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v4[94] = v14;
    v15 = dispatch thunk of Actor.unownedExecutor.getter(v6, v14);
    v13 = v16;
    v4[95] = v15;
    v4[96] = v16;
    v11 = sub_10007F3E8;
    v12 = v15;
  }
  return swift_task_switch(v11, v12, v13);
}

uint64_t sub_10007F3E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[3];

  v1 = *(_QWORD *)(v0 + 744);
  v2 = *(_QWORD *)(v0 + 736);
  v3 = *(_QWORD *)(v0 + 720);
  v4 = *(_QWORD *)(v0 + 712);
  v5 = *(_QWORD *)(v0 + 328);
  v6 = (_QWORD *)swift_task_alloc(48);
  *v6 = v5;
  v7 = type metadata accessor for AlbumProvider();
  *(_QWORD *)(v0 + 776) = v7;
  v6[1] = v7;
  v6[2] = v4;
  v8 = sub_100009174(&qword_1000B40F0, (uint64_t (*)(uint64_t))type metadata accessor for AlbumProvider, (uint64_t)&unk_100096844);
  *(_QWORD *)(v0 + 784) = v8;
  v6[3] = v8;
  v6[4] = v3;
  KeyPath = swift_getKeyPath(&unk_100096E18);
  swift_task_dealloc(v6);
  swift_retain(KeyPath);
  v10 = sub_10008B944(v1, KeyPath, v0 + 208, (uint64_t (*)(_QWORD))&type metadata accessor for AlbumID);
  *(_QWORD *)(v0 + 792) = v10;
  swift_release_n(KeyPath, 2);
  v11 = swift_bridgeObjectRelease(v1);
  if (!v10[2])
  {
    v12 = PhotosFaceType.rawValue.getter(*(unsigned __int8 *)(*(_QWORD *)(v0 + 288) + 16));
    v14 = v13;
    v16 = PhotosFaceType.rawValue.getter(2);
    v17 = v15;
    if (v12 == v16 && v14 == v15)
    {
      v11 = swift_bridgeObjectRelease_n(v14, 2);
    }
    else
    {
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v16, v15, 0);
      swift_bridgeObjectRelease(v17);
      v11 = swift_bridgeObjectRelease(v14);
      if ((v18 & 1) == 0)
      {
        swift_release(*(_QWORD *)(v0 + 704));
        swift_bridgeObjectRelease(v10);
        v46 = *(_QWORD *)(v0 + 664);
        v47 = *(_QWORD *)(v0 + 656);
        v48 = *(_QWORD *)(v0 + 648);
        v49 = *(_QWORD *)(v0 + 640);
        v50 = *(_QWORD *)(v0 + 632);
        v51 = *(_QWORD *)(v0 + 624);
        v52 = *(_QWORD *)(v0 + 616);
        v53 = *(_QWORD *)(v0 + 608);
        v54 = *(_QWORD *)(v0 + 584);
        v55 = *(_QWORD *)(v0 + 576);
        v56 = *(_QWORD *)(v0 + 552);
        v57 = *(_QWORD *)(v0 + 528);
        v58 = *(_QWORD *)(v0 + 520);
        v59 = *(_QWORD *)(v0 + 512);
        v60 = *(_QWORD *)(v0 + 504);
        v61 = *(_QWORD *)(v0 + 496);
        v62 = *(_QWORD *)(v0 + 488);
        v63 = *(_QWORD *)(v0 + 480);
        v64 = *(_QWORD *)(v0 + 472);
        v65 = *(_QWORD *)(v0 + 464);
        v66 = *(_QWORD *)(v0 + 456);
        v67 = *(_QWORD *)(v0 + 448);
        v68 = *(_QWORD *)(v0 + 424);
        v69 = *(_QWORD *)(v0 + 416);
        v70 = *(_QWORD *)(v0 + 408);
        v71 = *(_QWORD *)(v0 + 400);
        v72 = *(_QWORD *)(v0 + 392);
        v73 = *(_QWORD *)(v0 + 384);
        v75 = *(_QWORD *)(v0 + 360);
        v77 = *(_QWORD *)(v0 + 352);
        v78 = *(_QWORD *)(v0 + 344);
        v80 = *(_QWORD *)(v0 + 320);
        v82 = *(_QWORD *)(v0 + 312);
        swift_task_dealloc(*(_QWORD *)(v0 + 688));
        swift_task_dealloc(v46);
        swift_task_dealloc(v47);
        swift_task_dealloc(v48);
        swift_task_dealloc(v49);
        swift_task_dealloc(v50);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v59);
        swift_task_dealloc(v60);
        swift_task_dealloc(v61);
        swift_task_dealloc(v62);
        swift_task_dealloc(v63);
        swift_task_dealloc(v64);
        swift_task_dealloc(v65);
        swift_task_dealloc(v66);
        swift_task_dealloc(v67);
        swift_task_dealloc(v68);
        swift_task_dealloc(v69);
        swift_task_dealloc(v70);
        swift_task_dealloc(v71);
        swift_task_dealloc(v72);
        swift_task_dealloc(v73);
        swift_task_dealloc(v75);
        swift_task_dealloc(v77);
        swift_task_dealloc(v78);
        swift_task_dealloc(v80);
        swift_task_dealloc(v82);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
    }
  }
  if ((static TestProperties.ignoreSyncCache.getter(v11) & 1) != 0)
  {
    *(_QWORD *)(v0 + 832) = v2;
    v19 = *(_QWORD *)(v0 + 792);
    swift_bridgeObjectRetain(v19);
    v21 = sub_100054F10(v20);
    swift_bridgeObjectRelease(v19);
    v22 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v23 = SyncFacesRequest.init(trackedFaces:cachedIdentifiers:)(v19, _swiftEmptyArrayStorage, v22);
    static Log.photos.getter(v23);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain(v21);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(_QWORD *)(v0 + 664);
    v29 = *(_QWORD *)(v0 + 600);
    v30 = *(_QWORD *)(v0 + 592);
    if (v27)
    {
      v81 = *(_QWORD *)(v0 + 592);
      v74 = *(_QWORD *)(v0 + 368);
      v79 = *(_QWORD *)(v0 + 600);
      v31 = swift_slowAlloc(22, -1);
      v76 = swift_slowAlloc(32, -1);
      v83[0] = v76;
      *(_DWORD *)v31 = 134218242;
      v32 = _swiftEmptyArrayStorage[2];
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      *(_QWORD *)(v0 + 272) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      *(_WORD *)(v31 + 12) = 2080;
      v33 = sub_100009174(&qword_1000B3208, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      swift_bridgeObjectRetain(v21);
      v35 = Set.description.getter(v34, v74, v33);
      v37 = v36;
      swift_bridgeObjectRelease(v21);
      *(_QWORD *)(v0 + 280) = sub_100021438(v35, v37, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v31 + 14, v31 + 22);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease_n(v21, 2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Requesting syncFaces with %ld cached photos and faces: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      v38 = *(uint64_t (**)(uint64_t, uint64_t))(v79 + 8);
      v39 = v38(v28, v81);
    }
    else
    {
      swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
      swift_bridgeObjectRelease_n(v21, 2);

      v38 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8);
      v39 = v38(v28, v30);
    }
    *(_QWORD *)(v0 + 840) = v38;
    v41 = *(_QWORD *)(v0 + 752);
    v42 = *(_QWORD *)(v0 + 696);
    v43 = *(_QWORD *)(v0 + 288);
    *(_QWORD *)(v0 + 848) = *(_QWORD *)(v43 + 96);
    *(_BYTE *)(v0 + 1248) = *(_BYTE *)(v43 + 16);
    *(_QWORD *)(v0 + 856) = static CommunicationActor.shared.getter(v39);
    v44 = dispatch thunk of Actor.unownedExecutor.getter(v42, v41);
    return swift_task_switch(sub_10007FD08, v44, v45);
  }
  else
  {
    *(_QWORD *)(v0 + 800) = *(_QWORD *)(*(_QWORD *)(v0 + 288) + 104);
    return swift_task_switch(sub_10007FC30, 0, 0);
  }
}

uint64_t sub_10007FA10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  swift_release(*(_QWORD *)(v0 + 704));
  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 656);
  v3 = *(_QWORD *)(v0 + 648);
  v4 = *(_QWORD *)(v0 + 640);
  v5 = *(_QWORD *)(v0 + 632);
  v6 = *(_QWORD *)(v0 + 624);
  v7 = *(_QWORD *)(v0 + 616);
  v8 = *(_QWORD *)(v0 + 608);
  v9 = *(_QWORD *)(v0 + 584);
  v11 = *(_QWORD *)(v0 + 576);
  v12 = *(_QWORD *)(v0 + 552);
  v13 = *(_QWORD *)(v0 + 528);
  v14 = *(_QWORD *)(v0 + 520);
  v15 = *(_QWORD *)(v0 + 512);
  v16 = *(_QWORD *)(v0 + 504);
  v17 = *(_QWORD *)(v0 + 496);
  v18 = *(_QWORD *)(v0 + 488);
  v19 = *(_QWORD *)(v0 + 480);
  v20 = *(_QWORD *)(v0 + 472);
  v21 = *(_QWORD *)(v0 + 464);
  v22 = *(_QWORD *)(v0 + 456);
  v23 = *(_QWORD *)(v0 + 448);
  v24 = *(_QWORD *)(v0 + 424);
  v25 = *(_QWORD *)(v0 + 416);
  v26 = *(_QWORD *)(v0 + 408);
  v27 = *(_QWORD *)(v0 + 400);
  v28 = *(_QWORD *)(v0 + 392);
  v29 = *(_QWORD *)(v0 + 384);
  v30 = *(_QWORD *)(v0 + 360);
  v31 = *(_QWORD *)(v0 + 352);
  v32 = *(_QWORD *)(v0 + 344);
  v33 = *(_QWORD *)(v0 + 320);
  v34 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 688));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007FC30()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 808) = OBJC_IVAR____TtC11photosfaced10PhotoCache_database;
  v1 = (_QWORD *)swift_task_alloc(async function pointer to PhotosFaceDatabase.storedPhotos()[1]);
  *(_QWORD *)(v0 + 816) = v1;
  *v1 = v0;
  v1[1] = sub_10007FC90;
  return PhotosFaceDatabase.storedPhotos()();
}

uint64_t sub_10007FC90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 816);
  *(_QWORD *)(*(_QWORD *)v2 + 824) = a1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v3[154] = v1;
    v5 = v3[96];
    v6 = v3[95];
    v7 = sub_1000861F8;
  }
  else
  {
    v7 = sub_100085D30;
    v6 = 0;
    v5 = 0;
  }
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_10007FD08()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_BYTE *)(v0 + 1248);
  swift_release(*(_QWORD *)(v0 + 856));
  v2 = *(_QWORD *)(v0 + 832);
  sub_100056E9C(0x70A04u >> (8 * v1), *(_QWORD *)(v0 + 688), 1, *(_QWORD *)(v0 + 584));
  *(_QWORD *)(v0 + 864) = v2;
  if (v2)
    v3 = sub_10007FEA4;
  else
    v3 = sub_10007FD90;
  return swift_task_switch(v3, *(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 768));
}

uint64_t sub_10007FD90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[70];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[71] + 16))(v0[72], v0[73], v1);
  v2 = sub_100006454(&qword_1000B40F8, &qword_1000B40E8, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>);
  v3 = dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  v4 = v0[105];
  v0[110] = _swiftEmptyArrayStorage;
  v0[109] = v4;
  v5 = v0[94];
  v6 = static CommunicationActor.shared.getter(v3);
  v0[111] = v6;
  v7 = sub_100006454(&qword_1000B4100, &qword_1000B40E0, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>.Iterator);
  v8 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[112] = v8;
  *v8 = v0;
  v8[1] = sub_1000800E0;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[66], v6, v5, v0 + 12, v0[67], v7);
}

uint64_t sub_10007FEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 688);
  v2 = *(_QWORD *)(v0 + 680);
  v3 = *(_QWORD *)(v0 + 672);
  swift_release(*(_QWORD *)(v0 + 704));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 664);
  v5 = *(_QWORD *)(v0 + 656);
  v6 = *(_QWORD *)(v0 + 648);
  v7 = *(_QWORD *)(v0 + 640);
  v8 = *(_QWORD *)(v0 + 632);
  v9 = *(_QWORD *)(v0 + 624);
  v10 = *(_QWORD *)(v0 + 616);
  v11 = *(_QWORD *)(v0 + 608);
  v12 = *(_QWORD *)(v0 + 584);
  v14 = *(_QWORD *)(v0 + 576);
  v15 = *(_QWORD *)(v0 + 552);
  v16 = *(_QWORD *)(v0 + 528);
  v17 = *(_QWORD *)(v0 + 520);
  v18 = *(_QWORD *)(v0 + 512);
  v19 = *(_QWORD *)(v0 + 504);
  v20 = *(_QWORD *)(v0 + 496);
  v21 = *(_QWORD *)(v0 + 488);
  v22 = *(_QWORD *)(v0 + 480);
  v23 = *(_QWORD *)(v0 + 472);
  v24 = *(_QWORD *)(v0 + 464);
  v25 = *(_QWORD *)(v0 + 456);
  v26 = *(_QWORD *)(v0 + 448);
  v27 = *(_QWORD *)(v0 + 424);
  v28 = *(_QWORD *)(v0 + 416);
  v29 = *(_QWORD *)(v0 + 408);
  v30 = *(_QWORD *)(v0 + 400);
  v31 = *(_QWORD *)(v0 + 392);
  v32 = *(_QWORD *)(v0 + 384);
  v33 = *(_QWORD *)(v0 + 360);
  v34 = *(_QWORD *)(v0 + 352);
  v35 = *(_QWORD *)(v0 + 344);
  v36 = *(_QWORD *)(v0 + 320);
  v37 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 688));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000800E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 896);
  *(_QWORD *)(*(_QWORD *)v1 + 904) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[111]);
  if (v0)
    v4 = sub_1000813C8;
  else
    v4 = sub_10008015C;
  return swift_task_switch(v4, v2[95], v2[96]);
}

uint64_t sub_10008015C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, unint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t KeyPath;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  void (*v91)(uint64_t, unint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v96;
  _QWORD *v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t (*v111)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __n128 v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(uint64_t, uint64_t);
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  os_log_type_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void (*v233)(uint64_t, uint64_t);
  void (*v234)(uint64_t, uint64_t);
  uint64_t v235;
  uint64_t v236;
  NSObject *v237;
  uint64_t v238;
  uint64_t v239;
  uint8_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(uint64_t, uint64_t, uint64_t);
  uint64_t v245;
  uint64_t v246;
  uint64_t v247[3];

  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 440);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = v0 + 104;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 544) + 8))(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 536));
    v5 = *(_QWORD *)(v0 + 880);
    *(_QWORD *)(v0 + 976) = v5;
    *(_QWORD *)(v0 + 968) = 0;
    *(_QWORD *)(v0 + 984) = sub_100009174(&qword_1000B29F0, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
    v6 = swift_bridgeObjectRetain(v5);
    v7 = static SyncedPhotosFace.destreamify(_:)(v6);
    v8 = swift_bridgeObjectRelease(v5);
    *(_QWORD *)(v0 + 88) = v7;
    v9 = *(_QWORD *)(v0 + 288);
    static Log.session.getter(v8);
    swift_bridgeObjectRetain_n(v7, 3);
    v10 = swift_retain(v9);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v223 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
      v213 = *(_QWORD *)(v0 + 592);
      v219 = *(_QWORD *)(v0 + 640);
      v204 = *(_QWORD *)(v0 + 288);
      v13 = *(unsigned __int8 *)(v0 + 1248);
      v14 = swift_slowAlloc(32, -1);
      v208 = swift_slowAlloc(64, -1);
      v247[0] = v208;
      *(_DWORD *)v14 = 134218498;
      *(_QWORD *)(v0 + 168) = *(_QWORD *)(v7 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v7);
      *(_WORD *)(v14 + 12) = 2080;
      v15 = PhotosFaceType.description.getter(v13);
      v17 = v16;
      *(_QWORD *)(v0 + 176) = sub_100021438(v15, v16, v247);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease(v17);
      swift_release(v204);
      *(_WORD *)(v14 + 22) = 2080;
      v18 = sub_100086480(v7, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, &qword_1000B25E8, &qword_1000B2A30, (uint64_t)&protocol conformance descriptor for AlbumID);
      swift_bridgeObjectRelease(v7);
      v19 = Array.description.getter(v18, &type metadata for String);
      v21 = v20;
      swift_bridgeObjectRelease(v18);
      *(_QWORD *)(v0 + 184) = sub_100021438(v19, v21, v247);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v14 + 24, v14 + 32);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v7);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Did syncFaces (%ld) for type %s: %s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy(v208, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v208, -1, -1);
      v22 = v14;
      v4 = v0 + 104;
      swift_slowDealloc(v22, -1, -1);

      v223(v219, v213);
    }
    else
    {
      v74 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
      v75 = *(_QWORD *)(v0 + 640);
      v76 = *(_QWORD *)(v0 + 592);
      v77 = *(_QWORD *)(v0 + 288);
      swift_bridgeObjectRelease_n(v7, 3);
      swift_release(v77);

      v74(v75, v76);
    }
    v78 = *(_QWORD *)(v0 + 784);
    v79 = *(_QWORD *)(v0 + 776);
    v80 = *(_QWORD *)(v0 + 720);
    v81 = *(_QWORD *)(v0 + 712);
    v82 = *(_QWORD *)(v0 + 328);
    swift_beginAccess(v0 + 88, v0 + 64, 0, 0);
    v83 = *(_QWORD *)(v0 + 88);
    v84 = (_QWORD *)swift_task_alloc(48);
    *v84 = v82;
    v84[1] = v79;
    v84[2] = v81;
    v84[3] = v78;
    v84[4] = v80;
    KeyPath = swift_getKeyPath(&unk_100096E48);
    swift_task_dealloc(v84);
    swift_retain(KeyPath);
    swift_bridgeObjectRetain(v83);
    v87 = sub_10008BAA8(v86, KeyPath, v4, &qword_1000B25E8);
    *(_QWORD *)(v0 + 992) = v87;
    swift_release_n(KeyPath, 2);
    swift_bridgeObjectRelease(v83);
    v88 = v87[2];
    *(_QWORD *)(v0 + 1000) = v88;
    v89 = *(_QWORD *)(v0 + 376);
    if (v88)
    {
      v90 = *(_DWORD *)(v89 + 80);
      *(_DWORD *)(v0 + 1240) = v90;
      *(_QWORD *)(v0 + 1008) = *(_QWORD *)(v89 + 72);
      v91 = *(void (**)(uint64_t, unint64_t, uint64_t))(v89 + 16);
      *(_QWORD *)(v0 + 1016) = v91;
      v92 = *(_QWORD *)(v0 + 840);
      *(_QWORD *)(v0 + 1160) = 0;
      *(_QWORD *)(v0 + 1152) = v92;
      *(_QWORD *)(v0 + 1144) = v92;
      *(_QWORD *)(v0 + 1136) = v92;
      v93 = *(_QWORD *)(v0 + 368);
      v94 = *(_QWORD *)(v0 + 320);
      v91(v94, *(_QWORD *)(v0 + 992) + ((v90 + 32) & ~(unint64_t)v90), v93);
      v95 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v89 + 56);
      *(_QWORD *)(v0 + 1168) = v95;
      v95(v94, 0, 1, v93);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v94, 1, v93) != 1)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 32))(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 368));
        v96 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
        *(_QWORD *)(v0 + 1176) = v96;
        *v96 = v0;
        v96[1] = sub_1000846F8;
        return dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
      }
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v89 + 56))(*(_QWORD *)(v0 + 320), 1, 1, *(_QWORD *)(v0 + 368));
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 992));
    v106 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 1024) = v106;
    v107 = *(_QWORD *)(v106 + 16);
    *(_QWORD *)(v0 + 1032) = v107;
    if (v107)
    {
      v109 = *(_QWORD *)(v0 + 432);
      v108 = *(_QWORD *)(v0 + 440);
      v110 = *(_DWORD *)(v108 + 80);
      *(_DWORD *)(v0 + 1244) = v110;
      *(_QWORD *)(v0 + 1040) = *(_QWORD *)(v108 + 72);
      v111 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v108 + 16);
      *(_QWORD *)(v0 + 1048) = v111;
      v112 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
      *(_QWORD *)(v0 + 1064) = 0;
      *(_QWORD *)(v0 + 1056) = v112;
      v114 = *(_QWORD *)(v0 + 456);
      v113 = *(_QWORD *)(v0 + 464);
      v115 = *(_QWORD *)(v0 + 288);
      v116 = v106 + ((v110 + 32) & ~(unint64_t)v110);
      v117 = swift_bridgeObjectRetain(v106);
      v118 = v111(v113, v116, v109, v117);
      static Log.photos.getter(v118);
      ((void (*)(uint64_t, uint64_t, uint64_t))v111)(v114, v113, v109);
      v119 = swift_retain(v115);
      v120 = Logger.logObject.getter(v119);
      v121 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v120, v121))
      {
        v245 = *(_QWORD *)(v0 + 632);
        v241 = *(_QWORD *)(v0 + 592);
        v122 = *(_QWORD *)(v0 + 456);
        v123 = *(_QWORD *)(v0 + 432);
        v215 = *(_QWORD *)(v0 + 440);
        v234 = v112;
        v124 = *(_QWORD *)(v0 + 360);
        v225 = *(_QWORD *)(v0 + 336);
        v220 = *(_QWORD *)(v0 + 328);
        v201 = *(_QWORD *)(v0 + 288);
        v125 = *(unsigned __int8 *)(v0 + 1248);
        v126 = swift_slowAlloc(22, -1);
        v229 = swift_slowAlloc(64, -1);
        v247[0] = v229;
        *(_DWORD *)v126 = 136315394;
        v127 = PhotosFaceType.description.getter(v125);
        v129 = v128;
        *(_QWORD *)(v0 + 152) = sub_100021438(v127, v128, v247);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v126 + 4, v126 + 12);
        swift_bridgeObjectRelease(v129);
        swift_release(v201);
        *(_WORD *)(v126 + 12) = 2080;
        SyncedPhotosFace.id.getter(v123);
        v130 = *(void (**)(uint64_t, uint64_t))(v215 + 8);
        v130(v122, v123);
        v131 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
        v132 = dispatch thunk of CustomStringConvertible.description.getter(v220, v131);
        v134 = v133;
        (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v124, v220);
        *(_QWORD *)(v0 + 160) = sub_100021438(v132, v134, v247);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v126 + 14, v126 + 22);
        swift_bridgeObjectRelease(v134);
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "Inserting face, type = %s: %s", (uint8_t *)v126, 0x16u);
        swift_arrayDestroy(v229, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v229, -1, -1);
        swift_slowDealloc(v126, -1, -1);

        v234(v245, v241);
      }
      else
      {
        v152 = *(_QWORD *)(v0 + 632);
        v153 = *(_QWORD *)(v0 + 592);
        v154 = *(_QWORD *)(v0 + 288);
        v130 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
        v130(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
        swift_release(v154);

        v112(v152, v153);
      }
      *(_QWORD *)(v0 + 1072) = v130;
      SyncedPhotosFace.id.getter(*(_QWORD *)(v0 + 432));
      v155 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
      *(_QWORD *)(v0 + 1080) = v155;
      *v155 = v0;
      v155[1] = sub_100083424;
      return dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
    }
    else
    {
      v135 = *(_QWORD *)(v0 + 704);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 976));
      v136 = swift_release(v135);
      if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
        v136 = sub_100022934(*(unsigned __int8 *)(v0 + 1248));
      v137 = *(_QWORD *)(v0 + 688);
      v138 = *(_QWORD *)(v0 + 680);
      v139 = *(_QWORD *)(v0 + 672);
      v140 = *(_QWORD *)(v0 + 584);
      v141 = *(_QWORD *)(v0 + 568);
      v142 = *(_QWORD *)(v0 + 560);
      if (*(_QWORD *)(v0 + 968))
      {
        swift_willThrow(v136);
        (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v140, v142);
        (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
        v143 = *(_QWORD *)(v0 + 664);
        v144 = *(_QWORD *)(v0 + 656);
        v145 = *(_QWORD *)(v0 + 648);
        v146 = *(_QWORD *)(v0 + 640);
        v147 = *(_QWORD *)(v0 + 632);
        v148 = *(_QWORD *)(v0 + 624);
        v149 = *(_QWORD *)(v0 + 616);
        v150 = *(_QWORD *)(v0 + 608);
        v151 = *(_QWORD *)(v0 + 584);
        v172 = *(_QWORD *)(v0 + 576);
        v173 = *(_QWORD *)(v0 + 552);
        v175 = *(_QWORD *)(v0 + 528);
        v177 = *(_QWORD *)(v0 + 520);
        v179 = *(_QWORD *)(v0 + 512);
        v181 = *(_QWORD *)(v0 + 504);
        v183 = *(_QWORD *)(v0 + 496);
        v185 = *(_QWORD *)(v0 + 488);
        v187 = *(_QWORD *)(v0 + 480);
        v189 = *(_QWORD *)(v0 + 472);
        v191 = *(_QWORD *)(v0 + 464);
        v193 = *(_QWORD *)(v0 + 456);
        v196 = *(_QWORD *)(v0 + 448);
        v198 = *(_QWORD *)(v0 + 424);
        v202 = *(_QWORD *)(v0 + 416);
        v206 = *(_QWORD *)(v0 + 408);
        v210 = *(_QWORD *)(v0 + 400);
        v216 = *(_QWORD *)(v0 + 392);
        v221 = *(_QWORD *)(v0 + 384);
        v226 = *(_QWORD *)(v0 + 360);
        v230 = *(_QWORD *)(v0 + 352);
        v235 = *(_QWORD *)(v0 + 344);
        v238 = *(_QWORD *)(v0 + 320);
        v242 = *(_QWORD *)(v0 + 312);
        swift_task_dealloc(*(_QWORD *)(v0 + 688));
        swift_task_dealloc(v143);
        swift_task_dealloc(v144);
        swift_task_dealloc(v145);
        swift_task_dealloc(v146);
        swift_task_dealloc(v147);
        swift_task_dealloc(v148);
        swift_task_dealloc(v149);
        swift_task_dealloc(v150);
        swift_task_dealloc(v151);
        swift_task_dealloc(v172);
        swift_task_dealloc(v173);
        swift_task_dealloc(v175);
        swift_task_dealloc(v177);
        swift_task_dealloc(v179);
        swift_task_dealloc(v181);
        swift_task_dealloc(v183);
        swift_task_dealloc(v185);
        swift_task_dealloc(v187);
        swift_task_dealloc(v189);
        swift_task_dealloc(v191);
        swift_task_dealloc(v193);
        swift_task_dealloc(v196);
        swift_task_dealloc(v198);
        swift_task_dealloc(v202);
        swift_task_dealloc(v206);
        swift_task_dealloc(v210);
        swift_task_dealloc(v216);
        swift_task_dealloc(v221);
        swift_task_dealloc(v226);
        swift_task_dealloc(v230);
        swift_task_dealloc(v235);
        swift_task_dealloc(v238);
        swift_task_dealloc(v242);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v141 + 8))(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 560));
        (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
        v163 = *(_QWORD *)(v0 + 664);
        v164 = *(_QWORD *)(v0 + 656);
        v165 = *(_QWORD *)(v0 + 648);
        v166 = *(_QWORD *)(v0 + 640);
        v167 = *(_QWORD *)(v0 + 632);
        v168 = *(_QWORD *)(v0 + 624);
        v169 = *(_QWORD *)(v0 + 616);
        v170 = *(_QWORD *)(v0 + 608);
        v171 = *(_QWORD *)(v0 + 584);
        v174 = *(_QWORD *)(v0 + 576);
        v176 = *(_QWORD *)(v0 + 552);
        v178 = *(_QWORD *)(v0 + 528);
        v180 = *(_QWORD *)(v0 + 520);
        v182 = *(_QWORD *)(v0 + 512);
        v184 = *(_QWORD *)(v0 + 504);
        v186 = *(_QWORD *)(v0 + 496);
        v188 = *(_QWORD *)(v0 + 488);
        v190 = *(_QWORD *)(v0 + 480);
        v192 = *(_QWORD *)(v0 + 472);
        v194 = *(_QWORD *)(v0 + 464);
        v197 = *(_QWORD *)(v0 + 456);
        v199 = *(_QWORD *)(v0 + 448);
        v203 = *(_QWORD *)(v0 + 424);
        v207 = *(_QWORD *)(v0 + 416);
        v212 = *(_QWORD *)(v0 + 408);
        v218 = *(_QWORD *)(v0 + 400);
        v222 = *(_QWORD *)(v0 + 392);
        v227 = *(_QWORD *)(v0 + 384);
        v231 = *(_QWORD *)(v0 + 360);
        v236 = *(_QWORD *)(v0 + 352);
        v239 = *(_QWORD *)(v0 + 344);
        v243 = *(_QWORD *)(v0 + 320);
        v246 = *(_QWORD *)(v0 + 312);
        swift_task_dealloc(*(_QWORD *)(v0 + 688));
        swift_task_dealloc(v163);
        swift_task_dealloc(v164);
        swift_task_dealloc(v165);
        swift_task_dealloc(v166);
        swift_task_dealloc(v167);
        swift_task_dealloc(v168);
        swift_task_dealloc(v169);
        swift_task_dealloc(v170);
        swift_task_dealloc(v171);
        swift_task_dealloc(v174);
        swift_task_dealloc(v176);
        swift_task_dealloc(v178);
        swift_task_dealloc(v180);
        swift_task_dealloc(v182);
        swift_task_dealloc(v184);
        swift_task_dealloc(v186);
        swift_task_dealloc(v188);
        swift_task_dealloc(v190);
        swift_task_dealloc(v192);
        swift_task_dealloc(v194);
        swift_task_dealloc(v197);
        swift_task_dealloc(v199);
        swift_task_dealloc(v203);
        swift_task_dealloc(v207);
        swift_task_dealloc(v212);
        swift_task_dealloc(v218);
        swift_task_dealloc(v222);
        swift_task_dealloc(v227);
        swift_task_dealloc(v231);
        swift_task_dealloc(v236);
        swift_task_dealloc(v239);
        swift_task_dealloc(v243);
        swift_task_dealloc(v246);
      }
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 880);
    v24 = *(_QWORD *)(v0 + 520);
    v25 = *(_QWORD *)(v0 + 512);
    v244 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v244(v24, v1, v2);
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v26(v25, v24, v2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
    v28 = *(_QWORD *)(v0 + 880);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v28 = sub_100091A14(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
    v30 = *(_QWORD *)(v28 + 16);
    v29 = *(_QWORD *)(v28 + 24);
    if (v30 >= v29 >> 1)
      v28 = sub_100091A14(v29 > 1, v30 + 1, 1, v28);
    *(_QWORD *)(v0 + 912) = v28;
    v31 = *(_QWORD *)(v0 + 520);
    v33 = *(_QWORD *)(v0 + 504);
    v32 = *(_QWORD *)(v0 + 512);
    v35 = *(_QWORD *)(v0 + 488);
    v34 = *(_QWORD *)(v0 + 496);
    v37 = *(_QWORD *)(v0 + 432);
    v36 = *(_QWORD *)(v0 + 440);
    *(_QWORD *)(v28 + 16) = v30 + 1;
    v38 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v244)(v28+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v30, v32, v37);
    static Log.photos.getter(v38);
    v26(v33, v31, v37);
    v26(v34, v31, v37);
    v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v26)(v35, v31, v37);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v228 = v41;
      v237 = v40;
      v42 = (_QWORD *)(v0 + 256);
      v43 = *(_QWORD *)(v0 + 504);
      v195 = *(_QWORD *)(v0 + 496);
      v45 = *(_QWORD *)(v0 + 432);
      v44 = *(_QWORD *)(v0 + 440);
      v209 = *(_QWORD *)(v0 + 376);
      v46 = *(_QWORD *)(v0 + 360);
      v200 = *(_QWORD *)(v0 + 424);
      v205 = *(_QWORD *)(v0 + 368);
      v47 = *(_QWORD *)(v0 + 328);
      v232 = *(_QWORD *)(v0 + 336);
      v48 = swift_slowAlloc(32, -1);
      v224 = swift_slowAlloc(64, -1);
      *(_QWORD *)(v0 + 232) = v224;
      *(_DWORD *)v48 = 134218498;
      v49 = SyncedPhotosFace.photos.getter(v45);
      v50 = *(_QWORD *)(v49 + 16);
      swift_bridgeObjectRelease(v49);
      v51 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v51(v43, v45);
      *(_QWORD *)(v0 + 240) = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v48 + 4, v48 + 12);
      *(_WORD *)(v48 + 12) = 2080;
      SyncedPhotosFace.id.getter(v45);
      v52 = sub_100009174(&qword_1000B29F0, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
      dispatch thunk of PhotosFaceID.id.getter(v47, v52);
      (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v46, v47);
      v233 = v51;
      v51(v195, v45);
      v53 = sub_100009174((unint64_t *)&qword_1000B28E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v205, v53);
      v56 = v55;
      (*(void (**)(uint64_t, uint64_t))(v209 + 8))(v200, v205);
      *(_QWORD *)(v0 + 248) = sub_100021438(v54, v56, (uint64_t *)(v0 + 232));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease(v56);
      v240 = (uint8_t *)v48;
      *(_WORD *)(v48 + 22) = 2080;
      v57 = SyncedPhotosFace.photos.getter(v45);
      v58 = v57;
      v59 = *(_QWORD *)(v57 + 16);
      if (v59)
      {
        v60 = *(_QWORD *)(v0 + 304);
        *(_QWORD *)(v0 + 256) = _swiftEmptyArrayStorage;
        sub_10004D740(0, v59, 0);
        v214 = v58;
        v61 = v58 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
        v62 = *(_QWORD *)(v60 + 72);
        v63 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v60 + 16);
        do
        {
          v65 = *(_QWORD *)(v0 + 304);
          v64 = *(_QWORD *)(v0 + 312);
          v66 = *(_QWORD *)(v0 + 296);
          v67 = v63(v64, v61, v66);
          StoredPhoto.localIdentifier.getter(v67);
          (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
          v68 = *(_QWORD **)(v0 + 256);
          if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
          {
            sub_10004D740(0, v68[2] + 1, 1);
            v68 = (_QWORD *)*v42;
          }
          v70 = v68[2];
          v69 = v68[3];
          if (v70 >= v69 >> 1)
          {
            sub_10004D740(v69 > 1, v70 + 1, 1);
            v68 = (_QWORD *)*v42;
          }
          v72 = *(_QWORD *)(v0 + 376);
          v71 = *(_QWORD *)(v0 + 384);
          v73 = *(_QWORD *)(v0 + 368);
          v68[2] = v70 + 1;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v72 + 32))((unint64_t)v68+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(_QWORD *)(v72 + 72) * v70, v71, v73);
          *(_QWORD *)(v0 + 256) = v68;
          v61 += v62;
          --v59;
        }
        while (v59);
        swift_bridgeObjectRelease(v214);
      }
      else
      {
        swift_bridgeObjectRelease(v57);
        v68 = _swiftEmptyArrayStorage;
      }
      v98 = (_QWORD *)(v0 + 840);
      v211 = *(_QWORD *)(v0 + 656);
      v217 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
      v156 = *(_QWORD *)(v0 + 592);
      v157 = *(_QWORD *)(v0 + 368);
      v233(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 432));
      v158 = Array.description.getter(v68, v157);
      v160 = v159;
      swift_bridgeObjectRelease(v68);
      *(_QWORD *)(v0 + 264) = sub_100021438(v158, v160, (uint64_t *)(v0 + 232));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v240 + 24, v240 + 32);
      v161 = v160;
      v105 = v233;
      swift_bridgeObjectRelease(v161);
      _os_log_impl((void *)&_mh_execute_header, v237, v228, "Caching %ld for face %s, photos = %s", v240, 0x20u);
      swift_arrayDestroy(v224, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v224, -1, -1);
      swift_slowDealloc(v240, -1, -1);

      v217(v211, v156);
    }
    else
    {
      v98 = (_QWORD *)(v0 + 872);
      v99 = *(void (**)(uint64_t, uint64_t))(v0 + 872);
      v100 = *(_QWORD *)(v0 + 656);
      v101 = *(_QWORD *)(v0 + 592);
      v103 = *(_QWORD *)(v0 + 496);
      v102 = *(_QWORD *)(v0 + 504);
      v104 = *(_QWORD *)(v0 + 432);
      v105 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
      v105(*(_QWORD *)(v0 + 488), v104);
      v105(v103, v104);
      v105(v102, v104);

      v99(v100, v101);
    }
    *(_QWORD *)(v0 + 928) = *v98;
    *(_QWORD *)(v0 + 920) = v105;
    v162 = *(_QWORD *)(v0 + 432);
    *(_QWORD *)(v0 + 936) = *(_QWORD *)(*(_QWORD *)(v0 + 288) + 104);
    *(_QWORD *)(v0 + 944) = SyncedPhotosFace.photos.getter(v162);
    return swift_task_switch(sub_1000822CC, 0, 0);
  }
}

void sub_1000813C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(unint64_t, uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t KeyPath;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  void (*v60)(uint64_t, unint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191[3];

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 544) + 8))(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 536));
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 880);
  *(_QWORD *)(v0 + 976) = v2;
  *(_QWORD *)(v0 + 968) = v1;
  *(_QWORD *)(v0 + 984) = sub_100009174(&qword_1000B29F0, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
  v3 = swift_bridgeObjectRetain(v2);
  v4 = static SyncedPhotosFace.destreamify(_:)(v3);
  v5 = swift_bridgeObjectRelease(v2);
  *(_QWORD *)(v0 + 88) = v4;
  v6 = v0 + 88;
  if (v1)
  {
    v191[0] = (uint64_t)_swiftEmptyArrayStorage;
    v7 = *(_QWORD *)(v4 + 16);
    v8 = swift_bridgeObjectRetain(v4);
    if (v7)
    {
      v9 = 0;
      v187 = _swiftEmptyArrayStorage;
      while (v9 < *(_QWORD *)(v4 + 16))
      {
        v11 = *(_QWORD *)(v0 + 432);
        v10 = *(_QWORD *)(v0 + 440);
        v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        v13 = *(_QWORD *)(v10 + 72);
        (*(void (**)(_QWORD, unint64_t, uint64_t, __n128))(v10 + 16))(*(_QWORD *)(v0 + 480), v4 + v12 + v13 * v9, v11, v8);
        if ((SyncedPhotosFace.complete.getter(v11) & 1) != 0)
        {
          v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 32);
          v14(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 432));
          v15 = (uint64_t)v187;
          if ((swift_isUniquelyReferenced_nonNull_native(v187) & 1) == 0)
          {
            sub_10004D880(0, v187[2] + 1, 1);
            v15 = v191[0];
          }
          v17 = *(_QWORD *)(v15 + 16);
          v16 = *(_QWORD *)(v15 + 24);
          if (v17 >= v16 >> 1)
          {
            sub_10004D880(v16 > 1, v17 + 1, 1);
            v15 = v191[0];
          }
          v18 = *(_QWORD *)(v0 + 472);
          v19 = *(_QWORD *)(v0 + 432);
          *(_QWORD *)(v15 + 16) = v17 + 1;
          v187 = (_QWORD *)v15;
          v14(v15 + v12 + v17 * v13, v18, v19);
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 432));
        }
        if (v7 == ++v9)
          goto LABEL_15;
      }
      __break(1u);
      return;
    }
    v187 = _swiftEmptyArrayStorage;
LABEL_15:
    v6 = v0 + 88;
    v21 = swift_bridgeObjectRelease(v4);
    static Log.session.getter(v21);
    v20 = (uint64_t)v187;
    v22 = swift_retain(v187);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      *(_DWORD *)v25 = 134218240;
      *(_QWORD *)(v0 + 200) = v187[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v25 + 4, v25 + 12);
      swift_release(v187);
      *(_WORD *)(v25 + 12) = 2048;
      swift_beginAccess(v0 + 88, v0 + 16, 0, 0);
      *(_QWORD *)(v0 + 216) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 16);
      v6 = v0 + 88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v25 + 14, v25 + 22);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "An error occurred during sync. Only %ld / %ld finished successfully.", (uint8_t *)v25, 0x16u);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_release(v187);
    }

    (*(void (**)(_QWORD, _QWORD))(v0 + 840))(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 592));
    swift_beginAccess(v6, v0 + 40, 1, 0);
    v26 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 88) = v187;
    v5 = swift_bridgeObjectRelease(v26);
  }
  else
  {
    v20 = v4;
  }
  v188 = v6 - 24;
  v27 = v6 + 16;
  v28 = *(_QWORD *)(v0 + 288);
  static Log.session.getter(v5);
  swift_bridgeObjectRetain_n(v20, 3);
  v29 = swift_retain(v28);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  v181 = v6 + 80;
  if (os_log_type_enabled(v30, v31))
  {
    v155 = v6 + 96;
    v169 = *(_QWORD *)(v0 + 640);
    v173 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v165 = *(_QWORD *)(v0 + 592);
    v158 = *(_QWORD *)(v0 + 288);
    v177 = v6 + 16;
    v32 = *(unsigned __int8 *)(v0 + 1248);
    v33 = swift_slowAlloc(32, -1);
    v161 = swift_slowAlloc(64, -1);
    v191[0] = v161;
    *(_DWORD *)v33 = 134218498;
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v20 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 80, v6 + 88, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v33 + 12) = 2080;
    v34 = PhotosFaceType.description.getter(v32);
    v36 = v35;
    *(_QWORD *)(v0 + 176) = sub_100021438(v34, v35, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 88, v6 + 96, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease(v36);
    swift_release(v158);
    *(_WORD *)(v33 + 22) = 2080;
    v37 = sub_100086480(v20, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, &qword_1000B25E8, &qword_1000B2A30, (uint64_t)&protocol conformance descriptor for AlbumID);
    swift_bridgeObjectRelease(v20);
    v38 = Array.description.getter(v37, &type metadata for String);
    v39 = v6;
    v41 = v40;
    swift_bridgeObjectRelease(v37);
    v42 = v38;
    v27 = v177;
    *(_QWORD *)(v0 + 184) = sub_100021438(v42, v41, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v155, v0 + 192, v33 + 24, v33 + 32);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Did syncFaces (%ld) for type %s: %s", (uint8_t *)v33, 0x20u);
    swift_arrayDestroy(v161, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v161, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    v173(v169, v165);
  }
  else
  {
    v43 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v44 = *(_QWORD *)(v0 + 640);
    v45 = *(_QWORD *)(v0 + 592);
    v46 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRelease_n(v20, 3);
    swift_release(v46);

    v43(v44, v45);
    v39 = v6;
  }
  v47 = *(_QWORD *)(v0 + 784);
  v48 = *(_QWORD *)(v0 + 776);
  v49 = *(_QWORD *)(v0 + 720);
  v50 = *(_QWORD *)(v0 + 712);
  v51 = *(_QWORD *)(v0 + 328);
  swift_beginAccess(v39, v188, 0, 0);
  v52 = *(_QWORD *)(v0 + 88);
  v53 = (_QWORD *)swift_task_alloc(48);
  *v53 = v51;
  v53[1] = v48;
  v53[2] = v50;
  v53[3] = v47;
  v53[4] = v49;
  KeyPath = swift_getKeyPath(&unk_100096E48);
  swift_task_dealloc(v53);
  swift_retain(KeyPath);
  swift_bridgeObjectRetain(v52);
  v56 = sub_10008BAA8(v55, KeyPath, v27, &qword_1000B25E8);
  *(_QWORD *)(v0 + 992) = v56;
  swift_release_n(KeyPath, 2);
  swift_bridgeObjectRelease(v52);
  v57 = v56[2];
  *(_QWORD *)(v0 + 1000) = v57;
  v58 = *(_QWORD *)(v0 + 376);
  if (v57)
  {
    v59 = *(_DWORD *)(v58 + 80);
    *(_DWORD *)(v0 + 1240) = v59;
    *(_QWORD *)(v0 + 1008) = *(_QWORD *)(v58 + 72);
    v60 = *(void (**)(uint64_t, unint64_t, uint64_t))(v58 + 16);
    *(_QWORD *)(v0 + 1016) = v60;
    v61 = *(_QWORD *)(v0 + 840);
    *(_QWORD *)(v0 + 1160) = 0;
    *(_QWORD *)(v0 + 1152) = v61;
    *(_QWORD *)(v0 + 1144) = v61;
    *(_QWORD *)(v0 + 1136) = v61;
    v62 = *(_QWORD *)(v0 + 368);
    v63 = *(_QWORD *)(v0 + 320);
    v60(v63, *(_QWORD *)(v0 + 992) + ((v59 + 32) & ~(unint64_t)v59), v62);
    v64 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56);
    *(_QWORD *)(v0 + 1168) = v64;
    v64(v63, 0, 1, v62);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v63, 1, v62) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 32))(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 368));
      v65 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)[1]);
      *(_QWORD *)(v0 + 1176) = v65;
      *v65 = v0;
      v65[1] = sub_1000846F8;
      dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
      return;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v58 + 56))(*(_QWORD *)(v0 + 320), 1, 1, *(_QWORD *)(v0 + 368));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 992));
  v66 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 1024) = v66;
  v67 = *(_QWORD *)(v66 + 16);
  *(_QWORD *)(v0 + 1032) = v67;
  if (v67)
  {
    v69 = *(_QWORD *)(v0 + 432);
    v68 = *(_QWORD *)(v0 + 440);
    v70 = *(_DWORD *)(v68 + 80);
    *(_DWORD *)(v0 + 1244) = v70;
    *(_QWORD *)(v0 + 1040) = *(_QWORD *)(v68 + 72);
    v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v68 + 16);
    *(_QWORD *)(v0 + 1048) = v71;
    v72 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    *(_QWORD *)(v0 + 1064) = 0;
    *(_QWORD *)(v0 + 1056) = v72;
    v74 = *(_QWORD *)(v0 + 456);
    v73 = *(_QWORD *)(v0 + 464);
    v75 = *(_QWORD *)(v0 + 288);
    v76 = v66 + ((v70 + 32) & ~(unint64_t)v70);
    v77 = swift_bridgeObjectRetain(v66);
    v78 = v71(v73, v76, v69, v77);
    static Log.photos.getter(v78);
    ((void (*)(uint64_t, uint64_t, uint64_t))v71)(v74, v73, v69);
    v79 = swift_retain(v75);
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v80, v81))
    {
      v189 = *(_QWORD *)(v0 + 632);
      v184 = *(_QWORD *)(v0 + 592);
      v82 = *(_QWORD *)(v0 + 456);
      v83 = *(_QWORD *)(v0 + 432);
      v162 = *(_QWORD *)(v0 + 440);
      v178 = v72;
      v84 = *(_QWORD *)(v0 + 360);
      v170 = *(_QWORD *)(v0 + 336);
      v166 = *(_QWORD *)(v0 + 328);
      v152 = *(_QWORD *)(v0 + 288);
      v85 = *(unsigned __int8 *)(v0 + 1248);
      v86 = swift_slowAlloc(22, -1);
      v174 = swift_slowAlloc(64, -1);
      v191[0] = v174;
      *(_DWORD *)v86 = 136315394;
      v87 = PhotosFaceType.description.getter(v85);
      v89 = v88;
      *(_QWORD *)(v0 + 152) = sub_100021438(v87, v88, v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v86 + 4, v86 + 12);
      swift_bridgeObjectRelease(v89);
      swift_release(v152);
      *(_WORD *)(v86 + 12) = 2080;
      SyncedPhotosFace.id.getter(v83);
      v90 = *(void (**)(uint64_t, uint64_t))(v162 + 8);
      v90(v82, v83);
      v91 = sub_100009174(&qword_1000B2A30, (uint64_t (*)(uint64_t))&type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
      v92 = dispatch thunk of CustomStringConvertible.description.getter(v166, v91);
      v94 = v93;
      (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v84, v166);
      *(_QWORD *)(v0 + 160) = sub_100021438(v92, v94, v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v181, v86 + 14, v86 + 22);
      swift_bridgeObjectRelease(v94);
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Inserting face, type = %s: %s", (uint8_t *)v86, 0x16u);
      swift_arrayDestroy(v174, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v174, -1, -1);
      swift_slowDealloc(v86, -1, -1);

      v178(v189, v184);
    }
    else
    {
      v112 = *(_QWORD *)(v0 + 632);
      v113 = *(_QWORD *)(v0 + 592);
      v114 = *(_QWORD *)(v0 + 288);
      v90 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 8);
      v90(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
      swift_release(v114);

      v72(v112, v113);
    }
    *(_QWORD *)(v0 + 1072) = v90;
    SyncedPhotosFace.id.getter(*(_QWORD *)(v0 + 432));
    v115 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PhotosFaceIDDatabase.insert(id:)[1]);
    *(_QWORD *)(v0 + 1080) = v115;
    *v115 = v0;
    v115[1] = sub_100083424;
    dispatch thunk of PhotosFaceIDDatabase.insert(id:)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720));
  }
  else
  {
    v95 = *(_QWORD *)(v0 + 704);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 976));
    v96 = swift_release(v95);
    if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
      v96 = sub_100022934(*(unsigned __int8 *)(v0 + 1248));
    v97 = *(_QWORD *)(v0 + 688);
    v98 = *(_QWORD *)(v0 + 680);
    v99 = *(_QWORD *)(v0 + 672);
    v100 = *(_QWORD *)(v0 + 584);
    v101 = *(_QWORD *)(v0 + 568);
    v102 = *(_QWORD *)(v0 + 560);
    if (*(_QWORD *)(v0 + 968))
    {
      swift_willThrow(v96);
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v103 = *(_QWORD *)(v0 + 664);
      v104 = *(_QWORD *)(v0 + 656);
      v105 = *(_QWORD *)(v0 + 648);
      v106 = *(_QWORD *)(v0 + 640);
      v107 = *(_QWORD *)(v0 + 632);
      v108 = *(_QWORD *)(v0 + 624);
      v109 = *(_QWORD *)(v0 + 616);
      v110 = *(_QWORD *)(v0 + 608);
      v111 = *(_QWORD *)(v0 + 584);
      v125 = *(_QWORD *)(v0 + 576);
      v126 = *(_QWORD *)(v0 + 552);
      v128 = *(_QWORD *)(v0 + 528);
      v130 = *(_QWORD *)(v0 + 520);
      v132 = *(_QWORD *)(v0 + 512);
      v134 = *(_QWORD *)(v0 + 504);
      v136 = *(_QWORD *)(v0 + 496);
      v138 = *(_QWORD *)(v0 + 488);
      v140 = *(_QWORD *)(v0 + 480);
      v142 = *(_QWORD *)(v0 + 472);
      v144 = *(_QWORD *)(v0 + 464);
      v146 = *(_QWORD *)(v0 + 456);
      v148 = *(_QWORD *)(v0 + 448);
      v150 = *(_QWORD *)(v0 + 424);
      v153 = *(_QWORD *)(v0 + 416);
      v156 = *(_QWORD *)(v0 + 408);
      v159 = *(_QWORD *)(v0 + 400);
      v163 = *(_QWORD *)(v0 + 392);
      v167 = *(_QWORD *)(v0 + 384);
      v171 = *(_QWORD *)(v0 + 360);
      v175 = *(_QWORD *)(v0 + 352);
      v179 = *(_QWORD *)(v0 + 344);
      v182 = *(_QWORD *)(v0 + 320);
      v185 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v103);
      swift_task_dealloc(v104);
      swift_task_dealloc(v105);
      swift_task_dealloc(v106);
      swift_task_dealloc(v107);
      swift_task_dealloc(v108);
      swift_task_dealloc(v109);
      swift_task_dealloc(v110);
      swift_task_dealloc(v111);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v128);
      swift_task_dealloc(v130);
      swift_task_dealloc(v132);
      swift_task_dealloc(v134);
      swift_task_dealloc(v136);
      swift_task_dealloc(v138);
      swift_task_dealloc(v140);
      swift_task_dealloc(v142);
      swift_task_dealloc(v144);
      swift_task_dealloc(v146);
      swift_task_dealloc(v148);
      swift_task_dealloc(v150);
      swift_task_dealloc(v153);
      swift_task_dealloc(v156);
      swift_task_dealloc(v159);
      swift_task_dealloc(v163);
      swift_task_dealloc(v167);
      swift_task_dealloc(v171);
      swift_task_dealloc(v175);
      swift_task_dealloc(v179);
      swift_task_dealloc(v182);
      swift_task_dealloc(v185);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v101 + 8))(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 560));
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
      v116 = *(_QWORD *)(v0 + 664);
      v117 = *(_QWORD *)(v0 + 656);
      v118 = *(_QWORD *)(v0 + 648);
      v119 = *(_QWORD *)(v0 + 640);
      v120 = *(_QWORD *)(v0 + 632);
      v121 = *(_QWORD *)(v0 + 624);
      v122 = *(_QWORD *)(v0 + 616);
      v123 = *(_QWORD *)(v0 + 608);
      v124 = *(_QWORD *)(v0 + 584);
      v127 = *(_QWORD *)(v0 + 576);
      v129 = *(_QWORD *)(v0 + 552);
      v131 = *(_QWORD *)(v0 + 528);
      v133 = *(_QWORD *)(v0 + 520);
      v135 = *(_QWORD *)(v0 + 512);
      v137 = *(_QWORD *)(v0 + 504);
      v139 = *(_QWORD *)(v0 + 496);
      v141 = *(_QWORD *)(v0 + 488);
      v143 = *(_QWORD *)(v0 + 480);
      v145 = *(_QWORD *)(v0 + 472);
      v147 = *(_QWORD *)(v0 + 464);
      v149 = *(_QWORD *)(v0 + 456);
      v151 = *(_QWORD *)(v0 + 448);
      v154 = *(_QWORD *)(v0 + 424);
      v157 = *(_QWORD *)(v0 + 416);
      v160 = *(_QWORD *)(v0 + 408);
      v164 = *(_QWORD *)(v0 + 400);
      v168 = *(_QWORD *)(v0 + 392);
      v172 = *(_QWORD *)(v0 + 384);
      v176 = *(_QWORD *)(v0 + 360);
      v180 = *(_QWORD *)(v0 + 352);
      v183 = *(_QWORD *)(v0 + 344);
      v186 = *(_QWORD *)(v0 + 320);
      v190 = *(_QWORD *)(v0 + 312);
      swift_task_dealloc(*(_QWORD *)(v0 + 688));
      swift_task_dealloc(v116);
      swift_task_dealloc(v117);
      swift_task_dealloc(v118);
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v127);
      swift_task_dealloc(v129);
      swift_task_dealloc(v131);
      swift_task_dealloc(v133);
      swift_task_dealloc(v135);
      swift_task_dealloc(v137);
      swift_task_dealloc(v139);
      swift_task_dealloc(v141);
      swift_task_dealloc(v143);
      swift_task_dealloc(v145);
      swift_task_dealloc(v147);
      swift_task_dealloc(v149);
      swift_task_dealloc(v151);
      swift_task_dealloc(v154);
      swift_task_dealloc(v157);
      swift_task_dealloc(v160);
      swift_task_dealloc(v164);
      swift_task_dealloc(v168);
      swift_task_dealloc(v172);
      swift_task_dealloc(v176);
      swift_task_dealloc(v180);
      swift_task_dealloc(v183);
      swift_task_dealloc(v186);
      swift_task_dealloc(v190);
    }
    (*(void (**)(void))(v0 + 8))();
  }
}

