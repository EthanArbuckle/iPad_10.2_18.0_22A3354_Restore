void sub_100003114(uint64_t a1)
{
  void *v2;
  double v3;
  id v4;

  if (+[_DASActivityDurationTracker shouldTrackActivity:](_DASActivityDurationTracker, "shouldTrackActivity:", *(_QWORD *)(a1 + 32)))
  {
    v2 = *(void **)(a1 + 40);
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startDate"));
    objc_msgSend(v4, "timeIntervalSinceNow");
    objc_msgSend(v2, "addTimeInterval:forActivity:", *(_QWORD *)(a1 + 32), -v3);

  }
}

void sub_1000032BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100003364(void *a1, uint64_t a2, int a3)
{
  void *v5;
  void *v6;

  v5 = objc_autoreleasePoolPush();
  v6 = (void *)os_transaction_create("com.apple.dasd.batterytemperature.datacollection");
  if (a3 == -536723200)
    objc_msgSend(a1, "handleBatteryNotification");

  objc_autoreleasePoolPop(v5);
}

void sub_100003DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100003EE0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 40), "deleteActivity:context:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 64), "mocSaveAndReset:", *(_QWORD *)(a1 + 56));
}

void sub_1000044D0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  int v6;
  id v7;
  __int16 v8;
  uint64_t v9;

  os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 40) + 40, 0);
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "mutableCopy");
  os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 40) + 40);
  v3 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(v2, "count");
    v5 = *(_QWORD *)(a1 + 48);
    v6 = 134218242;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Rescoring all %lu activities [%@]", (uint8_t *)&v6, 0x16u);
  }

  objc_msgSend(*(id *)(a1 + 40), "unprotectedEvaluateScoreAndRunActivities:", v2);
}

void sub_10000472C(uint64_t a1)
{
  id WeakRetained;
  void (**v2)(void);
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "callback"));
    v2[2]();

    WeakRetained = v3;
  }

}

void sub_100004778(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "currentValue"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "addObject:", v2);

}

uint64_t sub_100004B74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1[4];
  if (*(_BYTE *)(v2 + 8) && (objc_msgSend(*(id *)(v2 + 128), "containsObject:", a1[5]) & 1) == 0)
  {
    if (objc_msgSend(*(id *)(a1[4] + 136), "containsObject:", a1[5]))
      result = (uint64_t)objc_msgSend(*(id *)(a1[4] + 152), "containsObject:", a1[5]);
    else
      result = 1;
  }
  else
  {
    result = 0;
  }
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_100004CCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (*(_BYTE *)(a1 + 64))
  {
    if (v5)
      return;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "persistentStoreCoordinatorFor:", *(_QWORD *)(a1 + 40)));
    if (v6)
    {
      v11 = v6;
      v7 = objc_msgSend(objc_alloc((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v7;

      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setPersistentStoreCoordinator:", v11);
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setMergePolicy:", NSMergeByPropertyObjectTrumpMergePolicy);
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setUndoManager:", 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(a1 + 40));

      return;
    }
  }
  else
  {
    if (!v5)
      return;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v6 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = 0;
  }

}

void sub_100004E00(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 32), "objectForKeyedSubscript:", a1[5]));
  if (v2)
  {
    v3 = v2;
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = objc_msgSend(v2, "BOOLValue");
    v2 = v3;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
  }

}

void sub_1000050C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000050DC(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  double v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;

  objc_msgSend(*(id *)(a1 + 32), "mean");
  v3 = v2;
  objc_msgSend(*(id *)(a1 + 40), "getReferenceTemperatureForContext:reader:", *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
  v5 = v4;
  v6 = os_log_create("com.apple.clas", "signals");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    sub_1000E0F0C(v6, v5, v3);
  if (v3 - v5 <= 0.0)
  {
    v8 = 0;
  }
  else
  {
    v7 = (v3 - v5) / 5.0;
    if (v7 > 100.0)
      v7 = 100.0;
    v8 = (unint64_t)v7;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v3));
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v10, CFSTR("BatteryTemperatureMean"));

  objc_msgSend(*(id *)(a1 + 32), "rate");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v11, CFSTR("BatteryTemperatureRate"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v12, CFSTR("BatteryTemperatureControlEffort"));

  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(void **)(v13 + 96);
  *(_QWORD *)(v13 + 96) = v9;

}

void sub_100005908(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100005CAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100005CE4(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  double v6;
  NSObject *v7;
  void *v8;
  double v9;
  void *v10;
  void *v11;
  _BOOL4 v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  void *v26;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dk_dedup"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 168), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 104), "containsObject:", *(_QWORD *)(a1 + 32)))
    goto LABEL_18;
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 184);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(double *)(a1 + 48);
    v7 = v4;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v6));
    v23 = 138412546;
    v24 = v5;
    v25 = 2112;
    v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@ => %@", (uint8_t *)&v23, 0x16u);

  }
  v9 = *(double *)(a1 + 48);
  if (v9 == 1.79769313e308)
  {
    if (!v3)
      goto LABEL_18;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 168), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
    v10 = *(void **)(a1 + 40);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v2));
    objc_msgSend(v10, "queueCancelActivitiesForApps:", v11);
    v12 = 0;
  }
  else
  {
    v13 = fmax(v9, 450.0);
    v12 = v3 == 0;
    objc_msgSend(v3, "doubleValue");
    v15 = v13 - v14;
    if (v15 < 0.0)
      v15 = -v15;
    if (v15 <= 2.22044605e-16)
      goto LABEL_13;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v13));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 168), "setObject:forKeyedSubscript:", v11, v2);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 168), CFSTR("delays"));
  v16 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 184);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_QWORD *)(a1 + 32);
    v23 = 138412290;
    v24 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Saved new value for %@", (uint8_t *)&v23, 0xCu);
  }
LABEL_13:
  v18 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v18 + 8) && v12)
  {
    v19 = *(NSObject **)(v18 + 184);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_QWORD *)(a1 + 32);
      v23 = 138412290;
      v24 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Scheduling update for %@", (uint8_t *)&v23, 0xCu);
    }
    v21 = *(void **)(a1 + 40);
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v2));
    objc_msgSend(v21, "queueScheduleActivitiesForEligibleApps:withDelay:", v22, 1);

  }
LABEL_18:

}

void sub_100006690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100006F1C(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;

  if (a3)
  {
    v4 = *(void **)(a1 + 32);
    v5 = a2;
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(a3, "pid")));
    objc_msgSend(v4, "setObject:forKey:", v6, v5);

  }
}

void sub_100007900(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100007940(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint32_t v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  NSObject *v17;
  int v18;
  void *v19;
  void *v20;
  uint64_t v21;
  _DWORD v22[2];
  __int16 v23;
  int v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  uint64_t v30;

  v2 = *(double *)(a1 + 48);
  if (*(double *)(a1 + 56) >= 120.0)
    v3 = *(double *)(a1 + 56);
  else
    v3 = 120.0;
  if (v2 > v3 + -60.0)
    v2 = v3 + -60.0;
  if (v2 >= 60.0)
    v4 = v2;
  else
    v4 = 60.0;
  v5 = (double)arc4random_uniform(0xB4u) + 510.0;
  v6 = arc4random_uniform(0xB4u);
  if (v4 >= v5)
    v4 = v5;
  if (v3 >= (double)v6 + 810.0)
    v3 = (double)v6 + 810.0;
  v7 = +[_DASSystemContext isPluggedIn:](_DASSystemContext, "isPluggedIn:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672));
  if (*(_BYTE *)(a1 + 64))
    v8 = 1;
  else
    v8 = v7;
  if (!*(_BYTE *)(a1 + 64) && v7 && v3 < 60.0)
    v3 = (double)arc4random_uniform(0xAu) + 60.0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dateByAddingTimeInterval:", v3));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 208);
  *(_QWORD *)(v11 + 208) = v10;

  v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dateByAddingTimeInterval:", v4));
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 200);
  *(_QWORD *)(v14 + 200) = v13;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 192), "scheduleOnBehalfOf:between:and:waking:", *(_QWORD *)(a1 + 40), v8, v4, v3);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
  v17 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(unsigned __int8 *)(a1 + 64);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 200), "descriptionWithLocale:", v16));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 208), "descriptionWithLocale:", v16));
    v21 = *(_QWORD *)(a1 + 40);
    v22[0] = 67110146;
    v22[1] = v8;
    v23 = 1024;
    v24 = v18;
    v25 = 2112;
    v26 = v19;
    v27 = 2112;
    v28 = v20;
    v29 = 2112;
    v30 = v21;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Setting timer (isWaking=%u, activityRequiresWaking=%u) between %@ and %@ for %@", (uint8_t *)v22, 0x2Cu);

  }
}

void sub_100007BC4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "activityCanceled:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void sub_100008318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100008338(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  dispatch_time_t v5;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "addObject:", *(_QWORD *)(a1 + 40));
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "count");
  v3 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v2 >= *(_QWORD *)(v3 + 16))
  {
    objc_msgSend((id)v3, "unprotectedExecuteWorkItems");
  }
  else if (v2 == (id)1)
  {
    v4 = *(NSObject **)(v3 + 56);
    v5 = dispatch_time(0, (uint64_t)(*(double *)(v3 + 8) * 1000000000.0));
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(*(double *)(*(_QWORD *)(a1 + 32) + 8) / 10.0 * 1000000000.0));
    dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 56));
  }
}

id sub_100008400(_QWORD *a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "containsObject:", a1[5]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100008434(uint64_t a1)
{
  id v2;
  _DASActivityRecorder *v3;

  v3 = objc_opt_new(_DASActivityRecorder);
  v2 = -[_DASActivityRecorder createOrUpdateActivity:context:](v3, "createOrUpdateActivity:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 48), "mocSaveAndReset:", *(_QWORD *)(a1 + 40));

}

void sub_10000929C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *j;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *k;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];
  _BYTE v42[128];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 144), "addObjectsFromArray:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 152), "addObjectsFromArray:", *(_QWORD *)(a1 + 48));
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "mutableCopy");
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v3 = *(id *)(a1 + 48);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v37;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "containsObject:", v8) & 1) == 0)
        {
          if (objc_msgSend(v8, "length"))
          {
            objc_msgSend(v2, "removeObject:", v8);
            if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "containsObject:", v8) & 1) != 0
              || (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 120), "containsObject:", v8) & 1) != 0
              || objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 104), "containsObject:", v8)
              && (v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 168), "objectForKeyedSubscript:", v8)),
                  v9,
                  v9))
            {
              v10 = *(void **)(a1 + 56);
              v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dk_dedup"));
              objc_msgSend(v10, "addObject:", v11);

            }
          }
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
    }
    while (v5);
  }

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v13 = *(id *)(a1 + 48);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v33;
    do
    {
      for (j = 0; j != v15; j = (char *)j + 1)
      {
        if (*(_QWORD *)v33 != v16)
          objc_enumerationMutation(v13);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)j), "dk_dedup"));
        objc_msgSend(v12, "addObject:", v18);

      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
    }
    while (v15);
  }

  objc_msgSend(*(id *)(a1 + 40), "queueHandleAppsRevived:", v12);
  objc_msgSend(*(id *)(a1 + 40), "queueCancelActivitiesForApps:", v12);
  v19 = objc_msgSend(v12, "copy");
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(void **)(v20 + 160);
  *(_QWORD *)(v20 + 160) = v19;

  objc_msgSend(*(id *)(a1 + 40), "queueUpdateLastLaunchTimesToDate:forApps:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56));
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v22 = *(id *)(*(_QWORD *)(a1 + 40) + 176);
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v28, v40, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v29;
    do
    {
      for (k = 0; k != v24; k = (char *)k + 1)
      {
        if (*(_QWORD *)v29 != v25)
          objc_enumerationMutation(v22);
        objc_msgSend(v2, "removeObject:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)k), (_QWORD)v28);
      }
      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v28, v40, 16);
    }
    while (v24);
  }

  v27 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v27 + 8))
  {
    if (os_log_type_enabled(*(os_log_t *)(v27 + 184), OS_LOG_TYPE_DEBUG))
      sub_1000E711C();
    objc_msgSend(*(id *)(a1 + 40), "queueScheduleActivitiesForEligibleApps:withDelay:", v2, 1, (_QWORD)v28);
  }

}

void sub_100009638(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *j;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  id v21;
  id v22;
  id obj;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t v32[128];
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  _BYTE v37[128];

  v22 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keyPaths"));
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v3;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        v9 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 672), "objectForKeyedSubscript:", v8));
          *(_DWORD *)buf = 138412546;
          v34 = v8;
          v35 = 2112;
          v36 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Trigger: %@ is now [%@]", buf, 0x16u);

        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 344), "addWorkItem:", v8);
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
    }
    while (v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 336), "addWorkItem:", v22);
  if (objc_msgSend(*(id *)(a1 + 48), "isEqualToString:", CFSTR("com.apple.das.apppolicy.appchanged")))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[_DASApplicationPolicy focalApplicationsWithContext:](_DASApplicationPolicy, "focalApplicationsWithContext:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 672)));
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v25;
      do
      {
        for (j = 0; j != v14; j = (char *)j + 1)
        {
          if (*(_QWORD *)v25 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)j);
          if (objc_msgSend(v17, "length"))
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dk_dedup"));
            objc_msgSend(v11, "addObject:", v18);

          }
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
      }
      while (v14);
    }

    v19 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Foreground apps changed—-%@", buf, 0xCu);
    }

    v20 = *(void **)(*(_QWORD *)(a1 + 40) + 680);
    v21 = objc_msgSend(v11, "copy");
    objc_msgSend(v20, "handleAppsForegrounded:", v21);

  }
  if (objc_msgSend(*(id *)(a1 + 48), "isEqualToString:", CFSTR("com.apple.das.userRequestedBackup")))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "syncRequested");

}

void sub_10000A3B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000BBF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000C424(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000C588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000CA9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000D8B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000DA60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000DF44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000E11C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000EDF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10000EE14(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "cancelActivities:", *(_QWORD *)(a1 + 32));
}

void sub_10000F08C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000F488(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000FC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10001099C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100010CF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100010EF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100010FF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001100C(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_100011040(uint64_t a1)
{
  id *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v2 = (id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceActivityTimeline"));
  v4 = +[_DASPredictionManager predictionNeedsUpdating:atDate:lastUpdatedAt:](_DASPredictionManager, "predictionNeedsUpdating:atDate:lastUpdatedAt:", v3, v2[1], *((_QWORD *)*v2 + 7));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "predictionForDeviceActivity"));
    objc_msgSend(*v2, "setDeviceActivityTimeline:", v5);

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPLLogger sharedInstance](_DASPLLogger, "sharedInstance"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "deviceActivityTimeline"));
    objc_msgSend(v6, "recordPrediction:key:valueMultiplier:", v7, CFSTR("deviceActivityPrediction"), 100);

    v8 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("predictions")));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      sub_1000E1CCC(v2, v8);

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 56), *(id *)(a1 + 40));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceActivityTimeline"));
    +[_DASPredictionManager setPrediction:forKey:](_DASPredictionManager, "setPrediction:forKey:", v9, CFSTR("deviceActivity"));

  }
}

void sub_100011180(uint64_t a1)
{
  id *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;

  v2 = (id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginTimeline"));
  v4 = +[_DASPredictionManager predictionNeedsUpdating:atDate:lastUpdatedAt:](_DASPredictionManager, "predictionNeedsUpdating:atDate:lastUpdatedAt:", v3, v2[1], *((_QWORD *)*v2 + 9));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predictionForDevicePluggedIn"));
    objc_msgSend(*(id *)(a1 + 32), "setPluginTimeline:", v5);

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 72), *(id *)(a1 + 40));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginTimeline"));
    +[_DASPredictionManager setPrediction:forKey:](_DASPredictionManager, "setPrediction:forKey:", v6, CFSTR("plugin"));

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPLLogger sharedInstance](_DASPLLogger, "sharedInstance"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginTimeline"));
    objc_msgSend(v7, "recordPrediction:key:valueMultiplier:", v8, CFSTR("powerPluggedInPrediction"), 100);

    v9 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("predictions")));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      sub_1000E2A50(v2, v9);

  }
}

void sub_100012468(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100012B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_1000139D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100015624(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000163F8(uint64_t a1)
{
  uint64_t result;

  result = IOPMAssertionRelease(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

void sub_10001724C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100017518(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "removeObject:", *(_QWORD *)(a1 + 32));
}

id sub_100017528(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "checkControlAction:", *(_QWORD *)(a1 + 40));
}

id sub_100017534(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "stopTrackingActivity:", *(_QWORD *)(a1 + 40));
}

id sub_100017540(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleStateTransitionForProcess:withUpdate:");
}

id sub_100017548(uint64_t a1)
{
  id result;
  void *v3;
  double v4;
  double v5;

  result = (id)+[_DASActivityDurationTracker shouldTrackActivity:](_DASActivityDurationTracker, "shouldTrackActivity:", *(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startDate"));
    objc_msgSend(v3, "timeIntervalSinceNow");
    v5 = -v4;

    return objc_msgSend(*(id *)(a1 + 40), "addTimeInterval:forActivity:", *(_QWORD *)(a1 + 32), fmax(v5, 3600.0));
  }
  return result;
}

id sub_1000175BC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleStateTransitionForProcess:withUpdate:");
}

id sub_1000175C4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "systemMemoryPressure");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = result;
  return result;
}

_BYTE *sub_1000175F0(uint64_t a1)
{
  _BYTE *result;
  uint64_t v3;

  result = *(_BYTE **)(a1 + 32);
  if (result[8])
  {
    objc_msgSend(result, "recordValue");
    ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
    v3 = *(_QWORD *)(a1 + 32);
    if (!(*(_QWORD *)(v3 + 80) % *(_QWORD *)(v3 + 32)))
    {
      objc_msgSend((id)v3, "analyzeValues:currentContext:", *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 40));
      v3 = *(_QWORD *)(a1 + 32);
    }
    return objc_msgSend(*(id *)(v3 + 64), "scheduleOnBehalfOf:between:and:waking:", CFSTR("com.apple.das.monitor.batteryTemperature"), 0, (double)*(unint64_t *)(v3 + 72), (double)*(unint64_t *)(v3 + 72));
  }
  return result;
}

void sub_10001767C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100017694(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1000176AC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1000176BC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1000176DC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_1000176EC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_1000176FC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_100017708(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_10001771C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_100017730(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_10001773C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void sub_100017750(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_100017760(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1000177F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Activity %@ not tracked as being started, ignoring it", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000180C4(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001AB3C0;
  qword_1001AB3C0 = (uint64_t)v1;

}

id sub_10001816C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "queue_handleMode:updatedToState:", a3, a2);
}

void sub_1000182CC(id a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDaemon sharedInstance](_DASDaemon, "sharedInstance"));
  v3 = CFSTR("com.apple.das.cpm.modeChanged");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v3, 1));
  objc_msgSend(v1, "handleTriggersBatched:", v2);

}

void sub_1000184B0(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001AB3D0;
  qword_1001AB3D0 = (uint64_t)v1;

}

void sub_100018F30(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001AB3E0;
  qword_1001AB3E0 = (uint64_t)v1;

}

void sub_10001AEC4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_10001B0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001B0D8(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  uint8_t v13[8];
  id to;

  v5 = a2;
  if (a3)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDataProtectionStateMonitor dataProtectionClassC](_DASDataProtectionStateMonitor, "dataProtectionClassC"));
    v7 = objc_msgSend(v5, "isEqualToString:", v6);

    if (v7)
    {
      objc_copyWeak(&to, (id *)(a1 + 32));
      v8 = objc_loadWeakRetained(&to);

      if (v8)
      {
        v9 = objc_loadWeakRetained(&to);
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "log"));

        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Class C now available.", v13, 2u);
        }

        v11 = objc_loadWeakRetained(&to);
        objc_msgSend(v11, "setClassCUnlocked:", 1);

        v12 = objc_loadWeakRetained(&to);
        objc_msgSend(v12, "setDataProtectionStateMonitor:", 0);

      }
      objc_destroyWeak(&to);
    }
  }

}

void sub_10001B1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001B24C(id a1)
{
  _APRSPrewarmRecommendation *v1;
  void *v2;

  v1 = objc_opt_new(_APRSPrewarmRecommendation);
  v2 = (void *)qword_1001AB3E8;
  qword_1001AB3E8 = (uint64_t)v1;

}

void sub_10001B790(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;
  id v10;

  v10 = a3;
  v5 = a2;
  v6 = (uint64_t)objc_msgSend(v10, "integerValue");
  v7 = 1.0;
  if (v6 <= 999)
  {
    objc_msgSend(v10, "doubleValue", 1.0);
    v7 = v8 / 1000.0;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v7));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, v5);

}

void sub_10001B8B8(uint64_t a1, void *a2, void *a3)
{
  double v5;
  void *v6;
  _UNKNOWN **v7;
  id v8;
  id v9;

  v9 = a2;
  objc_msgSend(a3, "doubleValue");
  if (v5 >= 0.25)
  {
    v6 = *(void **)(a1 + 32);
    if (v5 >= 0.75)
      v7 = &off_10016E4C8;
    else
      v7 = &off_10016E4B0;
    v8 = v9;
  }
  else
  {
    v6 = *(void **)(a1 + 32);
    v7 = &off_10016E498;
    v8 = v9;
  }
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, v8);

}

uint64_t sub_10001BCFC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  signed int v19;
  void *v20;
  signed int v21;
  void *v22;
  int v23;
  void *v24;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5));
  objc_msgSend(v7, "doubleValue");
  v9 = v8;

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));
  objc_msgSend(v10, "doubleValue");
  v12 = v11;

  if (v9 <= v12)
  {
    if (v12 <= v9)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationRecord bundleRecordWithApplicationIdentifier:error:](LSApplicationRecord, "bundleRecordWithApplicationIdentifier:error:", v5, 0));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "bundleIdentifier"));

      v16 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationRecord bundleRecordWithApplicationIdentifier:error:](LSApplicationRecord, "bundleRecordWithApplicationIdentifier:error:", v6, 0));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "bundleIdentifier"));

      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v15));
      v19 = objc_msgSend(v18, "intValue");
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v17));
      v21 = objc_msgSend(v20, "intValue");

      if (v19 <= v21)
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v15));
        v23 = objc_msgSend(v22, "intValue");
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v17));
        v13 = v23 > (int)objc_msgSend(v24, "intValue");

      }
      else
      {
        v13 = -1;
      }

    }
    else
    {
      v13 = 1;
    }
  }
  else
  {
    v13 = -1;
  }

  return v13;
}

id sub_10001EDCC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "cleanupTimerHandler");
}

void sub_10001EE48(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001AB400;
  qword_1001AB400 = (uint64_t)v1;

}

void sub_10001F098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10001F734(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001FA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000203F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000204B8(uint64_t a1)
{
  void *v2;
  void *v3;
  _UNKNOWN **v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("rateLimited"));

  if (*(_BYTE *)(a1 + 40))
    v4 = &off_10016E4E0;
  else
    v4 = &off_10016E4F8;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("rateLimitedInt"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rateLimitConfigurationName"));
  v6 = (void *)v5;
  if (v5)
    v7 = v5;
  else
    v7 = _DASDefaultConfigurationName;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v7, CFSTR("configurationName"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[_DASRateLimiterUtilities rateLimitIdentifierForActivity:](_DASRateLimiterUtilities, "rateLimitIdentifierForActivity:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("group"));

  return v2;
}

void sub_1000208FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100020A78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100020B64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000214F0(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "locked_modulateBudgets");
  objc_autoreleasePoolPop(v2);
}

id sub_100021520(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "locked_modulateBudgets");
}

void sub_1000237E8(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB418;
  qword_1001AB418 = (uint64_t)v1;

}

void sub_1000238C8(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  __int128 v8;
  id v9;
  uint64_t v10;
  void *i;
  _DASWidgetRefreshBudget *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  _DASWidgetRefreshBudget *v20;
  NSObject *v21;
  NSObject *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  _DASWidgetRefreshBudget *v29;
  _BYTE v30[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKey:", CFSTR("budgets")));
  v3 = objc_msgSend(v2, "mutableCopy");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 16);
  *(_QWORD *)(v4 + 16) = v3;

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v6 = *(id *)(a1 + 40);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  if (v7)
  {
    v9 = v7;
    v10 = *(_QWORD *)v25;
    *(_QWORD *)&v8 = 138412290;
    v23 = v8;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v10)
          objc_enumerationMutation(v6);
        v12 = *(_DASWidgetRefreshBudget **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v13 = *(_QWORD **)(a1 + 32);
        v14 = (void *)v13[2];
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "convertNameFromFullToCompact:", v12, v23, (_QWORD)v24));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", v15));
        v17 = objc_msgSend(v16, "mutableCopy");

        if (v17)
        {
          objc_msgSend(v17, "setObject:forKeyedSubscript:", v12, CFSTR("name"));
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("budgetID")));

          if (!v18)
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(+[_DASWidgetRefreshBudgetManager widgetBudgetIDFromBudgetName:](_DASWidgetRefreshBudgetManager, "widgetBudgetIDFromBudgetName:", v12));
            objc_msgSend(v17, "setObject:forKeyedSubscript:", v19, CFSTR("budgetID"));

          }
          v20 = -[_DASWidgetRefreshBudget initWithDictionary:]([_DASWidgetRefreshBudget alloc], "initWithDictionary:", v17);
          if (v20)
            objc_msgSend(*(id *)(a1 + 48), "addObject:", v20);
          v21 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v23;
            v29 = v20;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Found in store: %@", buf, 0xCu);
          }

        }
        else
        {
          v22 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v23;
            v29 = v12;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Budget for %@ not found in store", buf, 0xCu);
          }
        }

      }
      v9 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
    }
    while (v9);
  }

}

id sub_100023BE4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = *(id *)(a1 + 40);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dictionaryRepresentation", (_QWORD)v17));
        v12 = *(_QWORD **)(a1 + 32);
        v13 = (void *)v12[2];
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "name"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "convertNameFromFullToCompact:", v14));
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v11, v15);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v7);
  }

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), CFSTR("budgets"));
}

id sub_100023DE0(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dictionaryRepresentation"));
  v3 = *(_QWORD **)(a1 + 32);
  v4 = (void *)v3[2];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "convertNameFromFullToCompact:", v5));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v2, v6);

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), CFSTR("budgets"));
}

id sub_100023EEC(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 40), *(id *)(a1 + 40));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKey:", *(_QWORD *)(a1 + 40), CFSTR("lastModulation"));
}

uint64_t sub_100023FD8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100023FE8(uint64_t a1)
{

}

void sub_100023FF0(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 40));
}

void sub_1000243C4(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001AB420;
  qword_1001AB420 = (uint64_t)v1;

}

int64_t sub_1000244EC(id a1, NSNumber *a2, NSNumber *a3)
{
  NSNumber *v4;
  NSNumber *v5;
  double v6;
  double v7;
  double v8;
  int64_t v9;
  double v10;
  double v11;
  double v12;

  v4 = a2;
  v5 = a3;
  -[NSNumber doubleValue](v4, "doubleValue");
  v7 = v6;
  -[NSNumber doubleValue](v5, "doubleValue");
  if (v7 <= v8)
  {
    -[NSNumber doubleValue](v4, "doubleValue");
    v11 = v10;
    -[NSNumber doubleValue](v5, "doubleValue");
    v9 = v11 < v12;
  }
  else
  {
    v9 = -1;
  }

  return v9;
}

void sub_1000247E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  v6 = (void *)os_transaction_create("com.apple.dasd.swappredictionslogging");
  v7 = objc_autoreleasePoolPush();
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[_DASAppResumePLLogger applicationBundleIDForExecutableName:](_DASAppResumePLLogger, "applicationBundleIDForExecutableName:", v12));

  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[_DASAppResumePLLogger applicationBundleIDForExecutableName:](_DASAppResumePLLogger, "applicationBundleIDForExecutableName:", v12));
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, CFSTR("BundleID"));

  }
  else
  {
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v12, CFSTR("BundleID"));
  }
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v5, CFSTR("PredictionScore"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", kAppResumePredictionTypeSwap));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v11, CFSTR("PredictionType"));

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
  objc_autoreleasePoolPop(v7);

}

void sub_100024934(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  v5 = a3;
  v6 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v6, CFSTR("BundleID"));

  objc_msgSend(v8, "setObject:forKeyedSubscript:", v5, CFSTR("PredictionScore"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", kAppResumePredictionTypeProactive));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, CFSTR("PredictionType"));

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
}

void sub_100025020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100025240(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "logUpdatedCarryStatus");
  objc_msgSend(v3, "setTaskCompleted");

}

Class sub_100025C24(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1001AB438)
  {
    v5 = off_10015D630;
    v6 = 0;
    qword_1001AB438 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1001AB438)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("ATXProactiveSuggestionClient");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_1000E0070();
LABEL_8:
    free(v2);
  }
  qword_1001AB430 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100025D18(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void sub_100025EA4(uint64_t a1)
{
  _DASRemoteDeviceNearbyMonitor *v1;
  void *v2;

  v1 = -[_DASRemoteDeviceNearbyMonitor initWithDaemon:]([_DASRemoteDeviceNearbyMonitor alloc], "initWithDaemon:", *(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001AB448;
  qword_1001AB448 = (uint64_t)v1;

}

id sub_1000260D8(uint64_t a1)
{
  void *v2;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingWidgets"));
  objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));

  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  return objc_msgSend(*(id *)(a1 + 32), "protectedRegisterForRemoteDevices");
}

id sub_1000261E0(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingWidgets"));
  v3 = objc_msgSend(v2, "containsObject:", *(_QWORD *)(a1 + 40));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingWidgets"));
    objc_msgSend(v4, "removeObject:", *(_QWORD *)(a1 + 40));

  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  return objc_msgSend(*(id *)(a1 + 32), "protectedRegisterForRemoteDevices");
}

void sub_1000264C0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  void *v23;
  _BYTE v24[128];

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingWidgets", 0));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v3);
        if (*(_QWORD *)(a1 + 40))
        {
          v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
          v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "remoteDevice"));
          if (v9)
          {
            v10 = (void *)v9;
            v11 = *(void **)(a1 + 40);
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "remoteDevice"));
            LODWORD(v11) = objc_msgSend(v11, "isEqualToString:", v12);

            if ((_DWORD)v11)
              objc_msgSend(v2, "addObject:", v8);
          }
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
    }
    while (v5);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  if (objc_msgSend(v2, "count"))
  {
    v13 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("NWBrowser")));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v21 = v14;
      v22 = 2112;
      v23 = v2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Remote device nearby: %@, Re-evaluating activities: %@", buf, 0x16u);
    }

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "daemon"));
    objc_msgSend(v15, "evaluateScoreAndRunActivities:", v2);

  }
}

void sub_100026EE8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100026F04(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  NSObject *v6;
  char changes;
  nw_endpoint_t v8;
  nw_endpoint_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  nw_endpoint_t v14;
  uint64_t device_id;
  NSObject *WeakRetained;

  v5 = a2;
  v6 = a3;
  changes = nw_browse_result_get_changes(v5, v6);
  if ((changes & 2) != 0)
  {
    v14 = nw_browse_result_copy_endpoint(v6);
    v9 = v14;
    if (v14)
    {
      device_id = nw_endpoint_get_device_id(v14);
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      v12 = WeakRetained;
      if (!device_id || !WeakRetained)
        goto LABEL_16;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", device_id));
      -[NSObject updateDeviceNearby:](v12, "updateDeviceNearby:", v13);
LABEL_11:

LABEL_16:
      goto LABEL_17;
    }
    v12 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("NWBrowser")));
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
LABEL_15:
    sub_1000E0218();
    goto LABEL_16;
  }
  if ((changes & 4) != 0)
  {
    v8 = nw_browse_result_copy_endpoint(v5);
    v9 = v8;
    if (v8)
    {
      v10 = nw_endpoint_get_device_id(v8);
      v11 = objc_loadWeakRetained((id *)(a1 + 32));
      v12 = v11;
      if (!v10 || !v11)
        goto LABEL_16;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
      -[NSObject updateDeviceLost:](v12, "updateDeviceLost:", v13);
      goto LABEL_11;
    }
    v12 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("NWBrowser")));
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_17:

}

void sub_100027094(id a1, int a2, OS_nw_error *a3)
{
  OS_nw_error *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  v4 = a3;
  switch(a2)
  {
    case 0:
      v5 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("NWBrowser")));
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      v13 = 0;
      v6 = "Browser entered invalid state";
      v7 = (uint8_t *)&v13;
      break;
    case 1:
      v5 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("NWBrowser")));
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      v12 = 0;
      v6 = "Browser entered ready state";
      v7 = (uint8_t *)&v12;
      break;
    case 2:
      v5 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("NWBrowser")));
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      v11 = 0;
      v6 = "Browser entered failed state";
      v7 = (uint8_t *)&v11;
      break;
    case 3:
      v5 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("NWBrowser")));
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      v10 = 0;
      v6 = "Browser entered cancelled state";
      v7 = (uint8_t *)&v10;
      break;
    case 4:
      v5 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("NWBrowser")));
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      v9 = 0;
      v6 = "Browser entered waiting state";
      v7 = (uint8_t *)&v9;
      break;
    default:
      goto LABEL_14;
  }
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v6, v7, 2u);
LABEL_13:

LABEL_14:
  if (v4)
  {
    v8 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("NWBrowser")));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1000E0244();

  }
}

id sub_100027508(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "energyConsumptionHandler:", a2);
}

void sub_100027554(id a1)
{
  _DASEnergyUsageTracker *v1;
  void *v2;

  v1 = objc_opt_new(_DASEnergyUsageTracker);
  v2 = (void *)qword_1001AB458;
  qword_1001AB458 = (uint64_t)v1;

}

void sub_10002774C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000278E8(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  NSObject *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *j;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id obj;
  id obja;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  uint8_t v41[128];
  uint8_t buf[4];
  id v43;

  v28 = a2;
  v29 = a3;
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextQueries keyPathForPluginStatus](_CDContextQueries, "keyPathForPluginStatus"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6));
  v8 = objc_msgSend(v7, "BOOLValue");

  v9 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v8));
    *(_DWORD *)buf = 138412290;
    v43 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Plugin status is now %@", buf, 0xCu);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "reportChargingStatus:", v8);
  if ((_DWORD)v8)
  {
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startedDASActivities"));
    objc_sync_enter(obj);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startedDASActivities"));
    v13 = objc_msgSend(v12, "mutableCopy");

    v14 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v43 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Plugged in! Stop tracking activities %@", buf, 0xCu);
    }
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v15 = v13;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v37;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v37 != v17)
            objc_enumerationMutation(v15);
          objc_msgSend(*(id *)(a1 + 32), "stopTrackingActivity:", *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i));
        }
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
      }
      while (v16);
    }

    objc_sync_exit(obj);
    obja = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startedActivities"));
    objc_sync_enter(obja);
    v19 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startedActivities"));
      *(_DWORD *)buf = 138412290;
      v43 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Plugged in! Stop tracking activity names %@", buf, 0xCu);

    }
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startedActivities"));
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    if (v22)
    {
      v23 = *(_QWORD *)v33;
      do
      {
        for (j = 0; j != v22; j = (char *)j + 1)
        {
          if (*(_QWORD *)v33 != v23)
            objc_enumerationMutation(v21);
          v25 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)j);
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
          objc_msgSend(v26, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("selfBudgeted"));
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "reportStopEvent:withInfo:", v25, v26);

        }
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
      }
      while (v22);
    }

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startedActivities"));
    objc_msgSend(v27, "removeAllObjects");

    objc_sync_exit(obja);
  }

}

void sub_100027CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100028580(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100028CA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100028E74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100029004(id a1)
{
  _DASPolicyDataCollection *v1;
  void *v2;

  v1 = objc_alloc_init(_DASPolicyDataCollection);
  v2 = (void *)qword_1001AB460;
  qword_1001AB460 = (uint64_t)v1;

}

id sub_1000292D8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "evaluateAndReportBlockingReasonsForAllCriteria");
  objc_msgSend(*(id *)(a1 + 32), "reportPolicyBlockingReasonsForIntensiveTasksToPPS");
  return objc_msgSend(*(id *)(a1 + 32), "reportPolicyBlockingReasonsForSpecificTasksToPPS");
}

id sub_100029C8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dictForCAWithBitmap:policyName:priority:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_100029C9C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dictForCAWithBitmap:policyName:priority:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), 0);
}

id sub_100029CB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dictForCAWithBitmap:policyName:priority:", *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 40));
}

id sub_100029CC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dictForCAWithBitmap:policyName:priority:", *(_QWORD *)(a1 + 40), 0, 0);
}

uint64_t sub_10002B234(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 32));
}

void sub_10002B9C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10002BCF8(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001AB480;
  qword_1001AB480 = (uint64_t)v1;

}

void sub_10002C06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_10002C084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  objc_msgSend(*(id *)(a1 + 32), "dailyDataBudgetFromPlan:error:", a2, a3);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v4;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10002C488(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  void *i;
  void *v13;
  void *v14;
  double v15;
  void *v16;
  double v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];

  v3 = a2;
  if (os_log_type_enabled(*(os_log_t *)(*(_QWORD *)(a1 + 32) + 24), OS_LOG_TYPE_DEBUG))
    sub_1000E051C();
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v23;
    v8 = kUsageNetworkCellInBytes;
    v9 = kUsageNetworkCellOutBytes;
    v10 = 0.0;
    v11 = 0.0;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v7)
          objc_enumerationMutation(v4);
        v13 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v8, (_QWORD)v22));
        objc_msgSend(v14, "doubleValue");
        v11 = v11 + v15;

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v9));
        objc_msgSend(v16, "doubleValue");
        v10 = v10 + v17;

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v6);
  }
  else
  {
    v10 = 0.0;
    v11 = 0.0;
  }

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11));
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v18, _DASUpdateActivityDownloadedOnCellKey);

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v10));
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v19, _DASUpdateActivityUploadedOnCellKey);

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  v20 = *(_QWORD *)(a1 + 40);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityToDataMap"));
  objc_msgSend(v21, "setObject:forKeyedSubscript:", v20, *(_QWORD *)(a1 + 48));

  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));

}

void sub_10002C6C8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  void *i;
  void *v13;
  void *v14;
  double v15;
  void *v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  double v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];

  v3 = a2;
  if (os_log_type_enabled(*(os_log_t *)(*(_QWORD *)(a1 + 32) + 24), OS_LOG_TYPE_DEBUG))
    sub_1000E05A8();
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v29;
    v8 = kUsageNetworkCellInBytes;
    v9 = kUsageNetworkCellOutBytes;
    v10 = 0.0;
    v11 = 0.0;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v7)
          objc_enumerationMutation(v4);
        v13 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v8, (_QWORD)v28));
        objc_msgSend(v14, "doubleValue");
        v11 = v11 + v15;

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v9));
        objc_msgSend(v16, "doubleValue");
        v10 = v10 + v17;

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v6);
  }
  else
  {
    v10 = 0.0;
    v11 = 0.0;
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityToDataMap"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityToDataMap"));
  objc_msgSend(v20, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", _DASUpdateActivityDownloadedOnCellKey));
  objc_msgSend(v21, "doubleValue");
  v23 = v11 - v22;

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", _DASUpdateActivityUploadedOnCellKey));
  objc_msgSend(v24, "doubleValue");
  v26 = v10 - v25;

  objc_msgSend(*(id *)(a1 + 32), "getDataConsumedFromBytesOnCell:bytesOnCellExpensive:bytesOnCellInexpensive:bytesOnWiFiExpensive:", v23 + v26, 0.0, 0.0, 0.0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v27;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));

}

void sub_10002D164(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.duetactivityscheduler", "budgetShMem");
  v2 = (void *)qword_1001AB498;
  qword_1001AB498 = (uint64_t)v1;

}

void sub_10002D280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002D298(uint64_t a1)
{
  int v2;
  NSObject *v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t buf[16];

  v2 = shm_open((const char *)objc_msgSend(CFSTR("com.apple.dasd.budgets"), "UTF8String"), 2, 384);
  if (v2 != -1)
    goto LABEL_2;
  v3 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Creating shared memory for budgeting (likely after reboot)", buf, 2u);
  }
  v4 = shm_open((const char *)objc_msgSend(CFSTR("com.apple.dasd.budgets"), "UTF8String"), 514, 384);
  if (v4 == -1)
  {
    v7 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1000E0668(v7);
  }
  else
  {
    v2 = v4;
    if (ftruncate(v4, 0x4000) != -1)
    {
LABEL_2:
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = mmap(0, 0x4000uLL, 3, 1, v2, 0);
      close(v2);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == -1)
      {
        v6 = *(NSObject **)(a1 + 32);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          sub_1000E0750(v6);
      }
      else
      {
        qword_1001AB4A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      }
      return;
    }
    close(v2);
    v5 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000E06DC(v5);
  }
}

uint64_t sub_10002D5A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002D5B8(uint64_t a1)
{

}

void sub_10002D5C0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_alloc_init(*(Class *)(a1 + 40));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10002D704(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "budgetToIndex"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));

  v4 = v14;
  if (v14)
  {
    v5 = objc_msgSend(v14, "unsignedIntValue");
    objc_msgSend(*(id *)(a1 + 40), "capacity");
    v6 = v5;
    *(_QWORD *)(qword_1001AB4A0 + ((unint64_t)v5 << 6) + 40) = v7;
    objc_msgSend(*(id *)(a1 + 40), "balance");
    *(_QWORD *)(qword_1001AB4A0 + ((unint64_t)v5 << 6) + 48) = v8;
    v9 = objc_msgSend(*(id *)(a1 + 40), "allocationType");
    *(_BYTE *)(qword_1001AB4A0 + ((unint64_t)v5 << 6) + 56) = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lastModulatedDate"));

    if (v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lastModulatedDate"));
      objc_msgSend(v11, "timeIntervalSinceReferenceDate");
      v13 = v12;

    }
    else
    {
      v13 = -1.0;
    }
    *(double *)(qword_1001AB4A0 + (v6 << 6) + 64) = v13;
    v4 = v14;
  }

}

void sub_10002D894(uint64_t a1)
{
  _BYTE *v2;
  NSObject *v3;
  unsigned __int8 v4;
  id v5;
  __int128 v6;
  void *i;
  void *v8;
  id v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  __int128 v22;
  id obj;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  _BYTE v31[128];

  v2 = malloc_type_malloc(0x810uLL, 0x1000040E865D2FFuLL);
  bzero(v2, 0x810uLL);
  v3 = objc_claimAutoreleasedReturnValue(+[_DASSharedMemoryBudgetPersistence log](_DASSharedMemoryBudgetPersistence, "log"));
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = *(id *)(a1 + 32);
  v4 = 0;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
  if (v5)
  {
    v24 = *(_QWORD *)v26;
    *(_QWORD *)&v6 = 138412290;
    v22 = v6;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v26 != v24)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v22;
          v30 = v8;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Saving budget: %@", buf, 0xCu);
        }
        v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name", v22)));
        __strcpy_chk(&v2[64 * (unint64_t)v4 + 8], objc_msgSend(v9, "UTF8String"), 32);

        objc_msgSend(v8, "capacity");
        v10 = &v2[64 * (unint64_t)v4];
        *((_QWORD *)v10 + 5) = v11;
        objc_msgSend(v8, "balance");
        *((_QWORD *)v10 + 6) = v12;
        v10[56] = objc_msgSend(v8, "allocationType");
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastModulatedDate"));

        if (v13)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastModulatedDate"));
          objc_msgSend(v14, "timeIntervalSinceReferenceDate");
          v16 = v15;

        }
        else
        {
          v16 = -1.0;
        }
        *(double *)&v2[64 * (unint64_t)v4 + 64] = v16;
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "budgetToIndex"));
        objc_sync_enter(v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v4));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "budgetToIndex"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name"));
        objc_msgSend(v19, "setObject:forKeyedSubscript:", v18, v20);

        objc_sync_exit(v17);
        ++v4;
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
    }
    while (v5);
  }

  *v2 = v4;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *v2;
    *(_DWORD *)buf = 67109120;
    LODWORD(v30) = v21;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Num Budgets: %u", buf, 8u);
  }
  memcpy((void *)qword_1001AB4A0, v2, 0x810uLL);
  free(v2);

}

void sub_10002DBB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10002DDE0(uint64_t a1)
{
  void *v2;
  id *v3;
  id *v4;
  void *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  int v21;
  id v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  uint8_t buf[32];
  __int128 v31;
  __int128 v32;

  v2 = malloc_type_malloc(0x810uLL, 0x1000040E865D2FFuLL);
  memcpy(v2, (const void *)qword_1001AB4A0, 0x810uLL);
  v3 = (id *)(a1 + 32);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v2;
  v28 = a1;
  v5 = *(void **)(a1 + 40);
  v4 = (id *)(a1 + 40);
  if (objc_msgSend(v5, "count") == (id)**((unsigned __int8 **)*v3 + 1))
  {
    v29 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v6 = *v3;
    if (**((_BYTE **)*v3 + 1))
    {
      v7 = 0;
      v8 = 8;
      while (1)
      {
        v31 = 0u;
        v32 = 0u;
        memset(buf, 0, sizeof(buf));
        v9 = (__int128 *)(v6[1] + v8);
        v10 = *v9;
        v11 = v9[1];
        v12 = v9[3];
        v31 = v9[2];
        v32 = v12;
        *(_OWORD *)buf = v10;
        *(_OWORD *)&buf[16] = v11;
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "validatedStringFromStoredValue:withAllowedNames:", buf, *v4));
        if (!v13)
          break;
        if (*((double *)&v32 + 1) == 0.0 || *((double *)&v32 + 1) == -1.0)
          v15 = 0;
        else
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *((double *)&v32 + 1)));
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBudget budgetWithName:capacity:balance:allocationType:lastModulatedDate:](_DASBudget, "budgetWithName:capacity:balance:allocationType:lastModulatedDate:", v13, v32, v15, v31));
        -[NSObject addObject:](v29, "addObject:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "budgetToIndex"));
        objc_sync_enter(v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v7));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "budgetToIndex"));
        objc_msgSend(v19, "setObject:forKeyedSubscript:", v18, v13);

        objc_sync_exit(v17);
        ++v7;
        v6 = *v3;
        v8 += 64;
        if (v7 >= **((unsigned __int8 **)*v3 + 1))
          goto LABEL_12;
      }
      v27 = objc_claimAutoreleasedReturnValue(+[_DASSharedMemoryBudgetPersistence log](_DASSharedMemoryBudgetPersistence, "log"));
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        sub_1000E07C4(v27);

    }
    else
    {
LABEL_12:
      v20 = objc_claimAutoreleasedReturnValue(+[_DASSharedMemoryBudgetPersistence log](_DASSharedMemoryBudgetPersistence, "log"));
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v21 = **((unsigned __int8 **)*v3 + 1);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v21;
        *(_WORD *)&buf[8] = 2112;
        *(_QWORD *)&buf[10] = v29;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Stored Budgets: %u %@", buf, 0x12u);
      }

      v22 = -[NSObject copy](v29, "copy");
      v23 = *(_QWORD *)(*(_QWORD *)(v28 + 48) + 8);
      v24 = *(void **)(v23 + 40);
      *(_QWORD *)(v23 + 40) = v22;

    }
    v26 = v29;
  }
  else
  {
    v25 = objc_claimAutoreleasedReturnValue(+[_DASSharedMemoryBudgetPersistence log](_DASSharedMemoryBudgetPersistence, "log"));
    v26 = v25;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      sub_1000E0804((uint64_t)v3, v4, v25);
      v26 = v25;
    }
  }

}

void sub_10002E104(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10002E19C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceReferenceDate");
  *(_QWORD *)(qword_1001AB4A0 + 2056) = v2;
  v3 = objc_claimAutoreleasedReturnValue(+[_DASSharedMemoryBudgetPersistence log](_DASSharedMemoryBudgetPersistence, "log"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(qword_1001AB4A0 + 2056);
    v6 = 138412546;
    v7 = v4;
    v8 = 2048;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting modulation date: %@ (%lf)", (uint8_t *)&v6, 0x16u);
  }

}

void sub_10002E3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_10002E3D8(uint64_t a1)
{
  double result;

  result = *(double *)(qword_1001AB4A0 + 2056);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

char *sub_10002E414(int *a1)
{
  return strerror(*a1);
}

int *sub_10002E41C()
{
  return __error();
}

id sub_10002E424(id a1)
{
  return a1;
}

void sub_10002E4A0(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB4B8;
  qword_1001AB4B8 = (uint64_t)v1;

}

uint64_t sub_10002E86C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002E87C(uint64_t a1)
{

}

void sub_10002E884(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *j;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v44;
  id obj;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t buf[4];
  uint64_t v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  void *v59;
  _BYTE v60[128];
  _BYTE v61[128];

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextualKeyPath keyPathWithKey:](_CDContextualKeyPath, "keyPathWithKey:", kDASWidgetRefreshMaximumBudgetDailyKey));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", v2));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", kDASDailyBudgetForAllWidgetsKey));
    v5 = (uint64_t)objc_msgSend(v4, "intValue");

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", kDASDailyBudgetMaxForSystemAddedIndividualWidgetKey));
    v7 = objc_msgSend(v6, "intValue");

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", kDASDailyBudgetMaxForIndividualWidgetKey));
    v9 = objc_msgSend(v8, "intValue");

    if ((_DWORD)v5)
      goto LABEL_6;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v5 = 750;
LABEL_6:
  v42 = v3;
  if (v9)
    v10 = v9;
  else
    v10 = 50;
  if (v7)
    v11 = v7;
  else
    v11 = 50;
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12) = v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = v5;
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[_DKKnowledgeStore knowledgeStore](_DKKnowledgeStore, "knowledgeStore"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getAverageWidgetViewsPerDayWithStore:"));
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextualKeyPath keyPathWithKey:](_CDContextualKeyPath, "keyPathWithKey:", kDASWidgetSystemAddedKeyPath));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:"));
  v44 = objc_alloc_init((Class)NSMutableDictionary);
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  obj = v12;
  v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v51;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(_QWORD *)v51 != v16)
          objc_enumerationMutation(obj);
        v18 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v13, "containsObject:", v18))
          v19 = v11;
        else
          v19 = v10;
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v19));
        objc_msgSend(v44, "setObject:forKeyedSubscript:", v20, v18);

      }
      v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
    }
    while (v15);
  }
  v39 = v13;

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allocatedBudgetsWithAverageViews:groupTotalBudget:individualMaxBudgets:individualMinBudget:", obj, v5, v44, 6));
  v22 = objc_msgSend(v21, "mutableCopy");
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v24 = *(void **)(v23 + 40);
  *(_QWORD *)(v23 + 40) = v22;

  v25 = a1;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "allKeys"));
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v46, v60, 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)v47;
    do
    {
      for (j = 0; j != v28; j = (char *)j + 1)
      {
        if (*(_QWORD *)v47 != v29)
          objc_enumerationMutation(v26);
        v31 = *(NSObject **)(*(_QWORD *)(v25 + 32) + 48);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          v32 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)j);
          v33 = v31;
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obj, "objectForKeyedSubscript:", v32, v39));
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v25 + 40) + 8) + 40), "objectForKeyedSubscript:", v32));
          *(_DWORD *)buf = 138412802;
          v55 = v32;
          v56 = 2112;
          v57 = v34;
          v58 = 2112;
          v59 = v35;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "For widget %@, averageViewsPerDay: %@ and computedBudget: %@", buf, 0x20u);

          v25 = a1;
        }
      }
      v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v46, v60, 16);
    }
    while (v28);
  }

  v36 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  v37 = *(_QWORD *)(v25 + 32);
  v38 = *(void **)(v37 + 32);
  *(_QWORD *)(v37 + 32) = v36;

}

void sub_10002ED58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(+[NSDate distantPast](NSDate, "distantPast"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v2;

}

void sub_10002EDE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeAllObjects");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeAllObjects");
  v2 = objc_claimAutoreleasedReturnValue(+[NSDate distantPast](NSDate, "distantPast"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v2;

}

void sub_10002FBBC(id a1)
{
  _DASTrialManager *v1;
  void *v2;

  v1 = -[_DASTrialManager initWithNamespaceName:]([_DASTrialManager alloc], "initWithNamespaceName:", CFSTR("COREOS_DAS"));
  v2 = (void *)qword_1001AB4D8;
  qword_1001AB4D8 = (uint64_t)v1;

}

void sub_10002FFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100030000(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id to;

  v3 = a2;
  objc_copyWeak(&to, (id *)(a1 + 32));
  v4 = objc_loadWeakRetained(&to);

  if (v4)
  {
    v5 = objc_loadWeakRetained(&to);
    objc_msgSend(v5, "updateFactors");

    v6 = objc_loadWeakRetained(&to);
    objc_msgSend(v6, "updateKernelWithDASIdentifiers");

  }
  objc_destroyWeak(&to);

}

void sub_100030080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100030094(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateFactors");
  return objc_msgSend(*(id *)(a1 + 32), "updateKernelWithDASIdentifiers");
}

id sub_10003049C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dasTrialManager:hasUpdatedParametersForNamespace:");
}

void sub_100030DA4(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "readFromDefaults"));
    objc_msgSend(v3, "sendToPowerLog:", v2);

    WeakRetained = v3;
  }

}

void sub_100031ADC(uint64_t a1)
{
  if (notify_register_check((const char *)objc_msgSend(CFSTR("com.apple.das.clas.startDutyCycling"), "UTF8String"), (int *)(*(_QWORD *)(a1 + 32) + 20))&& os_log_type_enabled(*(os_log_t *)(*(_QWORD *)(a1 + 32) + 56), OS_LOG_TYPE_ERROR))
  {
    sub_1000E0A98();
  }
  if (notify_register_check((const char *)objc_msgSend(CFSTR("com.apple.das.clas.dutyCyclingMicroSeconds"), "UTF8String"), (int *)(*(_QWORD *)(a1 + 32) + 24)))
  {
    if (os_log_type_enabled(*(os_log_t *)(*(_QWORD *)(a1 + 32) + 56), OS_LOG_TYPE_ERROR))
      sub_1000E0A2C();
  }
}

uint64_t sub_100031D2C(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;

  v2 = +[_DASDeviceActivityPolicy isDeviceInUse:](_DASDeviceActivityPolicy, "isDeviceInUse:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104));
  if (objc_msgSend(*(id *)(a1 + 32), "dutyCyclingInitiated"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "dutyCyclingMethod") == (id)1)
      v3 = v2;
    else
      v3 = 0;
    if (v3 == 1)
    {
      objc_msgSend(*(id *)(a1 + 32), "resetSFIEffort");
      objc_msgSend(*(id *)(a1 + 32), "setDutyCyclingInitiated:", 0);
    }
  }
  return 1;
}

uint64_t sub_100031D9C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 104);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextQueries keyPathForPluginStatus](_CDContextQueries, "keyPathForPluginStatus"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));
  v5 = objc_msgSend(v4, "BOOLValue");

  v6 = *(_QWORD **)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    v7 = (void *)v6[13];
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextQueries keyPathForPluginStatus](_CDContextQueries, "keyPathForPluginStatus"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "lastModifiedDateForContextualKeyPath:", v8));

    objc_msgSend(v9, "timeIntervalSinceNow");
    if (v10 > -10.0)
      objc_msgSend(*(id *)(a1 + 32), "resetState");

  }
  else
  {
    objc_msgSend(v6, "resetState");
    objc_msgSend(*(id *)(a1 + 32), "recordSessionAnalytics");
    objc_msgSend(*(id *)(a1 + 32), "resetAnalyticsState");
  }
  return 1;
}

id sub_100032554(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100032F50(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10003338C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_100033504(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:"));

  if (v3)
  {
    v4 = *(void **)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v6));
    objc_msgSend(v4, "addObject:", v5);

  }
}

id sub_100033894(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 1;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "scheduleOnBehalfOf:between:and:waking:", CFSTR("com.apple.das.monitor.batteryTemperature"), 0, (double)*(unint64_t *)(*(_QWORD *)(a1 + 32) + 72), (double)*(unint64_t *)(*(_QWORD *)(a1 + 32) + 72));
}

uint64_t sub_10003391C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 8) = 0;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 16) = 0;
  return result;
}

uint64_t sub_1000339E4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000339F4(uint64_t a1)
{

}

void sub_1000339FC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100033BE8(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001AB4E8;
  qword_1001AB4E8 = v1;

}

void sub_100033EEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100033FF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000340E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100034254(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_100034588(uint64_t a1)
{
  _BYTE *result;
  uint64_t v3;

  result = *(_BYTE **)(a1 + 32);
  if (result[9])
  {
    objc_msgSend(result, "recordValue");
    ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
    v3 = *(_QWORD *)(a1 + 32);
    if (!(*(_QWORD *)(v3 + 80) % *(_QWORD *)(v3 + 32)))
    {
      objc_msgSend((id)v3, "analyzeValues:currentContext:", *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 40));
      v3 = *(_QWORD *)(a1 + 32);
    }
    return objc_msgSend(*(id *)(v3 + 64), "scheduleOnBehalfOf:between:and:waking:", CFSTR("com.apple.das.monitor.chargeRate"), 0, (double)*(unint64_t *)(v3 + 72), (double)*(unint64_t *)(v3 + 72));
  }
  return result;
}

id sub_10003466C(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = 1;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "scheduleOnBehalfOf:between:and:waking:", CFSTR("com.apple.das.monitor.chargeRate"), 0, (double)*(unint64_t *)(*(_QWORD *)(a1 + 32) + 72), (double)*(unint64_t *)(*(_QWORD *)(a1 + 32) + 72));
}

uint64_t sub_1000346F4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 9) = 0;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 16) = 0;
  return result;
}

void sub_100034760(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "currentValue"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "addObject:", v2);

}

uint64_t sub_1000349B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000349C4(uint64_t a1)
{

}

void sub_1000349CC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100034AAC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  char v9;
  void *v10;
  double v11;
  double v12;
  NSObject *v13;
  id v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  double v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  void *v29;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBatteryTemperatureReader batteryProperties](_DASBatteryTemperatureReader, "batteryProperties"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("ChargerData")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("NotChargingReason")));

  v6 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) == 0)
    goto LABEL_23;
  if ((objc_msgSend(v5, "unsignedLongLongValue") & 0x8000) != 0)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = 0;
    objc_msgSend(v3, "setObject:forKeyedSubscript:", &off_10016E5A0, CFSTR("ChargeRate"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16)));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, CFSTR("ChargeRateControlEffort"));

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 96), v3);
    goto LABEL_23;
  }
  v7 = (unsigned __int16)objc_msgSend(v5, "unsignedLongLongValue");
  v8 = *(_QWORD *)(a1 + 32);
  if ((v7 & 0x11E) != 0)
  {
    if (!*(_BYTE *)(v8 + 8))
    {
      v9 = 1;
LABEL_9:
      *(_BYTE *)(v8 + 8) = v9;
    }
  }
  else if (*(_BYTE *)(v8 + 8))
  {
    v9 = 0;
    goto LABEL_9;
  }
  objc_msgSend(*(id *)(a1 + 40), "rate");
  v12 = v11;
  v13 = os_log_create("com.apple.clas", "signals");
  v14 = objc_msgSend(*(id *)(a1 + 40), "count");
  if (v14 >= objc_msgSend(*(id *)(a1 + 40), "limit"))
  {
    v15 = v12 * 60.0;
  }
  else
  {
    v15 = 2.0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      LOWORD(v24) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Not enough samples in the queue. Setting current rate to max rate", (uint8_t *)&v24, 2u);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "getReferenceChargeRateForContext:reader:", *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  v17 = v16;
  v18 = v13;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allObjects"));
    v24 = 134218498;
    v25 = v17;
    v26 = 2048;
    v27 = v15;
    v28 = 2112;
    v29 = v23;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Charge Rate reference Value %lf Current value %lf, Signal values: %@", (uint8_t *)&v24, 0x20u);

  }
  if (v15 < 0.0 || v15 >= v17)
  {
    v20 = 0;
  }
  else
  {
    v19 = (v17 - v15) / v17 * 100.0;
    if (v19 > 100.0)
      v19 = 100.0;
    v20 = (unint64_t)v19;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = v20;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v21, CFSTR("ChargeRate"));

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16)));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v22, CFSTR("ChargeRateControlEffort"));

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 96), v3);
LABEL_23:

}

id sub_1000351CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unprotectedExecuteWorkItems");
}

uint64_t sub_100035338(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) + 16))();
}

void sub_1000353C4(uint64_t a1)
{
  _BOOL4 v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  dispatch_time_t v6;

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "count"))
    v2 = 0;
  else
    v2 = objc_msgSend(*(id *)(a1 + 40), "count") != 0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "addObjectsFromArray:", *(_QWORD *)(a1 + 40));
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "count");
  v4 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v3 >= *(_QWORD *)(v4 + 16))
  {
    objc_msgSend((id)v4, "unprotectedExecuteWorkItems");
  }
  else if (v2)
  {
    v5 = *(NSObject **)(v4 + 56);
    v6 = dispatch_time(0, (uint64_t)(*(double *)(v4 + 8) * 1000000000.0));
    dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(*(double *)(*(_QWORD *)(a1 + 32) + 8) / 10.0 * 1000000000.0));
    dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 56));
  }
}

void sub_1000355C4(id a1)
{
  _DASResultDependencyPolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASResultDependencyPolicy);
  v2 = (void *)qword_1001AB500;
  qword_1001AB500 = (uint64_t)v1;

}

void sub_100035944(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "launchLikelihoodPredictionForApp:", *(_QWORD *)(a1 + 40)));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_100035A14(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginLikelihood"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_100035ADC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceActivityLikelihood"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10003608C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000360A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "locked_reinstantiateConfiguredBudgets");
}

void sub_1000360B0(uint64_t a1, void *a2, int a3)
{
  id v4;
  id v5;
  id WeakRetained;
  NSObject *v7;
  NSObject *v8;
  id v9;
  void *v10;
  _QWORD block[4];
  id v12;
  uint8_t buf[16];

  if (a3)
  {
    v4 = a2;
    v5 = (id)objc_claimAutoreleasedReturnValue(+[_DASDataProtectionStateMonitor dataProtectionClassC](_DASDataProtectionStateMonitor, "dataProtectionClassC"));

    if (v5 == v4)
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "log"));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Class C protected data now available, re-instantiating configured budgets", buf, 2u);
      }

      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "queue"));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000361E0;
      block[3] = &unk_10015D4E0;
      v12 = WeakRetained;
      v9 = WeakRetained;
      dispatch_sync(v8, block);

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lockStateMonitor"));
      objc_msgSend(v10, "setChangeHandler:", 0);

    }
  }
}

void sub_1000361E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "managedBudgets"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "locked_instantiateBudgetsInto:withRemovals:", v3, 0));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "widgetBudgetModulator"));
  objc_msgSend(v4, "locked_addBudgetsToBeModulated:", v5);

}

void sub_10003625C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "locked_instantiateBudgetsInto:withRemovals:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), 0));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "locked_addBudgetsToBeModulated:", v2);

}

void sub_100036320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = objc_opt_class(*(_QWORD *)(a1 + 32));
  v2 = objc_opt_new(v1);
  v3 = (void *)qword_1001AB510;
  qword_1001AB510 = v2;

}

void sub_100036470(uint64_t a1)
{
  id v2;
  _QWORD v3[4];
  id v4;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedBudgets"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000364F4;
  v3[3] = &unk_10015DAF0;
  v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v3);

}

void sub_1000364F4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  _QWORD v11[3];
  _QWORD v12[3];

  v3 = *(void **)(a1 + 32);
  v11[0] = CFSTR("name");
  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
  v12[0] = v5;
  v11[1] = CFSTR("balance");
  objc_msgSend(v4, "balance");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v12[1] = v6;
  v11[2] = CFSTR("capacity");
  objc_msgSend(v4, "capacity");
  v8 = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v8));
  v12[2] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 3));
  objc_msgSend(v3, "addObject:", v10);

}

id sub_10003667C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "locked_reinstantiateConfiguredBudgets");
}

void sub_10003752C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    sub_1000E11F4((uint64_t)v5, (uint64_t)v6, v7);

}

void sub_100037598(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    sub_1000E1278((uint64_t)v3, v4);

}

void sub_100037640(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting budgets.", v7, 2u);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "flushComputedBudgetCache");
  v3 = objc_msgSend(*(id *)(a1 + 32), "locked_instantiateBudgetsInto:withRemovals:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), 0);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v4 + 24), "allValues"));
  objc_msgSend(v5, "locked_replaceBudgetsToBeModulated:", v6);

}

void sub_100037908(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedBudgets"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "balance");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v3;

}

void sub_100037A1C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedBudgets"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "capacity");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v3;

}

void sub_100037B30(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedBudgets"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[_DASWidgetRefreshBudgetManager budgetNameFromWidgetBudgetID:](_DASWidgetRefreshBudgetManager, "budgetNameFromWidgetBudgetID:", *(_QWORD *)(a1 + 40)));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));

  v4 = v6;
  if (v6)
  {
    objc_msgSend(v6, "balance");
    v4 = v6;
  }
  else
  {
    v5 = 0xFFF0000000000000;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v5;

}

void sub_100037C58(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedBudgets"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v3)
  {
    objc_msgSend(v3, "setBalance:", *(double *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "updateBudget:", v3);
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = v4;
      objc_msgSend(v3, "balance");
      v6 = *(_QWORD *)(a1 + 40);
      v11 = 134218242;
      v12 = v7;
      v13 = 2114;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Set Balance: %.2lf for %{public}@", (uint8_t *)&v11, 0x16u);

    }
  }
  else
  {
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v11 = 134218242;
      v12 = v9;
      v13 = 2114;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Failed to set Balance: %.2lf for %{public}@ ; budget not found",
        (uint8_t *)&v11,
        0x16u);
    }
  }

}

void sub_100037E50(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedBudgets"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v3)
  {
    objc_msgSend(v3, "decrementBy:", *(double *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "updateBudget:", v3);
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 40);
      v5 = *(_QWORD *)(a1 + 48);
      v7 = v4;
      objc_msgSend(v3, "balance");
      v12 = 134218498;
      v13 = v5;
      v14 = 2114;
      v15 = v6;
      v16 = 2048;
      v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Decrement budget by: %.2lf for %{public}@, new balance: %.2lf", (uint8_t *)&v12, 0x20u);

    }
  }
  else
  {
    v9 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 48);
      v12 = 134218242;
      v13 = v10;
      v14 = 2114;
      v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Failed to decrement budget by: %.2lf for %{public}@ ; budget not found",
        (uint8_t *)&v12,
        0x16u);
    }
  }

}

void sub_10003805C(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedBudgets"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v3)
  {
    objc_msgSend(v3, "setCapacity:", *(double *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "updateBudget:", v3);
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = v4;
      objc_msgSend(v3, "capacity");
      v6 = *(_QWORD *)(a1 + 40);
      v11 = 134218242;
      v12 = v7;
      v13 = 2114;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Set capacity of budget to: %.2lf for %{public}@", (uint8_t *)&v11, 0x16u);

    }
  }
  else
  {
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v11 = 134218242;
      v12 = v9;
      v13 = 2114;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Failed to set capacity of budget to: %.2lf for %{public}@ ; budget not found",
        (uint8_t *)&v11,
        0x16u);
    }
  }

}

id sub_100038388(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "startTrackingActivity:", *(_QWORD *)(a1 + 40));
}

void sub_100038874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100038898(uint64_t a1, void *a2, uint64_t a3)
{
  id *v4;
  id v5;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "handleDataProtectionChangeFor:willBeAvailable:", v5, a3);

}

void sub_1000389BC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100038A58;
  v6[3] = &unk_10015D530;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v7 = v2;
  v8 = v3;
  v9 = v4;
  v5 = v2;
  objc_msgSend(v5, "performWithOptions:andBlock:", 4, v6);

}

id sub_100038A58(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "reset");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "removeObjectForKey:", *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 40), "invalidatePersistentStoreCoordinatorFor:", *(_QWORD *)(a1 + 48));
}

void sub_100038B08(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v3 = v2;
  if (v2)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "persistentStores", 0));
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v10;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(v3, "removePersistentStore:error:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8), 0);
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v6);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
  }

}

void sub_100038EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100038F10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100038F20(uint64_t a1)
{

}

void sub_100038F28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  unsigned __int8 v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (*(_BYTE *)(a1 + 64))
  {
    if (!v5)
    {
      v6 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32));
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v35 = 0;
      v8 = objc_msgSend(v6, "createDatabaseDirectory:error:", v7, &v35);
      v9 = v35;
      v10 = v9;
      if ((v8 & 1) != 0 || objc_msgSend(v9, "code") == (id)516)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectModel"));
        if (v11)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v12));

          v14 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "persistentStoreOptionsFor:readOnly:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 8));
          v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          v34 = v10;
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSPersistentStoreCoordinator metadataForPersistentStoreOfType:URL:options:error:](NSPersistentStoreCoordinator, "metadataForPersistentStoreOfType:URL:options:error:", NSSQLiteStoreType, v13, v15, &v34));
          v17 = v34;

          v18 = objc_msgSend(v11, "isConfiguration:compatibleWithStoreMetadata:", 0, v16);
          v19 = objc_msgSend(objc_alloc((Class)NSPersistentStoreCoordinator), "initWithManagedObjectModel:", v11);
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
          v21 = *(void **)(v20 + 40);
          *(_QWORD *)(v20 + 40) = v19;

          if ((v18 & 1) == 0)
          {
            v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
            v33 = v17;
            objc_msgSend(v22, "destroyPersistentStoreAtURL:withType:options:error:", v13, NSSQLiteStoreType, v15, &v33);
            v23 = v33;

            v17 = v23;
          }
          v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          v32 = v17;
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "addPersistentStoreWithType:configuration:URL:options:error:", NSSQLiteStoreType, 0, v13, v15, &v32));
          v10 = v32;

          if (!v25)
          {
            NSLog(CFSTR("Failed to add persistent store: %@"), v10);
            objc_msgSend(*(id *)(a1 + 32), "handleDatabaseErrors:forPSC:protectionClass:", v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(a1 + 40));
            v26 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
            v27 = *(void **)(v26 + 40);
            *(_QWORD *)(v26 + 40) = 0;

          }
          v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          if (v28)
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setObject:forKeyedSubscript:", v28, *(_QWORD *)(a1 + 40));

        }
        else
        {
          NSLog(CFSTR("Failed to load Managed Object Model from %@"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
        }
      }
      else
      {
        NSLog(CFSTR("%@ : did not exist and could not be created: %@"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), v10);
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v11 = *(void **)(v31 + 40);
        *(_QWORD *)(v31 + 40) = 0;
      }

    }
  }
  else if (v5)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v30 = *(void **)(v29 + 40);
    *(_QWORD *)(v29 + 40) = 0;

  }
}

void sub_1000394D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000394F0(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 32), "invalidateManagedObjectContextFor:", *(_QWORD *)(a1 + 40));
  result = objc_msgSend(*(id *)(a1 + 32), "deleteDatabaseForPSC:protectionClass:obliterate:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100039C7C(id a1)
{
  _APRSMetricRecorder *v1;
  void *v2;

  v1 = objc_alloc_init(_APRSMetricRecorder);
  v2 = (void *)qword_1001AB520;
  qword_1001AB520 = (uint64_t)v1;

}

void sub_100039CE4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.aprs", "appResume.caEvent");
  v2 = (void *)qword_1001AB530;
  qword_1001AB530 = (uint64_t)v1;

}

id sub_10003A2D4(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v7;
  id v8;
  __int16 v9;
  uint64_t v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "commonAnalytics"));
  v3 = objc_msgSend(v2, "mutableCopy");

  objc_msgSend(v3, "addEntriesFromDictionary:", *(_QWORD *)(a1 + 40));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "log"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 48);
    v7 = 138412546;
    v8 = v3;
    v9 = 2112;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reporting %@ for %@", (uint8_t *)&v7, 0x16u);
  }

  return v3;
}

void sub_10003A97C(id a1)
{
  _DASLowPowerModePolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASLowPowerModePolicy);
  v2 = (void *)qword_1001AB540;
  qword_1001AB540 = (uint64_t)v1;

}

void sub_10003AF64(uint64_t a1)
{
  _DASActivityRecorder *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = objc_opt_new(_DASActivityRecorder);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = -[_DASActivityRecorder createOrUpdateActivity:context:](v2, "createOrUpdateActivity:context:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7), *(_QWORD *)(a1 + 40), (_QWORD)v9);
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

  objc_msgSend(*(id *)(a1 + 48), "mocSaveAndReset:", *(_QWORD *)(a1 + 40));
}

id sub_10003B178(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "createMOInMOC:activity:group:triggers:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 32), "mocSaveAndReset:", *(_QWORD *)(a1 + 40));
}

void sub_10003B318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003B330(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10003B340(uint64_t a1)
{

}

id sub_10003B348(uint64_t a1)
{
  char *v2;
  char *v3;
  char *i;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;

  v2 = (char *)objc_msgSend(*(id *)(a1 + 32), "count");
  if (v2)
  {
    v3 = v2;
    for (i = 0; i != v3; ++i)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", i));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "groupName"));

      if (v6)
      {
        v7 = *(void **)(a1 + 40);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", i));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name"));
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v9));
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
        v12 = *(void **)(v11 + 40);
        *(_QWORD *)(v11 + 40) = v10;

      }
      v13 = *(void **)(a1 + 48);
      v14 = *(_QWORD *)(a1 + 56);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", i));
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "objectAtIndexedSubscript:", i));
      objc_msgSend(v13, "createMOInMOC:activity:group:triggers:", v14, v15, v16, v17);

    }
  }
  return objc_msgSend(*(id *)(a1 + 48), "mocSaveAndReset:", *(_QWORD *)(a1 + 56));
}

void sub_10003B6DC(uint64_t a1)
{
  id v2;
  _DASGroupRecorder *v3;

  v3 = objc_opt_new(_DASGroupRecorder);
  v2 = -[_DASGroupRecorder createOrUpdateGroup:context:](v3, "createOrUpdateGroup:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 48), "mocSaveAndReset:", *(_QWORD *)(a1 + 40));

}

id sub_10003B820(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
  objc_msgSend(v2, "createMOInMOC:group:activities:", v3, v4, v5);

  return objc_msgSend(*(id *)(a1 + 32), "mocSaveAndReset:", *(_QWORD *)(a1 + 40));
}

id sub_10003B9C4(uint64_t a1)
{
  char *v2;
  char *v3;
  char *i;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (char *)objc_msgSend(*(id *)(a1 + 32), "count");
  if (v2)
  {
    v3 = v2;
    for (i = 0; i != v3; ++i)
    {
      v6 = *(void **)(a1 + 40);
      v5 = *(_QWORD *)(a1 + 48);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", i));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectAtIndexedSubscript:", i));
      objc_msgSend(v6, "createMOInMOC:group:activities:", v5, v7, v8);

    }
  }
  return objc_msgSend(*(id *)(a1 + 40), "mocSaveAndReset:", *(_QWORD *)(a1 + 48));
}

void sub_10003BB78(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchAllActivities:", *(_QWORD *)(a1 + 40)));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getActivityFromManagedObject:", v7));
        objc_msgSend(*(id *)(a1 + 48), "addObject:", v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "startDate"));

        if (v9)
          objc_msgSend(*(id *)(a1 + 56), "addObject:", v8);

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

id sub_10003BDE4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "createMOInMOC:activity:group:triggers:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 72))
    objc_msgSend(*(id *)(a1 + 32), "updateActivityStarted:", *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 32), "mocSaveAndReset:", *(_QWORD *)(a1 + 40));
}

void sub_10003C014(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fetchActivitiesUsingPredicate:context:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(a1 + 64);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getActivityFromManagedObject:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6)));
        objc_msgSend(v7, "addObject:", v8);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

void sub_10003C250(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchActivitiesUsingPredicate:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(a1 + 56);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getActivityFromManagedObject:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6)));
        objc_msgSend(v7, "addObject:", v8);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

void sub_10003C460(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchAllGroups:", *(_QWORD *)(a1 + 40)));
  v3 = v2;
  if (v2)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v11;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(a1 + 48);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getGroupFromManagedObject:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7)));
          objc_msgSend(v8, "addObject:", v9);

          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v5);
    }
  }

}

id sub_10003C678(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateActivityStarted:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 56), "mocSaveAndReset:", *(_QWORD *)(a1 + 48));
}

id sub_10003C798(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateActivityCompleted:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 56), "mocSaveAndReset:", *(_QWORD *)(a1 + 48));
}

id sub_10003C8B8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateActivityCanceled:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 56), "mocSaveAndReset:", *(_QWORD *)(a1 + 48));
}

id sub_10003CA50(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 40), "deleteOldActivities:", *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 56), "mocSaveAndReset:", *(_QWORD *)(a1 + 48));
}

id sub_10003CB90(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 40), "deleteActivitiesIfRequired:", *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 56), "mocSaveAndReset:", *(_QWORD *)(a1 + 48));
}

void sub_10003CF20(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[8];
  uint64_t state64;

  state64 = 0;
  notify_get_state(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 12), &state64);
  v2 = arc4random_uniform(0x1ABu);
  if (state64 == 2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    v5 = 2;
    goto LABEL_5;
  }
  if (state64 == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "logPrewarm:pid:", CFSTR("com.apple.mobilemail"), v2);
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    v5 = 1;
LABEL_5:
    objc_msgSend(v3, "logDock:pid:state:", CFSTR("com.apple.mobilemail"), v4, v5);
    return;
  }
  v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 32);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error with notification com.apple.das.logPrewarmDock (Wrong state)", v7, 2u);
  }
}

void sub_10003D07C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001AB548;
  qword_1001AB548 = (uint64_t)v1;

}

int64_t sub_10003D1A4(id a1, NSNumber *a2, NSNumber *a3)
{
  NSNumber *v4;
  NSNumber *v5;
  double v6;
  double v7;
  double v8;
  int64_t v9;
  double v10;
  double v11;
  double v12;

  v4 = a2;
  v5 = a3;
  -[NSNumber doubleValue](v4, "doubleValue");
  v7 = v6;
  -[NSNumber doubleValue](v5, "doubleValue");
  if (v7 <= v8)
  {
    -[NSNumber doubleValue](v4, "doubleValue");
    v11 = v10;
    -[NSNumber doubleValue](v5, "doubleValue");
    v9 = v11 < v12;
  }
  else
  {
    v9 = -1;
  }

  return v9;
}

void sub_10003D500(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  v5 = a3;
  v6 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v6, CFSTR("BundleID"));

  objc_msgSend(v8, "setObject:forKeyedSubscript:", v5, CFSTR("PredictionScore"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", kAPRSPredictionTypeSwap));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, CFSTR("PredictionType"));

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
}

void sub_10003D5C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  v5 = a3;
  v6 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v6, CFSTR("BundleID"));

  objc_msgSend(v8, "setObject:forKeyedSubscript:", v5, CFSTR("PredictionScore"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", kAPRSPredictionTypeProactive));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, CFSTR("PredictionType"));

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
}

void sub_10003DA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003DA6C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10003DA7C(uint64_t a1)
{

}

id sub_10003DA84(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

void sub_10003DC28(id a1, BPSCompletion *a2)
{
  void *v2;
  id v3;
  BPSCompletion *v4;

  v4 = a2;
  if (-[BPSCompletion state](v4, "state"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(-[BPSCompletion error](v4, "error"));
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "description")));
    printf("Error: %s", (const char *)objc_msgSend(v3, "UTF8String"));

  }
  else
  {
    printf("Complete");
  }

}

void sub_10003DCA8(uint64_t a1, void *a2)
{
  void *v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "eventBody"));
  objc_msgSend(v3, "absoluteTimestamp");
  v5 = v4;
  v6 = *(double *)(a1 + 40);

  if (v5 < v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "eventBody"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleID"));

    objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
  }

}

int64_t sub_10003DFD0(id a1, NSMutableDictionary *a2, NSMutableDictionary *a3)
{
  NSMutableDictionary *v4;
  void *v5;
  int v6;
  void *v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("PredictionsScore")));
  v6 = objc_msgSend(v5, "intValue");
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", CFSTR("PredictionsScore")));

  LODWORD(v4) = objc_msgSend(v7, "intValue");
  if (v6 > (int)v4)
    return -1;
  else
    return 1;
}

void sub_10003E058(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  uint64_t v6;
  id v7;

  v3 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("BundleID")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("PredictionType")));

  LODWORD(v3) = objc_msgSend(v4, "intValue");
  v5 = kAPRSPredictionTypeProactive;

  v6 = 40;
  if ((_DWORD)v3 == v5)
    v6 = 32;
  objc_msgSend(*(id *)(a1 + v6), "addObject:", v7);

}

BOOL sub_10003E0F4(id a1, id a2, id a3)
{
  return a2 == a3;
}

BOOL sub_10003E100(id a1, id a2, id a3)
{
  return a2 == a3;
}

void sub_10003E9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003EC78(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "logUpdatedCarryStatus");
  objc_msgSend(v3, "setTaskCompleted");

}

Class sub_10003F6CC(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1001AB560)
  {
    v5 = off_10015DE98;
    v6 = 0;
    qword_1001AB560 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1001AB560)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("ATXProactiveSuggestionClient");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_1000E0070();
LABEL_8:
    free(v2);
  }
  qword_1001AB558 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_10003F8D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "consoleModeNotificationHandler");
}

void sub_10003F950(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB570;
  qword_1001AB570 = (uint64_t)v1;

}

void sub_10003FE94(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001AB578;
  qword_1001AB578 = v1;

}

void sub_100040168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100040184(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleKeyBagLockNotification");

}

void sub_10004046C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000404B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000404C4(uint64_t a1)
{

}

void sub_1000404CC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "isDataAvailableForClassA")));
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDataProtectionStateMonitor dataProtectionClassA](_DASDataProtectionStateMonitor, "dataProtectionClassA"));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "isDataAvailableForClassC")));
  v9 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDataProtectionStateMonitor dataProtectionClassC](_DASDataProtectionStateMonitor, "dataProtectionClassC"));
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, v10);

  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "allValues"));
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

}

void sub_1000405E0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  void *v10;
  id v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "objectForKeyedSubscript:", v7, (_QWORD)v13));
        v9 = objc_msgSend(v8, "BOOLValue");

        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v7));
        v11 = objc_msgSend(v10, "BOOLValue");

        if (v9 != (_DWORD)v11)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v11));
          objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v12, v7);

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v4);
  }

}

void sub_10004094C(uint64_t a1)
{
  id v2;

  v2 = objc_retainBlock(*(id *)(a1 + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setObject:forKeyedSubscript:", v2, *(_QWORD *)(a1 + 40));

}

id sub_100040A0C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
}

void sub_100041018(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(_DASActivityRateLimitPolicy));
  v2 = (void *)qword_1001AB590;
  qword_1001AB590 = (uint64_t)v1;

}

void sub_100041334(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001AB5A0;
  qword_1001AB5A0 = v1;

}

void sub_100041560(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_100041578(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "resetState");
  objc_msgSend(*(id *)(a1 + 32), "updatePredictedInterval");
  return objc_msgSend(*(id *)(a1 + 32), "setupHighCarbonImpactWindow:", *(double *)(*(_QWORD *)(a1 + 32) + 80));
}

void sub_10004167C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  int v14;
  void *v15;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 88);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextQueries keyPathForPluginStatus](_CDContextQueries, "keyPathForPluginStatus"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));
  v5 = objc_msgSend(v4, "BOOLValue");

  v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5));
    v14 = 138412290;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Plugin status is now %@", (uint8_t *)&v14, 0xCu);

  }
  v9 = *(_QWORD **)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    v10 = (void *)v9[11];
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextQueries keyPathForPluginStatus](_CDContextQueries, "keyPathForPluginStatus"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "lastModifiedDateForContextualKeyPath:", v11));

    objc_msgSend(v12, "timeIntervalSinceNow");
    if (v13 > -10.0)
    {
      objc_msgSend(*(id *)(a1 + 32), "resetState");
      objc_msgSend(*(id *)(a1 + 32), "updatePredictedInterval");
      objc_msgSend(*(id *)(a1 + 32), "setupHighCarbonImpactWindow:", *(double *)(*(_QWORD *)(a1 + 32) + 80));
    }

  }
  else
  {
    objc_msgSend(v9, "resetState");
  }
}

void sub_100041860(uint64_t a1)
{
  double v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  double *v14;
  double v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  double v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  double v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE buf[24];
  void *v45;
  _QWORD v46[3];

  v2 = *(double *)(a1 + 40);
  if (v2 < 0.0)
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v4 = "No CarbonImpact window. Prediction < 0";
    goto LABEL_7;
  }
  if (v2 == 0.0)
  {
    v5 = objc_claimAutoreleasedReturnValue(+[NSDate distantPast](NSDate, "distantPast"));
    v7 = *(_QWORD *)(a1 + 32);
    v6 = a1 + 32;
    v8 = *(void **)(v7 + 64);
    *(_QWORD *)(v7 + 64) = v5;

    v9 = objc_claimAutoreleasedReturnValue(+[NSDate distantPast](NSDate, "distantPast"));
    v10 = *(void **)(*(_QWORD *)v6 + 64);
    *(_QWORD *)(*(_QWORD *)v6 + 64) = v9;

    v11 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v12 = *(void **)(*(_QWORD *)v6 + 24);
    *(_QWORD *)(*(_QWORD *)v6 + 24) = v11;

    v3 = *(NSObject **)(*(_QWORD *)v6 + 48);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v4 = "No Carbon Impact window. Prediction is 0";
    goto LABEL_7;
  }
  v13 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  if (!v13)
    goto LABEL_13;
  objc_msgSend(v13, "timeIntervalSinceNow");
  v14 = *(double **)(a1 + 32);
  if (v15 <= -v14[7])
  {
    v2 = *(double *)(a1 + 40);
LABEL_13:
    v40 = 0;
    v41 = &v40;
    v42 = 0x2050000000;
    v16 = (void *)qword_1001AB5B8;
    v43 = qword_1001AB5B8;
    if (!qword_1001AB5B8)
    {
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_1000429EC;
      v45 = &unk_10015D610;
      v46[0] = &v40;
      sub_1000429EC((uint64_t)buf);
      v16 = (void *)v41[3];
    }
    v17 = objc_retainAutorelease(v16);
    _Block_object_dispose(&v40, 8);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "managerWithID:locationBundlePath:", CFSTR("com.apple.dasd.gridDataManager"), CFSTR("/System/Library/LocationBundles/SystemCustomization.bundle"), v40));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "latestMarginalEmissionForecast"));
    v20 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = v20;
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "forecastMap"));
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Emission Forecast: %@", buf, 0xCu);

    }
    objc_msgSend(v19, "refetchInterval");
    v24 = a1 + 32;
    *(double *)(*(_QWORD *)(a1 + 32) + 56) = fmax(v23, 14400.0);
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "forecastForTimeInterval:from:", v19, *(double *)(a1 + 40)));
    v26 = *(void **)(a1 + 32);
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "fetchDate"));
    v28 = v2 * 0.2;
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "carbonImpactWindowStartForForecast:withStartDate:windowSize:", v25, v27, v28));

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 64), v29);
    v30 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeInterval:sinceDate:](NSDate, "dateWithTimeInterval:sinceDate:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), v28));
    v31 = *(void **)(*(_QWORD *)(a1 + 32) + 72);
    *(_QWORD *)(*(_QWORD *)v24 + 72) = v30;

    v32 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v33 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
    *(_QWORD *)(*(_QWORD *)v24 + 24) = v32;

    v34 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      v35 = *(_QWORD **)(a1 + 32);
      v37 = v35[8];
      v36 = v35[9];
      v38 = (void *)v35[3];
      v39 = v35[7];
      *(_DWORD *)buf = 138413058;
      *(_QWORD *)&buf[4] = v37;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v36;
      *(_WORD *)&buf[22] = 2112;
      v45 = v38;
      LOWORD(v46[0]) = 2048;
      *(_QWORD *)((char *)v46 + 2) = v39;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "CarbonImpact Start: %@, CarbonImpact End %@, FetchTime %@, Forecast Cache internal %f", buf, 0x2Au);
    }
    objc_msgSend(*(id *)(a1 + 32), "saveCarbonImpactWindowState");

    return;
  }
  objc_msgSend(v14, "loadState");
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v4 = "Emission Forecast fetched recently";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, buf, 2u);
  }
}

void sub_100041C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

int64_t sub_100042424(id a1, NSNumber *a2, NSNumber *a3)
{
  if (-[NSNumber compare:](a2, "compare:", a3) == NSOrderedAscending)
    return -1;
  else
    return 1;
}

Class sub_1000428F8(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1001AB5B0)
  {
    v5 = off_10015DF90;
    v6 = 0;
    qword_1001AB5B0 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1001AB5B0)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("_OSChargingPredictor");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_1000E14E4();
LABEL_8:
    free(v2);
  }
  qword_1001AB5A8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000429EC(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1001AB5C0)
  {
    v5 = off_10015DFA8;
    v6 = 0;
    qword_1001AB5C0 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1001AB5C0)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("_GDSManager");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_1000E1508();
LABEL_8:
    free(v2);
  }
  qword_1001AB5B8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100043E30(uint64_t a1, double a2)
{
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  int v12;
  double v13;
  __int16 v14;
  void *v15;
  const __CFString *v16;
  void *v17;

  if (a2 != 0.0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", CFSTR("com.apple.dasd.systemEnergy")));
    v5 = v4;
    if (v4)
    {
      objc_msgSend(v4, "capacity");
      +[_DASMetricRecorder incrementOccurrencesForKey:byCount:](_DASMetricRecorder, "incrementOccurrencesForKey:byCount:", CFSTR("com.apple.dasd.energyBudgetConsumed"), llround(a2 * 10000.0 / v6));
      v16 = CFSTR("EnergyBudgetUsage");
      objc_msgSend(v5, "capacity");
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a2 * 10000.0 / v7));
      v17 = v8;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));
      AnalyticsSendEvent(CFSTR("com.apple.dasd.advancedmetrics"), v9);

      objc_msgSend(v5, "decrementBy:", a2);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "updateBudget:", v5);
      v10 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("energybudgeting")));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", CFSTR("com.apple.dasd.systemEnergy")));
        v12 = 134218242;
        v13 = a2;
        v14 = 2112;
        v15 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Decremented energy budget by %f, energyBudget now is %@", (uint8_t *)&v12, 0x16u);

      }
    }

  }
}

id sub_100044008(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "onBudgetChange:", a2);
}

id sub_100044014(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "registerSignificantBudgetChangeCallback:", *(_QWORD *)(a1 + 32));
}

void sub_100044024(uint64_t a1, int token)
{
  id *v3;
  void *v4;
  id *v5;
  void *v6;
  uint64_t state64;

  state64 = 0;
  notify_get_state(token, &state64);
  v3 = *(id **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[3], "objectForKeyedSubscript:", CFSTR("com.apple.dasd.systemEnergy")));
  objc_msgSend(v3, "postNotificationWithBudget:", v4);

  v5 = *(id **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5[3], "objectForKeyedSubscript:", CFSTR("com.apple.dasd.systemCellular")));
  objc_msgSend(v5, "postNotificationWithBudget:", v6);

}

void sub_100044130(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = objc_opt_class(*(_QWORD *)(a1 + 32));
  v2 = objc_opt_new(v1);
  v3 = (void *)qword_1001AB5D0;
  qword_1001AB5D0 = v2;

}

void sub_10004424C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100044264(uint64_t a1)
{
  id result;
  uint64_t v3;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "dailyBudget");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v3;
  return result;
}

void sub_10004438C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000443A4(uint64_t a1)
{
  id result;
  uint64_t v3;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "dailyBudget");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v3;
  return result;
}

id sub_100044598(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unlocked_instantiateConfiguredBudgets");
}

void sub_10004545C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  _QWORD v11[3];
  _QWORD v12[3];

  v3 = *(void **)(a1 + 32);
  v11[0] = CFSTR("name");
  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
  v12[0] = v5;
  v11[1] = CFSTR("balance");
  objc_msgSend(v4, "balance");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v12[1] = v6;
  v11[2] = CFSTR("capacity");
  objc_msgSend(v4, "capacity");
  v8 = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v8));
  v12[2] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 3));
  objc_msgSend(v3, "addObject:", v10);

}

id sub_100045964(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startTrackingActivity:", *(_QWORD *)(a1 + 40));
}

id sub_1000459EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "startTrackingActivityWithParameters:", *(_QWORD *)(a1 + 40));
}

id sub_100045A74(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "stopTrackingActivityWithParameters:", *(_QWORD *)(a1 + 40));
}

void sub_100045B2C(id *a1)
{
  void *v2;
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  void **v20;
  double v21;
  double v22;
  NSObject *v23;
  void *v24;
  void *v25;
  double v26;
  unint64_t v27;
  NSObject *v28;
  void *v29;
  void *v30;
  int v31;
  double v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", _DASUpdateActivityCellTransferKey));
  objc_msgSend(v2, "doubleValue");
  v4 = v3;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", _DASUpdateActivityWifiTransferKey));
  objc_msgSend(v5, "doubleValue");
  v7 = v6;

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", _DASUpdateActivityWiFiExpensiveTransferKey));
  objc_msgSend(v8, "doubleValue");
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", _DASUpdateActivityCellExpensiveTransferKey));
  objc_msgSend(v11, "doubleValue");
  v13 = v12;

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", _DASUpdateActivityWiFiInexpensiveTransferKey));
  objc_msgSend(v14, "doubleValue");
  v16 = v15;

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", _DASUpdateActivityCellInexpensiveTransferKey));
  objc_msgSend(v17, "doubleValue");
  v19 = v18;

  v20 = a1 + 6;
  objc_msgSend(*((id *)a1[5] + 6), "updateDataForActivity:bytesOnCell:bytesOnCellExpensive:bytesOnCellInexpensive:bytesOnWiFiExpensive:bytesOnWiFiInexpensive:", a1[6], v4, v13, v19, v10, v16);
  v22 = v21;
  v23 = *((_QWORD *)a1[5] + 2);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    sub_1000E1684((uint64_t *)a1 + 6, v23, v22);
  if (v22 != 0.0)
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "dataBudgetForActivity:", a1[6]));
    objc_msgSend(v24, "decrementBy:", v22);
    objc_msgSend(*((id *)a1[5] + 5), "updateBudget:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "clientDataBudgetName"));

    objc_msgSend(v24, "capacity");
    v27 = llround(v22 * 10000.0 / v26);
    if (v25)
    {
      +[_DASMetricRecorder incrementOccurrencesForKey:byCount:](_DASMetricRecorder, "incrementOccurrencesForKey:byCount:", CFSTR("com.apple.dasd.customBudgetConsumed"), v27);
    }
    else
    {
      +[_DASMetricRecorder incrementOccurrencesForKey:byCount:](_DASMetricRecorder, "incrementOccurrencesForKey:byCount:", CFSTR("com.apple.dasd.networkBudgetConsumed"), v27);
      objc_msgSend(a1[5], "reportMetricsForNetworkUsage:forDataBudget:totalUsage:usageInCell:usageInInexpensive:forActivity:", v24, a1[6], v22, v4 + v7, v4, v19);
    }
    v28 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("networkbudgeting")));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      v29 = *v20;
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "relatedApplications"));
      v31 = 134218754;
      v32 = v22;
      v33 = 2114;
      v34 = v29;
      v35 = 2114;
      v36 = v30;
      v37 = 2114;
      v38 = v24;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Decremented data budget by %f for activity %{public}@ (%{public}@) data budget is now %{public}@", (uint8_t *)&v31, 0x2Au);

    }
  }
}

id sub_100045EF0(uint64_t a1)
{
  double v2;
  double v3;
  uint64_t v4;
  void *v5;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  float v12;
  void *v13;
  void *v14;
  float v15;
  void *v16;
  void *v17;
  NSObject *v18;

  objc_msgSend(*(id *)(a1 + 32), "capacity");
  v3 = v2;
  v4 = objc_claimAutoreleasedReturnValue(+[_DASSystemBudgetManager identifierWithActivity:](_DASSystemBudgetManager, "identifierWithActivity:", *(_QWORD *)(a1 + 40)));
  v5 = (void *)v4;
  if (v3 == 0.0 || v4 == 0)
  {
    v9 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("networkbudgeting")));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1000E17C8((id *)(a1 + 40), v9);
    v7 = 0;
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48) * 10000.0 / v3));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v8, CFSTR("NWBudgetUsage"));

    objc_msgSend(v7, "setObject:forKeyedSubscript:", v5, CFSTR("ClientIdentifier"));
    v9 = objc_claimAutoreleasedReturnValue(+[_DASSystemBudgetManager involvedProcessesForActivity:withIdentifier:](_DASSystemBudgetManager, "involvedProcessesForActivity:withIdentifier:", *(_QWORD *)(a1 + 40), v5));
    v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject anyObject](v9, "anyObject"));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v10, CFSTR("RelatedApplication"));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v3));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v11, CFSTR("BudgetCapacity"));

    v12 = *(double *)(a1 + 56) / *(double *)(a1 + 64);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48) * (float)(v12 * 10000.0) / v3));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v13, CFSTR("CellUsage"));

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48) * (float)((float)(1.0 - v12) * 10000.0) / v3));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v14, CFSTR("WifiUsage"));

    v15 = *(double *)(a1 + 72) / *(double *)(a1 + 64);
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48) * (float)(v15 * 10000.0) / v3));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v16, CFSTR("InexpensiveUsage"));

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48) * (float)((float)(1.0 - v15) * 10000.0) / v3));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v17, CFSTR("ExpensiveUsage"));

    v18 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("networkbudgeting")));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      sub_1000E1754((uint64_t)v7, v18);

  }
  return v7;
}

void sub_100046490(uint64_t a1)
{
  _DASRemoteDeviceWakeMonitor *v1;
  void *v2;

  v1 = -[_DASRemoteDeviceWakeMonitor initWithDaemon:]([_DASRemoteDeviceWakeMonitor alloc], "initWithDaemon:", *(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001AB5F0;
  qword_1001AB5F0 = (uint64_t)v1;

}

void sub_100046750(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000468B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100046AB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000471B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000471DC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;

  v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("remoteScreenMonitor")));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceIdentifier"));
    v4 = *(_QWORD *)(a1 + 40);
    v6 = 138412546;
    v7 = v3;
    v8 = 2112;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@ is now awake, connected, and nearby, evaluate %@", (uint8_t *)&v6, 0x16u);

  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "daemon"));
  objc_msgSend(v5, "evaluateScoreAndRunActivities:", *(_QWORD *)(a1 + 40));

}

void sub_100047850(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB600;
  qword_1001AB600 = (uint64_t)v1;

}

void sub_100047964(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;

  v2 = (void *)os_transaction_create("com.apple.dasd.applicationpolicy.recentapps");
  v3 = objc_autoreleasePoolPush();
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPredictionManager sharedKnowledgeStore](_DASPredictionManager, "sharedKnowledgeStore"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[_DKSystemEventStreams appInFocusStream](_DKSystemEventStreams, "appInFocusStream"));
  v6 = objc_alloc((Class)NSDateInterval);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", -1800.0));
  v8 = objc_msgSend(v6, "initWithStartDate:duration:", v7, 1800.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[_DKHistogramQuery histogramQueryForStream:interval:](_DKHistogramQuery, "histogramQueryForStream:interval:", v5, v8));

  objc_msgSend(v9, "setIncludeRemoteResults:", 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPredictionManager predictionGenerationQueue](_DASPredictionManager, "predictionGenerationQueue"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100047AE4;
  v13[3] = &unk_10015E0B8;
  v11 = v2;
  v12 = *(_QWORD *)(a1 + 32);
  v14 = v11;
  v15 = v12;
  objc_msgSend(v4, "executeQuery:responseQueue:withCompletion:", v9, v10, v13);

  objc_autoreleasePoolPop(v3);
}

void sub_100047AE4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  id v19;
  void *context;
  _QWORD v21[5];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[4];
  uint64_t v29;
  _BYTE v30[128];

  v5 = a2;
  v19 = a3;
  context = objc_autoreleasePoolPush();
  v6 = *(id *)(*(_QWORD *)(a1 + 40) + 80);
  objc_sync_enter(v6);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "removeAllObjects");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "countDictionary"));
  if ((unint64_t)objc_msgSend(v7, "count") < 0x1A)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100047E4C;
    v21[3] = &unk_10015D480;
    v21[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v21);
  }
  else
  {
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_100047DD0;
    v26[3] = &unk_10015E090;
    v8 = v7;
    v27 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "keysSortedByValueUsingComparator:", v26));
    v10 = objc_msgSend(v9, "mutableCopy");

    objc_msgSend(v10, "removeObjectsInRange:", 25, (unint64_t)((double)(unint64_t)objc_msgSend(v8, "count") + -25.0));
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v11 = v10;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v23;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v23 != v13)
            objc_enumerationMutation(v11);
          v15 = *(void **)(*(_QWORD *)(a1 + 40) + 80);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v14), "dk_dedup"));
          objc_msgSend(v15, "addObject:", v16);

          v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      }
      while (v12);
    }

  }
  v17 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80);
    *(_DWORD *)buf = 138412290;
    v29 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Recent Applications: %@", buf, 0xCu);
  }

  objc_sync_exit(v6);
  objc_autoreleasePoolPop(context);

}

void sub_100047D9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100047DD0(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", a3));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));

  v9 = objc_msgSend(v7, "compare:", v8);
  return v9;
}

void sub_100047E4C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 80);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "dk_dedup"));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_100047FD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100048508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100048548(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100048558(uint64_t a1)
{

}

void sub_100048560(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  id (*v13)(uint64_t);
  void *v14;
  uint64_t v15;
  id v16;

  v2 = (void *)os_transaction_create("com.apple.dasd.anyAppPredictions");
  v3 = objc_autoreleasePoolPush();
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topNPrediction"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topNPrediction"));
    v6 = +[_DASPredictionManager predictionNeedsUpdating:atDate:lastUpdatedAt:](_DASPredictionManager, "predictionNeedsUpdating:atDate:lastUpdatedAt:", v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));

    if (v6)
    {
      v11 = _NSConcreteStackBlock;
      v12 = 3221225472;
      v13 = sub_100048688;
      v14 = &unk_10015D558;
      v7 = *(void **)(a1 + 40);
      v15 = *(_QWORD *)(a1 + 32);
      v16 = v7;
      +[_DASPredictionManager asyncDo:](_DASPredictionManager, "asyncDo:", &v11);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "updatePredictionsAtDate:", *(_QWORD *)(a1 + 40));
  }
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topNPrediction", v11, v12, v13, v14, v15));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  objc_autoreleasePoolPop(v3);
}

id sub_100048688(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updatePredictionsAtDate:", *(_QWORD *)(a1 + 40));
}

void sub_100048694(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v4 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 32));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), a2);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 64), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 32));
  if ((objc_msgSend(*(id *)(a1 + 64), "bypassesPredictions") & 1) == 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPLLogger sharedInstance](_DASPLLogger, "sharedInstance"));
    objc_msgSend(v5, "recordAppPrediction:app:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), *(_QWORD *)(a1 + 48));

  }
  v6 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("predictions")));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
    *(_DWORD *)buf = 138412546;
    v12 = v7;
    v13 = 2112;
    v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Timeline for %@: %@", buf, 0x16u);
  }

  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("application.%@"), *(_QWORD *)(a1 + 48)));
  +[_DASPredictionManager setPrediction:forKey:](_DASPredictionManager, "setPrediction:forKey:", v9, v10);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 72));
}

void sub_100049280(id a1)
{
  _DASBatteryLevelPolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASBatteryLevelPolicy);
  v2 = (void *)qword_1001AB628;
  qword_1001AB628 = (uint64_t)v1;

}

id sub_100049960(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateSystemConstraintsWithContext:", *(_QWORD *)(a1 + 40));
}

void sub_100049B38(id a1)
{
  _DASBootTimePolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASBootTimePolicy);
  v2 = (void *)qword_1001AB640;
  qword_1001AB640 = (uint64_t)v1;

}

void sub_10004A0DC(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001AB658;
  qword_1001AB658 = (uint64_t)v1;

}

void sub_10004A650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

id sub_10004A670(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateCache");
}

void sub_10004A6B8(id a1)
{
  _DASRequiresBuddyCompletePolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASRequiresBuddyCompletePolicy);
  v2 = (void *)qword_1001AB668;
  qword_1001AB668 = (uint64_t)v1;

}

void sub_10004A7C4(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "objectForKeyedSubscript:", &off_10016E660));
  if (!v2)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "setObject:forKeyedSubscript:", &__kCFBooleanFalse, &off_10016E660);
    objc_msgSend(*(id *)(a1 + 40), "_updateCache");
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "objectForKeyedSubscript:", &off_10016E660));
  }
  v3 = v2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "BOOLValue");

}

void *sub_10004AA4C(uint64_t a1)
{
  void *v2;
  char *v3;
  void *result;
  char *v5;
  __int128 v6;
  uint64_t v7;

  v5 = 0;
  if (!qword_1001AB670)
  {
    v6 = off_10015E160;
    v7 = 0;
    qword_1001AB670 = _sl_dlopen(&v6, &v5);
    v3 = v5;
    v2 = (void *)qword_1001AB670;
    if (qword_1001AB670)
    {
      if (!v5)
        goto LABEL_5;
    }
    else
    {
      v3 = (char *)abort_report_np("%s", v5);
    }
    free(v3);
    goto LABEL_5;
  }
  v2 = (void *)qword_1001AB670;
LABEL_5:
  result = dlsym(v2, "BYSetupAssistantNeedsToRun");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  off_1001AB678 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10004B2F4(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  objc_msgSend(v2, "handleTimerFireAtDate:withContext:", v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));

}

void sub_10004B388(id a1)
{
  _DASNetworkSynchronizationPolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASNetworkSynchronizationPolicy);
  v2 = (void *)qword_1001AB688;
  qword_1001AB688 = (uint64_t)v1;

}

void sub_10004B5C0(uint64_t a1)
{
  id v2;
  unsigned int v3;
  __CFString *v4;
  __CFString *v5;
  void *v6;
  id v7;

  v2 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.duetactivityscheduler"));
  v3 = objc_msgSend(v2, "BOOLForKey:", CFSTR("postNWAlignmentNotifications"));

  if (v3)
  {
    if (*(_BYTE *)(a1 + 32))
      v4 = CFSTR("Denying tasks due to network alignment.");
    else
      v4 = CFSTR("No longer denying tasks due to network alignment.");
    v5 = v4;
    v7 = (id)objc_claimAutoreleasedReturnValue(+[_DASNotificationManager sharedManager](_DASNotificationManager, "sharedManager"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", 10800.0));
    objc_msgSend(v7, "postNotificationAtDate:withTitle:withTextContent:icon:url:expirationDate:", 0, CFSTR("Network Alignment"), v5, 0, 0, v6);

  }
}

id sub_10004B98C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleSmartPowerNapNotification:", a2);
}

void sub_10004BA44(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)objc_opt_class(*(_QWORD *)(a1 + 40))), "initWithDaemon:", *(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001AB698;
  qword_1001AB698 = (uint64_t)v1;

}

void sub_10004BD0C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB6A8;
  qword_1001AB6A8 = (uint64_t)v1;

}

void sub_10004C1A4(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB6B8;
  qword_1001AB6B8 = (uint64_t)v1;

}

void sub_10004C5F8(id a1)
{
  _DASCPUUsagePolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASCPUUsagePolicy);
  v2 = (void *)qword_1001AB6C8;
  qword_1001AB6C8 = (uint64_t)v1;

}

void sub_10004CA84(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001AB6D8;
  qword_1001AB6D8 = (uint64_t)v1;

}

void sub_10004CD5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const __SCDynamicStore *v28;
  uint64_t v29;
  char cStr[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v2 = _NETRBClientCreate(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    *(_OWORD *)cStr = 0u;
    v31 = 0u;
    if (_NETRBClientGetDynamicStoreKey(v2, cStr))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56))
      {
LABEL_12:
        _NETRBClientDestroy(v3);
        goto LABEL_13;
      }
      v4 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("InternetSharingPolicy")));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1000E1C00(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    else
    {
      v4 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("InternetSharingPolicy")));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1000E1C30(v4, v20, v21, v22, v23, v24, v25, v26);
    }

    goto LABEL_12;
  }
  v12 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("InternetSharingPolicy")));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    sub_1000E1BD0(v12, v13, v14, v15, v16, v17, v18, v19);

LABEL_13:
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = SCDynamicStoreCreate(kCFAllocatorDefault, CFSTR("com.apple.dasd"), (SCDynamicStoreCallBack)sub_10004CF60, 0);
    v27 = *(_QWORD *)(a1 + 32);
    v28 = *(const __SCDynamicStore **)(v27 + 40);
    v29 = *(_QWORD *)(v27 + 56);
    SCDynamicStoreSetNotificationKeys(v28, (CFArrayRef)+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v29, 1), 0);
    SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(*(_QWORD *)(a1 + 32) + 40), *(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 48));
    objc_msgSend(*(id *)(a1 + 32), "handleWirelessModemDynamicStoreChanged");
  }
}

void sub_10004CF60()
{
  id v0;

  v0 = (id)objc_claimAutoreleasedReturnValue(+[_DASInternetSharingPolicy policyInstance](_DASInternetSharingPolicy, "policyInstance"));
  objc_msgSend(v0, "handleWirelessModemDynamicStoreChanged");

}

void sub_10004D008(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB6E8;
  qword_1001AB6E8 = (uint64_t)v1;

}

void sub_10004D6A0(id a1)
{
  _DASDataBudgetPolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASDataBudgetPolicy);
  v2 = (void *)qword_1001AB6F8;
  qword_1001AB6F8 = (uint64_t)v1;

}

id sub_10004E014(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateSystemConstraintsWithContext:", *(_QWORD *)(a1 + 40));
}

void sub_10004E4F0(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB710;
  qword_1001AB710 = (uint64_t)v1;

}

void sub_10004E6A4(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceNearbyTimeline"));
  v3 = +[_DASPredictionManager predictionNeedsUpdating:atDate:lastUpdatedAt:](_DASPredictionManager, "predictionNeedsUpdating:atDate:lastUpdatedAt:", v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predictionForDeviceNearby"));
    objc_msgSend(*(id *)(a1 + 32), "setDeviceNearbyTimeline:", v4);

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 48), *(id *)(a1 + 40));
  }
}

void sub_10004EDE8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "predictionForDeviceActivity"));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 48), v2);
  +[_DASPredictionManager setPrediction:forKey:](_DASPredictionManager, "setPrediction:forKey:", v2, CFSTR("deviceActivity"));
  v3 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("predictions")));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    sub_1000E1C60((uint64_t)v2, v3, v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPLLogger sharedInstance](_DASPLLogger, "sharedInstance"));
  objc_msgSend(v5, "recordPrediction:key:valueMultiplier:", v2, CFSTR("deviceActivityPrediction"), 100);

  v6 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 56);
  *(_QWORD *)(v7 + 56) = v6;

}

void sub_10004EFA8(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB720;
  qword_1001AB720 = (uint64_t)v1;

}

void sub_10004F7F8(id a1)
{
  _APRSFreezerInterface *v1;
  void *v2;

  v1 = objc_opt_new(_APRSFreezerInterface);
  v2 = (void *)qword_1001AB728;
  qword_1001AB728 = (uint64_t)v1;

}

void sub_10004F9F0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001AB738;
  qword_1001AB738 = v1;

}

void sub_10004FBE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10004FCD4()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1001AB748;
  v7 = qword_1001AB748;
  if (!qword_1001AB748)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100052454;
    v3[3] = &unk_10015D610;
    v3[4] = &v4;
    sub_100052454((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10004FD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000505F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

id sub_1000507C4(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _Unwind_Exception *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v8 = off_1001AB768;
  v17 = off_1001AB768;
  if (!off_1001AB768)
  {
    v9 = (void *)sub_1000524A8();
    v8 = dlsym(v9, "PPSCreateSubsystemCategoryPredicate");
    v15[3] = (uint64_t)v8;
    off_1001AB768 = v8;
  }
  _Block_object_dispose(&v14, 8);
  if (!v8)
  {
    v13 = (_Unwind_Exception *)sub_1000E1AD4();
    _Block_object_dispose(&v14, 8);
    _Unwind_Resume(v13);
  }
  v10 = ((uint64_t (*)(id, id, id))v8)(v5, v6, v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  return v11;
}

id sub_1000508B0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1001AB770;
  v7 = qword_1001AB770;
  if (!qword_1001AB770)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000525AC;
    v3[3] = &unk_10015D610;
    v3[4] = &v4;
    sub_1000525AC((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100050950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100050F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_100051158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_100051E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

Class sub_100052454(uint64_t a1)
{
  Class result;

  sub_1000524A8();
  result = objc_getClass("PPSTimeSeries");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1001AB748 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_1000E1ED4();
    return (Class)sub_1000524A8();
  }
  return result;
}

uint64_t sub_1000524A8()
{
  uint64_t v0;
  char *v1;
  char *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1001AB750)
  {
    v4 = off_10015E258;
    v5 = 0;
    qword_1001AB750 = _sl_dlopen(&v4, &v3);
  }
  v0 = qword_1001AB750;
  v1 = v3;
  if (!qword_1001AB750)
  {
    v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_7;
  }
  if (v3)
LABEL_7:
    free(v1);
  return v0;
}

Class sub_100052558(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_1000524A8();
  result = objc_getClass("PPSRequestDispatcher");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1001AB758 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = sub_1000E1EF8();
    return (Class)sub_1000525AC(v3);
  }
  return result;
}

Class sub_1000525AC(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_1000524A8();
  result = objc_getClass("PPSTimeSeriesRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1001AB770 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = sub_1000E1F1C();
    return (Class)sub_100052600(v3);
  }
  return result;
}

Class sub_100052600(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_1000524A8();
  result = objc_getClass("PPSHistogramRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1001AB778 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = sub_1000E1F40();
    return (Class)sub_100052654(v3);
  }
  return result;
}

Class sub_100052654(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_1000524A8();
  result = objc_getClass("PPSIntervalSetRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1001AB780 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = sub_1000E1F64();
    return (Class)sub_1000526A8(v3);
  }
  return result;
}

_APRSSignpostReader *sub_1000526A8(uint64_t a1)
{
  _APRSSignpostReader *result;
  _APRSSignpostReader *v3;
  SEL v4;

  sub_1000524A8();
  result = (_APRSSignpostReader *)objc_getClass("PPSEvent");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1001AB788 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (_APRSSignpostReader *)sub_1000E1F88();
    return -[_APRSSignpostReader init](v3, v4);
  }
  return result;
}

void sub_10005289C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[6];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint8_t buf[4];
  uint64_t v22;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 1;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(v3 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100052A70;
  v16[3] = &unk_10015E278;
  v16[4] = v3;
  v16[5] = &v17;
  objc_msgSend(v4, "appLaunchResumeInfoWithStartDate:withEndDate:withReply:", v2, v5, v16);
  if (*((_BYTE *)v18 + 24))
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
      *(_DWORD *)buf = 138412290;
      v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Resumes %@", buf, 0xCu);
    }
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      *(_DWORD *)buf = 138412290;
      v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Launches %@", buf, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 32), "recordResumesAndLaunches");
  }
  v10 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 24);
  *(_QWORD *)(v11 + 24) = v10;

  v13 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 32);
  *(_QWORD *)(v14 + 32) = v13;

  _Block_object_dispose(&v17, 8);
}

void sub_100052A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_100052A70(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  NSObject *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (os_log_type_enabled(*(os_log_t *)(*(_QWORD *)(a1 + 32) + 8), OS_LOG_TYPE_ERROR))
      sub_1000E1FEC();
LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    goto LABEL_5;
  }
  if (!v5)
  {
    v11 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      sub_1000E1FAC(v11);
    goto LABEL_4;
  }
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(a1 + 32), "processSignpostInterval:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i));
      }
      v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v8);
  }
LABEL_5:

}

void sub_10005318C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[_APRSBiomeBase sourceForStream](_APRSBiomeAppLaunchTimeEvent, "sourceForStream"));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v8 = v6;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[_APRSBiomeAppLaunchTimeEvent eventWithAppBundleID:activationTime:launchReason:](_APRSBiomeAppLaunchTimeEvent, "eventWithAppBundleID:activationTime:launchReason:", v5, objc_msgSend(v13, "unsignedIntValue", (_QWORD)v15), *(unsigned int *)(a1 + 40)));
        +[_APRSBiomeBase postEvent:usingSource:](_APRSBiomeAppLaunchTimeEvent, "postEvent:usingSource:", v14, v7);
        objc_msgSend(*(id *)(a1 + 32), "addObject:", v13);

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v10);
  }

}

void sub_1000532FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[_APRSBiomeBase sourceForStream](_APRSBiomeAppLaunchTimeEvent, "sourceForStream"));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v8 = v6;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[_APRSBiomeAppLaunchTimeEvent eventWithAppBundleID:activationTime:launchReason:](_APRSBiomeAppLaunchTimeEvent, "eventWithAppBundleID:activationTime:launchReason:", v5, objc_msgSend(v13, "unsignedIntValue", (_QWORD)v15), *(unsigned int *)(a1 + 40)));
        +[_APRSBiomeBase postEvent:usingSource:](_APRSBiomeAppLaunchTimeEvent, "postEvent:usingSource:", v14, v7);
        objc_msgSend(*(id *)(a1 + 32), "addObject:", v13);

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v10);
  }

}

void sub_100053524(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_10005377C(id a1)
{
  _DASEnergyBudgetPolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASEnergyBudgetPolicy);
  v2 = (void *)qword_1001AB798;
  qword_1001AB798 = (uint64_t)v1;

}

id sub_100053D6C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateSystemConstraintsWithContext:", *(_QWORD *)(a1 + 40));
}

void sub_1000540EC(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 0;
  notify_cancel(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 12));
  v1 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("fileProtection")));
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Device is now ClassC unlocked", v2, 2u);
  }

}

void sub_1000541E8(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB7B0;
  qword_1001AB7B0 = (uint64_t)v1;

}

void sub_100054728(id a1)
{
  _DASFastPassPolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASFastPassPolicy);
  v2 = (void *)qword_1001AB7C0;
  qword_1001AB7C0 = (uint64_t)v1;

}

uint64_t sub_10005490C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 8) = 0;
  return result;
}

void sub_100054CC0(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB7D0;
  qword_1001AB7D0 = (uint64_t)v1;

}

void sub_100054FDC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[7];
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  _QWORD v32[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", -1900800.0));
  if (os_log_type_enabled(*(os_log_t *)(*(_QWORD *)(a1 + 32) + 8), OS_LOG_TYPE_DEBUG))
    sub_1000E23F0();
  +[_APRSBiomeBase pruneEventsOlderThanDate:](_APRSBiomeAppKillEvent, "pruneEventsOlderThanDate:", v4);
  +[_APRSBiomeBase pruneEventsOlderThanDate:](_APRSBiomeAppLaunchTimeEvent, "pruneEventsOlderThanDate:", v4);
  +[_APRSBiomeBase pruneEventsOlderThanDate:](_APRSBiomeAppStateEvent, "pruneEventsOlderThanDate:", v4);
  v27 = 0;
  v28 = (double *)&v27;
  v29 = 0x2020000000;
  v30 = 0;
  v23 = 0;
  v24 = (double *)&v23;
  v25 = 0x2020000000;
  v26 = 0;
  v19 = 0;
  v20 = (double *)&v19;
  v21 = 0x2020000000;
  v22 = 0;
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", -86400.0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appActivationTimeInfoStartingAtDate:withBookmarkKey:", v6, 0));

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100055314;
  v18[3] = &unk_10015E320;
  v18[4] = &v27;
  v18[5] = &v23;
  v18[6] = &v19;
  objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v18);
  v8 = v20[3];
  v9 = v24[3] + v8;
  if (v9 == 0.0)
  {
    v10 = 0.0;
    v11 = 0.0;
  }
  else
  {
    v10 = v8 / v9 * 100.0;
    v11 = v28[3] / v9;
  }
  v31[0] = CFSTR("resumeRate");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v10));
  v31[1] = CFSTR("avgActivationTime");
  v32[0] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11));
  v32[1] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v32, v31, 2));

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000553D4;
  v16[3] = &unk_10015DA30;
  v15 = v14;
  v17 = v15;
  AnalyticsSendEventLazy(CFSTR("com.apple.dasd.appResume.daily.metrics"), v16);
  if (os_log_type_enabled(*(os_log_t *)(*(_QWORD *)(a1 + 32) + 8), OS_LOG_TYPE_DEBUG))
    sub_1000E2390();
  objc_msgSend(v3, "setTaskCompleted");

  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);

}

void sub_1000552D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_100055314(_QWORD *a1, uint64_t a2, void *a3)
{
  double v4;
  double v5;
  double v6;
  id v7;

  v7 = a3;
  if ((int)objc_msgSend(v7, "launchCount") >= 1 && (int)objc_msgSend(v7, "resumeCount") >= 1)
  {
    objc_msgSend(v7, "totalLaunchActivationTime");
    v5 = v4;
    objc_msgSend(v7, "totalResumeActivationTime");
    *(double *)(*(_QWORD *)(a1[4] + 8) + 24) = v5 + v6 + *(double *)(*(_QWORD *)(a1[4] + 8) + 24);
    *(double *)(*(_QWORD *)(a1[5] + 8) + 24) = *(double *)(*(_QWORD *)(a1[5] + 8) + 24)
                                                 + (double)(int)objc_msgSend(v7, "launchCount");
    *(double *)(*(_QWORD *)(a1[6] + 8) + 24) = *(double *)(*(_QWORD *)(a1[6] + 8) + 24)
                                                 + (double)(int)objc_msgSend(v7, "resumeCount");
  }

}

id sub_1000553D4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000555E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000555FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10005560C(uint64_t a1)
{

}

void sub_100055614(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appActivationPublisherForEventsFrom:", *(_QWORD *)(a1 + 40)));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000556F8;
  v8[3] = &unk_10015E348;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(id *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 32);
  v9 = v4;
  v10 = v5;
  v11 = *(id *)(a1 + 64);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100055750;
  v7[3] = &unk_10015E398;
  v7[4] = *(_QWORD *)(a1 + 72);
  v6 = objc_msgSend(v2, "sinkWithBookmark:completion:receiveInput:", v3, v8, v7);

}

void sub_1000556F8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  if (*(_QWORD *)(a1 + 32))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "setObject:forKeyedSubscript:", a3);
  objc_msgSend(*(id *)(a1 + 40), "logCompletion:forAnalysisName:", v5, *(_QWORD *)(a1 + 48));

}

id sub_100055750(uint64_t a1, void *a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000557A8;
  v3[3] = &unk_10015E370;
  v3[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v3);
}

void sub_1000557A8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if ((int)objc_msgSend(v5, "launchCount") >= 1 && (int)objc_msgSend(v5, "resumeCount") >= 1)
  {
    objc_msgSend(v5, "totalLaunchActivationTime");
    v7 = v6 / (double)(int)objc_msgSend(v5, "launchCount");
    objc_msgSend(v5, "totalResumeActivationTime");
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v7 - v8 / (double)(int)objc_msgSend(v5, "resumeCount")));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v9, v10);

  }
}

void sub_100055A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100055A94(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appActivationPublisherForEventsFrom:", *(_QWORD *)(a1 + 40)));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100055B78;
  v8[3] = &unk_10015E348;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(id *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 32);
  v9 = v4;
  v10 = v5;
  v11 = *(id *)(a1 + 64);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100055BD0;
  v7[3] = &unk_10015E398;
  v7[4] = *(_QWORD *)(a1 + 72);
  v6 = objc_msgSend(v2, "sinkWithBookmark:completion:receiveInput:", v3, v8, v7);

}

void sub_100055B78(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  if (*(_QWORD *)(a1 + 32))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "setObject:forKeyedSubscript:", a3);
  objc_msgSend(*(id *)(a1 + 40), "logCompletion:forAnalysisName:", v5, *(_QWORD *)(a1 + 48));

}

void sub_100055BD0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

BOOL sub_100055C78(id a1, BMStoreEvent *a2)
{
  void *v2;
  void *v3;
  BOOL v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](a2, "eventBody"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bundleID"));
  v4 = v3 != 0;

  return v4;
}

NSMutableDictionary *__cdecl sub_100055CBC(id a1, NSMutableDictionary *a2, BMStoreEvent *a3)
{
  NSMutableDictionary *v4;
  BMStoreEvent *v5;
  void *v6;
  void *v7;
  void *v8;
  AppActivationTimeInfo *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  double v14;
  unsigned int v15;
  double v16;

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](v5, "eventBody"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleID"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v4, "objectForKey:", v7));
  if (!v8)
  {
    v9 = objc_alloc_init(AppActivationTimeInfo);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v9, v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", v7));
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](v5, "eventBody"));
  v11 = objc_msgSend(v10, "launchReason");

  if (v11)
  {
    objc_msgSend(v8, "setResumeCount:", objc_msgSend(v8, "resumeCount") + 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](v5, "eventBody"));
    v15 = objc_msgSend(v12, "activationTime");
    objc_msgSend(v8, "totalResumeActivationTime");
    objc_msgSend(v8, "setTotalResumeActivationTime:", v16 + (double)v15);
  }
  else
  {
    objc_msgSend(v8, "setLaunchCount:", objc_msgSend(v8, "launchCount") + 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](v5, "eventBody"));
    v13 = objc_msgSend(v12, "activationTime");
    objc_msgSend(v8, "totalLaunchActivationTime");
    objc_msgSend(v8, "setTotalLaunchActivationTime:", v14 + (double)v13);
  }

  return v4;
}

void sub_100056030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005604C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appKillsInfoPublisherForEventsFrom:", *(_QWORD *)(a1 + 40)));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100056130;
  v8[3] = &unk_10015E348;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(id *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 32);
  v9 = v4;
  v10 = v5;
  v11 = *(id *)(a1 + 64);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100056188;
  v7[3] = &unk_10015E398;
  v7[4] = *(_QWORD *)(a1 + 72);
  v6 = objc_msgSend(v2, "sinkWithBookmark:completion:receiveInput:", v3, v8, v7);

}

void sub_100056130(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  if (*(_QWORD *)(a1 + 32))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "setObject:forKeyedSubscript:", a3);
  objc_msgSend(*(id *)(a1 + 40), "logCompletion:forAnalysisName:", v5, *(_QWORD *)(a1 + 48));

}

void sub_100056188(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a2;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", &stru_10015E480);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1000561C8(id a1, NSString *a2, AppKillsInfo *a3, BOOL *a4)
{
  void *v4;
  double v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  AppKillsInfo *v11;

  v11 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[AppKillsInfo firstKillEventDate](v11, "firstKillEventDate"));
  objc_msgSend(v4, "timeIntervalSinceNow");
  v6 = vcvtpd_s64_f64(v5 / -86400.0);

  -[AppKillsInfo meanSpringBoardKills](v11, "meanSpringBoardKills");
  -[AppKillsInfo setMeanSpringBoardKills:](v11, "setMeanSpringBoardKills:", v7 / (double)v6);
  -[AppKillsInfo meanRunningBoardKills](v11, "meanRunningBoardKills");
  -[AppKillsInfo setMeanRunningBoardKills:](v11, "setMeanRunningBoardKills:", v8 / (double)v6);
  -[AppKillsInfo meanJetsamKills](v11, "meanJetsamKills");
  -[AppKillsInfo setMeanJetsamKills:](v11, "setMeanJetsamKills:", v9 / (double)v6);
  -[AppKillsInfo meanOtherKills](v11, "meanOtherKills");
  -[AppKillsInfo setMeanOtherKills:](v11, "setMeanOtherKills:", v10 / (double)v6);

}

BOOL sub_1000562F8(id a1, BMStoreEvent *a2)
{
  void *v2;
  void *v3;
  BOOL v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](a2, "eventBody"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bundleID"));
  v4 = v3 != 0;

  return v4;
}

NSMutableDictionary *__cdecl sub_10005633C(id a1, NSMutableDictionary *a2, BMStoreEvent *a3)
{
  NSMutableDictionary *v4;
  BMStoreEvent *v5;
  void *v6;
  void *v7;
  void *v8;
  AppKillsInfo *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  double v13;
  void *v14;
  unsigned int v15;
  double v16;
  void *v17;
  unsigned int v18;
  double v19;
  double v20;

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](v5, "eventBody"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleID"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v4, "objectForKey:", v7));
  if (!v8)
  {
    v9 = objc_alloc_init(AppKillsInfo);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v9, v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", v7));
    -[BMStoreEvent timestamp](v5, "timestamp");
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"));
    objc_msgSend(v8, "setFirstKillEventDate:", v10);

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](v5, "eventBody"));
  v12 = objc_msgSend(v11, "exitReason");

  if (v12 == 10)
  {
    objc_msgSend(v8, "meanSpringBoardKills");
    objc_msgSend(v8, "setMeanSpringBoardKills:", v13 + 1.0);
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](v5, "eventBody"));
    v15 = objc_msgSend(v14, "exitReason");

    if (v15 == 15)
    {
      objc_msgSend(v8, "meanRunningBoardKills");
      objc_msgSend(v8, "setMeanRunningBoardKills:", v16 + 1.0);
    }
    else
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](v5, "eventBody"));
      v18 = objc_msgSend(v17, "exitReason");

      if (v18 == 1)
      {
        objc_msgSend(v8, "meanJetsamKills");
        objc_msgSend(v8, "setMeanJetsamKills:", v19 + 1.0);
      }
      else
      {
        objc_msgSend(v8, "meanOtherKills");
        objc_msgSend(v8, "setMeanOtherKills:", v20 + 1.0);
      }
    }
  }

  return v4;
}

void sub_100056624(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB7E0;
  qword_1001AB7E0 = (uint64_t)v1;

}

void sub_100056C4C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB7F0;
  qword_1001AB7F0 = (uint64_t)v1;

}

void sub_1000570B4(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001AB800;
  qword_1001AB800 = (uint64_t)v1;

}

void sub_100057634(id a1)
{
  _DASMemoryPressurePolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASMemoryPressurePolicy);
  v2 = (void *)qword_1001AB810;
  qword_1001AB810 = (uint64_t)v1;

}

void sub_100057B60(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB820;
  qword_1001AB820 = (uint64_t)v1;

}

void sub_100057D70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100057EA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100058184(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005842C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100058520(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100058940(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100058B64(uint64_t a1, int token)
{
  void *v3;
  void *v4;
  uint64_t state64;

  state64 = 0;
  notify_get_state(token, &state64);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "unCenter"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "defaultNotifcationRequest"));
  objc_msgSend(v3, "addNotificationRequest:withCompletionHandler:", v4, 0);

}

void sub_100058C48(uint64_t a1)
{
  id v2;
  void *v3;

  if (+[_DASConfig isInternalBuild](_DASConfig, "isInternalBuild"))
  {
    v2 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
    v3 = (void *)qword_1001AB838;
    qword_1001AB838 = (uint64_t)v2;

  }
}

void sub_100059068(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001AB840;
  qword_1001AB840 = v1;

}

void sub_1000599B4(uint64_t a1)
{
  id v2;
  char v3;
  char v4;
  char v5;
  char v6;
  _UNKNOWN **v7;
  _UNKNOWN **v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _UNKNOWN **v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  void *v21;
  void *v22;
  void *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id obj;
  uint64_t v36;
  id v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];

  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v2 = *(id *)(a1 + 32);
  v37 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
  if (!v37)
  {

    return;
  }
  v32 = a1;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  obj = v2;
  v36 = *(_QWORD *)v41;
  v7 = &AnalyticsSendEvent_ptr;
  v8 = &AnalyticsSendEvent_ptr;
  do
  {
    for (i = 0; i != v37; i = (char *)i + 1)
    {
      if (*(_QWORD *)v41 != v36)
        objc_enumerationMutation(obj);
      v10 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
      if ((v6 & 1) != 0)
      {
        v39 = 0;
        if ((v5 & 1) != 0)
          goto LABEL_26;
      }
      else
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7[185], "keyPathForBatteryLevel"));
        if ((objc_msgSend(v10, "isEqual:", v12) & 1) != 0)
        {
          v39 = 1;
        }
        else
        {
          v14 = v7;
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7[185], "keyPathForLowPowerModeStatus"));
          if ((objc_msgSend(v10, "isEqual:", v15) & 1) != 0)
          {
            v39 = 1;
          }
          else
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14[185], "keyPathForPluginStatus"));
            if ((objc_msgSend(v10, "isEqual:", v17) & 1) != 0)
            {
              v39 = 1;
            }
            else
            {
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14[185], "keyPathForBatteryStateDataDictionary"));
              v39 = objc_msgSend(v10, "isEqual:", v18);

            }
            v8 = &AnalyticsSendEvent_ptr;
          }

          v7 = &AnalyticsSendEvent_ptr;
        }

        if ((v5 & 1) != 0)
        {
LABEL_26:
          v38 = 0;
          if ((v4 & 1) != 0)
            goto LABEL_49;
          goto LABEL_27;
        }
      }
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7[185], "keyPathForMotionState", v32));
      if ((objc_msgSend(v10, "isEqual:", v11) & 1) != 0)
      {
        v38 = 1;
      }
      else
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7[185], "keyPathForCallInProgressStatus"));
        if ((objc_msgSend(v10, "isEqual:", v13) & 1) != 0)
        {
          v38 = 1;
        }
        else
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7[185], "keyPathForCarplayConnectedStatus"));
          if ((objc_msgSend(v10, "isEqual:", v16) & 1) != 0)
          {
            v38 = 1;
          }
          else
          {
            v33 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextualKeyPath ephemeralKeyPathWithKey:](_CDContextualKeyPath, "ephemeralKeyPathWithKey:", CFSTR("/car/isConnected")));
            if ((objc_msgSend(v10, "isEqual:") & 1) != 0)
            {
              v38 = 1;
            }
            else
            {
              v30 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextualKeyPath ephemeralKeyPathWithKey:](_CDContextualKeyPath, "ephemeralKeyPathWithKey:", CFSTR("/maps/navigationInProgress")));
              v38 = objc_msgSend(v10, "isEqual:", v30);

            }
            v8 = &AnalyticsSendEvent_ptr;
          }

          v7 = &AnalyticsSendEvent_ptr;
        }

      }
      if ((v4 & 1) != 0)
      {
LABEL_49:
        v20 = 0;
        if ((v3 & 1) != 0)
          goto LABEL_50;
        goto LABEL_37;
      }
LABEL_27:
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7[185], "keyPathForThermalPressureLevel", v32));
      if ((objc_msgSend(v10, "isEqual:", v19) & 1) != 0)
      {
        v20 = 1;
      }
      else
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7[185], "keyPathForInUseStatus"));
        if ((objc_msgSend(v10, "isEqual:", v21) & 1) != 0)
        {
          v20 = 1;
        }
        else
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextualKeyPath ephemeralKeyPathWithKey:](_CDContextualKeyPath, "ephemeralKeyPathWithKey:", CFSTR("/system/peakPowerPressureLevel")));
          if ((objc_msgSend(v10, "isEqual:", v22) & 1) != 0)
          {
            v20 = 1;
          }
          else
          {
            v34 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextQueries keyPathForEnergyBudgetRemainingStatus](_CDContextQueries, "keyPathForEnergyBudgetRemainingStatus"));
            v20 = objc_msgSend(v10, "isEqual:", v34);

          }
          v8 = &AnalyticsSendEvent_ptr;
        }

        v7 = &AnalyticsSendEvent_ptr;
      }

      if ((v3 & 1) != 0)
      {
LABEL_50:
        v24 = 0;
        v25 = v39;
        goto LABEL_51;
      }
LABEL_37:
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7[185], "keyPathForNetworkingBudgetRemainingStatus", v32));
      if ((objc_msgSend(v10, "isEqual:", v23) & 1) != 0)
      {
        v24 = 1;
        v25 = v39;
      }
      else
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8[190], "keyPathForWiFiConnectionStatus"));
        if ((objc_msgSend(v10, "isEqual:", v26) & 1) != 0)
        {
          v24 = 1;
        }
        else
        {
          v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8[190], "keyPathForCellConnectionStatus"));
          v28 = v10;
          v29 = (void *)v27;
          v24 = objc_msgSend(v28, "isEqual:");

        }
        v25 = v39;

        v7 = &AnalyticsSendEvent_ptr;
      }

LABEL_51:
      v6 |= v25;
      v5 |= v38;
      v4 |= v20;
      v3 |= v24;
      v8 = &AnalyticsSendEvent_ptr;
    }
    v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
  }
  while (v37);

  if ((v6 & 1) == 0)
  {
    v31 = v32;
    if ((v4 & 1) == 0)
      goto LABEL_59;
    goto LABEL_58;
  }
  v31 = v32;
  objc_msgSend(*(id *)(v32 + 40), "recordBatteryStatus");
  if ((v4 & 1) != 0)
LABEL_58:
    objc_msgSend(*(id *)(v31 + 40), "recordPowerManagementStatus", v32);
LABEL_59:
  if ((v3 & 1) != 0)
    objc_msgSend(*(id *)(v31 + 40), "recordNetworkStatus");
  if ((v5 & 1) != 0)
    objc_msgSend(*(id *)(v31 + 40), "recordMotionStatus");
}

void sub_100059F68(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001AB850;
  qword_1001AB850 = v1;

}

void sub_10005A42C(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.dasd.aprsBiomeEventQueue", 0);
  v2 = (void *)qword_1001AB870;
  qword_1001AB870 = (uint64_t)v1;

}

id sub_10005A584(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "sendEvent:", *(_QWORD *)(a1 + 40));
}

id sub_10005A6BC(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10005A718;
  v3[3] = &unk_10015E550;
  v3[4] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v1, "pruneWithPredicateBlock:", v3);
}

BOOL sub_10005A718(uint64_t a1, void *a2, _BYTE *a3)
{
  double v5;
  double v6;

  objc_msgSend(a2, "timestamp");
  v6 = *(double *)(a1 + 32);
  if (v5 >= v6)
    *a3 = 1;
  return v5 < v6;
}

id sub_10005A8A8(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2050000000;
  v2 = (void *)qword_1001AB890;
  v10 = qword_1001AB890;
  if (!qword_1001AB890)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10005B334;
    v6[3] = &unk_10015D610;
    v6[4] = &v7;
    sub_10005B334((uint64_t)v6);
    v2 = (void *)v8[3];
  }
  v3 = objc_retainAutorelease(v2);
  _Block_object_dispose(&v7, 8);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "predictor"));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = objc_msgSend(v4, "historicalClassification");

  return objc_msgSend(*(id *)(a1 + 40), "setInteger:forKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), CFSTR("drainBehavior"));
}

void sub_10005A97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005A9D4(id a1)
{
  _APRSPrewarmInterface *v1;
  void *v2;

  v1 = objc_opt_new(_APRSPrewarmInterface);
  v2 = (void *)qword_1001AB880;
  qword_1001AB880 = (uint64_t)v1;

}

id sub_10005AD00(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidatePrewarmAssertionForApplication:", *(_QWORD *)(a1 + 40));
}

void sub_10005B228(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[_APRSMetricRecorder sharedInstance](_APRSMetricRecorder, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "identifier"));
  objc_msgSend(v4, "endEventForApp:pid:forEvent:", v3, objc_msgSend(*(id *)(a1 + 32), "pid"), 0);

}

Class sub_10005B334(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1001AB898)
  {
    v5 = off_10015E5B8;
    v6 = 0;
    qword_1001AB898 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1001AB898)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("_OSBatteryDrainPredictor");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_1000E26D0();
LABEL_8:
    free(v2);
  }
  qword_1001AB890 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10005B630(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB8A8;
  qword_1001AB8A8 = (uint64_t)v1;

}

uint64_t sub_10005BEC4(uint64_t a1)
{
  void *v2;
  void *v3;
  id *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_CDClientContext userContext](_CDClientContext, "userContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v5 = *(void **)(a1 + 32);
  v4 = (id *)(a1 + 32);
  objc_msgSend(v5, "setWifiPredictionTimeline:", v3);

  v6 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("predictions")));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    sub_1000E27BC(v4, v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v4, "wifiPredictionTimeline"));
  +[_DASPredictionManager setPrediction:forKey:](_DASPredictionManager, "setPrediction:forKey:", v7, CFSTR("wifiPredictions"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPLLogger sharedInstance](_DASPLLogger, "sharedInstance"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v4, "wifiPredictionTimeline"));
  objc_msgSend(v8, "recordPrediction:key:valueMultiplier:", v9, CFSTR("wiFiAssociatedPrediction"), 1);

  return 1;
}

uint64_t sub_10005BFD4(uint64_t a1)
{
  void *v2;
  void *v3;
  id *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_CDClientContext userContext](_CDClientContext, "userContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v5 = *(void **)(a1 + 32);
  v4 = (id *)(a1 + 32);
  objc_msgSend(v5, "setCellPredictionTimeline:", v3);

  v6 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("predictions")));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    sub_1000E2840(v4, v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v4, "cellPredictionTimeline"));
  +[_DASPredictionManager setPrediction:forKey:](_DASPredictionManager, "setPrediction:forKey:", v7, CFSTR("cellPredictions"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPLLogger sharedInstance](_DASPLLogger, "sharedInstance"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v4, "cellPredictionTimeline"));
  objc_msgSend(v8, "recordPrediction:key:valueMultiplier:", v9, CFSTR("cellQualityPrediction"), 1);

  return 1;
}

id sub_10005C2F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "loadCTInformationWithSDM:", 0);
}

void sub_10005CEE4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  __CFString *v6;
  __CFString *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  const __CFString *v14;
  const char *v15;
  const __CFString *v16;
  _QWORD v17[5];
  uint8_t buf[4];
  const __CFString *v19;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5 && !v6)
  {
    v8 = objc_msgSend(objc_alloc((Class)CTBundle), "initWithBundleType:", 1);
    v9 = v5;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void **)(v10 + 104);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10005D170;
    v17[3] = &unk_10015E608;
    v17[4] = v10;
    objc_msgSend(v11, "copyCarrierBundleValue:key:bundleType:completion:", v9, CFSTR("ManagedHours"), v8, v17);
    if (!*(_BYTE *)(a1 + 40))
    {
LABEL_18:

      goto LABEL_19;
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[CTServiceDescriptor descriptorWithSubscriptionContext:](CTServiceDescriptor, "descriptorWithSubscriptionContext:", v9));
    if (v12)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "smartDataMode:error:", v12, 0);
      v13 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("carrierBundle")));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 9))
          v14 = CFSTR("enabled");
        else
          v14 = CFSTR("disabled");
        *(_DWORD *)buf = 138412290;
        v19 = v14;
        v15 = "Smart data mode is %@";
        goto LABEL_16;
      }
    }
    else
    {
      v13 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("carrierBundle")));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v19 = CFSTR("Service Descriptor is nil.");
        v15 = "Error getting service descriptor: %@";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
      }
    }

    goto LABEL_18;
  }
  v8 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("carrierBundle")));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v16 = CFSTR("Context is nil.");
    if (v7)
      v16 = v7;
    *(_DWORD *)buf = 138412290;
    v19 = v16;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error getting preferred data subscription: %@", buf, 0xCu);
  }
LABEL_19:

}

void sub_10005D170(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  char isKindOfClass;
  void *v9;
  void *v10;
  NSObject *v11;
  int v12;
  id v13;

  v5 = a2;
  v6 = a3;
  if (v5
    && (v7 = objc_opt_class(NSDictionary), isKindOfClass = objc_opt_isKindOfClass(v5, v7), !v6)
    && (isKindOfClass & 1) != 0)
  {
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v9, "parseCTCongestionHoursDictionary:atDate:", v5, v10);

  }
  else
  {
    v11 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("carrierBundle")));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 138412290;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Error copying carrier bundle value: %@", (uint8_t *)&v12, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "clearOffPeakDiscountedHours");
  }

}

void sub_10005D340(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10005D35C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  _DWORD v10[2];

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
    {
      v8 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("networkQuality")));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_1000E28C4();

      objc_msgSend(v7, "setPrivateNetworkCellConnection:", 0);
    }
    else
    {
      objc_msgSend(WeakRetained, "setPrivateNetworkCellConnection:", a2);
      if ((_DWORD)a2)
      {
        v9 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("networkQuality")));
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10[0] = 67109120;
          v10[1] = 1;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PNW Status: %u", (uint8_t *)v10, 8u);
        }

      }
    }
  }

}

void sub_10005D8C4(id a1)
{
  _DASNetworkQualityPolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASNetworkQualityPolicy);
  v2 = (void *)qword_1001AB8C0;
  qword_1001AB8C0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001AB8C0, "registerForPredictionChanges");
}

id sub_10005EAF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateSystemConstraintsWithContext:", *(_QWORD *)(a1 + 40));
}

void sub_10005F2F8(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001AB908;
  qword_1001AB908 = (uint64_t)v1;

}

void sub_10005F498(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005FD5C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001AB918;
  qword_1001AB918 = (uint64_t)v1;

}

void sub_100060648(id a1)
{
  _DASRequiresPluggedInPolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASRequiresPluggedInPolicy);
  v2 = (void *)qword_1001AB930;
  qword_1001AB930 = (uint64_t)v1;

}

void sub_1000609A0(uint64_t a1)
{
  void *v2;
  double v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  BOOL v7;
  void *v8;
  double v9;
  uint64_t v10;
  __objc2_class_ro **p_info;
  __objc2_class **p_superclass;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  double v30;
  double v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *i;
  double v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  void *v49;
  void *v50;
  uint8_t buf[4];
  void *v52;

  if (*(_BYTE *)(a1 + 56) && !*(_BYTE *)(a1 + 57))
  {
    if (dword_1001AA648 != 1)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "setObject:forKey:", *(_QWORD *)(a1 + 48), CFSTR("limitationsInEffectStart"));
      dword_1001AA648 = 1;
    }
  }
  else if (dword_1001AA648)
  {
    dword_1001AA648 = 0;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "objectForKey:", CFSTR("limitationsInEffectStart")));
    if (v2)
    {
      objc_msgSend(*(id *)(a1 + 48), "timeIntervalSinceDate:", v2);
      v4 = (uint64_t)fmax(round(v3), 0.0);
      +[_DASMetricRecorder incrementOccurrencesForKey:byCount:](_DASMetricRecorder, "incrementOccurrencesForKey:byCount:", CFSTR("com.apple.das.plugin.limitationDuration"), v4);
      v5 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("stats")));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)v4 / 60.0));
        *(_DWORD *)buf = 138412290;
        v52 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Limitations were in effect for %@ mins", buf, 0xCu);

      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "removeObjectForKey:", CFSTR("limitationsInEffectStart"));
    }

  }
  if (*(_BYTE *)(a1 + 57))
    v7 = dword_1001AA64C == 1;
  else
    v7 = 1;
  if (!v7)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "setObject:forKey:", *(_QWORD *)(a1 + 48), CFSTR("allowableDurationStart"));
    dword_1001AA64C = 1;
    return;
  }
  if (!*(_BYTE *)(a1 + 57) && dword_1001AA64C)
  {
    dword_1001AA64C = 0;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "objectForKey:", CFSTR("allowableDurationStart")));
    if (!v8)
    {
LABEL_47:

      return;
    }
    objc_msgSend(*(id *)(a1 + 48), "timeIntervalSinceDate:", v8);
    v10 = (uint64_t)fmax(round(v9), 0.0);
    p_info = &OBJC_METACLASS___AppKillsInfo.info;
    +[_DASMetricRecorder incrementOccurrencesForKey:byCount:](_DASMetricRecorder, "incrementOccurrencesForKey:byCount:", CFSTR("com.apple.das.plugin.allowableDuration"), v10);
    p_superclass = _DASCPMModePolicy.superclass;
    v13 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("stats")));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)v10 / 60.0));
      *(_DWORD *)buf = 138412290;
      v52 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Allowable duration: %@ mins", buf, 0xCu);

    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "removeObjectForKey:", CFSTR("allowableDurationStart"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "arrayForKey:", CFSTR("dailyAllowableDurationStarts")));
    v16 = objc_msgSend(v15, "mutableCopy");

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "arrayForKey:", CFSTR("dailyAllowableDurations")));
    v18 = objc_msgSend(v17, "mutableCopy");

    if (!objc_msgSend(v16, "count"))
    {
      v50 = v8;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v50, 1));
      v24 = objc_msgSend(v23, "mutableCopy");

      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v10));
      v49 = v25;
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v49, 1));
      v27 = objc_msgSend(v26, "mutableCopy");

      v16 = v24;
      v18 = v27;
LABEL_46:
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "setObject:forKey:", v16, CFSTR("dailyAllowableDurationStarts"));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "setObject:forKey:", v18, CFSTR("dailyAllowableDurations"));

      goto LABEL_47;
    }
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "lastObject"));
    objc_msgSend(v8, "timeIntervalSinceDate:", v19);
    v21 = v20;

    if (v21 <= 86400.0)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "lastObject"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", (char *)objc_msgSend(v22, "integerValue") + v10));
      objc_msgSend(v18, "setObject:atIndexedSubscript:", v28, (char *)objc_msgSend(v18, "count") - 1);

    }
    else
    {
      objc_msgSend(v16, "addObject:", v8);
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v10));
      objc_msgSend(v18, "addObject:", v22);
    }

    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectAtIndexedSubscript:", 0));
    objc_msgSend(v8, "timeIntervalSinceDate:", v29);
    v31 = v30;

    if (v31 <= 604800.0)
    {
LABEL_44:
      if ((unint64_t)objc_msgSend(v16, "count") >= 8)
      {
        objc_msgSend(v16, "removeObjectAtIndex:", 0);
        objc_msgSend(v18, "removeObjectAtIndex:", 0);
      }
      goto LABEL_46;
    }
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v32 = v18;
    v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
    if (v33)
    {
      v34 = v33;
      v35 = 0;
      v36 = *(_QWORD *)v45;
      do
      {
        for (i = 0; i != v34; i = (char *)i + 1)
        {
          if (*(_QWORD *)v45 != v36)
            objc_enumerationMutation(v32);
          v35 += (uint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i), "integerValue", (_QWORD)v44);
        }
        v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
      }
      while (v34);

      p_info = (__objc2_class_ro **)(&OBJC_METACLASS___AppKillsInfo + 32);
      if (v35 > 53999)
      {
        v41 = 0;
        p_superclass = _DASCPMModePolicy.superclass;
LABEL_41:
        objc_msgSend(*(id *)(a1 + 40), "setDeficitProcessing:", v41);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "setBool:forKey:", v41, CFSTR("deficitProcessing"));
        v42 = objc_claimAutoreleasedReturnValue(objc_msgSend(p_superclass + 224, "logForCategory:", CFSTR("stats")));
        if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
          v43 = objc_msgSend(*(id *)(a1 + 40), "deficitProcessing");
          *(_DWORD *)buf = 67109120;
          LODWORD(v52) = v43;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "Deficit Processing=%u", buf, 8u);
        }

        goto LABEL_44;
      }
      v38 = (double)v35;
      p_superclass = (__objc2_class **)(_DASCPMModePolicy + 8);
    }
    else
    {

      v38 = 0.0;
    }
    v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(p_superclass + 224, "logForCategory:", CFSTR("stats"), (_QWORD)v44));
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v38 / 3600.0));
      *(_DWORD *)buf = 138412290;
      v52 = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Allowable duration for last 7 days was %@ hours; allowing deficit processing",
        buf,
        0xCu);

    }
    v41 = 1;
    objc_msgSend(p_info + 476, "setValue:forKey:", 1, CFSTR("com.apple.das.plugin.usersInDeficitProcessing"));
    goto LABEL_41;
  }
}

void sub_100061C48(void *a1)
{
  void *v1;
  id v2;
  id v3;

  v3 = a1;
  if (objc_msgSend(v3, "state"))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
    v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "description")));
    printf("Error: %s\n", (const char *)objc_msgSend(v2, "UTF8String"));

  }
  else
  {
    puts("Complete");
  }

}

void sub_100061F4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006236C(id a1)
{
  _DASRequiresRestartPolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASRequiresRestartPolicy);
  v2 = (void *)qword_1001AB940;
  qword_1001AB940 = (uint64_t)v1;

}

id sub_100062814(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[3];
  _QWORD v11[3];

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "components:fromDate:", 96, *(_QWORD *)(a1 + 32)));

  objc_autoreleasePoolPop(v2);
  v10[0] = CFSTR("Default");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40)));
  v11[0] = v5;
  v10[1] = CFSTR("StartHour");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v4, "hour")));
  v11[1] = v6;
  v10[2] = CFSTR("StartMinute");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v4, "minute")));
  v11[2] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 3));

  return v8;
}

void sub_100063A88(id a1)
{
  _DASThermalPolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASThermalPolicy);
  v2 = (void *)qword_1001AB950;
  qword_1001AB950 = (uint64_t)v1;

}

id sub_1000646F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateSystemConstraintsWithContext:", *(_QWORD *)(a1 + 40));
}

void sub_1000649F8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.aprs", "appResume.AppKillWriter");
  v2 = (void *)qword_1001AB968;
  qword_1001AB968 = (uint64_t)v1;

}

void sub_100064B94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100064CDC(id a1)
{
  _APRSBiomeAppKillEventWriter *v1;
  void *v2;

  v1 = objc_alloc_init(_APRSBiomeAppKillEventWriter);
  v2 = (void *)qword_1001AB978;
  qword_1001AB978 = (uint64_t)v1;

}

void sub_100064DD0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  void *v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessPredicate predicateMatchingProcessTypeApplication](RBSProcessPredicate, "predicateMatchingProcessTypeApplication"));
  v8 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
  objc_msgSend(v3, "setPredicates:", v5);

  objc_msgSend(v3, "setEvents:", 1);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100064ED8;
  v6[3] = &unk_10015E7C8;
  v7 = *(id *)(a1 + 32);
  objc_msgSend(v3, "setUpdateHandler:", v6);

}

void sub_100064ED8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;

  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a4, "exitEvent"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "context"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "process"));
  v10 = objc_msgSend(v9, "pid");

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundle"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "status"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[_APRSBiomeAppKillEvent eventWithAppBundleID:pid:exitReason:](_APRSBiomeAppKillEvent, "eventWithAppBundleID:pid:exitReason:", v12, v10, objc_msgSend(v13, "domain")));

  +[_APRSBiomeBase postEvent:](_APRSBiomeAppKillEvent, "postEvent:", v14);
  v15 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    sub_1000E2D18((uint64_t)v14, v15);

}

void sub_100065D18(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_100065D44(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "scheduler_activity"));
    v7 = objc_msgSend(v3, "isEqual:", v6);

    v8 = qword_1001AB980;
    if ((v7 & 1) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1001AB980, OS_LOG_TYPE_INFO))
      {
        v10 = 138543362;
        v11 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "DAS told us to run %{public}@", (uint8_t *)&v10, 0xCu);
      }
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTaskHelper sharedInstance](_DASBGSystemTaskHelper, "sharedInstance"));
      objc_msgSend(v9, "runActivity:", v5);

    }
    else if (os_log_type_enabled((os_log_t)qword_1001AB980, OS_LOG_TYPE_ERROR))
    {
      sub_1000E2DEC();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1001AB980, OS_LOG_TYPE_ERROR))
  {
    sub_1000E2D88();
  }

}

void sub_100065E98(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  id v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "scheduler_activity"));
    v7 = objc_msgSend(v3, "isEqual:", v6);

    if ((v7 & 1) != 0)
    {
      v8 = objc_msgSend(v5, "state");
      v9 = qword_1001AB980;
      v10 = os_log_type_enabled((os_log_t)qword_1001AB980, OS_LOG_TYPE_INFO);
      if (v8 == (id)3)
      {
        if (v10)
        {
          v14 = 138543362;
          v15 = v5;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "DAS told us to suspend %{public}@", (uint8_t *)&v14, 0xCu);
        }
        v11 = objc_msgSend(v3, "lastDenialValue");
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "scheduler_activity"));
        objc_msgSend(v12, "setLastDenialValue:", v11);

        v13 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTaskHelper sharedInstance](_DASBGSystemTaskHelper, "sharedInstance"));
        objc_msgSend(v13, "suspendActivity:", v5);

      }
      else if (v10)
      {
        v14 = 138543362;
        v15 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "DAS told us to suspend %{public}@, but task isn't running", (uint8_t *)&v14, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1001AB980, OS_LOG_TYPE_ERROR))
    {
      sub_1000E2EB4();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1001AB980, OS_LOG_TYPE_ERROR))
  {
    sub_1000E2E50();
  }

}

id sub_100066300(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "garbageCollectActivityDates");
}

void sub_100067858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100067878(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100067888(uint64_t a1)
{

}

BOOL sub_100067890(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  _BOOL8 v6;
  void *v7;
  void *v8;

  v4 = a3;
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[_DASActivityDependency dependencyFromDescriptor:withUID:](_DASActivityDependency, "dependencyFromDescriptor:withUID:", v4, *(unsigned int *)(a1 + 48)));
    v6 = v7 != 0;
    if (v7)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v7);
    }
    else
    {
      v8 = (void *)qword_1001AB980;
      if (os_log_type_enabled((os_log_t)qword_1001AB980, OS_LOG_TYPE_ERROR))
        sub_1000E35DC(a1, v8);
    }

  }
  else
  {
    v5 = (void *)qword_1001AB980;
    if (os_log_type_enabled((os_log_t)qword_1001AB980, OS_LOG_TYPE_ERROR))
      sub_1000E366C(a1, v5, (uint64_t)v4);
    v6 = 0;
  }

  return v6;
}

void sub_10006963C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_100069668(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

id sub_100069BD0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setRecentTriggerEvent:", 0);
}

id sub_100069BDC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setWaitingForInactivity:", 0);
}

void sub_100069BE8(uint64_t a1, int token)
{
  void *v3;
  id v4;
  uint64_t state64;

  state64 = 0;
  if (!notify_get_state(token, &state64))
  {
    v3 = *(void **)(a1 + 32);
    if (state64)
    {
      objc_msgSend(v3, "setRecentTriggerEvent:", 0);
      objc_msgSend(*(id *)(a1 + 32), "setWaitingForInactivity:", 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 10) = 1;
      v4 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.duetactivityscheduler"));
      objc_msgSend(v4, "setBool:forKey:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 10), CFSTR("ignoreTH"));
    }
    else
    {
      objc_msgSend(v3, "handleTriggerEvent");
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 10) = 0;
      v4 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.duetactivityscheduler"));
      objc_msgSend(v4, "removeObjectForKey:", CFSTR("ignoreTH"));
    }

  }
}

void sub_100069E6C(id a1)
{
  _DASThunderingHerdPolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASThunderingHerdPolicy);
  v2 = (void *)qword_1001AB9C0;
  qword_1001AB9C0 = (uint64_t)v1;

}

void sub_10006A5AC(id a1)
{
  _DASUserRequestedBackupPolicy *v1;
  void *v2;

  v1 = objc_alloc_init(_DASUserRequestedBackupPolicy);
  v2 = (void *)qword_1001AB9D0;
  qword_1001AB9D0 = (uint64_t)v1;

}

void sub_10006A900(id a1)
{
  _DASBackgroundAppKillDemo *v1;
  void *v2;

  v1 = objc_alloc_init(_DASBackgroundAppKillDemo);
  v2 = (void *)qword_1001AB9E0;
  qword_1001AB9E0 = (uint64_t)v1;

}

id sub_10006AA8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleNotification");
}

void sub_10006ADE0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(NSObject **)(v10 + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10006AEAC;
  v15[3] = &unk_10015DC88;
  v15[4] = v10;
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v12 = v9;
  v13 = v8;
  v14 = v7;
  dispatch_async(v11, v15);

}

id sub_10006AEAC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "processUpdateHandlerWithMonitor:withHandle:withUpdate:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_10006AEBC(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v5 = a1[4];
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v5, 1));
  objc_msgSend(v3, "setPredicates:", v4, v5);

  objc_msgSend(v3, "setStateDescriptor:", a1[5]);
  objc_msgSend(v3, "setUpdateHandler:", a1[6]);

}

void sub_10006B944(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001AB9F8;
  qword_1001AB9F8 = (uint64_t)v1;

}

void sub_10006C7A4(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001ABA08;
  qword_1001ABA08 = (uint64_t)v1;

}

void sub_10006C970(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001ABA18;
  qword_1001ABA18 = (uint64_t)v1;

}

void sub_10006CC08(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  _BYTE v28[128];

  v2 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "obtainActiveComplications");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_msgSend(v3, "mutableCopy");
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "count"))
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v5 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v21;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v21 != v8)
            objc_enumerationMutation(v5);
          objc_msgSend(v4, "removeObject:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v9), (_QWORD)v20);
          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
      }
      while (v7);
    }

  }
  v10 = objc_msgSend(v4, "copy", (_QWORD)v20);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 8), v3);
  v13 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("complications")));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(v14 + 8);
    v16 = *(_QWORD *)(v14 + 40);
    *(_DWORD *)buf = 138412546;
    v25 = v15;
    v26 = 2112;
    v27 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Active complications are %@ (Added: %@)", buf, 0x16u);
  }

  v17 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(void **)(v18 + 32);
  *(_QWORD *)(v18 + 32) = v17;

}

void sub_10006CDF8(uint64_t a1)
{
  NSObject *v1;
  dispatch_time_t v2;

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  v2 = dispatch_walltime(0, 2000000000);
  dispatch_source_set_timer(v1, v2, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
}

void sub_10006CE3C(uint64_t a1)
{
  NSObject *v1;
  dispatch_time_t v2;

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  v2 = dispatch_walltime(0, 2000000000);
  dispatch_source_set_timer(v1, v2, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
}

void sub_10006CE80(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "obtainActiveComplications");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = v3;

  v6 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("complications")));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = 138412290;
    v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Active complications are %@", (uint8_t *)&v8, 0xCu);
  }

}

void sub_10006D008(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "containsObject:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), (_QWORD)v7))*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void sub_10006D1C8(_QWORD *a1)
{
  void *v2;
  double v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  if (*(_QWORD *)(a1[4] + 32))
  {
    v4 = v2;
    objc_msgSend(v2, "timeIntervalSinceDate:");
    v2 = v4;
    if (v3 < 300.0)
    {
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = objc_msgSend(*(id *)(a1[4] + 40), "containsObject:", a1[5]);
      v2 = v4;
    }
  }

}

id sub_10006D558(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "reportBlockingAnalyticsAndReset");
}

NSMutableDictionary *sub_10006D844(uint64_t a1)
{
  NSMutableDictionary *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = objc_opt_new(NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), CFSTR("bucket"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "policyName"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v3, CFSTR("policyName"));

  v4 = *(void **)(a1 + 56);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "policyName"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v4, "containsObject:", v5)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v6, *(_QWORD *)(a1 + 48));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "treatmentID"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v7, CFSTR("treatmentID"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "experimentID"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v8, CFSTR("experimentID"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 64), "deploymentID")));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v9, CFSTR("deploymentID"));

  return v2;
}

void sub_10006E3E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006E41C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)qword_1001ABA28;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "schedulingPriority")));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));

  if (v5)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "policyName"));
    objc_msgSend(v5, "addObject:", v4);

  }
}

void sub_10006E4B8(id a1)
{
  NSDateFormatter *v1;
  void *v2;
  void *v3;
  id v4;

  v1 = objc_opt_new(NSDateFormatter);
  v2 = (void *)qword_1001ABA48;
  qword_1001ABA48 = (uint64_t)v1;

  objc_msgSend((id)qword_1001ABA48, "setDateStyle:", 1);
  objc_msgSend((id)qword_1001ABA48, "setTimeStyle:", 1);
  v3 = (void *)qword_1001ABA48;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"));
  objc_msgSend(v3, "setTimeZone:", v4);

}

void sub_10006EA7C(id a1)
{
  _DASActivityDependencyManager *v1;
  void *v2;

  v1 = objc_alloc_init(_DASActivityDependencyManager);
  v2 = (void *)qword_1001ABA58;
  qword_1001ABA58 = (uint64_t)v1;

}

void sub_10006EBD8(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  uint64_t v23;

  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v4 = v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v3, "count")));
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v21 = v5;
    v22 = 2112;
    v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Refreshing %@ dependency groups with updated file protection: %@", buf, 0x16u);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v8 = *(void **)(a1 + 40);
  v9 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10006ED60;
  v16[3] = &unk_10015E9D8;
  v10 = v8;
  v11 = *(_QWORD *)(a1 + 32);
  v17 = v10;
  v18 = v11;
  v12 = v7;
  v19 = v12;
  objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v16);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(void **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = v12;
  v15 = v12;

}

void sub_10006ED60(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  __objc2_class **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;

  v5 = a2;
  v6 = a3;
  if ((objc_msgSend(v6, "isPersistenceAvailableWithFileProtection:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v7 = &off_10015C638;
    v8 = objc_opt_class(_DASActivityResultDependencyGroup);
    if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0
      || (v7 = &off_10015C608,
          v9 = objc_opt_class(_DASActivityCompletionDependencyGroup),
          (objc_opt_isKindOfClass(v6, v9) & 1) != 0))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(-[__objc2_class groupFromPersistence:](*v7, "groupFromPersistence:", v5));
      v12 = *(void **)(a1 + 48);
      v11 = (void **)(a1 + 48);
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v10, v5);

      v13 = *((_QWORD *)*(v11 - 1) + 3);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        sub_1000E3950(v11, v13, (uint64_t)v5);
    }
    else
    {
      v14 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 24);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1000E3A00(v14);
    }
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(*(_QWORD *)(a1 + 40) + 24), OS_LOG_TYPE_DEBUG))
      sub_1000E3A98();
    objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v6, v5);
  }

}

void sub_10006F00C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  id v9;
  __int128 v10;
  id v11;
  uint64_t v12;
  void *j;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  void *v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  void *v35;
  _BYTE v36[128];
  _BYTE v37[128];

  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dependencies"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v26, v37, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "queue_dependencyGroupCreateIfDoesNotExist:", *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i)));
        objc_msgSend(v7, "handleActivitySubmission:", *(_QWORD *)(a1 + 32));

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v26, v37, 16);
    }
    while (v4);
  }

  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "producedResultIdentifiers"));
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v36, 16);
  if (v9)
  {
    v11 = v9;
    v12 = *(_QWORD *)v23;
    *(_QWORD *)&v10 = 136315650;
    v21 = v10;
    do
    {
      for (j = 0; j != v11; j = (char *)j + 1)
      {
        if (*(_QWORD *)v23 != v12)
          objc_enumerationMutation(v8);
        v14 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)j);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name", v21));
        v16 = objc_msgSend(v14, "isEqualToString:", v15);

        if ((v16 & 1) == 0)
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "queue_checkedResultDependencyGroupForIdentifier:", v14));
          v18 = v17;
          if (v17)
          {
            objc_msgSend(v17, "registerProducer:error:", *(_QWORD *)(a1 + 32), 0);
          }
          else
          {
            v19 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 24);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              v20 = *(_QWORD *)(a1 + 32);
              *(_DWORD *)buf = v21;
              v31 = "-[_DASActivityDependencyManager addActivityToDependencyGroups:]_block_invoke";
              v32 = 2112;
              v33 = v20;
              v34 = 2112;
              v35 = v14;
              _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%s: Tried to add %@ to a result dependency group (%@) but we could not create the group (persistence type conflict)", buf, 0x20u);
            }
          }

        }
      }
      v11 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v36, 16);
    }
    while (v11);
  }

}

void sub_10006F390(uint64_t a1)
{
  void *v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  __int128 v19;
  id v20;
  uint64_t v21;
  void *j;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t v40[128];
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  _BYTE v47[128];

  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dependencies"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v36, v47, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v37;
    *(_QWORD *)&v4 = 136315650;
    v30 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
        v9 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier", v30));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));

        if (v11)
        {
          objc_msgSend(v11, "deregisterDependent:", *(_QWORD *)(a1 + 32));
        }
        else
        {
          v12 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 24);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v13 = *(void **)(a1 + 32);
            v14 = v12;
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "description"));
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
            *(_DWORD *)buf = v30;
            v42 = "-[_DASActivityDependencyManager removeActivityFromDependencyGroups:]_block_invoke";
            v43 = 2112;
            v44 = v15;
            v45 = 2112;
            v46 = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s: Unable to deregister consuming activity %@ from dependency group for %@; group does not exist",
              buf,
              0x20u);

          }
        }

      }
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v36, v47, 16);
    }
    while (v5);
  }

  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "producedResultIdentifiers"));
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
  if (v18)
  {
    v20 = v18;
    v21 = *(_QWORD *)v33;
    *(_QWORD *)&v19 = 136315650;
    v31 = v19;
    do
    {
      for (j = 0; j != v20; j = (char *)j + 1)
      {
        if (*(_QWORD *)v33 != v21)
          objc_enumerationMutation(v17);
        v23 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)j);
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "queue_checkedResultDependencyGroupForIdentifier:", v23, v31));
        v25 = v24;
        if (v24)
        {
          objc_msgSend(v24, "deregisterProducer:error:", *(_QWORD *)(a1 + 32), 0);
        }
        else
        {
          v26 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 24);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            v27 = *(void **)(a1 + 32);
            v28 = v26;
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "description"));
            *(_DWORD *)buf = v31;
            v42 = "-[_DASActivityDependencyManager removeActivityFromDependencyGroups:]_block_invoke";
            v43 = 2112;
            v44 = v29;
            v45 = 2112;
            v46 = v23;
            _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%s: Unable to deregister producing activity %@ from dependency group for %@; group does not exist",
              buf,
              0x20u);

          }
        }

      }
      v20 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    }
    while (v20);
  }

}

uint64_t sub_10006F90C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10006F91C(uint64_t a1)
{

}

void sub_10006F924(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id obj;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[4];
  _QWORD v50[4];
  _QWORD v51[2];
  _QWORD v52[2];
  _BYTE v53[128];
  const __CFString *v54;
  void *v55;

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v2 = *(id *)(a1 + 32);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v46;
      while (2)
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v46 != v5)
            objc_enumerationMutation(v2);
          v7 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i);
          v8 = *(void **)(a1 + 40);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dependencyForIdentifier:", v9));

          if (!v10)
          {
            v51[0] = CFSTR("dependencyIdentifier");
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
            v51[1] = CFSTR("activityName");
            v52[0] = v23;
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "description"));
            v52[1] = v24;
            v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v52, v51, 2));
            v26 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASActivityDependencyManagerErrorDomain"), 1, v25));
            v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v28 = *(void **)(v27 + 40);
            *(_QWORD *)(v27 + 40) = v26;

            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
            goto LABEL_24;
          }
          v11 = *(void **)(a1 + 48);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "queue_checkedResultDependencyGroupForIdentifier:", v12));

          if (!v13)
          {
            v29 = *(NSObject **)(*(_QWORD *)(a1 + 48) + 24);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              sub_1000E3C8C(a1 + 40, v29);
            v49[0] = CFSTR("dependencyIdentifier");
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
            v50[0] = v43;
            v49[1] = CFSTR("activityName");
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "description"));
            v50[1] = v30;
            v49[2] = CFSTR("knownType");
            v31 = *(void **)(*(_QWORD *)(a1 + 48) + 8);
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "objectForKeyedSubscript:", v32));
            v34 = objc_msgSend((id)objc_opt_class(v33), "description");
            v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
            v36 = v35;
            if (!v35)
              v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
            v50[2] = v36;
            v49[3] = CFSTR("attemptedType");
            v37 = objc_msgSend((id)objc_opt_class(_DASActivityResultDependencyGroup), "description");
            v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
            v50[3] = v38;
            v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v50, v49, 4));
            v40 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASActivityDependencyManagerErrorDomain"), 4, v39));
            v41 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v42 = *(void **)(v41 + 40);
            *(_QWORD *)(v41 + 40) = v40;

            if (!v35)
            v17 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
LABEL_23:
            *(_BYTE *)(v17 + 24) = 0;

            goto LABEL_24;
          }
          v14 = *(_QWORD *)(a1 + 40);
          v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          obj = *(id *)(v15 + 40);
          v16 = objc_msgSend(v13, "reportActivity:consumedResult:error:", v14, v7, &obj);
          objc_storeStrong((id *)(v15 + 40), obj);
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v16;
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
          if (!*(_BYTE *)(v17 + 24) || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
            goto LABEL_23;

        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
        if (v4)
          continue;
        break;
      }
    }
LABEL_24:

  }
  else
  {
    v54 = CFSTR("activityName");
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "description"));
    v55 = v18;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v55, &v54, 1));
    v20 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASActivityDependencyManagerErrorDomain"), 3, v19));
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v22 = *(void **)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v20;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
  }
}

void sub_10006FFEC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id obj;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[4];
  _QWORD v41[4];
  _BYTE v42[128];
  const __CFString *v43;
  void *v44;

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v2 = *(id *)(a1 + 32);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v37;
      while (2)
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v37 != v5)
            objc_enumerationMutation(v2);
          v7 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
          v8 = *(void **)(a1 + 48);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "queue_checkedResultDependencyGroupForIdentifier:", v9));

          if (!v10)
          {
            v20 = *(NSObject **)(*(_QWORD *)(a1 + 48) + 24);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
              sub_1000E3D8C(a1 + 40, v20);
            v40[0] = CFSTR("dependencyIdentifier");
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
            v41[0] = v34;
            v40[1] = CFSTR("activityName");
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "description"));
            v41[1] = v21;
            v40[2] = CFSTR("knownType");
            v22 = *(void **)(*(_QWORD *)(a1 + 48) + 8);
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v23));
            v25 = objc_msgSend((id)objc_opt_class(v24), "description");
            v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
            v27 = v26;
            if (!v26)
              v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
            v41[2] = v27;
            v40[3] = CFSTR("attemptedType");
            v28 = objc_msgSend((id)objc_opt_class(_DASActivityResultDependencyGroup), "description");
            v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
            v41[3] = v29;
            v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v41, v40, 4));
            v31 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASActivityDependencyManagerErrorDomain"), 4, v30));
            v32 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v33 = *(void **)(v32 + 40);
            *(_QWORD *)(v32 + 40) = v31;

            if (!v26)
            v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
LABEL_21:
            *(_BYTE *)(v14 + 24) = 0;

            goto LABEL_22;
          }
          v11 = *(_QWORD *)(a1 + 40);
          v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          obj = *(id *)(v12 + 40);
          v13 = objc_msgSend(v10, "reportActivity:producedResult:error:", v11, v7, &obj);
          objc_storeStrong((id *)(v12 + 40), obj);
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v13;
          v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
          if (!*(_BYTE *)(v14 + 24) || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
            goto LABEL_21;

        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
        if (v4)
          continue;
        break;
      }
    }
LABEL_22:

  }
  else
  {
    v43 = CFSTR("activityName");
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "description"));
    v44 = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v44, &v43, 1));
    v17 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASActivityDependencyManagerErrorDomain"), 3, v16));
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
  }
}

void sub_100070468(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[128];
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  uint64_t v26;

  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136315394;
    v24 = "-[_DASActivityDependencyManager reportActivityDidFinishRunning:]_block_invoke";
    v25 = 2112;
    v26 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s: Reporting activity did finish running for %@", buf, 0x16u);
  }
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = (_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dependencies", 0));
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v10, "isActivityCompletionBased"))
        {
          v11 = *(void **)(a1 + 32);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "queue_checkedCompletionDependencyGroupForIdentifier:", v12));

          objc_msgSend(v13, "reportDependentActivityDidRun:", *(_QWORD *)(a1 + 40));
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v7);
  }

  v14 = *(void **)(a1 + 32);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "queue_checkedCompletionDependencyGroupForIdentifier:", v15));

  if (v16)
  {
    objc_msgSend(v16, "reportTrackedActivityDidRun:", *v4);
  }
  else
  {
    v17 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_1000E3E78((uint64_t)v4, v17);
  }

}

void sub_1000707D8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  __int128 v5;
  id v6;
  char v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  unsigned int v13;
  NSObject *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  id v22;
  __int128 v23;
  id *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  id v33;
  __int16 v34;
  id v35;
  __int16 v36;
  void *v37;
  _BYTE v38[128];

  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v24 = (id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dependencies"));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
  if (v4)
  {
    v6 = v4;
    v7 = 0;
    v8 = *(_QWORD *)v27;
    *(_QWORD *)&v5 = 136315650;
    v23 = v5;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v8)
          objc_enumerationMutation(v3);
        v10 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "queue_dependencyGroupCreateIfDoesNotExist:", v10, v23));
        v12 = objc_msgSend(v11, "isDependencySatisfiedForActivity:", *(_QWORD *)(a1 + 32));
        v13 = objc_msgSend(v10, "isActivityCompletionBased");
        if ((v12 & 1) != 0)
        {
          if (v13)
          {
            v14 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 24);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              v16 = *v24;
              *(_DWORD *)buf = v23;
              v31 = "-[_DASActivityDependencyManager areDependenciesSatisfiedFor:]_block_invoke";
              v32 = 2112;
              v33 = v11;
              v34 = 2112;
              v35 = v16;
              _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s: %@ is satisfied; overriding all dependencies on %@",
                buf,
                0x20u);
            }
            v7 = 1;
          }
        }
        else
        {
          if (v13)
            v15 = v2;
          else
            v15 = v25;
          objc_msgSend(v15, "addObject:", v10);
        }

      }
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
    }
    while (v6);

    if ((v7 & 1) != 0)
      goto LABEL_27;
  }
  else
  {

  }
  v17 = objc_msgSend(v2, "count");
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v24, "dependencies"));
  v19 = objc_msgSend(v18, "count");

  if (v17 == v19)
  {
    v20 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 24);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      sub_1000E3FDC((uint64_t *)v24, (uint64_t)v2, v20);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }
  else
  {
    if (!objc_msgSend(v25, "count"))
    {
LABEL_27:
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      goto LABEL_28;
    }
    v21 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 24);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      v22 = *v24;
      *(_DWORD *)buf = 136315906;
      v31 = "-[_DASActivityDependencyManager areDependenciesSatisfiedFor:]_block_invoke";
      v32 = 2112;
      v33 = v22;
      v34 = 2112;
      v35 = v25;
      v36 = 2112;
      v37 = v2;
      _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%s: %@ has unsatisfied result dependencies: %@, Unsatisfied activity completion dependencies: %@", buf, 0x2Au);
    }
  }
LABEL_28:

}

void sub_100070C28(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v1, "resetAccumulation");

}

void sub_100071398(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue_dependencyGroup:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v1, "resetAccumulation");

}

void sub_1000714A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue_dependencyGroup:", *(_QWORD *)(a1 + 40)));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dictionary"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10007150C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

id sub_100071528(uint64_t a1, void *a2)
{
  return a2;
}

void sub_100071550(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t sub_100071560()
{
  uint64_t v0;

  return v0;
}

void sub_10007156C(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  unsigned int v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *i;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  void *j;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  id obja;
  id obj;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[128];
  _BYTE v100[128];
  _QWORD v101[40];

  obja = (id)objc_claimAutoreleasedReturnValue(+[_DASApplicationPolicy policyInstance](_DASApplicationPolicy, "policyInstance"));
  v101[0] = obja;
  v88 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBootTimePolicy policyInstance](_DASBootTimePolicy, "policyInstance"));
  v101[1] = v88;
  v87 = (void *)objc_claimAutoreleasedReturnValue(+[_DASCallInProgressPolicy policyInstance](_DASCallInProgressPolicy, "policyInstance"));
  v101[2] = v87;
  v86 = (void *)objc_claimAutoreleasedReturnValue(+[_DASCPUUsagePolicy policyInstance](_DASCPUUsagePolicy, "policyInstance"));
  v101[3] = v86;
  v85 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDeviceActivityPolicy policyInstance](_DASDeviceActivityPolicy, "policyInstance"));
  v101[4] = v85;
  v84 = (void *)objc_claimAutoreleasedReturnValue(+[_DASNetworkQualityPolicy policyInstance](_DASNetworkQualityPolicy, "policyInstance"));
  v101[5] = v84;
  v83 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPhotosPolicy policyInstance](_DASPhotosPolicy, "policyInstance"));
  v101[6] = v83;
  v82 = (void *)objc_claimAutoreleasedReturnValue(+[_DASFileProtectionPolicy policyInstance](_DASFileProtectionPolicy, "policyInstance"));
  v101[7] = v82;
  v81 = (void *)objc_claimAutoreleasedReturnValue(+[_DASGroupSchedulingPolicy policyInstance](_DASGroupSchedulingPolicy, "policyInstance"));
  v101[8] = v81;
  v80 = (void *)objc_claimAutoreleasedReturnValue(+[_DASRequiresBuddyCompletePolicy policyInstance](_DASRequiresBuddyCompletePolicy, "policyInstance"));
  v101[9] = v80;
  v79 = (void *)objc_claimAutoreleasedReturnValue(+[_DASRequiresRestartPolicy policyInstance](_DASRequiresRestartPolicy, "policyInstance"));
  v101[10] = v79;
  v78 = (void *)objc_claimAutoreleasedReturnValue(+[_DASThermalPolicy policyInstance](_DASThermalPolicy, "policyInstance"));
  v101[11] = v78;
  v77 = (void *)objc_claimAutoreleasedReturnValue(+[_DASResultDependencyPolicy policyInstance](_DASResultDependencyPolicy, "policyInstance"));
  v101[12] = v77;
  v76 = (void *)objc_claimAutoreleasedReturnValue(+[_DASFastPassPolicy policyInstance](_DASFastPassPolicy, "policyInstance"));
  v101[13] = v76;
  v75 = (void *)objc_claimAutoreleasedReturnValue(+[_DASLowPowerModePolicy policyInstance](_DASLowPowerModePolicy, "policyInstance"));
  v101[14] = v75;
  v74 = (void *)objc_claimAutoreleasedReturnValue(+[_DASCarPlayPolicy policyInstance](_DASCarPlayPolicy, "policyInstance"));
  v101[15] = v74;
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBatteryLevelPolicy policyInstance](_DASBatteryLevelPolicy, "policyInstance"));
  v101[16] = v73;
  v72 = (void *)objc_claimAutoreleasedReturnValue(+[_DASRequiresPluggedInPolicy policyInstance](_DASRequiresPluggedInPolicy, "policyInstance"));
  v101[17] = v72;
  v71 = (void *)objc_claimAutoreleasedReturnValue(+[_DASWidgetRefreshBudgetPolicy policyInstance](_DASWidgetRefreshBudgetPolicy, "policyInstance"));
  v101[18] = v71;
  v70 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDataBudgetPolicy policyInstance](_DASDataBudgetPolicy, "policyInstance"));
  v101[19] = v70;
  v69 = (void *)objc_claimAutoreleasedReturnValue(+[_DASConsoleModePolicy policyInstance](_DASConsoleModePolicy, "policyInstance"));
  v101[20] = v69;
  v68 = (void *)objc_claimAutoreleasedReturnValue(+[_DASUrgencyOverridePolicy policyInstance](_DASUrgencyOverridePolicy, "policyInstance"));
  v101[21] = v68;
  v67 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDiskSpacePolicy policyInstance](_DASDiskSpacePolicy, "policyInstance"));
  v101[22] = v67;
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[_DASEnergyBudgetPolicy policyInstance](_DASEnergyBudgetPolicy, "policyInstance"));
  v101[23] = v66;
  v65 = (void *)objc_claimAutoreleasedReturnValue(+[_DASMemoryPressurePolicy policyInstance](_DASMemoryPressurePolicy, "policyInstance"));
  v101[24] = v65;
  v64 = (void *)objc_claimAutoreleasedReturnValue(+[_DASMotionStatePolicy policyInstance](_DASMotionStatePolicy, "policyInstance"));
  v101[25] = v64;
  v63 = (void *)objc_claimAutoreleasedReturnValue(+[_DASCustomSystemConstraintsPolicy policyInstance](_DASCustomSystemConstraintsPolicy, "policyInstance"));
  v101[26] = v63;
  v62 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPeakPowerPressurePolicy policyInstance](_DASPeakPowerPressurePolicy, "policyInstance"));
  v101[27] = v62;
  v61 = (void *)objc_claimAutoreleasedReturnValue(+[_DASUserRequestedBackupPolicy policyInstance](_DASUserRequestedBackupPolicy, "policyInstance"));
  v101[28] = v61;
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[_DASThunderingHerdPolicy policyInstance](_DASThunderingHerdPolicy, "policyInstance"));
  v101[29] = v60;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[_DASSmartPowerNapPolicy policyInstance](_DASSmartPowerNapPolicy, "policyInstance"));
  v101[30] = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASInCarPolicy policyInstance](_DASInCarPolicy, "policyInstance"));
  v101[31] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[_DASViewfinderPolicy policyInstance](_DASViewfinderPolicy, "policyInstance"));
  v101[32] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[_DASRemoteWidgetBudgetPolicy policyInstance](_DASRemoteWidgetBudgetPolicy, "policyInstance"));
  v101[33] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[_DASNetworkSynchronizationPolicy policyInstance](_DASNetworkSynchronizationPolicy, "policyInstance"));
  v101[34] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[_DASRemoteDeviceWakePolicy policyInstance](_DASRemoteDeviceWakePolicy, "policyInstance"));
  v101[35] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[_DASInternetSharingPolicy policyInstance](_DASInternetSharingPolicy, "policyInstance"));
  v101[36] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDefaultPairedPolicy policyInstance](_DASDefaultPairedPolicy, "policyInstance"));
  v101[37] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[_DASRemoteDeviceNearbyPolicy policyInstance](_DASRemoteDeviceNearbyPolicy, "policyInstance"));
  v101[38] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[_DASActivityRateLimitPolicy policyInstance](_DASActivityRateLimitPolicy, "policyInstance"));
  v101[39] = v10;
  v11 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v101, 40));
  v12 = (void *)qword_1001ABA68;
  qword_1001ABA68 = v11;

  if (+[_DASConfig isiPhone](_DASConfig, "isiPhone")
    && _os_feature_enabled_impl("CarbonEmissionsAwareness", "BackgroundTaskLoadShifting"))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "countryCode"));
    v15 = objc_msgSend(v14, "isEqualToString:", CFSTR("US"));

    if (v15)
    {
      v16 = objc_msgSend((id)qword_1001ABA68, "mutableCopy");
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[_DASEnvironmentalPolicy policyInstance](_DASEnvironmentalPolicy, "policyInstance"));
      objc_msgSend(v16, "addObject:", v17);

      v18 = objc_msgSend(v16, "copy");
      v19 = (void *)qword_1001ABA68;
      qword_1001ABA68 = (uint64_t)v18;

    }
  }
  if (+[_DASConfig isiPhone](_DASConfig, "isiPhone"))
  {
    v20 = objc_msgSend((id)qword_1001ABA68, "mutableCopy");
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[_DASCPMModePolicy policyInstance](_DASCPMModePolicy, "policyInstance"));
    objc_msgSend(v20, "addObject:", v21);

    v22 = objc_msgSend(v20, "copy");
    v23 = (void *)qword_1001ABA68;
    qword_1001ABA68 = (uint64_t)v22;

  }
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[UMUserManager sharedManager](UMUserManager, "sharedManager"));
  v25 = objc_msgSend(v24, "isMultiUser");

  if (v25)
  {
    v26 = objc_msgSend((id)qword_1001ABA68, "mutableCopy");
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBatteryLevelPolicy policyInstance](_DASBatteryLevelPolicy, "policyInstance"));
    objc_msgSend(v26, "removeObject:", v27);

    v28 = (void *)objc_claimAutoreleasedReturnValue(+[_DASLowPowerModePolicy policyInstance](_DASLowPowerModePolicy, "policyInstance"));
    objc_msgSend(v26, "removeObject:", v28);

    v29 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBootTimePolicy policyInstance](_DASBootTimePolicy, "policyInstance"));
    objc_msgSend(v26, "removeObject:", v29);

    v30 = (void *)objc_claimAutoreleasedReturnValue(+[_DASCPUUsagePolicy policyInstance](_DASCPUUsagePolicy, "policyInstance"));
    objc_msgSend(v26, "removeObject:", v30);

    v31 = (void *)objc_claimAutoreleasedReturnValue(+[_DASMemoryPressurePolicy policyInstance](_DASMemoryPressurePolicy, "policyInstance"));
    objc_msgSend(v26, "removeObject:", v31);

    v32 = (void *)objc_claimAutoreleasedReturnValue(+[_DASThunderingHerdPolicy policyInstance](_DASThunderingHerdPolicy, "policyInstance"));
    objc_msgSend(v26, "removeObject:", v32);

    v33 = objc_msgSend(v26, "copy");
    v34 = (void *)qword_1001ABA68;
    qword_1001ABA68 = (uint64_t)v33;

  }
  v35 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v36 = (void *)qword_1001ABA70;
  qword_1001ABA70 = v35;

  v37 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v38 = (void *)qword_1001ABA78;
  qword_1001ABA78 = v37;

  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  obj = (id)qword_1001ABA68;
  v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v95, v100, 16);
  if (v39)
  {
    v40 = v39;
    v41 = 0;
    v42 = *(_QWORD *)v96;
    do
    {
      for (i = 0; i != v40; i = (char *)i + 1)
      {
        if (*(_QWORD *)v96 != v42)
          objc_enumerationMutation(obj);
        v44 = *(void **)(*((_QWORD *)&v95 + 1) + 8 * (_QWORD)i);
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "policyName"));
        v46 = (void *)qword_1001ABA70;
        v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (char *)i + v41));
        objc_msgSend(v46, "setObject:forKeyedSubscript:", v45, v47);

        v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (char *)i + v41));
        v49 = (void *)qword_1001ABA78;
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "policyName"));
        objc_msgSend(v49, "setObject:forKeyedSubscript:", v48, v50);

      }
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v95, v100, 16);
      v41 = (v41 + (_DWORD)i);
    }
    while (v40);
  }

  objc_msgSend((id)qword_1001ABA70, "setObject:forKeyedSubscript:", CFSTR("Incompatibility"), &off_10016E960);
  objc_msgSend((id)qword_1001ABA70, "setObject:forKeyedSubscript:", CFSTR("Sysdiagnose"), &off_10016E978);
  objc_msgSend((id)qword_1001ABA70, "setObject:forKeyedSubscript:", CFSTR("Preemption"), &off_10016E990);
  objc_msgSend((id)qword_1001ABA70, "setObject:forKeyedSubscript:", CFSTR("Limitations"), &off_10016E9A8);
  objc_msgSend((id)qword_1001ABA78, "setObject:forKeyedSubscript:", &off_10016E960, CFSTR("Incompatibility"));
  objc_msgSend((id)qword_1001ABA78, "setObject:forKeyedSubscript:", &off_10016E978, CFSTR("Sysdiagnose"));
  objc_msgSend((id)qword_1001ABA78, "setObject:forKeyedSubscript:", &off_10016E990, CFSTR("Preemption"));
  objc_msgSend((id)qword_1001ABA78, "setObject:forKeyedSubscript:", &off_10016E9A8, CFSTR("Limitations"));
  v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v52 = (id)qword_1001ABA68;
  v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v91, v99, 16);
  if (v53)
  {
    v54 = v53;
    v55 = *(_QWORD *)v92;
    do
    {
      for (j = 0; j != v54; j = (char *)j + 1)
      {
        if (*(_QWORD *)v92 != v55)
          objc_enumerationMutation(v52);
        v57 = *(void **)(*((_QWORD *)&v91 + 1) + 8 * (_QWORD)j);
        if (objc_msgSend(v57, "conformsToProtocol:", &OBJC_PROTOCOL____DASActivityPolicyPredicting))
          objc_msgSend(v51, "addObject:", v57);
      }
      v54 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v91, v99, 16);
    }
    while (v54);
  }

  v58 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v51));
  v59 = (void *)qword_1001ABA80;
  qword_1001ABA80 = v58;

}

id sub_100072270(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_loadHistograms");
}

void sub_1000722B8(id a1)
{
  _APRSFreezerRecommendation *v1;
  void *v2;

  v1 = objc_opt_new(_APRSFreezerRecommendation);
  v2 = (void *)qword_1001ABA88;
  qword_1001ABA88 = (uint64_t)v1;

}

int64_t sub_10007250C(id a1, NSNumber *a2, NSNumber *a3)
{
  return -[NSNumber compare:](a3, "compare:", a2);
}

void sub_1000729F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100073BAC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  double v6;
  double v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a3;
  v5 = a2;
  v6 = 1.0;
  if ((uint64_t)objc_msgSend(v12, "integerValue") <= 999)
  {
    objc_msgSend(v12, "doubleValue");
    v6 = v7 / 1000.0;
  }
  v8 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", v5, 0, 0);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "compatibilityObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bundleExecutable"));
  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v6));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, v10);

  }
}

void sub_1000741BC(uint64_t a1, void *a2, void *a3)
{
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  id v11;

  v11 = a2;
  objc_msgSend(a3, "doubleValue");
  v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectForKeyedSubscript:", v11));
  objc_msgSend(v7, "doubleValue");
  v9 = v8 * 0.5 + v6 * 0.5;

  if (v9 <= 0.1)
  {
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", &off_10016E9C0, v11);
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v9));
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v10, v11);

  }
}

void sub_100074284(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v7));

  if (!v6)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v7);

}

void sub_1000742F8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));

  if (!v3)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &off_10016E9C0, v4);

}

id sub_1000743B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  objc_msgSend(*(id *)(a1 + 32), "_queue_loadHistograms");
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_computeScores"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 64);
  *(_QWORD *)(v3 + 64) = v2;

  v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
    v8 = 138412290;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated Kill Histogram: %@", (uint8_t *)&v8, 0xCu);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "removeAllObjects");
  return objc_msgSend(*(id *)(a1 + 32), "_queue_updateHistograms");
}

void sub_100074648(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "updateModel");
  objc_msgSend(v3, "setTaskCompleted");

}

void sub_1000746F8(id a1)
{
  mach_timebase_info((mach_timebase_info_t)&dword_1001ABA98);
}

id sub_100074B54(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void sub_100074D28(uint64_t a1)
{
  int v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  double v11;
  _UNKNOWN **v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  char v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  double v31;
  void *v32;
  NSObject *v33;
  NSObject *v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  int v38;
  void *v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  _QWORD __dst[35];

  v2 = memorystatus_control(3, 0, 128, 0, 0);
  if (v2 <= 0)
  {
    v33 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      sub_1000E41F8(v33);
  }
  else
  {
    v3 = v2;
    v4 = (char *)malloc_type_malloc(v2, 0xF4FA71DBuLL);
    if ((int)memorystatus_control(3, 0, 128, v4, v3) <= 0)
    {
      v34 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        sub_1000E4274(v34);
    }
    else
    {
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v6 = *((_QWORD *)v4 + 24);
      if (v6)
      {
        v37 = 0;
        v38 = 0;
        v7 = 0;
        v8 = 0;
        v36 = 0;
        v9 = 0;
        v10 = v4 + 200;
        v11 = 0.0;
        v12 = &AnalyticsSendEvent_ptr;
        *(_QWORD *)&v5 = 138412290;
        v35 = v5;
        do
        {
          memcpy(__dst, v10, sizeof(__dst));
          if (__dst[10] && (__dst[5] & 0x1800000000) == 0)
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12[141], "stringWithUTF8String:", (char *)__dst + 4));
            if (v13)
            {
              if (!v8)
              {
                v8 = mach_absolute_time();
                v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));

                objc_msgSend(v14, "timeIntervalSinceDate:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104));
                v11 = v15;
                v9 = v14;
                v12 = &AnalyticsSendEvent_ptr;
              }
              objc_msgSend(*(id *)(a1 + 32), "secondsFrom:until:", v8, __dst[25], v35);
              if (v16 <= v11)
              {
                v17 = v16;
                if ((__dst[5] & 0x200000000) != 0)
                {
                  if ((__dst[5] & 0x400000000) != 0)
                  {
                    v18 = 0;
                    v37 += __dst[30];
                  }
                  else
                  {
                    ++v38;
                    v18 = 1;
                  }
                }
                else
                {
                  v18 = 0;
                }
                v19 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
                if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                {
                  v20 = v19;
                  v21 = v9;
                  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dateByAddingTimeInterval:", -v17));
                  *(_DWORD *)buf = 138412546;
                  v41 = v13;
                  v42 = 2112;
                  v43 = v22;
                  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%@ killed at %@", buf, 0x16u);

                  v9 = v21;
                }
                if (HIDWORD(__dst[6]))
                {
                  v23 = v9;
                  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
                  objc_msgSend(v24, "setObject:forKeyedSubscript:", v13, CFSTR("BundleID"));
                  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", LODWORD(__dst[0])));
                  objc_msgSend(v24, "setObject:forKeyedSubscript:", v25, CFSTR("PID"));

                  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(__dst[6])));
                  objc_msgSend(v24, "setObject:forKeyedSubscript:", v26, CFSTR("Reason"));

                  v27 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
                  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 138412546;
                    v41 = v13;
                    v42 = 1024;
                    LODWORD(v43) = HIDWORD(__dst[6]);
                    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Skipped %@ (%d)", buf, 0x12u);
                  }
                  objc_msgSend(v39, "addObject:", v24);

                  v9 = v23;
                }
                if (objc_msgSend(*(id *)(a1 + 32), "process:inSet:", v13, *(_QWORD *)(a1 + 40)))
                {
                  if ((v18 & 1) == 0)
                  {
                    v28 = v9;
                    v29 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
                    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = v35;
                      v41 = v13;
                      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Adding %@ to today's kill dictionary", buf, 0xCu);
                    }
                    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectForKeyedSubscript:", v13));
                    objc_msgSend(v30, "doubleValue");
                    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v31 + 1.0));
                    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setObject:forKeyedSubscript:", v32, v13);

                    v36 = 1;
                    v9 = v28;
                  }
                }
                else
                {
                  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "addObject:", v13);
                }
                v12 = &AnalyticsSendEvent_ptr;
              }
            }

            v6 = *((_QWORD *)v4 + 24);
          }
          ++v7;
          v10 += 280;
        }
        while (v7 < v6);
      }
      else
      {
        v9 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
      }
      free(v4);
      +[_DASMetricRecorder setValue:forKey:](_DASMetricRecorder, "setValue:forKey:", v37, CFSTR("com.apple.dasd.swap.goodfreezecount"));
      +[_DASMetricRecorder incrementOccurrencesForKey:byCount:](_DASMetricRecorder, "incrementOccurrencesForKey:byCount:", CFSTR("com.apple.dasd.swap.badfreezecount"), v38);
      if ((v36 & 1) != 0)
      {
        objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 104), v9);
        objc_msgSend(*(id *)(a1 + 32), "_queue_updateHistograms");
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "logFreezerSkipReasons:", v39);
      }

    }
  }
}

void sub_10007539C(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  _QWORD *v5;
  _QWORD v6[5];
  _QWORD v7[4];

  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2020000000;
  v7[3] = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_computeScores"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100075498;
  v6[3] = &unk_10015EB40;
  v6[4] = v7;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v6);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000754D0;
  v3[3] = &unk_10015EB68;
  v4 = *(id *)(a1 + 40);
  v5 = v7;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v3);

  _Block_object_dispose(v7, 8);
}

void sub_100075480(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

double sub_100075498(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  double v5;
  double result;

  objc_msgSend(a3, "doubleValue");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = v5 + *(double *)(v4 + 24);
  *(double *)(v4 + 24) = result;
  return result;
}

void sub_1000754D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  double v6;
  id v7;

  v5 = a2;
  objc_msgSend(a3, "doubleValue");
  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v6 / *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, v5);

}

Class sub_100075934(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1001ABAB0)
  {
    v5 = off_10015EB88;
    v6 = 0;
    qword_1001ABAB0 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1001ABAB0)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("ATXProactiveSuggestionConsumer");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_1000E42F0();
LABEL_8:
    free(v2);
  }
  qword_1001ABAA8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100075A68(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[_DKKnowledgeStore knowledgeStore](_DKKnowledgeStore, "knowledgeStore"));
  v2 = (void *)qword_1001ABAD8;
  qword_1001ABAD8 = v1;

}

void sub_100075B08(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  if (!qword_1001ABAC8)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sharedKnowledgeStore"));
    v1 = objc_claimAutoreleasedReturnValue(+[_DASPredictor predictorWithKnowledgeStore:withQueue:](_DASPredictor, "predictorWithKnowledgeStore:withQueue:", v3, 0));
    v2 = (void *)qword_1001ABAC8;
    qword_1001ABAC8 = v1;

  }
}

void sub_100075B80(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.duetactivityscheduler.predictionGenerationQueue", v4);
  v3 = (void *)qword_1001ABAF0;
  qword_1001ABAF0 = (uint64_t)v2;

}

void sub_100075BF8(id a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_1001ABAB8;
  qword_1001ABAB8 = v1;

  v3 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v4 = (void *)qword_1001ABAC0;
  qword_1001ABAC0 = v3;

}

void sub_100075C90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007600C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100076104(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000761F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007678C(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = (id)os_transaction_create("comm.apple.dasd.profilerStoreQueue");
  objc_msgSend(*(id *)(a1 + 32), "storeProfileArrayToKnowledgeStore:", v3);

}

void sub_100076884(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;

  v2 = qword_1001ABB00;
  if (os_log_type_enabled((os_log_t)qword_1001ABB00, OS_LOG_TYPE_DEBUG))
    sub_1000E43BC(v2);
  v3 = objc_alloc_init(*(Class *)(a1 + 32));
  v4 = (void *)qword_1001ABB10;
  qword_1001ABB10 = (uint64_t)v3;

}

void sub_1000790D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10007912C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  double v13;
  void *v14;
  double v15;
  void *v16;
  double v17;
  void *v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id obj;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];

  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v29;
    v6 = kUsageNetworkWiFiInBytes;
    v7 = kUsageNetworkCellInBytes;
    v8 = kUsageNetworkWiFiOutBytes;
    v9 = kUsageNetworkCellOutBytes;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v5)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v6));
        objc_msgSend(v12, "doubleValue");
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v13
                                                                    + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                                + 24);

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v7));
        objc_msgSend(v14, "doubleValue");
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v15
                                                                    + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                                + 24);

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v8));
        objc_msgSend(v16, "doubleValue");
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v17
                                                                    + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8)
                                                                                + 24);

        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v9));
        objc_msgSend(v18, "doubleValue");
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v19
                                                                    + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)
                                                                                + 24);

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v4);
  }
  v20 = qword_1001ABB00;
  if (os_log_type_enabled((os_log_t)qword_1001ABB00, OS_LOG_TYPE_DEBUG))
    sub_1000E4BB8(a1, v20, v21, v22, v23, v24, v25, v26);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_100079770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1000797C4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  double v13;
  void *v14;
  double v15;
  void *v16;
  double v17;
  void *v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id obj;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];

  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v29;
    v6 = kUsageNetworkWiFiInBytes;
    v7 = kUsageNetworkCellInBytes;
    v8 = kUsageNetworkWiFiOutBytes;
    v9 = kUsageNetworkCellOutBytes;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v5)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v6));
        objc_msgSend(v12, "doubleValue");
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v13
                                                                    + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                                + 24);

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v7));
        objc_msgSend(v14, "doubleValue");
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v15
                                                                    + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                                + 24);

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v8));
        objc_msgSend(v16, "doubleValue");
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v17
                                                                    + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8)
                                                                                + 24);

        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v9));
        objc_msgSend(v18, "doubleValue");
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v19
                                                                    + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)
                                                                                + 24);

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v4);
  }
  v20 = qword_1001ABB00;
  if (os_log_type_enabled((os_log_t)qword_1001ABB00, OS_LOG_TYPE_DEBUG))
    sub_1000E4E00(a1, v20, v21, v22, v23, v24, v25, v26);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

unint64_t sub_100079B60()
{
  int v0;
  int v1;
  NSObject *v2;
  timespec v4;

  v4.tv_sec = 0;
  v4.tv_nsec = 0;
  v0 = clock_gettime(_CLOCK_UPTIME_RAW, &v4);
  if (!v0)
    return (v4.tv_nsec + 1000000000 * v4.tv_sec) / 0xF4240uLL;
  v1 = v0;
  v2 = qword_1001ABB00;
  if (os_log_type_enabled((os_log_t)qword_1001ABB00, OS_LOG_TYPE_ERROR))
    sub_1000E4FE8(v1, v2);
  return -1;
}

void sub_100079D34(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void sub_100079D40(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

char *sub_100079D6C()
{
  int v0;

  return strerror(v0);
}

id sub_100079D78(uint64_t a1, void *a2)
{
  return a2;
}

void sub_10007A3B8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  const __CFString *v7;

  v3 = a2;
  v4 = qword_1001ABB28;
  if (os_log_type_enabled((os_log_t)qword_1001ABB28, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = CFSTR("com.apple.dasd.closureOnBoot");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Run task %@", (uint8_t *)&v6, 0xCu);
  }
  v5 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "buildClosuresOnBootWithTask:", v3);
  objc_autoreleasePoolPop(v5);

}

void sub_10007A48C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  const __CFString *v7;

  v3 = a2;
  v4 = qword_1001ABB28;
  if (os_log_type_enabled((os_log_t)qword_1001ABB28, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = CFSTR("com.apple.dasd.closureOpportunistic");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Run task %@", (uint8_t *)&v6, 0xCu);
  }
  v5 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "buildClosuresOpportunisticWithTask:", v3);
  objc_autoreleasePoolPop(v5);

}

void sub_10007ABAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007ABE4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_10007B844(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B8A4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

uint64_t sub_10007B8B8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", a2));
  objc_msgSend(v7, "doubleValue");
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));

  objc_msgSend(v10, "doubleValue");
  v12 = v11;

  if (v9 <= v12)
    return 1;
  else
    return -1;
}

id sub_10007B948(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "isDeletableApp:", a2);
}

id sub_10007B954(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "isUserInstalledApp:", a2);
}

id sub_10007BBE8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setWasDeferred:", 1);
}

void sub_10007BBF8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  objc_msgSend(v5, "signpostTimestamp");
  v9 = v8;
  objc_msgSend(v6, "signpostTimestamp");
  v11 = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10007BCC8;
  v14[3] = &unk_10015ED20;
  v15 = v5;
  v16 = v6;
  v12 = v6;
  v13 = v5;
  objc_msgSend(v7, "collectLaunchDataWithBootBatchTimestamp:opportunisticBatchTimestamp:completion:", v14, v9, v11);

}

void sub_10007BCC8(uint64_t a1, void *a2, int a3, int a4, void *a5)
{
  id v9;
  uint64_t *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  os_signpost_id_t v15;
  int v16;
  NSObject *v17;
  os_signpost_id_t v18;
  os_signpost_id_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  NSObject *v23;
  os_signpost_id_t v24;
  os_signpost_id_t v25;
  int v26;
  void *v27;
  unsigned int v28;
  _QWORD v29[4];
  id v30;
  id v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint8_t buf[4];
  _BYTE v48[10];
  void *v49;
  __int16 v50;
  void *v51;

  v9 = a2;
  v43 = 0;
  v44 = &v43;
  v45 = 0x2020000000;
  v46 = 0;
  v10 = &v39;
  v39 = 0;
  v40 = &v39;
  v41 = 0x2020000000;
  v42 = 0;
  v35 = 0;
  v36 = &v35;
  v37 = 0x2020000000;
  v38 = 0;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10007C10C;
  v29[3] = &unk_10015ECF8;
  v30 = *(id *)(a1 + 32);
  v32 = &v43;
  v31 = *(id *)(a1 + 40);
  v33 = &v39;
  v34 = &v35;
  objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v29);
  v11 = (id)qword_1001ABB28;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v10 = (uint64_t *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "allKeys"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleIDs"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bundleIDs"));
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)v48 = v10;
    *(_WORD *)&v48[8] = 2112;
    v49 = v12;
    v50 = 2112;
    v51 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Closures built: %@, onBoot: %@, batch2: %@", buf, 0x20u);

  }
  v14 = (id)qword_1001ABB20;
  v15 = os_signpost_id_generate((os_log_t)qword_1001ABB20);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = (uint64_t *)v15;
    if (os_signpost_enabled(v14))
    {
      if (a3)
        v16 = *((_DWORD *)v44 + 6);
      else
        v16 = -1;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v48 = v16;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, (os_signpost_id_t)v10, "DuetClosuresBeforeOnBoot", "appBundles=%{public, signpost.telemetry:number1}d enableTelemetry=YES ", buf, 8u);
    }
  }

  v17 = (id)qword_1001ABB20;
  v18 = os_signpost_id_generate((os_log_t)qword_1001ABB20);
  if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v19 = v18;
    if (os_signpost_enabled(v17))
    {
      v20 = a4 ? *((_DWORD *)v40 + 6) : -1;
      v21 = *(_QWORD *)(a1 + 32);
      if (v21)
      {
        v10 = (uint64_t *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleIDs"));
        v22 = objc_msgSend(v10, "count");
      }
      else
      {
        v22 = -1;
      }
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v48 = v20;
      *(_WORD *)&v48[4] = 1026;
      *(_DWORD *)&v48[6] = v22;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, v19, "DuetClosuresAfterOnBoot", "appBundles=%{public, signpost.telemetry:number1}d prewarmed=%{public, signpost.telemetry:number2}d enableTelemetry=YES ", buf, 0xEu);
      if (v21)

    }
  }

  v23 = (id)qword_1001ABB20;
  v24 = os_signpost_id_generate((os_log_t)qword_1001ABB20);
  if (v24 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v25 = v24;
    if (os_signpost_enabled(v23))
    {
      if ((_DWORD)a5)
        v26 = *((_DWORD *)v36 + 6);
      else
        v26 = -1;
      v27 = *(void **)(a1 + 40);
      if (v27)
      {
        a5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "bundleIDs"));
        v28 = objc_msgSend(a5, "count");
      }
      else
      {
        v28 = -1;
      }
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v48 = v26;
      *(_WORD *)&v48[4] = 1026;
      *(_DWORD *)&v48[6] = v28;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, v25, "DuetClosuresAfterOpportunistic", "appBundles=%{public, signpost.telemetry:number1}d prewarmed=%{public, signpost.telemetry:number2}d enableTelemetry=YES ", buf, 0xEu);
      if (v27)

    }
  }

  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);

}

void sub_10007C0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_10007C10C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  unsigned int v11;
  NSObject *v12;
  const char *v13;
  void *v14;
  unsigned int v15;
  int v16;
  id v17;

  v5 = a2;
  objc_msgSend(a3, "timeIntervalSince1970");
  v7 = v6;
  objc_msgSend(*(id *)(a1 + 32), "signpostTimestamp");
  if (v7 >= v8 && *(_QWORD *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "signpostTimestamp");
    if (v7 >= v9 && *(_QWORD *)(a1 + 40))
    {
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bundleIDs"));
      v11 = objc_msgSend(v10, "containsObject:", v5);

      if (v11)
      {
        v12 = qword_1001ABB28;
        if (os_log_type_enabled((os_log_t)qword_1001ABB28, OS_LOG_TYPE_DEFAULT))
        {
          v16 = 138412290;
          v17 = v5;
          v13 = "Closure built for %@, although prewarmed opportunistically";
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v16, 0xCu);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleIDs"));
      v15 = objc_msgSend(v14, "containsObject:", v5);

      if (v15)
      {
        v12 = qword_1001ABB28;
        if (os_log_type_enabled((os_log_t)qword_1001ABB28, OS_LOG_TYPE_DEFAULT))
        {
          v16 = 138412290;
          v17 = v5;
          v13 = "Closure built for %@, although prewarmed on boot";
          goto LABEL_13;
        }
      }
    }
  }
  else
  {
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  }

}

void sub_10007C524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 176), 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C55C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v25;
  void *v26;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
  if ((objc_msgSend(v4, "isEqualToString:", CFSTR("ApplicationLaunchExtendedResponsive")) & 1) == 0)
  {
LABEL_19:

    goto LABEL_20;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "metadataSegments"));
  v6 = objc_msgSend(v5, "count");

  if ((unint64_t)v6 >= 2)
  {
    v7 = (void *)qword_1001ABB28;
    if (os_log_type_enabled((os_log_t)qword_1001ABB28, OS_LOG_TYPE_DEFAULT))
    {
      v8 = v7;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "processName"));
      v25 = 138412290;
      v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Analyzing launch for %@", (uint8_t *)&v25, 0xCu);

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "beginDate"));
    objc_msgSend(v10, "timeIntervalSince1970");
    v12 = v11;

    if (v12 >= *(double *)(a1 + 64))
      v13 = v12 >= *(double *)(a1 + 72) ? *(_QWORD *)(a1 + 56) : *(_QWORD *)(a1 + 48);
    else
      v13 = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(*(_QWORD *)(v13 + 8) + 24) = 1;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "number2Value"));
    v15 = objc_msgSend(v14, "intValue");

    if ((v15 & 4) != 0)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "processImagePath"));

      if (v16)
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "processImagePath"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "stringByDeletingLastPathComponent"));
        v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v18));

        v19 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithURL:allowPlaceholder:error:", v4, 0, 0);
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "bundleIdentifier"));
        if (v20)
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "beginDate"));
          objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v21, v20);

        }
        else
        {
          v23 = (void *)qword_1001ABB28;
          if (os_log_type_enabled((os_log_t)qword_1001ABB28, OS_LOG_TYPE_ERROR))
            sub_1000E51C8(v23, v3);
        }

        goto LABEL_19;
      }
      v22 = (void *)qword_1001ABB28;
      if (os_log_type_enabled((os_log_t)qword_1001ABB28, OS_LOG_TYPE_ERROR))
        sub_1000E5138(v22, v3);
    }
  }
LABEL_20:

  return 1;
}

void sub_10007C7FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a2;
  v6 = a3;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  if (v5 && os_log_type_enabled((os_log_t)qword_1001ABB28, OS_LOG_TYPE_ERROR))
    sub_1000E5258();

}

void sub_10007CAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007CACC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10007CADC(uint64_t a1)
{

}

uint64_t sub_10007CAE4(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  _DASClosureBatch *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
  v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("DuetClosuresPrewarm"));

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "metadataSegments"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "argument"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "argumentObject"));

    if ((objc_opt_respondsToSelector(v9, "BOOLValue") & 1) != 0)
    {
      v10 = objc_msgSend(v9, "performSelector:", "BOOLValue");
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "metadataSegments"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lastObject"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "argument"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "argumentObject"));

      if ((objc_opt_respondsToSelector(v14, "componentsSeparatedByString:") & 1) != 0)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "performSelector:withObject:", "componentsSeparatedByString:", CFSTR(",")));
        if (objc_msgSend(v15, "count") == (id)1)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "firstObject"));
          v17 = objc_msgSend(&stru_1001617C8, "isEqualToString:", v16);

          if (v17)
          {

            v15 = 0;
          }
        }
        v18 = objc_opt_new(_DASClosureBatch);
        -[_DASClosureBatch setBundleIDs:](v18, "setBundleIDs:", v15);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "beginDate"));
        objc_msgSend(v19, "timeIntervalSince1970");
        -[_DASClosureBatch setSignpostTimestamp:](v18, "setSignpostTimestamp:");

        if (v10)
          v20 = a1[5];
        else
          v20 = a1[6];
        v21 = *(_QWORD *)(v20 + 8);
        v22 = *(void **)(v21 + 40);
        *(_QWORD *)(v21 + 40) = v18;

      }
    }

  }
  v23 = objc_msgSend(*(id *)(a1[4] + 8), "wasDeferred") ^ 1;

  return v23;
}

void sub_10007CCDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  int v8;
  id v9;
  __int16 v10;
  id v11;

  v5 = a2;
  v6 = a3;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v5)
  {
    v7 = qword_1001ABB28;
    if (os_log_type_enabled((os_log_t)qword_1001ABB28, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412546;
      v9 = v5;
      v10 = 2112;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error processing prewarming signposts: %@, %@", (uint8_t *)&v8, 0x16u);
    }
  }

}

uint64_t sub_10007CFA4(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void sub_10007CFBC(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_fault_impl(a1, a4, OS_LOG_TYPE_FAULT, a2, a3, 0x16u);
}

void sub_10007D040(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001ABB30;
  qword_1001ABB30 = v1;

}

id sub_10007D334(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handlePLBackgroundProcessingNotification");
}

id sub_10007D660(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "logFeatureAvailability:forFeature:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10007DBB8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[7];
  _QWORD v15[7];

  v14[0] = CFSTR("FeatureCode");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 40)));
  v15[0] = v2;
  v14[1] = CFSTR("WorkloadSize");
  v3 = *(void **)(a1 + 32);
  v4 = v3;
  if (!v3)
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v15[1] = v4;
  v14[2] = CFSTR("OSUpdateType");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72)));
  v15[2] = v5;
  v14[3] = CFSTR("TimeSinceOSUpdate");
  v6 = *(double *)(a1 + 48);
  if (v6 > 0.0)
    v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v6 / 3600.0));
  else
    v7 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v8 = (void *)v7;
  v15[3] = v7;
  v14[4] = CFSTR("FeatureState");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 56)));
  v15[4] = v9;
  v14[5] = CFSTR("InferredCarry");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 73)));
  v15[5] = v10;
  v14[6] = CFSTR("FeatureUsage");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 64)));
  v15[6] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 7));

  if (!v3)
  return v12;
}

void sub_10007DEE8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPostRestoreBUILogger sharedInstance](_DASPostRestoreBUILogger, "sharedInstance"));
  objc_msgSend(v2, "reportState:forActivity:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));

  v4 = *(void **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
  objc_msgSend(v4, "sendTaskCheckpoint:forTask:error:", v3, v5, *(_QWORD *)(a1 + 56));

}

void sub_10007E11C(_QWORD *a1)
{
  id v2;

  objc_msgSend(*(id *)(a1[4] + 64), "setObject:forKeyedSubscript:", a1[6], a1[5]);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a1[7]));
  objc_msgSend(*(id *)(a1[4] + 72), "setObject:forKeyedSubscript:", v2, a1[5]);

}

void sub_10007E2C8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "allKeys"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v2));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "allKeys"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v4));
  objc_msgSend(v3, "unionSet:", v5);

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v6 = v3;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v24;
    while (2)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v24 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary", (_QWORD)v23));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, CFSTR("TaskName"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "objectForKeyedSubscript:", v11));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, CFSTR("FeatureCodes"));

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "objectForKeyedSubscript:", v11));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v14, CFSTR("Version"));

        if ((objc_msgSend(*(id *)(a1 + 32), "sendDataToPPS:subsystem:category:", v12, CFSTR("BackgroundProcessing"), CFSTR("TaskFeatureCodes")) & 1) == 0)
        {
          v15 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            sub_1000E52D4(v15, v16, v17, v18, v19, v20, v21, v22);

          goto LABEL_13;
        }

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      if (v8)
        continue;
      break;
    }
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "removeAllObjects");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "removeAllObjects");
LABEL_13:

}

void sub_10007E9B4(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *j;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectForKey:", CFSTR("availableStatus")));
  v3 = objc_msgSend(v2, "mutableCopy");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 80);
  *(_QWORD *)(v4 + 80) = v3;

  v6 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v6 + 80))
  {
    objc_msgSend((id)v6, "populateFeatureStatusFromPast");
    v6 = *(_QWORD *)(a1 + 32);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v6 + 56), "objectForKey:", CFSTR("availableStatus")));
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allKeys"));
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v13));
        objc_msgSend(*(id *)(a1 + 32), "reportFeatureStatus:forFeature:statusChangedDate:error:", 50, objc_msgSend(v13, "integerValue"), v14, 0);

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v10);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectForKey:", CFSTR("previewAvailableStatus")));
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "allKeys", 0));
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v24;
    do
    {
      for (j = 0; j != v18; j = (char *)j + 1)
      {
        if (*(_QWORD *)v24 != v19)
          objc_enumerationMutation(v16);
        v21 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)j);
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v21));
        objc_msgSend(*(id *)(a1 + 32), "reportFeatureStatus:forFeature:statusChangedDate:error:", 30, objc_msgSend(v21, "integerValue"), v22, 0);

      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    }
    while (v18);
  }

}

void sub_10007ED04(_QWORD *a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v9[2];

  v2 = (void *)a1[4];
  if (v2)
    v3 = v2;
  else
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
  v4 = v3;
  v5 = (void *)a1[5];
  if (v5)
    v6 = v5;
  else
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
  v7 = v6;
  v9[0] = v4;
  v9[1] = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v9, 2));
  objc_msgSend(*(id *)(a1[6] + 96), "setObject:forKeyedSubscript:", v8, a1[7]);

}

void sub_10007EE60(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "reportFeatureStatus");
  objc_msgSend(v3, "setTaskCompleted");

}

void sub_10007EF20(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "reportFeatureCodesForTasks");
  objc_msgSend(*(id *)(a1 + 32), "reportDependencyInfoForTasks");
  objc_msgSend(v4, "setTaskCompleted");

}

void sub_10007EFC4(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id obj;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = *(id *)(*(_QWORD *)(a1 + 32) + 96);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v24;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v24 != v4)
          objc_enumerationMutation(obj);
        v6 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v5);
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
        objc_msgSend(v7, "setObject:forKeyedSubscript:", v6, CFSTR("TaskName"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "objectForKeyedSubscript:", v6));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", 0));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "allObjects"));
        objc_msgSend(v7, "setObject:forKeyedSubscript:", v10, CFSTR("ProducedResultIdentifiers"));

        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "objectForKeyedSubscript:", v6));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", 1));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allObjects"));
        objc_msgSend(v7, "setObject:forKeyedSubscript:", v13, CFSTR("DependencyIdentifiers"));

        if ((objc_msgSend(*(id *)(a1 + 32), "sendDataToPPS:subsystem:category:", v7, CFSTR("BackgroundProcessing"), CFSTR("TaskDependencies")) & 1) == 0)
        {
          v14 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            sub_1000E5434(v14, v15, v16, v17, v18, v19, v20, v21);

          return;
        }

        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      if (v3)
        continue;
      break;
    }
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "removeAllObjects");
}

void sub_10007F520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = objc_opt_class(*(_QWORD *)(a1 + 32));
  v2 = objc_opt_new(v1);
  v3 = (void *)qword_1001ABB48;
  qword_1001ABB48 = v2;

}

void sub_10007FCDC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  void *v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessPredicate predicateMatchingProcessTypeApplication](RBSProcessPredicate, "predicateMatchingProcessTypeApplication"));
  v8 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
  objc_msgSend(v3, "setPredicates:", v5);

  objc_msgSend(v3, "setStateDescriptor:", *(_QWORD *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000175BC;
  v6[3] = &unk_10015E7C8;
  v7 = *(id *)(a1 + 40);
  objc_msgSend(v3, "setUpdateHandler:", v6);

}

void sub_10007FE50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007FED0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007FF24(id a1)
{
  _APRSRecommendationEngine *v1;
  void *v2;

  v1 = objc_opt_new(_APRSRecommendationEngine);
  v2 = (void *)qword_1001ABB58;
  qword_1001ABB58 = (uint64_t)v1;

}

void sub_100080474(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001ABB70;
  qword_1001ABB70 = (uint64_t)v1;

}

void sub_100080D6C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  unsigned int v6;
  void *v7;
  NSObject *v8;
  void *v9;
  int v10;
  NSObject *v11;

  v3 = kSymptomDiagnosticReplySuccess;
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v3));
  v6 = objc_msgSend(v5, "BOOLValue");

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", kSymptomDiagnosticReplySessionID));

    v8 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      sub_1000E5518((uint64_t)v7, a1, v8);

  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", kSymptomDiagnosticReplyReason));

    v10 = objc_msgSend(v9, "intValue");
    v11 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1000E55A0(v10, a1, v11);
  }
}

void sub_100081240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_100081280(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v1 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Asked to defer significantly overdue check", v2, 2u);
  }
}

void sub_1000813C0(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (os_log_type_enabled(*(os_log_t *)(a1 + 32), OS_LOG_TYPE_DEBUG))
    sub_1000E56E8();
  objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40)), "checkAllTasksForBGSystemTask:", v3);

}

void sub_100082468(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v5 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000824E8;
  v8[3] = &unk_10015EFC0;
  v6 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  v7 = v5;
  objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v8);

}

void sub_1000824E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;

  v5 = a3;
  if (objc_msgSend(*(id *)(a1 + 40), "convertBiomeStream:toKnowledgeStoreStream:", a2, v5))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABB98, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
    v7 = objc_msgSend(v6, "mutableCopy");

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[_DKEventStream eventStreamWithName:](_DKEventStream, "eventStreamWithName:", v5));
    objc_msgSend(v7, "addObject:", v8);

    objc_msgSend((id)qword_1001ABB98, "setObject:forKeyedSubscript:", v7, *(_QWORD *)(a1 + 32));
    if (os_log_type_enabled((os_log_t)qword_1001ABBA0, OS_LOG_TYPE_DEBUG))
      sub_1000E58B8();

  }
}

void sub_1000830E4(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100083160(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (byte_1001ABBA8 & 1) == 0;
  return result;
}

id sub_100083180(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100084864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

_DKEvent *__cdecl sub_100084894(id a1, BMStoreEvent *a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](a2, "eventBody"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "dkEvent"));

  return (_DKEvent *)v3;
}

id sub_1000848D0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "evaluateWithObject:", a2);
}

NSArray *__cdecl sub_1000848DC(id a1, NSArray *a2, _DKEvent *a3)
{
  return -[NSArray arrayByAddingObject:](a2, "arrayByAddingObject:", a3);
}

id sub_1000848E4(id a1, BPSWindowerInput *a2)
{
  return -[BPSWindowerInput aggregate](a2, "aggregate");
}

void sub_1000848F0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  id v19;
  __int16 v20;
  uint64_t v21;

  v3 = a2;
  v4 = objc_msgSend(v3, "mutableCopy");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += objc_msgSend(v4, "count");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "processEvents:", v4));
  v13 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v5, 0, &v13));
  v7 = v13;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1001ABBA0, OS_LOG_TYPE_ERROR))
      sub_1000E6198();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 64), "extendJSONArrayWithAnotherArray:toFileHandler:isPreviouslyEmpty:", v6, *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == 0);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) += objc_msgSend(v5, "count");
    v8 = (id)qword_1001ABBA0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
      v10 = objc_msgSend(v4, "count");
      v11 = objc_msgSend(v5, "count");
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      *(_DWORD *)buf = 138413058;
      v15 = v9;
      v16 = 2048;
      v17 = v10;
      v18 = 2048;
      v19 = v11;
      v20 = 2048;
      v21 = v12;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "writeStream: %@ : From %lu events, written %lu events, total written so far: %lu", buf, 0x2Au);

    }
  }

}

void sub_100084AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  id v12;
  NSObject *v13;
  void *v14;

  if (a2 == 1)
  {
    v12 = objc_begin_catch(exception_object);
    v13 = (id)qword_1001ABBA0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v11 + 40), "name"));
      sub_1000E6150(v14, (uint64_t)v12, (uint64_t)&a11);
    }

    objc_end_catch();
    JUMPOUT(0x100084A20);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008590C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

int64_t sub_10008592C(id a1, _DKEvent *a2, _DKEvent *a3)
{
  _DKEvent *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[_DKEvent startDate](a2, "startDate"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[_DKEvent startDate](v4, "startDate"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

void sub_100085DAC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", v2, v3, 0));
  objc_msgSend(v4, "writeData:", v5);

}

NSDate *sub_100085E18(void *a1)
{
  double v1;

  objc_msgSend(a1, "timeIntervalSince1970");
  return +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", floor(v1 / 300.0) * 300.0);
}

void sub_100086574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000865A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000865B4(uint64_t a1)
{

}

void sub_1000865BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;

  v3 = a2;
  v4 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "saveObjects:error:", *(_QWORD *)(a1 + 40), 0);
  objc_msgSend(*(id *)(a1 + 40), "removeAllObjects");
  v5 = qword_1001ABBA0;
  if (os_log_type_enabled((os_log_t)qword_1001ABBA0, OS_LOG_TYPE_DEBUG))
    sub_1000E6680(a1, v5, v6);
  objc_autoreleasePoolPop(v4);

}

void sub_100086638(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v3 = a2;
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v4 = objc_autoreleasePoolPush();
  v18 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "eventBody"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "eventBody"));
  if ((objc_msgSend(v5, "isStarting") & 1) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v8 = v18;
    v9 = *(id *)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v8;
    goto LABEL_10;
  }
  objc_msgSend(v18, "timestamp");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"));
  v11 = v10;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
  {
    v12 = objc_msgSend(v5, "modeSemanticType");
    if (v12 != objc_msgSend(v6, "modeSemanticType"))
    {
      v9 = v11;
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "timestamp");
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[_DKEvent eventWithStream:startDate:endDate:categoryIntegerValue:metadata:](_DKEvent, "eventWithStream:startDate:endDate:categoryIntegerValue:metadata:", *(_QWORD *)(a1 + 32), v14, v14, objc_msgSend(v6, "modeSemanticType"), 0));
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v15);

      goto LABEL_9;
    }
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "timestamp");
    v13 = (id)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"));
  }
  else
  {
    v13 = v10;
  }
  v9 = v13;
LABEL_9:
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[_DKEvent eventWithStream:startDate:endDate:categoryIntegerValue:metadata:](_DKEvent, "eventWithStream:startDate:endDate:categoryIntegerValue:metadata:", *(_QWORD *)(a1 + 32), v9, v11, objc_msgSend(v5, "modeSemanticType"), 0));
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v16);

LABEL_10:
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 40), "count") >= 0x21)
  {
    v17 = objc_autoreleasePoolPush();
    objc_msgSend(*(id *)(a1 + 48), "saveObjects:error:", *(_QWORD *)(a1 + 40), 0);
    objc_msgSend(*(id *)(a1 + 40), "removeAllObjects");
    objc_autoreleasePoolPop(v17);
  }

  objc_autoreleasePoolPop(v4);
}

id sub_100086958(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD v4[5];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000869B4;
  v4[3] = &unk_10015F1E0;
  v4[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v4);
}

id sub_1000869B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "deleteEventsFromStream:");
}

void sub_100086D74(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  int v6;
  _BOOL4 v7;

  v2 = (void *)os_transaction_create("com.apple.dasd.pluginDataCollection.testMode");
  byte_1001ABBA8 = 1;
  v3 = objc_autoreleasePoolPush();
  if (os_log_type_enabled((os_log_t)qword_1001ABBA0, OS_LOG_TYPE_DEBUG))
    sub_1000E6854();
  objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "loadParameters");
  v4 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "experimentsToWrite");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled((os_log_t)qword_1001ABBA0, OS_LOG_TYPE_DEBUG))
    sub_1000E67F4();
  v6 = objc_msgSend(*(id *)(a1 + 32), "writeExperiments:atFileName:withTask:", v5, CFSTR("/var/mobile/Library/DuetActivityScheduler/dasd_data.json"), 0);
  v7 = os_log_type_enabled((os_log_t)qword_1001ABBA0, OS_LOG_TYPE_DEBUG);
  if (v6 < 1)
  {
    if (v7)
      sub_1000E67C8();
  }
  else if (v7)
  {
    sub_1000E6768();
  }
  objc_msgSend(*(id *)(a1 + 32), "deleteConvertedStreams");

  objc_autoreleasePoolPop(v3);
  byte_1001ABBA8 = 0;

}

void sub_100087274(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "reportDataOnExperiments:", v3);
  objc_msgSend(v3, "setTaskCompleted");

}

void sub_1000872B8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "reportWakeAnalytics:", v3);
  objc_msgSend(v3, "setTaskCompleted");

}

void sub_1000872FC(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "reportBackgroundAppRefreshAnalytics:", v3);
  objc_msgSend(v3, "setTaskCompleted");

}

void sub_100087340(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_100087394(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_1000873E8(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_10008743C(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_100087490(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_1000874E4(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_100087538(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_10008758C(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_1000875E0(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_100087634(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_100087688(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_1000876DC(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_100087730(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

void sub_100087784(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  objc_msgSend(v2, "reportAnalyticsForActivity:", v3);

  objc_msgSend(v4, "setTaskCompleted");
}

id sub_100087D2C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100087DE4(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("backgroundKillEnabled");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

id sub_100088360(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

Class sub_100089008(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1001ABBC0)
  {
    v5 = off_10015F260;
    v6 = 0;
    qword_1001ABBC0 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1001ABBC0)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("OSIUtilities");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_1000E6A8C();
LABEL_8:
    free(v2);
  }
  qword_1001ABBB8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100089168(id a1)
{
  dispatch_queue_attr_t v1;
  NSObject *v2;
  dispatch_queue_attr_t v3;
  dispatch_queue_t v4;
  void *v5;
  NSObject *attr;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_BACKGROUND, 0);
  attr = objc_claimAutoreleasedReturnValue(v3);

  v4 = dispatch_queue_create("com.apple.dasscheduler.metricqueue", attr);
  v5 = (void *)qword_1001ABBD0;
  qword_1001ABBD0 = (uint64_t)v4;

}

void sub_1000891D8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metricQueue"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10008928C;
  v5[3] = &unk_10015F358;
  v5[4] = *(_QWORD *)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(+[_DASBatchingQueue queueWithName:maxBatchingDelay:maxQueueDepth:queue:workItemsHandler:](_DASBatchingQueue, "queueWithName:maxBatchingDelay:maxQueueDepth:queue:workItemsHandler:", CFSTR("metrics_recorder"), 50, v2, v5, 1800.0));
  v4 = (void *)qword_1001ABBE0;
  qword_1001ABBE0 = v3;

}

id sub_10008928C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "aggregateAndPostCAEvents:", a2);
}

id sub_100089754(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD v5[2];
  _QWORD v6[2];

  v1 = *(_QWORD *)(a1 + 32);
  v5[1] = CFSTR("value");
  v6[0] = v1;
  v5[0] = CFSTR("key");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
  v6[1] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2));

  return v3;
}

void sub_100089CA0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "taskIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));

  if (!v4)
  {
    v5 = *(void **)(a1 + 40);
    v6 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "taskIdentifier"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v7);

    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKeyedSubscript:", v8, *(_QWORD *)(a1 + 40));

  }
}

void sub_100089E20(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "taskIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));

  if (!v4)
  {
    v5 = *(void **)(a1 + 40);
    v6 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "taskIdentifier"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKeyedSubscript:", v8, *(_QWORD *)(a1 + 40));

  }
  v9 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "taskIdentifier"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));

  if (!v11)
  {
    v12 = *(void **)(a1 + 48);
    v13 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "taskIdentifier"));
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v12, v14);

  }
  v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v15, "addObject:", *(_QWORD *)(a1 + 48));

}

uint64_t sub_10008A030(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10008A040(uint64_t a1)
{

}

void sub_10008A048(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 16), "objectForKeyedSubscript:", a1[5]));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10008A774(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001ABBF0;
  qword_1001ABBF0 = (uint64_t)v1;

}

void sub_10008AED8(id a1)
{
  _DASBatteryTemperatureRecorder *v1;
  void *v2;

  v1 = objc_opt_new(_DASBatteryTemperatureRecorder);
  v2 = (void *)qword_1001ABC00;
  qword_1001ABC00 = (uint64_t)v1;

  objc_msgSend((id)qword_1001ABC00, "startRecording");
}

id sub_10008BA50(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", a3));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));

  v9 = objc_msgSend(v7, "compare:", v8);
  return v9;
}

void sub_10008C0FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;

  v5 = a3;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "dk_dedup"));
  v6 = objc_msgSend(v5, "integerValue");

  v7 = 32;
  if (!v6)
    v7 = 40;
  objc_msgSend(*(id *)(a1 + v7), "addObject:", v8);

}

void sub_10008C26C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  v2 = a1 + 40;
  v1 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10008C2F8;
  v11[3] = &unk_10015D480;
  v11[4] = v1;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v11);
  v4 = *(NSObject **)(*(_QWORD *)v2 + 184);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    sub_1000E6EE8(v2, v4, v5, v6, v7, v8, v9, v10);
}

void sub_10008C2F8(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  if (!objc_msgSend(a3, "integerValue"))
  {
    v5 = *(void **)(*(_QWORD *)(a1 + 32) + 128);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dk_dedup"));
    objc_msgSend(v5, "addObject:", v6);

  }
}

void sub_10008C360(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
  objc_msgSend(v1, "queueHandleBARSettingsChangedNotification:", objc_msgSend(v2, "isAutomaticAppUpdatesAllowed"));

}

void sub_10008C42C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "arrayForKey:", CFSTR("killed")));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*(_QWORD *)(a1 + 32) + 136);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6), "dk_dedup"));
        objc_msgSend(v7, "addObject:", v8);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  if (os_log_type_enabled(*(os_log_t *)(*(_QWORD *)(a1 + 32) + 184), OS_LOG_TYPE_DEBUG))
    sub_1000E6F54();

}

id sub_10008C6B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "cancelAppRefreshTasksForApps:", *(_QWORD *)(a1 + 40));
}

id sub_10008CA44(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "cancelContactTracingTasksForApps:", *(_QWORD *)(a1 + 40));
}

void sub_10008CAEC(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7), "bundleIdentifier", (_QWORD)v9));
        objc_msgSend(v2, "addObject:", v8);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

  objc_msgSend(*(id *)(a1 + 40), "queueHandleAppsUninstalled:", v2);
}

void sub_10008CCCC(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  id v19;
  id obj;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  _BYTE v34[128];
  _BYTE v35[128];

  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  obj = *(id *)(a1 + 40);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v35, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v27;
    v18 = *(_QWORD *)v27;
    do
    {
      v5 = 0;
      v19 = v3;
      do
      {
        if (*(_QWORD *)v27 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v5);
        if ((objc_msgSend(v6, "isLaunchProhibited", v18) & 1) == 0)
        {
          v21 = v5;
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "UIBackgroundModes"));
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v34, 16);
          if (!v8)
            goto LABEL_23;
          v9 = v8;
          v10 = *(_QWORD *)v23;
          while (1)
          {
            for (i = 0; i != v9; i = (char *)i + 1)
            {
              if (*(_QWORD *)v23 != v10)
                objc_enumerationMutation(v7);
              v12 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
              if (objc_msgSend(v12, "isEqualToString:", CFSTR("fetch"))
                && (objc_msgSend(*(id *)(a1 + 48), "appUsesBackgroundTaskScheduler:", v6) & 1) == 0)
              {
                v13 = *(void **)(*(_QWORD *)(a1 + 48) + 104);
              }
              else if (objc_msgSend(v12, "isEqualToString:", CFSTR("remote-notification")))
              {
                v13 = *(void **)(*(_QWORD *)(a1 + 48) + 112);
              }
              else
              {
                if (!objc_msgSend(v12, "isEqualToString:", CFSTR("newsstand")))
                  continue;
                v13 = *(void **)(*(_QWORD *)(a1 + 48) + 120);
              }
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleIdentifier"));
              objc_msgSend(v13, "addObject:", v14);

              v15 = *(NSObject **)(*(_QWORD *)(a1 + 48) + 184);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
              {
                v16 = v15;
                v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleIdentifier"));
                *(_DWORD *)buf = 138412546;
                v31 = v17;
                v32 = 2112;
                v33 = v12;
                _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "App %@ with mode %@ installed", buf, 0x16u);

              }
            }
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v34, 16);
            if (!v9)
            {
LABEL_23:

              v4 = v18;
              v3 = v19;
              v5 = v21;
              break;
            }
          }
        }
        v5 = (char *)v5 + 1;
      }
      while (v5 != v3);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v35, 16);
    }
    while (v3);
  }

}

BOOL sub_10008D120(id a1, BMStoreEvent *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](a2, "eventBody"));
  v3 = objc_msgSend(v2, "isStarting");

  return v3;
}

void sub_10008D158(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));

  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 184);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000E7014(v5, v3);
  }

}

void sub_10008D1C4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "eventBody"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "parentBundleID"));
  v5 = v4;
  if (v4)
  {
    v6 = v4;
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "eventBody"));
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleID"));

  }
  v8 = *(double *)(a1 + 40);
  objc_msgSend(v13, "timestamp");
  LODWORD(v5) = vcvtpd_s64_f64((v8 - v9) / 86400.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));
  v11 = v10;
  if (!v10 || (int)objc_msgSend(v10, "intValue") > (int)v5)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v12, v6);

  }
}

void sub_10008D3AC(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a2;
  if ((int)objc_msgSend(a3, "intValue") <= 3)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "addObject:", v5);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "addObject:", v5);

}

void sub_10008D410(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "allPendingBackgroundTasks"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10008D4DC;
  v5[3] = &unk_10015F410;
  v6 = *(id *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", v5));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "filteredSetUsingPredicate:", v3));

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "cancelActivities:", v4);
}

BOOL sub_10008D4DC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  _BOOL8 v6;
  void *v7;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "relatedApplications"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v4, "firstObject"));

  LOBYTE(v4) = objc_msgSend(v3, "allowsUnrestrictedBackgroundLaunches");
  v6 = 0;
  if ((v4 & 1) == 0 && v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5));
    v6 = v7 == 0;

  }
  return v6;
}

void sub_10008D650(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "activityCanceled:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

  NSLog(CFSTR("Done canceling activities!"));
}

id sub_10008D7A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "queueCancelActivitiesForAllApps");
}

void sub_10008DA58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  id v9;
  _QWORD block[5];
  id v11;
  id v12;
  uint64_t v13;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "activityCompleted:", a2);
  objc_msgSend(*(id *)(a1 + 32), "minimumDelayBetweenLaunchesForApp:", *(_QWORD *)(a1 + 40));
  v4 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v8 = *(NSObject **)(v6 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008DB20;
  block[3] = &unk_10015EEF0;
  block[4] = v6;
  v11 = v5;
  v12 = v7;
  v13 = v4;
  v9 = v5;
  dispatch_sync(v8, block);

}

void sub_10008DB20(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", *(_QWORD *)(a1 + 48)));
  objc_msgSend(v2, "queueUpdateLastLaunchTimesToDate:forApps:", v3, v4);

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(void **)(a1 + 32);
  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeInterval:sinceDate:](NSDate, "dateWithTimeInterval:sinceDate:", *(_QWORD *)(a1 + 40), *(double *)(a1 + 56)));
  objc_msgSend(v6, "queueScheduleActivityForApp:startingAfter:", v5, v7);

}

id sub_10008DBB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "submitActivity:inGroup:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
}

id sub_10008DC44(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "createActivityGroup:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
}

void sub_10008DDFC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v2 = (void *)os_transaction_create("com.apple.dasd.appLaunchTimer");
  if (byte_1001ABC08 == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "queueCancelActivitiesForAllApps");
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queueObtainAppsEligibleForBackgroundFetch"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          v8 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
          v9 = *(void **)(a1 + 32);
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
          objc_msgSend(v9, "queueScheduleActivityForApp:startingAfter:", v8, v10);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "queue_cancelBackgroundTasksForUnusedApps");
  byte_1001ABC08 = 1;

}

id sub_10008DFBC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "queueStartIfBAREnabled");
}

void sub_10008E4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008E4E8(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  _BYTE *v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if ((objc_msgSend(*(id *)(a1[4] + 112), "containsObject:", a1[5]) & 1) != 0)
    v2 = 1;
  else
    v2 = objc_msgSend(*(id *)(a1[4] + 120), "containsObject:", a1[5]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = v2;
  v3 = a1[4];
  if (*(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    if (objc_msgSend(*(id *)(v3 + 160), "containsObject:", a1[5]))
    {
      v4 = (_BYTE *)a1[7];
      if (v4)
        *v4 = 1;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
      v5 = *(NSObject **)(a1[4] + 184);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = a1[5];
        v14 = 138412290;
        v15 = v6;
        v7 = "Remote Notification: %@ - Foreground";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v14, 0xCu);
      }
    }
    else
    {
      v9 = objc_msgSend(*(id *)(a1[4] + 144), "containsObject:", a1[5]);
      v10 = a1[4];
      if ((v9 & 1) != 0)
      {
        if ((objc_msgSend(*(id *)(v10 + 128), "containsObject:", a1[5]) & 1) != 0
          || objc_msgSend(*(id *)(a1[4] + 136), "containsObject:", a1[5])
          && (objc_msgSend(*(id *)(a1[4] + 152), "containsObject:", a1[5]) & 1) == 0)
        {
          *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
          v5 = *(NSObject **)(a1[4] + 184);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            v11 = a1[5];
            v14 = 138412290;
            v15 = v11;
            v7 = "Remote Notification: %@ - Disallowed/Killed";
            goto LABEL_16;
          }
        }
      }
      else
      {
        v12 = *(NSObject **)(v10 + 184);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v13 = a1[5];
          v14 = 138412290;
          v15 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Remote Notification: %@ - Not launched", (uint8_t *)&v14, 0xCu);
        }
        *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
      }
    }
  }
  else
  {
    v5 = *(NSObject **)(v3 + 184);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v8 = a1[5];
      v14 = 138412290;
      v15 = v8;
      v7 = "Remote Notification: %@ - Not eligible";
      goto LABEL_16;
    }
  }
}

id sub_10008E7F8(_QWORD *a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1[4] + 120), "containsObject:", a1[5]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_10008E8B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "queueHandleAppKilled:", *(_QWORD *)(a1 + 40));
}

id sub_10008E91C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "queueReloadRequestedDelays");
}

void sub_10008EA1C(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "dk_dedup"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v5, v6);

}

void sub_10008EB38(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 168), "objectForKeyedSubscript:", a1[5]));
  if (v2)
  {
    v4 = v2;
    objc_msgSend(v2, "doubleValue");
    v2 = v4;
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = v3;
  }

}

void sub_10008F018(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t sub_10008F044()
{
  uint64_t v0;

  return v0;
}

void sub_10008F0D0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001ABC10;
  qword_1001ABC10 = v1;

}

void sub_10008F258(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "checkProgressForMAD");
  objc_msgSend(v3, "setTaskCompleted");

}

void sub_100090680(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001ABC28;
  qword_1001ABC28 = (uint64_t)v1;

}

void sub_100090A50(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  double v12;
  double v13;
  id v14;
  void *v15;

  v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("remoteWidgetBudget")));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_1000E7658(v2, v3, v4, v5, v6, v7, v8, v9);

  v10 = *(_BYTE **)(a1 + 32);
  if (!v10[8])
  {
    objc_msgSend(v10, "logExhaustedDuration:withPluginConsideration:", 1, 0.0);
    objc_msgSend(*(id *)(a1 + 32), "logExhaustedDuration:withPluginConsideration:", 0, 0.0);
    v10 = *(_BYTE **)(a1 + 32);
  }
  v10[8] = 0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v13 = v12;
  v14 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.duetactivityscheduler"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v13 + 86400.0));
  objc_msgSend(v14, "setObject:forKey:", v15, CFSTR("remoteWidgetLoggingInterval"));

}

id sub_100090C44(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("remoteWidgetActualUnavailableDuration");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32) / 3600.0));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

id sub_100090CF0(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("remoteWidgetUnavailableDuration");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32) / 3600.0));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

void sub_10009189C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100091928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100091A1C(uint64_t a1)
{
  id obj;

  obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  objc_msgSend(*(id *)(a1 + 32), "updateBudgetsForNextSlot");
  objc_sync_exit(obj);

}

void sub_100091A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100091AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_100092068(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  int v7;
  id v8;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Blue List notification called (%@)", (uint8_t *)&v7, 0xCu);
  }

  v5 = *(id *)(a1 + 32);
  objc_sync_enter(v5);
  objc_msgSend(*(id *)(a1 + 32), "updateBlueListStatus:", objc_msgSend(*(id *)(a1 + 32), "shouldBlueListPushes"));
  objc_sync_exit(v5);

  return 1;
}

void sub_100092164(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100092180(uint64_t a1)
{
  id obj;

  obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  objc_msgSend(*(id *)(a1 + 32), "updateBlueListStatus:", objc_msgSend(*(id *)(a1 + 32), "shouldBlueListPushes"));
  objc_sync_exit(obj);

}

void sub_1000921D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000924C0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001ABC30;
  qword_1001ABC30 = v1;

}

void sub_1000929BC(id a1)
{
  _DASBGSystemTaskHelper *v1;
  void *v2;

  v1 = objc_alloc_init(_DASBGSystemTaskHelper);
  v2 = (void *)qword_1001ABC40;
  qword_1001ABC40 = (uint64_t)v1;

}

void sub_100092C40(uint64_t a1, int a2, id a3, void *a4)
{
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t service_uid_for_token;
  void *v11;
  void *v12;
  NSObject *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  uint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  _DASBGSystemTask *v23;
  void *v24;
  unsigned __int8 v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  id v34;
  uint8_t v35[128];
  uint8_t v36[4];
  void *v37;
  __int16 v38;
  _DASBGSystemTask *v39;
  uint8_t buf[32];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v7 = a4;
  if (a2)
  {
    if (a2 != 1)
    {
      if (a2 == 2)
      {
        v8 = qword_1001ABC58;
        if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BGST Received XPC BARRIER", buf, 2u);
        }
      }
      goto LABEL_42;
    }
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "allKeys", 0));
    v14 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v31;
      while (2)
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v31 != v16)
            objc_enumerationMutation(v9);
          v18 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v18));
          v11 = v19;
          if (v19 && objc_msgSend(v19, "token") == a3)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serviceNameFromToken:", a3));
            v21 = qword_1001ABC58;
            if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543618;
              *(_QWORD *)&buf[4] = v20;
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v11;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Unregistered BGSystemTask on XPC remove event from service %{public}@: %{public}@", buf, 0x16u);
            }
            objc_msgSend(*(id *)(a1 + 32), "dasCancelActivity:", v11);
            objc_msgSend((id)qword_1001ABC60, "removeObjectForKey:", v18);

            goto LABEL_40;
          }

        }
        v15 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
        if (v15)
          continue;
        break;
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  memset(buf, 0, sizeof(buf));
  if ((xpc_get_event_name("com.apple.bg.system.task", a3, buf) & 1) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", buf));
    service_uid_for_token = xpc_get_service_uid_for_token(a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", v9, service_uid_for_token));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v11));

    if (v12)
    {
      v13 = qword_1001ABC58;
      if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v36 = 138543362;
        v37 = v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Skipping XPC_EVENT_PUBLISHER_ACTION_ADD since %{public}@ already exists", v36, 0xCu);
      }
    }
    else
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serviceNameFromToken:", a3));
      if (objc_msgSend(v22, "length"))
      {
        v23 = -[_DASBGSystemTask initWithDescriptor:withToken:withUID:withService:staticSubmission:]([_DASBGSystemTask alloc], "initWithDescriptor:withToken:withUID:withService:staticSubmission:", v7, a3, service_uid_for_token, v22, 1);
        if (v23)
        {
          v24 = *(void **)(a1 + 32);
          v34 = 0;
          v25 = objc_msgSend(v24, "dasSubmitActivity:error:", v23, &v34);
          v26 = v34;
          v27 = qword_1001ABC58;
          if ((v25 & 1) != 0)
          {
            if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v36 = 138543618;
              v37 = v22;
              v38 = 2114;
              v39 = v23;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Created BGSystemTask on XPC add event from service %{public}@: %{public}@", v36, 0x16u);
            }
            v28 = (void *)qword_1001ABC60;
            v29 = (void *)objc_claimAutoreleasedReturnValue(-[_DASBGSystemTask name](v23, "name"));
            objc_msgSend(v28, "setObject:forKeyedSubscript:", v23, v29);

          }
          else if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
          {
            sub_1000E7A1C();
          }

        }
        else if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
        {
          sub_1000E79BC();
        }

      }
      else if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
      {
        sub_1000E795C();
      }

    }
LABEL_40:

    goto LABEL_41;
  }
  if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
    sub_1000E7A84();
LABEL_42:

}

void sub_100093250(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = qword_1001ABC58;
  if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Soliciting running BGSTs", v2, 2u);
  }
  notify_post((const char *)objc_msgSend(CFSTR("com.apple.bg.system.task.resubmission"), "UTF8String"));
}

void sub_100093FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100094010(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100094020(uint64_t a1)
{

}

void sub_100094028(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  _QWORD handler[4];
  id v39;
  uint64_t v40;
  int v41;
  const __CFString *v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];
  uint8_t buf[4];
  _BYTE v47[14];
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  const __CFString *v52;
  uint64_t v53;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v2));
  v4 = v3;
  if (v3)
  {
    if (objc_msgSend(v3, "state") == (id)2)
    {
      v5 = qword_1001ABC70;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "scheduler_activity"));
      LOBYTE(v5) = objc_msgSend((id)v5, "wasActivityAllowedToRun:", v6);

      if ((v5 & 1) != 0)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
        objc_msgSend(v4, "setState:", 3);
        objc_msgSend(v4, "setPid:", *(unsigned int *)(a1 + 68));
        v7 = objc_msgSend(v4, "pid");
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "scheduler_activity"));
        objc_msgSend(v8, "setPid:", v7);

        v9 = (void *)qword_1001ABC58;
        if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
        {
          v10 = v9;
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)v47 = objc_msgSend(v4, "pid");
          *(_WORD *)&v47[4] = 2114;
          *(_QWORD *)&v47[6] = v4;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Client (PID %d) confirmed run for %{public}@", buf, 0x12u);

        }
        v11 = (void *)qword_1001ABC70;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "scheduler_activity"));
        objc_msgSend(v11, "activityStarted:", v12);

        v13 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_proc, *(int *)(a1 + 68), 0x80000000uLL, (dispatch_queue_t)qword_1001ABC50);
        if (v13)
        {
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 3221225472;
          handler[2] = sub_100094500;
          handler[3] = &unk_10015F540;
          v14 = *(id *)(a1 + 32);
          v41 = *(_DWORD *)(a1 + 64);
          v15 = *(_QWORD *)(a1 + 40);
          v39 = v14;
          v40 = v15;
          dispatch_source_set_event_handler(v13, handler);
          dispatch_resume(v13);
          objc_msgSend(v4, "setDispatchSourceProcessExit:", v13);

        }
      }
      else
      {
        v32 = *(_QWORD *)(a1 + 32);
        v42 = CFSTR("taskIdentifier");
        v43 = v32;
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
        v34 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASBGSystemTaskHelperErrorDomain"), 5, v33));
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v36 = *(void **)(v35 + 40);
        *(_QWORD *)(v35 + 40) = v34;

        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
        v37 = (void *)qword_1001ABC58;
        if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
          sub_1000E7C68(v37);
      }
    }
    else
    {
      v44[0] = CFSTR("currentState");
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v4, "state")));
      v44[1] = CFSTR("expectedState");
      v45[0] = v26;
      v45[1] = &off_10016EC90;
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v45, v44, 2));
      v28 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASBGSystemTaskHelperErrorDomain"), 2, v27));
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v30 = *(void **)(v29 + 40);
      *(_QWORD *)(v29 + 40) = v28;

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
      v31 = (void *)qword_1001ABC58;
      if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
        sub_1000E7D10(v31, v4);
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 32);
    v52 = CFSTR("taskIdentifier");
    v53 = v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1));
    v18 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASBGSystemTaskHelperErrorDomain"), 1, v17));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v20 = *(void **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    v21 = qword_1001ABC58;
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
    {
      v22 = *(_QWORD *)(a1 + 32);
      v23 = *(_DWORD *)(a1 + 64);
      v24 = *(_DWORD *)(a1 + 68);
      v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138544130;
      *(_QWORD *)v47 = v22;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)&v47[10] = v23;
      v48 = 1024;
      v49 = v24;
      v50 = 2112;
      v51 = v25;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "acknowledgeSystemTaskLaunchWithIdentifier: Task %{public}@ from UID %d, PID %d not found: %@", buf, 0x22u);
    }
  }

}

void sub_100094500(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  __int16 v8;
  void *v9;
  __int16 v10;
  _BOOL4 v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v2));
  v4 = v3;
  if (v3 && (objc_msgSend(v3, "state") == (id)3 || objc_msgSend(v4, "state") == (id)4))
  {
    v5 = (void *)qword_1001ABC58;
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
    {
      v6 = v5;
      LODWORD(v7) = 67109634;
      HIDWORD(v7) = objc_msgSend(v4, "pid");
      v8 = 2114;
      v9 = v4;
      v10 = 1024;
      v11 = objc_msgSend(v4, "state") == (id)4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Client (PID %d) died while task %{public}@ was still running. Asked to suspend: %d", (uint8_t *)&v7, 0x18u);

    }
    objc_msgSend(v4, "setState:", 0, v7);
    objc_msgSend(*(id *)(a1 + 40), "dasCancelActivity:", v4);
    objc_msgSend(*(id *)(a1 + 40), "dasSubmitActivity:withClientOffset:error:", v4, 0, 300.0);
  }

}

void sub_100094774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009478C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  NSObject *v10;
  void *v11;
  void *v12;
  double v13;
  unsigned int v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  int v20;
  id v21;
  uint8_t buf[4];
  _BYTE v23[14];
  __int16 v24;
  int v25;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v2));
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "state");
    v6 = (void *)qword_1001ABC58;
    if (v5 == (id)4)
    {
      if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
      {
        v7 = v6;
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v23 = objc_msgSend(v4, "pid");
        *(_WORD *)&v23[4] = 2114;
        *(_QWORD *)&v23[6] = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Client (PID %d) confirmed suspension for %{public}@", buf, 0x12u);

      }
      if (objc_msgSend(v4, "suspensionReason") == (id)1
        && *(double *)(a1 + 56) < 300.0
        && (uint64_t)objc_msgSend(v4, "priority") <= 2
        && objc_msgSend(v4, "type") != (id)3
        && (objc_msgSend(v4, "requestsApplicationLaunch") & 1) == 0
        && (objc_msgSend(v4, "beforeApplicationLaunch") & 1) == 0
        && (objc_msgSend(v4, "runOnAppForeground") & 1) == 0
        && (uint64_t)objc_msgSend(v4, "requires_protection_class") >= 3)
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0x4072C00000000000;
        v8 = (void *)qword_1001ABC58;
        if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
        {
          v9 = (int)*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
          v10 = v8;
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)v23 = v9;
          *(_WORD *)&v23[4] = 2114;
          *(_QWORD *)&v23[6] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Imposing a %ds cool-off on %{public}@ upon suspension due to runtime limits", buf, 0x12u);

        }
      }
      objc_msgSend(*(id *)(a1 + 40), "dasCancelActivity:", v4);
      v12 = *(void **)(a1 + 40);
      v13 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      v21 = 0;
      v14 = objc_msgSend(v12, "dasSubmitActivity:withClientOffset:error:", v4, &v21, v13);
      v15 = v21;
      if (v14)
        v16 = 5;
      else
        v16 = 0;
      objc_msgSend(v4, "setState:", v16);

    }
    else if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
    {
      sub_1000E7DD4(v6);
    }
  }
  else
  {
    v17 = qword_1001ABC58;
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(_DWORD *)(a1 + 64);
      v20 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)v23 = v18;
      *(_WORD *)&v23[8] = 1024;
      *(_DWORD *)&v23[10] = v19;
      v24 = 1024;
      v25 = v20;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "acknowledgeSystemTaskSuspensionWithIdentifier: Task %{public}@ from UID %d, PID %d not found", buf, 0x18u);
    }
  }

}

void sub_100094BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100094BB8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  double v9;
  unsigned __int8 v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  int v16;
  id v17;
  uint8_t buf[4];
  _BYTE v19[14];
  __int16 v20;
  int v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v2));
  v4 = v3;
  if (!v3)
  {
    v13 = qword_1001ABC58;
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(_DWORD *)(a1 + 64);
      v16 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)v19 = v14;
      *(_WORD *)&v19[8] = 1024;
      *(_DWORD *)&v19[10] = v15;
      v20 = 1024;
      v21 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "handleClientLedSystemTaskExpirationWithIdentifier: Task %{public}@ from UID %d, PID %d not found", buf, 0x18u);
    }
    goto LABEL_13;
  }
  v5 = objc_msgSend(v3, "state");
  v6 = (void *)qword_1001ABC58;
  if (v5 != (id)3)
  {
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
      sub_1000E7E4C(v6);
LABEL_13:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
  {
    v7 = v6;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v19 = objc_msgSend(v4, "pid");
    *(_WORD *)&v19[4] = 2114;
    *(_QWORD *)&v19[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Client (PID %d) requested expiration for %{public}@", buf, 0x12u);

  }
  objc_msgSend(*(id *)(a1 + 40), "dasCancelActivity:", v4);
  v8 = *(void **)(a1 + 40);
  v9 = *(double *)(a1 + 56);
  v17 = 0;
  v10 = objc_msgSend(v8, "dasSubmitActivity:withClientOffset:error:", v4, &v17, v9);
  v11 = v17;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v10;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    v12 = 7;
  else
    v12 = 0;
  objc_msgSend(v4, "setState:", v12);

LABEL_14:
}

void sub_100094EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100094F10(uint64_t a1)
{
  void *v2;
  _DASBGSystemTask *v3;
  _DASBGSystemTask *v4;
  id v5;
  NSObject *v6;
  _DASBGSystemTask *v7;
  int v8;
  int v9;
  _QWORD *v10;
  void *v11;
  _DASBGSystemTask *v12;
  _DASBGSystemTask *v13;
  void *v14;
  unsigned __int8 v15;
  id v16;
  int v17;
  NSObject *v18;
  void *v19;
  void *v20;
  _DASBGSystemTask *v21;
  int v22;
  int v23;
  id v24;
  _QWORD v25[6];
  int v26;
  uint64_t v27;
  uint8_t buf[4];
  _DASBGSystemTask *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64)));
  v3 = (_DASBGSystemTask *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v2));
  if (!v3)
  {
    v27 = 0;
    if (xpc_event_publisher_create_subscription(qword_1001ABC68, "com.apple.bg.system.task", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 68), &v27))
    {
      if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
        sub_1000E7FEC();
      v4 = 0;
      goto LABEL_11;
    }
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000952F0;
    v25[3] = &unk_10015F5B8;
    v25[4] = *(_QWORD *)(a1 + 56);
    v25[5] = v27;
    v26 = *(_DWORD *)(a1 + 68);
    v10 = objc_retainBlock(v25);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "serviceNameFromToken:", v27));
    if (objc_msgSend(v11, "length"))
    {
      v12 = [_DASBGSystemTask alloc];
      v13 = -[_DASBGSystemTask initWithDescriptor:withToken:withUID:withService:staticSubmission:](v12, "initWithDescriptor:withToken:withUID:withService:staticSubmission:", *(_QWORD *)(a1 + 40), v27, *(unsigned int *)(a1 + 64), v11, 0);
      if (v13)
      {
        v4 = v13;
        v14 = *(void **)(a1 + 48);
        v24 = 0;
        v15 = objc_msgSend(v14, "dasSubmitActivity:error:", v4, &v24);
        v16 = v24;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v15;
        v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
        v18 = qword_1001ABC58;
        if (v17)
        {
          if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            v29 = v4;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "submitTaskRequestWithIdentifier: Submitted BGSystemTask %{public}@", buf, 0xCu);
          }
          v19 = (void *)qword_1001ABC60;
          v20 = (void *)objc_claimAutoreleasedReturnValue(-[_DASBGSystemTask name](v4, "name"));
          objc_msgSend(v19, "setObject:forKeyedSubscript:", v4, v20);

        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
            sub_1000E7F84();
          ((void (*)(_QWORD *))v10[2])(v10);
        }

        goto LABEL_27;
      }
      if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
        sub_1000E7F24();
    }
    else if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
    {
      sub_1000E7EC4();
    }
    ((void (*)(_QWORD *))v10[2])(v10);
    v4 = 0;
LABEL_27:

    goto LABEL_28;
  }
  v4 = v3;
  v5 = -[_DASBGSystemTask type](v3, "type");
  v6 = qword_1001ABC58;
  if (v5 != (id)3)
  {
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
    {
      v21 = *(_DASBGSystemTask **)(a1 + 32);
      v22 = *(_DWORD *)(a1 + 64);
      v23 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)buf = 138543874;
      v29 = v21;
      v30 = 1024;
      v31 = v22;
      v32 = 1024;
      v33 = v23;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "submitTaskRequestWithIdentifier: Task %{public}@ from UID %d, PID %d already exists", buf, 0x18u);
    }
LABEL_11:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    goto LABEL_28;
  }
  if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DASBGSystemTask **)(a1 + 32);
    v8 = *(_DWORD *)(a1 + 64);
    v9 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)buf = 138543874;
    v29 = v7;
    v30 = 1024;
    v31 = v8;
    v32 = 1024;
    v33 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "submitTaskRequestWithIdentifier: Task %{public}@ from UID %d, PID %d already exists", buf, 0x18u);
  }
LABEL_28:

}

void sub_1000952F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  v2 = 0;
  if (xpc_event_publisher_set_event(qword_1001ABC68, v1, 0, *(unsigned int *)(a1 + 48), &v2))
  {
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
      sub_1000E8018();
  }
}

void sub_100095484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009549C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  NSObject *v11;
  unsigned int v12;
  void *v13;
  _DASBGSystemTask *v14;
  _DASBGSystemTask *v15;
  void *v16;
  unsigned __int8 v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint8_t buf[4];
  _BYTE v23[14];
  __int16 v24;
  int v25;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v2));
  v4 = v3;
  if (v3)
  {
    if (objc_msgSend(v3, "state") == (id)1
      || objc_msgSend(v4, "state") == (id)4
      || objc_msgSend(v4, "state") == (id)7
      || objc_msgSend(v4, "state") == (id)5)
    {
      v21 = 0;
      v5 = xpc_event_publisher_set_event(qword_1001ABC68, objc_msgSend(v4, "token"), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 68), &v21);
      v6 = (void *)qword_1001ABC58;
      if (v5)
      {
        if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
          sub_1000E80AC();
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
        {
          v11 = v6;
          v12 = objc_msgSend(v4, "pid");
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)v23 = v12;
          *(_WORD *)&v23[4] = 2114;
          *(_QWORD *)&v23[6] = v4;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Client (PID %d) updated task request for %{public}@", buf, 0x12u);

        }
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "serviceNameFromToken:", v21));
        if (objc_msgSend(v13, "length"))
        {
          v14 = [_DASBGSystemTask alloc];
          v15 = -[_DASBGSystemTask initWithDescriptor:withToken:withUID:withService:staticSubmission:task:](v14, "initWithDescriptor:withToken:withUID:withService:staticSubmission:task:", *(_QWORD *)(a1 + 40), v21, *(unsigned int *)(a1 + 64), v13, 0, v4);
          if (v15)
          {
            objc_msgSend(*(id *)(a1 + 48), "dasCancelActivity:", v4);
            objc_msgSend((id)qword_1001ABC60, "setObject:forKeyedSubscript:", v15, v2);
            v16 = *(void **)(a1 + 48);
            v20 = 0;
            v17 = objc_msgSend(v16, "dasSubmitActivity:error:", v15, &v20);
            v18 = v20;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v17;
            if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
            {
              if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
                sub_1000E8044();
              objc_msgSend((id)qword_1001ABC60, "setObject:forKeyedSubscript:", 0, v2);
            }

          }
        }
        else if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
        {
          sub_1000E795C();
        }

      }
    }
    else
    {
      v19 = (void *)qword_1001ABC58;
      if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
        sub_1000E80D8(v19);
    }
  }
  else
  {
    v7 = qword_1001ABC58;
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_DWORD *)(a1 + 64);
      v10 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)v23 = v8;
      *(_WORD *)&v23[8] = 1024;
      *(_DWORD *)&v23[10] = v9;
      v24 = 1024;
      v25 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "updateTaskRequestWithIdentifier: Task %{public}@ from UID %d, PID %d not found", buf, 0x18u);
    }
  }

}

void sub_1000958A0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  void *v11;
  void *v12;
  _DWORD v13[3];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v2));
  v4 = v3;
  if (v3)
  {
    if (objc_msgSend(v3, "state") == (id)3 || objc_msgSend(v4, "state") == (id)2 || objc_msgSend(v4, "state") == (id)4)
    {
      v5 = qword_1001ABC58;
      if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
      {
        v13[0] = 138543362;
        *(_QWORD *)&v13[1] = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Completed %{public}@", (uint8_t *)v13, 0xCu);
      }
      objc_msgSend(*(id *)(a1 + 40), "dasCompleteActivity:", v4);
      objc_msgSend(v4, "advanceBaseTime");
      if (objc_msgSend(v4, "post_install"))
        objc_msgSend(v4, "markInstallActivityDone");
      if (objc_msgSend(v4, "type") == (id)2)
      {
        v6 = qword_1001ABC58;
        if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
        {
          v13[0] = 138543362;
          *(_QWORD *)&v13[1] = v4;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Rescheduling repeating task %{public}@", (uint8_t *)v13, 0xCu);
        }
        objc_msgSend(*(id *)(a1 + 40), "dasSubmitActivity:error:", v4, 0);
        goto LABEL_26;
      }
      if (objc_msgSend(v4, "type") == (id)3)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
        +[_DASBGSystemTask markFastPassActivityDone:semanticVersion:](_DASBGSystemTask, "markFastPassActivityDone:semanticVersion:", v11, objc_msgSend(v4, "semanticVersion"));

      }
      if (!xpc_event_publisher_set_event(qword_1001ABC68, objc_msgSend(v4, "token", 0), 0, *(unsigned int *)(a1 + 52), v13)|| !os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
      {
LABEL_25:
        objc_msgSend((id)qword_1001ABC60, "removeObjectForKey:", v2);
        goto LABEL_26;
      }
    }
    else
    {
      v12 = (void *)qword_1001ABC58;
      if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
        sub_1000E817C(v12);
      objc_msgSend(*(id *)(a1 + 40), "dasCancelActivity:", v4);
      if (!xpc_event_publisher_set_event(qword_1001ABC68, objc_msgSend(v4, "token", 0), 0, *(unsigned int *)(a1 + 52), v13)|| !os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_25;
      }
    }
    sub_1000E8150();
    goto LABEL_25;
  }
  v7 = qword_1001ABC58;
  if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 48);
    v10 = *(_DWORD *)(a1 + 52);
    v13[0] = 138543874;
    *(_QWORD *)&v13[1] = v8;
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "completeSystemTaskWithIdentifier: Task %{public}@ from UID %d, PID %d not found", (uint8_t *)v13, 0x18u);
  }
LABEL_26:

}

void sub_100095CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100095CE8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  int v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 56)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v2));
  v4 = objc_msgSend(v3, "state");
  v5 = qword_1001ABC58;
  if (v4 == (id)7)
  {
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138543362;
      v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Resuming scheduling for %{public}@", (uint8_t *)&v6, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 40), "dasCancelActivity:", v3);
    objc_msgSend(*(id *)(a1 + 40), "dasSubmitActivity:error:", v3, 0);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
      sub_1000E81F4(v5);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }

}

void sub_100095F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100095F30(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  _DWORD v9[3];
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 56)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v2));
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 40), "dasCancelActivity:", v3);
    v4 = qword_1001ABC58;
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 138543362;
      *(_QWORD *)&v9[1] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unregistering %{public}@", (uint8_t *)v9, 0xCu);
    }
    if (xpc_event_publisher_set_event(qword_1001ABC68, objc_msgSend(v3, "token", 0), 0, *(unsigned int *)(a1 + 60), v9))
    {
      if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
        sub_1000E826C();
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    }
    objc_msgSend((id)qword_1001ABC60, "removeObjectForKey:", v2);
  }
  else
  {
    v5 = qword_1001ABC58;
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(_DWORD *)(a1 + 56);
      v8 = *(_DWORD *)(a1 + 60);
      v9[0] = 138543874;
      *(_QWORD *)&v9[1] = v6;
      v10 = 1024;
      v11 = v7;
      v12 = 1024;
      v13 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "unregisterSystemTaskWithIdentifier: Task %{public}@ from UID %d, PID %d not found", (uint8_t *)v9, 0x18u);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }

}

void sub_100096218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100096230(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v2 = *(id *)(a1 + 32);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v9;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v9 != v5)
            objc_enumerationMutation(v2);
          v7 = *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6);
          if (v7)
          {
            if (!+[_DASBGSystemTask resetFastPass:resetAll:](_DASBGSystemTask, "resetFastPass:resetAll:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), 0, (_QWORD)v8))objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v7);
          }
          v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v4);
    }

  }
  else
  {
    +[_DASBGSystemTask resetFastPass:resetAll:](_DASBGSystemTask, "resetFastPass:resetAll:", &stru_1001617C8, *(unsigned __int8 *)(a1 + 48));
  }
}

void sub_1000964A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000964B8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "allKeys"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v7, "containsString:", *(_QWORD *)(a1 + 32)))
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v7));
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "aboutMe"));

          if (v9)
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v9);

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

id sub_1000966F4(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  __objc2_class_ro **p_info;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  id v16;
  __objc2_class_ro **v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;
  _BYTE v33[128];

  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
  v4 = &unk_1001AB000;
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v28;
    p_info = &OBJC_METACLASS___AppKillsInfo.info;
    v26 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v6)
          objc_enumerationMutation(v2);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(p_info + 211, "taskNameWithIdentifier:UID:", *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i), *(unsigned int *)(a1 + 48)));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v9));
        v11 = v10;
        if (!v10)
        {
          v15 = *((_QWORD *)v4 + 395);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            goto LABEL_15;
          *(_DWORD *)buf = 138543362;
          v32 = v9;
          v13 = v15;
          v14 = "Resubmitted running BGST %{public}@ not found";
          goto LABEL_13;
        }
        if (objc_msgSend(v10, "state") == (id)3 || objc_msgSend(v11, "state") == (id)2)
        {
          v12 = *((_QWORD *)v4 + 395);
          if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            goto LABEL_15;
          *(_DWORD *)buf = 138543362;
          v32 = v9;
          v13 = v12;
          v14 = "Resubmitted running BGST %{public}@ is already running/requested to run, not sending to DAS";
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 0xCu);
          goto LABEL_15;
        }
        objc_msgSend(v11, "setPid:", *(unsigned int *)(a1 + 52));
        v16 = objc_msgSend(v11, "pid");
        v17 = p_info;
        v18 = v4;
        v19 = v2;
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "scheduler_activity"));
        objc_msgSend(v20, "setPid:", v16);

        objc_msgSend(v11, "setState:", 3);
        v21 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "scheduler_activity"));
        objc_msgSend(v21, "addObject:", v22);

        v2 = v19;
        v4 = v18;
        p_info = v17;
        v6 = v26;
LABEL_15:

      }
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
    }
    while (v5);
  }

  v23 = *((_QWORD *)v4 + 395);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    *(_DWORD *)buf = 138543362;
    v32 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Resubmitting running BGSTs to DAS %{public}@", buf, 0xCu);
  }
  return objc_msgSend((id)qword_1001ABC70, "resubmitRunningActivities:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_100096B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100096B64(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  id obj;
  const __CFString *v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v2));
  if (!v3)
  {
    v9 = qword_1001ABC58;
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(_DWORD *)(a1 + 64);
      v18 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)buf = 138543874;
      v23 = v16;
      v24 = 1024;
      v25 = v17;
      v26 = 1024;
      v27 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "reportSystemTaskWithIdentifier:producedResults: Task %{public}@ from (UID %d, PID %d) not found", buf, 0x18u);
    }
    v10 = _DASActivitySchedulerErrorDomain;
    v11 = *(_QWORD *)(a1 + 32);
    v20 = CFSTR("taskIdentifier");
    v21 = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
    v13 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 3, v12));
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

    goto LABEL_8;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) || !*(_QWORD *)(a1 + 40))
  {
LABEL_8:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    goto LABEL_9;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[_DASActivityDependencyManager sharedInstance](_DASActivityDependencyManager, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "scheduler_activity"));
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v7 + 40);
  v8 = objc_msgSend(v4, "reportActivity:producedResults:error:", v5, v6, &obj);
  objc_storeStrong((id *)(v7 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v8;

LABEL_9:
}

void sub_100096EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100096F08(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  id obj;
  const __CFString *v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v2));
  if (!v3)
  {
    v9 = qword_1001ABC58;
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(_DWORD *)(a1 + 64);
      v18 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)buf = 138543874;
      v23 = v16;
      v24 = 1024;
      v25 = v17;
      v26 = 1024;
      v27 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "reportSystemTaskWithIdentifier:consumedResults: Task %{public}@ from (UID %d, PID %d) not found", buf, 0x18u);
    }
    v10 = _DASActivitySchedulerErrorDomain;
    v11 = *(_QWORD *)(a1 + 32);
    v20 = CFSTR("taskIdentifier");
    v21 = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
    v13 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 3, v12));
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

    goto LABEL_8;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) || !*(_QWORD *)(a1 + 40))
  {
LABEL_8:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    goto LABEL_9;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[_DASActivityDependencyManager sharedInstance](_DASActivityDependencyManager, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "scheduler_activity"));
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v7 + 40);
  v8 = objc_msgSend(v4, "reportActivity:consumedResults:error:", v5, v6, &obj);
  objc_storeStrong((id *)(v7 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v8;

LABEL_9:
}

void sub_100097280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000972A4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  int v17;
  id obj;
  const __CFString *v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBGSystemTask taskNameWithIdentifier:UID:](_DASBGSystemTask, "taskNameWithIdentifier:UID:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "objectForKeyedSubscript:", v2));
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[_DASActivityDependencyManager sharedInstance](_DASActivityDependencyManager, "sharedInstance"));
    v5 = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "scheduler_activity"));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    obj = *(id *)(v7 + 40);
    LOBYTE(v5) = objc_msgSend(v4, "resetDependenciesForIdentifier:byActivity:error:", v5, v6, &obj);
    objc_storeStrong((id *)(v7 + 40), obj);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v5;

  }
  else
  {
    v8 = qword_1001ABC58;
    if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_ERROR))
    {
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(_DWORD *)(a1 + 64);
      v17 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)buf = 138543874;
      v22 = v15;
      v23 = 1024;
      v24 = v16;
      v25 = 1024;
      v26 = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "resetResultsForIdentifier:byTaskWithIdentifier: Task %{public}@ from UID %d, PID %d not found", buf, 0x18u);
    }
    v9 = _DASActivitySchedulerErrorDomain;
    v10 = *(_QWORD *)(a1 + 32);
    v19 = CFSTR("taskIdentifier");
    v20 = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
    v12 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, 3, v11));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  }

}

void sub_1000975D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000975F0(uint64_t a1)
{
  NSNumberFormatter *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), CFSTR("TaskName"));
  v2 = objc_opt_new(NSNumberFormatter);
  -[NSNumberFormatter setNumberStyle:](v2, "setNumberStyle:", 1);
  -[NSNumberFormatter setUsesSignificantDigits:](v2, "setUsesSignificantDigits:", 1);
  -[NSNumberFormatter setMinimumSignificantDigits:](v2, "setMinimumSignificantDigits:", 1);
  -[NSNumberFormatter setMaximumSignificantDigits:](v2, "setMaximumSignificantDigits:", 2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 64)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSNumberFormatter stringFromNumber:](v2, "stringFromNumber:", v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSNumberFormatter numberFromString:](v2, "numberFromString:", v4));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v5, CFSTR("Target"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 72)));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v6, CFSTR("CompletedPercentage"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 80)));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, CFSTR("WorkloadCategory"));

  objc_msgSend(v8, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("SubCategory"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 48), "sendToPPS:", v8);

}

void sub_100097A10(uint64_t a1)
{
  void *v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  NSObject *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  void *v22;
  _BYTE v23[128];

  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ABC60, "allValues"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v18;
    *(_QWORD *)&v4 = 138543362;
    v16 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v8, "state", v16) == (id)1
          || objc_msgSend(v8, "state") == (id)7
          || objc_msgSend(v8, "state") == (id)5)
        {
          if (objc_msgSend(v8, "type") == (id)2
            && (v9 = fabs(*(double *)(a1 + 40)), objc_msgSend(v8, "interval"), v9 >= v10 * 0.01)
            || (objc_msgSend(v8, "type") == (id)1 || objc_msgSend(v8, "type") == (id)3)
            && (v11 = fabs(*(double *)(a1 + 40)),
                objc_msgSend(v8, "trySchedulingBefore"),
                v13 = v12,
                objc_msgSend(v8, "startAfter"),
                v11 >= (v13 - v14) * 0.01))
          {
            v15 = qword_1001ABC58;
            if (os_log_type_enabled((os_log_t)qword_1001ABC58, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v16;
              v22 = v8;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Time change: resubmitting activity %{public}@", buf, 0xCu);
            }
            objc_msgSend(*(id *)(a1 + 32), "dasCancelActivity:", v8);
            objc_msgSend(v8, "adjustBaseTimeByOffset:", *(double *)(a1 + 40));
            objc_msgSend(*(id *)(a1 + 32), "dasSubmitActivity:error:", v8, 0);
          }
        }
      }
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    }
    while (v5);
  }

}

void sub_100097DBC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

id sub_100097DF0()
{
  void *v0;

  return objc_msgSend(v0, "state");
}

id sub_100097DFC()
{
  void *v0;

  return objc_msgSend(v0, "pid");
}

id sub_100097E08(id a1)
{
  return a1;
}

void sub_100097E10(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

id sub_1000980A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "evaluateActivityOnTick");
}

id sub_100098B24(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100098B2C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100098CF4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100098E88(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100098E90(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100098FC8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100098FD0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100099164(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10009916C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100099508(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100099510(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100099630()
{
  void *v0;

  return objc_msgSend(v0, "count");
}

void sub_10009972C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001ABC80;
  qword_1001ABC80 = (uint64_t)v1;

}

id sub_1000997D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "activateConnection");
}

void sub_1000999D8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[5];

  v3 = a2;
  objc_msgSend(v3, "setName:", CFSTR("ActivityProgressUISessionClient"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BSServiceQuality utility](BSServiceQuality, "utility"));
  objc_msgSend(v3, "setServiceQuality:", v4);

  objc_msgSend(v3, "setInterface:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v3, "setInterfaceTarget:", *(_QWORD *)(a1 + 40));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100099AB8;
  v6[3] = &unk_10015F6F8;
  v6[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v3, "setInvalidationHandler:", v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "queue"));
  objc_msgSend(v3, "setTargetQueue:", v5);

}

id sub_100099AB8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidateConnection");
}

id sub_100099D00()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1001ABC90;
  v7 = qword_1001ABC90;
  if (!qword_1001ABC90)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10009A064;
    v3[3] = &unk_10015D610;
    v3[4] = &v4;
    sub_10009A064((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100099DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_10009A064(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1001ABC98)
  {
    v5 = off_10015F740;
    v6 = 0;
    qword_1001ABC98 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1001ABC98)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("APKActivityProgress");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_1000E86BC();
LABEL_8:
    free(v2);
  }
  qword_1001ABC90 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_10009B138(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateScores");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "logAppResumePredictions:durationCheck:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), 1);
}

id sub_10009B16C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateScores");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "logAppResumePredictions:durationCheck:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), 0);
}

void sub_10009B69C(uint64_t a1)
{
  id v1;
  _DASSwapModelApplicationUsage *v2;
  _DASSwapModelApplicationKills *v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v7[2];

  v1 = objc_alloc((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = objc_opt_new(_DASSwapModelApplicationUsage);
  v7[0] = v2;
  v3 = objc_opt_new(_DASSwapModelApplicationKills);
  v7[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v7, 2));
  v5 = objc_msgSend(v1, "initWithAlgorithms:", v4);
  v6 = (void *)qword_1001ABCA0;
  qword_1001ABCA0 = (uint64_t)v5;

}

id sub_10009BA80(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "eventBody"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resultIdentifier"));
  v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v5;
}

void sub_10009BAD8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  if (objc_msgSend(v3, "state") == (id)1)
  {
    v4 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1000E8754(v4, v3);
  }

}

void sub_10009BB30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unsigned int v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  NSObject *v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v5 = v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, "type");
    if (v6 == 2)
    {
      v7 = objc_msgSend(objc_alloc((Class)_DASActivityResult), "initWithIdentifier:count:", *(_QWORD *)(a1 + 48), objc_msgSend(v5, "resultCount"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cumulativeResultConsumption"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "activityIdentifier"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v7, v11);

      goto LABEL_8;
    }
    if (v6 == 1)
    {
      v7 = objc_msgSend(objc_alloc((Class)_DASActivityResult), "initWithIdentifier:count:", *(_QWORD *)(a1 + 48), objc_msgSend(v5, "resultCount"));
      objc_msgSend(*(id *)(a1 + 40), "setCumulativelyProducedResult:", v7);
LABEL_8:

      goto LABEL_11;
    }
    v12 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1000E8858(v5, v12);
  }
  else
  {
    v8 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1000E87EC((uint64_t)v3, v8, v9);
  }
LABEL_11:

}

id sub_10009BF1C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "addObject:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_10009C08C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10009C09C(uint64_t a1)
{

}

void sub_10009C0A4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const __CFString *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD v19[3];

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    v2 = *(_QWORD *)(a1 + 32);
    v19[0] = *(_QWORD *)(v2 + 8);
    v18[0] = CFSTR("resultIdentifier");
    v18[1] = CFSTR("registeredProducerIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 40), "description"));
    v19[1] = v3;
    v18[2] = CFSTR("attemptedProducerIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "description"));
    v19[2] = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v18, 3));
    v6 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASResultDependencyGroupErrorDomain"), 5, v5));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "producedResultIdentifiers"));
    v10 = objc_msgSend(v9, "containsObject:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));

    if ((v10 & 1) != 0)
    {
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 40), *(id *)(a1 + 40));
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v16 = CFSTR("resultIdentifier");
      v17 = v11;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));
      v13 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASResultDependencyGroupErrorDomain"), 2, v12));
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v15 = *(void **)(v14 + 40);
      *(_QWORD *)(v14 + 40) = v13;

    }
  }
}

id sub_10009C308(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "removeObject:", *(_QWORD *)(a1 + 40));
}

void sub_10009C478(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[2];
  _QWORD v12[2];

  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "isEqual:", *(_QWORD *)(a1 + 40)) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    v11[0] = CFSTR("registerdProducerIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "description"));
    v5 = v4;
    if (!v4)
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v11[1] = CFSTR("attemptedProducerIdentifier");
    v12[0] = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "description"));
    v12[1] = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 2));
    v8 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASResultDependencyGroupErrorDomain"), 6, v7));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

    if (!v4)
  }
}

void sub_10009C800(uint64_t a1)
{
  void *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[5];
  _QWORD v22[5];
  _QWORD v23[2];
  _QWORD v24[2];

  if ((objc_msgSend(*(id *)(a1 + 32), "queue_isConsumerActivity:", *(_QWORD *)(a1 + 40)) & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue_aggregateResultConsumptionForActivity:", *(_QWORD *)(a1 + 40)));
    v3 = (char *)objc_msgSend(v2, "count");
    v4 = &v3[(_QWORD)objc_msgSend(*(id *)(a1 + 48), "count")];
    if ((uint64_t)v4 <= (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "count"))
    {
      objc_msgSend(v2, "setCount:", (char *)objc_msgSend(*(id *)(a1 + 48), "count") + (_QWORD)objc_msgSend(v2, "count"));
      objc_msgSend(*(id *)(a1 + 32), "persistUpdatedResultConsumptionBy:result:", *(_QWORD *)(a1 + 40), v2);
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(void **)(v5 + 16);
      v22[0] = *(_QWORD *)(v5 + 8);
      v21[0] = CFSTR("dependencyIdentifier");
      v21[1] = CFSTR("cumulativelyProducedResults");
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v6, "count")));
      v22[1] = v7;
      v21[2] = CFSTR("previouslyConsumedResultCount");
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v2, "count")));
      v22[2] = v8;
      v21[3] = CFSTR("newlyConsumedResultCount");
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 48), "count")));
      v22[3] = v9;
      v21[4] = CFSTR("attemptedTotalConsumptionCount");
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v4));
      v22[4] = v10;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 5));
      v12 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASResultDependencyGroupErrorDomain"), 4, v11));
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v14 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v12;

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
    }

  }
  else
  {
    v15 = *(void **)(a1 + 40);
    v24[0] = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v23[0] = CFSTR("dependencyIdentifier");
    v23[1] = CFSTR("activityIdentifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "description"));
    v24[1] = v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 2));
    v18 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASResultDependencyGroupErrorDomain"), 1, v17));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v20 = *(void **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
  }
}

void sub_10009CC50(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];

  if ((objc_msgSend(*(id *)(a1 + 32), "queue_isProducerActivity:", *(_QWORD *)(a1 + 40)) & 1) != 0)
  {
    v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
    LOBYTE(v2) = objc_msgSend(v2, "isEqualToString:", v3);

    if ((v2 & 1) != 0)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setCount:", objc_msgSend(*(id *)(a1 + 48), "count"));
      objc_msgSend(*(id *)(a1 + 32), "persistUpdatedResultProductionBy:", *(_QWORD *)(a1 + 40));
      return;
    }
    v13[0] = CFSTR("reportedProducedResultIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
    v13[1] = CFSTR("dependencyGroupIdentifier");
    v14[0] = v4;
    v14[1] = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 2));
    v10 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASResultDependencyGroupErrorDomain"), 3, v5));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

  }
  else
  {
    v15[0] = CFSTR("resultIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
    v15[1] = CFSTR("activityName");
    v16[0] = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "description"));
    v16[1] = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 2));
    v7 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("_DASResultDependencyGroupErrorDomain"), 2, v6));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
}

uint64_t sub_10009CF4C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "resultIdentifier"));
  if ((objc_msgSend(v5, "containsString:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "activityIdentifier"));
    v6 = (uint64_t)objc_msgSend(v8, "containsString:", *(_QWORD *)(a1 + 32));

  }
  return v6;
}

BOOL sub_10009D108(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _BOOL8 v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "resultIdentifier"));
  if (objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v7 = objc_msgSend(v6, "type") == 1;

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

BOOL sub_10009D338(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL8 v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "activityIdentifier"));
  if (objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "resultIdentifier"));
    if (objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
      v9 = objc_msgSend(v8, "type") == 2;

    }
    else
    {
      v9 = 0;
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_10009D5D0(uint64_t a1)
{
  _BYTE *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue_aggregateResultConsumptionForActivity:", *(_QWORD *)(a1 + 40)));
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "count");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v2 - (_BYTE *)objc_msgSend(v3, "count");

}

void sub_10009D798(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _QWORD v11[5];

  v2 = objc_alloc((Class)_DASActivityResult);
  v4 = *(_QWORD *)(a1 + 32);
  v3 = a1 + 32;
  v5 = objc_msgSend(v2, "initWithIdentifier:", *(_QWORD *)(v4 + 8));
  v6 = *(void **)(*(_QWORD *)v3 + 16);
  *(_QWORD *)(*(_QWORD *)v3 + 16) = v5;

  v7 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v8 = *(void **)(*(_QWORD *)v3 + 24);
  *(_QWORD *)(*(_QWORD *)v3 + 24) = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)v3 + 48), "pruner"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10009D880;
  v11[3] = &unk_10015F858;
  v11[4] = *(_QWORD *)v3;
  objc_msgSend(v9, "deleteEventsPassingTest:", v11);

  v10 = *(NSObject **)(*(_QWORD *)v3 + 64);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    sub_1000E8AB8(v3, v10);
}

id sub_10009D880(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "eventBody"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resultIdentifier"));
  v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));

  return v5;
}

void sub_10009DA9C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *j;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "allKeys"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v7));
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v8, "count")));
        objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v9, v7);

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v4);
  }

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v10 = *(id *)(*(_QWORD *)(a1 + 32) + 32);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v18;
    do
    {
      for (j = 0; j != v12; j = (char *)j + 1)
      {
        if (*(_QWORD *)v18 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(a1 + 48);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)j), "name", (_QWORD)v17));
        objc_msgSend(v15, "addObject:", v16);

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
    }
    while (v12);
  }

}

id sub_10009DE18(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("\nCumulative Result Produced: %@, "), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  return objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("\nCumulative Result Consumption: %@ "), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
}

id sub_10009DF2C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("\nCumulative Result Produced: %@, "), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("\nCumulative Result Consumption: %@, "), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("\nConsumers: %@, "), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));
  return objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("\nProducer: %@"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40));
}

void sub_10009E2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10009E2B8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "eventBody"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resultIdentifier"));
  v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v5;
}

void sub_10009E310(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  if (objc_msgSend(v3, "state") == (id)1)
  {
    v4 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1000E8754(v4, v3);
  }

}

uint64_t sub_10009E368(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return 0;
}

void sub_10009E39C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_10009E424(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001ABCB8;
  qword_1001ABCB8 = (uint64_t)v1;

}

void sub_10009ECEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10009EE54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10009F118(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10009F5B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10009F900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10009FB30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10009FC40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10009FE28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A0030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0074(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000A0084(uint64_t a1)
{

}

void sub_1000A008C(_QWORD *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24));
  v4 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v3));
  objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "setObject:forKey:", v5, v4);

  ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
}

void sub_1000A0598(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000A05BC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleDeathForProcess:withDockAssertion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1000A071C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A0880(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A0A38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A0B7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A0C9C(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[5];
  uint64_t v6;

  v6 = a1[4];
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
  objc_msgSend(v3, "setPredicates:", v4);

  objc_msgSend(v3, "setStateDescriptor:", a1[5]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100017540;
  v5[3] = &unk_10015E7C8;
  v5[4] = a1[6];
  objc_msgSend(v3, "setUpdateHandler:", v5);

}

void sub_1000A1290(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A1334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_1000A1348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v4;

  v4 = *(id **)(a1 + 32);
  if (a3)
    return objc_msgSend(v4, "refreshLedgerInformationForProcess:");
  objc_msgSend(v4[5], "removeObjectForKey:", a2);
  return objc_msgSend(*(id *)(a1 + 32), "persistApplicationProcessHandles");
}

void sub_1000A16CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A16E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  id v11;
  id v12;

  v12 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getProcessHandleFromRunningBoardForPid:", objc_msgSend(v5, "intValue")));
  v7 = v6;
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundle"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v10 = objc_msgSend(v9, "isEqualToString:", v12);

    if (v10)
    {
      v11 = *(id *)(*(_QWORD *)(a1 + 32) + 40);
      objc_sync_enter(v11);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setObject:forKey:", v7, v12);
      objc_sync_exit(v11);

    }
  }

}

void sub_1000A17BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A186C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000A1888(uint64_t a1, void *a2, int a3)
{
  id v4;
  id v5;
  id WeakRetained;
  NSObject *v7;
  void *v8;
  uint8_t v9[16];

  if (a3)
  {
    v4 = a2;
    v5 = (id)objc_claimAutoreleasedReturnValue(+[_DASDataProtectionStateMonitor dataProtectionClassC](_DASDataProtectionStateMonitor, "dataProtectionClassC"));

    if (v5 == v4)
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "logger"));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Class C protected data now available, refreshing state and performing initial policy update.", v9, 2u);
      }

      objc_msgSend(WeakRetained, "refreshLedgerInformationForApplicationProcesses");
      objc_msgSend(WeakRetained, "updatePolicy");
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lockStateMonitor"));
      objc_msgSend(v8, "setChangeHandler:", 0);

    }
  }
}

uint64_t sub_1000A1C20()
{
  uint64_t v0;

  return v0;
}

void sub_1000A25A4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[_APRSMetricRecorder sharedInstance](_APRSMetricRecorder, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "identifier"));
  objc_msgSend(v4, "endEventForApp:pid:forEvent:", v3, objc_msgSend(*(id *)(a1 + 32), "pid"), 0);

}

id sub_1000A2E1C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "eventBody"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v5;
}

void sub_1000A2E74(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  if (objc_msgSend(v3, "state") == (id)1)
  {
    v4 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1000E96D8(v4, v3);
  }

}

void sub_1000A2ECC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unsigned int v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v5 = v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, "type");
    if (v6 == 2)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "haveRunActivities"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "consumerIdentifier"));
      objc_msgSend(v9, "addObject:", v10);

    }
    else if (v6 == 1)
    {
      objc_msgSend(*(id *)(a1 + 40), "setHasDependencyRun:", 1);
    }
    else
    {
      v11 = *(NSObject **)(a1 + 32);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1000E976C(v5, v11);
    }
  }
  else
  {
    v7 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1000E87EC((uint64_t)v3, v7, v8);
  }

}

id sub_1000A32B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "addObject:", *(_QWORD *)(a1 + 40));
}

id sub_1000A33E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeObject:", *(_QWORD *)(a1 + 40));
}

id sub_1000A3468(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 1;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "removeAllObjects");
  return objc_msgSend(*(id *)(a1 + 32), "updateStreamForTrackedActivityDidRun:", *(_QWORD *)(a1 + 40));
}

id sub_1000A351C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
  objc_msgSend(v2, "addObject:", v3);

  return objc_msgSend(*(id *)(a1 + 32), "persistActivityDidConsume:", *(_QWORD *)(a1 + 40));
}

void sub_1000A3638(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "containsObject:", v3);

}

id sub_1000A36E4(uint64_t a1)
{
  id *v1;
  NSObject *v2;

  v1 = (id *)(a1 + 32);
  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 56);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1000E9808((uint64_t)v1, v2);
  objc_msgSend(*((id *)*v1 + 4), "removeAllObjects");
  *((_BYTE *)*v1 + 8) = 0;
  return objc_msgSend(*v1, "pruneStreamOfGroup");
}

void sub_1000A38A0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  _BYTE v23[128];

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v19;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v19 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(a1 + 40);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v6), "name"));
        objc_msgSend(v7, "addObject:", v8);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    }
    while (v4);
  }

  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v9 = *(id *)(*(_QWORD *)(a1 + 32) + 32);
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v15;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v15 != v12)
          objc_enumerationMutation(v9);
        objc_msgSend(*(id *)(a1 + 48), "addObject:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v13), (_QWORD)v14);
        v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
    }
    while (v11);
  }

}

uint64_t sub_1000A3B1C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  if ((objc_msgSend(v5, "containsString:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "consumerIdentifier"));
    v6 = (uint64_t)objc_msgSend(v8, "containsString:", *(_QWORD *)(a1 + 32));

  }
  return v6;
}

id sub_1000A3C70(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "eventBody"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));

  return v5;
}

id sub_1000A3F20(uint64_t a1)
{
  const __CFString *v2;

  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("\nDependents: %@"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
  if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 8))
    v2 = CFSTR("YES");
  else
    v2 = CFSTR("NO");
  return objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("\nHas the dependency run: %@"), v2);
}

id sub_1000A404C(uint64_t a1)
{
  const __CFString *v2;

  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("\nDependents: %@"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("\nDependents that have run: %@"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));
  if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 8))
    v2 = CFSTR("YES");
  else
    v2 = CFSTR("NO");
  return objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("\nHas the dependency run: %@"), v2);
}

void sub_1000A4390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000A43A8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "eventBody"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v5;
}

void sub_1000A4400(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  if (objc_msgSend(v3, "state") == (id)1)
  {
    v4 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1000E96D8(v4, v3);
  }

}

uint64_t sub_1000A4458(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return 0;
}

id sub_1000A45C8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_loadHistograms");
}

void sub_1000A4AE4(uint64_t a1, void *a2, void *a3)
{
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  id v11;

  v11 = a2;
  objc_msgSend(a3, "doubleValue");
  v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectForKeyedSubscript:", v11));
  objc_msgSend(v7, "doubleValue");
  v9 = v8 * 0.5 + v6 * 0.5;

  if (v9 <= 0.1)
  {
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", &off_10016ED50, v11);
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v9));
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v10, v11);

  }
}

void sub_1000A4BAC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v7));

  if (!v6)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v7);

}

void sub_1000A4C20(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));

  if (!v3)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &off_10016ED50, v4);

}

id sub_1000A4CD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  objc_msgSend(*(id *)(a1 + 32), "_queue_loadHistograms");
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_computeScores"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v2;

  v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
    v8 = 138412290;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated Kill Histogram: %@", (uint8_t *)&v8, 0xCu);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeAllObjects");
  return objc_msgSend(*(id *)(a1 + 32), "_queue_updateHistograms");
}

void sub_1000A4F70(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "updateModel");
  objc_msgSend(v3, "setTaskCompleted");

}

void sub_1000A5020(id a1)
{
  mach_timebase_info((mach_timebase_info_t)&dword_1001ABCC0);
}

id sub_1000A547C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void sub_1000A5650(uint64_t a1)
{
  int v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  double v12;
  _UNKNOWN **v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  double v30;
  void *v31;
  NSObject *v32;
  NSObject *v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  char v37;
  char v38;
  void *v39;
  int v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  _QWORD __dst[35];

  v2 = memorystatus_control(3, 0, 128, 0, 0);
  if (v2 <= 0)
  {
    v32 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      sub_1000E9898(v32);
  }
  else
  {
    v3 = v2;
    v4 = (char *)malloc_type_malloc(v2, 0x595F79B4uLL);
    if ((int)memorystatus_control(3, 0, 128, v4, v3) <= 0)
    {
      v33 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        sub_1000E9918(v33);
    }
    else
    {
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v6 = *((_QWORD *)v4 + 24);
      if (v6)
      {
        v7 = 0;
        v8 = 0;
        v9 = 0;
        v38 = 0;
        v10 = 0;
        v40 = 0;
        v11 = v4 + 200;
        v12 = 0.0;
        v13 = &AnalyticsSendEvent_ptr;
        *(_QWORD *)&v5 = 138412290;
        v34 = v5;
        v36 = a1;
        do
        {
          memcpy(__dst, v11, sizeof(__dst));
          if (__dst[10] && (__dst[5] & 0x1800000000) == 0)
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13[141], "stringWithUTF8String:", (char *)__dst + 4));
            if (v14)
            {
              if (!v9)
              {
                v9 = mach_absolute_time();
                v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));

                objc_msgSend(v15, "timeIntervalSinceDate:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
                v12 = v16;
                v10 = v15;
                v13 = &AnalyticsSendEvent_ptr;
              }
              objc_msgSend(*(id *)(a1 + 32), "secondsFrom:until:", v9, __dst[25], v34);
              if (v17 <= v12)
              {
                v18 = v17;
                if ((__dst[5] & 0x200000000) != 0)
                {
                  if ((__dst[5] & 0x400000000) != 0)
                  {
                    v37 = 0;
                    v7 += __dst[30];
                  }
                  else
                  {
                    ++v40;
                    v37 = 1;
                  }
                }
                else
                {
                  v37 = 0;
                }
                v19 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
                if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                {
                  v20 = v19;
                  v21 = v10;
                  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dateByAddingTimeInterval:", -v18));
                  *(_DWORD *)buf = 138412546;
                  v42 = v14;
                  v43 = 2112;
                  v44 = v22;
                  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%@ killed at %@", buf, 0x16u);

                  v10 = v21;
                  v13 = &AnalyticsSendEvent_ptr;
                  a1 = v36;

                }
                if (objc_msgSend(*(id *)(a1 + 32), "process:inSet:", v14, *(_QWORD *)(a1 + 40)))
                {
                  if (HIDWORD(__dst[6]))
                  {
                    v35 = v10;
                    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
                    objc_msgSend(v23, "setObject:forKeyedSubscript:", v14, CFSTR("BundleID"));
                    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", LODWORD(__dst[0])));
                    objc_msgSend(v23, "setObject:forKeyedSubscript:", v24, CFSTR("PID"));

                    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(__dst[6])));
                    objc_msgSend(v23, "setObject:forKeyedSubscript:", v25, CFSTR("Reason"));

                    v26 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 138412546;
                      v42 = v14;
                      v43 = 1024;
                      LODWORD(v44) = HIDWORD(__dst[6]);
                      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Skipped %@ (%d)", buf, 0x12u);
                    }
                    objc_msgSend(v39, "addObject:", v23);

                    v10 = v35;
                  }
                  if ((v37 & 1) == 0)
                  {
                    v27 = v10;
                    v28 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
                    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = v34;
                      v42 = v14;
                      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Adding %@ to today's kill dictionary", buf, 0xCu);
                    }
                    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectForKeyedSubscript:", v14));
                    objc_msgSend(v29, "doubleValue");
                    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v30 + 1.0));
                    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setObject:forKeyedSubscript:", v31, v14);

                    v38 = 1;
                    v10 = v27;
                    v13 = &AnalyticsSendEvent_ptr;
                  }
                }
                else
                {
                  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "addObject:", v14);
                }
              }
            }

            v6 = *((_QWORD *)v4 + 24);
          }
          ++v8;
          v11 += 280;
        }
        while (v8 < v6);
      }
      else
      {
        v10 = 0;
        v38 = 0;
        v40 = 0;
        v7 = 0;
      }
      free(v4);
      +[_DASMetricRecorder setValue:forKey:](_DASMetricRecorder, "setValue:forKey:", v7, CFSTR("com.apple.dasd.swap.goodfreezecount"));
      +[_DASMetricRecorder incrementOccurrencesForKey:byCount:](_DASMetricRecorder, "incrementOccurrencesForKey:byCount:", CFSTR("com.apple.dasd.swap.badfreezecount"), v40);
      if ((v38 & 1) != 0)
      {
        objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 56), v10);
        objc_msgSend(*(id *)(a1 + 32), "_queue_updateHistograms");
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "logFreezerSkipReasons:", v39);
      }

    }
  }
}

void sub_1000A5D44(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  _QWORD *v5;
  _QWORD v6[5];
  _QWORD v7[4];

  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2020000000;
  v7[3] = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_computeScores"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A5E40;
  v6[3] = &unk_10015EB40;
  v6[4] = v7;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v6);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000A5E78;
  v3[3] = &unk_10015EB68;
  v4 = *(id *)(a1 + 40);
  v5 = v7;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v3);

  _Block_object_dispose(v7, 8);
}

void sub_1000A5E28(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

double sub_1000A5E40(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  double v5;
  double result;

  objc_msgSend(a3, "doubleValue");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = v5 + *(double *)(v4 + 24);
  *(double *)(v4 + 24) = result;
  return result;
}

void sub_1000A5E78(uint64_t a1, void *a2, void *a3)
{
  id v5;
  double v6;
  id v7;

  v5 = a2;
  objc_msgSend(a3, "doubleValue");
  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v6 / *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, v5);

}

id sub_1000A6138(uint64_t a1)
{
  id result;

  result = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "computeHasDeviceRecentlyUpdated");
  byte_1001ABCE0 = (char)result;
  return result;
}

void sub_1000A6354(id a1)
{
  id v1;

  v1 = (id)MGGetStringAnswer(CFSTR("DeviceClass"));
  byte_1001ABCE1 = objc_msgSend(v1, "isEqualToString:", CFSTR("iPad"));

}

void sub_1000A6394(id a1)
{
  id v1;

  v1 = (id)MGGetStringAnswer(CFSTR("DeviceClass"));
  byte_1001ABCF0 = objc_msgSend(v1, "isEqualToString:", CFSTR("iPhone"));

}

void sub_1000A6414(id a1)
{
  byte_1001ABD00 = MGGetBoolAnswer(CFSTR("j8/Omm6s1lsmTDFsXjsBfA"));
}

void sub_1000A6748(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A67E0(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)objc_opt_class(*(_QWORD *)(a1 + 32))), "initAsAnonymous:withContext:", 0, 0);
  v2 = (void *)qword_1001ABD18;
  qword_1001ABD18 = (uint64_t)v1;

}

void sub_1000A7304(uint64_t a1)
{
  id obj;

  obj = *(id *)(*(_QWORD *)(a1 + 32) + 416);
  objc_sync_enter(obj);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 416), "removeAllObjects");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 424), "removeAllObjects");
  objc_sync_exit(obj);

}

void sub_1000A7360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_1000A7374(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleTriggers:", a2);
}

void sub_1000A7380(id a1, NSArray *a2)
{
  NSArray *v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[_DASSystemConditionsRecorder sharedInstance](_DASSystemConditionsRecorder, "sharedInstance"));
  objc_msgSend(v3, "recordForKeyPaths:", v2);

}

id sub_1000A73D0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleCompletedActivities:", a2);
}

void sub_1000A73DC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "NW Evaluation: %@", (uint8_t *)&v7, 0xCu);
  }

  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v3));
  objc_msgSend(v5, "unprotectedEvaluateScoreAndRunActivities:", v6);

}

id sub_1000A74C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "schedulingTimerFired");
}

void sub_1000A7C5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A7EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000A8194(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000A8360(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "periodicCalculationForOptimal");
}

void sub_1000A8368(uint64_t a1)
{
  void *v2;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  __int128 v34;
  id obj;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t buf[4];
  uint64_t v53;
  __int16 v54;
  id v55;
  __int16 v56;
  void *v57;
  _BYTE v58[128];
  _BYTE v59[128];

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "allKeys"));
  v43 = a1;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  obj = v2;
  v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v59, 16);
  if (v37)
  {
    v36 = *(_QWORD *)v49;
    *(_QWORD *)&v4 = 138412802;
    v34 = v4;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v49 != v36)
          objc_enumerationMutation(obj);
        v6 = *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * v5);
        os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(v43 + 32) + 12));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v43 + 32) + 120), "objectForKeyedSubscript:", v6));
        v8 = objc_msgSend(v7, "copy");
        v9 = v8;
        if (v8)
          v10 = v8;
        else
          v10 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
        v11 = v10;

        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v43 + 32) + 112), "objectForKeyedSubscript:", v6));
        v13 = objc_msgSend(v12, "copy");
        v14 = v13;
        v42 = v5;
        if (v13)
          v15 = v13;
        else
          v15 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
        v16 = v15;

        v41 = v11;
        v39 = v6;
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "setByAddingObjectsFromSet:", v11));
        v38 = objc_msgSend(*(id *)(v43 + 32), "currentLoadFromActivities:inGroupWithName:");
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(v43 + 32) + 12));
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        v47 = 0u;
        v18 = v16;
        v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v44, v58, 16);
        if (v19)
        {
          v20 = v19;
          v21 = *(_QWORD *)v45;
          do
          {
            for (i = 0; i != v20; i = (char *)i + 1)
            {
              if (*(_QWORD *)v45 != v21)
                objc_enumerationMutation(v18);
              v23 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
              v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "startDate", v34));
              if (v24)
              {
                v25 = (void *)v24;
                v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "startDate"));
                objc_msgSend(v3, "timeIntervalSinceDate:", v26);
                v28 = v27;

                if (v28 > 60.0)
                {
                  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "name"));
                  objc_msgSend(v17, "addObject:", v29);

                  v30 = *(void **)(v43 + 32);
                  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "startDate"));
                  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
                  LODWORD(v30) = objc_msgSend(v30, "shouldSuspendLongRunningActivity:withStartDate:whileBlockingOtherTasks:atDate:", v23, v31, 0, v32);

                  if ((_DWORD)v30)
                  {
                    objc_msgSend(*(id *)(v43 + 32), "updateSuspendRequestDate:forActivity:withReason:", v3, v23, CFSTR("Limitations"));
                    objc_msgSend(*(id *)(v43 + 32), "suspendActivity:", v23);
                  }
                }
              }
            }
            v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v44, v58, 16);
          }
          while (v20);
        }

        if (objc_msgSend(v17, "count"))
        {
          v33 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("lifecycle(activityGroup)")));
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v34;
            v53 = v39;
            v54 = 2048;
            v55 = v38;
            v56 = 2112;
            v57 = v17;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Current load for group %@ is %lld. Long running activities are %@", buf, 0x20u);
          }

        }
        v5 = v42 + 1;
      }
      while ((id)(v42 + 1) != v37);
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v59, 16);
    }
    while (v37);
  }

}

id sub_1000A89B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "deleteOldActivities");
}

void sub_1000A8ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1000A8EFC(uint64_t a1, void *a2, int a3)
{
  id v4;
  void *v5;
  unsigned int v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint8_t v10[16];

  if (a3)
  {
    v4 = a2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDataProtectionStateMonitor dataProtectionClassC](_DASDataProtectionStateMonitor, "dataProtectionClassC"));
    v6 = objc_msgSend(v4, "isEqualToString:", v5);

    if (v6)
    {
      v7 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Class C now available. Loading activities.", v10, 2u);
      }

      os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32));
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
      {
        objc_msgSend(*(id *)(a1 + 32), "loadStateWhenAvailable");
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32));
      v8 = *(void **)(*(_QWORD *)(a1 + 32) + 504);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[_DASFileProtection completeUntilFirstUserAuthentication](_DASFileProtection, "completeUntilFirstUserAuthentication"));
      objc_msgSend(v8, "refreshGroupsWithFileProtection:", v9);

    }
  }
}

void sub_1000A9CD8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v4 = a3;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v9, "isBackgroundTaskActivity")
          && (objc_msgSend(v9, "isContactTracingBackgroundActivity") & 1) == 0)
        {
          objc_msgSend(*(id *)(a1 + 32), "addObject:", v9);
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

id sub_1000AA528(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleSysdiagnoseStartEvent");
}

void sub_1000AA850(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000AA910(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v14;
    v8 = _DASLaunchReasonBackgroundRemoteNotification;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "launchReason"));
        v12 = objc_msgSend(v11, "isEqualToString:", v8);

        if (v12)
          objc_msgSend(*(id *)(a1 + 32), "addObject:", v10);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }

}

void sub_1000AAAEC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v4 = a3;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v9, "isBackgroundTaskActivity"))
          objc_msgSend(*(id *)(a1 + 32), "addObject:", v9);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

void sub_1000AAEC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000AB388(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000AB520(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000AB620(uint64_t a1)
{
  NSObject *v2;
  void (**v3)(_QWORD, _QWORD);

  v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("lifecycle")));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1000E99F8();

  v3 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startHandler"));
  v3[2](v3, *(_QWORD *)(a1 + 32));

}

id sub_1000ABE04(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "runActivities:", *(_QWORD *)(a1 + 32));
}

id sub_1000ABE10(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "runActivitiesWithDelayedStart:", *(_QWORD *)(a1 + 32));
}

void sub_1000AC5AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ACF30(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  NSObject *v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;

  v3 = a2;
  v4 = objc_opt_class(UISFetchContentInBackgroundActionResponse);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    v5 = v3;
  else
    v5 = 0;
  v6 = objc_msgSend(v5, "result");
  v7 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v9 = *(void **)(a1 + 40);
    v8 = *(void **)(a1 + 48);
    v10 = v7;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "launchReason"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v6));
    *(_DWORD *)buf = 138412802;
    v24 = v9;
    v25 = 2112;
    v26 = v11;
    v27 = 2112;
    v28 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Launch for %@ with reason %@ result: %@", buf, 0x20u);

  }
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL);
  os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 64) + 40, 0);
  v13 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    v14 = *(void **)(a1 + 48);
    v15 = v13;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "assertion"));
    v17 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v24 = v16;
    v25 = 2112;
    v26 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Invalidating assertion %@ for %@", buf, 0x16u);

  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "assertion"));
  v22 = 0;
  v19 = objc_msgSend(v18, "invalidateWithError:", &v22);
  v20 = v22;

  if ((v19 & 1) == 0 && v20)
  {
    v21 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      sub_1000E9A5C((id *)(a1 + 48), (uint64_t)v20, v21);

  }
  os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 64) + 40);

}

void sub_1000AD1A0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;

  dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
  v2 = *(void **)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000AD2E0;
  v8[3] = &unk_10015FBB8;
  v9 = *(id *)(a1 + 32);
  v10 = *(id *)(a1 + 80);
  v11 = *(id *)(a1 + 56);
  v12 = *(id *)(a1 + 40);
  v16 = *(id *)(a1 + 104);
  v17 = *(id *)(a1 + 112);
  v6 = *(id *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 48);
  v13 = v6;
  v14 = v7;
  v15 = *(id *)(a1 + 96);
  v18 = *(id *)(a1 + 120);
  objc_msgSend(v2, "launchApplication:applicationURL:additionalOptions:completion:", v3, v5, v4, v8);

}

void sub_1000AD2E0(uint64_t a1, unsigned int a2, void *a3)
{
  NSObject *v5;
  void *v6;
  void *i;
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  dispatch_time_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  id v21;
  void *v22;
  unsigned int v23;
  NSObject *v24;
  unsigned int v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  NSObject *v45;
  id v46;
  void *v47;
  id obj;
  uint64_t v49;
  unsigned int v50;
  void *v51;
  id v52;
  id v53;
  _QWORD v54[4];
  id v55;
  id v56;
  NSObject *v57;
  uint64_t v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  _QWORD handler[4];
  id v64;
  _QWORD v65[4];
  id v66;
  uint64_t v67;
  void *v68;
  id v69;
  id location;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint8_t v75[128];
  uint8_t buf[4];
  void *v77;
  __int16 v78;
  id v79;

  v46 = a3;
  v50 = a2;
  if (a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();
    v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v77 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Successful launch for %@", buf, 0xCu);
    }
    if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_DEBUG))
      sub_1000E9AF8();
    v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    obj = *(id *)(a1 + 64);
    v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v75, 16);
    if (v52)
    {
      v49 = *(_QWORD *)v72;
      do
      {
        for (i = 0; i != v52; i = (char *)i + 1)
        {
          if (*(_QWORD *)v72 != v49)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * (_QWORD)i);
          v9 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412290;
            v77 = v8;
            _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Current activity %@", buf, 0xCu);
          }
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "assertionForActivity:pid:", v8, v50));
          objc_initWeak(&location, v10);
          v65[0] = _NSConcreteStackBlock;
          v65[1] = 3221225472;
          v65[2] = sub_1000ADCE0;
          v65[3] = &unk_10015FB40;
          objc_copyWeak(&v69, &location);
          v11 = *(id *)(a1 + 48);
          v12 = *(_QWORD *)(a1 + 72);
          v66 = v11;
          v67 = v12;
          v68 = v8;
          objc_msgSend(v10, "setWarningHandler:", v65);
          if ((objc_msgSend(v8, "isBackgroundTaskActivity") & 1) != 0)
          {
            v13 = 0;
          }
          else
          {
            v13 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 1uLL, *(dispatch_queue_t *)(*(_QWORD *)(a1 + 72) + 328));
            v14 = dispatch_time(0, 29000000000);
            dispatch_source_set_timer(v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
            v15 = *(void **)(a1 + 80);
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "uuid"));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v16));

            handler[0] = _NSConcreteStackBlock;
            handler[1] = 3221225472;
            handler[2] = sub_1000ADDE0;
            handler[3] = &unk_10015D4E0;
            v64 = v17;
            v18 = v17;
            dispatch_source_set_event_handler(v13, handler);
            dispatch_activate(v13);

          }
          v54[0] = _NSConcreteStackBlock;
          v54[1] = 3221225472;
          v54[2] = sub_1000ADDE8;
          v54[3] = &unk_10015FB90;
          v55 = *(id *)(a1 + 32);
          objc_copyWeak(&v62, &location);
          v56 = *(id *)(a1 + 48);
          v19 = v13;
          v20 = *(_QWORD *)(a1 + 72);
          v57 = v19;
          v58 = v20;
          v59 = v8;
          v21 = v51;
          v60 = v21;
          v61 = *(id *)(a1 + 104);
          objc_msgSend(v10, "setInvalidationHandler:", v54);
          os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 72) + 40, 0);
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assertion"));
          v23 = objc_msgSend(v22, "isValid");

          if (v23)
          {
            v24 = *(id *)(a1 + 40);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assertion"));
              *(_DWORD *)buf = 138412546;
              v77 = v8;
              v78 = 2112;
              v79 = v31;
              _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Activity %@ was launched while it has an existing valid assertion: %@. Skipping this activity", buf, 0x16u);

            }
            os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 72) + 40);
LABEL_28:
            if (v19)
            {
              v28 = *(void **)(a1 + 80);
              v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "uuid"));
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", v29));
              objc_msgSend(v30, "invalidate");

              dispatch_source_cancel(v19);
            }
            goto LABEL_30;
          }
          v53 = 0;
          v25 = objc_msgSend(v10, "acquireWithError:", &v53);
          v26 = v53;
          if (v25)
          {
            objc_msgSend(v8, "setAssertion:", v10);
            objc_msgSend(v21, "addObject:", v10);
            v27 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              v77 = v10;
              v78 = 2112;
              v79 = v8;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Assertion %@ acquired for task %@", buf, 0x16u);
            }
          }
          else
          {
            v27 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              v32 = *(void **)(a1 + 48);
              *(_DWORD *)buf = 138412546;
              v77 = v32;
              v78 = 2112;
              v79 = v26;
              _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Failed to acquire assertion for %@, error: %@", buf, 0x16u);
            }
          }

          os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 72) + 40);
          if (!v25)
            goto LABEL_28;
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 72) + 496), "reportActivityRunning:", v8);
          if (objc_msgSend(v8, "isBackgroundTaskActivity"))
            objc_msgSend(v47, "addObject:", v8);
LABEL_30:

          objc_destroyWeak(&v62);
          objc_destroyWeak(&v69);
          objc_destroyWeak(&location);

        }
        v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v75, 16);
      }
      while (v52);
    }

    if (objc_msgSend(v51, "count"))
    {
      if (objc_msgSend(v47, "count"))
      {
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "connectedBGTaskClients"));
        objc_sync_enter(v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "connectedBGTaskClients"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v50));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", v35));

        if (v36)
        {
          objc_msgSend(v36, "handleLaunchFromDaemonForActivities:", v47);
        }
        else
        {
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "activitiesWaitingForBGTaskClients"));
          v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v50));
          v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "objectForKeyedSubscript:", v41));

          if (!v42)
          {
            v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "activitiesWaitingForBGTaskClients"));
            v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v50));
            objc_msgSend(v43, "setObject:forKeyedSubscript:", v42, v44);

          }
          v45 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            v77 = v47;
            v78 = 1024;
            LODWORD(v79) = v50;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Queueing activities %@ until app with pid %d launches", buf, 0x12u);
          }

          objc_msgSend(v42, "unionSet:", v47);
          objc_msgSend(*(id *)(a1 + 72), "scheduleConnectionTimeoutForPid:", v50);

        }
        objc_sync_exit(v33);

      }
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
    }
    else
    {
      v39 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "No assertions acquired, calling completion immediately", buf, 2u);
      }

      dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
      (*(void (**)(void))(*(_QWORD *)(a1 + 104) + 16))();
    }

  }
  else
  {
    v37 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      v38 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      v77 = v38;
      v78 = 2112;
      v79 = v46;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Error launching %@: %@", buf, 0x16u);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
    (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();
  }

}

void sub_1000ADC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id location)
{
  void *v48;

  objc_sync_exit(v48);
  _Unwind_Resume(a1);
}

void sub_1000ADCE0(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  id v8;
  __int16 v9;
  uint64_t v10;

  v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    v4 = *(_QWORD *)(a1 + 32);
    v7 = 138412546;
    v8 = WeakRetained;
    v9 = 2112;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Assertion %@ for app %@ about to expire, warning", (uint8_t *)&v7, 0x16u);

  }
  v5 = *(void **)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", *(_QWORD *)(a1 + 48)));
  objc_msgSend(v5, "warnBGTaskClientsForActivitiesAboutToExpire:", v6);

}

id sub_1000ADDE0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_1000ADDE8(uint64_t a1, int a2)
{
  id *v4;
  id WeakRetained;
  NSObject *v6;
  id v7;
  uint64_t v8;
  const __CFString *v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  __int128 v15;
  id v16;
  id v17;
  id v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  const __CFString *v24;

  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  v6 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_loadWeakRetained(v4);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = CFSTR("NO");
    *(_DWORD *)buf = 138412802;
    v20 = v7;
    if (a2)
      v9 = CFSTR("YES");
    v21 = 2112;
    v22 = v8;
    v23 = 2112;
    v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Assertion %@ for app %@ invalidated, server-initiated: %@", buf, 0x20u);

  }
  v10 = *(NSObject **)(a1 + 48);
  if (v10)
    dispatch_source_cancel(v10);
  v11 = *(NSObject **)(*(_QWORD *)(a1 + 56) + 328);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000ADFA0;
  v13[3] = &unk_10015FB68;
  v14 = *(id *)(a1 + 32);
  v15 = *(_OWORD *)(a1 + 56);
  v16 = *(id *)(a1 + 72);
  v17 = WeakRetained;
  v18 = *(id *)(a1 + 80);
  v12 = WeakRetained;
  dispatch_async(v11, v13);

}

id sub_1000ADFA0(uint64_t a1)
{
  id result;
  NSObject *v3;
  uint8_t v4[16];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 496), "reportActivityNoLongerRunning:", *(_QWORD *)(a1 + 48));
  os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 40) + 40, 0);
  objc_msgSend(*(id *)(a1 + 48), "setAssertion:", 0);
  objc_msgSend(*(id *)(a1 + 56), "removeObject:", *(_QWORD *)(a1 + 64));
  os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 40) + 40);
  result = objc_msgSend(*(id *)(a1 + 56), "count");
  if (!result)
  {
    v3 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Calling completion", v4, 2u);
    }

    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  return result;
}

void sub_1000AE270(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  int v10;
  id v11;
  __int16 v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = a1[4];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 138412546;
    v11 = v5;
    v12 = 2112;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Process: %@, Error: %@", (uint8_t *)&v10, 0x16u);
  }
  if (objc_msgSend(v6, "code") == (id)6 || objc_msgSend(v6, "code") == (id)7)
  {
    v8 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (void *)a1[5];
      v10 = 138412546;
      v11 = v9;
      v12 = 2112;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error servicing launch request for %@: %@", (uint8_t *)&v10, 0x16u);
    }

    (*(void (**)(_QWORD, _QWORD, id))(a1[6] + 16))(a1[6], 0, v6);
  }
  else
  {
    (*(void (**)(_QWORD, id, id))(a1[6] + 16))(a1[6], objc_msgSend(v5, "pid"), v6);
  }

}

id sub_1000AEBE0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("lifecycle")));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v5 = 138412290;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Suspending extension launch activity %@", (uint8_t *)&v5, 0xCu);
  }

  return objc_msgSend(*(id *)(a1 + 40), "suspendActivity:", *(_QWORD *)(a1 + 32));
}

void sub_1000AF690(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000AF6AC(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[4];
  __int128 v3;
  id v4;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000AF728;
  block[3] = &unk_10015D530;
  v3 = *(_OWORD *)(a1 + 32);
  v1 = *(NSObject **)(v3 + 328);
  v4 = *(id *)(a1 + 48);
  dispatch_async(v1, block);

}

void sub_1000AF728(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *j;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];

  v2 = objc_autoreleasePoolPush();
  os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 32) + 128, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v3, "minusSet:", *(_QWORD *)(a1 + 48));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  if (!v4)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "setObject:forKeyedSubscript:", v4, *(_QWORD *)(a1 + 40));
  }
  objc_msgSend(v4, "unionSet:", *(_QWORD *)(a1 + 48));

  os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 32) + 128);
  v5 = objc_msgSend(*(id *)(a1 + 48), "mutableCopy");
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v6 = *(id *)(a1 + 48);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "startHandler"));

        if (v12)
          objc_msgSend(v5, "removeObject:", v11);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v8);
  }

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v13 = v5;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v19;
    do
    {
      for (j = 0; j != v15; j = (char *)j + 1)
      {
        if (*(_QWORD *)v19 != v16)
          objc_enumerationMutation(v13);
        objc_msgSend(*(id *)(a1 + 32), "moveActivityToRunning:", *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)j), (_QWORD)v18);
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v15);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1000AF978(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  _QWORD block[5];
  id v7;
  uint64_t v8;

  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1000AF9F8;
  block[3] = &unk_10015D530;
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 328);
  block[1] = 3221225472;
  block[4] = v2;
  v4 = *(id *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = v4;
  v8 = v5;
  dispatch_async(v3, block);

}

void sub_1000AF9F8(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *j;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];

  v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("lifecycle")));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1000E9B5C();

  v3 = objc_autoreleasePoolPush();
  v4 = objc_msgSend(*(id *)(a1 + 40), "mutableCopy");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 48) + 40, 0);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v6 = *(id *)(a1 + 40);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v11, "isBackgroundTaskActivity"))
        {
          objc_msgSend(v4, "removeObject:", v11);
          if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 64), "containsObject:", v11))
            objc_msgSend(v5, "addObject:", v11);
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v8);
  }

  os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 48) + 40);
  objc_msgSend(*(id *)(a1 + 48), "runActivitiesAndRemoveUnknown:", v4);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v12 = v5;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v19;
    do
    {
      for (j = 0; j != v14; j = (char *)j + 1)
      {
        if (*(_QWORD *)v19 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(a1 + 48), "activityCompleted:", *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)j), (_QWORD)v18);
      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v14);
  }

  os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 48) + 128, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 144), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(v17, "minusSet:", *(_QWORD *)(a1 + 40));

  os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 48) + 128);
  objc_autoreleasePoolPop(v3);
}

void sub_1000AFC90(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  os_unfair_lock_s **v5;
  __objc2_class **p_superclass;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id obj;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  id v40;
  uint8_t v41[4];
  uint64_t v42;
  _BYTE v43[128];

  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  obj = *(id *)(a1 + 40);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v43, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v32;
    v5 = (os_unfair_lock_s **)(a1 + 48);
    v29 = kNWEndpointKey;
    p_superclass = _DASCPMModePolicy.superclass;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v32 != v4)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v7);
        os_unfair_recursive_lock_lock_with_options(&(*v5)[10], 0);
        v9 = objc_msgSend(*(id *)&(*v5)[16]._os_unfair_lock_opaque, "count");
        objc_msgSend(*(id *)&(*v5)[14]._os_unfair_lock_opaque, "removeObject:", v8);
        objc_msgSend(*(id *)&(*v5)[16]._os_unfair_lock_opaque, "removeObject:", v8);
        objc_msgSend(*(id *)&(*v5)[12]._os_unfair_lock_opaque, "addObject:", v8);
        if (v9)
          objc_msgSend(*(id *)&(*v5)[16]._os_unfair_lock_opaque, "count");
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(p_superclass + 224, "logForCategory:", CFSTR("runningTasks")));
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          sub_1000E9BD0(v41, a1 + 48, &v42, v10);

        os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 48) + 40);
        os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 48) + 128, 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 136), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 56)));
        objc_msgSend(v11, "unionSet:", *(_QWORD *)(a1 + 40));

        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 144), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 56)));
        objc_msgSend(v12, "minusSet:", *(_QWORD *)(a1 + 40));

        os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 48) + 128);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "groupName"));

        if (v13)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "groupName"));
          os_unfair_lock_lock(*v5 + 3);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)&(*v5)[28]._os_unfair_lock_opaque, "objectForKeyedSubscript:", v14));
          objc_msgSend(v15, "removeObject:", v8);

          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)&(*v5)[30]._os_unfair_lock_opaque, "objectForKeyedSubscript:", v14));
          objc_msgSend(v16, "removeObject:", v8);

          v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(p_superclass + 224, "logForCategory:", CFSTR("lifecycle(activityGroup)")));
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "groupName"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)&(*v5)[28]._os_unfair_lock_opaque, "objectForKeyedSubscript:", v14));
            v20 = objc_msgSend(v19, "count");
            *(_DWORD *)buf = 138543874;
            v36 = v8;
            v37 = 2112;
            v38 = v18;
            v39 = 2048;
            v40 = v20;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "NO LONGER RUNNING [Failed to activate] %{public}@ ...Tasks running in group [%@] are %ld!", buf, 0x20u);

            p_superclass = (__objc2_class **)(_DASCPMModePolicy + 8);
          }

          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)&(*v5)[26]._os_unfair_lock_opaque, "objectForKeyedSubscript:", v14));
          if (v21)
          {
            v22 = v21;
            objc_msgSend(v21, "addObject:", v8);
          }
          else
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithObject:](NSMutableSet, "setWithObject:", v8));
            objc_msgSend(*(id *)&(*v5)[26]._os_unfair_lock_opaque, "setObject:forKeyedSubscript:", v22, v14);
          }
          os_unfair_lock_unlock(*v5 + 3);

        }
        if (objc_msgSend(*(id *)&(*v5)[54]._os_unfair_lock_opaque, "requiresNetworkPathMonitoring:", v8))
        {
          v23 = *(void **)&(*v5)[54]._os_unfair_lock_opaque;
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "uuid"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[_DASNetworkEvaluationMonitor nwParametersForActivity:](_DASNetworkEvaluationMonitor, "nwParametersForActivity:", v8));
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "userInfo"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", v29));
          v28 = v23;
          p_superclass = (__objc2_class **)(_DASCPMModePolicy + 8);
          objc_msgSend(v28, "startMonitoringActivity:withNetworkParameters:withEndpoint:", v24, v25, v27);

        }
        v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v43, 16);
    }
    while (v3);
  }

}

id sub_1000B0280(uint64_t a1)
{
  NSObject *v2;

  if ((int)objc_msgSend(*(id *)(a1 + 32), "pid") >= 1)
  {
    v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("lifecycle")));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1000E9C98(a1, v2);

  }
  return objc_msgSend(*(id *)(a1 + 40), "unload");
}

void sub_1000B042C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000B0C18(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "suspendActivities:", *(_QWORD *)(a1 + 32));
}

uint64_t sub_1000B0C24(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  unsigned int v9;
  NSObject *v10;
  void *v11;
  signed int v12;
  void *v13;
  unsigned __int8 v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  dispatch_queue_global_t global_queue;
  NSObject *v20;
  id v21;
  uint64_t v23;
  _QWORD block[5];
  id v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t v31[4];
  uint64_t v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  uint64_t v36;
  _BYTE v37[128];

  os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 32) + 40, 0);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v23 = a1;
  v2 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v27, v37, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v7, "isBackgroundTaskActivity"))
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "assertion"));
          v9 = objc_msgSend(v8, "isValid");

          if (v9)
          {
            v10 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "assertion"));
              v12 = objc_msgSend(v11, "pid");
              *(_DWORD *)buf = 138412546;
              v34 = v7;
              v35 = 2048;
              v36 = v12;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BGTask activity %@ did not respond to suspension. Dropping assertion for app with pid: %ld", buf, 0x16u);

            }
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "assertion"));
            v26 = 0;
            v14 = objc_msgSend(v13, "invalidateWithError:", &v26);
            v15 = v26;

            if ((v14 & 1) == 0)
            {
              v16 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
              if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
                sub_1000E9D1C(v31, v7, &v32, v16);

            }
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "clientProvidedIdentifier"));
            v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("setTaskCompleted was not called in time after the BGTask with identifier (%@)'s expiration handler was called."), v17));

            global_queue = dispatch_get_global_queue(-32768, 0);
            v20 = objc_claimAutoreleasedReturnValue(global_queue);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1000B0F30;
            block[3] = &unk_10015D558;
            block[4] = v7;
            v25 = v18;
            v21 = v18;
            dispatch_async(v20, block);

          }
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v27, v37, 16);
    }
    while (v4);
  }

  return os_unfair_recursive_lock_unlock(*(_QWORD *)(v23 + 32) + 40);
}

void sub_1000B0F30(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assertion"));
  LOBYTE(v1) = SimulateCrash(objc_msgSend(v2, "pid"), 228926736, *(_QWORD *)(v1 + 40));

  if ((v1 & 1) == 0)
  {
    v3 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1000E9D98(v3, v4, v5, v6, v7, v8, v9, v10);

  }
}

uint64_t sub_1000B0FAC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  dispatch_queue_global_t global_queue;
  NSObject *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v30;
  uint64_t v31;
  _QWORD v32[6];
  _QWORD block[5];
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  void *v40;
  _BYTE v41[128];

  os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 32) + 40, 0);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v2 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v36;
    v31 = _DASLaunchReasonBackgroundFetch;
    v30 = v2;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v36 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
        objc_msgSend(*(id *)(a1 + 32), "releaseAssertion:", v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
        v9 = objc_msgSend(v8, "hasPrefix:", CFSTR("com.apple.dasd"));

        if ((v9 & 1) == 0)
        {
          if (!objc_msgSend(v7, "requestsApplicationLaunch")
            || (v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "startHandler"))) == 0
            || (v11 = (void *)v10,
                v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "launchReason")),
                v13 = objc_msgSend(v12, "isEqualToString:", v31),
                v12,
                v11,
                (v13 & 1) == 0))
          {
            if ((int)objc_msgSend(v7, "pid") >= 1)
            {
              v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "suspendRequestDate"));
              if (v14)
              {
                v15 = (void *)v14;
                v16 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "containsObject:", v7);

                if (v16)
                {
                  v17 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
                  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                  {
                    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
                    *(_DWORD *)buf = 138412290;
                    v40 = v18;
                    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Activity %@ asked to suspend 10s ago but has not yet suspended. Generating crash report.", buf, 0xCu);

                  }
                  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
                  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("XPC Activity %@ did not terminate in timely fashion when asked to suspend. The activity should be frequently checking xpc_activity_should_defer() and correspondingly setting the state to XPC_ACTIVITY_STATE_DEFER or XPC_ACTIVITY_STATE_DONE as appropriate."), v19));

                  global_queue = dispatch_get_global_queue(-32768, 0);
                  v22 = objc_claimAutoreleasedReturnValue(global_queue);
                  block[0] = _NSConcreteStackBlock;
                  block[1] = 3221225472;
                  block[2] = sub_1000B1390;
                  block[3] = &unk_10015D558;
                  block[4] = v7;
                  v34 = v20;
                  v23 = v20;
                  dispatch_async(v22, block);

                  +[_DASMetricRecorder recordOccurrenceForKey:](_DASMetricRecorder, "recordOccurrenceForKey:", CFSTR("com.apple.dasd.xpc.notdeferred"));
                  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
                  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.dasd.xpc.notdeferred.%@"), v24));

                  +[_DASMetricRecorder recordOccurrenceForKey:](_DASMetricRecorder, "recordOccurrenceForKey:", CFSTR("com.apple.dasd.xpc.notdeferred"));
                  +[_DASMetricRecorder recordOccurrenceForKey:](_DASMetricRecorder, "recordOccurrenceForKey:", v25);

                  v2 = v30;
                }
              }
            }
            v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "suspendRequestDate"));
            if (v26)
            {
              v27 = (void *)v26;
              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "startDate"));

              if (v28)
              {
                v32[0] = _NSConcreteStackBlock;
                v32[1] = 3221225472;
                v32[2] = sub_1000B13F8;
                v32[3] = &unk_10015FC30;
                v32[4] = *(_QWORD *)(a1 + 32);
                v32[5] = v7;
                AnalyticsSendEventLazy(CFSTR("com.apple.dasd.delayedSuspension"), v32);
              }
            }
          }
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
    }
    while (v4);
  }

  return os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 32) + 40);
}

void sub_1000B1390(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((SimulateCrash(objc_msgSend(*(id *)(a1 + 32), "pid"), 14310317, *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v1 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1000E9D98(v1, v2, v3, v4, v5, v6, v7, v8);

  }
}

id sub_1000B13F8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "containsObject:", *(_QWORD *)(a1 + 40)))
    v3 = &__kCFBooleanFalse;
  else
    v3 = &__kCFBooleanTrue;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("suspended"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", &off_10016ED80, CFSTR("limit"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  v5 = objc_msgSend(v4, "copy");
  if (objc_msgSend(v4, "hasPrefix:", CFSTR("com.apple.")))
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "substringFromIndex:", objc_msgSend(CFSTR("com.apple."), "length")));

    v5 = (id)v6;
  }
  if ((unint64_t)objc_msgSend(v5, "length") >= 0x1E)
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "substringToIndex:", 30));

    v5 = (id)v7;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CFSTR("identifier"));

  return v2;
}

id sub_1000B151C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "releaseAssertions:", *(_QWORD *)(a1 + 40));
}

id sub_1000B15C8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "activity:blockedOnPolicies:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

id sub_1000B1674(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "activity:runWithoutHonoringPolicies:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1000B2044(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B26CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1000B2728(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  unsigned int v23;
  void *v24;
  void *v25;
  unsigned int v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  unsigned int v39;
  void *v40;
  void *v41;
  unsigned int v42;
  void *v43;
  void *v44;
  unsigned int v45;
  void *v46;
  void *v47;
  int v48;
  void *v49;
  void *v50;
  unsigned int v51;
  void *v52;
  void *v53;
  unsigned int v54;
  void *v55;
  void *v56;
  unsigned int v57;
  void *v58;
  void *v59;
  int v60;
  void *v61;
  void *v62;
  unsigned int v63;
  void *v64;
  id v65;
  id v66;

  v66 = a2;
  objc_msgSend(a3, "score");
  if (+[_DASPolicyResponse isScoreBlocking:](_DASPolicyResponse, "isScoreBlocking:"))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[_DASLowPowerModePolicy policyInstance](_DASLowPowerModePolicy, "policyInstance"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "policyName"));
    if (objc_msgSend(v66, "isEqualToString:", v8))
    {
      v9 = *(unsigned __int8 *)(a1 + 48);

      if (v9)
      {
LABEL_8:
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v14 = *(_QWORD *)(v13 + 24) | 0x20;
LABEL_48:
        *(_QWORD *)(v13 + 24) = v14;
        goto LABEL_49;
      }
    }
    else
    {

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPhotosPolicy policyInstance](_DASPhotosPolicy, "policyInstance"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "policyName"));
    if (objc_msgSend(v66, "isEqualToString:", v11))
    {
      v12 = *(unsigned __int8 *)(a1 + 49);

      if (v12)
        goto LABEL_8;
    }
    else
    {

    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPhotosPolicy policyInstance](_DASPhotosPolicy, "policyInstance"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "policyName"));
    if (objc_msgSend(v66, "isEqualToString:", v16))
    {
      v17 = *(unsigned __int8 *)(a1 + 50);

      if (v17)
      {
LABEL_12:
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v14 = *(_QWORD *)(v13 + 24) | 4;
        goto LABEL_48;
      }
    }
    else
    {

    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[_DASBatteryLevelPolicy policyInstance](_DASBatteryLevelPolicy, "policyInstance"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "policyName"));
    v20 = objc_msgSend(v66, "isEqualToString:", v19);

    if (v20)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(_QWORD *)(v13 + 24) | 8;
      goto LABEL_48;
    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[_DASEnergyBudgetPolicy policyInstance](_DASEnergyBudgetPolicy, "policyInstance"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "policyName"));
    v23 = objc_msgSend(v66, "isEqualToString:", v22);

    if (v23)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(_QWORD *)(v13 + 24) | 2;
      goto LABEL_48;
    }
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDataBudgetPolicy policyInstance](_DASDataBudgetPolicy, "policyInstance"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "policyName"));
    v26 = objc_msgSend(v66, "isEqualToString:", v25);

    if (v26)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(_QWORD *)(v13 + 24) | 1;
      goto LABEL_48;
    }
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[_DASNetworkQualityPolicy policyInstance](_DASNetworkQualityPolicy, "policyInstance"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "policyName"));
    if (objc_msgSend(v66, "isEqualToString:", v28))
    {
      v29 = *(unsigned __int8 *)(a1 + 51);

      if (v29)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v14 = *(_QWORD *)(v13 + 24) | 0x10;
        goto LABEL_48;
      }
    }
    else
    {

    }
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[_DASNetworkQualityPolicy policyInstance](_DASNetworkQualityPolicy, "policyInstance"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "policyName"));
    if (objc_msgSend(v66, "isEqualToString:", v31))
    {
      v32 = *(unsigned __int8 *)(a1 + 52);

      if (v32)
      {
LABEL_30:
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v14 = *(_QWORD *)(v13 + 24) | 0x100;
        goto LABEL_48;
      }
    }
    else
    {

    }
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[_DASNetworkQualityPolicy policyInstance](_DASNetworkQualityPolicy, "policyInstance"));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "policyName"));
    if ((objc_msgSend(v66, "isEqualToString:", v34) & 1) != 0)
    {
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v66));
      v36 = objc_msgSend(v35, "decision");

      if (v36 != (id)100)
        goto LABEL_30;
    }
    else
    {

    }
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[_DASCPUUsagePolicy policyInstance](_DASCPUUsagePolicy, "policyInstance"));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "policyName"));
    v39 = objc_msgSend(v66, "isEqualToString:", v38);

    if (v39)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(_QWORD *)(v13 + 24) | 0x40;
      goto LABEL_48;
    }
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[_DASMemoryPressurePolicy policyInstance](_DASMemoryPressurePolicy, "policyInstance"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "policyName"));
    v42 = objc_msgSend(v66, "isEqualToString:", v41);

    if (v42)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(_QWORD *)(v13 + 24) | 0x80;
      goto LABEL_48;
    }
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[_DASSmartPowerNapPolicy policyInstance](_DASSmartPowerNapPolicy, "policyInstance"));
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "policyName"));
    v45 = objc_msgSend(v66, "isEqualToString:", v44);

    if (v45)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(_QWORD *)(v13 + 24) | 0x200;
      goto LABEL_48;
    }
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[_DASThermalPolicy policyInstance](_DASThermalPolicy, "policyInstance"));
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "policyName"));
    if (objc_msgSend(v66, "isEqualToString:", v47))
    {
      v48 = *(unsigned __int8 *)(a1 + 53);

      if (v48)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v14 = *(_QWORD *)(v13 + 24) | 0x1000;
        goto LABEL_48;
      }
    }
    else
    {

    }
    v49 = (void *)objc_claimAutoreleasedReturnValue(+[_DASThermalPolicy policyInstance](_DASThermalPolicy, "policyInstance"));
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "policyName"));
    v51 = objc_msgSend(v66, "isEqualToString:", v50);

    if (v51)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(_QWORD *)(v13 + 24) | 0x800;
      goto LABEL_48;
    }
    v52 = (void *)objc_claimAutoreleasedReturnValue(+[_DASThunderingHerdPolicy policyInstance](_DASThunderingHerdPolicy, "policyInstance"));
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "policyName"));
    v54 = objc_msgSend(v66, "isEqualToString:", v53);

    if (v54)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(_QWORD *)(v13 + 24) | 0x400;
      goto LABEL_48;
    }
    v55 = (void *)objc_claimAutoreleasedReturnValue(+[_DASGroupSchedulingPolicy policyInstance](_DASGroupSchedulingPolicy, "policyInstance"));
    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "policyName"));
    v57 = objc_msgSend(v66, "isEqualToString:", v56);

    if (v57)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(_QWORD *)(v13 + 24) | 0x4000;
      goto LABEL_48;
    }
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[_DASRequiresPluggedInPolicy policyInstance](_DASRequiresPluggedInPolicy, "policyInstance"));
    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "policyName"));
    if (objc_msgSend(v66, "isEqualToString:", v59))
    {
      v60 = *(unsigned __int8 *)(a1 + 54);

      if (v60)
        goto LABEL_12;
    }
    else
    {

    }
    v61 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDeviceActivityPolicy policyInstance](_DASDeviceActivityPolicy, "policyInstance"));
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "policyName"));
    v63 = objc_msgSend(v66, "isEqualToString:", v62);

    if (v63)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) |= 0x8000uLL;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) |= 4 * *(unsigned __int8 *)(a1 + 55);
      goto LABEL_49;
    }
    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v66));
    v65 = objc_msgSend(v64, "decision");

    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if (v65 == (id)100)
    {
      *(_QWORD *)(v13 + 24) = 0;
      *a4 = 1;
      goto LABEL_49;
    }
    v14 = *(_QWORD *)(v13 + 24) | 0x2000;
    goto LABEL_48;
  }
LABEL_49:

}

void sub_1000B2DD4(uint64_t a1)
{
  unsigned __int8 v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  void *v10;
  void *v11;
  void *v12;
  uint8_t v13[16];
  void *v14;

  v2 = +[_DASPhotosPolicy shouldOverrideForIntentSync:activity:](_DASPhotosPolicy, "shouldOverrideForIntentSync:activity:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 512), *(_QWORD *)(a1 + 40));
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 248);
  if ((v2 & 1) == 0)
  {
    objc_msgSend(v3, "setPendingUnregistration:", 1);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 248), "clearRemoteDeviceActiveSet");
    return;
  }
  objc_msgSend(v3, "setPendingUnregistration:", 0);
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 248), "anyRemoteDeviceActive"))
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
    v14 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v14, 1));
    objc_msgSend(v4, "runActivitiesWithUrgency:activities:", 1, v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPhotosPolicy policyInstance](_DASPhotosPolicy, "policyInstance"));
    objc_msgSend(v7, "setIntentSyncIsEngaged:", 1);

    v8 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      v9 = "Remote device is active. We should sync Photos now.";
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, v13, 2u);
    }
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[_DASUrgencyOverridePolicy policyInstance](_DASUrgencyOverridePolicy, "policyInstance"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
    objc_msgSend(v10, "removeActivity:", v11);

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[_DASPhotosPolicy policyInstance](_DASPhotosPolicy, "policyInstance"));
    objc_msgSend(v12, "setIntentSyncIsEngaged:", 0);

    v8 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      v9 = "Remote device is not active.";
      goto LABEL_8;
    }
  }

}

void sub_1000B3594(id *a1, void *a2, void *a3)
{
  double v5;
  id *v6;
  id v7;

  v7 = a2;
  objc_msgSend(a3, "doubleValue");
  if (v5 < 2.22507386e-308)
  {
    if (objc_msgSend(a1[4], "count") && !objc_msgSend(a1[4], "containsObject:", v7))
      v6 = a1 + 6;
    else
      v6 = a1 + 5;
    objc_msgSend(*v6, "addObject:", v7);
  }

}

void sub_1000B377C(uint64_t a1)
{
  unsigned int v2;
  NSObject *v3;
  void *v4;
  void *v5;

  os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 32) + 40, 0);
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "containsObject:", *(_QWORD *)(a1 + 40));
  os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 32) + 40);
  if (v2)
  {
    v3 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("lifecycle")));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1000E9DC8();

    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(v4, "cancelActivities:", v5);

  }
}

uint64_t sub_1000B383C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000B384C(uint64_t a1)
{

}

void sub_1000B3854(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6;
  void *v7;
  void *v8;
  unsigned int v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  id v13;
  __int16 v14;
  uint64_t v15;

  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
  v9 = objc_msgSend(v7, "isEqualToString:", v8);

  if (v9)
  {
    v10 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 138412546;
      v13 = v6;
      v14 = 2112;
      v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@ was in pre-running. Removing due to submission of %@", (uint8_t *)&v12, 0x16u);
    }

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }

}

void sub_1000B4284(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B42AC(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "tasksNoLongerEligible"));
  objc_msgSend(v1, "suspendActivities:", v2);

}

void sub_1000B4D34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000B593C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unprotectedEvaluateScoreAndRunActivities:", *(_QWORD *)(a1 + 40));
}

id sub_1000B5A38(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "removeObject:", *(_QWORD *)(a1 + 32));
}

void sub_1000B5AEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000B5B00(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "removeObject:", *(_QWORD *)(a1 + 32));
}

id sub_1000B5D8C(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v5;
  void *v6;
  id v7;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uuid"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
  v7 = objc_msgSend(v5, "isEqual:", v6);

  if ((_DWORD)v7)
    *a3 = 1;
  return v7;
}

void sub_1000B5DFC(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "tasksNoLongerEligibleFromTasks:", v2));
  objc_msgSend(v1, "suspendActivities:", v3);

}

id sub_1000B6260(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "limitationResponse"));
  v3 = +[_DASLimiterResponse bitmaskFromResponses:](_DASLimiterResponse, "bitmaskFromResponses:", v2);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v6 = objc_msgSend(v5, "copy");
  if (objc_msgSend(v5, "hasPrefix:", CFSTR("com.apple.")))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "substringFromIndex:", objc_msgSend(CFSTR("com.apple."), "length")));

    v6 = (id)v7;
  }
  if ((unint64_t)objc_msgSend(v6, "length") >= 0x1E)
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "substringToIndex:", 30));

    v6 = (id)v8;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "limitationResponse"));
  v10 = +[_DASLimiterResponse queryActivityDecision:fromResponses:](_DASLimiterResponse, "queryActivityDecision:fromResponses:", 5, v9);

  if (v10)
  {
    v11 = objc_claimAutoreleasedReturnValue(+[_DASRateLimiterUtilities rateLimitIdentifierForActivity:](_DASRateLimiterUtilities, "rateLimitIdentifierForActivity:", *(_QWORD *)(a1 + 32)));

    v6 = (id)v11;
  }
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("name"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v3));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v12, CFSTR("limitationsValue"));

  if (v3)
  {
    v13 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("limitations")));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
      v16 = 138412546;
      v17 = v4;
      v18 = 2112;
      v19 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Logging limit distribution to CA %@ for activity %@", (uint8_t *)&v16, 0x16u);

    }
  }

  return v4;
}

id sub_1000B64B0(uint64_t a1)
{
  void *v2;
  id *v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned int v7;
  unsigned int v8;
  const __CFString *v9;
  const __CFString *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  NSObject *v25;
  double v26;
  void *v27;
  NSObject *v28;
  NSObject *v29;
  void *v30;
  int v32;
  void *v33;
  __int16 v34;
  void *v35;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v4 = *(_QWORD *)(a1 + 40);
  v3 = (id *)(a1 + 40);
  objc_msgSend(*((id *)*(v3 - 1) + 49), "maximumRuntimeForActivity:", v4);
  v6 = v5;
  v7 = objc_msgSend(*((id *)*(v3 - 1) + 49), "hasDynamicOverrides:", *v3);
  v8 = objc_msgSend(*((id *)*(v3 - 1) + 49), "hasStaticOverrides:", *v3);
  v9 = CFSTR("none");
  if (v8)
    v9 = CFSTR("static");
  if (v7)
    v10 = CFSTR("dynamic");
  else
    v10 = v9;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, CFSTR("overrides"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v6));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, CFSTR("durationLimit"));

  objc_msgSend(v2, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("runtimeLimitApplies"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "limitationResponse"));
  LODWORD(v11) = +[_DASLimiterResponse queryActivityDecision:fromResponses:](_DASLimiterResponse, "queryActivityDecision:fromResponses:", 3, v12);

  if ((_DWORD)v11)
  {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", &off_10016EE10, CFSTR("runtimeLimitCount"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("runtimeSuspended"));
  }
  else if ((v7 | v8) != 1)
  {
    goto LABEL_14;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "identifier"));
  v14 = objc_msgSend(v13, "copy");
  if (objc_msgSend(v13, "hasPrefix:", CFSTR("com.apple.")))
  {
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "substringFromIndex:", objc_msgSend(CFSTR("com.apple."), "length")));

    v14 = (id)v15;
  }
  if ((unint64_t)objc_msgSend(v14, "length") >= 0x1E)
  {
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "substringToIndex:", 30));

    v14 = (id)v16;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v14, CFSTR("name"));

LABEL_14:
  v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "endTime"));
  if (v17
    && (v18 = (void *)v17,
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "startDate")),
        v19,
        v18,
        v19))
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "endTime"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "startDate"));
    objc_msgSend(v21, "timeIntervalSinceDate:", v20);
    v23 = v22;

  }
  else
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "startDate"));

    if (!v24)
      goto LABEL_23;
    v25 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("limitations")));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      sub_1000EA114(v3, v25);

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "startDate"));
    objc_msgSend(v20, "timeIntervalSinceNow");
    v23 = -v26;
  }

  if (v23 > 0.0)
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v23));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v27, CFSTR("runtimeDuration"));

    goto LABEL_26;
  }
LABEL_23:
  v28 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("limitations")));
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    sub_1000EA070(v3, v28);

  objc_msgSend(v2, "setObject:forKeyedSubscript:", &off_10016EDF8, CFSTR("runtimeDuration"));
LABEL_26:
  v29 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("limitations")));
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "identifier"));
    v32 = 138412546;
    v33 = v2;
    v34 = 2112;
    v35 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Logging runtime durations to CA %@ for activity %@", (uint8_t *)&v32, 0x16u);

  }
  return v2;
}

id sub_1000B75A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "activityAnalyticsWithActivity:didComplete:", *(_QWORD *)(a1 + 40), 1);
}

id sub_1000B75B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "activityAnalyticsWithActivity:didComplete:", *(_QWORD *)(a1 + 40), 0);
}

void sub_1000B7D68(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "objectForKeyedSubscript:", v7));
  if (!v6)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "setObject:forKeyedSubscript:", v6, v7);
  }
  objc_msgSend(v6, "_DAS_unionSetOverridingExisting:", v5);

}

void sub_1000B8D90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B8E18(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "groupName"));
  if (v2)
    objc_msgSend(*(id *)(a1 + 40), "addPendingActivity:toGroupWithName:", *(_QWORD *)(a1 + 32), v2);
  +[_DASConditionScore computeOptimalScoreAndDateForActivity:](_DASConditionScore, "computeOptimalScoreAndDateForActivity:", *(_QWORD *)(a1 + 32));
  os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 40) + 40, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "addObject:", *(_QWORD *)(a1 + 32));
  os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 40) + 40);
  objc_msgSend(*(id *)(a1 + 40), "addTriggersToActivity:", *(_QWORD *)(a1 + 32));
  if (objc_msgSend(*(id *)(a1 + 40), "shouldEvaluateTask:atDate:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48))&& objc_msgSend(*(id *)(a1 + 40), "shouldRunActivityNow:", *(_QWORD *)(a1 + 32))&& objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 376), "executeActivity:", *(_QWORD *)(a1 + 32)))
  {
    v3 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = 138412290;
      v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Running %@ immediately on submission", (uint8_t *)&v5, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 40), "immediatelyBeginWorkForActivity:", *(_QWORD *)(a1 + 32));
  }

}

void sub_1000B8F64(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  double v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;

  v2 = *(void **)(a1 + 32);
  v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "startBefore"));
  objc_msgSend(v2, "timeIntervalSinceDate:");
  if (v3 >= 0.0)
    goto LABEL_14;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 208), "timeIntervalSinceDate:", *(_QWORD *)(a1 + 32));
  if (v4 <= 120.0)
    goto LABEL_14;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "startBefore"));
  objc_msgSend(v5, "timeIntervalSinceDate:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 208));
  v7 = v6;

  if (v7 >= 0.0)
    return;
  if (objc_msgSend(*(id *)(a1 + 40), "timewiseEligibleAtDate:", *(_QWORD *)(a1 + 32)))
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "groupName"));
    if (v8)
    {
      v9 = (void *)v8;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fastPass"));
      if (v10)
      {

      }
      else
      {
        v12 = *(void **)(a1 + 40);
        v11 = *(void **)(a1 + 48);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "groupName"));
        v14 = (uint64_t)objc_msgSend(v11, "additionalCapacityForActivity:inGroupWithName:shouldTryToSuspend:", v12, v13, 0);

        if (v14 < 1)
          return;
      }
    }
  }
  if (!objc_msgSend(*(id *)(a1 + 40), "requiresNetwork")
    || objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 216), "isNetworkPathAvailableForActivity:", *(_QWORD *)(a1 + 40)))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 48) + 200));
    v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "predictedOptimalStartDate"));
    objc_msgSend(v23, "timeIntervalSinceDate:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 200));
    if (v15 > 0.0)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "startBefore"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "predictedOptimalStartDate"));
      objc_msgSend(v16, "timeIntervalSinceDate:", v17);
      v19 = v18;

      if (v19 > 60.0)
      {
        v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "predictedOptimalStartDate"));
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v22 = *(void **)(v21 + 40);
        *(_QWORD *)(v21 + 40) = v20;

      }
      return;
    }
LABEL_14:

  }
}

void sub_1000B926C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  __int128 v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  void *v30;
  _BYTE v31[128];

  v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[4];
    v4 = a1[5];
    *(_DWORD *)buf = 138412546;
    v26 = v3;
    v27 = 2112;
    v28 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "endLaunchWithReason: Requesting end launch for Application %@ with Reason %@", buf, 0x16u);
  }

  os_unfair_recursive_lock_lock_with_options(a1[6] + 128, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[6] + 144), "objectForKeyedSubscript:", a1[4]));
  v6 = v5;
  if (v5)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v31, 16);
    if (!v7)
      goto LABEL_17;
    v9 = v7;
    v10 = *(_QWORD *)v22;
    *(_QWORD *)&v8 = 138412802;
    v20 = v8;
    while (1)
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v6);
        v12 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "launchReason", v20));
        if (objc_msgSend(v13, "isEqualToString:", a1[5]))
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "assertion"));

          if (!v14)
            continue;
          v15 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            v16 = a1[4];
            v17 = a1[5];
            *(_DWORD *)buf = v20;
            v26 = v16;
            v27 = 2112;
            v28 = v17;
            v29 = 2112;
            v30 = v12;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "endLaunchWithReason: Ending launch for Application %@ with Reason %@ and Activity %@", buf, 0x20u);
          }

          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "assertion"));
          objc_msgSend(v13, "invalidateWithError:", 0);
        }

      }
      v9 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v21, v31, 16);
      if (!v9)
      {
LABEL_17:
        os_unfair_recursive_lock_unlock(a1[6] + 128);
        goto LABEL_21;
      }
    }
  }
  os_unfair_recursive_lock_unlock(a1[6] + 128);
  v18 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v19 = a1[4];
    *(_DWORD *)buf = 138412290;
    v26 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "endLaunchWithReason: No activities found for Application %@", buf, 0xCu);
  }

LABEL_21:
}

void sub_1000B96C0(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  unsigned __int8 v17;
  id v18;
  char v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  int *v24;
  id obj;
  void *v26;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  _BYTE v37[128];

  v1 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
    sub_1000EA410(a1, v1, v2, v3, v4, v5, v6, v7);

  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connectedBGTaskClients"));
  objc_sync_enter(obj);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activitiesWaitingForBGTaskClients"));
  v24 = (int *)(a1 + 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));

  if (objc_msgSend(v26, "count"))
  {
    v10 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1000EA39C(v24, v10);

    os_unfair_recursive_lock_lock_with_options(*(_QWORD *)(a1 + 32) + 40, 0);
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v11 = v26;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v30 != v13)
            objc_enumerationMutation(v11);
          v15 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "assertion"));
          v28 = 0;
          v17 = objc_msgSend(v16, "invalidateWithError:", &v28);
          v18 = v28;

          if (v18)
            v19 = v17;
          else
            v19 = 1;
          if ((v19 & 1) == 0)
          {
            v20 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("bar")));
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "assertion"));
              *(_DWORD *)buf = 138412546;
              v34 = v21;
              v35 = 2112;
              v36 = v18;
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Error invalidating assertion %@: %@", buf, 0x16u);

            }
          }

        }
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
      }
      while (v12);
    }

    os_unfair_recursive_lock_unlock(*(_QWORD *)(a1 + 32) + 40);
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activitiesWaitingForBGTaskClients"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *v24));
  objc_msgSend(v22, "removeObjectForKey:", v23);

  objc_sync_exit(obj);
}

void sub_1000B99E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

int64_t sub_1000B9DF8(id a1, _DASActivity *a2, _DASActivity *a3)
{
  _DASActivity *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[_DASActivity startBefore](a2, "startBefore"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[_DASActivity startBefore](v4, "startBefore"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

int64_t sub_1000B9F04(id a1, _DASActivity *a2, _DASActivity *a3)
{
  _DASActivity *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[_DASActivity startBefore](a2, "startBefore"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[_DASActivity startBefore](v4, "startBefore"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

void sub_1000BA048(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "startedTasks"));
  objc_sync_enter(v3);
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "startedTasks"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects"));
  objc_msgSend(v4, "addObjectsFromArray:", v6);

  objc_sync_exit(v3);
}

void sub_1000BA0D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

int64_t sub_1000BA0E4(id a1, _DASActivity *a2, _DASActivity *a3)
{
  _DASActivity *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[_DASActivity startBefore](a2, "startBefore"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[_DASActivity startBefore](v4, "startBefore"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

id sub_1000BA758(uint64_t a1)
{
  id result;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  uint64_t v8;

  result = objc_msgSend(*(id *)(a1 + 32), "shouldRunActivityNow:", *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 376), "executeActivity:", *(_QWORD *)(a1 + 40));
    if ((_DWORD)result)
    {
      v3 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(a1 + 48);
        v4 = *(_QWORD *)(a1 + 56);
        v6[0] = 67109378;
        v6[1] = v4;
        v7 = 2112;
        v8 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "With %i urgency level, running %@ immediately on submission", (uint8_t *)v6, 0x12u);
      }

      return objc_msgSend(*(id *)(a1 + 32), "immediatelyBeginWorkForActivity:", *(_QWORD *)(a1 + 40));
    }
  }
  return result;
}

void sub_1000BADD0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 40);
  v4 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(unint64_t)objc_msgSend(v3, "countForObject:", v4)));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v4);

}

uint64_t sub_1000BAE48(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", a2));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));

  v9 = objc_msgSend(v7, "compare:", v8);
  if (v9 == (id)1)
    return -1;
  else
    return 1;
}

void sub_1000BB47C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(void **)(a1 + 40);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(unint64_t)objc_msgSend(v3, "countForObject:", v4)));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v4);

  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(unint64_t)objc_msgSend(*(id *)(a1 + 56), "countForObject:", v4)));
  objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v6, v4);

}

uint64_t sub_1000BB534(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", a2));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));

  v9 = objc_msgSend(v7, "compare:", v8);
  if (v9 == (id)1)
    return -1;
  else
    return 1;
}

void sub_1000BC320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BC338(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "evaluatePolicies:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1000BC450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BC468(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;

  os_unfair_recursive_lock_lock_with_options(a1[4] + 40, 0);
  v2 = (void *)a1[4];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pendingTasks"));
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = objc_msgSend(v2, "evaluateAllActivitiesFor:writingToFile:", v3, a1[5]);

  v4 = (void *)a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "prerunningTasks"));
  v6 = objc_msgSend(v4, "evaluateAllActivitiesFor:writingToFile:", v5, a1[5]);
  v7 = 0;
  v8 = *(_QWORD *)(a1[6] + 8);
  if (v6)
    v7 = *(_BYTE *)(v8 + 24) != 0;
  *(_BYTE *)(v8 + 24) = v7;

  v9 = (void *)a1[4];
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "runningTasks"));
  v11 = objc_msgSend(v9, "evaluateAllActivitiesFor:writingToFile:", v10, a1[5]);
  v12 = *(_QWORD *)(a1[6] + 8);
  if (v11)
    v13 = *(_BYTE *)(v12 + 24) != 0;
  else
    v13 = 0;
  *(_BYTE *)(v12 + 24) = v13;

  return os_unfair_recursive_lock_unlock(a1[4] + 40);
}

void sub_1000BC5F4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void **v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v13;
  void *v14;
  BOOL v15;
  NSObject *v16;
  id v17;

  v6 = a2;
  v7 = objc_autoreleasePoolPush();
  v9 = *(_QWORD *)(a1 + 40);
  v8 = (void **)(a1 + 40);
  if ((objc_msgSend(*(v8 - 1), "evaluatePoliciesForActivitiesChunk:writingToFile:", v6, v9) & 1) == 0)
    *a4 = 1;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("\n"), "dataUsingEncoding:", 4));
  v11 = *v8;
  v17 = 0;
  v12 = objc_msgSend(v11, "writeData:error:", v10, &v17);
  v13 = v17;
  v14 = v13;
  if (v12)
    v15 = v13 == 0;
  else
    v15 = 0;
  if (!v15)
  {
    v16 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_1000EA478();

    *a4 = 1;
  }

  objc_autoreleasePoolPop(v7);
}

void sub_1000BCE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_1000BCE98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "evaluatePolicies:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1000BEBF4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getActivityWithUUID:", v8, (_QWORD)v12));
        v10 = *(_QWORD *)(a1 + 32);
        if (!v9)
        {
          objc_msgSend(*(id *)(v10 + 216), "stopMonitoringActivity:", v8);
          goto LABEL_11;
        }
        v11 = (void *)v9;
        objc_msgSend(*(id *)(v10 + 360), "addWorkItem:", v9);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_11:

}

void sub_1000BF6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000BFB88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C02DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  unsigned int v32;
  void *v33;
  void *v34;
  unsigned int v35;
  void *v36;
  void *v37;
  unsigned __int8 v38;
  void *v39;
  uint64_t v40;
  void *v41;
  unsigned int v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;

  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = v6;
  v9 = objc_msgSend(v7, "schedulingPriority");
  if ((unint64_t)v9 >= _DASSchedulingPriorityUserInitiated)
  {
    v10 = objc_msgSend(v8, "schedulingPriority");
    if ((unint64_t)v10 < _DASSchedulingPriorityUserInitiated)
      goto LABEL_3;
  }
  v12 = objc_msgSend(v8, "schedulingPriority");
  if ((unint64_t)v12 >= _DASSchedulingPriorityUserInitiated)
  {
    v13 = objc_msgSend(v7, "schedulingPriority");
    if ((unint64_t)v13 < _DASSchedulingPriorityUserInitiated)
    {
LABEL_6:
      v11 = 1;
      goto LABEL_53;
    }
  }
  v14 = objc_msgSend(v7, "schedulingPriority");
  if ((unint64_t)v14 >= _DASSchedulingPriorityUserInitiated)
  {
    v15 = objc_msgSend(v8, "schedulingPriority");
    if ((unint64_t)v15 >= _DASSchedulingPriorityUserInitiated)
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
      if ((objc_msgSend(v36, "hasPrefix:", CFSTR("nsurl-av")) & 1) != 0)
      {
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name"));
        v38 = objc_msgSend(v37, "hasPrefix:", CFSTR("nsurl-av"));

        if ((v38 & 1) != 0)
          goto LABEL_9;
      }
      else
      {

      }
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "submitDate"));
      v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "submitDate"));
      goto LABEL_52;
    }
  }
LABEL_9:
  if (!*(_BYTE *)(a1 + 40))
    goto LABEL_73;
  v16 = objc_msgSend(v7, "userRequestedBackupTask");
  v17 = objc_msgSend(v8, "userRequestedBackupTask");
  v18 = v16 ^ 1;
  v11 = v17 | v16 ^ 1 ? 1 : -1;
  if (v17)
    v18 = v16;
  if (v18 == 1)
  {
LABEL_73:
    if (*(_BYTE *)(a1 + 41))
    {
      if (+[_DASPhotosPolicy isiCPLActivity:](_DASPhotosPolicy, "isiCPLActivity:", v7)
        && !+[_DASPhotosPolicy isiCPLActivity:](_DASPhotosPolicy, "isiCPLActivity:", v8))
      {
        goto LABEL_3;
      }
      if (+[_DASPhotosPolicy isiCPLActivity:](_DASPhotosPolicy, "isiCPLActivity:", v8)
        && !+[_DASPhotosPolicy isiCPLActivity:](_DASPhotosPolicy, "isiCPLActivity:", v7))
      {
        goto LABEL_6;
      }
    }
    v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fastPass"));
    if (!v19
      || (v20 = (void *)v19,
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fastPass")),
          v21,
          v20,
          v21))
    {
      v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fastPass"));
      if (v22)
      {
        v23 = (void *)v22;
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fastPass"));

        if (!v24)
          goto LABEL_6;
      }
      v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fastPass"));
      if (v25)
      {
        v26 = (void *)v25;
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fastPass"));

        if (v27)
        {
          v28 = objc_msgSend(v7, "staticPriority");
          if ((uint64_t)v28 < (uint64_t)objc_msgSend(v8, "staticPriority"))
            goto LABEL_3;
          v29 = objc_msgSend(v7, "staticPriority");
          if ((uint64_t)v29 > (uint64_t)objc_msgSend(v8, "staticPriority"))
            goto LABEL_6;
        }
      }
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fileProtection"));
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[_DASFileProtection completeUnlessOpen](_DASFileProtection, "completeUnlessOpen"));
      v32 = objc_msgSend(v30, "isEqual:", v31);

      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fileProtection"));
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[_DASFileProtection completeUnlessOpen](_DASFileProtection, "completeUnlessOpen"));
      v35 = objc_msgSend(v33, "isEqual:", v34);

      if (!v32 || v35)
      {
        if ((v35 ^ 1 | v32) != 1)
          goto LABEL_6;
        if (!objc_msgSend(v7, "triggersRestart") || objc_msgSend(v8, "triggersRestart"))
        {
          if (objc_msgSend(v8, "triggersRestart") && !objc_msgSend(v7, "triggersRestart"))
            goto LABEL_6;
          if (!objc_msgSend(v7, "requiresSignificantUserInactivity")
            || objc_msgSend(v8, "requiresSignificantUserInactivity"))
          {
            if (objc_msgSend(v8, "requiresSignificantUserInactivity")
              && !objc_msgSend(v7, "requiresSignificantUserInactivity"))
            {
              goto LABEL_6;
            }
            if (!objc_msgSend(v7, "isIntensive") || objc_msgSend(v8, "isIntensive"))
            {
              if (objc_msgSend(v8, "isIntensive") && !objc_msgSend(v7, "isIntensive"))
                goto LABEL_6;
              if (objc_msgSend(v7, "isIntensive") && objc_msgSend(v8, "isIntensive"))
              {
                v11 = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 368), "compareActivity:withActivity:", v7, v8);
                goto LABEL_53;
              }
              if (objc_msgSend(v7, "requiresNetwork"))
              {
                if (objc_msgSend(v8, "requiresNetwork"))
                {
                  v43 = objc_msgSend(v7, "deferred");
                  if (v43 != objc_msgSend(v8, "deferred"))
                  {
                    if (objc_msgSend(v7, "deferred"))
                      v11 = -1;
                    else
                      v11 = 1;
                    goto LABEL_53;
                  }
                }
              }
              v44 = objc_msgSend(v7, "schedulingPriority");
              if (v44 <= objc_msgSend(v8, "schedulingPriority"))
              {
                v45 = objc_msgSend(v7, "schedulingPriority");
                if (v45 < objc_msgSend(v8, "schedulingPriority"))
                  goto LABEL_6;
                v46 = objc_msgSend(v7, "staticPriority");
                if ((uint64_t)v46 >= (uint64_t)objc_msgSend(v8, "staticPriority"))
                {
                  v47 = objc_msgSend(v7, "staticPriority");
                  if ((uint64_t)v47 > (uint64_t)objc_msgSend(v8, "staticPriority"))
                    goto LABEL_6;
                  v48 = objc_msgSend(v7, "maximumRuntime");
                  if ((uint64_t)v48 >= (uint64_t)objc_msgSend(v8, "maximumRuntime"))
                  {
                    v49 = objc_msgSend(v7, "maximumRuntime");
                    if ((uint64_t)v49 > (uint64_t)objc_msgSend(v8, "maximumRuntime"))
                      goto LABEL_6;
                    v50 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "rateLimitConfigurationName"));
                    if (!v50
                      || (v51 = (void *)v50,
                          v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "rateLimitConfigurationName")),
                          v52,
                          v51,
                          v52))
                    {
                      v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "rateLimitConfigurationName"));
                      if (v53)
                      {
                        v54 = (void *)v53;
                        v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "rateLimitConfigurationName"));

                        if (!v55)
                          goto LABEL_6;
                      }
                      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "startBefore"));
                      v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "startBefore"));
LABEL_52:
                      v41 = (void *)v40;
                      v11 = (uint64_t)objc_msgSend(v39, "compare:", v40);

                      goto LABEL_53;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_3:
    v11 = -1;
  }
LABEL_53:

  return v11;
}

id sub_1000C092C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 40), "unprotectedEvaluateScoreAndRunActivities:", *(_QWORD *)(a1 + 48));
}

void sub_1000C1CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000C1CF8(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (objc_msgSend(v10, "isEqualToString:", _DASUpdateActivityXPCActivityNameKey))
  {
    v6 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
    {
      v7 = a1[4];
LABEL_10:
      objc_storeStrong((id *)(*(_QWORD *)(v7 + 8) + 40), a3);
    }
  }
  else if (objc_msgSend(v10, "isEqualToString:", _DASUpdateActivityErrorKey))
  {
    v8 = objc_opt_class(NSError);
    if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0)
    {
      v7 = a1[5];
      goto LABEL_10;
    }
  }
  else if (objc_msgSend(v10, "isEqualToString:", _DASUpdateActivityXPCActivityClientStringKey))
  {
    v9 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v5, v9) & 1) != 0)
    {
      v7 = a1[6];
      goto LABEL_10;
    }
  }

}

id sub_1000C1EA4(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  id v44;
  id v45;
  void *v46;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = objc_alloc((Class)NSString);
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSince1970");
  v5 = objc_msgSend(v3, "initWithFormat:", CFSTR("%f"), v4);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CFSTR("startDate"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, CFSTR("name"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bundleId"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v7, CFSTR("bundleID"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientName"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("clientName"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProvidedStartDate"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, CFSTR("clientProvidedStartDate"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "delayedStart")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, CFSTR("delayedStart"));

  v11 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%lu"), objc_msgSend(*(id *)(a1 + 40), "downloadSize"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, CFSTR("downloadSize"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "diskIntensive")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, CFSTR("diskIntensive"));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "darkWakeEligible")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, CFSTR("darkWakeEligible"));

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "groupName"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v14, CFSTR("groupName"));

  objc_msgSend(*(id *)(a1 + 40), "interval");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v15, CFSTR("interval"));

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "memoryIntensive")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v16, CFSTR("memoryIntensive"));

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "preventDeviceSleep")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v17, CFSTR("preventDeviceSleep"));

  v18 = objc_alloc((Class)NSString);
  objc_msgSend(*(id *)(a1 + 40), "percentCompleted");
  v20 = objc_msgSend(v18, "initWithFormat:", CFSTR("%f"), v19);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v20, CFSTR("percentCompleted"));

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "preClearedMode")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v21, CFSTR("preClearedMode"));

  v22 = objc_alloc((Class)NSString);
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "predictedOptimalStartDate"));
  objc_msgSend(v23, "timeIntervalSince1970");
  v25 = objc_msgSend(v22, "initWithFormat:", CFSTR("%f"), v24);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v25, CFSTR("predictedOptimalStartDate"));

  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "requiresNetwork")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v26, CFSTR("requiresNetwork"));

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "requiresDeviceInactivity")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v27, CFSTR("requiresDeviceInactivity"));

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "requestsApplicationLaunch")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v28, CFSTR("requestsApplicationLaunch"));

  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "requiresInexpensiveNetworking")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v29, CFSTR("requiresInexpensiveNetworking"));

  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "requiresUnconstrainedNetworking")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v30, CFSTR("requiresUnconstrainedNetworking"));

  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "runOnAppForeground")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v31, CFSTR("runOnAppForeground"));

  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "requiresSignificantUserInactivity")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v32, CFSTR("requiresSignificantUserInactivity"));

  v33 = objc_alloc((Class)NSString);
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "startAfter"));
  objc_msgSend(v34, "timeIntervalSince1970");
  v36 = objc_msgSend(v33, "initWithFormat:", CFSTR("%f"), v35);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v36, CFSTR("startAfter"));

  v37 = objc_alloc((Class)NSString);
  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "submitDate"));
  objc_msgSend(v38, "timeIntervalSince1970");
  v40 = objc_msgSend(v37, "initWithFormat:", CFSTR("%f"), v39);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v40, CFSTR("submitDate"));

  v41 = objc_alloc((Class)NSString);
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "startBefore"));
  objc_msgSend(v42, "timeIntervalSince1970");
  v44 = objc_msgSend(v41, "initWithFormat:", CFSTR("%f"), v43);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v44, CFSTR("startBefore"));

  v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%lu"), objc_msgSend(*(id *)(a1 + 40), "uploadSize"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v45, CFSTR("uploadSize"));

  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "wasForceRun")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v46, CFSTR("wasForceRun"));

  return v2;
}

void sub_1000C2E98(uint64_t a1, void *a2)
{
  id v3;
  xpc_type_t type;
  os_unfair_lock_s *v5;
  dispatch_queue_global_t global_queue;
  NSObject *v7;
  id v8;
  _QWORD v9[5];
  id v10;

  v3 = a2;
  type = xpc_get_type(v3);
  v5 = *(os_unfair_lock_s **)(a1 + 32);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    os_unfair_lock_lock(v5 + 6);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 648), "addObject:", v3);
    global_queue = dispatch_get_global_queue(25, 0);
    v7 = objc_claimAutoreleasedReturnValue(global_queue);
    xpc_connection_set_target_queue((xpc_connection_t)v3, v7);

    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000C2FA0;
    v9[3] = &unk_10015FF90;
    v9[4] = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v10 = v8;
    xpc_connection_set_event_handler((xpc_connection_t)v8, v9);
    xpc_connection_activate((xpc_connection_t)v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 24));

  }
  else
  {
    -[os_unfair_lock_s _unexpectedXPCObject:WithLog:](v5, "_unexpectedXPCObject:WithLog:", v3, CFSTR("Prewarm suspend listener received unexpected message"));
  }

}

id sub_1000C2FA0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_prewarmSuspendHandleIncoming:onConnection:", a2, *(_QWORD *)(a1 + 40));
}

void sub_1000C3A4C(id a1)
{
  os_log_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v1 = os_log_create("com.apple.duetactivityscheduler", "default");
  v2 = (void *)qword_1001ABD30;
  qword_1001ABD30 = (uint64_t)v1;

  v3 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v4 = (void *)qword_1001ABD38;
  qword_1001ABD38 = v3;

  v5 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v6 = (void *)qword_1001ABD40;
  qword_1001ABD40 = v5;

  v7 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v8 = (void *)qword_1001ABD48;
  qword_1001ABD48 = v7;

  dword_1001ABD50 = 0;
}

void sub_1000C3D40(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "handleClientInterruption");
    WeakRetained = v2;
  }

}

void sub_1000C3E90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C3F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000C3F9C(_QWORD *a1, void *a2, _BYTE *a3)
{
  void *v5;
  void *v6;
  id v7;

  v5 = (void *)a1[4];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "name"));
  v7 = objc_msgSend(v5, "containsObject:", v6);

  if ((_DWORD)v7)
  {
    if (++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) == a1[6])
      *a3 = 1;
  }
  return v7;
}

void sub_1000C4388(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C4560(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C471C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C49C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C4AF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C4BF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C4CDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C4EA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C5088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C5114(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C55F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  uint64_t v16;

  objc_sync_exit(v15);
  _Block_object_dispose(&a15, 8);
  _Block_object_dispose((const void *)(v16 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C563C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000C564C(uint64_t a1)
{

}

void sub_1000C5654(uint64_t a1, char a2, id obj)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), obj);
}

void sub_1000C59E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C5BE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C5DD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C8528(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = objc_autoreleasePoolPush();
  v2 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL____DASActivitySchedulerClient));
  v3 = (void *)qword_1001ABD60;
  qword_1001ABD60 = v2;

  v4 = (void *)qword_1001ABD60;
  v7 = objc_opt_class(NSMutableSet);
  v8 = objc_opt_class(NSSet);
  v9 = objc_opt_class(_DASActivity);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v5, v7, v8));
  objc_msgSend(v4, "setClasses:forSelector:argumentIndex:ofReply:", v6, "handleLaunchFromDaemonForActivities:", 0, 0);

  objc_autoreleasePoolPop(v1);
}

void sub_1000C8640(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];

  v1 = objc_autoreleasePoolPush();
  v2 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL____DASActivityOmnibusScheduling));
  v3 = (void *)qword_1001ABD70;
  qword_1001ABD70 = v2;

  v4 = (void *)qword_1001ABD70;
  v27[0] = objc_opt_class(NSArray);
  v27[1] = objc_opt_class(_DASActivity);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v27, 2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v5));
  objc_msgSend(v4, "setClasses:forSelector:argumentIndex:ofReply:", v6, "submitActivities:", 0, 0);

  v7 = (void *)qword_1001ABD70;
  v26[0] = objc_opt_class(NSArray);
  v26[1] = objc_opt_class(_DASActivity);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v26, 2));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v8));
  objc_msgSend(v7, "setClasses:forSelector:argumentIndex:ofReply:", v9, "startedActivities:", 0, 0);

  v10 = (void *)qword_1001ABD70;
  v25[0] = objc_opt_class(NSArray);
  v25[1] = objc_opt_class(_DASActivity);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v25, 2));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v11));
  objc_msgSend(v10, "setClasses:forSelector:argumentIndex:ofReply:", v12, "delayedStartActivities:", 0, 0);

  v13 = (void *)qword_1001ABD70;
  v24[0] = objc_opt_class(NSSet);
  v24[1] = objc_opt_class(NSString);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v24, 2));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v14));
  objc_msgSend(v13, "setClasses:forSelector:argumentIndex:ofReply:", v15, "enableTaskRegistryMode:processes:handler:", 1, 0);

  objc_msgSend((id)qword_1001ABD70, "setXPCType:forSelector:argumentIndex:ofReply:", &_xpc_type_dictionary, "submitTaskRequestWithIdentifier:descriptor:completionHandler:", 1, 0);
  objc_msgSend((id)qword_1001ABD70, "setXPCType:forSelector:argumentIndex:ofReply:", &_xpc_type_dictionary, "updateTaskRequestWithIdentifier:descriptor:completionHandler:", 1, 0);
  v16 = (void *)qword_1001ABD70;
  v23[0] = objc_opt_class(NSSet);
  v23[1] = objc_opt_class(_DASActivityResult);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v23, 2));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v17));
  objc_msgSend(v16, "setClasses:forSelector:argumentIndex:ofReply:", v18, "reportSystemTaskWithIdentifier:consumedResults:completionHandler:", 1, 0);

  v19 = (void *)qword_1001ABD70;
  v22[0] = objc_opt_class(NSSet);
  v22[1] = objc_opt_class(_DASActivityResult);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v22, 2));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v20));
  objc_msgSend(v19, "setClasses:forSelector:argumentIndex:ofReply:", v21, "reportSystemTaskWithIdentifier:producedResults:completionHandler:", 1, 0);

  objc_autoreleasePoolPop(v1);
}

void sub_1000C89D0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

id sub_1000C89FC()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "processIdentifier");
}

id sub_1000C8AD0(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("exposure-notification")));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Active app changed", v4, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "handleActiveAppChanged");
}

void sub_1000C8C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C8CA4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000C8CB4(uint64_t a1)
{

}

void sub_1000C8CBC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;
  uint8_t buf[16];

  v3 = a2;
  if (v3 || !objc_msgSend(*(id *)(a1 + 32), "exposureNotificationEnabled"))
  {
    v6 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("exposure-notification")));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EN is not active. Not performing block.", buf, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "invalidate");
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  }
  else
  {
    v4 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("exposure-notification")));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EN is active", buf, 2u);
    }

    v5 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000C8E34;
    v7[3] = &unk_100160098;
    v10 = *(_QWORD *)(a1 + 48);
    v8 = v5;
    v9 = *(id *)(a1 + 40);
    objc_msgSend(v8, "getInfoForKey:completion:", CFSTR("activeApp"), v7);

  }
}

void sub_1000C8E34(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  int v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("exposure-notification")));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    sub_1000EAF38((uint64_t)v5, (uint64_t)v6, v7);

  if (v6 || (v8 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v8) & 1) == 0))
  {
    v11 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("exposure-notification")));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 138412290;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Error obtaining active EN app: %@", (uint8_t *)&v12, 0xCu);
    }
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v10 = v5;
    v11 = *(NSObject **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
  }

  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_1000C974C(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  objc_msgSend((id)objc_opt_class(v2), "runPeriodicRelaunchTask");
  objc_msgSend(v3, "setTaskCompleted");

}

void sub_1000C9828(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v3 = a2;
  if (v3 || !objc_msgSend(*(id *)(a1 + 32), "exposureNotificationEnabled"))
  {
    v5 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("exposure-notification")));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "EN is not active. Not performing block.", v6, 2u);
    }

  }
  else
  {
    v4 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("exposure-notification")));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EN is active. Performing block.", buf, 2u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void sub_1000C9A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C9A6C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;

  v7 = a4;
  v8 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("exposure-notification")));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = 138544130;
    v12 = v10;
    v13 = 1024;
    v14 = a2;
    v15 = 2048;
    v16 = a3;
    v17 = 2112;
    v18 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%{public}@ - Active? %u, Interval %llu, Error: %@", (uint8_t *)&v11, 0x26u);
  }

  if (v7)
  {
    v9 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("exposure-notification")));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1000EB028(a1, (uint64_t)v7, v9);

  }
  else if (a2)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a3;
  }
  objc_msgSend(*(id *)(a1 + 40), "invalidate");
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));

}

void sub_1000CA3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CA3E8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

id sub_1000CA86C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "extractResumeLaunchSignposts:", a2);
}

id sub_1000CA878(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "extractResumeLaunchSignposts:", 0);
}

id sub_1000CA884(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "feedNewRecommendations");
}

void sub_1000CA8CC(id a1)
{
  _APRSManager *v1;
  void *v2;

  v1 = objc_opt_new(_APRSManager);
  v2 = (void *)qword_1001ABD78;
  qword_1001ABD78 = (uint64_t)v1;

}

void sub_1000CAB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CAB60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000CAB6C(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  uint8_t v15[8];
  id to;

  v5 = a2;
  if (a3)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDataProtectionStateMonitor dataProtectionClassC](_DASDataProtectionStateMonitor, "dataProtectionClassC"));
    v7 = objc_msgSend(v5, "isEqualToString:", v6);

    if (v7)
    {
      objc_copyWeak(&to, (id *)(a1 + 32));
      v8 = objc_loadWeakRetained(&to);

      if (v8)
      {
        v9 = objc_loadWeakRetained(&to);
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "log"));

        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v15 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Class C now available.", v15, 2u);
        }

        v11 = objc_loadWeakRetained(&to);
        objc_msgSend(v11, "setClassCUnlocked:", 1);

        v12 = objc_loadWeakRetained(&to);
        objc_msgSend(v12, "setDataProtectionStateMonitor:", 0);

        v13 = objc_loadWeakRetained(&to);
        v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "timer"));
        dispatch_activate(v14);

      }
      objc_destroyWeak(&to);
    }
  }

}

void sub_1000CACAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CACC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000CB0AC(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)objc_opt_class(*(_QWORD *)(a1 + 40))), "initWithDaemon:", *(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001ABD90;
  qword_1001ABD90 = (uint64_t)v1;

}

void sub_1000CB1C0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v2 = *(_QWORD **)(a1 + 32);
  if (!v2[4])
  {
    v3 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 32);
    *(_QWORD *)(v4 + 32) = v3;

    v2 = *(_QWORD **)(a1 + 32);
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pendingActivities"));
  objc_msgSend(v6, "addObject:", *(_QWORD *)(a1 + 40));

  v7 = *(void **)(a1 + 32);
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "diskVolume"));
  objc_msgSend(v7, "registerForDiskVolumeMonitoring:", v8);

}

void sub_1000CB324(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingActivities"));
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "diskVolume"));
  objc_msgSend(v3, "unregisterForDiskVolumeMonitoring:", v4);

}

void sub_1000CB978(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "daemon"));
  objc_msgSend(v2, "evaluateScoreAndRunActivities:", *(_QWORD *)(a1 + 40));

}

id sub_1000CBA4C(uint64_t a1, int a2)
{
  NSObject *v4;

  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    sub_1000EB364(a2, v4);
  return objc_msgSend(*(id *)(a1 + 32), "handleCacheDeletePurgeableSpaceNotification");
}

void sub_1000CBDB4(uint64_t a1)
{
  id WeakRetained;
  id v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
    objc_sync_enter(v3);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeAllObjects");
    objc_sync_exit(v3);

    objc_msgSend(v4, "clearPriorityQueue");
    WeakRetained = v4;
  }

}

void sub_1000CBE20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CBE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000CBEEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CBF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000CC134(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CC2EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CC570(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001ABDA0;
  qword_1001ABDA0 = (uint64_t)v1;

}

void sub_1000CC910(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  double v5;
  _BOOL4 v6;
  NSObject *v7;
  void *v8;
  void *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  int v17;
  void *v18;

  v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("customsysconstraints")));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v17) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Timer fired to reset workloads", (uint8_t *)&v17, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:", kDASSystemContextMCWorkloadRunningState));
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:", kDASSystemContextMCWorkloadRunningState));
    objc_msgSend(v4, "timeIntervalSinceNow");
    v6 = v5 < -600.0;
    if (v5 < -600.0)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setObject:forKeyedSubscript:", 0, kDASSystemContextMCWorkloadRunningState);
      v7 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("customsysconstraints")));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v17 = 138412290;
        v18 = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Resetting MC, set at %@", (uint8_t *)&v17, 0xCu);
      }

    }
  }
  else
  {
    v6 = 0;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:", kDASSystemContextGPWorkloadRunningState));

  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:", kDASSystemContextGPWorkloadRunningState));
    objc_msgSend(v9, "timeIntervalSinceNow");
    if (v10 >= -600.0)
    {

      if (!v6)
        return;
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setObject:forKeyedSubscript:", 0, kDASSystemContextGPWorkloadRunningState);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12 <= 1)
        v12 = 1;
      *(_QWORD *)(v11 + 48) = v12 - 1;
      v13 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("customsysconstraints")));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v17 = 138412290;
        v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Resetting GP, set at %@", (uint8_t *)&v17, 0xCu);
      }

    }
  }
  else if (!v6)
  {
    return;
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:", kDASSystemContextGPWorkloadRunningState));
  if (v14)
  {

  }
  else
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:", kDASSystemContextMCWorkloadRunningState));

    if (!v15)
    {
      v16 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("customsysconstraints")));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Reevaluating activities due to system constraint reset", (uint8_t *)&v17, 2u);
      }

      objc_msgSend(*(id *)(a1 + 32), "reevaluateAllActivitiesWithDaemon:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
      objc_msgSend(*(id *)(a1 + 32), "cancelResetTimer");
    }
  }
}

void sub_1000CCE40(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("customsysconstraints")));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting _heavyDiskUsage = 0", v3, 2u);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 0;
}

void sub_1000CD11C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  void *v6;
  void *v7;
  __int16 v8;
  uint8_t buf[2];

  if (*(_QWORD *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 64))
      return;
    objc_msgSend(*(id *)(a1 + 40), "cancelResetTimer");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 48));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "objectForKeyedSubscript:", kDASSystemContextGPWorkloadRunningState));

    if (v2)
    {
      v3 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("customsysconstraints")));
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v8 = 0;
        v4 = "Not evaluating because GP is still blocking!";
        v5 = (uint8_t *)&v8;
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, v4, v5, 2u);
        goto LABEL_11;
      }
      goto LABEL_11;
    }
LABEL_13:
    objc_msgSend(*(id *)(a1 + 40), "reevaluateAllActivitiesWithDaemon:", *(_QWORD *)(a1 + 56));
    return;
  }
  if (!*(_BYTE *)(a1 + 64))
    return;
  objc_msgSend(*(id *)(a1 + 40), "armResetTimer");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "setObject:forKeyedSubscript:", v6, *(_QWORD *)(a1 + 48));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "objectForKeyedSubscript:", kDASSystemContextGPWorkloadRunningState));
  if (!v7)
    goto LABEL_13;
  v3 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("customsysconstraints")));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    v4 = "Not evaluating because GP is already blocking!";
    v5 = buf;
    goto LABEL_10;
  }
LABEL_11:

}

void sub_1000CD29C(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;

  v2 = *(unsigned __int8 *)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[6];
  if (v2)
  {
    if (v4)
    {
LABEL_7:
      v3[6] = v4 + 1;
      return;
    }
    objc_msgSend(v3, "armResetTimer");
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setObject:forKeyedSubscript:", v5, *(_QWORD *)(a1 + 40));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:", kDASSystemContextMCWorkloadRunningState));
    if (v6)
    {
      v7 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("customsysconstraints")));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v15) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Not evaluating because MC is already blocking!", (uint8_t *)&v15, 2u);
      }

      v3 = *(_QWORD **)(a1 + 32);
      v4 = v3[6];
      goto LABEL_7;
    }
    ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
    goto LABEL_21;
  }
  if (v4 != 1)
    goto LABEL_13;
  objc_msgSend(v3, "cancelResetTimer");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setObject:forKeyedSubscript:", 0, kDASSystemContextGPWorkloadRunningState);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:", kDASSystemContextMCWorkloadRunningState));

  if (v8)
  {
    v9 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("customsysconstraints")));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Not evaluating because MC is still blocking!", (uint8_t *)&v15, 2u);
    }

LABEL_13:
    v10 = 0;
    goto LABEL_14;
  }
  v10 = 1;
LABEL_14:
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(v11 + 48);
  if (v12 <= 1)
    v12 = 1;
  *(_QWORD *)(v11 + 48) = v12 - 1;
  v13 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("customsysconstraints")));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48)));
    v15 = 138412290;
    v16 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "GP is now %@", (uint8_t *)&v15, 0xCu);

  }
  if (v10)
LABEL_21:
    objc_msgSend(*(id *)(a1 + 32), "reevaluateAllActivitiesWithDaemon:", *(_QWORD *)(a1 + 48));
}

void sub_1000CD6B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CD9D8(uint64_t a1, void *a2)
{
  NSObject *v3;
  void *v4;
  id *v5;
  void *v6;
  void *v7;
  id v8;
  dispatch_queue_global_t global_queue;
  NSObject *v10;
  id v11;
  NSObject *v12;
  _QWORD v13[4];
  id v14;
  id v15;

  v3 = a2;
  if (nw_path_get_status(v3) != nw_path_status_unsatisfied)
  {
    v4 = *(void **)(a1 + 32);
    v5 = (id *)(a1 + 32);
    if (*(_QWORD *)(a1 + 40))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "activityIDs"));
      objc_sync_enter(v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v5, "activityIDs"));
      v8 = objc_msgSend(v7, "copy");

      objc_sync_exit(v6);
      global_queue = dispatch_get_global_queue(2, 0);
      v10 = objc_claimAutoreleasedReturnValue(global_queue);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1000CDB20;
      v13[3] = &unk_10015DAC8;
      v11 = *(id *)(a1 + 40);
      v14 = v8;
      v15 = v11;
      v12 = v8;
      dispatch_async(v10, v13);

    }
    else
    {
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "log"));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1000EB4F8(v5, v12);
    }

  }
}

void sub_1000CDB0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CDB20(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1000CDB88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CDC18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CDC8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CDED8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CDF70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CE004(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CE0A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CE22C(id a1)
{
  _DASNetworkEvaluationMonitor *v1;
  void *v2;

  v1 = objc_opt_new(_DASNetworkEvaluationMonitor);
  v2 = (void *)qword_1001ABDB0;
  qword_1001ABDB0 = (uint64_t)v1;

}

void sub_1000CE254(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NWPathEvaluator sharedDefaultEvaluator](NWPathEvaluator, "sharedDefaultEvaluator"));
  v2 = (void *)qword_1001ABDC0;
  qword_1001ABDC0 = v1;

}

void sub_1000CE280(id a1)
{
  void *v1;
  id v2;
  id v3;
  void *v4;

  v1 = objc_autoreleasePoolPush();
  v2 = objc_alloc_init((Class)NWParameters);
  objc_msgSend(v2, "setProhibitExpensivePaths:", 1);
  v3 = objc_msgSend(objc_alloc((Class)NWPathEvaluator), "initWithEndpoint:parameters:", 0, v2);
  v4 = (void *)qword_1001ABDD0;
  qword_1001ABDD0 = (uint64_t)v3;

  objc_autoreleasePoolPop(v1);
}

void sub_1000CE328(id a1)
{
  void *v1;
  id v2;
  id v3;
  void *v4;

  v1 = objc_autoreleasePoolPush();
  v2 = objc_alloc_init((Class)NWParameters);
  objc_msgSend(v2, "setProhibitConstrainedPaths:", 1);
  v3 = objc_msgSend(objc_alloc((Class)NWPathEvaluator), "initWithEndpoint:parameters:", 0, v2);
  v4 = (void *)qword_1001ABDE0;
  qword_1001ABDE0 = (uint64_t)v3;

  objc_autoreleasePoolPop(v1);
}

void sub_1000CE390(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NWParameters);
  v2 = (void *)qword_1001ABDF0;
  qword_1001ABDF0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001ABDF0, "setProhibitExpensivePaths:", 1);
}

void sub_1000CE3CC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NWParameters);
  v2 = (void *)qword_1001ABE00;
  qword_1001ABE00 = (uint64_t)v1;

  objc_msgSend((id)qword_1001ABE00, "setProhibitExpensivePaths:", 0);
}

void sub_1000CEAE8(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001ABE10;
  qword_1001ABE10 = (uint64_t)v1;

}

void sub_1000CED3C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001ABE20;
  qword_1001ABE20 = (uint64_t)v1;

}

void sub_1000CEE14(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BLSBacklight sharedBacklight](BLSBacklight, "sharedBacklight"));
  objc_msgSend(v2, "addObserver:", WeakRetained);

  v3 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("BacklightStateMonitor")));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Registered for backlight updates.", v4, 2u);
  }

}

id sub_1000CF3A0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1001ABE38;
  v7 = qword_1001ABE38;
  if (!qword_1001ABE38)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000D513C;
    v3[3] = &unk_10015D610;
    v3[4] = &v4;
    sub_1000D513C((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000CF440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CF5E8(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001ABE28;
  qword_1001ABE28 = v1;

}

Class sub_1000D513C(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1001ABE40)
  {
    v5 = off_100160300;
    v6 = 0;
    qword_1001ABE40 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1001ABE40)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("PPSEvent");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_1000E1F88();
LABEL_8:
    free(v2);
  }
  qword_1001ABE38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000D537C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[_CDContextualKeyPath keyPathWithKey:](_CDContextualKeyPath, "keyPathWithKey:", CFSTR("/backup/userRequested")));
  v2 = (void *)qword_1001ABE50;
  qword_1001ABE50 = v1;

}

void sub_1000D5470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D5B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D5B78(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  int v8;
  id v9;
  __int16 v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412546;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@ has state %@", (uint8_t *)&v8, 0x16u);
  }
  if (objc_msgSend(*(id *)(a1 + 32), "isBackupStatusCompleted:", objc_msgSend(v6, "unsignedIntegerValue")))++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

}

Class sub_1000D6174(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1001ABE60)
  {
    v5 = off_100160438;
    v6 = 0;
    qword_1001ABE60 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1001ABE60)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("BYBuddyDaemonCloudSyncClient");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_1000EB870();
LABEL_8:
    free(v2);
  }
  qword_1001ABE58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000D6470(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_callInvalidationHandler:", 0);

}

void sub_1000D76C0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1000D76EC(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  id v6;
  NSObject *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);

  if (WeakRetained)
  {
    v6 = objc_loadWeakRetained(v4);
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "queue"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000D77B8;
    v9[3] = &unk_10015D558;
    v10 = v6;
    v11 = v3;
    v8 = v6;
    dispatch_async(v7, v9);

  }
}

void sub_1000D77B8(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  NSObject *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionID"));
  v3 = objc_msgSend(v2, "isEqual:", *(_QWORD *)(a1 + 40));

  if (v3)
  {
    v4 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("plugin")));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1000EBB54(v4);

    objc_msgSend(*(id *)(a1 + 32), "setSessionID:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginDelegate"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentActivity"));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000D78E4;
    v10[3] = &unk_10015D558;
    v11 = v5;
    v12 = v6;
    v8 = v6;
    v9 = v5;
    dispatch_async(v7, v10);

  }
}

uint64_t sub_1000D78E4(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "extensionActivity:finishedWithStatus:");
  if ((result & 1) != 0)
    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "extensionActivity:finishedWithStatus:", *(_QWORD *)(a1 + 40), 3);
  return result;
}

void sub_1000D7928(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id WeakRetained;
  void *v9;
  void (**v10)(_QWORD, _QWORD);

  v5 = a3;
  v6 = a2;
  v7 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("plugin")));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_1000EBB94();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "extension"));
  v10 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "requestInterruptionBlock"));
  ((void (**)(_QWORD, id))v10)[2](v10, v6);

}

uint64_t sub_1000D8078(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "extensionActivity:finishedWithStatus:");
  if ((result & 1) != 0)
    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "extensionActivity:finishedWithStatus:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return result;
}

void sub_1000D8128(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;

  v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("plugin")));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v11 = 138412290;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Killing plugin %@", (uint8_t *)&v11, 0xCu);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionID"));
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "extension"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionID"));
    objc_msgSend(v5, "cancelExtensionRequestWithIdentifier:", v6);

    objc_msgSend(*(id *)(a1 + 32), "setSessionID:", 0);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "extension"));
  objc_msgSend(v7, "_kill:", 9);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentActivity"));
  objc_msgSend(v8, "setPid:", 0);

  objc_msgSend(*(id *)(a1 + 32), "setCurrentActivity:", 0);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1001ABE68);
  v9 = (void *)qword_1001ABE70;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginMapKey"));
  objc_msgSend(v9, "removeObjectForKey:", v10);

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001ABE68);
}

void sub_1000D85D8(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL____DASHostExtensionContextProtocol));
  v2 = (void *)qword_1001ABE80;
  qword_1001ABE80 = v1;

}

void sub_1000D864C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL____DASRemoteExtensionContextProtocol));
  v2 = (void *)qword_1001ABE90;
  qword_1001ABE90 = v1;

}

void sub_1000D8788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D87A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000D87B0(uint64_t a1)
{

}

void sub_1000D87B8(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;

  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v5 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("plugin")));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_1000EBDF0((uint64_t)v4, v5);

}

id sub_1000D8CBC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "logActivities");
}

id sub_1000D9058(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "logActivities");
}

id sub_1000D9060(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "logPredictions");
}

id sub_1000D9068(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "logDailyActivities");
}

void sub_1000D9594(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000D95A8(uint64_t a1)
{
  void *v2;
  void *i;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  id *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  unsigned int v28;
  double v29;
  void *v30;
  NSObject *v31;
  id obj;
  uint64_t v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  void *v48;
  _BYTE v49[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  obj = *(id *)(*(_QWORD *)(a1 + 32) + 88);
  v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
  if (v35)
  {
    v34 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v35; i = (char *)i + 1)
      {
        if (*(_QWORD *)v44 != v34)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
        v5 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@AvailableCount"), v4));
        v6 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@UnavailableCount"), v4));
        v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@EstimatedUnavailableDuration"), v4));
        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@EstimatedHoursUnavailable"), v4));
        v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@EstimatedUnavailableStartDates"), v4));
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ActualUnavailableDuration"), v4));
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ActualHoursUnavailable"), v4));
        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ActualUnavailableStartDates"), v4));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "objectForKeyedSubscript:", v5));
        if (v8)
        {
          v9 = v6;
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "objectForKeyedSubscript:", v5));
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, v5);

          v6 = v9;
        }
        else
        {
          objc_msgSend(v2, "setObject:forKeyedSubscript:", &off_10016F188, v5);
        }

        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "objectForKeyedSubscript:", v6));
        v39 = (void *)v5;
        v36 = (void *)v6;
        if (v11)
        {
          v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "objectForKeyedSubscript:", v6));
          v13 = v6;
          v14 = (void *)v12;
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, v13);

        }
        else
        {
          objc_msgSend(v2, "setObject:forKeyedSubscript:", &off_10016F188, v6);
        }
        v15 = v2;

        v16 = *(id **)(a1 + 32);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16[10], "objectForKeyedSubscript:", v40));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "objectForKeyedSubscript:", v42));
        objc_msgSend(v16, "newDurationForStartDates:withPreviousDurations:", v17, v18);
        v20 = v19;

        v21 = *(id **)(a1 + 32);
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21[10], "objectForKeyedSubscript:", v37));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "objectForKeyedSubscript:", v7));
        objc_msgSend(v21, "newDurationForStartDates:withPreviousDurations:", v22, v23);
        v25 = v24;

        v26 = v20 / 3600.0;
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v26));
        objc_msgSend(v15, "setObject:forKeyedSubscript:", v27, v41);

        v28 = objc_msgSend(v4, "isEqualToString:", off_1001AB2C8);
        v29 = v25 / 3600.0;
        if (!v28)
          v29 = v26;
        v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v29));
        objc_msgSend(v15, "setObject:forKeyedSubscript:", v30, v38);

        v2 = v15;
      }
      v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
    }
    while (v35);
  }

  v31 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger logForCategory:](_DASDaemonLogger, "logForCategory:", CFSTR("PowerLog")));
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v48 = v2;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Logging daily CA trigger metrics %@", buf, 0xCu);
  }

  return v2;
}

void sub_1000DA3A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DA7C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DA9A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DA9BC(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = *(_QWORD **)(a1 + 32);
  v6 = (void *)v5[9];
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v10));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "getValuesFromTimeline:valueMultiplier:", v7, v8));

  if (v9)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v9, v10);

}

void sub_1000DAA5C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;

  v5 = a2;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getValuesFromTimeline:valueMultiplier:", a3, *(_QWORD *)(a1 + 40)));
  v7 = (void *)v6;
  if (v6)
  {
    v9 = v5;
    v10 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v8);

  }
}

void sub_1000DAB14(id a1)
{
  _DASPLLogger *v1;
  void *v2;

  v1 = objc_opt_new(_DASPLLogger);
  v2 = (void *)qword_1001ABEA0;
  qword_1001ABEA0 = (uint64_t)v1;

}

void sub_1000DAD6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DB4C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DB4DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  id v10;

  v5 = a3;
  v10 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("score%@"), a2));
  v6 = *(void **)(a1 + 40);
  objc_msgSend(v5, "score");
  v8 = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "numberFromDouble:", v8 * 100.0));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, v10);

}

id sub_1000DBE88(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 56), "requiresPlugin")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, *(_QWORD *)(a1 + 48));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 56), "requiresNetwork")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, *(_QWORD *)(a1 + 64));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 56), "isIntensive")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, *(_QWORD *)(a1 + 72));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 56), "requiresDeviceInactivity")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, *(_QWORD *)(a1 + 80));

  objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 88));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 104));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "experimentID"));

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "experimentID"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, *(_QWORD *)(a1 + 128));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "treatmentID"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, *(_QWORD *)(a1 + 136));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 120), "deploymentID")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringValue"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, *(_QWORD *)(a1 + 144));

  }
  return v2;
}

void start()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  int v3;
  void *v4;
  void *v5;
  _DWORD v6[2];

  v0 = os_log_create("com.apple.dasd", "main");
  v1 = getpid();
  v2 = memorystatus_control(14, v1, 1, 0, 0);
  if (v2)
  {
    v3 = v2;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to elevate inactive jetsam priority, error: %d", (uint8_t *)v6, 8u);
    }
  }
  else if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Succeeded to elevate inactive jetsam priority", (uint8_t *)v6, 2u);
  }
  v4 = objc_autoreleasePoolPush();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", (dispatch_queue_t)&_dispatch_main_q, &stru_100160610);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[_DASDaemon sharedInstance](_DASDaemon, "sharedInstance"));
  objc_msgSend(v5, "start");

  objc_autoreleasePoolPop(v4);
  CFRunLoopRun();
  exit(1);
}

void sub_1000DC65C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001ABEB0;
  qword_1001ABEB0 = (uint64_t)v1;

}

void sub_1000DCD20(id a1, BPSCompletion *a2)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (-[BPSCompletion state](a2, "state"))
  {
    v2 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1000EBFC8(v2, v3, v4, v5, v6, v7, v8, v9);

  }
}

void sub_1000DCD74(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *i;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  _BYTE v32[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "deviceUUID"));

  if (v5)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody", 0));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "deviceActivityState"));

    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    if (v8)
    {
      v9 = v8;
      v10 = 0;
      v11 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v25 != v11)
            objc_enumerationMutation(v7);
          if (objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i), "state") == 1)
          {
            os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "addObject:", v5);
            os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
            v10 = 1;
          }
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
      }
      while (v9);
    }
    else
    {
      v10 = 0;
    }

    v21 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = BMContextSyncDeviceActivityLevelActivityStateAsString(v10);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      *(_DWORD *)buf = 138412546;
      v29 = v5;
      v30 = 2112;
      v31 = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "DASContext: Remote device with UUID %@ had activity level changed to %@", buf, 0x16u);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v13 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_1000EBFF8(v13, v14, v15, v16, v17, v18, v19, v20);

  }
}

BOOL sub_1000DD518(id a1, id a2, NSDictionary *a3)
{
  id v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  int v9;
  BOOL v10;

  v3 = a2;
  if (objc_msgSend(v3, "platform") == (id)1 || objc_msgSend(v3, "platform") == (id)2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "model"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "substringToIndex:", 2));
    v6 = objc_msgSend(v5, "intValue");

    if (v6 <= 20)
    {
LABEL_9:
      v10 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    if (objc_msgSend(v3, "platform") != (id)3 && objc_msgSend(v3, "platform") != (id)4)
      goto LABEL_9;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "model"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "substringToIndex:", 2));
    v9 = objc_msgSend(v8, "intValue");

    if (v9 <= 22)
      goto LABEL_9;
  }
  v10 = 1;
LABEL_10:

  return v10;
}

BPSPublisher *__cdecl sub_1000DD60C(id a1, BMBookmarkablePublisher *a2)
{
  return a2;
}

void sub_1000DD620(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t v13;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "filterWithIsIncluded:", &stru_100160718));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "last"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000DD7B0;
  v10[3] = &unk_100160760;
  v7 = *(id *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v11 = v7;
  v12 = v8;
  v13 = a3;
  v9 = objc_msgSend(v6, "sinkWithCompletion:receiveInput:", &stru_100160738, v10);

}

BOOL sub_1000DD6E0(id a1, BMStoreEvent *a2)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[BMStoreEvent eventBody](a2, "eventBody"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bundleID"));

  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.mobileslideshow")) & 1) != 0)
    v4 = 1;
  else
    v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.Photos"));

  return v4;
}

void sub_1000DD750(id a1, BPSCompletion *a2)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[BPSCompletion error](a2, "error"));

  if (v2)
  {
    v3 = objc_claimAutoreleasedReturnValue(+[_DASDaemonLogger defaultCategory](_DASDaemonLogger, "defaultCategory"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1000EC09C(v3, v4, v5, v6, v7, v8, v9, v10);

  }
}

void sub_1000DD7B0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "idsDeviceIdentifier"));

  if (a2)
  {
    if (v6)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "objectForKey:", v6));

      if (!v5)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 12));
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "setValue:forKey:", &off_10016F1E8, v6);
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 12));
      }
    }
  }

}

void sub_1000DDA20(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "runUpdateRecentlyUsedPhotosAppDevicesTask");
  objc_msgSend(v3, "setTaskCompleted");

}

void sub_1000DDDF8(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)objc_opt_class(*(_QWORD *)(a1 + 40))), "initWithDaemon:", *(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1001ABEC0;
  qword_1001ABEC0 = (uint64_t)v1;

}

void sub_1000DE05C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001ABED0;
  qword_1001ABED0 = (uint64_t)v1;

}

id sub_1000DE774(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "deleteOldDurations");
}

id sub_1000DE77C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "deleteOldDurations");
}

id sub_1000DE784(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "loadState");
}

void sub_1000DEB24(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001ABEE0;
  qword_1001ABEE0 = (uint64_t)v1;

}

void sub_1000DF140(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_1001ABEF0;
  qword_1001ABEF0 = (uint64_t)v1;

}

void sub_1000DF7C8(uint64_t a1, char a2, NSObject *a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2 & 1));
  v6 = 138412546;
  v7 = a1;
  v8 = 2112;
  v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Mode %@ state updated to: %@", (uint8_t *)&v6, 0x16u);

}

void sub_1000DF880()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  sub_10001AED8();
  sub_10001AEC4((void *)&_mh_execute_header, v1, v2, "Dynamic limit for %@ set to be %@", v3, v4, v5, v6, v7);

  sub_10001AEF0();
}

void sub_1000DF908()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10001AF00();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Dynamic limit for %@ set to infinite because large transfer size", v1, 0xCu);
  sub_10001768C();
}

void sub_1000DF974()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  sub_10001AED8();
  sub_10001AEC4((void *)&_mh_execute_header, v1, v2, "Static limit for %@ set to be %@", v3, v4, v5, v6, v7);

  sub_10001AEF0();
}

void sub_1000DF9FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Activity %{public}@ is asked to suspend but hasn't started", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000DFA5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Activity %{public}@ should be suspending because of runtime limits", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000DFABC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Activity %{public}@ is asked to suspend but already suspended", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000DFB1C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "Candidates: %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000DFB80(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "Sorted list: %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000DFBE4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to construct app usage timeline", v1, 2u);
}

void sub_1000DFC24()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10001AF00();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "'%{public}@' could not be marked completed because can't find rate limit configuration %@", v2, 0x16u);
  sub_10001768C();
}

void sub_1000DFCA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Failed to convert _DASActivityRateLimit to data because %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000DFD00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Failed to unarchive _DASActivityRateLimit %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000DFD60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "No group name for %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000DFDC0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Prediction likelihood: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000DFE34(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Prediction timeline query %@ failed with error %@", (uint8_t *)&v3, 0x16u);
}

void sub_1000DFEB8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "ATX not present", v1, 2u);
  sub_1000176A4();
}

void sub_1000DFEF4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Registered infer carry status task", v1, 2u);
  sub_1000176A4();
}

void sub_1000DFF30(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Wrote inferred carry status to powerLog %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000DFFA4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100025D18((void *)&_mh_execute_header, a2, a3, "Inferred carry status didn't change from %d, not writing to powerLog", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E0008(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100025D18((void *)&_mh_execute_header, a2, a3, "Inferred carry status is %d", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

uint64_t sub_1000E0070()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "ATXProactiveSuggestionClient");
  return sub_1000E0094(v0);
}

void sub_1000E0094()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Remote Device %@ is lost", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E00F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Remote Device %@ is nearby", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E0154()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1000273A4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Registered device list didn't change", v1, 2u);
  sub_1000176A4();
}

void sub_1000E018C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Failure to create browser for devices %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E01EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Failed to create parameters for browser; parameters not valid",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_1000176A4();
}

void sub_1000E0218()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Endpoint is nil", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E0244()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Browser failed with error '%@'", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E02A4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "PLEnergyMonitor budget failure", v1, 2u);
}

void sub_1000E02E4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001767C((void *)&_mh_execute_header, a2, a3, "Could not create identifer to start energy tracking for %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E0348(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001767C((void *)&_mh_execute_header, a2, a3, "Could not create unique activity name %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E03AC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001767C((void *)&_mh_execute_header, a2, a3, "Could not create identifer to stop energy tracking for %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E0410(uint64_t a1, NSObject *a2)
{
  int v2;
  const __CFString *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 138412546;
  v3 = CFSTR("DASPoliciesBlockingCriteria");
  v4 = 2112;
  v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@: %@", (uint8_t *)&v2, 0x16u);
}

void sub_1000E0498()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Error setting up symptom feed", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E04C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Error setting up symptom workspace", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E04F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "(Start) Unable to obtain data consumption", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E051C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Pre-run: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E057C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Error getting data consumption from Symptoms", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E05A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Post-run: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E0608()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Activity %@ not tracked as being started, considering it started", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E0668(void *a1)
{
  void *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10002E424(a1);
  v2 = sub_10002E41C();
  sub_10002E414(v2);
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "Failed to open shared memory for budgeting: %s", v5, v6, v7, v8, 2u);

  sub_1000176D0();
}

void sub_1000E06DC(void *a1)
{
  void *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10002E424(a1);
  v2 = sub_10002E41C();
  sub_10002E414(v2);
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "Failed to truncate shared memory for budgeting: %s", v5, v6, v7, v8, 2u);

  sub_1000176D0();
}

void sub_1000E0750(void *a1)
{
  void *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10002E424(a1);
  v2 = sub_10002E41C();
  sub_10002E414(v2);
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "mmap failed for budgeting: %s", v5, v6, v7, v8, 2u);

  sub_1000176D0();
}

void sub_1000E07C4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Invalid budget name encountered", v1, 2u);
}

void sub_1000E0804(uint64_t a1, id *a2, NSObject *a3)
{
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", **(unsigned __int8 **)(*(_QWORD *)a1 + 8)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*a2, "count")));
  v7 = 138412546;
  v8 = v5;
  v9 = 2112;
  v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Stored budget count %@ != expected count %@", (uint8_t *)&v7, 0x16u);

}

void sub_1000E08F0(uint8_t *a1, void *a2, void *a3, _QWORD *a4)
{
  NSObject *v7;
  id v8;

  v7 = a2;
  v8 = objc_msgSend(a3, "count");
  *(_DWORD *)a1 = 134217984;
  *a4 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "read %lu views", a1, 0xCu);

}

void sub_1000E0964(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to log DAS Trial identifiers to Kernel", v1, 2u);
}

void sub_1000E09A4(uint64_t a1, NSObject *a2)
{
  int v2;
  const __CFString *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 138412546;
  v3 = CFSTR("DASTrial");
  v4 = 2112;
  v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@: %@", (uint8_t *)&v2, 0x16u);
}

void sub_1000E0A2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100033378();
  sub_1000176DC((void *)&_mh_execute_header, v0, v1, "notify_register_check for %@ failed (%d)\n", v2, v3, v4, v5, 2u);
  sub_10001768C();
}

void sub_1000E0A98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100033378();
  sub_1000176DC((void *)&_mh_execute_header, v0, v1, "notify_register_check for %@ failed (%d)\n", v2, v3, v4, v5, 2u);
  sub_10001768C();
}

void sub_1000E0B04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Unable to create _DKEvent", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E0B30(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "Reported to CoreAnalytics %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E0B94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100033378();
  sub_1000176DC((void *)&_mh_execute_header, v0, v1, "notify_set_state for %@ failed (%d)\n", v2, v3, v4, v5, 2u);
  sub_10001768C();
}

void sub_1000E0C00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10003339C();
  sub_1000176DC((void *)&_mh_execute_header, v0, v1, "sfi_set_class_offtime for %lu microseconds failed (%d)\n", v2, v3, v4, v5, 0);
  sub_10001768C();
}

void sub_1000E0C68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10003339C();
  sub_1000176DC((void *)&_mh_execute_header, v0, v1, "system_set_sfi_window for %lu failed (%d)\n", v2, v3, v4, v5, 0);
  sub_10001768C();
}

void sub_1000E0CD4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10003338C((void *)&_mh_execute_header, a1, a3, "sfi_set_class_offtime for 0 microseconds failed (%d)\n", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E0D40(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10003338C((void *)&_mh_execute_header, a1, a3, "system_set_sfi_window for 0 failed (%d)\n", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E0DAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100033378();
  sub_1000176DC((void *)&_mh_execute_header, v0, v1, "notify_set_state for %@ failed (%d)\n", v2, v3, v4, v5, 2u);
  sub_10001768C();
}

void sub_1000E0E18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Starting battery temperature analyzer", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E0E44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Starting charge rate analyzer", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E0E70(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Temperature")));
  v4 = 138412290;
  v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "BatteryTemperatureReader returning value %@", (uint8_t *)&v4, 0xCu);

}

void sub_1000E0F0C(os_log_t log, double a2, double a3)
{
  int v3;
  double v4;
  __int16 v5;
  double v6;

  v3 = 134218240;
  v4 = a2;
  v5 = 2048;
  v6 = a3;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Battery temperature reference Value %lf Current value %lf", (uint8_t *)&v3, 0x16u);
}

void sub_1000E0F90(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Initializing _DASBARMetricRecorder!", v1, 2u);
}

void sub_1000E0FD0(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *a1;
  v4 = 138412290;
  v5 = v3;
  sub_1000176FC((void *)&_mh_execute_header, a2, a3, "Loaded bar metric dict from defaults %@", (uint8_t *)&v4);
  sub_10001768C();
}

void sub_1000E103C(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_1000176FC((void *)&_mh_execute_header, a3, (uint64_t)a3, "Saved bar metric dict to defaults %@", (uint8_t *)a2);

}

void sub_1000E1088(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *a1;
  v4 = 138412290;
  v5 = v3;
  sub_1000176FC((void *)&_mh_execute_header, a2, a3, "Reset _barMetricDict data successfully %@", (uint8_t *)&v4);
  sub_10001768C();
}

void sub_1000E10F4(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 134217984;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Wrong argument 'stage': %ld passed to recordBARMetric.", (uint8_t *)&v2, 0xCu);
  sub_10001768C();
}

void sub_1000E1164(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176EC((void *)&_mh_execute_header, a1, a3, "_managedBudgets:", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E1194(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176EC((void *)&_mh_execute_header, a1, a3, "storedBudgetNames:", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E11C4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176EC((void *)&_mh_execute_header, a1, a3, "Instantiating budgets", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E11F4(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "key = %@, value = %@", (uint8_t *)&v3, 0x16u);
}

void sub_1000E1278(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&v2, 0xCu);
}

void sub_1000E12EC(os_log_t log)
{
  int v1;
  uint64_t v2;

  v1 = 138412290;
  v2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to load model path %@", (uint8_t *)&v1, 0xCu);
}

void sub_1000E1364()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Logging Freezer skipped reasons to PowerLog %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E13C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Logging Prewarm to PowerLog %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E1424()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Logging Dock to PowerLog %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E1484()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Wrote inferred carry status to powerLog %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

uint64_t sub_1000E14E4()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "_OSChargingPredictor");
  return sub_1000E1508(v0);
}

uint64_t sub_1000E1508()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "_GDSManager");
  return sub_1000E152C(v0);
}

void sub_1000E152C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(a1, "pid")));
  sub_100017708((void *)&_mh_execute_header, v1, v2, "No identifier for activity %@ with PID %@", v3, v4, v5, v6, 2u);

}

void sub_1000E15DC(void *a1)
{
  void *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(a1, "pid")));
  v2 = __error();
  strerror(*v2);
  sub_100017708((void *)&_mh_execute_header, v3, v4, "Failed to obtain process name for PID %@: %s", v5, v6, v7, v8, 2u);

  sub_1000176D0();
}

void sub_1000E1684(uint64_t *a1, void *a2, double a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  void *v10;

  v4 = *a1;
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a3));
  v7 = 138412546;
  v8 = v4;
  v9 = 2112;
  v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Activity %@ consumed %@", (uint8_t *)&v7, 0x16u);

}

void sub_1000E1754(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Reporting to CA network usage %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000E17C8(id *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "name"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error reporting to CA with capacity or identifier for %@", (uint8_t *)&v4, 0xCu);

  sub_1000176D0();
}

void sub_1000E1858()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Did not monitor screen wake state for %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E18B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Failed to stop monitoring screen wake state for %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E1918()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "No longer tracking %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E1978(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001767C((void *)&_mh_execute_header, a1, a3, "Failed to get nrDeviceIdentifier with %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E19E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Failed to start monitoring screen wake state with identifier %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E1A40(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "topNPrediction"));
  v4 = 138412290;
  v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "TopN: %@", (uint8_t *)&v4, 0xCu);

}

uint64_t sub_1000E1AD4()
{
  char *v0;
  uint64_t v1;

  v0 = dlerror();
  v1 = abort_report_np("%s", v0);
  return sub_1000E1AF4(v1);
}

void sub_1000E1AF4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176EC((void *)&_mh_execute_header, a1, a3, "Entering alignment window", a5, a6, a7, a8, 0);
}

void sub_1000E1B28(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 134217984;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Found at index=%llu", (uint8_t *)&v2, 0xCu);
}

void sub_1000E1B9C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176EC((void *)&_mh_execute_header, a1, a3, "Exiting alignment window", a5, a6, a7, a8, 0);
}

void sub_1000E1BD0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "_NETRBClientCreate failed", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E1C00(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "_NETRBClientGetDynamicStoreKey failed to convert to CFStringRef", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E1C30(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "_NETRBClientGetDynamicStoreKey failed", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E1C60(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_1000176FC((void *)&_mh_execute_header, a2, a3, "Device Activity: %@", (uint8_t *)&v3);
}

void sub_1000E1CCC(id *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "deviceActivityTimeline"));
  v5 = 138412290;
  v6 = v3;
  sub_1000176FC((void *)&_mh_execute_header, a2, v4, "Device Activity: %@", (uint8_t *)&v5);

}

void sub_1000E1D5C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "Invalid PPS subsystem & category specified!", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E1D8C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to get PPS Data: %@!", (uint8_t *)&v2, 0xCu);
}

void sub_1000E1E00(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "Nil payload. Nothing to send to PPS.", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E1E30(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "No PPSTelemetryIdentifier provided!", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E1E60(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Reporting %@ to PPS", (uint8_t *)&v2, 0xCu);
}

uint64_t sub_1000E1ED4()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "PPSTimeSeries");
  return sub_1000E1EF8(v0);
}

uint64_t sub_1000E1EF8()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "PPSRequestDispatcher");
  return sub_1000E1F1C(v0);
}

uint64_t sub_1000E1F1C()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "PPSTimeSeriesRequest");
  return sub_1000E1F40(v0);
}

uint64_t sub_1000E1F40()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "PPSHistogramRequest");
  return sub_1000E1F64(v0);
}

uint64_t sub_1000E1F64()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "PPSIntervalSetRequest");
  return sub_1000E1F88(v0);
}

uint64_t sub_1000E1F88()
{
  NSObject *v0;

  v0 = abort_report_np("Unable to find class %s", "PPSEvent");
  return sub_1000E1FAC(v0);
}

void sub_1000E1FAC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "No app resumes/launches found", v1, 2u);
}

void sub_1000E1FEC()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10001AF00();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Unable to extract app resumes and launches due to %@", v1, 0xCu);
  sub_10001768C();
}

void sub_1000E2058(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No value found for some signpostinterval dictionary entries", v1, 2u);
}

void sub_1000E2098()
{
  uint64_t v0;
  os_log_t v1;

  sub_10001AF00();
  sub_10001771C((void *)&_mh_execute_header, v0, v1, "Converted app name %@ to bundle id %@");
  sub_10001768C();
}

void sub_1000E2104()
{
  uint64_t v0;
  os_log_t v1;

  sub_100053538();
  sub_10001771C((void *)&_mh_execute_header, v0, v1, "Duration for %@ too long (%lu)");
  sub_10001768C();
}

void sub_1000E2164(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("ProcessName")));
  sub_10001AF00();
  sub_100053524((void *)&_mh_execute_header, v5, v6, "Read %@ as an App Resume", v7, v8, v9, v10, v11);

  sub_1000176D0();
}

void sub_1000E21F4(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("ProcessName")));
  sub_10001AF00();
  sub_100053524((void *)&_mh_execute_header, v5, v6, "Read %@ as an App Foreground Launch", v7, v8, v9, v10, v11);

  sub_1000176D0();
}

void sub_1000E2284(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "fastpass_yield feature flag disabled", v1, 2u);
}

void sub_1000E22C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "successfully completed sink for analysis %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E2324()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10001AF00();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Couldn't finish analysis for %@", v1, 0xCu);
  sub_10001768C();
}

void sub_1000E2390()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Posting %@ to CA", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E23F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Pruning events older than %@ date", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E2450(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176EC((void *)&_mh_execute_header, a1, a3, "Reset Feature Duration Complete.", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E2480(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176EC((void *)&_mh_execute_header, a1, a3, "Initializing _DASFeatureDurationTracker!", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E24B0()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_10001771C((void *)&_mh_execute_header, v0, v1, "The current build %@ is the same as saved release version %@");
  sub_10001768C();
}

void sub_1000E2510()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_10001771C((void *)&_mh_execute_header, v0, v1, "The current build %@ is different from the saved release version %@");
  sub_10001768C();
}

void sub_1000E2570(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error loading feature codes.", v1, 2u);
  sub_1000176A4();
}

void sub_1000E25AC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "Reset featureDurationDict data successfully %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E2614(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "_featureDurationDict is now %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E267C(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Activity %@ is not in activity plist", buf, 0xCu);

}

uint64_t sub_1000E26D0()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "_OSBatteryDrainPredictor");
  return sub_1000E26F4(v0);
}

void sub_1000E26F4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v0, v1, "Updating 'CellQualityPredictions' to %@", v2);
  sub_10001768C();
}

void sub_1000E2758()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v0, v1, "Updating 'WiFiQualityPredictions' to %@", v2);
  sub_10001768C();
}

void sub_1000E27BC(id *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "wifiPredictionTimeline"));
  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, a2, v4, "Updating 'WiFiQualityPredictions' to %@", v5);

  sub_1000176D0();
}

void sub_1000E2840(id *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "cellPredictionTimeline"));
  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, a2, v4, "Updating 'CellQualityPredictions' to %@", v5);

  sub_1000176D0();
}

void sub_1000E28C4()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10001AF00();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Unable to obtain PNW status: %@", v1, 0xCu);
  sub_10001768C();
}

void sub_1000E2930(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_1000176FC((void *)&_mh_execute_header, a2, a3, "Plugin Likelihood: %@", (uint8_t *)&v3);
}

void sub_1000E299C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Fast pass activities are allowed to run on battery. Ignoring requiresExternalPower setting.", v1, 2u);
}

void sub_1000E29DC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Incorrect type %@ received for notChargingReason", (uint8_t *)&v2, 0xCu);
}

void sub_1000E2A50(id *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "pluginTimeline"));
  v5 = 138412290;
  v6 = v3;
  sub_1000176FC((void *)&_mh_execute_header, a2, v4, "Plugin Likelihood: %@", (uint8_t *)&v5);

}

void sub_1000E2AE0(uint64_t *a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *a1;
  v3 = 138412290;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to serialize bundleID: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000E2B58(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *a1;
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Truncating bundleID for serialization: %@ -> %@", (uint8_t *)&v4, 0x16u);
}

void sub_1000E2BE0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No Auto SU times returned--using default!", v1, 2u);
}

void sub_1000E2C20(uint64_t *a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *a1;
  v3 = 138412290;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to serialize bundleID: %@", (uint8_t *)&v3, 0xCu);
  sub_10001768C();
}

void sub_1000E2C94(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *a1;
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Truncating bundleID for serialization: %@ -> %@", (uint8_t *)&v4, 0x16u);
  sub_10001768C();
}

void sub_1000E2D18(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Writing app kill event: %@", (uint8_t *)&v2, 0xCu);
  sub_10001768C();
}

void sub_1000E2D88()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "DAS told us to run %{public}@, but no corresponding task found in helper", v2);
  sub_10001768C();
}

void sub_1000E2DEC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "DAS told us to run %{public}@, but activity mismatch detected in helper", v2);
  sub_10001768C();
}

void sub_1000E2E50()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "DAS told us to suspend %{public}@, but no corresponding task found in helper", v2);
  sub_10001768C();
}

void sub_1000E2EB4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "DAS told us to suspend %{public}@, but activity mismatch detected in helper", v2);
  sub_10001768C();
}

void sub_1000E2F18()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100069668(__stack_chk_guard);
  sub_100069648();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "%{public}@: Feature codes are mandatory for FastPass", v2);
  sub_10001768C();
}

void sub_1000E2F7C(void *a1, NSObject *a2)
{
  id v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "name"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, a2, v4, "%{public}@: Expected download size needs to be set when disk volume is set", v5);

  sub_1000176D0();
}

void sub_1000E3008(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_10002E424(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "name"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v3, v5, "%{public}@: relatedApplications cannot be empty when beforeApplicationLaunch is set to true", v6);

  sub_1000176D0();
}

void sub_1000E3098(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_10002E424(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "name"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v3, v5, "%{public}@: relatedApplications cannot be empty when requestsApplicationLaunch is set to true", v6);

  sub_1000176D0();
}

void sub_1000E3128(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_10002E424(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "name"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v3, v5, "%{public}@: relatedApplications cannot be empty when runOnAppForeground is set to true", v6);

  sub_1000176D0();
}

void sub_1000E31B8(void *a1, uint64_t a2, NSObject *a3)
{
  id v5;
  id v6;
  int v7;
  id v8;
  __int16 v9;
  id v10;
  __int16 v11;
  const char *v12;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "name"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  v7 = 138543874;
  v8 = v5;
  v9 = 2112;
  v10 = v6;
  v11 = 2080;
  v12 = "Maintenance";
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%{public}@: Invalid priority value %@, Defaulting to %s", (uint8_t *)&v7, 0x20u);

}

void sub_1000E32A8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100069668(__stack_chk_guard);
  sub_100069648();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "%{public}@: Invalid FastPass submission", v2);
  sub_10001768C();
}

void sub_1000E330C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100069668(__stack_chk_guard);
  sub_100069648();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "%{public}@: Feature codes, if present, must have entries", v2);
  sub_10001768C();
}

void sub_1000E3370()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100069668(__stack_chk_guard);
  sub_100069648();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "%{public}@: Invalid Feature codes submitted", v2);
  sub_10001768C();
}

void sub_1000E33D4(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_10002E424(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "name"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v3, v5, "FastPass %{public}@ should not ask to rerun via plist", v6);

  sub_1000176D0();
}

void sub_1000E3464(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_10002E424(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "name"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v3, v5, "%{public}@: Repeating activites must have an interval of more than 300 sec", v6);

  sub_1000176D0();
}

void sub_1000E34F4(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_10002E424(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "name"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v3, v5, "%{public}@: postinstall activites are not allowed to repeat", v6);

  sub_1000176D0();
}

void sub_1000E3584(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "xpc_get_event_name failed", v1, 2u);
}

void sub_1000E35C4()
{
  uint64_t v0;

  v0 = _os_assert_log(0);
  _os_crash(v0);
  __break(1u);
}

void sub_1000E35DC(uint64_t a1, void *a2)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "name"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v3, v5, "%{public}@: Dependencies require a valid identifier", v6);

  sub_1000176D0();
}

void sub_1000E366C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint8_t v8[14];
  uint64_t v9;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
  sub_100069654();
  v9 = a3;
  sub_10006963C((void *)&_mh_execute_header, v5, v7, "%{public}@: %{public}@ is an invalid dependency form, must be a dictionary", v8);

  sub_10001AEF0();
}

void sub_1000E3708()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "Client needs at least one feature code %{public}@", v2);
  sub_10001768C();
}

void sub_1000E376C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "FastPass dictionary not found for %{public}@", v2);
  sub_10001768C();
}

void sub_1000E37D0(void *a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  uint64_t v8;

  v5 = sub_10002E424(a1);
  v6[0] = 67109378;
  v6[1] = objc_msgSend(a2, "intValue");
  v7 = 2114;
  v8 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "FastPass feature code %d not found for task %{public}@", (uint8_t *)v6, 0x12u);

  sub_10001AEF0();
}

void sub_1000E3870()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_100069654();
  v3 = v0;
  sub_10006963C((void *)&_mh_execute_header, v1, (uint64_t)v1, "FastPass service name mismatch for input service name %{public}@ for task %{public}@", v2);
  sub_10001768C();
}

void sub_1000E38DC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%{public}@ bypasses predictions", (uint8_t *)&v2, 0xCu);
}

void sub_1000E3950(void **a1, void *a2, uint64_t a3)
{
  void *v4;
  NSObject *v5;
  void *v6;
  uint8_t v7[24];

  v4 = *a1;
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", a3));
  sub_10001AF00();
  _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Refreshed %@ from Biome persistence", v7, 0xCu);

}

void sub_1000E3A00(void *a1)
{
  NSObject *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  uint8_t v6[24];

  v2 = a1;
  v3 = sub_100071560();
  objc_opt_class(v3);
  sub_10001AF00();
  v5 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Tried to refresh state of an invalid class type: %@. Dropping group", v6, 0xCu);

  sub_100071520();
}

void sub_1000E3A98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Unable to refresh %@ due to insufficient file protection class", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E3AF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Ignoring dependency monitoring for %@; has not declared itself as involved in any chain",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10001768C();
}

void sub_1000E3B58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Stopping dependencies monitoring for %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E3BB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Cannot end dependency monitoring for %@; has not declared itself as involved in any chain",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10001768C();
}

void sub_1000E3C18()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 136315650;
  sub_100071534();
  sub_10001773C((void *)&_mh_execute_header, v0, v1, "%s: Failed to report result consumption on behalf of %@ with error: %@", v2);
  sub_100071520();
}

void sub_1000E3C8C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100071528(a1, a2);
  v3 = objc_msgSend((id)sub_100071560(), "description");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000714F8();
  sub_10007150C((void *)&_mh_execute_header, v5, v6, "%s: Dependency group for (identifier: %@) is not of the correct type", v7, v8, v9, v10, 2u);

  sub_100071520();
}

void sub_1000E3D18()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 136315650;
  sub_100071534();
  sub_10001773C((void *)&_mh_execute_header, v0, v1, "%s: Failed to report result production on behalf of %@ with error: %@", v2);
  sub_100071520();
}

void sub_1000E3D8C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100071528(a1, a2);
  v3 = objc_msgSend((id)sub_100071560(), "description");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000714F8();
  sub_10007150C((void *)&_mh_execute_header, v5, v6, "%s: Dependency group for (identifier: %@) is not of the correct type", v7, v8, v9, v10, 2u);

  sub_100071520();
}

void sub_1000E3E18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Ignoring activity running monitoring for %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E3E78(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100071528(a1, a2);
  v3 = objc_msgSend((id)sub_100071560(), "description");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000714F8();
  sub_10007150C((void *)&_mh_execute_header, v5, v6, "%s: Dependency group for (identifier: %@) is not of the correct type", v7, v8, v9, v10, 2u);

  sub_100071520();
}

void sub_1000E3F04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000714F8();
  sub_100071550((void *)&_mh_execute_header, v0, v1, "%s: No dependencies specified on %@, reporting dependencies as satisfied", v2, v3, v4, v5, 2u);
  sub_10001768C();
}

void sub_1000E3F70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000714F8();
  sub_100071550((void *)&_mh_execute_header, v0, v1, "%s: Dependencies on %@ are satisifed due to dependency pre-clearing", v2, v3, v4, v5, 2u);
  sub_10001768C();
}

void sub_1000E3FDC(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v3 = *a1;
  v4 = 136315650;
  v5 = "-[_DASActivityDependencyManager areDependenciesSatisfiedFor:]_block_invoke";
  v6 = 2112;
  v7 = v3;
  v8 = 2112;
  v9 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s: %@ has unsatisfied activity completion dependencies: %@", (uint8_t *)&v4, 0x20u);
  sub_100071520();
}

void sub_1000E4070(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "ATX not present", a5, a6, a7, a8, 0);
}

void sub_1000E40A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Next Timeline Value: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4104()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Current Timeline Value: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4164(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "Unable to construct app usage timeline", a5, a6, a7, a8, 0);
}

void sub_1000E4198()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Mean time Dict %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E41F8(void *a1)
{
  id v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = __error();
  strerror(*v2);
  sub_10001AF00();
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "Failed to obtain size for snapshot: %s", v5, v6, v7, v8, v9);

  sub_1000176D0();
}

void sub_1000E4274(void *a1)
{
  id v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = __error();
  strerror(*v2);
  sub_10001AF00();
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "Failed to obtain snapshot: %s", v5, v6, v7, v8, v9);

  sub_1000176D0();
}

uint64_t sub_1000E42F0()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "ATXProactiveSuggestionConsumer");
  return sub_1000E4314(v0);
}

void sub_1000E4314()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100033378();
  sub_1000176DC((void *)&_mh_execute_header, v0, v1, "notify_register_check for %@ failed (%d)\n", v2, v3, v4, v5, 2u);
  sub_10001768C();
}

void sub_1000E4380(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Init: Error setting up symptom feed", v1, 2u);
  sub_1000176A4();
}

void sub_1000E43BC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "sharedProfiler: Profiler dispatched", v1, 2u);
  sub_1000176A4();
}

void sub_1000E43F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "startProfilingSnapshot: network pre snapshot failed: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4458()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_10001771C((void *)&_mh_execute_header, v0, v1, "startProfilingSnapshot: %@ network pre snapshot successful %@");
  sub_10001768C();
}

void sub_1000E44B8()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_10001771C((void *)&_mh_execute_header, v0, v1, "startProfilingSnapshot: %@ rusage pre snapshot successful %@");
  sub_10001768C();
}

void sub_1000E4518(uint64_t a1, void *a2, int a3)
{
  NSObject *v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;

  v5 = sub_100079D78(a1, a2);
  v6 = *__error();
  v7 = 138412802;
  v8 = a1;
  v9 = 1024;
  v10 = a3;
  v11 = 1024;
  v12 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "startProfilingSnapshot: %@ rusage pre snapshot failed with retcode: %d err: %d ", (uint8_t *)&v7, 0x18u);

  sub_10001AEF0();
}

void sub_1000E45C0()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_10001771C((void *)&_mh_execute_header, v0, v1, "startProfilingSnapshot: %@ : Created session with value %@");
  sub_10001768C();
}

void sub_1000E4620(uint64_t a1, void *a2)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[24];

  sub_100079D78(a1, a2);
  sub_100079D6C();
  sub_100079D54();
  sub_100079D34((void *)&_mh_execute_header, v2, v3, "startProfilingSnapshot: %@ : failed at pc_session_begin with error %s", v4);

  sub_10001AEF0();
}

void sub_1000E46A0(uint64_t a1, void *a2)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[24];

  sub_100079D78(a1, a2);
  sub_100079D6C();
  sub_100079D54();
  sub_100079D34((void *)&_mh_execute_header, v2, v3, "startProfilingSnapshot: %@ : failed at pc_session_set_procpid with error %s", v4);

  sub_10001AEF0();
}

void sub_1000E4720()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100033378();
  sub_1000176DC((void *)&_mh_execute_header, v0, v1, "notify_get_state for %@ failed (%d)\n", v2, v3, v4, v5, 2u);
  sub_10001768C();
}

void sub_1000E478C()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10001AF00();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to write profiles to store with error %@ ", v1, 0xCu);
  sub_10001768C();
}

void sub_1000E47F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "endProfiling: %@ : stopRecordingNetworkTransfer returned nil", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4858()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "endProfiling: %@ : network post snapshot after for activity", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E48B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "endProfiling: %@ : Failed to retrieve rusage pre snapshot", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4918()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "endProfiling: %@ : rusage_post_snapshot failed for activity", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4978()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "endProfiling: %@ : Failed to retrieve saved session", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E49D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "startRecordingNetwork: %@ : Invalid appPIDName, aborting", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4A38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "startRecordingNetwork: %@ : Couldn't retrieve appNames, aborting", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4A98()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_10001771C((void *)&_mh_execute_header, v0, v1, "startRecordingNetwork: %@ : successfully recorded network consumption %@");
  sub_10001768C();
}

void sub_1000E4AF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "startRecordingNetwork: %@ : failed symptoms timedout, aborting.", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4B58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "startRecordingNetwork: %@ : failed to obtain network info for activity, aborting.", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4BB8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "startRecordingNetwork: %@ : symptoms handler recorded consumption successfully", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E4C20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "stopRecordingNetwork: %@ : Invalid appPIDName, aborting", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4C80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "stopRecordingNetwork: %@ : Couldn't retrieve appNames, aborting", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4CE0()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_10001771C((void *)&_mh_execute_header, v0, v1, "stopRecordingNetwork: %@ : successfully recorded network consumption %@");
  sub_10001768C();
}

void sub_1000E4D40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "stopRecordingNetwork: %@ : failed symptoms timedout, aborting.", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4DA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "stopRecordingNetwork: %@ : failed to obtain network info for activity, aborting.", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E4E00(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "stopRecordingNetwork: %@ : handler recorded consumption successfully", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E4E68()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_100079D40((void *)&_mh_execute_header, v0, v1, "%s Error getting value, required parameters missing for session: %@");
  sub_10001768C();
}

void sub_1000E4EC8()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_100079D40((void *)&_mh_execute_header, v0, v1, "%s Error getting value, no measurements available for session: %@");
  sub_10001768C();
}

void sub_1000E4F28()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_100079D40((void *)&_mh_execute_header, v0, v1, "%s Error getting value, proc_idx out of range for session: %@");
  sub_10001768C();
}

void sub_1000E4F88()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_100079D40((void *)&_mh_execute_header, v0, v1, "%s Error getting value, specified measures unavailable for session: %@");
  sub_10001768C();
}

void sub_1000E4FE8(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error retrieving current CPU uptime: %d", (uint8_t *)v2, 8u);
  sub_1000176A4();
}

void sub_1000E5058(void *a1, uint64_t a2, uint64_t a3)
{
  uint8_t *v4;
  NSObject *v5;

  sub_10007CFA4((uint64_t)a1, a2, a3, 5.778e-34);
  sub_10007CFBC((void *)&_mh_execute_header, "Failed to expire task: %@ with error: %@", v4, v5);

}

void sub_1000E50A0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "Unable to find recent installs", a5, a6, a7, a8, 0);
}

void sub_1000E50D4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "Unable to enumerate over entire signpost observer: %@", v2);
  sub_10001768C();
}

void sub_1000E5138(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "processName"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v3, v5, "Binary path unavailable for %@", v6);

  sub_1000176D0();
}

void sub_1000E51C8(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "processName"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v3, v5, "bundleIdentifier unavailable for %@", v6);

  sub_1000176D0();
}

void sub_1000E5258()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10001AF00();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Error processing signposts: %@, %@", v2, 0x16u);
  sub_10001768C();
}

void sub_1000E52D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "Error sending feature codes/version to PPS", a5, a6, a7, a8, 0);
}

void sub_1000E5308(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "Past Preview available checkpoints %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E536C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "Past Available checkpoints %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E53D0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "Fetched %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E5434(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "Error sending task dependency info to PPS", a5, a6, a7, a8, 0);
}

void sub_1000E5468()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_100017750((void *)&_mh_execute_header, v0, v1, "Activity is nil", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E5494()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_100017750((void *)&_mh_execute_header, v0, v1, "Now is nil", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E54C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_100017750((void *)&_mh_execute_header, v0, v1, "Activities is nil", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E54EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_100017750((void *)&_mh_execute_header, v0, v1, "Invalid paramters passed to snapshotWithSignature", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E5518(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 40);
  v4 = 138412546;
  v5 = a1;
  v6 = 2112;
  v7 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Successfully reported ABC case with session ID %@ for activities %@", (uint8_t *)&v4, 0x16u);
}

void sub_1000E55A0(int a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 40);
  v4 = 138412546;
  v5 = v3;
  v6 = 2048;
  v7 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "ABC case rejected for activities %@ with reason %lld", (uint8_t *)&v4, 0x16u);
}

void sub_1000E562C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_100017750((void *)&_mh_execute_header, v0, v1, "Cannot check activities for overdue tasks without BG task", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E5658(void *a1, uint64_t a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412546;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(_QWORD *)(buf + 14) = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Failed to expire task:%@ with error:%@", buf, 0x16u);

}

void sub_1000E56BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Scheduling overdue check", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E56E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Running overdue check", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E5714(void *a1, uint8_t *a2, _QWORD *a3, NSObject *a4)
{
  *(_DWORD *)a2 = 138412290;
  *a3 = a1;
  sub_1000176FC((void *)&_mh_execute_header, a4, (uint64_t)a3, "experimentsToWrite: Skipping stream %@", a2);

  sub_100089120();
}

void sub_1000E5760(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100025D18((void *)&_mh_execute_header, a2, a3, "experimentsToWrite: Sampled number is %u", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E57C4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100025D18((void *)&_mh_execute_header, a1, a3, "experimentsToWrite: Using denominator of %u", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E5834()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Unknown state for submission decision", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E5860()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Device already chosen for submission, activity must not have completed so far", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E588C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Device already chosen to not submit, activity must not have completed so far", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E58B8()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10001AF00();
  v3 = 2112;
  v4 = v0;
  sub_100079D34((void *)&_mh_execute_header, v1, (uint64_t)v1, "Adding %@ as stream for %@", v2);
  sub_10001768C();
}

void sub_1000E5930()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "writeExperiments: Couldn't obtain a file handler, aborting writing experiments", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E595C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Aborted writing to file, suspending self", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E5988(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_1000176FC((void *)&_mh_execute_header, a3, (uint64_t)a3, "defaults updated to %@", (uint8_t *)a2);

  sub_100089120();
}

void sub_1000E59D0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a1, a3, "lastWrittenInfo %@ writing to defaults", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E5A40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "writeExperiments: completed writing to file!", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E5A6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "writeExperiments: couldn't write to file, aborting!", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E5A98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Deferring datacollection activity", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E5AC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "writeExperiment: %@ : wasn't written", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E5B24()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10001AF00();
  v3 = 2048;
  v4 = v0;
  sub_100079D34((void *)&_mh_execute_header, v1, (uint64_t)v1, "writeExperiment: %@ : Written %lu streams", v2);
  sub_10001768C();
}

void sub_1000E5B98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Forcing device has enough history", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E5BC4(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];

  v3 = sub_10002E424(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "startDate"));
  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v3, v6, "writeExperiment: Data not old enough to be written. Oldest event logged at %@", v7);

  sub_10001AEF0();
}

void sub_1000E5C64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "writeExperiement: %@ : experiment is being written the first time", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E5CC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "writeExperiment: %@ : Force ignoring last written date", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E5D24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Experiment too recent. Skipping", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E5D50()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100058A5C();
  sub_100079D34((void *)&_mh_execute_header, v0, (uint64_t)v0, "writeExperiment: %@ : experiment was previously written on %@, working on only delta", v1);
  sub_10001768C();
}

void sub_1000E5DB8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint8_t *v6;
  NSObject *v7;

  sub_10007CFA4((uint64_t)a1, (uint64_t)a2, a3, 5.778e-34);
  sub_100079D34((void *)&_mh_execute_header, v7, v5, "Ultimately wrote %@ events for %@", v6);

  sub_100089120();
}

void sub_1000E5E08()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_100089114();
  v2 = sub_10002E424(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "name"));
  sub_1000890FC();
  sub_10001AEC4((void *)&_mh_execute_header, v4, v5, "writeStream: %@ : Adding extra predicate conditions, final predicate: %@", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E5E94()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_100089114();
  v2 = sub_10002E424(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "name"));
  sub_1000890FC();
  sub_10001AEC4((void *)&_mh_execute_header, v4, v5, "writeStream: %@ : Adding extra predicate conditions, final predicate: %@", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E5F20()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_100089114();
  v2 = sub_10002E424(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "name"));
  sub_1000890FC();
  sub_10001AEC4((void *)&_mh_execute_header, v4, v5, "writeStream: %@ : Adding extra predicate conditions, final predicate: %@", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E5FAC()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_100089114();
  v2 = sub_10002E424(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "name"));
  sub_1000890FC();
  sub_10001AEC4((void *)&_mh_execute_header, v4, v5, "writeStream: %@ : Adding extra predicate conditions, final predicate: %@", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E6038()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_100089114();
  v2 = sub_10002E424(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "name"));
  sub_1000890FC();
  sub_10001AEC4((void *)&_mh_execute_header, v4, v5, "writeStream: %@ : Adding extra predicate conditions, final predicate: %@", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E60C4()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_100089114();
  v2 = sub_10002E424(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "name"));
  sub_1000890FC();
  sub_10001AEC4((void *)&_mh_execute_header, v4, v5, "writeStream: %@ : Adding extra predicate conditions, final predicate: %@", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E6150(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint8_t *v5;
  NSObject *v6;

  sub_10007CFA4((uint64_t)a1, a2, a3, 5.778e-34);
  sub_10006963C((void *)&_mh_execute_header, v6, v4, "writeStream: %@ : Skipping query because JSON write failed with exception: %@", v5);

  sub_100089120();
}

void sub_1000E6198()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Processed events are not valid JSON objects, skipping with error %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E61F8(void *a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = sub_10002E424(a1);
  objc_msgSend(a2, "count");
  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v3, v4, "processEvents: Processed %lu events", v5);

  sub_1000176D0();
}

void sub_1000E627C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Submitting through Diagnostic Pipeline - successful", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E62A8(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_10002E424(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v3, v5, "Submitting through Diagnostic Pipeline - failed with error %@", v6);

  sub_1000176D0();
}

void sub_1000E6334()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Forcing DP route, but actually skipping submission", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E6360()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Submitting through Crash Reporter - successful", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E638C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Submitting through Crash Reporter - failed", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E63B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Submitting through Crash Reporter Pipeline", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E63E4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100025D18((void *)&_mh_execute_header, a1, a3, "diagnostic pipeline shunt sampling with default %u", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E6450(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  int v4;

  v2[0] = 67109376;
  v2[1] = a1;
  v3 = 1024;
  v4 = 10;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Trial diagnostic pipeline shunt percentage found: sampling 1 in %u instead of default 1 in %u", (uint8_t *)v2, 0xEu);
  sub_10001768C();
}

void sub_1000E64D0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a1, a3, "%s: packed database is missing or corrupt, abort\n", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E6540(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a1, a3, "%s: unable to map file, abort upload", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E65B0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a1, a3, "%s: error writing log for submission", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E6620()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Invalid stream: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E6680(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v5 = 138412546;
  v6 = v3;
  v7 = 2048;
  v8 = v4;
  sub_100079D34((void *)&_mh_execute_header, a2, a3, "Convert stream: %@ Found %ld events", (uint8_t *)&v5);
  sub_10001768C();
}

void sub_1000E6700()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100058A5C();
  sub_10006963C((void *)&_mh_execute_header, v0, (uint64_t)v0, "Failed to submit task %@ with error: %@", v1);
  sub_10001768C();
}

void sub_1000E6768()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "force: wrote %lld experiments", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E67C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "force: didn't write any experiment to file", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E67F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "force: attempting to write experiments: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E6854()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "force: Running data collection", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E6880()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "schedule: Running background app refresh analytics background task", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E68AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "schedule: Running analytics background task", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E68D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Insignificant usage; ignoring", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E6904(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a1, a3, "Correlation is %lf", a5, a6, a7, a8, 0);
  sub_10001768C();
}

void sub_1000E696C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "AirPods: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E69CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Error fetching data: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E6A2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Media playback: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

uint64_t sub_1000E6A8C()
{
  int v0;
  int v1;
  os_log_t v2;

  v0 = abort_report_np("Unable to find class %s", "OSIUtilities");
  return sub_1000E6AB0(v0, v1, v2);
}

void sub_1000E6AB0(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Evaluating %@ for mode %@", (uint8_t *)&v3, 0x16u);
}

void sub_1000E6B34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Error in registering for IOService", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E6B60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Unable to create notification port", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E6B8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Unable to register notification", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E6BB8(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v3 = *a1;
  v4 = 134218496;
  v5 = a2;
  v6 = 2048;
  v7 = v3;
  v8 = 2048;
  v9 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Current temp %ld, recent temp %ld, change %ld", (uint8_t *)&v4, 0x20u);
}

void sub_1000E6C48(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001767C((void *)&_mh_execute_header, a2, a3, "Unable to get valid battery temperature: %@", a5, a6, a7, a8, 2u);
}

void sub_1000E6CB0(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to get battery properties: %d", (uint8_t *)v2, 8u);
  sub_1000176A4();
}

void sub_1000E6D20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Couldn't create _DKEvent", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E6D4C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001767C((void *)&_mh_execute_header, a2, a3, "Couldn't write batteryTempEvent to store with error %@", a5, a6, a7, a8, 2u);
}

void sub_1000E6DB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Rescheduling refreshes (if necessary) for %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E6E14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Canceling refreshes (if any) for %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E6E74(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "BAR WiFi Only => %u", (uint8_t *)v2, 8u);
}

void sub_1000E6EE8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "Disallowed are: %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000E6F54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Killed are: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E6FB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "App killed: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E7014(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_10002E424(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "error"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v3, v5, "Error obtaining recently launched apps: %@", v6);

}

void sub_1000E70A8(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;

  v3 = 138412290;
  v4 = CFSTR("We tried to launch Buddy for Background App Refresh. Please file a bug!");
  sub_100017730((void *)&_mh_execute_header, a1, a3, "%@", (uint8_t *)&v3);
  sub_10001768C();
}

void sub_1000E711C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Scheduling activities for %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E717C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Remote Notification: %@ - Debugging", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E71DC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "Error obtaining RBS process handle: %@", v2);
  sub_10001768C();
}

void sub_1000E7240()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Delays are %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E72A0()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_10008F050();
  sub_10002E424(v1);
  v2 = objc_msgSend((id)sub_10008F044(), "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_10008F02C();
  sub_10008F018((void *)&_mh_execute_header, v4, v5, "No permitted identifiers found for activity %{public}@ app %{public}@", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E7324()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_10008F050();
  sub_10002E424(v1);
  v2 = objc_msgSend((id)sub_10008F044(), "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_10008F02C();
  sub_10008F018((void *)&_mh_execute_header, v4, v5, "No relevant background execution modes found for activity %{public}@ app %{public}@", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E73A8()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_10008F050();
  sub_10002E424(v1);
  v2 = objc_msgSend((id)sub_10008F044(), "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_10008F02C();
  sub_10008F018((void *)&_mh_execute_header, v4, v5, "Activity %{public}@ background launch not allowed for app %{public}@", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E742C()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_10008F050();
  sub_10002E424(v1);
  v2 = objc_msgSend((id)sub_10008F044(), "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_10008F02C();
  sub_10008F018((void *)&_mh_execute_header, v4, v5, "Activity %{public}@: app %{public}@ is not installed", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E74B0()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_10008F050();
  sub_10002E424(v1);
  v2 = objc_msgSend((id)sub_10008F044(), "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_10008F02C();
  sub_10008F018((void *)&_mh_execute_header, v4, v5, "Activity %{public}@: app %{public}@ has invalid state", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E7534(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Fetched %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000E75A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "No reference data for progress in last 48 hours; Skipping TTR",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_1000176A4();
}

void sub_1000E75D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Triggering TTR MAD slow progress", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E7600()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "MAD slow progress TTR was prompted in last 30 days; Skipping",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_1000176A4();
}

void sub_1000E762C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Small photo library; Skipping progress check", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E7658(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "Timer fired for CA remote widget budget duration", a5, a6, a7, a8, 0);
}

void sub_1000E768C(double a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1 / 3600.0));
  sub_100017760((void *)&_mh_execute_header, v2, v3, "Logging remote widget actual duration to CA %@", v4, v5, v6, v7, 2u);

  sub_1000176D0();
}

void sub_1000E771C(double a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1 / 3600.0));
  sub_100017760((void *)&_mh_execute_header, v2, v3, "Logging remote widget duration to CA %@", v4, v5, v6, v7, 2u);

  sub_1000176D0();
}

void sub_1000E77AC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001767C((void *)&_mh_execute_header, a2, a3, "Duration is over a day %@", a5, a6, a7, a8, 2u);
}

void sub_1000E7818(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "No actual unavailable date was recorded", a5, a6, a7, a8, 0);
}

void sub_1000E784C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001767C((void *)&_mh_execute_header, a2, a3, "Actual Duration is over a day %@", a5, a6, a7, a8, 2u);
}

void sub_1000E78B8(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v5 = 138412290;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Missing service name for %@", (uint8_t *)&v5, 0xCu);

}

void sub_1000E795C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Failed to fetch service name for %{public}@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E79BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Failed to create BGSystemTask: %{public}@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E7A1C()
{
  uint64_t v0;
  os_log_t v1;

  sub_100097DD0();
  sub_100079D40((void *)&_mh_execute_header, v0, v1, "Failed to submit BGSystemTask: %{public}@ with error %{public}@");
  sub_10001768C();
}

void sub_1000E7A84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "xpc_get_event_name failed", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E7AB0(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  os_log_t v5;
  os_log_type_t v6;
  const char *v7;
  uint8_t *v8;

  sub_100097E08(a1);
  v2 = objc_msgSend((id)sub_10008F044(), "scheduler_activity");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_10001AF00();
  sub_100097E24();
  _os_log_error_impl(v4, v5, v6, v7, v8, 0x20u);

  sub_100097DAC();
}

void sub_1000E7B58(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_10002E424(a1);
  v2 = objc_msgSend((id)sub_10008F044(), "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_100097E34();
  sub_100097E10((void *)&_mh_execute_header, v4, v5, "xpc_event_publisher_fire failed to run %{public}@ with error %d", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E7BE0(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_10002E424(a1);
  v2 = objc_msgSend((id)sub_10008F044(), "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_100097E34();
  sub_100097E10((void *)&_mh_execute_header, v4, v5, "xpc_event_publisher_fire failed to suspend %{public}@ with error %d", v6, v7, v8, v9, v10);

  sub_10001AEF0();
}

void sub_1000E7C68(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  os_log_t v5;
  os_log_type_t v6;
  const char *v7;
  uint8_t *v8;

  sub_10002E424(a1);
  v2 = objc_msgSend((id)sub_10008F044(), "scheduler_activity");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_10001AF00();
  sub_100097E24();
  _os_log_error_impl(v4, v5, v6, v7, v8, 0x16u);

  sub_10001AEF0();
}

void sub_1000E7D10(void *a1, void *a2)
{
  void *v2;
  void *v4;
  os_log_t v5;
  os_log_type_t v6;
  const char *v7;
  uint8_t *v8;

  sub_100097E08(a1);
  objc_msgSend((id)sub_10008F044(), "state");
  objc_msgSend(a2, "pid");
  sub_100097E24();
  _os_log_error_impl(v4, v5, v6, v7, v8, 0x26u);

  sub_100097DAC();
}

void sub_1000E7DD4(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_100097E08(a1);
  sub_100097DF0();
  sub_100097DFC();
  sub_100017774();
  sub_100097DBC((void *)&_mh_execute_header, v2, v3, "Ack for suspension received in invalid state %ld from client (PID %d) for %{public}@", v4, v5, v6, v7, v8);

  sub_100097DAC();
}

void sub_1000E7E4C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_100097E08(a1);
  sub_100097DF0();
  sub_100097DFC();
  sub_100017774();
  sub_100097DBC((void *)&_mh_execute_header, v2, v3, "Request for client-led expiration received in invalid state %ld from client (PID %d) for %{public}@", v4, v5, v6, v7, v8);

  sub_100097DAC();
}

void sub_1000E7EC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "submitTaskRequestWithIdentifier: Failed to fetch service name for %{public}@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E7F24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "submitTaskRequestWithIdentifier: Failed to create BGSystemTask: %{public}@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E7F84()
{
  uint64_t v0;
  os_log_t v1;

  sub_100097DD0();
  sub_100079D40((void *)&_mh_execute_header, v0, v1, "submitTaskRequestWithIdentifier: Failed to submit BGSystemTask: %{public}@ with error %{public}@");
  sub_10001768C();
}

void sub_1000E7FEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "submitTaskRequestWithIdentifier: xpc_event_publisher_create_subscription failed", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8018()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "submitTaskRequestWithIdentifier: Clearing registration via xpc_event_publisher_set_event failed", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8044()
{
  uint64_t v0;
  os_log_t v1;

  sub_100097DD0();
  sub_100079D40((void *)&_mh_execute_header, v0, v1, "Failed to update BGSystemTask %{public}@ with error %{public}@");
  sub_10001768C();
}

void sub_1000E80AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "updateTaskRequestWithIdentifier: xpc_event_publisher_set_event failed", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E80D8(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_100097E08(a1);
  sub_100097DF0();
  sub_100097DFC();
  sub_100017774();
  sub_100097DBC((void *)&_mh_execute_header, v2, v3, "updateTaskRequest received in invalid state %ld from client (PID %d) for %{public}@", v4, v5, v6, v7, v8);

  sub_100097DAC();
}

void sub_1000E8150()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "completeSystemTaskWithIdentifier: xpc_event_publisher_set_event failed", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E817C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_100097E08(a1);
  sub_100097DF0();
  sub_100097DFC();
  sub_100017774();
  sub_100097DBC((void *)&_mh_execute_header, v2, v3, "Completion received in invalid state %ld from client (PID %d) for %{public}@", v4, v5, v6, v7, v8);

  sub_100097DAC();
}

void sub_1000E81F4(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_100097E08(a1);
  sub_100097DF0();
  sub_100097DFC();
  sub_100017774();
  sub_100097DBC((void *)&_mh_execute_header, v2, v3, "Resume scheduling received in invalid state %ld from client (PID %d) for %{public}@", v4, v5, v6, v7, v8);

  sub_100097DAC();
}

void sub_1000E826C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "unregisterSystemTaskWithIdentifier: xpc_event_publisher_set_event failed", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8298(char a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "SUTelemetryTask: In SmartPowerNap: %d", (uint8_t *)v2, 8u);
  sub_1000176A4();
}

void sub_1000E830C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: task expired without ever becoming eligible.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8338()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: executed task moved to not-yet-eligible again.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8364()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: expired task moved to not-yet-eligible again.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8390()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: task has expired.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E83BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: task is now eligible.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E83E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: task is currently eligible.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8414()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: evaluating activity on tick.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8440()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: Evaluating policies.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E846C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: Reporting task expirationNeverEligible to CoreAnalytics.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8498(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1;
  sub_100099630();
  sub_100053524((void *)&_mh_execute_header, v3, v4, "SUTelemetryTask: Reporting %lu blockers to CoreAnalytics.", v5, v6, v7, v8, 0);

  sub_1000176D0();
}

void sub_1000E8510()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: Reporting success to CoreAnalytics.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E853C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: Reporting eligibility to CoreAnalytics.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8568()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: Reporting task expiration to CoreAnalytics.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8594()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "SUTelemetryTask: Reporting BlockReasonsCardinality on expiration to CoreAnalytics.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E85C0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2;
  sub_100099630();
  sub_100053524((void *)&_mh_execute_header, v4, v5, "SUTelemetryTask: Reporting %lu persistentBlockers to CoreAnalytics.", v6, v7, v8, v9, 0);

  sub_1000176D0();
}

void sub_1000E8638(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Updating progress for %@ to %@", (uint8_t *)&v3, 0x16u);
}

uint64_t sub_1000E86BC()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "APKActivityProgress");
  return sub_1000E86E0(v0);
}

void sub_1000E86E0(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to update scores for error: %d", (uint8_t *)v2, 8u);
}

void sub_1000E8754(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "error"));
  v6 = 138412290;
  v7 = v4;
  sub_100017730((void *)&_mh_execute_header, v3, v5, "Unable to open sink with error: %@", (uint8_t *)&v6);

  sub_100071520();
}

void sub_1000E87EC(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_100017730((void *)&_mh_execute_header, a2, a3, "%@ is missing the event body!", (uint8_t *)&v3);
}

void sub_1000E8858(void *a1, void *a2)
{
  NSObject *v3;
  int v4;
  void *v5;
  __int16 v6;
  unsigned int v7;

  v3 = a2;
  v4 = 138412546;
  v5 = a1;
  v6 = 1024;
  v7 = objc_msgSend(a1, "type");
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid type of result event for %@: %d", (uint8_t *)&v4, 0x12u);

  sub_100071520();
}

void sub_1000E88F8()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  sub_10009E39C(__stack_chk_guard);
  v2 = 136315650;
  sub_10009E380();
  sub_10001773C((void *)&_mh_execute_header, v0, v1, "%s: Unable to register producing activity for %@ with error: %@", v2);
  sub_100071520();
}

void sub_1000E8964()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  sub_10009E39C(__stack_chk_guard);
  v2 = 136315650;
  sub_10009E380();
  sub_10001773C((void *)&_mh_execute_header, v0, v1, "%s: Unable to deregister producing activity for %@ with error: %@", v2);
  sub_100071520();
}

void sub_1000E89D0()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 136315650;
  sub_100071534();
  sub_10001773C((void *)&_mh_execute_header, v0, v1, "%s: Unable to report %@ result consumption with error: %@", v2);
  sub_100071520();
}

void sub_1000E8A44()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 136315650;
  sub_100071534();
  sub_10001773C((void *)&_mh_execute_header, v0, v1, "%s: Unable to report %@ result production with error: %@", v2);
  sub_100071520();
}

void sub_1000E8AB8(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v3 = 136315394;
  v4 = "-[_DASActivityResultDependencyGroup resetAccumulation]_block_invoke";
  v5 = 2112;
  v6 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s: Result dependencies have been reset for %@", (uint8_t *)&v3, 0x16u);
}

void sub_1000E8B48()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v0, v1, "Exiting RBS handler with %@", v2);
  sub_10001768C();
}

void sub_1000E8BAC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v0, v1, "Entering RBS handler with %@", v2);
  sub_10001768C();
}

void sub_1000E8C10()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v0, v1, "%@ has frontboard visibility", v2);
  sub_10001768C();
}

void sub_1000E8C74()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v0, v1, "Current dock policy: %@", v2);
  sub_10001768C();
}

void sub_1000E8CD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Policy update complete.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8D04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Performing a policy update.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8D30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Solver input is too large, not computing a policy update.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8D5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Solver error.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8D88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Solver no feasible solution.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8DB4(void *a1, uint64_t a2, unsigned int *a3)
{
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  void *v14;

  v5 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a3));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *a3 - a2));
  v9 = 138412802;
  v10 = v6;
  v11 = 2112;
  v12 = v7;
  v13 = 2112;
  v14 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Policy footprint: %@, Capacity constraint: %@, Unused capacity: %@", (uint8_t *)&v9, 0x20u);

}

void sub_1000E8EC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Error: Failed to allocate QVector for quantization.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8EEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176AC((void *)&_mh_execute_header, v0, v1, "Error: Failed to allocate vector for quantization.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E8F18(void *a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v3, v5, "Number of active dock assertions: %@", v6);

  sub_10001AEF0();
}

void sub_1000E8FBC()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100058A5C();
  sub_100079D34((void *)&_mh_execute_header, v0, (uint64_t)v0, "Acquired assertion %@ for process %@.", v1);
  sub_10001768C();
}

void sub_1000E9024()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v0, v1, "Process %@ died. Invalidating its assertion...", v2);
  sub_10001768C();
}

void sub_1000E9088()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100058A5C();
  sub_100079D34((void *)&_mh_execute_header, v0, (uint64_t)v0, "Invalidating assertion %@ for process %@.", v1);
  sub_10001768C();
}

void sub_1000E90F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Created RBSProcessMonitor monitoring all applications.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E911C(void *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;

  v5 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2));
  v8 = 138412546;
  v9 = v6;
  v10 = 2112;
  v11 = a3;
  sub_100079D34((void *)&_mh_execute_header, v5, v7, "Could not get handle for process with pid %@. %@", (uint8_t *)&v8);

  sub_10001AEF0();
}

void sub_1000E91D0(void *a1)
{
  NSObject *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = a1;
  v3 = objc_msgSend((id)sub_1000A1C20(), "numberWithInt:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v1, v5, "Could not get processIdentifier for process with pid %@.", v6);

  sub_10001AEF0();
}

void sub_1000E9268()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000273A4();
  sub_1000176EC((void *)&_mh_execute_header, v0, v1, "Warning: Failed to get ledger template info.", v2, v3, v4, v5, v6);
  sub_1000176A4();
}

void sub_1000E9294(void *a1)
{
  NSObject *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = a1;
  v3 = objc_msgSend((id)sub_1000A1C20(), "numberWithInt:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v1, v5, "Warning: Could not get ledger info for pid %@.", v6);

  sub_10001AEF0();
}

void sub_1000E932C(void *a1)
{
  NSObject *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = a1;
  v3 = objc_msgSend((id)sub_1000A1C20(), "numberWithInt:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v1, v5, "Warning: Could not get ledger entry info for pid %@.", v6);

  sub_10001AEF0();
}

void sub_1000E93C4(void *a1, int a2)
{
  NSObject *v3;
  int v4;
  int *v5;
  char *v6;
  _DWORD v7[2];
  __int16 v8;
  int v9;
  __int16 v10;
  char *v11;

  v3 = a1;
  v4 = *__error();
  v5 = __error();
  v6 = strerror(*v5);
  v7[0] = 67109634;
  v7[1] = a2;
  v8 = 1024;
  v9 = v4;
  v10 = 2080;
  v11 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error: sysctlbyname(\"hw.memsize\") failed (rc: %d, errno: %d, %s)", (uint8_t *)v7, 0x18u);

  sub_10001AEF0();
}

void sub_1000E947C(void *a1)
{
  NSObject *v1;
  double v2;
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v1 = a1;
  LODWORD(v2) = 10.0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v2));
  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v1, v4, "Using default capacity percentage: %@ percent", v5);

}

void sub_1000E951C(void *a1, float a2)
{
  NSObject *v3;
  double v4;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];

  v3 = a1;
  *(float *)&v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4));
  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, v3, v6, "Overriding capacity with percentage provided via defaults: %@ percent", v7);

}

void sub_1000E95C8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "Next Timeline Value: %@", a5, a6, a7, a8, 2u);
}

void sub_1000E9630(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "Current Timeline Value: %@", a5, a6, a7, a8, 2u);
}

void sub_1000E9698(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "prewarm_app feature flag disabled", v1, 2u);
}

void sub_1000E96D8(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "error"));
  v6 = 138412290;
  v7 = v4;
  sub_100017730((void *)&_mh_execute_header, v3, v5, "Unable to open sink with error: %@", (uint8_t *)&v6);

  sub_1000176D0();
}

void sub_1000E976C(void *a1, void *a2)
{
  NSObject *v3;
  int v4;
  void *v5;
  __int16 v6;
  unsigned int v7;

  v3 = a2;
  v4 = 138412546;
  v5 = a1;
  v6 = 1024;
  v7 = objc_msgSend(a1, "type");
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid type of completion event for %@: %d", (uint8_t *)&v4, 0x12u);

  sub_1000176D0();
}

void sub_1000E9808(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = 136315394;
  v4 = "-[_DASActivityCompletionDependencyGroup resetAccumulation]_block_invoke";
  v5 = 2112;
  v6 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s: Resetting completion dependencies for %@", (uint8_t *)&v3, 0x16u);
}

void sub_1000E9898(void *a1)
{
  id v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  v2 = __error();
  strerror(*v2);
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "Failed to obtain size for snapshot: %s", v5, v6, v7, v8, 2u);

  sub_1000176D0();
}

void sub_1000E9918(void *a1)
{
  id v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  v2 = __error();
  strerror(*v2);
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "Failed to obtain snapshot: %s", v5, v6, v7, v8, 2u);

  sub_1000176D0();
}

void sub_1000E9998()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Deleting activities: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E99F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100069648();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "STARTING %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E9A5C(id *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "assertion"));
  v7 = 138412546;
  v8 = v5;
  v9 = 2112;
  v10 = a2;
  sub_10006963C((void *)&_mh_execute_header, a3, v6, "Error invalidating assertion %@: %@", (uint8_t *)&v7);

  sub_10001AEF0();
}

void sub_1000E9AF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100069648();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Interested activities %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E9B5C()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[12];
  __int16 v4;
  uint64_t v5;

  sub_100069648();
  v4 = 2112;
  v5 = v0;
  sub_100079D34((void *)&_mh_execute_header, v1, v2, "Running completion for app: %@ for activities: %@", v3);
  sub_10001768C();
}

void sub_1000E9BD0(uint8_t *a1, uint64_t a2, _QWORD *a3, NSObject *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 64);
  *(_DWORD *)a1 = 138543362;
  *a3 = v4;
  sub_1000176FC((void *)&_mh_execute_header, a4, (uint64_t)a3, "%{public}@", a1);
}

void sub_1000E9C18(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "extensionName"));
  sub_10001AF00();
  sub_1000176FC((void *)&_mh_execute_header, a2, v4, "Sending suspend signal to extension %{public}@", v5);

  sub_1000176D0();
}

void sub_1000E9C98(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "extensionName"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, a2, v4, "Extension %{public}@ did not suspend in time. Forcefully unloading.", v5);

  sub_1000176D0();
}

void sub_1000E9D1C(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;
  signed int v8;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "assertion"));
  v8 = objc_msgSend(v7, "pid");
  *(_DWORD *)a1 = 134217984;
  *a3 = v8;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "Failed to drop assertion for app with pid: %ld", a1, 0xCu);

}

void sub_1000E9D98(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "Failed to generate stackshot", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000E9DC8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100069668(__stack_chk_guard);
  sub_100069648();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "BUG IN CLIENT: %{public}@ was asked to run but never started. Please file a radar.", v2);
  sub_10001768C();
}

void sub_1000E9E2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100069668(__stack_chk_guard);
  sub_100069648();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "%{public}@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000E9E8C(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "name"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "debugDescription"));
  sub_1000C3A0C();
  sub_10006963C((void *)&_mh_execute_header, a2, v6, "ERROR Submitting Activity: %@ due to configuration limits. Please contact das-core@group.apple.com to prevent this activity from getting rejected. Configuration: %@", v7);

  sub_10001AEF0();
}

void sub_1000E9F28(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "debugDescription"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, a2, v4, "WARNING Submitting Activity: %@ due to configuration limits", v5);

  sub_1000176D0();
}

void sub_1000E9FA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "WARNING: Test mode is ON so activity %{public}@ is not limited by configuration limits", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000EA008()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100058A5C();
  sub_10006963C((void *)&_mh_execute_header, v0, (uint64_t)v0, "Error invalidating assertion for activity %@: %@", v1);
  sub_10001768C();
}

void sub_1000EA070(id *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "debugDescription"));
  sub_1000C3A0C();
  sub_10006963C((void *)&_mh_execute_header, a2, v6, "Bad duration %@ for activity %@", v7);

  sub_10001AEF0();
}

void sub_1000EA114(id *a1, NSObject *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;
  __int16 v8;
  void *v9;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "identifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", 0.0));
  v6 = 138412546;
  v7 = v3;
  v8 = 2112;
  v9 = v4;
  sub_100079D34((void *)&_mh_execute_header, a2, v5, "No endtime for activity %@, using now as end date. Duration is %@", (uint8_t *)&v6);

  sub_10001AEF0();
}

void sub_1000EA1C8()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100058A5C();
  sub_100079D34((void *)&_mh_execute_header, v0, (uint64_t)v0, "Recording %@ transition to %@ state to dastestd task execution registry", v1);
  sub_10001768C();
}

void sub_1000EA230()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Scheduling timer for %{public}@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000EA290(void *a1, uint64_t a2, NSObject *a3, void *a4)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100017730((void *)&_mh_execute_header, a3, (uint64_t)a3, "Identical launch request already scheduled for %@", (uint8_t *)a2);

}

void sub_1000EA2E4(void *a1, uint64_t a2, NSObject *a3, void *a4)
{
  *(_DWORD *)a2 = 138543362;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100017730((void *)&_mh_execute_header, a3, (uint64_t)a3, "Not Supported: High-priority silent push. (App=%{public}@)", (uint8_t *)a2);

}

void sub_1000EA338(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100025D18((void *)&_mh_execute_header, a2, a3, "Scheduling connection timeout for pid %d...", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000EA39C(int *a1, NSObject *a2)
{
  int v2;
  _DWORD v3[2];

  v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to connect to app with pid %d after 10 seconds, dropping all assertions", (uint8_t *)v3, 8u);
  sub_1000176A4();
}

void sub_1000EA410(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100025D18((void *)&_mh_execute_header, a2, a3, "Checking whether the app with pid %d has connected...", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000EA478()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100069668(__stack_chk_guard);
  sub_100069648();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "Unable to write newline to %@", v2);
  sub_10001768C();
}

void sub_1000EA4DC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "Unable to write data to file: %@", v2);
  sub_10001768C();
}

void sub_1000EA540()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "Unable to serialize chunked dictionary to JSON: %@", v2);
  sub_10001768C();
}

void sub_1000EA5A4(void *a1, NSObject *a2)
{
  id v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description")));
  objc_msgSend(v3, "UTF8String");
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, a2, v4, "Unable to remove temporary file: %s", v5);

  sub_1000176D0();
}

void sub_1000EA62C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "name"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, a2, v4, "Error occurred sending symptoms %@", v5);

  sub_1000176D0();
}

void sub_1000EA6AC()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10001AF00();
  v3 = 2080;
  v4 = v0;
  sub_10006963C((void *)&_mh_execute_header, v1, (uint64_t)v1, "%@ (%s)", v2);
  sub_10001768C();
}

void sub_1000EA720(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "_prewarmSuspendIncomingHandler reply skipped", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000EA750(const char *a1)
{
  NSString *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = NSStringFromSelector(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_10001AF00();
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "Illegal call to %@, invalidating", v5, v6, v7, v8, v9);

  sub_1000176D0();
}

void sub_1000EA7C8(const char *a1)
{
  NSString *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = NSStringFromSelector(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_10001AF00();
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "Illegal call to %@, invalidating", v5, v6, v7, v8, v9);

  sub_1000176D0();
}

void sub_1000EA844(const char *a1)
{
  NSString *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = NSStringFromSelector(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_10001AF00();
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "Illegal call to %@, invalidating", v5, v6, v7, v8, v9);

  sub_1000176D0();
}

void sub_1000EA8C0(const char *a1)
{
  NSString *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = NSStringFromSelector(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_10001AF00();
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "Illegal call to %@, invalidating", v5, v6, v7, v8, v9);

  sub_1000176D0();
}

void sub_1000EA93C(const char *a1)
{
  NSString *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = NSStringFromSelector(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_10001AF00();
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "Illegal call to %@, invalidating", v5, v6, v7, v8, v9);

  sub_1000176D0();
}

void sub_1000EA9B8(const char *a1)
{
  NSString *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = NSStringFromSelector(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_10001AF00();
  sub_1000176BC((void *)&_mh_execute_header, v3, v4, "Illegal call to %@, invalidating", v5, v6, v7, v8, v9);

  sub_1000176D0();
}

void sub_1000EAA34()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "can't extract application ID from '%@'", v2);
  sub_10001768C();
}

void sub_1000EAA98(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "team prefix must be followed by a dot.", v1, 2u);
}

void sub_1000EAAD8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "team prefix must only contain characters in [0-9,A-Z] (%@)", v2);
  sub_10001768C();
}

void sub_1000EAB3C()
{
  NSObject *v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;
  __int16 v7;
  uint64_t v8;

  sub_10008F050();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "unsafe_applicationBundleIdentifier"));
  v5 = 138412546;
  v6 = v3;
  v7 = 2112;
  v8 = v1;
  sub_10006963C((void *)&_mh_execute_header, v0, v4, "Unable to obtain extension record for %@ with error %@", (uint8_t *)&v5);

  sub_10001AEF0();
}

void sub_1000EABD0()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_10008F050();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "name"));
  objc_msgSend(*v0, "processIdentifier");
  sub_1000C89E4();
  sub_1000C89D0((void *)&_mh_execute_header, v3, v4, "%{public}@: Process %d not entitled", v5, v6, v7, v8, v9);

  sub_10001AEF0();
}

void sub_1000EAC54()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100058A5C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Submitting task %@: %@", v1, 0x16u);
  sub_10001768C();
}

void sub_1000EACC4()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100058A5C();
  sub_10006963C((void *)&_mh_execute_header, v0, (uint64_t)v0, "Could not validate request %@ due to error %@", v1);
  sub_10001768C();
}

void sub_1000EAD2C(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  const __CFString *v9;
  __int16 v10;
  void *v11;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "clientProvidedIdentifier"));
  v6 = 138543874;
  v7 = a1;
  v8 = 2114;
  v9 = CFSTR("com.apple.");
  v10 = 2114;
  v11 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%{public}@ using %{public}@ prefix for task %{public}@ that is only reserved for Apple apps", (uint8_t *)&v6, 0x20u);

}

void sub_1000EADEC()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10008F050();
  objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "name"));
  sub_1000C89FC();
  sub_1000C89E4();
  sub_1000C89D0((void *)&_mh_execute_header, v2, v3, "%{public}@: Process %d not entitled", v4, v5, v6, v7, v8);

  sub_10001AEF0();
}

void sub_1000EAE68()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10001AF00();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Application-identifier is: %@", v1, 0xCu);
  sub_10001768C();
}

void sub_1000EAED4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v0, v1, "Activity with identifier %@ not found", v2);
  sub_10001768C();
}

void sub_1000EAF38(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "getInfoForKey: %@ %@", (uint8_t *)&v3, 0x16u);
  sub_10001768C();
}

void sub_1000EAFB8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Active app: %@", (uint8_t *)&v2, 0xCu);
  sub_10001768C();
}

void sub_1000EB028(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138543618;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error determining whether %{public}@ supports EN: %@", (uint8_t *)&v4, 0x16u);
  sub_10001768C();
}

void sub_1000EB0AC(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No submission date; using recent past.",
    buf,
    2u);
}

void sub_1000EB0E8(uint64_t a1, NSObject *a2)
{
  int v2;
  const __CFString *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 138412546;
  v3 = CFSTR("com.apple.appResume.signpostReader");
  v4 = 2112;
  v5 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Failed to expire task:%@ with error:%@", (uint8_t *)&v2, 0x16u);
}

void sub_1000EB170(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "Registered for disk space monitoring: %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000EB1D4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100017694((void *)&_mh_execute_header, a2, a3, "Unregistered for disk space monitoring: %@", a5, a6, a7, a8, 2u);
  sub_10001768C();
}

void sub_1000EB238(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Uninitialised purgeableSpaceMap!", v1, 2u);
}

void sub_1000EB278(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("CACHE_DELETE_ERROR")));
  v5 = 138412290;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to get purgable space: %@", (uint8_t *)&v5, 0xCu);

}

void sub_1000EB324(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to register for CacheDelete purgeable space update notification", v1, 2u);
}

void sub_1000EB364(int a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;

  v2 = 136315394;
  v3 = "CACHE_DELETE_PURGEABLE_UPDATED";
  v4 = 1024;
  v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Received %s notification, token: %d", (uint8_t *)&v2, 0x12u);
  sub_10001768C();
}

void sub_1000EB3E8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "MC timer fired but can't evaluate all activities, no daemon!", v1, 2u);
}

void sub_1000EB428(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Trying to cancel timer", v1, 2u);
}

void sub_1000EB468(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "description"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, v3, v5, "Unable to setup network evaluation for %@", v6);

  sub_1000176D0();
}

void sub_1000EB4F8(id *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "description"));
  sub_10001AF00();
  sub_100017730((void *)&_mh_execute_header, a2, v4, "Network evaluation callback is not currently registered for %@!", v5);

  sub_1000176D0();
}

void sub_1000EB580()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Found an equivalent network evaluation group; coalescing activity ID %@",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_1000EB5E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_100017694((void *)&_mh_execute_header, v0, v1, "Unable to find network evaluation group for activity ID '%@'", v2, v3, v4, v5, v6);
}

void sub_1000EB648(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_1000176FC((void *)&_mh_execute_header, a2, a3, "Finding the last DASTaskCheckpoint event for %@", (uint8_t *)&v3);
}

void sub_1000EB6B4(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_1000176FC((void *)&_mh_execute_header, a2, a3, "Searching for _DASActivity objects with names: %@", (uint8_t *)&v3);
}

void sub_1000EB720(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Flushing PPS caches", v1, 2u);
}

void sub_1000EB760(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "name"));
  v6 = 138412290;
  v7 = v4;
  sub_1000176FC((void *)&_mh_execute_header, v3, v5, "Computing conditions penalty for activity name: %@", (uint8_t *)&v6);

}

void sub_1000EB7FC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@ encountered an error while running, adding to errored activities", (uint8_t *)&v2, 0xCu);
}

uint64_t sub_1000EB870()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "BYBuddyDaemonCloudSyncClient");
  return sub_1000EB894(v0);
}

void sub_1000EB894(void *a1, uint64_t a2, NSObject *a3)
{
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v5 = 134218242;
  v6 = (int)objc_msgSend(a1, "pid");
  v7 = 2112;
  v8 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Could not terminate app with pid %ld due to error: %@, invalidating instead", (uint8_t *)&v5, 0x16u);
}

void sub_1000EB930(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "DASAssertion dealloced before being invalidated! %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000EB9A4(NSObject *a1)
{
  int *v2;
  char *v3;
  int v4;
  char *v5;

  v2 = __error();
  v3 = strerror(*v2);
  v4 = 136315138;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "Failed to obtain process name: %s", (uint8_t *)&v4, 0xCu);
}

void sub_1000EBA34()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_100079D40((void *)&_mh_execute_header, v0, v1, "Found >1 extensions for identifier %@ extension point %@, using first");
  sub_10001768C();
}

void sub_1000EBA94()
{
  uint64_t v0;
  os_log_t v1;

  sub_100058A5C();
  sub_100079D40((void *)&_mh_execute_header, v0, v1, "Unable to get application record for %@ with error %@");
  sub_10001768C();
}

void sub_1000EBAF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Ignoring disabled extension for '%@'", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000EBB54(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Plugin interrupted. Nilling out session ID.", v1, 2u);
}

void sub_1000EBB94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Plugin request cancelled with error: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000EBBF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Failed to begin extension request: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000EBC54(void *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sessionID"));
  sub_10001AF00();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to get context for session with ID %@", v4, 0xCu);

}

void sub_1000EBCE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001AF00();
  sub_10001767C((void *)&_mh_execute_header, v0, v1, "Failed to get remote context: %@", v2, v3, v4, v5, v6);
  sub_10001768C();
}

void sub_1000EBD44(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "currentActivity"));
  v6 = 138412546;
  v7 = v5;
  v8 = 2112;
  v9 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_FAULT, "Request for plugin to start activity while already running. Current: %@. New: %@", (uint8_t *)&v6, 0x16u);

}

void sub_1000EBDF0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error getting remote context %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000EBE64(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed at recording trigger %@ to PowerLog", (uint8_t *)&v2, 0xCu);
  sub_10001768C();
}

void sub_1000EBED4(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Logging %@", (uint8_t *)&v2, 0xCu);
  sub_10001768C();
}

void sub_1000EBF44(uint64_t a1, NSObject *a2)
{
  int v2;
  const __CFString *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 138412546;
  v3 = CFSTR("DASActivityLifecycle");
  v4 = 2112;
  v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@: %@", (uint8_t *)&v2, 0x16u);
  sub_10001768C();
}

void sub_1000EBFC8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "DASContext: Did not successfully set up sink for remote device activity", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000EBFF8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "DASContext: Remote device activity level changed but deviceUUID is nil", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000EC028(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "DASContext: Biome couldn't fetch remote devices with error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000EC09C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000176AC((void *)&_mh_execute_header, a1, a3, "DASContext: Could not check remote devices for recently opened apps", a5, a6, a7, a8, 0);
  sub_1000176A4();
}

void sub_1000EC0CC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001767C((void *)&_mh_execute_header, a2, a3, "Error loading dayToDurationsList data: %@", a5, a6, a7, a8, 2u);
}

void sub_1000EC134(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001767C((void *)&_mh_execute_header, a2, a3, "Error archiving day to durations data: %@", a5, a6, a7, a8, 2u);
}

id objc_msgSend_Activity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Activity");
}

id objc_msgSend_ActivityScheduler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ActivityScheduler");
}

id objc_msgSend_App(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "App");
}

id objc_msgSend_Completion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Completion");
}

id objc_msgSend_ContextSync(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ContextSync");
}

id objc_msgSend_DSLPublisher(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "DSLPublisher");
}

id objc_msgSend_Dependency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Dependency");
}

id objc_msgSend_DeviceActivityLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "DeviceActivityLevel");
}

id objc_msgSend_InFocus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "InFocus");
}

id objc_msgSend_Level(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Level");
}

id objc_msgSend_Result(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Result");
}

id objc_msgSend_SFITimeFromEffort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SFITimeFromEffort:");
}

id objc_msgSend_UIBackgroundModes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UIBackgroundModes");
}

id objc_msgSend_URLQueryAllowedCharacterSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLQueryAllowedCharacterSet");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__DAS_addOrReplaceObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_DAS_addOrReplaceObject:");
}

id objc_msgSend__DAS_unionSetOverridingExisting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_DAS_unionSetOverridingExisting:");
}

id objc_msgSend__auxiliaryConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_auxiliaryConnection");
}

id objc_msgSend__callInvalidationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_callInvalidationHandler:");
}

id objc_msgSend__callWarningHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_callWarningHandler");
}

id objc_msgSend__contextForSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_contextForSession");
}

id objc_msgSend__destroyPersistentStoreAtURL_withType_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_destroyPersistentStoreAtURL:withType:options:error:");
}

id objc_msgSend__extensionContextForUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_extensionContextForUUID:");
}

id objc_msgSend__initWithUnderlyingAssertion_forPid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initWithUnderlyingAssertion:forPid:");
}

id objc_msgSend__invalidateCallingHandler_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_invalidateCallingHandler:withError:");
}

id objc_msgSend__kill_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_kill:");
}

id objc_msgSend__plugIn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_plugIn");
}

id objc_msgSend__prewarmSuspendForMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_prewarmSuspendForMessage:");
}

id objc_msgSend__queue_computeScores(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_queue_computeScores");
}

id objc_msgSend__queue_loadHistograms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_queue_loadHistograms");
}

id objc_msgSend__queue_obtainPendingBackupTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_queue_obtainPendingBackupTasks");
}

id objc_msgSend__queue_updateHistograms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_queue_updateHistograms");
}

id objc_msgSend__setAdditionalEnvironment_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setAdditionalEnvironment:");
}

id objc_msgSend__setupExtension(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setupExtension");
}

id objc_msgSend__setupSessionIfNecessary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setupSessionIfNecessary");
}

id objc_msgSend__unexpectedXPCObject_WithLog_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_unexpectedXPCObject:WithLog:");
}

id objc_msgSend__updateCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_updateCache");
}

id objc_msgSend__xpcConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_xpcConnection");
}

id objc_msgSend_abbreviatedDecision_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "abbreviatedDecision:");
}

id objc_msgSend_aboutMe(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aboutMe");
}

id objc_msgSend_absoluteTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "absoluteTimestamp");
}

id objc_msgSend_accountedNewEnergy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountedNewEnergy:");
}

id objc_msgSend_accuracyRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accuracyRate");
}

id objc_msgSend_acknowledgeSystemTaskLaunchWithIdentifier_withPID_withUID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acknowledgeSystemTaskLaunchWithIdentifier:withPID:withUID:completionHandler:");
}

id objc_msgSend_acknowledgeSystemTaskSuspensionWithIdentifier_withPID_withUID_retryAfter_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acknowledgeSystemTaskSuspensionWithIdentifier:withPID:withUID:retryAfter:completionHandler:");
}

id objc_msgSend_acquireDockAppAssertionForProcess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acquireDockAppAssertionForProcess:");
}

id objc_msgSend_acquireWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acquireWithError:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activate");
}

id objc_msgSend_activateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateWithCompletionHandler:");
}

id objc_msgSend_activationTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activationTime");
}

id objc_msgSend_activeENApplication(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeENApplication");
}

id objc_msgSend_activities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activities");
}

id objc_msgSend_activitiesWaitingForBGTaskClients(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activitiesWaitingForBGTaskClients");
}

id objc_msgSend_activity_blockedOnPolicies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activity:blockedOnPolicies:");
}

id objc_msgSend_activity_runWithoutHonoringPolicies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activity:runWithoutHonoringPolicies:");
}

id objc_msgSend_activityCanceled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityCanceled:");
}

id objc_msgSend_activityCompleted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityCompleted:");
}

id objc_msgSend_activityDurations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityDurations");
}

id objc_msgSend_activityEligibleForRunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityEligibleForRunning:");
}

id objc_msgSend_activityHadEnoughRuntime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityHadEnoughRuntime:");
}

id objc_msgSend_activityIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityIDs");
}

id objc_msgSend_activityIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityIdentifier");
}

id objc_msgSend_activityIsTimewiseEligible_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityIsTimewiseEligible:atDate:");
}

id objc_msgSend_activityMatchingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityMatchingPredicate:");
}

id objc_msgSend_activityQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityQueue");
}

id objc_msgSend_activityRequiresLeniencyCaps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityRequiresLeniencyCaps:");
}

id objc_msgSend_activityRequiresStrictCaps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityRequiresStrictCaps:");
}

id objc_msgSend_activityStarted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityStarted:");
}

id objc_msgSend_activitySubmitted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activitySubmitted:");
}

id objc_msgSend_activityToDataMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityToDataMap");
}

id objc_msgSend_activityType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityType");
}

id objc_msgSend_activityWithDASBGSystemTask_withClientOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityWithDASBGSystemTask:withClientOffset:");
}

id objc_msgSend_activityWithName_priority_duration_startingAfter_startingBefore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityWithName:priority:duration:startingAfter:startingBefore:");
}

id objc_msgSend_addActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addActivities:");
}

id objc_msgSend_addActivitiesObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addActivitiesObject:");
}

id objc_msgSend_addActivity_urgencyLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addActivity:urgencyLevel:");
}

id objc_msgSend_addActivityToDependencyGroups_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addActivityToDependencyGroups:");
}

id objc_msgSend_addConstraint_forSchedulingPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addConstraint:forSchedulingPriority:");
}

id objc_msgSend_addDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDelegate:");
}

id objc_msgSend_addDependencyEdgeFrom_to_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDependencyEdgeFrom:to:");
}

id objc_msgSend_addDependencyInfoForTask_producedResultIdentifiers_dependencyIdentifiers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDependencyInfoForTask:producedResultIdentifiers:dependencyIdentifiers:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addExperimentInformationWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addExperimentInformationWithDictionary:");
}

id objc_msgSend_addFeatureCodesForTask_featureCodes_semanticVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addFeatureCodesForTask:featureCodes:semanticVersion:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addLaunchRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addLaunchRequest:");
}

id objc_msgSend_addNotificationRequest_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNotificationRequest:withCompletionHandler:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addPendingActivitiesToGroups_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPendingActivitiesToGroups:");
}

id objc_msgSend_addPendingActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPendingActivity:");
}

id objc_msgSend_addPendingActivity_toGroupWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPendingActivity:toGroupWithName:");
}

id objc_msgSend_addPersistentStoreWithType_configuration_URL_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPersistentStoreWithType:configuration:URL:options:error:");
}

id objc_msgSend_addPredictionAccuracy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPredictionAccuracy:");
}

id objc_msgSend_addPrerunningActivity_toGroupWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPrerunningActivity:toGroupWithName:");
}

id objc_msgSend_addRationaleForCondition_withRequiredValue_withCurrentValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRationaleForCondition:withRequiredValue:withCurrentValue:");
}

id objc_msgSend_addRationaleWithCondition_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRationaleWithCondition:");
}

id objc_msgSend_addRunningActivity_toGroupWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRunningActivity:toGroupWithName:");
}

id objc_msgSend_addSubsystem_category_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addSubsystem:category:");
}

id objc_msgSend_addTaskNodeToGraph_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addTaskNodeToGraph:");
}

id objc_msgSend_addTimeInterval_forActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addTimeInterval:forActivity:");
}

id objc_msgSend_addTriggersToActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addTriggersToActivity:");
}

id objc_msgSend_addUpdateHandlerForNamespaceName_usingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addUpdateHandlerForNamespaceName:usingBlock:");
}

id objc_msgSend_addWorkItem_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addWorkItem:");
}

id objc_msgSend_additionalCapacityForActivity_inGroupWithName_shouldTryToSuspend_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "additionalCapacityForActivity:inGroupWithName:shouldTryToSuspend:");
}

id objc_msgSend_address(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "address");
}

id objc_msgSend_adjustBaseTimeByOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "adjustBaseTimeByOffset:");
}

id objc_msgSend_adjustStartAfterDate_forActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "adjustStartAfterDate:forActivity:");
}

id objc_msgSend_admissibleApplications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "admissibleApplications");
}

id objc_msgSend_advanceAppLaunchDateIfNecessaryForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "advanceAppLaunchDateIfNecessaryForActivity:");
}

id objc_msgSend_advanceBaseTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "advanceBaseTime");
}

id objc_msgSend_aggregatorScoresForAllApplicationsAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aggregatorScoresForAllApplicationsAtDate:");
}

id objc_msgSend_alarmID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "alarmID");
}

id objc_msgSend_algorithms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "algorithms");
}

id objc_msgSend_allAppKillsInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allAppKillsInfo");
}

id objc_msgSend_allBudgets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allBudgets");
}

id objc_msgSend_allClientsDo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allClientsDo:");
}

id objc_msgSend_allFastPassIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allFastPassIdentifiers");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allPendingBackgroundTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allPendingBackgroundTasks");
}

id objc_msgSend_allPendingPushLaunchTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allPendingPushLaunchTasks");
}

id objc_msgSend_allPendingRestartTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allPendingRestartTasks");
}

id objc_msgSend_allPendingSyncOnBackupTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allPendingSyncOnBackupTasks");
}

id objc_msgSend_allPendingTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allPendingTasks");
}

id objc_msgSend_allPoliciesForPlatform(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allPoliciesForPlatform");
}

id objc_msgSend_allSuggestionsInLayout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allSuggestionsInLayout");
}

id objc_msgSend_allTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allTasks");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allValues");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allocateBudgetForViewsCurve_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocateBudgetForViewsCurve:");
}

id objc_msgSend_allocatedBudgetsWithAverageViews_groupTotalBudget_individualMaxBudgets_individualMinBudget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocatedBudgetsWithAverageViews:groupTotalBudget:individualMaxBudgets:individualMinBudget:");
}

id objc_msgSend_allocationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocationType");
}

id objc_msgSend_allowsUnrestrictedBackgroundLaunches(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowsUnrestrictedBackgroundLaunches");
}

id objc_msgSend_analyticsStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyticsStatus");
}

id objc_msgSend_analyzeValues_currentContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyzeValues:currentContext:");
}

id objc_msgSend_analyzerName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyzerName");
}

id objc_msgSend_andPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "andPredicateWithSubpredicates:");
}

id objc_msgSend_aneIntensive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aneIntensive");
}

id objc_msgSend_anonymousListener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anonymousListener");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anyObject");
}

id objc_msgSend_anyRemoteDeviceActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anyRemoteDeviceActive");
}

id objc_msgSend_appActivationPublisherForEventsFrom_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appActivationPublisherForEventsFrom:");
}

id objc_msgSend_appActivationTimeInfoStartingAtDate_withBookmarkKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appActivationTimeInfoStartingAtDate:withBookmarkKey:");
}

id objc_msgSend_appActivationTimeScores_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appActivationTimeScores:");
}

id objc_msgSend_appHasContinuousBackgroundModeWithRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appHasContinuousBackgroundModeWithRecord:");
}

id objc_msgSend_appInFocusStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appInFocusStream");
}

id objc_msgSend_appInstallStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appInstallStream");
}

id objc_msgSend_appKillsInfoPublisherForEventsFrom_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appKillsInfoPublisherForEventsFrom:");
}

id objc_msgSend_appKillsInfoStartingAtDate_withBookmarkKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appKillsInfoStartingAtDate:withBookmarkKey:");
}

id objc_msgSend_appLaunch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appLaunch");
}

id objc_msgSend_appLaunchResumeInfoWithStartDate_withEndDate_withReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appLaunchResumeInfoWithStartDate:withEndDate:withReply:");
}

id objc_msgSend_appPredictionTimeline(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appPredictionTimeline");
}

id objc_msgSend_appPrefersUnoptimizedLaunchesWithRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appPrefersUnoptimizedLaunchesWithRecord:");
}

id objc_msgSend_appPreventsPrewarm_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appPreventsPrewarm:");
}

id objc_msgSend_appState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appState");
}

id objc_msgSend_appUsageBundleID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appUsageBundleID");
}

id objc_msgSend_appUsageStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appUsageStream");
}

id objc_msgSend_appUsesBackgroundTaskScheduler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appUsesBackgroundTaskScheduler:");
}

id objc_msgSend_app_refresh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "app_refresh");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendPrewarmAssertion_withAssertion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendPrewarmAssertion:withAssertion:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applicationBundleIDForExecutableName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationBundleIDForExecutableName:");
}

id objc_msgSend_applicationExtensionRecords(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationExtensionRecords");
}

id objc_msgSend_applicationForActivity_isDisallowedWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationForActivity:isDisallowedWithContext:");
}

id objc_msgSend_applicationIsAdmissibleForDockMembership_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationIsAdmissibleForDockMembership:");
}

id objc_msgSend_applicationLaunchActivityWithName_priority_forApplication_withReason_duration_startingAfter_startingBefore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationLaunchActivityWithName:priority:forApplication:withReason:duration:startingAfter:startingBefore:");
}

id objc_msgSend_applicationProxyForIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationProxyForIdentifier:");
}

id objc_msgSend_applicationState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationState");
}

id objc_msgSend_applicationStateRequiresImmediateDelivery_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationStateRequiresImmediateDelivery:");
}

id objc_msgSend_applicationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationType");
}

id objc_msgSend_appliesToActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appliesToActivity:");
}

id objc_msgSend_applyPolicyChangesFrom_to_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyPolicyChangesFrom:to:");
}

id objc_msgSend_appsFromProactiveSuggestions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appsFromProactiveSuggestions");
}

id objc_msgSend_appsLaunchedInLastDays_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appsLaunchedInLastDays:");
}

id objc_msgSend_appsLaunchedSinceBoot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appsLaunchedSinceBoot");
}

id objc_msgSend_appsRecentlyForegrounded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appsRecentlyForegrounded");
}

id objc_msgSend_appsToExclude(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appsToExclude");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_areDependenciesSatisfiedFor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "areDependenciesSatisfiedFor:");
}

id objc_msgSend_argument(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "argument");
}

id objc_msgSend_argumentObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "argumentObject");
}

id objc_msgSend_armResetTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "armResetTimer");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayForKey:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_arrayWithObjectsFrom_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjectsFrom:");
}

id objc_msgSend_asBiomeProtectionClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asBiomeProtectionClass");
}

id objc_msgSend_assertion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assertion");
}

id objc_msgSend_assertionForActivity_pid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assertionForActivity:pid:");
}

id objc_msgSend_associateActivity_withTriggerKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "associateActivity:withTriggerKeys:");
}

id objc_msgSend_asyncDo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asyncDo:");
}

id objc_msgSend_attributeWithDomain_name_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attributeWithDomain:name:");
}

id objc_msgSend_backgroundAppRefreshEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundAppRefreshEnabled");
}

id objc_msgSend_backgroundAppRefreshEnabledForApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundAppRefreshEnabledForApp:");
}

id objc_msgSend_backgroundLaunchAllowedForApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundLaunchAllowedForApp:");
}

id objc_msgSend_backgroundLaunchAllowedForBGTaskActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundLaunchAllowedForBGTaskActivity:");
}

id objc_msgSend_backgroundTaskAllowedWithType_withRationale_withBatteryLevel_isPluggedIn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundTaskAllowedWithType:withRationale:withBatteryLevel:isPluggedIn:");
}

id objc_msgSend_backgroundTaskAllowedWithType_withRequiredFileProtection_withRationale_withState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundTaskAllowedWithType:withRequiredFileProtection:withRationale:withState:");
}

id objc_msgSend_backgroundTaskSchedulerPermittedIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backgroundTaskSchedulerPermittedIdentifiers");
}

id objc_msgSend_backlightState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backlightState");
}

id objc_msgSend_backlogged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backlogged");
}

id objc_msgSend_backupTaskManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backupTaskManager");
}

id objc_msgSend_backupTaskStatusForCompletedActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backupTaskStatusForCompletedActivity:");
}

id objc_msgSend_balance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "balance");
}

id objc_msgSend_balanceForBudgetWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "balanceForBudgetWithName:");
}

id objc_msgSend_balanceForWidgetBudgetID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "balanceForWidgetBudgetID:");
}

id objc_msgSend_barScheduler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "barScheduler");
}

id objc_msgSend_barSchedulerWithScheduler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "barSchedulerWithScheduler:");
}

id objc_msgSend_baseTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "baseTime");
}

id objc_msgSend_baselineScoreForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "baselineScoreForActivity:");
}

id objc_msgSend_batchingQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batchingQueue");
}

id objc_msgSend_batteryAdapterIsWirelessKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryAdapterIsWirelessKey");
}

id objc_msgSend_batteryAdapterTypeKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryAdapterTypeKey");
}

id objc_msgSend_batteryExternalConnectedKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryExternalConnectedKey");
}

id objc_msgSend_batteryFullyChargedKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryFullyChargedKey");
}

id objc_msgSend_batteryIsChargingKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryIsChargingKey");
}

id objc_msgSend_batteryPercentageKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryPercentageKey");
}

id objc_msgSend_batteryProperties(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryProperties");
}

id objc_msgSend_batteryTemperatureKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryTemperatureKey");
}

id objc_msgSend_batteryVoltageKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryVoltageKey");
}

id objc_msgSend_beforeApplicationLaunch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beforeApplicationLaunch");
}

id objc_msgSend_beforeDaysFirstActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beforeDaysFirstActivity");
}

id objc_msgSend_beforeUserIsActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beforeUserIsActive");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "begin");
}

id objc_msgSend_beginDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginDate");
}

id objc_msgSend_beginDependencyMonitoringForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginDependencyMonitoringForActivity:");
}

id objc_msgSend_beginExtensionRequestWithOptions_inputItems_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginExtensionRequestWithOptions:inputItems:error:");
}

id objc_msgSend_beginWorkForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginWorkForActivity:");
}

id objc_msgSend_bitmaskForPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bitmaskForPolicy:");
}

id objc_msgSend_bitmaskFromResponses_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bitmaskFromResponses:");
}

id objc_msgSend_blockReasons_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blockReasons:");
}

id objc_msgSend_blockRebootActivitiesForSU(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blockRebootActivitiesForSU");
}

id objc_msgSend_bluetoothIsConnectedStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bluetoothIsConnectedStream");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_BOOLeanValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLeanValue");
}

id objc_msgSend_bootupDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bootupDate");
}

id objc_msgSend_browser(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "browser");
}

id objc_msgSend_bucketizedWorkload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bucketizedWorkload:");
}

id objc_msgSend_buddyCompleteWithActivity_withState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buddyCompleteWithActivity:withState:");
}

id objc_msgSend_budget_isPositive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "budget:isPositive:");
}

id objc_msgSend_budgetAvailableForActivity_withContext_rationale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "budgetAvailableForActivity:withContext:rationale:");
}

id objc_msgSend_budgetIsPositive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "budgetIsPositive:");
}

id objc_msgSend_budgetKeyPathForBudgetName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "budgetKeyPathForBudgetName:");
}

id objc_msgSend_budgetNameFromWidgetBudgetID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "budgetNameFromWidgetBudgetID:");
}

id objc_msgSend_budgetProportionAtDate_withTimeline_withNormalizer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "budgetProportionAtDate:withTimeline:withNormalizer:");
}

id objc_msgSend_budgetToIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "budgetToIndex");
}

id objc_msgSend_budgetWithName_capacity_allocationType_lastModulatedDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "budgetWithName:capacity:allocationType:lastModulatedDate:");
}

id objc_msgSend_budgetWithName_capacity_balance_allocationType_lastModulatedDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "budgetWithName:capacity:balance:allocationType:lastModulatedDate:");
}

id objc_msgSend_budgetWithName_widgetBudgetID_capacity_balance_allocationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "budgetWithName:widgetBudgetID:capacity:balance:allocationType:");
}

id objc_msgSend_budgeted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "budgeted");
}

id objc_msgSend_buildClosuresForApps_withTask_onBoot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildClosuresForApps:withTask:onBoot:");
}

id objc_msgSend_buildClosuresOnBootWithTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildClosuresOnBootWithTask:");
}

id objc_msgSend_buildClosuresOpportunisticWithTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildClosuresOpportunisticWithTask:");
}

id objc_msgSend_bundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundle");
}

id objc_msgSend_bundleExecutable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleExecutable");
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleID");
}

id objc_msgSend_bundleIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleIDs");
}

id objc_msgSend_bundleId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleId");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundleIdentifierFromTeamAppTuple_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleIdentifierFromTeamAppTuple:");
}

id objc_msgSend_bundleInformationWithNetworkQuality_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleInformationWithNetworkQuality:");
}

id objc_msgSend_bundleRecordWithApplicationIdentifier_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleRecordWithApplicationIdentifier:error:");
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_bypassBatteryAging(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bypassBatteryAging");
}

id objc_msgSend_bypassPeakPower(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bypassPeakPower");
}

id objc_msgSend_bypassesPredictions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bypassesPredictions");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytes");
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cacheDetailsForPredictionWithKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cacheDetailsForPredictionWithKey:");
}

id objc_msgSend_cacheSleepPeriod_end_period1_period2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cacheSleepPeriod:end:period1:period2:");
}

id objc_msgSend_cachedSuggestionsForClientModelType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedSuggestionsForClientModelType:");
}

id objc_msgSend_callback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callback");
}

id objc_msgSend_cameraViewfinder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cameraViewfinder");
}

id objc_msgSend_canRunInCurrentWakeState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canRunInCurrentWakeState:");
}

id objc_msgSend_canSubmitValidatedTaskRequest_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canSubmitValidatedTaskRequest:withError:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelActivities:");
}

id objc_msgSend_cancelAfterDeadline(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelAfterDeadline");
}

id objc_msgSend_cancelAllActivities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelAllActivities");
}

id objc_msgSend_cancelAllBackgroundTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelAllBackgroundTasks");
}

id objc_msgSend_cancelAllTaskRequestsForApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelAllTaskRequestsForApplication:");
}

id objc_msgSend_cancelAppRefreshTasksForApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelAppRefreshTasksForApps:");
}

id objc_msgSend_cancelBackgroundTasksForApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelBackgroundTasksForApps:");
}

id objc_msgSend_cancelExtensionRequestWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelExtensionRequestWithIdentifier:");
}

id objc_msgSend_cancelLaunchesOfTypes_forApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelLaunchesOfTypes:forApps:");
}

id objc_msgSend_cancelPreviousWakeRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelPreviousWakeRequest");
}

id objc_msgSend_cancelPushLaunchTasksForApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelPushLaunchTasksForApps:");
}

id objc_msgSend_cancelResetTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelResetTimer");
}

id objc_msgSend_cancelTaskRequestWithIdentifier_forApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelTaskRequestWithIdentifier:forApplication:");
}

id objc_msgSend_candidateGroupActivityForPreemption_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "candidateGroupActivityForPreemption:");
}

id objc_msgSend_candidatesFromTimeline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "candidatesFromTimeline:");
}

id objc_msgSend_capacity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "capacity");
}

id objc_msgSend_capacityBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "capacityBytes");
}

id objc_msgSend_capacityForBudgetWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "capacityForBudgetWithName:");
}

id objc_msgSend_capacityFromGroupMax_forPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "capacityFromGroupMax:forPriority:");
}

id objc_msgSend_carbonImpactWindowStartForForecast_withStartDate_windowSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "carbonImpactWindowStartForForecast:withStartDate:windowSize:");
}

id objc_msgSend_cellInterfaceClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellInterfaceClass:");
}

id objc_msgSend_cellInterfaceUp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellInterfaceUp:");
}

id objc_msgSend_cellPredictionTimeline(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellPredictionTimeline");
}

id objc_msgSend_cellQuality_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellQuality:");
}

id objc_msgSend_cellUploadCost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellUploadCost:");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_chargePredictionOutputOfScheme_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "chargePredictionOutputOfScheme:withError:");
}

id objc_msgSend_chargingDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "chargingDuration");
}

id objc_msgSend_checkAllTasksForBGSystemTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkAllTasksForBGSystemTask:");
}

id objc_msgSend_checkProgressForMAD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkProgressForMAD");
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkResourceIsReachableAndReturnError:");
}

id objc_msgSend_chooseActivitiesToRunFromCandidateActivities_toBeRunActivities_toLaunchApplications_toLaunchExtension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "chooseActivitiesToRunFromCandidateActivities:toBeRunActivities:toLaunchApplications:toLaunchExtension:");
}

id objc_msgSend_ckRateLimitConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckRateLimitConfiguration");
}

id objc_msgSend_classCUnlocked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "classCUnlocked");
}

id objc_msgSend_cleanupForActivity_wasCompleted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanupForActivity:wasCompleted:");
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clear");
}

id objc_msgSend_clearActivityFromPrerunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearActivityFromPrerunning:");
}

id objc_msgSend_clearOffPeakDiscountedHours(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearOffPeakDiscountedHours");
}

id objc_msgSend_clearPriorityQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearPriorityQueue");
}

id objc_msgSend_clearRecentlyLaunchedApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearRecentlyLaunchedApps");
}

id objc_msgSend_clientDataBudgetName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientDataBudgetName");
}

id objc_msgSend_clientForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientForActivity:");
}

id objc_msgSend_clientForDaemon_withConnection_isRestricted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientForDaemon:withConnection:isRestricted:");
}

id objc_msgSend_clientName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientName");
}

id objc_msgSend_clientProvidedIconBundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientProvidedIconBundleIdentifier");
}

id objc_msgSend_clientProvidedIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientProvidedIdentifier");
}

id objc_msgSend_clientProvidedReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientProvidedReason");
}

id objc_msgSend_clientProvidedStartDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientProvidedStartDate");
}

id objc_msgSend_clientProvidedTitle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientProvidedTitle");
}

id objc_msgSend_clientWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientWithIdentifier:");
}

id objc_msgSend_closeFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "closeFile");
}

id objc_msgSend_closureBuildLaunchAppFromBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "closureBuildLaunchAppFromBundleID:");
}

id objc_msgSend_cloudSyncProgressUpdate_completedClients_errors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudSyncProgressUpdate:completedClients:errors:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "code");
}

id objc_msgSend_collectLaunchDataWithBootBatchTimestamp_opportunisticBatchTimestamp_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectLaunchDataWithBootBatchTimestamp:opportunisticBatchTimestamp:completion:");
}

id objc_msgSend_collectPrewarmingDataWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectPrewarmingDataWithCompletion:");
}

id objc_msgSend_commaDelimitedEntriesFrom_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commaDelimitedEntriesFrom:");
}

id objc_msgSend_commonAnalytics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commonAnalytics");
}

id objc_msgSend_communicates_with_paired_device(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "communicates_with_paired_device");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:");
}

id objc_msgSend_compareActivity_withActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compareActivity:withActivity:");
}

id objc_msgSend_compatibilityObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compatibilityObject");
}

id objc_msgSend_compatibilityWith_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compatibilityWith:");
}

id objc_msgSend_complete(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "complete");
}

id objc_msgSend_completeActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completeActivity:");
}

id objc_msgSend_completeSystemTaskWithIdentifier_withPID_withUID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completeSystemTaskWithIdentifier:withPID:withUID:completionHandler:");
}

id objc_msgSend_completeTaskRequest_forApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completeTaskRequest:forApplication:");
}

id objc_msgSend_completeUnlessOpen(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completeUnlessOpen");
}

id objc_msgSend_completeUntilFirstUserAuthentication(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completeUntilFirstUserAuthentication");
}

id objc_msgSend_completedUnitCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completedUnitCount");
}

id objc_msgSend_completionStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completionStatus");
}

id objc_msgSend_component_fromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "component:fromDate:");
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_computeAccuraciesFromSortedPredictions_andObservations_withEqualityOperator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeAccuraciesFromSortedPredictions:andObservations:withEqualityOperator:");
}

id objc_msgSend_computeAccuraciesWithLastPredictions_andAppsLaunched_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeAccuraciesWithLastPredictions:andAppsLaunched:");
}

id objc_msgSend_computeActivityBlockingReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeActivityBlockingReason:");
}

id objc_msgSend_computeActivityTimeline_installations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeActivityTimeline:installations:");
}

id objc_msgSend_computeAndRecordPolicyDurationStatsWhilePluggedIn_considerPluggedIn_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeAndRecordPolicyDurationStatsWhilePluggedIn:considerPluggedIn:atDate:");
}

id objc_msgSend_computeBlockedDurations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeBlockedDurations:");
}

id objc_msgSend_computeBudgetFromHistoryForAllWidgets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeBudgetFromHistoryForAllWidgets");
}

id objc_msgSend_computeElapsedRunTimeFromPairings_endDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeElapsedRunTimeFromPairings:endDate:");
}

id objc_msgSend_computeElapsedRunTimes_timeFilter_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeElapsedRunTimes:timeFilter:filepath:");
}

id objc_msgSend_computeElapsedRunTimesFromCheckpoints_endDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeElapsedRunTimesFromCheckpoints:endDate:");
}

id objc_msgSend_computeEstimatedMADCompletionTime_checkpointTimeSeries_progressTimeSeries_blockingReasonsTimeSeries_activity_osUpgradeTimestamp_endDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeEstimatedMADCompletionTime:checkpointTimeSeries:progressTimeSeries:blockingReasonsTimeSeries:activity:osUpgradeTimestamp:endDate:");
}

id objc_msgSend_computeEstimatedMADCompletionTimes_endDate_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeEstimatedMADCompletionTimes:endDate:filepath:");
}

id objc_msgSend_computeEstimatedRunTime_checkpointTimeSeries_progressTimeSeries_activity_endDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeEstimatedRunTime:checkpointTimeSeries:progressTimeSeries:activity:endDate:");
}

id objc_msgSend_computeEstimatedRunTimes_timeFilter_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeEstimatedRunTimes:timeFilter:filepath:");
}

id objc_msgSend_computeFeatureTimeline_installations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeFeatureTimeline:installations:");
}

id objc_msgSend_computeHasDeviceRecentlyUpdated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeHasDeviceRecentlyUpdated");
}

id objc_msgSend_computeNumberOfAvailableResultsForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeNumberOfAvailableResultsForActivity:");
}

id objc_msgSend_computeOptimalPolicyForApps_withValues_scaledWeights_andMemoryFootprint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeOptimalPolicyForApps:withValues:scaledWeights:andMemoryFootprint:");
}

id objc_msgSend_computeOptimalScoreAndDateForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeOptimalScoreAndDateForActivity:");
}

id objc_msgSend_computeOverallProgressPercentage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeOverallProgressPercentage:");
}

id objc_msgSend_computePlugInStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computePlugInStatus:");
}

id objc_msgSend_computePolicyForCurrentState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computePolicyForCurrentState");
}

id objc_msgSend_computeProgressTimeline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeProgressTimeline:");
}

id objc_msgSend_computeSlotForDate_relativeToDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeSlotForDate:relativeToDate:");
}

id objc_msgSend_computeStaticPriorityForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeStaticPriorityForActivity:");
}

id objc_msgSend_computeUsageCorrelationBetweenAirPodsAMPStreamsWithStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeUsageCorrelationBetweenAirPodsAMPStreamsWithStore:");
}

id objc_msgSend_computeUserActivityStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeUserActivityStatus:");
}

id objc_msgSend_concatenateContinuousEventsOfSameState_sortedAscending_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "concatenateContinuousEventsOfSameState:sortedAscending:");
}

id objc_msgSend_concatenateEventsPrivate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "concatenateEventsPrivate:");
}

id objc_msgSend_confidence(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "confidence");
}

id objc_msgSend_config(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "config");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configuration");
}

id objc_msgSend_configurationName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationName");
}

id objc_msgSend_configureConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureConnection:");
}

id objc_msgSend_configureMaximumDockCapacity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureMaximumDockCapacity");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connectedBGTaskClients(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectedBGTaskClients");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connection");
}

id objc_msgSend_connectionWithEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectionWithEndpoint:");
}

id objc_msgSend_consideredInLPMWithState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "consideredInLPMWithState:");
}

id objc_msgSend_consoleModeNotificationHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "consoleModeNotificationHandler");
}

id objc_msgSend_constructTaskDependencyGraphForTask_dependencyDataMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "constructTaskDependencyGraphForTask:dependencyDataMap:");
}

id objc_msgSend_consumerIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "consumerIdentifier");
}

id objc_msgSend_container(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "container");
}

id objc_msgSend_containingBundleRecord(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containingBundleRecord");
}

id objc_msgSend_containingUrl(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containingUrl");
}

id objc_msgSend_contains_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contains:");
}

id objc_msgSend_containsDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsDate:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsOverrideForActivity_withLimitation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsOverrideForActivity:withLimitation:");
}

id objc_msgSend_containsPendingActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsPendingActivity:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsString:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "context");
}

id objc_msgSend_contextPlugin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextPlugin");
}

id objc_msgSend_controlEffortResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controlEffortResult");
}

id objc_msgSend_convertBiomeStream_toKnowledgeStoreStream_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertBiomeStream:toKnowledgeStoreStream:");
}

id objc_msgSend_convertFocusModeStream_toKnowledgeStoreStream_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertFocusModeStream:toKnowledgeStoreStream:");
}

id objc_msgSend_convertNameFromFullToCompact_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertNameFromFullToCompact:");
}

id objc_msgSend_convertTimelineToApplicationDictionaries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertTimelineToApplicationDictionaries:");
}

id objc_msgSend_cooccurrencesWith_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cooccurrencesWith:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copy");
}

id objc_msgSend_copyActivity_toManagedObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyActivity:toManagedObject:");
}

id objc_msgSend_copyCEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCEndpoint");
}

id objc_msgSend_copyCParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCParameters");
}

id objc_msgSend_copyCarrierBundleValue_key_bundleType_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCarrierBundleValue:key:bundleType:completion:");
}

id objc_msgSend_copyDeviceIdentifierWithIDSDeviceID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyDeviceIdentifierWithIDSDeviceID:");
}

id objc_msgSend_copyGroup_toManagedObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyGroup:toManagedObject:");
}

id objc_msgSend_copyTrigger_toManagedObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyTrigger:toManagedObject:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countDictionary");
}

id objc_msgSend_countForFetchRequest_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countForFetchRequest:error:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countryCode");
}

id objc_msgSend_cpuIntensive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cpuIntensive");
}

id objc_msgSend_createActivityGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createActivityGroup:");
}

id objc_msgSend_createAssertion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createAssertion:");
}

id objc_msgSend_createBARApplicationGroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createBARApplicationGroup");
}

id objc_msgSend_createDatabaseDirectory_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDatabaseDirectory:error:");
}

id objc_msgSend_createDefaultActivityGroups(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDefaultActivityGroups");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_createGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createGroup:");
}

id objc_msgSend_createMOInMOC_activity_group_triggers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createMOInMOC:activity:group:triggers:");
}

id objc_msgSend_createMOInMOC_group_activities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createMOInMOC:group:activities:");
}

id objc_msgSend_createNewActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createNewActivity:");
}

id objc_msgSend_createOrUpdateActivity_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createOrUpdateActivity:context:");
}

id objc_msgSend_createOrUpdateGroup_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createOrUpdateGroup:context:");
}

id objc_msgSend_createParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createParameters");
}

id objc_msgSend_createRecordFromActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createRecordFromActivity:");
}

id objc_msgSend_createTempBGSQLFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createTempBGSQLFile:");
}

id objc_msgSend_createTerminationRequestForProcessHandle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createTerminationRequestForProcessHandle:");
}

id objc_msgSend_createTrigger_managedObjectContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createTrigger:managedObjectContext:");
}

id objc_msgSend_cumulativeResultConsumption(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cumulativeResultConsumption");
}

id objc_msgSend_currentActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentActivity");
}

id objc_msgSend_currentBatteryTemperature(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentBatteryTemperature");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentClient");
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentConnection");
}

id objc_msgSend_currentLoadFromActivities_inGroupWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentLoadFromActivities:inGroupWithName:");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_currentMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentMode");
}

id objc_msgSend_currentNetworkQualityWithContext_interface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentNetworkQualityWithContext:interface:");
}

id objc_msgSend_currentPredictions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentPredictions");
}

id objc_msgSend_currentProbabilities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentProbabilities");
}

id objc_msgSend_currentReportingConditions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentReportingConditions");
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentState");
}

id objc_msgSend_currentStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentStatus");
}

id objc_msgSend_currentValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentValue");
}

id objc_msgSend_customBANetworkingBudget(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "customBANetworkingBudget");
}

id objc_msgSend_daemon(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "daemon");
}

id objc_msgSend_dailyBudget(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dailyBudget");
}

id objc_msgSend_dailyBudgetForWidget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dailyBudgetForWidget:");
}

id objc_msgSend_dailyBudgetsForAllWidgets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dailyBudgetsForAllWidgets");
}

id objc_msgSend_dailyDataBudgetFromPlan_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dailyDataBudgetFromPlan:error:");
}

id objc_msgSend_darkWakeEligible(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "darkWakeEligible");
}

id objc_msgSend_dasCancelActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dasCancelActivity:");
}

id objc_msgSend_dasCompleteActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dasCompleteActivity:");
}

id objc_msgSend_dasSubmitActivity_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dasSubmitActivity:error:");
}

id objc_msgSend_dasSubmitActivity_withClientOffset_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dasSubmitActivity:withClientOffset:error:");
}

id objc_msgSend_dastool_forceResetOfResultIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dastool_forceResetOfResultIdentifier:");
}

id objc_msgSend_dastool_queryStatusOfResultIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dastool_queryStatusOfResultIdentifier:");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "data");
}

id objc_msgSend_dataBudgetForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataBudgetForActivity:");
}

id objc_msgSend_dataBudgetName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataBudgetName");
}

id objc_msgSend_dataBudgeted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataBudgeted");
}

id objc_msgSend_dataForRequest_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataForRequest:withError:");
}

id objc_msgSend_dataProtectionClassA(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataProtectionClassA");
}

id objc_msgSend_dataProtectionClassB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataProtectionClassB");
}

id objc_msgSend_dataProtectionClassC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataProtectionClassC");
}

id objc_msgSend_dataProtectionClassD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataProtectionClassD");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_data_budgeted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "data_budgeted");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "date");
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeInterval:sinceDate:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "day");
}

id objc_msgSend_deadlineTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deadlineTime");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "debugDescription");
}

id objc_msgSend_decision(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decision");
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeDoubleForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decrementBy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decrementBy:");
}

id objc_msgSend_decrementBy_forBudgetWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decrementBy:forBudgetWithName:");
}

id objc_msgSend_decrementPushBudgetRemaining(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decrementPushBudgetRemaining");
}

id objc_msgSend_defaultCategory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultCategory");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultDeviceRestartDateRangeWithDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultDeviceRestartDateRangeWithDate:");
}

id objc_msgSend_defaultInexpensivePathEvaluator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultInexpensivePathEvaluator");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultNotifcationRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultNotifcationRequest");
}

id objc_msgSend_defaultPairedDeviceNearbyStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultPairedDeviceNearbyStream");
}

id objc_msgSend_defaultPathEvaluator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultPathEvaluator");
}

id objc_msgSend_defaultRateLimiterConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultRateLimiterConfiguration");
}

id objc_msgSend_defaultRuntimeForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultRuntimeForActivity:");
}

id objc_msgSend_defaultSystemCellularBudget(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultSystemCellularBudget");
}

id objc_msgSend_defaultSystemEnergyBudget(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultSystemEnergyBudget");
}

id objc_msgSend_defaultUnconstrainedPathEvaluator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultUnconstrainedPathEvaluator");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_deferred(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deferred");
}

id objc_msgSend_deficitProcessing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deficitProcessing");
}

id objc_msgSend_delayedStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "delayedStart");
}

id objc_msgSend_delegateQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "delegateQueue");
}

id objc_msgSend_deleteActivites_moc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteActivites:moc:");
}

id objc_msgSend_deleteActivitiesIfRequired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteActivitiesIfRequired");
}

id objc_msgSend_deleteActivitiesIfRequired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteActivitiesIfRequired:");
}

id objc_msgSend_deleteActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteActivity:");
}

id objc_msgSend_deleteActivity_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteActivity:context:");
}

id objc_msgSend_deleteConvertedStreams(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteConvertedStreams");
}

id objc_msgSend_deleteDatabaseForPSC_protectionClass_obliterate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteDatabaseForPSC:protectionClass:obliterate:");
}

id objc_msgSend_deleteEventsFromStream_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteEventsFromStream:");
}

id objc_msgSend_deleteEventsPassingTest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteEventsPassingTest:");
}

id objc_msgSend_deleteLimitForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteLimitForActivity:");
}

id objc_msgSend_deleteObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteObject:");
}

id objc_msgSend_deleteObjects_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteObjects:error:");
}

id objc_msgSend_deleteOldActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteOldActivities:");
}

id objc_msgSend_deleteOldDurations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteOldDurations");
}

id objc_msgSend_deleteStorageFor_obliterate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteStorageFor:obliterate:");
}

id objc_msgSend_dependencies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dependencies");
}

id objc_msgSend_dependenciesPreCleared(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dependenciesPreCleared");
}

id objc_msgSend_dependencyForIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dependencyForIdentifier:");
}

id objc_msgSend_dependencyFromDescriptor_withUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dependencyFromDescriptor:withUID:");
}

id objc_msgSend_dependencyIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dependencyIdentifiers");
}

id objc_msgSend_deploymentID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deploymentID");
}

id objc_msgSend_deploymentId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deploymentId");
}

id objc_msgSend_deregisterDependent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deregisterDependent:");
}

id objc_msgSend_deregisterProducer_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deregisterProducer:error:");
}

id objc_msgSend_deregisterStateChangeHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deregisterStateChangeHandler:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "description");
}

id objc_msgSend_descriptionWithLocale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptionWithLocale:");
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptor");
}

id objc_msgSend_descriptorWithSubscriptionContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptorWithSubscriptionContext:");
}

id objc_msgSend_destroyPersistentStoreAtURL_withType_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "destroyPersistentStoreAtURL:withType:options:error:");
}

id objc_msgSend_determineAppsWithBackgroundRunningModes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "determineAppsWithBackgroundRunningModes");
}

id objc_msgSend_determineNextTimerFireDateAndSchedule(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "determineNextTimerFireDateAndSchedule");
}

id objc_msgSend_deviceActivityLevelStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceActivityLevelStream");
}

id objc_msgSend_deviceActivityLikelihood(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceActivityLikelihood");
}

id objc_msgSend_deviceActivityState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceActivityState");
}

id objc_msgSend_deviceActivityTimeline(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceActivityTimeline");
}

id objc_msgSend_deviceBatteryPercentageStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceBatteryPercentageStream");
}

id objc_msgSend_deviceHasBeenUnlockedSinceBoot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceHasBeenUnlockedSinceBoot");
}

id objc_msgSend_deviceHasEnoughPluggedInTimeWithMinimumDays_withContext_withKnowledgeStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceHasEnoughPluggedInTimeWithMinimumDays:withContext:withKnowledgeStore:");
}

id objc_msgSend_deviceIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIdentifier");
}

id objc_msgSend_deviceIsLocked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIsLocked");
}

id objc_msgSend_deviceIsLockedImputedStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIsLockedImputedStream");
}

id objc_msgSend_deviceIsPasswordConfigured(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIsPasswordConfigured");
}

id objc_msgSend_deviceIsPluggedInStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIsPluggedInStream");
}

id objc_msgSend_deviceIsToppingOff_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIsToppingOff:");
}

id objc_msgSend_deviceLowPowerModeStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceLowPowerModeStream");
}

id objc_msgSend_deviceNearbyTimeline(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceNearbyTimeline");
}

id objc_msgSend_deviceRecentlyLocked_since_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceRecentlyLocked:since:");
}

id objc_msgSend_deviceUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceUUID");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryForKey:");
}

id objc_msgSend_dictionaryForPlist_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryForPlist:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryRepresentation");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didCoalesceWithPrevious_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didCoalesceWithPrevious:");
}

id objc_msgSend_didStopTrackingNOI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didStopTrackingNOI:");
}

id objc_msgSend_disableAppRefreshForApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableAppRefreshForApps:");
}

id objc_msgSend_discountedHours(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "discountedHours");
}

id objc_msgSend_diskIntensive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "diskIntensive");
}

id objc_msgSend_diskVolume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "diskVolume");
}

id objc_msgSend_dispatchSourceProcessExit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchSourceProcessExit");
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "distantFuture");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "distantPast");
}

id objc_msgSend_dkEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dkEvent");
}

id objc_msgSend_dk_dedup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dk_dedup");
}

id objc_msgSend_doNotDisturbStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doNotDisturbStream");
}

id objc_msgSend_dockManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dockManager");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domain");
}

id objc_msgSend_domestic(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domestic");
}

id objc_msgSend_doubleForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doubleForKey:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_downloadSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadSize");
}

id objc_msgSend_duet_power_budgeted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "duet_power_budgeted");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "duration");
}

id objc_msgSend_durationForFeature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "durationForFeature:");
}

id objc_msgSend_durationWithActivityType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "durationWithActivityType:");
}

id objc_msgSend_dutyCycleTimeFromEffort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dutyCycleTimeFromEffort:");
}

id objc_msgSend_dutyCyclingInitiated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dutyCyclingInitiated");
}

id objc_msgSend_dutyCyclingMethod(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dutyCyclingMethod");
}

id objc_msgSend_dynamicDurationForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dynamicDurationForActivity:");
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "earlierDate:");
}

id objc_msgSend_earlyToday(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "earlyToday");
}

id objc_msgSend_effectiveUserIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveUserIdentifier");
}

id objc_msgSend_eligibleTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eligibleTime");
}

id objc_msgSend_enManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enManager");
}

id objc_msgSend_enTaskIdentifiersForApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enTaskIdentifiersForApplication:");
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enabled");
}

id objc_msgSend_encodeDouble_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeDouble:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encounteredTLC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encounteredTLC");
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "end");
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endDate");
}

id objc_msgSend_endDependencyMonitoringForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endDependencyMonitoringForActivity:");
}

id objc_msgSend_endEventForApp_pid_forEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endEventForApp:pid:forEvent:");
}

id objc_msgSend_endTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endTime");
}

id objc_msgSend_endowmentNamespaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endowmentNamespaces");
}

id objc_msgSend_endpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpoint");
}

id objc_msgSend_endpointForMachName_service_instance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpointForMachName:service:instance:");
}

id objc_msgSend_endpointWithCEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpointWithCEndpoint:");
}

id objc_msgSend_energyConsumed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "energyConsumed:");
}

id objc_msgSend_energyConsumedFrom_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "energyConsumedFrom:");
}

id objc_msgSend_entityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "entityForName:inManagedObjectContext:");
}

id objc_msgSend_entityName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "entityName");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsInChunksOfSize_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateObjectsInChunksOfSize:block:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumeratorWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumeratorWithOptions:");
}

id objc_msgSend_ephemeralKeyPathWithKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ephemeralKeyPathWithKey:");
}

id objc_msgSend_epochTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "epochTimestamp");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "error");
}

id objc_msgSend_errorCheck_withError_onActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorCheck:withError:onActivity:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_establishConnectionFromClient_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "establishConnectionFromClient:withCompletionHandler:");
}

id objc_msgSend_evaluateActivityAtSubmission_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateActivityAtSubmission:");
}

id objc_msgSend_evaluateAllActivitiesFor_writingToFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateAllActivitiesFor:writingToFile:");
}

id objc_msgSend_evaluateAndReportBlockingReasonsForAllCriteria(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateAndReportBlockingReasonsForAllCriteria");
}

id objc_msgSend_evaluateAssertions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateAssertions");
}

id objc_msgSend_evaluateFreezerRecommendations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateFreezerRecommendations");
}

id objc_msgSend_evaluatePolicies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluatePolicies");
}

id objc_msgSend_evaluatePolicies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluatePolicies:");
}

id objc_msgSend_evaluatePoliciesForActivitiesChunk_writingToFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluatePoliciesForActivitiesChunk:writingToFile:");
}

id objc_msgSend_evaluatePrewarmRecommendations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluatePrewarmRecommendations");
}

id objc_msgSend_evaluateRateLimitedActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateRateLimitedActivity:");
}

id objc_msgSend_evaluateRecommendationsFromTimeline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateRecommendationsFromTimeline:");
}

id objc_msgSend_evaluateScoreAndRunActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateScoreAndRunActivities:");
}

id objc_msgSend_evaluateScoreAndRunAllActivitiesForReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateScoreAndRunAllActivitiesForReason:");
}

id objc_msgSend_evaluateWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateWithObject:");
}

id objc_msgSend_evaluationGroupForActivityID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluationGroupForActivityID:");
}

id objc_msgSend_evaluationGroupForParameters_endpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluationGroupForParameters:endpoint:");
}

id objc_msgSend_evaluationQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluationQueue");
}

id objc_msgSend_evaluationResultsAtExecution_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluationResultsAtExecution:");
}

id objc_msgSend_evaluationResultsWithLPMState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluationResultsWithLPMState:");
}

id objc_msgSend_evaluationResultsWithMaxedRateLimits_withNextEvaluationDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluationResultsWithMaxedRateLimits:withNextEvaluationDate:");
}

id objc_msgSend_evaluator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluator");
}

id objc_msgSend_eventBody(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventBody");
}

id objc_msgSend_eventQueryWithPredicate_eventStreams_offset_limit_sortDescriptors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventQueryWithPredicate:eventStreams:offset:limit:sortDescriptors:");
}

id objc_msgSend_eventStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventStream");
}

id objc_msgSend_eventStreamWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventStreamWithName:");
}

id objc_msgSend_eventWithAppBundleID_activationTime_launchReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventWithAppBundleID:activationTime:launchReason:");
}

id objc_msgSend_eventWithAppBundleID_appState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventWithAppBundleID:appState:");
}

id objc_msgSend_eventWithAppBundleID_pid_exitReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventWithAppBundleID:pid:exitReason:");
}

id objc_msgSend_eventWithMonotonicTimestamp_timeOffset_dictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventWithMonotonicTimestamp:timeOffset:dictionary:");
}

id objc_msgSend_eventWithStream_startDate_endDate_categoryIntegerValue_metadata_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventWithStream:startDate:endDate:categoryIntegerValue:metadata:");
}

id objc_msgSend_eventWithStream_startDate_endDate_identifierStringValue_metadata_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventWithStream:startDate:endDate:identifierStringValue:metadata:");
}

id objc_msgSend_eventWithStream_startDate_endDate_value_metadata_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventWithStream:startDate:endDate:value:metadata:");
}

id objc_msgSend_exactFeatureCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exactFeatureCode:");
}

id objc_msgSend_exactTaskNamePredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exactTaskNamePredicate:");
}

id objc_msgSend_executableObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executableObject");
}

id objc_msgSend_executableSpecification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executableSpecification");
}

id objc_msgSend_execute_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "execute:");
}

id objc_msgSend_execute_assertion_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "execute:assertion:error:");
}

id objc_msgSend_executeActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeActivity:");
}

id objc_msgSend_executeActivity_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeActivity:atDate:");
}

id objc_msgSend_executeAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeAtDate:");
}

id objc_msgSend_executeDutyCyclingWithEffort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeDutyCyclingWithEffort:");
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeFetchRequest:error:");
}

id objc_msgSend_executeQuery_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeQuery:error:");
}

id objc_msgSend_executeQuery_responseQueue_withCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeQuery:responseQueue:withCompletion:");
}

id objc_msgSend_executeRequest_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeRequest:error:");
}

id objc_msgSend_executeSFIWithEffort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeSFIWithEffort:");
}

id objc_msgSend_exhaustedRuntimeFeatureCodesAssociatedWithActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exhaustedRuntimeFeatureCodesAssociatedWithActivity:");
}

id objc_msgSend_existingPluginForIdentifier_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "existingPluginForIdentifier:ofType:");
}

id objc_msgSend_exitEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exitEvent");
}

id objc_msgSend_exitReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exitReason");
}

id objc_msgSend_expected_duration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expected_duration");
}

id objc_msgSend_expected_network_download_size_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expected_network_download_size_bytes");
}

id objc_msgSend_expected_network_upload_size_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expected_network_upload_size_bytes");
}

id objc_msgSend_experimentID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "experimentID");
}

id objc_msgSend_experimentId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "experimentId");
}

id objc_msgSend_experimentIdentifiersWithNamespaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "experimentIdentifiersWithNamespaceName:");
}

id objc_msgSend_experimentsToWrite(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "experimentsToWrite");
}

id objc_msgSend_exposureNotificationEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exposureNotificationEnabled");
}

id objc_msgSend_exposureNotificationGetStatusForBundleIdentifier_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exposureNotificationGetStatusForBundleIdentifier:completion:");
}

id objc_msgSend_extendJSONArrayWithAnotherArray_toFileHandler_isPreviouslyEmpty_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extendJSONArrayWithAnotherArray:toFileHandler:isPreviouslyEmpty:");
}

id objc_msgSend_extension(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extension");
}

id objc_msgSend_extensionDidFinishWithStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extensionDidFinishWithStatus:");
}

id objc_msgSend_extensionForIdentifier_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extensionForIdentifier:ofType:");
}

id objc_msgSend_extensionHostIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extensionHostIdentifier");
}

id objc_msgSend_extensionIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extensionIdentifier");
}

id objc_msgSend_extensionName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extensionName");
}

id objc_msgSend_extensionPointRecord(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extensionPointRecord");
}

id objc_msgSend_extensionWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extensionWithIdentifier:error:");
}

id objc_msgSend_extensionsWithMatchingAttributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extensionsWithMatchingAttributes:error:");
}

id objc_msgSend_extractSignposts_startDate_chunkedByInterval_context_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extractSignposts:startDate:chunkedByInterval:context:error:");
}

id objc_msgSend_factorWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "factorWithName:");
}

id objc_msgSend_fastPass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fastPass");
}

id objc_msgSend_featureCodes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featureCodes");
}

id objc_msgSend_featureDurationLimitAppliesToActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featureDurationLimitAppliesToActivity:");
}

id objc_msgSend_featureHasNoRemainingRuntimeForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featureHasNoRemainingRuntimeForActivity:");
}

id objc_msgSend_featureHasRunTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featureHasRunTime:");
}

id objc_msgSend_fetchActivitiesUsingPredicate_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchActivitiesUsingPredicate:context:");
}

id objc_msgSend_fetchActivity_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchActivity:context:");
}

id objc_msgSend_fetchAllActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchAllActivities:");
}

id objc_msgSend_fetchAllGroups_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchAllGroups:");
}

id objc_msgSend_fetchDataPlanMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchDataPlanMetrics:");
}

id objc_msgSend_fetchDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchDate");
}

id objc_msgSend_fetchLatestBARMetric(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchLatestBARMetric");
}

id objc_msgSend_fetchOrCreateTrigger_managedObjectContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchOrCreateTrigger:managedObjectContext:");
}

id objc_msgSend_fetchPurgeableSpaceInfoForVolume_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchPurgeableSpaceInfoForVolume:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileHandleForUpdatingAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileHandleForUpdatingAtPath:");
}

id objc_msgSend_fileProtection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileProtection");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_filterTimeSeriesByFeatureCodes_timeSeries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterTimeSeriesByFeatureCodes:timeSeries:");
}

id objc_msgSend_filterTimeSeriesByTaskIdentifiers_timeSeries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterTimeSeriesByTaskIdentifiers:timeSeries:");
}

id objc_msgSend_filterTimeSeriesByTimeFilter_timeSeries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterTimeSeriesByTimeFilter:timeSeries:");
}

id objc_msgSend_filterWithIsIncluded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterWithIsIncluded:");
}

id objc_msgSend_filterWithKeyPath_comparison_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterWithKeyPath:comparison:value:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_filteredSetUsingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filteredSetUsingPredicate:");
}

id objc_msgSend_filteredTimeSeriesUsingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filteredTimeSeriesUsingPredicate:");
}

id objc_msgSend_findActivitiesByName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findActivitiesByName:");
}

id objc_msgSend_findLastDASTaskCheckpointEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findLastDASTaskCheckpointEvent:");
}

id objc_msgSend_findLastTaskSubmissionEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findLastTaskSubmissionEvent:");
}

id objc_msgSend_firstIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstIndex");
}

id objc_msgSend_firstKillEventDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstKillEventDate");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstObject");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "floatValue");
}

id objc_msgSend_flushComputedBudgetCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flushComputedBudgetCache");
}

id objc_msgSend_flushPPSCaches(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flushPPSCaches");
}

id objc_msgSend_focalApplicationsWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "focalApplicationsWithContext:");
}

id objc_msgSend_forceRunActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceRunActivities:");
}

id objc_msgSend_forecastForTimeInterval_from_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forecastForTimeInterval:from:");
}

id objc_msgSend_forecastMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forecastMap");
}

id objc_msgSend_freezerRecommendations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "freezerRecommendations");
}

id objc_msgSend_frequentlyUserKilledApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "frequentlyUserKilledApps");
}

id objc_msgSend_fuzzedDateFromDate_forStreamName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fuzzedDateFromDate:forStreamName:");
}

id objc_msgSend_garbageCollectActivityDates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "garbageCollectActivityDates");
}

id objc_msgSend_gaussianKDEatDate_withTimeline_withNormalizer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gaussianKDEatDate:withTimeline:withNormalizer:");
}

id objc_msgSend_generateAccuraciesCAEventDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateAccuraciesCAEventDictionary");
}

id objc_msgSend_generateCRFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateCRFile");
}

id objc_msgSend_generateUsageVectorRepresentationWithStreamAUsage_streamBUsage_outputRepresentationA_outputRepresentationB_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateUsageVectorRepresentationWithStreamAUsage:streamBUsage:outputRepresentationA:outputRepresentationB:");
}

id objc_msgSend_getActivityBaseTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getActivityBaseTime");
}

id objc_msgSend_getActivityFromManagedObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getActivityFromManagedObject:");
}

id objc_msgSend_getActivityRunningWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getActivityRunningWithName:");
}

id objc_msgSend_getActivityRunningWithUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getActivityRunningWithUUID:");
}

id objc_msgSend_getActivityTimelines_timeFilter_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getActivityTimelines:timeFilter:filepath:");
}

id objc_msgSend_getActivityWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getActivityWithName:");
}

id objc_msgSend_getActivityWithUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getActivityWithUUID:");
}

id objc_msgSend_getAverageWidgetViewsPerDayWithStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAverageWidgetViewsPerDayWithStore:");
}

id objc_msgSend_getBatteryStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBatteryStatus");
}

id objc_msgSend_getBucketForDate_withBucketDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBucketForDate:withBucketDuration:");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getCString_maxLength_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCString:maxLength:encoding:");
}

id objc_msgSend_getCharacters_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCharacters:range:");
}

id objc_msgSend_getConditionsPenalties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getConditionsPenalties:");
}

id objc_msgSend_getConditionsPenalty_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getConditionsPenalty:");
}

id objc_msgSend_getCurrentBootSessionUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentBootSessionUUID");
}

id objc_msgSend_getDataConsumedFromBytesOnCell_bytesOnCellExpensive_bytesOnCellInexpensive_bytesOnWiFiExpensive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDataConsumedFromBytesOnCell:bytesOnCellExpensive:bytesOnCellInexpensive:bytesOnWiFiExpensive:");
}

id objc_msgSend_getDeviceBootTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDeviceBootTime");
}

id objc_msgSend_getDeviceConditionTimelines_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDeviceConditionTimelines:filepath:");
}

id objc_msgSend_getDeviceRestartForecast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDeviceRestartForecast");
}

id objc_msgSend_getDiscretionaryEnergyBudget(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDiscretionaryEnergyBudget");
}

id objc_msgSend_getFeatureTimelines_timeFilter_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFeatureTimelines:timeFilter:filepath:");
}

id objc_msgSend_getFootprintsForProcess_physFootprintReference_frozenFootprintReference_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFootprintsForProcess:physFootprintReference:frozenFootprintReference:");
}

id objc_msgSend_getGroupFromManagedObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getGroupFromManagedObject:");
}

id objc_msgSend_getInferredCarryStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getInferredCarryStatus");
}

id objc_msgSend_getInfoForKey_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getInfoForKey:completion:");
}

id objc_msgSend_getLastOSUpgradeTimestamp_endDate_eraseInstallOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLastOSUpgradeTimestamp:endDate:eraseInstallOnly:");
}

id objc_msgSend_getLedgerCountForProcess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLedgerCountForProcess:");
}

id objc_msgSend_getMissingBudgetsWithExistingBudgets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMissingBudgetsWithExistingBudgets:");
}

id objc_msgSend_getPPSData_filepath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPPSData:filepath:error:");
}

id objc_msgSend_getPPSTimeSeries_category_valueFilter_metrics_timeFilter_filepath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPPSTimeSeries:category:valueFilter:metrics:timeFilter:filepath:error:");
}

id objc_msgSend_getPPSTimeSeries_category_valueFilter_metrics_timeFilter_limitCount_offsetCount_readDirection_filepath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPPSTimeSeries:category:valueFilter:metrics:timeFilter:limitCount:offsetCount:readDirection:filepath:error:");
}

id objc_msgSend_getPairedDevices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPairedDevices");
}

id objc_msgSend_getPendingTaskRequestsForApplication_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPendingTaskRequestsForApplication:withCompletionHandler:");
}

id objc_msgSend_getPhysMemSizeInBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPhysMemSizeInBytes");
}

id objc_msgSend_getPreferredDataSubscriptionContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPreferredDataSubscriptionContext:");
}

id objc_msgSend_getProcessHandleFromRunningBoardForPid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getProcessHandleFromRunningBoardForPid:");
}

id objc_msgSend_getReasonForThermalLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getReasonForThermalLevel:");
}

id objc_msgSend_getRecentUniqueInstallationEvents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRecentUniqueInstallationEvents:");
}

id objc_msgSend_getRecentUniqueProgressEvents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRecentUniqueProgressEvents:");
}

id objc_msgSend_getReferenceChargeRateForContext_reader_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getReferenceChargeRateForContext:reader:");
}

id objc_msgSend_getReferenceTemperatureForContext_reader_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getReferenceTemperatureForContext:reader:");
}

id objc_msgSend_getResponseStringForPolicy_response_appliesToActivity_weightForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getResponseStringForPolicy:response:appliesToActivity:weightForActivity:");
}

id objc_msgSend_getScoreForActivity_forBatteryLevel_isPluggedIn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getScoreForActivity:forBatteryLevel:isPluggedIn:");
}

id objc_msgSend_getScoreForThermalLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getScoreForThermalLevel:");
}

id objc_msgSend_getScoreForTimeSlot_activityPriority_activityScore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getScoreForTimeSlot:activityPriority:activityScore:");
}

id objc_msgSend_getTaskCheckpointPairings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTaskCheckpointPairings:");
}

id objc_msgSend_getTasksForFeatures_timeFilter_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTasksForFeatures:timeFilter:filepath:");
}

id objc_msgSend_getTimeSlotForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTimeSlotForActivity:");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_getUnlockAndSoftwareUpdateTimes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUnlockAndSoftwareUpdateTimes");
}

id objc_msgSend_getValue_size_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getValue:size:");
}

id objc_msgSend_getValuesForPrediction_tillEndDate_withIntervals_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getValuesForPrediction:tillEndDate:withIntervals:");
}

id objc_msgSend_getValuesFromTimeline_valueMultiplier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getValuesFromTimeline:valueMultiplier:");
}

id objc_msgSend_gpuIntensive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gpuIntensive");
}

id objc_msgSend_groupFromDefaultsWithoutCreation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupFromDefaultsWithoutCreation:");
}

id objc_msgSend_groupFromPersistence_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupFromPersistence:");
}

id objc_msgSend_groupFromPersistenceWithoutCreation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupFromPersistenceWithoutCreation:");
}

id objc_msgSend_groupName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupName");
}

id objc_msgSend_groupWithName_maxConcurrent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupWithName:maxConcurrent:");
}

id objc_msgSend_group_concurrency_limit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "group_concurrency_limit");
}

id objc_msgSend_group_name(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "group_name");
}

id objc_msgSend_handleActiveAppChanged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleActiveAppChanged");
}

id objc_msgSend_handleActivitySubmission_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleActivitySubmission:");
}

id objc_msgSend_handleAppsForegrounded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleAppsForegrounded:");
}

id objc_msgSend_handleBatteryNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleBatteryNotification");
}

id objc_msgSend_handleCacheDeletePurgeableSpaceNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCacheDeletePurgeableSpaceNotification");
}

id objc_msgSend_handleClientInterruption(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleClientInterruption");
}

id objc_msgSend_handleClientLedSystemTaskExpirationWithIdentifier_withPID_withUID_retryAfter_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleClientLedSystemTaskExpirationWithIdentifier:withPID:withUID:retryAfter:completionHandler:");
}

id objc_msgSend_handleDataProtectionChangeFor_willBeAvailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDataProtectionChangeFor:willBeAvailable:");
}

id objc_msgSend_handleDatabaseErrors_forPSC_protectionClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDatabaseErrors:forPSC:protectionClass:");
}

id objc_msgSend_handleFailureToAcquireAssertion_forProcess_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFailureToAcquireAssertion:forProcess:withError:");
}

id objc_msgSend_handleForFilename_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleForFilename:");
}

id objc_msgSend_handleForIdentifier_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleForIdentifier:error:");
}

id objc_msgSend_handleForPredicate_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleForPredicate:error:");
}

id objc_msgSend_handleKeyBagLockNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleKeyBagLockNotification");
}

id objc_msgSend_handleLaunchFromDaemonForActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleLaunchFromDaemonForActivities:");
}

id objc_msgSend_handleNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleNotification");
}

id objc_msgSend_handleRunningActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRunningActivities:");
}

id objc_msgSend_handleTaskExpiration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTaskExpiration");
}

id objc_msgSend_handleTaskExpirationNeverEligible(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTaskExpirationNeverEligible");
}

id objc_msgSend_handleTimerFireAtDate_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTimerFireAtDate:withContext:");
}

id objc_msgSend_handleTrialContinuation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTrialContinuation:");
}

id objc_msgSend_handleTrialEnd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTrialEnd:");
}

id objc_msgSend_handleTrialStart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTrialStart:");
}

id objc_msgSend_handleTrialUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTrialUpdate:");
}

id objc_msgSend_handleTriggerEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTriggerEvent");
}

id objc_msgSend_handleTriggersBatched_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTriggersBatched:");
}

id objc_msgSend_handleWirelessModemDynamicStoreChanged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWirelessModemDynamicStoreChanged");
}

id objc_msgSend_handler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handler");
}

id objc_msgSend_handlerQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlerQueue");
}

id objc_msgSend_hasChanges(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasChanges");
}

id objc_msgSend_hasDynamicOverrides_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasDynamicOverrides:");
}

id objc_msgSend_hasEnoughTotalPluggedInTimeOfDuration_withMinimumSessionDuration_inLastHours_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasEnoughTotalPluggedInTimeOfDuration:withMinimumSessionDuration:inLastHours:");
}

id objc_msgSend_hasEntitlementForCustomIconBundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasEntitlementForCustomIconBundleIdentifier");
}

id objc_msgSend_hasEntitlementForProgressTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasEntitlementForProgressTask");
}

id objc_msgSend_hasFastPassRun_semanticVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasFastPassRun:semanticVersion:");
}

id objc_msgSend_hasFinishedRunningSinceLastWake_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasFinishedRunningSinceLastWake:");
}

id objc_msgSend_hasInstallActivityRun(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasInstallActivityRun");
}

id objc_msgSend_hasMagneticSensitivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasMagneticSensitivity");
}

id objc_msgSend_hasManyConstraints(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasManyConstraints");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasPrewarmAssertionForApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrewarmAssertionForApplication:");
}

id objc_msgSend_hasRecentlyUpdated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasRecentlyUpdated");
}

id objc_msgSend_hasStateForNetworkType_interfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasStateForNetworkType:interfaceName:");
}

id objc_msgSend_hasStaticOverrides_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasStaticOverrides:");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hash");
}

id objc_msgSend_haveRunActivities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "haveRunActivities");
}

id objc_msgSend_haveSignificantWorkRemaining_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "haveSignificantWorkRemaining:");
}

id objc_msgSend_histogramEventStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "histogramEventStream");
}

id objc_msgSend_histogramQueryForPersistedHistogramsForStream_withCustomIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "histogramQueryForPersistedHistogramsForStream:withCustomIdentifier:");
}

id objc_msgSend_histogramQueryForStream_interval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "histogramQueryForStream:interval:");
}

id objc_msgSend_histogramQueryForStream_interval_withPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "histogramQueryForStream:interval:withPredicate:");
}

id objc_msgSend_historicalClassification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "historicalClassification");
}

id objc_msgSend_hour(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hour");
}

id objc_msgSend_iconForSystemImageNamed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iconForSystemImageNamed:");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifier");
}

id objc_msgSend_identifierWithActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifierWithActivity:");
}

id objc_msgSend_identifierWithPid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifierWithPid:");
}

id objc_msgSend_identityForEmbeddedApplicationIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identityForEmbeddedApplicationIdentifier:");
}

id objc_msgSend_idsDeviceIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsDeviceIdentifier");
}

id objc_msgSend_immediatelyBeginWorkForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "immediatelyBeginWorkForActivity:");
}

id objc_msgSend_inADarkWake(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inADarkWake");
}

id objc_msgSend_inDiscountedHoursAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inDiscountedHoursAtDate:");
}

id objc_msgSend_inLowCongestionHoursAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inLowCongestionHoursAtDate:");
}

id objc_msgSend_inSmartPowerNap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inSmartPowerNap");
}

id objc_msgSend_incrementBy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "incrementBy:");
}

id objc_msgSend_incrementOccurrencesForKey_byCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "incrementOccurrencesForKey:byCount:");
}

id objc_msgSend_incrementOccurrencesForKeys_byCounts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "incrementOccurrencesForKeys:byCounts:");
}

id objc_msgSend_indexGreaterThanOrEqualToIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexGreaterThanOrEqualToIndex:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexSet");
}

id objc_msgSend_indicatesProtection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indicatesProtection");
}

id objc_msgSend_inexpensivePathAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inexpensivePathAvailable");
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "infoDictionary");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init");
}

id objc_msgSend_initActivityCompletionDependencyWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initActivityCompletionDependencyWithIdentifier:");
}

id objc_msgSend_initAsAnonymous_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initAsAnonymous:withContext:");
}

id objc_msgSend_initForBudgetTypes_withBudgets_persistence_withQueue_withStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForBudgetTypes:withBudgets:persistence:withQueue:withStore:");
}

id objc_msgSend_initFromDictionaryRepresentation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFromDictionaryRepresentation:");
}

id objc_msgSend_initProcessMonitorForDockedApplications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initProcessMonitorForDockedApplications");
}

id objc_msgSend_initResultDependencyWithIdentifier_batchSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initResultDependencyWithIdentifier:batchSize:");
}

id objc_msgSend_initTaskGraph(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initTaskGraph");
}

id objc_msgSend_initWithAccumulator_closure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAccumulator:closure:");
}

id objc_msgSend_initWithAlgorithms_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAlgorithms:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_initWithBundleIdentifier_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBundleIdentifier:error:");
}

id objc_msgSend_initWithBundleType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBundleType:");
}

id objc_msgSend_initWithCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCallback:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCapacity_aggregator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:aggregator:");
}

id objc_msgSend_initWithClientName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithClientName:");
}

id objc_msgSend_initWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCompletionBlock:");
}

id objc_msgSend_initWithConcurrencyType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConcurrencyType:");
}

id objc_msgSend_initWithCondition_withRequiredValue_withCurrentValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCondition:withRequiredValue:withCurrentValue:");
}

id objc_msgSend_initWithConfigurationName_andIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConfigurationName:andIdentifier:");
}

id objc_msgSend_initWithConsumerSubType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConsumerSubType:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCount:");
}

id objc_msgSend_initWithDKStreamIdentifier_contentProtection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDKStreamIdentifier:contentProtection:");
}

id objc_msgSend_initWithDaemon_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDaemon:");
}

id objc_msgSend_initWithDaemon_withConnection_isRestricted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDaemon:withConnection:isRestricted:");
}

id objc_msgSend_initWithDate_activityDurations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDate:activityDurations:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDescriptor_withToken_withUID_withService_staticSubmission_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDescriptor:withToken:withUID:withService:staticSubmission:");
}

id objc_msgSend_initWithDescriptor_withToken_withUID_withService_staticSubmission_task_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDescriptor:withToken:withUID:withService:staticSubmission:task:");
}

id objc_msgSend_initWithDeviceIdentifier_delegate_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDeviceIdentifier:delegate:queue:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionary_copyItems_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:copyItems:");
}

id objc_msgSend_initWithDimensions_predicate_timeFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDimensions:predicate:timeFilter:");
}

id objc_msgSend_initWithDirectory_databaseName_modelURL_readOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDirectory:databaseName:modelURL:readOnly:");
}

id objc_msgSend_initWithDirectory_readOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDirectory:readOnly:");
}

id objc_msgSend_initWithEndpoint_parameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEndpoint:parameters:");
}

id objc_msgSend_initWithEndpoint_parameters_activityID_callback_onQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEndpoint:parameters:activityID:callback:onQueue:");
}

id objc_msgSend_initWithEvents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEvents:");
}

id objc_msgSend_initWithExplanation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithExplanation:");
}

id objc_msgSend_initWithExplanation_target_attributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithExplanation:target:attributes:");
}

id objc_msgSend_initWithExtension_pluginMapKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithExtension:pluginMapKey:");
}

id objc_msgSend_initWithFetchRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFetchRequest:");
}

id objc_msgSend_initWithFilepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFilepath:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithHandler:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_consumerIdentifier_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIdentifier:consumerIdentifier:type:");
}

id objc_msgSend_initWithIdentifier_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIdentifier:count:");
}

id objc_msgSend_initWithIdentifier_targetQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIdentifier:targetQueue:");
}

id objc_msgSend_initWithInterface_interfaceSubtype_onChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInterface:interfaceSubtype:onChange:");
}

id objc_msgSend_initWithKey_ascending_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKey:ascending:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithManagedObjectModel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithManagedObjectModel:");
}

id objc_msgSend_initWithMaxedRateLimits_withNextEvaluationDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMaxedRateLimits:withNextEvaluationDate:");
}

id objc_msgSend_initWithMetrics_predicate_timeFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMetrics:predicate:timeFilter:");
}

id objc_msgSend_initWithMetrics_predicate_timeFilter_limitCount_offsetCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMetrics:predicate:timeFilter:limitCount:offsetCount:");
}

id objc_msgSend_initWithMetrics_predicate_timeFilter_limitCount_offsetCount_readDirection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMetrics:predicate:timeFilter:limitCount:offsetCount:readDirection:");
}

id objc_msgSend_initWithName_capacity_balance_allocationType_lastModulatedDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:capacity:balance:allocationType:lastModulatedDate:");
}

id objc_msgSend_initWithName_intervalDuration_withLogger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:intervalDuration:withLogger:");
}

id objc_msgSend_initWithName_maxBatchingDelay_maxQueueDepth_queue_workItemsHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:maxBatchingDelay:maxQueueDepth:queue:workItemsHandler:");
}

id objc_msgSend_initWithName_widgetBudgetID_capacity_balance_allocationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:widgetBudgetID:capacity:balance:allocationType:");
}

id objc_msgSend_initWithNamespaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNamespaceName:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithParams_terminalEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithParams:terminalEvent:");
}

id objc_msgSend_initWithPolicyName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPolicyName:");
}

id objc_msgSend_initWithPredicate_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPredicate:context:");
}

id objc_msgSend_initWithPrivateStreamIdentifier_storeConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPrivateStreamIdentifier:storeConfig:");
}

id objc_msgSend_initWithProducedResultIdentifiers_dependencyIdentifiers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithProducedResultIdentifiers:dependencyIdentifiers:");
}

id objc_msgSend_initWithProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithProgress:");
}

id objc_msgSend_initWithPublicStream_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPublicStream:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithQueueLimit_reader_monitoringInterval_analyzeToMonitorRatio_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueueLimit:reader:monitoringInterval:analyzeToMonitorRatio:");
}

id objc_msgSend_initWithRBSAssertion_forPid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRBSAssertion:forPid:");
}

id objc_msgSend_initWithRateLimit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRateLimit:");
}

id objc_msgSend_initWithRateLimit_andOccurrences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRateLimit:andOccurrences:");
}

id objc_msgSend_initWithRateLimit_withIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRateLimit:withIdentifier:");
}

id objc_msgSend_initWithRemoteNotificationPayload_withHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRemoteNotificationPayload:withHandler:");
}

id objc_msgSend_initWithResultIdentifier_activityIdentifier_resultCount_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithResultIdentifier:activityIdentifier:resultCount:type:");
}

id objc_msgSend_initWithScheduler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithScheduler:");
}

id objc_msgSend_initWithScore_decision_validityDuration_rationale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithScore:decision:validityDuration:rationale:");
}

id objc_msgSend_initWithScore_reason_decision_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithScore:reason:decision:");
}

id objc_msgSend_initWithStartDate_duration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithStartDate:duration:");
}

id objc_msgSend_initWithStartDate_endDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithStartDate:endDate:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTimeIntervalSince1970:");
}

id objc_msgSend_initWithTrackedActivityIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTrackedActivityIdentifier:");
}

id objc_msgSend_initWithURL_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithURL:allowPlaceholder:error:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithWorkspace_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWorkspace:");
}

id objc_msgSend_initWorkspaceWithService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWorkspaceWithService:");
}

id objc_msgSend_initialDelay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialDelay");
}

id objc_msgSend_initializeAllPolicies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeAllPolicies");
}

id objc_msgSend_initializeCarryStatusLogging(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeCarryStatusLogging");
}

id objc_msgSend_initializeCoreTelephonyClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeCoreTelephonyClient");
}

id objc_msgSend_initializeLedgerIndices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeLedgerIndices");
}

id objc_msgSend_initializeLogs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeLogs");
}

id objc_msgSend_initializePluginTrigger(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializePluginTrigger");
}

id objc_msgSend_initializeRateLimitWithActivity_withIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeRateLimitWithActivity:withIdentifier:");
}

id objc_msgSend_initializeTimelines(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeTimelines");
}

id objc_msgSend_initializeTriggers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeTriggers");
}

id objc_msgSend_insertNewObjectForEntityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertNewObjectForEntityForName:inManagedObjectContext:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_inspect_withHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inspect:withHandler:");
}

id objc_msgSend_instanceWithReportingHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instanceWithReportingHandler:");
}

id objc_msgSend_instantiateConfiguredBudgets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instantiateConfiguredBudgets");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerValue");
}

id objc_msgSend_intentSyncIsEngaged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intentSyncIsEngaged");
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interface");
}

id objc_msgSend_interfaceSubtype(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceSubtype");
}

id objc_msgSend_interfaceWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceWithIdentifier:");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intersectSet:");
}

id objc_msgSend_interval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interval");
}

id objc_msgSend_intializeAnalyzerTimerWithCadence_forAction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intializeAnalyzerTimerWithCadence:forAction:");
}

id objc_msgSend_intializeAnalyzers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intializeAnalyzers");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateComputedBudgetCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateComputedBudgetCache");
}

id objc_msgSend_invalidateDockedAppAssertion_forProcess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateDockedAppAssertion:forProcess:");
}

id objc_msgSend_invalidateManagedObjectContextFor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateManagedObjectContextFor:");
}

id objc_msgSend_invalidatePersistentStoreCoordinatorFor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidatePersistentStoreCoordinatorFor:");
}

id objc_msgSend_invalidatePrewarmAssertionForApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidatePrewarmAssertionForApplication:");
}

id objc_msgSend_invalidatePrewarmAssertionForApplication_onInvalidation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidatePrewarmAssertionForApplication:onInvalidation:");
}

id objc_msgSend_invalidateSyncWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateSyncWithError:");
}

id objc_msgSend_invalidateWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateWithError:");
}

id objc_msgSend_invalidationHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidationHandler");
}

id objc_msgSend_invokeInitialActionWithValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invokeInitialActionWithValue:");
}

id objc_msgSend_involvedProcesses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "involvedProcesses");
}

id objc_msgSend_involvedProcessesForActivity_withIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "involvedProcessesForActivity:withIdentifier:");
}

id objc_msgSend_involved_processes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "involved_processes");
}

id objc_msgSend_isActiveComplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActiveComplication:");
}

id objc_msgSend_isActivity_consideredNonDiscretionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActivity:consideredNonDiscretionary:");
}

id objc_msgSend_isActivityCompletionBased(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActivityCompletionBased");
}

id objc_msgSend_isActivityRateLimited_atSubmission_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActivityRateLimited:atSubmission:");
}

id objc_msgSend_isActivitySignificantlyOverdue_now_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActivitySignificantlyOverdue:now:");
}

id objc_msgSend_isActivitySuspendable_withStartDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActivitySuspendable:withStartDate:");
}

id objc_msgSend_isAggregateClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAggregateClient:");
}

id objc_msgSend_isAnyActiveComplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAnyActiveComplication:");
}

id objc_msgSend_isAppRunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAppRunning:");
}

id objc_msgSend_isAppleAudioDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAppleAudioDevice");
}

id objc_msgSend_isAsleep(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAsleep");
}

id objc_msgSend_isAutomaticAppUpdatesAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAutomaticAppUpdatesAllowed");
}

id objc_msgSend_isBAREnabledOnWiFiOnly(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBAREnabledOnWiFiOnly");
}

id objc_msgSend_isBackgroundTaskActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBackgroundTaskActivity");
}

id objc_msgSend_isBacklightOff(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBacklightOff");
}

id objc_msgSend_isBackupStatusCompleted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBackupStatusCompleted:");
}

id objc_msgSend_isBudgetAvailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBudgetAvailable:");
}

id objc_msgSend_isCMMActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCMMActivity:");
}

id objc_msgSend_isClassCLocked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isClassCLocked");
}

id objc_msgSend_isConfiguration_compatibleWithStoreMetadata_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isConfiguration:compatibleWithStoreMetadata:");
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isConnected");
}

id objc_msgSend_isContactTracingBackgroundActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isContactTracingBackgroundActivity");
}

id objc_msgSend_isContinuedProcessingTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isContinuedProcessingTask");
}

id objc_msgSend_isDASTaskCheckpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDASTaskCheckpoint:");
}

id objc_msgSend_isDaemon_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDaemon:");
}

id objc_msgSend_isDataAvailableFor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDataAvailableFor:");
}

id objc_msgSend_isDataAvailableForClassA(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDataAvailableForClassA");
}

id objc_msgSend_isDataAvailableForClassC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDataAvailableForClassC");
}

id objc_msgSend_isDataBudgetAvailableForPhotos_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDataBudgetAvailableForPhotos:");
}

id objc_msgSend_isDate_inSameDayAsDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDate:inSameDayAsDate:");
}

id objc_msgSend_isDebugging(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDebugging");
}

id objc_msgSend_isDeletable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDeletable");
}

id objc_msgSend_isDependencySatisfiedForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDependencySatisfiedForActivity:");
}

id objc_msgSend_isDeviceInUse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDeviceInUse:");
}

id objc_msgSend_isDiskSpaceAvailableForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDiskSpaceAvailableForActivity:");
}

id objc_msgSend_isEligibleNow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEligibleNow");
}

id objc_msgSend_isEnergyBudgetAvailableForPhotos_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnergyBudgetAvailableForPhotos:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToDate:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isHighCarbonImpactWindow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isHighCarbonImpactWindow");
}

id objc_msgSend_isIdenticalLaunchTo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIdenticalLaunchTo:");
}

id objc_msgSend_isIgnorableNotChargingReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIgnorableNotChargingReason:");
}

id objc_msgSend_isInactiveAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInactiveAtDate:");
}

id objc_msgSend_isInstall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInstall");
}

id objc_msgSend_isInstalled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInstalled");
}

id objc_msgSend_isIntensive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIntensive");
}

id objc_msgSend_isInternal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInternal");
}

id objc_msgSend_isInternalBuild(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInternalBuild");
}

id objc_msgSend_isLaunchProhibited(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLaunchProhibited");
}

id objc_msgSend_isLowPowerModeEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLowPowerModeEnabled");
}

id objc_msgSend_isLowPowerModeEnabledWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLowPowerModeEnabledWithContext:");
}

id objc_msgSend_isLowPowerModeOverriddenForPhotos_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLowPowerModeOverriddenForPhotos:");
}

id objc_msgSend_isLowPowerModePolicyEnforced_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLowPowerModePolicyEnforced:");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMonitoringActivityID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMonitoringActivityID:");
}

id objc_msgSend_isMonitoringWithParameters_endpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMonitoringWithParameters:endpoint:");
}

id objc_msgSend_isMultiUser(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMultiUser");
}

id objc_msgSend_isNearby(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNearby");
}

id objc_msgSend_isNetworkPathAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkPathAvailable");
}

id objc_msgSend_isNetworkPathAvailableForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkPathAvailableForActivity:");
}

id objc_msgSend_isNewsstandApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNewsstandApp:");
}

id objc_msgSend_isPersistenceAvailableWithFileProtection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPersistenceAvailableWithFileProtection:");
}

id objc_msgSend_isPhotosForegroundWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPhotosForegroundWithContext:");
}

id objc_msgSend_isPhotosMessagesAppForegroundWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPhotosMessagesAppForegroundWithContext:");
}

id objc_msgSend_isPhotosSyncActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPhotosSyncActivity:");
}

id objc_msgSend_isPhotosSyncOverriddenWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPhotosSyncOverriddenWithContext:");
}

id objc_msgSend_isPluggedIn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPluggedIn:");
}

id objc_msgSend_isPolicyDecisionProceedable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPolicyDecisionProceedable:");
}

id objc_msgSend_isPossibleENActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPossibleENActivity:");
}

id objc_msgSend_isPremiumClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPremiumClient:");
}

id objc_msgSend_isPrewarmAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrewarmAllowed");
}

id objc_msgSend_isPrewarmAllowedForApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrewarmAllowedForApp:");
}

id objc_msgSend_isPrivateNetworkSIM_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrivateNetworkSIM:completion:");
}

id objc_msgSend_isProfilingDelayedForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isProfilingDelayedForActivity:");
}

id objc_msgSend_isRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRegistered");
}

id objc_msgSend_isRemoteDeviceAwake_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRemoteDeviceAwake:");
}

id objc_msgSend_isRemoteDeviceNearby_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRemoteDeviceNearby:");
}

id objc_msgSend_isRestoreInProgressWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRestoreInProgressWithContext:");
}

id objc_msgSend_isRestricted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRestricted");
}

id objc_msgSend_isRunning(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRunning");
}

id objc_msgSend_isSatisfiedByAvailableResultCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSatisfiedByAvailableResultCount:");
}

id objc_msgSend_isScoreBlocking_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isScoreBlocking:");
}

id objc_msgSend_isSilentPush(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSilentPush");
}

id objc_msgSend_isSleep(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSleep");
}

id objc_msgSend_isSoftwareUpdateActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSoftwareUpdateActivity");
}

id objc_msgSend_isStarting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isStarting");
}

id objc_msgSend_isUnavailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUnavailable");
}

id objc_msgSend_isUnconstrainedPathAvailableForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUnconstrainedPathAvailableForActivity:");
}

id objc_msgSend_isUnderPeakPowerPressureWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUnderPeakPowerPressureWithContext:");
}

id objc_msgSend_isUpload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUpload");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValid");
}

id objc_msgSend_isWirelessCharger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWirelessCharger:");
}

id objc_msgSend_isiCPLActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isiCPLActivity:");
}

id objc_msgSend_isiCloudKeychainActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isiCloudKeychainActivity:");
}

id objc_msgSend_isiPad(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isiPad");
}

id objc_msgSend_isiPhone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isiPhone");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "key");
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyEnumerator");
}

id objc_msgSend_keyPathForAppUsageDataDictionaries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForAppUsageDataDictionaries");
}

id objc_msgSend_keyPathForBacklightOnStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForBacklightOnStatus");
}

id objc_msgSend_keyPathForBatteryLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForBatteryLevel");
}

id objc_msgSend_keyPathForBatteryStateDataDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForBatteryStateDataDictionary");
}

id objc_msgSend_keyPathForBlockedStartDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForBlockedStartDate");
}

id objc_msgSend_keyPathForCPUUsageLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForCPUUsageLevel");
}

id objc_msgSend_keyPathForCallInProgressStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForCallInProgressStatus");
}

id objc_msgSend_keyPathForCarplayConnectedStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForCarplayConnectedStatus");
}

id objc_msgSend_keyPathForCellConnectionQuality(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForCellConnectionQuality");
}

id objc_msgSend_keyPathForCellConnectionStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForCellConnectionStatus");
}

id objc_msgSend_keyPathForCellQualityPrediction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForCellQualityPrediction");
}

id objc_msgSend_keyPathForDefaultPairedDeviceBatteryLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForDefaultPairedDeviceBatteryLevel");
}

id objc_msgSend_keyPathForDefaultPairedDeviceNearbyStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForDefaultPairedDeviceNearbyStatus");
}

id objc_msgSend_keyPathForDefaultPairedDevicePluginStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForDefaultPairedDevicePluginStatus");
}

id objc_msgSend_keyPathForDefaultPairedDeviceThermalPressureLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForDefaultPairedDeviceThermalPressureLevel");
}

id objc_msgSend_keyPathForDeviceAssertionsHeldStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForDeviceAssertionsHeldStatus");
}

id objc_msgSend_keyPathForDeviceLockStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForDeviceLockStatus");
}

id objc_msgSend_keyPathForDoNotDisturbStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForDoNotDisturbStatus");
}

id objc_msgSend_keyPathForEnergyBudgetRemainingStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForEnergyBudgetRemainingStatus");
}

id objc_msgSend_keyPathForInUseStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForInUseStatus");
}

id objc_msgSend_keyPathForKeybagLockStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForKeybagLockStatus");
}

id objc_msgSend_keyPathForLastUseDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForLastUseDate");
}

id objc_msgSend_keyPathForLowPowerModeStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForLowPowerModeStatus");
}

id objc_msgSend_keyPathForMotionState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForMotionState");
}

id objc_msgSend_keyPathForNetworkingBudgetRemainingStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForNetworkingBudgetRemainingStatus");
}

id objc_msgSend_keyPathForNextUserVisibleWakeDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForNextUserVisibleWakeDate");
}

id objc_msgSend_keyPathForPhotosBudgetOverride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForPhotosBudgetOverride");
}

id objc_msgSend_keyPathForPhotosIsBlocked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForPhotosIsBlocked");
}

id objc_msgSend_keyPathForPhotosIsUnBlocked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForPhotosIsUnBlocked");
}

id objc_msgSend_keyPathForPluginStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForPluginStatus");
}

id objc_msgSend_keyPathForThermalPressureLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForThermalPressureLevel");
}

id objc_msgSend_keyPathForWiFiConnectionQuality(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForWiFiConnectionQuality");
}

id objc_msgSend_keyPathForWiFiConnectionStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForWiFiConnectionStatus");
}

id objc_msgSend_keyPathForWiFiQualityPrediction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForWiFiQualityPrediction");
}

id objc_msgSend_keyPathForWiredConnectionQuality(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForWiredConnectionQuality");
}

id objc_msgSend_keyPathForWiredConnectionStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathForWiredConnectionStatus");
}

id objc_msgSend_keyPathWithKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPathWithKey:");
}

id objc_msgSend_keyPaths(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPaths");
}

id objc_msgSend_keysSortedByValueUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keysSortedByValueUsingComparator:");
}

id objc_msgSend_killScoresForAllApplicationsAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "killScoresForAllApplicationsAtDate:");
}

id objc_msgSend_knowledgeStore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "knowledgeStore");
}

id objc_msgSend_knowledgeStoreWithDirectReadWriteAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "knowledgeStoreWithDirectReadWriteAccess");
}

id objc_msgSend_last(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "last");
}

id objc_msgSend_lastCacheDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastCacheDate");
}

id objc_msgSend_lastDenialResponses_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastDenialResponses:");
}

id objc_msgSend_lastDenialValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastDenialValue");
}

id objc_msgSend_lastModifiedDateForContextualKeyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastModifiedDateForContextualKeyPath:");
}

id objc_msgSend_lastModulatedDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastModulatedDate");
}

id objc_msgSend_lastModulationDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastModulationDate");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPPSFlush(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastPPSFlush");
}

id objc_msgSend_lastScored(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastScored");
}

id objc_msgSend_lastWakeDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastWakeDate");
}

id objc_msgSend_laterDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "laterDate:");
}

id objc_msgSend_latestMarginalEmissionForecast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "latestMarginalEmissionForecast");
}

id objc_msgSend_launchApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchApplication:");
}

id objc_msgSend_launchApplication_applicationURL_additionalOptions_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchApplication:applicationURL:additionalOptions:completion:");
}

id objc_msgSend_launchCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchCount");
}

id objc_msgSend_launchDataCollectionStartDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchDataCollectionStartDate");
}

id objc_msgSend_launchIntervalForENApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchIntervalForENApplication:");
}

id objc_msgSend_launchLikelihoodForTopNApplications_withLikelihoodGreaterThan_withTemporalResolution_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchLikelihoodForTopNApplications:withLikelihoodGreaterThan:withTemporalResolution:");
}

id objc_msgSend_launchLikelihoodPredictionForApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchLikelihoodPredictionForApp:");
}

id objc_msgSend_launchLikelihoodPredictionForApp_withHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchLikelihoodPredictionForApp:withHandler:");
}

id objc_msgSend_launchReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchReason");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_levelFromTrialLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "levelFromTrialLevel:");
}

id objc_msgSend_libraryExceedsPhotoCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "libraryExceedsPhotoCount:");
}

id objc_msgSend_limit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "limit");
}

id objc_msgSend_limitResponseWithDecision_withLimiter_validityDuration_rationale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "limitResponseWithDecision:withLimiter:validityDuration:rationale:");
}

id objc_msgSend_limitationName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "limitationName");
}

id objc_msgSend_limitationResponse(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "limitationResponse");
}

id objc_msgSend_limitedActivity_withLimitsResponses_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "limitedActivity:withLimitsResponses:");
}

id objc_msgSend_limiterName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "limiterName");
}

id objc_msgSend_limitsApplyToActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "limitsApplyToActivity:");
}

id objc_msgSend_linkQuality(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkQuality");
}

id objc_msgSend_linkToBGSystemTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkToBGSystemTask:");
}

id objc_msgSend_loIAtBeginningAndEndOfIntervals_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loIAtBeginningAndEndOfIntervals:");
}

id objc_msgSend_loadAllGroups_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadAllGroups:");
}

id objc_msgSend_loadBaseTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadBaseTime");
}

id objc_msgSend_loadBudgetsWithExpectedNames_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadBudgetsWithExpectedNames:");
}

id objc_msgSend_loadCTInformationWithSDM_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadCTInformationWithSDM:");
}

id objc_msgSend_loadConfig_timeFilter_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadConfig:timeFilter:filepath:");
}

id objc_msgSend_loadCustomDurations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadCustomDurations");
}

id objc_msgSend_loadFeatureCheckpoints_metrics_timeFilter_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadFeatureCheckpoints:metrics:timeFilter:filepath:");
}

id objc_msgSend_loadIntensiveTaskBlockingReasons_metrics_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadIntensiveTaskBlockingReasons:metrics:filepath:");
}

id objc_msgSend_loadMaximumDurations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadMaximumDurations");
}

id objc_msgSend_loadOverrides(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadOverrides");
}

id objc_msgSend_loadParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadParameters");
}

id objc_msgSend_loadPendingLaunchTasks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadPendingLaunchTasks:");
}

id objc_msgSend_loadPriorityQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadPriorityQueue");
}

id objc_msgSend_loadState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadState");
}

id objc_msgSend_loadStateWhenAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadStateWhenAvailable");
}

id objc_msgSend_loadSubmittedRateLimitConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadSubmittedRateLimitConfiguration");
}

id objc_msgSend_loadTaskBlockingReasons_metrics_timeFilter_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadTaskBlockingReasons:metrics:timeFilter:filepath:");
}

id objc_msgSend_loadTaskCheckpoints_metrics_timeFilter_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadTaskCheckpoints:metrics:timeFilter:filepath:");
}

id objc_msgSend_loadTaskDependencies_metrics_timeFilter_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadTaskDependencies:metrics:timeFilter:filepath:");
}

id objc_msgSend_loadTaskProgress_metrics_timeFilter_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadTaskProgress:metrics:timeFilter:filepath:");
}

id objc_msgSend_loadTasksForFeatures_metrics_timeFilter_filepath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadTasksForFeatures:metrics:timeFilter:filepath:");
}

id objc_msgSend_loadTestingDefaults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadTestingDefaults");
}

id objc_msgSend_loadTrialParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadTrialParameters");
}

id objc_msgSend_loadTrialTreatmentAndExperimentIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadTrialTreatmentAndExperimentIdentifiers");
}

id objc_msgSend_loadUnavailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadUnavailable");
}

id objc_msgSend_localNonWakingRegistrationWithIdentifier_contextualPredicate_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localNonWakingRegistrationWithIdentifier:contextualPredicate:callback:");
}

id objc_msgSend_localTimeZone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localTimeZone");
}

id objc_msgSend_localWakingRegistrationWithIdentifier_contextualPredicate_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localWakingRegistrationWithIdentifier:contextualPredicate:callback:");
}

id objc_msgSend_localWakingRegistrationWithIdentifier_contextualPredicate_clientIdentifier_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localWakingRegistrationWithIdentifier:contextualPredicate:clientIdentifier:callback:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedName");
}

id objc_msgSend_lockStateMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lockStateMonitor");
}

id objc_msgSend_lockedEndProfilingForActivity_completed_withState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lockedEndProfilingForActivity:completed:withState:");
}

id objc_msgSend_lockedStartProfilingForActivity_withState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lockedStartProfilingForActivity:withState:");
}

id objc_msgSend_locked_addBudgetsToBeModulated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locked_addBudgetsToBeModulated:");
}

id objc_msgSend_locked_budgetAllocationProportionAtDate_forWidgetBudgetID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locked_budgetAllocationProportionAtDate:forWidgetBudgetID:");
}

id objc_msgSend_locked_instantiateBudgetsInto_withRemovals_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locked_instantiateBudgetsInto:withRemovals:");
}

id objc_msgSend_locked_modulateBudgets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locked_modulateBudgets");
}

id objc_msgSend_locked_replaceBudgetsToBeModulated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locked_replaceBudgetsToBeModulated:");
}

id objc_msgSend_locked_updateBudgetsToBeModulatedAdditions_removals_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locked_updateBudgetsToBeModulatedAdditions:removals:");
}

id objc_msgSend_log(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "log");
}

id objc_msgSend_logActualUnavailableDurationWithState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logActualUnavailableDurationWithState:");
}

id objc_msgSend_logAppResumeAndLaunchesFrom_endDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logAppResumeAndLaunchesFrom:endDate:");
}

id objc_msgSend_logCompletion_forAnalysisName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logCompletion:forAnalysisName:");
}

id objc_msgSend_logDock_pid_state_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logDock:pid:state:");
}

id objc_msgSend_logExhaustedDuration_withPluginConsideration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logExhaustedDuration:withPluginConsideration:");
}

id objc_msgSend_logForCategory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logForCategory:");
}

id objc_msgSend_logFreezerSkipReasons_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logFreezerSkipReasons:");
}

id objc_msgSend_logLimitations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logLimitations:");
}

id objc_msgSend_logPrewarm_pid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logPrewarm:pid:");
}

id objc_msgSend_logSubmittedActivity_asRateLimited_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logSubmittedActivity:asRateLimited:");
}

id objc_msgSend_logToPowerLogTrigger_withStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logToPowerLogTrigger:withStatus:");
}

id objc_msgSend_logUnavailableDurationWithState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logUnavailableDurationWithState:");
}

id objc_msgSend_logUpdatedCarryStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logUpdatedCarryStatus");
}

id objc_msgSend_logger(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logger");
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longValue");
}

id objc_msgSend_lowCongestionHours(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowCongestionHours");
}

id objc_msgSend_lowLikelihoodPeriodEndForPredictionWithKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowLikelihoodPeriodEndForPredictionWithKey:");
}

id objc_msgSend_lowLikelihoodPeriodStartForPredictionWithKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowLikelihoodPeriodStartForPredictionWithKey:");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_magneticInterferenceSensitivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "magneticInterferenceSensitivity");
}

id objc_msgSend_mailFetch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mailFetch");
}

id objc_msgSend_mainApplicationBundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mainApplicationBundleIdentifier");
}

id objc_msgSend_makeDecisionBasedOnSystemConstraints(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeDecisionBasedOnSystemConstraints");
}

id objc_msgSend_makeDecisionBasedOnUrgencyOverride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeDecisionBasedOnUrgencyOverride:");
}

id objc_msgSend_managedBudgets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managedBudgets");
}

id objc_msgSend_managedObjectContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managedObjectContext");
}

id objc_msgSend_managedObjectModel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managedObjectModel");
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manager");
}

id objc_msgSend_managerWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managerWithContext:");
}

id objc_msgSend_managerWithID_locationBundlePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managerWithID:locationBundlePath:");
}

id objc_msgSend_managesBudgetWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managesBudgetWithName:");
}

id objc_msgSend_mapWithTransform_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mapWithTransform:");
}

id objc_msgSend_markAsCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "markAsCompleted");
}

id objc_msgSend_markFastPassActivityDone_semanticVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "markFastPassActivityDone:semanticVersion:");
}

id objc_msgSend_markInstallActivityDone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "markInstallActivityDone");
}

id objc_msgSend_markStarted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "markStarted:");
}

id objc_msgSend_matches_withCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matches:withCache:");
}

id objc_msgSend_maxAllowableThermalPressureForActivity_restoreInProgress_deviceInUse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxAllowableThermalPressureForActivity:restoreInProgress:deviceInUse:");
}

id objc_msgSend_maxConcurrent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxConcurrent");
}

id objc_msgSend_maxWidgetRefreshBudgetForIndividualDaily(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxWidgetRefreshBudgetForIndividualDaily");
}

id objc_msgSend_maxedRateLimits(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxedRateLimits");
}

id objc_msgSend_maximum(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maximum");
}

id objc_msgSend_maximumDurationForFeature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maximumDurationForFeature:");
}

id objc_msgSend_maximumRemainingFeatureDurationForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maximumRemainingFeatureDurationForActivity:");
}

id objc_msgSend_maximumRuntime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maximumRuntime");
}

id objc_msgSend_maximumRuntimeForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maximumRuntimeForActivity:");
}

id objc_msgSend_may_reboot_device(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "may_reboot_device");
}

id objc_msgSend_mean(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mean");
}

id objc_msgSend_meanDeltaTimeBetweenColdLaunchAndResume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meanDeltaTimeBetweenColdLaunchAndResume");
}

id objc_msgSend_meanDeltaTimeBetweenColdLaunchAndResumeStartingAtDate_withBookmarkKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meanDeltaTimeBetweenColdLaunchAndResumeStartingAtDate:withBookmarkKey:");
}

id objc_msgSend_meanJetsamKills(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meanJetsamKills");
}

id objc_msgSend_meanOtherKills(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meanOtherKills");
}

id objc_msgSend_meanRunningBoardKills(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meanRunningBoardKills");
}

id objc_msgSend_meanSpringBoardKills(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meanSpringBoardKills");
}

id objc_msgSend_mediaanalysisProgressMapping(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mediaanalysisProgressMapping");
}

id objc_msgSend_memoryIntensive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "memoryIntensive");
}

id objc_msgSend_memoryPressureLevelWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "memoryPressureLevelWithContext:");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metadata");
}

id objc_msgSend_metadataForPersistentStoreOfType_URL_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metadataForPersistentStoreOfType:URL:options:error:");
}

id objc_msgSend_metadataSegments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metadataSegments");
}

id objc_msgSend_metadataWitDisallowedKeysRemoveForMedatata_forStreamName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metadataWitDisallowedKeysRemoveForMedatata:forStreamName:");
}

id objc_msgSend_metadataWithScore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metadataWithScore:");
}

id objc_msgSend_metricKeysAndValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metricKeysAndValues");
}

id objc_msgSend_metricQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metricQueue");
}

id objc_msgSend_minimumDelayBetweenLaunchesForApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minimumDelayBetweenLaunchesForApp:");
}

id objc_msgSend_minimumQualityForActivity_interface_interfaceSubtype_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minimumQualityForActivity:interface:interfaceSubtype:");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_minute(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minute");
}

id objc_msgSend_mocForProtectionClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mocForProtectionClass:");
}

id objc_msgSend_mocSaveAndReset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mocSaveAndReset:");
}

id objc_msgSend_modeSemanticType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modeSemanticType");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "model");
}

id objc_msgSend_modulateBudgets_lastModulatedAt_forNumberOfModulationSlots_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modulateBudgets:lastModulatedAt:forNumberOfModulationSlots:atDate:");
}

id objc_msgSend_modulatorForBudgetTypes_withBudgets_persistence_withQueue_withStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modulatorForBudgetTypes:withBudgets:persistence:withQueue:withStore:");
}

id objc_msgSend_monitorForDeath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitorForDeath:");
}

id objc_msgSend_monitorPluggedInState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitorPluggedInState");
}

id objc_msgSend_monitorWithConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitorWithConfiguration:");
}

id objc_msgSend_monotonicTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monotonicTimestamp");
}

id objc_msgSend_mostRecentBootTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mostRecentBootTime");
}

id objc_msgSend_motionState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "motionState");
}

id objc_msgSend_motionStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "motionStream");
}

id objc_msgSend_moveActivityToPrerunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveActivityToPrerunning:");
}

id objc_msgSend_moveActivityToRunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveActivityToRunning:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "name");
}

id objc_msgSend_nameStringForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nameStringForActivity:");
}

id objc_msgSend_namespace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "namespace");
}

id objc_msgSend_nearbyDevices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nearbyDevices");
}

id objc_msgSend_network_endpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "network_endpoint");
}

id objc_msgSend_network_parameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "network_parameters");
}

id objc_msgSend_newDurationForStartDates_withPreviousDurations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newDurationForStartDates:withPreviousDurations:");
}

id objc_msgSend_newPrivateStreamDefaultConfigurationWithStoreBasePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newPrivateStreamDefaultConfigurationWithStoreBasePath:");
}

id objc_msgSend_nextEvaluationDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextEvaluationDate");
}

id objc_msgSend_nextEventForTopOffProtectionStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextEventForTopOffProtectionStream");
}

id objc_msgSend_nextHoursBudgetWithPreviousBudget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextHoursBudgetWithPreviousBudget:");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextObject");
}

id objc_msgSend_nextProbabilities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextProbabilities");
}

id objc_msgSend_nextTimewiseEligibleDateFromDate_withLPMWindowExtension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextTimewiseEligibleDateFromDate:withLPMWindowExtension:");
}

id objc_msgSend_noTransferSizeSpecified(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "noTransferSizeSpecified");
}

id objc_msgSend_nodeForTaskIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nodeForTaskIdentifier:");
}

id objc_msgSend_none(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "none");
}

id objc_msgSend_notChargingReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notChargingReason");
}

id objc_msgSend_notPredicateWithSubpredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notPredicateWithSubpredicate:");
}

id objc_msgSend_noteEvaluationTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "noteEvaluationTime");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "now");
}

id objc_msgSend_nowPlayingStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nowPlayingStream");
}

id objc_msgSend_nrDeviceIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nrDeviceIdentifier");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "null");
}

id objc_msgSend_number2Value(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "number2Value");
}

id objc_msgSend_numberFromDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberFromDouble:");
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberFromString:");
}

id objc_msgSend_numberOfModulationFromDate_toDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberOfModulationFromDate:toDate:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_nwParametersForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nwParametersForActivity:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectEnumerator");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKey_ofClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:ofClass:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectsPassingTest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectsPassingTest:");
}

id objc_msgSend_obtainActiveComplications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obtainActiveComplications");
}

id objc_msgSend_occurrences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "occurrences");
}

id objc_msgSend_occurrencesInWindow_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "occurrencesInWindow:atDate:");
}

id objc_msgSend_offsetInFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "offsetInFile");
}

id objc_msgSend_onBudgetChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onBudgetChange:");
}

id objc_msgSend_onlyExpiredOccurrencesAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onlyExpiredOccurrencesAtDate:");
}

id objc_msgSend_onlyPreemptiveSuspend(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onlyPreemptiveSuspend");
}

id objc_msgSend_openApplication_withOptions_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openApplication:withOptions:completion:");
}

id objc_msgSend_optedIn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "optedIn");
}

id objc_msgSend_optionsWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "optionsWithDictionary:");
}

id objc_msgSend_orPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "orPredicateWithSubpredicates:");
}

id objc_msgSend_overdueAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overdueAtDate:");
}

id objc_msgSend_overrideRateLimiting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overrideRateLimiting");
}

id objc_msgSend_overwritesPrevious(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overwritesPrevious");
}

id objc_msgSend_parameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parameters");
}

id objc_msgSend_parametersWithCParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parametersWithCParameters:");
}

id objc_msgSend_parentBundleID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parentBundleID");
}

id objc_msgSend_parseCTCongestionHoursDictionary_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseCTCongestionHoursDictionary:atDate:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "path");
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pausedParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pausedParameters");
}

id objc_msgSend_pausedParametersApplyToActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pausedParametersApplyToActivity:");
}

id objc_msgSend_pecRateLimitConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pecRateLimitConfiguration");
}

id objc_msgSend_pendingActivities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingActivities");
}

id objc_msgSend_pendingTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingTasks");
}

id objc_msgSend_pendingUnregistration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingUnregistration");
}

id objc_msgSend_pendingWidgets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingWidgets");
}

id objc_msgSend_percentCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "percentCompleted");
}

id objc_msgSend_performActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performActivity:");
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performSelector:");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_performWithOptions_andBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performWithOptions:andBlock:");
}

id objc_msgSend_periodWithStart_end_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "periodWithStart:end:");
}

id objc_msgSend_persistApplicationProcessHandles(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistApplicationProcessHandles");
}

id objc_msgSend_persistTrackedActivityDidRun_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistTrackedActivityDidRun:");
}

id objc_msgSend_persistUpdatedResultConsumptionBy_result_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistUpdatedResultConsumptionBy:result:");
}

id objc_msgSend_persistence(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistence");
}

id objc_msgSend_persistentStoreCoordinatorFor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistentStoreCoordinatorFor:");
}

id objc_msgSend_persistentStoreOptionsFor_readOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistentStoreOptionsFor:readOnly:");
}

id objc_msgSend_persistentStores(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistentStores");
}

id objc_msgSend_photosFocalAppStateChangedPredicate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "photosFocalAppStateChangedPredicate");
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pid");
}

id objc_msgSend_platform(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "platform");
}

id objc_msgSend_playing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "playing");
}

id objc_msgSend_pluginDelegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginDelegate");
}

id objc_msgSend_pluginForIdentifier_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginForIdentifier:ofType:");
}

id objc_msgSend_pluginLikelihood(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginLikelihood");
}

id objc_msgSend_pluginMapKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginMapKey");
}

id objc_msgSend_pluginTimeline(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginTimeline");
}

id objc_msgSend_pointerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pointerValue");
}

id objc_msgSend_policyDecision(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyDecision");
}

id objc_msgSend_policyDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyDescription");
}

id objc_msgSend_policyForBitIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyForBitIndex:");
}

id objc_msgSend_policyInstance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyInstance");
}

id objc_msgSend_policyName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyName");
}

id objc_msgSend_policyResponseMetadata(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyResponseMetadata");
}

id objc_msgSend_policyResponseWithDecision_validityDuration_rationale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyResponseWithDecision:validityDuration:rationale:");
}

id objc_msgSend_policyResponseWithScore_validityDuration_rationale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyResponseWithScore:validityDuration:rationale:");
}

id objc_msgSend_policyScores(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyScores");
}

id objc_msgSend_populateFeatureStatusFromPast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateFeatureStatusFromPast");
}

id objc_msgSend_postEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postEvent:");
}

id objc_msgSend_postEvent_usingSource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postEvent:usingSource:");
}

id objc_msgSend_postNotificationAtDate_withTitle_withTextContent_icon_url_expirationDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postNotificationAtDate:withTitle:withTextContent:icon:url:expirationDate:");
}

id objc_msgSend_postNotificationInWindow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postNotificationInWindow:");
}

id objc_msgSend_postNotificationWithBudget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postNotificationWithBudget:");
}

id objc_msgSend_post_install(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "post_install");
}

id objc_msgSend_powerAssertions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "powerAssertions");
}

id objc_msgSend_power_nap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "power_nap");
}

id objc_msgSend_ppsIDForSubsystem_category_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ppsIDForSubsystem:category:");
}

id objc_msgSend_ppsIDMapping(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ppsIDMapping");
}

id objc_msgSend_preClearedMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preClearedMode");
}

id objc_msgSend_preOptimalRelaxationFactor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preOptimalRelaxationFactor:");
}

id objc_msgSend_predicateForActivityWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForActivityWithName:");
}

id objc_msgSend_predicateForActivityWithSubmitDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForActivityWithSubmitDate:");
}

id objc_msgSend_predicateForChangeAtKeyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForChangeAtKeyPath:");
}

id objc_msgSend_predicateForEventsOfMinimumDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForEventsOfMinimumDuration:");
}

id objc_msgSend_predicateForEventsWithIntegerValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForEventsWithIntegerValue:");
}

id objc_msgSend_predicateForEventsWithMinimumDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForEventsWithMinimumDuration:");
}

id objc_msgSend_predicateForEventsWithStartAndEndInDateRangeFrom_to_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForEventsWithStartAndEndInDateRangeFrom:to:");
}

id objc_msgSend_predicateForEventsWithStartDateAfter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForEventsWithStartDateAfter:");
}

id objc_msgSend_predicateForEventsWithStartInDateRangeFrom_to_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForEventsWithStartInDateRangeFrom:to:");
}

id objc_msgSend_predicateForEventsWithStringValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForEventsWithStringValue:");
}

id objc_msgSend_predicateForEventsWithStringValueInValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForEventsWithStringValueInValues:");
}

id objc_msgSend_predicateForKeyPath_equalToValue_withMinimumDurationInPreviousState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForKeyPath:equalToValue:withMinimumDurationInPreviousState:");
}

id objc_msgSend_predicateForKeyPath_withFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForKeyPath:withFormat:");
}

id objc_msgSend_predicateForKeyPath_withPredicate_withPredicateForPreviousState_withMinimumDurationInPreviousState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForKeyPath:withPredicate:withPredicateForPreviousState:withMinimumDurationInPreviousState:");
}

id objc_msgSend_predicateForLaunchActivities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForLaunchActivities");
}

id objc_msgSend_predicateForObjectsWithMetadataKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForObjectsWithMetadataKey:");
}

id objc_msgSend_predicateForObjectsWithMetadataKey_andIntegerValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForObjectsWithMetadataKey:andIntegerValue:");
}

id objc_msgSend_predicateForPendingActivities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForPendingActivities");
}

id objc_msgSend_predicateForStartedActivities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForStartedActivities");
}

id objc_msgSend_predicateForUniqueRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateForUniqueRecord:");
}

id objc_msgSend_predicateMatchingBundleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateMatchingBundleIdentifier:");
}

id objc_msgSend_predicateMatchingHandle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateMatchingHandle:");
}

id objc_msgSend_predicateMatchingIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateMatchingIdentifier:");
}

id objc_msgSend_predicateMatchingLaunchServicesProcesses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateMatchingLaunchServicesProcesses");
}

id objc_msgSend_predicateMatchingProcessTypeApplication(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateMatchingProcessTypeApplication");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_predicateWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithFormat:arguments:");
}

id objc_msgSend_predicateWithValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithValue:");
}

id objc_msgSend_predictedAppsAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictedAppsAtDate:");
}

id objc_msgSend_predictedOptimalScore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictedOptimalScore");
}

id objc_msgSend_predictedOptimalStartDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictedOptimalStartDate");
}

id objc_msgSend_predictedPluggedInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictedPluggedInterval");
}

id objc_msgSend_predictedScoreForActivity_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictedScoreForActivity:atDate:");
}

id objc_msgSend_predictionForDeviceActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionForDeviceActivity");
}

id objc_msgSend_predictionForDeviceNearby(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionForDeviceNearby");
}

id objc_msgSend_predictionForDevicePluggedIn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionForDevicePluggedIn");
}

id objc_msgSend_predictionForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionForKey:");
}

id objc_msgSend_predictionForStreamWithName_withPredicate_withPredictionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionForStreamWithName:withPredicate:withPredictionType:");
}

id objc_msgSend_predictionGenerationQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionGenerationQueue");
}

id objc_msgSend_predictionKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionKey");
}

id objc_msgSend_predictionNeedsUpdating_atDate_lastUpdatedAt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionNeedsUpdating:atDate:lastUpdatedAt:");
}

id objc_msgSend_predictionQueryForStream_withPredicate_withPredictionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionQueryForStream:withPredicate:withPredictionType:");
}

id objc_msgSend_predictionScoresForAllApplicationsAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionScoresForAllApplicationsAtDate:");
}

id objc_msgSend_predictor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictor");
}

id objc_msgSend_predictorWithKnowledgeStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictorWithKnowledgeStore:");
}

id objc_msgSend_predictorWithKnowledgeStore_withQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictorWithKnowledgeStore:withQueue:");
}

id objc_msgSend_prepareActivityForStart_atTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareActivityForStart:atTime:");
}

id objc_msgSend_prerunningTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prerunningTasks");
}

id objc_msgSend_prettySchedulingPriorityDescription_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prettySchedulingPriorityDescription:");
}

id objc_msgSend_preventDeviceSleep(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preventDeviceSleep");
}

id objc_msgSend_prevents_device_sleep(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prevents_device_sleep");
}

id objc_msgSend_prewarmCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prewarmCount");
}

id objc_msgSend_prewarmLaunchAppFromBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prewarmLaunchAppFromBundleID:");
}

id objc_msgSend_prewarmLaunchAppsFromTimeline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prewarmLaunchAppsFromTimeline:");
}

id objc_msgSend_prewarmRecommendations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prewarmRecommendations");
}

id objc_msgSend_prewarmRecommendations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prewarmRecommendations:");
}

id objc_msgSend_prewarmSuspendApplication_withHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prewarmSuspendApplication:withHandler:");
}

id objc_msgSend_prewarmingDataCollectionStartDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prewarmingDataCollectionStartDate");
}

id objc_msgSend_printLowLikelihoodRegions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printLowLikelihoodRegions");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "priority");
}

id objc_msgSend_privateNetworkCellConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "privateNetworkCellConnection");
}

id objc_msgSend_process(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "process");
}

id objc_msgSend_process_inSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "process:inSet:");
}

id objc_msgSend_processEvents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processEvents:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processIdentifier");
}

id objc_msgSend_processImagePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processImagePath");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processLogArchiveWithPath_startDate_endDate_errorOut_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processLogArchiveWithPath:startDate:endDate:errorOut:");
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processName");
}

id objc_msgSend_processNameFromPID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processNameFromPID:");
}

id objc_msgSend_processSignpostInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processSignpostInterval:");
}

id objc_msgSend_processingTaskIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processingTaskIdentifiers");
}

id objc_msgSend_producedResultIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "producedResultIdentifiers");
}

id objc_msgSend_produced_result_identifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "produced_result_identifiers");
}

id objc_msgSend_productID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "productID");
}

id objc_msgSend_progress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "progress");
}

id objc_msgSend_projectedUsageForActivity_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "projectedUsageForActivity:withContext:");
}

id objc_msgSend_protectionClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "protectionClass");
}

id objc_msgSend_protectionType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "protectionType");
}

id objc_msgSend_protocolForProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "protocolForProtocol:");
}

id objc_msgSend_pruneConsumptionEventsForActivityIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pruneConsumptionEventsForActivityIdentifier:");
}

id objc_msgSend_pruneEventsOlderThanDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pruneEventsOlderThanDate:");
}

id objc_msgSend_pruneStreamOfGroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pruneStreamOfGroup");
}

id objc_msgSend_pruneWithPredicateBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pruneWithPredicateBlock:");
}

id objc_msgSend_pruner(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pruner");
}

id objc_msgSend_publisher(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publisher");
}

id objc_msgSend_publisherForEventsStartingFromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publisherForEventsStartingFromDate:");
}

id objc_msgSend_publisherFromStartTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publisherFromStartTime:");
}

id objc_msgSend_publishers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publishers");
}

id objc_msgSend_publishersForDevices_withUseCase_startTime_includeLocal_pipeline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publishersForDevices:withUseCase:startTime:includeLocal:pipeline:");
}

id objc_msgSend_purgeableSpaceMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "purgeableSpaceMap");
}

id objc_msgSend_pushLaunchAllowedForApp_immediately_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pushLaunchAllowedForApp:immediately:");
}

id objc_msgSend_quantizeNumericMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "quantizeNumericMap:");
}

id objc_msgSend_quantizedMaxExpectedTotalActivationTimeForApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "quantizedMaxExpectedTotalActivationTimeForApps:");
}

id objc_msgSend_queryActivityDecision_fromResponses_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryActivityDecision:fromResponses:");
}

id objc_msgSend_queryAppsLaunchedFromStartDate_toEndDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryAppsLaunchedFromStartDate:toEndDate:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue");
}

id objc_msgSend_queueAppsEligibleForBackgroundFetchInSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueAppsEligibleForBackgroundFetchInSet:");
}

id objc_msgSend_queueAppsWithDelaySpecifiedInSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueAppsWithDelaySpecifiedInSet:");
}

id objc_msgSend_queueCancelActivitiesForAllApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueCancelActivitiesForAllApps");
}

id objc_msgSend_queueCancelActivitiesForApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueCancelActivitiesForApps:");
}

id objc_msgSend_queueHandleAppsKilled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueHandleAppsKilled:");
}

id objc_msgSend_queueHandleAppsRevived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueHandleAppsRevived:");
}

id objc_msgSend_queueHandleAppsUninstalled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueHandleAppsUninstalled:");
}

id objc_msgSend_queueHandleBARSettingsChangedNotification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueHandleBARSettingsChangedNotification:");
}

id objc_msgSend_queueObtainAppsEligibleForBackgroundFetch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueObtainAppsEligibleForBackgroundFetch");
}

id objc_msgSend_queuePendingRefreshes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queuePendingRefreshes");
}

id objc_msgSend_queueReloadRequestedDelays(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueReloadRequestedDelays");
}

id objc_msgSend_queueScheduleActivitiesForEligibleApps_withDelay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueScheduleActivitiesForEligibleApps:withDelay:");
}

id objc_msgSend_queueScheduleActivityForApp_startingAfter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueScheduleActivityForApp:startingAfter:");
}

id objc_msgSend_queueStartIfBAREnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueStartIfBAREnabled");
}

id objc_msgSend_queueUpdateLastLaunchTimesToDate_forApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueUpdateLastLaunchTimesToDate:forApps:");
}

id objc_msgSend_queueWithName_maxBatchingDelay_maxQueueDepth_queue_workItemsHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueWithName:maxBatchingDelay:maxQueueDepth:queue:workItemsHandler:");
}

id objc_msgSend_queue_aggregateResultConsumptionForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue_aggregateResultConsumptionForActivity:");
}

id objc_msgSend_queue_cancelBackgroundTasksForUnusedApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue_cancelBackgroundTasksForUnusedApps");
}

id objc_msgSend_queue_checkedCompletionDependencyGroupForIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue_checkedCompletionDependencyGroupForIdentifier:");
}

id objc_msgSend_queue_checkedResultDependencyGroupForIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue_checkedResultDependencyGroupForIdentifier:");
}

id objc_msgSend_queue_dependencyGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue_dependencyGroup:");
}

id objc_msgSend_queue_dependencyGroupCreateIfDoesNotExist_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue_dependencyGroupCreateIfDoesNotExist:");
}

id objc_msgSend_queue_isConsumerActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue_isConsumerActivity:");
}

id objc_msgSend_queue_isProducerActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue_isProducerActivity:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rate");
}

id objc_msgSend_rateLimitConfiguration_withIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rateLimitConfiguration:withIdentifier:");
}

id objc_msgSend_rateLimitConfigurationName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rateLimitConfigurationName");
}

id objc_msgSend_rateLimitConfigurationWithName_andLimits_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rateLimitConfigurationWithName:andLimits:");
}

id objc_msgSend_rateLimitConfigurations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rateLimitConfigurations");
}

id objc_msgSend_rateLimitIdentifierForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rateLimitIdentifierForActivity:");
}

id objc_msgSend_rateLimitWithMaximum_perWindow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rateLimitWithMaximum:perWindow:");
}

id objc_msgSend_rateLimits(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rateLimits");
}

id objc_msgSend_rateManagementApplyToActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rateManagementApplyToActivity:");
}

id objc_msgSend_ratelimitTrackers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ratelimitTrackers");
}

id objc_msgSend_rationale(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rationale");
}

id objc_msgSend_rationaleWithAllSystemConditions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rationaleWithAllSystemConditions");
}

id objc_msgSend_rationaleWithUrgencyOverride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rationaleWithUrgencyOverride:");
}

id objc_msgSend_rawScore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rawScore");
}

id objc_msgSend_readDataOfLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readDataOfLength:");
}

id objc_msgSend_readFromDefaults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readFromDefaults");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reason");
}

id objc_msgSend_reasonForActivitySuspension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reasonForActivitySuspension:");
}

id objc_msgSend_recalculateStartDates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recalculateStartDates");
}

id objc_msgSend_recentlyInstalledAppsLimitedTo_withStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recentlyInstalledAppsLimitedTo:withStore:");
}

id objc_msgSend_recommendations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recommendations");
}

id objc_msgSend_reconcileWithActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reconcileWithActivity:");
}

id objc_msgSend_recordActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordActivity:");
}

id objc_msgSend_recordActivityLifeCycleEnd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordActivityLifeCycleEnd:");
}

id objc_msgSend_recordActivityLifeCycleStart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordActivityLifeCycleStart:");
}

id objc_msgSend_recordActivityLifeCycleSuspend_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordActivityLifeCycleSuspend:");
}

id objc_msgSend_recordAppPrediction_app_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordAppPrediction:app:");
}

id objc_msgSend_recordBARState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordBARState");
}

id objc_msgSend_recordBatteryStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordBatteryStatus");
}

id objc_msgSend_recordCAEventsForActivity_withParams_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordCAEventsForActivity:withParams:");
}

id objc_msgSend_recordForKeyPaths_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordForKeyPaths:");
}

id objc_msgSend_recordMotionStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordMotionStatus");
}

id objc_msgSend_recordNetworkStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordNetworkStatus");
}

id objc_msgSend_recordNoLongerRunningActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordNoLongerRunningActivity:");
}

id objc_msgSend_recordOccurrenceForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordOccurrenceForKey:");
}

id objc_msgSend_recordPowerManagementStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordPowerManagementStatus");
}

id objc_msgSend_recordPrediction_key_valueMultiplier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordPrediction:key:valueMultiplier:");
}

id objc_msgSend_recordResumesAndLaunches(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordResumesAndLaunches");
}

id objc_msgSend_recordSessionAnalytics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordSessionAnalytics");
}

id objc_msgSend_recordState_forProcess_associatedWithApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordState:forProcess:associatedWithApplication:");
}

id objc_msgSend_recordTaskWorkloadProgress_target_completed_category_subCategory_withPID_withUID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordTaskWorkloadProgress:target:completed:category:subCategory:withPID:withUID:completionHandler:");
}

id objc_msgSend_recordToTaskRegistry_lifeCycleStateName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordToTaskRegistry:lifeCycleStateName:");
}

id objc_msgSend_recordValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordValue");
}

id objc_msgSend_recordWorkload_ofCategory_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordWorkload:ofCategory:error:");
}

id objc_msgSend_reduceWithInitial_nextPartialResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reduceWithInitial:nextPartialResult:");
}

id objc_msgSend_reevaluateAllActivitiesWithDaemon_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reevaluateAllActivitiesWithDaemon:");
}

id objc_msgSend_refetchInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refetchInterval");
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refresh");
}

id objc_msgSend_refreshApplicationActivationCounts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshApplicationActivationCounts");
}

id objc_msgSend_refreshApplicationActivationInformation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshApplicationActivationInformation");
}

id objc_msgSend_refreshApplicationSpringboardVisibility(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshApplicationSpringboardVisibility");
}

id objc_msgSend_refreshGroupsWithFileProtection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshGroupsWithFileProtection:");
}

id objc_msgSend_refreshLedgerInformationForApplicationProcesses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshLedgerInformationForApplicationProcesses");
}

id objc_msgSend_registerCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerCallback:");
}

id objc_msgSend_registerDailyModelUpdateTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerDailyModelUpdateTask");
}

id objc_msgSend_registerDailyTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerDailyTimer");
}

id objc_msgSend_registerFeatureStatusTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerFeatureStatusTask");
}

id objc_msgSend_registerForActivities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForActivities");
}

id objc_msgSend_registerForAppKilledNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForAppKilledNotifications");
}

id objc_msgSend_registerForBARNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForBARNotifications");
}

id objc_msgSend_registerForBacklightUpdates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForBacklightUpdates");
}

id objc_msgSend_registerForBlueListNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForBlueListNotifications");
}

id objc_msgSend_registerForCacheDeletePurgeableSpaceNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForCacheDeletePurgeableSpaceNotifications");
}

id objc_msgSend_registerForComplicationChangeNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForComplicationChangeNotifications");
}

id objc_msgSend_registerForDiskVolumeMonitoring_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForDiskVolumeMonitoring:");
}

id objc_msgSend_registerForModeChanges(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForModeChanges");
}

id objc_msgSend_registerForNetworkEvaluationWithCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForNetworkEvaluationWithCallback:");
}

id objc_msgSend_registerForNetworkPathEvaluation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForNetworkPathEvaluation");
}

id objc_msgSend_registerForPurgeableSpaceWithActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForPurgeableSpaceWithActivity:");
}

id objc_msgSend_registerForRemoteDeviceActiveNotificationsWithChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForRemoteDeviceActiveNotificationsWithChange:");
}

id objc_msgSend_registerForRemoteDeviceWithActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForRemoteDeviceWithActivity:");
}

id objc_msgSend_registerForSmartPowerNapNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForSmartPowerNapNotifications");
}

id objc_msgSend_registerForTaskWithIdentifier_usingQueue_launchHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForTaskWithIdentifier:usingQueue:launchHandler:");
}

id objc_msgSend_registerForTrial(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForTrial");
}

id objc_msgSend_registerForUpdates_withIdentifier_forUseCase_withOptions_forDevices_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForUpdates:withIdentifier:forUseCase:withOptions:forDevices:withError:");
}

id objc_msgSend_registerProducer_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerProducer:error:");
}

id objc_msgSend_registerRemoteDeviceWakeStateWithActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerRemoteDeviceWakeStateWithActivity:");
}

id objc_msgSend_registerReportTaskInfoTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerReportTaskInfoTask");
}

id objc_msgSend_registerStateChangeHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerStateChangeHandler:");
}

id objc_msgSend_registerTimeChangeNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerTimeChangeNotification");
}

id objc_msgSend_registerTriggers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerTriggers");
}

id objc_msgSend_registerTriggersWithContextStoreForPolicies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerTriggersWithContextStoreForPolicies:");
}

id objc_msgSend_registerWithCallback_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerWithCallback:callback:");
}

id objc_msgSend_registerWithContextStoreForId_contextualPredicate_dismissalCondition_deviceSet_mustWake_qualityOfService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerWithContextStoreForId:contextualPredicate:dismissalCondition:deviceSet:mustWake:qualityOfService:");
}

id objc_msgSend_registerWithIdentifier_queue_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerWithIdentifier:queue:callback:");
}

id objc_msgSend_registrationWithIdentifier_contextualPredicate_dismissalPolicy_deviceSet_clientIdentifier_mustWake_qualityOfService_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registrationWithIdentifier:contextualPredicate:dismissalPolicy:deviceSet:clientIdentifier:mustWake:qualityOfService:callback:");
}

id objc_msgSend_reinstantiateConfiguredBudgets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reinstantiateConfiguredBudgets");
}

id objc_msgSend_relatedApplications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "relatedApplications");
}

id objc_msgSend_related_applications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "related_applications");
}

id objc_msgSend_relativeUsageAtDate_withTimeline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "relativeUsageAtDate:withTimeline:");
}

id objc_msgSend_relaxationFactorForTimeSlot_activityPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "relaxationFactorForTimeSlot:activityPriority:");
}

id objc_msgSend_releaseAssertion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "releaseAssertion:");
}

id objc_msgSend_relevancy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "relevancy");
}

id objc_msgSend_reloadRequestedDelays(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reloadRequestedDelays");
}

id objc_msgSend_remainingDurationForFeature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remainingDurationForFeature:");
}

id objc_msgSend_remoteContextWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteContextWithError:");
}

id objc_msgSend_remoteDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteDevice");
}

id objc_msgSend_remoteDevices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteDevices");
}

id objc_msgSend_remoteDevicesWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteDevicesWithError:");
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteObjectProxy");
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remoteTargetWithLaunchingAssertionAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteTargetWithLaunchingAssertionAttributes:");
}

id objc_msgSend_remoteWidgetBudget(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteWidgetBudget");
}

id objc_msgSend_removeActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeActivity:");
}

id objc_msgSend_removeActivityFromDependencyGroups_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeActivityFromDependencyGroups:");
}

id objc_msgSend_removeActivityFromGroupToPendingTasks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeActivityFromGroupToPendingTasks:");
}

id objc_msgSend_removeActivityFromIncompatibleActivitiesMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeActivityFromIncompatibleActivitiesMap:");
}

id objc_msgSend_removeActivityFromNestedMaps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeActivityFromNestedMaps:");
}

id objc_msgSend_removeActivityFromTriggerMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeActivityFromTriggerMap:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeClient:");
}

id objc_msgSend_removeConstraint_forSchedulingPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeConstraint:forSchedulingPriority:");
}

id objc_msgSend_removeDuplicateLaunchTasks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeDuplicateLaunchTasks:");
}

id objc_msgSend_removeImmediatelyPrecedingSubmissions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeImmediatelyPrecedingSubmissions:");
}

id objc_msgSend_removeInactiveAssertions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeInactiveAssertions");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeLaunchRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeLaunchRequest:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsAtIndexes:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:forKeyPath:");
}

id objc_msgSend_removePendingActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePendingActivity:");
}

id objc_msgSend_removePersistentStore_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePersistentStore:error:");
}

id objc_msgSend_removeTempBGSQLFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeTempBGSQLFile:");
}

id objc_msgSend_replaceExistingRateLimitsForConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceExistingRateLimitsForConfiguration:");
}

id objc_msgSend_replaceJSONDataWithNull_atWriteHandle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceJSONDataWithNull:atWriteHandle:");
}

id objc_msgSend_replaceRateLimitConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceRateLimitConfiguration:");
}

id objc_msgSend_reportActivationTimes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivationTimes:");
}

id objc_msgSend_reportActivity_consumedResult_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivity:consumedResult:error:");
}

id objc_msgSend_reportActivity_consumedResults_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivity:consumedResults:error:");
}

id objc_msgSend_reportActivity_isBlockedWithDecision_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivity:isBlockedWithDecision:");
}

id objc_msgSend_reportActivity_producedResult_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivity:producedResult:error:");
}

id objc_msgSend_reportActivity_producedResults_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivity:producedResults:error:");
}

id objc_msgSend_reportActivityDidFinishRunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivityDidFinishRunning:");
}

id objc_msgSend_reportActivityNoLongerRunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivityNoLongerRunning:");
}

id objc_msgSend_reportActivityNoLongerRunningWithParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivityNoLongerRunningWithParameters:");
}

id objc_msgSend_reportActivityRunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivityRunning:");
}

id objc_msgSend_reportActivityRunningWithParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivityRunningWithParameters:");
}

id objc_msgSend_reportActivityTiming_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivityTiming:");
}

id objc_msgSend_reportAnalyticsForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportAnalyticsForActivity:");
}

id objc_msgSend_reportAnalyticsWithStartDate_isDefaultTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportAnalyticsWithStartDate:isDefaultTime:");
}

id objc_msgSend_reportAppResumePredictions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportAppResumePredictions");
}

id objc_msgSend_reportBackgroundAppRefreshAnalytics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportBackgroundAppRefreshAnalytics:");
}

id objc_msgSend_reportBlockersOnEvaluation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportBlockersOnEvaluation:");
}

id objc_msgSend_reportBlockersStatisticsOnExpiration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportBlockersStatisticsOnExpiration");
}

id objc_msgSend_reportBlockingReason_forActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportBlockingReason:forActivity:");
}

id objc_msgSend_reportChargingStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportChargingStatus:");
}

id objc_msgSend_reportCustomCheckpoint_forTask_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportCustomCheckpoint:forTask:error:");
}

id objc_msgSend_reportDataOnExperiments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportDataOnExperiments:");
}

id objc_msgSend_reportDependencyInfoForTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportDependencyInfoForTasks");
}

id objc_msgSend_reportDependentActivityDidRun_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportDependentActivityDidRun:");
}

id objc_msgSend_reportFeatureCheckpoint_forFeature_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportFeatureCheckpoint:forFeature:error:");
}

id objc_msgSend_reportFeatureCodesForTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportFeatureCodesForTasks");
}

id objc_msgSend_reportFeatureStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportFeatureStatus");
}

id objc_msgSend_reportFeatureStatus_forFeature_statusChangedDate_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportFeatureStatus:forFeature:statusChangedDate:error:");
}

id objc_msgSend_reportMetricsForNetworkUsage_forDataBudget_totalUsage_usageInCell_usageInInexpensive_forActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportMetricsForNetworkUsage:forDataBudget:totalUsage:usageInCell:usageInInexpensive:forActivity:");
}

id objc_msgSend_reportNewStatus_forTrigger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportNewStatus:forTrigger:");
}

id objc_msgSend_reportOversizeLoadSymptomForActivity_atStart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportOversizeLoadSymptomForActivity:atStart:");
}

id objc_msgSend_reportPolicyBlockingReasonsForIntensiveTasksToPPS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportPolicyBlockingReasonsForIntensiveTasksToPPS");
}

id objc_msgSend_reportPostRestoreCheckpoint_withParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportPostRestoreCheckpoint:withParameters:");
}

id objc_msgSend_reportStartEvent_withInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportStartEvent:withInfo:");
}

id objc_msgSend_reportState_forActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportState:forActivity:");
}

id objc_msgSend_reportState_forTaskName_featureCode_involvedProcesses_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportState:forTaskName:featureCode:involvedProcesses:");
}

id objc_msgSend_reportStopEvent_withInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportStopEvent:withInfo:");
}

id objc_msgSend_reportSuccessOnEvaluation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportSuccessOnEvaluation");
}

id objc_msgSend_reportSystemTaskWithIdentifier_consumedResults_withPID_withUID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportSystemTaskWithIdentifier:consumedResults:withPID:withUID:completionHandler:");
}

id objc_msgSend_reportSystemTaskWithIdentifier_producedResults_withPID_withUID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportSystemTaskWithIdentifier:producedResults:withPID:withUID:completionHandler:");
}

id objc_msgSend_reportTaskBecomingEligible(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportTaskBecomingEligible");
}

id objc_msgSend_reportTaskCheckpoint_forTask_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportTaskCheckpoint:forTask:error:");
}

id objc_msgSend_reportTaskExpiration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportTaskExpiration");
}

id objc_msgSend_reportTrackedActivityDidRun_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportTrackedActivityDidRun:");
}

id objc_msgSend_reportUpdateForActivity_withDataConsumed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportUpdateForActivity:withDataConsumed:");
}

id objc_msgSend_reportWakeAnalytics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportWakeAnalytics:");
}

id objc_msgSend_requestCountForApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestCountForApplication:");
}

id objc_msgSend_requestInterruptionBlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestInterruptionBlock");
}

id objc_msgSend_requestSystemWakeOnBehalfOf_at_withLeeway_cancelPrevious_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestSystemWakeOnBehalfOf:at:withLeeway:cancelPrevious:");
}

id objc_msgSend_requestWithIdentifier_content_trigger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestWithIdentifier:content:trigger:");
}

id objc_msgSend_requestsApplicationLaunch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestsApplicationLaunch");
}

id objc_msgSend_requestsExtensionLaunch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestsExtensionLaunch");
}

id objc_msgSend_requestsNewsstandLaunch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestsNewsstandLaunch");
}

id objc_msgSend_requiredBudgetNames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiredBudgetNames");
}

id objc_msgSend_requiredBudgetsInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiredBudgetsInfo");
}

id objc_msgSend_requiresBuddyComplete(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresBuddyComplete");
}

id objc_msgSend_requiresDeviceInactivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresDeviceInactivity");
}

id objc_msgSend_requiresDeviceInactivityForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresDeviceInactivityForActivity:");
}

id objc_msgSend_requiresExternalPower(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresExternalPower");
}

id objc_msgSend_requiresInexpensiveNetworking(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresInexpensiveNetworking");
}

id objc_msgSend_requiresMinimumBatteryLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresMinimumBatteryLevel");
}

id objc_msgSend_requiresMinimumDataBudgetPercentage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresMinimumDataBudgetPercentage");
}

id objc_msgSend_requiresNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresNetwork");
}

id objc_msgSend_requiresNetworkPathMonitoring_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresNetworkPathMonitoring:");
}

id objc_msgSend_requiresPlugin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresPlugin");
}

id objc_msgSend_requiresPluginForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresPluginForActivity:");
}

id objc_msgSend_requiresRemoteDeviceWake(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresRemoteDeviceWake");
}

id objc_msgSend_requiresSignificantUserInactivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresSignificantUserInactivity");
}

id objc_msgSend_requiresStrictDarkBoot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresStrictDarkBoot");
}

id objc_msgSend_requiresUnconstrainedNetworking(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresUnconstrainedNetworking");
}

id objc_msgSend_requiresUserInactivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresUserInactivity");
}

id objc_msgSend_requires_buddy_complete(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requires_buddy_complete");
}

id objc_msgSend_requires_inexpensive_network(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requires_inexpensive_network");
}

id objc_msgSend_requires_network_connectivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requires_network_connectivity");
}

id objc_msgSend_requires_protection_class(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requires_protection_class");
}

id objc_msgSend_requires_significant_user_inactivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requires_significant_user_inactivity");
}

id objc_msgSend_requires_unconstrained_network(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requires_unconstrained_network");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset");
}

id objc_msgSend_resetAccumulation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetAccumulation");
}

id objc_msgSend_resetAnalyticsState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetAnalyticsState");
}

id objc_msgSend_resetBARMetric(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetBARMetric");
}

id objc_msgSend_resetBudgets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetBudgets");
}

id objc_msgSend_resetCurrentEligibilityWindow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetCurrentEligibilityWindow");
}

id objc_msgSend_resetDependenciesContainingSubstring_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetDependenciesContainingSubstring:");
}

id objc_msgSend_resetDependenciesForIdentifier_byActivity_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetDependenciesForIdentifier:byActivity:error:");
}

id objc_msgSend_resetDutyCyclingEffort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetDutyCyclingEffort");
}

id objc_msgSend_resetFastPass_resetAll_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetFastPass:resetAll:");
}

id objc_msgSend_resetFastPassActivities_resetAll_withHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetFastPassActivities:resetAll:withHandler:");
}

id objc_msgSend_resetFastPassDependencies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetFastPassDependencies");
}

id objc_msgSend_resetFastPassDependenciesForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetFastPassDependenciesForActivity:");
}

id objc_msgSend_resetFeatureDurations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetFeatureDurations");
}

id objc_msgSend_resetInitialAction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetInitialAction");
}

id objc_msgSend_resetNearbyDevicesWithCurrentDevices_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetNearbyDevicesWithCurrentDevices:");
}

id objc_msgSend_resetOnlyPreemptiveSuspend(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetOnlyPreemptiveSuspend");
}

id objc_msgSend_resetResultsForIdentifier_byTaskWithIdentifier_withPID_withUID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetResultsForIdentifier:byTaskWithIdentifier:withPID:withUID:completionHandler:");
}

id objc_msgSend_resetSFIEffort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetSFIEffort");
}

id objc_msgSend_resetState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetState");
}

id objc_msgSend_resetTriggerReport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetTriggerReport");
}

id objc_msgSend_resource_intensive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resource_intensive");
}

id objc_msgSend_resources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resources");
}

id objc_msgSend_resourcesDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourcesDescription");
}

id objc_msgSend_resourcesDescriptionFromBitmap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourcesDescriptionFromBitmap:");
}

id objc_msgSend_responseForActivity_withState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "responseForActivity:withState:");
}

id objc_msgSend_responseOptions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "responseOptions");
}

id objc_msgSend_restoreApplicationProcessHandles(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restoreApplicationProcessHandles");
}

id objc_msgSend_resubmitRunningActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resubmitRunningActivities:");
}

id objc_msgSend_resubmitRunningTasks_withPID_withUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resubmitRunningTasks:withPID:withUID:");
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "result");
}

id objc_msgSend_resultCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resultCount");
}

id objc_msgSend_resultIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resultIdentifier");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resume");
}

id objc_msgSend_resumeCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resumeCount");
}

id objc_msgSend_resumeTaskSchedulingWithIdentifier_withPID_withUID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resumeTaskSchedulingWithIdentifier:withPID:withUID:completionHandler:");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_roundedTemperature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "roundedTemperature:");
}

id objc_msgSend_runActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runActivities:");
}

id objc_msgSend_runActivitiesAndRemoveUnknown_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runActivitiesAndRemoveUnknown:");
}

id objc_msgSend_runActivitiesWithDelayedStart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runActivitiesWithDelayedStart:");
}

id objc_msgSend_runActivitiesWithUrgency_activities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runActivitiesWithUrgency:activities:");
}

id objc_msgSend_runActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runActivity:");
}

id objc_msgSend_runApplicationLaunchActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runApplicationLaunchActivities:");
}

id objc_msgSend_runExtensionLaunchActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runExtensionLaunchActivities:");
}

id objc_msgSend_runLaunchTasks_forApplication_forApplicationURL_onLaunch_onCompletion_onFailure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runLaunchTasks:forApplication:forApplicationURL:onLaunch:onCompletion:onFailure:");
}

id objc_msgSend_runLocalActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runLocalActivity:");
}

id objc_msgSend_runOnAppForeground(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runOnAppForeground");
}

id objc_msgSend_runPeriodicRelaunchTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runPeriodicRelaunchTask");
}

id objc_msgSend_runUpdateRecentlyUsedPhotosAppDevicesTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runUpdateRecentlyUsedPhotosAppDevicesTask");
}

id objc_msgSend_run_on_motion_state(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "run_on_motion_state");
}

id objc_msgSend_runningTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runningTasks");
}

id objc_msgSend_runtimeForActivity_inLastNumDays_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runtimeForActivity:inLastNumDays:");
}

id objc_msgSend_save_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "save:");
}

id objc_msgSend_saveActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveActivities:");
}

id objc_msgSend_saveActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveActivity:");
}

id objc_msgSend_saveActivityBaseTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveActivityBaseTime:");
}

id objc_msgSend_saveActualUnavailableDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveActualUnavailableDate:");
}

id objc_msgSend_saveBudgets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveBudgets:");
}

id objc_msgSend_saveCarbonImpactWindowState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveCarbonImpactWindowState");
}

id objc_msgSend_saveControlEffort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveControlEffort:");
}

id objc_msgSend_saveGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveGroup:");
}

id objc_msgSend_saveModulationDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveModulationDate:");
}

id objc_msgSend_saveObjects_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveObjects:error:");
}

id objc_msgSend_savePriorityQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "savePriorityQueue");
}

id objc_msgSend_saveState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveState");
}

id objc_msgSend_saveSubmittedRateLimitConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveSubmittedRateLimitConfiguration");
}

id objc_msgSend_saveTLCState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveTLCState:");
}

id objc_msgSend_saveToDefaults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveToDefaults:");
}

id objc_msgSend_saveUnavailableDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveUnavailableDate:");
}

id objc_msgSend_schedule(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "schedule");
}

id objc_msgSend_scheduleConnectionTimeoutForPid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleConnectionTimeoutForPid:");
}

id objc_msgSend_scheduleDASTelemetryActivities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleDASTelemetryActivities");
}

id objc_msgSend_scheduleOnBehalfOf_between_and_waking_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleOnBehalfOf:between:and:waking:");
}

id objc_msgSend_schedulePeriodicRelaunchTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "schedulePeriodicRelaunchTask");
}

id objc_msgSend_scheduleTelemetry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleTelemetry");
}

id objc_msgSend_scheduleTimerForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleTimerForActivity:");
}

id objc_msgSend_scheduleTimerOnBehalfOf_between_and_waking_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleTimerOnBehalfOf:between:and:waking:");
}

id objc_msgSend_scheduleUpdateRecentlyUsedPhotosAppDevices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleUpdateRecentlyUsedPhotosAppDevices");
}

id objc_msgSend_schedulerRecommendedApplications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "schedulerRecommendedApplications");
}

id objc_msgSend_schedulerWithEndpoint_withClientName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "schedulerWithEndpoint:withClientName:");
}

id objc_msgSend_scheduler_activity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduler_activity");
}

id objc_msgSend_schedulingPriority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "schedulingPriority");
}

id objc_msgSend_score(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "score");
}

id objc_msgSend_scoreForActivity_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoreForActivity:atDate:");
}

id objc_msgSend_scoreForActivity_atDate_withRationale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoreForActivity:atDate:withRationale:");
}

id objc_msgSend_scoreForActivity_isPluggedIn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoreForActivity:isPluggedIn:");
}

id objc_msgSend_scoreForActivity_networkQuality_interface_interfaceSubtype_pluginStatus_radioHot_linkAvailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoreForActivity:networkQuality:interface:interfaceSubtype:pluginStatus:radioHot:linkAvailable:");
}

id objc_msgSend_scoreForActivity_withBatteryStatus_withTopOffStatus_timeSincePluginStateChange_atDate_rationale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoreForActivity:withBatteryStatus:withTopOffStatus:timeSincePluginStateChange:atDate:rationale:");
}

id objc_msgSend_scoreForActivity_withState_response_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoreForActivity:withState:response:");
}

id objc_msgSend_scoreForAnyAppActivity_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoreForAnyAppActivity:atDate:");
}

id objc_msgSend_scoreForApplication_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoreForApplication:atDate:");
}

id objc_msgSend_scoreSpecification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoreSpecification");
}

id objc_msgSend_scoreWithInexpensiveCellForActivity_networkQuality_interface_radioHot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoreWithInexpensiveCellForActivity:networkQuality:interface:radioHot:");
}

id objc_msgSend_scoresForAllApplicationsAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoresForAllApplicationsAtDate:");
}

id objc_msgSend_scoresForAppPredictionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoresForAppPredictionType:");
}

id objc_msgSend_scoresToConfidenceLevels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scoresToConfidenceLevels:");
}

id objc_msgSend_second(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "second");
}

id objc_msgSend_secondsFrom_until_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "secondsFrom:until:");
}

id objc_msgSend_secondsFromGMT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "secondsFromGMT");
}

id objc_msgSend_secondsFromSpikeMinutes_secondsBeforeSpike_secondsAfterSpike_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "secondsFromSpikeMinutes:secondsBeforeSpike:secondsAfterSpike:");
}

id objc_msgSend_seekToFileOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seekToFileOffset:");
}

id objc_msgSend_semanticVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "semanticVersion");
}

id objc_msgSend_sendAnalyticsEventForStream_withActivity_withMetricValueKey_withMetricValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendAnalyticsEventForStream:withActivity:withMetricValueKey:withMetricValue:");
}

id objc_msgSend_sendAnalyticsLazyWithCommonFeilds_forEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendAnalyticsLazyWithCommonFeilds:forEvent:");
}

id objc_msgSend_sendDataToPPS_ppsID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendDataToPPS:ppsID:");
}

id objc_msgSend_sendDataToPPS_subsystem_category_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendDataToPPS:subsystem:category:");
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendEvent:");
}

id objc_msgSend_sendTaskCheckpoint_forTask_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendTaskCheckpoint:forTask:error:");
}

id objc_msgSend_sendToPPS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendToPPS:");
}

id objc_msgSend_sendToPowerLog_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendToPowerLog:");
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "server");
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceName");
}

id objc_msgSend_serviceNameFromToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceNameFromToken:");
}

id objc_msgSend_serviceWithDefaultShellEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceWithDefaultShellEndpoint");
}

id objc_msgSend_sessionID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionID");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set");
}

id objc_msgSend_setActivationTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActivationTime:");
}

id objc_msgSend_setActivityDurations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActivityDurations:");
}

id objc_msgSend_setActivityShouldBypassPredictions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActivityShouldBypassPredictions:");
}

id objc_msgSend_setAllocationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllocationType:");
}

id objc_msgSend_setAneIntensive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAneIntensive:");
}

id objc_msgSend_setAppState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppState:");
}

id objc_msgSend_setApplicationURLForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setApplicationURLForActivity:");
}

id objc_msgSend_setAsOfDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAsOfDate:");
}

id objc_msgSend_setAssertion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAssertion:");
}

id objc_msgSend_setAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAttributes:");
}

id objc_msgSend_setBacklogged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBacklogged:");
}

id objc_msgSend_setBalance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBalance:");
}

id objc_msgSend_setBalance_forBudgetWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBalance:forBudgetWithName:");
}

id objc_msgSend_setBeforeApplicationLaunch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBeforeApplicationLaunch:");
}

id objc_msgSend_setBeforeDaysFirstActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBeforeDaysFirstActivity:");
}

id objc_msgSend_setBeforeUserIsActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBeforeUserIsActive:");
}

id objc_msgSend_setBody_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBody:");
}

id objc_msgSend_setBool_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBool:forKey:");
}

id objc_msgSend_setBrowser_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBrowser:");
}

id objc_msgSend_setBudgeted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBudgeted:");
}

id objc_msgSend_setBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBundleID:");
}

id objc_msgSend_setBundleIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBundleIDs:");
}

id objc_msgSend_setBundleId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBundleId:");
}

id objc_msgSend_setByAddingObjectsFromSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setByAddingObjectsFromSet:");
}

id objc_msgSend_setBypassesPredictions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBypassesPredictions:");
}

id objc_msgSend_setCancelAfterDeadline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCancelAfterDeadline:");
}

id objc_msgSend_setCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCapacity:");
}

id objc_msgSend_setCapacity_forBudgetWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCapacity:forBudgetWithName:");
}

id objc_msgSend_setCategoryIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCategoryIdentifier:");
}

id objc_msgSend_setCellPredictionTimeline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellPredictionTimeline:");
}

id objc_msgSend_setChangeHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChangeHandler:");
}

id objc_msgSend_setClassCUnlockMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClassCUnlockMonitor");
}

id objc_msgSend_setClassCUnlocked_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClassCUnlocked:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClient:");
}

id objc_msgSend_setClientDataBudgetName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientDataBudgetName:");
}

id objc_msgSend_setClientProvidedIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientProvidedIdentifier:");
}

id objc_msgSend_setClientProvidedStartDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientProvidedStartDate:");
}

id objc_msgSend_setCompletedDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompletedDate:");
}

id objc_msgSend_setCompletionStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompletionStatus:");
}

id objc_msgSend_setConsumers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConsumers:");
}

id objc_msgSend_setContextPlugin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContextPlugin:");
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCount:");
}

id objc_msgSend_setCpuIntensive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCpuIntensive:");
}

id objc_msgSend_setCriteriaForActivity_withCriteriaIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCriteriaForActivity:withCriteriaIndex:");
}

id objc_msgSend_setCumulativeResultConsumption_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCumulativeResultConsumption:");
}

id objc_msgSend_setCumulativelyProducedResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCumulativelyProducedResult:");
}

id objc_msgSend_setCurrentActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentActivity:");
}

id objc_msgSend_setCurrentEligibilityWindowEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentEligibilityWindowEnd");
}

id objc_msgSend_setCurrentEligibilityWindowStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentEligibilityWindowStart");
}

id objc_msgSend_setCurrentMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentMode:");
}

id objc_msgSend_setCurrentProbabilities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentProbabilities:");
}

id objc_msgSend_setCurrentState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentState:");
}

id objc_msgSend_setDarkWakeEligible_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDarkWakeEligible:");
}

id objc_msgSend_setDataBudgeted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataBudgeted:");
}

id objc_msgSend_setDataProtectionStateMonitor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataProtectionStateMonitor:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateStyle:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDefaultActionURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDefaultActionURL:");
}

id objc_msgSend_setDefaultExcludedApplications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDefaultExcludedApplications");
}

id objc_msgSend_setDeficitProcessing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeficitProcessing:");
}

id objc_msgSend_setDelayedStart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelayedStart:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegate_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:queue:");
}

id objc_msgSend_setDelegateQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegateQueue:");
}

id objc_msgSend_setDependencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDependencies:");
}

id objc_msgSend_setDependenciesPreCleared_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDependenciesPreCleared:");
}

id objc_msgSend_setDependents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDependents:");
}

id objc_msgSend_setDestinations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDestinations:");
}

id objc_msgSend_setDeviceActivityTimeline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceActivityTimeline:");
}

id objc_msgSend_setDeviceNearbyTimeline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceNearbyTimeline:");
}

id objc_msgSend_setDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDictionary:");
}

id objc_msgSend_setDiscountedHours_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiscountedHours:");
}

id objc_msgSend_setDiskIntensive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiskIntensive:");
}

id objc_msgSend_setDiskVolume_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiskVolume:");
}

id objc_msgSend_setDispatchSourceProcessExit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDispatchSourceProcessExit:");
}

id objc_msgSend_setDisplayName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisplayName:");
}

id objc_msgSend_setDouble_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDouble:forKey:");
}

id objc_msgSend_setDownloadSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadSize:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setDutyCyclingInitiated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDutyCyclingInitiated:");
}

id objc_msgSend_setEmitEventProcessingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEmitEventProcessingBlock:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEndEventProcessingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndEventProcessingBlock:");
}

id objc_msgSend_setEndTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndTime:");
}

id objc_msgSend_setEndowmentNamespaces_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndowmentNamespaces:");
}

id objc_msgSend_setEntity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEntity:");
}

id objc_msgSend_setEvents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEvents:");
}

id objc_msgSend_setExceptionCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExceptionCode:");
}

id objc_msgSend_setExitReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExitReason:");
}

id objc_msgSend_setExpirationDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExpirationDate:");
}

id objc_msgSend_setExpirationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExpirationHandler:");
}

id objc_msgSend_setExplanation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExplanation:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExtension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExtension:");
}

id objc_msgSend_setExtensionIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExtensionIdentifier:");
}

id objc_msgSend_setExtensionName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExtensionName:");
}

id objc_msgSend_setFastPass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFastPass:");
}

id objc_msgSend_setFeatureCodes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFeatureCodes:");
}

id objc_msgSend_setFetchBatchSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFetchBatchSize:");
}

id objc_msgSend_setFetchLimit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFetchLimit:");
}

id objc_msgSend_setFileProtection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFileProtection:");
}

id objc_msgSend_setFirstKillEventDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFirstKillEventDate:");
}

id objc_msgSend_setGpuIntensive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGpuIntensive:");
}

id objc_msgSend_setGroupName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGroupName:");
}

id objc_msgSend_setHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandler:");
}

id objc_msgSend_setHandlerQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandlerQueue:");
}

id objc_msgSend_setHasDependencyRun_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasDependencyRun:");
}

id objc_msgSend_setHaveRunActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHaveRunActivities:");
}

id objc_msgSend_setHour_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHour:");
}

id objc_msgSend_setIcon_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIcon:");
}

id objc_msgSend_setIdentity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdentity:");
}

id objc_msgSend_setIncludeRemoteResults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIncludeRemoteResults:");
}

id objc_msgSend_setInteger_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInteger:forKey:");
}

id objc_msgSend_setIntentSyncIsEngaged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIntentSyncIsEngaged:");
}

id objc_msgSend_setInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterface:");
}

id objc_msgSend_setInterfaceTarget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceTarget:");
}

id objc_msgSend_setInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterval:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setInvolvedProcesses_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInvolvedProcesses:");
}

id objc_msgSend_setIsContactTracingBackgroundActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsContactTracingBackgroundActivity:");
}

id objc_msgSend_setIsENActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsENActivity:");
}

id objc_msgSend_setIsUpload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsUpload:");
}

id objc_msgSend_setLastCacheDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastCacheDate:");
}

id objc_msgSend_setLastComputedScore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastComputedScore:");
}

id objc_msgSend_setLastDenialValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastDenialValue:");
}

id objc_msgSend_setLastPPSFlush_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastPPSFlush:");
}

id objc_msgSend_setLastRegisteredDevices_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastRegisteredDevices:");
}

id objc_msgSend_setLastScored_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastScored:");
}

id objc_msgSend_setLaunchCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLaunchCount:");
}

id objc_msgSend_setLaunchReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLaunchReason:");
}

id objc_msgSend_setLimit_forActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLimit:forActivity:");
}

id objc_msgSend_setLimitForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLimitForActivity:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLowCongestionHours_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLowCongestionHours:");
}

id objc_msgSend_setMaxConcurrent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxConcurrent:");
}

id objc_msgSend_setMaximumRuntime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaximumRuntime:");
}

id objc_msgSend_setMaximumSignificantDigits_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaximumSignificantDigits:");
}

id objc_msgSend_setMaximumTerminationResistance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaximumTerminationResistance:");
}

id objc_msgSend_setMeanJetsamKills_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeanJetsamKills:");
}

id objc_msgSend_setMeanOtherKills_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeanOtherKills:");
}

id objc_msgSend_setMeanRunningBoardKills_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeanRunningBoardKills:");
}

id objc_msgSend_setMeanSpringBoardKills_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeanSpringBoardKills:");
}

id objc_msgSend_setMemoryIntensive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMemoryIntensive:");
}

id objc_msgSend_setMergePolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMergePolicy:");
}

id objc_msgSend_setMinDurationBetweenInstances_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinDurationBetweenInstances:");
}

id objc_msgSend_setMinimumDaysOfHistory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinimumDaysOfHistory:");
}

id objc_msgSend_setMinimumSignificantDigits_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinimumSignificantDigits:");
}

id objc_msgSend_setMinute_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinute:");
}

id objc_msgSend_setModulator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setModulator:");
}

id objc_msgSend_setMotionState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionState:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNextProbabilities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNextProbabilities:");
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumberStyle:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOccurrences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOccurrences:");
}

id objc_msgSend_setParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameters:");
}

id objc_msgSend_setPausedParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPausedParameters:");
}

id objc_msgSend_setPendingActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPendingActivities:");
}

id objc_msgSend_setPendingUnregistration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPendingUnregistration:");
}

id objc_msgSend_setPercentCompleted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPercentCompleted:");
}

id objc_msgSend_setPersistentStoreCoordinator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPersistentStoreCoordinator:");
}

id objc_msgSend_setPid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPid:");
}

id objc_msgSend_setPluginDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPluginDelegate:");
}

id objc_msgSend_setPluginMapKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPluginMapKey:");
}

id objc_msgSend_setPluginTimeline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPluginTimeline:");
}

id objc_msgSend_setPolicyResponseMetadata_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPolicyResponseMetadata:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setPredicates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPredicates:");
}

id objc_msgSend_setPredictedOptimalScore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPredictedOptimalScore:");
}

id objc_msgSend_setPredictedOptimalStartDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPredictedOptimalStartDate:");
}

id objc_msgSend_setPrediction_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrediction:forKey:");
}

id objc_msgSend_setPreventDeviceSleep_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreventDeviceSleep:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setPrivateNetworkCellConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateNetworkCellConnection:");
}

id objc_msgSend_setProcessingCompletionBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProcessingCompletionBlock:");
}

id objc_msgSend_setProcessingTaskIdentifiers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProcessingTaskIdentifiers:");
}

id objc_msgSend_setProducedResultIdentifiers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProducedResultIdentifiers:");
}

id objc_msgSend_setProducer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProducer:");
}

id objc_msgSend_setProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProgress:");
}

id objc_msgSend_setProhibitConstrainedPaths_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProhibitConstrainedPaths:");
}

id objc_msgSend_setProhibitExpensivePaths_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProhibitExpensivePaths:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setRateLimitConfigurationName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRateLimitConfigurationName:");
}

id objc_msgSend_setRateLimitConfigurations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRateLimitConfigurations:");
}

id objc_msgSend_setRatelimitTrackers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRatelimitTrackers:");
}

id objc_msgSend_setReadMetadata_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReadMetadata:");
}

id objc_msgSend_setRecentTriggerEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRecentTriggerEvent:");
}

id objc_msgSend_setRelatedApplications_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRelatedApplications:");
}

id objc_msgSend_setRelevancy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRelevancy:");
}

id objc_msgSend_setRemoteDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteDevice:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setReportType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReportType:");
}

id objc_msgSend_setRequestCancellationBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestCancellationBlock:");
}

id objc_msgSend_setRequestInterruptionBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestInterruptionBlock:");
}

id objc_msgSend_setRequestsApplicationLaunch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestsApplicationLaunch:");
}

id objc_msgSend_setRequestsExtensionLaunch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestsExtensionLaunch:");
}

id objc_msgSend_setRequestsNewsstandLaunch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestsNewsstandLaunch:");
}

id objc_msgSend_setRequiresBuddyComplete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresBuddyComplete:");
}

id objc_msgSend_setRequiresDeviceInactivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresDeviceInactivity:");
}

id objc_msgSend_setRequiresExternalPower_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresExternalPower:");
}

id objc_msgSend_setRequiresInexpensiveNetworking_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresInexpensiveNetworking:");
}

id objc_msgSend_setRequiresNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresNetwork:");
}

id objc_msgSend_setRequiresPlugin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresPlugin:");
}

id objc_msgSend_setRequiresProtectionClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresProtectionClass:");
}

id objc_msgSend_setRequiresRemoteDeviceWake_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresRemoteDeviceWake:");
}

id objc_msgSend_setRequiresSignificantUserInactivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresSignificantUserInactivity:");
}

id objc_msgSend_setRequiresUnconstrainedNetworking_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresUnconstrainedNetworking:");
}

id objc_msgSend_setRequiresUserInactivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresUserInactivity:");
}

id objc_msgSend_setResourceIntensive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResourceIntensive:");
}

id objc_msgSend_setResources_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResources:");
}

id objc_msgSend_setResponseOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResponseOptions:");
}

id objc_msgSend_setResultType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResultType:");
}

id objc_msgSend_setResumeCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResumeCount:");
}

id objc_msgSend_setRunOnAppForeground_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRunOnAppForeground:");
}

id objc_msgSend_setSchedulerRecommendedApplications_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSchedulerRecommendedApplications:");
}

id objc_msgSend_setScheduler_activity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScheduler_activity:");
}

id objc_msgSend_setSchedulingPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSchedulingPriority:");
}

id objc_msgSend_setSecond_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSecond:");
}

id objc_msgSend_setSemanticVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSemanticVersion:");
}

id objc_msgSend_setServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServer:");
}

id objc_msgSend_setServiceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceName:");
}

id objc_msgSend_setServiceQuality_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceQuality:");
}

id objc_msgSend_setSessionID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSessionID:");
}

id objc_msgSend_setShouldBePersisted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShouldBePersisted:");
}

id objc_msgSend_setShouldWakeDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShouldWakeDevice:");
}

id objc_msgSend_setSignpostTimestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSignpostTimestamp:");
}

id objc_msgSend_setSlotDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSlotDuration:");
}

id objc_msgSend_setStartAfter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartAfter:");
}

id objc_msgSend_setStartBefore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartBefore:");
}

id objc_msgSend_setStartConditions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartConditions:");
}

id objc_msgSend_setStartDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartDate:");
}

id objc_msgSend_setStartHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartHandler:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStateDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStateDescriptor:");
}

id objc_msgSend_setStaticPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStaticPriority:");
}

id objc_msgSend_setSubmitDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubmitDate:");
}

id objc_msgSend_setSubmittedConfigurations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubmittedConfigurations:");
}

id objc_msgSend_setSubsystemCategoryFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubsystemCategoryFilter:");
}

id objc_msgSend_setSupportsAnyApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportsAnyApplication:");
}

id objc_msgSend_setSuspendHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSuspendHandler:");
}

id objc_msgSend_setSuspendRequestDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSuspendRequestDate:");
}

id objc_msgSend_setSuspendable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSuspendable:");
}

id objc_msgSend_setSuspensionReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSuspensionReason:");
}

id objc_msgSend_setTargetDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTargetDevice:");
}

id objc_msgSend_setTargetQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTargetQueue:");
}

id objc_msgSend_setTaskCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTaskCompleted");
}

id objc_msgSend_setTaskExpiredWithRetryAfter_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTaskExpiredWithRetryAfter:error:");
}

id objc_msgSend_setTestModeParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTestModeParameters:");
}

id objc_msgSend_setTimeStyle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeStyle:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTop10Hits_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTop10Hits:");
}

id objc_msgSend_setTop1Hits_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTop1Hits:");
}

id objc_msgSend_setTop3Hits_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTop3Hits:");
}

id objc_msgSend_setTop5Hits_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTop5Hits:");
}

id objc_msgSend_setTopNPrediction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTopNPrediction:");
}

id objc_msgSend_setTotalLaunchActivationTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalLaunchActivationTime:");
}

id objc_msgSend_setTotalPredictionIntervals_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalPredictionIntervals:");
}

id objc_msgSend_setTotalResumeActivationTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalResumeActivationTime:");
}

id objc_msgSend_setTotalUnitCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalUnitCount:");
}

id objc_msgSend_setTransferSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransferSize:");
}

id objc_msgSend_setTransitionDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransitionDate:");
}

id objc_msgSend_setTriggersRestart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTriggersRestart:");
}

id objc_msgSend_setTrySchedulingBefore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTrySchedulingBefore:");
}

id objc_msgSend_setUndoManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUndoManager:");
}

id objc_msgSend_setUpBrowserResultsChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUpBrowserResultsChanged:");
}

id objc_msgSend_setUpBrowserStateChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUpBrowserStateChange:");
}

id objc_msgSend_setUpNetworkBrowserWithDevices_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUpNetworkBrowserWithDevices:");
}

id objc_msgSend_setUpdateHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUpdateHandler:");
}

id objc_msgSend_setUploadSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUploadSize:");
}

id objc_msgSend_setUserIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserIdentifier:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserRequestedBackupTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserRequestedBackupTask:");
}

id objc_msgSend_setUsesSignificantDigits_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUsesSignificantDigits:");
}

id objc_msgSend_setUuid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUuid:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValues:");
}

id objc_msgSend_setWaitingForInactivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWaitingForInactivity:");
}

id objc_msgSend_setWantsNotificationResponsesDelivered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWantsNotificationResponsesDelivered");
}

id objc_msgSend_setWarningHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWarningHandler:");
}

id objc_msgSend_setWasForceRun_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWasForceRun:");
}

id objc_msgSend_setWidgetBudgetID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWidgetBudgetID:");
}

id objc_msgSend_setWidgetID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWidgetID:");
}

id objc_msgSend_setWifiPredictionTimeline_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiPredictionTimeline:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWithObjectsFrom_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObjectsFrom:");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_setXPCType_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setXPCType:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setupDailyTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupDailyTask");
}

id objc_msgSend_setupDatabaseMaintenance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupDatabaseMaintenance");
}

id objc_msgSend_setupHighCarbonImpactWindow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupHighCarbonImpactWindow:");
}

id objc_msgSend_setupNetworkMonitoringWithNetworkParameters_endpoint_withActivityID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupNetworkMonitoringWithNetworkParameters:endpoint:withActivityID:");
}

id objc_msgSend_setupPrewarmSuspendListener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupPrewarmSuspendListener");
}

id objc_msgSend_setupPublisher(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupPublisher");
}

id objc_msgSend_setupResetTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupResetTimer");
}

id objc_msgSend_setupTimers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupTimers");
}

id objc_msgSend_setupTriggerWithHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupTriggerWithHandler:");
}

id objc_msgSend_sharedBacklight(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedBacklight");
}

id objc_msgSend_sharedClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedClient");
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedConnection");
}

id objc_msgSend_sharedDefaultEvaluator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedDefaultEvaluator");
}

id objc_msgSend_sharedEventQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedEventQueue");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedInstanceForNamespace_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedInstanceForNamespace:");
}

id objc_msgSend_sharedKnowledgeStore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedKnowledgeStore");
}

id objc_msgSend_sharedLimiter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedLimiter");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedManager");
}

id objc_msgSend_sharedMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedMonitor");
}

id objc_msgSend_sharedMonitorWithDaemon_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedMonitorWithDaemon:");
}

id objc_msgSend_sharedPredictor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedPredictor");
}

id objc_msgSend_sharedScheduler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedScheduler");
}

id objc_msgSend_shortDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shortDescription");
}

id objc_msgSend_shouldBePersisted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldBePersisted");
}

id objc_msgSend_shouldBlueListPushes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldBlueListPushes");
}

id objc_msgSend_shouldEvaluateTask_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldEvaluateTask:atDate:");
}

id objc_msgSend_shouldExcludeEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldExcludeEvent:");
}

id objc_msgSend_shouldIgnoreBudgetForActivity_withState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldIgnoreBudgetForActivity:withState:");
}

id objc_msgSend_shouldIgnoreBudgetForActivity_withState_rationale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldIgnoreBudgetForActivity:withState:rationale:");
}

id objc_msgSend_shouldIgnoreThermalsForActivity_withState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldIgnoreThermalsForActivity:withState:");
}

id objc_msgSend_shouldIgnoreTrigger_withState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldIgnoreTrigger:withState:");
}

id objc_msgSend_shouldLimitActivity_withEvaluationResults_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldLimitActivity:withEvaluationResults:atDate:");
}

id objc_msgSend_shouldLimitActivityAtRuntime_withStartDate_atDate_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldLimitActivityAtRuntime:withStartDate:atDate:withContext:");
}

id objc_msgSend_shouldLimitActivityAtSubmission_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldLimitActivityAtSubmission:");
}

id objc_msgSend_shouldLogActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldLogActivity:");
}

id objc_msgSend_shouldLogAppPrediction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldLogAppPrediction:");
}

id objc_msgSend_shouldLogCheckpointForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldLogCheckpointForActivity:");
}

id objc_msgSend_shouldLogPrediction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldLogPrediction:");
}

id objc_msgSend_shouldMonitorDependenciesForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldMonitorDependenciesForActivity:");
}

id objc_msgSend_shouldOverrideAll_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldOverrideAll:");
}

id objc_msgSend_shouldOverrideBudgets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldOverrideBudgets:");
}

id objc_msgSend_shouldOverrideForIntentSync_activity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldOverrideForIntentSync:activity:");
}

id objc_msgSend_shouldOverrideSignificantWork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldOverrideSignificantWork:");
}

id objc_msgSend_shouldPreemptActivity_forFastPassActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldPreemptActivity:forFastPassActivity:");
}

id objc_msgSend_shouldProfileActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldProfileActivity:");
}

id objc_msgSend_shouldReplaceActivity_andKeepsSubmitted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldReplaceActivity:andKeepsSubmitted:");
}

id objc_msgSend_shouldReportBlockingReasonsForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldReportBlockingReasonsForActivity:");
}

id objc_msgSend_shouldReportOversizeLoadForTransferSize_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldReportOversizeLoadForTransferSize:withContext:");
}

id objc_msgSend_shouldResetDurations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldResetDurations");
}

id objc_msgSend_shouldRunActivityNow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldRunActivityNow:");
}

id objc_msgSend_shouldRunActivityNow_withOtherActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldRunActivityNow:withOtherActivities:");
}

id objc_msgSend_shouldSuspendLongRunningActivity_withStartDate_whileBlockingOtherTasks_atDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldSuspendLongRunningActivity:withStartDate:whileBlockingOtherTasks:atDate:");
}

id objc_msgSend_shouldTrackActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldTrackActivity:");
}

id objc_msgSend_shouldWakeDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldWakeDevice");
}

id objc_msgSend_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:");
}

id objc_msgSend_significantlyOverdueAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "significantlyOverdueAtDate:");
}

id objc_msgSend_signpostTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signpostTimestamp");
}

id objc_msgSend_sinkWithBookmark_completion_receiveInput_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sinkWithBookmark:completion:receiveInput:");
}

id objc_msgSend_sinkWithCompletion_receiveInput_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sinkWithCompletion:receiveInput:");
}

id objc_msgSend_sinkWithCompletion_shouldContinue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sinkWithCompletion:shouldContinue:");
}

id objc_msgSend_skipEvaluationIfUnplugged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skipEvaluationIfUnplugged");
}

id objc_msgSend_smartDataMode_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "smartDataMode:error:");
}

id objc_msgSend_smartDataModeEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "smartDataModeEnabled");
}

id objc_msgSend_snapshotWithSignature_duration_events_payload_actions_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snapshotWithSignature:duration:events:payload:actions:reply:");
}

id objc_msgSend_solicitActivityResubmission(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "solicitActivityResubmission");
}

id objc_msgSend_solveKnapsackWithCapacity_forItemWeights_andItemValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "solveKnapsackWithCapacity:forItemWeights:andItemValues:");
}

id objc_msgSend_sortCandidateActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortCandidateActivities:");
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortDescriptorWithKey:ascending:");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortUsingDescriptors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortUsingDescriptors:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "source");
}

id objc_msgSend_sourceForStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sourceForStream");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "start");
}

id objc_msgSend_startActivityForIdentifier_bundleIdentifier_imageUTI_activityName_activityDescription_progress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startActivityForIdentifier:bundleIdentifier:imageUTI:activityName:activityDescription:progress:");
}

id objc_msgSend_startAfter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startAfter");
}

id objc_msgSend_startBatteryTemperatureLoop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startBatteryTemperatureLoop");
}

id objc_msgSend_startBefore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startBefore");
}

id objc_msgSend_startChargeRateLoop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startChargeRateLoop");
}

id objc_msgSend_startConditions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startConditions");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startDate");
}

id objc_msgSend_startEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startEvent");
}

id objc_msgSend_startHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startHandler");
}

id objc_msgSend_startIfBAREnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startIfBAREnabled");
}

id objc_msgSend_startKilling(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startKilling");
}

id objc_msgSend_startLoggingForApp_pid_forEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startLoggingForApp:pid:forEvent:");
}

id objc_msgSend_startMonitoringActivity_withNetworkParameters_withEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoringActivity:withNetworkParameters:withEndpoint:");
}

id objc_msgSend_startMonitoringForActivityID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoringForActivityID:");
}

id objc_msgSend_startProfilingSnapshotForActivity_withState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startProfilingSnapshotForActivity:withState:");
}

id objc_msgSend_startRecordingNetworkTransfer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startRecordingNetworkTransfer:");
}

id objc_msgSend_startTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startTimer");
}

id objc_msgSend_startTrackingActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startTrackingActivity:");
}

id objc_msgSend_startWithListener_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startWithListener:");
}

id objc_msgSend_startWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startWithOptions:");
}

id objc_msgSend_startedActivities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startedActivities");
}

id objc_msgSend_startedActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startedActivities:");
}

id objc_msgSend_startedDASActivities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startedDASActivities");
}

id objc_msgSend_startedTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startedTasks");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "state");
}

id objc_msgSend_stateString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stateString");
}

id objc_msgSend_staticDurationForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "staticDurationForActivity:");
}

id objc_msgSend_staticPriority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "staticPriority");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "status");
}

id objc_msgSend_stopKilling(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopKilling");
}

id objc_msgSend_stopMonitoringActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopMonitoringActivity:");
}

id objc_msgSend_stopMonitoringForActivityID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopMonitoringForActivityID:");
}

id objc_msgSend_stopProfilingSnapshotForActivity_endDate_completionStatus_currentProfile_withState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopProfilingSnapshotForActivity:endDate:completionStatus:currentProfile:withState:");
}

id objc_msgSend_stopRecordingNetworkTransfer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopRecordingNetworkTransfer:");
}

id objc_msgSend_stopTrackingActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopTrackingActivity:");
}

id objc_msgSend_storageWithDirectory_databaseName_modelURL_readOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storageWithDirectory:databaseName:modelURL:readOnly:");
}

id objc_msgSend_storageWithDirectory_readOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storageWithDirectory:readOnly:");
}

id objc_msgSend_store(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "store");
}

id objc_msgSend_storeBatteryTemperatureEvent_metaData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeBatteryTemperatureEvent:metaData:");
}

id objc_msgSend_storeConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeConfig");
}

id objc_msgSend_storeProfileArrayToKnowledgeStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeProfileArrayToKnowledgeStore:");
}

id objc_msgSend_stream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stream");
}

id objc_msgSend_streamForStreamIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "streamForStreamIdentifier:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAddingPercentEncodingWithAllowedCharacters:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByDeletingLastPathComponent");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringFromNumber:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_submitActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitActivities:");
}

id objc_msgSend_submitActivitiesInternal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitActivitiesInternal:");
}

id objc_msgSend_submitActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitActivity:");
}

id objc_msgSend_submitActivity_inGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitActivity:inGroup:");
}

id objc_msgSend_submitActivity_inGroup_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitActivity:inGroup:error:");
}

id objc_msgSend_submitActivity_inGroup_withHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitActivity:inGroup:withHandler:");
}

id objc_msgSend_submitActivity_inGroupWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitActivity:inGroupWithName:");
}

id objc_msgSend_submitActivityInternal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitActivityInternal:");
}

id objc_msgSend_submitDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitDate");
}

id objc_msgSend_submitRateLimitConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitRateLimitConfiguration:");
}

id objc_msgSend_submitTaskRequest_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitTaskRequest:error:");
}

id objc_msgSend_submitTaskRequestWithIdentifier_descriptor_withPID_withUID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitTaskRequestWithIdentifier:descriptor:withPID:withUID:completionHandler:");
}

id objc_msgSend_submittedConfigurations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submittedConfigurations");
}

id objc_msgSend_submittedTaskCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submittedTaskCount");
}

id objc_msgSend_subscribeOn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscribeOn:");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_suggestedConfidenceCategory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suggestedConfidenceCategory");
}

id objc_msgSend_suggestionLayoutFromCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suggestionLayoutFromCache");
}

id objc_msgSend_suggestions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suggestions");
}

id objc_msgSend_supportsAnyApplication(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsAnyApplication");
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspend");
}

id objc_msgSend_suspendActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendActivities:");
}

id objc_msgSend_suspendActivitiesWithIdentifiers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendActivitiesWithIdentifiers:");
}

id objc_msgSend_suspendActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendActivity:");
}

id objc_msgSend_suspendPlugin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendPlugin:");
}

id objc_msgSend_suspendRequestDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendRequestDate");
}

id objc_msgSend_suspendable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendable");
}

id objc_msgSend_suspensionReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspensionReason");
}

id objc_msgSend_syncRequested(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syncRequested");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "synchronize");
}

id objc_msgSend_systemMemoryPressure(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemMemoryPressure");
}

id objc_msgSend_targetDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "targetDevice");
}

id objc_msgSend_targetWithPid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "targetWithPid:");
}

id objc_msgSend_taskIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskIdentifier");
}

id objc_msgSend_taskIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskIdentifiers");
}

id objc_msgSend_taskNameWithIdentifier_UID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskNameWithIdentifier:UID:");
}

id objc_msgSend_taskRequestForIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskRequestForIdentifier:");
}

id objc_msgSend_taskState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskState");
}

id objc_msgSend_taskWithName_intervalDuration_withLogger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskWithName:intervalDuration:withLogger:");
}

id objc_msgSend_tasksNoLongerEligible(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tasksNoLongerEligible");
}

id objc_msgSend_tasksNoLongerEligibleFromTasks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tasksNoLongerEligibleFromTasks:");
}

id objc_msgSend_tempDelay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tempDelay");
}

id objc_msgSend_terminalEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminalEvent");
}

id objc_msgSend_testModeConstraintsApplyToActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "testModeConstraintsApplyToActivity:");
}

id objc_msgSend_testModeConstraintsRequireOverridingDecisionWithScores_ignoredPolicies_honoredPolicies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "testModeConstraintsRequireOverridingDecisionWithScores:ignoredPolicies:honoredPolicies:");
}

id objc_msgSend_testModeParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "testModeParameters");
}

id objc_msgSend_testingOverride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "testingOverride");
}

id objc_msgSend_thermalPressureWithState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "thermalPressureWithState:");
}

id objc_msgSend_thresholdScoreForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "thresholdScoreForActivity:");
}

id objc_msgSend_timeInMinutesSinceLastEvaluation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeInMinutesSinceLastEvaluation");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSince1970WithTimeZoneOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSince1970WithTimeZoneOffset:");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeZone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeZone");
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timer");
}

id objc_msgSend_timerWithCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timerWithCallback:");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timestamp");
}

id objc_msgSend_timewiseEligibleAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timewiseEligibleAtDate:");
}

id objc_msgSend_timewiseEligibleAtDate_withLPMWindowExtension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timewiseEligibleAtDate:withLPMWindowExtension:");
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "token");
}

id objc_msgSend_top10Hits(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "top10Hits");
}

id objc_msgSend_top1Hits(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "top1Hits");
}

id objc_msgSend_top3Hits(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "top3Hits");
}

id objc_msgSend_top5Hits(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "top5Hits");
}

id objc_msgSend_topNAppsUserHasLaunchedInSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "topNAppsUserHasLaunchedInSet:");
}

id objc_msgSend_topNPrediction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "topNPrediction");
}

id objc_msgSend_topNPredictionQueryForStream_withPredicate_withTopN_withMinLikelihood_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "topNPredictionQueryForStream:withPredicate:withTopN:withMinLikelihood:");
}

id objc_msgSend_topPredictionsFromScores_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "topPredictionsFromScores:");
}

id objc_msgSend_totalLaunchActivationTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalLaunchActivationTime");
}

id objc_msgSend_totalPredictionIntervals(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalPredictionIntervals");
}

id objc_msgSend_totalResumeActivationTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalResumeActivationTime");
}

id objc_msgSend_trackNOIAnyForInterfaceSubtype_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trackNOIAnyForInterfaceSubtype:options:");
}

id objc_msgSend_trackNOIAnyForInterfaceType_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trackNOIAnyForInterfaceType:options:");
}

id objc_msgSend_trackingBundlesWithParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trackingBundlesWithParameters:");
}

id objc_msgSend_transferSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transferSize");
}

id objc_msgSend_transferSizeIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transferSizeIndex:");
}

id objc_msgSend_transferSizeType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transferSizeType");
}

id objc_msgSend_transitionDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transitionDate");
}

id objc_msgSend_transitionDates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transitionDates");
}

id objc_msgSend_treatmentID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "treatmentID");
}

id objc_msgSend_treatmentId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "treatmentId");
}

id objc_msgSend_triggerABCCaseForActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerABCCaseForActivities:");
}

id objc_msgSend_triggerWithTimeInterval_repeats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerWithTimeInterval:repeats:");
}

id objc_msgSend_triggers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggers");
}

id objc_msgSend_triggersRestart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggersRestart");
}

id objc_msgSend_truncateFileAtOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "truncateFileAtOffset:");
}

id objc_msgSend_trySchedulingBefore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trySchedulingBefore");
}

id objc_msgSend_ttrURLWithTitle_withDescription_withStateDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ttrURLWithTitle:withDescription:withStateDictionary:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "type");
}

id objc_msgSend_unCenter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unCenter");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_unconstrainedNetworkAvailableForActivity_withContext_withRationale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unconstrainedNetworkAvailableForActivity:withContext:withRationale:");
}

id objc_msgSend_underlyingAssertion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "underlyingAssertion");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueGroupName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueGroupName");
}

id objc_msgSend_unload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unload");
}

id objc_msgSend_unlockedDecrementBy_whileModulatingBudget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unlockedDecrementBy:whileModulatingBudget:");
}

id objc_msgSend_unnotifiedIsDataAvailableForClassC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unnotifiedIsDataAvailableForClassC");
}

id objc_msgSend_unprotectedEvaluateRateLimitedActivity_forIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unprotectedEvaluateRateLimitedActivity:forIdentifier:");
}

id objc_msgSend_unprotectedEvaluateScoreAndRunActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unprotectedEvaluateScoreAndRunActivities:");
}

id objc_msgSend_unprotectedInitializeMonitorForDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unprotectedInitializeMonitorForDevice:");
}

id objc_msgSend_unprotectedIsAlreadyPendingActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unprotectedIsAlreadyPendingActivity:");
}

id objc_msgSend_unprotectedIsRemoteDeviceConnected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unprotectedIsRemoteDeviceConnected:");
}

id objc_msgSend_unprotectedIsRemoteDeviceNearby_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unprotectedIsRemoteDeviceNearby:");
}

id objc_msgSend_unregisterForDiskVolumeMonitoring_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterForDiskVolumeMonitoring:");
}

id objc_msgSend_unregisterForPurgeableSpaceWithActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterForPurgeableSpaceWithActivity:");
}

id objc_msgSend_unregisterForRemoteDeviceActiveNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterForRemoteDeviceActiveNotifications");
}

id objc_msgSend_unregisterForRemoteDeviceWithActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterForRemoteDeviceWithActivity:");
}

id objc_msgSend_unregisterForUpdates_withIdentifier_forUseCase_forDeviceTypes_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterForUpdates:withIdentifier:forUseCase:forDeviceTypes:withError:");
}

id objc_msgSend_unregisterForUpdates_withIdentifier_forUseCase_forDevices_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterForUpdates:withIdentifier:forUseCase:forDevices:withError:");
}

id objc_msgSend_unregisterRemoteDeviceWakeStateWithActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterRemoteDeviceWakeStateWithActivity:");
}

id objc_msgSend_unregisterSystemTaskWithIdentifier_withPID_withUID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterSystemTaskWithIdentifier:withPID:withUID:completionHandler:");
}

id objc_msgSend_unsafe_applicationBundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsafe_applicationBundleIdentifier");
}

id objc_msgSend_unsafe_mainApplicationBundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsafe_mainApplicationBundleIdentifier");
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedCharValue");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongValue");
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedShortValue");
}

id objc_msgSend_updateActivity_withLimitResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateActivity:withLimitResponse:");
}

id objc_msgSend_updateActivity_withParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateActivity:withParameters:");
}

id objc_msgSend_updateActivityCanceled_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateActivityCanceled:context:");
}

id objc_msgSend_updateActivityCompleted_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateActivityCompleted:context:");
}

id objc_msgSend_updateActivityName_activityDescription_forIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateActivityName:activityDescription:forIdentifier:");
}

id objc_msgSend_updateActivityStarted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateActivityStarted:");
}

id objc_msgSend_updateActivityStarted_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateActivityStarted:context:");
}

id objc_msgSend_updateAppLaunchedRecently_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAppLaunchedRecently:");
}

id objc_msgSend_updateBlueListStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBlueListStatus:");
}

id objc_msgSend_updateBudget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBudget:");
}

id objc_msgSend_updateBudgetsForNextSlot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBudgetsForNextSlot");
}

id objc_msgSend_updateCapacity_forBudgetWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCapacity:forBudgetWithName:");
}

id objc_msgSend_updateCarryStatusWithContext_withKnowledgeStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCarryStatusWithContext:withKnowledgeStore:");
}

id objc_msgSend_updateCompletionStatus_forOngoingTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCompletionStatus:forOngoingTask:");
}

id objc_msgSend_updateContextStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateContextStore:");
}

id objc_msgSend_updateControlAction_withEffort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateControlAction:withEffort:");
}

id objc_msgSend_updateCurrentRecommendations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCurrentRecommendations");
}

id objc_msgSend_updateDataDurationWithTrigger_andState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDataDurationWithTrigger:andState:");
}

id objc_msgSend_updateDataForActivity_bytesOnCell_bytesOnCellExpensive_bytesOnCellInexpensive_bytesOnWiFiExpensive_bytesOnWiFiInexpensive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDataForActivity:bytesOnCell:bytesOnCellExpensive:bytesOnCellInexpensive:bytesOnWiFiExpensive:bytesOnWiFiInexpensive:");
}

id objc_msgSend_updateDependenciesPreClearedOnActivity_withValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDependenciesPreClearedOnActivity:withValue:");
}

id objc_msgSend_updateDeviceLost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDeviceLost:");
}

id objc_msgSend_updateDeviceNearby_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDeviceNearby:");
}

id objc_msgSend_updateEnergyDurationWithTrigger_andState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateEnergyDurationWithTrigger:andState:");
}

id objc_msgSend_updateFactors(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFactors");
}

id objc_msgSend_updateFastPassShallYield_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFastPassShallYield:");
}

id objc_msgSend_updateFeatureCodesForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFeatureCodesForActivity:");
}

id objc_msgSend_updateFeatureDurationActivityCompleted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFeatureDurationActivityCompleted:");
}

id objc_msgSend_updateFreezer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFreezer:");
}

id objc_msgSend_updateGlobalBudget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateGlobalBudget:");
}

id objc_msgSend_updateHeavyDiskUsage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateHeavyDiskUsage:");
}

id objc_msgSend_updateKernelWithDASIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateKernelWithDASIdentifiers");
}

id objc_msgSend_updateLaunchesForProcess_withInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateLaunchesForProcess:withInterval:");
}

id objc_msgSend_updateModel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateModel");
}

id objc_msgSend_updateOngoingTask_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateOngoingTask:completionHandler:");
}

id objc_msgSend_updatePNWStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePNWStatus:");
}

id objc_msgSend_updatePolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePolicy");
}

id objc_msgSend_updatePredictedInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePredictedInterval");
}

id objc_msgSend_updatePredictionsAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePredictionsAtDate:");
}

id objc_msgSend_updateProgress_forIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateProgress:forIdentifier:");
}

id objc_msgSend_updateProgressForOngoingTask_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateProgressForOngoingTask:completionHandler:");
}

id objc_msgSend_updateRationaleForTransferSize_withActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRationaleForTransferSize:withActivity:");
}

id objc_msgSend_updateRecentApplications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRecentApplications");
}

id objc_msgSend_updateResumesForProcess_withInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateResumesForProcess:withInterval:");
}

id objc_msgSend_updateScores(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateScores");
}

id objc_msgSend_updateSuspendRequestDate_forActivity_withReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateSuspendRequestDate:forActivity:withReason:");
}

id objc_msgSend_updateSwapScoresWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateSwapScoresWithDictionary:");
}

id objc_msgSend_updateSystemConstraint_withState_withDaemon_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateSystemConstraint:withState:withDaemon:");
}

id objc_msgSend_updateSystemConstraintsWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateSystemConstraintsWithContext:");
}

id objc_msgSend_updateTaskRequestWithIdentifier_descriptor_withPID_withUID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTaskRequestWithIdentifier:descriptor:withPID:withUID:completionHandler:");
}

id objc_msgSend_updateTimeline(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTimeline");
}

id objc_msgSend_updateTitle_andDescription_forIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTitle:andDescription:forIdentifier:");
}

id objc_msgSend_updateTrialParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTrialParameters");
}

id objc_msgSend_updateTrialParametersWithManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTrialParametersWithManager:");
}

id objc_msgSend_updateWithtask_prewarmingStartDate_launchStartDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWithtask:prewarmingStartDate:launchStartDate:");
}

id objc_msgSend_updateiCPLTasksBlocked_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateiCPLTasksBlocked:");
}

id objc_msgSend_uploadSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uploadSize");
}

id objc_msgSend_uptime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uptime");
}

id objc_msgSend_uptimeSeconds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uptimeSeconds");
}

id objc_msgSend_usageTimeline(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usageTimeline");
}

id objc_msgSend_usageTimelineForWidgetBudgetID_withStartDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usageTimelineForWidgetBudgetID:withStartDate:");
}

id objc_msgSend_usageToDateWithOptionsFor_nameKind_options_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usageToDateWithOptionsFor:nameKind:options:reply:");
}

id objc_msgSend_useStatisticalModelForTriggersRestart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useStatisticalModelForTriggersRestart");
}

id objc_msgSend_userContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userContext");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userRequestedBackupKeyPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userRequestedBackupKeyPath");
}

id objc_msgSend_userRequestedBackupTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userRequestedBackupTask");
}

id objc_msgSend_user_requested_backup_task(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "user_requested_backup_task");
}

id objc_msgSend_utility(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "utility");
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uuid");
}

id objc_msgSend_validClassesForUserInfoSerialization(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validClassesForUserInfoSerialization");
}

id objc_msgSend_validateBGTaskRequestWithActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateBGTaskRequestWithActivity:");
}

id objc_msgSend_validateCTBGTaskRequestWithActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateCTBGTaskRequestWithActivity:");
}

id objc_msgSend_validateConfigurationForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateConfigurationForActivity:");
}

id objc_msgSend_validateFastPassSubmissionForActivity_featureCodes_service_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateFastPassSubmissionForActivity:featureCodes:service:");
}

id objc_msgSend_validateFeatureCodes_forToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateFeatureCodes:forToken:");
}

id objc_msgSend_validatedStringFromStoredValue_withAllowedNames_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validatedStringFromStoredValue:withAllowedNames:");
}

id objc_msgSend_validityDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validityDuration");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "value");
}

id objc_msgSend_value_withObjCType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "value:withObjCType:");
}

id objc_msgSend_valueAtDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueAtDate:");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueWithPointer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueWithPointer:");
}

id objc_msgSend_wakeState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wakeState");
}

id objc_msgSend_wakeStateDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wakeStateDescription");
}

id objc_msgSend_warnBGTaskClientsForActivitiesAboutToExpire_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "warnBGTaskClientsForActivitiesAboutToExpire:");
}

id objc_msgSend_warningHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "warningHandler");
}

id objc_msgSend_wasActivityAllowedToRun_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wasActivityAllowedToRun:");
}

id objc_msgSend_wasDeferred(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wasDeferred");
}

id objc_msgSend_wasForceRun(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wasForceRun");
}

id objc_msgSend_watchIsPaired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "watchIsPaired");
}

id objc_msgSend_weekday(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "weekday");
}

id objc_msgSend_weightForActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "weightForActivity:");
}

id objc_msgSend_widgetBudgetID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "widgetBudgetID");
}

id objc_msgSend_widgetBudgetIDFromBudgetName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "widgetBudgetIDFromBudgetName:");
}

id objc_msgSend_widgetBudgetModulator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "widgetBudgetModulator");
}

id objc_msgSend_widgetID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "widgetID");
}

id objc_msgSend_widgetRefreshBudgetManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "widgetRefreshBudgetManager");
}

id objc_msgSend_widgetRefreshStatisticsWithStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "widgetRefreshStatisticsWithStore:");
}

id objc_msgSend_widgetRefreshUsageTracker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "widgetRefreshUsageTracker");
}

id objc_msgSend_widgetViewsStatisticsWithStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "widgetViewsStatisticsWithStore:");
}

id objc_msgSend_wifiInterfaceClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiInterfaceClass:");
}

id objc_msgSend_wifiPredictionTimeline(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiPredictionTimeline");
}

id objc_msgSend_wifiQuality_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiQuality:");
}

id objc_msgSend_willExpireBGTaskActivities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "willExpireBGTaskActivities:");
}

id objc_msgSend_window(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "window");
}

id objc_msgSend_windowWithAssigner_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "windowWithAssigner:");
}

id objc_msgSend_wiredInterfaceClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wiredInterfaceClass:");
}

id objc_msgSend_wiredQuality_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wiredQuality:");
}

id objc_msgSend_writeData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeData:");
}

id objc_msgSend_writeData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeData:error:");
}

id objc_msgSend_writeExperiment_withStreams_toFileHandle_withLastWrittenInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeExperiment:withStreams:toFileHandle:withLastWrittenInfo:");
}

id objc_msgSend_writeExperiments_atFileName_withTask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeExperiments:atFileName:withTask:");
}

id objc_msgSend_writeStream_toFileHandle_withEventPredicate_withStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeStream:toFileHandle:withEventPredicate:withStore:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToFileWithContextDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToFileWithContextDictionary:");
}

id objc_msgSend_zNormalizeArray_intoQuantizedVector_withScaleFactor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "zNormalizeArray:intoQuantizedVector:withScaleFactor:");
}
